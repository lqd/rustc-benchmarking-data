--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name http --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 -C metadata=b66bdc95724b2f87 -C extra-filename=-b66bdc95724b2f87 --out-dir /usr/home/liquid/tmp/.tmp1yZOOi/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmp1yZOOi/target/debug/deps --extern bytes=/usr/home/liquid/tmp/.tmp1yZOOi/target/debug/deps/libbytes-364de0d175a5b11a.rmeta --extern fnv=/usr/home/liquid/tmp/.tmp1yZOOi/target/debug/deps/libfnv-6511979a28d6c849.rmeta --extern itoa=/usr/home/liquid/tmp/.tmp1yZOOi/target/debug/deps/libitoa-468b4114fff5eb0c.rmeta -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-http-0.2.6-Debug-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                      
--------------------------------------------------------------------------------
11,457,845,324 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                    file:function
--------------------------------------------------------------------------------
995,963,123 ( 8.69%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
320,203,680 ( 2.79%)  ./malloc/malloc.c:_int_free
305,082,334 ( 2.66%)  ./malloc/malloc.c:_int_malloc
198,010,381 ( 1.73%)  ./malloc/malloc.c:malloc
190,271,418 ( 1.66%)  ???:llvm::FPPassManager::runOnFunction(llvm::Function&)
149,704,751 ( 1.31%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/bit_set.rs:<rustc_index::bit_set::BitSet<rustc_borrowck::dataflow::BorrowIndex>>::union::<rustc_index::bit_set::BitSet<rustc_borrowck::dataflow::BorrowIndex>>
118,292,467 ( 1.03%)  ???:llvm::SelectionDAG::Combine(llvm::CombineLevel, llvm::AAResults*, llvm::CodeGenOpt::Level)
 97,379,061 ( 0.85%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/bit_set.rs:<rustc_index::bit_set::BitSet<rustc_mir_dataflow::move_paths::MovePathIndex>>::union::<rustc_index::bit_set::BitSet<rustc_mir_dataflow::move_paths::MovePathIndex>>
 92,192,701 ( 0.80%)  ./malloc/malloc.c:free
 67,068,989 ( 0.59%)  ???:(anonymous namespace)::Verifier::visitInstruction(llvm::Instruction&)
 61,947,567 ( 0.54%)  ???:(anonymous namespace)::RegAllocFast::allocateBasicBlock(llvm::MachineBasicBlock&)
 56,213,525 ( 0.49%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
 56,073,328 ( 0.49%)  ???:llvm::MachineInstr::addOperand(llvm::MachineFunction&, llvm::MachineOperand const&)
 51,407,399 ( 0.45%)  ./malloc/malloc.c:malloc_consolidate
 51,101,940 ( 0.45%)  ???:llvm::raw_svector_ostream::write_impl(char const*, unsigned long)
 47,678,729 ( 0.42%)  ???:llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const
 45,157,763 ( 0.39%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 41,498,130 ( 0.36%)  ???:llvm::PMDataManager::verifyPreservedAnalysis(llvm::Pass*)
 40,966,671 ( 0.36%)  ???:(anonymous namespace)::Verifier::visitMDNode(llvm::MDNode const&, (anonymous namespace)::Verifier::AreDebugLocsAllowed)
 38,524,089 ( 0.34%)  ???:llvm::MCExpr::evaluateAsRelocatableImpl(llvm::MCValue&, llvm::MCAssembler const*, llvm::MCAsmLayout const*, llvm::MCFixup const*, llvm::DenseMap<llvm::MCSection const*, unsigned long, llvm::DenseMapInfo<llvm::MCSection const*>, llvm::detail::DenseMapPair<llvm::MCSection const*, unsigned long> > const*, bool) const
 35,853,153 ( 0.31%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
 35,728,094 ( 0.31%)  ???:llvm::SelectionDAGISel::SelectCodeCommon(llvm::SDNode*, unsigned char const*, unsigned int)
 35,377,103 ( 0.31%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/fulfill.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
 34,382,113 ( 0.30%)  ./malloc/malloc.c:unlink_chunk.constprop.0
 34,349,497 ( 0.30%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
 32,897,292 ( 0.29%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
 32,600,804 ( 0.28%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
 32,105,002 ( 0.28%)  ???:(anonymous namespace)::VarLocBasedLDV::process(llvm::MachineInstr&, (anonymous namespace)::VarLocBasedLDV::OpenRangesSet&, (anonymous namespace)::VarLocBasedLDV::VarLocMap&, llvm::SmallVector<(anonymous namespace)::VarLocBasedLDV::TransferDebugPair, 4u>&)
 25,884,515 ( 0.23%)  ???:llvm::ScheduleDAGSDNodes::BuildSchedUnits()
 25,559,208 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs:<rustc_infer::infer::type_variable::TypeVariableTable>::probe
 24,413,772 ( 0.21%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
 22,894,014 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs:rustc_mir_dataflow::drop_flag_effects::on_all_children_bits::is_terminal_path
 22,681,340 ( 0.20%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.14.0/src/unify/mod.rs:<ena::unify::UnificationTable<ena::unify::backing_vec::InPlace<rustc_type_ir::IntVid, &mut alloc::vec::Vec<ena::unify::VarValue<rustc_type_ir::IntVid>>, &mut rustc_infer::infer::undo_log::InferCtxtUndoLogs>>>::uninlined_get_root_key
 22,404,360 ( 0.20%)  ???:llvm::MCAsmLayout::getSymbolOffset(llvm::MCSymbol const&) const
 22,387,571 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/zip.rs:<rustc_index::bit_set::BitSet<rustc_borrowck::dataflow::BorrowIndex>>::union::<rustc_index::bit_set::BitSet<rustc_borrowck::dataflow::BorrowIndex>>
 21,903,946 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
 21,880,950 ( 0.19%)  ???:llvm::TargetRegisterInfo::shouldRealignStack(llvm::MachineFunction const&) const
 21,562,168 ( 0.19%)  ???:llvm::TargetLoweringBase::getTypeConversion(llvm::LLVMContext&, llvm::EVT) const
 21,220,372 ( 0.19%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 21,209,962 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
 20,951,676 ( 0.18%)  ???:(anonymous namespace)::X86MCCodeEmitter::emitPrefixImpl(unsigned int&, llvm::MCInst const&, llvm::MCSubtargetInfo const&, llvm::raw_ostream&) const
 20,461,053 ( 0.18%)  ???:llvm::SmallSet<llvm::Register, 32u, std::less<llvm::Register> >::insert(llvm::Register const&)
 20,423,267 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 20,221,278 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 19,953,282 ( 0.17%)  ???:(anonymous namespace)::TwoAddressInstructionPass::runOnMachineFunction(llvm::MachineFunction&)
 19,688,298 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::find_parent_node
 19,391,015 ( 0.17%)  ???:(anonymous namespace)::Verifier::verify(llvm::Function const&) [clone .llvm.4153962086227604281]
 19,307,255 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.14.0/src/unify/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
 19,111,344 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_middle::hir::map::Map>::attrs
 18,778,112 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<&rustc_middle::ty::TyS as rustc_middle::ty::fold::TypeFoldable>::super_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
 18,505,033 ( 0.16%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 18,405,002 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
 18,292,825 ( 0.16%)  ???:llvm::MCAsmLayout::getFragmentOffset(llvm::MCFragment const*) const
 18,079,278 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
 17,911,255 ( 0.16%)  ./malloc/malloc.c:realloc
 17,883,718 ( 0.16%)  ???:(anonymous namespace)::Verifier::visitCallBase(llvm::CallBase&)
 17,800,744 ( 0.16%)  ???:llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)
 17,732,686 ( 0.15%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::CalculateFromScratch(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::BatchUpdateInfo*)
 17,350,265 ( 0.15%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
 17,336,379 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
 16,864,629 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/macro_parser.rs:rustc_expand::mbe::macro_parser::parse_tt
 16,782,268 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
 16,486,253 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs:<rustc_borrowck::MirBorrowckCtxt>::access_place
 16,461,086 ( 0.14%)  ???:llvm::InstrEmitter::EmitMachineNode(llvm::SDNode*, bool, bool, llvm::DenseMap<llvm::SDValue, llvm::Register, llvm::DenseMapInfo<llvm::SDValue>, llvm::detail::DenseMapPair<llvm::SDValue, llvm::Register> >&)
 16,286,578 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/ast.rs:<rustc_ast::ast::ExprKind as core::clone::Clone>::clone
 16,270,000 ( 0.14%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_sse2_unaligned_erms
 16,144,900 ( 0.14%)  ???:(anonymous namespace)::VarLocBasedLDV::ExtendRanges(llvm::MachineFunction&, llvm::TargetPassConfig*) [clone .llvm.4451506318407214204]
 15,955,982 ( 0.14%)  ???:llvm::coro::declaresIntrinsics(llvm::Module const&, std::initializer_list<llvm::StringRef>)
 15,951,536 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::attrs
 15,926,952 ( 0.14%)  ???:llvm::TargetRegisterInfo::checkAllSuperRegsMarked(llvm::BitVector const&, llvm::ArrayRef<unsigned short>) const
 15,686,509 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.14.0/src/unify/mod.rs:<ena::unify::UnificationTable<ena::unify::backing_vec::InPlace<rustc_type_ir::IntVid, &mut alloc::vec::Vec<ena::unify::VarValue<rustc_type_ir::IntVid>>, &mut rustc_infer::infer::undo_log::InferCtxtUndoLogs>>>::probe_value::<rustc_type_ir::IntVid>
 15,458,252 ( 0.13%)  ???:llvm::SelectionDAG::MorphNodeTo(llvm::SDNode*, unsigned int, llvm::SDVTList, llvm::ArrayRef<llvm::SDValue>)
 15,385,111 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
 15,293,484 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::source_map::SourceMap>::lookup_source_file_idx
 15,293,299 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 15,237,654 ( 0.13%)  ???:llvm::calculateDbgEntityHistory(llvm::MachineFunction const*, llvm::TargetRegisterInfo const*, llvm::DbgValueHistoryMap&, llvm::DbgLabelInstrMap&)
 15,129,105 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/freshen.rs:<rustc_infer::infer::freshen::TypeFreshener as rustc_middle::ty::fold::TypeFolder>::fold_ty
 15,116,722 ( 0.13%)  ???:llvm::MetadataTracking::track(void*, llvm::Metadata&, llvm::PointerUnion<llvm::MetadataAsValue*, llvm::Metadata*>)
 15,066,065 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
 15,065,639 ( 0.13%)  ???:llvm::DAGTypeLegalizer::run()
 15,009,510 ( 0.13%)  ???:llvm::MCObjectStreamer::emitBytes(llvm::StringRef)
 14,951,606 ( 0.13%)  ???:(anonymous namespace)::SelectionDAGLegalize::LegalizeOp(llvm::SDNode*) [clone .llvm.8386621111310650999]
 14,882,281 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_transform/src/simplify.rs:<rustc_mir_transform::simplify::CfgSimplifier>::simplify
 14,826,776 ( 0.13%)  ???:llvm::SelectionDAG::Legalize()
 14,727,762 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/bit_set.rs:<rustc_index::bit_set::HybridBitSet<rustc_mir_dataflow::move_paths::MovePathIndex>>::insert
 14,476,695 ( 0.13%)  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:__strncmp_avx2
 14,434,327 ( 0.13%)  ???:(anonymous namespace)::PEI::runOnMachineFunction(llvm::MachineFunction&)
 14,219,336 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
 14,193,332 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/zip.rs:<rustc_index::bit_set::BitSet<rustc_mir_dataflow::move_paths::MovePathIndex>>::union::<rustc_index::bit_set::BitSet<rustc_mir_dataflow::move_paths::MovePathIndex>>
 14,074,294 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/fulfill.rs:<rustc_trait_selection::traits::fulfill::FulfillProcessor>::progress_changed_obligations
 14,059,298 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<std::collections::hash::map::HashMap<rustc_middle::middle::region::Scope, (rustc_middle::middle::region::Scope, u32), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::get::<rustc_middle::middle::region::Scope>
 14,043,314 ( 0.12%)  ???:(anonymous namespace)::Verifier::verifyFunctionAttrs(llvm::FunctionType*, llvm::AttributeList, llvm::Value const*, bool)
 14,031,438 ( 0.12%)  ???:(anonymous namespace)::X86MCInstLower::Lower(llvm::MachineInstr const*, llvm::MCInst&) const
 13,657,611 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump
 13,615,160 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::TokenCursor>::next
 13,598,105 ( 0.12%)  ???:llvm::MCContext::getOrCreateSymbol(llvm::Twine const&)
 13,564,584 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 13,522,773 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/traversal.rs:<rustc_middle::mir::traversal::Postorder>::traverse_successor
 13,364,614 ( 0.12%)  ./stdlib/msort.c:msort_with_tmp.part.0
 13,206,163 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
 13,021,480 ( 0.11%)  ???:llvm::FunctionLoweringInfo::set(llvm::Function const&, llvm::MachineFunction&, llvm::SelectionDAG*)
 12,964,720 ( 0.11%)  ???:(anonymous namespace)::X86MCCodeEmitter::encodeInstruction(llvm::MCInst const&, llvm::raw_ostream&, llvm::SmallVectorImpl<llvm::MCFixup>&, llvm::MCSubtargetInfo const&) const
 12,820,051 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::PredicateKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 12,792,231 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_middle::ty::subst::SubstFolder as rustc_middle::ty::fold::TypeFolder>::fold_ty
 12,602,988 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.14.0/src/snapshot_vec.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
 12,564,647 ( 0.11%)  ./malloc/malloc.c:_int_realloc
 12,487,686 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
 12,254,355 ( 0.11%)  ???:llvm::FoldingSetBase::FindNodeOrInsertPos(llvm::FoldingSetNodeID const&, void*&, llvm::FoldingSetBase::FoldingSetInfo const&)
 12,238,377 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_predicate
 12,029,585 ( 0.10%)  ???:llvm::SmallPtrSetImplBase::insert_imp_big(void const*)
 11,892,774 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
 11,802,333 ( 0.10%)  ???:llvm::SelectionDAG::getConstant(llvm::ConstantInt const&, llvm::SDLoc const&, llvm::EVT, bool, bool)
 11,781,504 ( 0.10%)  ???:llvm::MachineFunction::CreateMachineInstr(llvm::MCInstrDesc const&, llvm::DebugLoc const&, bool)
 11,768,544 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs:rustc_expand::mbe::macro_parser::parse_tt
 11,709,493 ( 0.10%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms
 11,499,173 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::maybe_lint_level_root_bounded

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/macro_parser.rs
--------------------------------------------------------------------------------
Ir                 

-- line 90 ----------------------------------------
        .           use std::collections::hash_map::Entry::{Occupied, Vacant};
        .           use std::mem;
        .           use std::ops::{Deref, DerefMut};
        .           
        .           // To avoid costly uniqueness checks, we require that `MatchSeq` always has a nonempty body.
        .           
        .           /// Either a sequence of token trees or a single one. This is used as the representation of the
        .           /// sequence of tokens that make up a matcher.
  307,880 ( 0.00%)  #[derive(Clone)]
        .           enum TokenTreeOrTokenTreeSlice<'tt> {
        .               Tt(TokenTree),
   71,669 ( 0.00%)      TtSeq(&'tt [TokenTree]),
        .           }
        .           
        .           impl<'tt> TokenTreeOrTokenTreeSlice<'tt> {
        .               /// Returns the number of constituent top-level token trees of `self` (top-level in that it
        .               /// will not recursively descend into subtrees).
        .               fn len(&self) -> usize {
1,062,876 ( 0.01%)          match *self {
  106,166 ( 0.00%)              TtSeq(ref v) => v.len(),
        .                       Tt(ref tt) => tt.len(),
        .                   }
        .               }
        .           
        .               /// The `index`-th token tree of `self`.
        .               fn get_tt(&self, index: usize) -> TokenTree {
  178,463 ( 0.00%)          match *self {
  221,556 ( 0.00%)              TtSeq(ref v) => v[index].clone(),
  439,756 ( 0.00%)              Tt(ref tt) => tt.get_tt(index),
        .                   }
        .               }
        .           }
        .           
        .           /// An unzipping of `TokenTree`s... see the `stack` field of `MatcherPos`.
        .           ///
        .           /// This is used by `inner_parse_loop` to keep track of delimited submatchers that we have
        .           /// descended into.
   39,790 ( 0.00%)  #[derive(Clone)]
        .           struct MatcherTtFrame<'tt> {
        .               /// The "parent" matcher that we are descending into.
        .               elts: TokenTreeOrTokenTreeSlice<'tt>,
        .               /// The position of the "dot" in `elts` at the time we descended.
   19,895 ( 0.00%)      idx: usize,
        .           }
        .           
        .           type NamedMatchVec = SmallVec<[NamedMatch; 4]>;
        .           
        .           /// Represents a single "position" (aka "matcher position", aka "item"), as
        .           /// described in the module documentation.
        .           ///
        .           /// Here:
-- line 140 ----------------------------------------
-- line 147 ----------------------------------------
        .           ///   position refers to.
        .           ///
        .           /// It is important to distinguish these two lifetimes because we have a
        .           /// `SmallVec<TokenTreeOrTokenTreeSlice<'tt>>` below, and the destructor of
        .           /// that is considered to possibly access the data from its elements (it lacks
        .           /// a `#[may_dangle]` attribute). As a result, the compiler needs to know that
        .           /// all the elements in that `SmallVec` strictly outlive the root stack slot
        .           /// lifetime. By separating `'tt` from `'root`, we can show that.
1,541,647 ( 0.01%)  #[derive(Clone)]
        .           struct MatcherPos<'root, 'tt> {
        .               /// The token or sequence of tokens that make up the matcher
        .               top_elts: TokenTreeOrTokenTreeSlice<'tt>,
        .           
        .               /// The position of the "dot" in this matcher
   32,801 ( 0.00%)      idx: usize,
        .           
        .               /// For each named metavar in the matcher, we keep track of token trees matched against the
        .               /// metavar by the black box parser. In particular, there may be more than one match per
        .               /// metavar if we are in a repetition (each repetition matches each of the variables).
        .               /// Moreover, matchers and repetitions can be nested; the `matches` field is shared (hence the
        .               /// `Rc`) among all "nested" matchers. `match_lo`, `match_cur`, and `match_hi` keep track of
        .               /// the current position of the `self` matcher position in the shared `matches` list.
        .               ///
        .               /// Also, note that while we are descending into a sequence, matchers are given their own
        .               /// `matches` vector. Only once we reach the end of a full repetition of the sequence do we add
        .               /// all bound matches from the submatcher into the shared top-level `matches` vector. If `sep`
        .               /// and `up` are `Some`, then `matches` is _not_ the shared top-level list. Instead, if one
        .               /// wants the shared `matches`, one should use `up.matches`.
  131,204 ( 0.00%)      matches: Box<[Lrc<NamedMatchVec>]>,
        .               /// The position in `matches` corresponding to the first metavar in this matcher's sequence of
        .               /// token trees. In other words, the first metavar in the first token of `top_elts` corresponds
        .               /// to `matches[match_lo]`.
   32,801 ( 0.00%)      match_lo: usize,
        .               /// The position in `matches` corresponding to the metavar we are currently trying to match
        .               /// against the source token stream. `match_lo <= match_cur <= match_hi`.
        .               match_cur: usize,
        .               /// Similar to `match_lo` except `match_hi` is the position in `matches` of the _last_ metavar
        .               /// in this matcher.
   32,801 ( 0.00%)      match_hi: usize,
        .           
        .               // The following fields are used if we are matching a repetition. If we aren't, they should be
        .               // `None`.
        .               /// The KleeneOp of this sequence if we are in a repetition.
   32,801 ( 0.00%)      seq_op: Option<mbe::KleeneOp>,
        .           
        .               /// The separator if we are in a repetition.
        .               sep: Option<Token>,
        .           
        .               /// The "parent" matcher position if we are in a repetition. That is, the matcher position just
        .               /// before we enter the sequence.
   65,602 ( 0.00%)      up: Option<MatcherPosHandle<'root, 'tt>>,
        .           
        .               /// Specifically used to "unzip" token trees. By "unzip", we mean to unwrap the delimiters from
        .               /// a delimited token tree (e.g., something wrapped in `(` `)`) or to get the contents of a doc
        .               /// comment...
        .               ///
        .               /// When matching against matchers with nested delimited submatchers (e.g., `pat ( pat ( .. )
        .               /// pat ) pat`), we need to keep track of the matchers we are descending into. This stack does
        .               /// that where the bottom of the stack is the outermost matcher.
        .               /// Also, throughout the comments, this "descent" is often referred to as "unzipping"...
        .               stack: SmallVec<[MatcherTtFrame<'tt>; 1]>,
        .           }
        .           
        .           impl<'root, 'tt> MatcherPos<'root, 'tt> {
        .               /// Adds `m` as a named match for the `idx`-th metavar.
        .               fn push_match(&mut self, idx: usize, m: NamedMatch) {
  312,280 ( 0.00%)          let matches = Lrc::make_mut(&mut self.matches[idx]);
        .                   matches.push(m);
        .               }
        .           }
        .           
        .           // Lots of MatcherPos instances are created at runtime. Allocating them on the
        .           // heap is slow. Furthermore, using SmallVec<MatcherPos> to allocate them all
        .           // on the stack is also slow, because MatcherPos is quite a large type and
        .           // instances get moved around a lot between vectors, which requires lots of
-- line 221 ----------------------------------------
-- line 226 ----------------------------------------
        .           // and this type is used to encapsulate both cases.
        .           enum MatcherPosHandle<'root, 'tt> {
        .               Ref(&'root mut MatcherPos<'root, 'tt>),
        .               Box(Box<MatcherPos<'root, 'tt>>),
        .           }
        .           
        .           impl<'root, 'tt> Clone for MatcherPosHandle<'root, 'tt> {
        .               // This always produces a new Box.
  131,204 ( 0.00%)      fn clone(&self) -> Self {
   65,602 ( 0.00%)          MatcherPosHandle::Box(match *self {
   63,876 ( 0.00%)              MatcherPosHandle::Ref(ref r) => Box::new((**r).clone()),
        .                       MatcherPosHandle::Box(ref b) => b.clone(),
        .                   })
  196,806 ( 0.00%)      }
        .           }
        .           
        .           impl<'root, 'tt> Deref for MatcherPosHandle<'root, 'tt> {
        .               type Target = MatcherPos<'root, 'tt>;
        .               fn deref(&self) -> &Self::Target {
        .                   match *self {
        .                       MatcherPosHandle::Ref(ref r) => r,
        .                       MatcherPosHandle::Box(ref b) => b,
-- line 247 ----------------------------------------
-- line 272 ----------------------------------------
        .           
        .           /// A `ParseResult` where the `Success` variant contains a mapping of
        .           /// `MacroRulesNormalizedIdent`s to `NamedMatch`es. This represents the mapping
        .           /// of metavars to the token trees they bind to.
        .           crate type NamedParseResult = ParseResult<FxHashMap<MacroRulesNormalizedIdent, NamedMatch>>;
        .           
        .           /// Count how many metavars are named in the given matcher `ms`.
        .           pub(super) fn count_names(ms: &[TokenTree]) -> usize {
  184,292 ( 0.00%)      ms.iter().fold(0, |count, elt| {
   92,146 ( 0.00%)          count
  276,438 ( 0.00%)              + match *elt {
    7,388 ( 0.00%)                  TokenTree::Sequence(_, ref seq) => seq.num_captures,
    4,714 ( 0.00%)                  TokenTree::Delimited(_, ref delim) => count_names(&delim.tts),
        .                           TokenTree::MetaVar(..) => 0,
        .                           TokenTree::MetaVarDecl(..) => 1,
        .                           TokenTree::Token(..) => 0,
        .                       }
  230,365 ( 0.00%)      })
        .           }
        .           
        .           /// `len` `Vec`s (initially shared and empty) that will store matches of metavars.
        .           fn create_matches(len: usize) -> Box<[Lrc<NamedMatchVec>]> {
   32,213 ( 0.00%)      if len == 0 {
        .                   vec![]
        .               } else {
        .                   let empty_matches = Lrc::new(SmallVec::new());
        .                   vec![empty_matches; len]
        .               }
        .               .into_boxed_slice()
        .           }
        .           
        .           /// Generates the top-level matcher position in which the "dot" is before the first token of the
        .           /// matcher `ms`.
        .           fn initial_matcher_pos<'root, 'tt>(ms: &'tt [TokenTree]) -> MatcherPos<'root, 'tt> {
        .               let match_idx_hi = count_names(ms);
        .               let matches = create_matches(match_idx_hi);
  125,340 ( 0.00%)      MatcherPos {
        .                   // Start with the top level matcher given to us
        .                   top_elts: TtSeq(ms), // "elts" is an abbr. for "elements"
        .                   // The "dot" is before the first token of the matcher
        .                   idx: 0,
        .           
        .                   // Initialize `matches` to a bunch of empty `Vec`s -- one for each metavar in `top_elts`.
        .                   // `match_lo` for `top_elts` is 0 and `match_hi` is `matches.len()`. `match_cur` is 0 since
        .                   // we haven't actually matched anything yet.
-- line 316 ----------------------------------------
-- line 340 ----------------------------------------
        .           /// particular token tree.
        .           ///
        .           /// The width of each `MatchedSeq` in the `NamedMatch`, and the identity of
        .           /// the `MatchedNonterminal`s, will depend on the token tree it was applied
        .           /// to: each `MatchedSeq` corresponds to a single `TTSeq` in the originating
        .           /// token tree. The depth of the `NamedMatch` structure will therefore depend
        .           /// only on the nesting depth of `ast::TTSeq`s in the originating
        .           /// token tree it was derived from.
   72,320 ( 0.00%)  #[derive(Debug, Clone)]
        .           crate enum NamedMatch {
        .               MatchedSeq(Lrc<NamedMatchVec>),
        .               MatchedNonterminal(Lrc<Nonterminal>),
        .           }
        .           
        .           /// Takes a sequence of token trees `ms` representing a matcher which successfully matched input
        .           /// and an iterator of items that matched input and produces a `NamedParseResult`.
        .           fn nameize<I: Iterator<Item = NamedMatch>>(
-- line 356 ----------------------------------------
-- line 357 ----------------------------------------
        .               sess: &ParseSess,
        .               ms: &[TokenTree],
        .               mut res: I,
        .           ) -> NamedParseResult {
        .               // Recursively descend into each type of matcher (e.g., sequences, delimited, metavars) and make
        .               // sure that each metavar has _exactly one_ binding. If a metavar does not have exactly one
        .               // binding, then there is an error. If it does, then we insert the binding into the
        .               // `NamedParseResult`.
  171,039 ( 0.00%)      fn n_rec<I: Iterator<Item = NamedMatch>>(
        .                   sess: &ParseSess,
        .                   m: &TokenTree,
        .                   res: &mut I,
        .                   ret_val: &mut FxHashMap<MacroRulesNormalizedIdent, NamedMatch>,
        .               ) -> Result<(), (rustc_span::Span, String)> {
   91,519 ( 0.00%)          match *m {
        .                       TokenTree::Sequence(_, ref seq) => {
    2,377 ( 0.00%)                  for next_m in &seq.tts {
   21,504 ( 0.00%)                      n_rec(sess, next_m, res.by_ref(), ret_val)?
        .                           }
        .                       }
        .                       TokenTree::Delimited(_, ref delim) => {
    2,266 ( 0.00%)                  for next_m in &delim.tts {
   13,644 ( 0.00%)                      n_rec(sess, next_m, res.by_ref(), ret_val)?;
        .                           }
        .                       }
        .                       TokenTree::MetaVarDecl(span, _, None) => {
        .                           if sess.missing_fragment_specifiers.borrow_mut().remove(&span).is_some() {
        .                               return Err((span, "missing fragment specifier".to_string()));
        .                           }
        .                       }
   41,322 ( 0.00%)              TokenTree::MetaVarDecl(sp, bind_name, _) => match ret_val
   27,548 ( 0.00%)                  .entry(MacroRulesNormalizedIdent::new(bind_name))
        .                       {
        .                           Vacant(spot) => {
        .                               spot.insert(res.next().unwrap());
        .                           }
        .                           Occupied(..) => return Err((sp, format!("duplicated bind name: {}", bind_name))),
        .                       },
        .                       TokenTree::MetaVar(..) | TokenTree::Token(..) => (),
        .                   }
        .           
   15,549 ( 0.00%)          Ok(())
  124,392 ( 0.00%)      }
        .           
        .               let mut ret_val = FxHashMap::default();
        .               for m in ms {
   86,693 ( 0.00%)          match n_rec(sess, m, res.by_ref(), &mut ret_val) {
        .                       Ok(_) => {}
        .                       Err((sp, msg)) => return Error(sp, msg),
        .                   }
        .               }
        .           
   16,542 ( 0.00%)      Success(ret_val)
        .           }
        .           
        .           /// Performs a token equality check, ignoring syntax context (that is, an unhygienic comparison)
        .           fn token_name_eq(t1: &Token, t2: &Token) -> bool {
  341,460 ( 0.00%)      if let (Some((ident1, is_raw1)), Some((ident2, is_raw2))) = (t1.ident(), t2.ident()) {
        .                   ident1.name == ident2.name && is_raw1 == is_raw2
  478,044 ( 0.00%)      } else if let (Some(ident1), Some(ident2)) = (t1.lifetime(), t2.lifetime()) {
        .                   ident1.name == ident2.name
        .               } else {
  204,782 ( 0.00%)          t1.kind == t2.kind
        .               }
        .           }
        .           
        .           /// Process the matcher positions of `cur_items` until it is empty. In the process, this will
        .           /// produce more items in `next_items`, `eof_items`, and `bb_items`.
        .           ///
        .           /// For more info about the how this happens, see the module-level doc comments and the inline
        .           /// comments of this function.
-- line 427 ----------------------------------------
-- line 443 ----------------------------------------
        .               sess: &ParseSess,
        .               cur_items: &mut SmallVec<[MatcherPosHandle<'root, 'tt>; 1]>,
        .               next_items: &mut Vec<MatcherPosHandle<'root, 'tt>>,
        .               eof_items: &mut SmallVec<[MatcherPosHandle<'root, 'tt>; 1]>,
        .               bb_items: &mut SmallVec<[MatcherPosHandle<'root, 'tt>; 1]>,
        .               token: &Token,
        .           ) -> ParseResult<()> {
        .               // Pop items from `cur_items` until it is empty.
  673,320 ( 0.01%)      while let Some(mut item) = cur_items.pop() {
        .                   // When unzipped trees end, remove them. This corresponds to backtracking out of a
        .                   // delimited submatcher into which we already descended. In backtracking out again, we need
        .                   // to advance the "dot" past the delimiters in the outer matcher.
2,117,259 ( 0.02%)          while item.idx >= item.top_elts.len() {
   10,520 ( 0.00%)              match item.stack.pop() {
        .                           Some(MatcherTtFrame { elts, idx }) => {
   47,340 ( 0.00%)                      item.top_elts = elts;
   21,040 ( 0.00%)                      item.idx = idx + 1;
        .                           }
        .                           None => break,
        .                       }
        .                   }
        .           
        .                   // Get the current position of the "dot" (`idx`) in `item` and the number of token trees in
        .                   // the matcher (`len`).
        .                   let idx = item.idx;
        .                   let len = item.top_elts.len();
        .           
        .                   // If `idx >= len`, then we are at or past the end of the matcher of `item`.
  405,555 ( 0.00%)          if idx >= len {
        .                       // We are repeating iff there is a parent. If the matcher is inside of a repetition,
        .                       // then we could be at the end of a sequence or at the beginning of the next
        .                       // repetition.
   41,124 ( 0.00%)              if item.up.is_some() {
        .                           // At this point, regardless of whether there is a separator, we should add all
        .                           // matches from the complete repetition of the sequence to the shared, top-level
        .                           // `matches` list (actually, `up.matches`, which could itself not be the top-level,
        .                           // but anyway...). Moreover, we add another item to `cur_items` in which the "dot"
        .                           // is at the end of the `up` matcher. This ensures that the "dot" in the `up`
        .                           // matcher is also advanced sufficiently.
        .                           //
        .                           // NOTE: removing the condition `idx == len` allows trailing separators.
   56,936 ( 0.00%)                  if idx == len {
        .                               // Get the `up` matcher
        .                               let mut new_pos = item.up.clone().unwrap();
        .           
        .                               // Add matches from this repetition to the `matches` of `up`
   56,788 ( 0.00%)                      for idx in item.match_lo..item.match_hi {
  144,205 ( 0.00%)                          let sub = item.matches[idx].clone();
   86,523 ( 0.00%)                          new_pos.push_match(idx, MatchedSeq(sub));
        .                               }
        .           
        .                               // Move the "dot" past the repetition in `up`
   56,716 ( 0.00%)                      new_pos.match_cur = item.match_hi;
  170,364 ( 0.00%)                      new_pos.idx += 1;
        .                               cur_items.push(new_pos);
        .                           }
        .           
        .                           // Check if we need a separator.
   28,394 ( 0.00%)                  if idx == len && item.sep.is_some() {
        .                               // We have a separator, and it is the current token. We can advance past the
        .                               // separator token.
      188 ( 0.00%)                      if item.sep.as_ref().map_or(false, |sep| token_name_eq(token, sep)) {
      518 ( 0.00%)                          item.idx += 1;
        .                                   next_items.push(item);
        .                               }
        .                           }
        .                           // We don't need a separator. Move the "dot" back to the beginning of the matcher
        .                           // and try to match again UNLESS we are only allowed to have _one_ repetition.
   28,374 ( 0.00%)                  else if item.seq_op != Some(mbe::KleeneOp::ZeroOrOne) {
   56,740 ( 0.00%)                      item.match_cur = item.match_lo;
  113,480 ( 0.00%)                      item.idx = 0;
        .                               cur_items.push(item);
        .                           }
        .                       }
        .                       // If we are not in a repetition, then being at the end of a matcher means that we have
        .                       // reached the potential end of the input.
        .                       else {
        .                           eof_items.push(item);
        .                       }
        .                   }
        .                   // We are in the middle of a matcher.
        .                   else {
        .                       // Look at what token in the matcher we are trying to match the current token (`token`)
        .                       // against. Depending on that, we may generate new items.
  963,227 ( 0.01%)              match item.top_elts.get_tt(idx) {
        .                           // Need to descend into a sequence
   16,743 ( 0.00%)                  TokenTree::Sequence(sp, seq) => {
        .                               // Examine the case where there are 0 matches of this sequence. We are
        .                               // implicitly disallowing OneOrMore from having 0 matches here. Thus, that will
        .                               // result in a "no rules expected token" error by virtue of this matcher not
        .                               // working.
    7,220 ( 0.00%)                      if seq.kleene.op == mbe::KleeneOp::ZeroOrMore
        .                                   || seq.kleene.op == mbe::KleeneOp::ZeroOrOne
        .                               {
    6,970 ( 0.00%)                          let mut new_item = item.clone();
   13,940 ( 0.00%)                          new_item.match_cur += seq.num_captures;
   17,425 ( 0.00%)                          new_item.idx += 1;
   20,910 ( 0.00%)                          for idx in item.match_cur..item.match_cur + seq.num_captures {
   10,161 ( 0.00%)                              new_item.push_match(idx, MatchedSeq(Lrc::new(smallvec![])));
        .                                   }
        .                                   cur_items.push(new_item);
        .                               }
        .           
    3,610 ( 0.00%)                      let matches = create_matches(item.matches.len());
   43,320 ( 0.00%)                      cur_items.push(MatcherPosHandle::Box(Box::new(MatcherPos {
    3,610 ( 0.00%)                          stack: smallvec![],
        .                                   sep: seq.separator.clone(),
    3,610 ( 0.00%)                          seq_op: Some(seq.kleene.op),
        .                                   idx: 0,
   18,050 ( 0.00%)                          matches,
    7,220 ( 0.00%)                          match_lo: item.match_cur,
        .                                   match_cur: item.match_cur,
    7,220 ( 0.00%)                          match_hi: item.match_cur + seq.num_captures,
        .                                   up: Some(item),
   25,270 ( 0.00%)                          top_elts: Tt(TokenTree::Sequence(sp, seq)),
        .                               })));
        .                           }
        .           
        .                           // We need to match a metavar (but the identifier is invalid)... this is an error
        .                           TokenTree::MetaVarDecl(span, _, None) => {
        .                               if sess.missing_fragment_specifiers.borrow_mut().remove(&span).is_some() {
        .                                   return Error(span, "missing fragment specifier".to_string());
        .                               }
-- line 565 ----------------------------------------
-- line 568 ----------------------------------------
        .                           // We need to match a metavar with a valid ident... call out to the black-box
        .                           // parser by adding an item to `bb_items`.
        .                           TokenTree::MetaVarDecl(_, _, Some(kind)) => {
        .                               // Built-in nonterminals never start with these tokens, so we can eliminate
        .                               // them from consideration.
        .                               //
        .                               // We use the span of the metavariable declaration to determine any
        .                               // edition-specific matching behavior for non-terminals.
  245,935 ( 0.00%)                      if Parser::nonterminal_may_begin_with(kind, token) {
        .                                   bb_items.push(item);
        .                               }
        .                           }
        .           
        .                           // We need to descend into a delimited submatcher or a doc comment. To do this, we
        .                           // push the current matcher onto a stack and push a new item containing the
        .                           // submatcher onto `cur_items`.
        .                           //
        .                           // At the beginning of the loop, if we reach the end of the delimited submatcher,
        .                           // we pop the stack to backtrack out of the descent.
   31,055 ( 0.00%)                  seq @ (TokenTree::Delimited(..)
        .                           | TokenTree::Token(Token { kind: DocComment(..), .. })) => {
        .                               let lower_elts = mem::replace(&mut item.top_elts, Tt(seq));
    6,211 ( 0.00%)                      let idx = item.idx;
   43,477 ( 0.00%)                      item.stack.push(MatcherTtFrame { elts: lower_elts, idx });
   24,844 ( 0.00%)                      item.idx = 0;
        .                               cur_items.push(item);
        .                           }
        .           
        .                           // We just matched a normal token. We can just advance the parser.
  356,336 ( 0.00%)                  TokenTree::Token(t) if token_name_eq(&t, token) => {
  307,916 ( 0.00%)                      item.idx += 1;
        .                               next_items.push(item);
        .                           }
        .           
        .                           // There was another token that was not `token`... This means we can't add any
        .                           // rules. NOTE that this is not necessarily an error unless _all_ items in
        .                           // `cur_items` end up doing this. There may still be some other matchers that do
        .                           // end up working out.
        .                           TokenTree::Token(..) | TokenTree::MetaVar(..) => {}
        .                       }
  673,173 ( 0.01%)          }
  241,990 ( 0.00%)      }
        .           
        .               // Yay a successful parse (so far)!
        .               Success(())
        .           }
        .           
        .           /// Use the given sequence of token trees (`ms`) as a matcher. Match the token
        .           /// stream from the given `parser` against it and return the match.
   83,560 ( 0.00%)  pub(super) fn parse_tt(
        .               parser: &mut Cow<'_, Parser<'_>>,
        .               ms: &[TokenTree],
        .               macro_name: Ident,
        .           ) -> NamedParseResult {
        .               // A queue of possible matcher positions. We initialize it with the matcher position in which
        .               // the "dot" is before the first token of the first token tree in `ms`. `inner_parse_loop` then
        .               // processes all of these possible matcher positions and produces possible next positions into
        .               // `next_items`. After some post-processing, the contents of `next_items` replenish `cur_items`
        .               // and we start over again.
        .               //
        .               // This MatcherPos instance is allocated on the stack. All others -- and
        .               // there are frequently *no* others! -- are allocated on the heap.
        .               let mut initial = initial_matcher_pos(ms);
   41,780 ( 0.00%)      let mut cur_items = smallvec![MatcherPosHandle::Ref(&mut initial)];
        .               let mut next_items = Vec::new();
        .           
        .               loop {
        .                   // Matcher positions black-box parsed by parser.rs (`parser`)
        .                   let mut bb_items = SmallVec::new();
        .           
        .                   // Matcher positions that would be valid if the macro invocation was over now
        .                   let mut eof_items = SmallVec::new();
   98,192 ( 0.00%)          assert!(next_items.is_empty());
        .           
        .                   // Process `cur_items` until either we have finished the input or we need to get some
        .                   // parsing from the black-box parser done. The result is that `next_items` will contain a
        .                   // bunch of possible next matcher positions in `next_items`.
        .                   match inner_parse_loop(
        .                       parser.sess,
        .                       &mut cur_items,
        .                       &mut next_items,
-- line 648 ----------------------------------------
-- line 652 ----------------------------------------
        .                   ) {
        .                       Success(_) => {}
        .                       Failure(token, msg) => return Failure(token, msg),
        .                       Error(sp, msg) => return Error(sp, msg),
        .                       ErrorReported => return ErrorReported,
        .                   }
        .           
        .                   // inner parse loop handled all cur_items, so it's empty
   98,192 ( 0.00%)          assert!(cur_items.is_empty());
        .           
        .                   // We need to do some post processing after the `inner_parser_loop`.
        .                   //
        .                   // Error messages here could be improved with links to original rules.
        .           
        .                   // If we reached the EOF, check that there is EXACTLY ONE possible matcher. Otherwise,
        .                   // either the parse is ambiguous (which should never happen) or there is a syntax error.
  490,960 ( 0.00%)          if parser.token == token::Eof {
    7,352 ( 0.00%)              if eof_items.len() == 1 {
        .                           let matches =
   10,563 ( 0.00%)                      eof_items[0].matches.iter_mut().map(|dv| Lrc::make_mut(dv).pop().unwrap());
    5,514 ( 0.00%)                  return nameize(parser.sess, ms, matches);
        .                       } else if eof_items.len() > 1 {
        .                           return Error(
        .                               parser.token.span,
        .                               "ambiguity: multiple successful parses".to_string(),
        .                           );
        .                       } else {
        .                           return Failure(
        .                               Token::new(
-- line 680 ----------------------------------------
-- line 687 ----------------------------------------
        .                               ),
        .                               "missing tokens in macro arguments",
        .                           );
        .                       }
        .                   }
        .                   // Performance hack: eof_items may share matchers via Rc with other things that we want
        .                   // to modify. Dropping eof_items now may drop these refcounts to 1, preventing an
        .                   // unnecessary implicit clone later in Rc::make_mut.
  385,416 ( 0.00%)          drop(eof_items);
        .           
        .                   // If there are no possible next positions AND we aren't waiting for the black-box parser,
        .                   // then there is a syntax error.
  339,574 ( 0.00%)          if bb_items.is_empty() && next_items.is_empty() {
   84,734 ( 0.00%)              return Failure(parser.token.clone(), "no rules expected this token in macro call");
        .                   }
        .                   // Another possibility is that we need to call out to parse some rust nonterminal
        .                   // (black-box) parser. However, if there is not EXACTLY ONE of these, something is wrong.
  183,368 ( 0.00%)          else if (!bb_items.is_empty() && !next_items.is_empty()) || bb_items.len() > 1 {
        .                       let nts = bb_items
        .                           .iter()
        .                           .map(|item| match item.top_elts.get_tt(item.idx) {
        .                               TokenTree::MetaVarDecl(_, bind, Some(kind)) => format!("{} ('{}')", kind, bind),
        .                               _ => panic!(),
        .                           })
        .                           .collect::<Vec<String>>()
        .                           .join(" or ");
-- line 712 ----------------------------------------
-- line 721 ----------------------------------------
        .                                   n => format!("built-in NTs {} or {} other options.", nts, n),
        .                               }
        .                           ),
        .                       );
        .                   }
        .                   // Dump all possible `next_items` into `cur_items` for the next iteration.
        .                   else if !next_items.is_empty() {
        .                       // Now process the next token
  131,982 ( 0.00%)              cur_items.extend(next_items.drain(..));
   43,994 ( 0.00%)              parser.to_mut().bump();
        .                   }
        .                   // Finally, we have the case where we need to call the black-box parser to get some
        .                   // nonterminal.
        .                   else {
        .                       assert_eq!(bb_items.len(), 1);
        .           
   91,684 ( 0.00%)              let mut item = bb_items.pop().unwrap();
  321,850 ( 0.00%)              if let TokenTree::MetaVarDecl(span, _, Some(kind)) = item.top_elts.get_tt(item.idx) {
   45,842 ( 0.00%)                  let match_cur = item.match_cur;
        .                           // We use the span of the metavariable declaration to determine any
        .                           // edition-specific matching behavior for non-terminals.
  281,047 ( 0.00%)                  let nt = match parser.to_mut().parse_nonterminal(kind) {
        .                               Err(mut err) => {
        .                                   err.span_label(
        .                                       span,
        .                                       format!("while parsing argument for this `{}` macro fragment", kind),
        .                                   )
        .                                   .emit();
        .                                   return ErrorReported;
        .                               }
  275,052 ( 0.00%)                      Ok(nt) => nt,
        .                           };
  183,368 ( 0.00%)                  item.push_match(match_cur, MatchedNonterminal(Lrc::new(nt)));
  183,368 ( 0.00%)                  item.idx += 1;
  275,052 ( 0.00%)                  item.match_cur += 1;
        .                       } else {
        .                           unreachable!()
        .                       }
        .                       cur_items.push(item);
        .                   }
        .           
  179,672 ( 0.00%)          assert!(!cur_items.is_empty());
        .               }
   75,204 ( 0.00%)  }

2,427,891 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/macro_parser.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs
--------------------------------------------------------------------------------
Ir                  

-- line 293 ----------------------------------------
         .           
         .           #[allow(deprecated)]
         .           impl From<LayoutErr> for CollectionAllocErr {
         .               fn from(_: LayoutErr) -> Self {
         .                   CollectionAllocErr::CapacityOverflow
         .               }
         .           }
         .           
        30 ( 0.00%)  fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
 1,208,320 ( 0.01%)      match result {
         .                   Ok(x) => x,
         .                   Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
         .                   Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
         .               }
        60 ( 0.00%)  }
         .           
         .           /// FIXME: use `Layout::array` when we require a Rust version where it’s stable
         .           /// https://github.com/rust-lang/rust/issues/55724
         .           fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {
         .               let size = mem::size_of::<T>()
         .                   .checked_mul(n)
         .                   .ok_or(CollectionAllocErr::CapacityOverflow)?;
         .               let align = mem::align_of::<T>();
-- line 315 ----------------------------------------
-- line 422 ----------------------------------------
         .           #[cfg(feature = "union")]
         .           impl<A: Array> SmallVecData<A> {
         .               #[inline]
         .               unsafe fn inline(&self) -> *const A::Item {
         .                   self.inline.as_ptr() as *const A::Item
         .               }
         .               #[inline]
         .               unsafe fn inline_mut(&mut self) -> *mut A::Item {
   314,850 ( 0.00%)          self.inline.as_mut_ptr() as *mut A::Item
         .               }
         .               #[inline]
         .               fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
         .                   SmallVecData {
         .                       inline: core::mem::ManuallyDrop::new(inline),
         .                   }
         .               }
         .               #[inline]
         .               unsafe fn into_inline(self) -> MaybeUninit<A> {
         .                   core::mem::ManuallyDrop::into_inner(self.inline)
         .               }
         .               #[inline]
         .               unsafe fn heap(&self) -> (*mut A::Item, usize) {
    84,031 ( 0.00%)          self.heap
         .               }
         .               #[inline]
         .               unsafe fn heap_mut(&mut self) -> &mut (*mut A::Item, usize) {
         .                   &mut self.heap
         .               }
         .               #[inline]
         .               fn from_heap(ptr: *mut A::Item, len: usize) -> SmallVecData<A> {
         .                   SmallVecData { heap: (ptr, len) }
-- line 452 ----------------------------------------
-- line 557 ----------------------------------------
         .               #[inline]
         .               pub fn new() -> SmallVec<A> {
         .                   // Try to detect invalid custom implementations of `Array`. Hopefully,
         .                   // this check should be optimized away entirely for valid ones.
         .                   assert!(
         .                       mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
         .                           && mem::align_of::<A>() >= mem::align_of::<A::Item>()
         .                   );
 1,565,961 ( 0.01%)          SmallVec {
         .                       capacity: 0,
         .                       data: SmallVecData::from_inline(MaybeUninit::uninit()),
         .                   }
         .               }
         .           
         .               /// Construct an empty vector with enough capacity pre-allocated to store at least `n`
         .               /// elements.
         .               ///
-- line 573 ----------------------------------------
-- line 579 ----------------------------------------
         .               /// let v: SmallVec<[u8; 3]> = SmallVec::with_capacity(100);
         .               ///
         .               /// assert!(v.is_empty());
         .               /// assert!(v.capacity() >= 100);
         .               /// ```
         .               #[inline]
         .               pub fn with_capacity(n: usize) -> Self {
         .                   let mut v = SmallVec::new();
         2 ( 0.00%)          v.reserve_exact(n);
         .                   v
         .               }
         .           
         .               /// Construct a new `SmallVec` from a `Vec<A::Item>`.
         .               ///
         .               /// Elements will be copied to the inline buffer if vec.capacity() <= Self::inline_capacity().
         .               ///
         .               /// ```rust
-- line 595 ----------------------------------------
-- line 597 ----------------------------------------
         .               ///
         .               /// let vec = vec![1, 2, 3, 4, 5];
         .               /// let small_vec: SmallVec<[_; 3]> = SmallVec::from_vec(vec);
         .               ///
         .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
         .               /// ```
         .               #[inline]
         .               pub fn from_vec(mut vec: Vec<A::Item>) -> SmallVec<A> {
     1,042 ( 0.00%)          if vec.capacity() <= Self::inline_capacity() {
         .                       unsafe {
         .                           let mut data = SmallVecData::<A>::from_inline(MaybeUninit::uninit());
         .                           let len = vec.len();
         .                           vec.set_len(0);
         .                           ptr::copy_nonoverlapping(vec.as_ptr(), data.inline_mut(), len);
         .           
         .                           SmallVec {
         .                               capacity: len,
         .                               data,
         .                           }
         .                       }
         .                   } else {
         .                       let (ptr, cap, len) = (vec.as_mut_ptr(), vec.capacity(), vec.len());
         .                       mem::forget(vec);
         .           
     1,680 ( 0.00%)              SmallVec {
         .                           capacity: cap,
         .                           data: SmallVecData::from_heap(ptr, len),
         .                       }
         .                   }
         .               }
         .           
         .               /// Constructs a new `SmallVec` on the stack from an `A` without
         .               /// copying elements.
-- line 629 ----------------------------------------
-- line 635 ----------------------------------------
         .               /// let small_vec: SmallVec<_> = SmallVec::from_buf(buf);
         .               ///
         .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
         .               /// ```
         .               #[inline]
         .               pub fn from_buf(buf: A) -> SmallVec<A> {
         .                   SmallVec {
         .                       capacity: A::size(),
    14,301 ( 0.00%)              data: SmallVecData::from_inline(MaybeUninit::new(buf)),
         .                   }
         .               }
         .           
         .               /// Constructs a new `SmallVec` on the stack from an `A` without
         .               /// copying elements. Also sets the length, which must be less or
         .               /// equal to the size of `buf`.
         .               ///
         .               /// ```rust
-- line 651 ----------------------------------------
-- line 653 ----------------------------------------
         .               ///
         .               /// let buf = [1, 2, 3, 4, 5, 0, 0, 0];
         .               /// let small_vec: SmallVec<_> = SmallVec::from_buf_and_len(buf, 5);
         .               ///
         .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
         .               /// ```
         .               #[inline]
         .               pub fn from_buf_and_len(buf: A, len: usize) -> SmallVec<A> {
    29,138 ( 0.00%)          assert!(len <= A::size());
    87,414 ( 0.00%)          unsafe { SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), len) }
         .               }
         .           
         .               /// Constructs a new `SmallVec` on the stack from an `A` without
         .               /// copying elements. Also sets the length. The user is responsible
         .               /// for ensuring that `len <= A::size()`.
         .               ///
         .               /// ```rust
         .               /// use smallvec::SmallVec;
-- line 670 ----------------------------------------
-- line 674 ----------------------------------------
         .               /// let small_vec: SmallVec<_> = unsafe {
         .               ///     SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), 5)
         .               /// };
         .               ///
         .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
         .               /// ```
         .               #[inline]
         .               pub unsafe fn from_buf_and_len_unchecked(buf: MaybeUninit<A>, len: usize) -> SmallVec<A> {
    14,569 ( 0.00%)          SmallVec {
         .                       capacity: len,
         .                       data: SmallVecData::from_inline(buf),
         .                   }
         .               }
         .           
         .               /// Sets the length of a vector.
         .               ///
         .               /// This will explicitly set the size of the vector, without actually
         .               /// modifying its buffers, so it is up to the caller to ensure that the
         .               /// vector is actually the specified size.
         .               pub unsafe fn set_len(&mut self, new_len: usize) {
         .                   let (_, len_ptr, _) = self.triple_mut();
   193,922 ( 0.00%)          *len_ptr = new_len;
         .               }
         .           
         .               /// The maximum number of elements this vector can hold inline
         .               #[inline]
         .               fn inline_capacity() -> usize {
         .                   if mem::size_of::<A::Item>() > 0 {
        32 ( 0.00%)              A::size()
         .                   } else {
         .                       // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
         .                       // Therefore all items are at the same address,
         .                       // and any array size has capacity for infinitely many items.
         .                       // The capacity is limited by the bit width of the length field.
         .                       //
         .                       // `Vec` also does this:
         .                       // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
-- line 710 ----------------------------------------
-- line 725 ----------------------------------------
         .               #[inline]
         .               pub fn len(&self) -> usize {
         .                   self.triple().1
         .               }
         .           
         .               /// Returns `true` if the vector is empty
         .               #[inline]
         .               pub fn is_empty(&self) -> bool {
   392,509 ( 0.00%)          self.len() == 0
         .               }
         .           
         .               /// The number of items the vector can hold without reallocating
         .               #[inline]
         .               pub fn capacity(&self) -> usize {
         .                   self.triple().2
         .               }
         .           
         .               /// Returns a tuple with (data ptr, len, capacity)
         .               /// Useful to get all SmallVec properties with a single check of the current storage variant.
         .               #[inline]
         .               fn triple(&self) -> (*const A::Item, usize, usize) {
         .                   unsafe {
11,190,943 ( 0.10%)              if self.spilled() {
         .                           let (ptr, len) = self.data.heap();
         .                           (ptr, len, self.capacity)
         .                       } else {
         .                           (self.data.inline(), self.capacity, Self::inline_capacity())
         .                       }
         .                   }
         .               }
         .           
         .               /// Returns a tuple with (data ptr, len ptr, capacity)
         .               #[inline]
         .               fn triple_mut(&mut self) -> (*mut A::Item, &mut usize, usize) {
         .                   unsafe {
20,725,785 ( 0.18%)              if self.spilled() {
    76,561 ( 0.00%)                  let &mut (ptr, ref mut len_ptr) = self.data.heap_mut();
         .                           (ptr, len_ptr, self.capacity)
         .                       } else {
         .                           (
         .                               self.data.inline_mut(),
         .                               &mut self.capacity,
         .                               Self::inline_capacity(),
         .                           )
         .                       }
         .                   }
         .               }
         .           
         .               /// Returns `true` if the data has spilled into a separate heap-allocated buffer.
         .               #[inline]
         .               pub fn spilled(&self) -> bool {
21,458,688 ( 0.19%)          self.capacity > Self::inline_capacity()
         .               }
         .           
         .               /// Creates a draining iterator that removes the specified range in the vector
         .               /// and yields the removed items.
         .               ///
         .               /// Note 1: The element range is removed even if the iterator is only
         .               /// partially consumed or not consumed at all.
         .               ///
-- line 784 ----------------------------------------
-- line 821 ----------------------------------------
         .                           iter: range_slice.iter(),
         .                           vec: NonNull::from(self),
         .                       }
         .                   }
         .               }
         .           
         .               /// Append an item to the vector.
         .               #[inline]
   369,060 ( 0.00%)      pub fn push(&mut self, value: A::Item) {
         .                   unsafe {
         .                       let (mut ptr, mut len, cap) = self.triple_mut();
 3,012,852 ( 0.03%)              if *len == cap {
     1,011 ( 0.00%)                  self.reserve(1);
    18,731 ( 0.00%)                  let &mut (heap_ptr, ref mut heap_len) = self.data.heap_mut();
         .                           ptr = heap_ptr;
         .                           len = heap_len;
         .                       }
    27,744 ( 0.00%)              ptr::write(ptr.add(*len), value);
 5,098,316 ( 0.04%)              *len += 1;
         .                   }
   295,248 ( 0.00%)      }
         .           
         .               /// Remove an item from the end of the vector and return it, or None if empty.
         .               #[inline]
         .               pub fn pop(&mut self) -> Option<A::Item> {
         .                   unsafe {
         .                       let (ptr, len_ptr, _) = self.triple_mut();
 2,158,339 ( 0.02%)              if *len_ptr == 0 {
         .                           return None;
         .                       }
   518,743 ( 0.00%)              let last_index = *len_ptr - 1;
   564,585 ( 0.00%)              *len_ptr = last_index;
   321,632 ( 0.00%)              Some(ptr::read(ptr.add(last_index)))
         .                   }
       594 ( 0.00%)      }
         .           
         .               /// Moves all the elements of `other` into `self`, leaving `other` empty.
         .               ///
         .               /// # Example
         .               ///
         .               /// ```
         .               /// # use smallvec::{SmallVec, smallvec};
         .               /// let mut v0: SmallVec<[u8; 16]> = smallvec![1, 2, 3];
-- line 863 ----------------------------------------
-- line 879 ----------------------------------------
         .               /// or if the capacity computation overflows `usize`.
         .               pub fn grow(&mut self, new_cap: usize) {
         .                   infallible(self.try_grow(new_cap))
         .               }
         .           
         .               /// Re-allocate to set the capacity to `max(new_cap, inline_size())`.
         .               ///
         .               /// Panics if `new_cap` is less than the vector's length
    12,230 ( 0.00%)      pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
         .                   unsafe {
       330 ( 0.00%)              let (ptr, &mut len, cap) = self.triple_mut();
         .                       let unspilled = !self.spilled();
    42,622 ( 0.00%)              assert!(new_cap >= len);
    42,622 ( 0.00%)              if new_cap <= self.inline_size() {
         .                           if unspilled {
         .                               return Ok(());
         .                           }
         .                           self.data = SmallVecData::from_inline(MaybeUninit::uninit());
         .                           ptr::copy_nonoverlapping(ptr, self.data.inline_mut(), len);
         .                           self.capacity = len;
         .                           deallocate(ptr, cap);
    42,622 ( 0.00%)              } else if new_cap != cap {
    39,049 ( 0.00%)                  let layout = layout_array::<A::Item>(new_cap)?;
         .                           debug_assert!(layout.size() > 0);
         .                           let new_alloc;
    21,311 ( 0.00%)                  if unspilled {
         .                               new_alloc = NonNull::new(alloc::alloc::alloc(layout))
         .                                   .ok_or(CollectionAllocErr::AllocErr { layout })?
         .                                   .cast()
         .                                   .as_ptr();
         .                               ptr::copy_nonoverlapping(ptr, new_alloc, len);
         .                           } else {
         .                               // This should never fail since the same succeeded
         .                               // when previously allocating `ptr`.
    12,216 ( 0.00%)                      let old_layout = layout_array::<A::Item>(cap)?;
         .           
         .                               let new_ptr = alloc::alloc::realloc(ptr as *mut u8, old_layout, layout.size());
         .                               new_alloc = NonNull::new(new_ptr)
         .                                   .ok_or(CollectionAllocErr::AllocErr { layout })?
         .                                   .cast()
         .                                   .as_ptr();
         .                           }
    42,622 ( 0.00%)                  self.data = SmallVecData::from_heap(new_alloc, len);
    61,493 ( 0.00%)                  self.capacity = new_cap;
         .                       }
         .                       Ok(())
         .                   }
    12,560 ( 0.00%)      }
         .           
         .               /// Reserve capacity for `additional` more elements to be inserted.
         .               ///
         .               /// May reserve more space to avoid frequent reallocations.
         .               ///
         .               /// Panics if the capacity computation overflows `usize`.
         .               #[inline]
   410,747 ( 0.00%)      pub fn reserve(&mut self, additional: usize) {
 1,262,134 ( 0.01%)          infallible(self.try_reserve(additional))
   464,112 ( 0.00%)      }
         .           
         .               /// Reserve capacity for `additional` more elements to be inserted.
         .               ///
         .               /// May reserve more space to avoid frequent reallocations.
 5,109,035 ( 0.04%)      pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
         .                   // prefer triple_mut() even if triple() would work
         .                   // so that the optimizer removes duplicated calls to it
         .                   // from callers like insert()
    10,545 ( 0.00%)          let (_, &mut len, cap) = self.triple_mut();
 4,193,126 ( 0.04%)          if cap - len >= additional {
         .                       return Ok(());
         .                   }
         .                   let new_cap = len
         .                       .checked_add(additional)
         .                       .and_then(usize::checked_next_power_of_two)
         .                       .ok_or(CollectionAllocErr::CapacityOverflow)?;
       847 ( 0.00%)          self.try_grow(new_cap)
 5,430,732 ( 0.05%)      }
         .           
         .               /// Reserve the minimum capacity for `additional` more elements to be inserted.
         .               ///
         .               /// Panics if the new capacity overflows `usize`.
         2 ( 0.00%)      pub fn reserve_exact(&mut self, additional: usize) {
         .                   infallible(self.try_reserve_exact(additional))
         2 ( 0.00%)      }
         .           
         .               /// Reserve the minimum capacity for `additional` more elements to be inserted.
         .               pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
         .                   let (_, &mut len, cap) = self.triple_mut();
   278,356 ( 0.00%)          if cap - len >= additional {
         .                       return Ok(());
         .                   }
         .                   let new_cap = len
         .                       .checked_add(additional)
         .                       .ok_or(CollectionAllocErr::CapacityOverflow)?;
     1,202 ( 0.00%)          self.try_grow(new_cap)
     1,202 ( 0.00%)      }
         .           
         .               /// Shrink the capacity of the vector as much as possible.
         .               ///
         .               /// When possible, this will move data from an external heap buffer to the vector's inline
         .               /// storage.
         .               pub fn shrink_to_fit(&mut self) {
         .                   if !self.spilled() {
         .                       return;
-- line 981 ----------------------------------------
-- line 999 ----------------------------------------
         .               /// If `len` is greater than or equal to the vector's current length, this has no
         .               /// effect.
         .               ///
         .               /// This does not re-allocate.  If you want the vector's capacity to shrink, call
         .               /// `shrink_to_fit` after truncating.
         .               pub fn truncate(&mut self, len: usize) {
         .                   unsafe {
         .                       let (ptr, len_ptr, _) = self.triple_mut();
    87,526 ( 0.00%)              while len < *len_ptr {
         .                           let last_index = *len_ptr - 1;
         .                           *len_ptr = last_index;
         .                           ptr::drop_in_place(ptr.add(last_index));
         .                       }
         .                   }
         .               }
         .           
         .               /// Extracts a slice containing the entire vector.
-- line 1015 ----------------------------------------
-- line 1044 ----------------------------------------
         .               pub fn clear(&mut self) {
         .                   self.truncate(0);
         .               }
         .           
         .               /// Remove and return the element at position `index`, shifting all elements after it to the
         .               /// left.
         .               ///
         .               /// Panics if `index` is out of bounds.
       768 ( 0.00%)      pub fn remove(&mut self, index: usize) -> A::Item {
         .                   unsafe {
         .                       let (mut ptr, len_ptr, _) = self.triple_mut();
     2,448 ( 0.00%)              let len = *len_ptr;
     9,774 ( 0.00%)              assert!(index < len);
    31,217 ( 0.00%)              *len_ptr = len - 1;
         .                       ptr = ptr.add(index);
         .                       let item = ptr::read(ptr);
     6,516 ( 0.00%)              ptr::copy(ptr.add(1), ptr, len - index - 1);
         .                       item
         .                   }
       960 ( 0.00%)      }
         .           
         .               /// Insert an element at position `index`, shifting all elements after it to the right.
         .               ///
         .               /// Panics if `index` is out of bounds.
    40,269 ( 0.00%)      pub fn insert(&mut self, index: usize, element: A::Item) {
         .                   self.reserve(1);
         .           
         .                   unsafe {
         .                       let (mut ptr, len_ptr, _) = self.triple_mut();
    13,788 ( 0.00%)              let len = *len_ptr;
    27,496 ( 0.00%)              assert!(index <= len);
    54,992 ( 0.00%)              *len_ptr = len + 1;
         .                       ptr = ptr.add(index);
    27,496 ( 0.00%)              ptr::copy(ptr, ptr.add(1), len - index);
         .                       ptr::write(ptr, element);
         .                   }
    25,628 ( 0.00%)      }
         .           
         .               /// Insert multiple elements at position `index`, shifting all following elements toward the
         .               /// back.
         .               pub fn insert_many<I: IntoIterator<Item = A::Item>>(&mut self, index: usize, iterable: I) {
         .                   let mut iter = iterable.into_iter();
         .                   if index == self.len() {
         .                       return self.extend(iter);
         .                   }
-- line 1088 ----------------------------------------
-- line 1201 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// Retains only the elements specified by the predicate.
         .               ///
         .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
         .               /// This method operates in place and preserves the order of the retained
         .               /// elements.
   264,123 ( 0.00%)      pub fn retain<F: FnMut(&mut A::Item) -> bool>(&mut self, mut f: F) {
         .                   let mut del = 0;
         .                   let len = self.len();
         .                   for i in 0..len {
    70,920 ( 0.00%)              if !f(&mut self[i]) {
       104 ( 0.00%)                  del += 1;
    20,068 ( 0.00%)              } else if del > 0 {
       147 ( 0.00%)                  self.swap(i - del, i);
         .                       }
         .                   }
    58,694 ( 0.00%)          self.truncate(len - del);
   234,776 ( 0.00%)      }
         .           
         .               /// Removes consecutive duplicate elements.
       140 ( 0.00%)      pub fn dedup(&mut self)
         .               where
         .                   A::Item: PartialEq<A::Item>,
         .               {
         .                   self.dedup_by(|a, b| a == b);
       160 ( 0.00%)      }
         .           
         .               /// Removes consecutive duplicate elements using the given equality relation.
         .               pub fn dedup_by<F>(&mut self, mut same_bucket: F)
         .               where
         .                   F: FnMut(&mut A::Item, &mut A::Item) -> bool,
         .               {
         .                   // See the implementation of Vec::dedup_by in the
         .                   // standard library for an explanation of this algorithm.
         .                   let len = self.len();
        40 ( 0.00%)          if len <= 1 {
         .                       return;
         .                   }
         .           
         .                   let ptr = self.as_mut_ptr();
         .                   let mut w: usize = 1;
         .           
         .                   unsafe {
         .                       for r in 1..len {
         .                           let p_r = ptr.add(r);
        44 ( 0.00%)                  let p_wm1 = ptr.add(w - 1);
         .                           if !same_bucket(&mut *p_r, &mut *p_wm1) {
        16 ( 0.00%)                      if r != w {
         .                                   let p_w = p_wm1.add(1);
         .                                   mem::swap(&mut *p_r, &mut *p_w);
         .                               }
        16 ( 0.00%)                      w += 1;
         .                           }
         .                       }
         .                   }
         .           
         .                   self.truncate(w);
         .               }
         .           
         .               /// Removes consecutive elements that map to the same key.
-- line 1262 ----------------------------------------
-- line 1418 ----------------------------------------
         .                           capacity: len,
         .                           data: SmallVecData::from_inline(unsafe {
         .                               let mut data: MaybeUninit<A> = MaybeUninit::uninit();
         .                               ptr::copy_nonoverlapping(
         .                                   slice.as_ptr(),
         .                                   data.as_mut_ptr() as *mut A::Item,
         .                                   len,
         .                               );
     3,359 ( 0.00%)                      data
         .                           }),
         .                       }
         .                   } else {
         .                       let mut b = slice.to_vec();
         .                       let (ptr, cap) = (b.as_mut_ptr(), b.capacity());
         .                       mem::forget(b);
         .                       SmallVec {
         .                           capacity: cap,
-- line 1434 ----------------------------------------
-- line 1436 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Copy elements from a slice into the vector at position `index`, shifting any following
         .               /// elements toward the back.
         .               ///
         .               /// For slices of `Copy` types, this is more efficient than `insert`.
   775,384 ( 0.01%)      pub fn insert_from_slice(&mut self, index: usize, slice: &[A::Item]) {
         .                   self.reserve(slice.len());
         .           
         .                   let len = self.len();
   242,544 ( 0.00%)          assert!(index <= len);
         .           
         .                   unsafe {
         .                       let slice_ptr = slice.as_ptr();
         .                       let ptr = self.as_mut_ptr().add(index);
         .                       ptr::copy(ptr, ptr.add(slice.len()), len - index);
         .                       ptr::copy_nonoverlapping(slice_ptr, ptr, slice.len());
   161,696 ( 0.00%)              self.set_len(len + slice.len());
         .                   }
   646,784 ( 0.01%)      }
         .           
         .               /// Copy elements from a slice and append them to the vector.
         .               ///
         .               /// For slices of `Copy` types, this is more efficient than `extend`.
         .               #[inline]
         .               pub fn extend_from_slice(&mut self, slice: &[A::Item]) {
         .                   let len = self.len();
   188,281 ( 0.00%)          self.insert_from_slice(len, slice);
         .               }
         .           }
         .           
         .           impl<A: Array> SmallVec<A>
         .           where
         .               A::Item: Clone,
         .           {
         .               /// Resizes the vector so that its length is equal to `len`.
         .               ///
         .               /// If `len` is less than the current length, the vector simply truncated.
         .               ///
         .               /// If `len` is greater than the current length, `value` is appended to the
         .               /// vector until its length equals `len`.
        30 ( 0.00%)      pub fn resize(&mut self, len: usize, value: A::Item) {
         .                   let old_len = self.len();
         .           
         6 ( 0.00%)          if len > old_len {
         .                       self.extend(repeat(value).take(len - old_len));
         .                   } else {
         .                       self.truncate(len);
         .                   }
        21 ( 0.00%)      }
         .           
         .               /// Creates a `SmallVec` with `n` copies of `elem`.
         .               /// ```
         .               /// use smallvec::SmallVec;
         .               ///
         .               /// let v = SmallVec::<[char; 128]>::from_elem('d', 2);
         .               /// assert_eq!(v, SmallVec::from_buf(['d', 'd']));
         .               /// ```
         .               pub fn from_elem(elem: A::Item, n: usize) -> Self {
     4,502 ( 0.00%)          if n > Self::inline_capacity() {
         .                       vec![elem; n].into()
         .                   } else {
         .                       let mut v = SmallVec::<A>::new();
         .                       unsafe {
         .                           let (ptr, len_ptr, _) = v.triple_mut();
         .                           let mut local_len = SetLenOnDrop::new(len_ptr);
         .           
         .                           for i in 0..n {
         .                               ::core::ptr::write(ptr.add(i), elem.clone());
         .                               local_len.increment_len(1);
         .                           }
         .                       }
     6,636 ( 0.00%)              v
         .                   }
         .               }
         .           }
         .           
         .           impl<A: Array> ops::Deref for SmallVec<A> {
         .               type Target = [A::Item];
         .               #[inline]
         .               fn deref(&self) -> &[A::Item] {
-- line 1518 ----------------------------------------
-- line 1522 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<A: Array> ops::DerefMut for SmallVec<A> {
         .               #[inline]
         .               fn deref_mut(&mut self) -> &mut [A::Item] {
         .                   unsafe {
   123,595 ( 0.00%)              let (ptr, &mut len, _) = self.triple_mut();
         .                       slice::from_raw_parts_mut(ptr, len)
         .                   }
         .               }
         .           }
         .           
         .           impl<A: Array> AsRef<[A::Item]> for SmallVec<A> {
         .               #[inline]
         .               fn as_ref(&self) -> &[A::Item] {
-- line 1538 ----------------------------------------
-- line 1691 ----------------------------------------
         .               fn from(array: A) -> SmallVec<A> {
         .                   SmallVec::from_buf(array)
         .               }
         .           }
         .           
         .           impl<A: Array, I: SliceIndex<[A::Item]>> ops::Index<I> for SmallVec<A> {
         .               type Output = I::Output;
         .           
         1 ( 0.00%)      fn index(&self, index: I) -> &I::Output {
         .                   &(**self)[index]
         3 ( 0.00%)      }
         .           }
         .           
         .           impl<A: Array, I: SliceIndex<[A::Item]>> ops::IndexMut<I> for SmallVec<A> {
         .               fn index_mut(&mut self, index: I) -> &mut I::Output {
         .                   &mut (&mut **self)[index]
         .               }
         .           }
         .           
-- line 1709 ----------------------------------------
-- line 1716 ----------------------------------------
         .                   SmallVec::extend_from_slice(self, other)
         .               }
         .           }
         .           
         .           impl<A: Array> FromIterator<A::Item> for SmallVec<A> {
         .               #[inline]
         .               fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
         .                   let mut v = SmallVec::new();
 1,623,900 ( 0.01%)          v.extend(iterable);
         .                   v
         .               }
         .           }
         .           
         .           impl<A: Array> Extend<A::Item> for SmallVec<A> {
 6,655,633 ( 0.06%)      fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
   520,151 ( 0.00%)          let mut iter = iterable.into_iter();
         8 ( 0.00%)          let (lower_size_bound, _) = iter.size_hint();
    71,700 ( 0.00%)          self.reserve(lower_size_bound);
         .           
         .                   unsafe {
         .                       let (ptr, len_ptr, cap) = self.triple_mut();
         .                       let mut len = SetLenOnDrop::new(len_ptr);
 2,762,892 ( 0.02%)              while len.get() < cap {
   729,604 ( 0.01%)                  if let Some(out) = iter.next() {
        72 ( 0.00%)                      ptr::write(ptr.add(len.get()), out);
         .                               len.increment_len(1);
         .                           } else {
         .                               return;
         .                           }
         .                       }
         .                   }
         .           
   232,533 ( 0.00%)          for elem in iter {
    34,567 ( 0.00%)              self.push(elem);
         .                   }
 5,572,978 ( 0.05%)      }
         .           }
         .           
         .           impl<A: Array> fmt::Debug for SmallVec<A>
         .           where
         .               A::Item: fmt::Debug,
         .           {
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   f.debug_list().entries(self.iter()).finish()
-- line 1759 ----------------------------------------
-- line 1764 ----------------------------------------
         .               #[inline]
         .               fn default() -> SmallVec<A> {
         .                   SmallVec::new()
         .               }
         .           }
         .           
         .           #[cfg(feature = "may_dangle")]
         .           unsafe impl<#[may_dangle] A: Array> Drop for SmallVec<A> {
 3,661,240 ( 0.03%)      fn drop(&mut self) {
         .                   unsafe {
 4,741,529 ( 0.04%)              if self.spilled() {
         .                           let (ptr, len) = self.data.heap();
         .                           Vec::from_raw_parts(ptr, len, self.capacity);
         .                       } else {
         .                           ptr::drop_in_place(&mut self[..]);
         .                       }
         .                   }
 3,911,066 ( 0.03%)      }
         .           }
         .           
         .           #[cfg(not(feature = "may_dangle"))]
         .           impl<A: Array> Drop for SmallVec<A> {
         .               fn drop(&mut self) {
         .                   unsafe {
         .                       if self.spilled() {
         .                           let (ptr, len) = self.data.heap();
-- line 1789 ----------------------------------------
-- line 1888 ----------------------------------------
         .               A::Item: Clone,
         .           {
         .               fn clone(&self) -> IntoIter<A> {
         .                   SmallVec::from(self.as_slice()).into_iter()
         .               }
         .           }
         .           
         .           impl<A: Array> Drop for IntoIter<A> {
     6,605 ( 0.00%)      fn drop(&mut self) {
    95,428 ( 0.00%)          for _ in self {}
     6,472 ( 0.00%)      }
         .           }
         .           
         .           impl<A: Array> Iterator for IntoIter<A> {
         .               type Item = A::Item;
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<A::Item> {
   653,800 ( 0.01%)          if self.current == self.end {
     2,343 ( 0.00%)              None
         .                   } else {
         .                       unsafe {
         .                           let current = self.current;
   328,593 ( 0.00%)                  self.current += 1;
    11,148 ( 0.00%)                  Some(ptr::read(self.data.as_ptr().add(current)))
         .                       }
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
    21,121 ( 0.00%)          let size = self.end - self.current;
         .                   (size, Some(size))
         .               }
         .           }
         .           
         .           impl<A: Array> DoubleEndedIterator for IntoIter<A> {
         .               #[inline]
         .               fn next_back(&mut self) -> Option<A::Item> {
         .                   if self.current == self.end {
-- line 1927 ----------------------------------------
-- line 1955 ----------------------------------------
         .           impl<A: Array> IntoIterator for SmallVec<A> {
         .               type IntoIter = IntoIter<A>;
         .               type Item = A::Item;
         .               fn into_iter(mut self) -> Self::IntoIter {
         .                   unsafe {
         .                       // Set SmallVec len to zero as `IntoIter` drop handles dropping of the elements
         .                       let len = self.len();
         .                       self.set_len(0);
    71,361 ( 0.00%)              IntoIter {
   413,811 ( 0.00%)                  data: self,
         .                           current: 0,
         .                           end: len,
         .                       }
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, A: Array> IntoIterator for &'a SmallVec<A> {
-- line 1972 ----------------------------------------
-- line 2000 ----------------------------------------
         .               len: &'a mut usize,
         .               local_len: usize,
         .           }
         .           
         .           impl<'a> SetLenOnDrop<'a> {
         .               #[inline]
         .               fn new(len: &'a mut usize) -> Self {
         .                   SetLenOnDrop {
   709,575 ( 0.01%)              local_len: *len,
         .                       len,
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn get(&self) -> usize {
         .                   self.local_len
         .               }
         .           
         .               #[inline]
         .               fn increment_len(&mut self, increment: usize) {
   334,465 ( 0.00%)          self.local_len += increment;
         .               }
         .           }
         .           
         .           impl<'a> Drop for SetLenOnDrop<'a> {
         .               #[inline]
         .               fn drop(&mut self) {
   817,078 ( 0.01%)          *self.len = self.local_len;
         .               }
         .           }
         .           
         .           #[cfg(feature = "const_new")]
         .           impl<T, const N: usize> SmallVec<[T; N]> {
         .               /// Construct an empty vector.
         .               ///
         .               /// This is a `const` version of [`SmallVec::new`] that is enabled by the feature `const_new`, with the limitation that it only works for arrays.
-- line 2035 ----------------------------------------

12,462,358 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 141 ----------------------------------------
         .               /// ```
         .               /// let a = [1, 2, 3];
         .               /// assert!(!a.is_empty());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
         .               #[inline]
         .               pub const fn is_empty(&self) -> bool {
 2,825,096 ( 0.02%)          self.len() == 0
         .               }
         .           
         .               /// Returns the first element of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
         .               ///
         .               /// let w: &[i32] = &[];
         .               /// assert_eq!(None, w.first());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn first(&self) -> Option<&T> {
    45,455 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
         .               }
         .           
         .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
         .               ///     *first = 5;
         .               /// }
         .               /// assert_eq!(x, &[5, 1, 2]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
         .               #[inline]
         .               pub const fn first_mut(&mut self) -> Option<&mut T> {
     3,280 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
         .               }
         .           
         .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 237 ----------------------------------------
         .               ///     assert_eq!(last, &2);
         .               ///     assert_eq!(elements, &[0, 1]);
         .               /// }
         .               /// ```
         .               #[stable(feature = "slice_splits", since = "1.5.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
    36,145 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
         .               }
         .           
         .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
         .               ///
         .               /// let w: &[i32] = &[];
         .               /// assert_eq!(None, w.last());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn last(&self) -> Option<&T> {
 1,361,220 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
         .               }
         .           
         .               /// Returns a mutable pointer to the last item in the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
         .               ///     *last = 10;
         .               /// }
         .               /// assert_eq!(x, &[0, 1, 10]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
         .               #[inline]
         .               pub const fn last_mut(&mut self) -> Option<&mut T> {
 2,359,518 ( 0.02%)          if let [.., last] = self { Some(last) } else { None }
         .               }
         .           
         .               /// Returns a reference to an element or subslice depending on the type of
         .               /// index.
         .               ///
         .               /// - If given a position, returns a reference to the element at that
         .               ///   position or `None` if out of bounds.
         .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 448 ----------------------------------------
         .               /// }
         .               /// ```
         .               ///
         .               /// [`as_mut_ptr`]: slice::as_mut_ptr
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
         .               #[inline]
         .               pub const fn as_ptr(&self) -> *const T {
 3,226,195 ( 0.03%)          self as *const [T] as *const T
         .               }
         .           
         .               /// Returns an unsafe mutable pointer to the slice's buffer.
         .               ///
         .               /// The caller must ensure that the slice outlives the pointer this
         .               /// function returns, or else it will end up pointing to garbage.
         .               ///
         .               /// Modifying the container referenced by this slice may cause its buffer
-- line 464 ----------------------------------------
-- line 476 ----------------------------------------
         .               ///     }
         .               /// }
         .               /// assert_eq!(x, &[3, 4, 6]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline]
         .               pub const fn as_mut_ptr(&mut self) -> *mut T {
        21 ( 0.00%)          self as *mut [T] as *mut T
         .               }
         .           
         .               /// Returns the two raw pointers spanning the slice.
         .               ///
         .               /// The returned range is half-open, which means that the end pointer
         .               /// points *one past* the last element of the slice. This way, an empty
         .               /// slice is represented by two equal pointers, and the difference between
         .               /// the two pointers represents the size of the slice.
-- line 492 ----------------------------------------
-- line 582 ----------------------------------------
         .               /// v.swap(2, 4);
         .               /// assert!(v == ["a", "b", "e", "d", "c"]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
         .               #[inline]
         .               #[track_caller]
         .               pub const fn swap(&mut self, a: usize, b: usize) {
   143,728 ( 0.00%)          let _ = &self[a];
   286,934 ( 0.00%)          let _ = &self[b];
         .           
         .                   // SAFETY: we just checked that both `a` and `b` are in bounds
         .                   unsafe { self.swap_unchecked(a, b) }
         .               }
         .           
         .               /// Swaps two elements in the slice, without doing bounds checking.
         .               ///
         .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 677 ----------------------------------------
         .           
         .                       // Because this function is first compiled in isolation,
         .                       // this check tells LLVM that the indexing below is
         .                       // in-bounds.  Then after inlining -- once the actual
         .                       // lengths of the slices are known -- it's removed.
         .                       let (a, b) = (&mut a[..n], &mut b[..n]);
         .           
         .                       for i in 0..n {
     7,916 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
         .                       }
         .                   }
         .               }
         .           
         .               /// Returns an iterator over the slice.
         .               ///
         .               /// # Examples
         .               ///
-- line 693 ----------------------------------------
-- line 1499 ----------------------------------------
         .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
         .               ///     assert_eq!(right, []);
         .               /// }
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
         .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
       312 ( 0.00%)          assert!(mid <= self.len());
         .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
         .                   // fulfills the requirements of `from_raw_parts_mut`.
         .                   unsafe { self.split_at_unchecked(mid) }
         .               }
         .           
         .               /// Divides one mutable slice into two at an index.
         .               ///
         .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
         .               /// left[1] = 2;
         .               /// right[1] = 4;
         .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
         .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
    74,522 ( 0.00%)          assert!(mid <= self.len());
         .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
         .                   // fulfills the requirements of `from_raw_parts_mut`.
         .                   unsafe { self.split_at_mut_unchecked(mid) }
         .               }
         .           
         .               /// Divides one slice into two at an index, without doing bounds checking.
         .               ///
         .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
         .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
         .                   let len = self.len();
         .                   let ptr = self.as_mut_ptr();
         .           
         .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
         .                   //
         .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
         .                   // is fine.
     8,080 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
         .               }
         .           
         .               /// Divides one slice into an array and a remainder slice at an index.
         .               ///
         .               /// The array will contain all indices from `[0, N)` (excluding
         .               /// the index `N` itself) and the slice will contain all
         .               /// indices from `[N, len)` (excluding the index `len` itself).
         .               ///
-- line 1644 ----------------------------------------
-- line 2113 ----------------------------------------
         .               /// assert!(!v.iter().any(|e| e == "hi"));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               pub fn contains(&self, x: &T) -> bool
         .               where
         .                   T: PartialEq,
         .               {
       750 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
         .               }
         .           
         .               /// Returns `true` if `needle` is a prefix of the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2142 ----------------------------------------
         .               /// assert!(v.starts_with(&[]));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn starts_with(&self, needle: &[T]) -> bool
         .               where
         .                   T: PartialEq,
         .               {
         .                   let n = needle.len();
     5,365 ( 0.00%)          self.len() >= n && needle == &self[..n]
         .               }
         .           
         .               /// Returns `true` if `needle` is a suffix of the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
-- line 2158 ----------------------------------------
-- line 2171 ----------------------------------------
         .               /// assert!(v.ends_with(&[]));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn ends_with(&self, needle: &[T]) -> bool
         .               where
         .                   T: PartialEq,
         .               {
         .                   let (m, n) = (self.len(), needle.len());
    26,499 ( 0.00%)          m >= n && needle == &self[m - n..]
         .               }
         .           
         .               /// Returns a subslice with the prefix removed.
         .               ///
         .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
         .               /// If `prefix` is empty, simply returns the original slice.
         .               ///
         .               /// If the slice does not start with `prefix`, returns `None`.
-- line 2187 ----------------------------------------
-- line 2293 ----------------------------------------
         .               /// s.insert(idx, num);
         .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
         .               where
         .                   T: Ord,
         .               {
         3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
         .               }
         .           
         .               /// Binary searches this sorted slice with a comparator function.
         .               ///
         .               /// The comparator function should implement an order consistent
         .               /// with the sort order of the underlying slice, returning an
         .               /// order code that indicates whether its argument is `Less`,
         .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
         .               #[inline]
         .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
         .               where
         .                   F: FnMut(&'a T) -> Ordering,
         .               {
         .                   let mut size = self.len();
         .                   let mut left = 0;
         .                   let mut right = size;
 9,637,289 ( 0.08%)          while left < right {
12,795,766 ( 0.11%)              let mid = left + size / 2;
         .           
         .                       // SAFETY: the call is made safe by the following invariants:
         .                       // - `mid >= 0`
         .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
 1,245,311 ( 0.01%)              let cmp = f(unsafe { self.get_unchecked(mid) });
         .           
         .                       // The reason why we use if/else control flow rather than match
         .                       // is because match reorders comparison operations, which is perf sensitive.
         .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
 3,484,429 ( 0.03%)              if cmp == Less {
 6,261,670 ( 0.05%)                  left = mid + 1;
 1,612,120 ( 0.01%)              } else if cmp == Greater {
         .                           right = mid;
         .                       } else {
         .                           // SAFETY: same as the `get_unchecked` above
         .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
         .                           return Ok(mid);
         .                       }
         .           
11,034,354 ( 0.10%)              size = right - left;
         .                   }
         .                   Err(left)
         .               }
         .           
         .               /// Binary searches this sorted slice with a key extraction function.
         .               ///
         .               /// Assumes that the slice is sorted by the key, for instance with
         .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3203 ----------------------------------------
         .                   #[track_caller]
         .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
         .                       panic!(
         .                           "source slice length ({}) does not match destination slice length ({})",
         .                           src_len, dst_len,
         .                       );
         .                   }
         .           
   507,904 ( 0.00%)          if self.len() != src.len() {
         .                       len_mismatch_fail(self.len(), src.len());
         .                   }
         .           
         .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
         .                   // checked to have the same length. The slices cannot overlap because
         .                   // mutable references are exclusive.
         .                   unsafe {
         .                       ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
-- line 3219 ----------------------------------------
-- line 3382 ----------------------------------------
         .                   }
         .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
         .                   let ts: usize = mem::size_of::<U>() / gcd;
         .                   let us: usize = mem::size_of::<T>() / gcd;
         .           
         .                   // Armed with this knowledge, we can find how many `U`s we can fit!
         .                   let us_len = self.len() / ts * us;
         .                   // And how many `T`s will be in the trailing slice!
    51,396 ( 0.00%)          let ts_len = self.len() % ts;
         .                   (us_len, ts_len)
         .               }
         .           
         .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
         .               /// maintained.
         .               ///
         .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
         .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
         .                       return (self, &[], &[]);
         .                   }
         .           
         .                   // First, find at what point do we split between the first and 2nd slice. Easy with
         .                   // ptr.align_offset.
         .                   let ptr = self.as_ptr();
         .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
         .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
    51,396 ( 0.00%)          if offset > self.len() {
         .                       (self, &[], &[])
         .                   } else {
         .                       let (left, rest) = self.split_at(offset);
         .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
         .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
         .                       // since the caller guarantees that we can transmute `T` to `U` safely.
         .                       unsafe {
         .                           (
         .                               left,
         .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
    51,396 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
         .                           )
         .                       }
         .                   }
         .               }
         .           
         .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
         .               /// maintained.
         .               ///
-- line 3456 ----------------------------------------
-- line 3731 ----------------------------------------
         .               /// let v = [1, 2, 3, 3, 5, 6, 7];
         .               /// let i = v.partition_point(|&x| x < 5);
         .               ///
         .               /// assert_eq!(i, 4);
         .               /// assert!(v[..i].iter().all(|&x| x < 5));
         .               /// assert!(v[i..].iter().all(|&x| !(x < 5)));
         .               /// ```
         .               #[stable(feature = "partition_point", since = "1.52.0")]
         9 ( 0.00%)      pub fn partition_point<P>(&self, mut pred: P) -> usize
         .               where
         .                   P: FnMut(&T) -> bool,
         .               {
         .                   self.binary_search_by(|x| if pred(x) { Less } else { Greater }).unwrap_or_else(|i| i)
        18 ( 0.00%)      }
         .           
         .               /// Removes the subslice corresponding to the given range
         .               /// and returns a reference to it.
         .               ///
         .               /// Returns `None` and does not modify the slice if the given
         .               /// range is out of bounds.
         .               ///
         .               /// Note that this method only accepts one-sided ranges such as
-- line 3752 ----------------------------------------

10,577,431 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir                  

-- line 21 ----------------------------------------
         .           use rustc_target::spec::abi;
         .           use std::borrow::Cow;
         .           use std::cmp::Ordering;
         .           use std::marker::PhantomData;
         .           use std::ops::Range;
         .           use ty::util::IntTypeExt;
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        12 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
         .           pub struct TypeAndMut<'tcx> {
     5,071 ( 0.00%)      pub ty: Ty<'tcx>,
    25,355 ( 0.00%)      pub mutbl: hir::Mutability,
         .           }
         .           
         .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
         .           #[derive(HashStable)]
         .           /// A "free" region `fr` can be interpreted as "some region
         .           /// at least as big as the scope `fr.scope`".
         .           pub struct FreeRegion {
    89,082 ( 0.00%)      pub scope: DefId,
   103,544 ( 0.00%)      pub bound_region: BoundRegionKind,
         .           }
         .           
   547,924 ( 0.00%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
        97 ( 0.00%)  #[derive(HashStable)]
         .           pub enum BoundRegionKind {
         .               /// An anonymous region parameter for a given fn (&T)
    15,439 ( 0.00%)      BrAnon(u32),
         .           
         .               /// Named region parameters for functions (a in &'a T)
         .               ///
         .               /// The `DefId` is needed to distinguish free regions in
         .               /// the event of shadowing.
       370 ( 0.00%)      BrNamed(DefId, Symbol),
         .           
         .               /// Anonymous region for the implicit env pointer parameter
         .               /// to a closure
         .               BrEnv,
         .           }
         .           
     1,359 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
         .           #[derive(HashStable)]
         .           pub struct BoundRegion {
   106,814 ( 0.00%)      pub var: BoundVar,
    81,718 ( 0.00%)      pub kind: BoundRegionKind,
         .           }
         .           
         .           impl BoundRegionKind {
         .               pub fn is_named(&self) -> bool {
         .                   match *self {
         .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
         .                       _ => false,
         .                   }
         .               }
         .           }
         .           
         .           /// Defines the kinds of types.
         .           ///
         .           /// N.B., if you change this, you'll probably want to change the corresponding
         .           /// AST structure in `rustc_ast/src/ast.rs` as well.
24,933,948 ( 0.22%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
   175,834 ( 0.00%)  #[derive(HashStable)]
         .           #[rustc_diagnostic_item = "TyKind"]
         .           pub enum TyKind<'tcx> {
         .               /// The primitive boolean type. Written as `bool`.
         .               Bool,
         .           
         .               /// The primitive character type; holds a Unicode scalar value
         .               /// (a non-surrogate code point). Written as `char`.
         .               Char,
-- line 90 ----------------------------------------
-- line 99 ----------------------------------------
         .               Float(ty::FloatTy),
         .           
         .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
         .               ///
         .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
         .               /// That is, even after substitution it is possible that there are type
         .               /// variables. This happens when the `Adt` corresponds to an ADT
         .               /// definition and not a concrete use of it.
 1,566,306 ( 0.01%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
         .           
         .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
         .               Foreign(DefId),
         .           
         .               /// The pointee of a string slice. Written as `str`.
         .               Str,
         .           
         .               /// An array with the given length. Written as `[T; n]`.
    99,125 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
         .           
         .               /// The pointee of an array slice. Written as `[T]`.
         .               Slice(Ty<'tcx>),
         .           
         .               /// A raw pointer. Written as `*mut T` or `*const T`
         .               RawPtr(TypeAndMut<'tcx>),
         .           
         .               /// A reference; a pointer with an associated lifetime. Written as
         .               /// `&'a mut T` or `&'a T`.
 1,784,522 ( 0.02%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
         .           
         .               /// The anonymous type of a function declaration/definition. Each
         .               /// function has a unique type, which is output (for a function
         .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
         .               ///
         .               /// For example the type of `bar` here:
         .               ///
         .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
         .               ///
         .               /// ```rust
         .               /// fn foo() -> i32 { 1 }
         .               /// let bar: fn() -> i32 = foo;
         .               /// ```
         .               FnPtr(PolyFnSig<'tcx>),
         .           
         .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
    50,726 ( 0.00%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
         .           
         .               /// The anonymous type of a closure. Used to represent the type of
         .               /// `|a| a`.
         .               Closure(DefId, SubstsRef<'tcx>),
         .           
         .               /// The anonymous type of a generator. Used to represent the type of
         .               /// `|a| yield a`.
         .               Generator(DefId, SubstsRef<'tcx>, hir::Movability),
-- line 159 ----------------------------------------
-- line 180 ----------------------------------------
         .               /// The substitutions are for the generics of the function in question.
         .               /// After typeck, the concrete type can be found in the `types` map.
         .               Opaque(DefId, SubstsRef<'tcx>),
         .           
         .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
         .               Param(ParamTy),
         .           
         .               /// Bound type variable, used only when preparing a trait query.
    26,885 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
         .           
         .               /// A placeholder type - universally quantified higher-ranked type.
         .               Placeholder(ty::PlaceholderType),
         .           
         .               /// A type variable used during type checking.
         .               Infer(InferTy),
         .           
         .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 330 ----------------------------------------
         .               pub closure_kind_ty: T,
         .               pub closure_sig_as_fn_ptr_ty: T,
         .               pub tupled_upvars_ty: T,
         .           }
         .           
         .           impl<'tcx> ClosureSubsts<'tcx> {
         .               /// Construct `ClosureSubsts` from `ClosureSubstsParts`, containing `Substs`
         .               /// for the closure parent, alongside additional closure-specific components.
        88 ( 0.00%)      pub fn new(
         .                   tcx: TyCtxt<'tcx>,
         .                   parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,
         .               ) -> ClosureSubsts<'tcx> {
         .                   ClosureSubsts {
         .                       substs: tcx.mk_substs(
       176 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
       352 ( 0.00%)                      [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]
         .                                   .iter()
         .                                   .map(|&ty| ty.into()),
         .                           ),
         .                       ),
         .                   }
       176 ( 0.00%)      }
         .           
         .               /// Divides the closure substs into their respective components.
         .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
     2,165 ( 0.00%)      fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
         .                   match self.substs[..] {
    17,058 ( 0.00%)              [
     4,557 ( 0.00%)                  ref parent_substs @ ..,
     4,729 ( 0.00%)                  closure_kind_ty,
     2,487 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
     3,495 ( 0.00%)                  tupled_upvars_ty,
     8,660 ( 0.00%)              ] => ClosureSubstsParts {
         .                           parent_substs,
         .                           closure_kind_ty,
         .                           closure_sig_as_fn_ptr_ty,
         .                           tupled_upvars_ty,
         .                       },
         .                       _ => bug!("closure substs missing synthetics"),
         .                   }
     6,495 ( 0.00%)      }
         .           
         .               /// Returns `true` only if enough of the synthetic types are known to
         .               /// allow using all of the methods on `ClosureSubsts` without panicking.
         .               ///
         .               /// Used primarily by `ty::print::pretty` to be able to handle closure
         .               /// types that haven't had their synthetic types substituted in.
        17 ( 0.00%)      pub fn is_valid(self) -> bool {
        34 ( 0.00%)          self.substs.len() >= 3
        34 ( 0.00%)              && matches!(self.split().tupled_upvars_ty.expect_ty().kind(), Tuple(_))
        34 ( 0.00%)      }
         .           
         .               /// Returns the substitutions of the closure's parent.
         .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
         .                   self.split().parent_substs
         .               }
         .           
         .               /// Returns an iterator over the list of types of captured paths by the closure.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
     1,326 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
     1,766 ( 0.00%)          match self.tupled_upvars_ty().kind() {
         .                       TyKind::Error(_) => None,
       901 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
       884 ( 0.00%)      }
         .           
         .               /// Returns the tuple type representing the upvars for this closure.
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
     9,409 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
         .               }
         .           
         .               /// Returns the closure kind for this closure; may return a type
         .               /// variable during inference. To get the closure kind during
         .               /// inference, use `infcx.closure_kind(substs)`.
     1,054 ( 0.00%)      pub fn kind_ty(self) -> Ty<'tcx> {
         .                   self.split().closure_kind_ty.expect_ty()
     2,108 ( 0.00%)      }
         .           
         .               /// Returns the `fn` pointer type representing the closure signature for this
         .               /// closure.
         .               // FIXME(eddyb) this should be unnecessary, as the shallowly resolved
         .               // type is known at the time of the creation of `ClosureSubsts`,
         .               // see `rustc_typeck::check::closure`.
         .               pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {
         .                   self.split().closure_sig_as_fn_ptr_ty.expect_ty()
         .               }
         .           
         .               /// Returns the closure kind for this closure; only usable outside
         .               /// of an inference context, because in that context we know that
         .               /// there are no type variables.
         .               ///
         .               /// If you have an inference context, use `infcx.closure_kind()`.
        24 ( 0.00%)      pub fn kind(self) -> ty::ClosureKind {
        81 ( 0.00%)          self.kind_ty().to_opt_closure_kind().unwrap()
        48 ( 0.00%)      }
         .           
         .               /// Extracts the signature from the closure.
     1,291 ( 0.00%)      pub fn sig(self) -> ty::PolyFnSig<'tcx> {
         .                   let ty = self.sig_as_fn_ptr_ty();
     2,582 ( 0.00%)          match ty.kind() {
     5,164 ( 0.00%)              ty::FnPtr(sig) => *sig,
         .                       _ => bug!("closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}", ty.kind()),
         .                   }
     3,873 ( 0.00%)      }
         .           }
         .           
         .           /// Similar to `ClosureSubsts`; see the above documentation for more.
         .           #[derive(Copy, Clone, Debug, TypeFoldable)]
         .           pub struct GeneratorSubsts<'tcx> {
         .               pub substs: SubstsRef<'tcx>,
         .           }
         .           
-- line 448 ----------------------------------------
-- line 676 ----------------------------------------
         .           }
         .           
         .           impl<'tcx> UpvarSubsts<'tcx> {
         .               /// Returns an iterator over the list of types of captured paths by the closure/generator.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
         .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       224 ( 0.00%)          let tupled_tys = match self {
       312 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
         .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
         .                   };
         .           
       512 ( 0.00%)          match tupled_tys.kind() {
         .                       TyKind::Error(_) => None,
       424 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
         .               }
         .           
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
       400 ( 0.00%)          match self {
       431 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
         .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
         .                   }
         .               }
         .           }
         .           
         .           /// An inline const is modeled like
         .           ///
         .           ///     const InlineConst<'l0...'li, T0...Tj, R>: R;
-- line 710 ----------------------------------------
-- line 760 ----------------------------------------
         .               }
         .           
         .               /// Returns the type of this inline const.
         .               pub fn ty(self) -> Ty<'tcx> {
         .                   self.split().ty.expect_ty()
         .               }
         .           }
         .           
    88,652 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
    62,537 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub enum ExistentialPredicate<'tcx> {
         .               /// E.g., `Iterator`.
         .               Trait(ExistentialTraitRef<'tcx>),
         .               /// E.g., `Iterator::Item = T`.
         .               Projection(ExistentialProjection<'tcx>),
         .               /// E.g., `Send`.
     2,596 ( 0.00%)      AutoTrait(DefId),
         .           }
         .           
         .           impl<'tcx> ExistentialPredicate<'tcx> {
         .               /// Compares via an ordering that will not change if modules are reordered or other changes are
         .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
    13,040 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
         .                   use self::ExistentialPredicate::*;
    19,072 ( 0.00%)          match (*self, *other) {
         .                       (Trait(_), Trait(_)) => Ordering::Equal,
         .                       (Projection(ref a), Projection(ref b)) => {
         .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
         .                       }
         .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
         .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
         .                       }
         .                       (Trait(_), _) => Ordering::Less,
         .                       (Projection(_), Trait(_)) => Ordering::Greater,
         .                       (Projection(_), _) => Ordering::Less,
         .                       (AutoTrait(_), _) => Ordering::Greater,
         .                   }
    15,648 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
     5,724 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
         .                   use crate::ty::ToPredicate;
     3,980 ( 0.00%)          match self.skip_binder() {
         .                       ExistentialPredicate::Trait(tr) => {
         .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
         .                       }
         .                       ExistentialPredicate::Projection(p) => {
         .                           self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
         .                       }
         .                       ExistentialPredicate::AutoTrait(did) => {
       600 ( 0.00%)                  let trait_ref = self.rebind(ty::TraitRef {
         .                               def_id: did,
         .                               substs: tcx.mk_substs_trait(self_ty, &[]),
         .                           });
         .                           trait_ref.without_const().to_predicate(tcx)
         .                       }
         .                   }
     5,088 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
         .               /// Returns the "principal `DefId`" of this set of existential predicates.
         .               ///
         .               /// A Rust trait object type consists (in addition to a lifetime bound)
         .               /// of a set of trait bounds, which are separated into any number
         .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 839 ----------------------------------------
         .               /// are the set `{Sync}`.
         .               ///
         .               /// It is also possible to have a "trivial" trait object that
         .               /// consists only of auto traits, with no principal - for example,
         .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
         .               /// is `{Send, Sync}`, while there is no principal. These trait objects
         .               /// have a "trivial" vtable consisting of just the size, alignment,
         .               /// and destructor.
       298 ( 0.00%)      pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
     2,589 ( 0.00%)          self[0]
     1,696 ( 0.00%)              .map_bound(|this| match this {
         .                           ExistentialPredicate::Trait(tr) => Some(tr),
         .                           _ => None,
     1,192 ( 0.00%)              })
         .                       .transpose()
       894 ( 0.00%)      }
         .           
       455 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
         .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
       910 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn projection_bounds<'a>(
         .                   &'a self,
         .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
         .                   self.iter().filter_map(|predicate| {
         .                       predicate
       794 ( 0.00%)                  .map_bound(|pred| match pred {
         .                               ExistentialPredicate::Projection(projection) => Some(projection),
         .                               _ => None,
         .                           })
         .                           .transpose()
         .                   })
         .               }
         .           
         .               #[inline]
         .               pub fn auto_traits<'a>(&'a self) -> impl Iterator<Item = DefId> + 'a {
         7 ( 0.00%)          self.iter().filter_map(|predicate| match predicate.skip_binder() {
         .                       ExistentialPredicate::AutoTrait(did) => Some(did),
         .                       _ => None,
         .                   })
         .               }
         .           }
         .           
         .           /// A complete reference to a trait. These take numerous guises in syntax,
         .           /// but perhaps the most recognizable form is in a where-clause:
-- line 884 ----------------------------------------
-- line 886 ----------------------------------------
         .           ///     T: Foo<U>
         .           ///
         .           /// This would be represented by a trait-reference where the `DefId` is the
         .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
         .           /// and `U` as parameter 1.
         .           ///
         .           /// Trait references also appear in object types like `Foo<U>`, but in
         .           /// that case the `Self` parameter is absent from the substitutions.
    30,697 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
 3,652,851 ( 0.03%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct TraitRef<'tcx> {
    57,757 ( 0.00%)      pub def_id: DefId,
 2,482,143 ( 0.02%)      pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           impl<'tcx> TraitRef<'tcx> {
    17,878 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
         .                   TraitRef { def_id, substs }
    71,512 ( 0.00%)      }
         .           
         .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
         .               /// are the parameters defined on trait.
     1,152 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
       512 ( 0.00%)          ty::Binder::dummy(TraitRef {
         .                       def_id,
       768 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
         .                   })
     1,024 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn self_ty(&self) -> Ty<'tcx> {
         .                   self.substs.type_at(0)
         .               }
         .           
     6,448 ( 0.00%)      pub fn from_method(
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_id: DefId,
         .                   substs: SubstsRef<'tcx>,
         .               ) -> ty::TraitRef<'tcx> {
         .                   let defs = tcx.generics_of(trait_id);
         .           
       806 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
     8,866 ( 0.00%)      }
         .           }
         .           
         .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
         .           
         .           impl<'tcx> PolyTraitRef<'tcx> {
         .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
         .                   self.map_bound_ref(|tr| tr.self_ty())
         .               }
         .           
         .               pub fn def_id(&self) -> DefId {
     4,242 ( 0.00%)          self.skip_binder().def_id
     1,414 ( 0.00%)      }
         .           
    28,734 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
    57,468 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
         .                       trait_ref,
         .                       constness: ty::BoundConstness::NotConst,
         .                       polarity: ty::ImplPolarity::Positive,
         .                   })
    28,734 ( 0.00%)      }
         .           }
         .           
         .           /// An existential reference to a trait, where `Self` is erased.
         .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
         .           ///
         .           ///     exists T. T: Trait<'a, 'b, X, Y>
         .           ///
         .           /// The substitutions don't include the erased `Self`, only trait
         .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
       184 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    19,853 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ExistentialTraitRef<'tcx> {
     2,668 ( 0.00%)      pub def_id: DefId,
    23,647 ( 0.00%)      pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           impl<'tcx> ExistentialTraitRef<'tcx> {
       520 ( 0.00%)      pub fn erase_self_ty(
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_ref: ty::TraitRef<'tcx>,
         .               ) -> ty::ExistentialTraitRef<'tcx> {
         .                   // Assert there is a Self.
         .                   trait_ref.substs.type_at(0);
         .           
         .                   ty::ExistentialTraitRef {
         .                       def_id: trait_ref.def_id,
         .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
         .                   }
       520 ( 0.00%)      }
         .           
         .               /// Object types don't have a self type specified. Therefore, when
         .               /// we convert the principal trait-ref into a normal trait-ref,
         .               /// you must give *some* self type. A common choice is `mk_err()`
         .               /// or some placeholder type.
        54 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
         .                   // otherwise the escaping vars would be captured by the binder
         .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
         .           
        27 ( 0.00%)          ty::TraitRef { def_id: self.def_id, substs: tcx.mk_substs_trait(self_ty, self.substs) }
       135 ( 0.00%)      }
         .           }
         .           
         .           pub type PolyExistentialTraitRef<'tcx> = Binder<'tcx, ExistentialTraitRef<'tcx>>;
         .           
         .           impl<'tcx> PolyExistentialTraitRef<'tcx> {
         .               pub fn def_id(&self) -> DefId {
         .                   self.skip_binder().def_id
         .               }
         .           
         .               /// Object types don't have a self type specified. Therefore, when
         .               /// we convert the principal trait-ref into a normal trait-ref,
         .               /// you must give *some* self type. A common choice is `mk_err()`
         .               /// or some placeholder type.
       387 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
       587 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
       516 ( 0.00%)      }
         .           }
         .           
    61,699 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
       210 ( 0.00%)  #[derive(HashStable)]
         .           pub enum BoundVariableKind {
         .               Ty(BoundTyKind),
         .               Region(BoundRegionKind),
         .               Const,
         .           }
         .           
         .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
         .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
         .           /// (which would be represented by the type `PolyTraitRef ==
         .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
         .           /// erase, or otherwise "discharge" these bound vars, we change the
         .           /// type from `Binder<'tcx, T>` to just `T` (see
         .           /// e.g., `liberate_late_bound_regions`).
         .           ///
         .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
    90,209 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
 1,530,795 ( 0.01%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
         .           
         .           impl<'tcx, T> Binder<'tcx, T>
         .           where
         .               T: TypeFoldable<'tcx>,
         .           {
         .               /// Wraps `value` in a binder, asserting that `value` does not
         .               /// contain any bound vars that would be bound by the
         .               /// binder. This is commonly used to 'inject' a value T into a
         .               /// different binding level.
   191,495 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
   469,838 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
 1,176,497 ( 0.01%)          Binder(value, ty::List::empty())
   191,324 ( 0.00%)      }
         .           
         .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(vars);
         .                       value.visit_with(&mut validator);
         .                   }
    27,523 ( 0.00%)          Binder(value, vars)
         .               }
         .           }
         .           
         .           impl<'tcx, T> Binder<'tcx, T> {
         .               /// Skips the binder and returns the "bound" value. This is a
         .               /// risky thing to do because it's easy to get confused about
         .               /// De Bruijn indices and the like. It is usually better to
         .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
         .               /// accounting.
         .               ///
         .               /// Some examples where `skip_binder` is reasonable:
         .               ///
         .               /// - extracting the `DefId` from a PolyTraitRef;
         .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
         .               ///   a type parameter `X`, since the type `X` does not reference any regions
         .               pub fn skip_binder(self) -> T {
 5,040,179 ( 0.04%)          self.0
         .               }
         .           
         .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
     1,672 ( 0.00%)          self.1
         .               }
         .           
         .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
     8,747 ( 0.00%)          Binder(&self.0, self.1)
         .               }
         .           
         .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(&T) -> U,
         .               {
         .                   let value = f(&self.0);
         .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
         .           
         .               pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(&T) -> U,
         .               {
         .                   self.as_ref().map_bound(f)
         .               }
         .           
       884 ( 0.00%)      pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(T) -> U,
         .               {
    55,832 ( 0.00%)          let value = f(self.0);
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.1);
         .                       value.visit_with(&mut validator);
         .                   }
   723,483 ( 0.01%)          Binder(value, self.1)
       884 ( 0.00%)      }
         .           
         .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
         .               where
         .                   F: FnOnce(T) -> Result<U, E>,
         .               {
         .                   let value = f(self.0)?;
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.1);
         .                       value.visit_with(&mut validator);
         .                   }
    13,750 ( 0.00%)          Ok(Binder(value, self.1))
         .               }
         .           
         .               /// Wraps a `value` in a binder, using the same bound variables as the
         .               /// current `Binder`. This should not be used if the new value *changes*
         .               /// the bound variables. Note: the (old or new) value itself does not
         .               /// necessarily need to *name* all the bound variables.
         .               ///
         .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
         .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
         .               where
         .                   U: TypeFoldable<'tcx>,
         .               {
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
         .                       value.visit_with(&mut validator);
         .                   }
    20,152 ( 0.00%)          Binder(value, self.1)
         .               }
         .           
         .               /// Unwraps and returns the value within, but only if it contains
         .               /// no bound vars at all. (In other words, if this binder --
         .               /// and indeed any enclosing binder -- doesn't bind anything at
         .               /// all.) Otherwise, returns `None`.
         .               ///
         .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
         .               /// binder, but permits late-bound vars bound by enclosing
         .               /// binders, but that would require adjusting the debruijn
         .               /// indices, and given the shallow binding structure we often use,
         .               /// would not be that useful.)
         .               pub fn no_bound_vars(self) -> Option<T>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
   756,552 ( 0.01%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
     1,530 ( 0.00%)      }
         .           
         .               /// Splits the contents into two things that share the same binder
         .               /// level as the original, returning two distinct binders.
         .               ///
         .               /// `f` should consider bound regions at depth 1 to be free, and
         .               /// anything it produces with bound regions at depth 1 will be
         .               /// bound in the resulting return values.
         .               pub fn split<U, V, F>(self, f: F) -> (Binder<'tcx, U>, Binder<'tcx, V>)
-- line 1160 ----------------------------------------
-- line 1170 ----------------------------------------
         .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
         .                   let bound_vars = self.1;
         .                   self.0.map(|v| Binder(v, bound_vars))
         .               }
         .           }
         .           
         .           /// Represents the projection of an associated type. In explicit UFCS
         .           /// form this would be written `<T as Trait<..>>::N`.
     1,742 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
   370,100 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ProjectionTy<'tcx> {
         .               /// The parameters of the associated item.
   287,740 ( 0.00%)      pub substs: SubstsRef<'tcx>,
         .           
         .               /// The `DefId` of the `TraitItem` for the associated type `N`.
         .               ///
         .               /// Note that this is not the `DefId` of the `TraitRef` containing this
         .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
   211,931 ( 0.00%)      pub item_def_id: DefId,
         .           }
         .           
         .           impl<'tcx> ProjectionTy<'tcx> {
   197,764 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
    56,504 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
   226,016 ( 0.00%)      }
         .           
         .               /// Extracts the underlying trait reference and own substs from this projection.
         .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
         .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
     5,222 ( 0.00%)      pub fn trait_ref_and_own_substs(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
     2,238 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
         .                   let trait_generics = tcx.generics_of(def_id);
     3,730 ( 0.00%)          (
         .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
         .                       &self.substs[trait_generics.count()..],
         .                   )
     6,714 ( 0.00%)      }
         .           
         .               /// Extracts the underlying trait reference from this projection.
         .               /// For example, if this is a projection of `<T as Iterator>::Item`,
         .               /// then this function would return a `T: Iterator` trait reference.
         .               ///
         .               /// WARNING: This will drop the substs for generic associated types
         .               /// consider calling [Self::trait_ref_and_own_substs] to get those
         .               /// as well.
   253,485 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
    28,165 ( 0.00%)          let def_id = self.trait_def_id(tcx);
    28,165 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
   309,815 ( 0.00%)      }
         .           
    56,395 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
   169,185 ( 0.00%)          self.substs.type_at(0)
   112,790 ( 0.00%)      }
         .           }
         .           
         .           #[derive(Copy, Clone, Debug, TypeFoldable)]
         .           pub struct GenSig<'tcx> {
         .               pub resume_ty: Ty<'tcx>,
         .               pub yield_ty: Ty<'tcx>,
         .               pub return_ty: Ty<'tcx>,
         .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
         .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
         .           
         .           /// Signature of a function type, which we have arbitrarily
         .           /// decided to use to refer to the input/output types.
         .           ///
         .           /// - `inputs`: is the list of arguments and their modes.
         .           /// - `output`: is the return type.
         .           /// - `c_variadic`: indicates whether this is a C-variadic function.
   101,744 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
   112,307 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct FnSig<'tcx> {
    33,123 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
   234,045 ( 0.00%)      pub c_variadic: bool,
    58,548 ( 0.00%)      pub unsafety: hir::Unsafety,
   190,975 ( 0.00%)      pub abi: abi::Abi,
         .           }
         .           
         .           impl<'tcx> FnSig<'tcx> {
    57,845 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
   292,370 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
   115,690 ( 0.00%)      }
         .           
    47,853 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
   395,271 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
    95,706 ( 0.00%)      }
         .           
         .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
         .               // method.
         .               fn fake() -> FnSig<'tcx> {
         .                   FnSig {
         .                       inputs_and_output: List::empty(),
         .                       c_variadic: false,
         .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
         .               }
         .           }
         .           
         .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
         .           
         .           impl<'tcx> PolyFnSig<'tcx> {
         .               #[inline]
         .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
     8,000 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
         .               }
         .               #[inline]
         .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
    12,588 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
         .               }
         .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
         .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
       780 ( 0.00%)      }
         .               #[inline]
         .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
     9,561 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
         .               }
         .               pub fn c_variadic(&self) -> bool {
     1,558 ( 0.00%)          self.skip_binder().c_variadic
       779 ( 0.00%)      }
         .               pub fn unsafety(&self) -> hir::Unsafety {
     4,774 ( 0.00%)          self.skip_binder().unsafety
     2,387 ( 0.00%)      }
         .               pub fn abi(&self) -> abi::Abi {
    45,496 ( 0.00%)          self.skip_binder().abi
    11,374 ( 0.00%)      }
         .           }
         .           
         .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
         .           
        80 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
       800 ( 0.00%)  #[derive(HashStable)]
         .           pub struct ParamTy {
       248 ( 0.00%)      pub index: u32,
         .               pub name: Symbol,
         .           }
         .           
         .           impl<'tcx> ParamTy {
       510 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
         .                   ParamTy { index, name }
       255 ( 0.00%)      }
         .           
         .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
       234 ( 0.00%)          ParamTy::new(def.index, def.name)
       117 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
         .                   tcx.mk_ty_param(self.index, self.name)
         .               }
         .           }
         .           
         .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
        36 ( 0.00%)  #[derive(HashStable)]
         .           pub struct ParamConst {
       262 ( 0.00%)      pub index: u32,
       262 ( 0.00%)      pub name: Symbol,
         .           }
         .           
         .           impl ParamConst {
         .               pub fn new(index: u32, name: Symbol) -> ParamConst {
         .                   ParamConst { index, name }
         .               }
         .           
         .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
         .           /// the inference variable is supposed to satisfy the relation
         .           /// *for every value of the placeholder region*. To ensure that doesn't
         .           /// happen, you can use `leak_check`. This is more clearly explained
         .           /// by the [rustc dev guide].
         .           ///
         .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
         .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
         .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
 5,513,907 ( 0.05%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
     1,836 ( 0.00%)  pub enum RegionKind {
         .               /// Region bound in a type or fn declaration which will be
         .               /// substituted 'early' -- that is, at the same time when type
         .               /// parameters are substituted.
         .               ReEarlyBound(EarlyBoundRegion),
         .           
         .               /// Region bound in a function scope, which will be substituted when the
         .               /// function is called.
   162,924 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
         .           
         .               /// When checking a function body, the types of all arguments and so forth
         .               /// that refer to bound region parameters are modified to refer to free
         .               /// region parameters.
         .               ReFree(FreeRegion),
         .           
         .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
         .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
         .               /// regions visible from `U`, but not less than regions not visible
         .               /// from `U`.
         .               ReEmpty(ty::UniverseIndex),
         .           
         .               /// Erased region, used by trait selection, in MIR and during codegen.
         .               ReErased,
         .           }
         .           
    25,564 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
         .           pub struct EarlyBoundRegion {
    19,009 ( 0.00%)      pub def_id: DefId,
    37,613 ( 0.00%)      pub index: u32,
    54,036 ( 0.00%)      pub name: Symbol,
         .           }
         .           
         .           /// A **`const`** **v**ariable **ID**.
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
         .           pub struct ConstVid<'tcx> {
    21,190 ( 0.00%)      pub index: u32,
    19,394 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
         .           }
         .           
         .           rustc_index::newtype_index! {
         .               /// A **region** (lifetime) **v**ariable **ID**.
         .               pub struct RegionVid {
         .                   DEBUG_FORMAT = custom,
         .               }
         .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
         .           rustc_index::newtype_index! {
         .               pub struct BoundVar { .. }
         .           }
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub struct BoundTy {
         .               pub var: BoundVar,
    26,885 ( 0.00%)      pub kind: BoundTyKind,
         .           }
         .           
   457,195 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub enum BoundTyKind {
         .               Anon,
         .               Param(Symbol),
         .           }
         .           
         .           impl From<BoundVar> for BoundTy {
         .               fn from(var: BoundVar) -> Self {
-- line 1532 ----------------------------------------
-- line 1616 ----------------------------------------
         .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
         .                       RegionKind::ReEmpty(_) => false,
         .                       RegionKind::ReErased => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_late_bound(&self) -> bool {
     3,534 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_placeholder(&self) -> bool {
         .                   matches!(*self, ty::RePlaceholder(..))
         .               }
         .           
         .               #[inline]
         .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
   122,632 ( 0.00%)          match *self {
         .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               pub fn type_flags(&self) -> TypeFlags {
         .                   let mut flags = TypeFlags::empty();
         .           
   310,035 ( 0.00%)          match *self {
         .                       ty::ReVar(..) => {
         .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
         .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
         .                           flags = flags | TypeFlags::HAS_RE_INFER;
         .                       }
         .                       ty::RePlaceholder(..) => {
         .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
         .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
         .                       ty::ReErased => {
         .                           flags = flags | TypeFlags::HAS_RE_ERASED;
         .                       }
         .                   }
         .           
         .                   debug!("type_flags({:?}) = {:?}", self, flags);
         .           
         .                   flags
     9,848 ( 0.00%)      }
         .           
         .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
         .               /// For example, consider the regions in this snippet of code:
         .               ///
         .               /// ```
         .               /// impl<'a> Foo {
         .               ///      ^^ -- early bound, declared on an impl
         .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
         .           
         .               #[inline(always)]
         .               pub fn flags(&self) -> TypeFlags {
         .                   self.flags
         .               }
         .           
         .               #[inline]
         .               pub fn is_unit(&self) -> bool {
     6,042 ( 0.00%)          match self.kind() {
     1,654 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_never(&self) -> bool {
   174,643 ( 0.00%)          matches!(self.kind(), Never)
         .               }
         .           
         .               #[inline]
         .               pub fn is_primitive(&self) -> bool {
         .                   self.kind().is_primitive()
         .               }
         .           
         .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn is_ref(&self) -> bool {
         .                   matches!(self.kind(), Ref(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_ty_var(&self) -> bool {
   214,721 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
   231,288 ( 0.00%)          match self.kind() {
    50,284 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_ty_infer(&self) -> bool {
       264 ( 0.00%)          matches!(self.kind(), Infer(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_phantom_data(&self) -> bool {
        28 ( 0.00%)          if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
         .               }
         .           
         .               #[inline]
         .               pub fn is_bool(&self) -> bool {
        75 ( 0.00%)          *self.kind() == Bool
         .               }
         .           
         .               /// Returns `true` if this type is a `str`.
         .               #[inline]
         .               pub fn is_str(&self) -> bool {
         .                   *self.kind() == Str
         .               }
         .           
         .               #[inline]
         .               pub fn is_param(&self, index: u32) -> bool {
        95 ( 0.00%)          match self.kind() {
         .                       ty::Param(ref data) => data.index == index,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_slice(&self) -> bool {
         .                   match self.kind() {
         .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_array(&self) -> bool {
       367 ( 0.00%)          matches!(self.kind(), Array(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_simd(&self) -> bool {
         .                   match self.kind() {
         .                       Adt(def, _) => def.repr.simd(),
         .                       _ => false,
         .                   }
         .               }
         .           
        68 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
       136 ( 0.00%)          match self.kind() {
         .                       Array(ty, _) | Slice(ty) => ty,
         .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
         .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
         .                   }
        68 ( 0.00%)      }
         .           
         .               pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
         .                   match self.kind() {
         .                       Adt(def, substs) => {
         .                           assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
         .                           let variant = def.non_enum_variant();
         .                           let f0_ty = variant.fields[0].ty(tcx, substs);
         .           
-- line 1824 ----------------------------------------
-- line 1838 ----------------------------------------
         .                           }
         .                       }
         .                       _ => bug!("`simd_size_and_type` called on invalid type"),
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_region_ptr(&self) -> bool {
       547 ( 0.00%)          matches!(self.kind(), Ref(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_mutable_ptr(&self) -> bool {
         .                   matches!(
         .                       self.kind(),
         .                       RawPtr(TypeAndMut { mutbl: hir::Mutability::Mut, .. })
         .                           | Ref(_, _, hir::Mutability::Mut)
-- line 1854 ----------------------------------------
-- line 1861 ----------------------------------------
         .                   match self.kind() {
         .                       Ref(_, _, mutability) => Some(*mutability),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_unsafe_ptr(&self) -> bool {
    13,116 ( 0.00%)          matches!(self.kind(), RawPtr(_))
         .               }
         .           
         .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
         .               #[inline]
         .               pub fn is_any_ptr(&self) -> bool {
         8 ( 0.00%)          self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
         .               }
         .           
         .               #[inline]
         .               pub fn is_box(&self) -> bool {
   130,430 ( 0.00%)          match self.kind() {
    12,376 ( 0.00%)              Adt(def, _) => def.is_box(),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               /// Panics if called on any type other than `Box<T>`.
     1,338 ( 0.00%)      pub fn boxed_ty(&self) -> Ty<'tcx> {
     1,338 ( 0.00%)          match self.kind() {
     3,345 ( 0.00%)              Adt(def, substs) if def.is_box() => substs.type_at(0),
         .                       _ => bug!("`boxed_ty` is called on non-box type {:?}", self),
         .                   }
     1,338 ( 0.00%)      }
         .           
         .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
         .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
         .               /// contents are abstract to rustc.)
         .               #[inline]
         .               pub fn is_scalar(&self) -> bool {
    23,979 ( 0.00%)          matches!(
    50,423 ( 0.00%)              self.kind(),
         .                       Bool | Char
         .                           | Int(_)
         .                           | Float(_)
         .                           | Uint(_)
         .                           | FnDef(..)
         .                           | FnPtr(_)
         .                           | RawPtr(_)
         .                           | Infer(IntVar(_) | FloatVar(_))
         .                   )
         .               }
         .           
         .               /// Returns `true` if this type is a floating point type.
         .               #[inline]
         .               pub fn is_floating_point(&self) -> bool {
    12,375 ( 0.00%)          matches!(self.kind(), Float(_) | Infer(FloatVar(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_trait(&self) -> bool {
       387 ( 0.00%)          matches!(self.kind(), Dynamic(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_enum(&self) -> bool {
     1,418 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
         .               }
         .           
         .               #[inline]
         .               pub fn is_union(&self) -> bool {
    51,889 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
         .               }
         .           
         .               #[inline]
         .               pub fn is_closure(&self) -> bool {
    35,552 ( 0.00%)          matches!(self.kind(), Closure(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_generator(&self) -> bool {
    54,861 ( 0.00%)          matches!(self.kind(), Generator(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_integral(&self) -> bool {
   295,441 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fresh_ty(&self) -> bool {
         .                   matches!(self.kind(), Infer(FreshTy(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fresh(&self) -> bool {
     6,281 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_char(&self) -> bool {
         .                   matches!(self.kind(), Char)
         .               }
         .           
         .               #[inline]
         .               pub fn is_numeric(&self) -> bool {
         .                   self.is_integral() || self.is_floating_point()
         .               }
         .           
         .               #[inline]
         .               pub fn is_signed(&self) -> bool {
     6,762 ( 0.00%)          matches!(self.kind(), Int(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_ptr_sized_integral(&self) -> bool {
     1,545 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
         .               }
         .           
         .               #[inline]
         .               pub fn has_concrete_skeleton(&self) -> bool {
         .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
         .               }
         .           
         .               /// Returns the type and mutability of `*ty`.
         .               ///
         .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
         .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
    41,775 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
   271,798 ( 0.00%)          match self.kind() {
     2,606 ( 0.00%)              Adt(def, _) if def.is_box() => {
     1,334 ( 0.00%)                  Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
         .                       }
   133,442 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
     1,684 ( 0.00%)              RawPtr(mt) if explicit => Some(*mt),
         .                       _ => None,
         .                   }
    83,550 ( 0.00%)      }
         .           
         .               /// Returns the type of `ty[i]`.
         .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
    70,318 ( 0.00%)          match self.kind() {
         .                       Array(ty, _) | Slice(ty) => Some(ty),
         .                       _ => None,
         .                   }
     5,353 ( 0.00%)      }
         .           
   137,192 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
    68,596 ( 0.00%)          match self.kind() {
    51,174 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
       455 ( 0.00%)              FnPtr(f) => *f,
         .                       Error(_) => {
         .                           // ignore errors (#54954)
         .                           ty::Binder::dummy(FnSig::fake())
         .                       }
         .                       Closure(..) => bug!(
         .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
         .                       ),
         .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
         .                   }
   154,341 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn is_fn(&self) -> bool {
     8,121 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fn_ptr(&self) -> bool {
         .                   matches!(self.kind(), FnPtr(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_impl_trait(&self) -> bool {
         .                   matches!(self.kind(), Opaque(..))
         .               }
         .           
         .               #[inline]
         .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
    13,730 ( 0.00%)          match self.kind() {
         .                       Adt(adt, _) => Some(adt),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               /// Iterates over tuple fields.
         .               /// Panics when called on anything but a tuple.
       686 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
     3,044 ( 0.00%)          match self.kind() {
     2,185 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
         .                       _ => bug!("tuple_fields called on non-tuple"),
         .                   }
     1,372 ( 0.00%)      }
         .           
         .               /// Get the `i`-th element of a tuple.
         .               /// Panics when called on anything but a tuple.
        93 ( 0.00%)      pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
       186 ( 0.00%)          match self.kind() {
       186 ( 0.00%)              Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
         .                       _ => bug!("tuple_fields called on non-tuple"),
         .                   }
       186 ( 0.00%)      }
         .           
         .               /// If the type contains variants, returns the valid range of variant indices.
         .               //
         .               // FIXME: This requires the optimized MIR in the case of generators.
         .               #[inline]
         .               pub fn variant_range(&self, tcx: TyCtxt<'tcx>) -> Option<Range<VariantIdx>> {
         .                   match self.kind() {
         .                       TyKind::Adt(adt, _) => Some(adt.variant_range()),
-- line 2068 ----------------------------------------
-- line 2073 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// If the type contains variants, returns the variant for `variant_index`.
         .               /// Panics if `variant_index` is out of range.
         .               //
         .               // FIXME: This requires the optimized MIR in the case of generators.
         .               #[inline]
    15,540 ( 0.00%)      pub fn discriminant_for_variant(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   variant_index: VariantIdx,
         .               ) -> Option<Discr<'tcx>> {
    12,596 ( 0.00%)          match self.kind() {
     3,918 ( 0.00%)              TyKind::Adt(adt, _) if adt.variants.is_empty() => {
         .                           // This can actually happen during CTFE, see
         .                           // https://github.com/rust-lang/rust/issues/89765.
         .                           None
         .                       }
     1,959 ( 0.00%)              TyKind::Adt(adt, _) if adt.is_enum() => {
         .                           Some(adt.discriminant_for_variant(tcx, variant_index))
         .                       }
         .                       TyKind::Generator(def_id, substs, _) => {
         .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
         .                       }
         .                       _ => None,
         .                   }
    12,432 ( 0.00%)      }
         .           
         .               /// Returns the type of the discriminant of this type.
    14,150 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
     7,075 ( 0.00%)          match self.kind() {
    11,320 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
         .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
         .           
         .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
         .                           let assoc_items = tcx.associated_item_def_ids(
         .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
         .                           );
         .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
         .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
         .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
         .           
         .                       ty::Bound(..)
         .                       | ty::Placeholder(_)
         .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
         .                       }
         .                   }
    11,320 ( 0.00%)      }
         .           
         .               /// Returns the type of metadata for (potentially fat) pointers to this type.
        72 ( 0.00%)      pub fn ptr_metadata_ty(
         .                   &'tcx self,
         .                   tcx: TyCtxt<'tcx>,
         .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
         .               ) -> Ty<'tcx> {
        72 ( 0.00%)          let tail = tcx.struct_tail_with_normalize(self, normalize);
        40 ( 0.00%)          match tail.kind() {
         .                       // Sized types
         .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
         .                       | ty::Uint(_)
         .                       | ty::Int(_)
         .                       | ty::Bool
         .                       | ty::Float(_)
         .                       | ty::FnDef(..)
         .                       | ty::FnPtr(_)
-- line 2160 ----------------------------------------
-- line 2170 ----------------------------------------
         .                       | ty::Foreign(..)
         .                       // If returned by `struct_tail_without_normalization` this is a unit struct
         .                       // without any fields, or not a struct, and therefore is Sized.
         .                       | ty::Adt(..)
         .                       // If returned by `struct_tail_without_normalization` this is the empty tuple,
         .                       // a.k.a. unit type, which is Sized
         .                       | ty::Tuple(..) => tcx.types.unit,
         .           
        16 ( 0.00%)              ty::Str | ty::Slice(_) => tcx.types.usize,
         .                       ty::Dynamic(..) => {
         .                           let dyn_metadata = tcx.lang_items().dyn_metadata().unwrap();
         .                           tcx.type_of(dyn_metadata).subst(tcx, &[tail.into()])
         .                       },
         .           
         .                       ty::Projection(_)
         .                       | ty::Param(_)
         .                       | ty::Opaque(..)
         .                       | ty::Infer(ty::TyVar(_))
         .                       | ty::Bound(..)
         .                       | ty::Placeholder(..)
         .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`ptr_metadata_ty` applied to unexpected type: {:?}", tail)
         .                       }
         .                   }
        64 ( 0.00%)      }
         .           
         .               /// When we create a closure, we record its kind (i.e., what trait
         .               /// it implements) into its `ClosureSubsts` using a type
         .               /// parameter. This is kind of a phantom type, except that the
         .               /// most convenient thing for us to are the integral types. This
         .               /// function converts such a special type into the closure
         .               /// kind. To go the other way, use
         .               /// `tcx.closure_kind_ty(closure_kind)`.
         .               ///
         .               /// Note that during type checking, we use an inference variable
         .               /// to represent the closure kind, because it has not yet been
         .               /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)
         .               /// is complete, that type variable will be unified.
     2,734 ( 0.00%)      pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {
     5,468 ( 0.00%)          match self.kind() {
     5,340 ( 0.00%)              Int(int_ty) => match int_ty {
         .                           ty::IntTy::I8 => Some(ty::ClosureKind::Fn),
         .                           ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),
         .                           ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),
         .                           _ => bug!("cannot convert type `{:?}` to a closure kind", self),
         .                       },
         .           
         .                       // "Bound" types appear in canonical queries when the
         .                       // closure type is not yet known
         .                       Bound(..) | Infer(_) => None,
         .           
         .                       Error(_) => Some(ty::ClosureKind::Fn),
         .           
         .                       _ => bug!("cannot convert type `{:?}` to a closure kind", self),
         .                   }
     2,734 ( 0.00%)      }
         .           
         .               /// Fast path helper for testing if a type is `Sized`.
         .               ///
         .               /// Returning true means the type is known to be sized. Returning
         .               /// `false` means nothing -- could be sized, might not be.
         .               ///
         .               /// Note that we could never rely on the fact that a type such as `[_]` is
         .               /// trivially `!Sized` because we could be in a type environment with a
         .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
         .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
         .               /// this method doesn't return `Option<bool>`.
 1,041,732 ( 0.01%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
   694,488 ( 0.01%)          match self.kind() {
         .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
         .                       | ty::Uint(_)
         .                       | ty::Int(_)
         .                       | ty::Bool
         .                       | ty::Float(_)
         .                       | ty::FnDef(..)
         .                       | ty::FnPtr(_)
         .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
         .                       | ty::GeneratorWitness(..)
         .                       | ty::Array(..)
         .                       | ty::Closure(..)
         .                       | ty::Never
         .                       | ty::Error(_) => true,
         .           
         .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
         .           
    86,498 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
         .           
    22,809 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
         .           
         .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
         .           
         .                       ty::Infer(ty::TyVar(_)) => false,
         .           
         .                       ty::Bound(..)
         .                       | ty::Placeholder(..)
         .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
         .                       }
         .                   }
 1,041,732 ( 0.01%)      }
         .           }
         .           
         .           /// Extra information about why we ended up with a particular variance.
         .           /// This is only used to add more information to error messages, and
         .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
         .           /// may lead to confusing notes in error messages, it will never cause
         .           /// a miscompilation or unsoundness.
         .           ///
         .           /// When in doubt, use `VarianceDiagInfo::default()`
       525 ( 0.00%)  #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]
         .           pub enum VarianceDiagInfo<'tcx> {
         .               /// No additional information - this is the default.
         .               /// We will not add any additional information to error messages.
         .               #[default]
         .               None,
         .               /// We switched our variance because a generic argument occurs inside
         .               /// the invariant generic argument of another type.
         .               Invariant {
-- line 2290 ----------------------------------------
-- line 2295 ----------------------------------------
         .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
         .                   param_index: u32,
         .               },
         .           }
         .           
         .           impl<'tcx> VarianceDiagInfo<'tcx> {
         .               /// Mirrors `Variance::xform` - used to 'combine' the existing
         .               /// and new `VarianceDiagInfo`s when our variance changes.
    52,102 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
         .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
    78,153 ( 0.00%)          match self {
         .                       VarianceDiagInfo::None => other,
         .                       VarianceDiagInfo::Invariant { .. } => self,
         .                   }
    26,051 ( 0.00%)      }
         .           }

27,672,670 ( 0.24%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir                  

-- line 5 ----------------------------------------
         .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
         .           unsafe impl GlobalAlloc for System {
         .               #[inline]
         .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
         .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
         .                   // So only rely on MIN_ALIGN if size >= align.
         .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
         .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
12,516,538 ( 0.11%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
 9,387,402 ( 0.08%)              libc::malloc(layout.size()) as *mut u8
         .                   } else {
         .                       #[cfg(target_os = "macos")]
         .                       {
         .                           if layout.align() > (1 << 31) {
         .                               return ptr::null_mut();
         .                           }
         .                       }
         .                       aligned_malloc(&layout)
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
         .                   // See the comment above in `alloc` for why this check looks the way it does.
   410,896 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
   616,344 ( 0.01%)              libc::calloc(layout.size(), 1) as *mut u8
         .                   } else {
         .                       let ptr = self.alloc(layout);
         .                       if !ptr.is_null() {
         .                           ptr::write_bytes(ptr, 0, layout.size());
         .                       }
         .                       ptr
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
 3,231,848 ( 0.03%)          libc::free(ptr as *mut libc::c_void)
         .               }
         .           
         .               #[inline]
         .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
   733,804 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
 1,467,608 ( 0.01%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
         .                   } else {
         .                       realloc_fallback(self, ptr, layout, new_size)
         .                   }
         .               }
         .           }
         .           
         .           cfg_if::cfg_if! {
         .               if #[cfg(any(
-- line 56 ----------------------------------------
-- line 84 ----------------------------------------
         .               } else if #[cfg(target_os = "wasi")] {
         .                   #[inline]
         .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
         .                       libc::aligned_alloc(layout.align(), layout.size()) as *mut u8
         .                   }
         .               } else {
         .                   #[inline]
         .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
         1 ( 0.00%)              let mut out = ptr::null_mut();
         .                       // posix_memalign requires that the alignment be a multiple of `sizeof(void*)`.
         .                       // Since these are all powers of 2, we can just use max.
         .                       let align = layout.align().max(crate::mem::size_of::<usize>());
         2 ( 0.00%)              let ret = libc::posix_memalign(&mut out, align, layout.size());
         2 ( 0.00%)              if ret != 0 { ptr::null_mut() } else { out as *mut u8 }
         .                   }
         .               }
         .           }

         1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                  

-- line 57 ----------------------------------------
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
     8,622 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
     4,311 ( 0.00%)              from_str_radix(src, radix)
    12,933 ( 0.00%)          }
         .           
         .                   /// Returns the number of ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[doc(alias = "popcount")]
         .                   #[doc(alias = "popcnt")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn count_ones(self) -> u32 {
   536,730 ( 0.00%)              intrinsics::ctpop(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of zeros in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
         .                   /// assert_eq!(n.leading_zeros(), 2);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn leading_zeros(self) -> u32 {
 1,418,126 ( 0.01%)              intrinsics::ctlz(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of trailing zeros in the binary representation
         .                   /// of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
         .                   /// assert_eq!(n.trailing_zeros(), 3);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn trailing_zeros(self) -> u32 {
 1,343,235 ( 0.01%)              intrinsics::cttz(self) as u32
         .                   }
         .           
         .                   /// Returns the number of leading ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn rotate_left(self, n: u32) -> Self {
33,405,868 ( 0.29%)              intrinsics::rotate_left(self, n as $SelfT)
         .                   }
         .           
         .                   /// Shifts the bits to the right by a specified amount, `n`,
         .                   /// wrapping the truncated bits to the beginning of the resulting
         .                   /// integer.
         .                   ///
         .                   /// Please note this isn't the same operation as the `>>` shifting operator!
         .                   ///
-- line 220 ----------------------------------------
-- line 430 ----------------------------------------
         .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   pub const fn checked_add(self, rhs: Self) -> Option<Self> {
         8 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
         .                       if unlikely!(b) {None} else {Some(a)}
         .                   }
         .           
         .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
         .                   /// cannot occur.
         .                   ///
         .                   /// # Safety
         .                   ///
-- line 446 ----------------------------------------
-- line 456 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_add`.
 3,973,154 ( 0.03%)              unsafe { intrinsics::unchecked_add(self, rhs) }
         .                   }
         .           
         .                   /// Checked addition with a signed integer. Computes `self + rhs`,
         .                   /// returning `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_sub`.
   155,851 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
         .                   }
         .           
         .                   /// Checked integer multiplication. Computes `self * rhs`, returning
         .                   /// `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 596 ----------------------------------------
         .                                 without modifying the original"]
         .                   #[inline]
         .                   pub const fn checked_div(self, rhs: Self) -> Option<Self> {
         .                       if unlikely!(rhs == 0) {
         .                           None
         .                       } else {
         .                           // SAFETY: div by zero has been checked above and unsigned types have no other
         .                           // failure modes for division
     2,720 ( 0.00%)                  Some(unsafe { intrinsics::unchecked_div(self, rhs) })
         .                       }
         .                   }
         .           
         .                   /// Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning `None`
         .                   /// if `rhs == 0`.
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 612 ----------------------------------------
-- line 1035 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_add(self, rhs: Self) -> Self {
   874,031 ( 0.01%)              intrinsics::saturating_add(self, rhs)
         .                   }
         .           
         .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
    77,175 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
         .                   }
         .           
         .                   /// Saturating integer multiplication. Computes `self * rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1104 ----------------------------------------
         .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX).saturating_mul(10), ", stringify!($SelfT),"::MAX);")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   pub const fn saturating_mul(self, rhs: Self) -> Self {
         2 ( 0.00%)              match self.checked_mul(rhs) {
         .                           Some(x) => x,
         .                           None => Self::MAX,
         .                       }
         .                   }
         .           
         .                   /// Saturating integer division. Computes `self / rhs`, saturating at the
         .                   /// numeric bounds instead of overflowing.
         .                   ///
-- line 1120 ----------------------------------------
-- line 1175 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
14,196,916 ( 0.12%)              intrinsics::wrapping_add(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) addition with a signed integer. Computes
         .                   /// `self + rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
 6,713,456 ( 0.06%)              intrinsics::wrapping_sub(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) multiplication. Computes `self *
         .                   /// rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
         .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
27,148,253 ( 0.24%)              intrinsics::wrapping_mul(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) division. Computes `self / rhs`.
         .                   /// Wrapped division on unsigned types is just normal division.
         .                   /// There's no way wrapping could ever happen.
         .                   /// This function exists, so that all operations
         .                   /// are accounted for in the wrapping operations.
         .                   ///
-- line 1256 ----------------------------------------
-- line 1397 ----------------------------------------
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_shl(self, rhs: u32) -> Self {
         .                       // SAFETY: the masking by the bitsize of the type ensures that we do not shift
         .                       // out of bounds
         .                       unsafe {
        18 ( 0.00%)                  intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)
         .                       }
         .                   }
         .           
         .                   /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,
         .                   /// where `mask` removes any high-order bits of `rhs` that
         .                   /// would cause the shift to exceed the bitwidth of the type.
         .                   ///
         .                   /// Note that this is *not* the same as a rotate-right; the
-- line 1413 ----------------------------------------
-- line 1491 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_add(2), (7, false));")]
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
    16,746 ( 0.00%)          pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
 3,053,527 ( 0.03%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
    33,492 ( 0.00%)          }
         .           
         .                   /// Calculates `self + rhs + carry` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
         .                   /// additional bit of overflow. This allows for chaining together multiple additions
         .                   /// to create "big integers" which represent larger values.
         .                   ///
         .                   #[doc = concat!("This can be thought of as a ", stringify!($BITS), "-bit \"full adder\", in the electronics sense.")]
-- line 1510 ----------------------------------------
-- line 1587 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_sub(2), (3, false));")]
         .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
       552 ( 0.00%)          pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
 1,096,266 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
     1,104 ( 0.00%)          }
         .           
         .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
         .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
         .                   /// to create "big integers" which represent larger values.
         .                   ///
         .                   /// # Examples
-- line 1606 ----------------------------------------
-- line 1674 ----------------------------------------
         .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                     without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
 5,071,797 ( 0.04%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
         .                   }
         .           
         .                   /// Calculates the divisor when `self` is divided by `rhs`.
         .                   ///
         .                   /// Returns a tuple of the divisor along with a boolean indicating
         .                   /// whether an arithmetic overflow would occur. Note that for unsigned
         .                   /// integers overflow never occurs, so the second value is always
-- line 1690 ----------------------------------------
-- line 1838 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(0x1", stringify!($SelfT), ".overflowing_shl(132), (0x10, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_shl(self, rhs: u32) -> (Self, bool) {
         6 ( 0.00%)              (self.wrapping_shl(rhs), (rhs > ($BITS - 1)))
         .                   }
         .           
         .                   /// Shifts self right by `rhs` bits.
         .                   ///
         .                   /// Returns a tuple of the shifted version of self along with a boolean
         .                   /// indicating whether the shift value was larger than or equal to the
         .                   /// number of bits. If the shift value is too large, then value is
         .                   /// masked (N-1) where N is the number of bits, and this value is then
-- line 1854 ----------------------------------------
-- line 2132 ----------------------------------------
         .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
         .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
         .                   /// ```
         .                   #[must_use]
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
         .                   #[inline(always)]
         .                   pub const fn is_power_of_two(self) -> bool {
       186 ( 0.00%)              self.count_ones() == 1
         .                   }
         .           
         .                   // Returns one less than next power of two.
         .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
         .                   //
         .                   // 8u8.one_less_than_next_power_of_two() == 7
         .                   // 6u8.one_less_than_next_power_of_two() == 7
         .                   //
         .                   // This method cannot overflow, as in the `next_power_of_two`
         .                   // overflow cases it instead ends up returning the maximum value
         .                   // of the type, and can return 0 for 0.
         .                   #[inline]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   const fn one_less_than_next_power_of_two(self) -> Self {
    40,252 ( 0.00%)              if self <= 1 { return 0; }
         .           
    49,251 ( 0.00%)              let p = self - 1;
         .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
         .                       // That means the shift is always in-bounds, and some processors
         .                       // (such as intel pre-haswell) have more efficient ctlz
         .                       // intrinsics when the argument is non-zero.
   145,779 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    51,065 ( 0.00%)              <$SelfT>::MAX >> z
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `self`.
         .                   ///
         .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
         .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
         .                   /// release mode (the only situation in which method can return 0).
         .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   #[rustc_inherit_overflow_checks]
         .                   pub const fn next_power_of_two(self) -> Self {
    58,170 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `n`. If
         .                   /// the next power of two is greater than the type's maximum value,
         .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 2195 ----------------------------------------

   370,850 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs
--------------------------------------------------------------------------------
Ir                  

-- line 22 ----------------------------------------
         .           
         .           /// An entity in the Rust type system, which can be one of
         .           /// several kinds (types, lifetimes, and consts).
         .           /// To reduce memory usage, a `GenericArg` is an interned pointer,
         .           /// with the lowest 2 bits being reserved for a tag to
         .           /// indicate the type (`Ty`, `Region`, or `Const`) it points to.
         .           #[derive(Copy, Clone, PartialEq, Eq, Hash)]
         .           pub struct GenericArg<'tcx> {
 1,236,620 ( 0.01%)      ptr: NonZeroUsize,
 3,503,230 ( 0.03%)      marker: PhantomData<(Ty<'tcx>, ty::Region<'tcx>, &'tcx ty::Const<'tcx>)>,
         .           }
         .           
         .           const TAG_MASK: usize = 0b11;
         .           const TYPE_TAG: usize = 0b00;
         .           const REGION_TAG: usize = 0b01;
         .           const CONST_TAG: usize = 0b10;
         .           
    89,972 ( 0.00%)  #[derive(Debug, TyEncodable, TyDecodable, PartialEq, Eq, PartialOrd, Ord, HashStable)]
         .           pub enum GenericArgKind<'tcx> {
         .               Lifetime(ty::Region<'tcx>),
         .               Type(Ty<'tcx>),
         .               Const(&'tcx ty::Const<'tcx>),
         .           }
         .           
         .           impl<'tcx> GenericArgKind<'tcx> {
    21,650 ( 0.00%)      fn pack(self) -> GenericArg<'tcx> {
    21,650 ( 0.00%)          let (tag, ptr) = match self {
         .                       GenericArgKind::Lifetime(lt) => {
         .                           // Ensure we can use the tag bits.
         .                           assert_eq!(mem::align_of_val(lt) & TAG_MASK, 0);
         .                           (REGION_TAG, lt as *const _ as usize)
         .                       }
         .                       GenericArgKind::Type(ty) => {
         .                           // Ensure we can use the tag bits.
         .                           assert_eq!(mem::align_of_val(ty) & TAG_MASK, 0);
-- line 56 ----------------------------------------
-- line 58 ----------------------------------------
         .                       }
         .                       GenericArgKind::Const(ct) => {
         .                           // Ensure we can use the tag bits.
         .                           assert_eq!(mem::align_of_val(ct) & TAG_MASK, 0);
         .                           (CONST_TAG, ct as *const _ as usize)
         .                       }
         .                   };
         .           
   247,967 ( 0.00%)          GenericArg { ptr: unsafe { NonZeroUsize::new_unchecked(ptr | tag) }, marker: PhantomData }
    21,650 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> fmt::Debug for GenericArg<'tcx> {
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   match self.unpack() {
         .                       GenericArgKind::Lifetime(lt) => lt.fmt(f),
         .                       GenericArgKind::Type(ty) => ty.fmt(f),
         .                       GenericArgKind::Const(ct) => ct.fmt(f),
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> Ord for GenericArg<'tcx> {
         9 ( 0.00%)      fn cmp(&self, other: &GenericArg<'_>) -> Ordering {
         6 ( 0.00%)          self.unpack().cmp(&other.unpack())
         .               }
         .           }
         .           
         .           impl<'tcx> PartialOrd for GenericArg<'tcx> {
         .               fn partial_cmp(&self, other: &GenericArg<'_>) -> Option<Ordering> {
         .                   Some(self.cmp(&other))
         .               }
         .           }
         .           
         .           impl<'tcx> From<ty::Region<'tcx>> for GenericArg<'tcx> {
   146,033 ( 0.00%)      fn from(r: ty::Region<'tcx>) -> GenericArg<'tcx> {
         .                   GenericArgKind::Lifetime(r).pack()
   146,033 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> From<Ty<'tcx>> for GenericArg<'tcx> {
 2,041,875 ( 0.02%)      fn from(ty: Ty<'tcx>) -> GenericArg<'tcx> {
         .                   GenericArgKind::Type(ty).pack()
 2,041,875 ( 0.02%)      }
         .           }
         .           
         .           impl<'tcx> From<&'tcx ty::Const<'tcx>> for GenericArg<'tcx> {
     5,351 ( 0.00%)      fn from(c: &'tcx ty::Const<'tcx>) -> GenericArg<'tcx> {
         .                   GenericArgKind::Const(c).pack()
     5,351 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> GenericArg<'tcx> {
         .               #[inline]
         .               pub fn unpack(self) -> GenericArgKind<'tcx> {
         .                   let ptr = self.ptr.get();
         .                   unsafe {
24,156,506 ( 0.21%)              match ptr & TAG_MASK {
   130,806 ( 0.00%)                  REGION_TAG => GenericArgKind::Lifetime(&*((ptr & !TAG_MASK) as *const _)),
 6,060,848 ( 0.05%)                  TYPE_TAG => GenericArgKind::Type(&*((ptr & !TAG_MASK) as *const _)),
    15,805 ( 0.00%)                  CONST_TAG => GenericArgKind::Const(&*((ptr & !TAG_MASK) as *const _)),
         .                           _ => intrinsics::unreachable(),
         .                       }
         .                   }
         .               }
         .           
         .               /// Unpack the `GenericArg` as a type when it is known certainly to be a type.
         .               /// This is true in cases where `Substs` is used in places where the kinds are known
         .               /// to be limited (e.g. in tuples, where the only parameters are type parameters).
         .               pub fn expect_ty(self) -> Ty<'tcx> {
         .                   match self.unpack() {
         .                       GenericArgKind::Type(ty) => ty,
         .                       _ => bug!("expected a type, but found another kind"),
         .                   }
   165,884 ( 0.00%)      }
         .           
         .               /// Unpack the `GenericArg` as a const when it is known certainly to be a const.
         .               pub fn expect_const(self) -> &'tcx ty::Const<'tcx> {
         .                   match self.unpack() {
         .                       GenericArgKind::Const(c) => c,
         .                       _ => bug!("expected a const, but found another kind"),
         .                   }
         .               }
-- line 140 ----------------------------------------
-- line 155 ----------------------------------------
         .           impl<'tcx> TypeFoldable<'tcx> for GenericArg<'tcx> {
         .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
         .                   self,
         .                   folder: &mut F,
         .               ) -> Result<Self, F::Error> {
         .                   match self.unpack() {
         .                       GenericArgKind::Lifetime(lt) => lt.try_fold_with(folder).map(Into::into),
         .                       GenericArgKind::Type(ty) => ty.try_fold_with(folder).map(Into::into),
         6 ( 0.00%)              GenericArgKind::Const(ct) => ct.try_fold_with(folder).map(Into::into),
         .                   }
         .               }
         .           
         .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
         .                   match self.unpack() {
         .                       GenericArgKind::Lifetime(lt) => lt.visit_with(visitor),
         .                       GenericArgKind::Type(ty) => ty.visit_with(visitor),
         .                       GenericArgKind::Const(ct) => ct.visit_with(visitor),
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for GenericArg<'tcx> {
         .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
    14,301 ( 0.00%)          self.unpack().encode(e)
         .               }
         .           }
         .           
         .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for GenericArg<'tcx> {
   108,250 ( 0.00%)      fn decode(d: &mut D) -> GenericArg<'tcx> {
   108,250 ( 0.00%)          GenericArgKind::decode(d).pack()
         .               }
         .           }
         .           
         .           /// A substitution mapping generic parameters to new values.
         .           pub type InternalSubsts<'tcx> = List<GenericArg<'tcx>>;
         .           
         .           pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;
         .           
         .           impl<'a, 'tcx> InternalSubsts<'tcx> {
         .               /// Interpret these substitutions as the substitutions of a closure type.
         .               /// Closure substitutions have a particular structure controlled by the
         .               /// compiler that encodes information like the signature and closure kind;
         .               /// see `ty::ClosureSubsts` struct for more comments.
     4,052 ( 0.00%)      pub fn as_closure(&'a self) -> ClosureSubsts<'a> {
         .                   ClosureSubsts { substs: self }
     4,052 ( 0.00%)      }
         .           
         .               /// Interpret these substitutions as the substitutions of a generator type.
         .               /// Generator substitutions have a particular structure controlled by the
         .               /// compiler that encodes information like the signature and generator kind;
         .               /// see `ty::GeneratorSubsts` struct for more comments.
         .               pub fn as_generator(&'tcx self) -> GeneratorSubsts<'tcx> {
         .                   GeneratorSubsts { substs: self }
         .               }
-- line 208 ----------------------------------------
-- line 211 ----------------------------------------
         .               /// Inline const substitutions have a particular structure controlled by the
         .               /// compiler that encodes information like the inferred type;
         .               /// see `ty::InlineConstSubsts` struct for more comments.
         .               pub fn as_inline_const(&'tcx self) -> InlineConstSubsts<'tcx> {
         .                   InlineConstSubsts { substs: self }
         .               }
         .           
         .               /// Creates an `InternalSubsts` that maps each generic parameter to itself.
    39,220 ( 0.00%)      pub fn identity_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {
     9,764 ( 0.00%)          Self::for_item(tcx, def_id, |param, _| tcx.mk_param_from_def(param))
    35,298 ( 0.00%)      }
         .           
         .               /// Creates an `InternalSubsts` for generic parameter definitions,
         .               /// by calling closures to obtain each kind.
         .               /// The closures get to observe the `InternalSubsts` as they're
         .               /// being built, which can be used to correctly
         .               /// substitute defaults of generic parameters.
   527,298 ( 0.00%)      pub fn for_item<F>(tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
         .               where
         .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
         .               {
         .                   let defs = tcx.generics_of(def_id);
         .                   let count = defs.count();
         .                   let mut substs = SmallVec::with_capacity(count);
   214,161 ( 0.00%)          Self::fill_item(&mut substs, tcx, defs, &mut mk_kind);
   117,426 ( 0.00%)          tcx.intern_substs(&substs)
   559,269 ( 0.00%)      }
         .           
         .               pub fn extend_to<F>(&self, tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
         .               where
         .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
         .               {
         .                   Self::for_item(tcx, def_id, |param, substs| {
         .                       self.get(param.index as usize).cloned().unwrap_or_else(|| mk_kind(param, substs))
         .                   })
         .               }
         .           
   726,128 ( 0.01%)      pub fn fill_item<F>(
         .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
         .                   tcx: TyCtxt<'tcx>,
         .                   defs: &ty::Generics,
         .                   mk_kind: &mut F,
         .               ) where
         .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
         .               {
   297,927 ( 0.00%)          if let Some(def_id) = defs.parent {
         .                       let parent_defs = tcx.generics_of(def_id);
    29,314 ( 0.00%)              Self::fill_item(substs, tcx, parent_defs, mk_kind);
         .                   }
         .                   Self::fill_single(substs, defs, mk_kind)
   575,744 ( 0.01%)      }
         .           
       568 ( 0.00%)      pub fn fill_single<F>(
         .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
         .                   defs: &ty::Generics,
         .                   mk_kind: &mut F,
         .               ) where
         .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
         .               {
         .                   substs.reserve(defs.params.len());
         .                   for param in &defs.params {
       101 ( 0.00%)              let kind = mk_kind(param, substs);
   519,430 ( 0.00%)              assert_eq!(param.index as usize, substs.len());
         .                       substs.push(kind);
         .                   }
       568 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn types(&'a self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'a {
         .                   self.iter()
         .                       .filter_map(|k| if let GenericArgKind::Type(ty) = k.unpack() { Some(ty) } else { None })
         .               }
         .           
         .               #[inline]
-- line 284 ----------------------------------------
-- line 301 ----------------------------------------
         .               ) -> impl DoubleEndedIterator<Item = GenericArgKind<'tcx>> + 'a {
         .                   self.iter().filter_map(|k| match k.unpack() {
         .                       GenericArgKind::Lifetime(_) => None,
         .                       generic => Some(generic),
         .                   })
         .               }
         .           
         .               #[inline]
         6 ( 0.00%)      pub fn type_at(&self, i: usize) -> Ty<'tcx> {
   654,060 ( 0.01%)          if let GenericArgKind::Type(ty) = self[i].unpack() {
         .                       ty
         .                   } else {
         .                       bug!("expected type for param #{} in {:?}", i, self);
         .                   }
         4 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn region_at(&self, i: usize) -> ty::Region<'tcx> {
         .                   if let GenericArgKind::Lifetime(lt) = self[i].unpack() {
         .                       lt
         .                   } else {
         .                       bug!("expected region for param #{} in {:?}", i, self);
         .                   }
-- line 323 ----------------------------------------
-- line 350 ----------------------------------------
         .               /// impl<U> X<U> for U { fn f<V>() {} }
         .               /// ```
         .               ///
         .               /// * If `self` is `[Self, S, T]`: the identity substs of `f` in the trait.
         .               /// * If `source_ancestor` is the def_id of the trait.
         .               /// * If `target_substs` is `[U]`, the substs for the impl.
         .               /// * Then we will return `[U, T]`, the subst for `f` in the impl that
         .               ///   are needed for it to match the trait.
    61,845 ( 0.00%)      pub fn rebase_onto(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   source_ancestor: DefId,
         .                   target_substs: SubstsRef<'tcx>,
         .               ) -> SubstsRef<'tcx> {
         .                   let defs = tcx.generics_of(source_ancestor);
    17,670 ( 0.00%)          tcx.mk_substs(target_substs.iter().chain(self.iter().skip(defs.params.len())))
    70,680 ( 0.00%)      }
         .           
     1,184 ( 0.00%)      pub fn truncate_to(&self, tcx: TyCtxt<'tcx>, generics: &ty::Generics) -> SubstsRef<'tcx> {
         .                   tcx.mk_substs(self.iter().take(generics.count()))
     2,368 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {
   161,266 ( 0.00%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
         .                   self,
         .                   folder: &mut F,
         .               ) -> Result<Self, F::Error> {
         .                   // This code is hot enough that it's worth specializing for the most
         .                   // common length lists, to avoid the overhead of `SmallVec` creation.
         .                   // The match arms are in order of frequency. The 1, 2, and 0 cases are
         .                   // typically hit in 90--99.99% of cases. When folding doesn't change
         .                   // the substs, it's faster to reuse the existing substs rather than
         .                   // calling `intern_substs`.
 5,713,056 ( 0.05%)          match self.len() {
         .                       1 => {
   510,328 ( 0.00%)                  let param0 = self[0].try_fold_with(folder)?;
 2,162,159 ( 0.02%)                  if param0 == self[0] { Ok(self) } else { Ok(folder.tcx().intern_substs(&[param0])) }
         .                       }
         .                       2 => {
   750,922 ( 0.01%)                  let param0 = self[0].try_fold_with(folder)?;
 2,023,687 ( 0.02%)                  let param1 = self[1].try_fold_with(folder)?;
 2,104,930 ( 0.02%)                  if param0 == self[0] && param1 == self[1] {
         .                               Ok(self)
         .                           } else {
 1,981,680 ( 0.02%)                      Ok(folder.tcx().intern_substs(&[param0, param1]))
         .                           }
         .                       }
         .                       0 => Ok(self),
         .                       _ => {
         .                           let params: SmallVec<[_; 8]> =
    41,503 ( 0.00%)                      self.iter().map(|k| k.try_fold_with(folder)).collect::<Result<_, _>>()?;
     3,784 ( 0.00%)                  if params[..] == self[..] {
         .                               Ok(self)
         .                           } else {
     9,668 ( 0.00%)                      Ok(folder.tcx().intern_substs(&params))
         .                           }
         .                       }
         .                   }
   223,499 ( 0.00%)      }
         .           
         .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
   658,287 ( 0.01%)          self.iter().try_for_each(|t| t.visit_with(visitor))
         .               }
         .           }
         .           
         .           ///////////////////////////////////////////////////////////////////////////
         .           // Public trait `Subst`
         .           //
         .           // Just call `foo.subst(tcx, substs)` to perform a substitution across
         .           // `foo`. Or use `foo.subst_spanned(tcx, substs, Some(span))` when
-- line 420 ----------------------------------------
-- line 435 ----------------------------------------
         .           
         .           impl<'tcx, T: TypeFoldable<'tcx>> Subst<'tcx> for T {
         .               fn subst_spanned(
         .                   self,
         .                   tcx: TyCtxt<'tcx>,
         .                   substs: &[GenericArg<'tcx>],
         .                   span: Option<Span>,
         .               ) -> T {
 2,527,784 ( 0.02%)          let mut folder = SubstFolder { tcx, substs, span, binders_passed: 0 };
         .                   self.fold_with(&mut folder)
         .               }
         .           }
         .           
         .           ///////////////////////////////////////////////////////////////////////////
         .           // The actual substitution engine itself is a type folder.
         .           
         .           struct SubstFolder<'a, 'tcx> {
-- line 451 ----------------------------------------
-- line 456 ----------------------------------------
         .               span: Option<Span>,
         .           
         .               /// Number of region binders we have passed through while doing the substitution
         .               binders_passed: u32,
         .           }
         .           
         .           impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
   295,938 ( 0.00%)          self.tcx
         .               }
         .           
         .               fn fold_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: ty::Binder<'tcx, T>,
         .               ) -> ty::Binder<'tcx, T> {
   424,982 ( 0.00%)          self.binders_passed += 1;
    95,096 ( 0.00%)          let t = t.super_fold_with(self);
   424,982 ( 0.00%)          self.binders_passed -= 1;
         .                   t
         .               }
         .           
   380,454 ( 0.00%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
         .                   // Note: This routine only handles regions that are bound on
         .                   // type declarations and other outer declarations, not those
         .                   // bound in *fn types*. Region substitution of the bound
         .                   // regions that appear in a function signature is done using
         .                   // the specialized routine `ty::replace_late_regions()`.
   126,818 ( 0.00%)          match *r {
    70,422 ( 0.00%)              ty::ReEarlyBound(data) => {
    70,422 ( 0.00%)                  let rk = self.substs.get(data.index as usize).map(|k| k.unpack());
         .                           match rk {
    35,211 ( 0.00%)                      Some(GenericArgKind::Lifetime(lt)) => self.shift_region_through_binders(lt),
         .                               _ => {
         .                                   let span = self.span.unwrap_or(DUMMY_SP);
         .                                   let msg = format!(
         .                                       "Region parameter out of range \
         .                                        when substituting in region {} (index={})",
         .                                       data.name, data.index
         .                                   );
         .                                   span_bug!(span, "{}", msg);
         .                               }
         .                           }
         .                       }
         .                       _ => r,
         .                   }
   443,863 ( 0.00%)      }
         .           
 2,162,658 ( 0.02%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
   720,886 ( 0.01%)          if !t.needs_subst() {
         .                       return t;
         .                   }
         .           
   960,048 ( 0.01%)          match *t.kind() {
 1,625,735 ( 0.01%)              ty::Param(p) => self.ty_for_param(p, t),
   929,262 ( 0.01%)              _ => t.super_fold_with(self),
         .                   }
 2,830,045 ( 0.02%)      }
         .           
   367,388 ( 0.00%)      fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
   145,153 ( 0.00%)          if let ty::ConstKind::Param(p) = c.val {
         .                       self.const_for_param(p, c)
         .                   } else {
   400,023 ( 0.00%)              c.super_fold_with(self)
         .                   }
    64,296 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {
         .                   c.super_fold_with(self)
         .               }
         .           }
         .           
         .           impl<'a, 'tcx> SubstFolder<'a, 'tcx> {
         .               fn ty_for_param(&self, p: ty::ParamTy, source_ty: Ty<'tcx>) -> Ty<'tcx> {
         .                   // Look up the type in the substitutions. It really should be in there.
   650,294 ( 0.01%)          let opt_ty = self.substs.get(p.index as usize).map(|k| k.unpack());
         .                   let ty = match opt_ty {
         .                       Some(GenericArgKind::Type(ty)) => ty,
         .                       Some(kind) => {
         .                           let span = self.span.unwrap_or(DUMMY_SP);
         .                           span_bug!(
         .                               span,
         .                               "expected type for `{:?}` ({:?}/{}) but found {:?} \
         .                                when substituting, substs={:?}",
-- line 539 ----------------------------------------
-- line 562 ----------------------------------------
         .               }
         .           
         .               fn const_for_param(
         .                   &self,
         .                   p: ParamConst,
         .                   source_ct: &'tcx ty::Const<'tcx>,
         .               ) -> &'tcx ty::Const<'tcx> {
         .                   // Look up the const in the substitutions. It really should be in there.
    16,074 ( 0.00%)          let opt_ct = self.substs.get(p.index as usize).map(|k| k.unpack());
         .                   let ct = match opt_ct {
         .                       Some(GenericArgKind::Const(ct)) => ct,
         .                       Some(kind) => {
         .                           let span = self.span.unwrap_or(DUMMY_SP);
         .                           span_bug!(
         .                               span,
         .                               "expected const for `{:?}` ({:?}/{}) but found {:?} \
         .                                when substituting substs={:?}",
-- line 578 ----------------------------------------
-- line 645 ----------------------------------------
         .               fn shift_vars_through_binders<T: TypeFoldable<'tcx>>(&self, val: T) -> T {
         .                   debug!(
         .                       "shift_vars(val={:?}, binders_passed={:?}, has_escaping_bound_vars={:?})",
         .                       val,
         .                       self.binders_passed,
         .                       val.has_escaping_bound_vars()
         .                   );
         .           
 1,156,786 ( 0.01%)          if self.binders_passed == 0 || !val.has_escaping_bound_vars() {
         .                       return val;
         .                   }
         .           
         .                   let result = ty::fold::shift_vars(self.tcx(), val, self.binders_passed);
         .                   debug!("shift_vars: shifted result = {:?}", result);
         .           
         .                   result
         .               }
         .           
         .               fn shift_region_through_binders(&self, region: ty::Region<'tcx>) -> ty::Region<'tcx> {
    82,932 ( 0.00%)          if self.binders_passed == 0 || !region.has_escaping_bound_vars() {
         .                       return region;
         .                   }
         .                   ty::fold::shift_region(self.tcx, region, self.binders_passed)
         .               }
         .           }
         .           
         .           /// Stores the user-given substs to reach some fully qualified path
         .           /// (e.g., `<T>::Item` or `<T as Trait>::Item`).
         .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
     6,668 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
         .           pub struct UserSubsts<'tcx> {
         .               /// The substitutions for the item as given by the user.
         .               pub substs: SubstsRef<'tcx>,
         .           
         .               /// The self type, in the case of a `<T>::Item` path (when applied
         .               /// to an inherent impl). See `UserSelfTy` below.
     1,394 ( 0.00%)      pub user_self_ty: Option<UserSelfTy<'tcx>>,
         .           }
         .           
         .           /// Specifies the user-given self type. In the case of a path that
         .           /// refers to a member in an inherent impl, this self type is
         .           /// sometimes needed to constrain the type parameters on the impl. For
         .           /// example, in this code:
         .           ///
         .           /// ```
-- line 689 ----------------------------------------
-- line 696 ----------------------------------------
         .           /// self type `Foo<u32>`. Then we can instantiate the parameters of
         .           /// the impl (with the substs from `UserSubsts`) and apply those to
         .           /// the self type, giving `Foo<?A>`. Finally, we unify that with
         .           /// the self type here, which contains `?A` to be `&'static u32`
         .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
         .           #[derive(HashStable, TypeFoldable, Lift)]
         .           pub struct UserSelfTy<'tcx> {
         .               pub impl_def_id: DefId,
       903 ( 0.00%)      pub self_ty: Ty<'tcx>,
         .           }

 8,509,126 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs
--------------------------------------------------------------------------------
Ir                  

-- line 346 ----------------------------------------
         .               ///
         .               /// let c = Cell::new(5);
         .               ///
         .               /// c.set(10);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn set(&self, val: T) {
     5,742 ( 0.00%)          let old = self.replace(val);
     3,856 ( 0.00%)          drop(old);
         .               }
         .           
         .               /// Swaps the values of two `Cell`s.
         .               /// Difference with `std::mem::swap` is that this function doesn't require `&mut` reference.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 363 ----------------------------------------
-- line 434 ----------------------------------------
         .               ///
         .               /// let five = c.get();
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn get(&self) -> T {
         .                   // SAFETY: This can cause data races if called from a separate thread,
         .                   // but `Cell` is `!Sync` so this won't happen.
   525,156 ( 0.00%)          unsafe { *self.value.get() }
         .               }
         .           
         .               /// Updates the contained value using a function and returns the new value.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(cell_update)]
-- line 450 ----------------------------------------
-- line 689 ----------------------------------------
         .           
         .           #[inline(always)]
         .           fn is_writing(x: BorrowFlag) -> bool {
         .               x < UNUSED
         .           }
         .           
         .           #[inline(always)]
         .           fn is_reading(x: BorrowFlag) -> bool {
 1,204,374 ( 0.01%)      x > UNUSED
         .           }
         .           
         .           impl<T> RefCell<T> {
         .               /// Creates a new `RefCell` containing `value`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 705 ----------------------------------------
-- line 706 ----------------------------------------
         .               /// use std::cell::RefCell;
         .               ///
         .               /// let c = RefCell::new(5);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_refcell_new", since = "1.24.0")]
         .               #[inline]
         .               pub const fn new(value: T) -> RefCell<T> {
   132,781 ( 0.00%)          RefCell {
   103,806 ( 0.00%)              value: UnsafeCell::new(value),
         .                       borrow: Cell::new(UNUSED),
         .                       #[cfg(feature = "debug_refcell")]
         .                       borrowed_at: Cell::new(None),
         .                   }
         .               }
         .           
         .               /// Consumes the `RefCell`, returning the wrapped value.
         .               ///
-- line 723 ----------------------------------------
-- line 731 ----------------------------------------
         .               /// let five = c.into_inner();
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_cell_into_inner", issue = "78729")]
         .               #[inline]
         .               pub const fn into_inner(self) -> T {
         .                   // Since this function takes `self` (the `RefCell`) by value, the
         .                   // compiler statically verifies that it is not currently borrowed.
     6,244 ( 0.00%)          self.value.into_inner()
         .               }
         .           
         .               /// Replaces the wrapped value with a new one, returning the old value,
         .               /// without deinitializing either one.
         .               ///
         .               /// This function corresponds to [`std::mem::replace`](../mem/fn.replace.html).
         .               ///
         .               /// # Panics
-- line 747 ----------------------------------------
-- line 845 ----------------------------------------
         .               /// let c = RefCell::new(5);
         .               ///
         .               /// let m = c.borrow_mut();
         .               /// let b = c.borrow(); // this causes a panic
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
    10,517 ( 0.00%)      pub fn borrow(&self) -> Ref<'_, T> {
         .                   self.try_borrow().expect("already mutably borrowed")
    31,551 ( 0.00%)      }
         .           
         .               /// Immutably borrows the wrapped value, returning an error if the value is currently mutably
         .               /// borrowed.
         .               ///
         .               /// The borrow lasts until the returned `Ref` exits scope. Multiple immutable borrows can be
         .               /// taken out at the same time.
         .               ///
         .               /// This is the non-panicking variant of [`borrow`](#method.borrow).
-- line 863 ----------------------------------------
-- line 937 ----------------------------------------
         .               /// let c = RefCell::new(5);
         .               /// let m = c.borrow();
         .               ///
         .               /// let b = c.borrow_mut(); // this causes a panic
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
   289,248 ( 0.00%)      pub fn borrow_mut(&self) -> RefMut<'_, T> {
         .                   self.try_borrow_mut().expect("already borrowed")
   867,744 ( 0.01%)      }
         .           
         .               /// Mutably borrows the wrapped value, returning an error if the value is currently borrowed.
         .               ///
         .               /// The borrow lasts until the returned `RefMut` or all `RefMut`s derived
         .               /// from it exit scope. The value cannot be borrowed while this borrow is
         .               /// active.
         .               ///
         .               /// This is the non-panicking variant of [`borrow_mut`](#method.borrow_mut).
-- line 955 ----------------------------------------
-- line 967 ----------------------------------------
         .               /// }
         .               ///
         .               /// assert!(c.try_borrow_mut().is_ok());
         .               /// ```
         .               #[stable(feature = "try_borrow", since = "1.13.0")]
         .               #[inline]
         .               #[cfg_attr(feature = "debug_refcell", track_caller)]
         .               pub fn try_borrow_mut(&self) -> Result<RefMut<'_, T>, BorrowMutError> {
         8 ( 0.00%)          match BorrowRefMut::new(&self.borrow) {
         .                       Some(b) => {
         .                           #[cfg(feature = "debug_refcell")]
         .                           {
         .                               self.borrowed_at.set(Some(crate::panic::Location::caller()));
         .                           }
         .           
         .                           // SAFETY: `BorrowRef` guarantees unique access.
     1,363 ( 0.00%)                  Ok(RefMut { value: unsafe { &mut *self.value.get() }, borrow: b })
         .                       }
         .                       None => Err(BorrowMutError {
         .                           // If a borrow occurred, then we must already have an outstanding borrow,
         .                           // so `borrowed_at` will be `Some`
         .                           #[cfg(feature = "debug_refcell")]
         .                           location: self.borrowed_at.get().unwrap(),
         .                       }),
         .                   }
-- line 991 ----------------------------------------
-- line 1254 ----------------------------------------
         .           
         .           struct BorrowRef<'b> {
         .               borrow: &'b Cell<BorrowFlag>,
         .           }
         .           
         .           impl<'b> BorrowRef<'b> {
         .               #[inline]
         .               fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRef<'b>> {
 1,782,979 ( 0.02%)          let b = borrow.get().wrapping_add(1);
 1,051,132 ( 0.01%)          if !is_reading(b) {
         .                       // Incrementing borrow can result in a non-reading value (<= 0) in these cases:
         .                       // 1. It was < 0, i.e. there are writing borrows, so we can't allow a read borrow
         .                       //    due to Rust's reference aliasing rules
         .                       // 2. It was isize::MAX (the max amount of reading borrows) and it overflowed
         .                       //    into isize::MIN (the max amount of writing borrows) so we can't allow
         .                       //    an additional read borrow because isize can't represent so many read borrows
         .                       //    (this can only happen if you mem::forget more than a small constant amount of
         .                       //    `Ref`s, which is not good practice)
-- line 1271 ----------------------------------------
-- line 1279 ----------------------------------------
         .                       Some(BorrowRef { borrow })
         .                   }
         .               }
         .           }
         .           
         .           impl Drop for BorrowRef<'_> {
         .               #[inline]
         .               fn drop(&mut self) {
   757,193 ( 0.01%)          let borrow = self.borrow.get();
         .                   debug_assert!(is_reading(borrow));
 1,531,585 ( 0.01%)          self.borrow.set(borrow - 1);
         .               }
         .           }
         .           
         .           impl Clone for BorrowRef<'_> {
         .               #[inline]
         .               fn clone(&self) -> Self {
         .                   // Since this Ref exists, we know the borrow flag
         .                   // is a reading borrow.
-- line 1297 ----------------------------------------
-- line 1645 ----------------------------------------
         .           
         .           struct BorrowRefMut<'b> {
         .               borrow: &'b Cell<BorrowFlag>,
         .           }
         .           
         .           impl Drop for BorrowRefMut<'_> {
         .               #[inline]
         .               fn drop(&mut self) {
15,541,482 ( 0.14%)          let borrow = self.borrow.get();
         .                   debug_assert!(is_writing(borrow));
30,618,422 ( 0.27%)          self.borrow.set(borrow + 1);
         .               }
         .           }
         .           
         .           impl<'b> BorrowRefMut<'b> {
         .               #[inline]
         .               fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRefMut<'b>> {
         .                   // NOTE: Unlike BorrowRefMut::clone, new is called to create the initial
         .                   // mutable reference, and so there must currently be no existing
         .                   // references. Thus, while clone increments the mutable refcount, here
         .                   // we explicitly only allow going from UNUSED to UNUSED - 1.
33,064,272 ( 0.29%)          match borrow.get() {
         .                       UNUSED => {
         .                           borrow.set(UNUSED - 1);
         .                           Some(BorrowRefMut { borrow })
         .                       }
         .                       _ => None,
         .                   }
         .               }
         .           
-- line 1674 ----------------------------------------
-- line 1711 ----------------------------------------
         .                   self.value
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: ?Sized> DerefMut for RefMut<'_, T> {
         .               #[inline]
         .               fn deref_mut(&mut self) -> &mut T {
    22,165 ( 0.00%)          self.value
         .               }
         .           }
         .           
         .           #[unstable(feature = "coerce_unsized", issue = "27732")]
         .           impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<RefMut<'b, U>> for RefMut<'b, T> {}
         .           
         .           #[stable(feature = "std_guard_impls", since = "1.20.0")]
         .           impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {
-- line 1727 ----------------------------------------
-- line 1909 ----------------------------------------
         .               /// ```
         .               #[inline(always)]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_unsafecell_get", since = "1.32.0")]
         .               pub const fn get(&self) -> *mut T {
         .                   // We can just cast the pointer from `UnsafeCell<T>` to `T` because of
         .                   // #[repr(transparent)]. This exploits libstd's special status, there is
         .                   // no guarantee for user code that this will work in future versions of the compiler!
 9,374,030 ( 0.08%)          self as *const UnsafeCell<T> as *const T as *mut T
         .               }
         .           
         .               /// Returns a mutable reference to the underlying data.
         .               ///
         .               /// This call borrows the `UnsafeCell` mutably (at compile-time) which
         .               /// guarantees that we possess the only reference.
         .               ///
         .               /// # Examples
-- line 1925 ----------------------------------------

21,311,118 ( 0.19%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/traversal.rs
--------------------------------------------------------------------------------
Ir                 

-- line 23 ----------------------------------------
        .           pub struct Preorder<'a, 'tcx> {
        .               body: &'a Body<'tcx>,
        .               visited: BitSet<BasicBlock>,
        .               worklist: Vec<BasicBlock>,
        .               root_is_start_block: bool,
        .           }
        .           
        .           impl<'a, 'tcx> Preorder<'a, 'tcx> {
  149,460 ( 0.00%)      pub fn new(body: &'a Body<'tcx>, root: BasicBlock) -> Preorder<'a, 'tcx> {
   14,946 ( 0.00%)          let worklist = vec![root];
        .           
   44,838 ( 0.00%)          Preorder {
        .                       body,
        .                       visited: BitSet::new_empty(body.basic_blocks().len()),
   59,784 ( 0.00%)              worklist,
        .                       root_is_start_block: root == START_BLOCK,
        .                   }
  134,514 ( 0.00%)      }
        .           }
        .           
   15,286 ( 0.00%)  pub fn preorder<'a, 'tcx>(body: &'a Body<'tcx>) -> Preorder<'a, 'tcx> {
   59,104 ( 0.00%)      Preorder::new(body, START_BLOCK)
   22,929 ( 0.00%)  }
        .           
        .           impl<'a, 'tcx> Iterator for Preorder<'a, 'tcx> {
        .               type Item = (BasicBlock, &'a BasicBlockData<'tcx>);
        .           
3,518,713 ( 0.03%)      fn next(&mut self) -> Option<(BasicBlock, &'a BasicBlockData<'tcx>)> {
  413,246 ( 0.00%)          while let Some(idx) = self.worklist.pop() {
  413,246 ( 0.00%)              if !self.visited.insert(idx) {
        .                           continue;
        .                       }
        .           
  304,937 ( 0.00%)              let data = &self.body[idx];
        .           
1,524,685 ( 0.01%)              if let Some(ref term) = data.terminator {
        .                           self.worklist.extend(term.successors());
        .                       }
        .           
        .                       return Some((idx, data));
        .                   }
        .           
        .                   None
2,878,947 ( 0.03%)      }
        .           
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   // All the blocks, minus the number of blocks we've visited.
        .                   let upper = self.body.basic_blocks().len() - self.visited.count();
        .           
        .                   let lower = if self.root_is_start_block {
        .                       // We will visit all remaining blocks exactly once.
        .                       upper
-- line 74 ----------------------------------------
-- line 101 ----------------------------------------
        .           pub struct Postorder<'a, 'tcx> {
        .               body: &'a Body<'tcx>,
        .               visited: BitSet<BasicBlock>,
        .               visit_stack: Vec<(BasicBlock, Successors<'a>)>,
        .               root_is_start_block: bool,
        .           }
        .           
        .           impl<'a, 'tcx> Postorder<'a, 'tcx> {
  106,218 ( 0.00%)      pub fn new(body: &'a Body<'tcx>, root: BasicBlock) -> Postorder<'a, 'tcx> {
        .                   let mut po = Postorder {
        .                       body,
        .                       visited: BitSet::new_empty(body.basic_blocks().len()),
        .                       visit_stack: Vec::new(),
        .                       root_is_start_block: root == START_BLOCK,
        .                   };
        .           
        .                   let data = &po.body[root];
        .           
  106,218 ( 0.00%)          if let Some(ref term) = data.terminator {
        .                       po.visited.insert(root);
   60,696 ( 0.00%)              po.visit_stack.push((root, term.successors()));
   30,348 ( 0.00%)              po.traverse_successor();
        .                   }
        .           
        .                   po
  136,566 ( 0.00%)      }
        .           
2,149,511 ( 0.02%)      fn traverse_successor(&mut self) {
        .                   // This is quite a complex loop due to 1. the borrow checker not liking it much
        .                   // and 2. what exactly is going on is not clear
        .                   //
        .                   // It does the actual traversal of the graph, while the `next` method on the iterator
        .                   // just pops off of the stack. `visit_stack` is a stack containing pairs of nodes and
        .                   // iterators over the successors of those nodes. Each iteration attempts to get the next
        .                   // node from the top of the stack, then pushes that node and an iterator over the
        .                   // successors to the top of the stack. This loop only grows `visit_stack`, stopping when
-- line 136 ----------------------------------------
-- line 169 ----------------------------------------
        .                   //
        .                   // Now that the top of the stack has no successors we can traverse, each item will
        .                   // be popped off during iteration until we get back to `A`. This yields [E, D, B].
        .                   //
        .                   // When we yield `B` and call `traverse_successor`, we push `C` to the stack, but
        .                   // since we've already visited `E`, that child isn't added to the stack. The last
        .                   // two iterations yield `C` and finally `A` for a final traversal of [E, D, B, C, A]
        .                   loop {
2,156,748 ( 0.02%)              let bb = if let Some(&mut (_, ref mut iter)) = self.visit_stack.last_mut() {
1,265,877 ( 0.01%)                  if let Some(&bb) = iter.next() {
        .                               bb
        .                           } else {
        .                               break;
        .                           }
        .                       } else {
        .                           break;
        .                       };
        .           
  421,959 ( 0.00%)              if self.visited.insert(bb) {
1,937,075 ( 0.02%)                  if let Some(term) = &self.body[bb].terminator {
1,106,900 ( 0.01%)                      self.visit_stack.push((bb, term.successors()));
        .                           }
        .                       }
        .                   }
2,456,584 ( 0.02%)      }
        .           }
        .           
    3,612 ( 0.00%)  pub fn postorder<'a, 'tcx>(body: &'a Body<'tcx>) -> Postorder<'a, 'tcx> {
    3,612 ( 0.00%)      Postorder::new(body, START_BLOCK)
    5,418 ( 0.00%)  }
        .           
        .           impl<'a, 'tcx> Iterator for Postorder<'a, 'tcx> {
        .               type Item = (BasicBlock, &'a BasicBlockData<'tcx>);
        .           
  131,289 ( 0.00%)      fn next(&mut self) -> Option<(BasicBlock, &'a BasicBlockData<'tcx>)> {
        .                   let next = self.visit_stack.pop();
  291,899 ( 0.00%)          if next.is_some() {
  570,430 ( 0.00%)              self.traverse_successor();
        .                   }
        .           
  291,899 ( 0.00%)          next.map(|(bb, _)| (bb, &self.body[bb]))
  218,815 ( 0.00%)      }
        .           
   13,005 ( 0.00%)      fn size_hint(&self) -> (usize, Option<usize>) {
        .                   // All the blocks, minus the number of blocks we've visited.
   45,665 ( 0.00%)          let upper = self.body.basic_blocks().len() - self.visited.count();
        .           
   45,665 ( 0.00%)          let lower = if self.root_is_start_block {
        .                       // We will visit all remaining blocks exactly once.
        .                       upper
        .                   } else {
        .                       self.visit_stack.len()
        .                   };
        .           
    7,803 ( 0.00%)          (lower, Some(upper))
   18,207 ( 0.00%)      }
        .           }
        .           
        .           /// Reverse postorder traversal of a graph
        .           ///
        .           /// Reverse postorder is the reverse order of a postorder traversal.
        .           /// This is different to a preorder traversal and represents a natural
        .           /// linearization of control-flow.
        .           ///
-- line 232 ----------------------------------------
-- line 253 ----------------------------------------
        .           pub struct ReversePostorder<'a, 'tcx> {
        .               body: &'a Body<'tcx>,
        .               blocks: Vec<BasicBlock>,
        .               idx: usize,
        .           }
        .           
        .           impl<'a, 'tcx> ReversePostorder<'a, 'tcx> {
        .               pub fn new(body: &'a Body<'tcx>, root: BasicBlock) -> ReversePostorder<'a, 'tcx> {
   26,736 ( 0.00%)          let blocks: Vec<_> = Postorder::new(body, root).map(|(bb, _)| bb).collect();
        .           
   13,368 ( 0.00%)          let len = blocks.len();
        .           
   66,840 ( 0.00%)          ReversePostorder { body, blocks, idx: len }
        .               }
        .           }
        .           
   80,208 ( 0.00%)  pub fn reverse_postorder<'a, 'tcx>(body: &'a Body<'tcx>) -> ReversePostorder<'a, 'tcx> {
        .               ReversePostorder::new(body, START_BLOCK)
   66,840 ( 0.00%)  }
        .           
        .           impl<'a, 'tcx> Iterator for ReversePostorder<'a, 'tcx> {
        .               type Item = (BasicBlock, &'a BasicBlockData<'tcx>);
        .           
  263,310 ( 0.00%)      fn next(&mut self) -> Option<(BasicBlock, &'a BasicBlockData<'tcx>)> {
1,053,240 ( 0.01%)          if self.idx == 0 {
        .                       return None;
        .                   }
  499,884 ( 0.00%)          self.idx -= 1;
        .           
        .                   self.blocks.get(self.idx).map(|&bb| (bb, &self.body[bb]))
  526,620 ( 0.00%)      }
        .           
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   (self.idx, Some(self.idx))
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> ExactSizeIterator for ReversePostorder<'a, 'tcx> {}
        .           
-- line 291 ----------------------------------------
-- line 295 ----------------------------------------
        .           /// This is clearer than writing `preorder` in cases where the order doesn't matter.
        .           pub fn reachable<'a, 'tcx>(
        .               body: &'a Body<'tcx>,
        .           ) -> impl 'a + Iterator<Item = (BasicBlock, &'a BasicBlockData<'tcx>)> {
        .               preorder(body)
        .           }
        .           
        .           /// Returns a `BitSet` containing all basic blocks reachable from the `START_BLOCK`.
   43,818 ( 0.00%)  pub fn reachable_as_bitset<'tcx>(body: &Body<'tcx>) -> BitSet<BasicBlock> {
        .               let mut iter = preorder(body);
        .               (&mut iter).for_each(drop);
   29,212 ( 0.00%)      iter.visited
   43,818 ( 0.00%)  }

2,892,160 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/traversal.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.14.0/src/unify/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 154 ----------------------------------------
         .           /// Value of a unification key. We implement Tarjan's union-find
         .           /// algorithm: when two keys are unified, one of them is converted
         .           /// into a "redirect" pointing at the other. These redirects form a
         .           /// DAG: the roots of the DAG (nodes that are not redirected) are each
         .           /// associated with a value of type `V` and a rank. The rank is used
         .           /// to keep the DAG relatively balanced, which helps keep the running
         .           /// time of the algorithm under control. For more information, see
         .           /// <http://en.wikipedia.org/wiki/Disjoint-set_data_structure>.
   100,714 ( 0.00%)  #[derive(PartialEq, Clone, Debug)]
         .           pub struct VarValue<K: UnifyKey> {
   136,929 ( 0.00%)      parent: K,       // if equal to self, this is a root
    84,144 ( 0.00%)      value: K::Value, // value assigned (only relevant to root)
   111,565 ( 0.00%)      rank: u32,       // max depth (only relevant to root)
         .           }
         .           
         .           /// Table of unification keys and their values. You must define a key type K
         .           /// that implements the `UnifyKey` trait. Unification tables can be used in two-modes:
         .           ///
         .           /// - in-place (`UnificationTable<InPlace<K>>` or `InPlaceUnificationTable<K>`):
         .           ///   - This is the standard mutable mode, where the array is modified
         .           ///     in place.
         .           ///   - To do backtracking, you can employ the `snapshot` and `rollback_to`
         .           ///     methods.
         .           /// - persistent (`UnificationTable<Persistent<K>>` or `PersistentUnificationTable<K>`):
         .           ///   - In this mode, we use a persistent vector to store the data, so that
         .           ///     cloning the table is an O(1) operation.
         .           ///   - This implies that ordinary operations are quite a bit slower though.
         .           ///   - Requires the `persistent` feature be selected in your Cargo.toml file.
   135,625 ( 0.00%)  #[derive(Clone, Debug, Default)]
         .           pub struct UnificationTable<S: UnificationStoreBase> {
         .               /// Indicates the current value of each key.
         .               values: S,
         .           }
         .           
         .           pub type UnificationStorage<K> = Vec<VarValue<K>>;
         .           pub type UnificationTableStorage<K> = UnificationTable<InPlace<K, UnificationStorage<K>, ()>>;
         .           
-- line 190 ----------------------------------------
-- line 215 ----------------------------------------
         .               }
         .           
         .               fn new(parent: K, value: K::Value, rank: u32) -> VarValue<K> {
         .                   VarValue {
         .                       parent: parent, // this is a root
         .                       value: value,
         .                       rank: rank,
         .                   }
   165,305 ( 0.00%)      }
         .           
         .               fn redirect(&mut self, to: K) {
    68,830 ( 0.00%)          self.parent = to;
         .               }
         .           
         .               fn root(&mut self, rank: u32, value: K::Value) {
    64,485 ( 0.00%)          self.rank = rank;
    48,605 ( 0.00%)          self.value = value;
         .               }
         .           
         .               fn parent(&self, self_key: K) -> Option<K> {
 5,162,824 ( 0.05%)          self.if_not_self(self.parent, self_key)
         .               }
         .           
         .               fn if_not_self(&self, key: K, self_key: K) -> Option<K> {
         .                   if key == self_key {
         .                       None
         .                   } else {
         .                       Some(key)
         .                   }
-- line 243 ----------------------------------------
-- line 253 ----------------------------------------
         .                   &'a mut self,
         .                   undo_log: L,
         .               ) -> UnificationTable<InPlace<K, &'a mut UnificationStorage<K>, L>>
         .               where
         .                   L: UndoLogs<sv::UndoLog<Delegate<K>>>,
         .               {
         .                   UnificationTable {
         .                       values: InPlace {
         8 ( 0.00%)                  values: self.values.values.with_log(undo_log),
         .                       },
         .                   }
         .               }
         .           }
         .           
         .           // We can't use V:LatticeValue, much as I would like to,
         .           // because frequently the pattern is that V=Option<U> for some
         .           // other type parameter U, and we have no way to say
-- line 269 ----------------------------------------
-- line 311 ----------------------------------------
         .               pub fn len(&self) -> usize {
         .                   self.values.len()
         .               }
         .           }
         .           
         .           impl<S: UnificationStoreMut> UnificationTable<S> {
         .               /// Starts a new snapshot. Each snapshot must be either
         .               /// Creates a fresh key with the given value.
   734,588 ( 0.01%)      pub fn new_key(&mut self, value: S::Value) -> S::Key {
         .                   let len = self.values.len();
   628,146 ( 0.01%)          let key: S::Key = UnifyKey::from_index(len as u32);
         .                   self.values.push(VarValue::new_var(key, value));
   278,232 ( 0.00%)          debug!("{}: created new key: {:?}", S::tag(), key);
         .                   key
 1,033,780 ( 0.01%)      }
         .           
         .               /// Reserve memory for `num_new_keys` to be created. Does not
         .               /// actually create the new keys; you must then invoke `new_key`.
         .               pub fn reserve(&mut self, num_new_keys: usize) {
         .                   self.values.reserve(num_new_keys);
         .               }
         .           
         .               /// Clears all unifications that have been performed, resetting to
-- line 333 ----------------------------------------
-- line 339 ----------------------------------------
         .                       let value = value(key);
         .                       VarValue::new_var(key, value)
         .                   });
         .               }
         .           
         .               /// Obtains the current value for a particular key.
         .               /// Not for end-users; they can use `probe_value`.
         .               fn value(&self, key: S::Key) -> &VarValue<S::Key> {
 7,316,841 ( 0.06%)          &self.values[key.index() as usize]
         .               }
         .           
         .               /// Find the root node for `vid`. This uses the standard
         .               /// union-find algorithm with path compression:
         .               /// <http://en.wikipedia.org/wiki/Disjoint-set_data_structure>.
         .               ///
         .               /// NB. This is a building-block operation and you would probably
         .               /// prefer to call `probe` below.
         .               ///
         .               /// This is an always-inlined version of this function for the hot
         .               /// callsites. `uninlined_get_root_key` is the never-inlined version.
         .               #[inline(always)]
         .               fn inlined_get_root_key(&mut self, vid: S::Key) -> S::Key {
         .                   let redirect = {
16,148,716 ( 0.14%)              match self.value(vid).parent(vid) {
         .                           None => return vid,
         .                           Some(redirect) => redirect,
         .                       }
         .                   };
         .           
 4,563,942 ( 0.04%)          let root_key: S::Key = self.uninlined_get_root_key(redirect);
 1,421,876 ( 0.01%)          if root_key != redirect {
         .                       // Path compression
       273 ( 0.00%)              self.update_value(vid, |value| value.parent = root_key);
         .                   }
         .           
         .                   root_key
         .               }
         .           
         .               // This is a never-inlined version of this function for cold callsites.
         .               // 'inlined_get_root_key` is the always-inlined version.
         .               #[inline(never)]
14,187,027 ( 0.12%)      fn uninlined_get_root_key(&mut self, vid: S::Key) -> S::Key {
         .                   self.inlined_get_root_key(vid)
14,378,493 ( 0.13%)      }
         .           
       728 ( 0.00%)      fn update_value<OP>(&mut self, key: S::Key, op: OP)
         .               where
         .                   OP: FnOnce(&mut VarValue<S::Key>),
         .               {
   265,708 ( 0.00%)          self.values.update(key.index() as usize, op);
   175,605 ( 0.00%)          debug!("Updated variable {:?} to {:?}", key, self.value(key));
       455 ( 0.00%)      }
         .           
         .               /// Either redirects `node_a` to `node_b` or vice versa, depending
         .               /// on the relative rank. The value associated with the new root
         .               /// will be `new_value`.
         .               ///
         .               /// NB: This is the "union" operation of "union-find". It is
         .               /// really more of a building block. If the values associated with
         .               /// your key are non-trivial, you would probably prefer to call
         .               /// `unify_var_var` below.
         .               fn unify_roots(&mut self, key_a: S::Key, key_b: S::Key, new_value: S::Value) {
    40,816 ( 0.00%)          debug!("unify(key_a={:?}, key_b={:?})", key_a, key_b);
         .           
    26,955 ( 0.00%)          let rank_a = self.value(key_a).rank;
   132,695 ( 0.00%)          let rank_b = self.value(key_b).rank;
         .                   if let Some((new_root, redirected)) = S::Key::order_roots(
    59,982 ( 0.00%)              key_a,
         .                       &self.value(key_a).value,
    59,982 ( 0.00%)              key_b,
         .                       &self.value(key_b).value,
         .                   ) {
         .                       // compute the new rank for the new root that they chose;
         .                       // this may not be the optimal choice.
         .                       let new_rank = if new_root == key_a {
         .                           debug_assert!(redirected == key_b);
         .                           if rank_a > rank_b {
         .                               rank_a
-- line 416 ----------------------------------------
-- line 422 ----------------------------------------
         .                           debug_assert!(redirected == key_a);
         .                           if rank_b > rank_a {
         .                               rank_b
         .                           } else {
         .                               rank_a + 1
         .                           }
         .                       };
         .                       self.redirect_root(new_rank, redirected, new_root, new_value);
    81,632 ( 0.00%)          } else if rank_a > rank_b {
         .                       // a has greater rank, so a should become b's parent,
         .                       // i.e., b should redirect to a.
    65,439 ( 0.00%)              self.redirect_root(rank_a, key_b, key_a, new_value);
    22,009 ( 0.00%)          } else if rank_a < rank_b {
         .                       // b has greater rank, so a should redirect to b.
    40,325 ( 0.00%)              self.redirect_root(rank_b, key_a, key_b, new_value);
         .                   } else {
         .                       // If equal, redirect one to the other and increment the
         .                       // other's rank.
    53,285 ( 0.00%)              self.redirect_root(rank_a + 1, key_a, key_b, new_value);
         .                   }
         .               }
         .           
         .               /// Internal method to redirect `old_root_key` (which is currently
         .               /// a root) to a child of `new_root_key` (which will remain a
         .               /// root). The rank and value of `new_root_key` will be updated to
         .               /// `new_rank` and `new_value` respectively.
   525,364 ( 0.00%)      fn redirect_root(
         .                   &mut self,
         .                   new_rank: u32,
         .                   old_root_key: S::Key,
         .                   new_root_key: S::Key,
         .                   new_value: S::Value,
         .               ) {
         .                   self.update_value(old_root_key, |old_root_value| {
         .                       old_root_value.redirect(new_root_key);
         .                   });
    41,770 ( 0.00%)          self.update_value(new_root_key, |new_root_value| {
    20,822 ( 0.00%)              new_root_value.root(new_rank, new_value);
         .                   });
   293,501 ( 0.00%)      }
         .           }
         .           
         .           /// ////////////////////////////////////////////////////////////////////////
         .           /// Public API
         .           
         .           impl<S, K, V> UnificationTable<S>
         .           where
         .               S: UnificationStoreMut<Key = K, Value = V>,
         .               K: UnifyKey<Value = V>,
         .               V: UnifyValue,
         .           {
         .               /// Unions two keys without the possibility of failure; only
         .               /// applicable when unify values use `NoError` as their error
         .               /// type.
   283,358 ( 0.00%)      pub fn union<K1, K2>(&mut self, a_id: K1, b_id: K2)
         .               where
         .                   K1: Into<K>,
         .                   K2: Into<K>,
         .                   V: UnifyValue<Error = NoError>,
         .               {
         .                   self.unify_var_var(a_id, b_id).unwrap();
   250,397 ( 0.00%)      }
         .           
         .               /// Unions a key and a value without the possibility of failure;
         .               /// only applicable when unify values use `NoError` as their error
         .               /// type.
   757,720 ( 0.01%)      pub fn union_value<K1>(&mut self, id: K1, value: V)
         .               where
         .                   K1: Into<K>,
         .                   V: UnifyValue<Error = NoError>,
         .               {
         .                   self.unify_var_value(id, value).unwrap();
   590,780 ( 0.01%)      }
         .           
         .               /// Given two keys, indicates whether they have been unioned together.
         .               pub fn unioned<K1, K2>(&mut self, a_id: K1, b_id: K2) -> bool
         .               where
         .                   K1: Into<K>,
         .                   K2: Into<K>,
         .               {
         .                   self.find(a_id) == self.find(b_id)
-- line 502 ----------------------------------------
-- line 503 ----------------------------------------
         .               }
         .           
         .               /// Given a key, returns the (current) root key.
         .               pub fn find<K1>(&mut self, id: K1) -> K
         .               where
         .                   K1: Into<K>,
         .               {
         .                   let id = id.into();
   328,135 ( 0.00%)          self.uninlined_get_root_key(id)
         .               }
         .           
         .               /// Unions together two variables, merging their values. If
         .               /// merging the values fails, the error is propagated and this
         .               /// method has no effect.
    75,186 ( 0.00%)      pub fn unify_var_var<K1, K2>(&mut self, a_id: K1, b_id: K2) -> Result<(), V::Error>
         .               where
         .                   K1: Into<K>,
         .                   K2: Into<K>,
         .               {
         .                   let a_id = a_id.into();
         .                   let b_id = b_id.into();
         .           
    97,002 ( 0.00%)          let root_a = self.uninlined_get_root_key(a_id);
   140,653 ( 0.00%)          let root_b = self.uninlined_get_root_key(b_id);
         .           
    21,645 ( 0.00%)          if root_a == root_b {
         .                       return Ok(());
         .                   }
         .           
   137,698 ( 0.00%)          let combined = V::unify_values(&self.value(root_a).value, &self.value(root_b).value)?;
         .           
         .                   Ok(self.unify_roots(root_a, root_b, combined))
    83,540 ( 0.00%)      }
         .           
         .               /// Sets the value of the key `a_id` to `b`, attempting to merge
         .               /// with the previous value.
    85,913 ( 0.00%)      pub fn unify_var_value<K1>(&mut self, a_id: K1, b: V) -> Result<(), V::Error>
         .               where
         .                   K1: Into<K>,
         .               {
         .                   let a_id = a_id.into();
   121,024 ( 0.00%)          let root_a = self.uninlined_get_root_key(a_id);
   287,930 ( 0.00%)          let value = V::unify_values(&self.value(root_a).value, &b)?;
   215,270 ( 0.00%)          self.update_value(root_a, |node| node.value = value);
         .                   Ok(())
    86,322 ( 0.00%)      }
         .           
         .               /// Returns the current value for the given key. If the key has
         .               /// been union'd, this will give the value from the current root.
 5,100,635 ( 0.04%)      pub fn probe_value<K1>(&mut self, id: K1) -> V
         .               where
         .                   K1: Into<K>,
         .               {
         .                   self.inlined_probe_value(id)
 5,056,688 ( 0.04%)      }
         .           
         .               // An always-inlined version of `probe_value`, for hot callsites.
         .               #[inline(always)]
         .               pub fn inlined_probe_value<K1>(&mut self, id: K1) -> V
         .               where
         .                   K1: Into<K>,
         .               {
         .                   let id = id.into();
         .                   let id = self.inlined_get_root_key(id);
 3,108,341 ( 0.03%)          self.value(id).value.clone()
         .               }
         .           }
         .           
         .           ///////////////////////////////////////////////////////////////////////////
         .           
         .           impl UnifyValue for () {
         .               type Error = NoError;
         .           
         .               fn unify_values(_: &(), _: &()) -> Result<(), NoError> {
         .                   Ok(())
    26,066 ( 0.00%)      }
         .           }
         .           
         .           impl<V: UnifyValue> UnifyValue for Option<V> {
         .               type Error = V::Error;
         .           
         .               fn unify_values(a: &Option<V>, b: &Option<V>) -> Result<Self, V::Error> {
    92,800 ( 0.00%)          match (a, b) {
         .                       (&None, &None) => Ok(None),
         .                       (&Some(ref v), &None) | (&None, &Some(ref v)) => Ok(Some(v.clone())),
         .                       (&Some(ref a), &Some(ref b)) => match V::unify_values(a, b) {
         .                           Ok(v) => Ok(Some(v)),
         .                           Err(err) => Err(err),
         .                       },
         .                   }
         .               }
-- line 593 ----------------------------------------

 6,941,384 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.14.0/src/unify/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 91 ----------------------------------------
        .           // maximum of number bytes needed to fill an 8-byte-sized element on which
        .           // SipHash operates. Note that for variable-sized copies which are known to be
        .           // less than 8 bytes, this function will perform more work than necessary unless
        .           // the compiler is able to optimize the extra work away.
        .           #[inline]
        .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
        .               debug_assert!(count <= 8);
        .           
   96,713 ( 0.00%)      if count == 8 {
        .                   ptr::copy_nonoverlapping(src, dst, 8);
        .                   return;
        .               }
        .           
        .               let mut i = 0;
  118,034 ( 0.00%)      if i + 3 < count {
        .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
        .                   i += 4;
        .               }
        .           
  254,523 ( 0.00%)      if i + 1 < count {
        .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
   28,490 ( 0.00%)          i += 2
        .               }
        .           
  118,034 ( 0.00%)      if i < count {
   79,714 ( 0.00%)          *dst.add(i) = *src.add(i);
        .                   i += 1;
        .               }
        .           
        .               debug_assert_eq!(i, count);
        .           }
        .           
        .           // # Implementation
        .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
        .           
        .                   hasher
        .               }
        .           
        .               // A specialized write function for values with size <= 8.
        .               #[inline]
        .               fn short_write<T>(&mut self, x: T) {
        .                   let size = mem::size_of::<T>();
1,405,982 ( 0.01%)          let nbuf = self.nbuf;
        .                   debug_assert!(size <= 8);
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
        .           
9,760,964 ( 0.09%)          if nbuf + size < BUFFER_SIZE {
        .                       unsafe {
        .                           // The memcpy call is optimized away because the size is known.
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
        .                       }
        .           
3,086,435 ( 0.03%)              self.nbuf = nbuf + size;
        .           
        .                       return;
        .                   }
        .           
  476,404 ( 0.00%)          unsafe { self.short_write_process_buffer(x) }
        .               }
        .           
        .               // A specialized write function for values with size <= 8 that should only
        .               // be called when the write would cause the buffer to fill.
        .               //
        .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
        .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
        .               // overflow) if it wasn't already.
        .               #[inline(never)]
  146,851 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
        .                   let size = mem::size_of::<T>();
  146,851 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(size <= 8);
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
        .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
        .           
        .                   // Copy first part of input into end of buffer, possibly into spill
        .                   // element. The memcpy call is optimized away because the size is known.
        .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
        .           
        .                   // Process buffer.
        .                   for i in 0..BUFFER_CAPACITY {
1,468,510 ( 0.01%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
1,174,808 ( 0.01%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
1,321,659 ( 0.01%)              self.state.v0 ^= elem;
        .                   }
        .           
        .                   // Copy remaining input into start of buffer by copying size - 1
        .                   // elements from spill (at most size - 1 bytes could have overflowed
        .                   // into the spill). The memcpy call is optimized away because the size
        .                   // is known. And the whole copy is optimized away for size == 1.
        .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
        .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
        .           
        .                   // This function should only be called when the write fills the buffer.
        .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
        .                   // is statically known, so the branch is optimized away.
  688,467 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
  587,404 ( 0.01%)          self.processed += BUFFER_SIZE;
  293,702 ( 0.00%)      }
        .           
        .               // A write function for byte slices.
        .               #[inline]
        .               fn slice_write(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
   24,333 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .           
  322,216 ( 0.00%)          if nbuf + length < BUFFER_SIZE {
        .                       unsafe {
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .           
   96,368 ( 0.00%)                  if length <= 8 {
        .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
        .                           } else {
        .                               // This memcpy is *not* optimized away.
        .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
        .                           }
        .                       }
        .           
   57,433 ( 0.00%)              self.nbuf = nbuf + length;
        .           
        .                       return;
        .                   }
        .           
   56,788 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
        .               }
        .           
        .               // A write function for byte slices that should only be called when the
        .               // write would cause the buffer to fill.
        .               //
        .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
        .               // and `msg` must contain enough bytes to initialize the rest of the element
        .               // containing the byte offset `self.nbuf`.
        .               #[inline(never)]
   56,620 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
   11,324 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
        .           
        .                   // Always copy first part of input into current element of buffer.
        .                   // This function should only be called when the write fills the buffer,
        .                   // so we know that there is enough input to fill the current element.
   33,972 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
   11,324 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
        .           
        .                   let src = msg.as_ptr();
        .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
        .           
        .                   // Process buffer.
        .           
        .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
        .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
        .                   // We know that is true, because last step ensured we have a full
        .                   // element in the buffer.
   22,648 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
        .           
        .                   for i in 0..last {
   85,692 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
   97,016 ( 0.00%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
  171,384 ( 0.00%)              self.state.v0 ^= elem;
        .                   }
        .           
        .                   // Process the remaining element-sized chunks of input.
        .                   let mut processed = needed_in_elem;
   22,648 ( 0.00%)          let input_left = length - processed;
   26,322 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
        .                   let extra_bytes_left = input_left % ELEM_SIZE;
        .           
        .                   for _ in 0..elems_left {
   12,776 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
   12,776 ( 0.00%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
   12,776 ( 0.00%)              self.state.v0 ^= elem;
   25,552 ( 0.00%)              processed += ELEM_SIZE;
        .                   }
        .           
        .                   // Copy remaining input into start of buffer.
        .                   let src = msg.as_ptr().add(processed);
        .                   let dst = self.buf.as_mut_ptr() as *mut u8;
        .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
        .           
   11,324 ( 0.00%)          self.nbuf = extra_bytes_left;
   56,620 ( 0.00%)          self.processed += nbuf + processed;
   67,944 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn finish128(mut self) -> (u64, u64) {
        .                   debug_assert!(self.nbuf < BUFFER_SIZE);
        .           
        .                   // Process full elements in buffer.
   66,552 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
        .           
        .                   // Since we're consuming self, avoid updating members for a potential
        .                   // performance gain.
   88,736 ( 0.00%)          let mut state = self.state;
        .           
        .                   for i in 0..last {
   65,573 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
   65,573 ( 0.00%)              state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut state);
   65,573 ( 0.00%)              state.v0 ^= elem;
        .                   }
        .           
        .                   // Get remaining partial element.
   44,368 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
        .                       unsafe {
        .                           // Ensure element is initialized by writing zero bytes. At most
        .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
        .                           // to write this many because we have the spill and we maintain
        .                           // `self.nbuf` such that this write will start before the spill.
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
        .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
   17,746 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
        .                       }
        .                   } else {
        .                       0
        .                   };
        .           
        .                   // Finalize the hash.
   60,811 ( 0.00%)          let length = self.processed + self.nbuf;
   41,736 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
        .           
   20,868 ( 0.00%)          state.v3 ^= b;
        .                   Sip24Rounds::c_rounds(&mut state);
   20,868 ( 0.00%)          state.v0 ^= b;
        .           
   20,868 ( 0.00%)          state.v2 ^= 0xee;
        .                   Sip24Rounds::d_rounds(&mut state);
   70,432 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
        .           
   28,680 ( 0.00%)          state.v1 ^= 0xdd;
        .                   Sip24Rounds::d_rounds(&mut state);
   28,680 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
        .           
        .                   (_0, _1)
        .               }
        .           }
        .           
        .           impl Hasher for SipHasher128 {
        .               #[inline]
        .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
        .           }
        .           
        .           #[derive(Debug, Clone, Default)]
        .           struct Sip24Rounds;
        .           
        .           impl Sip24Rounds {
        .               #[inline]
        .               fn c_rounds(state: &mut State) {
5,619,691 ( 0.05%)          compress!(state);
6,136,497 ( 0.05%)          compress!(state);
        .               }
        .           
        .               #[inline]
        .               fn d_rounds(state: &mut State) {
  140,832 ( 0.00%)          compress!(state);
  140,832 ( 0.00%)          compress!(state);
  140,832 ( 0.00%)          compress!(state);
  119,972 ( 0.00%)          compress!(state);
        .               }
        .           }

1,093,351 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir                  

-- line 186 ----------------------------------------
         .           /// // use the values stored in map
         .           /// ```
         .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
         .               pub(crate) hash_builder: S,
         .               pub(crate) table: RawTable<(K, V), A>,
         .           }
         .           
         .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
     1,080 ( 0.00%)      fn clone(&self) -> Self {
    51,706 ( 0.00%)          HashMap {
         .                       hash_builder: self.hash_builder.clone(),
    10,621 ( 0.00%)              table: self.table.clone(),
         .                   }
     1,215 ( 0.00%)      }
         .           
         .               fn clone_from(&mut self, source: &Self) {
         .                   self.table.clone_from(&source.table);
         .           
         .                   // Update hash_builder only if we successfully cloned all elements.
         .                   self.hash_builder.clone_from(&source.hash_builder);
         .               }
         .           }
-- line 207 ----------------------------------------
-- line 210 ----------------------------------------
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash,
         .               S: BuildHasher,
         .           {
   337,134 ( 0.00%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
         .           }
         .           
         .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: ?Sized + Eq,
         .           {
 1,137,487 ( 0.01%)      move |x| k.eq(x.0.borrow())
         .           }
         .           
         .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: ?Sized + Eq,
         .           {
 1,096,345 ( 0.01%)      move |x| k.eq(x.borrow())
         .           }
         .           
         .           #[cfg(not(feature = "nightly"))]
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
         .               use core::hash::Hasher;
         .               let mut state = hash_builder.build_hasher();
         .               val.hash(&mut state);
         .               state.finish()
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           #[cfg_attr(feature = "inline-more", inline)]
         2 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash + ?Sized,
         .               S: BuildHasher,
         .           {
         .               hash_builder.hash_one(val)
         4 ( 0.00%)  }
         .           
         .           #[cfg(not(feature = "nightly"))]
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
         .           where
         .               K: Hash,
         .               S: BuildHasher,
         .           {
-- line 274 ----------------------------------------
-- line 367 ----------------------------------------
         .               /// let s = DefaultHashBuilder::default();
         .               /// let mut map = HashMap::with_hasher(s);
         .               /// map.insert(1, 2);
         .               /// ```
         .               ///
         .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub const fn with_hasher(hash_builder: S) -> Self {
   901,809 ( 0.01%)          Self {
         .                       hash_builder,
         .                       table: RawTable::new(),
         .                   }
         .               }
         .           
         .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
         .               /// to hash the keys.
         .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
         .               /// use hashbrown::hash_map::DefaultHashBuilder;
         .               ///
         .               /// let s = DefaultHashBuilder::default();
         .               /// let mut map = HashMap::with_hasher(s);
         .               /// map.insert(1, 2);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
       166 ( 0.00%)          Self {
         .                       hash_builder,
         .                       table: RawTable::new_in(alloc),
         .                   }
         .               }
         .           
         .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
         .               /// to hash the keys. It will be allocated with the given allocator.
         .               ///
-- line 453 ----------------------------------------
-- line 527 ----------------------------------------
         .               /// map.insert("c", 3);
         .               ///
         .               /// for key in map.keys() {
         .               ///     println!("{}", key);
         .               /// }
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn keys(&self) -> Keys<'_, K, V> {
         6 ( 0.00%)          Keys { inner: self.iter() }
         .               }
         .           
         .               /// An iterator visiting all values in arbitrary order.
         .               /// The iterator element type is `&'a V`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 543 ----------------------------------------
-- line 663 ----------------------------------------
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// assert_eq!(a.len(), 0);
         .               /// a.insert(1, "a");
         .               /// assert_eq!(a.len(), 1);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn len(&self) -> usize {
    33,602 ( 0.00%)          self.table.len()
         .               }
         .           
         .               /// Returns `true` if the map contains no elements.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// assert!(a.is_empty());
         .               /// a.insert(1, "a");
         .               /// assert!(!a.is_empty());
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn is_empty(&self) -> bool {
   283,809 ( 0.00%)          self.len() == 0
         .               }
         .           
         .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
         .               /// allocated memory for reuse.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// a.insert(1, "a");
         .               /// a.clear();
         .               /// assert!(a.is_empty());
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         6 ( 0.00%)      pub fn clear(&mut self) {
         .                   self.table.clear();
         6 ( 0.00%)      }
         .           
         .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
         .               /// The map cannot be used after calling this.
         .               /// The iterator element type is `K`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
         .               /// }
         .               ///
         .               /// assert_eq!(letters[&'s'], 2);
         .               /// assert_eq!(letters[&'t'], 3);
         .               /// assert_eq!(letters[&'u'], 1);
         .               /// assert_eq!(letters.get(&'y'), None);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
       708 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
         .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
         .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
        65 ( 0.00%)              Entry::Occupied(OccupiedEntry {
         .                           hash,
         .                           key: Some(key),
         .                           elem,
         .                           table: self,
         .                       })
         .                   } else {
       820 ( 0.00%)              Entry::Vacant(VacantEntry {
         .                           hash,
         .                           key,
         .                           table: self,
         .                       })
         .                   }
       885 ( 0.00%)      }
         .           
         .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
         .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
 3,676,152 ( 0.03%)          match self.get_inner(k) {
         .                       Some(&(_, ref v)) => Some(v),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Returns the key-value pair corresponding to the supplied key.
         .               ///
         .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
         .               }
         .           
         .               #[inline]
         .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
 3,555,840 ( 0.03%)          if self.table.is_empty() {
         .                       None
         .                   } else {
         1 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
         .                       self.table.get(hash, equivalent_key(k))
         .                   }
         .               }
         .           
         .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
         .               ///
         .               /// The supplied key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// assert_eq!(map.contains_key(&1), true);
         .               /// assert_eq!(map.contains_key(&2), false);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
 1,402,627 ( 0.01%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   self.get_inner(k).is_some()
 1,724,524 ( 0.02%)      }
         .           
         .               /// Returns a mutable reference to the value corresponding to the key.
         .               ///
         .               /// The key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
         .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// if let Some(x) = map.get_mut(&1) {
         .               ///     *x = "b";
         .               /// }
         .               /// assert_eq!(map[&1], "b");
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
     5,921 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
    20,202 ( 0.00%)          match self.get_inner_mut(k) {
         .                       Some(&mut (_, ref mut v)) => Some(v),
         .                       None => None,
         .                   }
    11,842 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
     6,734 ( 0.00%)          if self.table.is_empty() {
         .                       None
         .                   } else {
         .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
     1,626 ( 0.00%)              self.table.get_mut(hash, equivalent_key(k))
         .                   }
         .               }
         .           
         .               /// Attempts to get mutable references to `N` values in the map at once.
         .               ///
         .               /// Returns an array of length `N` with the results of each query. For soundness, at most one
         .               /// mutable reference will be returned to any value. `None` will be returned if any of the
         .               /// keys are duplicates or missing.
-- line 1223 ----------------------------------------
-- line 1495 ----------------------------------------
         .               /// assert_eq!(map.insert(37, "a"), None);
         .               /// assert_eq!(map.is_empty(), false);
         .               ///
         .               /// map.insert(37, "b");
         .               /// assert_eq!(map.insert(37, "c"), Some("b"));
         .               /// assert_eq!(map[&37], "c");
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
 8,391,381 ( 0.07%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
         .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
     5,885 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
     1,090 ( 0.00%)              Some(mem::replace(item, v))
         .                   } else {
 3,100,850 ( 0.03%)              self.table
 3,374,586 ( 0.03%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
   356,420 ( 0.00%)              None
         .                   }
 7,669,927 ( 0.07%)      }
         .           
         .               /// Insert a key-value pair into the map without checking
         .               /// if the key already exists in the map.
         .               ///
         .               /// Returns a reference to the key and value just inserted.
         .               ///
         .               /// This operation is safe if a key does not exist in the map.
         .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// assert_eq!(map.remove(&1), Some("a"));
         .               /// assert_eq!(map.remove(&1), None);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
   280,607 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
 1,420,116 ( 0.01%)          match self.remove_entry(k) {
   197,114 ( 0.00%)              Some((_, v)) => Some(v),
   172,207 ( 0.00%)              None => None,
         .                   }
   676,022 ( 0.01%)      }
         .           
         .               /// Removes a key from the map, returning the stored key and value if the
         .               /// key was previously in the map.
         .               ///
         .               /// The key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
   722,509 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
         .               }
         .           }
         .           
         .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
         .               /// Creates a raw entry builder for the HashMap.
         .               ///
         .               /// Raw entries provide the lowest level of control for searching and
         .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
         .               /// Creates a `RawEntryMut` from the given key and its hash.
         .               #[inline]
         .               #[allow(clippy::wrong_self_convention)]
         .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Eq,
         .               {
 7,455,516 ( 0.07%)          self.from_hash(hash, equivalent(k))
         .               }
         .           }
         .           
         .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
         .               /// Creates a `RawEntryMut` from the given hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
18,661,248 ( 0.16%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   for<'b> F: FnMut(&'b K) -> bool,
         .               {
         .                   self.search(hash, is_match)
20,241,951 ( 0.18%)      }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   for<'b> F: FnMut(&'b K) -> bool,
         .               {
 1,888,306 ( 0.02%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
10,241,124 ( 0.09%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
         .                           elem,
         .                           table: &mut self.map.table,
         .                           hash_builder: &self.map.hash_builder,
         .                       }),
 2,139,419 ( 0.02%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
         .                           table: &mut self.map.table,
         .                           hash_builder: &self.map.hash_builder,
         .                       }),
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
         .               {
         .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
         .                   self.from_key_hashed_nocheck(hash, k)
         .               }
         .           
         .               /// Access an entry by a key and its hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
 5,012,658 ( 0.04%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Eq,
         .               {
 4,854,024 ( 0.04%)          self.from_hash(hash, equivalent(k))
 8,890,663 ( 0.08%)      }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
         .               where
         .                   F: FnMut(&K) -> bool,
         .               {
 9,151,698 ( 0.08%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
         .                       Some(&(ref key, ref value)) => Some((key, value)),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Access an entry by hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
         .               /// and returns a mutable reference to it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::shadow_unrelated)]
         .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
         .               where
         .                   K: Hash,
         .                   S: BuildHasher,
         .               {
 3,611,070 ( 0.03%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
         .                       hash,
         .                       (key, value),
         .                       make_hasher::<K, _, V, S>(self.hash_builder),
         .                   );
         .                   (k, v)
         .               }
         .           
         .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
         .               /// map.insert("a", 1);
         .               /// map.insert("b", 2);
         .               /// map.insert("c", 3);
         .               ///
         .               /// // Not possible with .iter()
         .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
     3,479 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
    68,493 ( 0.00%)          IntoIter {
    34,969 ( 0.00%)              inner: self.table.into_iter(),
         .                   }
    10,437 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
         .               type Item = (&'a K, &'a V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
   357,215 ( 0.00%)          match self.inner.next() {
         .                       Some(x) => unsafe {
         .                           let r = x.as_ref();
     2,102 ( 0.00%)                  Some((&r.0, &r.1))
         .                       },
         .                       None => None,
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
       266 ( 0.00%)          self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn len(&self) -> usize {
         .                   self.inner.len()
         .               }
         .           }
-- line 3013 ----------------------------------------
-- line 3051 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
         .               type Item = (K, V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(K, V)> {
     6,922 ( 0.00%)          self.inner.next()
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
         .                   f.debug_list().entries(self.iter()).finish()
         .               }
         .           }
         .           
         .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
         .               type Item = &'a K;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
       218 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match self.inner.next() {
         .                       Some((k, _)) => Some(k),
         .                       None => None,
         .                   }
       436 ( 0.00%)      }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 3819 ----------------------------------------
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn insert(self, value: V) -> &'a mut V
         .               where
         .                   K: Hash,
         .                   S: BuildHasher,
         .               {
         .                   let table = &mut self.table.table;
        43 ( 0.00%)          let entry = table.insert_entry(
         .                       self.hash,
         .                       (self.key, value),
         .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
         .                   );
         .                   &mut entry.1
         .               }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
         .           /// keys with new values returned from the iterator.
         .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
         .           where
         .               K: Eq + Hash,
         .               S: BuildHasher,
         .               A: Allocator + Clone,
         .           {
         .               #[cfg_attr(feature = "inline-more", inline)]
    79,600 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
         .                   // Keys may be already present or show multiple times in the iterator.
         .                   // Reserve the entire hint lower bound if the map is empty.
         .                   // Otherwise reserve half the hint (rounded up), so the map
         .                   // will only resize twice in the worst case.
    67,987 ( 0.00%)          let iter = iter.into_iter();
    45,290 ( 0.00%)          let reserve = if self.is_empty() {
         .                       iter.size_hint().0
         .                   } else {
     3,259 ( 0.00%)              (iter.size_hint().0 + 1) / 2
         .                   };
         .                   self.reserve(reserve);
         .                   iter.for_each(move |(k, v)| {
   182,176 ( 0.00%)              self.insert(k, v);
         .                   });
    53,762 ( 0.00%)      }
         .           
         .               #[inline]
         .               #[cfg(feature = "nightly")]
         .               fn extend_one(&mut self, (k, v): (K, V)) {
         .                   self.insert(k, v);
         .               }
         .           
         .               #[inline]
-- line 4588 ----------------------------------------

 9,874,315 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs
--------------------------------------------------------------------------------
Ir                 

-- line 10 ----------------------------------------
        .           pub fn move_path_children_matching<'tcx, F>(
        .               move_data: &MoveData<'tcx>,
        .               path: MovePathIndex,
        .               mut cond: F,
        .           ) -> Option<MovePathIndex>
        .           where
        .               F: FnMut(mir::PlaceElem<'tcx>) -> bool,
        .           {
      539 ( 0.00%)      let mut next_child = move_data.move_paths[path].first_child;
    1,498 ( 0.00%)      while let Some(child_index) = next_child {
        .                   let move_path_children = &move_data.move_paths[child_index];
    1,316 ( 0.00%)          if let Some(&elem) = move_path_children.place.projection.last() {
    2,261 ( 0.00%)              if cond(elem) {
        .                           return Some(child_index);
        .                       }
        .                   }
        .                   next_child = move_path_children.next_sibling;
        .               }
        .           
        .               None
        .           }
-- line 30 ----------------------------------------
-- line 48 ----------------------------------------
        .           //
        .           // FIXME: we have to do something for moving slice patterns.
        .           fn place_contents_drop_state_cannot_differ<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               place: mir::Place<'tcx>,
        .           ) -> bool {
        .               let ty = place.ty(body, tcx).ty;
4,575,366 ( 0.04%)      match ty.kind() {
        .                   ty::Array(..) => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} => false",
        .                           place, ty
        .                       );
        .                       false
        .                   }
        .                   ty::Slice(..) | ty::Ref(..) | ty::RawPtr(..) => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} refd => true",
        .                           place, ty
        .                       );
        .                       true
        .                   }
  643,842 ( 0.01%)          ty::Adt(def, _) if (def.has_dtor(tcx) && !def.is_box()) || def.is_union() => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} Drop => true",
        .                           place, ty
        .                       );
        .                       true
        .                   }
        .                   _ => false,
        .               }
-- line 79 ----------------------------------------
-- line 83 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               lookup_result: LookupResult,
        .               each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
   42,766 ( 0.00%)      match lookup_result {
        .                   LookupResult::Parent(..) => {
        .                       // access to untracked value - do not touch children
        .                   }
        .                   LookupResult::Exact(e) => on_all_children_bits(tcx, body, move_data, e, each_child),
        .               }
        .           }
        .           
        .           pub fn on_all_children_bits<'tcx, F>(
-- line 99 ----------------------------------------
-- line 100 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               move_path_index: MovePathIndex,
        .               mut each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
6,319,320 ( 0.06%)      fn is_terminal_path<'tcx>(
        .                   tcx: TyCtxt<'tcx>,
        .                   body: &Body<'tcx>,
        .                   move_data: &MoveData<'tcx>,
        .                   path: MovePathIndex,
        .               ) -> bool {
1,579,830 ( 0.01%)          place_contents_drop_state_cannot_differ(tcx, body, move_data.move_paths[path].place)
6,319,320 ( 0.06%)      }
        .           
8,548,485 ( 0.07%)      fn on_all_children_bits<'tcx, F>(
        .                   tcx: TyCtxt<'tcx>,
        .                   body: &Body<'tcx>,
        .                   move_data: &MoveData<'tcx>,
        .                   move_path_index: MovePathIndex,
        .                   each_child: &mut F,
        .               ) where
        .                   F: FnMut(MovePathIndex),
        .               {
  375,666 ( 0.00%)          each_child(move_path_index);
        .           
5,531,421 ( 0.05%)          if is_terminal_path(tcx, body, move_data, move_path_index) {
        .                       return;
        .                   }
        .           
  702,836 ( 0.01%)          let mut next_child_index = move_data.move_paths[move_path_index].first_child;
1,768,693 ( 0.02%)          while let Some(child_index) = next_child_index {
  758,418 ( 0.01%)              on_all_children_bits(tcx, body, move_data, child_index, each_child);
  126,403 ( 0.00%)              next_child_index = move_data.move_paths[child_index].next_sibling;
        .                   }
6,100,922 ( 0.05%)      }
3,868,267 ( 0.03%)      on_all_children_bits(tcx, body, move_data, move_path_index, &mut each_child);
        .           }
        .           
        .           pub fn on_all_drop_children_bits<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               path: MovePathIndex,
        .               mut each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
   34,382 ( 0.00%)      on_all_children_bits(tcx, body, &ctxt.move_data, path, |child| {
   20,996 ( 0.00%)          let place = &ctxt.move_data.move_paths[path].place;
    5,249 ( 0.00%)          let ty = place.ty(body, tcx).ty;
        .                   debug!("on_all_drop_children_bits({:?}, {:?} : {:?})", path, place, ty);
        .           
    2,421 ( 0.00%)          let erased_ty = tcx.erase_regions(ty);
   32,142 ( 0.00%)          if erased_ty.needs_drop(tcx, ctxt.param_env) {
    5,213 ( 0.00%)              each_child(child);
        .                   } else {
        .                       debug!("on_all_drop_children_bits - skipping")
        .                   }
        .               })
        .           }
        .           
   65,624 ( 0.00%)  pub fn drop_flag_effects_for_function_entry<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex, DropFlagState),
        .           {
        .               let move_data = &ctxt.move_data;
    5,876 ( 0.00%)      for arg in body.args_iter() {
   13,968 ( 0.00%)          let place = mir::Place::from(arg);
   20,952 ( 0.00%)          let lookup_result = move_data.rev_lookup.find(place.as_ref());
        .                   on_lookup_result_bits(tcx, body, move_data, lookup_result, |mpi| {
    7,448 ( 0.00%)              callback(mpi, DropFlagState::Present)
        .                   });
        .               }
   47,008 ( 0.00%)  }
        .           
7,517,757 ( 0.07%)  pub fn drop_flag_effects_for_location<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               loc: Location,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex, DropFlagState),
        .           {
        .               let move_data = &ctxt.move_data;
        .               debug!("drop_flag_effects_for_location({:?})", loc);
        .           
        .               // first, move out of the RHS
  313,531 ( 0.00%)      for mi in &move_data.loc_map[loc] {
1,466,642 ( 0.01%)          let path = mi.move_path_index(move_data);
        .                   debug!("moving out of path {:?}", move_data.move_paths[path]);
        .           
  385,108 ( 0.00%)          on_all_children_bits(tcx, body, move_data, path, |mpi| callback(mpi, DropFlagState::Absent))
        .               }
        .           
        .               debug!("drop_flag_effects: assignment for location({:?})", loc);
        .           
  375,596 ( 0.00%)      for_location_inits(tcx, body, move_data, loc, |mpi| callback(mpi, DropFlagState::Present));
5,846,368 ( 0.05%)  }
        .           
        .           pub fn for_location_inits<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               loc: Location,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
  313,531 ( 0.00%)      for ii in &move_data.init_loc_map[loc] {
1,095,140 ( 0.01%)          let init = move_data.inits[*ii];
  579,634 ( 0.01%)          match init.kind {
        .                       InitKind::Deep => {
        .                           let path = init.path;
        .           
        .                           on_all_children_bits(tcx, body, move_data, path, &mut callback)
        .                       }
        .                       InitKind::Shallow => {
        .                           let mpi = init.path;
        .                           callback(mpi);
-- line 226 ----------------------------------------
-- line 230 ----------------------------------------
        .               }
        .           }
        .           
        .           /// Calls `handle_inactive_variant` for each descendant move path of `enum_place` that contains a
        .           /// `Downcast` to a variant besides the `active_variant`.
        .           ///
        .           /// NOTE: If there are no move paths corresponding to an inactive variant,
        .           /// `handle_inactive_variant` will not be called for that variant.
   31,404 ( 0.00%)  pub(crate) fn on_all_inactive_variants<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &mir::Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               enum_place: mir::Place<'tcx>,
        .               active_variant: VariantIdx,
        .               mut handle_inactive_variant: impl FnMut(MovePathIndex),
        .           ) {
   13,085 ( 0.00%)      let enum_mpi = match move_data.rev_lookup.find(enum_place.as_ref()) {
        .                   LookupResult::Exact(mpi) => mpi,
        .                   LookupResult::Parent(_) => return,
        .               };
        .           
        .               let enum_path = &move_data.move_paths[enum_mpi];
    5,027 ( 0.00%)      for (variant_mpi, variant_path) in enum_path.children(&move_data.move_paths) {
        .                   // Because of the way we build the `MoveData` tree, each child should have exactly one more
        .                   // projection than `enum_place`. This additional projection must be a downcast since the
        .                   // base is an enum.
      656 ( 0.00%)          let (downcast, base_proj) = variant_path.place.projection.split_last().unwrap();
    2,624 ( 0.00%)          assert_eq!(enum_place.projection.len(), base_proj.len());
        .           
    1,968 ( 0.00%)          let variant_idx = match *downcast {
        .                       mir::ProjectionElem::Downcast(_, idx) => idx,
        .                       _ => unreachable!(),
        .                   };
        .           
      656 ( 0.00%)          if variant_idx != active_variant {
        .                       on_all_children_bits(tcx, body, move_data, variant_mpi, |mpi| {
      720 ( 0.00%)                  handle_inactive_variant(mpi)
        .                       });
        .                   }
        .               }
   20,936 ( 0.00%)  }

4,679,817 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 208 ----------------------------------------
         .               /// There is no built-in impl. There may be some other
         .               /// candidate (a where-clause or user-defined impl).
         .               None,
         .               /// It is unknown whether there is an impl.
         .               Ambiguous,
         .           }
         .           
         .           impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {
   432,270 ( 0.00%)      pub fn new(infcx: &'cx InferCtxt<'cx, 'tcx>) -> SelectionContext<'cx, 'tcx> {
 2,887,158 ( 0.03%)          SelectionContext {
         .                       infcx,
   477,535 ( 0.00%)              freshener: infcx.freshener_keep_static(),
         .                       intercrate: false,
         .                       intercrate_ambiguity_causes: None,
         .                       allow_negative_impls: false,
         .                       query_mode: TraitQueryMode::Standard,
         .                   }
   360,225 ( 0.00%)      }
         .           
         .               pub fn intercrate(infcx: &'cx InferCtxt<'cx, 'tcx>) -> SelectionContext<'cx, 'tcx> {
     3,152 ( 0.00%)          SelectionContext {
         .                       infcx,
       394 ( 0.00%)              freshener: infcx.freshener_keep_static(),
         .                       intercrate: true,
         .                       intercrate_ambiguity_causes: None,
         .                       allow_negative_impls: false,
         .                       query_mode: TraitQueryMode::Standard,
         .                   }
         .               }
         .           
         .               pub fn with_negative(
-- line 238 ----------------------------------------
-- line 245 ----------------------------------------
         .                       freshener: infcx.freshener_keep_static(),
         .                       intercrate: false,
         .                       intercrate_ambiguity_causes: None,
         .                       allow_negative_impls,
         .                       query_mode: TraitQueryMode::Standard,
         .                   }
         .               }
         .           
    30,184 ( 0.00%)      pub fn with_query_mode(
         .                   infcx: &'cx InferCtxt<'cx, 'tcx>,
         .                   query_mode: TraitQueryMode,
         .               ) -> SelectionContext<'cx, 'tcx> {
         .                   debug!(?query_mode, "with_query_mode");
    60,368 ( 0.00%)          SelectionContext {
         .                       infcx,
     3,773 ( 0.00%)              freshener: infcx.freshener_keep_static(),
         .                       intercrate: false,
         .                       intercrate_ambiguity_causes: None,
         .                       allow_negative_impls: false,
         .                       query_mode,
         .                   }
    22,638 ( 0.00%)      }
         .           
         .               /// Enables tracking of intercrate ambiguity causes. These are
         .               /// used in coherence to give improved diagnostics. We don't do
         .               /// this until we detect a coherence error because it can lead to
         .               /// false overflow results (#47139) and because it costs
         .               /// computation time.
         .               pub fn enable_tracking_intercrate_ambiguity_causes(&mut self) {
         .                   assert!(self.intercrate);
-- line 274 ----------------------------------------
-- line 281 ----------------------------------------
         .               /// was enabled and disables tracking at the same time. If
         .               /// tracking is not enabled, just returns an empty vector.
         .               pub fn take_intercrate_ambiguity_causes(&mut self) -> Vec<IntercrateAmbiguityCause> {
         .                   assert!(self.intercrate);
         .                   self.intercrate_ambiguity_causes.take().unwrap_or_default()
         .               }
         .           
         .               pub fn infcx(&self) -> &'cx InferCtxt<'cx, 'tcx> {
16,582,300 ( 0.14%)          self.infcx
    62,533 ( 0.00%)      }
         .           
         .               pub fn tcx(&self) -> TyCtxt<'tcx> {
 1,457,849 ( 0.01%)          self.infcx.tcx
         .               }
         .           
         .               pub fn is_intercrate(&self) -> bool {
   243,266 ( 0.00%)          self.intercrate
         .               }
         .           
         .               ///////////////////////////////////////////////////////////////////////////
         .               // Selection
         .               //
         .               // The selection phase tries to identify *how* an obligation will
         .               // be resolved. For example, it will identify which impl or
         .               // parameter bound is to be used. The process can be inconclusive
-- line 305 ----------------------------------------
-- line 309 ----------------------------------------
         .               // 1. If no applicable impl or parameter bound can be found.
         .               // 2. If the output type parameters in the obligation do not match
         .               //    those specified by the impl/bound. For example, if the obligation
         .               //    is `Vec<Foo>: Iterable<Bar>`, but the impl specifies
         .               //    `impl<T> Iterable<T> for Vec<T>`, than an error would result.
         .           
         .               /// Attempts to satisfy the obligation. If successful, this will affect the surrounding
         .               /// type environment by performing unification.
   826,973 ( 0.01%)      #[instrument(level = "debug", skip(self))]
 1,063,251 ( 0.01%)      pub fn select(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .               ) -> SelectionResult<'tcx, Selection<'tcx>> {
   912,245 ( 0.01%)          let candidate = match self.select_from_obligation(obligation) {
         .                       Err(SelectionError::Overflow) => {
         .                           // In standard mode, overflow must have been caught and reported
         .                           // earlier.
         .                           assert!(self.query_mode == TraitQueryMode::Canonical);
         .                           return Err(SelectionError::Overflow);
         .                       }
         .                       Err(SelectionError::Ambiguous(_)) => {
         .                           return Ok(None);
         .                       }
         .                       Err(e) => {
   124,880 ( 0.00%)                  return Err(e);
         .                       }
         .                       Ok(None) => {
   101,583 ( 0.00%)                  return Ok(None);
         .                       }
   249,852 ( 0.00%)              Ok(Some(candidate)) => candidate,
         .                   };
         .           
   417,152 ( 0.00%)          match self.confirm_candidate(obligation, candidate) {
         .                       Err(SelectionError::Overflow) => {
         .                           assert!(self.query_mode == TraitQueryMode::Canonical);
         .                           Err(SelectionError::Overflow)
         .                       }
     4,758 ( 0.00%)              Err(e) => Err(e),
         .                       Ok(candidate) => {
         .                           debug!(?candidate, "confirmed");
   495,312 ( 0.00%)                  Ok(Some(candidate))
         .                       }
         .                   }
         .               }
         .           
 1,181,390 ( 0.01%)      crate fn select_from_obligation(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .               ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {
         .                   debug_assert!(!obligation.predicate.has_escaping_bound_vars());
         .           
         .                   let pec = &ProvisionalEvaluationCache::default();
         .                   let stack = self.push_stack(TraitObligationStackList::empty(pec), obligation);
         .           
   236,278 ( 0.00%)          self.candidate_from_obligation(&stack)
 1,063,251 ( 0.01%)      }
         .           
         .               ///////////////////////////////////////////////////////////////////////////
         .               // EVALUATION
         .               //
         .               // Tests whether an obligation can be selected or whether an impl
         .               // can be applied to particular types. It skips the "confirmation"
         .               // step and hence completely ignores output type parameters.
         .               //
-- line 372 ----------------------------------------
-- line 374 ----------------------------------------
         .               // we can be sure it does not.
         .           
         .               /// Evaluates whether the obligation `obligation` can be satisfied (by any means).
         .               pub fn predicate_may_hold_fatal(&mut self, obligation: &PredicateObligation<'tcx>) -> bool {
         .                   debug!(?obligation, "predicate_may_hold_fatal");
         .           
         .                   // This fatal query is a stopgap that should only be used in standard mode,
         .                   // where we do not expect overflow to be propagated.
       118 ( 0.00%)          assert!(self.query_mode == TraitQueryMode::Standard);
         .           
       590 ( 0.00%)          self.evaluate_root_obligation(obligation)
         .                       .expect("Overflow should be caught earlier in standard query mode")
         .                       .may_apply()
         .               }
         .           
         .               /// Evaluates whether the obligation `obligation` can be satisfied
         .               /// and returns an `EvaluationResult`. This is meant for the
         .               /// *initial* call.
     7,546 ( 0.00%)      pub fn evaluate_root_obligation(
         .                   &mut self,
         .                   obligation: &PredicateObligation<'tcx>,
         .               ) -> Result<EvaluationResult, OverflowError> {
         .                   self.evaluation_probe(|this| {
    11,673 ( 0.00%)              this.evaluate_predicate_recursively(
         .                           TraitObligationStackList::empty(&ProvisionalEvaluationCache::default()),
         .                           obligation.clone(),
         .                       )
         .                   })
     7,546 ( 0.00%)      }
         .           
         .               fn evaluation_probe(
         .                   &mut self,
         .                   op: impl FnOnce(&mut Self) -> Result<EvaluationResult, OverflowError>,
         .               ) -> Result<EvaluationResult, OverflowError> {
    96,631 ( 0.00%)          self.infcx.probe(|snapshot| -> Result<EvaluationResult, OverflowError> {
     7,782 ( 0.00%)              let result = op(self)?;
         .           
    90,398 ( 0.00%)              match self.infcx.leak_check(true, snapshot) {
         .                           Ok(()) => {}
         .                           Err(_) => return Ok(EvaluatedToErr),
         .                       }
         .           
    64,570 ( 0.00%)              match self.infcx.region_constraints_added_in_snapshot(snapshot) {
         .                           None => Ok(result),
         .                           Some(_) => Ok(result.max(EvaluatedToOkModuloRegions)),
         .                       }
         .                   })
         .               }
         .           
         .               /// Evaluates the predicates in `predicates` recursively. Note that
         .               /// this applies projections in the predicates, and therefore
         .               /// is run within an inference probe.
   119,820 ( 0.00%)      #[instrument(skip(self, stack), level = "debug")]
         .               fn evaluate_predicates_recursively<'o, I>(
         .                   &mut self,
         .                   stack: TraitObligationStackList<'o, 'tcx>,
         .                   predicates: I,
         .               ) -> Result<EvaluationResult, OverflowError>
         .               where
         .                   I: IntoIterator<Item = PredicateObligation<'tcx>> + std::fmt::Debug,
         .               {
         .                   let mut result = EvaluatedToOk;
    61,947 ( 0.00%)          for obligation in predicates {
    14,680 ( 0.00%)              let eval = self.evaluate_predicate_recursively(stack, obligation.clone())?;
     7,340 ( 0.00%)              if let EvaluatedToErr = eval {
         .                           // fast-path - EvaluatedToErr is the top of the lattice,
         .                           // so we don't need to look on the other predicates.
         .                           return Ok(EvaluatedToErr);
         .                       } else {
         .                           result = cmp::max(result, eval);
         .                       }
         .                   }
         .                   Ok(result)
         .               }
         .           
    75,610 ( 0.00%)      #[instrument(
         .                   level = "debug",
         .                   skip(self, previous_stack),
         .                   fields(previous_stack = ?previous_stack.head())
    68,049 ( 0.00%)      )]
         .               fn evaluate_predicate_recursively<'o>(
         .                   &mut self,
         .                   previous_stack: TraitObligationStackList<'o, 'tcx>,
         .                   obligation: PredicateObligation<'tcx>,
         .               ) -> Result<EvaluationResult, OverflowError> {
         .                   // `previous_stack` stores a `TraitObligation`, while `obligation` is
         .                   // a `PredicateObligation`. These are distinct types, so we can't
         .                   // use any `Option` combinator method that would force them to be
         .                   // the same.
    15,122 ( 0.00%)          match previous_stack.head() {
     7,332 ( 0.00%)              Some(h) => self.check_recursion_limit(&obligation, h.obligation)?,
     3,895 ( 0.00%)              None => self.check_recursion_limit(&obligation, &obligation)?,
         .                   }
         .           
    45,366 ( 0.00%)          let result = ensure_sufficient_stack(|| {
     7,561 ( 0.00%)              let bound_predicate = obligation.predicate.kind();
    75,610 ( 0.00%)              match bound_predicate.skip_binder() {
         .                           ty::PredicateKind::Trait(t) => {
         .                               let t = bound_predicate.rebind(t);
         .                               debug_assert!(!t.has_escaping_bound_vars());
         .                               let obligation = obligation.with(t);
   111,390 ( 0.00%)                      self.evaluate_trait_predicate_recursively(previous_stack, obligation)
         .                           }
         .           
         .                           ty::PredicateKind::Subtype(p) => {
         .                               let p = bound_predicate.rebind(p);
         .                               // Does this code ever run?
       180 ( 0.00%)                      match self.infcx.subtype_predicate(&obligation.cause, obligation.param_env, p) {
         .                                   Some(Ok(InferOk { mut obligations, .. })) => {
         .                                       self.add_depth(obligations.iter_mut(), obligation.recursion_depth);
         .                                       self.evaluate_predicates_recursively(
         .                                           previous_stack,
         .                                           obligations.into_iter(),
         .                                       )
         .                                   }
         .                                   Some(Err(_)) => Ok(EvaluatedToErr),
-- line 489 ----------------------------------------
-- line 522 ----------------------------------------
         .                               None => Ok(EvaluatedToAmbig),
         .                           },
         .           
         .                           ty::PredicateKind::TypeOutlives(pred) => {
         .                               // A global type with no late-bound regions can only
         .                               // contain the "'static" lifetime (any other lifetime
         .                               // would either be late-bound or local), so it is guaranteed
         .                               // to outlive any other lifetime
        21 ( 0.00%)                      if pred.0.is_global() && !pred.0.has_late_bound_regions() {
         .                                   Ok(EvaluatedToOk)
         .                               } else {
         .                                   Ok(EvaluatedToOkModuloRegions)
         .                               }
         .                           }
         .           
         .                           ty::PredicateKind::RegionOutlives(..) => {
         .                               // We do not consider region relationships when evaluating trait matches.
-- line 538 ----------------------------------------
-- line 545 ----------------------------------------
         .                               } else {
         .                                   Ok(EvaluatedToErr)
         .                               }
         .                           }
         .           
         .                           ty::PredicateKind::Projection(data) => {
         .                               let data = bound_predicate.rebind(data);
         .                               let project_obligation = obligation.with(data);
       330 ( 0.00%)                      match project::poly_project_and_unify_type(self, &project_obligation) {
       260 ( 0.00%)                          Ok(Ok(Some(mut subobligations))) => {
         .                                       'compute_res: {
         .                                           // If we've previously marked this projection as 'complete', thne
         .                                           // use the final cached result (either `EvaluatedToOk` or
         .                                           // `EvaluatedToOkModuloRegions`), and skip re-evaluating the
         .                                           // sub-obligations.
       208 ( 0.00%)                                  if let Some(key) =
       468 ( 0.00%)                                      ProjectionCacheKey::from_poly_projection_predicate(self, data)
         .                                           {
       416 ( 0.00%)                                      if let Some(cached_res) = self
         .                                                   .infcx
         .                                                   .inner
         .                                                   .borrow_mut()
         .                                                   .projection_cache()
         .                                                   .is_complete(key)
         .                                               {
         .                                                   break 'compute_res Ok(cached_res);
         .                                               }
         .                                           }
         .           
       104 ( 0.00%)                                  self.add_depth(
         .                                               subobligations.iter_mut(),
       104 ( 0.00%)                                      obligation.recursion_depth,
         .                                           );
       104 ( 0.00%)                                  let res = self.evaluate_predicates_recursively(
       156 ( 0.00%)                                      previous_stack,
       260 ( 0.00%)                                      subobligations,
         .                                           );
       208 ( 0.00%)                                  if let Ok(res) = res {
       104 ( 0.00%)                                      if res == EvaluatedToOk || res == EvaluatedToOkModuloRegions {
       164 ( 0.00%)                                          if let Some(key) =
        41 ( 0.00%)                                              ProjectionCacheKey::from_poly_projection_predicate(
       287 ( 0.00%)                                                  self, data,
         .                                                       )
         .                                                   {
         .                                                       // If the result is something that we can cache, then mark this
         .                                                       // entry as 'complete'. This will allow us to skip evaluating the
         .                                                       // suboligations at all the next time we evaluate the projection
         .                                                       // predicate.
       287 ( 0.00%)                                              self.infcx
         .                                                           .inner
         .                                                           .borrow_mut()
         .                                                           .projection_cache()
         .                                                           .complete(key, res);
         .                                                   }
         .                                               }
         .                                           }
         .                                           res
-- line 601 ----------------------------------------
-- line 603 ----------------------------------------
         .                                   }
         .                                   Ok(Ok(None)) => Ok(EvaluatedToAmbig),
         .                                   Ok(Err(project::InProgress)) => Ok(EvaluatedToRecur),
         .                                   Err(_) => Ok(EvaluatedToErr),
         .                               }
         .                           }
         .           
         .                           ty::PredicateKind::ClosureKind(_, closure_substs, kind) => {
       230 ( 0.00%)                      match self.infcx.closure_kind(closure_substs) {
         .                                   Some(closure_kind) => {
       138 ( 0.00%)                              if closure_kind.extends(kind) {
         .                                           Ok(EvaluatedToOk)
         .                                       } else {
         .                                           Ok(EvaluatedToErr)
         .                                       }
         .                                   }
         .                                   None => Ok(EvaluatedToAmbig),
         .                               }
         .                           }
-- line 621 ----------------------------------------
-- line 693 ----------------------------------------
         .                                       }
         .                                   }
         .                               }
         .                           }
         .                           ty::PredicateKind::TypeWellFormedFromEnv(..) => {
         .                               bug!("TypeWellFormedFromEnv is only used for chalk")
         .                           }
         .                       }
     7,561 ( 0.00%)          });
         .           
         .                   debug!("finished: {:?} from {:?}", result, obligation);
         .           
         .                   result
         .               }
         .           
   155,946 ( 0.00%)      #[instrument(skip(self, previous_stack), level = "debug")]
         .               fn evaluate_trait_predicate_recursively<'o>(
         .                   &mut self,
         .                   previous_stack: TraitObligationStackList<'o, 'tcx>,
         .                   mut obligation: TraitObligation<'tcx>,
         .               ) -> Result<EvaluationResult, OverflowError> {
    14,852 ( 0.00%)          if !self.intercrate
         .                       && obligation.is_global()
         .                       && obligation.param_env.caller_bounds().iter().all(|bound| bound.needs_subst())
         .                   {
         .                       // If a param env has no global bounds, global obligations do not
         .                       // depend on its particular value in order to work, so we can clear
         .                       // out the param env and get better caching.
         .                       debug!("in global");
     5,570 ( 0.00%)              obligation.param_env = obligation.param_env.without_caller_bounds();
         .                   }
         .           
         .                   let stack = self.push_stack(previous_stack, &obligation);
         .                   let mut fresh_trait_pred = stack.fresh_trait_pred;
    14,852 ( 0.00%)          let mut param_env = obligation.param_env;
         .           
         .                   fresh_trait_pred = fresh_trait_pred.map_bound(|mut pred| {
     7,426 ( 0.00%)              pred.remap_constness(self.tcx(), &mut param_env);
    89,112 ( 0.00%)              pred
         .                   });
         .           
         .                   debug!(?fresh_trait_pred);
         .           
    10,426 ( 0.00%)          if let Some(result) = self.check_evaluation_cache(param_env, fresh_trait_pred) {
         .                       debug!(?result, "CACHE HIT");
         .                       return Ok(result);
         .                   }
         .           
         .                   if let Some(result) = stack.cache().get_provisional(fresh_trait_pred) {
         .                       debug!(?result, "PROVISIONAL CACHE HIT");
         .                       stack.update_reached_depth(result.reached_depth);
         .                       return Ok(result.result);
-- line 744 ----------------------------------------
-- line 748 ----------------------------------------
         .                   // stack. If so, we don't want to insert the result into the
         .                   // main cache (it is cycle dependent) nor the provisional
         .                   // cache (which is meant for things that have completed but
         .                   // for a "backedge" -- this result *is* the backedge).
         .                   if let Some(cycle_result) = self.check_evaluation_cycle(&stack) {
         .                       return Ok(cycle_result);
         .                   }
         .           
    46,359 ( 0.00%)          let (result, dep_node) = self.in_task(|this| this.evaluate_stack(&stack));
     5,151 ( 0.00%)          let result = result?;
         .           
    25,755 ( 0.00%)          if !result.must_apply_modulo_regions() {
         .                       stack.cache().on_failure(stack.dfn);
         .                   }
         .           
     5,151 ( 0.00%)          let reached_depth = stack.reached_depth.get();
    10,302 ( 0.00%)          if reached_depth >= stack.depth {
         .                       debug!(?result, "CACHE MISS");
    97,869 ( 0.00%)              self.insert_evaluation_cache(param_env, fresh_trait_pred, dep_node, result);
         .           
         .                       stack.cache().on_completion(
    10,302 ( 0.00%)                  stack.dfn,
         .                           |fresh_trait_pred, provisional_result, provisional_dep_node| {
         .                               // Create a new `DepNode` that has dependencies on:
         .                               // * The `DepNode` for the original evaluation that resulted in a provisional cache
         .                               // entry being crated
         .                               // * The `DepNode` for the *current* evaluation, which resulted in us completing
         .                               // provisional caches entries and inserting them into the evaluation cache
         .                               //
         .                               // This ensures that when a query reads this entry from the evaluation cache,
-- line 777 ----------------------------------------
-- line 835 ----------------------------------------
         .               /// `self.freshener`, we can be sure that (a) this will not
         .               /// affect the inferencer state and (b) that if we see two
         .               /// fresh regions with the same index, they refer to the same
         .               /// unbound type variable.
         .               fn check_evaluation_cycle(
         .                   &mut self,
         .                   stack: &TraitObligationStack<'_, 'tcx>,
         .               ) -> Option<EvaluationResult> {
       310 ( 0.00%)          if let Some(cycle_depth) = stack
         .                       .iter()
         .                       .skip(1) // Skip top-most frame.
         .                       .find(|prev| {
     5,274 ( 0.00%)                  stack.obligation.param_env == prev.obligation.param_env
         .                               && stack.fresh_trait_pred == prev.fresh_trait_pred
         .                       })
         .                       .map(|stack| stack.depth)
         .                   {
         .                       debug!("evaluate_stack --> recursive at depth {}", cycle_depth);
         .           
         .                       // If we have a stack like `A B C D E A`, where the top of
         .                       // the stack is the final `A`, then this will iterate over
         .                       // `A, E, D, C, B` -- i.e., all the participants apart
         .                       // from the cycle head. We mark them as participating in a
         .                       // cycle. This suppresses caching for those nodes. See
         .                       // `in_cycle` field for more details.
       310 ( 0.00%)              stack.update_reached_depth(cycle_depth);
         .           
         .                       // Subtle: when checking for a coinductive cycle, we do
         .                       // not compare using the "freshened trait refs" (which
         .                       // have erased regions) but rather the fully explicit
         .                       // trait refs. This is important because it's only a cycle
         .                       // if the regions match exactly.
       292 ( 0.00%)              let cycle = stack.iter().skip(1).take_while(|s| s.depth >= cycle_depth);
       155 ( 0.00%)              let tcx = self.tcx();
     1,085 ( 0.00%)              let cycle = cycle.map(|stack| stack.obligation.predicate.to_predicate(tcx));
     1,705 ( 0.00%)              if self.coinductive_match(cycle) {
         .                           debug!("evaluate_stack --> recursive, coinductive");
         .                           Some(EvaluatedToOk)
         .                       } else {
         .                           debug!("evaluate_stack --> recursive, inductive");
         .                           Some(EvaluatedToRecur)
         .                       }
         .                   } else {
         .                       None
         .                   }
         .               }
         .           
    46,359 ( 0.00%)      fn evaluate_stack<'o>(
         .                   &mut self,
         .                   stack: &TraitObligationStack<'o, 'tcx>,
         .               ) -> Result<EvaluationResult, OverflowError> {
         .                   // In intercrate mode, whenever any of the generics are unbound,
         .                   // there can always be an impl. Even if there are no impls in
         .                   // this crate, perhaps the type would be unified with
         .                   // something from another crate that does provide an impl.
         .                   //
-- line 890 ----------------------------------------
-- line 903 ----------------------------------------
         .                   // imagine, this is just where we started. To avoid that, we
         .                   // check for unbound variables and return an ambiguous (hence possible)
         .                   // match if we've seen this trait before.
         .                   //
         .                   // This suffices to allow chains like `FnMut` implemented in
         .                   // terms of `Fn` etc, but we could probably make this more
         .                   // precise still.
         .                   let unbound_input_types =
     5,151 ( 0.00%)              stack.fresh_trait_pred.skip_binder().trait_ref.substs.types().any(|ty| ty.is_fresh());
         .           
    15,453 ( 0.00%)          if stack.obligation.polarity() != ty::ImplPolarity::Negative {
         .                       // This check was an imperfect workaround for a bug in the old
         .                       // intercrate mode; it should be removed when that goes away.
    25,755 ( 0.00%)              if unbound_input_types && self.intercrate {
         .                           debug!("evaluate_stack --> unbound argument, intercrate -->  ambiguous",);
         .                           // Heuristics: show the diagnostics when there are no candidates in crate.
         .                           if self.intercrate_ambiguity_causes.is_some() {
         .                               debug!("evaluate_stack: intercrate_ambiguity_causes is some");
         .                               if let Ok(candidate_set) = self.assemble_candidates(stack) {
         .                                   if !candidate_set.ambiguous && candidate_set.vec.is_empty() {
         .                                       let trait_ref = stack.obligation.predicate.skip_binder().trait_ref;
         .                                       let self_ty = trait_ref.self_ty();
-- line 924 ----------------------------------------
-- line 937 ----------------------------------------
         .                                       self.intercrate_ambiguity_causes.as_mut().unwrap().push(cause);
         .                                   }
         .                               }
         .                           }
         .                           return Ok(EvaluatedToAmbig);
         .                       }
         .                   }
         .           
    10,302 ( 0.00%)          if unbound_input_types
         .                       && stack.iter().skip(1).any(|prev| {
       429 ( 0.00%)                  stack.obligation.param_env == prev.obligation.param_env
         .                               && self.match_fresh_trait_refs(
       572 ( 0.00%)                          stack.fresh_trait_pred,
       572 ( 0.00%)                          prev.fresh_trait_pred,
         .                                   prev.obligation.param_env,
         .                               )
         .                       })
         .                   {
         .                       debug!("evaluate_stack --> unbound argument, recursive --> giving up",);
         .                       return Ok(EvaluatedToUnknown);
         .                   }
         .           
    51,752 ( 0.00%)          match self.candidate_from_obligation(stack) {
    22,188 ( 0.00%)              Ok(Some(c)) => self.evaluate_candidate(stack, &c),
         .                       Err(SelectionError::Ambiguous(_)) => Ok(EvaluatedToAmbig),
         .                       Ok(None) => Ok(EvaluatedToAmbig),
         .                       Err(Overflow) => Err(OverflowError::Canonical),
         .                       Err(ErrorReporting) => Err(OverflowError::ErrorReporting),
         .                       Err(..) => Ok(EvaluatedToErr),
         .                   }
    51,510 ( 0.00%)      }
         .           
         .               /// For defaulted traits, we use a co-inductive strategy to solve, so
         .               /// that recursion is ok. This routine returns `true` if the top of the
         .               /// stack (`cycle[0]`):
         .               ///
         .               /// - is a defaulted trait,
         .               /// - it also appears in the backtrace at some position `X`,
         .               /// - all the predicates at positions `X..` between `X` and the top are
-- line 975 ----------------------------------------
-- line 977 ----------------------------------------
         .               pub fn coinductive_match<I>(&mut self, mut cycle: I) -> bool
         .               where
         .                   I: Iterator<Item = ty::Predicate<'tcx>>,
         .               {
         .                   cycle.all(|predicate| self.coinductive_predicate(predicate))
         .               }
         .           
         .               fn coinductive_predicate(&self, predicate: ty::Predicate<'tcx>) -> bool {
       310 ( 0.00%)          let result = match predicate.kind().skip_binder() {
     1,395 ( 0.00%)              ty::PredicateKind::Trait(ref data) => self.tcx().trait_is_auto(data.def_id()),
         .                       _ => false,
         .                   };
         .                   debug!(?predicate, ?result, "coinductive_predicate");
         .                   result
         .               }
         .           
         .               /// Further evaluates `candidate` to decide whether all type parameters match and whether nested
         .               /// obligations are met. Returns whether `candidate` remains viable after this further
-- line 994 ----------------------------------------
-- line 998 ----------------------------------------
         .                   skip(self, stack),
         .                   fields(depth = stack.obligation.recursion_depth)
         .               )]
         .               fn evaluate_candidate<'o>(
         .                   &mut self,
         .                   stack: &TraitObligationStack<'o, 'tcx>,
         .                   candidate: &SelectionCandidate<'tcx>,
         .               ) -> Result<EvaluationResult, OverflowError> {
    10,756 ( 0.00%)          let mut result = self.evaluation_probe(|this| {
         .                       let candidate = (*candidate).clone();
    86,592 ( 0.00%)              match this.confirm_candidate(stack.obligation, candidate) {
         .                           Ok(selection) => {
         .                               debug!(?selection);
    21,512 ( 0.00%)                      this.evaluate_predicates_recursively(
         .                                   stack.list(),
    69,914 ( 0.00%)                          selection.nested_obligations().into_iter(),
         .                               )
         .                           }
         .                           Err(..) => Ok(EvaluatedToErr),
         .                       }
         .                   })?;
         .           
         .                   // If we erased any lifetimes, then we want to use
         .                   // `EvaluatedToOkModuloRegions` instead of `EvaluatedToOk`
-- line 1021 ----------------------------------------
-- line 1037 ----------------------------------------
         .                   &self,
         .                   param_env: ty::ParamEnv<'tcx>,
         .                   trait_pred: ty::PolyTraitPredicate<'tcx>,
         .               ) -> Option<EvaluationResult> {
         .                   // Neither the global nor local cache is aware of intercrate
         .                   // mode, so don't do any caching. In particular, we might
         .                   // re-use the same `InferCtxt` with both an intercrate
         .                   // and non-intercrate `SelectionContext`
    14,852 ( 0.00%)          if self.intercrate {
         .                       return None;
         .                   }
         .           
         .                   let tcx = self.tcx();
         .                   if self.can_use_global_caches(param_env) {
    46,697 ( 0.00%)              if let Some(res) = tcx.evaluation_cache.get(&param_env.and(trait_pred), tcx) {
         .                           return Some(res);
         .                       }
         .                   }
    20,852 ( 0.00%)          self.infcx.evaluation_cache.get(&param_env.and(trait_pred), tcx)
         .               }
         .           
    61,812 ( 0.00%)      fn insert_evaluation_cache(
         .                   &mut self,
         .                   param_env: ty::ParamEnv<'tcx>,
         .                   trait_pred: ty::PolyTraitPredicate<'tcx>,
         .                   dep_node: DepNodeIndex,
         .                   result: EvaluationResult,
         .               ) {
         .                   // Avoid caching results that depend on more than just the trait-ref
         .                   // - the stack can create recursion.
    20,604 ( 0.00%)          if result.is_stack_dependent() {
         .                       return;
         .                   }
         .           
         .                   // Neither the global nor local cache is aware of intercrate
         .                   // mode, so don't do any caching. In particular, we might
         .                   // re-use the same `InferCtxt` with both an intercrate
         .                   // and non-intercrate `SelectionContext`
    10,288 ( 0.00%)          if self.intercrate {
         .                       return;
         .                   }
         .           
         .                   if self.can_use_global_caches(param_env) {
         .                       if !trait_pred.needs_infer() {
         .                           debug!(?trait_pred, ?result, "insert_evaluation_cache global");
         .                           // This may overwrite the cache with the same value
         .                           // FIXME: Due to #50507 this overwrites the different values
         .                           // This should be changed to use HashMapExt::insert_same
         .                           // when that is fixed
     4,518 ( 0.00%)                  self.tcx().evaluation_cache.insert(param_env.and(trait_pred), dep_node, result);
         .                           return;
         .                       }
         .                   }
         .           
         .                   debug!(?trait_pred, ?result, "insert_evaluation_cache");
     1,616 ( 0.00%)          self.infcx.evaluation_cache.insert(param_env.and(trait_pred), dep_node, result);
    41,208 ( 0.00%)      }
         .           
         .               /// For various reasons, it's possible for a subobligation
         .               /// to have a *lower* recursion_depth than the obligation used to create it.
         .               /// Projection sub-obligations may be returned from the projection cache,
         .               /// which results in obligations with an 'old' `recursion_depth`.
         .               /// Additionally, methods like `InferCtxt.subtype_predicate` produce
         .               /// subobligations without taking in a 'parent' depth, causing the
         .               /// generated subobligations to have a `recursion_depth` of `0`.
         .               ///
         .               /// To ensure that obligation_depth never decreases, we force all subobligations
         .               /// to have at least the depth of the original obligation.
        52 ( 0.00%)      fn add_depth<T: 'cx, I: Iterator<Item = &'cx mut Obligation<'tcx, T>>>(
         .                   &self,
         .                   it: I,
         .                   min_depth: usize,
         .               ) {
       136 ( 0.00%)          it.for_each(|o| o.recursion_depth = cmp::max(min_depth, o.recursion_depth) + 1);
       104 ( 0.00%)      }
         .           
         .               fn check_recursion_depth<T: Display + TypeFoldable<'tcx>>(
         .                   &self,
         .                   depth: usize,
         .                   error_obligation: &Obligation<'tcx, T>,
         .               ) -> Result<(), OverflowError> {
   523,376 ( 0.00%)          if !self.infcx.tcx.recursion_limit().value_within_limit(depth) {
         .                       match self.query_mode {
         .                           TraitQueryMode::Standard => {
         .                               if self.infcx.is_tainted_by_errors() {
         .                                   return Err(OverflowError::ErrorReporting);
         .                               }
         .                               self.infcx.report_overflow_error(error_obligation, true);
         .                           }
         .                           TraitQueryMode::Canonical => {
-- line 1126 ----------------------------------------
-- line 1143 ----------------------------------------
         .               ) -> Result<(), OverflowError> {
         .                   self.check_recursion_depth(obligation.recursion_depth, error_obligation)
         .               }
         .           
         .               fn in_task<OP, R>(&mut self, op: OP) -> (R, DepNodeIndex)
         .               where
         .                   OP: FnOnce(&mut Self) -> R,
         .               {
   115,700 ( 0.00%)          let (result, dep_node) =
    94,608 ( 0.00%)              self.tcx().dep_graph.with_anon_task(self.tcx(), DepKind::TraitSelect, || op(self));
         .                   self.tcx().dep_graph.read_index(dep_node);
   106,800 ( 0.00%)          (result, dep_node)
         .               }
         .           
         .               /// filter_impls filters constant trait obligations and candidates that have a positive impl
         .               /// for a negative goal and a negative impl for a positive goal
         .               #[instrument(level = "debug", skip(self))]
         .               fn filter_impls(
         .                   &mut self,
         .                   candidates: Vec<SelectionCandidate<'tcx>>,
         .                   obligation: &TraitObligation<'tcx>,
         .               ) -> Vec<SelectionCandidate<'tcx>> {
         .                   let tcx = self.tcx();
         .                   let mut result = Vec::with_capacity(candidates.len());
         .           
   128,821 ( 0.00%)          for candidate in candidates {
         .                       // Respect const trait obligations
    23,598 ( 0.00%)              if obligation.is_const() {
        72 ( 0.00%)                  match candidate {
         .                               // const impl
         .                               ImplCandidate(def_id)
         .                                   if tcx.impl_constness(def_id) == hir::Constness::Const => {}
         .                               // const param
         .                               ParamCandidate(trait_pred)
         .                                   if trait_pred.skip_binder().constness
         .                                       == ty::BoundConstness::ConstIfConst => {}
         .                               // auto trait impl
-- line 1179 ----------------------------------------
-- line 1186 ----------------------------------------
         .                               ConstDropCandidate(_) => {}
         .                               _ => {
         .                                   // reject all other types of candidates
         .                                   continue;
         .                               }
         .                           }
         .                       }
         .           
    15,684 ( 0.00%)              if let ImplCandidate(def_id) = candidate {
     8,776 ( 0.00%)                  if ty::ImplPolarity::Reservation == tcx.impl_polarity(def_id)
     4,387 ( 0.00%)                      || obligation.polarity() == tcx.impl_polarity(def_id)
         .                               || self.allow_negative_impls
         .                           {
         .                               result.push(candidate);
         .                           }
         .                       } else {
         .                           result.push(candidate);
         .                       }
         .                   }
         .           
    33,836 ( 0.00%)          result
         .               }
         .           
         .               /// filter_reservation_impls filter reservation impl for any goal as ambiguous
   110,381 ( 0.00%)      #[instrument(level = "debug", skip(self))]
         .               fn filter_reservation_impls(
         .                   &mut self,
         .                   candidate: SelectionCandidate<'tcx>,
         .                   obligation: &TraitObligation<'tcx>,
         .               ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {
         .                   let tcx = self.tcx();
         .                   // Treat reservation impls as ambiguity.
    19,118 ( 0.00%)          if let ImplCandidate(def_id) = candidate {
     6,132 ( 0.00%)              if let ty::ImplPolarity::Reservation = tcx.impl_polarity(def_id) {
         .                           if let Some(intercrate_ambiguity_clauses) = &mut self.intercrate_ambiguity_causes {
         .                               let attrs = tcx.get_attrs(def_id);
         .                               let attr = tcx.sess.find_by_name(&attrs, sym::rustc_reservation_impl);
         .                               let value = attr.and_then(|a| a.value_str());
         .                               if let Some(value) = value {
         .                                   debug!(
         .                                       "filter_reservation_impls: \
         .                                            reservation impl ambiguity on {:?}",
-- line 1227 ----------------------------------------
-- line 1232 ----------------------------------------
         .                                           message: value.to_string(),
         .                                       },
         .                                   );
         .                               }
         .                           }
         .                           return Ok(None);
         .                       }
         .                   }
    38,958 ( 0.00%)          Ok(Some(candidate))
         .               }
         .           
         .               fn is_knowable<'o>(&mut self, stack: &TraitObligationStack<'o, 'tcx>) -> Option<Conflict> {
         .                   debug!("is_knowable(intercrate={:?})", self.intercrate);
         .           
    27,372 ( 0.00%)          if !self.intercrate || stack.obligation.polarity() == ty::ImplPolarity::Negative {
         .                       return None;
         .                   }
         .           
         .                   let obligation = &stack.obligation;
       672 ( 0.00%)          let predicate = self.infcx().resolve_vars_if_possible(obligation.predicate);
         .           
         .                   // Okay to skip binder because of the nature of the
         .                   // trait-ref-is-knowable check, which does not care about
         .                   // bound regions.
         .                   let trait_ref = predicate.skip_binder().trait_ref;
         .           
       672 ( 0.00%)          coherence::trait_ref_is_knowable(self.tcx(), trait_ref)
         .               }
         .           
         .               /// Returns `true` if the global caches can be used.
         .               fn can_use_global_caches(&self, param_env: ty::ParamEnv<'tcx>) -> bool {
         .                   // If there are any inference variables in the `ParamEnv`, then we
         .                   // always use a cache local to this particular scope. Otherwise, we
         .                   // switch to a global cache.
         .                   if param_env.needs_infer() {
-- line 1266 ----------------------------------------
-- line 1286 ----------------------------------------
         .                   &mut self,
         .                   mut param_env: ty::ParamEnv<'tcx>,
         .                   cache_fresh_trait_pred: ty::PolyTraitPredicate<'tcx>,
         .               ) -> Option<SelectionResult<'tcx, SelectionCandidate<'tcx>>> {
         .                   // Neither the global nor local cache is aware of intercrate
         .                   // mode, so don't do any caching. In particular, we might
         .                   // re-use the same `InferCtxt` with both an intercrate
         .                   // and non-intercrate `SelectionContext`
   246,566 ( 0.00%)          if self.intercrate {
       224 ( 0.00%)              return None;
         .                   }
         .                   let tcx = self.tcx();
         .                   let mut pred = cache_fresh_trait_pred.skip_binder();
   246,118 ( 0.00%)          pred.remap_constness(tcx, &mut param_env);
         .           
   123,059 ( 0.00%)          if self.can_use_global_caches(param_env) {
 1,224,430 ( 0.01%)              if let Some(res) = tcx.selection_cache.get(&param_env.and(pred), tcx) {
 1,486,654 ( 0.01%)                  return Some(res);
         .                       }
         .                   }
    95,095 ( 0.00%)          self.infcx.selection_cache.get(&param_env.and(pred), tcx)
         .               }
         .           
         .               /// Determines whether can we safely cache the result
         .               /// of selecting an obligation. This is almost always `true`,
         .               /// except when dealing with certain `ParamCandidate`s.
         .               ///
         .               /// Ordinarily, a `ParamCandidate` will contain no inference variables,
         .               /// since it was usually produced directly from a `DefId`. However,
-- line 1314 ----------------------------------------
-- line 1325 ----------------------------------------
         .               fn can_cache_candidate(
         .                   &self,
         .                   result: &SelectionResult<'tcx, SelectionCandidate<'tcx>>,
         .               ) -> bool {
         .                   // Neither the global nor local cache is aware of intercrate
         .                   // mode, so don't do any caching. In particular, we might
         .                   // re-use the same `InferCtxt` with both an intercrate
         .                   // and non-intercrate `SelectionContext`
    17,800 ( 0.00%)          if self.intercrate {
         .                       return false;
         .                   }
    26,028 ( 0.00%)          match result {
         .                       Ok(Some(SelectionCandidate::ParamCandidate(trait_ref))) => !trait_ref.needs_infer(),
         .                       _ => true,
         .                   }
         .               }
         .           
         .               fn insert_candidate_cache(
         .                   &mut self,
         .                   mut param_env: ty::ParamEnv<'tcx>,
         .                   cache_fresh_trait_pred: ty::PolyTraitPredicate<'tcx>,
         .                   dep_node: DepNodeIndex,
         .                   candidate: SelectionResult<'tcx, SelectionCandidate<'tcx>>,
         .               ) {
         .                   let tcx = self.tcx();
         .                   let mut pred = cache_fresh_trait_pred.skip_binder();
         .           
    17,800 ( 0.00%)          pred.remap_constness(tcx, &mut param_env);
         .           
         .                   if !self.can_cache_candidate(&candidate) {
         .                       debug!(?pred, ?candidate, "insert_candidate_cache - candidate is not cacheable");
         .                       return;
         .                   }
         .           
     8,623 ( 0.00%)          if self.can_use_global_caches(param_env) {
    19,794 ( 0.00%)              if let Err(Overflow) = candidate {
         .                           // Don't cache overflow globally; we only produce this in certain modes.
         .                       } else if !pred.needs_infer() {
    32,340 ( 0.00%)                  if !candidate.needs_infer() {
         .                               debug!(?pred, ?candidate, "insert_candidate_cache global");
         .                               // This may overwrite the cache with the same value.
   218,295 ( 0.00%)                      tcx.selection_cache.insert(param_env.and(pred), dep_node, candidate);
         .                               return;
         .                           }
         .                       }
         .                   }
         .           
         .                   debug!(?pred, ?candidate, "insert_candidate_cache local");
    12,374 ( 0.00%)          self.infcx.selection_cache.insert(param_env.and(pred), dep_node, candidate);
         .               }
         .           
         .               /// Matches a predicate against the bounds of its self type.
         .               ///
         .               /// Given an obligation like `<T as Foo>::Bar: Baz` where the self type is
         .               /// a projection, look at the bounds of `T::Bar`, see if we can find a
         .               /// `Baz` bound. We return indexes into the list returned by
         .               /// `tcx.item_bounds` for any applicable bounds.
       657 ( 0.00%)      fn match_projection_obligation_against_definition_bounds(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .               ) -> smallvec::SmallVec<[usize; 2]> {
       949 ( 0.00%)          let poly_trait_predicate = self.infcx().resolve_vars_if_possible(obligation.predicate);
         .                   let placeholder_trait_predicate =
     1,241 ( 0.00%)              self.infcx().replace_bound_vars_with_placeholders(poly_trait_predicate);
         .                   debug!(
         .                       ?placeholder_trait_predicate,
         .                       "match_projection_obligation_against_definition_bounds"
         .                   );
         .           
        73 ( 0.00%)          let tcx = self.infcx.tcx;
       438 ( 0.00%)          let (def_id, substs) = match *placeholder_trait_predicate.trait_ref.self_ty().kind() {
       219 ( 0.00%)              ty::Projection(ref data) => (data.item_def_id, data.substs),
         .                       ty::Opaque(def_id, substs) => (def_id, substs),
         .                       _ => {
         .                           span_bug!(
         .                               obligation.cause.span,
         .                               "match_projection_obligation_against_definition_bounds() called \
         .                                but self-ty is not a projection: {:?}",
         .                               placeholder_trait_predicate.trait_ref.self_ty()
         .                           );
-- line 1404 ----------------------------------------
-- line 1411 ----------------------------------------
         .                   // unnecessary ambiguity.
         .                   let mut distinct_normalized_bounds = FxHashSet::default();
         .           
         .                   let matching_bounds = bounds
         .                       .iter()
         .                       .enumerate()
         .                       .filter_map(|(idx, bound)| {
         .                           let bound_predicate = bound.kind();
       322 ( 0.00%)                  if let ty::PredicateKind::Trait(pred) = bound_predicate.skip_binder() {
         .                               let bound = bound_predicate.rebind(pred.trait_ref);
     1,470 ( 0.00%)                      if self.infcx.probe(|_| {
       560 ( 0.00%)                          match self.match_normalize_trait_ref(
         .                                       obligation,
       392 ( 0.00%)                              bound,
       392 ( 0.00%)                              placeholder_trait_predicate.trait_ref,
         .                                   ) {
         .                                       Ok(None) => true,
         .                                       Ok(Some(normalized_trait))
         .                                           if distinct_normalized_bounds.insert(normalized_trait) =>
         .                                       {
         .                                           true
         .                                       }
         .                                       _ => false,
-- line 1433 ----------------------------------------
-- line 1437 ----------------------------------------
         .                               }
         .                           }
         .                           None
         .                       })
         .                       .collect();
         .           
         .                   debug!(?matching_bounds, "match_projection_obligation_against_definition_bounds");
         .                   matching_bounds
       657 ( 0.00%)      }
         .           
         .               /// Equates the trait in `obligation` with trait bound. If the two traits
         .               /// can be equated and the normalized trait bound doesn't contain inference
         .               /// variables or placeholders, the normalized bound is returned.
     1,612 ( 0.00%)      fn match_normalize_trait_ref(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   trait_bound: ty::PolyTraitRef<'tcx>,
         .                   placeholder_trait_ref: ty::TraitRef<'tcx>,
         .               ) -> Result<Option<ty::PolyTraitRef<'tcx>>, ()> {
         .                   debug_assert!(!placeholder_trait_ref.has_escaping_bound_vars());
       444 ( 0.00%)          if placeholder_trait_ref.def_id != trait_bound.def_id() {
         .                       // Avoid unnecessary normalization
       176 ( 0.00%)              return Err(());
         .                   }
         .           
       432 ( 0.00%)          let Normalized { value: trait_bound, obligations: _ } = ensure_sufficient_stack(|| {
         .                       project::normalize_with_depth(
         .                           self,
        36 ( 0.00%)                  obligation.param_env,
         .                           obligation.cause.clone(),
       108 ( 0.00%)                  obligation.recursion_depth + 1,
       144 ( 0.00%)                  trait_bound,
         .                       )
         .                   });
       108 ( 0.00%)          self.infcx
        72 ( 0.00%)              .at(&obligation.cause, obligation.param_env)
         .                       .sup(ty::Binder::dummy(placeholder_trait_ref), trait_bound)
         .                       .map(|InferOk { obligations: _, value: () }| {
         .                           // This method is called within a probe, so we can't have
         .                           // inference variables and placeholders escape.
         .                           if !trait_bound.needs_infer() && !trait_bound.has_placeholders() {
       105 ( 0.00%)                      Some(trait_bound)
         .                           } else {
         .                               None
         .                           }
         .                       })
         .                       .map_err(|_| ())
     1,116 ( 0.00%)      }
         .           
         .               fn evaluate_where_clause<'o>(
         .                   &mut self,
         .                   stack: &TraitObligationStack<'o, 'tcx>,
         .                   where_clause_trait_ref: ty::PolyTraitRef<'tcx>,
         .               ) -> Result<EvaluationResult, OverflowError> {
         .                   self.evaluation_probe(|this| {
    40,095 ( 0.00%)              match this.match_where_clause_trait_ref(stack.obligation, where_clause_trait_ref) {
     4,488 ( 0.00%)                  Ok(obligations) => this.evaluate_predicates_recursively(stack.list(), obligations),
         .                           Err(()) => Ok(EvaluatedToErr),
         .                       }
         .                   })
         .               }
         .           
       963 ( 0.00%)      pub(super) fn match_projection_projections(
         .                   &mut self,
         .                   obligation: &ProjectionTyObligation<'tcx>,
         .                   env_predicate: PolyProjectionPredicate<'tcx>,
         .                   potentially_unnormalized_candidates: bool,
         .               ) -> bool {
         .                   let mut nested_obligations = Vec::new();
       535 ( 0.00%)          let (infer_predicate, _) = self.infcx.replace_bound_vars_with_fresh_vars(
       321 ( 0.00%)              obligation.cause.span,
         .                       LateBoundRegionConversionTime::HigherRankedType,
         .                       env_predicate,
         .                   );
       214 ( 0.00%)          let infer_projection = if potentially_unnormalized_candidates {
        32 ( 0.00%)              ensure_sufficient_stack(|| {
        16 ( 0.00%)                  project::normalize_with_depth_to(
         .                               self,
         4 ( 0.00%)                      obligation.param_env,
         .                               obligation.cause.clone(),
        12 ( 0.00%)                      obligation.recursion_depth + 1,
         8 ( 0.00%)                      infer_predicate.projection_ty,
         .                               &mut nested_obligations,
         .                           )
         .                       })
         .                   } else {
       206 ( 0.00%)              infer_predicate.projection_ty
         .                   };
         .           
       107 ( 0.00%)          self.infcx
       214 ( 0.00%)              .at(&obligation.cause, obligation.param_env)
       214 ( 0.00%)              .sup(obligation.predicate, infer_projection)
       844 ( 0.00%)              .map_or(false, |InferOk { obligations, value: () }| {
         .                           self.evaluate_predicates_recursively(
         .                               TraitObligationStackList::empty(&ProvisionalEvaluationCache::default()),
         .                               nested_obligations.into_iter().chain(obligations),
         .                           )
       206 ( 0.00%)                  .map_or(false, |res| res.may_apply())
         .                       })
       963 ( 0.00%)      }
         .           
         .               ///////////////////////////////////////////////////////////////////////////
         .               // WINNOW
         .               //
         .               // Winnowing is the process of attempting to resolve ambiguity by
         .               // probing further. During the winnowing process, we unify all
         .               // type variables and then we also attempt to evaluate recursive
         .               // bounds to see if they are satisfied.
-- line 1544 ----------------------------------------
-- line 1550 ----------------------------------------
         .               /// See the comment for "SelectionCandidate" for more details.
         .               fn candidate_should_be_dropped_in_favor_of(
         .                   &mut self,
         .                   sized_predicate: bool,
         .                   victim: &EvaluatedCandidate<'tcx>,
         .                   other: &EvaluatedCandidate<'tcx>,
         .                   needs_infer: bool,
         .               ) -> bool {
     1,919 ( 0.00%)          if victim.candidate == other.candidate {
         .                       return true;
         .                   }
         .           
         .                   // Check if a bound would previously have been removed when normalizing
         .                   // the param_env so that it can be given the lowest priority. See
         .                   // #50825 for the motivation for this.
         .                   let is_global = |cand: &ty::PolyTraitPredicate<'tcx>| {
         .                       cand.is_global() && !cand.has_late_bound_regions()
         .                   };
         .           
         .                   // (*) Prefer `BuiltinCandidate { has_nested: false }`, `PointeeCandidate`,
         .                   // `DiscriminantKindCandidate`, and `ConstDropCandidate` to anything else.
         .                   //
         .                   // This is a fix for #53123 and prevents winnowing from accidentally extending the
         .                   // lifetime of a variable.
    36,409 ( 0.00%)          match (&other.candidate, &victim.candidate) {
         .                       (_, AutoImplCandidate(..)) | (AutoImplCandidate(..), _) => {
         .                           bug!(
         .                               "default implementations shouldn't be recorded \
         .                               when there are other valid candidates"
         .                           );
         .                       }
         .           
         .                       // (*)
-- line 1582 ----------------------------------------
-- line 1621 ----------------------------------------
         .           
         .                       // Drop otherwise equivalent non-const fn pointer candidates
         .                       (FnPointerCandidate { .. }, FnPointerCandidate { is_const: false }) => true,
         .           
         .                       // If obligation is a sized predicate or the where-clause bound is
         .                       // global, prefer the projection or object candidate. See issue
         .                       // #50825 and #89352.
         .                       (ObjectCandidate(_) | ProjectionCandidate(_), ParamCandidate(ref cand)) => {
        46 ( 0.00%)                  sized_predicate || is_global(cand)
         .                       }
         .                       (ParamCandidate(ref cand), ObjectCandidate(_) | ProjectionCandidate(_)) => {
        46 ( 0.00%)                  !(sized_predicate || is_global(cand))
         .                       }
         .           
         .                       // Global bounds from the where clause should be ignored
         .                       // here (see issue #50825). Otherwise, we have a where
         .                       // clause so don't go around looking for impls.
         .                       // Arbitrarily give param candidates priority
         .                       // over projection and object candidates.
         .                       (
       132 ( 0.00%)                  ParamCandidate(ref cand),
         .                           ImplCandidate(..)
         .                           | ClosureCandidate
         .                           | GeneratorCandidate
         .                           | FnPointerCandidate { .. }
         .                           | BuiltinObjectCandidate
         .                           | BuiltinUnsizeCandidate
         .                           | TraitUpcastingUnsizeCandidate(_)
         .                           | BuiltinCandidate { .. }
-- line 1649 ----------------------------------------
-- line 1654 ----------------------------------------
         .                           | ClosureCandidate
         .                           | GeneratorCandidate
         .                           | FnPointerCandidate { .. }
         .                           | BuiltinObjectCandidate
         .                           | BuiltinUnsizeCandidate
         .                           | TraitUpcastingUnsizeCandidate(_)
         .                           | BuiltinCandidate { has_nested: true }
         .                           | TraitAliasCandidate(..),
        81 ( 0.00%)                  ParamCandidate(ref cand),
         .                       ) => {
         .                           // Prefer these to a global where-clause bound
         .                           // (see issue #50825).
         .                           is_global(cand) && other.evaluation.must_apply_modulo_regions()
         .                       }
         .           
         .                       (ProjectionCandidate(i), ProjectionCandidate(j))
         .                       | (ObjectCandidate(i), ObjectCandidate(j)) => {
-- line 1670 ----------------------------------------
-- line 1674 ----------------------------------------
         .                       }
         .                       (ObjectCandidate(_), ProjectionCandidate(_))
         .                       | (ProjectionCandidate(_), ObjectCandidate(_)) => {
         .                           bug!("Have both object and projection candidate")
         .                       }
         .           
         .                       // Arbitrarily give projection and object candidates priority.
         .                       (
     3,838 ( 0.00%)                  ObjectCandidate(_) | ProjectionCandidate(_),
         .                           ImplCandidate(..)
         .                           | ClosureCandidate
         .                           | GeneratorCandidate
         .                           | FnPointerCandidate { .. }
         .                           | BuiltinObjectCandidate
         .                           | BuiltinUnsizeCandidate
         .                           | TraitUpcastingUnsizeCandidate(_)
         .                           | BuiltinCandidate { .. }
-- line 1690 ----------------------------------------
-- line 1696 ----------------------------------------
         .                           | ClosureCandidate
         .                           | GeneratorCandidate
         .                           | FnPointerCandidate { .. }
         .                           | BuiltinObjectCandidate
         .                           | BuiltinUnsizeCandidate
         .                           | TraitUpcastingUnsizeCandidate(_)
         .                           | BuiltinCandidate { .. }
         .                           | TraitAliasCandidate(..),
     7,676 ( 0.00%)                  ObjectCandidate(_) | ProjectionCandidate(_),
         .                       ) => false,
         .           
    19,190 ( 0.00%)              (&ImplCandidate(other_def), &ImplCandidate(victim_def)) => {
         .                           // See if we can toss out `victim` based on specialization.
         .                           // This requires us to know *for sure* that the `other` impl applies
         .                           // i.e., `EvaluatedToOk`.
         .                           //
         .                           // FIXME(@lcnr): Using `modulo_regions` here seems kind of scary
         .                           // to me but is required for `std` to compile, so I didn't change it
         .                           // for now.
         .                           let tcx = self.tcx();
     7,676 ( 0.00%)                  if other.evaluation.must_apply_modulo_regions() {
    14,848 ( 0.00%)                      if tcx.specializes((other_def, victim_def)) {
         .                                   return true;
         .                               }
         .                           }
         .           
     9,560 ( 0.00%)                  if other.evaluation.must_apply_considering_regions() {
     7,240 ( 0.00%)                      match tcx.impls_are_allowed_to_overlap(other_def, victim_def) {
         .                                   Some(ty::ImplOverlapKind::Permitted { marker: true }) => {
         .                                       // Subtle: If the predicate we are evaluating has inference
         .                                       // variables, do *not* allow discarding candidates due to
         .                                       // marker trait impls.
         .                                       //
         .                                       // Without this restriction, we could end up accidentally
         .                                       // constrainting inference variables based on an arbitrarily
         .                                       // chosen trait impl.
-- line 1731 ----------------------------------------
-- line 1790 ----------------------------------------
         .                           | BuiltinUnsizeCandidate
         .                           | TraitUpcastingUnsizeCandidate(_)
         .                           | BuiltinCandidate { has_nested: true }
         .                           | TraitAliasCandidate(..),
         .                       ) => false,
         .                   }
         .               }
         .           
    24,030 ( 0.00%)      fn sized_conditions(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .               ) -> BuiltinImplConditions<'tcx> {
         .                   use self::BuiltinImplConditions::{Ambiguous, None, Where};
         .           
         .                   // NOTE: binder moved to (*)
     7,209 ( 0.00%)          let self_ty = self.infcx.shallow_resolve(obligation.predicate.skip_binder().self_ty());
         .           
    12,035 ( 0.00%)          match self_ty.kind() {
         .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
         .                       | ty::Uint(_)
         .                       | ty::Int(_)
         .                       | ty::Bool
         .                       | ty::Float(_)
         .                       | ty::FnDef(..)
         .                       | ty::FnPtr(_)
         .                       | ty::RawPtr(..)
-- line 1815 ----------------------------------------
-- line 1817 ----------------------------------------
         .                       | ty::Ref(..)
         .                       | ty::Generator(..)
         .                       | ty::GeneratorWitness(..)
         .                       | ty::Array(..)
         .                       | ty::Closure(..)
         .                       | ty::Never
         .                       | ty::Error(_) => {
         .                           // safe for everything
       803 ( 0.00%)                  Where(ty::Binder::dummy(Vec::new()))
         .                       }
         .           
         .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => None,
         .           
         .                       ty::Tuple(tys) => Where(
         .                           obligation
         .                               .predicate
       643 ( 0.00%)                      .rebind(tys.last().into_iter().map(|k| k.expect_ty()).collect()),
         .                       ),
         .           
         .                       ty::Adt(def, substs) => {
     1,872 ( 0.00%)                  let sized_crit = def.sized_constraint(self.tcx());
         .                           // (*) binder moved here
     4,680 ( 0.00%)                  Where(
         .                               obligation.predicate.rebind({
       936 ( 0.00%)                          sized_crit.iter().map(|ty| ty.subst(self.tcx(), substs)).collect()
         .                               }),
         .                           )
         .                       }
         .           
         .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => None,
         .                       ty::Infer(ty::TyVar(_)) => Ambiguous,
         .           
         .                       ty::Placeholder(..)
         .                       | ty::Bound(..)
         .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("asked to assemble builtin bounds of unexpected type: {:?}", self_ty);
         .                       }
         .                   }
    19,224 ( 0.00%)      }
         .           
    11,256 ( 0.00%)      fn copy_clone_conditions(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .               ) -> BuiltinImplConditions<'tcx> {
         .                   // NOTE: binder moved to (*)
     2,814 ( 0.00%)          let self_ty = self.infcx.shallow_resolve(obligation.predicate.skip_binder().self_ty());
         .           
         .                   use self::BuiltinImplConditions::{Ambiguous, None, Where};
         .           
     7,219 ( 0.00%)          match *self_ty.kind() {
         .                       ty::Infer(ty::IntVar(_))
         .                       | ty::Infer(ty::FloatVar(_))
         .                       | ty::FnDef(..)
         .                       | ty::FnPtr(_)
       132 ( 0.00%)              | ty::Error(_) => Where(ty::Binder::dummy(Vec::new())),
         .           
         .                       ty::Uint(_)
         .                       | ty::Int(_)
         .                       | ty::Bool
         .                       | ty::Float(_)
         .                       | ty::Char
         .                       | ty::RawPtr(..)
         .                       | ty::Never
-- line 1879 ----------------------------------------
-- line 1886 ----------------------------------------
         .                       ty::Dynamic(..)
         .                       | ty::Str
         .                       | ty::Slice(..)
         .                       | ty::Generator(..)
         .                       | ty::GeneratorWitness(..)
         .                       | ty::Foreign(..)
         .                       | ty::Ref(_, _, hir::Mutability::Mut) => None,
         .           
        54 ( 0.00%)              ty::Tuple(tys) => {
         .                           // (*) binder moved here
       308 ( 0.00%)                  Where(obligation.predicate.rebind(tys.iter().map(|k| k.expect_ty()).collect()))
         .                       }
         .           
       204 ( 0.00%)              ty::Closure(_, substs) => {
         .                           // (*) binder moved here
       612 ( 0.00%)                  let ty = self.infcx.shallow_resolve(substs.as_closure().tupled_upvars_ty());
       408 ( 0.00%)                  if let ty::Infer(ty::TyVar(_)) = ty.kind() {
         .                               // Not yet resolved.
         .                               Ambiguous
         .                           } else {
     1,428 ( 0.00%)                      Where(obligation.predicate.rebind(substs.as_closure().upvar_tys().collect()))
         .                           }
         .                       }
         .           
         .                       ty::Adt(..) | ty::Projection(..) | ty::Param(..) | ty::Opaque(..) => {
         .                           // Fallback to whatever user-defined impls exist in this case.
         .                           None
         .                       }
         .           
-- line 1914 ----------------------------------------
-- line 1920 ----------------------------------------
         .                       }
         .           
         .                       ty::Placeholder(..)
         .                       | ty::Bound(..)
         .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("asked to assemble builtin bounds of unexpected type: {:?}", self_ty);
         .                       }
         .                   }
     8,442 ( 0.00%)      }
         .           
         .               /// For default impls, we need to break apart a type into its
         .               /// "constituent types" -- meaning, the types that it contains.
         .               ///
         .               /// Here are some (simple) examples:
         .               ///
         .               /// ```
         .               /// (i32, u32) -> [i32, u32]
-- line 1936 ----------------------------------------
-- line 1937 ----------------------------------------
         .               /// Foo where struct Foo { x: i32, y: u32 } -> [i32, u32]
         .               /// Bar<i32> where struct Bar<T> { x: T, y: u32 } -> [i32, u32]
         .               /// Zed<i32> where enum Zed { A(T), B(u32) } -> [i32, u32]
         .               /// ```
         .               fn constituent_types_for_ty(
         .                   &self,
         .                   t: ty::Binder<'tcx, Ty<'tcx>>,
         .               ) -> ty::Binder<'tcx, Vec<Ty<'tcx>>> {
       810 ( 0.00%)          match *t.skip_binder().kind() {
         .                       ty::Uint(_)
         .                       | ty::Int(_)
         .                       | ty::Bool
         .                       | ty::Float(_)
         .                       | ty::FnDef(..)
         .                       | ty::FnPtr(_)
         .                       | ty::Str
         .                       | ty::Error(_)
-- line 1953 ----------------------------------------
-- line 1968 ----------------------------------------
         .                       ty::RawPtr(ty::TypeAndMut { ty: element_ty, .. }) | ty::Ref(_, element_ty, _) => {
         .                           t.rebind(vec![element_ty])
         .                       }
         .           
         .                       ty::Array(element_ty, _) | ty::Slice(element_ty) => t.rebind(vec![element_ty]),
         .           
         .                       ty::Tuple(ref tys) => {
         .                           // (T1, ..., Tn) -- meets any bound that all of T1...Tn meet
         9 ( 0.00%)                  t.rebind(tys.iter().map(|k| k.expect_ty()).collect())
         .                       }
         .           
         .                       ty::Closure(_, ref substs) => {
         .                           let ty = self.infcx.shallow_resolve(substs.as_closure().tupled_upvars_ty());
         .                           t.rebind(vec![ty])
         .                       }
         .           
         .                       ty::Generator(_, ref substs, _) => {
-- line 1984 ----------------------------------------
-- line 1988 ----------------------------------------
         .                       }
         .           
         .                       ty::GeneratorWitness(types) => {
         .                           debug_assert!(!types.has_escaping_bound_vars());
         .                           types.map_bound(|types| types.to_vec())
         .                       }
         .           
         .                       // For `PhantomData<T>`, we pass `T`.
       254 ( 0.00%)              ty::Adt(def, substs) if def.is_phantom_data() => t.rebind(substs.types().collect()),
         .           
       124 ( 0.00%)              ty::Adt(def, substs) => {
       436 ( 0.00%)                  t.rebind(def.all_fields().map(|f| f.ty(self.tcx(), substs)).collect())
         .                       }
         .           
         .                       ty::Opaque(def_id, substs) => {
         .                           // We can resolve the `impl Trait` to its concrete type,
         .                           // which enforces a DAG between the functions requiring
         .                           // the auto trait bounds in question.
         .                           t.rebind(vec![self.tcx().type_of(def_id).subst(self.tcx(), substs)])
         .                       }
         .                   }
         .               }
         .           
     5,676 ( 0.00%)      fn collect_predicates_for_types(
         .                   &mut self,
         .                   param_env: ty::ParamEnv<'tcx>,
         .                   cause: ObligationCause<'tcx>,
         .                   recursion_depth: usize,
         .                   trait_def_id: DefId,
         .                   types: ty::Binder<'tcx, Vec<Ty<'tcx>>>,
         .               ) -> Vec<PredicateObligation<'tcx>> {
         .                   // Because the types were potentially derived from
-- line 2019 ----------------------------------------
-- line 2030 ----------------------------------------
         .                   // 2. Produce something like `&'0 i32 : Copy`
         .                   // 3. Re-bind the regions back to `for<'a> &'a i32 : Copy`
         .           
         .                   types
         .                       .as_ref()
         .                       .skip_binder() // binder moved -\
         .                       .iter()
         .                       .flat_map(|ty| {
     1,707 ( 0.00%)                  let ty: ty::Binder<'tcx, Ty<'tcx>> = types.rebind(ty); // <----/
         .           
     6,828 ( 0.00%)                  self.infcx.commit_unconditionally(|_| {
     1,707 ( 0.00%)                      let placeholder_ty = self.infcx.replace_bound_vars_with_placeholders(ty);
     2,845 ( 0.00%)                      let Normalized { value: normalized_ty, mut obligations } =
     5,690 ( 0.00%)                          ensure_sufficient_stack(|| {
         .                                       project::normalize_with_depth(
         .                                           self,
       569 ( 0.00%)                                  param_env,
         .                                           cause.clone(),
       569 ( 0.00%)                                  recursion_depth,
       569 ( 0.00%)                                  placeholder_ty,
         .                                       )
         .                                   });
     6,259 ( 0.00%)                      let placeholder_obligation = predicate_for_trait_def(
         .                                   self.tcx(),
       569 ( 0.00%)                          param_env,
         .                                   cause.clone(),
     1,138 ( 0.00%)                          trait_def_id,
         .                                   recursion_depth,
         .                                   normalized_ty,
         .                                   &[],
         .                               );
     3,414 ( 0.00%)                      obligations.push(placeholder_obligation);
         .                               obligations
         .                           })
         .                       })
         .                       .collect()
     2,838 ( 0.00%)      }
         .           
         .               ///////////////////////////////////////////////////////////////////////////
         .               // Matching
         .               //
         .               // Matching is a common path used for both evaluation and
         .               // confirmation.  It basically unifies types that appear in impls
         .               // and traits. This does affect the surrounding environment;
         .               // therefore, when used during evaluation, match routines must be
-- line 2074 ----------------------------------------
-- line 2075 ----------------------------------------
         .               // run inside of a `probe()` so that their side-effects are
         .               // contained.
         .           
         .               fn rematch_impl(
         .                   &mut self,
         .                   impl_def_id: DefId,
         .                   obligation: &TraitObligation<'tcx>,
         .               ) -> Normalized<'tcx, SubstsRef<'tcx>> {
   120,900 ( 0.00%)          match self.match_impl(impl_def_id, obligation) {
    96,720 ( 0.00%)              Ok(substs) => substs,
         .                       Err(()) => {
         .                           bug!(
         .                               "Impl {:?} was matchable against {:?} but now is not",
         .                               impl_def_id,
         .                               obligation
         .                           );
         .                       }
         .                   }
         .               }
         .           
   750,424 ( 0.01%)      #[tracing::instrument(level = "debug", skip(self))]
         .               fn match_impl(
         .                   &mut self,
         .                   impl_def_id: DefId,
         .                   obligation: &TraitObligation<'tcx>,
         .               ) -> Result<Normalized<'tcx, SubstsRef<'tcx>>, ()> {
         .                   let impl_trait_ref = self.tcx().impl_trait_ref(impl_def_id).unwrap();
         .           
         .                   // Before we create the substitutions and everything, first
         .                   // consider a "quick reject". This avoids creating more types
         .                   // and so forth that we need to.
         .                   if self.fast_reject_trait_refs(obligation, &impl_trait_ref) {
     6,790 ( 0.00%)              return Err(());
         .                   }
         .           
         .                   let placeholder_obligation =
   252,707 ( 0.00%)              self.infcx().replace_bound_vars_with_placeholders(obligation.predicate);
   108,303 ( 0.00%)          let placeholder_obligation_trait_ref = placeholder_obligation.trait_ref;
         .           
   180,505 ( 0.00%)          let impl_substs = self.infcx.fresh_substs_for_item(obligation.cause.span, impl_def_id);
         .           
    72,202 ( 0.00%)          let impl_trait_ref = impl_trait_ref.subst(self.tcx(), impl_substs);
         .           
         .                   debug!(?impl_trait_ref);
         .           
   216,606 ( 0.00%)          let Normalized { value: impl_trait_ref, obligations: mut nested_obligations } =
   252,707 ( 0.00%)              ensure_sufficient_stack(|| {
         .                           project::normalize_with_depth(
         .                               self,
    36,101 ( 0.00%)                      obligation.param_env,
         .                               obligation.cause.clone(),
   108,303 ( 0.00%)                      obligation.recursion_depth + 1,
    72,202 ( 0.00%)                      impl_trait_ref,
         .                           )
         .                       });
         .           
         .                   debug!(?impl_trait_ref, ?placeholder_obligation_trait_ref);
         .           
         .                   let cause = ObligationCause::new(
    36,101 ( 0.00%)              obligation.cause.span,
    72,202 ( 0.00%)              obligation.cause.body_id,
   324,909 ( 0.00%)              ObligationCauseCode::MatchImpl(obligation.cause.clone(), impl_def_id),
         .                   );
         .           
    72,202 ( 0.00%)          let InferOk { obligations, .. } = self
         .                       .infcx
    36,101 ( 0.00%)              .at(&cause, obligation.param_env)
         .                       .eq(placeholder_obligation_trait_ref, impl_trait_ref)
         .                       .map_err(|e| debug!("match_impl: failed eq_trait_refs due to `{}`", e))?;
         .                   nested_obligations.extend(obligations);
         .           
    85,656 ( 0.00%)          if !self.intercrate
         .                       && self.tcx().impl_polarity(impl_def_id) == ty::ImplPolarity::Reservation
         .                   {
         .                       debug!("match_impl: reservation impls only apply in intercrate mode");
         .                       return Err(());
         .                   }
         .           
         .                   debug!(?impl_substs, ?nested_obligations, "match_impl: success");
   171,402 ( 0.00%)          Ok(Normalized { value: impl_substs, obligations: nested_obligations })
         .               }
         .           
         .               fn fast_reject_trait_refs(
         .                   &mut self,
         .                   obligation: &TraitObligation<'_>,
         .                   impl_trait_ref: &ty::TraitRef<'_>,
         .               ) -> bool {
         .                   // We can avoid creating type variables and doing the full
         .                   // substitution if we find that any of the input types, when
         .                   // simplified, do not match.
         .           
   118,488 ( 0.00%)          iter::zip(obligation.predicate.skip_binder().trait_ref.substs, impl_trait_ref.substs).any(
         .                       |(obligation_arg, impl_arg)| {
   438,394 ( 0.00%)                  match (obligation_arg.unpack(), impl_arg.unpack()) {
         .                               (GenericArgKind::Type(obligation_ty), GenericArgKind::Type(impl_ty)) => {
         .                                   // Note, we simplify parameters for the obligation but not the
         .                                   // impl so that we do not reject a blanket impl but do reject
         .                                   // more concrete impls if we're searching for `T: Trait`.
   583,912 ( 0.01%)                          let simplified_obligation_ty = fast_reject::simplify_type(
         .                                       self.tcx(),
         .                                       obligation_ty,
         .                                       SimplifyParams::Yes,
         .                                       StripReferences::No,
         .                                   );
   437,934 ( 0.00%)                          let simplified_impl_ty = fast_reject::simplify_type(
         .                                       self.tcx(),
         .                                       impl_ty,
         .                                       SimplifyParams::No,
         .                                       StripReferences::No,
         .                                   );
         .           
   218,967 ( 0.00%)                          simplified_obligation_ty.is_some()
         .                                       && simplified_impl_ty.is_some()
         .                                       && simplified_obligation_ty != simplified_impl_ty
         .                               }
         .                               (GenericArgKind::Lifetime(_), GenericArgKind::Lifetime(_)) => {
         .                                   // Lifetimes can never cause a rejection.
         .                                   false
         .                               }
         .                               (GenericArgKind::Const(_), GenericArgKind::Const(_)) => {
-- line 2194 ----------------------------------------
-- line 2201 ----------------------------------------
         .                           }
         .                       },
         .                   )
         .               }
         .           
         .               /// Normalize `where_clause_trait_ref` and try to match it against
         .               /// `obligation`. If successful, return any predicates that
         .               /// result from the normalization.
    32,805 ( 0.00%)      fn match_where_clause_trait_ref(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   where_clause_trait_ref: ty::PolyTraitRef<'tcx>,
         .               ) -> Result<Vec<PredicateObligation<'tcx>>, ()> {
         .                   self.match_poly_trait_ref(obligation, where_clause_trait_ref)
    29,160 ( 0.00%)      }
         .           
         .               /// Returns `Ok` if `poly_trait_ref` being true implies that the
         .               /// obligation is satisfied.
         .               #[instrument(skip(self), level = "debug")]
         .               fn match_poly_trait_ref(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   poly_trait_ref: ty::PolyTraitRef<'tcx>,
         .               ) -> Result<Vec<PredicateObligation<'tcx>>, ()> {
     6,393 ( 0.00%)          self.infcx
     3,645 ( 0.00%)              .at(&obligation.cause, obligation.param_env)
    19,179 ( 0.00%)              .sup(obligation.predicate.to_poly_trait_ref(), poly_trait_ref)
         .                       .map(|InferOk { obligations, .. }| obligations)
         .                       .map_err(|_| ())
         .               }
         .           
         .               ///////////////////////////////////////////////////////////////////////////
         .               // Miscellany
         .           
         .               fn match_fresh_trait_refs(
         .                   &self,
         .                   previous: ty::PolyTraitPredicate<'tcx>,
         .                   current: ty::PolyTraitPredicate<'tcx>,
         .                   param_env: ty::ParamEnv<'tcx>,
         .               ) -> bool {
       429 ( 0.00%)          let mut matcher = ty::_match::Match::new(self.tcx(), param_env);
         .                   matcher.relate(previous, current).is_ok()
         .               }
         .           
         .               fn push_stack<'o>(
         .                   &mut self,
         .                   previous_stack: TraitObligationStackList<'o, 'tcx>,
         .                   obligation: &'o TraitObligation<'tcx>,
         .               ) -> TraitObligationStack<'o, 'tcx> {
   768,242 ( 0.01%)          let fresh_trait_pred = obligation.predicate.fold_with(&mut self.freshener);
         .           
         .                   let dfn = previous_stack.cache.next_dfn();
    14,852 ( 0.00%)          let depth = previous_stack.depth() + 1;
 1,107,807 ( 0.01%)          TraitObligationStack {
         .                       obligation,
   635,251 ( 0.01%)              fresh_trait_pred,
         .                       reached_depth: Cell::new(depth),
         .                       previous: previous_stack,
         .                       dfn,
         .                       depth,
         .                   }
         .               }
         .           
         .               #[instrument(skip(self), level = "debug")]
         .               fn closure_trait_ref_unnormalized(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   substs: SubstsRef<'tcx>,
         .               ) -> ty::PolyTraitRef<'tcx> {
     2,091 ( 0.00%)          let closure_sig = substs.as_closure().sig();
         .           
         .                   debug!(?closure_sig);
         .           
         .                   // (1) Feels icky to skip the binder here, but OTOH we know
         .                   // that the self-type is an unboxed closure type and hence is
         .                   // in fact unparameterized (or at least does not reference any
         .                   // regions bound in the obligation). Still probably some
         .                   // refactoring could make this nicer.
     6,970 ( 0.00%)          closure_trait_ref_and_return_type(
         .                       self.tcx(),
     4,182 ( 0.00%)              obligation.predicate.def_id(),
       697 ( 0.00%)              obligation.predicate.skip_binder().self_ty(), // (1)
     2,788 ( 0.00%)              closure_sig,
         .                       util::TupleArgumentsFlag::No,
         .                   )
         .                   .map_bound(|(trait_ref, _)| trait_ref)
         .               }
         .           
         .               fn generator_trait_ref_unnormalized(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
-- line 2291 ----------------------------------------
-- line 2307 ----------------------------------------
         .                   )
         .                   .map_bound(|(trait_ref, ..)| trait_ref)
         .               }
         .           
         .               /// Returns the obligations that are implied by instantiating an
         .               /// impl or trait. The obligations are substituted and fully
         .               /// normalized. This is used when confirming an impl or default
         .               /// impl.
   559,866 ( 0.00%)      #[tracing::instrument(level = "debug", skip(self, cause, param_env))]
         .               fn impl_or_trait_obligations(
         .                   &mut self,
         .                   cause: ObligationCause<'tcx>,
         .                   recursion_depth: usize,
         .                   param_env: ty::ParamEnv<'tcx>,
         .                   def_id: DefId,           // of impl or trait
         .                   substs: SubstsRef<'tcx>, // for impl or trait
         .               ) -> Vec<PredicateObligation<'tcx>> {
-- line 2323 ----------------------------------------
-- line 2334 ----------------------------------------
         .                   //    V: Iterator, V: Sized,
         .                   //    <U as Iterator>::Item: Copy
         .                   // When we substitute, say, `V => IntoIter<u32>, U => $0`, the last
         .                   // obligation will normalize to `<$0 as Iterator>::Item = $1` and
         .                   // `$1: Copy`, so we must ensure the obligations are emitted in
         .                   // that order.
         .                   let predicates = tcx.predicates_of(def_id);
         .                   debug!(?predicates);
    24,342 ( 0.00%)          assert_eq!(predicates.parent, None);
    73,026 ( 0.00%)          let mut obligations = Vec::with_capacity(predicates.predicates.len());
         .                   for (predicate, _) in predicates.predicates {
         .                       debug!(?predicate);
   255,465 ( 0.00%)              let predicate = normalize_with_depth_to(
         .                           self,
         .                           param_env,
         .                           cause.clone(),
         .                           recursion_depth,
    51,093 ( 0.00%)                  predicate.subst(tcx, substs),
         .                           &mut obligations,
         .                       );
   510,930 ( 0.00%)              obligations.push(Obligation {
         .                           cause: cause.clone(),
         .                           recursion_depth,
         .                           param_env,
         .                           predicate,
         .                       });
         .                   }
         .           
         .                   // We are performing deduplication here to avoid exponential blowups
-- line 2362 ----------------------------------------
-- line 2363 ----------------------------------------
         .                   // (#38528) from happening, but the real cause of the duplication is
         .                   // unknown. What we know is that the deduplication avoids exponential
         .                   // amount of predicates being propagated when processing deeply nested
         .                   // types.
         .                   //
         .                   // This code is hot enough that it's worth avoiding the allocation
         .                   // required for the FxHashSet when possible. Special-casing lengths 0,
         .                   // 1 and 2 covers roughly 75-80% of the cases.
    60,084 ( 0.00%)          if obligations.len() <= 1 {
         .                       // No possibility of duplicates.
    15,898 ( 0.00%)          } else if obligations.len() == 2 {
         .                       // Only two elements. Drop the second if they are equal.
         3 ( 0.00%)              if obligations[0] == obligations[1] {
         9 ( 0.00%)                  obligations.truncate(1);
         .                       }
         .                   } else {
         .                       // Three or more elements. Use a general deduplication process.
         .                       let mut seen = FxHashSet::default();
    13,990 ( 0.00%)              obligations.retain(|i| seen.insert(i.clone()));
         .                   }
         .           
    97,368 ( 0.00%)          obligations
         .               }
         .           }
         .           
         .           trait TraitObligationExt<'tcx> {
         .               fn derived_cause(
         .                   &self,
         .                   variant: fn(DerivedObligationCause<'tcx>) -> ObligationCauseCode<'tcx>,
         .               ) -> ObligationCause<'tcx>;
-- line 2392 ----------------------------------------
-- line 2408 ----------------------------------------
         .                    */
         .           
         .                   let obligation = self;
         .           
         .                   // NOTE(flaper87): As of now, it keeps track of the whole error
         .                   // chain. Ideally, we should have a way to configure this either
         .                   // by using -Z verbose or just a CLI argument.
         .                   let derived_cause = DerivedObligationCause {
   102,844 ( 0.00%)              parent_trait_pred: obligation.predicate,
    50,215 ( 0.00%)              parent_code: obligation.cause.clone_code(),
         .                   };
         .                   let derived_code = variant(derived_cause);
   307,001 ( 0.00%)          ObligationCause::new(obligation.cause.span, obligation.cause.body_id, derived_code)
         .               }
         .           }
         .           
         .           impl<'o, 'tcx> TraitObligationStack<'o, 'tcx> {
         .               fn list(&'o self) -> TraitObligationStackList<'o, 'tcx> {
         .                   TraitObligationStackList::with(self)
         .               }
         .           
         .               fn cache(&self) -> &'o ProvisionalEvaluationCache<'tcx> {
    18,686 ( 0.00%)          self.previous.cache
         .               }
         .           
         .               fn iter(&'o self) -> TraitObligationStackList<'o, 'tcx> {
         .                   self.list()
         .               }
         .           
         .               /// Indicates that attempting to evaluate this stack entry
         .               /// required accessing something from the stack at depth `reached_depth`.
       310 ( 0.00%)      fn update_reached_depth(&self, reached_depth: usize) {
       155 ( 0.00%)          assert!(
       155 ( 0.00%)              self.depth >= reached_depth,
         .                       "invoked `update_reached_depth` with something under this stack: \
         .                        self.depth={} reached_depth={}",
         .                       self.depth,
         .                       reached_depth,
         .                   );
         .                   debug!(reached_depth, "update_reached_depth");
         .                   let mut p = self;
       465 ( 0.00%)          while reached_depth < p.depth {
         .                       debug!(?p.fresh_trait_pred, "update_reached_depth: marking as cycle participant");
       155 ( 0.00%)              p.reached_depth.set(p.reached_depth.get().min(reached_depth));
       155 ( 0.00%)              p = p.previous.head.unwrap();
         .                   }
       310 ( 0.00%)      }
         .           }
         .           
         .           /// The "provisional evaluation cache" is used to store intermediate cache results
         .           /// when solving auto traits. Auto traits are unusual in that they can support
         .           /// cycles. So, for example, a "proof tree" like this would be ok:
         .           ///
         .           /// - `Foo<T>: Send` :-
         .           ///   - `Bar<T>: Send` :-
-- line 2462 ----------------------------------------
-- line 2540 ----------------------------------------
         .               /// evaluation. When we create an entry in the evaluation cache using this provisional
         .               /// cache entry (see `on_completion`), we use this `dep_node` to ensure that future reads from
         .               /// the cache will have all of the necessary incr comp dependencies tracked.
         .               dep_node: DepNodeIndex,
         .           }
         .           
         .           impl<'tcx> Default for ProvisionalEvaluationCache<'tcx> {
         .               fn default() -> Self {
   134,115 ( 0.00%)          Self { dfn: Cell::new(0), map: Default::default() }
         .               }
         .           }
         .           
         .           impl<'tcx> ProvisionalEvaluationCache<'tcx> {
         .               /// Get the next DFN in sequence (basically a counter).
         .               fn next_dfn(&self) -> usize {
     7,426 ( 0.00%)          let result = self.dfn.get();
    29,704 ( 0.00%)          self.dfn.set(result + 1);
         .                   result
         .               }
         .           
         .               /// Check the provisional cache for any result for
         .               /// `fresh_trait_ref`. If there is a hit, then you must consider
         .               /// it an access to the stack slots at depth
         .               /// `reached_depth` (from the returned value).
         .               fn get_provisional(
-- line 2564 ----------------------------------------
-- line 2663 ----------------------------------------
         .               fn on_completion(
         .                   &self,
         .                   dfn: usize,
         .                   mut op: impl FnMut(ty::PolyTraitPredicate<'tcx>, EvaluationResult, DepNodeIndex),
         .               ) {
         .                   debug!(?dfn, "on_completion");
         .           
         .                   for (fresh_trait_pred, eval) in
    36,057 ( 0.00%)              self.map.borrow_mut().drain_filter(|_k, eval| eval.from_dfn >= dfn)
         .                   {
         .                       debug!(?fresh_trait_pred, ?eval, "on_completion");
         .           
         .                       op(fresh_trait_pred, eval.result, eval.dep_node);
         .                   }
         .               }
         .           }
         .           
-- line 2679 ----------------------------------------
-- line 2692 ----------------------------------------
         .                   TraitObligationStackList { cache: r.cache(), head: Some(r) }
         .               }
         .           
         .               fn head(&self) -> Option<&'o TraitObligationStack<'o, 'tcx>> {
         .                   self.head
         .               }
         .           
         .               fn depth(&self) -> usize {
    18,433 ( 0.00%)          if let Some(head) = self.head { head.depth } else { 0 }
         .               }
         .           }
         .           
         .           impl<'o, 'tcx> Iterator for TraitObligationStackList<'o, 'tcx> {
         .               type Item = &'o TraitObligationStack<'o, 'tcx>;
         .           
         .               fn next(&mut self) -> Option<&'o TraitObligationStack<'o, 'tcx>> {
    23,152 ( 0.00%)          let o = self.head?;
     5,066 ( 0.00%)          *self = o.previous;
         .                   Some(o)
         .               }
         .           }
         .           
         .           impl<'o, 'tcx> fmt::Debug for TraitObligationStack<'o, 'tcx> {
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   write!(f, "TraitObligationStack({:?})", self.obligation)
         .               }
-- line 2717 ----------------------------------------

 1,004,913 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .           use rustc_span::hygiene::MacroKind;
        .           use rustc_span::source_map::Spanned;
        .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
        .           use rustc_span::Span;
        .           use rustc_target::spec::abi::Abi;
        .           use std::collections::VecDeque;
        .           
        .           fn fn_decl<'hir>(node: Node<'hir>) -> Option<&'hir FnDecl<'hir>> {
    9,280 ( 0.00%)      match node {
        .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
        .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
        .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(&sig.decl),
        .                   Node::Expr(Expr { kind: ExprKind::Closure(_, fn_decl, ..), .. })
        .                   | Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(fn_decl, ..), .. }) => {
        .                       Some(fn_decl)
        .                   }
        .                   _ => None,
        .               }
        .           }
        .           
        .           pub fn fn_sig<'hir>(node: Node<'hir>) -> Option<&'hir FnSig<'hir>> {
    1,139 ( 0.00%)      match &node {
        .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
        .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
        .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(sig),
        .                   _ => None,
        .               }
        .           }
        .           
        .           pub fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {
  145,345 ( 0.00%)      match node {
        .                   Node::Item(Item {
        .                       kind: ItemKind::Const(_, body) | ItemKind::Static(.., body) | ItemKind::Fn(.., body),
        .                       ..
        .                   })
        .                   | Node::TraitItem(TraitItem {
        .                       kind:
        .                           TraitItemKind::Const(_, Some(body)) | TraitItemKind::Fn(_, TraitFn::Provided(body)),
        .                       ..
        .                   })
        .                   | Node::ImplItem(ImplItem {
        .                       kind: ImplItemKind::Const(_, body) | ImplItemKind::Fn(_, body),
        .                       ..
        .                   })
   26,407 ( 0.00%)          | Node::Expr(Expr { kind: ExprKind::Closure(.., body, _, _), .. }) => Some(*body),
        .           
      798 ( 0.00%)          Node::AnonConst(constant) => Some(constant.body),
        .           
        .                   _ => None,
        .               }
        .           }
        .           
        .           fn is_body_owner<'hir>(node: Node<'hir>, hir_id: HirId) -> bool {
        .               match associated_body(node) {
        .                   Some(b) => b.hir_id == hir_id,
-- line 71 ----------------------------------------
-- line 83 ----------------------------------------
        .           pub struct ParentHirIterator<'hir> {
        .               current_id: HirId,
        .               map: Map<'hir>,
        .           }
        .           
        .           impl<'hir> Iterator for ParentHirIterator<'hir> {
        .               type Item = (HirId, Node<'hir>);
        .           
   14,469 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
    2,089 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
        .                       return None;
        .                   }
        .                   loop {
        .                       // There are nodes that do not have entries, so we need to skip them.
        .                       let parent_id = self.map.get_parent_node(self.current_id);
        .           
    6,261 ( 0.00%)              if parent_id == self.current_id {
        .                           self.current_id = CRATE_HIR_ID;
        .                           return None;
        .                       }
        .           
    4,196 ( 0.00%)              self.current_id = parent_id;
   16,705 ( 0.00%)              if let Some(node) = self.map.find(parent_id) {
    8,248 ( 0.00%)                  return Some((parent_id, node));
        .                       }
        .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
        .                   }
   18,603 ( 0.00%)      }
        .           }
        .           
        .           /// An iterator that walks up the ancestor tree of a given `HirId`.
        .           /// Constructed using `tcx.hir().parent_owner_iter(hir_id)`.
        .           pub struct ParentOwnerIterator<'hir> {
        .               current_id: HirId,
        .               map: Map<'hir>,
        .           }
        .           
        .           impl<'hir> Iterator for ParentOwnerIterator<'hir> {
        .               type Item = (LocalDefId, OwnerNode<'hir>);
        .           
  121,041 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
   40,347 ( 0.00%)          if self.current_id.local_id.index() != 0 {
    6,389 ( 0.00%)              self.current_id.local_id = ItemLocalId::new(0);
   25,556 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
        .                           return Some((self.current_id.owner, node.node));
        .                       }
        .                   }
    7,060 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
        2 ( 0.00%)              return None;
        .                   }
        .                   loop {
        .                       // There are nodes that do not have entries, so we need to skip them.
        .                       let parent_id = self.map.def_key(self.current_id.owner).parent;
        .           
        .                       let parent_id = parent_id.map_or(CRATE_HIR_ID.owner, |local_def_index| {
        .                           let def_id = LocalDefId { local_def_index };
        .                           self.map.local_def_id_to_hir_id(def_id).owner
        .                       });
   14,118 ( 0.00%)              self.current_id = HirId::make_owner(parent_id);
        .           
        .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
   14,118 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
        .                           return Some((self.current_id.owner, node.node));
        .                       }
        .                   }
  107,592 ( 0.00%)      }
        .           }
        .           
        .           impl<'hir> Map<'hir> {
      238 ( 0.00%)      pub fn krate(&self) -> &'hir Crate<'hir> {
       34 ( 0.00%)          self.tcx.hir_crate(())
      272 ( 0.00%)      }
        .           
        7 ( 0.00%)      pub fn root_module(&self) -> &'hir Mod<'hir> {
        1 ( 0.00%)          match self.tcx.hir_owner(CRATE_DEF_ID).map(|o| o.node) {
        .                       Some(OwnerNode::Crate(item)) => item,
        .                       _ => bug!(),
        .                   }
        8 ( 0.00%)      }
        .           
        .               pub fn items(&self) -> impl Iterator<Item = &'hir Item<'hir>> + 'hir {
        .                   let krate = self.krate();
        .                   krate.owners.iter().filter_map(|owner| match owner.as_ref()?.node() {
        .                       OwnerNode::Item(item) => Some(item),
        .                       _ => None,
        .                   })
        .               }
-- line 169 ----------------------------------------
-- line 184 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn def_path_hash(self, def_id: LocalDefId) -> DefPathHash {
        .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
        .                   self.tcx.untracked_resolutions.definitions.def_path_hash(def_id)
        .               }
        .           
        .               #[inline]
  216,072 ( 0.00%)      pub fn local_def_id(&self, hir_id: HirId) -> LocalDefId {
   47,469 ( 0.00%)          self.opt_local_def_id(hir_id).unwrap_or_else(|| {
        .                       bug!(
        .                           "local_def_id: no entry for `{:?}`, which has a map of `{:?}`",
        .                           hir_id,
        .                           self.find(hir_id)
        .                       )
        .                   })
  162,054 ( 0.00%)      }
        .           
        .               #[inline]
  126,584 ( 0.00%)      pub fn opt_local_def_id(&self, hir_id: HirId) -> Option<LocalDefId> {
   37,287 ( 0.00%)          if hir_id.local_id == ItemLocalId::new(0) {
        .                       Some(hir_id.owner)
        .                   } else {
   16,826 ( 0.00%)              self.tcx
        .                           .hir_owner_nodes(hir_id.owner)?
        .                           .local_id_to_def_id
        .                           .get(&hir_id.local_id)
        .                           .copied()
        .                   }
  142,407 ( 0.00%)      }
        .           
        .               #[inline]
      381 ( 0.00%)      pub fn local_def_id_to_hir_id(&self, def_id: LocalDefId) -> HirId {
        .                   // FIXME(#85914) is this access safe for incr. comp.?
   11,090 ( 0.00%)          self.tcx.untracked_resolutions.definitions.local_def_id_to_hir_id(def_id)
      762 ( 0.00%)      }
        .           
        7 ( 0.00%)      pub fn iter_local_def_id(&self) -> impl Iterator<Item = LocalDefId> + '_ {
        .                   // Create a dependency to the crate to be sure we reexcute this when the amount of
        .                   // definitions change.
        1 ( 0.00%)          self.tcx.ensure().hir_crate(());
        .                   self.tcx.untracked_resolutions.definitions.iter_local_def_id()
        9 ( 0.00%)      }
        .           
   23,471 ( 0.00%)      pub fn opt_def_kind(&self, local_def_id: LocalDefId) -> Option<DefKind> {
        .                   let hir_id = self.local_def_id_to_hir_id(local_def_id);
   43,589 ( 0.00%)          let def_kind = match self.find(hir_id)? {
    4,320 ( 0.00%)              Node::Item(item) => match item.kind {
        .                           ItemKind::Static(..) => DefKind::Static,
        .                           ItemKind::Const(..) => DefKind::Const,
        .                           ItemKind::Fn(..) => DefKind::Fn,
        .                           ItemKind::Macro(..) => DefKind::Macro(MacroKind::Bang),
        .                           ItemKind::Mod(..) => DefKind::Mod,
        .                           ItemKind::OpaqueTy(..) => DefKind::OpaqueTy,
        .                           ItemKind::TyAlias(..) => DefKind::TyAlias,
        .                           ItemKind::Enum(..) => DefKind::Enum,
-- line 239 ----------------------------------------
-- line 247 ----------------------------------------
        .                           ItemKind::GlobalAsm(..) => DefKind::GlobalAsm,
        .                           ItemKind::Impl { .. } => DefKind::Impl,
        .                       },
        .                       Node::ForeignItem(item) => match item.kind {
        .                           ForeignItemKind::Fn(..) => DefKind::Fn,
        .                           ForeignItemKind::Static(..) => DefKind::Static,
        .                           ForeignItemKind::Type => DefKind::ForeignTy,
        .                       },
       12 ( 0.00%)              Node::TraitItem(item) => match item.kind {
        .                           TraitItemKind::Const(..) => DefKind::AssocConst,
        .                           TraitItemKind::Fn(..) => DefKind::AssocFn,
        .                           TraitItemKind::Type(..) => DefKind::AssocTy,
        .                       },
      819 ( 0.00%)              Node::ImplItem(item) => match item.kind {
        .                           ImplItemKind::Const(..) => DefKind::AssocConst,
        .                           ImplItemKind::Fn(..) => DefKind::AssocFn,
        .                           ImplItemKind::TyAlias(..) => DefKind::AssocTy,
        .                       },
        .                       Node::Variant(_) => DefKind::Variant,
        .                       Node::Ctor(variant_data) => {
        .                           // FIXME(eddyb) is this even possible, if we have a `Node::Ctor`?
      700 ( 0.00%)                  assert_ne!(variant_data.ctor_hir_id(), None);
        .           
      958 ( 0.00%)                  let ctor_of = match self.find(self.get_parent_node(hir_id)) {
        .                               Some(Node::Item(..)) => def::CtorOf::Struct,
        .                               Some(Node::Variant(..)) => def::CtorOf::Variant,
        .                               _ => unreachable!(),
        .                           };
      280 ( 0.00%)                  DefKind::Ctor(ctor_of, def::CtorKind::from_hir(variant_data))
      560 ( 0.00%)              }
        .                       Node::AnonConst(_) => {
       66 ( 0.00%)                  let inline = match self.find(self.get_parent_node(hir_id)) {
        .                               Some(Node::Expr(&Expr {
        .                                   kind: ExprKind::ConstBlock(ref anon_const), ..
        .                               })) if anon_const.hir_id == hir_id => true,
        .                               _ => false,
        .                           };
        .                           if inline { DefKind::InlineConst } else { DefKind::AnonConst }
        .                       }
        .                       Node::Field(_) => DefKind::Field,
      440 ( 0.00%)              Node::Expr(expr) => match expr.kind {
        .                           ExprKind::Closure(.., None) => DefKind::Closure,
        .                           ExprKind::Closure(.., Some(_)) => DefKind::Generator,
        .                           _ => bug!("def_kind: unsupported node: {}", self.node_to_string(hir_id)),
        .                       },
    1,212 ( 0.00%)              Node::GenericParam(param) => match param.kind {
        .                           GenericParamKind::Lifetime { .. } => DefKind::LifetimeParam,
        .                           GenericParamKind::Type { .. } => DefKind::TyParam,
        .                           GenericParamKind::Const { .. } => DefKind::ConstParam,
        .                       },
        .                       Node::Crate(_) => DefKind::Mod,
        .                       Node::Stmt(_)
        .                       | Node::PathSegment(_)
        .                       | Node::Ty(_)
-- line 300 ----------------------------------------
-- line 304 ----------------------------------------
        .                       | Node::Binding(_)
        .                       | Node::Local(_)
        .                       | Node::Param(_)
        .                       | Node::Arm(_)
        .                       | Node::Lifetime(_)
        .                       | Node::Visibility(_)
        .                       | Node::Block(_) => return None,
        .                   };
   11,232 ( 0.00%)          Some(def_kind)
   33,530 ( 0.00%)      }
        .           
        .               pub fn def_kind(&self, local_def_id: LocalDefId) -> DefKind {
        .                   self.opt_def_kind(local_def_id)
        .                       .unwrap_or_else(|| bug!("def_kind: unsupported node: {:?}", local_def_id))
        .               }
        .           
6,319,264 ( 0.06%)      pub fn find_parent_node(&self, id: HirId) -> Option<HirId> {
  789,908 ( 0.01%)          if id.local_id == ItemLocalId::from_u32(0) {
        .                       Some(self.tcx.hir_owner_parent(id.owner))
        .                   } else {
1,562,844 ( 0.01%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
  781,422 ( 0.01%)              let node = owner.nodes[id.local_id].as_ref()?;
2,344,266 ( 0.02%)              let hir_id = HirId { owner: id.owner, local_id: node.parent };
        .                       Some(hir_id)
        .                   }
6,319,264 ( 0.06%)      }
        .           
    6,125 ( 0.00%)      pub fn get_parent_node(&self, hir_id: HirId) -> HirId {
4,589,358 ( 0.04%)          self.find_parent_node(hir_id).unwrap()
   12,250 ( 0.00%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
1,063,056 ( 0.01%)      pub fn find(&self, id: HirId) -> Option<Node<'hir>> {
  132,882 ( 0.00%)          if id.local_id == ItemLocalId::from_u32(0) {
        .                       let owner = self.tcx.hir_owner(id.owner)?;
   86,468 ( 0.00%)              Some(owner.node.into())
        .                   } else {
   90,786 ( 0.00%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
   45,393 ( 0.00%)              let node = owner.nodes[id.local_id].as_ref()?;
  136,179 ( 0.00%)              Some(node.node)
        .                   }
1,063,056 ( 0.01%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
        .               #[inline]
        .               pub fn find_by_def_id(&self, id: LocalDefId) -> Option<Node<'hir>> {
   30,206 ( 0.00%)          self.find(self.local_def_id_to_hir_id(id))
        .               }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
   76,434 ( 0.00%)      pub fn get(&self, id: HirId) -> Node<'hir> {
   41,867 ( 0.00%)          self.find(id).unwrap_or_else(|| bug!("couldn't find hir id {} in the HIR map", id))
   50,956 ( 0.00%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
        .               #[inline]
        .               pub fn get_by_def_id(&self, id: LocalDefId) -> Node<'hir> {
        .                   self.find_by_def_id(id).unwrap_or_else(|| bug!("couldn't find {:?} in the HIR map", id))
        .               }
        .           
    3,004 ( 0.00%)      pub fn get_if_local(&self, id: DefId) -> Option<Node<'hir>> {
    1,502 ( 0.00%)          id.as_local().and_then(|id| self.find(self.local_def_id_to_hir_id(id)))
    3,004 ( 0.00%)      }
        .           
        .               pub fn get_generics(&self, id: LocalDefId) -> Option<&'hir Generics<'hir>> {
        .                   let node = self.tcx.hir_owner(id)?;
        .                   match node.node {
        .                       OwnerNode::ImplItem(impl_item) => Some(&impl_item.generics),
        .                       OwnerNode::TraitItem(trait_item) => Some(&trait_item.generics),
        .                       OwnerNode::Item(Item {
        .                           kind:
-- line 374 ----------------------------------------
-- line 381 ----------------------------------------
        .                               | ItemKind::TraitAlias(generics, _)
        .                               | ItemKind::Impl(Impl { generics, .. }),
        .                           ..
        .                       }) => Some(generics),
        .                       _ => None,
        .                   }
        .               }
        .           
  213,290 ( 0.00%)      pub fn item(&self, id: ItemId) -> &'hir Item<'hir> {
   60,940 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_item()
  243,760 ( 0.00%)      }
        .           
    1,134 ( 0.00%)      pub fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
      324 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_trait_item()
    1,296 ( 0.00%)      }
        .           
  169,197 ( 0.00%)      pub fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
   48,342 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_impl_item()
  193,368 ( 0.00%)      }
        .           
        .               pub fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
        .                   self.tcx.hir_owner(id.def_id).unwrap().node.expect_foreign_item()
        .               }
        .           
  235,270 ( 0.00%)      pub fn body(&self, id: BodyId) -> &'hir Body<'hir> {
   67,220 ( 0.00%)          self.tcx.hir_owner_nodes(id.hir_id.owner).unwrap().bodies[&id.hir_id.local_id]
  268,880 ( 0.00%)      }
        .           
    5,568 ( 0.00%)      pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnDecl<'hir>> {
    5,568 ( 0.00%)          if let Some(node) = self.find(hir_id) {
        .                       fn_decl(node)
        .                   } else {
        .                       bug!("no node for hir_id `{}`", hir_id)
        .                   }
    3,712 ( 0.00%)      }
        .           
      552 ( 0.00%)      pub fn fn_sig_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnSig<'hir>> {
      552 ( 0.00%)          if let Some(node) = self.find(hir_id) {
        .                       fn_sig(node)
        .                   } else {
        .                       bug!("no node for hir_id `{}`", hir_id)
        .                   }
      552 ( 0.00%)      }
        .           
        .               pub fn enclosing_body_owner(&self, hir_id: HirId) -> HirId {
        .                   for (parent, _) in self.parent_iter(hir_id) {
        .                       if let Some(body) = self.maybe_body_owned_by(parent) {
        .                           return self.body_owner(body);
        .                       }
        .                   }
        .           
        .                   bug!("no `enclosing_body_owner` for hir_id `{}`", hir_id);
        .               }
        .           
        .               /// Returns the `HirId` that corresponds to the definition of
        .               /// which this is the body of, i.e., a `fn`, `const` or `static`
        .               /// item (possibly associated), a closure, or a `hir::AnonConst`.
  157,576 ( 0.00%)      pub fn body_owner(&self, BodyId { hir_id }: BodyId) -> HirId {
        .                   let parent = self.get_parent_node(hir_id);
  118,182 ( 0.00%)          assert!(self.find(parent).map_or(false, |n| is_body_owner(n, hir_id)));
        .                   parent
  157,576 ( 0.00%)      }
        .           
   47,665 ( 0.00%)      pub fn body_owner_def_id(&self, id: BodyId) -> LocalDefId {
   79,115 ( 0.00%)          self.local_def_id(self.body_owner(id))
   47,665 ( 0.00%)      }
        .           
        .               /// Given a `HirId`, returns the `BodyId` associated with it,
        .               /// if the node is a body owner, otherwise returns `None`.
    7,493 ( 0.00%)      pub fn maybe_body_owned_by(&self, hir_id: HirId) -> Option<BodyId> {
   24,414 ( 0.00%)          self.find(hir_id).map(associated_body).flatten()
   22,479 ( 0.00%)      }
        .           
        .               /// Given a body owner's id, returns the `BodyId` associated with it.
   17,415 ( 0.00%)      pub fn body_owned_by(&self, id: HirId) -> BodyId {
        .                   self.maybe_body_owned_by(id).unwrap_or_else(|| {
        .                       span_bug!(
        .                           self.span(id),
        .                           "body_owned_by: {} has no associated body",
        .                           self.node_to_string(id)
        .                       );
        .                   })
   13,545 ( 0.00%)      }
        .           
      692 ( 0.00%)      pub fn body_param_names(&self, id: BodyId) -> impl Iterator<Item = Ident> + 'hir {
    6,028 ( 0.00%)          self.body(id).params.iter().map(|arg| match arg.pat.kind {
    1,972 ( 0.00%)              PatKind::Binding(_, _, ident, _) => ident,
        .                       _ => Ident::empty(),
        .                   })
    2,076 ( 0.00%)      }
        .           
        .               /// Returns the `BodyOwnerKind` of this `LocalDefId`.
        .               ///
        .               /// Panics if `LocalDefId` does not have an associated body.
   34,377 ( 0.00%)      pub fn body_owner_kind(&self, id: HirId) -> BodyOwnerKind {
   86,753 ( 0.00%)          match self.get(id) {
        .                       Node::Item(&Item { kind: ItemKind::Const(..), .. })
        .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Const(..), .. })
        .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Const(..), .. })
        .                       | Node::AnonConst(_) => BodyOwnerKind::Const,
        .                       Node::Ctor(..)
        .                       | Node::Item(&Item { kind: ItemKind::Fn(..), .. })
        .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Fn(..), .. })
        .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Fn(..), .. }) => BodyOwnerKind::Fn,
        .                       Node::Item(&Item { kind: ItemKind::Static(_, m, _), .. }) => BodyOwnerKind::Static(m),
        .                       Node::Expr(&Expr { kind: ExprKind::Closure(..), .. }) => BodyOwnerKind::Closure,
        .                       node => bug!("{:#?} is not a body node", node),
        .                   }
   34,377 ( 0.00%)      }
        .           
        .               /// Returns the `ConstContext` of the body associated with this `LocalDefId`.
        .               ///
        .               /// Panics if `LocalDefId` does not have an associated body.
        .               ///
        .               /// This should only be used for determining the context of a body, a return
        .               /// value of `Some` does not always suggest that the owner of the body is `const`,
        .               /// just that it has to be checked as if it were.
   46,176 ( 0.00%)      pub fn body_const_context(&self, did: LocalDefId) -> Option<ConstContext> {
        .                   let hir_id = self.local_def_id_to_hir_id(did);
   69,264 ( 0.00%)          let ccx = match self.body_owner_kind(hir_id) {
        .                       BodyOwnerKind::Const => ConstContext::Const,
        .                       BodyOwnerKind::Static(mt) => ConstContext::Static(mt),
        .           
    4,152 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_constructor(did.to_def_id()) => return None,
    4,152 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_const_fn_raw(did.to_def_id()) => ConstContext::ConstFn,
        .                       BodyOwnerKind::Fn
    8,276 ( 0.00%)                  if self.tcx.has_attr(did.to_def_id(), sym::default_method_body_is_const) =>
        .                       {
        .                           ConstContext::ConstFn
        .                       }
        .                       BodyOwnerKind::Fn | BodyOwnerKind::Closure => return None,
        .                   };
        .           
        .                   Some(ccx)
   51,948 ( 0.00%)      }
        .           
        .               /// Returns an iterator of the `DefId`s for all body-owners in this
        .               /// crate. If you would prefer to iterate over the bodies
        .               /// themselves, you can do `self.hir().krate().body_ids.iter()`.
       21 ( 0.00%)      pub fn body_owners(self) -> impl Iterator<Item = LocalDefId> + 'hir {
        3 ( 0.00%)          self.krate()
        .                       .owners
        .                       .iter_enumerated()
        .                       .flat_map(move |(owner, owner_info)| {
   10,056 ( 0.00%)                  let bodies = &owner_info.as_ref()?.nodes.bodies;
        .                           Some(bodies.iter().map(move |&(local_id, _)| {
       98 ( 0.00%)                      let hir_id = HirId { owner, local_id };
        .                               let body_id = BodyId { hir_id };
    9,326 ( 0.00%)                      self.body_owner_def_id(body_id)
        .                           }))
        .                       })
        .                       .flatten()
       15 ( 0.00%)      }
        .           
       10 ( 0.00%)      pub fn par_body_owners<F: Fn(LocalDefId) + Sync + Send>(self, f: F) {
        .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
        .                   #[cfg(parallel_compiler)]
        .                   use rustc_rayon::iter::IndexedParallelIterator;
        .           
        3 ( 0.00%)          par_iter(&self.krate().owners.raw).enumerate().for_each(|(owner, owner_info)| {
        .                       let owner = LocalDefId::new(owner);
   20,112 ( 0.00%)              if let Some(owner_info) = owner_info {
        .                           par_iter(owner_info.nodes.bodies.range(..)).for_each(|(local_id, _)| {
        .                               let hir_id = HirId { owner, local_id: *local_id };
        .                               let body_id = BodyId { hir_id };
    8,658 ( 0.00%)                      f(self.body_owner_def_id(body_id))
        .                           })
        .                       }
        .                   });
        8 ( 0.00%)      }
        .           
       10 ( 0.00%)      pub fn ty_param_owner(&self, id: HirId) -> LocalDefId {
        2 ( 0.00%)          match self.get(id) {
        .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
        .                           id.expect_owner()
        .                       }
        .                       Node::GenericParam(_) => self.get_parent_item(id),
        .                       _ => bug!("ty_param_owner: {} not a type parameter", self.node_to_string(id)),
        .                   }
        7 ( 0.00%)      }
        .           
       30 ( 0.00%)      pub fn ty_param_name(&self, id: HirId) -> Symbol {
        6 ( 0.00%)          match self.get(id) {
        .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
        .                           kw::SelfUpper
        .                       }
        6 ( 0.00%)              Node::GenericParam(param) => param.name.ident().name,
        .                       _ => bug!("ty_param_name: {} not a type parameter", self.node_to_string(id)),
        .                   }
       18 ( 0.00%)      }
        .           
    1,134 ( 0.00%)      pub fn trait_impls(&self, trait_did: DefId) -> &'hir [LocalDefId] {
      126 ( 0.00%)          self.tcx.all_local_trait_impls(()).get(&trait_did).map_or(&[], |xs| &xs[..])
    1,134 ( 0.00%)      }
        .           
        .               /// Gets the attributes on the crate. This is preferable to
        .               /// invoking `krate.attrs` because it registers a tighter
        .               /// dep-graph access.
        .               pub fn krate_attrs(&self) -> &'hir [ast::Attribute] {
       74 ( 0.00%)          self.attrs(CRATE_HIR_ID)
        .               }
        .           
      567 ( 0.00%)      pub fn get_module(&self, module: LocalDefId) -> (&'hir Mod<'hir>, Span, HirId) {
        .                   let hir_id = HirId::make_owner(module);
      405 ( 0.00%)          match self.tcx.hir_owner(module).map(|o| o.node) {
      138 ( 0.00%)              Some(OwnerNode::Item(&Item { span, kind: ItemKind::Mod(ref m), .. })) => {
        .                           (m, span, hir_id)
        .                       }
       36 ( 0.00%)              Some(OwnerNode::Crate(item)) => (item, item.inner, hir_id),
        .                       node => panic!("not a module: {:?}", node),
        .                   }
      729 ( 0.00%)      }
        .           
        .               /// Walks the contents of a crate. See also `Crate::visit_all_items`.
       11 ( 0.00%)      pub fn walk_toplevel_module(self, visitor: &mut impl Visitor<'hir>) {
       35 ( 0.00%)          let (top_mod, span, hir_id) = self.get_module(CRATE_DEF_ID);
        .                   visitor.visit_mod(top_mod, span, hir_id);
        8 ( 0.00%)      }
        .           
        .               /// Walks the attributes in a crate.
       20 ( 0.00%)      pub fn walk_attributes(self, visitor: &mut impl Visitor<'hir>) {
        2 ( 0.00%)          let krate = self.krate();
        .                   for (owner, info) in krate.owners.iter_enumerated() {
   13,408 ( 0.00%)              if let Some(info) = info {
        .                           for (local_id, attrs) in info.attrs.map.iter() {
        .                               let id = HirId { owner, local_id: *local_id };
        .                               for a in *attrs {
   27,545 ( 0.00%)                          visitor.visit_attribute(id, a)
        .                               }
        .                           }
        .                       }
        .                   }
       16 ( 0.00%)      }
        .           
        .               /// Visits all items in the crate in some deterministic (but
        .               /// unspecified) order. If you just need to process every item,
        .               /// but don't care about nesting, this method is the best choice.
        .               ///
        .               /// If you do care about nesting -- usually because your algorithm
        .               /// follows lexical scoping rules -- then you want a different
        .               /// approach. You should override `visit_nested_item` in your
        .               /// visitor and then call `intravisit::walk_crate` instead.
      168 ( 0.00%)      pub fn visit_all_item_likes<V>(&self, visitor: &mut V)
        .               where
        .                   V: itemlikevisit::ItemLikeVisitor<'hir>,
        .               {
       24 ( 0.00%)          let krate = self.krate();
       84 ( 0.00%)          for owner in krate.owners.iter().filter_map(Option::as_ref) {
   74,334 ( 0.00%)              match owner.node() {
   63,720 ( 0.00%)                  OwnerNode::Item(item) => visitor.visit_item(item),
        .                           OwnerNode::ForeignItem(item) => visitor.visit_foreign_item(item),
    2,457 ( 0.00%)                  OwnerNode::ImplItem(item) => visitor.visit_impl_item(item),
        .                           OwnerNode::TraitItem(item) => visitor.visit_trait_item(item),
        .                           OwnerNode::Crate(_) => {}
        .                       }
        .                   }
      168 ( 0.00%)      }
        .           
        .               /// A parallel version of `visit_all_item_likes`.
        .               pub fn par_visit_all_item_likes<V>(&self, visitor: &V)
        .               where
        .                   V: itemlikevisit::ParItemLikeVisitor<'hir> + Sync + Send,
        .               {
        1 ( 0.00%)          let krate = self.krate();
        2 ( 0.00%)          par_for_each_in(&krate.owners.raw, |owner| match owner.as_ref().map(OwnerInfo::node) {
    1,080 ( 0.00%)              Some(OwnerNode::Item(item)) => visitor.visit_item(item),
        .                       Some(OwnerNode::ForeignItem(item)) => visitor.visit_foreign_item(item),
      819 ( 0.00%)              Some(OwnerNode::ImplItem(item)) => visitor.visit_impl_item(item),
        6 ( 0.00%)              Some(OwnerNode::TraitItem(item)) => visitor.visit_trait_item(item),
        .                       Some(OwnerNode::Crate(_)) | None => {}
        .                   })
        .               }
        .           
    2,064 ( 0.00%)      pub fn visit_item_likes_in_module<V>(&self, module: LocalDefId, visitor: &mut V)
        .               where
        .                   V: ItemLikeVisitor<'hir>,
        .               {
      264 ( 0.00%)          let module = self.tcx.hir_module_items(module);
        .           
      288 ( 0.00%)          for id in module.items.iter() {
   48,600 ( 0.00%)              visitor.visit_item(self.item(*id));
        .                   }
        .           
      288 ( 0.00%)          for id in module.trait_items.iter() {
      240 ( 0.00%)              visitor.visit_trait_item(self.trait_item(*id));
        .                   }
        .           
      288 ( 0.00%)          for id in module.impl_items.iter() {
   31,941 ( 0.00%)              visitor.visit_impl_item(self.impl_item(*id));
        .                   }
        .           
      288 ( 0.00%)          for id in module.foreign_items.iter() {
        .                       visitor.visit_foreign_item(self.foreign_item(*id));
        .                   }
    2,112 ( 0.00%)      }
        .           
       46 ( 0.00%)      pub fn for_each_module(&self, f: impl Fn(LocalDefId)) {
        .                   let mut queue = VecDeque::new();
        .                   queue.push_back(CRATE_DEF_ID);
        .           
      192 ( 0.00%)          while let Some(id) = queue.pop_front() {
        .                       f(id);
       72 ( 0.00%)              let items = self.tcx.hir_module_items(id);
      768 ( 0.00%)              queue.extend(items.submodules.iter().copied())
        .                   }
       40 ( 0.00%)      }
        .           
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId)) {
        4 ( 0.00%)          self.for_each_module(f)
        .               }
        .           
        .               #[cfg(parallel_compiler)]
        .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId) + Sync) {
        .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
        .                   par_iter_submodules(self.tcx, CRATE_DEF_ID, &f);
        .           
        .                   fn par_iter_submodules<F>(tcx: TyCtxt<'_>, module: LocalDefId, f: &F)
-- line 699 ----------------------------------------
-- line 703 ----------------------------------------
        .                       (*f)(module);
        .                       let items = tcx.hir_module_items(module);
        .                       par_iter(&items.submodules[..]).for_each(|&sm| par_iter_submodules(tcx, sm, f));
        .                   }
        .               }
        .           
        .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
        .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
    2,008 ( 0.00%)      pub fn parent_iter(self, current_id: HirId) -> ParentHirIterator<'hir> {
        .                   ParentHirIterator { current_id, map: self }
    8,044 ( 0.00%)      }
        .           
        .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
        .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
        .               pub fn parent_owner_iter(self, current_id: HirId) -> ParentOwnerIterator<'hir> {
        .                   ParentOwnerIterator { current_id, map: self }
   39,166 ( 0.00%)      }
        .           
        .               /// Checks if the node is left-hand side of an assignment.
        .               pub fn is_lhs(&self, id: HirId) -> bool {
        .                   match self.find(self.get_parent_node(id)) {
        .                       Some(Node::Expr(expr)) => match expr.kind {
        .                           ExprKind::Assign(lhs, _rhs, _span) => lhs.hir_id == id,
        .                           _ => false,
        .                       },
-- line 727 ----------------------------------------
-- line 752 ----------------------------------------
        .               /// ```
        .               /// fn foo(x: usize) -> bool {
        .               ///     loop {
        .               ///         true  // If `get_return_block` gets passed the `id` corresponding
        .               ///     }         // to this, it will return `None`.
        .               ///     false
        .               /// }
        .               /// ```
       27 ( 0.00%)      pub fn get_return_block(&self, id: HirId) -> Option<HirId> {
        3 ( 0.00%)          let mut iter = self.parent_iter(id).peekable();
        .                   let mut ignore_tail = false;
       12 ( 0.00%)          if let Some(node) = self.find(id) {
       12 ( 0.00%)              if let Node::Expr(Expr { kind: ExprKind::Ret(_), .. }) = node {
        .                           // When dealing with `return` statements, we don't care about climbing only tail
        .                           // expressions.
        .                           ignore_tail = true;
        .                       }
        .                   }
       38 ( 0.00%)          while let Some((hir_id, node)) = iter.next() {
      154 ( 0.00%)              if let (Some((_, next_node)), false) = (iter.peek(), ignore_tail) {
        .                           match next_node {
        .                               Node::Block(Block { expr: None, .. }) => return None,
        .                               // The current node is not the tail expression of its parent.
        .                               Node::Block(Block { expr: Some(e), .. }) if hir_id != e.hir_id => return None,
        .                               _ => {}
        .                           }
        .                       }
      175 ( 0.00%)              match node {
        .                           Node::Item(_)
        .                           | Node::ForeignItem(_)
        .                           | Node::TraitItem(_)
        .                           | Node::Expr(Expr { kind: ExprKind::Closure(..), .. })
        .                           | Node::ImplItem(_) => return Some(hir_id),
        .                           // Ignore `return`s on the first iteration
        .                           Node::Expr(Expr { kind: ExprKind::Loop(..) | ExprKind::Ret(..), .. })
        .                           | Node::Local(_) => {
        .                               return None;
        .                           }
        .                           _ => {}
        .                       }
        .                   }
        .                   None
       30 ( 0.00%)      }
        .           
        .               /// Retrieves the `HirId` for `id`'s parent item, or `id` itself if no
        .               /// parent item is in this map. The "parent item" is the closest parent node
        .               /// in the HIR which is recorded by the map and is an item, either an item
        .               /// in a module, trait, or impl.
   11,651 ( 0.00%)      pub fn get_parent_item(&self, hir_id: HirId) -> LocalDefId {
  104,948 ( 0.00%)          if let Some((def_id, _node)) = self.parent_owner_iter(hir_id).next() {
        .                       def_id
        .                   } else {
        .                       CRATE_DEF_ID
        .                   }
   23,302 ( 0.00%)      }
        .           
        .               /// Returns the `HirId` of `id`'s nearest module parent, or `id` itself if no
        .               /// module parent is in this map.
        .               pub(super) fn get_module_parent_node(&self, hir_id: HirId) -> LocalDefId {
   12,812 ( 0.00%)          for (def_id, node) in self.parent_owner_iter(hir_id) {
    7,140 ( 0.00%)              if let OwnerNode::Item(&Item { kind: ItemKind::Mod(_), .. }) = node {
        .                           return def_id;
        .                       }
        .                   }
        .                   CRATE_DEF_ID
        .               }
        .           
        .               /// When on an if expression, a match arm tail expression or a match arm, give back
        .               /// the enclosing `if` or `match` expression.
-- line 820 ----------------------------------------
-- line 885 ----------------------------------------
        .                       }
        .                   }
        .                   bug!(
        .                       "expected foreign mod or inlined parent, found {}",
        .                       self.node_to_string(HirId::make_owner(parent))
        .                   )
        .               }
        .           
   50,302 ( 0.00%)      pub fn expect_item(&self, id: LocalDefId) -> &'hir Item<'hir> {
   21,558 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::Item(item), .. }) => item,
        .                       _ => bug!("expected item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
   57,488 ( 0.00%)      }
        .           
   11,466 ( 0.00%)      pub fn expect_impl_item(&self, id: LocalDefId) -> &'hir ImplItem<'hir> {
    4,914 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::ImplItem(item), .. }) => item,
        .                       _ => bug!("expected impl item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
   13,104 ( 0.00%)      }
        .           
       84 ( 0.00%)      pub fn expect_trait_item(&self, id: LocalDefId) -> &'hir TraitItem<'hir> {
       36 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::TraitItem(item), .. }) => item,
        .                       _ => bug!("expected trait item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
       96 ( 0.00%)      }
        .           
        .               pub fn expect_variant(&self, id: HirId) -> &'hir Variant<'hir> {
        .                   match self.find(id) {
        .                       Some(Node::Variant(variant)) => variant,
        .                       _ => bug!("expected variant, found {}", self.node_to_string(id)),
        .                   }
        .               }
        .           
-- line 920 ----------------------------------------
-- line 929 ----------------------------------------
        .           
        .               pub fn expect_expr(&self, id: HirId) -> &'hir Expr<'hir> {
        .                   match self.find(id) {
        .                       Some(Node::Expr(expr)) => expr,
        .                       _ => bug!("expected expr, found {}", self.node_to_string(id)),
        .                   }
        .               }
        .           
   19,710 ( 0.00%)      pub fn opt_name(&self, id: HirId) -> Option<Symbol> {
    6,694 ( 0.00%)          Some(match self.get(id) {
        .                       Node::Item(i) => i.ident.name,
        .                       Node::ForeignItem(fi) => fi.ident.name,
        .                       Node::ImplItem(ii) => ii.ident.name,
        .                       Node::TraitItem(ti) => ti.ident.name,
        .                       Node::Variant(v) => v.ident.name,
        .                       Node::Field(f) => f.ident.name,
        .                       Node::Lifetime(lt) => lt.name.ident().name,
    6,384 ( 0.00%)              Node::GenericParam(param) => param.name.ident().name,
      124 ( 0.00%)              Node::Binding(&Pat { kind: PatKind::Binding(_, _, l, _), .. }) => l.name,
        .                       Node::Ctor(..) => self.name(HirId::make_owner(self.get_parent_item(id))),
        .                       _ => return None,
        .                   })
   10,950 ( 0.00%)      }
        .           
   17,272 ( 0.00%)      pub fn name(&self, id: HirId) -> Symbol {
    6,632 ( 0.00%)          match self.opt_name(id) {
        .                       Some(name) => name,
        .                       None => bug!("no name for {}", self.node_to_string(id)),
        .                   }
   12,954 ( 0.00%)      }
        .           
        .               /// Given a node ID, gets a list of attributes associated with the AST
        .               /// corresponding to the node-ID.
6,978,797 ( 0.06%)      pub fn attrs(&self, id: HirId) -> &'hir [ast::Attribute] {
  996,971 ( 0.01%)          self.tcx.hir_attrs(id.owner).get(id.local_id)
7,975,768 ( 0.07%)      }
        .           
        .               /// Gets the span of the definition of the specified HIR node.
        .               /// This is used by `tcx.get_span`
   10,647 ( 0.00%)      pub fn span(&self, hir_id: HirId) -> Span {
   97,465 ( 0.00%)          self.opt_span(hir_id)
        .                       .unwrap_or_else(|| bug!("hir::map::Map::span: id not in map: {:?}", hir_id))
   10,647 ( 0.00%)      }
        .           
  209,643 ( 0.00%)      pub fn opt_span(&self, hir_id: HirId) -> Option<Span> {
  209,643 ( 0.00%)          let span = match self.find(hir_id)? {
        .                       Node::Param(param) => param.span,
    2,872 ( 0.00%)              Node::Item(item) => match &item.kind {
        .                           ItemKind::Fn(sig, _, _) => sig.span,
    2,704 ( 0.00%)                  _ => item.span,
        .                       },
        .                       Node::ForeignItem(foreign_item) => foreign_item.span,
       60 ( 0.00%)              Node::TraitItem(trait_item) => match &trait_item.kind {
       60 ( 0.00%)                  TraitItemKind::Fn(sig, _) => sig.span,
        .                           _ => trait_item.span,
        .                       },
    6,126 ( 0.00%)              Node::ImplItem(impl_item) => match &impl_item.kind {
    5,368 ( 0.00%)                  ImplItemKind::Fn(sig, _) => sig.span,
      758 ( 0.00%)                  _ => impl_item.span,
        .                       },
      258 ( 0.00%)              Node::Variant(variant) => variant.span,
      260 ( 0.00%)              Node::Field(field) => field.span,
      385 ( 0.00%)              Node::AnonConst(constant) => self.body(constant.body).value.span,
        .                       Node::Expr(expr) => expr.span,
        .                       Node::Stmt(stmt) => stmt.span,
        .                       Node::PathSegment(seg) => seg.ident.span,
        .                       Node::Ty(ty) => ty.span,
        .                       Node::TraitRef(tr) => tr.path.span,
        .                       Node::Binding(pat) => pat.span,
        .                       Node::Pat(pat) => pat.span,
        .                       Node::Arm(arm) => arm.span,
        .                       Node::Block(block) => block.span,
    1,320 ( 0.00%)              Node::Ctor(..) => match self.find(self.get_parent_node(hir_id))? {
        .                           Node::Item(item) => item.span,
        .                           Node::Variant(variant) => variant.span,
        .                           _ => unreachable!(),
        .                       },
        .                       Node::Lifetime(lifetime) => lifetime.span,
        .                       Node::GenericParam(param) => param.span,
        .                       Node::Visibility(&Spanned {
        .                           node: VisibilityKind::Restricted { ref path, .. },
        .                           ..
        .                       }) => path.span,
        .                       Node::Infer(i) => i.span,
        .                       Node::Visibility(v) => bug!("unexpected Visibility {:?}", v),
        .                       Node::Local(local) => local.span,
        4 ( 0.00%)              Node::Crate(item) => item.inner,
        .                   };
        .                   Some(span)
  299,490 ( 0.00%)      }
        .           
        .               /// Like `hir.span()`, but includes the body of function items
        .               /// (instead of just the function header)
        .               pub fn span_with_body(&self, hir_id: HirId) -> Span {
        .                   match self.find(hir_id) {
        .                       Some(Node::TraitItem(item)) => item.span,
        .                       Some(Node::ImplItem(impl_item)) => impl_item.span,
        .                       Some(Node::Item(item)) => item.span,
        .                       Some(_) => self.span(hir_id),
        .                       _ => bug!("hir::map::Map::span_with_body: id not in map: {:?}", hir_id),
        .                   }
        .               }
        .           
    1,094 ( 0.00%)      pub fn span_if_local(&self, id: DefId) -> Option<Span> {
    5,698 ( 0.00%)          id.as_local().and_then(|id| self.opt_span(self.local_def_id_to_hir_id(id)))
    1,641 ( 0.00%)      }
        .           
        .               pub fn res_span(&self, res: Res) -> Option<Span> {
        .                   match res {
        .                       Res::Err => None,
        .                       Res::Local(id) => Some(self.span(id)),
        .                       res => self.span_if_local(res.opt_def_id()?),
        .                   }
        .               }
-- line 1042 ----------------------------------------
-- line 1062 ----------------------------------------
        .           }
        .           
        .           impl<'hir> intravisit::Map<'hir> for Map<'hir> {
        .               fn find(&self, hir_id: HirId) -> Option<Node<'hir>> {
        .                   self.find(hir_id)
        .               }
        .           
        .               fn body(&self, id: BodyId) -> &'hir Body<'hir> {
   20,284 ( 0.00%)          self.body(id)
        .               }
        .           
        .               fn item(&self, id: ItemId) -> &'hir Item<'hir> {
   15,064 ( 0.00%)          self.item(id)
        .               }
        .           
        .               fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
       90 ( 0.00%)          self.trait_item(id)
        .               }
        .           
        .               fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
   12,285 ( 0.00%)          self.impl_item(id)
        .               }
        .           
        .               fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
        .                   self.foreign_item(id)
        .               }
        .           }
        .           
        7 ( 0.00%)  pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {
        .               debug_assert_eq!(crate_num, LOCAL_CRATE);
        .               let krate = tcx.hir_crate(());
        3 ( 0.00%)      let hir_body_hash = krate.hir_hash;
        .           
        .               let upstream_crates = upstream_crates(tcx);
        .           
        .               // We hash the final, remapped names of all local source files so we
        .               // don't have to include the path prefix remapping commandline args.
        .               // If we included the full mapping in the SVH, we could only have
        .               // reproducible builds by compiling from the same directory. So we just
        .               // hash the result of the mapping instead of the mapping itself.
        2 ( 0.00%)      let mut source_file_names: Vec<_> = tcx
        .                   .sess
        .                   .source_map()
        .                   .files()
        .                   .iter()
        .                   .filter(|source_file| source_file.cnum == LOCAL_CRATE)
       59 ( 0.00%)          .map(|source_file| source_file.name_hash)
        .                   .collect();
        .           
        .               source_file_names.sort_unstable();
        .           
        .               let mut hcx = tcx.create_stable_hashing_context();
        .               let mut stable_hasher = StableHasher::new();
        .               hir_body_hash.hash_stable(&mut hcx, &mut stable_hasher);
        .               upstream_crates.hash_stable(&mut hcx, &mut stable_hasher);
        .               source_file_names.hash_stable(&mut hcx, &mut stable_hasher);
        3 ( 0.00%)      if tcx.sess.opts.debugging_opts.incremental_relative_spans {
        .                   let definitions = &tcx.untracked_resolutions.definitions;
        .                   let mut owner_spans: Vec<_> = krate
        .                       .owners
        .                       .iter_enumerated()
        .                       .filter_map(|(def_id, info)| {
        .                           let _ = info.as_ref()?;
        .                           let def_path_hash = definitions.def_path_hash(def_id);
        .                           let span = definitions.def_span(def_id);
        .                           debug_assert_eq!(span.parent(), None);
        .                           Some((def_path_hash, span))
        .                       })
        .                       .collect();
        .                   owner_spans.sort_unstable_by_key(|bn| bn.0);
        .                   owner_spans.hash_stable(&mut hcx, &mut stable_hasher);
        .               }
        3 ( 0.00%)      tcx.sess.opts.dep_tracking_hash(true).hash_stable(&mut hcx, &mut stable_hasher);
        2 ( 0.00%)      tcx.sess.local_stable_crate_id().hash_stable(&mut hcx, &mut stable_hasher);
        .           
        .               let crate_hash: Fingerprint = stable_hasher.finish();
        1 ( 0.00%)      Svh::new(crate_hash.to_smaller_hash())
        9 ( 0.00%)  }
        .           
        .           fn upstream_crates(tcx: TyCtxt<'_>) -> Vec<(StableCrateId, Svh)> {
        .               let mut upstream_crates: Vec<_> = tcx
        .                   .crates(())
        .                   .iter()
        .                   .map(|&cnum| {
      110 ( 0.00%)              let stable_crate_id = tcx.resolutions(()).cstore.stable_crate_id(cnum);
       22 ( 0.00%)              let hash = tcx.crate_hash(cnum);
        .                       (stable_crate_id, hash)
        .                   })
        .                   .collect();
        .               upstream_crates.sort_unstable_by_key(|&(stable_crate_id, _)| stable_crate_id);
        .               upstream_crates
        .           }
        .           
        .           fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {
-- line 1155 ----------------------------------------
-- line 1238 ----------------------------------------
        .                   Some(Node::Lifetime(_)) => node_str("lifetime"),
        .                   Some(Node::GenericParam(ref param)) => format!("generic_param {:?}{}", param, id_str),
        .                   Some(Node::Visibility(ref vis)) => format!("visibility {:?}{}", vis, id_str),
        .                   Some(Node::Crate(..)) => String::from("root_crate"),
        .                   None => format!("unknown node{}", id_str),
        .               }
        .           }
        .           
      216 ( 0.00%)  pub(super) fn hir_module_items(tcx: TyCtxt<'_>, module_id: LocalDefId) -> ModuleItems {
      144 ( 0.00%)      let mut collector = ModuleCollector {
        .                   tcx,
        .                   submodules: Vec::default(),
        .                   items: Vec::default(),
        .                   trait_items: Vec::default(),
        .                   impl_items: Vec::default(),
        .                   foreign_items: Vec::default(),
        .               };
        .           
      120 ( 0.00%)      let (hir_mod, span, hir_id) = tcx.hir().get_module(module_id);
        .               collector.visit_mod(hir_mod, span, hir_id);
        .           
      384 ( 0.00%)      let ModuleCollector { submodules, items, trait_items, impl_items, foreign_items, .. } =
        .                   collector;
      264 ( 0.00%)      return ModuleItems {
       96 ( 0.00%)          submodules: submodules.into_boxed_slice(),
       96 ( 0.00%)          items: items.into_boxed_slice(),
       96 ( 0.00%)          trait_items: trait_items.into_boxed_slice(),
       96 ( 0.00%)          impl_items: impl_items.into_boxed_slice(),
       96 ( 0.00%)          foreign_items: foreign_items.into_boxed_slice(),
        .               };
        .           
        .               struct ModuleCollector<'tcx> {
        .                   tcx: TyCtxt<'tcx>,
        .                   submodules: Vec<LocalDefId>,
        .                   items: Vec<ItemId>,
        .                   trait_items: Vec<TraitItemId>,
        .                   impl_items: Vec<ImplItemId>,
        .                   foreign_items: Vec<ForeignItemId>,
        .               }
        .           
        .               impl<'hir> Visitor<'hir> for ModuleCollector<'hir> {
        .                   type NestedFilter = nested_filter::All;
        .           
        .                   fn nested_visit_map(&mut self) -> Self::Map {
    2,843 ( 0.00%)              self.tcx.hir()
        .                   }
        .           
    5,400 ( 0.00%)          fn visit_item(&mut self, item: &'hir Item<'hir>) {
    3,240 ( 0.00%)              self.items.push(item.item_id());
    2,160 ( 0.00%)              if let ItemKind::Mod(..) = item.kind {
        .                           // If this declares another module, do not recurse inside it.
       23 ( 0.00%)                  self.submodules.push(item.def_id);
        .                       } else {
    6,342 ( 0.00%)                  intravisit::walk_item(self, item)
        .                       }
       92 ( 0.00%)          }
        .           
        .                   fn visit_trait_item(&mut self, item: &'hir TraitItem<'hir>) {
       18 ( 0.00%)              self.trait_items.push(item.trait_item_id());
       18 ( 0.00%)              intravisit::walk_trait_item(self, item)
        .                   }
        .           
        .                   fn visit_impl_item(&mut self, item: &'hir ImplItem<'hir>) {
    2,457 ( 0.00%)              self.impl_items.push(item.impl_item_id());
    2,457 ( 0.00%)              intravisit::walk_impl_item(self, item)
        .                   }
        .           
        .                   fn visit_foreign_item(&mut self, item: &'hir ForeignItem<'hir>) {
        .                       self.foreign_items.push(item.foreign_item_id());
        .                       intravisit::walk_foreign_item(self, item)
        .                   }
        .               }
      192 ( 0.00%)  }

2,243,017 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                   

-- line 111 ----------------------------------------
          .           const EMPTY: u8 = 0b1111_1111;
          .           
          .           /// Control byte value for a deleted bucket.
          .           const DELETED: u8 = 0b1000_0000;
          .           
          .           /// Checks whether a control byte represents a full bucket (top bit is clear).
          .           #[inline]
          .           fn is_full(ctrl: u8) -> bool {
  6,831,647 ( 0.06%)      ctrl & 0x80 == 0
          .           }
          .           
          .           /// Checks whether a control byte represents a special value (top bit is set).
          .           #[inline]
          .           fn is_special(ctrl: u8) -> bool {
          .               ctrl & 0x80 != 0
          .           }
          .           
          .           /// Checks whether a special control value is EMPTY (just check 1 bit).
          .           #[inline]
          .           fn special_is_empty(ctrl: u8) -> bool {
          .               debug_assert!(is_special(ctrl));
    594,992 ( 0.01%)      ctrl & 0x01 != 0
          .           }
          .           
          .           /// Primary hash function, used to select the initial bucket to probe from.
          .           #[inline]
          .           #[allow(clippy::cast_possible_truncation)]
          .           fn h1(hash: u64) -> usize {
          .               // On 32-bit platforms we simply ignore the higher hash bits.
          .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
          .           /// Secondary hash function, saved in the low 7 bits of the control byte.
          .           #[inline]
          .           #[allow(clippy::cast_possible_truncation)]
          .           fn h2(hash: u64) -> u8 {
          .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
          .               // value, some hash functions (such as FxHash) produce a usize result
          .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
          .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
133,458,005 ( 1.16%)      let top7 = hash >> (hash_len * 8 - 7);
          .               (top7 & 0x7f) as u8 // truncation
          .           }
          .           
          .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
          .           /// table size is a power of two) to visit every group of elements exactly once.
          .           ///
          .           /// A triangular probe has us jump by 1 more group every time. So first we
          .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
          .               #[inline]
          .               fn move_next(&mut self, bucket_mask: usize) {
          .                   // We should have found an empty bucket by now and ended the probe.
          .                   debug_assert!(
          .                       self.stride <= bucket_mask,
          .                       "Went past end of probe sequence"
          .                   );
          .           
  1,001,752 ( 0.01%)          self.stride += Group::WIDTH;
  1,001,752 ( 0.01%)          self.pos += self.stride;
    858,347 ( 0.01%)          self.pos &= bucket_mask;
          .               }
          .           }
          .           
          .           /// Returns the number of buckets needed to hold the given number of items,
          .           /// taking the maximum load factor into account.
          .           ///
          .           /// Returns `None` if an overflow occurs.
          .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
          .           #[cfg_attr(target_os = "emscripten", inline(never))]
          .           #[cfg_attr(not(target_os = "emscripten"), inline)]
          .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
          .               debug_assert_ne!(cap, 0);
          .           
          .               // For small tables we require at least 1 empty bucket so that lookups are
          .               // guaranteed to terminate if an element doesn't exist in the table.
    539,400 ( 0.00%)      if cap < 8 {
          .                   // We don't bother with a table size of 2 buckets since that can only
          .                   // hold a single element. Instead we skip directly to a 4 bucket table
          .                   // which can hold 3 elements.
  1,251,295 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
          .               }
          .           
          .               // Otherwise require 1/8 buckets to be empty (87.5% load)
          .               //
          .               // Be careful when modifying this, calculate_layout relies on the
          .               // overflow check here.
    116,646 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
          .           
          .               // Any overflows will have been caught by the checked_mul. Also, any
          .               // rounding errors from the division above will be cleaned up by
          .               // next_power_of_two (which can't overflow because of the previous division).
          .               Some(adjusted_cap.next_power_of_two())
          .           }
          .           
          .           /// Returns the maximum effective capacity for the given bucket mask, taking
          .           /// the maximum load factor into account.
          .           #[inline]
          .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
  1,320,478 ( 0.01%)      if bucket_mask < 8 {
          .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
          .                   // Keep in mind that the bucket mask is one less than the bucket count.
          .                   bucket_mask
          .               } else {
          .                   // For larger tables we reserve 12.5% of the slots as empty.
    135,510 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
          .               }
          .           }
          .           
          .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
          .           /// while keeping the rest of `calculate_layout_for` independent of `T`
          .           #[derive(Copy, Clone)]
          .           struct TableLayout {
          .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
          .           
          .               #[inline]
          .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   let TableLayout { size, ctrl_align } = self;
          .                   // Manual layout calculation since Layout methods are not yet stable.
          .                   let ctrl_offset =
  1,163,591 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
  1,513,608 ( 0.01%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
          .           
          .                   Some((
          .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
          .                       ctrl_offset,
          .                   ))
          .               }
          .           }
          .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
          .                   }
          .               }
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub unsafe fn drop(&self) {
          .                   self.as_ptr().drop_in_place();
          .               }
          .               #[inline]
          .               pub unsafe fn read(&self) -> T {
      2,508 ( 0.00%)          self.as_ptr().read()
          .               }
          .               #[inline]
          .               pub unsafe fn write(&self, val: T) {
          .                   self.as_ptr().write(val);
          .               }
          .               #[inline]
          .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
          .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
          .               /// Creates a new empty hash table without allocating any memory, using the
          .               /// given allocator.
          .               ///
          .               /// In effect this returns a table with exactly 1 bucket. However we can
          .               /// leave the data pointer dangling since that bucket is never written to
          .               /// due to our load factor forcing us to always have at least 1 free bucket.
          .               #[inline]
          .               pub fn new_in(alloc: A) -> Self {
     31,860 ( 0.00%)          Self {
          .                       table: RawTableInner::new_in(alloc),
          .                       marker: PhantomData,
          .                   }
          .               }
          .           
          .               /// Allocates a new hash table with the given number of buckets.
          .               ///
          .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
          .               unsafe fn new_uninitialized(
          .                   alloc: A,
          .                   buckets: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   Ok(Self {
        595 ( 0.00%)              table: RawTableInner::new_uninitialized(
          .                           alloc,
          .                           TableLayout::new::<T>(),
          .                           buckets,
          .                           fallibility,
          .                       )?,
          .                       marker: PhantomData,
          .                   })
          .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
          .               /// Attempts to allocate a new hash table with at least enough capacity
          .               /// for inserting the given number of elements without reallocating.
          .               fn fallible_with_capacity(
          .                   alloc: A,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   Ok(Self {
     23,058 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
          .                           alloc,
          .                           TableLayout::new::<T>(),
          .                           capacity,
          .                           fallibility,
          .                       )?,
          .                       marker: PhantomData,
          .                   })
          .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
          .                   debug_assert_ne!(self.table.bucket_mask, 0);
          .                   debug_assert!(index < self.buckets());
          .                   Bucket::from_base_index(self.data_end(), index)
          .               }
          .           
          .               /// Erases an element from the table without dropping it.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    136,577 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    136,577 ( 0.00%)          let index = self.bucket_index(item);
          .                   self.table.erase(index);
    273,154 ( 0.00%)      }
          .           
          .               /// Erases an element from the table, dropping it in place.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::needless_pass_by_value)]
          .               #[allow(deprecated)]
          .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
          .                   // Erase the element from the table first since drop might panic.
    156,328 ( 0.00%)          self.erase_no_drop(&item);
          .                   item.drop();
          .               }
          .           
          .               /// Finds and erases an element from the table, dropping it in place.
          .               /// Returns true if an element was found.
          .               #[cfg(feature = "raw")]
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
          .                   }
          .               }
          .           
          .               /// Removes an element from the table, returning it.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::needless_pass_by_value)]
          .               #[allow(deprecated)]
          .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    116,826 ( 0.00%)          self.erase_no_drop(&item);
        807 ( 0.00%)          item.read()
          .               }
          .           
          .               /// Finds and removes an element from the table, returning it.
          .               #[cfg_attr(feature = "inline-more", inline)]
  2,390,111 ( 0.02%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
      4,334 ( 0.00%)          match self.find(hash, eq) {
     63,996 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
    540,180 ( 0.00%)              None => None,
          .                   }
  2,993,553 ( 0.03%)      }
          .           
          .               /// Marks all table buckets as empty without dropping their contents.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn clear_no_drop(&mut self) {
          .                   self.table.clear_no_drop();
          .               }
          .           
          .               /// Removes all elements from the table without freeing the backing memory.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn clear(&mut self) {
          .                   // Ensure that the table is reset even if one of the drops panic
          .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
          .                   unsafe {
          1 ( 0.00%)              self_.drop_elements();
          .                   }
          .               }
          .           
          7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
     58,146 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
          .                       for item in self.iter() {
          .                           item.drop();
          .                       }
          .                   }
          8 ( 0.00%)      }
          .           
          .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
          .                   // Calculate the minimal number of elements that we need to reserve
          .                   // space for.
          .                   let min_size = usize::max(self.table.items, min_size);
          .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
          .                       }
          .                   }
          .               }
          .           
          .               /// Ensures that at least `additional` items can be inserted into the table
          .               /// without reallocation.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
  1,656,033 ( 0.01%)          if additional > self.table.growth_left {
          .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
  1,114,238 ( 0.01%)              if self
          .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
          .                           .is_err()
          .                       {
          .                           unsafe { hint::unreachable_unchecked() }
          .                       }
          .                   }
          .               }
          .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
          .                   } else {
          .                       Ok(())
          .                   }
          .               }
          .           
          .               /// Out-of-line slow path for `reserve` and `try_reserve`.
          .               #[cold]
          .               #[inline(never)]
  2,151,891 ( 0.02%)      fn reserve_rehash(
          .                   &mut self,
          .                   additional: usize,
          .                   hasher: impl Fn(&T) -> u64,
          .                   fallibility: Fallibility,
          .               ) -> Result<(), TryReserveError> {
          .                   unsafe {
          .                       self.table.reserve_rehash_inner(
          .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
          .                           TableLayout::new::<T>(),
          .                           if mem::needs_drop::<T>() {
          .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
          .                           } else {
          .                               None
          .                           },
          .                       )
          .                   }
  1,838,048 ( 0.02%)      }
          .           
          .               /// Allocates a new table of a different size and moves the contents of the
          .               /// current table into it.
          .               fn resize(
          .                   &mut self,
          .                   capacity: usize,
          .                   hasher: impl Fn(&T) -> u64,
          .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
          .                       )
          .                   }
          .               }
          .           
          .               /// Inserts a new element into the table, and returns its raw bucket.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
  6,391,526 ( 0.06%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
          .                   unsafe {
          .                       let mut index = self.table.find_insert_slot(hash);
          .           
          .                       // We can avoid growing the table once we have reached our load
          .                       // factor if we are replacing a tombstone. This works since the
          .                       // number of EMPTY slots does not change in this case.
     13,319 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
  6,371,873 ( 0.06%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
          .                           self.reserve(1, hasher);
          .                           index = self.table.find_insert_slot(hash);
          .                       }
          .           
          .                       self.table.record_item_insert_at(index, old_ctrl, hash);
          .           
          .                       let bucket = self.bucket(index);
          2 ( 0.00%)              bucket.write(value);
          .                       bucket
          .                   }
  4,709,790 ( 0.04%)      }
          .           
          .               /// Attempts to insert a new element without growing the table and return its raw bucket.
          .               ///
          .               /// Returns an `Err` containing the given element if inserting it would require growing the
          .               /// table.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
          .                       }
          .                   }
          .               }
          .           
          .               /// Inserts a new element into the table, and returns a mutable reference to it.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
  5,110,264 ( 0.04%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
        291 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
  3,832,698 ( 0.03%)      }
          .           
          .               /// Inserts a new element into the table, without growing the table.
          .               ///
          .               /// There must be enough space in the table to insert the new element.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
     38,832 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
  1,529,455 ( 0.01%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
    220,694 ( 0.00%)          let bucket = self.table.bucket(index);
          .           
          .                   // If we are replacing a DELETED entry then we don't need to update
          .                   // the load counter.
  3,196,141 ( 0.03%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
          .           
          .                   bucket.write(value);
  2,748,179 ( 0.02%)          self.table.items += 1;
          .                   bucket
     77,519 ( 0.00%)      }
          .           
          .               /// Temporary removes a bucket, applying the given function to the removed
          .               /// element and optionally put back the returned value in the same bucket.
          .               ///
          .               /// Returns `true` if the bucket still contains an element
          .               ///
          .               /// This does not check if the given bucket is actually occupied.
          .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
          .                       true
          .                   } else {
          .                       false
          .                   }
          .               }
          .           
          .               /// Searches for an element in the table.
          .               #[inline]
     51,240 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
     78,704 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
     89,724 ( 0.00%)              eq(self.bucket(index).as_ref())
     55,630 ( 0.00%)          });
          .           
          .                   // Avoid `Option::map` because it bloats LLVM IR.
          .                   match result {
     14,008 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
          .                       None => None,
          .                   }
     57,424 ( 0.00%)      }
          .           
          .               /// Gets a reference to an element in the table.
          .               #[inline]
          .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
    126,720 ( 0.00%)          match self.find(hash, eq) {
          .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
          .                       None => None,
          .                   }
          .               }
          .           
          .               /// Gets a mutable reference to an element in the table.
          .               #[inline]
      5,691 ( 0.00%)      pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
     27,995 ( 0.00%)          match self.find(hash, eq) {
          .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
          .                       None => None,
          .                   }
      6,504 ( 0.00%)      }
          .           
          .               /// Attempts to get mutable references to `N` entries in the table at once.
          .               ///
          .               /// Returns an array of length `N` with the results of each query.
          .               ///
          .               /// At most one mutable reference will be returned to any entry. `None` will be returned if any
          .               /// of the hashes are duplicates. `None` will be returned if the hash is not found.
          .               ///
-- line 859 ----------------------------------------
-- line 920 ----------------------------------------
          .               #[inline]
          .               pub fn len(&self) -> usize {
          .                   self.table.items
          .               }
          .           
          .               /// Returns `true` if the table contains no elements.
          .               #[inline]
          .               pub fn is_empty(&self) -> bool {
  3,534,836 ( 0.03%)          self.len() == 0
          .               }
          .           
          .               /// Returns the number of buckets in the table.
          .               #[inline]
          .               pub fn buckets(&self) -> usize {
          .                   self.table.bucket_mask + 1
          .               }
          .           
          .               /// Returns an iterator over every element in the table. It is up to
          .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
          .               /// Because we cannot make the `next` method unsafe on the `RawIter`
          .               /// struct, we have to make the `iter` method unsafe.
          .               #[inline]
          .               pub unsafe fn iter(&self) -> RawIter<T> {
          8 ( 0.00%)          let data = Bucket::from_base_index(self.data_end(), 0);
          .                   RawIter {
          .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
    397,620 ( 0.00%)              items: self.table.items,
          .                   }
          .               }
          .           
          .               /// Returns an iterator over occupied buckets that could match a given hash.
          .               ///
          .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
          .               /// return items that have a hash value different than the one provided. You
          .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
          .               /// Iteration starts at the provided iterator's current location.
          .               ///
          .               /// It is up to the caller to ensure that the iterator is valid for this
          .               /// `RawTable` and covers all items that remain in the table.
          .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
          .                   debug_assert_eq!(iter.len(), self.len());
          .           
          .                   let alloc = self.table.alloc.clone();
     16,076 ( 0.00%)          let allocation = self.into_allocation();
     12,057 ( 0.00%)          RawIntoIter {
     20,095 ( 0.00%)              iter,
          .                       allocation,
          .                       marker: PhantomData,
          .                       alloc,
          .                   }
          .               }
          .           
          .               /// Converts the table into a raw allocation. The contents of the table
          .               /// should be dropped using a `RawIter` before freeing the allocation.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
      7,498 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
          .                       None
          .                   } else {
          .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
          .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
          .                           Some(lco) => lco,
          .                           None => unsafe { hint::unreachable_unchecked() },
          .                       };
          .                       Some((
      1,046 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
          .                           layout,
          .                       ))
          .                   };
          .                   mem::forget(self);
          .                   alloc
          .               }
          .           }
          .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           impl<A> RawTableInner<A> {
          .               #[inline]
          .               const fn new_in(alloc: A) -> Self {
  2,526,041 ( 0.02%)          Self {
          .                       // Be careful to cast the entire slice to a raw pointer.
          .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
          .                       bucket_mask: 0,
          .                       items: 0,
          .                       growth_left: 0,
          .                       alloc,
          .                   }
          .               }
          .           }
          .           
          .           impl<A: Allocator + Clone> RawTableInner<A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
  2,296,647 ( 0.02%)      unsafe fn new_uninitialized(
          .                   alloc: A,
          .                   table_layout: TableLayout,
          .                   buckets: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
          .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
          .                   // such allocations will never succeed anyways.
          .                   //
          .                   // This mirrors what Vec does in the standard library.
          .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
          .                       return Err(fallibility.capacity_overflow());
          .                   }
          .           
    468,322 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
          .                       Ok(block) => block.cast(),
          .                       Err(_) => return Err(fallibility.alloc_err(layout)),
          .                   };
          .           
          .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
  1,261,404 ( 0.01%)          Ok(Self {
          .                       ctrl,
    480,053 ( 0.00%)              bucket_mask: buckets - 1,
          .                       items: 0,
          .                       growth_left: bucket_mask_to_capacity(buckets - 1),
          .                       alloc,
          .                   })
  1,671,254 ( 0.01%)      }
          .           
          .               #[inline]
     64,082 ( 0.00%)      fn fallible_with_capacity(
          .                   alloc: A,
          .                   table_layout: TableLayout,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
     16,676 ( 0.00%)          if capacity == 0 {
     12,610 ( 0.00%)              Ok(Self::new_in(alloc))
          .                   } else {
          .                       unsafe {
          .                           let buckets =
          .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
          .           
  1,043,778 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
          .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
          .           
     33,852 ( 0.00%)                  Ok(result)
          .                       }
          .                   }
     64,082 ( 0.00%)      }
          .           
          .               /// Searches for an empty or deleted bucket which is suitable for inserting
          .               /// a new element and sets the hash for that slot.
          .               ///
          .               /// There must be at least 1 empty bucket in the table.
          .               #[inline]
    556,270 ( 0.00%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
          .                   let index = self.find_insert_slot(hash);
    556,270 ( 0.00%)          let old_ctrl = *self.ctrl(index);
          .                   self.set_ctrl_h2(index, hash);
          .                   (index, old_ctrl)
  1,112,540 ( 0.01%)      }
          .           
          .               /// Searches for an empty or deleted bucket which is suitable for inserting
          .               /// a new element.
          .               ///
          .               /// There must be at least 1 empty bucket in the table.
          .               #[inline]
          .               fn find_insert_slot(&self, hash: u64) -> usize {
          .                   let mut probe_seq = self.probe_seq(hash);
          .                   loop {
          .                       unsafe {
          .                           let group = Group::load(self.ctrl(probe_seq.pos));
  4,425,979 ( 0.04%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
 12,891,714 ( 0.11%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
          .           
          .                               // In tables smaller than the group width, trailing control
          .                               // bytes outside the range of the table are filled with
          .                               // EMPTY entries. These will unfortunately trigger a
          .                               // match, but once masked may point to a full bucket that
          .                               // is already occupied. We detect this situation here and
          .                               // perform a second scan starting at the beginning of the
          .                               // table. This second scan is guaranteed to find an empty
          .                               // slot (due to the load factor) before hitting the trailing
          .                               // control bytes (containing EMPTY).
  5,887,975 ( 0.05%)                      if unlikely(is_full(*self.ctrl(result))) {
          .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
          .                                   debug_assert_ne!(probe_seq.pos, 0);
          .                                   return Group::load_aligned(self.ctrl(0))
          .                                       .match_empty_or_deleted()
          .                                       .lowest_set_bit_nonzero();
          .                               }
          .           
          .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
          .           
          .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
          .               /// code generated, but it is eliminated by LLVM optimizations.
          .               #[inline]
          .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
          .                   let h2_hash = h2(hash);
          .                   let mut probe_seq = self.probe_seq(hash);
          .           
    294,152 ( 0.00%)          loop {
          .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
          .           
 14,070,763 ( 0.12%)              for bit in group.match_byte(h2_hash) {
 27,171,038 ( 0.24%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
          .           
 16,709,492 ( 0.15%)                  if likely(eq(index)) {
          .                               return Some(index);
          .                           }
          .                       }
          .           
  4,512,394 ( 0.04%)              if likely(group.match_empty().any_bit_set()) {
          .                           return None;
          .                       }
          .           
          .                       probe_seq.move_next(self.bucket_mask);
          .                   }
          .               }
          .           
          .               #[allow(clippy::mut_mut)]
          .               #[inline]
          .               unsafe fn prepare_rehash_in_place(&mut self) {
          .                   // Bulk convert all full control bytes to DELETED, and all DELETED
          .                   // control bytes to EMPTY. This effectively frees up all buckets
          .                   // containing a DELETED entry.
          3 ( 0.00%)          for i in (0..self.buckets()).step_by(Group::WIDTH) {
          .                       let group = Group::load_aligned(self.ctrl(i));
          .                       let group = group.convert_special_to_empty_and_full_to_deleted();
          .                       group.store_aligned(self.ctrl(i));
          .                   }
          .           
          .                   // Fix up the trailing control bytes. See the comments in set_ctrl
          .                   // for the handling of tables smaller than the group width.
          3 ( 0.00%)          if self.buckets() < Group::WIDTH {
          .                       self.ctrl(0)
          .                           .copy_to(self.ctrl(Group::WIDTH), self.buckets());
          .                   } else {
          .                       self.ctrl(0)
          .                           .copy_to(self.ctrl(self.buckets()), Group::WIDTH);
          .                   }
          .               }
          .           
-- line 1220 ----------------------------------------
-- line 1225 ----------------------------------------
          .                   Bucket::from_base_index(self.data_end(), index)
          .               }
          .           
          .               #[inline]
          .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
          .                   debug_assert_ne!(self.bucket_mask, 0);
          .                   debug_assert!(index < self.buckets());
          .                   let base: *mut u8 = self.data_end().as_ptr();
 16,064,632 ( 0.14%)          base.sub((index + 1) * size_of)
          .               }
          .           
          .               #[inline]
          .               unsafe fn data_end<T>(&self) -> NonNull<T> {
          .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
          .               }
          .           
          .               /// Returns an iterator-like object for a probe sequence on the table.
          .               ///
          .               /// This iterator never terminates, but is guaranteed to visit each bucket
          .               /// group exactly once. The loop using `probe_seq` must terminate upon
          .               /// reaching a group containing an empty bucket.
          .               #[inline]
          .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
          .                   ProbeSeq {
 77,671,649 ( 0.68%)              pos: h1(hash) & self.bucket_mask,
          .                       stride: 0,
          .                   }
          .               }
          .           
          .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
          .               /// in the table, otherwise returns error
          .               #[cfg(feature = "raw")]
          .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
          .                   } else {
          .                       self.record_item_insert_at(index, old_ctrl, hash);
          .                       Ok(index)
          .                   }
          .               }
          .           
          .               #[inline]
          .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
  7,967,129 ( 0.07%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
          .                   self.set_ctrl_h2(index, hash);
  6,370,804 ( 0.06%)          self.items += 1;
          .               }
          .           
          .               #[inline]
          .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
          .                   let probe_seq_pos = self.probe_seq(hash).pos;
          .                   let probe_index =
          .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
          .                   probe_index(i) == probe_index(new_i)
-- line 1281 ----------------------------------------
-- line 1312 ----------------------------------------
          .                   // replicate the buckets at the end of the trailing group. For example
          .                   // with 2 buckets and a group size of 4, the control bytes will look
          .                   // like this:
          .                   //
          .                   //     Real    |             Replicated
          .                   // ---------------------------------------------
          .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
          .                   // ---------------------------------------------
 12,589,972 ( 0.11%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
          .           
  4,195,772 ( 0.04%)          *self.ctrl(index) = ctrl;
  4,196,384 ( 0.04%)          *self.ctrl(index2) = ctrl;
          .               }
          .           
          .               /// Returns a pointer to a control byte.
          .               #[inline]
          .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
          .                   debug_assert!(index < self.num_ctrl_bytes());
          .                   self.ctrl.as_ptr().add(index)
          .               }
          .           
          .               #[inline]
          .               fn buckets(&self) -> usize {
  1,252,001 ( 0.01%)          self.bucket_mask + 1
          .               }
          .           
          .               #[inline]
          .               fn num_ctrl_bytes(&self) -> usize {
  1,311,999 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
          .               }
          .           
          .               #[inline]
          .               fn is_empty_singleton(&self) -> bool {
  4,712,065 ( 0.04%)          self.bucket_mask == 0
          .               }
          .           
          .               #[allow(clippy::mut_mut)]
          .               #[inline]
          .               unsafe fn prepare_resize(
          .                   &self,
          .                   table_layout: TableLayout,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
          .                   debug_assert!(self.items <= capacity);
          .           
          .                   // Allocate and initialize the new table.
      7,065 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
          .                       self.alloc.clone(),
          .                       table_layout,
          .                       capacity,
          .                       fallibility,
          .                   )?;
    682,213 ( 0.01%)          new_table.growth_left -= self.items;
          .                   new_table.items = self.items;
          .           
          .                   // The hash function may panic, in which case we simply free the new
          .                   // table without dropping any elements that may have been copied into
          .                   // it.
          .                   //
          .                   // This guard is also used to free the old table on success, see
          .                   // the comment at the bottom of this function.
          .                   Ok(guard(new_table, move |self_| {
    266,409 ( 0.00%)              if !self_.is_empty_singleton() {
          .                           self_.free_buckets(table_layout);
          .                       }
          .                   }))
          .               }
          .           
          .               /// Reserves or rehashes to make room for `additional` more elements.
          .               ///
          .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
          .                   &mut self,
          .                   additional: usize,
          .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
          .                   fallibility: Fallibility,
          .                   layout: TableLayout,
          .                   drop: Option<fn(*mut u8)>,
          .               ) -> Result<(), TryReserveError> {
          .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
    532,825 ( 0.00%)          let new_items = match self.items.checked_add(additional) {
          .                       Some(new_items) => new_items,
          .                       None => return Err(fallibility.capacity_overflow()),
          .                   };
    532,820 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
  1,227,777 ( 0.01%)          if new_items <= full_capacity / 2 {
          .                       // Rehash in-place without re-allocating if we have plenty of spare
          .                       // capacity that is locked up due to DELETED entries.
          .                       self.rehash_in_place(hasher, layout.size, drop);
          2 ( 0.00%)              Ok(())
          .                   } else {
          .                       // Otherwise, conservatively resize to at least the next size up
          .                       // to avoid churning deletes into frequent rehashes.
          .                       self.resize_inner(
    266,409 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
          .                           hasher,
          .                           fallibility,
          .                           layout,
          .                       )
          .                   }
          .               }
          .           
          .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
          .               #[inline(always)]
          .               unsafe fn resize_inner(
          .                   &mut self,
          .                   capacity: usize,
          .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
          .                   fallibility: Fallibility,
          .                   layout: TableLayout,
          .               ) -> Result<(), TryReserveError> {
     17,917 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
          .           
          .                   // Copy all elements to the new table.
          .                   for i in 0..self.buckets() {
  2,536,373 ( 0.02%)              if !is_full(*self.ctrl(i)) {
          .                           continue;
          .                       }
          .           
          .                       // This may panic.
          .                       let hash = hasher(self, i);
          .           
          .                       // We can use a simpler version of insert() here since:
          .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
          .                   }
          .           
          .                   // We successfully copied all elements without panicking. Now replace
          .                   // self with the new table. The old table will have its memory freed but
          .                   // the items will not be dropped (since they have been moved into the
          .                   // new table).
          .                   mem::swap(self, &mut new_table);
          .           
    266,409 ( 0.00%)          Ok(())
          .               }
          .           
          .               /// Rehashes the contents of the table in place (i.e. without changing the
          .               /// allocation).
          .               ///
          .               /// If `hasher` panics then some the table's contents may be lost.
          .               ///
          .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1496 ----------------------------------------
          .                       }
          .                       self_.growth_left = bucket_mask_to_capacity(self_.bucket_mask) - self_.items;
          .                   });
          .           
          .                   // At this point, DELETED elements are elements that we haven't
          .                   // rehashed yet. Find them and re-insert them at their ideal
          .                   // position.
          .                   'outer: for i in 0..guard.buckets() {
         64 ( 0.00%)              if *guard.ctrl(i) != DELETED {
          .                           continue;
          .                       }
          .           
          .                       let i_p = guard.bucket_ptr(i, size_of);
          .           
          .                       'inner: loop {
          .                           // Hash the current item
          .                           let hash = hasher(*guard, i);
-- line 1512 ----------------------------------------
-- line 1541 ----------------------------------------
          .                               // swapped into the old slot.
          .                               debug_assert_eq!(prev_ctrl, DELETED);
          .                               ptr::swap_nonoverlapping(i_p, new_i_p, size_of);
          .                               continue 'inner;
          .                           }
          .                       }
          .                   }
          .           
          3 ( 0.00%)          guard.growth_left = bucket_mask_to_capacity(guard.bucket_mask) - guard.items;
          .           
          .                   mem::forget(guard);
          .               }
          .           
          .               #[inline]
          .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
          .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
          .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
          .                       Some(lco) => lco,
          .                       None => hint::unreachable_unchecked(),
          .                   };
          .                   self.alloc.deallocate(
    224,829 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
          .                       layout,
          .                   );
          .               }
          .           
          .               /// Marks all table buckets as empty without dropping their contents.
          .               #[inline]
          .               fn clear_no_drop(&mut self) {
     36,176 ( 0.00%)          if !self.is_empty_singleton() {
          .                       unsafe {
          .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
          .                       }
          .                   }
     43,422 ( 0.00%)          self.items = 0;
     36,292 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
          .               }
          .           
          .               #[inline]
          .               unsafe fn erase(&mut self, index: usize) {
          .                   debug_assert!(is_full(*self.ctrl(index)));
    351,340 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
          .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
          .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
          .           
          .                   // If we are inside a continuous block of Group::WIDTH full or deleted
          .                   // cells then a probe window may have seen a full block when trying to
          .                   // insert. We therefore need to keep that block non-empty so that
          .                   // lookups will continue searching to the next probe window.
          .                   //
          .                   // Note that in this context `leading_zeros` refers to the bytes at the
          .                   // end of a group, while `trailing_zeros` refers to the bytes at the
          .                   // beginning of a group.
  1,405,360 ( 0.01%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
          .                       DELETED
          .                   } else {
  1,702,015 ( 0.01%)              self.growth_left += 1;
          .                       EMPTY
          .                   };
          .                   self.set_ctrl(index, ctrl);
  1,405,360 ( 0.01%)          self.items -= 1;
          .               }
          .           }
          .           
          .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
     84,976 ( 0.00%)      fn clone(&self) -> Self {
     10,757 ( 0.00%)          if self.table.is_empty_singleton() {
          .                       Self::new_in(self.table.alloc.clone())
          .                   } else {
          .                       unsafe {
          .                           let mut new_table = ManuallyDrop::new(
          .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
          .                               match Self::new_uninitialized(
          .                                   self.table.alloc.clone(),
          .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
          .                               // We need to free the memory allocated for the new table.
          .                               new_table.free_buckets();
          .                           });
          .           
          .                           // Return the newly created table.
          .                           ManuallyDrop::into_inner(new_table)
          .                       }
          .                   }
     95,598 ( 0.00%)      }
          .           
          .               fn clone_from(&mut self, source: &Self) {
          .                   if source.table.is_empty_singleton() {
          .                       *self = Self::new_in(self.table.alloc.clone());
          .                   } else {
          .                       unsafe {
          .                           // First, drop all our elements without clearing the control bytes.
          .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
          .                       .table
          .                       .ctrl(0)
          .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
          .                   source
          .                       .data_start()
          .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
          .           
          .                   self.table.items = source.table.items;
        238 ( 0.00%)          self.table.growth_left = source.table.growth_left;
          .               }
          .           }
          .           
          .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
          .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
          .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
          .               fn default() -> Self {
          .                   Self::new_in(Default::default())
          .               }
          .           }
          .           
          .           #[cfg(feature = "nightly")]
          .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
  1,831,109 ( 0.02%)      fn drop(&mut self) {
  1,956,621 ( 0.02%)          if !self.table.is_empty_singleton() {
          .                       unsafe {
          .                           self.drop_elements();
          .                           self.free_buckets();
          .                       }
          .                   }
  1,885,670 ( 0.02%)      }
          .           }
          .           #[cfg(not(feature = "nightly"))]
          .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn drop(&mut self) {
          .                   if !self.table.is_empty_singleton() {
          .                       unsafe {
          .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
          .               type Item = T;
          .               type IntoIter = RawIntoIter<T, A>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
     16,076 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
          .                   unsafe {
          .                       let iter = self.iter();
          .                       self.into_iter_from(iter)
          .                   }
     20,095 ( 0.00%)      }
          .           }
          .           
          .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
          .           /// not track an item count.
          .           pub(crate) struct RawIterRange<T> {
          .               // Mask of full buckets in the current group. Bits are cleared from this
          .               // mask as each element is processed.
          .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
          .           
          .           impl<T> Iterator for RawIterRange<T> {
          .               type Item = Bucket<T>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn next(&mut self) -> Option<Bucket<T>> {
          .                   unsafe {
          .                       loop {
  1,139,762 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    132,457 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    172,035 ( 0.00%)                      return Some(self.data.next_n(index));
          .                           }
          .           
    953,186 ( 0.01%)                  if self.next_ctrl >= self.end {
          .                               return None;
          .                           }
          .           
          .                           // We might read past self.end up to the next group boundary,
          .                           // but this is fine because it only occurs on tables smaller
          .                           // than the group size where the trailing control bytes are all
          .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
          .                           // to the group size (since tables are power-of-two sized).
     19,188 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
     20,022 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
     29,616 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
          .                       }
          .                   }
          .               }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          .                   // We don't have an item count, so just guess based on the range size.
          .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
          .                           }
          .                       } else {
          .                           // We must have already iterated past the removed item.
          .                       }
          .                   }
          .               }
          .           
          .               unsafe fn drop_elements(&mut self) {
      7,640 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
          .                       for item in self {
          .                           item.drop();
          .                       }
          .                   }
          .               }
          .           }
          .           
          .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
          .                   }
          .               }
          .           }
          .           
          .           impl<T> Iterator for RawIter<T> {
          .               type Item = Bucket<T>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
    116,761 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
    243,934 ( 0.00%)          if let Some(b) = self.iter.next() {
  2,016,014 ( 0.02%)              self.items -= 1;
          .                       Some(b)
          .                   } else {
          .                       // We don't check against items == 0 here to allow the
          .                       // compiler to optimize away the item count entirely if the
          .                       // iterator length is never queried.
          .                       debug_assert_eq!(self.items, 0);
          .                       None
          .                   }
    233,522 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          .                   (self.items, Some(self.items))
          .               }
          .           }
          .           
          .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           #[cfg(feature = "nightly")]
          .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
      5,752 ( 0.00%)      fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements
          .                       self.iter.drop_elements();
          .           
          .                       // Free the table
     35,219 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
          .                           self.alloc.deallocate(ptr, layout);
          .                       }
          .                   }
      1,046 ( 0.00%)      }
          .           }
          .           #[cfg(not(feature = "nightly"))]
          .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements
          .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
          .                   }
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
          .               type Item = T;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
      2,864 ( 0.00%)      fn next(&mut self) -> Option<T> {
      1,299 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
      6,928 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          6 ( 0.00%)          self.iter.size_hint()
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
          .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
          .           
          .           /// Iterator which consumes elements without freeing the table storage.
          .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
          .           where
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
     14,432 ( 0.00%)      fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements. Note that this may panic.
          .                       self.iter.drop_elements();
          .           
          .                       // Reset the contents of the table now that all elements have been
          .                       // dropped.
          .                       self.table.clear_no_drop();
          .           
          .                       // Move the now empty table back to its original location.
      1,804 ( 0.00%)              self.orig_table
          .                           .as_ptr()
          .                           .copy_from_nonoverlapping(&*self.table, 1);
          .                   }
     14,432 ( 0.00%)      }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
          .               type Item = T;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn next(&mut self) -> Option<T> {
          .                   unsafe {
-- line 2289 ----------------------------------------

 45,722,707 ( 0.40%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 121 ----------------------------------------
        .           #[derive(Debug)]
        .           pub enum ProcessResult<O, E> {
        .               Unchanged,
        .               Changed(Vec<O>),
        .               Error(E),
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
  160,549 ( 0.00%)  struct ObligationTreeId(usize);
        .           
        .           type ObligationTreeIdGenerator =
        .               std::iter::Map<std::ops::RangeFrom<usize>, fn(usize) -> ObligationTreeId>;
        .           
        .           pub struct ObligationForest<O: ForestObligation> {
        .               /// The list of obligations. In between calls to `process_obligations`,
        .               /// this list only contains nodes in the `Pending` or `Waiting` state.
        .               ///
-- line 137 ----------------------------------------
-- line 181 ----------------------------------------
        .               has_parent: bool,
        .           
        .               /// Identifier of the obligation tree to which this node belongs.
        .               obligation_tree_id: ObligationTreeId,
        .           }
        .           
        .           impl<O> Node<O> {
        .               fn new(parent: Option<usize>, obligation: O, obligation_tree_id: ObligationTreeId) -> Node<O> {
2,189,008 ( 0.02%)          Node {
        .                       obligation,
        .                       state: Cell::new(NodeState::Pending),
  307,258 ( 0.00%)              dependents: if let Some(parent_index) = parent { vec![parent_index] } else { vec![] },
        .                       has_parent: parent.is_some(),
        .                       obligation_tree_id,
        .                   }
        .               }
        .           }
        .           
        .           /// The state of one node in some tree within the forest. This represents the
        .           /// current state of processing for the obligation (of type `O`) associated
-- line 200 ----------------------------------------
-- line 223 ----------------------------------------
        .           ///  |     compress()
        .           ///  v
        .           /// (Removed)
        .           /// ```
        .           /// The `Error` state can be introduced in several places, via `error_at()`.
        .           ///
        .           /// Outside of `ObligationForest` methods, nodes should be either `Pending` or
        .           /// `Waiting`.
4,886,690 ( 0.04%)  #[derive(Debug, Copy, Clone, PartialEq, Eq)]
        .           enum NodeState {
        .               /// This obligation has not yet been selected successfully. Cannot have
        .               /// subobligations.
        .               Pending,
        .           
        .               /// This obligation was selected successfully, but may or may not have
        .               /// subobligations.
        .               Success,
-- line 239 ----------------------------------------
-- line 279 ----------------------------------------
        .               pub stalled: bool,
        .           }
        .           
        .           impl<O, E> OutcomeTrait for Outcome<O, E> {
        .               type Error = Error<O, E>;
        .               type Obligation = O;
        .           
        .               fn new() -> Self {
  310,636 ( 0.00%)          Self { stalled: true, errors: vec![] }
        .               }
        .           
        .               fn mark_not_stalled(&mut self) {
  136,577 ( 0.00%)          self.stalled = false;
        .               }
        .           
        .               fn is_stalled(&self) -> bool {
  114,852 ( 0.00%)          self.stalled
        .               }
        .           
        .               fn record_completed(&mut self, _outcome: &Self::Obligation) {
        .                   // do nothing
        .               }
        .           
        .               fn record_error(&mut self, error: Self::Error) {
    4,000 ( 0.00%)          self.errors.push(error)
        .               }
        .           }
        .           
        .           #[derive(Debug, PartialEq, Eq)]
        .           pub struct Error<O, E> {
        .               pub error: E,
        .               pub backtrace: Vec<O>,
        .           }
        .           
        .           impl<O: ForestObligation> ObligationForest<O> {
   19,761 ( 0.00%)      pub fn new() -> ObligationForest<O> {
  237,132 ( 0.00%)          ObligationForest {
        .                       nodes: vec![],
        .                       done_cache: Default::default(),
        .                       active_cache: Default::default(),
        .                       reused_node_vec: vec![],
        .                       obligation_tree_id_generator: (0..).map(ObligationTreeId),
        .                       error_cache: Default::default(),
        .                   }
   19,761 ( 0.00%)      }
        .           
        .               /// Returns the total number of nodes in the forest that have not
        .               /// yet been fully resolved.
        .               pub fn len(&self) -> usize {
        .                   self.nodes.len()
        .               }
        .           
        .               /// Registers an obligation.
        .               pub fn register_obligation(&mut self, obligation: O) {
        .                   // Ignore errors here - there is no guarantee of success.
1,250,873 ( 0.01%)          let _ = self.register_obligation_at(obligation, None);
        .               }
        .           
        .               // Returns Err(()) if we already know this obligation failed.
1,934,823 ( 0.02%)      fn register_obligation_at(&mut self, obligation: O, parent: Option<usize>) -> Result<(), ()> {
  351,786 ( 0.00%)          let cache_key = obligation.as_cache_key();
  351,786 ( 0.00%)          if self.done_cache.contains(&cache_key) {
        .                       debug!("register_obligation_at: ignoring already done obligation: {:?}", obligation);
        .                       return Ok(());
        .                   }
        .           
  863,022 ( 0.01%)          match self.active_cache.entry(cache_key) {
        .                       Entry::Occupied(o) => {
   14,048 ( 0.00%)                  let node = &mut self.nodes[*o.get()];
   14,048 ( 0.00%)                  if let Some(parent_index) = parent {
        .                               // If the node is already in `active_cache`, it has already
        .                               // had its chance to be marked with a parent. So if it's
        .                               // not already present, just dump `parent` into the
        .                               // dependents as a non-parent.
   14,673 ( 0.00%)                      if !node.dependents.contains(&parent_index) {
        .                                   node.dependents.push(parent_index);
        .                               }
        .                           }
   21,072 ( 0.00%)                  if let NodeState::Error = node.state.get() { Err(()) } else { Ok(()) }
        .                       }
  410,439 ( 0.00%)              Entry::Vacant(v) => {
  820,878 ( 0.01%)                  let obligation_tree_id = match parent {
  113,630 ( 0.00%)                      Some(parent_index) => self.nodes[parent_index].obligation_tree_id,
        .                               None => self.obligation_tree_id_generator.next().unwrap(),
        .                           };
        .           
        .                           let already_failed = parent.is_some()
        .                               && self
        .                                   .error_cache
        .                                   .get(&obligation_tree_id)
        .                                   .map_or(false, |errors| errors.contains(v.key()));
        .           
        .                           if already_failed {
        .                               Err(())
        .                           } else {
  136,813 ( 0.00%)                      let new_index = self.nodes.len();
        .                               v.insert(new_index);
        .                               self.nodes.push(Node::new(parent, obligation, obligation_tree_id));
        .                               Ok(())
        .                           }
        .                       }
        .                   }
1,583,037 ( 0.01%)      }
        .           
        .               /// Converts all remaining obligations to the given error.
  213,360 ( 0.00%)      pub fn to_errors<E: Clone>(&mut self, error: E) -> Vec<Error<O, E>> {
        .                   let errors = self
        .                       .nodes
        .                       .iter()
        .                       .enumerate()
        .                       .filter(|(_index, node)| node.state.get() == NodeState::Pending)
        .                       .map(|(index, _node)| Error { error: error.clone(), backtrace: self.error_at(index) })
        .                       .collect();
        .           
   60,960 ( 0.00%)          self.compress(|_| assert!(false));
        .                   errors
  182,880 ( 0.00%)      }
        .           
        .               /// Returns the set of obligations that are in a pending state.
        .               pub fn map_pending_obligations<P, F>(&self, f: F) -> Vec<P>
        .               where
        .                   F: Fn(&O) -> P,
        .               {
       77 ( 0.00%)          self.nodes
        .                       .iter()
        .                       .filter(|node| node.state.get() == NodeState::Pending)
        .                       .map(|node| f(&node.obligation))
        .                       .collect()
        .               }
        .           
    5,621 ( 0.00%)      fn insert_into_error_cache(&mut self, index: usize) {
        .                   let node = &self.nodes[index];
      803 ( 0.00%)          self.error_cache
    2,409 ( 0.00%)              .entry(node.obligation_tree_id)
        .                       .or_default()
        .                       .insert(node.obligation.as_cache_key());
    6,424 ( 0.00%)      }
        .           
        .               /// Performs a pass through the obligation list. This must
        .               /// be called in a loop until `outcome.stalled` is false.
        .               ///
        .               /// This _cannot_ be unrolled (presently, at least).
        .               #[inline(never)]
1,397,862 ( 0.01%)      pub fn process_obligations<P, OUT>(&mut self, processor: &mut P) -> OUT
        .               where
        .                   P: ObligationProcessor<Obligation = O>,
        .                   OUT: OutcomeTrait<Obligation = O, Error = Error<O, P::Error>>,
        .               {
        .                   let mut outcome = OUT::new();
        .           
        .                   // Note that the loop body can append new nodes, and those new nodes
        .                   // will then be processed by subsequent iterations of the loop.
        .                   //
        .                   // We can't use an iterator for the loop because `self.nodes` is
        .                   // appended to and the borrow checker would complain. We also can't use
        .                   // `for index in 0..self.nodes.len() { ... }` because the range would
        .                   // be computed with the initial length, and we would miss the appended
        .                   // nodes. Therefore we use a `while` loop.
        .                   let mut index = 0;
2,363,847 ( 0.02%)          while let Some(node) = self.nodes.get_mut(index) {
        .                       // `processor.process_obligation` can modify the predicate within
        .                       // `node.obligation`, and that predicate is the key used for
        .                       // `self.active_cache`. This means that `self.active_cache` can get
        .                       // out of sync with `nodes`. It's not very common, but it does
        .                       // happen, and code in `compress` has to allow for it.
4,417,058 ( 0.04%)              if node.state.get() != NodeState::Pending {
  281,601 ( 0.00%)                  index += 1;
        .                           continue;
        .                       }
        .           
  958,435 ( 0.01%)              match processor.process_obligation(&mut node.obligation) {
        .                           ProcessResult::Unchanged => {
        .                               // No change in state.
        .                           }
  545,308 ( 0.00%)                  ProcessResult::Changed(children) => {
        .                               // We are not (yet) stalled.
        .                               outcome.mark_not_stalled();
        .                               node.state.set(NodeState::Success);
        .           
  704,652 ( 0.01%)                      for child in children {
1,354,424 ( 0.01%)                          let st = self.register_obligation_at(child, Some(index));
  159,344 ( 0.00%)                          if let Err(()) = st {
        .                                       // Error already reported - propagate it
        .                                       // to our node.
        .                                       self.error_at(index);
        .                                   }
        .                               }
        .                           }
        .                           ProcessResult::Error(err) => {
        .                               outcome.mark_not_stalled();
    8,250 ( 0.00%)                      outcome.record_error(Error { error: err, backtrace: self.error_at(index) });
        .                           }
        .                       }
3,853,856 ( 0.03%)              index += 1;
        .                   }
        .           
        .                   // There's no need to perform marking, cycle processing and compression when nothing
        .                   // changed.
  114,852 ( 0.00%)          if !outcome.is_stalled() {
        .                       self.mark_successes();
        .                       self.process_cycles(processor);
   82,440 ( 0.00%)              self.compress(|obl| outcome.record_completed(obl));
        .                   }
        .           
        .                   outcome
1,397,862 ( 0.01%)      }
        .           
        .               /// Returns a vector of obligations for `p` and all of its
        .               /// ancestors, putting them into the error state in the process.
    1,750 ( 0.00%)      fn error_at(&self, mut index: usize) -> Vec<O> {
        .                   let mut error_stack: Vec<usize> = vec![];
        .                   let mut trace = vec![];
        .           
        .                   loop {
        .                       let node = &self.nodes[index];
      803 ( 0.00%)              node.state.set(NodeState::Error);
        .                       trace.push(node.obligation.clone());
    1,606 ( 0.00%)              if node.has_parent {
        .                           // The first dependent is the parent, which is treated
        .                           // specially.
        .                           error_stack.extend(node.dependents.iter().skip(1));
      553 ( 0.00%)                  index = node.dependents[0];
        .                       } else {
        .                           // No parent; treat all dependents non-specially.
        .                           error_stack.extend(node.dependents.iter());
        .                           break;
        .                       }
        .                   }
        .           
        .                   while let Some(index) = error_stack.pop() {
-- line 508 ----------------------------------------
-- line 509 ----------------------------------------
        .                       let node = &self.nodes[index];
        .                       if node.state.get() != NodeState::Error {
        .                           node.state.set(NodeState::Error);
        .                           error_stack.extend(node.dependents.iter());
        .                       }
        .                   }
        .           
        .                   trace
    2,000 ( 0.00%)      }
        .           
        .               /// Mark all `Waiting` nodes as `Success`, except those that depend on a
        .               /// pending node.
        .               fn mark_successes(&self) {
        .                   // Convert all `Waiting` nodes to `Success`.
        .                   for node in &self.nodes {
1,319,005 ( 0.01%)              if node.state.get() == NodeState::Waiting {
        .                           node.state.set(NodeState::Success);
        .                       }
        .                   }
        .           
        .                   // Convert `Success` nodes that depend on a pending node back to
        .                   // `Waiting`.
        .                   for node in &self.nodes {
  789,650 ( 0.01%)              if node.state.get() == NodeState::Pending {
        .                           // This call site is hot.
        .                           self.inlined_mark_dependents_as_waiting(node);
        .                       }
        .                   }
        .               }
        .           
        .               // This always-inlined function is for the hot call site.
        .               #[inline(always)]
        .               fn inlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
  112,732 ( 0.00%)          for &index in node.dependents.iter() {
        .                       let node = &self.nodes[index];
  112,732 ( 0.00%)              let state = node.state.get();
  112,732 ( 0.00%)              if state == NodeState::Success {
        .                           // This call site is cold.
  272,994 ( 0.00%)                  self.uninlined_mark_dependents_as_waiting(node);
        .                       } else {
        .                           debug_assert!(state == NodeState::Waiting || state == NodeState::Error)
        .                       }
        .                   }
        .               }
        .           
        .               // This never-inlined function is for the cold call site.
        .               #[inline(never)]
  636,986 ( 0.01%)      fn uninlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
        .                   // Mark node Waiting in the cold uninlined code instead of the hot inlined
        .                   node.state.set(NodeState::Waiting);
        .                   self.inlined_mark_dependents_as_waiting(node)
  727,984 ( 0.01%)      }
        .           
        .               /// Report cycles between all `Success` nodes, and convert all `Success`
        .               /// nodes to `Done`. This must be called after `mark_successes`.
        .               fn process_cycles<P>(&mut self, processor: &mut P)
        .               where
        .                   P: ObligationProcessor<Obligation = O>,
        .               {
   41,220 ( 0.00%)          let mut stack = std::mem::take(&mut self.reused_node_vec);
        .                   for (index, node) in self.nodes.iter().enumerate() {
        .                       // For some benchmarks this state test is extremely hot. It's a win
        .                       // to handle the no-op cases immediately to avoid the cost of the
        .                       // function call.
  789,650 ( 0.01%)              if node.state.get() == NodeState::Success {
  671,550 ( 0.01%)                  self.find_cycles_from_node(&mut stack, processor, index);
        .                       }
        .                   }
        .           
        .                   debug_assert!(stack.is_empty());
  329,760 ( 0.00%)          self.reused_node_vec = stack;
        .               }
        .           
1,752,282 ( 0.02%)      fn find_cycles_from_node<P>(&self, stack: &mut Vec<usize>, processor: &mut P, index: usize)
        .               where
        .                   P: ObligationProcessor<Obligation = O>,
        .               {
        .                   let node = &self.nodes[index];
  389,396 ( 0.00%)          if node.state.get() == NodeState::Success {
    2,932 ( 0.00%)              match stack.iter().rposition(|&n| n == index) {
        .                           None => {
        .                               stack.push(index);
   60,388 ( 0.00%)                      for &dep_index in node.dependents.iter() {
  241,552 ( 0.00%)                          self.find_cycles_from_node(stack, processor, dep_index);
        .                               }
        .                               stack.pop();
        .                               node.state.set(NodeState::Done);
        .                           }
        .                           Some(rpos) => {
        .                               // Cycle detected.
        .                               processor.process_backedge(
        .                                   stack[rpos..].iter().map(|&i| &self.nodes[i].obligation),
        .                                   PhantomData,
        .                               );
        .                           }
        .                       }
        .                   }
1,557,584 ( 0.01%)      }
        .           
        .               /// Compresses the vector, removing all popped nodes. This adjusts the
        .               /// indices and hence invalidates any outstanding indices. `process_cycles`
        .               /// must be run beforehand to remove any cycles on `Success` nodes.
        .               #[inline(never)]
  543,120 ( 0.00%)      fn compress(&mut self, mut outcome_cb: impl FnMut(&O)) {
   71,700 ( 0.00%)          let orig_nodes_len = self.nodes.len();
        .                   let mut node_rewrites: Vec<_> = std::mem::take(&mut self.reused_node_vec);
        .                   debug_assert!(node_rewrites.is_empty());
        .                   node_rewrites.extend(0..orig_nodes_len);
        .                   let mut dead_nodes = 0;
        .           
        .                   // Move removable nodes to the end, preserving the order of the
        .                   // remaining nodes.
        .                   //
        .                   // LOOP INVARIANT:
        .                   //     self.nodes[0..index - dead_nodes] are the first remaining nodes
        .                   //     self.nodes[index - dead_nodes..index] are all dead
        .                   //     self.nodes[index..] are unchanged
        .                   for index in 0..orig_nodes_len {
        .                       let node = &self.nodes[index];
4,113,130 ( 0.04%)              match node.state.get() {
        .                           NodeState::Pending | NodeState::Waiting => {
1,306,146 ( 0.01%)                      if dead_nodes > 0 {
  194,742 ( 0.00%)                          self.nodes.swap(index, index - dead_nodes);
  324,570 ( 0.00%)                          node_rewrites[index] -= dead_nodes;
        .                               }
        .                           }
        .                           NodeState::Done => {
        .                               // This lookup can fail because the contents of
        .                               // `self.active_cache` are not guaranteed to match those of
        .                               // `self.nodes`. See the comment in `process_obligation`
        .                               // for more details.
  464,932 ( 0.00%)                      if let Some((predicate, _)) =
  407,322 ( 0.00%)                          self.active_cache.remove_entry(&node.obligation.as_cache_key())
        .                               {
        .                                   self.done_cache.insert(predicate);
        .                               } else {
        .                                   self.done_cache.insert(node.obligation.as_cache_key().clone());
        .                               }
        .                               // Extract the success stories.
        .                               outcome_cb(&node.obligation);
  271,548 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
  271,548 ( 0.00%)                      dead_nodes += 1;
        .                           }
        .                           NodeState::Error => {
        .                               // We *intentionally* remove the node from the cache at this point. Otherwise
        .                               // tests must come up with a different type on every type error they
        .                               // check against.
    2,409 ( 0.00%)                      self.active_cache.remove(&node.obligation.as_cache_key());
    1,606 ( 0.00%)                      self.insert_into_error_cache(index);
    1,606 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
    1,606 ( 0.00%)                      dead_nodes += 1;
        .                           }
        .                           NodeState::Success => unreachable!(),
        .                       }
        .                   }
        .           
        .                   if dead_nodes > 0 {
        .                       // Remove the dead nodes and rewrite indices.
   64,800 ( 0.00%)              self.nodes.truncate(orig_nodes_len - dead_nodes);
   32,400 ( 0.00%)              self.apply_rewrites(&node_rewrites);
        .                   }
        .           
        .                   node_rewrites.truncate(0);
  286,800 ( 0.00%)          self.reused_node_vec = node_rewrites;
  573,600 ( 0.01%)      }
        .           
        .               #[inline(never)]
  291,600 ( 0.00%)      fn apply_rewrites(&mut self, node_rewrites: &[usize]) {
        .                   let orig_nodes_len = node_rewrites.len();
        .           
        .                   for node in &mut self.nodes {
        .                       let mut i = 0;
  527,277 ( 0.00%)              while let Some(dependent) = node.dependents.get_mut(i) {
  309,648 ( 0.00%)                  let new_index = node_rewrites[*dependent];
  154,824 ( 0.00%)                  if new_index >= orig_nodes_len {
        .                               node.dependents.swap_remove(i);
        .                               if i == 0 && node.has_parent {
        .                                   // We just removed the parent.
        .                                   node.has_parent = false;
        .                               }
        .                           } else {
   77,412 ( 0.00%)                      *dependent = new_index;
  154,824 ( 0.00%)                      i += 1;
        .                           }
        .                       }
        .                   }
        .           
        .                   // This updating of `self.active_cache` is necessary because the
        .                   // removal of nodes within `compress` can fail. See above.
        .                   self.active_cache.retain(|_predicate, index| {
2,112,116 ( 0.02%)              let new_index = node_rewrites[*index];
1,056,058 ( 0.01%)              if new_index >= orig_nodes_len {
        .                           false
        .                       } else {
  449,865 ( 0.00%)                  *index = new_index;
        .                           true
        .                       }
        .                   });
  259,200 ( 0.00%)      }
        .           }

7,138,252 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir                  

-- line 118 ----------------------------------------
         .               stability: InternedSet<'tcx, attr::Stability>,
         .           
         .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
         .               const_stability: InternedSet<'tcx, attr::ConstStability>,
         .           }
         .           
         .           impl<'tcx> CtxtInterners<'tcx> {
         .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
        17 ( 0.00%)          CtxtInterners {
         .                       arena,
         .                       type_: Default::default(),
         .                       type_list: Default::default(),
         .                       substs: Default::default(),
         .                       region: Default::default(),
         .                       poly_existential_predicates: Default::default(),
         .                       canonical_var_infos: Default::default(),
         .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
         .                       stability: Default::default(),
         .                       const_stability: Default::default(),
         .                   }
         .               }
         .           
         .               /// Interns a type.
         .               #[allow(rustc::usage_of_ty_tykind)]
         .               #[inline(never)]
 7,207,344 ( 0.06%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
         .                   self.type_
 4,504,590 ( 0.04%)              .intern(kind, |kind| {
   397,076 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
         .           
         .                           let ty_struct = TyS {
   794,152 ( 0.01%)                      kind,
         .                               flags: flags.flags,
         .                               outer_exclusive_binder: flags.outer_exclusive_binder,
         .                           };
         .           
         .                           Interned(self.arena.alloc(ty_struct))
         .                       })
         .                       .0
 8,108,262 ( 0.07%)      }
         .           
         .               #[inline(never)]
 3,597,656 ( 0.03%)      fn intern_predicate(
         .                   &self,
         .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
         .               ) -> &'tcx PredicateInner<'tcx> {
         .                   self.predicate
 3,147,949 ( 0.03%)              .intern(kind, |kind| {
 1,238,922 ( 0.01%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
         .           
         .                           let predicate_struct = PredicateInner {
         .                               kind,
         .                               flags: flags.flags,
         .                               outer_exclusive_binder: flags.outer_exclusive_binder,
         .                           };
         .           
         .                           Interned(self.arena.alloc(predicate_struct))
         .                       })
         .                       .0
 4,047,363 ( 0.04%)      }
         .           }
         .           
         .           pub struct CommonTypes<'tcx> {
         .               pub unit: Ty<'tcx>,
         .               pub bool: Ty<'tcx>,
         .               pub char: Ty<'tcx>,
         .               pub isize: Ty<'tcx>,
         .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
         .           /// safely used as a key in the maps of a TypeckResults. For that to be
         .           /// the case, the HirId must have the same `owner` as all the other IDs in
         .           /// this table (signified by `hir_owner`). Otherwise the HirId
         .           /// would be in a different frame of reference and using its `local_id`
         .           /// would result in lookup errors, or worse, in silently wrong data being
         .           /// stored/returned.
         .           #[inline]
         .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
   946,437 ( 0.01%)      if hir_id.owner != hir_owner {
         .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
         .               }
         .           }
         .           
         .           #[cold]
         .           #[inline(never)]
         .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
         .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
         .           }
         .           
         .           impl<'a, V> LocalTableInContext<'a, V> {
         .               pub fn contains_key(&self, id: hir::HirId) -> bool {
         .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.data.contains_key(&id.local_id)
         .               }
         .           
   705,795 ( 0.01%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
   141,467 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
   141,467 ( 0.00%)          self.data.get(&id.local_id)
   565,108 ( 0.00%)      }
         .           
         .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
         .                   self.data.iter()
         .               }
         .           }
         .           
         .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
         .               type Output = V;
         .           
     4,680 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
         1 ( 0.00%)          self.get(key).expect("LocalTableInContext: key not found")
     3,120 ( 0.00%)      }
         .           }
         .           
         .           pub struct LocalTableInContextMut<'a, V> {
         .               hir_owner: LocalDefId,
         .               data: &'a mut ItemLocalMap<V>,
         .           }
         .           
         .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
         .               pub treat_byte_string_as_slice: ItemLocalSet,
         .           
         .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
         .               /// on closure size.
         .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
         .           }
         .           
         .           impl<'tcx> TypeckResults<'tcx> {
    19,596 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
   231,886 ( 0.00%)          TypeckResults {
         .                       hir_owner,
         .                       type_dependent_defs: Default::default(),
         .                       field_indices: Default::default(),
         .                       user_provided_types: Default::default(),
         .                       user_provided_sigs: Default::default(),
         .                       node_types: Default::default(),
         .                       node_substs: Default::default(),
         .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
         .                       tainted_by_errors: None,
         .                       concrete_opaque_types: Default::default(),
         .                       closure_min_captures: Default::default(),
         .                       closure_fake_reads: Default::default(),
         .                       generator_interior_types: ty::Binder::dummy(Default::default()),
         .                       treat_byte_string_as_slice: Default::default(),
         .                       closure_size_eval: Default::default(),
         .                   }
    19,596 ( 0.00%)      }
         .           
         .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
    91,977 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
    61,318 ( 0.00%)          match *qpath {
   161,496 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
         .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
         .                           .type_dependent_def(id)
    22,458 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
         .                   }
   153,295 ( 0.00%)      }
         .           
       600 ( 0.00%)      pub fn type_dependent_defs(
         .                   &self,
         .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
    20,430 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
       600 ( 0.00%)      }
         .           
     6,870 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
    13,917 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
    13,740 ( 0.00%)      }
         .           
    13,216 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
         .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
    13,216 ( 0.00%)      }
         .           
    80,615 ( 0.00%)      pub fn type_dependent_defs_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
    80,615 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
    80,615 ( 0.00%)      }
         .           
         .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
     5,269 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
     1,212 ( 0.00%)      }
         .           
         .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
     7,524 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
     3,762 ( 0.00%)      }
         .           
         .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
    12,832 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
     6,416 ( 0.00%)      }
         .           
         .               pub fn user_provided_types_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
     1,492 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
       746 ( 0.00%)      }
         .           
         .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
   158,470 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
    79,235 ( 0.00%)      }
         .           
         .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
   218,852 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
   109,426 ( 0.00%)      }
         .           
 1,027,278 ( 0.01%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
   171,213 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
         .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
         .                   })
   856,065 ( 0.01%)      }
         .           
   225,979 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
   225,979 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.node_types.get(&id.local_id).cloned()
   451,958 ( 0.00%)      }
         .           
         .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
    61,340 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
    30,670 ( 0.00%)      }
         .           
    65,290 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
    65,290 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
   130,580 ( 0.00%)      }
         .           
    50,077 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
    50,077 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.node_substs.get(&id.local_id).cloned()
   100,154 ( 0.00%)      }
         .           
         .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
         .               // doesn't provide type parameter substitutions.
         .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
     7,632 ( 0.00%)          self.node_type(pat.hir_id)
         .               }
         .           
         .               // Returns the type of an expression as a monotype.
         .               //
         .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
         .               // some cases, we insert `Adjustment` annotations such as auto-deref or
         .               // auto-ref.  The type returned by this function does not consider such
         .               // adjustments.  See `expr_ty_adjusted()` instead.
         .               //
         .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
         .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
         .               // instead of "fn(ty) -> T with T = isize".
         .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
   199,321 ( 0.00%)          self.node_type(expr.hir_id)
         .               }
         .           
         .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
   221,582 ( 0.00%)          self.node_type_opt(expr.hir_id)
         .               }
         .           
         .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
    97,544 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
    48,772 ( 0.00%)      }
         .           
         .               pub fn adjustments_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   148,294 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
    74,147 ( 0.00%)      }
         .           
   100,837 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
   201,674 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
         .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
   201,674 ( 0.00%)      }
         .           
         .               /// Returns the type of `expr`, considering any `Adjustment`
         .               /// entry recorded for that expression.
     8,020 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
     1,604 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
     4,276 ( 0.00%)      }
         .           
    40,960 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
     8,192 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
    21,992 ( 0.00%)      }
         .           
    19,830 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
         .                   // Only paths and method calls/overloaded operators have
         .                   // entries in type_dependent_defs, ignore the former here.
    39,660 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
         .                       return false;
         .                   }
         .           
    53,948 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
    39,660 ( 0.00%)      }
         .           
    17,130 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
         .                   self.pat_binding_modes().get(id).copied().or_else(|| {
         .                       s.delay_span_bug(sp, "missing binding mode");
         .                       None
         .                   })
    22,840 ( 0.00%)      }
         .           
         .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
    14,378 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
     4,334 ( 0.00%)      }
         .           
         .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
     7,508 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
     3,754 ( 0.00%)      }
         .           
         .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    21,810 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
    10,905 ( 0.00%)      }
         .           
         .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
     6,654 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
     3,327 ( 0.00%)      }
         .           
         .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
         .               /// by the closure.
     5,448 ( 0.00%)      pub fn closure_min_captures_flattened(
         .                   &self,
         .                   closure_def_id: DefId,
         .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
         .                   self.closure_min_captures
         .                       .get(&closure_def_id)
         .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
         .                       .into_iter()
         .                       .flatten()
     6,810 ( 0.00%)      }
         .           
         .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
     1,748 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
       874 ( 0.00%)      }
         .           
         .               pub fn closure_kind_origins_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
         .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
         .               }
         .           
         .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
     4,868 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
     2,434 ( 0.00%)      }
         .           
         .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
     3,120 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
     1,560 ( 0.00%)      }
         .           
         .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
     1,750 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
       875 ( 0.00%)      }
         .           
         .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
         4 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
         2 ( 0.00%)      }
         .           
     1,704 ( 0.00%)      pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
       568 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
         .                   self.coercion_casts.contains(&hir_id.local_id)
     1,136 ( 0.00%)      }
         .           
         .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
         .                   self.coercion_casts.insert(id);
         .               }
         .           
         .               pub fn coercion_casts(&self) -> &ItemLocalSet {
       874 ( 0.00%)          &self.coercion_casts
       874 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
         .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
         .                   let ty::TypeckResults {
         .                       hir_owner,
         .                       ref type_dependent_defs,
         .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
         .                   const START_INDEX = 0,
         .               }
         .           }
         .           
         .           /// Mapping of type annotation indices to canonical user type annotations.
         .           pub type CanonicalUserTypeAnnotations<'tcx> =
         .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
         .           
       492 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
         .           pub struct CanonicalUserTypeAnnotation<'tcx> {
         .               pub user_ty: CanonicalUserType<'tcx>,
         .               pub span: Span,
       403 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
         .           }
         .           
         .           /// Canonicalized user type annotation.
         .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
         .           
         .           impl<'tcx> CanonicalUserType<'tcx> {
         .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
         .               /// i.e., each thing is mapped to a canonical variable with the same index.
     1,607 ( 0.00%)      pub fn is_identity(&self) -> bool {
     3,214 ( 0.00%)          match self.value {
         .                       UserType::Ty(_) => false,
         .                       UserType::TypeOf(_, user_substs) => {
     1,607 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
         .                               return false;
         .                           }
         .           
         .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
         .                               match kind.unpack() {
     3,738 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
         .                                       ty::Bound(debruijn, b) => {
         .                                           // We only allow a `ty::INNERMOST` index in substitutions.
     1,849 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
         .                                           cvar == b.var
         .                                       }
         .                                       _ => false,
         .                                   },
         .           
       126 ( 0.00%)                          GenericArgKind::Lifetime(r) => match r {
         .                                       ty::ReLateBound(debruijn, br) => {
         .                                           // We only allow a `ty::INNERMOST` index in substitutions.
         .                                           assert_eq!(*debruijn, ty::INNERMOST);
         .                                           cvar == br.var
         .                                       }
         .                                       _ => false,
         .                                   },
         .           
-- line 867 ----------------------------------------
-- line 872 ----------------------------------------
         .                                           cvar == b
         .                                       }
         .                                       _ => false,
         .                                   },
         .                               }
         .                           })
         .                       }
         .                   }
     3,214 ( 0.00%)      }
         .           }
         .           
         .           /// A user-given type annotation attached to a constant. These arise
         .           /// from constants that are named via paths, like `Foo::<A>::new` and
         .           /// so forth.
     2,418 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
    18,597 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
         .           pub enum UserType<'tcx> {
         .               Ty(Ty<'tcx>),
         .           
         .               /// The canonical type is the result of `type_of(def_id)` with the
         .               /// given substitutions applied.
         .               TypeOf(DefId, UserSubsts<'tcx>),
         .           }
         .           
         .           impl<'tcx> CommonTypes<'tcx> {
         .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
       111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
         .           
         .                   CommonTypes {
         .                       unit: mk(Tuple(List::empty())),
         .                       bool: mk(Bool),
         .                       char: mk(Char),
         .                       never: mk(Never),
         .                       isize: mk(Int(ty::IntTy::Isize)),
         .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
         .           
         .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> CommonLifetimes<'tcx> {
         .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
        67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
         .           
         .                   CommonLifetimes {
         5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
         5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
         5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> CommonConsts<'tcx> {
         .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
         6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
         .           
         .                   CommonConsts {
         .                       unit: mk_const(ty::Const {
         .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
         .                           ty: types.unit,
         .                       }),
         .                   }
         .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
         .           
         .               /// Stores memory for globals (statics/consts).
         .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
         .           
         .               output_filenames: Arc<OutputFilenames>,
         .           }
         .           
         .           impl<'tcx> TyCtxt<'tcx> {
    41,080 ( 0.00%)      pub fn typeck_opt_const_arg(
         .                   self,
         .                   def: ty::WithOptConstParam<LocalDefId>,
         .               ) -> &'tcx TypeckResults<'tcx> {
    16,432 ( 0.00%)          if let Some(param_did) = def.const_param_did {
         .                       self.typeck_const_arg((def.did, param_did))
         .                   } else {
         .                       self.typeck(def.did)
         .                   }
    32,864 ( 0.00%)      }
         .           
     2,886 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
       962 ( 0.00%)          self.arena.alloc(Steal::new(thir))
     3,848 ( 0.00%)      }
         .           
    19,235 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
     3,847 ( 0.00%)          self.arena.alloc(Steal::new(mir))
    26,929 ( 0.00%)      }
         .           
     3,848 ( 0.00%)      pub fn alloc_steal_promoted(
         .                   self,
         .                   promoted: IndexVec<Promoted, Body<'tcx>>,
         .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
       962 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
     4,810 ( 0.00%)      }
         .           
     1,638 ( 0.00%)      pub fn alloc_adt_def(
         .                   self,
         .                   did: DefId,
         .                   kind: AdtKind,
         .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
         .                   repr: ReprOptions,
         .               ) -> &'tcx ty::AdtDef {
     2,912 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
       728 ( 0.00%)      }
         .           
         .               /// Allocates a read-only byte or string literal for `mir::interpret`.
        75 ( 0.00%)      pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
         .                   // Create an allocation that just contains these bytes.
        15 ( 0.00%)          let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
       195 ( 0.00%)          let alloc = self.intern_const_alloc(alloc);
         .                   self.create_memory_alloc(alloc)
        75 ( 0.00%)      }
         .           
         .               /// Returns a range of the start/end indices specified with the
         .               /// `rustc_layout_scalar_valid_range` attribute.
         .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
    18,528 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
     9,264 ( 0.00%)          let attrs = self.get_attrs(def_id);
    39,372 ( 0.00%)          let get = |name| {
     9,264 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
         .                           Some(attr) => attr,
         .                           None => return Bound::Unbounded,
         .                       };
         .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
       360 ( 0.00%)              if let Some(
         .                           &[
         .                               ast::NestedMetaItem::Literal(ast::Lit {
       180 ( 0.00%)                          kind: ast::LitKind::Int(a, _), ..
         .                               }),
         .                           ],
        90 ( 0.00%)              ) = attr.meta_item_list().as_deref()
         .                       {
         .                           Bound::Included(a)
         .                       } else {
         .                           self.sess
         .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
         .                           Bound::Unbounded
         .                       }
    46,320 ( 0.00%)          };
    13,896 ( 0.00%)          (
    13,896 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
     6,948 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
         .                   )
    18,528 ( 0.00%)      }
         .           
         .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
         .                   value.lift_to_tcx(self)
         .               }
         .           
         .               /// Creates a type context and call the closure with a `TyCtxt` reference
         .               /// to the context. The closure enforces that the type context and any interned
         .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
         .               /// reference to the context, to allow formatting values that need it.
        23 ( 0.00%)      pub fn create_global_ctxt(
         .                   s: &'tcx Session,
         .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
         .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
         .                   resolutions: ty::ResolverOutputs,
         .                   krate: &'tcx hir::Crate<'tcx>,
         .                   dep_graph: DepGraph,
         .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
         .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
         .                   query_kinds: &'tcx [DepKindStruct],
         .                   crate_name: &str,
         .                   output_filenames: OutputFilenames,
         .               ) -> GlobalCtxt<'tcx> {
         1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
         .                       s.fatal(&err);
         .                   });
         .                   let interners = CtxtInterners::new(arena);
         .                   let common_types = CommonTypes::new(&interners);
         .                   let common_lifetimes = CommonLifetimes::new(&interners);
         .                   let common_consts = CommonConsts::new(&interners, &common_types);
         .           
       127 ( 0.00%)          GlobalCtxt {
         .                       sess: s,
         6 ( 0.00%)              lint_store,
         .                       arena,
         2 ( 0.00%)              interners,
         5 ( 0.00%)              dep_graph,
         4 ( 0.00%)              untracked_resolutions: resolutions,
         2 ( 0.00%)              prof: s.prof.clone(),
         .                       types: common_types,
         .                       lifetimes: common_lifetimes,
         .                       consts: common_consts,
         .                       untracked_crate: krate,
         .                       on_disk_cache,
         .                       queries,
         .                       query_caches: query::QueryCaches::default(),
         .                       query_kinds,
         .                       ty_rcache: Default::default(),
         .                       pred_rcache: Default::default(),
         .                       selection_cache: Default::default(),
         .                       evaluation_cache: Default::default(),
         1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
         .                       data_layout,
         .                       alloc_map: Lock::new(interpret::AllocMap::new()),
         .                       output_filenames: Arc::new(output_filenames),
         .                   }
         9 ( 0.00%)      }
         .           
         .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
         .                   &self.query_kinds[k as usize]
         .               }
         .           
         .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
         .               #[track_caller]
         .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
         .                   ty: Ty<'tcx>,
         .                   span: S,
         .                   msg: &str,
         .               ) -> &'tcx Const<'tcx> {
         .                   self.sess.delay_span_bug(span, msg);
         .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
         .               }
         .           
   267,036 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
    38,148 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
   271,262 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
   305,184 ( 0.00%)      }
         .           
         .               /// Obtain all lang items of this crate and all dependencies (recursively)
 2,802,226 ( 0.02%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
         .                   self.get_lang_items(())
 3,602,862 ( 0.03%)      }
         .           
         .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
         .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
       301 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
         .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
       344 ( 0.00%)      }
         .           
         .               /// Obtain the diagnostic item's name
    34,986 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
         .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
    39,984 ( 0.00%)      }
         .           
         .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
    41,237 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
         .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
    47,128 ( 0.00%)      }
         .           
    15,484 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
         .                   self.stability_index(())
    19,908 ( 0.00%)      }
         .           
   842,982 ( 0.01%)      pub fn features(self) -> &'tcx rustc_feature::Features {
         .                   self.features_query(())
   963,408 ( 0.01%)      }
         .           
    30,713 ( 0.00%)      pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
         .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
   217,401 ( 0.00%)          if let Some(id) = id.as_local() {
         .                       self.untracked_resolutions.definitions.def_key(id)
         .                   } else {
   195,687 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
         .                   }
    21,596 ( 0.00%)      }
         .           
         .               /// Converts a `DefId` into its fully expanded `DefPath` (every
         .               /// `DefId` is really just an interned `DefPath`).
         .               ///
         .               /// Note that if `id` is not local to this crate, the result will
         .               ///  be a non-local `DefPath`.
       166 ( 0.00%)      pub fn def_path(self, id: DefId) -> rustc_hir::definitions::DefPath {
         .                   // Accessing the DefPath is ok, since it is part of DefPathHash.
       249 ( 0.00%)          if let Some(id) = id.as_local() {
        57 ( 0.00%)              self.untracked_resolutions.definitions.def_path(id)
         .                   } else {
       320 ( 0.00%)              self.untracked_resolutions.cstore.def_path(id)
         .                   }
       249 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
         .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
    10,724 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
         .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
         .                   } else {
     4,918 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
         .                   if crate_num == LOCAL_CRATE {
         .                       self.sess.local_stable_crate_id()
         .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
         .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
         .                       self.def_path(def_id).to_string_no_crate_verbose()
         .                   )
         .               }
         .           
         .               /// Note that this is *untracked* and should only be used within the query
         .               /// system if the result is otherwise tracked through queries
         .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
    82,588 ( 0.00%)          &*self.untracked_resolutions.cstore
    41,294 ( 0.00%)      }
         .           
         .               /// Note that this is *untracked* and should only be used within the query
         .               /// system if the result is otherwise tracked through queries
         .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
         .                   &self.untracked_resolutions.definitions
         .               }
         .           
         .               #[inline(always)]
         .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
     4,313 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
    17,432 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
         .               }
         .           
         .               #[inline(always)]
         .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
         .                   let resolutions = &self.gcx.untracked_resolutions;
         .                   StableHashingContext::ignore_spans(
         .                       self.sess,
         .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
         .               /// If `true`, we should use the MIR-based borrowck, but also
         .               /// fall back on the AST borrowck if the MIR-based one errors.
         .               pub fn migrate_borrowck(self) -> bool {
         .                   self.borrowck_mode().migrate()
         .               }
         .           
         .               /// What mode(s) of borrowck should we run? AST? MIR? both?
         .               /// (Also considers the `#![feature(nll)]` setting.)
     1,748 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
         .                   // Here are the main constraints we need to deal with:
         .                   //
         .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
         .                   //    synonymous with no `-Z borrowck=...` flag at all.
         .                   //
         .                   // 2. We want to allow developers on the Nightly channel
         .                   //    to opt back into the "hard error" mode for NLL,
         .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
         .                   //   errors. (To simplify the code here, it now even overrides
         .                   //   a user's attempt to specify `-Z borrowck=compare`, which
         .                   //   we arguably do not need anymore and should remove.)
         .                   //
         .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
         .                   //
         .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
         .           
     2,622 ( 0.00%)          if self.features().nll {
         .                       return BorrowckMode::Mir;
         .                   }
         .           
       874 ( 0.00%)          self.sess.opts.borrowck_mode
     3,496 ( 0.00%)      }
         .           
         .               /// If `true`, we should use lazy normalization for constants, otherwise
         .               /// we still evaluate them eagerly.
         .               #[inline]
         .               pub fn lazy_normalization(self) -> bool {
       149 ( 0.00%)          let features = self.features();
         .                   // Note: We only use lazy normalization for generic const expressions.
       125 ( 0.00%)          features.generic_const_exprs
         .               }
         .           
         .               #[inline]
         .               pub fn local_crate_exports_generics(self) -> bool {
         .                   debug_assert!(self.sess.opts.share_generics());
         .           
     1,643 ( 0.00%)          self.sess.crate_types().iter().any(|crate_type| {
     2,743 ( 0.00%)              match crate_type {
         .                           CrateType::Executable
         .                           | CrateType::Staticlib
         .                           | CrateType::ProcMacro
         .                           | CrateType::Cdylib => false,
         .           
         .                           // FIXME rust-lang/rust#64319, rust-lang/rust#64872:
         .                           // We want to block export of generics from dylibs,
         .                           // but we must fix rust-lang/rust#65890 before we can
-- line 1450 ----------------------------------------
-- line 1540 ----------------------------------------
         .                       // FIXME(#42706) -- in some cases, we could do better here.
         .                       return true;
         .                   }
         .                   false
         .               }
         .           
         .               /// Determines whether identifiers in the assembly have strict naming rules.
         .               /// Currently, only NVPTX* targets need it.
     4,900 ( 0.00%)      pub fn has_strict_asm_symbol_naming(self) -> bool {
     4,900 ( 0.00%)          self.sess.target.arch.contains("nvptx")
     9,800 ( 0.00%)      }
         .           
         .               /// Returns `&'static core::panic::Location<'static>`.
     8,436 ( 0.00%)      pub fn caller_location_ty(self) -> Ty<'tcx> {
         .                   self.mk_imm_ref(
     1,406 ( 0.00%)              self.lifetimes.re_static,
         .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
     2,812 ( 0.00%)                  .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
         .                   )
     8,436 ( 0.00%)      }
         .           
         .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
     6,116 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
     4,448 ( 0.00%)          match self.def_kind(def_id) {
         .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
         .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
         .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
         .                       },
    10,008 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
         .                   }
     5,004 ( 0.00%)      }
         .           
    21,798 ( 0.00%)      pub fn type_length_limit(self) -> Limit {
         .                   self.limits(()).type_length_limit
    24,912 ( 0.00%)      }
         .           
 1,245,804 ( 0.01%)      pub fn recursion_limit(self) -> Limit {
         .                   self.limits(()).recursion_limit
 1,423,776 ( 0.01%)      }
         .           
   213,626 ( 0.00%)      pub fn move_size_limit(self) -> Limit {
         .                   self.limits(()).move_size_limit
   244,144 ( 0.00%)      }
         .           
     5,243 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
         .                   self.limits(()).const_eval_limit
     5,992 ( 0.00%)      }
         .           
         .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
         .                   iter::once(LOCAL_CRATE)
         .                       .chain(self.crates(()).iter().copied())
         .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
         .               }
         .           }
         .           
-- line 1594 ----------------------------------------
-- line 1614 ----------------------------------------
         .               fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted>;
         .           }
         .           
         .           macro_rules! nop_lift {
         .               ($set:ident; $ty:ty => $lifted:ty) => {
         .                   impl<'a, 'tcx> Lift<'tcx> for $ty {
         .                       type Lifted = $lifted;
         .                       fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {
     3,396 ( 0.00%)                  if tcx.interners.$set.contains_pointer_to(&Interned(self)) {
         .                               Some(unsafe { mem::transmute(self) })
         .                           } else {
         .                               None
         .                           }
         .                       }
         .                   }
         .               };
         .           }
-- line 1630 ----------------------------------------
-- line 1684 ----------------------------------------
         .               /// This is the implicit state of rustc. It contains the current
         .               /// `TyCtxt` and query. It is updated when creating a local interner or
         .               /// executing a new query. Whenever there's a `TyCtxt` value available
         .               /// you should also have access to an `ImplicitCtxt` through the functions
         .               /// in this module.
         .               #[derive(Clone)]
         .               pub struct ImplicitCtxt<'a, 'tcx> {
         .                   /// The current `TyCtxt`.
         2 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
         .           
         .                   /// The current query job, if any. This is updated by `JobOwner::start` in
         .                   /// `ty::query::plumbing` when executing a query.
         .                   pub query: Option<query::QueryJobId<DepKind>>,
         .           
         .                   /// Where to store diagnostics for the current query job, if any.
         .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
         .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
         .                   pub layout_depth: usize,
         .           
         .                   /// The current dep graph task. This is used to add dependencies to queries
         .                   /// when executing them.
         .                   pub task_deps: TaskDepsRef<'a>,
         .               }
         .           
         .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
         5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
         .                       let tcx = TyCtxt { gcx };
        25 ( 0.00%)              ImplicitCtxt {
         .                           tcx,
         .                           query: None,
         .                           diagnostics: None,
         .                           layout_depth: 0,
         .                           task_deps: TaskDepsRef::Ignore,
         .                       }
         5 ( 0.00%)          }
         .               }
         .           
         .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
         .               /// to `value` during the call to `f`. It is restored to its previous value after.
         .               /// This is used to set the pointer to the new `ImplicitCtxt`.
         .               #[cfg(parallel_compiler)]
         .               #[inline]
         .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
         .           
         .               /// Sets TLV to `value` during the call to `f`.
         .               /// It is restored to its previous value after.
         .               /// This is used to set the pointer to the new `ImplicitCtxt`.
         .               #[cfg(not(parallel_compiler))]
         .               #[inline]
         .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
         .                   let old = get_tlv();
   165,134 ( 0.00%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
         .                   TLV.with(|tlv| tlv.set(value));
         .                   f()
         .               }
         .           
         .               /// Gets the pointer to the current `ImplicitCtxt`.
         .               #[cfg(not(parallel_compiler))]
         .               #[inline]
         .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
         .               }
         .           
         .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
         .               #[inline]
         .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
         .               where
         .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
         .               {
         1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
         .               }
         .           
         .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
         .               #[inline]
         .               pub fn with_context_opt<F, R>(f: F) -> R
         .               where
         .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
         .               {
         .                   let context = get_tlv();
   688,659 ( 0.01%)          if context == 0 {
         .                       f(None)
         .                   } else {
         .                       // We could get an `ImplicitCtxt` pointer from another thread.
         .                       // Ensure that `ImplicitCtxt` is `Sync`.
         .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
         .           
         .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
         .                   }
-- line 1789 ----------------------------------------
-- line 1791 ----------------------------------------
         .           
         .               /// Allows access to the current `ImplicitCtxt`.
         .               /// Panics if there is no `ImplicitCtxt` available.
         .               #[inline]
         .               pub fn with_context<F, R>(f: F) -> R
         .               where
         .                   F: for<'a, 'tcx> FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
         .               {
     1,657 ( 0.00%)          with_context_opt(|opt_context| f(opt_context.expect("no ImplicitCtxt stored in tls")))
         .               }
         .           
         .               /// Allows access to the current `ImplicitCtxt` whose tcx field is the same as the tcx argument
         .               /// passed in. This means the closure is given an `ImplicitCtxt` with the same `'tcx` lifetime
         .               /// as the `TyCtxt` passed in.
         .               /// This will panic if you pass it a `TyCtxt` which is different from the current
         .               /// `ImplicitCtxt`'s `tcx` field.
         .               #[inline]
         .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
         .               where
         .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
         .               {
         .                   with_context(|context| unsafe {
   322,124 ( 0.00%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
         .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
   318,542 ( 0.00%)              f(context)
         .                   })
         .               }
         .           
         .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
         .               /// Panics if there is no `ImplicitCtxt` available.
         .               #[inline]
         .               pub fn with<F, R>(f: F) -> R
         .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
         .               fn into_pointer(&self) -> *const () {
         .                   self.0 as *const _ as *const ()
         .               }
         .           }
         .           
         .           #[allow(rustc::usage_of_ty_tykind)]
         .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
         .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
   721,728 ( 0.01%)          &self.0.kind()
         .               }
         .           }
         .           
         .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
         .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
         .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
         .                   // `x == y`.
         .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
         .           
         .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   691,512 ( 0.01%)          self.0.kind().hash(s)
         .               }
         .           }
         .           
         .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
         .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
   268,997 ( 0.00%)          &self.0.kind
         .               }
         .           }
         .           
         .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
         .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
         .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
         .                   // `x == y`.
         .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
         .           
         .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   229,372 ( 0.00%)          self.0.kind.hash(s)
         .               }
         .           }
         .           
         .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
         .               fn borrow<'a>(&'a self) -> &'a [T] {
   905,335 ( 0.01%)          &self.0[..]
         .               }
         .           }
         .           
         .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
         .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
         .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
         .                   // `x == y`.
         .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
         .           
         .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   294,840 ( 0.00%)          self.0[..].hash(s)
         .               }
         .           }
         .           
         .           macro_rules! direct_interners {
         .               ($($name:ident: $method:ident($ty:ty),)+) => {
         .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
         .                       fn borrow<'a>(&'a self) -> &'a $ty {
   174,737 ( 0.00%)                  &self.0
         .                       }
         .                   }
         .           
         .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
         .                       fn eq(&self, other: &Self) -> bool {
         .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
         .                           // equals `x == y`.
         .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
         .                   }
         .           
         .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
         .           
         .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
         .                       fn hash<H: Hasher>(&self, s: &mut H) {
         .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
         .                           // x.hash(s)`.
    93,190 ( 0.00%)                  self.0.hash(s)
         .                       }
         .                   }
         .           
         .                   impl<'tcx> TyCtxt<'tcx> {
 1,542,110 ( 0.01%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
   911,272 ( 0.01%)                  self.interners.$name.intern(v, |v| {
    19,868 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
         .                           }).0
 1,727,667 ( 0.02%)              }
         .                   })+
         .               }
         .           }
         .           
         .           direct_interners! {
         .               region: mk_region(RegionKind),
         .               const_: mk_const(Const<'tcx>),
         .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
         .               adt_def: intern_adt_def(AdtDef),
         .               stability: intern_stability(attr::Stability),
         .               const_stability: intern_const_stability(attr::ConstStability),
         .           }
         .           
         .           macro_rules! slice_interners {
         .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
         .                   impl<'tcx> TyCtxt<'tcx> {
11,030,658 ( 0.10%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
         .                           self.interners.$field.intern_ref(v, || {
         .                               Interned(List::from_arena(&*self.arena, v))
         .                           }).0
 9,833,247 ( 0.09%)              })+
         .                   }
         .               );
         .           }
         .           
         .           slice_interners!(
         .               type_list: _intern_type_list(Ty<'tcx>),
         .               substs: _intern_substs(GenericArg<'tcx>),
         .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2129 ----------------------------------------
         .               /// unsafe.
         .               pub fn safe_to_unsafe_fn_ty(self, sig: PolyFnSig<'tcx>) -> Ty<'tcx> {
         .                   assert_eq!(sig.unsafety(), hir::Unsafety::Normal);
         .                   self.mk_fn_ptr(sig.map_bound(|sig| ty::FnSig { unsafety: hir::Unsafety::Unsafe, ..sig }))
         .               }
         .           
         .               /// Given the def_id of a Trait `trait_def_id` and the name of an associated item `assoc_name`
         .               /// returns true if the `trait_def_id` defines an associated item of name `assoc_name`.
        72 ( 0.00%)      pub fn trait_may_define_assoc_type(self, trait_def_id: DefId, assoc_name: Ident) -> bool {
         .                   self.super_traits_of(trait_def_id).any(|trait_did| {
         .                       self.associated_items(trait_did)
         .                           .find_by_name_and_kind(self, assoc_name, ty::AssocKind::Type, trait_did)
         .                           .is_some()
         .                   })
        54 ( 0.00%)      }
         .           
         .               /// Computes the def-ids of the transitive supertraits of `trait_def_id`. This (intentionally)
         .               /// does not compute the full elaborated super-predicates but just the set of def-ids. It is used
         .               /// to identify which traits may define a given associated type to help avoid cycle errors.
         .               /// Returns a `DefId` iterator.
         .               fn super_traits_of(self, trait_def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {
         .                   let mut set = FxHashSet::default();
        12 ( 0.00%)          let mut stack = vec![trait_def_id];
         .           
         .                   set.insert(trait_def_id);
         .           
        54 ( 0.00%)          iter::from_fn(move || -> Option<DefId> {
        18 ( 0.00%)              let trait_did = stack.pop()?;
         9 ( 0.00%)              let generic_predicates = self.super_predicates_of(trait_did);
         .           
         .                       for (predicate, _) in generic_predicates.predicates {
        15 ( 0.00%)                  if let ty::PredicateKind::Trait(data) = predicate.kind().skip_binder() {
        10 ( 0.00%)                      if set.insert(data.def_id()) {
         .                                   stack.push(data.def_id());
         .                               }
         .                           }
         .                       }
         .           
         .                       Some(trait_did)
         .                   })
         .               }
-- line 2169 ----------------------------------------
-- line 2188 ----------------------------------------
         .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
         .                   })
         .               }
         .           
         .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
         .               /// `*r == kind`.
         .               #[inline]
         .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
   125,780 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
         .               }
         .           
         .               #[allow(rustc::usage_of_ty_tykind)]
         .               #[inline]
         .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
 6,407,036 ( 0.06%)          self.interners.intern_ty(st)
         .               }
         .           
         .               #[inline]
         .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
 4,897,749 ( 0.04%)          let inner = self.interners.intern_predicate(binder);
         .                   Predicate { inner }
         .               }
         .           
         .               #[inline]
 4,486,584 ( 0.04%)      pub fn reuse_or_mk_predicate(
         .                   self,
         .                   pred: Predicate<'tcx>,
         .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
         .               ) -> Predicate<'tcx> {
   297,848 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
 4,486,584 ( 0.04%)      }
         .           
         .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
     1,036 ( 0.00%)          match tm {
         .                       IntTy::Isize => self.types.isize,
         .                       IntTy::I8 => self.types.i8,
         .                       IntTy::I16 => self.types.i16,
         .                       IntTy::I32 => self.types.i32,
         .                       IntTy::I64 => self.types.i64,
         .                       IntTy::I128 => self.types.i128,
         .                   }
     1,036 ( 0.00%)      }
         .           
         .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
     4,508 ( 0.00%)          match tm {
         .                       UintTy::Usize => self.types.usize,
         .                       UintTy::U8 => self.types.u8,
         .                       UintTy::U16 => self.types.u16,
         .                       UintTy::U32 => self.types.u32,
         .                       UintTy::U64 => self.types.u64,
         .                       UintTy::U128 => self.types.u128,
         .                   }
     4,508 ( 0.00%)      }
         .           
         .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
         4 ( 0.00%)          match tm {
         .                       FloatTy::F32 => self.types.f32,
         .                       FloatTy::F64 => self.types.f64,
         .                   }
         4 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn mk_static_str(self) -> Ty<'tcx> {
       938 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
         .               }
         .           
         .               #[inline]
         .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
         .                   // Take a copy of substs so that we own the vectors inside.
         .                   self.mk_ty(Adt(def, substs))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_foreign(self, def_id: DefId) -> Ty<'tcx> {
         .                   self.mk_ty(Foreign(def_id))
         .               }
         .           
        32 ( 0.00%)      fn mk_generic_adt(self, wrapper_def_id: DefId, ty_param: Ty<'tcx>) -> Ty<'tcx> {
         .                   let adt_def = self.adt_def(wrapper_def_id);
         .                   let substs =
        60 ( 0.00%)              InternalSubsts::for_item(self, wrapper_def_id, |param, substs| match param.kind {
         .                           GenericParamDefKind::Lifetime | GenericParamDefKind::Const { .. } => bug!(),
         4 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
        16 ( 0.00%)                      if param.index == 0 {
         .                                   ty_param.into()
         .                               } else {
         4 ( 0.00%)                          assert!(has_default);
        12 ( 0.00%)                          self.type_of(param.def_id).subst(self, substs).into()
         .                               }
         .                           }
         .                       });
         4 ( 0.00%)          self.mk_ty(Adt(adt_def, substs))
        32 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn mk_box(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        20 ( 0.00%)          let def_id = self.require_lang_item(LangItem::OwnedBox, None);
        16 ( 0.00%)          self.mk_generic_adt(def_id, ty)
         .               }
         .           
         .               #[inline]
         .               pub fn mk_lang_item(self, ty: Ty<'tcx>, item: LangItem) -> Option<Ty<'tcx>> {
         .                   let def_id = self.lang_items().require(item).ok()?;
         .                   Some(self.mk_generic_adt(def_id, ty))
         .               }
         .           
-- line 2293 ----------------------------------------
-- line 2329 ----------------------------------------
         .               }
         .           
         .               #[inline]
         .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
         .               }
         .           
         .               #[inline]
     2,997 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
         .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
     3,096 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ty(Slice(ty))
         .               }
         .           
         .               #[inline]
         .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
    68,804 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
   111,537 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
         .               }
         .           
         .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
    18,468 ( 0.00%)          iter.intern_with(|ts| {
    22,642 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
    23,292 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
    16,416 ( 0.00%)          })
         .               }
         .           
         .               #[inline]
         .               pub fn mk_unit(self) -> Ty<'tcx> {
     2,999 ( 0.00%)          self.types.unit
         .               }
         .           
         .               #[inline]
         .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
        16 ( 0.00%)          if self.features().never_type_fallback { self.types.never } else { self.types.unit }
         .               }
         .           
         .               #[inline]
         .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ty(FnDef(def_id, substs))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
     3,010 ( 0.00%)          self.mk_ty(FnPtr(fty))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_dynamic(
         .                   self,
         .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
         .                   reg: ty::Region<'tcx>,
         .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
         .                   self.mk_ty_infer(TyVar(v))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
    29,874 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
         .               }
         .           
         .               #[inline]
         .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
         .                   self.mk_ty_infer(IntVar(v))
         .               }
         .           
         .               #[inline]
-- line 2428 ----------------------------------------
-- line 2432 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn mk_ty_infer(self, it: InferTy) -> Ty<'tcx> {
         .                   self.mk_ty(Infer(it))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_const_infer(self, ic: InferConst<'tcx>, ty: Ty<'tcx>) -> &'tcx ty::Const<'tcx> {
        14 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(ic), ty })
         .               }
         .           
         .               #[inline]
         .               pub fn mk_ty_param(self, index: u32, name: Symbol) -> Ty<'tcx> {
         .                   self.mk_ty(Param(ParamTy { index, name }))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
         .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
         .               }
         .           
    22,953 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
    14,253 ( 0.00%)          match param.kind {
         .                       GenericParamDefKind::Lifetime => {
     6,426 ( 0.00%)                  self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
         .                       }
     4,416 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
         .                       GenericParamDefKind::Const { .. } => {
         .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
         .                       }
         .                   }
    22,953 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ty(Opaque(def_id, substs))
         .               }
         .           
    18,445 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
    18,445 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
    36,890 ( 0.00%)      }
         .           
       120 ( 0.00%)      pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
       360 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Deref)
       240 ( 0.00%)      }
         .           
       810 ( 0.00%)      pub fn mk_place_downcast(
         .                   self,
         .                   place: Place<'tcx>,
         .                   adt_def: &'tcx AdtDef,
         .                   variant_index: VariantIdx,
         .               ) -> Place<'tcx> {
       810 ( 0.00%)          self.mk_place_elem(
         .                       place,
     1,620 ( 0.00%)              PlaceElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index),
         .                   )
     1,620 ( 0.00%)      }
         .           
         .               pub fn mk_place_downcast_unnamed(
         .                   self,
         .                   place: Place<'tcx>,
         .                   variant_index: VariantIdx,
         .               ) -> Place<'tcx> {
         .                   self.mk_place_elem(place, PlaceElem::Downcast(None, variant_index))
         .               }
         .           
         4 ( 0.00%)      pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
         4 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Index(index))
         8 ( 0.00%)      }
         .           
         .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
         .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
         .               /// flight.
   175,986 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
         .                   let mut projection = place.projection.to_vec();
         .                   projection.push(elem);
         .           
         .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
   195,540 ( 0.00%)      }
         .           
     8,988 ( 0.00%)      pub fn intern_poly_existential_predicates(
         .                   self,
         .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
         .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
     1,284 ( 0.00%)          assert!(!eps.is_empty());
         .                   assert!(
         .                       eps.array_windows()
     4,400 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
         .                               != Ordering::Greater)
         .                   );
     5,136 ( 0.00%)          self._intern_poly_existential_predicates(eps)
    10,272 ( 0.00%)      }
         .           
         .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
         .                   // FIXME consider asking the input slice to be sorted to avoid
         .                   // re-interning permutations, in which case that would be asserted
         .                   // here.
    16,493 ( 0.00%)          if preds.is_empty() {
         .                       // The macro-generated method below asserts we don't intern an empty slice.
         .                       List::empty()
         .                   } else {
     6,137 ( 0.00%)              self._intern_predicates(preds)
         .                   }
    20,832 ( 0.00%)      }
         .           
         .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
   137,837 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
     5,370 ( 0.00%)      }
         .           
         .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
 1,736,653 ( 0.02%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
    65,404 ( 0.00%)      }
         .           
         .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
         .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
         .               }
         .           
         .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
   154,674 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
    31,112 ( 0.00%)      }
         .           
         .               pub fn intern_canonical_var_infos(
         .                   self,
         .                   ts: &[CanonicalVarInfo<'tcx>],
         .               ) -> CanonicalVarInfos<'tcx> {
    68,879 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
     1,818 ( 0.00%)      }
         .           
         .               pub fn intern_bound_variable_kinds(
         .                   self,
         .                   ts: &[ty::BoundVariableKind],
         .               ) -> &'tcx List<ty::BoundVariableKind> {
    14,555 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
    20,398 ( 0.00%)      }
         .           
         .               pub fn mk_fn_sig<I>(
         .                   self,
         .                   inputs: I,
         .                   output: I::Item,
         .                   c_variadic: bool,
         .                   unsafety: hir::Unsafety,
         .                   abi: abi::Abi,
         .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
         .               where
         .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
         .               {
         .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
     6,471 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
     1,227 ( 0.00%)              c_variadic,
     1,694 ( 0.00%)              unsafety,
     1,520 ( 0.00%)              abi,
       870 ( 0.00%)          })
         .               }
         .           
         .               pub fn mk_poly_existential_predicates<
         .                   I: InternAs<
         .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
         .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
         .                   >,
         .               >(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
     4,238 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
         .               }
         .           
         .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
         8 ( 0.00%)          iter.intern_with(|xs| self.intern_predicates(xs))
         .               }
         .           
         .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
    35,938 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
         .               }
         .           
       675 ( 0.00%)      pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
   663,754 ( 0.01%)          iter.intern_with(|xs| self.intern_substs(xs))
       900 ( 0.00%)      }
         .           
         .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
   230,452 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
         .               }
         .           
    85,934 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
         .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
   171,868 ( 0.00%)      }
         .           
         .               pub fn mk_bound_variable_kinds<
         .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
         .               >(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
    69,921 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
         .               }
         .           
         .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
         .               /// It stops at `bound` and just returns it if reached.
   635,936 ( 0.01%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
   635,936 ( 0.01%)          let hir = self.hir();
         .                   loop {
 2,533,299 ( 0.02%)              if id == bound {
         .                           return bound;
         .                       }
         .           
 3,770,536 ( 0.03%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
         .                           return id;
         .                       }
         .                       let next = hir.get_parent_node(id);
 2,260,755 ( 0.02%)              if next == id {
         .                           bug!("lint traversal reached the root of the crate");
         .                       }
         .                       id = next;
         .                   }
   908,480 ( 0.01%)      }
         .           
    15,112 ( 0.00%)      pub fn lint_level_at_node(
         .                   self,
         .                   lint: &'static Lint,
         .                   mut id: hir::HirId,
         .               ) -> (Level, LintLevelSource) {
         .                   let sets = self.lint_levels(());
         .                   loop {
    99,031 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
         .                           return pair;
         .                       }
     8,065 ( 0.00%)              let next = self.hir().get_parent_node(id);
    24,195 ( 0.00%)              if next == id {
         .                           bug!("lint traversal reached the root of the crate");
         .                       }
         .                       id = next;
         .                   }
    15,112 ( 0.00%)      }
         .           
       602 ( 0.00%)      pub fn struct_span_lint_hir(
         .                   self,
         .                   lint: &'static Lint,
         .                   hir_id: HirId,
         .                   span: impl Into<MultiSpan>,
         .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
         .               ) {
     3,155 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
       906 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
       344 ( 0.00%)      }
         .           
         .               pub fn struct_lint_node(
         .                   self,
         .                   lint: &'static Lint,
         .                   id: HirId,
         .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
         .               ) {
         .                   let (level, src) = self.lint_level_at_node(lint, id);
         .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
         .               }
         .           
    11,767 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
     3,362 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
         .                   let candidates = map.get(&id.local_id)?;
     3,362 ( 0.00%)          Some(&*candidates)
    13,448 ( 0.00%)      }
         .           
    24,731 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
         .                   debug!(?id, "named_region");
         .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
    31,797 ( 0.00%)      }
         .           
     2,691 ( 0.00%)      pub fn is_late_bound(self, id: HirId) -> bool {
         .                   self.is_late_bound_map(id.owner)
       148 ( 0.00%)              .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
     2,392 ( 0.00%)      }
         .           
    20,902 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
         .                   self.object_lifetime_defaults_map(id.owner)
    26,874 ( 0.00%)      }
         .           
    15,597 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
         .                   self.mk_bound_variable_kinds(
         .                       self.late_bound_vars_map(id.owner)
         .                           .and_then(|map| map.get(&id.local_id).cloned())
         .                           .unwrap_or_else(|| {
         .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
         .                           })
         .                           .iter(),
         .                   )
    15,597 ( 0.00%)      }
         .           
         .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
         .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
         .               }
         .           
         .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
         .               /// feature gates
       940 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
        94 ( 0.00%)          if self.is_const_fn_raw(def_id) {
        25 ( 0.00%)              match self.lookup_const_stability(def_id) {
        40 ( 0.00%)                  Some(stability) if stability.level.is_unstable() => {
         .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
         .                               // corresponding feature gate.
         8 ( 0.00%)                      self.features()
         .                                   .declared_lib_features
         .                                   .iter()
         .                                   .any(|&(sym, _)| sym == stability.feature)
         .                           }
         .                           // functions without const stability are either stable user written
         .                           // const fn or the user is using feature gates and we thus don't
         .                           // care what they do
         .                           _ => true,
         .                       }
         .                   } else {
         .                       false
         .                   }
       846 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TyCtxtAt<'tcx> {
         .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
         .               #[track_caller]
         .               pub fn ty_error(self) -> Ty<'tcx> {
         .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
         .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
         .           }
         .           
         .           impl<I, T, R, E> InternAs<[T], R> for I
         .           where
         .               E: InternIteratorElement<T, R>,
         .               I: Iterator<Item = E>,
         .           {
         .               type Output = E::Output;
   245,608 ( 0.00%)      fn intern_with<F>(self, f: F) -> Self::Output
         .               where
         .                   F: FnOnce(&[T]) -> R,
         .               {
 2,753,042 ( 0.02%)          E::intern_with(self, f)
   155,394 ( 0.00%)      }
         .           }
         .           
         .           pub trait InternIteratorElement<T, R>: Sized {
         .               type Output;
         .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
         .           }
         .           
         .           impl<T, R> InternIteratorElement<T, R> for T {
         .               type Output = R;
   529,388 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
         .                   mut iter: I,
         .                   f: F,
         .               ) -> Self::Output {
         .                   // This code is hot enough that it's worth specializing for the most
         .                   // common length lists, to avoid the overhead of `SmallVec` creation.
         .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
         .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
         .                   // `assert`.
   763,341 ( 0.01%)          match iter.size_hint() {
         .                       (0, Some(0)) => {
         9 ( 0.00%)                  assert!(iter.next().is_none());
         .                           f(&[])
         .                       }
         .                       (1, Some(1)) => {
         .                           let t0 = iter.next().unwrap();
        37 ( 0.00%)                  assert!(iter.next().is_none());
    99,086 ( 0.00%)                  f(&[t0])
         .                       }
         .                       (2, Some(2)) => {
         .                           let t0 = iter.next().unwrap();
         .                           let t1 = iter.next().unwrap();
       556 ( 0.00%)                  assert!(iter.next().is_none());
   114,675 ( 0.00%)                  f(&[t0, t1])
         .                       }
     2,692 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
         .                   }
   605,977 ( 0.01%)      }
         .           }
         .           
         .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
         .           where
         .               T: Clone + 'a,
         .           {
         .               type Output = R;
    17,048 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
         .                   // This code isn't hot.
       348 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
    13,954 ( 0.00%)      }
         .           }
         .           
         .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
         .               type Output = Result<R, E>;
   717,057 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
         .                   mut iter: I,
         .                   f: F,
         .               ) -> Self::Output {
         .                   // This code is hot enough that it's worth specializing for the most
         .                   // common length lists, to avoid the overhead of `SmallVec` creation.
         .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
         .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
         .                   // `assert`, unless a failure happens first, in which case the result
         .                   // will be an error anyway.
   581,342 ( 0.01%)          Ok(match iter.size_hint() {
         .                       (0, Some(0)) => {
         .                           assert!(iter.next().is_none());
         .                           f(&[])
         .                       }
         .                       (1, Some(1)) => {
     2,310 ( 0.00%)                  let t0 = iter.next().unwrap()?;
         .                           assert!(iter.next().is_none());
    28,744 ( 0.00%)                  f(&[t0])
         .                       }
         .                       (2, Some(2)) => {
     1,675 ( 0.00%)                  let t0 = iter.next().unwrap()?;
     1,675 ( 0.00%)                  let t1 = iter.next().unwrap()?;
     2,481 ( 0.00%)                  assert!(iter.next().is_none());
    76,548 ( 0.00%)                  f(&[t0, t1])
         .                       }
     9,057 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
         .                   })
   806,091 ( 0.01%)      }
         .           }
         .           
         .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
         .           // won't work for us.
         .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
   322,124 ( 0.00%)      t as *const () == u as *const ()
         .           }
         .           
         .           pub fn provide(providers: &mut ty::query::Providers) {
         2 ( 0.00%)      providers.in_scope_traits_map =
         .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
         3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
         2 ( 0.00%)      providers.module_reexports =
         .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
         2 ( 0.00%)      providers.crate_name = |tcx, id| {
         1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
         1 ( 0.00%)          tcx.crate_name
         .               };
         2 ( 0.00%)      providers.maybe_unused_trait_import =
         .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
         2 ( 0.00%)      providers.maybe_unused_extern_crates =
         .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
         2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
         .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
         .               };
         .           
        20 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
         2 ( 0.00%)      providers.lookup_const_stability =
        18 ( 0.00%)          |tcx, id| tcx.stability().local_const_stability(id.expect_local());
         2 ( 0.00%)      providers.lookup_deprecation_entry =
    17,656 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
         2 ( 0.00%)      providers.extern_mod_stmt_cnum =
         .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
         3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
         3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
         2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
         1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
         7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
         .               };
         2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
         1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
         7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
         .               };
         2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
         1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
         .                   // We want to check if the panic handler was defined in this crate
         3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
         .               };
         .           }

 3,508,368 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/bit_set.rs
--------------------------------------------------------------------------------
Ir                  

-- line 30 ----------------------------------------
         .               // Both start and end are inclusive.
         .               let start = match range.start_bound().cloned() {
         .                   Bound::Included(start) => start.index(),
         .                   Bound::Excluded(start) => start.index() + 1,
         .                   Bound::Unbounded => 0,
         .               };
         .               let end = match range.end_bound().cloned() {
         .                   Bound::Included(end) => end.index(),
       102 ( 0.00%)          Bound::Excluded(end) => end.index().checked_sub(1)?,
         .                   Bound::Unbounded => domain - 1,
         .               };
       204 ( 0.00%)      assert!(end < domain);
       204 ( 0.00%)      if start > end {
         .                   return None;
         .               }
         .               Some((start, end))
         .           }
         .           
         .           macro_rules! bit_relations_inherent_impls {
         .               () => {
         .                   /// Sets `self = self | other` and returns `true` if `self` changed
         .                   /// (i.e., if new bits were added).
 1,415,332 ( 0.01%)          pub fn union<Rhs>(&mut self, other: &Rhs) -> bool
         .                   where
         .                       Self: BitRelations<Rhs>,
         .                   {
         .                       <Self as BitRelations<Rhs>>::union(self, other)
 1,180,685 ( 0.01%)          }
         .           
         .                   /// Sets `self = self - other` and returns `true` if `self` changed.
         .                   /// (i.e., if any bits were removed).
   595,930 ( 0.01%)          pub fn subtract<Rhs>(&mut self, other: &Rhs) -> bool
         .                   where
         .                       Self: BitRelations<Rhs>,
         .                   {
         .                       <Self as BitRelations<Rhs>>::subtract(self, other)
   595,930 ( 0.01%)          }
         .           
         .                   /// Sets `self = self & other` and return `true` if `self` changed.
         .                   /// (i.e., if any bits were removed).
         .                   pub fn intersect<Rhs>(&mut self, other: &Rhs) -> bool
         .                   where
         .                       Self: BitRelations<Rhs>,
         .                   {
         .                       <Self as BitRelations<Rhs>>::intersect(self, other)
-- line 74 ----------------------------------------
-- line 92 ----------------------------------------
         .               domain_size: usize,
         .               words: Vec<Word>,
         .               marker: PhantomData<T>,
         .           }
         .           
         .           impl<T> BitSet<T> {
         .               /// Gets the domain size.
         .               pub fn domain_size(&self) -> usize {
     1,220 ( 0.00%)          self.domain_size
         .               }
         .           }
         .           
         .           impl<T: Idx> BitSet<T> {
         .               /// Creates a new, empty bitset with a given `domain_size`.
         .               #[inline]
         .               pub fn new_empty(domain_size: usize) -> BitSet<T> {
         .                   let num_words = num_words(domain_size);
   221,731 ( 0.00%)          BitSet { domain_size, words: vec![0; num_words], marker: PhantomData }
         .               }
         .           
         .               /// Creates a new, filled bitset with a given `domain_size`.
         .               #[inline]
         .               pub fn new_filled(domain_size: usize) -> BitSet<T> {
         .                   let num_words = num_words(domain_size);
    10,435 ( 0.00%)          let mut result = BitSet { domain_size, words: vec![!0; num_words], marker: PhantomData };
         .                   result.clear_excess_bits();
         .                   result
         .               }
         .           
         .               /// Clear all elements.
         .               #[inline]
         .               pub fn clear(&mut self) {
         .                   for word in &mut self.words {
     3,780 ( 0.00%)              *word = 0;
         .                   }
         .               }
         .           
         .               /// Clear excess bits in the final word.
         .               fn clear_excess_bits(&mut self) {
     1,950 ( 0.00%)          let num_bits_in_final_word = self.domain_size % WORD_BITS;
     8,074 ( 0.00%)          if num_bits_in_final_word > 0 {
     6,118 ( 0.00%)              let mask = (1 << num_bits_in_final_word) - 1;
    14,186 ( 0.00%)              let final_word_idx = self.words.len() - 1;
     4,034 ( 0.00%)              self.words[final_word_idx] &= mask;
         .                   }
         .               }
         .           
         .               /// Count the number of set bits in the set.
         .               pub fn count(&self) -> usize {
         .                   self.words.iter().map(|e| e.count_ones() as usize).sum()
         .               }
         .           
         .               /// Returns `true` if `self` contains `elem`.
         .               #[inline]
         .               pub fn contains(&self, elem: T) -> bool {
   973,956 ( 0.01%)          assert!(elem.index() < self.domain_size);
         .                   let (word_index, mask) = word_index_and_mask(elem);
 1,134,000 ( 0.01%)          (self.words[word_index] & mask) != 0
         .               }
         .           
         .               /// Is `self` is a (non-strict) superset of `other`?
         .               #[inline]
         .               pub fn superset(&self, other: &BitSet<T>) -> bool {
         .                   assert_eq!(self.domain_size, other.domain_size);
         .                   self.words.iter().zip(&other.words).all(|(a, b)| (a & b) == *b)
         .               }
         .           
         .               /// Is the set empty?
         .               #[inline]
         .               pub fn is_empty(&self) -> bool {
        55 ( 0.00%)          self.words.iter().all(|a| *a == 0)
         .               }
         .           
         .               /// Insert `elem`. Returns whether the set has changed.
         .               #[inline]
         .               pub fn insert(&mut self, elem: T) -> bool {
 3,623,623 ( 0.03%)          assert!(elem.index() < self.domain_size);
         .                   let (word_index, mask) = word_index_and_mask(elem);
         .                   let word_ref = &mut self.words[word_index];
 1,478,504 ( 0.01%)          let word = *word_ref;
 2,957,008 ( 0.03%)          let new_word = word | mask;
 1,766,972 ( 0.02%)          *word_ref = new_word;
 1,728,266 ( 0.02%)          new_word != word
         .               }
         .           
         .               #[inline]
         .               pub fn insert_range(&mut self, elems: impl RangeBounds<T>) {
         .                   let Some((start, end)) = inclusive_start_end(elems, self.domain_size) else {
         .                       return;
         .                   };
         .           
-- line 182 ----------------------------------------
-- line 199 ----------------------------------------
         .                   } else {
         .                       self.words[start_word_index] |= end_mask | (end_mask - start_mask);
         .                   }
         .               }
         .           
         .               /// Sets all bits to true.
         .               pub fn insert_all(&mut self) {
         .                   for word in &mut self.words {
     3,900 ( 0.00%)              *word = !0;
         .                   }
         .                   self.clear_excess_bits();
         .               }
         .           
         .               /// Returns `true` if the set has changed.
         .               #[inline]
         .               pub fn remove(&mut self, elem: T) -> bool {
 1,155,004 ( 0.01%)          assert!(elem.index() < self.domain_size);
         .                   let (word_index, mask) = word_index_and_mask(elem);
         .                   let word_ref = &mut self.words[word_index];
   206,988 ( 0.00%)          let word = *word_ref;
 1,254,544 ( 0.01%)          let new_word = word & !mask;
   623,506 ( 0.01%)          *word_ref = new_word;
   413,976 ( 0.00%)          new_word != word
         .               }
         .           
         .               /// Gets a slice of the underlying words.
         .               pub fn words(&self) -> &[Word] {
         .                   &self.words
         .               }
         .           
         .               /// Iterates over the indices of set bits in a sorted order.
-- line 229 ----------------------------------------
-- line 273 ----------------------------------------
         .                   not_already |= (self.words[current_index] ^ new_bit_mask) != 0;
         .                   // Any bits in the tail? Note `clear_excess_bits` before.
         .                   not_already |= self.words[current_index + 1..].iter().any(|&x| x != 0);
         .           
         .                   not_already
         .               }
         .           
         .               fn last_set_in(&self, range: impl RangeBounds<T>) -> Option<T> {
       102 ( 0.00%)          let (start, end) = inclusive_start_end(range, self.domain_size)?;
         .                   let (start_word_index, _) = word_index_and_mask(start);
         .                   let (end_word_index, end_mask) = word_index_and_mask(end);
         .           
       510 ( 0.00%)          let end_word = self.words[end_word_index] & (end_mask | (end_mask - 1));
       204 ( 0.00%)          if end_word != 0 {
       144 ( 0.00%)              let pos = max_bit(end_word) + WORD_BITS * end_word_index;
        96 ( 0.00%)              if start <= pos {
         .                           return Some(T::new(pos));
         .                       }
         .                   }
         .           
         .                   // We exclude end_word_index from the range here, because we don't want
         .                   // to limit ourselves to *just* the last word: the bits set it in may be
         .                   // after `end`, so it may not work out.
         .                   if let Some(offset) =
        11 ( 0.00%)              self.words[start_word_index..end_word_index].iter().rposition(|&w| w != 0)
         .                   {
        20 ( 0.00%)              let word_idx = start_word_index + offset;
        10 ( 0.00%)              let start_word = self.words[word_idx];
        50 ( 0.00%)              let pos = max_bit(start_word) + WORD_BITS * word_idx;
        20 ( 0.00%)              if start <= pos {
         .                           return Some(T::new(pos));
         .                       }
         .                   }
         .           
         .                   None
         .               }
         .           
         .               bit_relations_inherent_impls! {}
         .           }
         .           
         .           // dense REL dense
         .           impl<T: Idx> BitRelations<BitSet<T>> for BitSet<T> {
         .               fn union(&mut self, other: &BitSet<T>) -> bool {
   703,941 ( 0.01%)          assert_eq!(self.domain_size, other.domain_size);
40,904,117 ( 0.36%)          bitwise(&mut self.words, &other.words, |a, b| a | b)
         .               }
         .           
         .               fn subtract(&mut self, other: &BitSet<T>) -> bool {
         .                   assert_eq!(self.domain_size, other.domain_size);
    13,275 ( 0.00%)          bitwise(&mut self.words, &other.words, |a, b| a & !b)
         .               }
         .           
         .               fn intersect(&mut self, other: &BitSet<T>) -> bool {
         .                   assert_eq!(self.domain_size, other.domain_size);
         .                   bitwise(&mut self.words, &other.words, |a, b| a & b)
         .               }
         .           }
         .           
         .           // Applies a function to mutate a bitset, and returns true if any
         .           // of the applications return true
         .           fn sequential_update<T: Idx>(
         .               mut self_update: impl FnMut(T) -> bool,
         .               it: impl Iterator<Item = T>,
         .           ) -> bool {
         .               let mut changed = false;
   414,229 ( 0.00%)      for elem in it {
 1,242,687 ( 0.01%)          changed |= self_update(elem);
         .               }
         .               changed
   474,778 ( 0.00%)  }
         .           
         .           // Optimization of intersection for SparseBitSet that's generic
         .           // over the RHS
         .           fn sparse_intersect<T: Idx>(
         .               set: &mut SparseBitSet<T>,
         .               other_contains: impl Fn(&T) -> bool,
         .           ) -> bool {
         .               let size = set.elems.len();
-- line 350 ----------------------------------------
-- line 413 ----------------------------------------
         .                       HybridBitSet::Dense(dense) => dense.intersect(other),
         .                   }
         .               }
         .           }
         .           
         .           // dense REL hybrid
         .           impl<T: Idx> BitRelations<HybridBitSet<T>> for BitSet<T> {
         .               fn union(&mut self, other: &HybridBitSet<T>) -> bool {
   476,744 ( 0.00%)          assert_eq!(self.domain_size, other.domain_size());
   238,372 ( 0.00%)          match other {
         .                       HybridBitSet::Sparse(sparse) => {
         .                           sequential_update(|elem| self.insert(elem), sparse.iter().cloned())
         .                       }
         .                       HybridBitSet::Dense(dense) => self.union(dense),
         .                   }
         .               }
         .           
         .               fn subtract(&mut self, other: &HybridBitSet<T>) -> bool {
   476,744 ( 0.00%)          assert_eq!(self.domain_size, other.domain_size());
   238,372 ( 0.00%)          match other {
         .                       HybridBitSet::Sparse(sparse) => {
         .                           sequential_update(|elem| self.remove(elem), sparse.iter().cloned())
         .                       }
         .                       HybridBitSet::Dense(dense) => self.subtract(dense),
         .                   }
         .               }
         .           
         .               fn intersect(&mut self, other: &HybridBitSet<T>) -> bool {
-- line 440 ----------------------------------------
-- line 455 ----------------------------------------
         .                       HybridBitSet::Dense(dense) => self.intersect(dense),
         .                   }
         .               }
         .           }
         .           
         .           // hybrid REL hybrid
         .           impl<T: Idx> BitRelations<HybridBitSet<T>> for HybridBitSet<T> {
         .               fn union(&mut self, other: &HybridBitSet<T>) -> bool {
    19,092 ( 0.00%)          assert_eq!(self.domain_size(), other.domain_size());
     6,364 ( 0.00%)          match self {
         .                       HybridBitSet::Sparse(_) => {
     6,364 ( 0.00%)                  match other {
         .                               HybridBitSet::Sparse(other_sparse) => {
         .                                   // Both sets are sparse. Add the elements in
         .                                   // `other_sparse` to `self` one at a time. This
         .                                   // may or may not cause `self` to be densified.
         .                                   let mut changed = false;
         .                                   for elem in other_sparse.iter() {
    19,338 ( 0.00%)                              changed |= self.insert(*elem);
         .                                   }
         .                                   changed
         .                               }
         .           
         .                               HybridBitSet::Dense(other_dense) => self.union(other_dense),
         .                           }
         .                       }
         .           
-- line 481 ----------------------------------------
-- line 508 ----------------------------------------
         .                           HybridBitSet::Dense(other_dense) => self_dense.intersect(other_dense),
         .                       },
         .                   }
         .               }
         .           }
         .           
         .           impl<T> Clone for BitSet<T> {
         .               fn clone(&self) -> Self {
     4,260 ( 0.00%)          BitSet { domain_size: self.domain_size, words: self.words.clone(), marker: PhantomData }
         .               }
         .           
 1,233,365 ( 0.01%)      fn clone_from(&mut self, from: &Self) {
   777,764 ( 0.01%)          if self.domain_size != from.domain_size {
         .                       self.words.resize(from.domain_size, 0);
         .                       self.domain_size = from.domain_size;
         .                   }
         .           
         .                   self.words.copy_from_slice(&from.words);
         .               }
         .           }
         .           
-- line 528 ----------------------------------------
-- line 599 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, T: Idx> Iterator for BitIter<'a, T> {
         .               type Item = T;
         .               fn next(&mut self) -> Option<T> {
         .                   loop {
 1,195,651 ( 0.01%)              if self.word != 0 {
         .                           // Get the position of the next set bit in the current word,
         .                           // then clear the bit.
         .                           let bit_pos = self.word.trailing_zeros() as usize;
         .                           let bit = 1 << bit_pos;
         .                           self.word ^= bit;
   408,172 ( 0.00%)                  return Some(T::new(bit_pos + self.offset));
         .                       }
         .           
         .                       // Move onto the next word. `wrapping_add()` is needed to handle
         .                       // the degenerate initial value given to `offset` in `new()`.
         .                       let word = self.iter.next()?;
   289,836 ( 0.00%)              self.word = *word;
         .                       self.offset = self.offset.wrapping_add(WORD_BITS);
         .                   }
         .               }
         .           }
         .           
         .           #[inline]
         .           fn bitwise<Op>(out_vec: &mut [Word], in_vec: &[Word], op: Op) -> bool
         .           where
         .               Op: Fn(Word, Word) -> Word,
         .           {
   942,520 ( 0.01%)      assert_eq!(out_vec.len(), in_vec.len());
         .               let mut changed = 0;
   461,851 ( 0.00%)      for (out_elem, in_elem) in iter::zip(out_vec, in_vec) {
41,144,775 ( 0.36%)          let old_val = *out_elem;
40,623,595 ( 0.35%)          let new_val = op(old_val, *in_elem);
40,909,664 ( 0.36%)          *out_elem = new_val;
         .                   // This is essentially equivalent to a != with changed being a bool, but
         .                   // in practice this code gets auto-vectorized by the compiler for most
         .                   // operators. Using != here causes us to generate quite poor code as the
         .                   // compiler tries to go back to a boolean on each loop iteration.
82,290,947 ( 0.72%)          changed |= old_val ^ new_val;
         .               }
         .               changed != 0
         .           }
         .           
         .           const SPARSE_MAX: usize = 8;
         .           
         .           /// A fixed-size bitset type with a sparse representation and a maximum of
         .           /// `SPARSE_MAX` elements. The elements are stored as a sorted `ArrayVec` with
         .           /// no duplicates.
         .           ///
         .           /// This type is used by `HybridBitSet`; do not use directly.
         .           #[derive(Clone, Debug)]
         .           pub struct SparseBitSet<T> {
   229,664 ( 0.00%)      domain_size: usize,
         .               elems: ArrayVec<T, SPARSE_MAX>,
         .           }
         .           
         .           impl<T: Idx> SparseBitSet<T> {
         .               fn new_empty(domain_size: usize) -> Self {
         .                   SparseBitSet { domain_size, elems: ArrayVec::new() }
         .               }
         .           
         .               fn len(&self) -> usize {
 1,037,854 ( 0.01%)          self.elems.len()
         .               }
         .           
         .               fn is_empty(&self) -> bool {
         .                   self.elems.len() == 0
         .               }
         .           
         .               fn contains(&self, elem: T) -> bool {
     2,638 ( 0.00%)          assert!(elem.index() < self.domain_size);
         .                   self.elems.contains(&elem)
         .               }
         .           
         .               fn insert(&mut self, elem: T) -> bool {
 1,036,118 ( 0.01%)          assert!(elem.index() < self.domain_size);
   530,998 ( 0.00%)          let changed = if let Some(i) = self.elems.iter().position(|&e| e.index() >= elem.index()) {
   143,544 ( 0.00%)              if self.elems[i] == elem {
         .                           // `elem` is already in the set.
         .                           false
         .                       } else {
         .                           // `elem` is smaller than one or more existing elements.
         .                           self.elems.insert(i, elem);
         .                           true
         .                       }
         .                   } else {
         .                       // `elem` is larger than all existing elements.
         .                       self.elems.push(elem);
         .                       true
         .                   };
 1,036,118 ( 0.01%)          assert!(self.len() <= SPARSE_MAX);
         .                   changed
         .               }
         .           
         .               fn remove(&mut self, elem: T) -> bool {
 1,021,746 ( 0.01%)          assert!(elem.index() < self.domain_size);
         .                   if let Some(i) = self.elems.iter().position(|&e| e == elem) {
   303,390 ( 0.00%)              self.elems.remove(i);
         .                       true
         .                   } else {
         .                       false
         .                   }
         .               }
         .           
         .               fn to_dense(&self) -> BitSet<T> {
         .                   let mut dense = BitSet::new_empty(self.domain_size);
         .                   for elem in self.elems.iter() {
     6,464 ( 0.00%)              dense.insert(*elem);
         .                   }
         .                   dense
         .               }
         .           
         .               fn iter(&self) -> slice::Iter<'_, T> {
    12,416 ( 0.00%)          self.elems.iter()
         .               }
         .           
         .               bit_relations_inherent_impls! {}
         .           }
         .           
         .           impl<T: Idx + Ord> SparseBitSet<T> {
         .               fn last_set_in(&self, range: impl RangeBounds<T>) -> Option<T> {
         .                   let mut last_leq = None;
-- line 723 ----------------------------------------
-- line 738 ----------------------------------------
         .           /// number of elements, but a large `domain_size`, and are cleared frequently.
         .           ///
         .           /// `T` is an index type, typically a newtyped `usize` wrapper, but it can also
         .           /// just be `usize`.
         .           ///
         .           /// All operations that involve an element will panic if the element is equal
         .           /// to or greater than the domain size. All operations that involve two bitsets
         .           /// will panic if the bitsets have differing domain sizes.
 2,087,544 ( 0.02%)  #[derive(Clone)]
         .           pub enum HybridBitSet<T> {
         .               Sparse(SparseBitSet<T>),
         .               Dense(BitSet<T>),
         .           }
         .           
         .           impl<T: Idx> fmt::Debug for HybridBitSet<T> {
         .               fn fmt(&self, w: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   match self {
-- line 754 ----------------------------------------
-- line 755 ----------------------------------------
         .                       Self::Sparse(b) => b.fmt(w),
         .                       Self::Dense(b) => b.fmt(w),
         .                   }
         .               }
         .           }
         .           
         .           impl<T: Idx> HybridBitSet<T> {
         .               pub fn new_empty(domain_size: usize) -> Self {
     2,432 ( 0.00%)          HybridBitSet::Sparse(SparseBitSet::new_empty(domain_size))
         .               }
         .           
         .               pub fn domain_size(&self) -> usize {
         .                   match self {
         .                       HybridBitSet::Sparse(sparse) => sparse.domain_size,
         .                       HybridBitSet::Dense(dense) => dense.domain_size,
         .                   }
         .               }
         .           
         .               pub fn clear(&mut self) {
         .                   let domain_size = self.domain_size();
     7,772 ( 0.00%)          *self = HybridBitSet::new_empty(domain_size);
         .               }
         .           
         .               pub fn contains(&self, elem: T) -> bool {
        68 ( 0.00%)          match self {
         .                       HybridBitSet::Sparse(sparse) => sparse.contains(elem),
         .                       HybridBitSet::Dense(dense) => dense.contains(elem),
         .                   }
         .               }
         .           
         .               pub fn superset(&self, other: &HybridBitSet<T>) -> bool {
         .                   match (self, other) {
         .                       (HybridBitSet::Dense(self_dense), HybridBitSet::Dense(other_dense)) => {
-- line 787 ----------------------------------------
-- line 799 ----------------------------------------
         .                       HybridBitSet::Sparse(sparse) => sparse.is_empty(),
         .                       HybridBitSet::Dense(dense) => dense.is_empty(),
         .                   }
         .               }
         .           
         .               /// Returns the previous element present in the bitset from `elem`,
         .               /// inclusively of elem. That is, will return `Some(elem)` if elem is in the
         .               /// bitset.
    12,620 ( 0.00%)      pub fn last_set_in(&self, range: impl RangeBounds<T>) -> Option<T>
         .               where
         .                   T: Ord,
         .               {
    12,620 ( 0.00%)          match self {
         .                       HybridBitSet::Sparse(sparse) => sparse.last_set_in(range),
         .                       HybridBitSet::Dense(dense) => dense.last_set_in(range),
         .                   }
    18,930 ( 0.00%)      }
         .           
 4,775,715 ( 0.04%)      pub fn insert(&mut self, elem: T) -> bool {
         .                   // No need to check `elem` against `self.domain_size` here because all
         .                   // the match cases check it, one way or another.
 1,061,270 ( 0.01%)          match self {
 1,037,854 ( 0.01%)              HybridBitSet::Sparse(sparse) if sparse.len() < SPARSE_MAX => {
         .                           // The set is sparse and has space for `elem`.
         .                           sparse.insert(elem)
         .                       }
         .                       HybridBitSet::Sparse(sparse) if sparse.contains(elem) => {
         .                           // The set is sparse and does not have space for `elem`, but
         .                           // that doesn't matter because `elem` is already present.
         .                           false
         .                       }
         .                       HybridBitSet::Sparse(sparse) => {
         .                           // The set is sparse and full. Convert to a dense set.
         .                           let mut dense = sparse.to_dense();
         .                           let changed = dense.insert(elem);
       808 ( 0.00%)                  assert!(changed);
     4,848 ( 0.00%)                  *self = HybridBitSet::Dense(dense);
         .                           changed
         .                       }
         .                       HybridBitSet::Dense(dense) => dense.insert(elem),
         .                   }
 4,245,080 ( 0.04%)      }
         .           
         .               pub fn insert_range(&mut self, elems: impl RangeBounds<T>) {
         .                   // No need to check `elem` against `self.domain_size` here because all
         .                   // the match cases check it, one way or another.
         .                   let start = match elems.start_bound().cloned() {
         .                       Bound::Included(start) => start.index(),
         .                       Bound::Excluded(start) => start.index() + 1,
         .                       Bound::Unbounded => 0,
-- line 848 ----------------------------------------
-- line 879 ----------------------------------------
         .                   match self {
         .                       HybridBitSet::Sparse(_) => {
         .                           *self = HybridBitSet::Dense(BitSet::new_filled(domain_size));
         .                       }
         .                       HybridBitSet::Dense(dense) => dense.insert_all(),
         .                   }
         .               }
         .           
   510,652 ( 0.00%)      pub fn remove(&mut self, elem: T) -> bool {
         .                   // Note: we currently don't bother going from Dense back to Sparse.
 1,021,988 ( 0.01%)          match self {
         .                       HybridBitSet::Sparse(sparse) => sparse.remove(elem),
         .                       HybridBitSet::Dense(dense) => dense.remove(elem),
         .                   }
 1,021,304 ( 0.01%)      }
         .           
         .               /// Converts to a dense set, consuming itself in the process.
         .               pub fn to_dense(self) -> BitSet<T> {
         .                   match self {
         .                       HybridBitSet::Sparse(sparse) => sparse.to_dense(),
         .                       HybridBitSet::Dense(dense) => dense,
         .                   }
         .               }
         .           
         .               pub fn iter(&self) -> HybridIter<'_, T> {
     7,668 ( 0.00%)          match self {
    15,010 ( 0.00%)              HybridBitSet::Sparse(sparse) => HybridIter::Sparse(sparse.iter()),
         .                       HybridBitSet::Dense(dense) => HybridIter::Dense(dense.iter()),
         .                   }
         .               }
         .           
         .               bit_relations_inherent_impls! {}
         .           }
         .           
         .           pub enum HybridIter<'a, T: Idx> {
-- line 913 ----------------------------------------
-- line 935 ----------------------------------------
         .           /// to or greater than the domain size.
         .           #[derive(Clone, Debug, PartialEq)]
         .           pub struct GrowableBitSet<T: Idx> {
         .               bit_set: BitSet<T>,
         .           }
         .           
         .           impl<T: Idx> GrowableBitSet<T> {
         .               /// Ensure that the set can hold at least `min_domain_size` elements.
   344,043 ( 0.00%)      pub fn ensure(&mut self, min_domain_size: usize) {
    98,298 ( 0.00%)          if self.bit_set.domain_size < min_domain_size {
       433 ( 0.00%)              self.bit_set.domain_size = min_domain_size;
         .                   }
         .           
         .                   let min_num_words = num_words(min_domain_size);
   196,596 ( 0.00%)          if self.bit_set.words.len() < min_num_words {
         .                       self.bit_set.words.resize(min_num_words, 0)
         .                   }
   294,894 ( 0.00%)      }
         .           
         .               pub fn new_empty() -> GrowableBitSet<T> {
     2,208 ( 0.00%)          GrowableBitSet { bit_set: BitSet::new_empty(0) }
         .               }
         .           
         .               pub fn with_capacity(capacity: usize) -> GrowableBitSet<T> {
         8 ( 0.00%)          GrowableBitSet { bit_set: BitSet::new_empty(capacity) }
         .               }
         .           
         .               /// Returns `true` if the set has changed.
         .               #[inline]
         .               pub fn insert(&mut self, elem: T) -> bool {
   239,445 ( 0.00%)          self.ensure(elem.index() + 1);
         .                   self.bit_set.insert(elem)
         .               }
         .           
         .               /// Returns `true` if the set has changed.
         .               #[inline]
         .               pub fn remove(&mut self, elem: T) -> bool {
       288 ( 0.00%)          self.ensure(elem.index() + 1);
         .                   self.bit_set.remove(elem)
         .               }
         .           
         .               #[inline]
         .               pub fn is_empty(&self) -> bool {
         .                   self.bit_set.is_empty()
         .               }
         .           
         .               #[inline]
         .               pub fn contains(&self, elem: T) -> bool {
         .                   let (word_index, mask) = word_index_and_mask(elem);
     2,734 ( 0.00%)          self.bit_set.words.get(word_index).map_or(false, |word| (word & mask) != 0)
         .               }
         .           }
         .           
         .           /// A fixed-size 2D bit matrix type with a dense representation.
         .           ///
         .           /// `R` and `C` are index types used to identify rows and columns respectively;
         .           /// typically newtyped `usize` wrappers, but they can also just be `usize`.
         .           ///
-- line 992 ----------------------------------------
-- line 1001 ----------------------------------------
         .           }
         .           
         .           impl<R: Idx, C: Idx> BitMatrix<R, C> {
         .               /// Creates a new `rows x columns` matrix, initially empty.
         .               pub fn new(num_rows: usize, num_columns: usize) -> BitMatrix<R, C> {
         .                   // For every element, we need one bit for every other
         .                   // element. Round up to an even number of words.
         .                   let words_per_row = num_words(num_columns);
     9,433 ( 0.00%)          BitMatrix {
         .                       num_rows,
         .                       num_columns,
     6,351 ( 0.00%)              words: vec![0; num_rows * words_per_row],
         .                       marker: PhantomData,
         .                   }
         .               }
         .           
         .               /// Creates a new matrix, with `row` used as the value for every row.
         .               pub fn from_row_n(row: &BitSet<C>, num_rows: usize) -> BitMatrix<R, C> {
         .                   let num_columns = row.domain_size();
         .                   let words_per_row = num_words(num_columns);
-- line 1020 ----------------------------------------
-- line 1029 ----------------------------------------
         .           
         .               pub fn rows(&self) -> impl Iterator<Item = R> {
         .                   (0..self.num_rows).map(R::new)
         .               }
         .           
         .               /// The range of bits for a given row.
         .               fn range(&self, row: R) -> (usize, usize) {
         .                   let words_per_row = num_words(self.num_columns);
   125,038 ( 0.00%)          let start = row.index() * words_per_row;
   105,817 ( 0.00%)          (start, start + words_per_row)
         .               }
         .           
         .               /// Sets the cell at `(row, column)` to true. Put another way, insert
         .               /// `column` to the bitset for `row`.
         .               ///
         .               /// Returns `true` if this changed the matrix.
         .               pub fn insert(&mut self, row: R, column: C) -> bool {
    66,677 ( 0.00%)          assert!(row.index() < self.num_rows && column.index() < self.num_columns);
         .                   let (start, _) = self.range(row);
         .                   let (word_index, mask) = word_index_and_mask(column);
         .                   let words = &mut self.words[..];
    67,375 ( 0.00%)          let word = words[start + word_index];
    26,950 ( 0.00%)          let new_word = word | mask;
    13,475 ( 0.00%)          words[start + word_index] = new_word;
    26,950 ( 0.00%)          word != new_word
         .               }
         .           
         .               /// Do the bits from `row` contain `column`? Put another way, is
         .               /// the matrix cell at `(row, column)` true?  Put yet another way,
         .               /// if the matrix represents (transitive) reachability, can
         .               /// `row` reach `column`?
     5,746 ( 0.00%)      pub fn contains(&self, row: R, column: C) -> bool {
    28,730 ( 0.00%)          assert!(row.index() < self.num_rows && column.index() < self.num_columns);
         .                   let (start, _) = self.range(row);
         .                   let (word_index, mask) = word_index_and_mask(column);
    28,730 ( 0.00%)          (self.words[start + word_index] & mask) != 0
    11,492 ( 0.00%)      }
         .           
         .               /// Returns those indices that are true in rows `a` and `b`. This
         .               /// is an *O*(*n*) operation where *n* is the number of elements
         .               /// (somewhat independent from the actual size of the
         .               /// intersection, in particular).
         .               pub fn intersect_rows(&self, row1: R, row2: R) -> Vec<C> {
         .                   assert!(row1.index() < self.num_rows && row2.index() < self.num_rows);
         .                   let (row1_start, row1_end) = self.range(row1);
-- line 1073 ----------------------------------------
-- line 1090 ----------------------------------------
         .           
         .               /// Adds the bits from row `read` to the bits from row `write`, and
         .               /// returns `true` if anything changed.
         .               ///
         .               /// This is used when computing transitive reachability because if
         .               /// you have an edge `write -> read`, because in that case
         .               /// `write` can reach everything that `read` can (and
         .               /// potentially more).
    12,777 ( 0.00%)      pub fn union_rows(&mut self, read: R, write: R) -> bool {
    67,375 ( 0.00%)          assert!(read.index() < self.num_rows && write.index() < self.num_rows);
    13,475 ( 0.00%)          let (read_start, read_end) = self.range(read);
         .                   let (write_start, write_end) = self.range(write);
         .                   let words = &mut self.words[..];
         .                   let mut changed = false;
         .                   for (read_index, write_index) in iter::zip(read_start..read_end, write_start..write_end) {
    72,959 ( 0.00%)              let word = words[write_index];
    40,425 ( 0.00%)              let new_word = word | words[read_index];
    13,475 ( 0.00%)              words[write_index] = new_word;
    68,073 ( 0.00%)              changed |= word != new_word;
         .                   }
         .                   changed
    38,331 ( 0.00%)      }
         .           
         .               /// Adds the bits from `with` to the bits from row `write`, and
         .               /// returns `true` if anything changed.
         .               pub fn union_row_with(&mut self, with: &BitSet<C>, write: R) -> bool {
         .                   assert!(write.index() < self.num_rows);
         .                   assert_eq!(with.domain_size(), self.num_columns);
         .                   let (write_start, write_end) = self.range(write);
         .                   let mut changed = false;
-- line 1119 ----------------------------------------
-- line 1209 ----------------------------------------
         .               /// Creates a new empty sparse bit matrix with no rows or columns.
         .               pub fn new(num_columns: usize) -> Self {
         .                   Self { num_columns, rows: IndexVec::new() }
         .               }
         .           
         .               fn ensure_row(&mut self, row: R) -> &mut HybridBitSet<C> {
         .                   // Instantiate any missing rows up to and including row `row` with an empty HybridBitSet.
         .                   // Then replace row `row` with a full HybridBitSet if necessary.
     6,609 ( 0.00%)          self.rows.get_or_insert_with(row, || HybridBitSet::new_empty(self.num_columns))
         .               }
         .           
         .               /// Sets the cell at `(row, column)` to true. Put another way, insert
         .               /// `column` to the bitset for `row`.
         .               ///
         .               /// Returns `true` if this changed the matrix.
         .               pub fn insert(&mut self, row: R, column: C) -> bool {
     7,544 ( 0.00%)          self.ensure_row(row).insert(column)
         .               }
         .           
         .               /// Sets the cell at `(row, column)` to false. Put another way, delete
         .               /// `column` from the bitset for `row`. Has no effect if `row` does not
         .               /// exist.
         .               ///
         .               /// Returns `true` if this changed the matrix.
         .               pub fn remove(&mut self, row: R, column: C) -> bool {
-- line 1233 ----------------------------------------
-- line 1255 ----------------------------------------
         .           
         .               /// Adds the bits from row `read` to the bits from row `write`, and
         .               /// returns `true` if anything changed.
         .               ///
         .               /// This is used when computing transitive reachability because if
         .               /// you have an edge `write -> read`, because in that case
         .               /// `write` can reach everything that `read` can (and
         .               /// potentially more).
   333,844 ( 0.00%)      pub fn union_rows(&mut self, read: R, write: R) -> bool {
    47,692 ( 0.00%)          if read == write || self.row(read).is_none() {
         .                       return false;
         .                   }
         .           
         .                   self.ensure_row(write);
    35,002 ( 0.00%)          if let (Some(read_row), Some(write_row)) = self.rows.pick2_mut(read, write) {
         .                       write_row.union(read_row)
         .                   } else {
         .                       unreachable!()
         .                   }
   429,228 ( 0.00%)      }
         .           
         .               /// Insert all bits in the given row.
         .               pub fn insert_all_into_row(&mut self, row: R) {
         .                   self.ensure_row(row).insert_all();
         .               }
         .           
         .               pub fn rows(&self) -> impl Iterator<Item = R> {
         .                   self.rows.indices()
-- line 1282 ----------------------------------------
-- line 1284 ----------------------------------------
         .           
         .               /// Iterates through all the columns set to true in a given row of
         .               /// the matrix.
         .               pub fn iter<'a>(&'a self, row: R) -> impl Iterator<Item = C> + 'a {
         .                   self.row(row).into_iter().flat_map(|r| r.iter())
         .               }
         .           
         .               pub fn row(&self, row: R) -> Option<&HybridBitSet<C>> {
   119,276 ( 0.00%)          if let Some(Some(row)) = self.rows.get(row) { Some(row) } else { None }
         .               }
         .           
         .               /// Interescts `row` with `set`. `set` can be either `BitSet` or
         .               /// `HybridBitSet`. Has no effect if `row` does not exist.
         .               ///
         .               /// Returns true if the row was changed.
         .               pub fn intersect_row<Set>(&mut self, row: R, set: &Set) -> bool
         .               where
-- line 1300 ----------------------------------------
-- line 1329 ----------------------------------------
         .                   HybridBitSet<C>: BitRelations<Set>,
         .               {
         .                   self.ensure_row(row).union(set)
         .               }
         .           }
         .           
         .           #[inline]
         .           fn num_words<T: Idx>(domain_size: T) -> usize {
   924,915 ( 0.01%)      (domain_size.index() + WORD_BITS - 1) / WORD_BITS
         .           }
         .           
         .           #[inline]
         .           fn word_index_and_mask<T: Idx>(elem: T) -> (usize, Word) {
         .               let elem = elem.index();
 5,501,830 ( 0.05%)      let word_index = elem / WORD_BITS;
   601,774 ( 0.01%)      let mask = 1 << (elem % WORD_BITS);
         .               (word_index, mask)
         .           }
         .           
         .           #[inline]
         .           fn max_bit(word: Word) -> usize {
        20 ( 0.00%)      WORD_BITS - 1 - word.leading_zeros() as usize
         .           }
         .           
         .           /// Integral type used to represent the bit set.
         .           pub trait FiniteBitSetTy:
         .               BitAnd<Output = Self>
         .               + BitAndAssign
         .               + BitOrAssign
         .               + Clone
-- line 1358 ----------------------------------------

 5,113,403 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/bit_set.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                   

-- line 70 ----------------------------------------
          .           
          .                   impl<'a, T> $name<'a, T> {
          .                       // Helper function for creating a slice from the iterator.
          .                       #[inline(always)]
          .                       fn make_slice(&self) -> &'a [T] {
          .                           // SAFETY: the iterator was created from a slice with pointer
          .                           // `self.ptr` and length `len!(self)`. This guarantees that all
          .                           // the prerequisites for `from_raw_parts` are fulfilled.
    144,153 ( 0.00%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
          .                       }
          .           
          .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
          .                       // returning the old start.
          .                       // Unsafe because the offset must not exceed `self.len()`.
          .                       #[inline(always)]
          .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
          .                           if mem::size_of::<T>() == 0 {
          .                               zst_shrink!(self, offset);
          .                               self.ptr.as_ptr()
          .                           } else {
          .                               let old = self.ptr.as_ptr();
          .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
          .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
  1,168,587 ( 0.01%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
          .                               old
          .                           }
          .                       }
          .           
          .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
          .                       // returning the new end.
          .                       // Unsafe because the offset must not exceed `self.len()`.
          .                       #[inline(always)]
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
          .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
          .                           if mem::size_of::<T>() == 0 {
          .                               zst_shrink!(self, offset);
          .                               self.ptr.as_ptr()
          .                           } else {
          .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
          .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
          .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
      2,917 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
          .                               self.end
          .                           }
          .                       }
          .                   }
          .           
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   impl<T> ExactSizeIterator for $name<'_, T> {
          .                       #[inline(always)]
          .                       fn len(&self) -> usize {
    280,957 ( 0.00%)                  len!(self)
          .                       }
          .           
          .                       #[inline(always)]
          .                       fn is_empty(&self) -> bool {
          .                           is_empty!(self)
          .                       }
          .                   }
          .           
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
          .                       fn next(&mut self) -> Option<$elem> {
          .                           // could be implemented with slices, but this avoids bounds checks
          .           
          .                           // SAFETY: `assume` calls are safe since a slice's start pointer
          .                           // must be non-null, and slices over non-ZSTs must also have a
          .                           // non-null end pointer. The call to `next_unchecked!` is safe
          .                           // since we check if the iterator is empty first.
          .                           unsafe {
    520,502 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
          .                               if mem::size_of::<T>() != 0 {
    126,717 ( 0.00%)                          assume(!self.end.is_null());
          .                               }
134,384,626 ( 1.17%)                      if is_empty!(self) {
          .                                   None
          .                               } else {
          7 ( 0.00%)                          Some(next_unchecked!(self))
          .                               }
          .                           }
          .                       }
          .           
          .                       #[inline]
          .                       fn size_hint(&self) -> (usize, Option<usize>) {
  4,698,237 ( 0.04%)                  let exact = len!(self);
          .                           (exact, Some(exact))
          .                       }
          .           
          .                       #[inline]
          .                       fn count(self) -> usize {
          .                           len!(self)
          .                       }
          .           
          .                       #[inline]
          .                       fn nth(&mut self, n: usize) -> Option<$elem> {
     87,983 ( 0.00%)                  if n >= len!(self) {
          .                               // This iterator is now empty.
          .                               if mem::size_of::<T>() == 0 {
          .                                   // We have to do it this way as `ptr` may never be 0, but `end`
          .                                   // could be (due to wrapping).
          .                                   self.end = self.ptr.as_ptr();
          .                               } else {
          .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
          .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
          .                       // faster to compile.
          .                       #[inline]
          .                       fn for_each<F>(mut self, mut f: F)
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item),
          .                       {
          .                           while let Some(x) = self.next() {
      6,964 ( 0.00%)                      f(x);
          .                           }
          .                       }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          .                       fn all<F>(&mut self, mut f: F) -> bool
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> bool,
          .                       {
      3,492 ( 0.00%)                  while let Some(x) = self.next() {
     21,653 ( 0.00%)                      if !f(x) {
          .                                   return false;
          .                               }
          .                           }
          .                           true
          .                       }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
        184 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> bool,
          .                       {
  2,075,907 ( 0.02%)                  while let Some(x) = self.next() {
    925,615 ( 0.01%)                      if f(x) {
          .                                   return true;
          .                               }
          .                           }
          .                           false
        184 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
          .                       where
          .                           Self: Sized,
          .                           P: FnMut(&Self::Item) -> bool,
          .                       {
    230,618 ( 0.00%)                  while let Some(x) = self.next() {
    115,315 ( 0.00%)                      if predicate(&x) {
          .                                   return Some(x);
          .                               }
          .                           }
          .                           None
        804 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> Option<B>,
          .                       {
     71,373 ( 0.00%)                  while let Some(x) = self.next() {
    344,234 ( 0.00%)                      if let Some(y) = f(x) {
     32,975 ( 0.00%)                          return Some(y);
          .                               }
          .                           }
          .                           None
     10,850 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile. Also, the `assume` avoids a bounds check.
          .                       #[inline]
          .                       #[rustc_inherit_overflow_checks]
          .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
          .                           Self: Sized,
          .                           P: FnMut(Self::Item) -> bool,
          .                       {
          .                           let n = len!(self);
          .                           let mut i = 0;
          .                           while let Some(x) = self.next() {
  4,447,127 ( 0.04%)                      if predicate(x) {
          .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
          .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
          .                                   unsafe { assume(i < n) };
          .                                   return Some(i);
          .                               }
          .                               i += 1;
          .                           }
          .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
          .                       // faster to compile. Also, the `assume` avoids a bounds check.
          .                       #[inline]
          .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
          .                           P: FnMut(Self::Item) -> bool,
          .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
          .                       {
          .                           let n = len!(self);
          .                           let mut i = n;
     79,031 ( 0.00%)                  while let Some(x) = self.next_back() {
  1,043,965 ( 0.01%)                      i -= 1;
    852,955 ( 0.01%)                      if predicate(x) {
          .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
          .                                   // and is only decreasing.
          .                                   unsafe { assume(i < n) };
          .                                   return Some(i);
          .                               }
          .                           }
          .                           None
          .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
          .                           // the returned references is guaranteed to refer to an element
          .                           // of the slice and thus guaranteed to be valid.
          .                           //
          .                           // Also note that the caller also guarantees that we're never
          .                           // called with the same index again, and that no other methods
          .                           // that will access this subslice are called, so it is valid
          .                           // for the returned reference to be mutable in the case of
          .                           // `IterMut`
    199,870 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
          .                       }
          .           
          .                       $($extra)*
          .                   }
          .           
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
          .                       #[inline]
-- line 348 ----------------------------------------
-- line 349 ----------------------------------------
          .                       fn next_back(&mut self) -> Option<$elem> {
          .                           // could be implemented with slices, but this avoids bounds checks
          .           
          .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
          .                           // and slices over non-ZSTs must also have a non-null end pointer.
          .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
          .                           // empty first.
          .                           unsafe {
      3,675 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
          .                               if mem::size_of::<T>() != 0 {
      3,698 ( 0.00%)                          assume(!self.end.is_null());
          .                               }
  3,369,833 ( 0.03%)                      if is_empty!(self) {
          .                                   None
          .                               } else {
          .                                   Some(next_back_unchecked!(self))
          .                               }
          .                           }
          .                       }
          .           
          .                       #[inline]
-- line 369 ----------------------------------------

 26,842,933 ( 0.23%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 108 ----------------------------------------
         .                   suppress_errors: bool,
         .               },
         .           }
         .           
         .           impl RegionckMode {
         .               /// Indicates that the MIR borrowck will repeat these region
         .               /// checks, so we should ignore errors if NLL is (unconditionally)
         .               /// enabled.
       874 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
         .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
         .                   // this always `true` and then proceed to eliminate the dead code.
       874 ( 0.00%)          match tcx.borrowck_mode() {
         .                       // If we're on Migrate mode, report AST region errors
         .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
         .           
         .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
         .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
         .                   }
     1,748 ( 0.00%)      }
         .           }
         .           
         .           /// This type contains all the things within `InferCtxt` that sit within a
         .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
         .           /// operations are hot enough that we want only one call to `borrow_mut` per
         .           /// call to `start_snapshot` and `rollback_to`.
         .           pub struct InferCtxtInner<'tcx> {
         .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
         .               /// type instantiations (`ty::Infer`) to the actual opaque
         .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
         .               /// opaque type inference variables to their corresponding
         .               /// opaque type.
         .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
         .           }
         .           
         .           impl<'tcx> InferCtxtInner<'tcx> {
   135,625 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
   922,250 ( 0.01%)          InferCtxtInner {
         .                       projection_cache: Default::default(),
         .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
         .                       undo_log: InferCtxtUndoLogs::default(),
         .                       const_unification_storage: ut::UnificationTableStorage::new(),
         .                       int_unification_storage: ut::UnificationTableStorage::new(),
         .                       float_unification_storage: ut::UnificationTableStorage::new(),
    81,375 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
         .                       region_obligations: vec![],
         .                       opaque_types: Default::default(),
         .                       opaque_types_vars: Default::default(),
         .                   }
   162,750 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
         .                   &self.region_obligations
         .               }
         .           
         .               #[inline]
         .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
    79,502 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
         .               }
         .           
         .               #[inline]
         .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
 2,017,912 ( 0.02%)          self.type_variable_storage.with_log(&mut self.undo_log)
         .               }
         .           
         .               #[inline]
         .               fn int_unification_table(
         .                   &mut self,
         .               ) -> ut::UnificationTable<
         .                   ut::InPlace<
         .                       ty::IntVid,
         .                       &mut ut::UnificationStorage<ty::IntVid>,
         .                       &mut InferCtxtUndoLogs<'tcx>,
         .                   >,
         .               > {
 5,742,423 ( 0.05%)          self.int_unification_storage.with_log(&mut self.undo_log)
         .               }
         .           
         .               #[inline]
         .               fn float_unification_table(
         .                   &mut self,
         .               ) -> ut::UnificationTable<
         .                   ut::InPlace<
         .                       ty::FloatVid,
-- line 258 ----------------------------------------
-- line 268 ----------------------------------------
         .                   &mut self,
         .               ) -> ut::UnificationTable<
         .                   ut::InPlace<
         .                       ty::ConstVid<'tcx>,
         .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
         .                       &mut InferCtxtUndoLogs<'tcx>,
         .                   >,
         .               > {
    41,726 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
         .               }
         .           
         .               #[inline]
         .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
   124,598 ( 0.00%)          self.region_constraint_storage
         .                       .as_mut()
         .                       .expect("region constraints already solved")
   147,453 ( 0.00%)              .with_log(&mut self.undo_log)
         .               }
         .           }
         .           
         .           pub struct InferCtxt<'a, 'tcx> {
         .               pub tcx: TyCtxt<'tcx>,
         .           
         .               /// The `DefId` of the item in whose context we are performing inference or typeck.
         .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
         .               /// item we are type-checking, and just consider those names as
         .               /// part of the root universe. So this would only get incremented
         .               /// when we enter into a higher-ranked (`for<..>`) type or trait
         .               /// bound.
         .               universe: Cell<ty::UniverseIndex>,
         .           }
         .           
         .           /// See the `error_reporting` module for more details.
   198,432 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
         .           pub enum ValuePairs<'tcx> {
         .               Types(ExpectedFound<Ty<'tcx>>),
         .               Regions(ExpectedFound<ty::Region<'tcx>>),
         .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
         .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
         .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
         .           }
         .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
         .           pub struct TypeTrace<'tcx> {
         .               cause: ObligationCause<'tcx>,
         .               values: ValuePairs<'tcx>,
         .           }
         .           
         .           /// The origin of a `r1 <= r2` constraint.
         .           ///
         .           /// See `error_reporting` module for more details
   185,003 ( 0.00%)  #[derive(Clone, Debug)]
         .           pub enum SubregionOrigin<'tcx> {
         .               /// Arose from a subtyping relation
    10,042 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
         .           
         .               /// When casting `&'a T` to an `&'b Trait` object,
         .               /// relating `'a` to `'b`
         .               RelateObjectBound(Span),
         .           
         .               /// Some type parameter was instantiated with the given type,
         .               /// and that type must outlive some region.
     2,172 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
         .           
         .               /// The given region parameter was instantiated with a region
         .               /// that must outlive some other region.
         .               RelateRegionParamBound(Span),
         .           
         .               /// Creating a pointer `b` to contents of another reference
         .               Reborrow(Span),
         .           
         .               /// Creating a pointer `b` to contents of an upvar
         .               ReborrowUpvar(Span, ty::UpvarId),
         .           
         .               /// Data with type `Ty<'tcx>` was borrowed
     1,625 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
         .           
         .               /// (&'a &'b T) where a >= b
     1,726 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
         .           
         .               /// Comparing the signature and requirements of an impl method against
         .               /// the containing trait.
         .               CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
         .           
         .               /// Comparing the signature and requirements of an impl associated type
         .               /// against the containing trait
         .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
-- line 426 ----------------------------------------
-- line 554 ----------------------------------------
         .               defining_use_anchor: Option<LocalDefId>,
         .           }
         .           
         .           pub trait TyCtxtInferExt<'tcx> {
         .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
         .           }
         .           
         .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
    27,125 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
    81,375 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
    27,125 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> InferCtxtBuilder<'tcx> {
         .               /// Used only by `rustc_typeck` during body type-checking/inference,
         .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
         .               /// Will also change the scope for opaque type defining use checks to the given owner.
    21,528 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
    26,312 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
    11,960 ( 0.00%)          self.with_opaque_type_inference(table_owner)
    16,744 ( 0.00%)      }
         .           
         .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
         .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
         .               ///
         .               /// It is only meant to be called in two places, for typeck
         .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
         .               /// in mir borrowck.
     1,924 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
       962 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
     6,708 ( 0.00%)          self
     2,886 ( 0.00%)      }
         .           
         .               /// Given a canonical value `C` as a starting point, create an
         .               /// inference context that contains each of the bound values
         .               /// within instantiated as a fresh variable. The `f` closure is
         .               /// invoked with the new infcx, along with the instantiated value
         .               /// `V` and a substitution `S`. This substitution `S` maps from
         .               /// the bound values in `C` to their instantiated values in `V`
         .               /// (in other words, `S(C) = V`).
    41,798 ( 0.00%)      pub fn enter_with_canonical<T, R>(
         .                   &mut self,
         .                   span: Span,
         .                   canonical: &Canonical<'tcx, T>,
         .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
         .               ) -> R
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   self.enter(|infcx| {
    54,926 ( 0.00%)              let (value, subst) =
     3,805 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
    82,787 ( 0.00%)              f(infcx, value, subst)
         .                   })
    45,290 ( 0.00%)      }
         .           
   155,948 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
    75,097 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
         .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
 1,163,135 ( 0.01%)          f(InferCtxt {
         .                       tcx,
         .                       defining_use_anchor,
         .                       in_progress_typeck_results,
    27,125 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
         .                       lexical_region_resolutions: RefCell::new(None),
         .                       selection_cache: Default::default(),
         .                       evaluation_cache: Default::default(),
         .                       reported_trait_errors: Default::default(),
         .                       reported_closure_mismatch: Default::default(),
         .                       tainted_by_errors_flag: Cell::new(false),
    27,125 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
         .                       in_snapshot: Cell::new(false),
         .                       skip_leak_check: Cell::new(false),
         .                       universe: Cell::new(ty::UniverseIndex::ROOT),
         .                   })
   167,719 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx, T> InferOk<'tcx, T> {
         .               pub fn unit(self) -> InferOk<'tcx, ()> {
         .                   InferOk { value: (), obligations: self.obligations }
         .               }
         .           
         .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
         .               pub fn into_value_registering_obligations(
         .                   self,
         .                   infcx: &InferCtxt<'_, 'tcx>,
         .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
         .               ) -> T {
       482 ( 0.00%)          let InferOk { value, obligations } = self;
     1,932 ( 0.00%)          for obligation in obligations {
         .                       fulfill_cx.register_predicate_obligation(infcx, obligation);
         .                   }
         .                   value
         .               }
         .           }
         .           
         .           impl<'tcx> InferOk<'tcx, ()> {
    21,883 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
    87,532 ( 0.00%)          self.obligations
    21,883 ( 0.00%)      }
         .           }
         .           
         .           #[must_use = "once you start a snapshot, you should always consume it"]
         .           pub struct CombinedSnapshot<'a, 'tcx> {
         .               undo_snapshot: Snapshot<'tcx>,
         .               region_constraints_snapshot: RegionSnapshot,
         .               universe: ty::UniverseIndex,
         .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
         .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
         .                   debug!("canonical consts: {:?}", &canonical.value);
         .           
         .                   self.tcx.try_unify_abstract_consts(canonical.value)
         .               }
         .           
         .               pub fn is_in_snapshot(&self) -> bool {
         .                   self.in_snapshot.get()
    96,221 ( 0.00%)      }
         .           
   986,264 ( 0.01%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
 1,109,547 ( 0.01%)          t.fold_with(&mut self.freshener())
 1,109,547 ( 0.01%)      }
         .           
         .               /// Returns the origin of the type variable identified by `vid`, or `None`
         .               /// if this is not a type variable.
         .               ///
         .               /// No attempt is made to resolve `ty`.
     6,798 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
    13,596 ( 0.00%)          match *ty.kind() {
     3,391 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
    13,564 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
         .                       }
         8 ( 0.00%)              _ => None,
         .                   }
    13,596 ( 0.00%)      }
         .           
   123,283 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
         .                   freshen::TypeFreshener::new(self, false)
   123,283 ( 0.00%)      }
         .           
         .               /// Like `freshener`, but does not replace `'static` regions.
   255,847 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
         .                   freshen::TypeFreshener::new(self, true)
   255,847 ( 0.00%)      }
         .           
     4,036 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
     2,018 ( 0.00%)          let mut inner = self.inner.borrow_mut();
     2,018 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
         .                       .type_variables()
         .                       .unsolved_variables()
         .                       .into_iter()
     6,781 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
         .                       .collect();
         .                   vars.extend(
         .                       (0..inner.int_unification_table().len())
         .                           .map(|i| ty::IntVid { index: i as u32 })
    42,312 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
         8 ( 0.00%)                  .map(|v| self.tcx.mk_int_var(v)),
         .                   );
         .                   vars.extend(
         .                       (0..inner.float_unification_table().len())
         .                           .map(|i| ty::FloatVid { index: i as u32 })
         .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
         .                           .map(|v| self.tcx.mk_float_var(v)),
         .                   );
         .                   vars
     7,063 ( 0.00%)      }
         .           
   132,864 ( 0.00%)      fn combine_fields(
         .                   &'a self,
         .                   trace: TypeTrace<'tcx>,
         .                   param_env: ty::ParamEnv<'tcx>,
         .               ) -> CombineFields<'a, 'tcx> {
   533,000 ( 0.00%)          CombineFields {
         .                       infcx: self,
 1,332,500 ( 0.01%)              trace,
         .                       cause: None,
         .                       param_env,
         .                       obligations: PredicateObligations::new(),
         .                   }
   132,864 ( 0.00%)      }
         .           
         .               /// Clear the "currently in a snapshot" flag, invoke the closure,
         .               /// then restore the flag to its original value. This flag is a
         .               /// debugging measure designed to detect cases where we start a
         .               /// snapshot, create type variables, and register obligations
         .               /// which may involve those type variables in the fulfillment cx,
         .               /// potentially leaving "dangling type variables" behind.
         .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 755 ----------------------------------------
         .               /// better than grovelling through megabytes of `RUSTC_LOG` output.
         .               ///
         .               /// HOWEVER, in some cases the flag is unhelpful. In particular, we
         .               /// sometimes create a "mini-fulfilment-cx" in which we enroll
         .               /// obligations. As long as this fulfillment cx is fully drained
         .               /// before we return, this is not a problem, as there won't be any
         .               /// escaping obligations in the main cx. In those cases, you can
         .               /// use this function.
        56 ( 0.00%)      pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
         .               where
         .                   F: FnOnce(&Self) -> R,
         .               {
         .                   let flag = self.in_snapshot.replace(false);
    13,977 ( 0.00%)          let result = func(self);
         .                   self.in_snapshot.set(flag);
         .                   result
        63 ( 0.00%)      }
         .           
   766,204 ( 0.01%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
         .                   debug!("start_snapshot()");
         .           
         .                   let in_snapshot = self.in_snapshot.replace(true);
         .           
         .                   let mut inner = self.inner.borrow_mut();
         .           
 2,298,612 ( 0.02%)          CombinedSnapshot {
         .                       undo_snapshot: inner.undo_log.start_snapshot(),
         .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
         .                       universe: self.universe(),
         .                       was_in_snapshot: in_snapshot,
         .                       // Borrow typeck results "in progress" (i.e., during typeck)
         .                       // to ban writes from within a snapshot to them.
   383,102 ( 0.00%)              _in_progress_typeck_results: self
         .                           .in_progress_typeck_results
         .                           .map(|typeck_results| typeck_results.borrow()),
         .                   }
 1,532,408 ( 0.01%)      }
         .           
 1,265,594 ( 0.01%)      #[instrument(skip(self, snapshot), level = "debug")]
         .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
         .                   let CombinedSnapshot {
   115,054 ( 0.00%)              undo_snapshot,
   115,054 ( 0.00%)              region_constraints_snapshot,
   115,054 ( 0.00%)              universe,
   115,054 ( 0.00%)              was_in_snapshot,
   230,108 ( 0.00%)              _in_progress_typeck_results,
         .                   } = snapshot;
         .           
         .                   self.in_snapshot.set(was_in_snapshot);
         .                   self.universe.set(universe);
         .           
         .                   let mut inner = self.inner.borrow_mut();
   115,054 ( 0.00%)          inner.rollback_to(undo_snapshot);
         .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
         .               }
         .           
 4,020,720 ( 0.04%)      #[instrument(skip(self, snapshot), level = "debug")]
         .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
         .                   let CombinedSnapshot {
   268,048 ( 0.00%)              undo_snapshot,
         .                       region_constraints_snapshot: _,
         .                       universe: _,
   268,048 ( 0.00%)              was_in_snapshot,
   536,096 ( 0.00%)              _in_progress_typeck_results,
         .                   } = snapshot;
         .           
         .                   self.in_snapshot.set(was_in_snapshot);
         .           
         .                   self.inner.borrow_mut().commit(undo_snapshot);
         .               }
         .           
         .               /// Executes `f` and commit the bindings.
   224,934 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
   275,814 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
         .               where
         .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
         .               {
    25,074 ( 0.00%)          let snapshot = self.start_snapshot();
    78,717 ( 0.00%)          let r = f(&snapshot);
   175,518 ( 0.00%)          self.commit_from(snapshot);
   150,692 ( 0.00%)          r
         .               }
         .           
         .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
 1,893,605 ( 0.02%)      #[instrument(skip(self, f), level = "debug")]
 2,342,573 ( 0.02%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
         .               where
         .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
         .               {
   372,301 ( 0.00%)          let snapshot = self.start_snapshot();
 1,072,494 ( 0.01%)          let r = f(&snapshot);
         .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
   357,452 ( 0.00%)          match r {
         .                       Ok(_) => {
 1,732,270 ( 0.02%)                  self.commit_from(snapshot);
         .                       }
         .                       Err(_) => {
   696,990 ( 0.01%)                  self.rollback_to("commit_if_ok -- error", snapshot);
         .                       }
         .                   }
 1,962,183 ( 0.02%)          r
         .               }
         .           
         .               /// Execute `f` then unroll any bindings it creates.
   310,912 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
   365,977 ( 0.00%)      pub fn probe<R, F>(&self, f: F) -> R
         .               where
         .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
         .               {
    87,268 ( 0.00%)          let snapshot = self.start_snapshot();
   139,295 ( 0.00%)          let r = f(&snapshot);
   407,989 ( 0.00%)          self.rollback_to("probe", snapshot);
    51,537 ( 0.00%)          r
         .               }
         .           
         .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
     1,773 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
     2,364 ( 0.00%)      pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
         .               where
         .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
         .               {
       394 ( 0.00%)          let snapshot = self.start_snapshot();
       197 ( 0.00%)          let was_skip_leak_check = self.skip_leak_check.get();
       394 ( 0.00%)          if should_skip {
         .                       self.skip_leak_check.set(true);
         .                   }
       788 ( 0.00%)          let r = f(&snapshot);
     1,773 ( 0.00%)          self.rollback_to("probe", snapshot);
         .                   self.skip_leak_check.set(was_skip_leak_check);
     2,364 ( 0.00%)          r
         .               }
         .           
         .               /// Scan the constraints produced since `snapshot` began and returns:
         .               ///
         .               /// - `None` -- if none of them involve "region outlives" constraints
         .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
         .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
    25,828 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
         .                   &self,
         .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
         .               ) -> Option<bool> {
    51,656 ( 0.00%)          self.inner
         .                       .borrow_mut()
         .                       .unwrap_region_constraints()
         .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
    38,742 ( 0.00%)      }
         .           
         .               pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
         .                   self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
         .               }
         .           
     1,332 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
         .               where
         .                   T: at::ToTrace<'tcx>,
         .               {
         .                   let origin = &ObligationCause::dummy();
         .                   self.probe(|_| {
         .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
         .                           // Ignore obligations, since we are unrolling
         .                           // everything anyway.
         .                       })
         .                   })
       999 ( 0.00%)      }
         .           
    11,580 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
         .               where
         .                   T: at::ToTrace<'tcx>,
         .               {
         .                   let origin = &ObligationCause::dummy();
         .                   self.probe(|_| {
         .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
         .                           // Ignore obligations, since we are unrolling
         .                           // everything anyway.
         .                       })
         .                   })
     8,685 ( 0.00%)      }
         .           
    99,610 ( 0.00%)      #[instrument(skip(self), level = "debug")]
         .               pub fn sub_regions(
         .                   &self,
         .                   origin: SubregionOrigin<'tcx>,
         .                   a: ty::Region<'tcx>,
         .                   b: ty::Region<'tcx>,
         .               ) {
    89,649 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
         .               }
         .           
         .               /// Require that the region `r` be equal to one of the regions in
         .               /// the set `regions`.
         .               #[instrument(skip(self), level = "debug")]
         .               pub fn member_constraint(
         .                   &self,
         .                   opaque_type_def_id: DefId,
-- line 947 ----------------------------------------
-- line 969 ----------------------------------------
         .               /// to `subtype_predicate` -- that is, "coercing" `a` to `b` winds up
         .               /// actually requiring `a <: b`. This is of course a valid coercion,
         .               /// but it's not as flexible as `FnCtxt::coerce` would be.
         .               ///
         .               /// (We may refactor this in the future, but there are a number of
         .               /// practical obstacles. Among other things, `FnCtxt::coerce` presently
         .               /// records adjustments that are required on the HIR in order to perform
         .               /// the coercion, and we don't currently have a way to manage that.)
       333 ( 0.00%)      pub fn coerce_predicate(
         .                   &self,
         .                   cause: &ObligationCause<'tcx>,
         .                   param_env: ty::ParamEnv<'tcx>,
         .                   predicate: ty::PolyCoercePredicate<'tcx>,
         .               ) -> Option<InferResult<'tcx, ()>> {
       222 ( 0.00%)          let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
         .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
         .                       a: p.a,
         .                       b: p.b,
         .                   });
       555 ( 0.00%)          self.subtype_predicate(cause, param_env, subtype_predicate)
       444 ( 0.00%)      }
         .           
     6,912 ( 0.00%)      pub fn subtype_predicate(
         .                   &self,
         .                   cause: &ObligationCause<'tcx>,
         .                   param_env: ty::ParamEnv<'tcx>,
         .                   predicate: ty::PolySubtypePredicate<'tcx>,
         .               ) -> Option<InferResult<'tcx, ()>> {
         .                   // Check for two unresolved inference variables, in which case we can
         .                   // make no progress. This is partly a micro-optimization, but it's
         .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
         .                   // earlier that they are sub-unified).
         .                   //
         .                   // Note that we can just skip the binders here because
         .                   // type variables can't (at present, at
         .                   // least) capture any of the things bound by this binder.
         .                   //
         .                   // Note that this sub here is not just for diagnostics - it has semantic
         .                   // effects as well.
       576 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
       576 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
     3,726 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
       774 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
         .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
       774 ( 0.00%)                  return None;
         .                       }
         .                       _ => {}
         .                   }
         .           
         .                   Some(self.commit_if_ok(|_snapshot| {
       189 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
         .                           self.replace_bound_vars_with_placeholders(predicate);
         .           
       378 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
         .           
         .                       Ok(ok.unit())
         .                   }))
     5,184 ( 0.00%)      }
         .           
    18,372 ( 0.00%)      pub fn region_outlives_predicate(
         .                   &self,
         .                   cause: &traits::ObligationCause<'tcx>,
         .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
         .               ) -> UnitResult<'tcx> {
         .                   self.commit_if_ok(|_snapshot| {
         .                       let ty::OutlivesPredicate(r_a, r_b) =
         .                           self.replace_bound_vars_with_placeholders(predicate);
         .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
         .                           RelateRegionParamBound(cause.span)
         .                       });
    15,310 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
         .                       Ok(())
         .                   })
    12,248 ( 0.00%)      }
         .           
         .               /// Number of type variables created so far.
       135 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
         .                   self.inner.borrow_mut().type_variables().num_vars()
       270 ( 0.00%)      }
         .           
   102,492 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
   512,460 ( 0.00%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
   153,738 ( 0.00%)      }
         .           
    79,140 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
   347,046 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
   118,710 ( 0.00%)      }
         .           
     1,448 ( 0.00%)      pub fn next_ty_var_in_universe(
         .                   &self,
         .                   origin: TypeVariableOrigin,
         .                   universe: ty::UniverseIndex,
         .               ) -> Ty<'tcx> {
     7,964 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
       724 ( 0.00%)          self.tcx.mk_ty_var(vid)
     2,172 ( 0.00%)      }
         .           
         .               pub fn next_const_var(
         .                   &self,
         .                   ty: Ty<'tcx>,
         .                   origin: ConstVariableOrigin,
         .               ) -> &'tcx ty::Const<'tcx> {
         .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
         .               }
-- line 1074 ----------------------------------------
-- line 1090 ----------------------------------------
         .               pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
         .                   self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
         .                       origin,
         .                       val: ConstVariableValue::Unknown { universe: self.universe() },
         .                   })
         .               }
         .           
         .               fn next_int_var_id(&self) -> IntVid {
    53,165 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
         .               }
         .           
    31,899 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
         .                   self.tcx.mk_int_var(self.next_int_var_id())
    42,532 ( 0.00%)      }
         .           
         .               fn next_float_var_id(&self) -> FloatVid {
         .                   self.inner.borrow_mut().float_unification_table().new_key(None)
         .               }
         .           
         .               pub fn next_float_var(&self) -> Ty<'tcx> {
         .                   self.tcx.mk_float_var(self.next_float_var_id())
         .               }
         .           
         .               /// Creates a fresh region variable with the next available index.
         .               /// The variable will be created in the maximum universe created
         .               /// thus far, allowing it to name any region created thus far.
    15,065 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
   279,058 ( 0.00%)          self.next_region_var_in_universe(origin, self.universe())
    30,130 ( 0.00%)      }
         .           
         .               /// Creates a fresh region variable with the next available index
         .               /// in the given universe; typically, you can use
         .               /// `next_region_var` and just use the maximal universe.
   111,942 ( 0.00%)      pub fn next_region_var_in_universe(
         .                   &self,
         .                   origin: RegionVariableOrigin,
         .                   universe: ty::UniverseIndex,
         .               ) -> ty::Region<'tcx> {
         .                   let region_var =
   727,623 ( 0.01%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
   279,855 ( 0.00%)          self.tcx.mk_region(ty::ReVar(region_var))
   167,913 ( 0.00%)      }
         .           
         .               /// Return the universe that the region `r` was created in.  For
         .               /// most regions (e.g., `'static`, named regions from the user,
         .               /// etc) this is the root universe U0. For inference variables or
         .               /// placeholders, however, it will return the universe which which
         .               /// they are associated.
    12,576 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
         .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
    18,864 ( 0.00%)      }
         .           
         .               /// Number of region variables created so far.
     7,872 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
         .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
    11,808 ( 0.00%)      }
         .           
         .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
    18,380 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
         .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
    36,760 ( 0.00%)      }
         .           
         .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
       237 ( 0.00%)      pub fn next_nll_region_var_in_universe(
         .                   &self,
         .                   origin: NllRegionVariableOrigin,
         .                   universe: ty::UniverseIndex,
         .               ) -> ty::Region<'tcx> {
     1,787 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
       474 ( 0.00%)      }
         .           
   543,888 ( 0.00%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
   315,686 ( 0.00%)          match param.kind {
         .                       GenericParamDefKind::Lifetime => {
         .                           // Create a region inference variable for the given
         .                           // region parameter definition.
    12,122 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
         .                       }
         .                       GenericParamDefKind::Type { .. } => {
         .                           // Create a type inference variable for the given
         .                           // type parameter definition. The substitutions are
         .                           // for actual parameters that may be referred to by
         .                           // the default of this type parameter, if it exists.
         .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
         .                           // used in a path such as `Foo::<T, U>::new()` will
         .                           // use an inference variable for `C` with `[T, U]`
         .                           // as the substitutions for the default, `(T, U)`.
   203,540 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
         .                               self.universe(),
   254,425 ( 0.00%)                      TypeVariableOrigin {
         .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
    50,885 ( 0.00%)                              param.name,
    50,885 ( 0.00%)                              Some(param.def_id),
         .                                   ),
         .                                   span,
         .                               },
         .                           );
         .           
    50,885 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
         .                       }
         .                       GenericParamDefKind::Const { .. } => {
         .                           let origin = ConstVariableOrigin {
         .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
         .                                   param.name,
         .                                   param.def_id,
         .                               ),
         .                               span,
         .                           };
         .                           let const_var_id =
    54,769 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
         .                                   origin,
         .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
         .                               });
     4,979 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
         .                       }
         .                   }
    39,832 ( 0.00%)      }
         .           
         .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
         .               /// type/region parameter to a fresh inference variable.
   116,937 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
   562,954 ( 0.00%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
    77,958 ( 0.00%)      }
         .           
         .               /// Returns `true` if errors have been reported since this infcx was
         .               /// created. This is sometimes used as a heuristic to skip
         .               /// reporting errors that often occur as a result of earlier
         .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
         .               /// inference variables, regionck errors).
     8,548 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
         .                   debug!(
         .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
         .                        tainted_by_errors_flag={})",
         .                       self.tcx.sess.err_count(),
         .                       self.err_count_on_creation,
         .                       self.tainted_by_errors_flag.get()
         .                   );
         .           
    90,530 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
         .                       return true; // errors reported since this infcx was made
         .                   }
         .                   self.tainted_by_errors_flag.get()
    12,822 ( 0.00%)      }
         .           
         .               /// Set the "tainted by errors" flag to true. We call this when we
         .               /// observe an error from a prior pass.
         .               pub fn set_tainted_by_errors(&self) {
         .                   debug!("set_tainted_by_errors()");
         .                   self.tainted_by_errors_flag.set(true)
         .               }
         .           
         .               /// Process the region constraints and return any any errors that
         .               /// result. After this, no more unification operations should be
         .               /// done -- or the compiler will panic -- but it is legal to use
         .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
    70,714 ( 0.00%)      pub fn resolve_regions(
         .                   &self,
         .                   region_context: DefId,
         .                   outlives_env: &OutlivesEnvironment<'tcx>,
         .                   mode: RegionckMode,
         .               ) -> Vec<RegionResolutionError<'tcx>> {
   191,938 ( 0.00%)          let (var_infos, data) = {
         .                       let mut inner = self.inner.borrow_mut();
         .                       let inner = &mut *inner;
    10,102 ( 0.00%)              assert!(
    30,306 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
         .                           "region_obligations not empty: {:#?}",
         .                           inner.region_obligations
         .                       );
         .                       inner
         .                           .region_constraint_storage
         .                           .take()
         .                           .expect("regions already resolved")
         .                           .with_log(&mut inner.undo_log)
         .                           .into_infos_and_data()
    10,102 ( 0.00%)          };
         .           
         .                   let region_rels =
    10,102 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
         .           
    90,918 ( 0.00%)          let (lexical_region_resolutions, errors) =
   242,448 ( 0.00%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
         .           
    40,408 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
    10,102 ( 0.00%)          assert!(old_value.is_none());
         .           
         .                   errors
    90,918 ( 0.00%)      }
         .           
         .               /// Process the region constraints and report any errors that
         .               /// result. After this, no more unification operations should be
         .               /// done -- or the compiler will panic -- but it is legal to use
         .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   101,020 ( 0.00%)      pub fn resolve_regions_and_report_errors(
         .                   &self,
         .                   region_context: DefId,
         .                   outlives_env: &OutlivesEnvironment<'tcx>,
         .                   mode: RegionckMode,
         .               ) {
    20,204 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
         .           
    30,306 ( 0.00%)          if !self.is_tainted_by_errors() {
         .                       // As a heuristic, just skip reporting region errors
         .                       // altogether if other errors have been reported while
         .                       // this infcx was in use.  This is totally hokey but
         .                       // otherwise we have a hard time separating legit region
         .                       // errors from silly ones.
    20,204 ( 0.00%)              self.report_region_errors(&errors);
         .                   }
    50,510 ( 0.00%)      }
         .           
         .               /// Obtains (and clears) the current set of region
         .               /// constraints. The inference context is still usable: further
         .               /// unifications will simply add new constraints.
         .               ///
         .               /// This method is not meant to be used with normal lexical region
         .               /// resolution. Rather, it is used in the NLL mode as a kind of
         .               /// interim hack: basically we run normal type-check and generate
-- line 1307 ----------------------------------------
-- line 1319 ----------------------------------------
         .               }
         .           
         .               /// Gives temporary access to the region constraint data.
         .               pub fn with_region_constraints<R>(
         .                   &self,
         .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
         .               ) -> R {
         .                   let mut inner = self.inner.borrow_mut();
    17,000 ( 0.00%)          op(inner.unwrap_region_constraints().data())
         .               }
         .           
         .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
         .                   let mut inner = self.inner.borrow_mut();
         .                   let inner = &mut *inner;
         .                   inner
         .                       .region_constraint_storage
         .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
         .                       .var_origin(vid)
         .               }
         .           
         .               /// Takes ownership of the list of variable regions. This implies
         .               /// that all the region constraints have already been taken, and
         .               /// hence that `resolve_regions_and_report_errors` can never be
         .               /// called. This is used only during NLL processing to "hand off" ownership
         .               /// of the set of region variables into the NLL region context.
     4,810 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
         .                   let mut inner = self.inner.borrow_mut();
    18,278 ( 0.00%)          let (var_infos, data) = inner
         .                       .region_constraint_storage
         .                       .take()
         .                       .expect("regions already resolved")
         .                       .with_log(&mut inner.undo_log)
       962 ( 0.00%)              .into_infos_and_data();
       962 ( 0.00%)          assert!(data.is_empty());
         .                   var_infos
     7,696 ( 0.00%)      }
         .           
         .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
         .                   self.resolve_vars_if_possible(t).to_string()
         .               }
         .           
         .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
         .               /// universe index of `TyVar(vid)`.
    38,768 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
         .                   use self::type_variable::TypeVariableValue;
         .           
   116,304 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
         .                       TypeVariableValue::Known { value } => Ok(value),
         .                       TypeVariableValue::Unknown { universe } => Err(universe),
         .                   }
   135,688 ( 0.00%)      }
         .           
         .               /// Resolve any type variables found in `value` -- but only one
         .               /// level.  So, if the variable `?X` is bound to some type
         .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
         .               /// itself be bound to a type).
         .               ///
         .               /// Useful when you only need to inspect the outermost level of
         .               /// the type and don't care about nested types (or perhaps you
         .               /// will be resolving them as well, e.g. in a loop).
         .               pub fn shallow_resolve<T>(&self, value: T) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
   785,805 ( 0.01%)          value.fold_with(&mut ShallowResolver { infcx: self })
         .               }
         .           
    56,690 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
         .                   self.inner.borrow_mut().type_variables().root_var(var)
    85,035 ( 0.00%)      }
         .           
         .               /// Where possible, replaces type/const variables in
         .               /// `value` with their final value. Note that region variables
         .               /// are unaffected. If a type/const variable has not been unified, it
         .               /// is left as is. This is an idempotent operation that does
         .               /// not affect inference state in any way and so you can do it
         .               /// at will.
     8,516 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
   974,293 ( 0.01%)          if !value.needs_infer() {
   296,323 ( 0.00%)              return value; // Avoid duplicated subst-folding.
         .                   }
 1,183,531 ( 0.01%)          let mut r = resolve::OpportunisticVarResolver::new(self);
 1,116,580 ( 0.01%)          value.fold_with(&mut r)
     9,266 ( 0.00%)      }
         .           
         .               /// Returns the first unresolved variable contained in `T`. In the
         .               /// process of visiting `T`, this will resolve (where possible)
         .               /// type variables in `T`, but it never constructs the final,
         .               /// resolved type, so it's more efficient than
         .               /// `resolve_vars_if_possible()`.
         .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
         .               where
-- line 1415 ----------------------------------------
-- line 1490 ----------------------------------------
         .                   expected: &'tcx ty::Const<'tcx>,
         .                   actual: &'tcx ty::Const<'tcx>,
         .                   err: TypeError<'tcx>,
         .               ) -> DiagnosticBuilder<'tcx> {
         .                   let trace = TypeTrace::consts(cause, true, expected, actual);
         .                   self.report_and_explain_type_error(trace, &err)
         .               }
         .           
   132,309 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
         .                   &self,
         .                   span: Span,
         .                   lbrct: LateBoundRegionConversionTime,
         .                   value: ty::Binder<'tcx, T>,
         .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   let fld_r =
   192,672 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
         .                   let fld_t = |_| {
         .                       self.next_ty_var(TypeVariableOrigin {
         .                           kind: TypeVariableOriginKind::MiscVariable,
         .                           span,
         .                       })
         .                   };
         .                   let fld_c = |_, ty| {
         .                       self.next_const_var(
         .                           ty,
         .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
         .                       )
         .                   };
   331,288 ( 0.00%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
    88,206 ( 0.00%)      }
         .           
         .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
    14,048 ( 0.00%)      pub fn verify_generic_bound(
         .                   &self,
         .                   origin: SubregionOrigin<'tcx>,
         .                   kind: GenericKind<'tcx>,
         .                   a: ty::Region<'tcx>,
         .                   bound: VerifyBound<'tcx>,
         .               ) {
         .                   debug!("verify_generic_bound({:?}, {:?} <: {:?})", kind, a, bound);
         .           
     5,268 ( 0.00%)          self.inner
         .                       .borrow_mut()
         .                       .unwrap_region_constraints()
    29,852 ( 0.00%)              .verify_generic_bound(origin, kind, a, bound);
    12,292 ( 0.00%)      }
         .           
         .               /// Obtains the latest type of the given closure; this may be a
         .               /// closure in the current function, in which case its
         .               /// `ClosureKind` may not yet be known.
     2,106 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
     4,212 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
         .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
     3,159 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
         .               }
         .           
         .               /// Clears the selection, evaluation, and projection caches. This is useful when
         .               /// repeatedly attempting to select an `Obligation` while changing only
         .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
         .               pub fn clear_caches(&self) {
         .                   self.selection_cache.clear();
         .                   self.evaluation_cache.clear();
         .                   self.inner.borrow_mut().projection_cache().clear();
         .               }
         .           
         .               pub fn universe(&self) -> ty::UniverseIndex {
 1,051,778 ( 0.01%)          self.universe.get()
   455,003 ( 0.00%)      }
         .           
         .               /// Creates and return a fresh universe that extends all previous
         .               /// universes. Updates `self.universe` to that new universe.
       174 ( 0.00%)      pub fn create_next_universe(&self) -> ty::UniverseIndex {
       256 ( 0.00%)          let u = self.universe.get().next_universe();
         .                   self.universe.set(u);
         .                   u
       174 ( 0.00%)      }
         .           
         .               /// Resolves and evaluates a constant.
         .               ///
         .               /// The constant can be located on a trait like `<A as B>::C`, in which case the given
         .               /// substitutions and environment are used to resolve the constant. Alternatively if the
         .               /// constant has generic parameters in scope the substitutions are used to evaluate the value of
         .               /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count
         .               /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still
-- line 1576 ----------------------------------------
-- line 1606 ----------------------------------------
         .                   // variables, thus we don't need to substitute back the original values.
         .                   self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
         .               }
         .           
         .               /// If `typ` is a type variable of some kind, resolve it one level
         .               /// (but do not resolve types found in the result). If `typ` is
         .               /// not a type variable, just return it unmodified.
         .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
12,768,720 ( 0.11%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
 9,102,506 ( 0.08%)          match *typ.kind() {
         .                       ty::Infer(ty::TyVar(v)) => {
         .                           // Not entirely obvious: if `typ` is a type variable,
         .                           // it can be resolved to an int/float variable, which
         .                           // can then be recursively resolved, hence the
         .                           // recursion. Note though that we prevent type
         .                           // variables from unifying to other type variables
         .                           // directly (though they may be embedded
         .                           // structurally), and we prevent cycles in any case,
         .                           // so this recursion should always be of very limited
         .                           // depth.
         .                           //
         .                           // Note: if these two lines are combined into one we get
         .                           // dynamic borrow errors on `self.inner`.
 3,658,520 ( 0.03%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
         .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
         .                       }
         .           
 1,955,296 ( 0.02%)              ty::Infer(ty::IntVar(v)) => self
         .                           .inner
         .                           .borrow_mut()
         .                           .int_unification_table()
         .                           .probe_value(v)
   350,970 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
         .                           .unwrap_or(typ),
         .           
         .                       ty::Infer(ty::FloatVar(v)) => self
         .                           .inner
         .                           .borrow_mut()
         .                           .float_unification_table()
         .                           .probe_value(v)
         .                           .map(|v| v.to_type(self.tcx))
         .                           .unwrap_or(typ),
         .           
         .                       _ => typ,
         .                   }
14,364,810 ( 0.13%)      }
         .           
         .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
         .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
         .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
         .               ///
         .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
         .               /// inlined, despite being large, because it has only two call sites that
         .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
         .               #[inline(always)]
         .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
         .                   match infer_var {
         .                       TyOrConstInferVar::Ty(v) => {
         .                           use self::type_variable::TypeVariableValue;
         .           
         .                           // If `inlined_probe` returns a `Known` value, it never equals
         .                           // `ty::Infer(ty::TyVar(v))`.
 3,214,789 ( 0.03%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
         .                               TypeVariableValue::Unknown { .. } => false,
         .                               TypeVariableValue::Known { .. } => true,
         .                           }
         .                       }
         .           
         .                       TyOrConstInferVar::TyInt(v) => {
         .                           // If `inlined_probe_value` returns a value it's always a
         .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
         .                           // `ty::Infer(_)`.
 4,770,464 ( 0.04%)                  self.inner.borrow_mut().int_unification_table().inlined_probe_value(v).is_some()
         .                       }
         .           
         .                       TyOrConstInferVar::TyFloat(v) => {
         .                           // If `probe_value` returns a value it's always a
         .                           // `ty::Float(_)`, which never matches a `ty::Infer(_)`.
         .                           //
         .                           // Not `inlined_probe_value(v)` because this call site is colder.
         .                           self.inner.borrow_mut().float_unification_table().probe_value(v).is_some()
-- line 1688 ----------------------------------------
-- line 1716 ----------------------------------------
         .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
         .               Const(ConstVid<'tcx>),
         .           }
         .           
         .           impl<'tcx> TyOrConstInferVar<'tcx> {
         .               /// Tries to extract an inference variable from a type or a constant, returns `None`
         .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
         .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
   125,128 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
         .                   match arg.unpack() {
         .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
         .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
         .                       GenericArgKind::Lifetime(_) => None,
         .                   }
   125,128 ( 0.00%)      }
         .           
         .               /// Tries to extract an inference variable from a type, returns `None`
         .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
       750 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
 1,032,310 ( 0.01%)          match *ty.kind() {
   151,384 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
   100,284 ( 0.00%)              ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
         .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
         .                       _ => None,
         .                   }
       750 ( 0.00%)      }
         .           
         .               /// Tries to extract an inference variable from a constant, returns `None`
         .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
         .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
         .                   match ct.val {
         .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
         .                       _ => None,
         .                   }
-- line 1749 ----------------------------------------
-- line 1755 ----------------------------------------
         .           }
         .           
         .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
         .                   self.infcx.tcx
         .               }
         .           
         .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
 2,183,152 ( 0.02%)          self.infcx.shallow_resolve_ty(ty)
         .               }
         .           
    21,104 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    20,864 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
    25,780 ( 0.00%)              self.infcx
         .                           .inner
         .                           .borrow_mut()
         .                           .const_unification_table()
    15,468 ( 0.00%)                  .probe_value(*vid)
         .                           .val
         .                           .known()
         .                           .unwrap_or(ct)
         .                   } else {
         .                       ct
         .                   }
    26,380 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TypeTrace<'tcx> {
         .               pub fn span(&self) -> Span {
       198 ( 0.00%)          self.cause.span
         .               }
         .           
         .               pub fn types(
         .                   cause: &ObligationCause<'tcx>,
         .                   a_is_expected: bool,
         .                   a: Ty<'tcx>,
         .                   b: Ty<'tcx>,
         .               ) -> TypeTrace<'tcx> {
-- line 1792 ----------------------------------------
-- line 1800 ----------------------------------------
         .                   b: &'tcx ty::Const<'tcx>,
         .               ) -> TypeTrace<'tcx> {
         .                   TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }
         .               }
         .           }
         .           
         .           impl<'tcx> SubregionOrigin<'tcx> {
         .               pub fn span(&self) -> Span {
       495 ( 0.00%)          match *self {
        99 ( 0.00%)              Subtype(ref a) => a.span(),
         .                       RelateObjectBound(a) => a,
         .                       RelateParamBound(a, ..) => a,
         .                       RelateRegionParamBound(a) => a,
         .                       Reborrow(a) => a,
         .                       ReborrowUpvar(a, _) => a,
         .                       DataBorrowed(_, a) => a,
         .                       ReferenceOutlivesReferent(_, a) => a,
         .                       CompareImplMethodObligation { span, .. } => span,
-- line 1817 ----------------------------------------
-- line 1818 ----------------------------------------
         .                       CompareImplTypeObligation { span, .. } => span,
         .                   }
         .               }
         .           
         .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
         .               where
         .                   F: FnOnce() -> Self,
         .               {
    55,234 ( 0.00%)          match *cause.code() {
    13,089 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
    65,445 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
         .                       }
         .           
         .                       traits::ObligationCauseCode::CompareImplMethodObligation {
         .                           impl_item_def_id,
         .                           trait_item_def_id,
         .                       } => SubregionOrigin::CompareImplMethodObligation {
         .                           span: cause.span,
         .                           impl_item_def_id,
-- line 1836 ----------------------------------------

35,375,071 ( 0.31%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/zip.rs
--------------------------------------------------------------------------------
Ir                  

-- line 15 ----------------------------------------
         .               b: B,
         .               // index, len and a_len are only used by the specialized version of zip
         .               index: usize,
         .               len: usize,
         .               a_len: usize,
         .           }
         .           impl<A: Iterator, B: Iterator> Zip<A, B> {
         .               pub(in crate::iter) fn new(a: A, b: B) -> Zip<A, B> {
       240 ( 0.00%)          ZipImpl::new(a, b)
         .               }
         .               fn super_nth(&mut self, mut n: usize) -> Option<(A::Item, B::Item)> {
         .                   while let Some(x) = Iterator::next(self) {
         .                       if n == 0 {
         .                           return Some(x);
         .                       }
         .                       n -= 1;
         .                   }
-- line 31 ----------------------------------------
-- line 63 ----------------------------------------
         .           /// assert!(iter.next().is_none());
         .           /// ```
         .           #[stable(feature = "iter_zip", since = "1.59.0")]
         .           pub fn zip<A, B>(a: A, b: B) -> Zip<A::IntoIter, B::IntoIter>
         .           where
         .               A: IntoIterator,
         .               B: IntoIterator,
         .           {
    51,779 ( 0.00%)      ZipImpl::new(a.into_iter(), b.into_iter())
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<A, B> Iterator for Zip<A, B>
         .           where
         .               A: Iterator,
         .               B: Iterator,
         .           {
-- line 79 ----------------------------------------
-- line 136 ----------------------------------------
         .                   Self: Iterator + TrustedRandomAccessNoCoerce;
         .           }
         .           
         .           // Work around limitations of specialization, requiring `default` impls to be repeated
         .           // in intermediary impls.
         .           macro_rules! zip_impl_general_defaults {
         .               () => {
         .                   default fn new(a: A, b: B) -> Self {
       480 ( 0.00%)              Zip {
         .                           a,
         .                           b,
         .                           index: 0, // unused
         .                           len: 0,   // unused
         .                           a_len: 0, // unused
         .                       }
         .                   }
         .           
         .                   #[inline]
         .                   default fn next(&mut self) -> Option<(A::Item, B::Item)> {
    86,144 ( 0.00%)              let x = self.a.next()?;
    42,624 ( 0.00%)              let y = self.b.next()?;
    28,506 ( 0.00%)              Some((x, y))
     5,012 ( 0.00%)          }
         .           
         .                   #[inline]
         .                   default fn nth(&mut self, n: usize) -> Option<Self::Item> {
         .                       self.super_nth(n)
         .                   }
         .           
         .                   #[inline]
         .                   default fn next_back(&mut self) -> Option<(A::Item, B::Item)>
-- line 166 ----------------------------------------
-- line 203 ----------------------------------------
         .               B: Iterator,
         .           {
         .               type Item = (A::Item, B::Item);
         .           
         .               zip_impl_general_defaults! {}
         .           
         .               #[inline]
         .               default fn size_hint(&self) -> (usize, Option<usize>) {
       102 ( 0.00%)          let (a_lower, a_upper) = self.a.size_hint();
        24 ( 0.00%)          let (b_lower, b_upper) = self.b.size_hint();
         .           
         .                   let lower = cmp::min(a_lower, b_lower);
         .           
         .                   let upper = match (a_upper, b_upper) {
         .                       (Some(x), Some(y)) => Some(cmp::min(x, y)),
         .                       (Some(x), None) => Some(x),
         .                       (None, Some(y)) => Some(y),
         .                       (None, None) => None,
-- line 220 ----------------------------------------
-- line 236 ----------------------------------------
         .           where
         .               A: TrustedRandomAccessNoCoerce + Iterator,
         .               B: TrustedRandomAccessNoCoerce + Iterator,
         .           {
         .               zip_impl_general_defaults! {}
         .           
         .               #[inline]
         .               default fn size_hint(&self) -> (usize, Option<usize>) {
     2,392 ( 0.00%)          let size = cmp::min(self.a.size(), self.b.size());
         .                   (size, Some(size))
         .               }
         .           
         .               #[inline]
         .               unsafe fn get_unchecked(&mut self, idx: usize) -> <Self as Iterator>::Item {
       344 ( 0.00%)          let idx = self.index + idx;
         .                   // SAFETY: the caller must uphold the contract for
         .                   // `Iterator::__iterator_get_unchecked`.
         .                   unsafe { (self.a.__iterator_get_unchecked(idx), self.b.__iterator_get_unchecked(idx)) }
         .               }
         .           }
         .           
         .           #[doc(hidden)]
         .           impl<A, B> ZipImpl<A, B> for Zip<A, B>
         .           where
         .               A: TrustedRandomAccess + Iterator,
         .               B: TrustedRandomAccess + Iterator,
         .           {
         .               fn new(a: A, b: B) -> Self {
         .                   let a_len = a.size();
         .                   let len = cmp::min(a_len, b.size());
     1,113 ( 0.00%)          Zip { a, b, index: 0, len, a_len }
         .               }
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<(A::Item, B::Item)> {
12,420,728 ( 0.11%)          if self.index < self.len {
         .                       let i = self.index;
         .                       // since get_unchecked executes code which can panic we increment the counters beforehand
         .                       // so that the same index won't be accessed twice, as required by TrustedRandomAccess
32,226,274 ( 0.28%)              self.index += 1;
         .                       // SAFETY: `i` is smaller than `self.len`, thus smaller than `self.a.len()` and `self.b.len()`
         .                       unsafe {
       868 ( 0.00%)                  Some((self.a.__iterator_get_unchecked(i), self.b.__iterator_get_unchecked(i)))
         .                       }
       212 ( 0.00%)          } else if A::MAY_HAVE_SIDE_EFFECT && self.index < self.a_len {
         .                       let i = self.index;
         .                       // as above, increment before executing code that may panic
         .                       self.index += 1;
         .                       self.len += 1;
         .                       // match the base implementation's potential side effects
         .                       // SAFETY: we just checked that `i` < `self.a.len()`
         .                       unsafe {
         .                           self.a.__iterator_get_unchecked(i);
-- line 288 ----------------------------------------
-- line 290 ----------------------------------------
         .                       None
         .                   } else {
         .                       None
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
   271,815 ( 0.00%)          let len = self.len - self.index;
     6,900 ( 0.00%)          (len, Some(len))
         .               }
         .           
         .               #[inline]
         .               fn nth(&mut self, n: usize) -> Option<Self::Item> {
         .                   let delta = cmp::min(n, self.len - self.index);
         .                   let end = self.index + delta;
         .                   while self.index < end {
         .                       let i = self.index;
-- line 307 ----------------------------------------
-- line 353 ----------------------------------------
         .                           let sz_b = self.b.size();
         .                           if B::MAY_HAVE_SIDE_EFFECT && sz_b > self.len {
         .                               for _ in 0..sz_b - self.len {
         .                                   self.b.next_back();
         .                               }
         .                           }
         .                       }
         .                   }
         5 ( 0.00%)          if self.index < self.len {
         .                       // since get_unchecked executes code which can panic we increment the counters beforehand
         .                       // so that the same index won't be accessed twice, as required by TrustedRandomAccess
         .                       self.len -= 1;
         .                       self.a_len -= 1;
         .                       let i = self.len;
         .                       // SAFETY: `i` is smaller than the previous value of `self.len`,
         .                       // which is also smaller than or equal to `self.a.len()` and `self.b.len()`
         .                       unsafe {
-- line 369 ----------------------------------------
-- line 535 ----------------------------------------
         .           #[unstable(feature = "trusted_random_access", issue = "none")]
         .           #[rustc_specialization_trait]
         .           pub unsafe trait TrustedRandomAccessNoCoerce: Sized {
         .               // Convenience method.
         .               fn size(&self) -> usize
         .               where
         .                   Self: Iterator,
         .               {
    31,024 ( 0.00%)          self.size_hint().0
         .               }
         .               /// `true` if getting an iterator element may have side effects.
         .               /// Remember to take inner iterators into account.
         .               const MAY_HAVE_SIDE_EFFECT: bool;
         .           }
         .           
         .           /// Like `Iterator::__iterator_get_unchecked`, but doesn't require the compiler to
         .           /// know that `U: TrustedRandomAccess`.
-- line 551 ----------------------------------------
-- line 555 ----------------------------------------
         .           /// Same requirements calling `get_unchecked` directly.
         .           #[doc(hidden)]
         .           pub(in crate::iter::adapters) unsafe fn try_get_unchecked<I>(it: &mut I, idx: usize) -> I::Item
         .           where
         .               I: Iterator,
         .           {
         .               // SAFETY: the caller must uphold the contract for
         .               // `Iterator::__iterator_get_unchecked`.
     9,753 ( 0.00%)      unsafe { it.try_get_unchecked(idx) }
         .           }
         .           
         .           unsafe trait SpecTrustedRandomAccess: Iterator {
         .               /// If `Self: TrustedRandomAccess`, it must be safe to call
         .               /// `Iterator::__iterator_get_unchecked(self, index)`.
         .               unsafe fn try_get_unchecked(&mut self, index: usize) -> Self::Item;
         .           }
         .           
-- line 571 ----------------------------------------

 1,720,152 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/zip.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir                 

-- line 27 ----------------------------------------
        .           impl CacheEntry {
        .               #[inline]
        .               fn update(
        .                   &mut self,
        .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
        .                   pos: BytePos,
        .                   time_stamp: usize,
        .               ) {
   24,980 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
   17,226 ( 0.00%)              self.file = file;
   23,952 ( 0.00%)              self.file_index = file_idx;
        .                   }
        .           
    8,756 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
        .                   let line_bounds = self.file.line_bounds(line_index);
   44,964 ( 0.00%)          self.line_number = line_index + 1;
   67,947 ( 0.00%)          self.line = line_bounds;
        .                   self.touch(time_stamp);
        .               }
        .           
        .               #[inline]
        .               fn touch(&mut self, time_stamp: usize) {
  335,260 ( 0.00%)          self.time_stamp = time_stamp;
        .               }
        .           }
        .           
        .           #[derive(Clone)]
        .           pub struct CachingSourceMapView<'sm> {
        .               source_map: &'sm SourceMap,
        .               line_cache: [CacheEntry; 3],
        .               time_stamp: usize,
        .           }
        .           
        .           impl<'sm> CachingSourceMapView<'sm> {
   10,218 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
        .                   let files = source_map.files();
    5,109 ( 0.00%)          let first_file = files[0].clone();
        .                   let entry = CacheEntry {
        .                       time_stamp: 0,
        .                       line_number: 0,
        .                       line: BytePos(0)..BytePos(0),
        .                       file: first_file,
        .                       file_index: 0,
        .                   };
        .           
   25,545 ( 0.00%)          CachingSourceMapView {
        .                       source_map,
   35,763 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
        .                       time_stamp: 0,
        .                   }
   20,436 ( 0.00%)      }
        .           
        .               pub fn byte_pos_to_line_and_col(
        .                   &mut self,
        .                   pos: BytePos,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
        .                   self.time_stamp += 1;
        .           
        .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
        .                   };
        .           
        .                   let cache_entry = &mut self.line_cache[oldest];
        .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
        .           
        .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
        .               }
        .           
1,239,847 ( 0.01%)      pub fn span_data_to_lines_and_cols(
        .                   &mut self,
        .                   span_data: &SpanData,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
  708,484 ( 0.01%)          self.time_stamp += 1;
        .           
        .                   // Check if lo and hi are in the cached lines.
  177,121 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
  177,121 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
        .           
  316,800 ( 0.00%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
        .                       // Cache hit for span lo and hi. Check if they belong to the same file.
        .                       let result = {
  316,278 ( 0.00%)                  let lo = &self.line_cache[lo_cache_idx as usize];
        .                           let hi = &self.line_cache[hi_cache_idx as usize];
        .           
  948,834 ( 0.01%)                  if lo.file_index != hi.file_index {
        .                               return None;
        .                           }
        .           
        .                           (
  316,278 ( 0.00%)                      lo.file.clone(),
        .                               lo.line_number,
        .                               span_data.lo - lo.line.start,
  158,139 ( 0.00%)                      hi.line_number,
        .                               span_data.hi - hi.line.start,
        .                           )
        .                       };
        .           
  158,139 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
  158,139 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
        .           
  632,556 ( 0.01%)              return Some(result);
        .                   }
        .           
        .                   // No cache hit or cache hit for only one of span lo and hi.
   37,442 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
        .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
        .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
        .                   } else {
        .                       self.oldest_cache_entry_index()
        .                   };
        .           
        .                   // If the entry doesn't point to the correct file, get the new file and index.
        .                   // Return early if the file containing beginning of span doesn't contain end of span.
  151,428 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
   51,130 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
   61,356 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
        .                           return None;
        .                       }
        .           
   40,904 ( 0.00%)              Some(new_file_and_idx)
        .                   } else {
        .                       let file = &self.line_cache[oldest].file;
   26,268 ( 0.00%)              if !file_contains(&file, span_data.hi) {
        .                           return None;
        .                       }
        .           
   26,268 ( 0.00%)              None
        .                   };
        .           
        .                   // Update the cache entries.
   94,910 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, -1) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
        .           
   47,166 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
        .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
        .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
        .                               let hi = &mut self.line_cache[next_oldest];
        .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
        .                               (oldest, next_oldest)
        .                           } else {
        .                               (oldest, oldest)
        .                           }
        .                       }
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, _) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
      522 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
      783 ( 0.00%)                  hi.touch(self.time_stamp);
        .                           (oldest, hi_cache_idx as usize)
        .                       }
        .                       // Oldest cache entry is for span_data.hi line.
        .                       (_, -1) => {
        .                           let hi = &mut self.line_cache[oldest];
    2,999 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
    5,998 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
   11,996 ( 0.00%)                  lo.touch(self.time_stamp);
        .                           (lo_cache_idx as usize, oldest)
        .                       }
        .                       _ => {
        .                           panic!();
        .                       }
        .                   };
        .           
        .                   let lo = &self.line_cache[lo_idx];
        .                   let hi = &self.line_cache[hi_idx];
        .           
        .                   // Span lo and hi may equal line end when last line doesn't
        .                   // end in newline, hence the inclusive upper bounds below.
   37,964 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
   18,982 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
   37,964 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
   18,982 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
   94,910 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
   56,946 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
   56,946 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
        .           
   56,946 ( 0.00%)          Some((
   18,982 ( 0.00%)              lo.file.clone(),
        .                       lo.line_number,
        .                       span_data.lo - lo.line.start,
   18,982 ( 0.00%)              hi.line_number,
        .                       span_data.hi - hi.line.start,
        .                   ))
1,594,089 ( 0.01%)      }
        .           
        .               fn cache_entry_index(&self, pos: BytePos) -> isize {
        .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
1,707,214 ( 0.01%)              if cache_entry.line.contains(&pos) {
        .                           return idx as isize;
        .                       }
        .                   }
        .           
        .                   -1
        .               }
        .           
        .               fn oldest_cache_entry_index(&self) -> usize {
        .                   let mut oldest = 0;
        .           
        .                   for idx in 1..self.line_cache.len() {
   94,332 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
        .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
        .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
        .           
        .                   for idx in 0..self.line_cache.len() {
   38,831 ( 0.00%)              if idx != avoid_idx
   22,120 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
        .                       {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
   51,130 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
   10,226 ( 0.00%)          if !self.source_map.files().is_empty() {
   20,452 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
        .                       let file = &self.source_map.files()[file_idx];
        .           
   81,808 ( 0.00%)              if file_contains(file, pos) {
        .                           return Some((file.clone(), file_idx));
        .                       }
        .                   }
        .           
        .                   None
   51,130 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
        .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
        .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
        .               // purposes of converting a byte position to a line and column number, we can't come up with a
        .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

2,243,957 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/freshen.rs
--------------------------------------------------------------------------------
Ir                 

-- line 47 ----------------------------------------
        .               const_freshen_count: u32,
        .               ty_freshen_map: FxHashMap<ty::InferTy, Ty<'tcx>>,
        .               const_freshen_map: FxHashMap<ty::InferConst<'tcx>, &'tcx ty::Const<'tcx>>,
        .               keep_static: bool,
        .           }
        .           
        .           impl<'a, 'tcx> TypeFreshener<'a, 'tcx> {
        .               pub fn new(infcx: &'a InferCtxt<'a, 'tcx>, keep_static: bool) -> TypeFreshener<'a, 'tcx> {
1,895,650 ( 0.02%)          TypeFreshener {
        .                       infcx,
        .                       ty_freshen_count: 0,
        .                       const_freshen_count: 0,
        .                       ty_freshen_map: Default::default(),
        .                       const_freshen_map: Default::default(),
        .                       keep_static,
        .                   }
        .               }
        .           
2,236,224 ( 0.02%)      fn freshen_ty<F>(
        .                   &mut self,
        .                   opt_ty: Option<Ty<'tcx>>,
        .                   key: ty::InferTy,
        .                   freshener: F,
        .               ) -> Ty<'tcx>
        .               where
        .                   F: FnOnce(u32) -> ty::InferTy,
        .               {
  559,056 ( 0.00%)          if let Some(ty) = opt_ty {
        .                       return ty.fold_with(self);
        .                   }
        .           
  521,284 ( 0.00%)          match self.ty_freshen_map.entry(key) {
   50,449 ( 0.00%)              Entry::Occupied(entry) => *entry.get(),
        .                       Entry::Vacant(entry) => {
  210,193 ( 0.00%)                  let index = self.ty_freshen_count;
  840,772 ( 0.01%)                  self.ty_freshen_count += 1;
  420,386 ( 0.00%)                  let t = self.infcx.tcx.mk_ty_infer(freshener(index));
        .                           entry.insert(t);
        .                           t
        .                       }
        .                   }
2,345,778 ( 0.02%)      }
        .           
        .               fn freshen_const<F>(
        .                   &mut self,
        .                   opt_ct: Option<&'tcx ty::Const<'tcx>>,
        .                   key: ty::InferConst<'tcx>,
        .                   freshener: F,
        .                   ty: Ty<'tcx>,
        .               ) -> &'tcx ty::Const<'tcx>
        .               where
        .                   F: FnOnce(u32) -> ty::InferConst<'tcx>,
        .               {
        4 ( 0.00%)          if let Some(ct) = opt_ct {
        .                       return ct.fold_with(self);
        .                   }
        .           
        4 ( 0.00%)          match self.const_freshen_map.entry(key) {
        .                       Entry::Occupied(entry) => *entry.get(),
        .                       Entry::Vacant(entry) => {
        2 ( 0.00%)                  let index = self.const_freshen_count;
        8 ( 0.00%)                  self.const_freshen_count += 1;
        4 ( 0.00%)                  let ct = self.infcx.tcx.mk_const_infer(freshener(index), ty);
        .                           entry.insert(ct);
        .                           ct
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
  577,946 ( 0.01%)          self.infcx.tcx
  225,410 ( 0.00%)      }
        .           
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
  130,284 ( 0.00%)          match *r {
        .                       ty::ReLateBound(..) => {
        .                           // leave bound regions alone
        .                           r
        .                       }
        .           
        .                       ty::ReEarlyBound(..)
        .                       | ty::ReFree(_)
        .                       | ty::ReVar(_)
        .                       | ty::RePlaceholder(..)
        .                       | ty::ReEmpty(_)
        .                       | ty::ReErased => {
        .                           // replace all free regions with 'erased
        .                           self.tcx().lifetimes.re_erased
        .                       }
        .                       ty::ReStatic => {
      945 ( 0.00%)                  if self.keep_static {
        .                               r
        .                           } else {
        .                               self.tcx().lifetimes.re_erased
        .                           }
        .                       }
        .                   }
      137 ( 0.00%)      }
        .           
2,787,120 ( 0.02%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
1,393,560 ( 0.01%)          if !t.needs_infer() && !t.has_erasable_regions() {
        .                       return t;
        .                   }
        .           
        .                   let tcx = self.infcx.tcx;
        .           
2,925,141 ( 0.03%)          match *t.kind() {
  150,915 ( 0.00%)              ty::Infer(ty::TyVar(v)) => {
1,207,320 ( 0.01%)                  let opt_ty = self.infcx.inner.borrow_mut().type_variables().probe(v).known();
1,358,235 ( 0.01%)                  self.freshen_ty(opt_ty, ty::TyVar(v), ty::FreshTy)
        .                       }
        .           
  514,452 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self.freshen_ty(
1,028,904 ( 0.01%)                  self.infcx
        .                               .inner
        .                               .borrow_mut()
        .                               .int_unification_table()
        .                               .probe_value(v)
        .                               .map(|v| v.to_type(tcx)),
        .                           ty::IntVar(v),
        .                           ty::FreshIntTy,
        .                       ),
-- line 170 ----------------------------------------
-- line 210 ----------------------------------------
        .                       | ty::Dynamic(..)
        .                       | ty::Never
        .                       | ty::Tuple(..)
        .                       | ty::Projection(..)
        .                       | ty::Foreign(..)
        .                       | ty::Param(..)
        .                       | ty::Closure(..)
        .                       | ty::GeneratorWitness(..)
  346,296 ( 0.00%)              | ty::Opaque(..) => t.super_fold_with(self),
        .           
        .                       ty::Placeholder(..) | ty::Bound(..) => bug!("unexpected type {:?}", t),
        .                   }
1,892,226 ( 0.02%)      }
        .           
      876 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
      880 ( 0.00%)          match ct.val {
        .                       ty::ConstKind::Infer(ty::InferConst::Var(v)) => {
       16 ( 0.00%)                  let opt_ct = self
        .                               .infcx
        .                               .inner
        .                               .borrow_mut()
        .                               .const_unification_table()
        .                               .probe_value(v)
        .                               .val
        .                               .known();
        .                           return self.freshen_const(
-- line 235 ----------------------------------------
-- line 256 ----------------------------------------
        .                       }
        .           
        .                       ty::ConstKind::Param(_)
        .                       | ty::ConstKind::Value(_)
        .                       | ty::ConstKind::Unevaluated(..)
        .                       | ty::ConstKind::Error(_) => {}
        .                   }
        .           
    1,152 ( 0.00%)          ct.super_fold_with(self)
       14 ( 0.00%)      }
        .           }

2,253,059 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/freshen.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/fulfill.rs
--------------------------------------------------------------------------------
Ir                  

-- line 33 ----------------------------------------
         .           
         .           impl<'tcx> ForestObligation for PendingPredicateObligation<'tcx> {
         .               /// Note that we include both the `ParamEnv` and the `Predicate`,
         .               /// as the `ParamEnv` can influence whether fulfillment succeeds
         .               /// or fails.
         .               type CacheKey = ty::ParamEnvAnd<'tcx, ty::Predicate<'tcx>>;
         .           
         .               fn as_cache_key(&self) -> Self::CacheKey {
 1,174,311 ( 0.01%)          self.obligation.param_env.and(self.obligation.predicate)
         .               }
         .           }
         .           
         .           /// The fulfillment context is used to drive trait resolution. It
         .           /// consists of a list of obligations that must be (eventually)
         .           /// satisfied. The job is to track which are satisfied, which yielded
         .           /// errors, and which are still pending. At any point, users can call
         .           /// `select_where_possible`, and the fulfillment context will try to do
-- line 49 ----------------------------------------
-- line 79 ----------------------------------------
         .               // outside of any snapshot, so any use of it inside a snapshot
         .               // will lead to trouble and therefore is checked against, but
         .               // other fulfillment contexts sometimes do live inside of
         .               // a snapshot (they don't *straddle* a snapshot, so there
         .               // is no trouble there).
         .               usable_in_snapshot: bool,
         .           }
         .           
     8,030 ( 0.00%)  #[derive(Clone, Debug)]
         .           pub struct PendingPredicateObligation<'tcx> {
         .               pub obligation: PredicateObligation<'tcx>,
         .               // This is far more often read than modified, meaning that we
         .               // should mostly optimize for reading speed, while modifying is not as relevant.
         .               //
         .               // For whatever reason using a boxed slice is slower than using a `Vec` here.
         .               pub stalled_on: Vec<TyOrConstInferVar<'tcx>>,
         .           }
         .           
         .           // `PendingPredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger.
         .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
         .           static_assert_size!(PendingPredicateObligation<'_>, 72);
         .           
         .           impl<'a, 'tcx> FulfillmentContext<'tcx> {
         .               /// Creates a new fulfillment context.
     8,876 ( 0.00%)      pub fn new() -> FulfillmentContext<'tcx> {
   117,476 ( 0.00%)          FulfillmentContext {
    12,508 ( 0.00%)              predicates: ObligationForest::new(),
         .                       relationships: FxHashMap::default(),
         .                       register_region_obligations: true,
         .                       usable_in_snapshot: false,
         .                   }
     8,876 ( 0.00%)      }
         .           
         .               pub fn new_in_snapshot() -> FulfillmentContext<'tcx> {
       231 ( 0.00%)          FulfillmentContext {
        77 ( 0.00%)              predicates: ObligationForest::new(),
         .                       relationships: FxHashMap::default(),
         .                       register_region_obligations: true,
         .                       usable_in_snapshot: true,
         .                   }
         .               }
         .           
         .               pub fn new_ignoring_regions() -> FulfillmentContext<'tcx> {
    28,942 ( 0.00%)          FulfillmentContext {
     7,225 ( 0.00%)              predicates: ObligationForest::new(),
         .                       relationships: FxHashMap::default(),
         .                       register_region_obligations: false,
         .                       usable_in_snapshot: false,
         .                   }
         .               }
         .           
         .               /// Attempts to select obligations using `selcx`.
         .               fn select(&mut self, selcx: &mut SelectionContext<'a, 'tcx>) -> Vec<FulfillmentError<'tcx>> {
   228,196 ( 0.00%)          let span = debug_span!("select", obligation_forest_size = ?self.predicates.len());
         .                   let _enter = span.enter();
         .           
         .                   let mut errors = Vec::new();
         .           
         .                   loop {
         .                       debug!("select: starting another iteration");
         .           
         .                       // Process pending obligations.
         .                       let outcome: Outcome<_, _> =
 1,087,226 ( 0.01%)                  self.predicates.process_obligations(&mut FulfillProcessor {
         .                               selcx,
   155,318 ( 0.00%)                      register_region_obligations: self.register_region_obligations,
         .                           });
         .                       debug!("select: outcome={:#?}", outcome);
         .           
         .                       // FIXME: if we kept the original cache key, we could mark projection
         .                       // obligations as complete for the projection cache here.
         .           
         .                       errors.extend(outcome.errors.into_iter().map(to_fulfillment_error));
         .           
         .                       // If nothing new was added, no need to keep looping.
   310,636 ( 0.00%)              if outcome.stalled {
         .                           break;
         .                       }
         .                   }
         .           
         .                   debug!(
         .                       "select({} predicates remaining, {} errors) done",
         .                       self.predicates.len(),
         .                       errors.len()
-- line 162 ----------------------------------------
-- line 169 ----------------------------------------
         .           impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {
         .               /// "Normalize" a projection type `<SomeType as SomeTrait>::X` by
         .               /// creating a fresh type variable `$0` as well as a projection
         .               /// predicate `<SomeType as SomeTrait>::X == $0`. When the
         .               /// inference engine runs, it will attempt to find an impl of
         .               /// `SomeTrait` or a where-clause that lets us unify `$0` with
         .               /// something concrete. If this fails, we'll unify `$0` with
         .               /// `projection_ty` again.
     1,694 ( 0.00%)      #[tracing::instrument(level = "debug", skip(self, infcx, param_env, cause))]
         .               fn normalize_projection_type(
         .                   &mut self,
         .                   infcx: &InferCtxt<'_, 'tcx>,
         .                   param_env: ty::ParamEnv<'tcx>,
         .                   projection_ty: ty::ProjectionTy<'tcx>,
         .                   cause: ObligationCause<'tcx>,
         .               ) -> Ty<'tcx> {
         .                   debug_assert!(!projection_ty.has_escaping_bound_vars());
         .           
         .                   // FIXME(#20304) -- cache
         .           
         .                   let mut selcx = SelectionContext::new(infcx);
         .                   let mut obligations = vec![];
       693 ( 0.00%)          let normalized_ty = project::normalize_projection_type(
         .                       &mut selcx,
         .                       param_env,
         .                       projection_ty,
       385 ( 0.00%)              cause,
         .                       0,
         .                       &mut obligations,
         .                   );
         .                   self.register_predicate_obligations(infcx, obligations);
         .           
         .                   debug!(?normalized_ty);
         .           
         .                   normalized_ty
         .               }
         .           
   577,326 ( 0.01%)      fn register_predicate_obligation(
         .                   &mut self,
         .                   infcx: &InferCtxt<'_, 'tcx>,
         .                   obligation: PredicateObligation<'tcx>,
         .               ) {
         .                   // this helps to reduce duplicate errors, as well as making
         .                   // debug output much nicer to read and so on.
   288,663 ( 0.00%)          let obligation = infcx.resolve_vars_if_possible(obligation);
         .           
         .                   debug!(?obligation, "register_predicate_obligation");
         .           
   577,326 ( 0.01%)          assert!(!infcx.is_in_snapshot() || self.usable_in_snapshot);
         .           
   288,663 ( 0.00%)          super::relationships::update(self, infcx, &obligation);
         .           
         .                   self.predicates
         .                       .register_obligation(PendingPredicateObligation { obligation, stalled_on: vec![] });
   481,105 ( 0.00%)      }
         .           
   245,792 ( 0.00%)      fn select_all_or_error(&mut self, infcx: &InferCtxt<'_, 'tcx>) -> Vec<FulfillmentError<'tcx>> {
         .                   {
    30,724 ( 0.00%)              let errors = self.select_where_possible(infcx);
    30,724 ( 0.00%)              if !errors.is_empty() {
     1,220 ( 0.00%)                  return errors;
         .                       }
         .                   }
         .           
   152,400 ( 0.00%)          self.predicates.to_errors(CodeAmbiguity).into_iter().map(to_fulfillment_error).collect()
   215,068 ( 0.00%)      }
         .           
 1,140,980 ( 0.01%)      fn select_where_possible(
         .                   &mut self,
         .                   infcx: &InferCtxt<'_, 'tcx>,
         .               ) -> Vec<FulfillmentError<'tcx>> {
         .                   let mut selcx = SelectionContext::new(infcx);
         .                   self.select(&mut selcx)
 1,026,882 ( 0.01%)      }
         .           
       933 ( 0.00%)      fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>> {
         .                   self.predicates.map_pending_obligations(|o| o.obligation.clone())
     1,244 ( 0.00%)      }
         .           
         .               fn relationships(&mut self) -> &mut FxHashMap<ty::TyVid, ty::FoundRelationships> {
       135 ( 0.00%)          &mut self.relationships
       135 ( 0.00%)      }
         .           }
         .           
         .           struct FulfillProcessor<'a, 'b, 'tcx> {
         .               selcx: &'a mut SelectionContext<'b, 'tcx>,
         .               register_region_obligations: bool,
         .           }
         .           
         .           fn mk_pending(os: Vec<PredicateObligation<'_>>) -> Vec<PendingPredicateObligation<'_>> {
-- line 258 ----------------------------------------
-- line 275 ----------------------------------------
         .               #[inline(always)]
         .               fn process_obligation(
         .                   &mut self,
         .                   pending_obligation: &mut Self::Obligation,
         .               ) -> ProcessResult<Self::Obligation, Self::Error> {
         .                   // If we were stalled on some unresolved variables, first check whether
         .                   // any of them have been resolved; if not, don't bother doing more work
         .                   // yet.
11,151,129 ( 0.10%)          let change = match pending_obligation.stalled_on.len() {
         .                       // Match arms are in order of frequency, which matters because this
         .                       // code is so hot. 1 and 0 dominate; 2+ is fairly rare.
         .                       1 => {
 1,650,408 ( 0.01%)                  let infer_var = pending_obligation.stalled_on[0];
   550,136 ( 0.00%)                  self.selcx.infcx().ty_or_const_infer_var_changed(infer_var)
         .                       }
         .                       0 => {
         .                           // In this case we haven't changed, but wish to make a change.
         .                           true
         .                       }
         .                       _ => {
         .                           // This `for` loop was once a call to `all()`, but this lower-level
         .                           // form was a perf win. See #64545 for details.
 3,719,937 ( 0.03%)                  (|| {
 7,389,231 ( 0.06%)                      for &infer_var in &pending_obligation.stalled_on {
 2,385,208 ( 0.02%)                          if self.selcx.infcx().ty_or_const_infer_var_changed(infer_var) {
         .                                       return true;
         .                                   }
         .                               }
         .                               false
         .                           })()
         .                       }
         .                   };
         .           
        32 ( 0.00%)          if !change {
         .                       debug!(
         .                           "process_predicate: pending obligation {:?} still stalled on {:?}",
         .                           self.selcx.infcx().resolve_vars_if_possible(pending_obligation.obligation.clone()),
         .                           pending_obligation.stalled_on
         .                       );
         .                       return ProcessResult::Unchanged;
         .                   }
         .           
   685,281 ( 0.01%)          self.progress_changed_obligations(pending_obligation)
         .               }
         .           
         .               fn process_backedge<'c, I>(
         .                   &mut self,
         .                   cycle: I,
         .                   _marker: PhantomData<&'c PendingPredicateObligation<'tcx>>,
         .               ) where
         .                   I: Clone + Iterator<Item = &'c PendingPredicateObligation<'tcx>>,
-- line 325 ----------------------------------------
-- line 333 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {
         .               // The code calling this method is extremely hot and only rarely
         .               // actually uses this, so move this part of the code
         .               // out of that loop.
         .               #[inline(never)]
 2,284,270 ( 0.02%)      fn progress_changed_obligations(
         .                   &mut self,
         .                   pending_obligation: &mut PendingPredicateObligation<'tcx>,
         .               ) -> ProcessResult<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>> {
         .                   pending_obligation.stalled_on.truncate(0);
         .           
         .                   let obligation = &mut pending_obligation.obligation;
         .           
   685,281 ( 0.01%)          if obligation.predicate.has_infer_types_or_consts() {
   193,652 ( 0.00%)              obligation.predicate =
   580,956 ( 0.01%)                  self.selcx.infcx().resolve_vars_if_possible(obligation.predicate);
         .                   }
         .           
         .                   debug!(?obligation, ?obligation.cause, "process_obligation");
         .           
         .                   let infcx = self.selcx.infcx();
         .           
    69,550 ( 0.00%)          let binder = obligation.predicate.kind();
 1,598,989 ( 0.01%)          match binder.no_bound_vars() {
       330 ( 0.00%)              None => match binder.skip_binder() {
         .                           // Evaluation will discard candidates using the leak check.
         .                           // This means we need to pass it the bound version of our
         .                           // predicate.
         .                           ty::PredicateKind::Trait(trait_ref) => {
         .                               let trait_obligation = obligation.with(binder.rebind(trait_ref));
         .           
        60 ( 0.00%)                      self.process_trait_obligation(
         .                                   obligation,
       180 ( 0.00%)                          trait_obligation,
         .                                   &mut pending_obligation.stalled_on,
         .                               )
         .                           }
         .                           ty::PredicateKind::Projection(data) => {
         .                               let project_obligation = obligation.with(binder.rebind(data));
         .           
        60 ( 0.00%)                      self.process_projection_obligation(
         .                                   obligation,
       180 ( 0.00%)                          project_obligation,
         .                                   &mut pending_obligation.stalled_on,
         .                               )
         .                           }
         .                           ty::PredicateKind::RegionOutlives(_)
         .                           | ty::PredicateKind::TypeOutlives(_)
         .                           | ty::PredicateKind::WellFormed(_)
         .                           | ty::PredicateKind::ObjectSafe(_)
         .                           | ty::PredicateKind::ClosureKind(..)
-- line 386 ----------------------------------------
-- line 397 ----------------------------------------
         .                           ty::PredicateKind::TypeWellFormedFromEnv(..) => {
         .                               bug!("TypeWellFormedFromEnv is only used for Chalk")
         .                           }
         .                       },
         .                       Some(pred) => match pred {
         .                           ty::PredicateKind::Trait(data) => {
         .                               let trait_obligation = obligation.with(Binder::dummy(data));
         .           
   551,260 ( 0.00%)                      self.process_trait_obligation(
         .                                   obligation,
 2,425,544 ( 0.02%)                          trait_obligation,
         .                                   &mut pending_obligation.stalled_on,
         .                               )
         .                           }
         .           
         .                           ty::PredicateKind::RegionOutlives(data) => {
     9,186 ( 0.00%)                      match infcx.region_outlives_predicate(&obligation.cause, Binder::dummy(data)) {
     6,124 ( 0.00%)                          Ok(()) => ProcessResult::Changed(vec![]),
         .                                   Err(_) => ProcessResult::Error(CodeSelectionError(Unimplemented)),
         .                               }
         .                           }
         .           
         .                           ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(t_a, r_b)) => {
    27,678 ( 0.00%)                      if self.register_region_obligations {
    69,195 ( 0.00%)                          self.selcx.infcx().register_region_obligation_with_cause(
         .                                       t_a,
         .                                       r_b,
         .                                       &obligation.cause,
         .                                   );
         .                               }
         .                               ProcessResult::Changed(vec![])
         .                           }
         .           
         .                           ty::PredicateKind::Projection(ref data) => {
         .                               let project_obligation = obligation.with(Binder::dummy(*data));
         .           
   157,430 ( 0.00%)                      self.process_projection_obligation(
         .                                   obligation,
   472,290 ( 0.00%)                          project_obligation,
         .                                   &mut pending_obligation.stalled_on,
         .                               )
         .                           }
         .           
         .                           ty::PredicateKind::ObjectSafe(trait_def_id) => {
       636 ( 0.00%)                      if !self.selcx.tcx().is_object_safe(trait_def_id) {
         .                                   ProcessResult::Error(CodeSelectionError(Unimplemented))
         .                               } else {
         .                                   ProcessResult::Changed(vec![])
         .                               }
         .                           }
         .           
         .                           ty::PredicateKind::ClosureKind(_, closure_substs, kind) => {
     1,548 ( 0.00%)                      match self.selcx.infcx().closure_kind(closure_substs) {
         .                                   Some(closure_kind) => {
     3,096 ( 0.00%)                              if closure_kind.extends(kind) {
         .                                           ProcessResult::Changed(vec![])
         .                                       } else {
         .                                           ProcessResult::Error(CodeSelectionError(Unimplemented))
         .                                       }
         .                                   }
         .                                   None => ProcessResult::Unchanged,
         .                               }
         .                           }
         .           
         .                           ty::PredicateKind::WellFormed(arg) => {
   490,350 ( 0.00%)                      match wf::obligations(
         .                                   self.selcx.infcx(),
   140,100 ( 0.00%)                          obligation.param_env,
   140,100 ( 0.00%)                          obligation.cause.body_id,
   210,150 ( 0.00%)                          obligation.recursion_depth + 1,
         .                                   arg,
         .                                   obligation.cause.span,
         .                               ) {
         .                                   None => {
    96,292 ( 0.00%)                              pending_obligation.stalled_on =
   168,511 ( 0.00%)                                  vec![TyOrConstInferVar::maybe_from_generic_arg(arg).unwrap()];
    48,146 ( 0.00%)                              ProcessResult::Unchanged
         .                                   }
   137,931 ( 0.00%)                          Some(os) => ProcessResult::Changed(mk_pending(os)),
         .                               }
         .                           }
         .           
         .                           ty::PredicateKind::Subtype(subtype) => {
     3,624 ( 0.00%)                      match self.selcx.infcx().subtype_predicate(
         .                                   &obligation.cause,
         .                                   obligation.param_env,
         .                                   Binder::dummy(subtype),
         .                               ) {
         .                                   None => {
         .                                       // None means that both are unresolved.
     1,695 ( 0.00%)                              pending_obligation.stalled_on = vec![
       339 ( 0.00%)                                  TyOrConstInferVar::maybe_from_ty(subtype.a).unwrap(),
       678 ( 0.00%)                                  TyOrConstInferVar::maybe_from_ty(subtype.b).unwrap(),
         .                                       ];
         .                                       ProcessResult::Unchanged
         .                                   }
         .                                   Some(Ok(ok)) => ProcessResult::Changed(mk_pending(ok.obligations)),
         .                                   Some(Err(err)) => {
         .                                       let expected_found =
         .                                           ExpectedFound::new(subtype.a_is_expected, subtype.a, subtype.b);
         .                                       ProcessResult::Error(FulfillmentErrorCode::CodeSubtypeError(
-- line 497 ----------------------------------------
-- line 498 ----------------------------------------
         .                                           expected_found,
         .                                           err,
         .                                       ))
         .                                   }
         .                               }
         .                           }
         .           
         .                           ty::PredicateKind::Coerce(coerce) => {
       888 ( 0.00%)                      match self.selcx.infcx().coerce_predicate(
         .                                   &obligation.cause,
         .                                   obligation.param_env,
         .                                   Binder::dummy(coerce),
         .                               ) {
         .                                   None => {
         .                                       // None means that both are unresolved.
       180 ( 0.00%)                              pending_obligation.stalled_on = vec![
        36 ( 0.00%)                                  TyOrConstInferVar::maybe_from_ty(coerce.a).unwrap(),
        72 ( 0.00%)                                  TyOrConstInferVar::maybe_from_ty(coerce.b).unwrap(),
         .                                       ];
         .                                       ProcessResult::Unchanged
         .                                   }
         .                                   Some(Ok(ok)) => ProcessResult::Changed(mk_pending(ok.obligations)),
         .                                   Some(Err(err)) => {
         .                                       let expected_found = ExpectedFound::new(false, coerce.a, coerce.b);
         .                                       ProcessResult::Error(FulfillmentErrorCode::CodeSubtypeError(
         .                                           expected_found,
-- line 523 ----------------------------------------
-- line 639 ----------------------------------------
         .                                   }
         .                               }
         .                           }
         .                           ty::PredicateKind::TypeWellFormedFromEnv(..) => {
         .                               bug!("TypeWellFormedFromEnv is only used for Chalk")
         .                           }
         .                       },
         .                   }
 2,055,843 ( 0.02%)      }
         .           
 2,095,073 ( 0.02%)      #[instrument(level = "debug", skip(self, obligation, stalled_on))]
         .               fn process_trait_obligation(
         .                   &mut self,
         .                   obligation: &PredicateObligation<'tcx>,
         .                   trait_obligation: TraitObligation<'tcx>,
         .                   stalled_on: &mut Vec<TyOrConstInferVar<'tcx>>,
         .               ) -> ProcessResult<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>> {
   110,267 ( 0.00%)          let infcx = self.selcx.infcx();
   330,801 ( 0.00%)          if obligation.predicate.is_global() {
         .                       // no type variables present, can use evaluation for better caching.
         .                       // FIXME: consider caching errors too.
    66,134 ( 0.00%)              if infcx.predicate_must_hold_considering_regions(obligation) {
         .                           debug!(
         .                               "selecting trait at depth {} evaluated to holds",
         .                               obligation.recursion_depth
         .                           );
    63,890 ( 0.00%)                  return ProcessResult::Changed(vec![]);
         .                       }
         .                   }
         .           
   547,754 ( 0.00%)          match self.selcx.select(&trait_obligation) {
         .                       Ok(Some(impl_source)) => {
         .                           debug!("selecting trait at depth {} yielded Ok(Some)", obligation.recursion_depth);
   548,748 ( 0.00%)                  ProcessResult::Changed(mk_pending(impl_source.nested_obligations()))
         .                       }
         .                       Ok(None) => {
         .                           debug!("selecting trait at depth {} yielded Ok(None)", obligation.recursion_depth);
         .           
         .                           // This is a bit subtle: for the most part, the
         .                           // only reason we can fail to make progress on
         .                           // trait selection is because we don't have enough
         .                           // information about the types in the trait.
         .                           stalled_on.clear();
         .                           stalled_on.extend(substs_infer_vars(
         .                               self.selcx,
    47,586 ( 0.00%)                      trait_obligation.predicate.map_bound(|pred| pred.trait_ref.substs),
         .                           ));
         .           
         .                           debug!(
         .                               "process_predicate: pending obligation {:?} now stalled on {:?}",
         .                               infcx.resolve_vars_if_possible(obligation.clone()),
         .                               stalled_on
         .                           );
         .           
    47,586 ( 0.00%)                  ProcessResult::Unchanged
         .                       }
         .                       Err(selection_err) => {
         .                           debug!("selecting trait at depth {} yielded Err", obligation.recursion_depth);
         .           
     3,500 ( 0.00%)                  ProcessResult::Error(CodeSelectionError(selection_err))
         .                       }
         .                   }
         .               }
         .           
   346,511 ( 0.00%)      fn process_projection_obligation(
         .                   &mut self,
         .                   obligation: &PredicateObligation<'tcx>,
         .                   project_obligation: PolyProjectionObligation<'tcx>,
         .                   stalled_on: &mut Vec<TyOrConstInferVar<'tcx>>,
         .               ) -> ProcessResult<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>> {
    31,501 ( 0.00%)          let tcx = self.selcx.tcx();
         .           
    94,503 ( 0.00%)          if obligation.predicate.is_global() {
         .                       // no type variables present, can use evaluation for better caching.
         .                       // FIXME: consider caching errors too.
    16,758 ( 0.00%)              if self.selcx.infcx().predicate_must_hold_considering_regions(obligation) {
    50,274 ( 0.00%)                  if let Some(key) = ProjectionCacheKey::from_poly_projection_predicate(
         .                               &mut self.selcx,
    58,653 ( 0.00%)                      project_obligation.predicate,
         .                           ) {
         .                               // If `predicate_must_hold_considering_regions` succeeds, then we've
         .                               // evaluated all sub-obligations. We can therefore mark the 'root'
         .                               // obligation as complete, and skip evaluating sub-obligations.
    50,274 ( 0.00%)                      self.selcx
         .                                   .infcx()
         .                                   .inner
         .                                   .borrow_mut()
         .                                   .projection_cache()
         .                                   .complete(key, EvaluationResult::EvaluatedToOk);
         .                           }
    16,758 ( 0.00%)                  return ProcessResult::Changed(vec![]);
         .                       } else {
         .                           tracing::debug!("Does NOT hold: {:?}", obligation);
         .                       }
         .                   }
         .           
   161,854 ( 0.00%)          match project::poly_project_and_unify_type(self.selcx, &project_obligation) {
         .                       Ok(Ok(Some(os))) => ProcessResult::Changed(mk_pending(os)),
         .                       Ok(Ok(None)) => {
         .                           stalled_on.clear();
         .                           stalled_on.extend(substs_infer_vars(
         .                               self.selcx,
    19,816 ( 0.00%)                      project_obligation.predicate.map_bound(|pred| pred.projection_ty.substs),
         .                           ));
    19,816 ( 0.00%)                  ProcessResult::Unchanged
         .                       }
         .                       // Let the caller handle the recursion
         .                       Ok(Err(project::InProgress)) => ProcessResult::Changed(mk_pending(vec![
         .                           project_obligation.with(project_obligation.predicate.to_predicate(tcx)),
         .                       ])),
         .                       Err(e) => ProcessResult::Error(CodeProjectionError(e)),
         .                   }
   252,008 ( 0.00%)      }
         .           }
         .           
         .           /// Returns the set of inference variables contained in `substs`.
         .           fn substs_infer_vars<'a, 'tcx>(
         .               selcx: &mut SelectionContext<'a, 'tcx>,
         .               substs: ty::Binder<'tcx, SubstsRef<'tcx>>,
         .           ) -> impl Iterator<Item = TyOrConstInferVar<'tcx>> {
         .               selcx
         .                   .infcx()
         .                   .resolve_vars_if_possible(substs)
         .                   .skip_binder() // ok because this check doesn't care about regions
         .                   .iter()
         .                   .filter(|arg| arg.has_infer_types_or_consts())
         .                   .flat_map(|arg| {
   505,055 ( 0.00%)              let mut walker = arg.walk();
   909,379 ( 0.01%)              while let Some(c) = walker.next() {
   101,067 ( 0.00%)                  if !c.has_infer_types_or_consts() {
         .                               walker.visited.remove(&c);
        24 ( 0.00%)                      walker.skip_current_subtree();
         .                           }
         .                       }
         .                       walker.visited.into_iter()
         .                   })
         .                   .filter_map(TyOrConstInferVar::maybe_from_generic_arg)
         .           }
         .           
         .           fn to_fulfillment_error<'tcx>(
         .               error: Error<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>>,
         .           ) -> FulfillmentError<'tcx> {
         .               let mut iter = error.backtrace.into_iter();
       250 ( 0.00%)      let obligation = iter.next().unwrap().obligation;
         .               // The root obligation is the last item in the backtrace - if there's only
         .               // one item, then it's the same as the main obligation
         .               let root_obligation = iter.next_back().map_or_else(|| obligation.clone(), |e| e.obligation);
     7,500 ( 0.00%)      FulfillmentError::new(obligation, error.error, root_obligation)
         .           }

 9,774,158 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/fulfill.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs
--------------------------------------------------------------------------------
Ir                 

-- line 44 ----------------------------------------
        .           /// Convert from a specific kind of undo to the more general UndoLog
        .           impl<'tcx> From<Instantiate> for UndoLog<'tcx> {
        .               fn from(l: Instantiate) -> Self {
        .                   UndoLog::Values(sv::UndoLog::Other(l))
        .               }
        .           }
        .           
        .           impl<'tcx> Rollback<UndoLog<'tcx>> for TypeVariableStorage<'tcx> {
  130,106 ( 0.00%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
  548,898 ( 0.00%)          match undo {
  101,632 ( 0.00%)              UndoLog::EqRelation(undo) => self.eq_relations.reverse(undo),
   59,000 ( 0.00%)              UndoLog::SubRelation(undo) => self.sub_relations.reverse(undo),
   99,580 ( 0.00%)              UndoLog::Values(undo) => self.values.reverse(undo),
        .                   }
  260,212 ( 0.00%)      }
        .           }
        .           
        .           pub struct TypeVariableStorage<'tcx> {
        .               values: sv::SnapshotVecStorage<Delegate>,
        .           
        .               /// Two variables are unified in `eq_relations` when we have a
        .               /// constraint `?X == ?Y`. This table also stores, for each key,
        .               /// the known value.
-- line 66 ----------------------------------------
-- line 136 ----------------------------------------
        .               DynReturnFn,
        .               LatticeVariable,
        .           }
        .           
        .           pub(crate) struct TypeVariableData {
        .               origin: TypeVariableOrigin,
        .           }
        .           
3,053,568 ( 0.03%)  #[derive(Copy, Clone, Debug)]
        .           pub enum TypeVariableValue<'tcx> {
        .               Known { value: Ty<'tcx> },
        .               Unknown { universe: ty::UniverseIndex },
        .           }
        .           
        .           impl<'tcx> TypeVariableValue<'tcx> {
        .               /// If this value is known, returns the type it is known to be.
        .               /// Otherwise, `None`.
        .               pub fn known(&self) -> Option<Ty<'tcx>> {
2,131,090 ( 0.02%)          match *self {
        .                       TypeVariableValue::Unknown { .. } => None,
        .                       TypeVariableValue::Known { value } => Some(value),
        .                   }
        .               }
        .           
        .               pub fn is_unknown(&self) -> bool {
        .                   match *self {
        .                       TypeVariableValue::Unknown { .. } => true,
-- line 162 ----------------------------------------
-- line 166 ----------------------------------------
        .           }
        .           
        .           pub(crate) struct Instantiate;
        .           
        .           pub(crate) struct Delegate;
        .           
        .           impl<'tcx> TypeVariableStorage<'tcx> {
        .               pub fn new() -> TypeVariableStorage<'tcx> {
   81,375 ( 0.00%)          TypeVariableStorage {
        .                       values: sv::SnapshotVecStorage::new(),
        .                       eq_relations: ut::UnificationTableStorage::new(),
        .                       sub_relations: ut::UnificationTableStorage::new(),
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub(crate) fn with_log<'a>(
-- line 182 ----------------------------------------
-- line 188 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> TypeVariableTable<'_, 'tcx> {
        .               /// Returns the origin that was given when `vid` was created.
        .               ///
        .               /// Note that this function does not return care whether
        .               /// `vid` has been unified with something else or not.
        .               pub fn var_origin(&self, vid: ty::TyVid) -> &TypeVariableOrigin {
    3,811 ( 0.00%)          &self.storage.values.get(vid.as_usize()).origin
        .               }
        .           
        .               /// Records that `a == b`, depending on `dir`.
        .               ///
        .               /// Precondition: neither `a` nor `b` are known.
        .               pub fn equate(&mut self, a: ty::TyVid, b: ty::TyVid) {
        .                   debug_assert!(self.probe(a).is_unknown());
        .                   debug_assert!(self.probe(b).is_unknown());
   87,388 ( 0.00%)          self.eq_relations().union(a, b);
   74,904 ( 0.00%)          self.sub_relations().union(a, b);
        .               }
        .           
        .               /// Records that `a <: b`, depending on `dir`.
        .               ///
        .               /// Precondition: neither `a` nor `b` are known.
        .               pub fn sub(&mut self, a: ty::TyVid, b: ty::TyVid) {
        .                   debug_assert!(self.probe(a).is_unknown());
        .                   debug_assert!(self.probe(b).is_unknown());
    3,648 ( 0.00%)          self.sub_relations().union(a, b);
        .               }
        .           
        .               /// Instantiates `vid` with the type `ty`.
        .               ///
        .               /// Precondition: `vid` must not have been previously instantiated.
  410,860 ( 0.00%)      pub fn instantiate(&mut self, vid: ty::TyVid, ty: Ty<'tcx>) {
        .                   let vid = self.root_var(vid);
        .                   debug_assert!(self.probe(vid).is_unknown());
        .                   debug_assert!(
        .                       self.eq_relations().probe_value(vid).is_unknown(),
        .                       "instantiating type variable `{:?}` twice: new-value = {:?}, old-value={:?}",
        .                       vid,
        .                       ty,
        .                       self.eq_relations().probe_value(vid)
        .                   );
  575,204 ( 0.01%)          self.eq_relations().union_value(vid, TypeVariableValue::Known { value: ty });
        .           
        .                   // Hack: we only need this so that `types_escaping_snapshot`
        .                   // can see what has been unified; see the Delegate impl for
        .                   // more details.
        .                   self.undo_log.push(Instantiate);
  410,860 ( 0.00%)      }
        .           
        .               /// Creates a new type variable.
        .               ///
        .               /// - `diverging`: indicates if this is a "diverging" type
        .               ///   variable, e.g.,  one created as the type of a `return`
        .               ///   expression. The code in this module doesn't care if a
        .               ///   variable is diverging, but the main Rust type-checker will
        .               ///   sometimes "unify" such variables with the `!` or `()` types.
        .               /// - `origin`: indicates *why* the type variable was created.
        .               ///   The code in this module doesn't care, but it can be useful
        .               ///   for improving error messages.
  619,650 ( 0.01%)      pub fn new_var(
        .                   &mut self,
        .                   universe: ty::UniverseIndex,
        .                   origin: TypeVariableOrigin,
        .               ) -> ty::TyVid {
  929,475 ( 0.01%)          let eq_key = self.eq_relations().new_key(TypeVariableValue::Unknown { universe });
        .           
  516,375 ( 0.00%)          let sub_key = self.sub_relations().new_key(());
  103,275 ( 0.00%)          assert_eq!(eq_key.vid, sub_key);
        .           
  929,475 ( 0.01%)          let index = self.values().push(TypeVariableData { origin });
  413,100 ( 0.00%)          assert_eq!(eq_key.vid.as_u32(), index as u32);
        .           
        .                   debug!("new_var(index={:?}, universe={:?}, origin={:?}", eq_key.vid, universe, origin,);
        .           
        .                   eq_key.vid
  722,925 ( 0.01%)      }
        .           
        .               /// Returns the number of type variables created thus far.
        .               pub fn num_vars(&self) -> usize {
    2,326 ( 0.00%)          self.storage.values.len()
        .               }
        .           
        .               /// Returns the "root" variable of `vid` in the `eq_relations`
        .               /// equivalence table. All type variables that have been equated
        .               /// will yield the same root variable (per the union-find
        .               /// algorithm), so `root_var(a) == root_var(b)` implies that `a ==
        .               /// b` (transitively).
        .               pub fn root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
  334,743 ( 0.00%)          self.eq_relations().find(vid).vid
        .               }
        .           
        .               /// Returns the "root" variable of `vid` in the `sub_relations`
        .               /// equivalence table. All type variables that have been are
        .               /// related via equality or subtyping will yield the same root
        .               /// variable (per the union-find algorithm), so `sub_root_var(a)
        .               /// == sub_root_var(b)` implies that:
        .               ///
        .               ///     exists X. (a <: X || X <: a) && (b <: X || X <: b)
      280 ( 0.00%)      pub fn sub_root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
  249,708 ( 0.00%)          self.sub_relations().find(vid)
      560 ( 0.00%)      }
        .           
        .               /// Returns `true` if `a` and `b` have same "sub-root" (i.e., exists some
        .               /// type X such that `forall i in {a, b}. (i <: X || X <: i)`.
        .               pub fn sub_unified(&mut self, a: ty::TyVid, b: ty::TyVid) -> bool {
        .                   self.sub_root_var(a) == self.sub_root_var(b)
        .               }
        .           
        .               /// Retrieves the type to which `vid` has been instantiated, if
        .               /// any.
7,099,780 ( 0.06%)      pub fn probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
        .                   self.inlined_probe(vid)
7,099,780 ( 0.06%)      }
        .           
        .               /// An always-inlined variant of `probe`, for very hot call sites.
        .               #[inline(always)]
        .               pub fn inlined_probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
4,095,874 ( 0.04%)          self.eq_relations().inlined_probe_value(vid)
        .               }
        .           
        .               /// If `t` is a type-inference variable, and it has been
        .               /// instantiated, then return the with which it was
        .               /// instantiated. Otherwise, returns `t`.
        .               pub fn replace_if_possible(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
  979,844 ( 0.01%)          match *t.kind() {
  713,927 ( 0.01%)              ty::Infer(ty::TyVar(v)) => match self.probe(v) {
        .                           TypeVariableValue::Unknown { .. } => t,
        .                           TypeVariableValue::Known { value } => value,
        .                       },
        .                       _ => t,
        .                   }
        .               }
        .           
        .               #[inline]
-- line 323 ----------------------------------------
-- line 324 ----------------------------------------
        .               fn values(
        .                   &mut self,
        .               ) -> sv::SnapshotVec<Delegate, &mut Vec<TypeVariableData>, &mut InferCtxtUndoLogs<'tcx>> {
        .                   self.storage.values.with_log(self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn eq_relations(&mut self) -> super::UnificationTable<'_, 'tcx, TyVidEqKey<'tcx>> {
5,486,083 ( 0.05%)          self.storage.eq_relations.with_log(self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn sub_relations(&mut self) -> super::UnificationTable<'_, 'tcx, ty::TyVid> {
  201,202 ( 0.00%)          self.storage.sub_relations.with_log(self.undo_log)
        .               }
        .           
        .               /// Returns a range of the type variables created during the snapshot.
   11,630 ( 0.00%)      pub fn vars_since_snapshot(
        .                   &mut self,
        .                   value_count: usize,
        .               ) -> (Range<TyVid>, Vec<TypeVariableOrigin>) {
        .                   let range = TyVid::from_usize(value_count)..TyVid::from_usize(self.num_vars());
   13,956 ( 0.00%)          (
        .                       range.start..range.end,
        .                       (range.start.as_usize()..range.end.as_usize())
        .                           .map(|index| self.storage.values.get(index).origin)
        .                           .collect(),
        .                   )
   13,956 ( 0.00%)      }
        .           
        .               /// Returns indices of all variables that are not yet
        .               /// instantiated.
        .               pub fn unsolved_variables(&mut self) -> Vec<ty::TyVid> {
        .                   (0..self.storage.values.len())
        .                       .filter_map(|i| {
        .                           let vid = ty::TyVid::from_usize(i);
  562,764 ( 0.00%)                  match self.probe(vid) {
        .                               TypeVariableValue::Unknown { .. } => Some(vid),
        .                               TypeVariableValue::Known { .. } => None,
        .                           }
        .                       })
        .                       .collect()
        .               }
        .           }
        .           
-- line 368 ----------------------------------------
-- line 391 ----------------------------------------
        .           /// These structs (a newtyped TyVid) are used as the unification key
        .           /// for the `eq_relations`; they carry a `TypeVariableValue` along
        .           /// with them.
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq)]
        .           pub(crate) struct TyVidEqKey<'tcx> {
        .               vid: ty::TyVid,
        .           
        .               // in the table, we map each ty-vid to one of these:
4,050,276 ( 0.04%)      phantom: PhantomData<TypeVariableValue<'tcx>>,
        .           }
        .           
        .           impl<'tcx> From<ty::TyVid> for TyVidEqKey<'tcx> {
        .               #[inline] // make this function eligible for inlining - it is quite hot.
        .               fn from(vid: ty::TyVid) -> Self {
        .                   TyVidEqKey { vid, phantom: PhantomData }
        .               }
        .           }
-- line 407 ----------------------------------------
-- line 419 ----------------------------------------
        .                   "TyVidEqKey"
        .               }
        .           }
        .           
        .           impl<'tcx> ut::UnifyValue for TypeVariableValue<'tcx> {
        .               type Error = ut::NoError;
        .           
        .               fn unify_values(value1: &Self, value2: &Self) -> Result<Self, ut::NoError> {
  391,028 ( 0.00%)          match (value1, value2) {
        .                       // We never equate two type variables, both of which
        .                       // have known types.  Instead, we recursively equate
        .                       // those types.
        .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Known { .. }) => {
        .                           bug!("equating two type variables, both of which have known types")
        .                       }
        .           
        .                       // If one side is known, prefer that one.
        .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Unknown { .. }) => Ok(*value1),
        .                       (&TypeVariableValue::Unknown { .. }, &TypeVariableValue::Known { .. }) => Ok(*value2),
        .           
        .                       // If both sides are *unknown*, it hardly matters, does it?
        .                       (
   12,468 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe1 },
   12,468 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe2 },
        .                       ) => {
        .                           // If we unify two unbound variables, ?T and ?U, then whatever
        .                           // value they wind up taking (which must be the same value) must
        .                           // be nameable by both universes. Therefore, the resulting
        .                           // universe is the minimum of the two universes, because that is
        .                           // the one which contains the fewest names in scope.
        .                           let universe = cmp::min(universe1, universe2);
   49,872 ( 0.00%)                  Ok(TypeVariableValue::Unknown { universe })
        .                       }
        .                   }
        .               }
        .           }

  201,135 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 36 ----------------------------------------
        .           use rustc_session::parse::ParseSess;
        .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
        .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
        .           use tracing::debug;
        .           
        .           use std::ops::Range;
        .           use std::{cmp, mem, slice};
        .           
  122,284 ( 0.00%)  bitflags::bitflags! {
        .               struct Restrictions: u8 {
        .                   const STMT_EXPR         = 1 << 0;
        .                   const NO_STRUCT_LITERAL = 1 << 1;
        .                   const CONST_EXPR        = 1 << 2;
        .               }
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
        .                               $self.bump();
        .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
        .                           }
        .                       }
        .                   }
        .               };
        .           }
        .           
  607,709 ( 0.01%)  #[derive(Clone)]
        .           pub struct Parser<'a> {
   22,385 ( 0.00%)      pub sess: &'a ParseSess,
        .               /// The current token.
   19,924 ( 0.00%)      pub token: Token,
        .               /// The spacing for the current token
   10,620 ( 0.00%)      pub token_spacing: Spacing,
        .               /// The previous token.
   29,886 ( 0.00%)      pub prev_token: Token,
   11,278 ( 0.00%)      pub capture_cfg: bool,
   23,214 ( 0.00%)      restrictions: Restrictions,
   21,240 ( 0.00%)      expected_tokens: Vec<TokenType>,
        .               // Important: This must only be advanced from `next_tok`
        .               // to ensure that `token_cursor.num_next_calls` is updated properly
        .               token_cursor: TokenCursor,
   21,240 ( 0.00%)      desugar_doc_comments: bool,
        .               /// This field is used to keep track of how many left angle brackets we have seen. This is
        .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
        .               /// appropriately.
        .               ///
        .               /// See the comments in the `parse_path_segment` function for more details.
   21,240 ( 0.00%)      unmatched_angle_bracket_count: u32,
   31,860 ( 0.00%)      max_angle_bracket_count: u32,
        .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
        .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
        .               /// error.
   10,620 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
        .               last_unexpected_token_span: Option<Span>,
        .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
        .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
        .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
        .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
        .               subparser_name: Option<&'static str>,
        .               capture_state: CaptureState,
        .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
        .           /// the first macro inner attribute to invoke a proc-macro).
        .           /// When create a `TokenStream`, the inner attributes get inserted
        .           /// into the proper place in the token stream.
        .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
        .           
        .           /// Controls how we capture tokens. Capturing can be expensive,
        .           /// so we try to avoid performing capturing in cases where
        .           /// we will never need an `AttrAnnotatedTokenStream`
   10,620 ( 0.00%)  #[derive(Copy, Clone)]
        .           pub enum Capturing {
        .               /// We aren't performing any capturing - this is the default mode.
        .               No,
        .               /// We are capturing tokens
        .               Yes,
        .           }
        .           
   44,283 ( 0.00%)  #[derive(Clone)]
        .           struct CaptureState {
   42,480 ( 0.00%)      capturing: Capturing,
   10,620 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
        .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
        .           }
        .           
        .           impl<'a> Drop for Parser<'a> {
        .               fn drop(&mut self) {
   47,627 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
        .               }
        .           }
        .           
  618,655 ( 0.01%)  #[derive(Clone)]
        .           struct TokenCursor {
        .               frame: TokenCursorFrame,
  138,606 ( 0.00%)      stack: Vec<TokenCursorFrame>,
        .               desugar_doc_comments: bool,
        .               // Counts the number of calls to `next` or `next_desugared`,
        .               // depending on whether `desugar_doc_comments` is set.
   45,280 ( 0.00%)      num_next_calls: usize,
        .               // During parsing, we may sometimes need to 'unglue' a
        .               // glued token into two component tokens
        .               // (e.g. '>>' into '>' and '>), so that the parser
        .               // can consume them one at a time. This process
        .               // bypasses the normal capturing mechanism
        .               // (e.g. `num_next_calls` will not be incremented),
        .               // since the 'unglued' tokens due not exist in
        .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
        .               // in `Option<Vec<u8>>` requires us to unglue
        .               // the trailing `>>` token. The `break_last_token`
        .               // field is used to track this token - it gets
        .               // appended to the captured stream when
        .               // we evaluate a `LazyTokenStream`
        .               break_last_token: bool,
        .           }
        .           
  273,859 ( 0.00%)  #[derive(Clone)]
        .           struct TokenCursorFrame {
   80,354 ( 0.00%)      delim: token::DelimToken,
        .               span: DelimSpan,
        .               open_delim: bool,
  160,708 ( 0.00%)      tree_cursor: tokenstream::Cursor,
        .               close_delim: bool,
        .           }
        .           
        .           impl TokenCursorFrame {
        .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
   23,560 ( 0.00%)          TokenCursorFrame {
        .                       delim,
        .                       span,
        .                       open_delim: false,
   33,988 ( 0.00%)              tree_cursor: tts.into_trees(),
        .                       close_delim: false,
        .                   }
        .               }
        .           }
        .           
        .           impl TokenCursor {
3,083,148 ( 0.03%)      fn next(&mut self) -> (Token, Spacing) {
        .                   loop {
1,447,443 ( 0.01%)              let (tree, spacing) = if !self.frame.open_delim {
   23,783 ( 0.00%)                  self.frame.open_delim = true;
  118,915 ( 0.00%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
2,991,499 ( 0.03%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
        .                           tree
  105,430 ( 0.00%)              } else if !self.frame.close_delim {
   23,894 ( 0.00%)                  self.frame.close_delim = true;
  119,470 ( 0.00%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
   47,788 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
  310,622 ( 0.00%)                  self.frame = frame;
        .                           continue;
        .                       } else {
   88,686 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
        .                       };
        .           
  559,862 ( 0.00%)              match tree {
        .                           TokenTree::Token(token) => {
2,055,432 ( 0.02%)                      return (token, spacing);
        .                           }
        .                           TokenTree::Delimited(sp, delim, tts) => {
        .                               let frame = TokenCursorFrame::new(sp, delim, tts);
        .                               self.stack.push(mem::replace(&mut self.frame, frame));
        .                           }
        .                       }
        .                   }
2,055,432 ( 0.02%)      }
        .           
1,136,690 ( 0.01%)      fn next_desugared(&mut self) -> (Token, Spacing) {
  342,569 ( 0.00%)          let (data, attr_style, sp) = match self.next() {
    2,343 ( 0.00%)              (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
        .                           (data, attr_style, span)
        .                       }
  564,440 ( 0.00%)              tok => return tok,
        .                   };
        .           
        .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
        .                   // required to wrap the text.
        .                   let mut num_of_hashes = 0;
        .                   let mut count = 0;
  225,123 ( 0.00%)          for ch in data.as_str().chars() {
        .                       count = match ch {
        .                           '"' => 1,
       84 ( 0.00%)                  '#' if count > 0 => count + 1,
        .                           _ => 0,
        .                       };
        .                       num_of_hashes = cmp::max(num_of_hashes, count);
        .                   }
        .           
    3,124 ( 0.00%)          let delim_span = DelimSpan::from_single(sp);
    3,905 ( 0.00%)          let body = TokenTree::Delimited(
        .                       delim_span,
        .                       token::Bracket,
    9,372 ( 0.00%)              [
    5,467 ( 0.00%)                  TokenTree::token(token::Ident(sym::doc, false), sp),
    3,124 ( 0.00%)                  TokenTree::token(token::Eq, sp),
    6,248 ( 0.00%)                  TokenTree::token(TokenKind::lit(token::StrRaw(num_of_hashes), data, None), sp),
        .                       ]
        .                       .iter()
        .                       .cloned()
        .                       .collect::<TokenStream>(),
      781 ( 0.00%)          );
        .           
        .                   self.stack.push(mem::replace(
        .                       &mut self.frame,
        .                       TokenCursorFrame::new(
        .                           delim_span,
        .                           token::NoDelim,
      781 ( 0.00%)                  if attr_style == AttrStyle::Inner {
        .                               [TokenTree::token(token::Pound, sp), TokenTree::token(token::Not, sp), body]
        .                                   .iter()
        .                                   .cloned()
        .                                   .collect::<TokenStream>()
        .                           } else {
    9,372 ( 0.00%)                      [TokenTree::token(token::Pound, sp), body]
        .                                   .iter()
        .                                   .cloned()
        .                                   .collect::<TokenStream>()
        .                           },
        .                       ),
        .                   ));
        .           
    2,343 ( 0.00%)          self.next()
1,023,021 ( 0.01%)      }
        .           }
        .           
   40,020 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
        .           enum TokenType {
   32,016 ( 0.00%)      Token(TokenKind),
        .               Keyword(Symbol),
        .               Operator,
        .               Lifetime,
        .               Ident,
        .               Path,
        .               Type,
        .               Const,
        .           }
-- line 353 ----------------------------------------
-- line 378 ----------------------------------------
        .               /// The separator token.
        .               sep: Option<TokenKind>,
        .               /// `true` if a trailing separator is allowed.
        .               trailing_sep_allowed: bool,
        .           }
        .           
        .           impl SeqSep {
        .               fn trailing_allowed(t: TokenKind) -> SeqSep {
      276 ( 0.00%)          SeqSep { sep: Some(t), trailing_sep_allowed: true }
        .               }
        .           
        .               fn none() -> SeqSep {
        .                   SeqSep { sep: None, trailing_sep_allowed: false }
        .               }
        .           }
        .           
        .           pub enum FollowedByType {
        .               Yes,
        .               No,
        .           }
        .           
        .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
      732 ( 0.00%)      Some(match token.kind {
    1,464 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
    1,464 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
    1,464 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
        .                   token::DocComment(..) => "doc comment",
        .                   _ => return None,
        .               })
        .           }
        .           
    2,562 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
      732 ( 0.00%)      let token_str = pprust::token_to_string(token);
        .               match token_descr_opt(token) {
        .                   Some(prefix) => format!("{} `{}`", prefix, token_str),
    2,562 ( 0.00%)          _ => format!("`{}`", token_str),
        .               }
    1,830 ( 0.00%)  }
        .           
        .           impl<'a> Parser<'a> {
   65,968 ( 0.00%)      pub fn new(
        .                   sess: &'a ParseSess,
        .                   tokens: TokenStream,
        .                   desugar_doc_comments: bool,
        .                   subparser_name: Option<&'static str>,
        .               ) -> Self {
    4,712 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
    9,424 ( 0.00%)          start_frame.open_delim = true;
        .                   start_frame.close_delim = true;
        .           
  146,072 ( 0.00%)          let mut parser = Parser {
        .                       sess,
    4,712 ( 0.00%)              token: Token::dummy(),
        .                       token_spacing: Spacing::Alone,
    4,712 ( 0.00%)              prev_token: Token::dummy(),
        .                       capture_cfg: false,
        .                       restrictions: Restrictions::empty(),
        .                       expected_tokens: Vec::new(),
        .                       token_cursor: TokenCursor {
   28,272 ( 0.00%)                  frame: start_frame,
        .                           stack: Vec::new(),
        .                           num_next_calls: 0,
        .                           desugar_doc_comments,
        .                           break_last_token: false,
        .                       },
        .                       desugar_doc_comments,
        .                       unmatched_angle_bracket_count: 0,
        .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
        .                           capturing: Capturing::No,
        .                           replace_ranges: Vec::new(),
        .                           inner_attr_ranges: Default::default(),
        .                       },
        .                       current_closure: None,
        .                   };
        .           
        .                   // Make parser point to the first token.
    9,424 ( 0.00%)          parser.bump();
        .           
        .                   parser
   42,408 ( 0.00%)      }
        .           
        .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
        .                   loop {
1,499,592 ( 0.01%)              let (mut next, spacing) = if self.desugar_doc_comments {
  454,676 ( 0.00%)                  self.token_cursor.next_desugared()
        .                       } else {
  408,789 ( 0.00%)                  self.token_cursor.next()
        .                       };
  999,728 ( 0.01%)              self.token_cursor.num_next_calls += 1;
        .                       // We've retrieved an token from the underlying
        .                       // cursor, so we no longer need to worry about
        .                       // an unglued token. See `break_and_eat` for more details
  249,932 ( 0.00%)              self.token_cursor.break_last_token = false;
  999,728 ( 0.01%)              if next.span.is_dummy() {
        .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
   19,052 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
        .                       }
  820,455 ( 0.01%)              if matches!(
  499,864 ( 0.00%)                  next.kind,
        .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
        .                       ) {
        .                           continue;
        .                       }
  993,480 ( 0.01%)              return (next, spacing);
        .                   }
        .               }
        .           
        .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
        .                   match self.expect_one_of(&[], &[]) {
        .                       Err(e) => Err(e),
        .                       // We can get `Ok(true)` from `recover_closing_delimiter`
        .                       // which is called in `expected_one_of_not_found`.
        .                       Ok(_) => FatalError.raise(),
        .                   }
        .               }
        .           
        .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
  124,326 ( 0.00%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
   13,814 ( 0.00%)          if self.expected_tokens.is_empty() {
    8,346 ( 0.00%)              if self.token == *t {
    6,955 ( 0.00%)                  self.bump();
        .                           Ok(false)
        .                       } else {
        .                           self.unexpected_try_recover(t)
        .                       }
        .                   } else {
  149,076 ( 0.00%)              self.expect_one_of(slice::from_ref(t), &[])
        .                   }
  207,210 ( 0.00%)      }
        .           
        .               /// Expect next token to be edible or inedible token.  If edible,
        .               /// then consume it; if inedible, then return without consuming
        .               /// anything.  Signal a fatal error if next token is unexpected.
  177,744 ( 0.00%)      pub fn expect_one_of(
        .                   &mut self,
        .                   edible: &[TokenKind],
        .                   inedible: &[TokenKind],
        .               ) -> PResult<'a, bool /* recovered */> {
   29,624 ( 0.00%)          if edible.contains(&self.token.kind) {
   39,294 ( 0.00%)              self.bump();
        .                       Ok(false)
        .                   } else if inedible.contains(&self.token.kind) {
        .                       // leave it in the input
        .                       Ok(false)
        .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
        .                       FatalError.raise();
        .                   } else {
        .                       self.expected_one_of_not_found(edible, inedible)
        .                   }
  222,180 ( 0.00%)      }
        .           
        .               // Public for rustfmt usage.
        .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
   82,977 ( 0.00%)          self.parse_ident_common(true)
        .               }
        .           
        .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
   63,693 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
        .                       TokenKind::DocComment(..) => {
        .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
        .                       }
        .                       _ => self.expected_ident_found(),
        .                   })
        .               }
        .           
  147,014 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
   21,002 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
  126,012 ( 0.00%)          if !is_raw && ident.is_reserved() {
        .                       let mut err = self.expected_ident_found();
        .                       if recover {
        .                           err.emit();
        .                       } else {
        .                           return Err(err);
        .                       }
        .                   }
   84,008 ( 0.00%)          self.bump();
        .                   Ok(ident)
  210,020 ( 0.00%)      }
        .           
        .               /// Checks if the next token is `tok`, and returns `true` if so.
        .               ///
        .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
        .               /// encountered.
2,558,780 ( 0.02%)      fn check(&mut self, tok: &TokenKind) -> bool {
1,110,755 ( 0.01%)          let is_present = self.token == *tok;
  746,728 ( 0.01%)          if !is_present {
1,692,618 ( 0.01%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
        .                   }
        .                   is_present
2,558,780 ( 0.02%)      }
        .           
        .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
      448 ( 0.00%)      pub fn eat(&mut self, tok: &TokenKind) -> bool {
  573,579 ( 0.01%)          let is_present = self.check(tok);
  378,368 ( 0.00%)          if is_present {
   44,145 ( 0.00%)              self.bump()
        .                   }
        .                   is_present
      560 ( 0.00%)      }
        .           
        .               /// If the next token is the given keyword, returns `true` without eating it.
        .               /// An expectation is also added for diagnostics purposes.
   52,190 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
   13,766 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
  380,380 ( 0.00%)          self.token.is_keyword(kw)
        .               }
        .           
        .               /// If the next token is the given keyword, eats it and returns `true`.
        .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
        .               // Public for rustfmt usage.
  101,225 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
   77,960 ( 0.00%)          if self.check_keyword(kw) {
    9,006 ( 0.00%)              self.bump();
        .                       true
        .                   } else {
        .                       false
        .                   }
  101,225 ( 0.00%)      }
        .           
        .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
   16,406 ( 0.00%)          if self.token.is_keyword(kw) {
    3,581 ( 0.00%)              self.bump();
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// If the given word is not a keyword, signals an error.
        .               /// If the next token is not the given word, signals an error.
        .               /// Otherwise, eats it.
    1,960 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
        .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
    1,568 ( 0.00%)      }
        .           
        .               /// Is the given keyword `kw` followed by a non-reserved identifier?
   92,320 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
   46,160 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
  103,860 ( 0.00%)      }
        .           
  113,166 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
   43,480 ( 0.00%)          if ok {
        .                       true
        .                   } else {
   19,172 ( 0.00%)              self.expected_tokens.push(typ);
        .                       false
        .                   }
  113,166 ( 0.00%)      }
        .           
        .               fn check_ident(&mut self) -> bool {
   15,842 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
        .               }
        .           
   47,508 ( 0.00%)      fn check_path(&mut self) -> bool {
  104,543 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
   59,385 ( 0.00%)      }
        .           
        .               fn check_type(&mut self) -> bool {
    7,820 ( 0.00%)          self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
        .               }
        .           
        .               fn check_const_arg(&mut self) -> bool {
    6,944 ( 0.00%)          self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
        .               }
        .           
   16,479 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
    9,155 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
        .                       && self.look_ahead(dist + 1, |t| match t.kind {
        .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
        .                           token::OpenDelim(DelimToken::Brace) => true,
        .                           _ => false,
        .                       })
   16,479 ( 0.00%)      }
        .           
        .               /// Checks to see if the next token is either `+` or `+=`.
        .               /// Otherwise returns `false`.
        .               fn check_plus(&mut self) -> bool {
   10,440 ( 0.00%)          self.check_or_expected(
    5,220 ( 0.00%)              self.token.is_like_plus(),
    5,220 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
        .                   )
        .               }
        .           
        .               /// Eats the expected token if it's present possibly breaking
        .               /// compound tokens like multi-character operators in process.
        .               /// Returns `true` if the token was eaten.
  182,520 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
  106,470 ( 0.00%)          if self.token.kind == expected {
    5,844 ( 0.00%)              self.bump();
        .                       return true;
        .                   }
   61,440 ( 0.00%)          match self.token.kind.break_two_token_op() {
      746 ( 0.00%)              Some((first, second)) if first == expected => {
      392 ( 0.00%)                  let first_span = self.sess.source_map().start_point(self.token.span);
      490 ( 0.00%)                  let second_span = self.token.span.with_lo(first_span.hi());
      882 ( 0.00%)                  self.token = Token::new(first, first_span);
        .                           // Keep track of this token - if we end token capturing now,
        .                           // we'll want to append this token to the captured stream.
        .                           //
        .                           // If we consume any additional tokens, then this token
        .                           // is not needed (we'll capture the entire 'glued' token),
        .                           // and `next_tok` will set this field to `None`
       98 ( 0.00%)                  self.token_cursor.break_last_token = true;
        .                           // Use the spacing of the glued token as the spacing
        .                           // of the unglued second token.
    1,372 ( 0.00%)                  self.bump_with((Token::new(second, second_span), self.token_spacing));
        .                           true
        .                       }
        .                       _ => {
   36,570 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
        .                           false
        .                       }
        .                   }
  185,670 ( 0.00%)      }
        .           
        .               /// Eats `+` possibly breaking tokens like `+=` in process.
        .               fn eat_plus(&mut self) -> bool {
      740 ( 0.00%)          self.break_and_eat(token::BinOp(token::Plus))
        .               }
        .           
        .               /// Eats `&` possibly breaking tokens like `&&` in process.
        .               /// Signals an error if `&` is not eaten.
        .               fn expect_and(&mut self) -> PResult<'a, ()> {
    4,110 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `|` possibly breaking tokens like `||` in process.
        .               /// Signals an error if `|` was not eaten.
        .               fn expect_or(&mut self) -> PResult<'a, ()> {
      552 ( 0.00%)          if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `<` possibly breaking tokens like `<<` in process.
    7,646 ( 0.00%)      fn eat_lt(&mut self) -> bool {
   41,242 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
   27,146 ( 0.00%)          if ate {
        .                       // See doc comment for `unmatched_angle_bracket_count`.
    4,468 ( 0.00%)              self.unmatched_angle_bracket_count += 1;
    4,743 ( 0.00%)              self.max_angle_bracket_count += 1;
        .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
        .                   }
        .                   ate
    7,646 ( 0.00%)      }
        .           
        .               /// Eats `<` possibly breaking tokens like `<<` in process.
        .               /// Signals an error if `<` was not eaten.
        .               fn expect_lt(&mut self) -> PResult<'a, ()> {
        .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `>` possibly breaking tokens like `>>` in process.
        .               /// Signals an error if `>` was not eaten.
        .               fn expect_gt(&mut self) -> PResult<'a, ()> {
    6,546 ( 0.00%)          if self.break_and_eat(token::Gt) {
        .                       // See doc comment for `unmatched_angle_bracket_count`.
    3,273 ( 0.00%)              if self.unmatched_angle_bracket_count > 0 {
    2,182 ( 0.00%)                  self.unmatched_angle_bracket_count -= 1;
        .                           debug!("expect_gt: (decrement) count={:?}", self.unmatched_angle_bracket_count);
        .                       }
        .                       Ok(())
        .                   } else {
        .                       self.unexpected()
        .                   }
        .               }
        .           
        .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
        .                   kets.iter().any(|k| match expect {
   27,501 ( 0.00%)              TokenExpectType::Expect => self.check(k),
    1,404 ( 0.00%)              TokenExpectType::NoExpect => self.token == **k,
        .                   })
        .               }
        .           
        .               fn parse_seq_to_before_tokens<T>(
        .                   &mut self,
        .                   kets: &[&TokenKind],
        .                   sep: SeqSep,
        .                   expect: TokenExpectType,
-- line 759 ----------------------------------------
-- line 761 ----------------------------------------
        .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
        .                   let mut first = true;
        .                   let mut recovered = false;
        .                   let mut trailing = false;
        .                   let mut v = vec![];
        .                   let unclosed_delims = !self.unclosed_delims.is_empty();
        .           
        .                   while !self.expect_any_with_type(kets, expect) {
   26,776 ( 0.00%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
        .                           break;
        .                       }
   18,327 ( 0.00%)              if let Some(ref t) = sep.sep {
   22,827 ( 0.00%)                  if first {
        .                               first = false;
        .                           } else {
   17,550 ( 0.00%)                      match self.expect(t) {
        .                                   Ok(false) => {
        .                                       self.current_closure.take();
        .                                   }
        .                                   Ok(true) => {
        .                                       self.current_closure.take();
        .                                       recovered = true;
        .                                       break;
        .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
        .                                               e.cancel();
        .                                               break;
        .                                           }
        .                                       }
        .                                   }
        .                               }
        .                           }
        .                       }
    9,820 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
        .                           trailing = true;
        .                           break;
        .                       }
        .           
    6,974 ( 0.00%)              let t = f(self)?;
    5,385 ( 0.00%)              v.push(t);
        .                   }
        .           
   15,236 ( 0.00%)          Ok((v, trailing, recovered))
        .               }
        .           
        .               fn recover_missing_braces_around_closure_body(
        .                   &mut self,
        .                   closure_spans: ClosureSpans,
        .                   mut expect_err: DiagnosticBuilder<'_>,
        .               ) -> PResult<'a, ()> {
        .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
        .               fn parse_seq_to_before_end<T>(
        .                   &mut self,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
   16,244 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
        .               }
        .           
        .               /// Parses a sequence, including the closing delimiter. The function
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
   25,050 ( 0.00%)      fn parse_seq_to_end<T>(
        .                   &mut self,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
   10,011 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
    4,857 ( 0.00%)          if !recovered {
        .                       self.eat(ket);
        .                   }
   26,743 ( 0.00%)          Ok((val, trailing))
   20,040 ( 0.00%)      }
        .           
        .               /// Parses a sequence, including the closing delimiter. The function
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
        .               fn parse_unspanned_seq<T>(
        .                   &mut self,
        .                   bra: &TokenKind,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
    8,950 ( 0.00%)          self.expect(bra)?;
   20,040 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
        .               }
        .           
        .               fn parse_delim_comma_seq<T>(
        .                   &mut self,
        .                   delim: DelimToken,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
        .                   self.parse_unspanned_seq(
    3,546 ( 0.00%)              &token::OpenDelim(delim),
    4,599 ( 0.00%)              &token::CloseDelim(delim),
        .                       SeqSep::trailing_allowed(token::Comma),
        .                       f,
        .                   )
        .               }
        .           
        .               fn parse_paren_comma_seq<T>(
        .                   &mut self,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
        .                   self.parse_delim_comma_seq(token::Paren, f)
        .               }
        .           
        .               /// Advance the parser by one token using provided token as the next one.
3,230,084 ( 0.03%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
        .                   // Bumping after EOF is a bad sign, usually an infinite loop.
1,490,808 ( 0.01%)          if self.prev_token.kind == TokenKind::Eof {
        .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
        .                       self.span_bug(self.token.span, msg);
        .                   }
        .           
        .                   // Update the current and previous tokens.
  993,872 ( 0.01%)          self.prev_token = mem::replace(&mut self.token, next_token);
  248,468 ( 0.00%)          self.token_spacing = next_spacing;
        .           
        .                   // Diagnostics.
  248,468 ( 0.00%)          self.expected_tokens.clear();
        .               }
        .           
        .               /// Advance the parser by one token.
1,986,960 ( 0.02%)      pub fn bump(&mut self) {
  993,480 ( 0.01%)          let next_token = self.next_tok(self.token.span);
1,490,220 ( 0.01%)          self.bump_with(next_token);
1,986,960 ( 0.02%)      }
        .           
        .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
        .               /// When `dist == 0` then the current token is looked at.
       88 ( 0.00%)      pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
    6,796 ( 0.00%)          if dist == 0 {
    2,705 ( 0.00%)              return looker(&self.token);
        .                   }
        .           
   56,189 ( 0.00%)          let frame = &self.token_cursor.frame;
   59,246 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
        .                       let all_normal = (0..dist).all(|i| {
  161,938 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
  205,668 ( 0.00%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
        .                       });
        .                       if all_normal {
  266,454 ( 0.00%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
   88,308 ( 0.00%)                      Some(tree) => match tree {
   39,992 ( 0.00%)                          TokenTree::Token(token) => looker(token),
        .                                   TokenTree::Delimited(dspan, delim, _) => {
   31,773 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
        .                                   }
        .                               },
   65,096 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
        .                           };
        .                       }
        .                   }
        .           
        .                   let mut cursor = self.token_cursor.clone();
        .                   let mut i = 0;
    6,080 ( 0.00%)          let mut token = Token::dummy();
    5,766 ( 0.00%)          while i < dist {
   45,926 ( 0.00%)              token = cursor.next().0;
   21,072 ( 0.00%)              if matches!(
   12,432 ( 0.00%)                  token.kind,
        .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
        .                       ) {
        .                           continue;
        .                       }
    2,965 ( 0.00%)              i += 1;
        .                   }
      117 ( 0.00%)          return looker(&token);
       99 ( 0.00%)      }
        .           
        .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
   26,127 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
    7,064 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
   26,127 ( 0.00%)      }
        .           
        .               /// Parses asyncness: `async` or nothing.
        .               fn parse_asyncness(&mut self) -> Async {
        .                   if self.eat_keyword(kw::Async) {
        .                       let span = self.prev_token.uninterpolated_span();
        .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
        .                   } else {
        .                       Async::No
        .                   }
        .               }
        .           
        .               /// Parses unsafety: `unsafe` or nothing.
    2,062 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
        .                   if self.eat_keyword(kw::Unsafe) {
       60 ( 0.00%)              Unsafe::Yes(self.prev_token.uninterpolated_span())
        .                   } else {
        .                       Unsafe::No
        .                   }
    8,248 ( 0.00%)      }
        .           
        .               /// Parses constness: `const` or nothing.
   18,840 ( 0.00%)      fn parse_constness(&mut self) -> Const {
        .                   // Avoid const blocks to be parsed as const items
    5,648 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
        .                       && self.eat_keyword(kw::Const)
        .                   {
      870 ( 0.00%)              Const::Yes(self.prev_token.uninterpolated_span())
        .                   } else {
        .                       Const::No
        .                   }
   32,970 ( 0.00%)      }
        .           
        .               /// Parses inline const expressions.
        .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
        .                   if pat {
        .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
        .                   } else {
        .                       self.sess.gated_spans.gate(sym::inline_const, span);
        .                   }
-- line 1104 ----------------------------------------
-- line 1108 ----------------------------------------
        .                       id: DUMMY_NODE_ID,
        .                       value: self.mk_expr(blk.span, ExprKind::Block(blk, None), AttrVec::new()),
        .                   };
        .                   let blk_span = anon_const.value.span;
        .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
        .               }
        .           
        .               /// Parses mutability (`mut` or nothing).
       92 ( 0.00%)      fn parse_mutability(&mut self) -> Mutability {
        .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
    1,436 ( 0.00%)      }
        .           
        .               /// Possibly parses mutability (`const` or `mut`).
      114 ( 0.00%)      fn parse_const_or_mut(&mut self) -> Option<Mutability> {
        .                   if self.eat_keyword(kw::Mut) {
        .                       Some(Mutability::Mut)
        .                   } else if self.eat_keyword(kw::Const) {
        .                       Some(Mutability::Not)
        .                   } else {
        .                       None
        .                   }
      114 ( 0.00%)      }
        .           
        .               fn parse_field_name(&mut self) -> PResult<'a, Ident> {
      660 ( 0.00%)          if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) = self.token.kind
        .                   {
        .                       self.expect_no_suffix(self.token.span, "a tuple index", suffix);
        .                       self.bump();
        .                       Ok(Ident::new(symbol, self.prev_token.span))
        .                   } else {
      990 ( 0.00%)              self.parse_ident_common(true)
        .                   }
        .               }
        .           
        .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
    5,461 ( 0.00%)          self.parse_mac_args_common(true).map(P)
        .               }
        .           
        .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
    3,699 ( 0.00%)          self.parse_mac_args_common(false)
        .               }
        .           
   29,826 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
   26,512 ( 0.00%)          Ok(
   21,054 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
    3,375 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
    3,351 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
        .                       {
    8,844 ( 0.00%)                  match self.parse_token_tree() {
   11,055 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
        .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
        .                               {
    4,422 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
        .                               }
        .                               _ => unreachable!(),
        .                           }
    2,206 ( 0.00%)              } else if !delimited_only {
        .                           if self.eat(&token::Eq) {
      781 ( 0.00%)                      let eq_span = self.prev_token.span;
        .           
        .                               // Collect tokens because they are used during lowering to HIR.
      781 ( 0.00%)                      let expr = self.parse_expr_force_collect()?;
      781 ( 0.00%)                      let span = expr.span;
        .           
    3,905 ( 0.00%)                      let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
    7,029 ( 0.00%)                      MacArgs::Eq(eq_span, Token::new(token_kind, span))
        .                           } else {
        .                               MacArgs::Empty
        .                           }
        .                       } else {
        .                           return self.unexpected();
        .                       },
        .                   )
   23,198 ( 0.00%)      }
        .           
        .               fn parse_or_use_outer_attributes(
        .                   &mut self,
        .                   already_parsed_attrs: Option<AttrWrapper>,
        .               ) -> PResult<'a, AttrWrapper> {
  116,316 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
        .                       Ok(attrs)
        .                   } else {
   75,060 ( 0.00%)              self.parse_outer_attributes()
        .                   }
        .               }
        .           
        .               /// Parses a single token tree from the input.
  104,088 ( 0.00%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
   81,433 ( 0.00%)          match self.token.kind {
        .                       token::OpenDelim(..) => {
        .                           let depth = self.token_cursor.stack.len();
        .           
        .                           // We keep advancing the token cursor until we hit
        .                           // the matching `CloseDelim` token.
  171,994 ( 0.00%)                  while !(depth == self.token_cursor.stack.len()
        .                               && matches!(self.token.kind, token::CloseDelim(_)))
        .                           {
        .                               // Advance one token at a time, so `TokenCursor::next()`
        .                               // can capture these tokens if necessary.
  123,434 ( 0.00%)                      self.bump();
        .                           }
        .                           // We are still inside the frame corresponding
        .                           // to the delimited stream we captured, so grab
        .                           // the tokens from this frame.
        .                           let frame = &self.token_cursor.frame;
    4,822 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
    4,822 ( 0.00%)                  let span = frame.span;
    2,411 ( 0.00%)                  let delim = frame.delim;
        .                           // Consume close delimiter
    4,822 ( 0.00%)                  self.bump();
   12,055 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
        .                       }
        .                       token::CloseDelim(_) | token::Eof => unreachable!(),
        .                       _ => {
   21,200 ( 0.00%)                  self.bump();
   53,000 ( 0.00%)                  TokenTree::Token(self.prev_token.clone())
        .                       }
        .                   }
   91,077 ( 0.00%)      }
        .           
        .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
        .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
        .                   let mut tts = Vec::new();
        .                   while self.token != token::Eof {
        .                       tts.push(self.parse_token_tree());
        .                   }
        .                   Ok(tts)
        .               }
        .           
       40 ( 0.00%)      pub fn parse_tokens(&mut self) -> TokenStream {
        .                   let mut result = Vec::new();
        .                   loop {
       60 ( 0.00%)              match self.token.kind {
        .                           token::Eof | token::CloseDelim(..) => break,
       15 ( 0.00%)                  _ => result.push(self.parse_token_tree().into()),
        .                       }
        .                   }
       30 ( 0.00%)          TokenStream::new(result)
       40 ( 0.00%)      }
        .           
        .               /// Evaluates the closure with restrictions in place.
        .               ///
        .               /// Afters the closure is evaluated, restrictions are reset.
        .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
   40,572 ( 0.00%)          let old = self.restrictions;
   48,683 ( 0.00%)          self.restrictions = res;
        .                   let res = f(self);
   42,536 ( 0.00%)          self.restrictions = old;
        .                   res
        .               }
        .           
   37,368 ( 0.00%)      fn is_crate_vis(&self) -> bool {
   23,355 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
   42,039 ( 0.00%)      }
        .           
        .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
        .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
        .               /// If the following element can't be a tuple (i.e., it's a function definition), then
        .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
        .               /// so emit a proper diagnostic.
        .               // Public for rustfmt usage.
   24,360 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
    5,151 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
        .           
    2,436 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
    9,744 ( 0.00%)          if self.is_crate_vis() {
        .                       self.bump(); // `crate`
        .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
        .                       return Ok(Visibility {
        .                           span: self.prev_token.span,
        .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
        .                           tokens: None,
        .                       });
        .                   }
        .           
        .                   if !self.eat_keyword(kw::Pub) {
        .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
        .                       // keyword to grab a span from for inherited visibility; an empty span at the
        .                       // beginning of the current token would seem to be the "Schelling span".
    1,978 ( 0.00%)              return Ok(Visibility {
    5,934 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
        .                           kind: VisibilityKind::Inherited,
        .                           tokens: None,
        .                       });
        .                   }
      458 ( 0.00%)          let lo = self.prev_token.span;
        .           
    2,290 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
        .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
        .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
        .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
        .                       // by the following tokens.
      144 ( 0.00%)              if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
        .                       // account for `pub(crate::foo)`
        .                       {
        .                           // Parse `pub(crate)`.
        6 ( 0.00%)                  self.bump(); // `(`
        4 ( 0.00%)                  self.bump(); // `crate`
        6 ( 0.00%)                  self.expect(&token::CloseDelim(token::Paren))?; // `)`
        2 ( 0.00%)                  let vis = VisibilityKind::Crate(CrateSugar::PubCrate);
        .                           return Ok(Visibility {
        6 ( 0.00%)                      span: lo.to(self.prev_token.span),
        .                               kind: vis,
        .                               tokens: None,
        .                           });
      126 ( 0.00%)              } else if self.is_keyword_ahead(1, &[kw::In]) {
        .                           // Parse `pub(in path)`.
        .                           self.bump(); // `(`
        .                           self.bump(); // `in`
        .                           let path = self.parse_path(PathStyle::Mod)?; // `path`
        .                           self.expect(&token::CloseDelim(token::Paren))?; // `)`
        .                           let vis = VisibilityKind::Restricted { path: P(path), id: ast::DUMMY_NODE_ID };
        .                           return Ok(Visibility {
        .                               span: lo.to(self.prev_token.span),
        .                               kind: vis,
        .                               tokens: None,
        .                           });
       72 ( 0.00%)              } else if self.look_ahead(2, |t| t == &token::CloseDelim(token::Paren))
       90 ( 0.00%)                  && self.is_keyword_ahead(1, &[kw::Super, kw::SelfLower])
        .                       {
        .                           // Parse `pub(self)` or `pub(super)`.
       54 ( 0.00%)                  self.bump(); // `(`
       18 ( 0.00%)                  let path = self.parse_path(PathStyle::Mod)?; // `super`/`self`
       54 ( 0.00%)                  self.expect(&token::CloseDelim(token::Paren))?; // `)`
      198 ( 0.00%)                  let vis = VisibilityKind::Restricted { path: P(path), id: ast::DUMMY_NODE_ID };
        .                           return Ok(Visibility {
       72 ( 0.00%)                      span: lo.to(self.prev_token.span),
        .                               kind: vis,
        .                               tokens: None,
        .                           });
        .                       } else if let FollowedByType::No = fbt {
        .                           // Provide this diagnostic if a type cannot follow;
        .                           // in particular, if this is not a tuple struct.
        .                           self.recover_incorrect_vis_restriction()?;
        .                           // Emit diagnostic, but continue with public visibility.
        .                       }
        .                   }
        .           
    1,314 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
   21,924 ( 0.00%)      }
        .           
        .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
        .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
        .                   self.bump(); // `(`
        .                   let path = self.parse_path(PathStyle::Mod)?;
        .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
        .           
        .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
        .                       )
        .                       .emit();
        .           
        .                   Ok(())
        .               }
        .           
        .               /// Parses `extern string_literal?`.
        .               fn parse_extern(&mut self) -> Extern {
      647 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
        .               }
        .           
        .               /// Parses a string literal as an ABI spec.
        .               fn parse_abi(&mut self) -> Option<StrLit> {
        .                   match self.parse_str_lit() {
        .                       Ok(str_lit) => Some(str_lit),
        .                       Err(Some(lit)) => match lit.kind {
        .                           ast::LitKind::Err(_) => None,
-- line 1386 ----------------------------------------
-- line 1395 ----------------------------------------
        .                                   .emit();
        .                               None
        .                           }
        .                       },
        .                       Err(None) => None,
        .                   }
        .               }
        .           
  209,800 ( 0.00%)      pub fn collect_tokens_no_attrs<R: AstLike>(
        .                   &mut self,
        .                   f: impl FnOnce(&mut Self) -> PResult<'a, R>,
        .               ) -> PResult<'a, R> {
        .                   // The only reason to call `collect_tokens_no_attrs` is if you want tokens, so use
        .                   // `ForceCollect::Yes`
        .                   self.collect_tokens_trailing_token(
        .                       AttrWrapper::empty(),
        .                       ForceCollect::Yes,
   20,990 ( 0.00%)              |this, _attrs| Ok((f(this)?, TrailingToken::None)),
        .                   )
  209,800 ( 0.00%)      }
        .           
        .               /// `::{` or `::*`
  142,456 ( 0.00%)      fn is_import_coupler(&mut self) -> bool {
   71,228 ( 0.00%)          self.check(&token::ModSep)
        .                       && self.look_ahead(1, |t| {
   24,634 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
        .                       })
  147,771 ( 0.00%)      }
        .           
        .               pub fn clear_expected_tokens(&mut self) {
        .                   self.expected_tokens.clear();
        .               }
        .           }
        .           
        .           crate fn make_unclosed_delims_error(
        .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
        .                   err.span_label(sp, "closing delimiter possibly meant for this");
        .               }
        .               if let Some(sp) = unmatched.unclosed_span {
        .                   err.span_label(sp, "unclosed delimiter");
        .               }
        .               Some(err)
        .           }
        .           
  122,656 ( 0.00%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
   61,328 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
        .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
   61,328 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
        .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
        .                       e.emit();
        .                   }
        .               }
  122,656 ( 0.00%)  }
        .           
        .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
        .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
        .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
        .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
        .           /// `AttrAnnotatedTokenTree::Delimited` tokens
        .           #[derive(Debug, Clone)]
        .           pub enum FlatToken {
-- line 1474 ----------------------------------------

1,338,093 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.14.0/src/snapshot_vec.rs
--------------------------------------------------------------------------------
Ir                  

-- line 42 ----------------------------------------
         .           
         .           impl<D: SnapshotVecDelegate> Rollback<UndoLog<D>> for SnapshotVecStorage<D> {
         .               fn reverse(&mut self, undo: UndoLog<D>) {
         .                   self.values.reverse(undo)
         .               }
         .           }
         .           impl<D: SnapshotVecDelegate> Rollback<UndoLog<D>> for Vec<D::Value> {
         .               fn reverse(&mut self, undo: UndoLog<D>) {
   433,230 ( 0.00%)          match undo {
         .                       NewElem(i) => {
         .                           self.pop();
   193,438 ( 0.00%)                  assert!(Vec::len(self) == i);
         .                       }
         .           
         .                       SetElem(i, v) => {
   130,594 ( 0.00%)                  self[i] = v;
         .                       }
         .           
         .                       Other(u) => {
         .                           D::reverse(self, u);
         .                       }
         .                   }
         .               }
         .           }
-- line 65 ----------------------------------------
-- line 76 ----------------------------------------
         .           impl<D> VecLike<D> for Vec<D::Value>
         .           where
         .               D: SnapshotVecDelegate,
         .           {
         .               fn push(&mut self, item: D::Value) {
         .                   Vec::push(self, item)
         .               }
         .               fn len(&self) -> usize {
   161,560 ( 0.00%)          Vec::len(self)
         .               }
         .               fn reserve(&mut self, size: usize) {
         .                   Vec::reserve(self, size)
         .               }
         .           }
         .           
         .           impl<D> VecLike<D> for &'_ mut Vec<D::Value>
         .           where
         .               D: SnapshotVecDelegate,
         .           {
         .               fn push(&mut self, item: D::Value) {
         .                   Vec::push(self, item)
         .               }
         .               fn len(&self) -> usize {
 1,663,275 ( 0.01%)          Vec::len(self)
         .               }
         .               fn reserve(&mut self, size: usize) {
         .                   Vec::reserve(self, size)
         .               }
         .           }
         .           
         .           #[allow(type_alias_bounds)]
         .           pub type SnapshotVecStorage<D: SnapshotVecDelegate> =
-- line 107 ----------------------------------------
-- line 191 ----------------------------------------
         .           }
         .           
         .           impl<V: VecLike<D>, D: SnapshotVecDelegate, U> SnapshotVec<D, V, U> {
         .               pub fn len(&self) -> usize {
         .                   self.values.len()
         .               }
         .           
         .               pub fn get(&self, index: usize) -> &D::Value {
26,907,429 ( 0.23%)          &self.values.as_ref()[index]
         .               }
         .           
         .               /// Returns a mutable pointer into the vec; whatever changes you make here cannot be undone
         .               /// automatically, so you should be sure call `record()` with some sort of suitable undo
         .               /// action.
         .               pub fn get_mut(&mut self, index: usize) -> &mut D::Value {
    66,512 ( 0.00%)          &mut self.values.as_mut()[index]
         .               }
         .           
         .               /// Reserve space for new values, just like an ordinary vec.
         .               pub fn reserve(&mut self, additional: usize) {
         .                   // This is not affected by snapshots or anything.
         .                   self.values.reserve(additional);
         .               }
         .           }
-- line 214 ----------------------------------------
-- line 219 ----------------------------------------
         .               }
         .           
         .               pub fn record(&mut self, action: D::Undo) {
         .                   if self.in_snapshot() {
         .                       self.undo_log.push(Other(action));
         .                   }
         .               }
         .           
 3,202,275 ( 0.03%)      pub fn push(&mut self, elem: D::Value) -> usize {
         .                   let len = self.values.len();
         .                   self.values.push(elem);
         .           
   432,961 ( 0.00%)          if self.in_snapshot() {
         .                       self.undo_log.push(NewElem(len));
         .                   }
         .           
         .                   len
 2,997,471 ( 0.03%)      }
         .           
         .               /// Updates the element at the given index. The old value will saved (and perhaps restored) if
         .               /// a snapshot is active.
         .               pub fn set(&mut self, index: usize, new_elem: D::Value) {
         .                   let old_elem = mem::replace(&mut self.values.as_mut()[index], new_elem);
         .                   if self.undo_log.in_snapshot() {
         .                       self.undo_log.push(SetElem(index, old_elem));
         .                   }
-- line 244 ----------------------------------------
-- line 253 ----------------------------------------
         .                       }
         .                   } else {
         .                       for i in 0..self.values.len() {
         .                           self.set(i, new_elems(i));
         .                       }
         .                   }
         .               }
         .           
 1,482,870 ( 0.01%)      pub fn update<OP>(&mut self, index: usize, op: OP)
         .               where
         .                   OP: FnOnce(&mut D::Value),
         .                   D::Value: Clone,
         .               {
   175,605 ( 0.00%)          if self.undo_log.in_snapshot() {
   568,318 ( 0.00%)              let old_elem = self.values.as_mut()[index].clone();
    28,422 ( 0.00%)              self.undo_log.push(SetElem(index, old_elem));
         .                   }
   516,274 ( 0.00%)          op(&mut self.values.as_mut()[index]);
 1,404,840 ( 0.01%)      }
         .           }
         .           
         .           impl<D, V, L> SnapshotVec<D, V, L>
         .           where
         .               D: SnapshotVecDelegate,
         .               V: VecLike<D> + Rollback<UndoLog<D>>,
         .               L: Snapshots<UndoLog<D>>,
         .           {
-- line 279 ----------------------------------------

   300,034 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.14.0/src/snapshot_vec.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 417 ----------------------------------------
         .               /// # #![allow(unused_mut)]
         .               /// let mut vec: Vec<i32> = Vec::new();
         .               /// ```
         .               #[inline]
         .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[must_use]
         .               pub const fn new() -> Self {
10,936,431 ( 0.10%)          Vec { buf: RawVec::NEW, len: 0 }
       298 ( 0.00%)      }
         .           
         .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
         .               ///
         .               /// The vector will be able to hold exactly `capacity` elements without
         .               /// reallocating. If `capacity` is 0, the vector will not allocate.
         .               ///
         .               /// It is important to note that although the returned vector has the
         .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 601 ----------------------------------------
         .               /// vec.push(11);
         .               /// assert_eq!(vec.len(), 11);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[unstable(feature = "allocator_api", issue = "32838")]
         .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
 3,250,553 ( 0.03%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
         .               }
         .           
         .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
         .               ///
         .               /// # Safety
         .               ///
         .               /// This is highly unsafe, due to the number of invariants that aren't
         .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
         .               ///     // Put everything back together into a Vec
         .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
         .               ///     assert_eq!(rebuilt, [4, 5, 6]);
         .               /// }
         .               /// ```
         .               #[inline]
         .               #[unstable(feature = "allocator_api", issue = "32838")]
         .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
   162,197 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
         .               }
         .           
         .               /// Decomposes a `Vec<T>` into its raw components.
         .               ///
         .               /// Returns the raw pointer to the underlying data, the length of
         .               /// the vector (in elements), and the allocated capacity of the
         .               /// data (in elements). These are the same arguments in the same
         .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
         .               ///
         .               /// ```
         .               /// let vec: Vec<i32> = Vec::with_capacity(10);
         .               /// assert_eq!(vec.capacity(), 10);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn capacity(&self) -> usize {
   588,828 ( 0.01%)          self.buf.capacity()
         .               }
         .           
         .               /// Reserves capacity for at least `additional` more elements to be inserted
         .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
         .               /// frequent reallocations. After calling `reserve`, capacity will be
         .               /// greater than or equal to `self.len() + additional`. Does nothing if
         .               /// capacity is already sufficient.
         .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1];
         .               /// vec.reserve(10);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn reserve(&mut self, additional: usize) {
 1,261,317 ( 0.01%)          self.buf.reserve(self.len, additional);
         .               }
         .           
         .               /// Reserves the minimum capacity for exactly `additional` more elements to
         .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
         .               /// capacity will be greater than or equal to `self.len() + additional`.
         .               /// Does nothing if the capacity is already sufficient.
         .               ///
         .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1];
         .               /// vec.reserve_exact(10);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn reserve_exact(&mut self, additional: usize) {
    19,507 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
         .               }
         .           
         .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
         .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
         .               /// frequent reallocations. After calling `try_reserve`, capacity will be
         .               /// greater than or equal to `self.len() + additional`. Does nothing if
         .               /// capacity is already sufficient.
         .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
         .               /// assert!(vec.capacity() >= 3);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn shrink_to_fit(&mut self) {
         .                   // The capacity is never less than the length, and there's nothing to do when
         .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
         .                   // by only calling it with a greater capacity.
   146,295 ( 0.00%)          if self.capacity() > self.len {
    33,366 ( 0.00%)              self.buf.shrink_to_fit(self.len);
         .                   }
         .               }
         .           
         .               /// Shrinks the capacity of the vector with a lower bound.
         .               ///
         .               /// The capacity will remain at least as large as both the length
         .               /// and the supplied value.
         .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
         .               /// let slice = vec.into_boxed_slice();
         .               /// assert_eq!(slice.into_vec().capacity(), 3);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
         .                   unsafe {
         .                       self.shrink_to_fit();
    55,944 ( 0.00%)              let me = ManuallyDrop::new(self);
         .                       let buf = ptr::read(&me.buf);
         .                       let len = me.len();
         .                       buf.into_box(len).assume_init()
         .                   }
         .               }
         .           
         .               /// Shortens the vector, keeping the first `len` elements and dropping
         .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
         .               /// let mut vec = vec![1, 2, 3];
         .               /// vec.truncate(0);
         .               /// assert_eq!(vec, []);
         .               /// ```
         .               ///
         .               /// [`clear`]: Vec::clear
         .               /// [`drain`]: Vec::drain
         .               #[stable(feature = "rust1", since = "1.0.0")]
 1,276,268 ( 0.01%)      pub fn truncate(&mut self, len: usize) {
         .                   // This is safe because:
         .                   //
         .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
         .                   //   case avoids creating an invalid slice, and
         .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
         .                   //   such that no value will be dropped twice in case `drop_in_place`
         .                   //   were to panic once (if it panics twice, the program aborts).
         .                   unsafe {
         .                       // Note: It's intentional that this is `>` and not `>=`.
         .                       //       Changing it to `>=` has negative performance
         .                       //       implications in some cases. See #78884 for more.
 1,043,041 ( 0.01%)              if len > self.len {
         .                           return;
         .                       }
         .                       let remaining_len = self.len - len;
         .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
 1,274,671 ( 0.01%)              self.len = len;
    32,400 ( 0.00%)              ptr::drop_in_place(s);
         .                   }
 1,531,502 ( 0.01%)      }
         .           
         .               /// Extracts a slice containing the entire vector.
         .               ///
         .               /// Equivalent to `&s[..]`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
         .               /// ```
         .               ///
         .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
         .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
         .               #[inline]
         .               pub fn as_ptr(&self) -> *const T {
         .                   // We shadow the slice method of the same name to avoid going through
         .                   // `deref`, which creates an intermediate reference.
28,105,413 ( 0.25%)          let ptr = self.buf.ptr();
         .                   unsafe {
         .                       assume(!ptr.is_null());
         .                   }
         .                   ptr
         .               }
         .           
         .               /// Returns an unsafe mutable pointer to the vector's buffer.
         .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
         .               /// }
         .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
         .               /// ```
         .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
         .               #[inline]
         .               pub fn as_mut_ptr(&mut self) -> *mut T {
         .                   // We shadow the slice method of the same name to avoid going through
         .                   // `deref_mut`, which creates an intermediate reference.
13,636,209 ( 0.12%)          let ptr = self.buf.ptr();
         .                   unsafe {
         .                       assume(!ptr.is_null());
         .                   }
         .                   ptr
         .               }
         .           
         .               /// Returns a reference to the underlying allocator.
         .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
         .               ///
         .               /// Normally, here, one would use [`clear`] instead to correctly drop
         .               /// the contents and thus not leak memory.
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub unsafe fn set_len(&mut self, new_len: usize) {
         .                   debug_assert!(new_len <= self.capacity());
         .           
 2,370,919 ( 0.02%)          self.len = new_len;
    82,702 ( 0.00%)      }
         .           
         .               /// Removes an element from the vector and returns it.
         .               ///
         .               /// The removed element is replaced by the last element of the vector.
         .               ///
         .               /// This does not preserve ordering, but is *O*(1).
         .               /// If you need to preserve the element order, use [`remove`] instead.
         .               ///
-- line 1276 ----------------------------------------
-- line 1305 ----------------------------------------
         .                       assert_failed(index, len);
         .                   }
         .                   unsafe {
         .                       // We replace self[index] with the last element. Note that if the
         .                       // bounds check above succeeds there must be a last element (which
         .                       // can be self[index] itself).
         .                       let value = ptr::read(self.as_ptr().add(index));
         .                       let base_ptr = self.as_mut_ptr();
       103 ( 0.00%)              ptr::copy(base_ptr.add(len - 1), base_ptr.add(index), 1);
         .                       self.set_len(len - 1);
         .                       value
         .                   }
         .               }
         .           
         .               /// Inserts an element at position `index` within the vector, shifting all
         .               /// elements after it to the right.
         .               ///
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
         .               /// let mut vec = vec![1, 2, 3];
         .               /// vec.insert(1, 4);
         .               /// assert_eq!(vec, [1, 4, 2, 3]);
         .               /// vec.insert(4, 5);
         .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
    11,844 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
         .                   #[cold]
         .                   #[inline(never)]
         .                   fn assert_failed(index: usize, len: usize) -> ! {
         .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
         .                   }
         .           
     1,955 ( 0.00%)          let len = self.len();
     6,264 ( 0.00%)          if index > len {
         .                       assert_failed(index, len);
         .                   }
         .           
         .                   // space for the new element
     9,254 ( 0.00%)          if len == self.buf.capacity() {
         .                       self.reserve(1);
         .                   }
         .           
         .                   unsafe {
         .                       // infallible
         .                       // The spot to put the new value
         .                       {
         .                           let p = self.as_mut_ptr().add(index);
         .                           // Shift everything over to make space. (Duplicating the
         .                           // `index`th element into two consecutive places.)
    13,092 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
         .                           // Write it in, overwriting the first copy of the `index`th
         .                           // element.
         .                           ptr::write(p, element);
         .                       }
     9,254 ( 0.00%)              self.set_len(len + 1);
         .                   }
    10,152 ( 0.00%)      }
         .           
         .               /// Removes and returns the element at position `index` within the vector,
         .               /// shifting all elements after it to the left.
         .               ///
         .               /// Note: Because this shifts over the remaining elements, it has a
         .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
         .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
         .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1395 ----------------------------------------
         .               pub fn remove(&mut self, index: usize) -> T {
         .                   #[cold]
         .                   #[inline(never)]
         .                   #[track_caller]
         .                   fn assert_failed(index: usize, len: usize) -> ! {
         .                       panic!("removal index (is {}) should be < len (is {})", index, len);
         .                   }
         .           
     1,150 ( 0.00%)          let len = self.len();
     4,502 ( 0.00%)          if index >= len {
         .                       assert_failed(index, len);
         .                   }
         .                   unsafe {
         .                       // infallible
         .                       let ret;
         .                       {
         .                           // the place we are taking from.
         .                           let ptr = self.as_mut_ptr().add(index);
         .                           // copy it out, unsafely having a copy of the value on
         .                           // the stack and in the vector at the same time.
     1,518 ( 0.00%)                  ret = ptr::read(ptr);
         .           
         .                           // Shift everything down to fill in that spot.
     2,425 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
         .                       }
     1,414 ( 0.00%)              self.set_len(len - 1);
         .                       ret
         .                   }
         .               }
         .           
         .               /// Retains only the elements specified by the predicate.
         .               ///
         .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
         .               /// This method operates in place, visiting each element exactly once in the
-- line 1428 ----------------------------------------
-- line 1442 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1, 2, 3, 4, 5];
         .               /// let keep = [false, true, true, false, true];
         .               /// let mut iter = keep.iter();
         .               /// vec.retain(|_| *iter.next().unwrap());
         .               /// assert_eq!(vec, [2, 3, 5]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
 1,736,771 ( 0.02%)      pub fn retain<F>(&mut self, mut f: F)
         .               where
         .                   F: FnMut(&T) -> bool,
         .               {
    27,423 ( 0.00%)          self.retain_mut(|elem| f(elem));
 1,712,072 ( 0.01%)      }
         .           
         .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
         .               ///
         .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
         .               /// This method operates in place, visiting each element exactly once in the
         .               /// original order, and preserves the order of the retained elements.
         .               ///
         .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
         .               /// });
         .               /// assert_eq!(vec, [2, 3, 4]);
         .               /// ```
         .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
         .               pub fn retain_mut<F>(&mut self, mut f: F)
         .               where
         .                   F: FnMut(&mut T) -> bool,
         .               {
   216,455 ( 0.00%)          let original_len = self.len();
         .                   // Avoid double drop if the drop guard is not executed,
         .                   // since we may make some holes during the process.
         .                   unsafe { self.set_len(0) };
         .           
         .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
         .                   //      |<-              processed len   ->| ^- next to check
         .                   //                  |<-  deleted cnt     ->|
         .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
         .                       v: &'a mut Vec<T, A>,
         .                       processed_len: usize,
         .                       deleted_cnt: usize,
         .                       original_len: usize,
         .                   }
         .           
         .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
         .                       fn drop(&mut self) {
   120,411 ( 0.00%)                  if self.deleted_cnt > 0 {
         .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
         .                               unsafe {
         .                                   ptr::copy(
         .                                       self.v.as_ptr().add(self.processed_len),
    92,571 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
         .                                       self.original_len - self.processed_len,
         .                                   );
         .                               }
         .                           }
         .                           // SAFETY: After filling holes, all items are in contiguous memory.
         .                           unsafe {
         2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
         .                           }
         .                       }
         .                   }
         .           
         .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
         .           
         .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
         .                       original_len: usize,
         .                       f: &mut F,
         .                       g: &mut BackshiftOnDrop<'_, T, A>,
         .                   ) where
         .                       F: FnMut(&mut T) -> bool,
         .                   {
 2,811,080 ( 0.02%)              while g.processed_len != original_len {
         .                           // SAFETY: Unchecked element must be valid.
         .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
   818,269 ( 0.01%)                  if !f(cur) {
         .                               // Advance early to avoid double drop if `drop_in_place` panicked.
   159,120 ( 0.00%)                      g.processed_len += 1;
    91,240 ( 0.00%)                      g.deleted_cnt += 1;
         .                               // SAFETY: We never touch this element again after dropped.
       126 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
         .                               // We already advanced the counter.
         .                               if DELETED {
         .                                   continue;
         .                               } else {
         .                                   break;
         .                               }
         .                           }
         .                           if DELETED {
         .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
         .                               // We use copy for move, and never touch this element again.
         .                               unsafe {
    97,524 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
         .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
         .                               }
         .                           }
    90,646 ( 0.00%)                  g.processed_len += 1;
         .                       }
         .                   }
         .           
         .                   // Stage 1: Nothing was deleted.
         .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
         .           
         .                   // Stage 2: Some elements were deleted.
         .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
         .               ///
         .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
         .               ///
         .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
         .               /// ```
         .               #[stable(feature = "dedup_by", since = "1.16.0")]
    17,045 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
         .               where
         .                   F: FnMut(&mut T, &mut T) -> bool,
         .               {
     4,691 ( 0.00%)          let len = self.len();
    13,278 ( 0.00%)          if len <= 1 {
         .                       return;
         .                   }
         .           
         .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
         .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
         .                       /* Offset of the element we want to check if it is duplicate */
         .                       read: usize,
         .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
         .                   let ptr = gap.vec.as_mut_ptr();
         .           
         .                   /* Drop items while going through Vec, it should be more efficient than
         .                    * doing slice partition_dedup + truncate */
         .           
         .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
         .                    * are always in-bounds and read_ptr never aliases prev_ptr */
         .                   unsafe {
    24,082 ( 0.00%)              while gap.read < len {
         .                           let read_ptr = ptr.add(gap.read);
         .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
         .           
     1,902 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
         .                               // Increase `gap.read` now since the drop may panic.
         .                               gap.read += 1;
         .                               /* We have found duplicate, drop it in-place */
         .                               ptr::drop_in_place(read_ptr);
         .                           } else {
         .                               let write_ptr = ptr.add(gap.write);
         .           
         .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
         .                                * have to use `copy` or conditional `copy_nonoverlapping`.
         .                                * Looks like the first option is faster. */
         .                               ptr::copy(read_ptr, write_ptr, 1);
         .           
         .                               /* We have filled that place, so go further */
    15,206 ( 0.00%)                      gap.write += 1;
         .                               gap.read += 1;
         .                           }
         .                       }
         .           
         .                       /* Technically we could let `gap` clean up with its Drop, but
         .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
         .                        * the codegen, so we just do it manually */
         .                       gap.vec.set_len(gap.write);
         .                       mem::forget(gap);
         .                   }
    19,480 ( 0.00%)      }
         .           
         .               /// Appends an element to the back of a collection.
         .               ///
         .               /// # Panics
         .               ///
         .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
         .               ///
         .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1, 2];
         .               /// vec.push(3);
         .               /// assert_eq!(vec, [1, 2, 3]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
       680 ( 0.00%)      pub fn push(&mut self, value: T) {
         .                   // This will panic or abort if we would allocate > isize::MAX bytes
         .                   // or if the length increment would overflow for zero-sized types.
13,180,384 ( 0.12%)          if self.len == self.buf.capacity() {
 1,016,334 ( 0.01%)              self.buf.reserve_for_push(self.len);
         .                   }
         .                   unsafe {
   480,936 ( 0.00%)              let end = self.as_mut_ptr().add(self.len);
         .                       ptr::write(end, value);
19,530,189 ( 0.17%)              self.len += 1;
         .                   }
       544 ( 0.00%)      }
         .           
         .               /// Removes the last element from a vector and returns it, or [`None`] if it
         .               /// is empty.
         .               ///
         .               /// If you'd like to pop the first element, consider using
         .               /// [`VecDeque::pop_front`] instead.
         .               ///
         .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1, 2, 3];
         .               /// assert_eq!(vec.pop(), Some(3));
         .               /// assert_eq!(vec, [1, 2]);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn pop(&mut self) -> Option<T> {
 4,610,193 ( 0.04%)          if self.len == 0 {
        34 ( 0.00%)              None
         .                   } else {
         .                       unsafe {
 3,102,766 ( 0.03%)                  self.len -= 1;
   909,707 ( 0.01%)                  Some(ptr::read(self.as_ptr().add(self.len())))
         .                       }
         .                   }
         .               }
         .           
         .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
         .               ///
         .               /// # Panics
         .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
         .               /// let mut vec2 = vec![4, 5, 6];
         .               /// vec.append(&mut vec2);
         .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
         .               /// assert_eq!(vec2, []);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "append", since = "1.4.0")]
     2,513 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
         .                   unsafe {
         .                       self.append_elements(other.as_slice() as _);
         .                       other.set_len(0);
         .                   }
     2,154 ( 0.00%)      }
         .           
         .               /// Appends elements to `Self` from other buffer.
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               unsafe fn append_elements(&mut self, other: *const [T]) {
         .                   let count = unsafe { (*other).len() };
         .                   self.reserve(count);
   132,756 ( 0.00%)          let len = self.len();
       192 ( 0.00%)          unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
 1,168,308 ( 0.01%)          self.len += count;
         .               }
         .           
         .               /// Creates a draining iterator that removes the specified range in the vector
         .               /// and yields the removed items.
         .               ///
         .               /// When the iterator **is** dropped, all elements in the range are removed
         .               /// from the vector, even if the iterator was not fully consumed. If the
         .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
         .                   // When the Drain is first created, it shortens the length of
         .                   // the source vector to make sure no uninitialized or moved-from elements
         .                   // are accessible at all if the Drain's destructor never gets to run.
         .                   //
         .                   // Drain will ptr::read out the values to remove.
         .                   // When finished, remaining tail of the vec is copied back to cover
         .                   // the hole, and the vector length is restored to the new length.
         .                   //
    37,387 ( 0.00%)          let len = self.len();
         .                   let Range { start, end } = slice::range(range, ..len);
         .           
         .                   unsafe {
         .                       // set self.vec length's to start, to be safe in case Drain is leaked
         .                       self.set_len(start);
         .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
         .                       // whole Drain iterator (like &mut T).
     1,955 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
   264,224 ( 0.00%)              Drain {
         .                           tail_start: end,
     1,338 ( 0.00%)                  tail_len: len - end,
         .                           iter: range_slice.iter(),
         .                           vec: NonNull::from(self),
         .                       }
         .                   }
         .               }
         .           
         .               /// Clears the vector, removing all values.
         .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
         .               ///
         .               /// v.clear();
         .               ///
         .               /// assert!(v.is_empty());
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn clear(&mut self) {
 2,250,781 ( 0.02%)          self.truncate(0)
         .               }
         .           
         .               /// Returns the number of elements in the vector, also referred to
         .               /// as its 'length'.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
         .               /// let mut v = Vec::new();
         .               /// assert!(v.is_empty());
         .               ///
         .               /// v.push(1);
         .               /// assert!(!v.is_empty());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn is_empty(&self) -> bool {
 1,764,207 ( 0.02%)          self.len() == 0
         .               }
         .           
         .               /// Splits the collection into two at the given index.
         .               ///
         .               /// Returns a newly allocated vector containing the elements in the range
         .               /// `[at, len)`. After the call, the original vector will be left containing
         .               /// the elements `[0, at)` with its previous capacity unchanged.
         .               ///
-- line 1916 ----------------------------------------
-- line 1935 ----------------------------------------
         .                   A: Clone,
         .               {
         .                   #[cold]
         .                   #[inline(never)]
         .                   fn assert_failed(at: usize, len: usize) -> ! {
         .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
         .                   }
         .           
     4,122 ( 0.00%)          if at > self.len() {
         .                       assert_failed(at, self.len());
         .                   }
         .           
     3,108 ( 0.00%)          if at == 0 {
         .                       // the new vector can take over the original buffer and avoid the copy
         .                       return mem::replace(
         .                           self,
         .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
         .                       );
         .                   }
         .           
         .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
         .               ///
         .               /// let mut vec = vec![];
         .               /// let mut p = 1;
         .               /// vec.resize_with(4, || { p *= 2; p });
         .               /// assert_eq!(vec, [2, 4, 8, 16]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
    52,343 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
         .               where
         .                   F: FnMut() -> T,
         .               {
     7,077 ( 0.00%)          let len = self.len();
    14,154 ( 0.00%)          if new_len > len {
    51,840 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
         .                   } else {
         .                       self.truncate(new_len);
         .                   }
    45,266 ( 0.00%)      }
         .           
         .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
         .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
         .               /// `'a`. If the type has only static references, or none at all, then this
         .               /// may be chosen to be `'static`.
         .               ///
         .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
         .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
         .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
         .               #[inline]
         .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
         .                   // Note:
         .                   // This method is not implemented in terms of `split_at_spare_mut`,
         .                   // to prevent invalidation of pointers to the buffer.
         .                   unsafe {
         .                       slice::from_raw_parts_mut(
         2 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
        80 ( 0.00%)                  self.buf.capacity() - self.len,
         .                       )
         .                   }
         .               }
         .           
         .               /// Returns vector content as a slice of `T`, along with the remaining spare
         .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
         .               ///
         .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2189 ----------------------------------------
         .               /// assert_eq!(vec, ["hello", "world", "world"]);
         .               ///
         .               /// let mut vec = vec![1, 2, 3, 4];
         .               /// vec.resize(2, 0);
         .               /// assert_eq!(vec, [1, 2]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "vec_resize", since = "1.5.0")]
   198,220 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
    19,822 ( 0.00%)          let len = self.len();
         .           
    59,466 ( 0.00%)          if new_len > len {
    12,777 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
         .                   } else {
         .                       self.truncate(new_len);
         .                   }
    24,318 ( 0.00%)      }
         .           
         .               /// Clones and appends all elements in a slice to the `Vec`.
         .               ///
         .               /// Iterates over the slice `other`, clones each element, and then appends
         .               /// it to this `Vec`. The `other` slice is traversed in-order.
         .               ///
         .               /// Note that this function is same as [`extend`] except that it is
         .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2271 ----------------------------------------
         .           trait ExtendWith<T> {
         .               fn next(&mut self) -> T;
         .               fn last(self) -> T;
         .           }
         .           
         .           struct ExtendElement<T>(T);
         .           impl<T: Clone> ExtendWith<T> for ExtendElement<T> {
         .               fn next(&mut self) -> T {
     4,690 ( 0.00%)          self.0.clone()
         .               }
         .               fn last(self) -> T {
         .                   self.0
         .               }
         .           }
         .           
         .           struct ExtendFunc<F>(F);
         .           impl<T, F: FnMut() -> T> ExtendWith<T> for ExtendFunc<F> {
-- line 2287 ----------------------------------------
-- line 2291 ----------------------------------------
         .               fn last(mut self) -> T {
         .                   (self.0)()
         .               }
         .           }
         .           
         .           impl<T, A: Allocator> Vec<T, A> {
         .               #[cfg(not(no_global_oom_handling))]
         .               /// Extend the vector by `n` values, using the given generator.
 1,165,060 ( 0.01%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
         .                   self.reserve(n);
         .           
         .                   unsafe {
    12,275 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
         .                       // Use SetLenOnDrop to work around bug where compiler
         .                       // might not realize the store through `ptr` through self.set_len()
         .                       // don't alias.
         .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
         .           
         .                       // Write all elements except the last one
         .                       for _ in 1..n {
         .                           ptr::write(ptr, value.next());
         .                           ptr = ptr.offset(1);
         .                           // Increment the length in every step in case next() panics
         .                           local_len.increment_len(1);
         .                       }
         .           
   707,650 ( 0.01%)              if n > 0 {
         .                           // We can write the last element directly without cloning needlessly
         .                           ptr::write(ptr, value.last());
         .                           local_len.increment_len(1);
         .                       }
         .           
         .                       // len set by scope guard
         .                   }
   916,511 ( 0.01%)      }
         .           }
         .           
         .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
         .               /// Removes consecutive repeated elements in the vector according to the
         .               /// [`PartialEq`] trait implementation.
         .               ///
         .               /// If the vector is sorted, this removes all duplicates.
         .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
         .               ///
         .               /// vec.dedup();
         .               ///
         .               /// assert_eq!(vec, [1, 2, 3, 2]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               pub fn dedup(&mut self) {
     2,436 ( 0.00%)          self.dedup_by(|a, b| a == b)
         .               }
         .           }
         .           
         .           ////////////////////////////////////////////////////////////////////////////////
         .           // Internal methods and functions
         .           ////////////////////////////////////////////////////////////////////////////////
         .           
         .           #[doc(hidden)]
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
   107,132 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
 1,195,493 ( 0.01%)      <T as SpecFromElem>::from_elem(elem, n, Global)
   122,790 ( 0.00%)  }
         .           
         .           #[doc(hidden)]
         .           #[cfg(not(no_global_oom_handling))]
         .           #[unstable(feature = "allocator_api", issue = "32838")]
         .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
         .               <T as SpecFromElem>::from_elem(elem, n, alloc)
         .           }
         .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
         .           // Common trait implementations for Vec
         .           ////////////////////////////////////////////////////////////////////////////////
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
         .               type Target = [T];
         .           
         .               fn deref(&self) -> &[T] {
38,022,863 ( 0.33%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
       245 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
         .               fn deref_mut(&mut self) -> &mut [T] {
11,287,433 ( 0.10%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           trait SpecCloneFrom {
         .               fn clone_from(this: &mut Self, other: &Self);
         .           }
         .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
         .                   this.extend_from_slice(other);
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
         .               #[cfg(not(test))]
 1,257,444 ( 0.01%)      fn clone(&self) -> Self {
         .                   let alloc = self.allocator().clone();
         2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
 1,578,305 ( 0.01%)      }
         .           
         .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
         .               // required for this method definition, is not available. Instead use the
         .               // `slice::to_vec`  function which is only available with cfg(test)
         .               // NB see the slice::hack module in slice.rs for more information
         .               #[cfg(test)]
         .               fn clone(&self) -> Self {
         .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
         .               message = "vector indices are of type `usize` or ranges of `usize`",
         .               label = "vector indices are of type `usize` or ranges of `usize`"
         .           )]
         .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
         .               type Output = I::Output;
         .           
         .               #[inline]
         .               fn index(&self, index: I) -> &Self::Output {
   940,593 ( 0.01%)          Index::index(&**self, index)
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_on_unimplemented(
         .               message = "vector indices are of type `usize` or ranges of `usize`",
         .               label = "vector indices are of type `usize` or ranges of `usize`"
         .           )]
         .           impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {
         .               #[inline]
         .               fn index_mut(&mut self, index: I) -> &mut Self::Output {
     3,232 ( 0.00%)          IndexMut::index_mut(&mut **self, index)
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T> FromIterator<T> for Vec<T> {
         .               #[inline]
         .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
 4,026,312 ( 0.04%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
         .               type Item = T;
         .               type IntoIter = IntoIter<T, A>;
         .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
         .               /// for s in v.into_iter() {
         .               ///     // s has type String, not &String
         .               ///     println!("{}", s);
         .               /// }
         .               /// ```
         .               #[inline]
         .               fn into_iter(self) -> IntoIter<T, A> {
         .                   unsafe {
 2,178,866 ( 0.02%)              let mut me = ManuallyDrop::new(self);
         .                       let alloc = ptr::read(me.allocator());
         .                       let begin = me.as_mut_ptr();
         .                       let end = if mem::size_of::<T>() == 0 {
         .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
         .                       } else {
         .                           begin.add(me.len()) as *const T
         .                       };
         .                       let cap = me.buf.capacity();
   848,526 ( 0.01%)              IntoIter {
         .                           buf: NonNull::new_unchecked(begin),
         .                           phantom: PhantomData,
         .                           cap,
         .                           alloc,
         .                           ptr: begin,
         .                           end,
         .                       }
         .                   }
-- line 2589 ----------------------------------------
-- line 2591 ----------------------------------------
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<'a, T, A: Allocator> IntoIterator for &'a Vec<T, A> {
         .               type Item = &'a T;
         .               type IntoIter = slice::Iter<'a, T>;
         .           
         .               fn into_iter(self) -> slice::Iter<'a, T> {
        66 ( 0.00%)          self.iter()
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
         .               type Item = &'a mut T;
         .               type IntoIter = slice::IterMut<'a, T>;
         .           
         .               fn into_iter(self) -> slice::IterMut<'a, T> {
     1,126 ( 0.00%)          self.iter_mut()
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
         .               #[inline]
     6,952 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
 2,711,049 ( 0.02%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
     6,952 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn extend_one(&mut self, item: T) {
       112 ( 0.00%)          self.push(item);
         .               }
         .           
         .               #[inline]
         .               fn extend_reserve(&mut self, additional: usize) {
         .                   self.reserve(additional);
         .               }
         .           }
         .           
-- line 2631 ----------------------------------------
-- line 2636 ----------------------------------------
         .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
         .                   // This is the case for a general iterator.
         .                   //
         .                   // This function should be the moral equivalent of:
         .                   //
         .                   //      for item in iterator {
         .                   //          self.push(item);
         .                   //      }
   189,754 ( 0.00%)          while let Some(element) = iterator.next() {
   140,313 ( 0.00%)              let len = self.len();
 1,445,594 ( 0.01%)              if len == self.capacity() {
     2,140 ( 0.00%)                  let (lower, _) = iterator.size_hint();
         .                           self.reserve(lower.saturating_add(1));
         .                       }
         .                       unsafe {
         .                           ptr::write(self.as_mut_ptr().add(len), element);
         .                           // Since next() executes user code which can panic we have to bump the length
         .                           // after each step.
         .                           // NB can't overflow since we would have had to alloc the address space
 1,009,807 ( 0.01%)                  self.set_len(len + 1);
         .                       }
         .                   }
    68,602 ( 0.00%)      }
         .           
         .               /// Creates a splicing iterator that replaces the specified range in the vector
         .               /// with the given `replace_with` iterator and yields the removed items.
         .               /// `replace_with` does not need to be the same length as `range`.
         .               ///
         .               /// `range` is removed even if the iterator is not consumed until the end.
         .               ///
         .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2693 ----------------------------------------
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "vec_splice", since = "1.21.0")]
         .               pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, A>
         .               where
         .                   R: RangeBounds<usize>,
         .                   I: IntoIterator<Item = T>,
         .               {
     6,787 ( 0.00%)          Splice { drain: self.drain(range), replace_with: replace_with.into_iter() }
         .               }
         .           
         .               /// Creates an iterator which uses a closure to determine if an element should be removed.
         .               ///
         .               /// If the closure returns true, then the element is removed and yielded.
         .               /// If the closure returns false, the element will remain in the vector and will not be yielded
         .               /// by the iterator.
         .               ///
-- line 2709 ----------------------------------------
-- line 2745 ----------------------------------------
         .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
         .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
         .               /// ```
         .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
         .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
         .               where
         .                   F: FnMut(&mut T) -> bool,
         .               {
    11,504 ( 0.00%)          let old_len = self.len();
         .           
         .                   // Guard against us getting leaked (leak amplification)
         .                   unsafe {
         .                       self.set_len(0);
         .                   }
         .           
    63,160 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
         .               }
         .           }
         .           
         .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
         .           ///
         .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
         .           /// append the entire slice at once.
         .           ///
         .           /// [`copy_from_slice`]: slice::copy_from_slice
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "extend_ref", since = "1.2.0")]
         .           impl<'a, T: Copy + 'a, A: Allocator + 'a> Extend<&'a T> for Vec<T, A> {
    11,000 ( 0.00%)      fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {
         .                   self.spec_extend(iter.into_iter())
     8,250 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn extend_one(&mut self, &item: &'a T) {
         .                   self.push(item);
         .               }
         .           
         .               #[inline]
         .               fn extend_reserve(&mut self, additional: usize) {
-- line 2783 ----------------------------------------
-- line 2803 ----------------------------------------
         .               #[inline]
         .               fn cmp(&self, other: &Self) -> Ordering {
         .                   Ord::cmp(&**self, &**other)
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
 3,427,543 ( 0.03%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // use drop for [T]
         .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
         .                       // could avoid questions of validity in certain cases
 1,330,722 ( 0.01%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
         .                   }
         .                   // RawVec handles deallocation
 4,052,418 ( 0.04%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
         .           impl<T> const Default for Vec<T> {
         .               /// Creates an empty `Vec<T>`.
         .               fn default() -> Vec<T> {
         .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
         .               /// newly-allocated buffer with exactly the right capacity.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
         .               /// ```
         .               fn from(v: Vec<T, A>) -> Self {
         4 ( 0.00%)          v.into_boxed_slice()
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl From<&str> for Vec<u8> {
         .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
         .               ///
-- line 2992 ----------------------------------------

 8,335,573 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs
--------------------------------------------------------------------------------
Ir                  

-- line 46 ----------------------------------------
         .           ///
         .           /// To implement this conveniently, use the derive macro located in `rustc_macros`.
         .           pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {
         .               /// Consumers may find this more convenient to use with infallible folders than
         .               /// [`try_super_fold_with`][`TypeFoldable::try_super_fold_with`], to which the
         .               /// provided default definition delegates.  Implementors **should not** override
         .               /// this provided default definition, to ensure that the two methods are coherent
         .               /// (provide a definition of `try_super_fold_with` instead).
15,509,070 ( 0.14%)      fn super_fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {
   460,327 ( 0.00%)          self.try_super_fold_with(folder).into_ok()
15,936,213 ( 0.14%)      }
         .               /// Consumers may find this more convenient to use with infallible folders than
         .               /// [`try_fold_with`][`TypeFoldable::try_fold_with`], to which the provided
         .               /// default definition delegates.  Implementors **should not** override this
         .               /// provided default definition, to ensure that the two methods are coherent
         .               /// (provide a definition of `try_fold_with` instead).
 1,020,169 ( 0.01%)      fn fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {
   418,555 ( 0.00%)          self.try_fold_with(folder).into_ok()
   925,065 ( 0.01%)      }
         .           
         .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
         .                   self,
         .                   folder: &mut F,
         .               ) -> Result<Self, F::Error>;
         .           
13,760,089 ( 0.12%)      fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {
 4,249,328 ( 0.04%)          self.try_super_fold_with(folder)
14,316,773 ( 0.12%)      }
         .           
         .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;
 1,922,593 ( 0.02%)      fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
 1,280,093 ( 0.01%)          self.super_visit_with(visitor)
 1,321,930 ( 0.01%)      }
         .           
         .               /// Returns `true` if `self` has any late-bound regions that are either
         .               /// bound by `binder` or bound by some binder outside of `binder`.
         .               /// If `binder` is `ty::INNERMOST`, this indicates whether
         .               /// there are any late-bound regions that appear free.
         .               fn has_vars_bound_at_or_above(&self, binder: ty::DebruijnIndex) -> bool {
   825,224 ( 0.01%)          self.visit_with(&mut HasEscapingVarsVisitor { outer_index: binder }).is_break()
         .               }
         .           
         .               /// Returns `true` if this `self` has any regions that escape `binder` (and
         .               /// hence are not bound by it).
         .               fn has_vars_bound_above(&self, binder: ty::DebruijnIndex) -> bool {
       261 ( 0.00%)          self.has_vars_bound_at_or_above(binder.shifted_in(1))
         .               }
         .           
 2,990,975 ( 0.03%)      fn has_escaping_bound_vars(&self) -> bool {
   322,315 ( 0.00%)          self.has_vars_bound_at_or_above(ty::INNERMOST)
 2,995,889 ( 0.03%)      }
         .           
    94,441 ( 0.00%)      #[instrument(level = "trace")]
         .               fn has_type_flags(&self, flags: TypeFlags) -> bool {
   317,803 ( 0.00%)          self.visit_with(&mut HasTypeFlagsVisitor { flags }).break_value() == Some(FoundFlags)
         .               }
         .               fn has_projections(&self) -> bool {
     7,722 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_PROJECTION)
         .               }
         .               fn has_opaque_types(&self) -> bool {
         .                   self.has_type_flags(TypeFlags::HAS_TY_OPAQUE)
         .               }
    29,288 ( 0.00%)      fn references_error(&self) -> bool {
         .                   self.has_type_flags(TypeFlags::HAS_ERROR)
    29,288 ( 0.00%)      }
         .               fn has_param_types_or_consts(&self) -> bool {
     1,437 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_CT_PARAM)
         .               }
         .               fn has_infer_regions(&self) -> bool {
         .                   self.has_type_flags(TypeFlags::HAS_RE_INFER)
         .               }
         .               fn has_infer_types(&self) -> bool {
         .                   self.has_type_flags(TypeFlags::HAS_TY_INFER)
         .               }
         .               fn has_infer_types_or_consts(&self) -> bool {
   917,089 ( 0.01%)          self.has_type_flags(TypeFlags::HAS_TY_INFER | TypeFlags::HAS_CT_INFER)
         .               }
    72,840 ( 0.00%)      fn needs_infer(&self) -> bool {
   600,528 ( 0.01%)          self.has_type_flags(TypeFlags::NEEDS_INFER)
    74,472 ( 0.00%)      }
         .               fn has_placeholders(&self) -> bool {
         .                   self.has_type_flags(
         .                       TypeFlags::HAS_RE_PLACEHOLDER
         .                           | TypeFlags::HAS_TY_PLACEHOLDER
         .                           | TypeFlags::HAS_CT_PLACEHOLDER,
         .                   )
         .               }
         .               fn needs_subst(&self) -> bool {
       216 ( 0.00%)          self.has_type_flags(TypeFlags::NEEDS_SUBST)
         .               }
         .               /// "Free" regions in this context means that it has any region
         .               /// that is not (a) erased or (b) late-bound.
         .               fn has_free_regions(&self) -> bool {
         .                   self.has_type_flags(TypeFlags::HAS_FREE_REGIONS)
         .               }
         .           
         .               fn has_erased_regions(&self) -> bool {
-- line 142 ----------------------------------------
-- line 147 ----------------------------------------
         .               fn has_erasable_regions(&self) -> bool {
         .                   self.has_type_flags(TypeFlags::HAS_FREE_REGIONS)
         .               }
         .           
         .               /// Indicates whether this value references only 'global'
         .               /// generic parameters that are the same regardless of what fn we are
         .               /// in. This is used for caching.
         .               fn is_global(&self) -> bool {
   292,449 ( 0.00%)          !self.has_type_flags(TypeFlags::HAS_FREE_LOCAL_NAMES)
         .               }
         .           
         .               /// True if there are any late-bound regions
         .               fn has_late_bound_regions(&self) -> bool {
        60 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_RE_LATE_BOUND)
         .               }
         .           
         .               /// Indicates whether this value still has parameters/placeholders/inference variables
         .               /// which could be replaced later, in a way that would change the results of `impl`
         .               /// specialization.
         5 ( 0.00%)      fn still_further_specializable(&self) -> bool {
         .                   self.has_type_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE)
         6 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TypeFoldable<'tcx> for hir::Constness {
         .               fn try_super_fold_with<F: TypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {
         .                   Ok(self)
         .               }
         .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {
         .                   ControlFlow::CONTINUE
-- line 176 ----------------------------------------
-- line 194 ----------------------------------------
         .           
         .               fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;
         .           
         .               fn fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Binder<'tcx, T>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .                   Self: TypeFolder<'tcx, Error = !>,
         .               {
 4,348,383 ( 0.04%)          t.super_fold_with(self)
         .               }
         .           
         .               fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx>
         .               where
         .                   Self: TypeFolder<'tcx, Error = !>,
         .               {
   343,829 ( 0.00%)          t.super_fold_with(self)
         .               }
         .           
         .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx>
         .               where
         .                   Self: TypeFolder<'tcx, Error = !>,
         .               {
         .                   r.super_fold_with(self)
         .               }
         .           
         .               fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>
         .               where
         .                   Self: TypeFolder<'tcx, Error = !>,
         .               {
    54,564 ( 0.00%)          c.super_fold_with(self)
         .               }
         .           
         .               fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx>
         .               where
         .                   Self: TypeFolder<'tcx, Error = !>,
         .               {
     2,477 ( 0.00%)          p.super_fold_with(self)
         .               }
         .           
         .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx>
         .               where
         .                   Self: TypeFolder<'tcx, Error = !>,
         .               {
         .                   bug!("most type folders should not be folding MIR datastructures: {:?}", c)
         .               }
-- line 238 ----------------------------------------
-- line 247 ----------------------------------------
         .           /// A blanket implementation of this trait (that defers to the relevant
         .           /// method of [`TypeFolder`]) is provided for all infallible folders in
         .           /// order to ensure the two APIs are coherent.
         .           pub trait FallibleTypeFolder<'tcx>: TypeFolder<'tcx> {
         .               fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
    28,746 ( 0.00%)          t.try_super_fold_with(self)
         .               }
         .           
         .               fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
         .                   t.try_super_fold_with(self)
         .               }
         .           
         .               fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {
         .                   r.try_super_fold_with(self)
-- line 263 ----------------------------------------
-- line 269 ----------------------------------------
         .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
         .                   c.try_super_fold_with(self)
         .               }
         .           
         .               fn try_fold_predicate(
         .                   &mut self,
         .                   p: ty::Predicate<'tcx>,
         .               ) -> Result<ty::Predicate<'tcx>, Self::Error> {
     9,788 ( 0.00%)          p.try_super_fold_with(self)
         .               }
         .           
         .               fn try_fold_mir_const(
         .                   &mut self,
         .                   c: mir::ConstantKind<'tcx>,
         .               ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {
         .                   bug!("most type folders should not be folding MIR datastructures: {:?}", c)
         .               }
-- line 285 ----------------------------------------
-- line 286 ----------------------------------------
         .           }
         .           
         .           // Blanket implementation of fallible trait for infallible folders
         .           // delegates to infallible methods to prevent incoherence
         .           impl<'tcx, F> FallibleTypeFolder<'tcx> for F
         .           where
         .               F: TypeFolder<'tcx, Error = !>,
         .           {
   385,338 ( 0.00%)      fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
   679,712 ( 0.01%)          Ok(self.fold_binder(t))
   574,268 ( 0.01%)      }
         .           
    89,039 ( 0.00%)      fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
 7,126,775 ( 0.06%)          Ok(self.fold_ty(t))
    67,208 ( 0.00%)      }
         .           
    20,472 ( 0.00%)      fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {
   447,199 ( 0.00%)          Ok(self.fold_region(r))
    20,472 ( 0.00%)      }
         .           
    25,892 ( 0.00%)      fn try_fold_const(
         .                   &mut self,
         .                   c: &'tcx ty::Const<'tcx>,
         .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
   257,496 ( 0.00%)          Ok(self.fold_const(c))
     1,722 ( 0.00%)      }
         .           
         .               fn try_fold_predicate(
         .                   &mut self,
         .                   p: ty::Predicate<'tcx>,
         .               ) -> Result<ty::Predicate<'tcx>, Self::Error> {
         .                   Ok(self.fold_predicate(p))
         .               }
         .           
     4,080 ( 0.00%)      fn try_fold_mir_const(
         .                   &mut self,
         .                   c: mir::ConstantKind<'tcx>,
         .               ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {
     6,890 ( 0.00%)          Ok(self.fold_mir_const(c))
     4,080 ( 0.00%)      }
         .           }
         .           
         .           pub trait TypeVisitor<'tcx>: Sized {
         .               type BreakTy = !;
         .           
         .               fn visit_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: &Binder<'tcx, T>,
         .               ) -> ControlFlow<Self::BreakTy> {
     2,403 ( 0.00%)          t.super_visit_with(self)
         .               }
         .           
         .               fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
     1,560 ( 0.00%)          t.super_visit_with(self)
         .               }
         .           
         .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   r.super_visit_with(self)
         .               }
         .           
       152 ( 0.00%)      fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
        75 ( 0.00%)          c.super_visit_with(self)
       133 ( 0.00%)      }
         .           
         .               fn visit_unevaluated_const(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   uv.super_visit_with(self)
         .               }
         .           
         .               fn visit_predicate(&mut self, p: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   p.super_visit_with(self)
         .               }
-- line 359 ----------------------------------------
-- line 380 ----------------------------------------
         .               G: FnMut(ty::Region<'tcx>) -> ty::Region<'tcx>,
         .               H: FnMut(&'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>,
         .           {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
         .                   self.tcx
         .               }
         .           
         .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
     4,294 ( 0.00%)          let t = ty.super_fold_with(self);
         .                   (self.ty_op)(t)
         .               }
         .           
         .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
         .                   let r = r.super_fold_with(self);
         .                   (self.lt_op)(r)
         .               }
         .           
         .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
        38 ( 0.00%)          let ct = ct.super_fold_with(self);
         .                   (self.ct_op)(ct)
         .               }
         .           }
         .           
         .           ///////////////////////////////////////////////////////////////////////////
         .           // Region folder
         .           
         .           impl<'tcx> TyCtxt<'tcx> {
-- line 406 ----------------------------------------
-- line 415 ----------------------------------------
         .               ) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   value.fold_with(&mut RegionFolder::new(self, skipped_regions, &mut f))
         .               }
         .           
         .               /// Invoke `callback` on every region appearing free in `value`.
     9,716 ( 0.00%)      pub fn for_each_free_region(
         .                   self,
         .                   value: &impl TypeFoldable<'tcx>,
         .                   mut callback: impl FnMut(ty::Region<'tcx>),
         .               ) {
         .                   self.any_free_region_meets(value, |r| {
    29,752 ( 0.00%)              callback(r);
         .                       false
         .                   });
     8,489 ( 0.00%)      }
         .           
         .               /// Returns `true` if `callback` returns true for every region appearing free in `value`.
         .               pub fn all_free_regions_meet(
         .                   self,
         .                   value: &impl TypeFoldable<'tcx>,
         .                   mut callback: impl FnMut(ty::Region<'tcx>) -> bool,
         .               ) -> bool {
     6,161 ( 0.00%)          !self.any_free_region_meets(value, |r| !callback(r))
         .               }
         .           
         .               /// Returns `true` if `callback` returns true for some region appearing free in `value`.
         .               pub fn any_free_region_meets(
         .                   self,
         .                   value: &impl TypeFoldable<'tcx>,
         .                   callback: impl FnMut(ty::Region<'tcx>) -> bool,
         .               ) -> bool {
-- line 448 ----------------------------------------
-- line 473 ----------------------------------------
         .                       F: FnMut(ty::Region<'tcx>) -> bool,
         .                   {
         .                       type BreakTy = ();
         .           
         .                       fn visit_binder<T: TypeFoldable<'tcx>>(
         .                           &mut self,
         .                           t: &Binder<'tcx, T>,
         .                       ) -> ControlFlow<Self::BreakTy> {
     3,645 ( 0.00%)                  self.outer_index.shift_in(1);
     2,700 ( 0.00%)                  let result = t.as_ref().skip_binder().visit_with(self);
     2,025 ( 0.00%)                  self.outer_index.shift_out(1);
         .                           result
         .                       }
         .           
    26,080 ( 0.00%)              fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
    48,523 ( 0.00%)                  match *r {
        72 ( 0.00%)                      ty::ReLateBound(debruijn, _) if debruijn < self.outer_index => {
         .                                   ControlFlow::CONTINUE
         .                               }
         .                               _ => {
         .                                   if (self.callback)(r) {
         .                                       ControlFlow::BREAK
         .                                   } else {
         .                                       ControlFlow::CONTINUE
         .                                   }
         .                               }
         .                           }
    36,512 ( 0.00%)              }
         .           
         .                       fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                           // We're only interested in types involving regions
   105,049 ( 0.00%)                  if ty.flags().intersects(TypeFlags::HAS_FREE_REGIONS) {
    41,804 ( 0.00%)                      ty.super_visit_with(self)
         .                           } else {
         .                               ControlFlow::CONTINUE
         .                           }
         .                       }
         .                   }
         .           
   303,282 ( 0.00%)          value.visit_with(&mut RegionVisitor { outer_index: ty::INNERMOST, callback }).is_break()
         .               }
         .           }
         .           
         .           /// Folds over the substructure of a type, visiting its component
         .           /// types and all regions that occur *free* within it.
         .           ///
         .           /// That is, `Ty` can contain function or method types that bind
         .           /// regions at the call site (`ReLateBound`), and occurrences of
-- line 520 ----------------------------------------
-- line 540 ----------------------------------------
         .           
         .           impl<'a, 'tcx> RegionFolder<'a, 'tcx> {
         .               #[inline]
         .               pub fn new(
         .                   tcx: TyCtxt<'tcx>,
         .                   skipped_regions: &'a mut bool,
         .                   fold_region_fn: &'a mut dyn FnMut(ty::Region<'tcx>, ty::DebruijnIndex) -> ty::Region<'tcx>,
         .               ) -> RegionFolder<'a, 'tcx> {
   814,161 ( 0.01%)          RegionFolder { tcx, skipped_regions, current_index: ty::INNERMOST, fold_region_fn }
         .               }
         .           }
         .           
         .           impl<'a, 'tcx> TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
   177,151 ( 0.00%)          self.tcx
   177,151 ( 0.00%)      }
         .           
         .               fn fold_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: ty::Binder<'tcx, T>,
         .               ) -> ty::Binder<'tcx, T> {
     6,573 ( 0.00%)          self.current_index.shift_in(1);
     9,451 ( 0.00%)          let t = t.super_fold_with(self);
     5,994 ( 0.00%)          self.current_index.shift_out(1);
         .                   t
         .               }
         .           
     2,026 ( 0.00%)      #[instrument(skip(self), level = "debug")]
         .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
    38,644 ( 0.00%)          match *r {
     2,026 ( 0.00%)              ty::ReLateBound(debruijn, _) if debruijn < self.current_index => {
         .                           debug!(?self.current_index, "skipped bound region");
     2,026 ( 0.00%)                  *self.skipped_regions = true;
         .                           r
         .                       }
         .                       _ => {
         .                           debug!(?self.current_index, "folding free region");
   109,854 ( 0.00%)                  (self.fold_region_fn)(r, self.current_index)
         .                       }
         .                   }
         .               }
         .           }
         .           
         .           ///////////////////////////////////////////////////////////////////////////
         .           // Bound vars replacer
         .           
-- line 585 ----------------------------------------
-- line 592 ----------------------------------------
         .               current_index: ty::DebruijnIndex,
         .           
         .               fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,
         .               fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,
         .               fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,
         .           }
         .           
         .           impl<'a, 'tcx> BoundVarReplacer<'a, 'tcx> {
    94,116 ( 0.00%)      fn new(
         .                   tcx: TyCtxt<'tcx>,
         .                   fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,
         .                   fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,
         .                   fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,
         .               ) -> Self {
   340,892 ( 0.00%)          BoundVarReplacer { tcx, current_index: ty::INNERMOST, fld_r, fld_t, fld_c }
    47,058 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, 'tcx> TypeFolder<'tcx> for BoundVarReplacer<'a, 'tcx> {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
    69,410 ( 0.00%)          self.tcx
    23,653 ( 0.00%)      }
         .           
         .               fn fold_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: ty::Binder<'tcx, T>,
         .               ) -> ty::Binder<'tcx, T> {
    75,923 ( 0.00%)          self.current_index.shift_in(1);
    61,850 ( 0.00%)          let t = t.super_fold_with(self);
    63,072 ( 0.00%)          self.current_index.shift_out(1);
         .                   t
         .               }
         .           
   251,965 ( 0.00%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
   185,510 ( 0.00%)          match *t.kind() {
     4,339 ( 0.00%)              ty::Bound(debruijn, bound_ty) if debruijn == self.current_index => {
       871 ( 0.00%)                  if let Some(fld_t) = self.fld_t.as_mut() {
         .                               let ty = fld_t(bound_ty);
       871 ( 0.00%)                      return ty::fold::shift_vars(self.tcx, &ty, self.current_index.as_u32());
         .                           }
         .                       }
   183,768 ( 0.00%)              _ if t.has_vars_bound_at_or_above(self.current_index) => {
   261,049 ( 0.00%)                  return t.super_fold_with(self);
         .                       }
         .                       _ => {}
         .                   }
         .                   t
   130,344 ( 0.00%)      }
         .           
   159,260 ( 0.00%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
   147,724 ( 0.00%)          match *r {
   144,772 ( 0.00%)              ty::ReLateBound(debruijn, br) if debruijn == self.current_index => {
    72,382 ( 0.00%)                  if let Some(fld_r) = self.fld_r.as_mut() {
         .                               let region = fld_r(br);
   147,246 ( 0.00%)                      return if let ty::ReLateBound(debruijn1, br) = *region {
         .                                   // If the callback returns a late-bound region,
         .                                   // that region should always use the INNERMOST
         .                                   // debruijn index. Then we adjust it to the
         .                                   // correct depth.
     1,241 ( 0.00%)                          assert_eq!(debruijn1, ty::INNERMOST);
    12,212 ( 0.00%)                          self.tcx.mk_region(ty::ReLateBound(debruijn, br))
         .                               } else {
         .                                   region
         .                               };
         .                           }
         .                       }
         .                       _ => {}
         .                   }
         .                   r
   159,260 ( 0.00%)      }
         .           
         .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
        33 ( 0.00%)          match *ct {
         .                       ty::Const { val: ty::ConstKind::Bound(debruijn, bound_const), ty }
         .                           if debruijn == self.current_index =>
         .                       {
         .                           if let Some(fld_c) = self.fld_c.as_mut() {
         .                               let ct = fld_c(bound_const, ty);
         .                               return ty::fold::shift_vars(self.tcx, &ct, self.current_index.as_u32());
         .                           }
         .                       }
        11 ( 0.00%)              _ if ct.has_vars_bound_at_or_above(self.current_index) => {
         .                           return ct.super_fold_with(self);
         .                       }
         .                       _ => {}
         .                   }
         .                   ct
         .               }
         .           }
         .           
-- line 681 ----------------------------------------
-- line 697 ----------------------------------------
         .                   mut fld_r: F,
         .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
         .               where
         .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   let mut region_map = BTreeMap::new();
         .                   let mut real_fld_r =
   211,180 ( 0.00%)              |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));
    10,355 ( 0.00%)          let value = value.skip_binder();
    30,017 ( 0.00%)          let value = if !value.has_escaping_bound_vars() {
    50,328 ( 0.00%)              value
         .                   } else {
    24,367 ( 0.00%)              let mut replacer = BoundVarReplacer::new(self, Some(&mut real_fld_r), None, None);
       308 ( 0.00%)              value.fold_with(&mut replacer)
         .                   };
   140,535 ( 0.00%)          (value, region_map)
         .               }
         .           
         .               /// Replaces all escaping bound vars. The `fld_r` closure replaces escaping
         .               /// bound regions; the `fld_t` closure replaces escaping bound types and the `fld_c`
         .               /// closure replaces escaping bound consts.
   286,806 ( 0.00%)      pub fn replace_escaping_bound_vars<T, F, G, H>(
         .                   self,
         .                   value: T,
         .                   mut fld_r: F,
         .                   mut fld_t: G,
         .                   mut fld_c: H,
         .               ) -> T
         .               where
         .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
         .                   G: FnMut(ty::BoundTy) -> Ty<'tcx>,
         .                   H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,
         .                   T: TypeFoldable<'tcx>,
         .               {
    58,232 ( 0.00%)          if !value.has_escaping_bound_vars() {
   170,445 ( 0.00%)              value
         .                   } else {
         .                       let mut replacer =
   526,002 ( 0.00%)                  BoundVarReplacer::new(self, Some(&mut fld_r), Some(&mut fld_t), Some(&mut fld_c));
    35,698 ( 0.00%)              value.fold_with(&mut replacer)
         .                   }
   197,261 ( 0.00%)      }
         .           
         .               /// Replaces all types or regions bound by the given `Binder`. The `fld_r`
         .               /// closure replaces bound regions while the `fld_t` closure replaces bound
         .               /// types.
 1,009,469 ( 0.01%)      pub fn replace_bound_vars<T, F, G, H>(
         .                   self,
         .                   value: Binder<'tcx, T>,
         .                   mut fld_r: F,
         .                   fld_t: G,
         .                   fld_c: H,
         .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
         .               where
         .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
         .                   G: FnMut(ty::BoundTy) -> Ty<'tcx>,
         .                   H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   let mut region_map = BTreeMap::new();
   321,643 ( 0.00%)          let real_fld_r = |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));
 1,008,593 ( 0.01%)          let value = self.replace_escaping_bound_vars(value.skip_binder(), real_fld_r, fld_t, fld_c);
   952,446 ( 0.01%)          (value, region_map)
   695,268 ( 0.01%)      }
         .           
         .               /// Replaces any late-bound regions bound in `value` with
         .               /// free variants attached to `all_outlive_scope`.
    26,499 ( 0.00%)      pub fn liberate_late_bound_regions<T>(
         .                   self,
         .                   all_outlive_scope: DefId,
         .                   value: ty::Binder<'tcx, T>,
         .               ) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   self.replace_late_bound_regions(value, |br| {
    38,740 ( 0.00%)              self.mk_region(ty::ReFree(ty::FreeRegion {
     5,960 ( 0.00%)                  scope: all_outlive_scope,
         .                           bound_region: br.kind,
         .                       }))
         .                   })
         .                   .0
    14,454 ( 0.00%)      }
         .           
         .               pub fn shift_bound_var_indices<T>(self, bound_vars: usize, value: T) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   self.replace_escaping_bound_vars(
    22,740 ( 0.00%)              value,
         .                       |r| {
         .                           self.mk_region(ty::ReLateBound(
         .                               ty::INNERMOST,
         .                               ty::BoundRegion {
         .                                   var: ty::BoundVar::from_usize(r.var.as_usize() + bound_vars),
         .                                   kind: r.kind,
         .                               },
         .                           ))
-- line 795 ----------------------------------------
-- line 843 ----------------------------------------
         .               fn collect_late_bound_regions<T>(
         .                   self,
         .                   value: &Binder<'tcx, T>,
         .                   just_constraint: bool,
         .               ) -> FxHashSet<ty::BoundRegionKind>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
     2,870 ( 0.00%)          let mut collector = LateBoundRegionsCollector::new(just_constraint);
         .                   let result = value.as_ref().skip_binder().visit_with(&mut collector);
         .                   assert!(result.is_continue()); // should never have stopped early
     5,688 ( 0.00%)          collector.regions
         .               }
         .           
         .               /// Replaces any late-bound regions bound in `value` with `'erased`. Useful in codegen but also
         .               /// method lookup and a few other places where precise region relationships are not required.
       273 ( 0.00%)      pub fn erase_late_bound_regions<T>(self, value: Binder<'tcx, T>) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
     9,028 ( 0.00%)          self.replace_late_bound_regions(value, |_| self.lifetimes.re_erased).0
       234 ( 0.00%)      }
         .           
         .               /// Rewrite any late-bound regions so that they are anonymous. Region numbers are
         .               /// assigned starting at 0 and increasing monotonically in the order traversed
         .               /// by the fold operation.
         .               ///
         .               /// The chief purpose of this function is to canonicalize regions so that two
         .               /// `FnSig`s or `TraitRef`s which are equivalent up to region naming will become
         .               /// structurally identical. For example, `for<'a, 'b> fn(&'a isize, &'b isize)` and
         .               /// `for<'a, 'b> fn(&'b isize, &'a isize)` will become identical after anonymization.
    64,135 ( 0.00%)      pub fn anonymize_late_bound_regions<T>(self, sig: Binder<'tcx, T>) -> Binder<'tcx, T>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
    46,775 ( 0.00%)          let mut counter = 0;
     1,743 ( 0.00%)          let inner = self
         .                       .replace_late_bound_regions(sig, |_| {
         .                           let br = ty::BoundRegion {
     2,076 ( 0.00%)                      var: ty::BoundVar::from_u32(counter),
         .                               kind: ty::BrAnon(counter),
         .                           };
     8,304 ( 0.00%)                  let r = self.mk_region(ty::ReLateBound(ty::INNERMOST, br));
     5,190 ( 0.00%)                  counter += 1;
         .                           r
         .                       })
         .                       .0;
     9,355 ( 0.00%)          let bound_vars = self.mk_bound_variable_kinds(
    28,065 ( 0.00%)              (0..counter).map(|i| ty::BoundVariableKind::Region(ty::BrAnon(i))),
         .                   );
    50,496 ( 0.00%)          Binder::bind_with_vars(inner, bound_vars)
    55,678 ( 0.00%)      }
         .           }
         .           
         .           pub struct ValidateBoundVars<'tcx> {
         .               bound_vars: &'tcx ty::List<ty::BoundVariableKind>,
         .               binder_index: ty::DebruijnIndex,
         .               // We may encounter the same variable at different levels of binding, so
         .               // this can't just be `Ty`
         .               visited: SsoHashSet<(ty::DebruijnIndex, Ty<'tcx>)>,
-- line 902 ----------------------------------------
-- line 1004 ----------------------------------------
         .               tcx: TyCtxt<'tcx>,
         .               current_index: ty::DebruijnIndex,
         .               amount: u32,
         .           }
         .           
         .           impl<'tcx> Shifter<'tcx> {
         .               pub fn new(tcx: TyCtxt<'tcx>, amount: u32) -> Self {
         .                   Shifter { tcx, current_index: ty::INNERMOST, amount }
     1,758 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TypeFolder<'tcx> for Shifter<'tcx> {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
        32 ( 0.00%)          self.tcx
         .               }
         .           
         .               fn fold_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: ty::Binder<'tcx, T>,
         .               ) -> ty::Binder<'tcx, T> {
         .                   self.current_index.shift_in(1);
         .                   let t = t.super_fold_with(self);
         .                   self.current_index.shift_out(1);
         .                   t
         .               }
         .           
         .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
        16 ( 0.00%)          match *r {
         .                       ty::ReLateBound(debruijn, br) => {
        32 ( 0.00%)                  if self.amount == 0 || debruijn < self.current_index {
         .                               r
         .                           } else {
         8 ( 0.00%)                      let debruijn = debruijn.shifted_in(self.amount);
         .                               let shifted = ty::ReLateBound(debruijn, br);
        80 ( 0.00%)                      self.tcx.mk_region(shifted)
         .                           }
         .                       }
         .                       _ => r,
         .                   }
         .               }
         .           
         .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
     1,774 ( 0.00%)          match *ty.kind() {
         .                       ty::Bound(debruijn, bound_ty) => {
         .                           if self.amount == 0 || debruijn < self.current_index {
         .                               ty
         .                           } else {
         .                               let debruijn = debruijn.shifted_in(self.amount);
         .                               self.tcx.mk_ty(ty::Bound(debruijn, bound_ty))
         .                           }
         .                       }
         .           
     2,709 ( 0.00%)              _ => ty.super_fold_with(self),
         .                   }
         .               }
         .           
         .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
         .                   if let ty::Const { val: ty::ConstKind::Bound(debruijn, bound_ct), ty } = *ct {
         .                       if self.amount == 0 || debruijn < self.current_index {
         .                           ct
         .                       } else {
-- line 1064 ----------------------------------------
-- line 1073 ----------------------------------------
         .           
         .           pub fn shift_region<'tcx>(
         .               tcx: TyCtxt<'tcx>,
         .               region: ty::Region<'tcx>,
         .               amount: u32,
         .           ) -> ty::Region<'tcx> {
         .               match region {
         .                   ty::ReLateBound(debruijn, br) if amount > 0 => {
       598 ( 0.00%)              tcx.mk_region(ty::ReLateBound(debruijn.shifted_in(amount), *br))
         .                   }
         .                   _ => region,
         .               }
         .           }
         .           
         .           pub fn shift_vars<'tcx, T>(tcx: TyCtxt<'tcx>, value: T, amount: u32) -> T
         .           where
         .               T: TypeFoldable<'tcx>,
         .           {
         .               debug!("shift_vars(value={:?}, amount={})", value, amount);
         .           
     1,822 ( 0.00%)      value.fold_with(&mut Shifter::new(tcx, amount))
         .           }
         .           
         .           #[derive(Debug, PartialEq, Eq, Copy, Clone)]
         .           struct FoundEscapingVars;
         .           
         .           /// An "escaping var" is a bound var whose binder is not part of `t`. A bound var can be a
         .           /// bound region or a bound type.
         .           ///
-- line 1101 ----------------------------------------
-- line 1128 ----------------------------------------
         .           
         .           impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {
         .               type BreakTy = FoundEscapingVars;
         .           
         .               fn visit_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: &Binder<'tcx, T>,
         .               ) -> ControlFlow<Self::BreakTy> {
    26,542 ( 0.00%)          self.outer_index.shift_in(1);
         .                   let result = t.super_visit_with(self);
    34,818 ( 0.00%)          self.outer_index.shift_out(1);
         .                   result
         .               }
         .           
         .               #[inline]
         .               fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   // If the outer-exclusive-binder is *strictly greater* than
         .                   // `outer_index`, that means that `t` contains some content
         .                   // bound at `outer_index` or above (because
-- line 1146 ----------------------------------------
-- line 1160 ----------------------------------------
         .                   // visited.
         .                   if r.bound_at_or_above_binder(self.outer_index) {
         .                       ControlFlow::Break(FoundEscapingVars)
         .                   } else {
         .                       ControlFlow::CONTINUE
         .                   }
         .               }
         .           
       432 ( 0.00%)      fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   // we don't have a `visit_infer_const` callback, so we have to
         .                   // hook in here to catch this case (annoying...), but
         .                   // otherwise we do want to remember to visit the rest of the
         .                   // const, as it has types/regions embedded in a lot of other
         .                   // places.
       877 ( 0.00%)          match ct.val {
         .                       ty::ConstKind::Bound(debruijn, _) if debruijn >= self.outer_index => {
         .                           ControlFlow::Break(FoundEscapingVars)
         .                       }
       123 ( 0.00%)              _ => ct.super_visit_with(self),
         .                   }
       432 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   if predicate.inner.outer_exclusive_binder > self.outer_index {
         .                       ControlFlow::Break(FoundEscapingVars)
         .                   } else {
         .                       ControlFlow::CONTINUE
         .                   }
-- line 1188 ----------------------------------------
-- line 1210 ----------------------------------------
         .               #[instrument(level = "trace")]
         .               fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<Self::BreakTy> {
         .                   debug!(
         .                       "HasTypeFlagsVisitor: t={:?} t.flags={:?} self.flags={:?}",
         .                       t,
         .                       t.flags(),
         .                       self.flags
         .                   );
 1,367,814 ( 0.01%)          if t.flags().intersects(self.flags) {
         .                       ControlFlow::Break(FoundFlags)
         .                   } else {
         .                       ControlFlow::CONTINUE
         .                   }
         .               }
         .           
         .               #[inline]
         .               #[instrument(skip(self), level = "trace")]
         .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
    19,535 ( 0.00%)          let flags = r.type_flags();
         .                   trace!(r.flags=?flags);
         .                   if flags.intersects(self.flags) {
         .                       ControlFlow::Break(FoundFlags)
         .                   } else {
         .                       ControlFlow::CONTINUE
         .                   }
         .               }
         .           
         .               #[inline]
         .               #[instrument(level = "trace")]
         .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
   230,481 ( 0.00%)          let flags = FlagComputation::for_const(c);
         .                   trace!(r.flags=?flags);
     6,278 ( 0.00%)          if flags.intersects(self.flags) {
         .                       ControlFlow::Break(FoundFlags)
         .                   } else {
         .                       ControlFlow::CONTINUE
         .                   }
         .               }
         .           
         .               #[inline]
         .               #[instrument(level = "trace")]
         .               fn visit_unevaluated_const(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {
     8,015 ( 0.00%)          let flags = FlagComputation::for_unevaluated_const(uv);
         .                   trace!(r.flags=?flags);
         .                   if flags.intersects(self.flags) {
         .                       ControlFlow::Break(FoundFlags)
         .                   } else {
         .                       ControlFlow::CONTINUE
         .                   }
         .               }
         .           
-- line 1260 ----------------------------------------
-- line 1285 ----------------------------------------
         .               /// them constraints `'a == 'b`. But if you have `<&'a u32 as
         .               /// Trait>::Foo` and `<&'b u32 as Trait>::Foo`, normalizing those
         .               /// types may mean that `'a` and `'b` don't appear in the results,
         .               /// so they are not considered *constrained*.
         .               just_constrained: bool,
         .           }
         .           
         .           impl LateBoundRegionsCollector {
     1,422 ( 0.00%)      fn new(just_constrained: bool) -> Self {
     9,954 ( 0.00%)          LateBoundRegionsCollector {
         .                       current_index: ty::INNERMOST,
         .                       regions: Default::default(),
         .                       just_constrained,
         .                   }
     1,422 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {
         .               fn visit_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: &Binder<'tcx, T>,
         .               ) -> ControlFlow<Self::BreakTy> {
         6 ( 0.00%)          self.current_index.shift_in(1);
         6 ( 0.00%)          let result = t.super_visit_with(self);
         6 ( 0.00%)          self.current_index.shift_out(1);
         .                   result
         .               }
         .           
     5,205 ( 0.00%)      fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   // if we are only looking for "constrained" region, we have to
         .                   // ignore the inputs to a projection, as they may not appear
         .                   // in the normalized form
     5,272 ( 0.00%)          if self.just_constrained {
     5,064 ( 0.00%)              if let ty::Projection(..) | ty::Opaque(..) = t.kind() {
         .                           return ControlFlow::CONTINUE;
         .                       }
         .                   }
         .           
     6,169 ( 0.00%)          t.super_visit_with(self)
     3,474 ( 0.00%)      }
         .           
         .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   // if we are only looking for "constrained" region, we have to
         .                   // ignore the inputs of an unevaluated const, as they may not appear
         .                   // in the normalized form
         4 ( 0.00%)          if self.just_constrained {
         4 ( 0.00%)              if let ty::ConstKind::Unevaluated(..) = c.val {
         .                           return ControlFlow::CONTINUE;
         .                       }
         .                   }
         .           
         .                   c.super_visit_with(self)
         .               }
         .           
         .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
     4,959 ( 0.00%)          if let ty::ReLateBound(debruijn, br) = *r {
       911 ( 0.00%)              if debruijn == self.current_index {
         .                           self.regions.insert(br.kind);
         .                       }
         .                   }
         .                   ControlFlow::CONTINUE
         .               }
         .           }

   864,924 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_transform/src/simplify.rs
--------------------------------------------------------------------------------
Ir                 

-- line 38 ----------------------------------------
        .           use std::convert::TryInto;
        .           
        .           pub struct SimplifyCfg {
        .               label: String,
        .           }
        .           
        .           impl SimplifyCfg {
        .               pub fn new(label: &str) -> Self {
   45,926 ( 0.00%)          SimplifyCfg { label: format!("SimplifyCfg-{}", label) }
        .               }
        .           }
        .           
   54,970 ( 0.00%)  pub fn simplify_cfg<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {
   21,988 ( 0.00%)      CfgSimplifier::new(body).simplify();
   16,491 ( 0.00%)      remove_dead_blocks(tcx, body);
        .           
        .               // FIXME: Should probably be moved into some kind of pass manager
        .               body.basic_blocks_mut().raw.shrink_to_fit();
   16,248 ( 0.00%)  }
        .           
        .           impl<'tcx> MirPass<'tcx> for SimplifyCfg {
    3,939 ( 0.00%)      fn name(&self) -> Cow<'_, str> {
   11,817 ( 0.00%)          Cow::Borrowed(&self.label)
    3,939 ( 0.00%)      }
        .           
    3,939 ( 0.00%)      fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {
        .                   debug!("SimplifyCfg({:?}) - simplifying {:?}", self.label, body.source);
   10,994 ( 0.00%)          simplify_cfg(tcx, body);
        .               }
        .           }
        .           
        .           pub struct CfgSimplifier<'a, 'tcx> {
        .               basic_blocks: &'a mut IndexVec<BasicBlock, BasicBlockData<'tcx>>,
        .               pred_count: IndexVec<BasicBlock, u32>,
        .           }
        .           
        .           impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {
   38,479 ( 0.00%)      pub fn new(body: &'a mut Body<'tcx>) -> Self {
   10,994 ( 0.00%)          let mut pred_count = IndexVec::from_elem(0u32, body.basic_blocks());
        .           
        .                   // we can't use mir.predecessors() here because that counts
        .                   // dead blocks, which we don't want to.
   16,491 ( 0.00%)          pred_count[START_BLOCK] = 1;
        .           
  599,124 ( 0.01%)          for (_, data) in traversal::preorder(body) {
  383,379 ( 0.00%)              if let Some(ref term) = data.terminator {
  548,068 ( 0.00%)                  for &tgt in term.successors() {
  823,445 ( 0.01%)                      pred_count[tgt] += 1;
        .                           }
        .                       }
        .                   }
        .           
        .                   let basic_blocks = body.basic_blocks_mut();
        .           
   21,988 ( 0.00%)          CfgSimplifier { basic_blocks, pred_count }
   43,976 ( 0.00%)      }
        .           
   43,976 ( 0.00%)      pub fn simplify(mut self) {
    5,497 ( 0.00%)          self.strip_nops();
        .           
        .                   // Vec of the blocks that should be merged. We store the indices here, instead of the
        .                   // statements itself to avoid moving the (relatively) large statements twice.
        .                   // We do not push the statements directly into the target block (`bb`) as that is slower
        .                   // due to additional reallocations
        .                   let mut merged_blocks = Vec::new();
        .                   loop {
        .                       let mut changed = false;
        .           
   12,198 ( 0.00%)              for bb in self.basic_blocks.indices() {
  401,384 ( 0.00%)                  if self.pred_count[bb] == 0 {
        .                               continue;
        .                           }
        .           
        .                           debug!("simplifying {:?}", bb);
        .           
        .                           let mut terminator =
        .                               self.basic_blocks[bb].terminator.take().expect("invalid terminator state");
        .           
  509,559 ( 0.00%)                  for successor in terminator.successors_mut() {
        .                               self.collapse_goto_chain(successor, &mut changed);
        .                           }
        .           
        .                           let mut inner_changed = true;
        .                           merged_blocks.clear();
  532,691 ( 0.00%)                  while inner_changed {
        .                               inner_changed = false;
        .                               inner_changed |= self.simplify_branch(&mut terminator);
  181,419 ( 0.00%)                      inner_changed |= self.merge_successor(&mut merged_blocks, &mut terminator);
  544,257 ( 0.00%)                      changed |= inner_changed;
        .                           }
        .           
        .                           let statements_to_merge =
  192,933 ( 0.00%)                      merged_blocks.iter().map(|&i| self.basic_blocks[i].statements.len()).sum();
        .           
    5,394 ( 0.00%)                  if statements_to_merge > 0 {
        .                               let mut statements = std::mem::take(&mut self.basic_blocks[bb].statements);
        .                               statements.reserve(statements_to_merge);
   11,288 ( 0.00%)                      for &from in &merged_blocks {
   22,576 ( 0.00%)                          statements.append(&mut self.basic_blocks[from].statements);
        .                               }
   22,005 ( 0.00%)                      self.basic_blocks[bb].statements = statements;
        .                           }
        .           
5,265,443 ( 0.05%)                  self.basic_blocks[bb].terminator = Some(terminator);
        .                       }
        .           
   12,198 ( 0.00%)              if !changed {
        .                           break;
        .                       }
        .                   }
   43,976 ( 0.00%)      }
        .           
        .               /// This function will return `None` if
        .               /// * the block has statements
        .               /// * the block has a terminator other than `goto`
        .               /// * the block has no terminator (meaning some other part of the current optimization stole it)
        .               fn take_terminator_if_simple_goto(&mut self, bb: BasicBlock) -> Option<Terminator<'tcx>> {
1,599,521 ( 0.01%)          match self.basic_blocks[bb] {
        .                       BasicBlockData {
        .                           ref statements,
        .                           terminator:
        .                               ref mut terminator @ Some(Terminator { kind: TerminatorKind::Goto { .. }, .. }),
        .                           ..
   36,148 ( 0.00%)              } if statements.is_empty() => terminator.take(),
        .                       // if `terminator` is None, this means we are in a loop. In that
        .                       // case, let all the loop collapse to its entry.
        .                       _ => None,
        .                   }
        .               }
        .           
        .               /// Collapse a goto chain starting from `start`
        .               fn collapse_goto_chain(&mut self, start: &mut BasicBlock, changed: &mut bool) {
        .                   // Using `SmallVec` here, because in some logs on libcore oli-obk saw many single-element
        .                   // goto chains. We should probably benchmark different sizes.
        .                   let mut terminators: SmallVec<[_; 1]> = Default::default();
  676,323 ( 0.01%)          let mut current = *start;
  734,501 ( 0.01%)          while let Some(terminator) = self.take_terminator_if_simple_goto(current) {
    6,124 ( 0.00%)              let target = match terminator {
    3,062 ( 0.00%)                  Terminator { kind: TerminatorKind::Goto { target }, .. } => target,
        .                           _ => unreachable!(),
        .                       };
   58,178 ( 0.00%)              terminators.push((current, terminator));
        .                       current = target;
        .                   }
        .                   let last = current;
  225,441 ( 0.00%)          *start = last;
   45,930 ( 0.00%)          while let Some((current, mut terminator)) = terminators.pop() {
    6,124 ( 0.00%)              let target = match terminator {
        .                           Terminator { kind: TerminatorKind::Goto { ref mut target }, .. } => target,
        .                           _ => unreachable!(),
        .                       };
    6,124 ( 0.00%)              *changed |= *target != last;
    6,124 ( 0.00%)              *target = last;
        .                       debug!("collapsing goto chain from {:?} to {:?}", current, target);
        .           
    6,124 ( 0.00%)              if self.pred_count[current] == 1 {
        .                           // This is the last reference to current, so the pred-count to
        .                           // to target is moved into the current block.
        .                           self.pred_count[current] = 0;
        .                       } else {
    2,900 ( 0.00%)                  self.pred_count[*target] += 1;
    2,175 ( 0.00%)                  self.pred_count[current] -= 1;
        .                       }
  101,046 ( 0.00%)              self.basic_blocks[current].terminator = Some(terminator);
        .                   }
        .               }
        .           
        .               // merge a block with 1 `goto` predecessor to its parent
        .               fn merge_successor(
        .                   &mut self,
        .                   merged_blocks: &mut Vec<BasicBlock>,
        .                   terminator: &mut Terminator<'tcx>,
        .               ) -> bool {
  434,723 ( 0.00%)          let target = match terminator.kind {
  161,740 ( 0.00%)              TerminatorKind::Goto { target } if self.pred_count[target] == 1 => target,
        .                       _ => return false,
        .                   };
        .           
        .                   debug!("merging block {:?} into {:?}", target, terminator);
  265,420 ( 0.00%)          *terminator = match self.basic_blocks[target].terminator.take() {
        .                       Some(terminator) => terminator,
        .                       None => {
        .                           // unreachable loop - this should not be possible, as we
        .                           // don't strand blocks, but handle it correctly.
        .                           return false;
        .                       }
        .                   };
        .           
        .                   merged_blocks.push(target);
   34,620 ( 0.00%)          self.pred_count[target] = 0;
        .           
        .                   true
        .               }
        .           
        .               // turn a branch with all successors identical to a goto
        .               fn simplify_branch(&mut self, terminator: &mut Terminator<'tcx>) -> bool {
  544,257 ( 0.00%)          match terminator.kind {
        .                       TerminatorKind::SwitchInt { .. } => {}
        .                       _ => return false,
        .                   };
        .           
        .                   let first_succ = {
   94,794 ( 0.00%)              if let Some(&first_succ) = terminator.successors().next() {
   47,397 ( 0.00%)                  if terminator.successors().all(|s| *s == first_succ) {
      222 ( 0.00%)                      let count = terminator.successors().count();
      444 ( 0.00%)                      self.pred_count[first_succ] -= (count - 1) as u32;
        .                               first_succ
        .                           } else {
        .                               return false;
        .                           }
        .                       } else {
        .                           return false;
        .                       }
        .                   };
        .           
        .                   debug!("simplifying branch {:?}", terminator);
      444 ( 0.00%)          terminator.kind = TerminatorKind::Goto { target: first_succ };
        .                   true
        .               }
        .           
        .               fn strip_nops(&mut self) {
        .                   for blk in self.basic_blocks.iter_mut() {
  710,577 ( 0.01%)              blk.statements.retain(|stmt| !matches!(stmt.kind, StatementKind::Nop))
        .                   }
        .               }
        .           }
        .           
   63,420 ( 0.00%)  pub fn remove_dead_blocks<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {
    6,342 ( 0.00%)      let reachable = traversal::reachable_as_bitset(body);
        .               let num_blocks = body.basic_blocks().len();
   12,684 ( 0.00%)      if num_blocks == reachable.count() {
        .                   return;
        .               }
        .           
        .               let basic_blocks = body.basic_blocks_mut();
        .               let mut replacements: Vec<_> = (0..num_blocks).map(BasicBlock::new).collect();
        .               let mut used_blocks = 0;
  100,713 ( 0.00%)      for alive_index in reachable.iter() {
        .                   let alive_index = alive_index.index();
  100,713 ( 0.00%)          replacements[alive_index] = BasicBlock::new(used_blocks);
  201,426 ( 0.00%)          if alive_index != used_blocks {
        .                       // Swap the next alive block data with the current available slot. Since
        .                       // alive_index is non-decreasing this is a valid operation.
        .                       basic_blocks.raw.swap(alive_index, used_blocks);
        .                   }
  100,713 ( 0.00%)          used_blocks += 1;
        .               }
        .           
   14,056 ( 0.00%)      if tcx.sess.instrument_coverage() {
        .                   save_unreachable_coverage(basic_blocks, used_blocks);
        .               }
        .           
        .               basic_blocks.raw.truncate(used_blocks);
        .           
        .               for block in basic_blocks {
  201,426 ( 0.00%)          for target in block.terminator_mut().successors_mut() {
  490,800 ( 0.00%)              *target = replacements[target.index()];
        .                   }
        .               }
   50,736 ( 0.00%)  }
        .           
        .           /// Some MIR transforms can determine at compile time that a sequences of
        .           /// statements will never be executed, so they can be dropped from the MIR.
        .           /// For example, an `if` or `else` block that is guaranteed to never be executed
        .           /// because its condition can be evaluated at compile time, such as by const
        .           /// evaluation: `if false { ... }`.
        .           ///
        .           /// Those statements are bypassed by redirecting paths in the CFG around the
-- line 305 ----------------------------------------
-- line 363 ----------------------------------------
        .                       })),
        .                   })
        .               }
        .           }
        .           
        .           pub struct SimplifyLocals;
        .           
        .           impl<'tcx> MirPass<'tcx> for SimplifyLocals {
    1,558 ( 0.00%)      fn is_enabled(&self, sess: &rustc_session::Session) -> bool {
    2,337 ( 0.00%)          sess.mir_opt_level() > 0
    1,558 ( 0.00%)      }
        .           
      779 ( 0.00%)      fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {
        .                   trace!("running SimplifyLocals on {:?}", body.source);
      779 ( 0.00%)          simplify_locals(body, tcx);
        .               }
        .           }
        .           
    5,453 ( 0.00%)  pub fn simplify_locals<'tcx>(body: &mut Body<'tcx>, tcx: TyCtxt<'tcx>) {
        .               // First, we're going to get a count of *actual* uses for every `Local`.
        .               let mut used_locals = UsedLocals::new(body);
        .           
        .               // Next, we're going to remove any `Local` with zero actual uses. When we remove those
        .               // `Locals`, we're also going to subtract any uses of other `Locals` from the `used_locals`
        .               // count. For example, if we removed `_2 = discriminant(_1)`, then we'll subtract one from
        .               // `use_counts[_1]`. That in turn might make `_1` unused, so we loop until we hit a
        .               // fixedpoint where there are no more unused locals.
-- line 389 ----------------------------------------
-- line 390 ----------------------------------------
        .               remove_unused_definitions(&mut used_locals, body);
        .           
        .               // Finally, we'll actually do the work of shrinking `body.local_decls` and remapping the `Local`s.
        .               let map = make_local_map(&mut body.local_decls, &used_locals);
        .           
        .               // Only bother running the `LocalUpdater` if we actually found locals to remove.
        .               if map.iter().any(Option::is_none) {
        .                   // Update references to all vars and tmps now
    1,086 ( 0.00%)          let mut updater = LocalUpdater { map, tcx };
        .                   updater.visit_body(body);
        .           
        .                   body.local_decls.shrink_to_fit();
        .               }
    6,232 ( 0.00%)  }
        .           
        .           /// Construct the mapping while swapping out unused stuff out from the `vec`.
        .           fn make_local_map<V>(
        .               local_decls: &mut IndexVec<Local, V>,
        .               used_locals: &UsedLocals,
        .           ) -> IndexVec<Local, Option<Local>> {
    1,558 ( 0.00%)      let mut map: IndexVec<Local, Option<Local>> = IndexVec::from_elem(None, &*local_decls);
        .               let mut used = Local::new(0);
        .           
      779 ( 0.00%)      for alive_index in local_decls.indices() {
        .                   // `is_used` treats the `RETURN_PLACE` and arguments as used.
   36,188 ( 0.00%)          if !used_locals.is_used(alive_index) {
        .                       continue;
        .                   }
        .           
   18,300 ( 0.00%)          map[alive_index] = Some(used);
   18,300 ( 0.00%)          if alive_index != used {
        .                       local_decls.swap(alive_index, used);
        .                   }
        .                   used.increment_by(1);
        .               }
        .               local_decls.truncate(used.index());
        .               map
        .           }
        .           
-- line 428 ----------------------------------------
-- line 431 ----------------------------------------
        .               increment: bool,
        .               arg_count: u32,
        .               use_count: IndexVec<Local, u32>,
        .           }
        .           
        .           impl UsedLocals {
        .               /// Determines which locals are used & unused in the given body.
        .               fn new(body: &Body<'_>) -> Self {
    5,453 ( 0.00%)          let mut this = Self {
        .                       increment: true,
      779 ( 0.00%)              arg_count: body.arg_count.try_into().unwrap(),
    2,337 ( 0.00%)              use_count: IndexVec::from_elem(0, &body.local_decls),
        .                   };
        .                   this.visit_body(body);
        .                   this
        .               }
        .           
        .               /// Checks if local is used.
        .               ///
        .               /// Return place and arguments are always considered used.
        .               fn is_used(&self, local: Local) -> bool {
        .                   trace!("is_used({:?}): use_count: {:?}", local, self.use_count[local]);
  210,754 ( 0.00%)          local.as_u32() <= self.arg_count || self.use_count[local] != 0
        .               }
        .           
        .               /// Updates the use counts to reflect the removal of given statement.
        .               fn statement_removed(&mut self, statement: &Statement<'_>) {
   19,007 ( 0.00%)          self.increment = false;
        .           
        .                   // The location of the statement is irrelevant.
        .                   let location = Location { block: START_BLOCK, statement_index: 0 };
   95,035 ( 0.00%)          self.visit_statement(statement, location);
        .               }
        .           
        .               /// Visits a left-hand side of an assignment.
  279,615 ( 0.00%)      fn visit_lhs(&mut self, place: &Place<'_>, location: Location) {
  223,692 ( 0.00%)          if place.is_indirect() {
        .                       // A use, not a definition.
        .                       self.visit_place(place, PlaceContext::MutatingUse(MutatingUseContext::Store), location);
        .                   } else {
        .                       // A definition. The base local itself is not visited, so this occurrence is not counted
        .                       // toward its use count. There might be other locals still, used in an indexing
        .                       // projection.
        .                       self.super_projection(
        .                           place.as_ref(),
        .                           PlaceContext::MutatingUse(MutatingUseContext::Projection),
        .                           location,
        .                       );
        .                   }
  223,692 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for UsedLocals {
  279,615 ( 0.00%)      fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {
  279,615 ( 0.00%)          match statement.kind {
        .                       StatementKind::CopyNonOverlapping(..)
        .                       | StatementKind::Retag(..)
        .                       | StatementKind::Coverage(..)
        .                       | StatementKind::FakeRead(..)
        .                       | StatementKind::AscribeUserType(..) => {
        .                           self.super_statement(statement, location);
        .                       }
        .           
        .                       StatementKind::Nop => {}
        .           
        .                       StatementKind::StorageLive(_local) | StatementKind::StorageDead(_local) => {}
        .           
   55,324 ( 0.00%)              StatementKind::Assign(box (ref place, ref rvalue)) => {
  165,972 ( 0.00%)                  self.visit_lhs(place, location);
        .                           self.visit_rvalue(rvalue, location);
        .                       }
        .           
        .                       StatementKind::SetDiscriminant { ref place, variant_index: _ } => {
    4,193 ( 0.00%)                  self.visit_lhs(place, location);
        .                       }
        .                   }
   13,070 ( 0.00%)      }
        .           
        .               fn visit_local(&mut self, local: &Local, _ctx: PlaceContext, _location: Location) {
   75,877 ( 0.00%)          if self.increment {
   91,095 ( 0.00%)              self.use_count[*local] += 1;
        .                   } else {
      276 ( 0.00%)              assert_ne!(self.use_count[*local], 0);
       92 ( 0.00%)              self.use_count[*local] -= 1;
        .                   }
        .               }
        .           }
        .           
        .           /// Removes unused definitions. Updates the used locals to reflect the changes made.
        .           fn remove_unused_definitions(used_locals: &mut UsedLocals, body: &mut Body<'_>) {
        .               // The use counts are updated as we remove the statements. A local might become unused
        .               // during the retain operation, leading to a temporary inconsistency (storage statements or
        .               // definitions referencing the local might remain). For correctness it is crucial that this
        .               // computation reaches a fixed point.
        .           
        .               let mut modified = true;
   11,929 ( 0.00%)      while modified {
      840 ( 0.00%)          modified = false;
        .           
        .                   for data in body.basic_blocks_mut() {
        .                       // Remove unnecessary StorageLive and StorageDead annotations.
   57,040 ( 0.00%)              data.statements.retain(|statement| {
  296,668 ( 0.00%)                  let keep = match &statement.kind {
        .                               StatementKind::StorageLive(local) | StatementKind::StorageDead(local) => {
        .                                   used_locals.is_used(*local)
        .                               }
   96,548 ( 0.00%)                      StatementKind::Assign(box (place, _)) => used_locals.is_used(place.local),
        .           
        .                               StatementKind::SetDiscriminant { ref place, .. } => {
    1,756 ( 0.00%)                          used_locals.is_used(place.local)
        .                               }
        .                               _ => true,
        .                           };
        .           
   46,627 ( 0.00%)                  if !keep {
        .                               trace!("removing statement {:?}", statement);
   19,007 ( 0.00%)                      modified = true;
        .                               used_locals.statement_removed(statement);
        .                           }
        .           
        .                           keep
        .                       });
        .                   }
        .               }
        .           }
-- line 555 ----------------------------------------
-- line 556 ----------------------------------------
        .           
        .           struct LocalUpdater<'tcx> {
        .               map: IndexVec<Local, Option<Local>>,
        .               tcx: TyCtxt<'tcx>,
        .           }
        .           
        .           impl<'tcx> MutVisitor<'tcx> for LocalUpdater<'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
    2,599 ( 0.00%)          self.tcx
        .               }
        .           
        .               fn visit_local(&mut self, l: &mut Local, _: PlaceContext, _: Location) {
  103,324 ( 0.00%)          *l = self.map[*l].unwrap();
        .               }
        .           }

2,240,208 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_transform/src/simplify.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/ast.rs
--------------------------------------------------------------------------------
Ir                  

-- line 62 ----------------------------------------
         .           impl fmt::Debug for Label {
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   write!(f, "label({:?})", self.ident)
         .               }
         .           }
         .           
         .           /// A "Lifetime" is an annotation of the scope in which variable
         .           /// can be used, e.g. `'a` in `&'a i32`.
       810 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Copy)]
         .           pub struct Lifetime {
         .               pub id: NodeId,
         .               pub ident: Ident,
         .           }
         .           
         .           impl fmt::Debug for Lifetime {
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   write!(f, "lifetime({}: {})", self.id, self)
-- line 78 ----------------------------------------
-- line 86 ----------------------------------------
         .           }
         .           
         .           /// A "Path" is essentially Rust's notion of a name.
         .           ///
         .           /// It's represented as a sequence of identifiers,
         .           /// along with a bunch of supporting information.
         .           ///
         .           /// E.g., `std::cmp::PartialEq`.
   144,871 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct Path {
        20 ( 0.00%)      pub span: Span,
         .               /// The segments in the path: the things separated by `::`.
         .               /// Global paths begin with `kw::PathRoot`.
    33,979 ( 0.00%)      pub segments: Vec<PathSegment>,
         .               pub tokens: Option<LazyTokenStream>,
         .           }
         .           
         .           impl PartialEq<Symbol> for Path {
         .               #[inline]
         .               fn eq(&self, symbol: &Symbol) -> bool {
   173,226 ( 0.00%)          self.segments.len() == 1 && { self.segments[0].ident.name == *symbol }
         .               }
         .           }
         .           
         .           impl<CTX> HashStable<CTX> for Path {
         .               fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
         .                   self.segments.len().hash_stable(hcx, hasher);
         .                   for segment in &self.segments {
         .                       segment.ident.name.hash_stable(hcx, hasher);
         .                   }
         .               }
         .           }
         .           
         .           impl Path {
         .               // Convert a span and an identifier to the corresponding
         .               // one-segment path.
    10,902 ( 0.00%)      pub fn from_ident(ident: Ident) -> Path {
    31,689 ( 0.00%)          Path { segments: vec![PathSegment::from_ident(ident)], span: ident.span, tokens: None }
     9,085 ( 0.00%)      }
         .           
         .               pub fn is_global(&self) -> bool {
         .                   !self.segments.is_empty() && self.segments[0].ident.name == kw::PathRoot
         .               }
         .           }
         .           
         .           /// A segment of a path: an identifier, an optional lifetime, and a set of types.
         .           ///
         .           /// E.g., `std`, `String` or `Box<T>`.
     4,659 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct PathSegment {
         .               /// The identifier portion of this path segment.
         .               pub ident: Ident,
         .           
    31,253 ( 0.00%)      pub id: NodeId,
         .           
         .               /// Type/lifetime parameters attached to this path. They come in
         .               /// two flavors: `Path<A,B,C>` and `Path(A,B) -> C`.
         .               /// `None` means that no parameter list is supplied (`Path`),
         .               /// `Some` means that parameter list is supplied (`Path<X, Y>`)
         .               /// but it can be empty (`Path<>`).
         .               /// `P` is used as a size optimization for the common case with no parameters.
         .               pub args: Option<P<GenericArgs>>,
         .           }
         .           
         .           impl PathSegment {
    20,910 ( 0.00%)      pub fn from_ident(ident: Ident) -> Self {
    83,720 ( 0.00%)          PathSegment { ident, id: DUMMY_NODE_ID, args: None }
    20,910 ( 0.00%)      }
         .           
        20 ( 0.00%)      pub fn path_root(span: Span) -> Self {
         .                   PathSegment::from_ident(Ident::new(kw::PathRoot, span))
        20 ( 0.00%)      }
         .           
         .               pub fn span(&self) -> Span {
    37,017 ( 0.00%)          match &self.args {
       829 ( 0.00%)              Some(args) => self.ident.span.to(args.span()),
         .                       None => self.ident.span,
         .                   }
    23,020 ( 0.00%)      }
         .           }
         .           
         .           /// The arguments of a path segment.
         .           ///
         .           /// E.g., `<A, B>` as in `Foo<A, B>` or `(A, B)` as in `Foo(A, B)`.
       994 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub enum GenericArgs {
         .               /// The `<'a, A, B, C>` in `foo::bar::baz::<'a, A, B, C>`.
         .               AngleBracketed(AngleBracketedArgs),
         .               /// The `(A, B)` and `C` in `Foo(A, B) -> C`.
         .               Parenthesized(ParenthesizedArgs),
         .           }
         .           
         .           impl GenericArgs {
         .               pub fn is_angle_bracketed(&self) -> bool {
        98 ( 0.00%)          matches!(self, AngleBracketed(..))
        49 ( 0.00%)      }
         .           
         .               pub fn span(&self) -> Span {
     2,487 ( 0.00%)          match *self {
         .                       AngleBracketed(ref data) => data.span,
         .                       Parenthesized(ref data) => data.span,
         .                   }
         .               }
         .           }
         .           
         .           /// Concrete argument in the sequence of generic args.
     2,710 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub enum GenericArg {
         .               /// `'a` in `Foo<'a>`
         .               Lifetime(Lifetime),
         .               /// `Bar` in `Foo<Bar>`
         .               Type(P<Ty>),
         .               /// `1` in `Foo<1>`
         .               Const(AnonConst),
         .           }
-- line 200 ----------------------------------------
-- line 215 ----------------------------------------
         .               /// The overall span.
         .               pub span: Span,
         .               /// The comma separated parts in the `<...>`.
         .               pub args: Vec<AngleBracketedArg>,
         .           }
         .           
         .           /// Either an argument for a parameter e.g., `'a`, `Vec<u8>`, `0`,
         .           /// or a constraint on an associated item, e.g., `Item = String` or `Item: Bound`.
     1,164 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub enum AngleBracketedArg {
         .               /// Argument for a generic parameter.
         .               Arg(GenericArg),
         .               /// Constraint for an associated item.
         .               Constraint(AssocConstraint),
         .           }
         .           
         .           impl AngleBracketedArg {
-- line 231 ----------------------------------------
-- line 233 ----------------------------------------
         .                   match self {
         .                       AngleBracketedArg::Arg(arg) => arg.span(),
         .                       AngleBracketedArg::Constraint(constraint) => constraint.span,
         .                   }
         .               }
         .           }
         .           
         .           impl Into<Option<P<GenericArgs>>> for AngleBracketedArgs {
     1,788 ( 0.00%)      fn into(self) -> Option<P<GenericArgs>> {
         .                   Some(P(GenericArgs::AngleBracketed(self)))
     1,788 ( 0.00%)      }
         .           }
         .           
         .           impl Into<Option<P<GenericArgs>>> for ParenthesizedArgs {
        20 ( 0.00%)      fn into(self) -> Option<P<GenericArgs>> {
         .                   Some(P(GenericArgs::Parenthesized(self)))
        20 ( 0.00%)      }
         .           }
         .           
         .           /// A path like `Foo(A, B) -> C`.
         .           #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct ParenthesizedArgs {
         .               /// ```text
         .               /// Foo(A, B) -> C
         .               /// ^^^^^^^^^^^^^^
-- line 257 ----------------------------------------
-- line 304 ----------------------------------------
         .               // This parses but will be rejected during AST validation.
         .               MaybeConstMaybe,
         .           }
         .           
         .           /// The AST represents all type param bounds as types.
         .           /// `typeck::collect::compute_bounds` matches these against
         .           /// the "special" built-in traits (see `middle::lang_items`) and
         .           /// detects `Copy`, `Send` and `Sync`.
       846 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub enum GenericBound {
        40 ( 0.00%)      Trait(PolyTraitRef, TraitBoundModifier),
         .               Outlives(Lifetime),
         .           }
         .           
         .           impl GenericBound {
         .               pub fn span(&self) -> Span {
         .                   match self {
         .                       GenericBound::Trait(ref t, ..) => t.span,
         .                       GenericBound::Outlives(ref l) => l.ident.span,
-- line 322 ----------------------------------------
-- line 337 ----------------------------------------
         .               // `Infer` is not actually constructed directly from the AST, but is implicitly constructed
         .               // during HIR lowering, and `ParamKindOrd` will implicitly order inferred variables last.
         .               Infer,
         .           }
         .           
         .           impl Ord for ParamKindOrd {
         .               fn cmp(&self, other: &Self) -> Ordering {
         .                   use ParamKindOrd::*;
       546 ( 0.00%)          let to_int = |v| match v {
         .                       Lifetime => 0,
         .                       Infer | Type | Const => 1,
         .                   };
         .           
        91 ( 0.00%)          to_int(*self).cmp(&to_int(*other))
         .               }
         .           }
         .           impl PartialOrd for ParamKindOrd {
         .               fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
         .                   Some(self.cmp(other))
        91 ( 0.00%)      }
         .           }
         .           impl PartialEq for ParamKindOrd {
         .               fn eq(&self, other: &Self) -> bool {
         .                   self.cmp(other) == Ordering::Equal
         .               }
         .           }
         .           impl Eq for ParamKindOrd {}
         .           
-- line 364 ----------------------------------------
-- line 368 ----------------------------------------
         .                       ParamKindOrd::Lifetime => "lifetime".fmt(f),
         .                       ParamKindOrd::Type => "type".fmt(f),
         .                       ParamKindOrd::Const { .. } => "const".fmt(f),
         .                       ParamKindOrd::Infer => "infer".fmt(f),
         .                   }
         .               }
         .           }
         .           
       549 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub enum GenericParamKind {
         .               /// A lifetime definition (e.g., `'a: 'b + 'c + 'd`).
         .               Lifetime,
         .               Type {
         .                   default: Option<P<Ty>>,
         .               },
         .               Const {
         .                   ty: P<Ty>,
         .                   /// Span of the `const` keyword.
         .                   kw_span: Span,
         .                   /// Optional default value for the const generic param
         .                   default: Option<AnonConst>,
         .               },
         .           }
         .           
       990 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct GenericParam {
       223 ( 0.00%)      pub id: NodeId,
         .               pub ident: Ident,
       120 ( 0.00%)      pub attrs: AttrVec,
         .               pub bounds: GenericBounds,
       223 ( 0.00%)      pub is_placeholder: bool,
         .               pub kind: GenericParamKind,
         .           }
         .           
         .           impl GenericParam {
         .               pub fn span(&self) -> Span {
         .                   match &self.kind {
         .                       GenericParamKind::Lifetime | GenericParamKind::Type { default: None } => {
         .                           self.ident.span
-- line 406 ----------------------------------------
-- line 411 ----------------------------------------
         .                       }
         .                       GenericParamKind::Const { kw_span, default: None, ty } => kw_span.to(ty.span),
         .                   }
         .               }
         .           }
         .           
         .           /// Represents lifetime, type and const parameters attached to a declaration of
         .           /// a function, enum, trait, etc.
     3,275 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct Generics {
       730 ( 0.00%)      pub params: Vec<GenericParam>,
         .               pub where_clause: WhereClause,
         .               pub span: Span,
         .           }
         .           
         .           impl Default for Generics {
         .               /// Creates an instance of `Generics`.
       197 ( 0.00%)      fn default() -> Generics {
       985 ( 0.00%)          Generics {
         .                       params: Vec::new(),
         .                       where_clause: WhereClause {
         .                           has_where_token: false,
         .                           predicates: Vec::new(),
         .                           span: DUMMY_SP,
         .                       },
         .                       span: DUMMY_SP,
         .                   }
       197 ( 0.00%)      }
         .           }
         .           
         .           /// A where-clause in a definition.
     2,246 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct WhereClause {
         .               /// `true` if we ate a `where` token: this can happen
         .               /// if we parsed no predicates (e.g. `struct Foo where {}`).
         .               /// This allows us to accurately pretty-print
         .               /// in `nt_to_tokenstream`
     1,129 ( 0.00%)      pub has_where_token: bool,
       595 ( 0.00%)      pub predicates: Vec<WherePredicate>,
         .               pub span: Span,
         .           }
         .           
         .           /// A single predicate in a where-clause.
         .           #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub enum WherePredicate {
         .               /// A type binding (e.g., `for<'c> Foo: Send + Clone + 'c`).
         .               BoundPredicate(WhereBoundPredicate),
-- line 457 ----------------------------------------
-- line 515 ----------------------------------------
         .               /// expansion placeholders or an unassigned value (`DUMMY_NODE_ID`) before that.
         .               pub id: NodeId,
         .               pub is_placeholder: bool,
         .           }
         .           
         .           /// Possible values inside of compile-time attribute lists.
         .           ///
         .           /// E.g., the '..' in `#[name(..)]`.
       879 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub enum NestedMetaItem {
         .               /// A full MetaItem, for recursive meta items.
         .               MetaItem(MetaItem),
         .               /// A literal.
         .               ///
         .               /// E.g., `"foo"`, `64`, `true`.
         .               Literal(Lit),
         .           }
         .           
         .           /// A spanned compile-time attribute item.
         .           ///
         .           /// E.g., `#[test]`, `#[derive(..)]`, `#[rustfmt::skip]` or `#[feature = "foo"]`.
     4,025 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub struct MetaItem {
         .               pub path: Path,
         .               pub kind: MetaItemKind,
         .               pub span: Span,
         .           }
         .           
         .           /// A compile-time attribute item.
         .           ///
         .           /// E.g., `#[test]`, `#[derive(..)]` or `#[feature = "foo"]`.
     1,794 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub enum MetaItemKind {
         .               /// Word meta item.
         .               ///
         .               /// E.g., `test` as in `#[test]`.
         .               Word,
         .               /// List meta item.
         .               ///
         .               /// E.g., `derive(..)` as in `#[derive(..)]`.
         .               List(Vec<NestedMetaItem>),
         .               /// Name value meta item.
         .               ///
         .               /// E.g., `feature = "foo"` as in `#[feature = "foo"]`.
        30 ( 0.00%)      NameValue(Lit),
         .           }
         .           
         .           /// A block (`{ .. }`).
         .           ///
         .           /// E.g., `{ .. }` as in `fn foo() { .. }`.
     1,616 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct Block {
         .               /// The statements in the block.
       808 ( 0.00%)      pub stmts: Vec<Stmt>,
       404 ( 0.00%)      pub id: NodeId,
         .               /// Distinguishes between `unsafe { ... }` and `{ ... }`.
       404 ( 0.00%)      pub rules: BlockCheckMode,
         .               pub span: Span,
         .               pub tokens: Option<LazyTokenStream>,
         .               /// The following *isn't* a parse error, but will cause multiple errors in following stages.
         .               /// ```
         .               /// let x = {
         .               ///     foo: var
         .               /// };
         .               /// ```
         .               /// #34255
       404 ( 0.00%)      pub could_be_bare_literal: bool,
         .           }
         .           
         .           /// A match pattern.
         .           ///
         .           /// Patterns appear in match statements and some other contexts, such as `let` and `if let`.
    17,664 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct Pat {
     1,914 ( 0.00%)      pub id: NodeId,
     4,075 ( 0.00%)      pub kind: PatKind,
         .               pub span: Span,
         .               pub tokens: Option<LazyTokenStream>,
         .           }
         .           
         .           impl Pat {
         .               /// Attempt reparsing the pattern as a type.
         .               /// This is intended for use by diagnostics.
         .               pub fn to_ty(&self) -> Option<P<Ty>> {
-- line 598 ----------------------------------------
-- line 626 ----------------------------------------
         .                   };
         .           
         .                   Some(P(Ty { kind, id: self.id, span: self.span, tokens: None }))
         .               }
         .           
         .               /// Walk top-down and call `it` in each place where a pattern occurs
         .               /// starting with the root pattern `walk` is called on. If `it` returns
         .               /// false then we will descend no further but siblings will be processed.
    70,081 ( 0.00%)      pub fn walk(&self, it: &mut impl FnMut(&Pat) -> bool) {
         .                   if !it(self) {
         .                       return;
         .                   }
         .           
    34,669 ( 0.00%)          match &self.kind {
         .                       // Walk into the pattern associated with `Ident` (if any).
         .                       PatKind::Ident(_, _, Some(p)) => p.walk(it),
         .           
         .                       // Walk into each field of struct.
       456 ( 0.00%)              PatKind::Struct(_, _, fields, _) => fields.iter().for_each(|field| field.pat.walk(it)),
         .           
         .                       // Sequence of patterns.
       518 ( 0.00%)              PatKind::TupleStruct(_, _, s)
         .                       | PatKind::Tuple(s)
         .                       | PatKind::Slice(s)
     2,096 ( 0.00%)              | PatKind::Or(s) => s.iter().for_each(|p| p.walk(it)),
         .           
         .                       // Trivial wrappers over inner patterns.
         .                       PatKind::Box(s) | PatKind::Ref(s, _) | PatKind::Paren(s) => s.walk(it),
         .           
         .                       // These patterns do not contain subpatterns, skip.
         .                       PatKind::Wild
         .                       | PatKind::Rest
         .                       | PatKind::Lit(_)
         .                       | PatKind::Range(..)
         .                       | PatKind::Ident(..)
         .                       | PatKind::Path(..)
         .                       | PatKind::MacCall(_) => {}
         .                   }
    40,816 ( 0.00%)      }
         .           
         .               /// Is this a `..` pattern?
         .               pub fn is_rest(&self) -> bool {
         .                   matches!(self.kind, PatKind::Rest)
         .               }
         .           }
         .           
         .           /// A single field in a struct pattern.
-- line 672 ----------------------------------------
-- line 675 ----------------------------------------
         .           /// are treated the same as `x: x, y: ref y, z: ref mut z`,
         .           /// except when `is_shorthand` is true.
         .           #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct PatField {
         .               /// The identifier for the field.
         .               pub ident: Ident,
         .               /// The pattern the field is destructured to.
         .               pub pat: P<Pat>,
       408 ( 0.00%)      pub is_shorthand: bool,
         .               pub attrs: AttrVec,
       204 ( 0.00%)      pub id: NodeId,
         .               pub span: Span,
         .               pub is_placeholder: bool,
         .           }
         .           
     1,836 ( 0.00%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, Copy)]
         .           pub enum BindingMode {
         .               ByRef(Mutability),
         .               ByValue(Mutability),
         .           }
         .           
         .           #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub enum RangeEnd {
         .               /// `..=` or `...`
-- line 698 ----------------------------------------
-- line 705 ----------------------------------------
         .           pub enum RangeSyntax {
         .               /// `...`
         .               DotDotDot,
         .               /// `..=`
         .               DotDotEq,
         .           }
         .           
         .           /// All the different flavors of pattern that Rust recognizes.
    43,354 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub enum PatKind {
         .               /// Represents a wildcard pattern (`_`).
         .               Wild,
         .           
         .               /// A `PatKind::Ident` may either be a new bound variable (`ref mut binding @ OPT_SUBPATTERN`),
         .               /// or a unit struct/variant pattern, or a const pattern (in the last two cases the third
         .               /// field must be `None`). Disambiguation cannot be done with parser alone, so it happens
         .               /// during name resolution.
     1,358 ( 0.00%)      Ident(BindingMode, Ident, Option<P<Pat>>),
         .           
         .               /// A struct or struct variant pattern (e.g., `Variant {x, y, ..}`).
         .               /// The `bool` is `true` in the presence of a `..`.
       306 ( 0.00%)      Struct(Option<QSelf>, Path, Vec<PatField>, /* recovered */ bool),
         .           
         .               /// A tuple struct/variant pattern (`Variant(x, y, .., z)`).
       632 ( 0.00%)      TupleStruct(Option<QSelf>, Path, Vec<P<Pat>>),
         .           
         .               /// An or-pattern `A | B | C`.
         .               /// Invariant: `pats.len() >= 2`.
         .               Or(Vec<P<Pat>>),
         .           
         .               /// A possibly qualified path pattern.
         .               /// Unqualified path patterns `A::B::C` can legally refer to variants, structs, constants
         .               /// or associated constants. Qualified path patterns `<A>::B::C`/`<A as Trait>::B::C` can
         .               /// only legally refer to associated constants.
         .               Path(Option<QSelf>, Path),
         .           
         .               /// A tuple pattern (`(a, b)`).
       588 ( 0.00%)      Tuple(Vec<P<Pat>>),
         .           
         .               /// A `box` pattern.
         .               Box(P<Pat>),
         .           
         .               /// A reference pattern (e.g., `&mut (a, b)`).
         .               Ref(P<Pat>, Mutability),
         .           
         .               /// A literal.
-- line 750 ----------------------------------------
-- line 772 ----------------------------------------
         .           
         .               /// Parentheses in patterns used for grouping (i.e., `(PAT)`).
         .               Paren(P<Pat>),
         .           
         .               /// A macro pattern; pre-expansion.
         .               MacCall(MacCall),
         .           }
         .           
 1,049,779 ( 0.01%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Copy)]
    37,685 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
         .           pub enum Mutability {
         .               Mut,
         .               Not,
         .           }
         .           
         .           impl Mutability {
         .               pub fn invert(self) -> Self {
         .                   match self {
         .                       Mutability::Mut => Mutability::Not,
         .                       Mutability::Not => Mutability::Mut,
         .                   }
         .               }
         .           
         .               pub fn prefix_str(&self) -> &'static str {
     3,717 ( 0.00%)          match self {
         .                       Mutability::Mut => "mut ",
         .                       Mutability::Not => "",
         .                   }
     1,239 ( 0.00%)      }
         .           }
         .           
         .           /// The kind of borrow in an `AddrOf` expression,
         .           /// e.g., `&place` or `&raw const place`.
       668 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, Debug)]
         .           #[derive(Encodable, Decodable, HashStable_Generic)]
         .           pub enum BorrowKind {
         .               /// A normal borrow, `&$expr` or `&mut $expr`.
         .               /// The resulting type is either `&'a T` or `&'a mut T`
         .               /// where `T = typeof($expr)` and `'a` is some lifetime.
         .               Ref,
         .               /// A raw borrow, `&raw const $expr` or `&raw mut $expr`.
         .               /// The resulting type is either `*const T` or `*mut T`
-- line 813 ----------------------------------------
-- line 853 ----------------------------------------
         .               Ge,
         .               /// The `>` operator (greater than)
         .               Gt,
         .           }
         .           
         .           impl BinOpKind {
         .               pub fn to_string(&self) -> &'static str {
         .                   use BinOpKind::*;
       154 ( 0.00%)          match *self {
         .                       Add => "+",
         .                       Sub => "-",
         .                       Mul => "*",
         .                       Div => "/",
         .                       Rem => "%",
         .                       And => "&&",
         .                       Or => "||",
         .                       BitXor => "^",
-- line 869 ----------------------------------------
-- line 873 ----------------------------------------
         .                       Shr => ">>",
         .                       Eq => "==",
         .                       Lt => "<",
         .                       Le => "<=",
         .                       Ne => "!=",
         .                       Ge => ">=",
         .                       Gt => ">",
         .                   }
        22 ( 0.00%)      }
         .               pub fn lazy(&self) -> bool {
         .                   matches!(self, BinOpKind::And | BinOpKind::Or)
         .               }
         .           
         .               pub fn is_comparison(&self) -> bool {
         .                   use BinOpKind::*;
         .                   // Note for developers: please keep this as is;
         .                   // we want compilation to fail if another variant is added.
        16 ( 0.00%)          match *self {
         .                       Eq | Lt | Le | Ne | Gt | Ge => true,
         .                       And | Or | Add | Sub | Mul | Div | Rem | BitXor | BitAnd | BitOr | Shl | Shr => false,
         .                   }
         8 ( 0.00%)      }
         .           }
         .           
         .           pub type BinOp = Spanned<BinOpKind>;
         .           
         .           /// Unary operator.
         .           ///
         .           /// Note that `&data` is not an operator, it's an `AddrOf` expression.
         .           #[derive(Clone, Encodable, Decodable, Debug, Copy)]
-- line 902 ----------------------------------------
-- line 906 ----------------------------------------
         .               /// The `!` operator for logical inversion
         .               Not,
         .               /// The `-` operator for negation
         .               Neg,
         .           }
         .           
         .           impl UnOp {
         .               pub fn to_string(op: UnOp) -> &'static str {
         2 ( 0.00%)          match op {
         .                       UnOp::Deref => "*",
         .                       UnOp::Not => "!",
         .                       UnOp::Neg => "-",
         .                   }
         2 ( 0.00%)      }
         .           }
         .           
         .           /// A statement
         .           #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct Stmt {
       613 ( 0.00%)      pub id: NodeId,
         .               pub kind: StmtKind,
         .               pub span: Span,
         .           }
         .           
         .           impl Stmt {
         .               pub fn tokens(&self) -> Option<&LazyTokenStream> {
         .                   match self.kind {
         .                       StmtKind::Local(ref local) => local.tokens.as_ref(),
-- line 933 ----------------------------------------
-- line 934 ----------------------------------------
         .                       StmtKind::Item(ref item) => item.tokens.as_ref(),
         .                       StmtKind::Expr(ref expr) | StmtKind::Semi(ref expr) => expr.tokens.as_ref(),
         .                       StmtKind::Empty => None,
         .                       StmtKind::MacCall(ref mac) => mac.tokens.as_ref(),
         .                   }
         .               }
         .           
         .               pub fn has_trailing_semicolon(&self) -> bool {
     2,930 ( 0.00%)          match &self.kind {
         .                       StmtKind::Semi(_) => true,
         .                       StmtKind::MacCall(mac) => matches!(mac.style, MacStmtStyle::Semicolon),
         .                       _ => false,
         .                   }
       586 ( 0.00%)      }
         .           
         .               /// Converts a parsed `Stmt` to a `Stmt` with
         .               /// a trailing semicolon.
         .               ///
         .               /// This only modifies the parsed AST struct, not the attached
         .               /// `LazyTokenStream`. The parser is responsible for calling
         .               /// `CreateTokenStream::add_trailing_semi` when there is actually
         .               /// a semicolon in the tokenstream.
     2,314 ( 0.00%)      pub fn add_trailing_semicolon(mut self) -> Self {
    13,488 ( 0.00%)          self.kind = match self.kind {
     2,877 ( 0.00%)              StmtKind::Expr(expr) => StmtKind::Semi(expr),
     1,355 ( 0.00%)              StmtKind::MacCall(mac) => {
         .                           StmtKind::MacCall(mac.map(|MacCallStmt { mac, style: _, attrs, tokens }| {
         .                               MacCallStmt { mac, style: MacStmtStyle::Semicolon, attrs, tokens }
         .                           }))
         .                       }
         .                       kind => kind,
         .                   };
         .           
    13,884 ( 0.00%)          self
     2,314 ( 0.00%)      }
         .           
         .               pub fn is_item(&self) -> bool {
         .                   matches!(self.kind, StmtKind::Item(_))
         .               }
         .           
         .               pub fn is_expr(&self) -> bool {
     6,962 ( 0.00%)          matches!(self.kind, StmtKind::Expr(_))
     3,481 ( 0.00%)      }
         .           }
         .           
     3,065 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub enum StmtKind {
         .               /// A local (let) binding.
       360 ( 0.00%)      Local(P<Local>),
         .               /// An item definition.
         .               Item(P<Item>),
         .               /// Expr without trailing semi-colon.
       736 ( 0.00%)      Expr(P<Expr>),
         .               /// Expr with a trailing semi-colon.
       130 ( 0.00%)      Semi(P<Expr>),
         .               /// Just a trailing semi-colon.
         .               Empty,
         .               /// Macro.
         .               MacCall(P<MacCallStmt>),
         .           }
         .           
         .           #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct MacCallStmt {
         .               pub mac: MacCall,
         .               pub style: MacStmtStyle,
         .               pub attrs: AttrVec,
         .               pub tokens: Option<LazyTokenStream>,
         .           }
         .           
     1,760 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug)]
         .           pub enum MacStmtStyle {
         .               /// The macro statement had a trailing semicolon (e.g., `foo! { ... };`
         .               /// `foo!(...);`, `foo![...];`).
         .               Semicolon,
         .               /// The macro statement had braces (e.g., `foo! { ... }`).
         .               Braces,
         .               /// The macro statement had parentheses or brackets and no semicolon (e.g.,
         .               /// `foo!(...)`). All of these will end up being converted into macro
         .               /// expressions.
         .               NoBraces,
         .           }
         .           
         .           /// Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`.
       720 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct Local {
       180 ( 0.00%)      pub id: NodeId,
         .               pub pat: P<Pat>,
         .               pub ty: Option<P<Ty>>,
         .               pub kind: LocalKind,
         .               pub span: Span,
         .               pub attrs: AttrVec,
         .               pub tokens: Option<LazyTokenStream>,
         .           }
         .           
     1,179 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub enum LocalKind {
         .               /// Local declaration.
         .               /// Example: `let x;`
         .               Decl,
         .               /// Local declaration with an initializer.
         .               /// Example: `let x = y;`
       153 ( 0.00%)      Init(P<Expr>),
         .               /// Local declaration with an initializer and an `else` clause.
         .               /// Example: `let Some(x) = y else { return };`
       153 ( 0.00%)      InitElse(P<Expr>, P<Block>),
         .           }
         .           
         .           impl LocalKind {
         .               pub fn init(&self) -> Option<&Expr> {
     2,271 ( 0.00%)          match self {
         .                       Self::Decl => None,
         .                       Self::Init(i) | Self::InitElse(i, _) => Some(i),
         .                   }
       757 ( 0.00%)      }
         .           
         .               pub fn init_else_opt(&self) -> Option<(&Expr, Option<&Block>)> {
    22,553 ( 0.00%)          match self {
         .                       Self::Decl => None,
         .                       Self::Init(init) => Some((init, None)),
         .                       Self::InitElse(init, els) => Some((init, Some(els))),
         .                   }
     4,657 ( 0.00%)      }
         .           }
         .           
         .           /// An arm of a 'match'.
         .           ///
         .           /// E.g., `0..=10 => { println!("match!") }` as in
         .           ///
         .           /// ```
         .           /// match 123 {
         .           ///     0..=10 => { println!("match!") },
         .           ///     _ => { println!("no match!") },
         .           /// }
         .           /// ```
         .           #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct Arm {
       269 ( 0.00%)      pub attrs: AttrVec,
         .               /// Match arm pattern, e.g. `10` in `match foo { 10 => {}, _ => {} }`
         .               pub pat: P<Pat>,
         .               /// Match arm guard, e.g. `n > 10` in `match foo { n if n > 10 => {}, _ => {} }`
       269 ( 0.00%)      pub guard: Option<P<Expr>>,
         .               /// Match arm body.
       269 ( 0.00%)      pub body: P<Expr>,
         .               pub span: Span,
       269 ( 0.00%)      pub id: NodeId,
         .               pub is_placeholder: bool,
         .           }
         .           
         .           /// A single field in a struct expression, e.g. `x: value` and `y` in `Foo { x: value, y }`.
         .           #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct ExprField {
        58 ( 0.00%)      pub attrs: AttrVec,
        58 ( 0.00%)      pub id: NodeId,
         .               pub span: Span,
         .               pub ident: Ident,
        58 ( 0.00%)      pub expr: P<Expr>,
         .               pub is_shorthand: bool,
         .               pub is_placeholder: bool,
         .           }
         .           
       144 ( 0.00%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, Copy)]
         .           pub enum BlockCheckMode {
         .               Default,
         .               Unsafe(UnsafeSource),
         .           }
         .           
         .           #[derive(Clone, PartialEq, Encodable, Decodable, Debug, Copy)]
         .           pub enum UnsafeSource {
         .               CompilerGenerated,
-- line 1102 ----------------------------------------
-- line 1105 ----------------------------------------
         .           
         .           /// A constant (expression) that's not an item or associated item,
         .           /// but needs its own `DefId` for type-checking, const-eval, etc.
         .           /// These are usually found nested inside types (e.g., array lengths)
         .           /// or expressions (e.g., repeat counts), and also used to define
         .           /// explicit discriminant values for enum variants.
         .           #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct AnonConst {
        10 ( 0.00%)      pub id: NodeId,
        10 ( 0.00%)      pub value: P<Expr>,
         .           }
         .           
         .           /// An expression.
 3,723,123 ( 0.03%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct Expr {
   744,486 ( 0.01%)      pub id: NodeId,
   744,453 ( 0.01%)      pub kind: ExprKind,
         .               pub span: Span,
         .               pub attrs: AttrVec,
         .               pub tokens: Option<LazyTokenStream>,
         .           }
         .           
         .           // `Expr` is used a lot. Make sure it doesn't unintentionally get bigger.
         .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
         .           rustc_data_structures::static_assert_size!(Expr, 104);
         .           
         .           impl Expr {
         .               /// Returns `true` if this expression would be valid somewhere that expects a value;
         .               /// for example, an `if` condition.
       299 ( 0.00%)      pub fn returns(&self) -> bool {
       598 ( 0.00%)          if let ExprKind::Block(ref block, _) = self.kind {
         .                       match block.stmts.last().map(|last_stmt| &last_stmt.kind) {
         .                           // Implicit return
         .                           Some(StmtKind::Expr(_)) => true,
         .                           // Last statement is an explicit return?
         .                           Some(StmtKind::Semi(expr)) => matches!(expr.kind, ExprKind::Ret(_)),
         .                           // This is a block that doesn't end in either an implicit or explicit return.
         .                           _ => false,
         .                       }
         .                   } else {
         .                       // This is not a block, it is a value.
         .                       true
         .                   }
       299 ( 0.00%)      }
         .           
         .               /// Is this expr either `N`, or `{ N }`.
         .               ///
         .               /// If this is not the case, name resolution does not resolve `N` when using
         .               /// `min_const_generics` as more complex expressions are not supported.
         .               pub fn is_potential_trivial_const_param(&self) -> bool {
        33 ( 0.00%)          let this = if let ExprKind::Block(ref block, None) = self.kind {
         .                       if block.stmts.len() == 1 {
         .                           if let StmtKind::Expr(ref expr) = block.stmts[0].kind { expr } else { self }
         .                       } else {
         .                           self
         .                       }
         .                   } else {
         .                       self
         .                   };
         .           
        28 ( 0.00%)          if let ExprKind::Path(None, ref path) = this.kind {
         6 ( 0.00%)              if path.segments.len() == 1 && path.segments[0].args.is_none() {
         .                           return true;
         .                       }
         .                   }
         .           
         .                   false
        11 ( 0.00%)      }
         .           
         .               pub fn to_bound(&self) -> Option<GenericBound> {
         .                   match &self.kind {
         .                       ExprKind::Path(None, path) => Some(GenericBound::Trait(
         .                           PolyTraitRef::new(Vec::new(), path.clone(), self.span),
         .                           TraitBoundModifier::None,
         .                       )),
         .                       _ => None,
         .                   }
         .               }
         .           
       375 ( 0.00%)      pub fn peel_parens(&self) -> &Expr {
         .                   let mut expr = self;
       750 ( 0.00%)          while let ExprKind::Paren(inner) = &expr.kind {
         .                       expr = &inner;
         .                   }
         .                   expr
       375 ( 0.00%)      }
         .           
         .               /// Attempts to reparse as `Ty` (for diagnostic purposes).
         .               pub fn to_ty(&self) -> Option<P<Ty>> {
         .                   let kind = match &self.kind {
         .                       // Trivial conversions.
         .                       ExprKind::Path(qself, path) => TyKind::Path(qself.clone(), path.clone()),
         .                       ExprKind::MacCall(mac) => TyKind::MacCall(mac.clone()),
         .           
-- line 1198 ----------------------------------------
-- line 1229 ----------------------------------------
         .                       // This expression doesn't look like a type syntactically.
         .                       _ => return None,
         .                   };
         .           
         .                   Some(P(Ty { kind, id: self.id, span: self.span, tokens: None }))
         .               }
         .           
         .               pub fn precedence(&self) -> ExprPrecedence {
       528 ( 0.00%)          match self.kind {
         .                       ExprKind::Box(_) => ExprPrecedence::Box,
         .                       ExprKind::Array(_) => ExprPrecedence::Array,
         .                       ExprKind::ConstBlock(_) => ExprPrecedence::ConstBlock,
         .                       ExprKind::Call(..) => ExprPrecedence::Call,
         .                       ExprKind::MethodCall(..) => ExprPrecedence::MethodCall,
         .                       ExprKind::Tup(_) => ExprPrecedence::Tup,
         .                       ExprKind::Binary(op, ..) => ExprPrecedence::Binary(op.node),
         .                       ExprKind::Unary(..) => ExprPrecedence::Unary,
-- line 1245 ----------------------------------------
-- line 1271 ----------------------------------------
         .                       ExprKind::MacCall(..) => ExprPrecedence::Mac,
         .                       ExprKind::Struct(..) => ExprPrecedence::Struct,
         .                       ExprKind::Repeat(..) => ExprPrecedence::Repeat,
         .                       ExprKind::Paren(..) => ExprPrecedence::Paren,
         .                       ExprKind::Try(..) => ExprPrecedence::Try,
         .                       ExprKind::Yield(..) => ExprPrecedence::Yield,
         .                       ExprKind::Err => ExprPrecedence::Err,
         .                   }
        88 ( 0.00%)      }
         .           
        14 ( 0.00%)      pub fn take(&mut self) -> Self {
         .                   mem::replace(
         .                       self,
         .                       Expr {
         .                           id: DUMMY_NODE_ID,
         .                           kind: ExprKind::Err,
         .                           span: DUMMY_SP,
         .                           attrs: ThinVec::new(),
         .                           tokens: None,
         .                       },
         .                   )
        14 ( 0.00%)      }
         .           }
         .           
         .           /// Limit types of a range (inclusive or exclusive)
         .           #[derive(Copy, Clone, PartialEq, Encodable, Decodable, Debug)]
         .           pub enum RangeLimits {
         .               /// Inclusive at the beginning, exclusive at the end
         .               HalfOpen,
         .               /// Inclusive at the beginning and end
         .               Closed,
         .           }
         .           
       160 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub enum StructRest {
         .               /// `..x`.
         .               Base(P<Expr>),
         .               /// `..`.
         .               Rest(Span),
         .               /// No trailing `..` or expression.
         .               None,
         .           }
         .           
       371 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct StructExpr {
         .               pub qself: Option<QSelf>,
         .               pub path: Path,
        60 ( 0.00%)      pub fields: Vec<ExprField>,
         .               pub rest: StructRest,
         .           }
         .           
11,292,476 ( 0.10%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub enum ExprKind {
         .               /// A `box x` expression.
         .               Box(P<Expr>),
         .               /// An array (`[a, b, c, d]`)
         .               Array(Vec<P<Expr>>),
         .               /// Allow anonymous constants from an inline `const` block
         .               ConstBlock(AnonConst),
         .               /// A function call
         .               ///
         .               /// The first field resolves to the function itself,
         .               /// and the second field is the list of arguments.
         .               /// This also represents calling the constructor of
         .               /// tuple-like ADTs such as tuple structs and enum variants.
     3,328 ( 0.00%)      Call(P<Expr>, Vec<P<Expr>>),
         .               /// A method call (`x.foo::<'static, Bar, Baz>(a, b, c, d)`)
         .               ///
         .               /// The `PathSegment` represents the method name and its generic arguments
         .               /// (within the angle brackets).
         .               /// The first element of the vector of an `Expr` is the expression that evaluates
         .               /// to the object on which the method is being called on (the receiver),
         .               /// and the remaining elements are the rest of the arguments.
         .               /// Thus, `x.foo::<Bar, Baz>(a, b, c, d)` is represented as
         .               /// `ExprKind::MethodCall(PathSegment { foo, [Bar, Baz] }, [x, a, b, c, d])`.
         .               /// This `Span` is the span of the function, without the dot and receiver
         .               /// (e.g. `foo(a, b)` in `x.foo(a, b)`
       126 ( 0.00%)      MethodCall(PathSegment, Vec<P<Expr>>, Span),
         .               /// A tuple (e.g., `(a, b, c, d)`).
       120 ( 0.00%)      Tup(Vec<P<Expr>>),
         .               /// A binary operation (e.g., `a + b`, `a * b`).
 1,092,028 ( 0.01%)      Binary(BinOp, P<Expr>, P<Expr>),
         .               /// A unary operation (e.g., `!x`, `*x`).
     2,960 ( 0.00%)      Unary(UnOp, P<Expr>),
         .               /// A literal (e.g., `1`, `"foo"`).
         .               Lit(Lit),
         .               /// A cast (e.g., `foo as f64`).
     2,845 ( 0.00%)      Cast(P<Expr>, P<Ty>),
         .               /// A type ascription (e.g., `42: usize`).
         .               Type(P<Expr>, P<Ty>),
         .               /// A `let pat = expr` expression that is only semantically allowed in the condition
         .               /// of `if` / `while` expressions. (e.g., `if let 0 = x { .. }`).
         .               ///
         .               /// `Span` represents the whole `let pat = expr` statement.
        14 ( 0.00%)      Let(P<Pat>, P<Expr>, Span),
         .               /// An `if` block, with an optional `else` block.
         .               ///
         .               /// `if expr { block } else { expr }`
       165 ( 0.00%)      If(P<Expr>, P<Block>, Option<P<Expr>>),
         .               /// A while loop, with an optional label.
         .               ///
         .               /// `'label: while expr { block }`
         .               While(P<Expr>, P<Block>, Option<Label>),
         .               /// A `for` loop, with an optional label.
         .               ///
         .               /// `'label: for pat in expr { block }`
         .               ///
         .               /// This is desugared to a combination of `loop` and `match` expressions.
         .               ForLoop(P<Pat>, P<Expr>, P<Block>, Option<Label>),
         .               /// Conditionless loop (can be exited with `break`, `continue`, or `return`).
         .               ///
         .               /// `'label: loop { block }`
         .               Loop(P<Block>, Option<Label>),
         .               /// A `match` block.
     1,088 ( 0.00%)      Match(P<Expr>, Vec<Arm>),
         .               /// A closure (e.g., `move |a, b, c| a + b + c`).
         .               ///
         .               /// The final span is the span of the argument block `|...|`.
         .               Closure(CaptureBy, Async, Movability, P<FnDecl>, P<Expr>, Span),
         .               /// A block (`'label: { ... }`).
         .               Block(P<Block>, Option<Label>),
         .               /// An async block (`async move { ... }`).
         .               ///
-- line 1393 ----------------------------------------
-- line 1401 ----------------------------------------
         .               /// An await expression (`my_future.await`).
         .               Await(P<Expr>),
         .           
         .               /// A try block (`try { ... }`).
         .               TryBlock(P<Block>),
         .           
         .               /// An assignment (`a = foo()`).
         .               /// The `Span` argument is the span of the `=` token.
       147 ( 0.00%)      Assign(P<Expr>, P<Expr>, Span),
         .               /// An assignment with an operator.
         .               ///
         .               /// E.g., `a += 1`.
        42 ( 0.00%)      AssignOp(BinOp, P<Expr>, P<Expr>),
         .               /// Access of a named (e.g., `obj.foo`) or unnamed (e.g., `obj.0`) struct field.
       126 ( 0.00%)      Field(P<Expr>, Ident),
         .               /// An indexing operation (e.g., `foo[2]`).
   117,621 ( 0.00%)      Index(P<Expr>, P<Expr>),
         .               /// A range (e.g., `1..2`, `1..`, `..2`, `1..=2`, `..=2`; and `..` in destructuring assignment).
         .               Range(Option<P<Expr>>, Option<P<Expr>>, RangeLimits),
         .               /// An underscore, used in destructuring assignment to ignore a value.
         .               Underscore,
         .           
         .               /// Variable reference, possibly containing `::` and/or type
         .               /// parameters (e.g., `foo::bar::<baz>`).
         .               ///
         .               /// Optionally "qualified" (e.g., `<Vec<T> as SomeTrait>::SomeType`).
        10 ( 0.00%)      Path(Option<QSelf>, Path),
         .           
         .               /// A referencing operation (`&a`, `&mut a`, `&raw const a` or `&raw mut a`).
       668 ( 0.00%)      AddrOf(BorrowKind, Mutability, P<Expr>),
         .               /// A `break`, with an optional label to break, and an optional expression.
         .               Break(Option<Label>, Option<P<Expr>>),
         .               /// A `continue`, with an optional label.
         .               Continue(Option<Label>),
         .               /// A `return`, with an optional value to be returned.
         .               Ret(Option<P<Expr>>),
         .           
         .               /// Output of the `asm!()` macro.
-- line 1438 ----------------------------------------
-- line 1448 ----------------------------------------
         .           
         .               /// An array literal constructed from one repeated element.
         .               ///
         .               /// E.g., `[1; 5]`. The expression is the element to be
         .               /// repeated; the constant is the number of times to repeat it.
         .               Repeat(P<Expr>, AnonConst),
         .           
         .               /// No-op: used solely so we can pretty-print faithfully.
     1,278 ( 0.00%)      Paren(P<Expr>),
         .           
         .               /// A try expression (`expr?`).
         .               Try(P<Expr>),
         .           
         .               /// A `yield`, with an optional value to be yielded.
         .               Yield(Option<P<Expr>>),
         .           
         .               /// Placeholder for an expression that wasn't syntactically well formed in some way.
-- line 1464 ----------------------------------------
-- line 1515 ----------------------------------------
         .           #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct MacCall {
         .               pub path: Path,
         .               pub args: P<MacArgs>,
         .               pub prior_type_ascription: Option<(Span, bool)>,
         .           }
         .           
         .           impl MacCall {
     1,897 ( 0.00%)      pub fn span(&self) -> Span {
     7,588 ( 0.00%)          self.path.span.to(self.args.span().unwrap_or(self.path.span))
         .               }
         .           }
         .           
         .           /// Arguments passed to an attribute or a function-like macro.
   103,699 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]
       759 ( 0.00%)  pub enum MacArgs {
         .               /// No arguments - `#[attr]`.
         .               Empty,
         .               /// Delimited arguments - `#[attr()/[]/{}]` or `mac!()/[]/{}`.
     1,027 ( 0.00%)      Delimited(DelimSpan, MacDelimiter, TokenStream),
         .               /// Arguments of a key-value attribute - `#[attr = "value"]`.
         .               Eq(
         .                   /// Span of the `=` token.
         .                   Span,
         .                   /// "value" as a nonterminal token.
     1,562 ( 0.00%)          Token,
         .               ),
         .           }
         .           
         .           impl MacArgs {
         .               pub fn delim(&self) -> DelimToken {
     3,136 ( 0.00%)          match self {
         .                       MacArgs::Delimited(_, delim, _) => delim.to_token(),
         .                       MacArgs::Empty | MacArgs::Eq(..) => token::NoDelim,
         .                   }
       784 ( 0.00%)      }
         .           
         .               pub fn span(&self) -> Option<Span> {
    11,382 ( 0.00%)          match self {
         .                       MacArgs::Empty => None,
     7,588 ( 0.00%)              MacArgs::Delimited(dspan, ..) => Some(dspan.entire()),
         .                       MacArgs::Eq(eq_span, token) => Some(eq_span.to(token.span)),
         .                   }
         .               }
         .           
         .               /// Tokens inside the delimiters or after `=`.
         .               /// Proc macros see these tokens, for example.
    16,100 ( 0.00%)      pub fn inner_tokens(&self) -> TokenStream {
    11,500 ( 0.00%)          match self {
         .                       MacArgs::Empty => TokenStream::default(),
     2,300 ( 0.00%)              MacArgs::Delimited(.., tokens) => tokens.clone(),
         .                       MacArgs::Eq(.., token) => TokenTree::Token(token.clone()).into(),
         .                   }
    18,400 ( 0.00%)      }
         .           
         .               /// Whether a macro with these arguments needs a semicolon
         .               /// when used as a standalone item or statement.
         .               pub fn need_semicolon(&self) -> bool {
        90 ( 0.00%)          !matches!(self, MacArgs::Delimited(_, MacDelimiter::Brace, _))
        15 ( 0.00%)      }
         .           }
         .           
     2,406 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub enum MacDelimiter {
         .               Parenthesis,
         .               Bracket,
         .               Brace,
         .           }
         .           
         .           impl MacDelimiter {
         .               pub fn to_token(self) -> DelimToken {
         .                   match self {
         .                       MacDelimiter::Parenthesis => DelimToken::Paren,
         .                       MacDelimiter::Bracket => DelimToken::Bracket,
         .                       MacDelimiter::Brace => DelimToken::Brace,
         .                   }
         .               }
         .           
     2,211 ( 0.00%)      pub fn from_token(delim: DelimToken) -> Option<MacDelimiter> {
         .                   match delim {
         .                       token::Paren => Some(MacDelimiter::Parenthesis),
         .                       token::Bracket => Some(MacDelimiter::Bracket),
         .                       token::Brace => Some(MacDelimiter::Brace),
         .                       token::NoDelim => None,
         .                   }
     2,211 ( 0.00%)      }
         .           }
         .           
         .           /// Represents a macro definition.
       388 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub struct MacroDef {
         8 ( 0.00%)      pub body: P<MacArgs>,
         .               /// `true` if macro was defined with `macro_rules`.
         8 ( 0.00%)      pub macro_rules: bool,
         .           }
         .           
     5,271 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, Copy, Hash, Eq, PartialEq)]
     1,876 ( 0.00%)  #[derive(HashStable_Generic)]
         .           pub enum StrStyle {
         .               /// A regular string, like `"foo"`.
         .               Cooked,
         .               /// A raw string, like `r##"foo"##`.
         .               ///
         .               /// The value is the number of `#` symbols used.
         .               Raw(u16),
         .           }
         .           
         .           /// An AST literal.
 1,735,200 ( 0.02%)  #[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub struct Lit {
         .               /// The original literal token as written in source code.
         .               pub token: token::Lit,
         .               /// The "semantic" representation of the literal lowered from the original tokens.
         .               /// Strings are unescaped, hexadecimal forms are eliminated, etc.
         .               /// FIXME: Remove this and only create the semantic representation during lowering to HIR.
         .               pub kind: LitKind,
         .               pub span: Span,
-- line 1631 ----------------------------------------
-- line 1654 ----------------------------------------
         .                       token: token::Lit::new(token_kind, self.symbol, self.suffix),
         .                       span: self.span,
         .                       kind: LitKind::Str(self.symbol_unescaped, self.style),
         .                   }
         .               }
         .           }
         .           
         .           /// Type of the integer literal based on provided suffix.
   107,946 ( 0.00%)  #[derive(Clone, Copy, Encodable, Decodable, Debug, Hash, Eq, PartialEq)]
    80,850 ( 0.00%)  #[derive(HashStable_Generic)]
         .           pub enum LitIntType {
         .               /// e.g. `42_i32`.
         .               Signed(IntTy),
         .               /// e.g. `42_u32`.
         .               Unsigned(UintTy),
         .               /// e.g. `42`.
         .               Unsuffixed,
         .           }
         .           
         .           /// Type of the float literal based on provided suffix.
        57 ( 0.00%)  #[derive(Clone, Copy, Encodable, Decodable, Debug, Hash, Eq, PartialEq)]
         5 ( 0.00%)  #[derive(HashStable_Generic)]
         .           pub enum LitFloatType {
         .               /// A float literal with a suffix (`1f32` or `1E10f32`).
         .               Suffixed(FloatTy),
         .               /// A float literal without a suffix (`1.0 or 1.0E10`).
         .               Unsuffixed,
         .           }
         .           
         .           /// Literal kind.
         .           ///
         .           /// E.g., `"foo"`, `42`, `12.34`, or `bool`.
 1,129,467 ( 0.01%)  #[derive(Clone, Encodable, Decodable, Debug, Hash, Eq, PartialEq, HashStable_Generic)]
         .           pub enum LitKind {
         .               /// A string literal (`"foo"`).
    16,150 ( 0.00%)      Str(Symbol, StrStyle),
         .               /// A byte string (`b"foo"`).
       108 ( 0.00%)      ByteStr(Lrc<[u8]>),
         .               /// A byte char (`b'f'`).
    58,520 ( 0.00%)      Byte(u8),
         .               /// A character literal (`'a'`).
         3 ( 0.00%)      Char(char),
         .               /// An integer literal (`1`).
   977,858 ( 0.01%)      Int(u128, LitIntType),
         .               /// A float literal (`1f64` or `1E10f64`).
        20 ( 0.00%)      Float(Symbol, LitFloatType),
         .               /// A boolean literal.
       677 ( 0.00%)      Bool(bool),
         .               /// Placeholder for a literal that wasn't well-formed in some way.
         .               Err(Symbol),
         .           }
         .           
         .           impl LitKind {
         .               /// Returns `true` if this literal is a string.
         .               pub fn is_str(&self) -> bool {
     1,574 ( 0.00%)          matches!(self, LitKind::Str(..))
       787 ( 0.00%)      }
         .           
         .               /// Returns `true` if this literal is byte literal string.
         .               pub fn is_bytestr(&self) -> bool {
         .                   matches!(self, LitKind::ByteStr(_))
         .               }
         .           
         .               /// Returns `true` if this is a numeric literal.
         .               pub fn is_numeric(&self) -> bool {
         .                   matches!(self, LitKind::Int(..) | LitKind::Float(..))
         .               }
         .           
         .               /// Returns `true` if this literal has no suffix.
         .               /// Note: this will return true for literals with prefixes such as raw strings and byte strings.
         .               pub fn is_unsuffixed(&self) -> bool {
         .                   !self.is_suffixed()
       791 ( 0.00%)      }
         .           
         .               /// Returns `true` if this literal has a suffix.
         .               pub fn is_suffixed(&self) -> bool {
     3,955 ( 0.00%)          match *self {
         .                       // suffixed variants
         .                       LitKind::Int(_, LitIntType::Signed(..) | LitIntType::Unsigned(..))
         .                       | LitKind::Float(_, LitFloatType::Suffixed(..)) => true,
         .                       // unsuffixed variants
         .                       LitKind::Str(..)
         .                       | LitKind::ByteStr(..)
         .                       | LitKind::Byte(..)
         .                       | LitKind::Char(..)
-- line 1738 ----------------------------------------
-- line 1749 ----------------------------------------
         .           #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct MutTy {
         .               pub ty: P<Ty>,
         .               pub mutbl: Mutability,
         .           }
         .           
         .           /// Represents a function's signature in a trait declaration,
         .           /// trait implementation, or free function.
     1,350 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct FnSig {
         .               pub header: FnHeader,
       270 ( 0.00%)      pub decl: P<FnDecl>,
         .               pub span: Span,
         .           }
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
         .           #[derive(Encodable, Decodable, HashStable_Generic)]
         .           pub enum FloatTy {
         .               F32,
         .               F64,
-- line 1768 ----------------------------------------
-- line 1780 ----------------------------------------
         .                   match self {
         .                       FloatTy::F32 => sym::f32,
         .                       FloatTy::F64 => sym::f64,
         .                   }
         .               }
         .           }
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
        24 ( 0.00%)  #[derive(Encodable, Decodable, HashStable_Generic)]
         .           pub enum IntTy {
         .               Isize,
         .               I8,
         .               I16,
         .               I32,
         .               I64,
         .               I128,
         .           }
-- line 1796 ----------------------------------------
-- line 1815 ----------------------------------------
         .                       IntTy::I32 => sym::i32,
         .                       IntTy::I64 => sym::i64,
         .                       IntTy::I128 => sym::i128,
         .                   }
         .               }
         .           }
         .           
         .           #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Copy, Debug)]
        12 ( 0.00%)  #[derive(Encodable, Decodable, HashStable_Generic)]
         .           pub enum UintTy {
         .               Usize,
         .               U8,
         .               U16,
         .               U32,
         .               U64,
         .               U128,
         .           }
-- line 1831 ----------------------------------------
-- line 1868 ----------------------------------------
         .           /// The kinds of an `AssocConstraint`.
         .           #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub enum Term {
         .               Ty(P<Ty>),
         .               Const(AnonConst),
         .           }
         .           
         .           impl From<P<Ty>> for Term {
         3 ( 0.00%)      fn from(v: P<Ty>) -> Self {
         6 ( 0.00%)          Term::Ty(v)
         3 ( 0.00%)      }
         .           }
         .           
         .           impl From<AnonConst> for Term {
         .               fn from(v: AnonConst) -> Self {
         .                   Term::Const(v)
         .               }
         .           }
         .           
-- line 1886 ----------------------------------------
-- line 1897 ----------------------------------------
         .           pub struct Ty {
         .               pub id: NodeId,
         .               pub kind: TyKind,
         .               pub span: Span,
         .               pub tokens: Option<LazyTokenStream>,
         .           }
         .           
         .           impl Clone for Ty {
     3,270 ( 0.00%)      fn clone(&self) -> Self {
    52,451 ( 0.00%)          ensure_sufficient_stack(|| Self {
     2,332 ( 0.00%)              id: self.id,
         .                       kind: self.kind.clone(),
     2,332 ( 0.00%)              span: self.span,
         .                       tokens: self.tokens.clone(),
         .                   })
     4,905 ( 0.00%)      }
         .           }
         .           
         .           impl Ty {
         .               pub fn peel_refs(&self) -> &Self {
         .                   let mut final_ty = self;
         .                   while let TyKind::Rptr(_, MutTy { ty, .. }) = &final_ty.kind {
         .                       final_ty = &ty;
         .                   }
-- line 1920 ----------------------------------------
-- line 1926 ----------------------------------------
         .           pub struct BareFnTy {
         .               pub unsafety: Unsafe,
         .               pub ext: Extern,
         .               pub generic_params: Vec<GenericParam>,
         .               pub decl: P<FnDecl>,
         .           }
         .           
         .           /// The various kinds of type recognized by the compiler.
    29,873 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub enum TyKind {
         .               /// A variable-length slice (`[T]`).
         .               Slice(P<Ty>),
         .               /// A fixed length array (`[T; n]`).
        10 ( 0.00%)      Array(P<Ty>, AnonConst),
         .               /// A raw pointer (`*const T` or `*mut T`).
         .               Ptr(MutTy),
         .               /// A reference (`&'a T` or `&'a mut T`).
         .               Rptr(Option<Lifetime>, MutTy),
         .               /// A bare function (e.g., `fn(usize) -> bool`).
         .               BareFn(P<BareFnTy>),
         .               /// The never type (`!`).
         .               Never,
         .               /// A tuple (`(A, B, C, D,...)`).
       120 ( 0.00%)      Tup(Vec<P<Ty>>),
         .               /// A path (`module::module::...::Type`), optionally
         .               /// "qualified", e.g., `<Vec<T> as SomeTrait>::SomeType`.
         .               ///
         .               /// Type parameters are stored in the `Path` itself.
     1,801 ( 0.00%)      Path(Option<QSelf>, Path),
         .               /// A trait object type `Bound1 + Bound2 + Bound3`
         .               /// where `Bound` is a trait or a lifetime.
         .               TraitObject(GenericBounds, TraitObjectSyntax),
         .               /// An `impl Bound1 + Bound2 + Bound3` type
         .               /// where `Bound` is a trait or a lifetime.
         .               ///
         .               /// The `NodeId` exists to prevent lowering from having to
         .               /// generate `NodeId`s on the fly, which would complicate
-- line 1962 ----------------------------------------
-- line 1976 ----------------------------------------
         .               /// Placeholder for a kind that has failed to be defined.
         .               Err,
         .               /// Placeholder for a `va_list`.
         .               CVarArgs,
         .           }
         .           
         .           impl TyKind {
         .               pub fn is_implicit_self(&self) -> bool {
     1,912 ( 0.00%)          matches!(self, TyKind::ImplicitSelf)
       956 ( 0.00%)      }
         .           
         .               pub fn is_unit(&self) -> bool {
         .                   matches!(self, TyKind::Tup(tys) if tys.is_empty())
         .               }
         .           }
         .           
         .           /// Syntax used to declare a trait object.
         .           #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
-- line 1993 ----------------------------------------
-- line 2107 ----------------------------------------
         .               pub line_spans: Vec<Span>,
         .           }
         .           
         .           /// A parameter in a function header.
         .           ///
         .           /// E.g., `bar: usize` as in `fn foo(bar: usize)`.
         .           #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct Param {
       219 ( 0.00%)      pub attrs: AttrVec,
         .               pub ty: P<Ty>,
         .               pub pat: P<Pat>,
       219 ( 0.00%)      pub id: NodeId,
         .               pub span: Span,
         .               pub is_placeholder: bool,
         .           }
         .           
         .           /// Alternative representation for `Arg`s describing `self` parameter of methods.
         .           ///
         .           /// E.g., `&mut self` as in `fn foo(&mut self)`.
         .           #[derive(Clone, Encodable, Decodable, Debug)]
-- line 2126 ----------------------------------------
-- line 2152 ----------------------------------------
         .                           };
         .                       }
         .                   }
         .                   None
         .               }
         .           
         .               /// Returns `true` if parameter is `self`.
         .               pub fn is_self(&self) -> bool {
     3,775 ( 0.00%)          if let PatKind::Ident(_, ident, _) = self.pat.kind {
         .                       ident.name == kw::SelfLower
         .                   } else {
         .                       false
         .                   }
       105 ( 0.00%)      }
         .           
         .               /// Builds a `Param` object from `ExplicitSelf`.
     6,156 ( 0.00%)      pub fn from_self(attrs: AttrVec, eself: ExplicitSelf, eself_ident: Ident) -> Param {
     2,565 ( 0.00%)          let span = eself.span.to(eself_ident.span);
         .                   let infer_ty = P(Ty { id: DUMMY_NODE_ID, kind: TyKind::ImplicitSelf, span, tokens: None });
     1,478 ( 0.00%)          let param = |mutbl, ty| Param {
         .                       attrs,
         .                       pat: P(Pat {
         .                           id: DUMMY_NODE_ID,
         .                           kind: PatKind::Ident(BindingMode::ByValue(mutbl), eself_ident, None),
         .                           span,
         .                           tokens: None,
         .                       }),
         .                       span,
         .                       ty,
         .                       id: DUMMY_NODE_ID,
         .                       is_placeholder: false,
         .                   };
     2,956 ( 0.00%)          match eself.node {
         .                       SelfKind::Explicit(ty, mutbl) => param(mutbl, ty),
        61 ( 0.00%)              SelfKind::Value(mutbl) => param(mutbl, infer_ty),
       904 ( 0.00%)              SelfKind::Region(lt, mutbl) => param(
         .                           Mutability::Not,
     1,808 ( 0.00%)                  P(Ty {
         .                               id: DUMMY_NODE_ID,
       904 ( 0.00%)                      kind: TyKind::Rptr(lt, MutTy { ty: infer_ty, mutbl }),
         .                               span,
         .                               tokens: None,
         .                           }),
         .                       ),
         .                   }
     4,617 ( 0.00%)      }
         .           }
         .           
         .           /// A signature (not the body) of a function declaration.
         .           ///
         .           /// E.g., `fn foo(bar: baz)`.
         .           ///
         .           /// Please note that it's different from `FnHeader` structure
         .           /// which contains metadata about function safety, asyncness, constness and ABI.
       540 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct FnDecl {
       270 ( 0.00%)      pub inputs: Vec<Param>,
         .               pub output: FnRetTy,
         .           }
         .           
         .           impl FnDecl {
         .               pub fn has_self(&self) -> bool {
         .                   self.inputs.get(0).map_or(false, Param::is_self)
       683 ( 0.00%)      }
         .               pub fn c_variadic(&self) -> bool {
     3,008 ( 0.00%)          self.inputs.last().map_or(false, |arg| matches!(arg.ty.kind, TyKind::CVarArgs))
     1,578 ( 0.00%)      }
         .           }
         .           
         .           /// Is the trait definition an auto trait?
        15 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub enum IsAuto {
         .               Yes,
         .               No,
         .           }
         .           
       528 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, Encodable, Decodable, Debug)]
         .           #[derive(HashStable_Generic)]
         .           pub enum Unsafe {
         .               Yes(Span),
         .               No,
         .           }
         .           
         .           #[derive(Copy, Clone, Encodable, Decodable, Debug)]
         .           pub enum Async {
-- line 2236 ----------------------------------------
-- line 2239 ----------------------------------------
         .           }
         .           
         .           impl Async {
         .               pub fn is_async(self) -> bool {
         .                   matches!(self, Async::Yes { .. })
         .               }
         .           
         .               /// In this case this is an `async` return, the `NodeId` for the generated `impl Trait` item.
     1,384 ( 0.00%)      pub fn opt_return_id(self) -> Option<NodeId> {
         .                   match self {
         .                       Async::Yes { return_impl_trait_id, .. } => Some(return_impl_trait_id),
         .                       Async::No => None,
         .                   }
       692 ( 0.00%)      }
         .           }
         .           
       264 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, Encodable, Decodable, Debug)]
         .           #[derive(HashStable_Generic)]
         .           pub enum Const {
         .               Yes(Span),
         .               No,
         .           }
         .           
         .           /// Item defaultness.
         .           /// For details see the [RFC #2532](https://github.com/rust-lang/rfcs/pull/2532).
       933 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub enum Defaultness {
         .               Default(Span),
         .               Final,
         .           }
         .           
     2,292 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
         .           pub enum ImplPolarity {
         .               /// `impl Trait for Type`
         .               Positive,
         .               /// `impl !Trait for Type`
         .               Negative(Span),
         .           }
         .           
         .           impl fmt::Debug for ImplPolarity {
-- line 2278 ----------------------------------------
-- line 2279 ----------------------------------------
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   match *self {
         .                       ImplPolarity::Positive => "positive".fmt(f),
         .                       ImplPolarity::Negative(_) => "negative".fmt(f),
         .                   }
         .               }
         .           }
         .           
       675 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub enum FnRetTy {
         .               /// Returns type is not specified.
         .               ///
         .               /// Functions default to `()` and closures default to inference.
         .               /// Span points to where return type would be inserted.
         .               Default(Span),
         .               /// Everything else.
         .               Ty(P<Ty>),
-- line 2295 ----------------------------------------
-- line 2331 ----------------------------------------
         .               /// semantically by Rust.
         .               pub unsafety: Unsafe,
         .               pub abi: Option<StrLit>,
         .               pub items: Vec<P<ForeignItem>>,
         .           }
         .           
         .           #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct EnumDef {
        42 ( 0.00%)      pub variants: Vec<Variant>,
         .           }
         .           /// Enum variant.
     5,760 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct Variant {
         .               /// Attributes of the variant.
     1,278 ( 0.00%)      pub attrs: AttrVec,
         .               /// Id of the variant (not the constructor, see `VariantData::ctor_id()`).
     1,280 ( 0.00%)      pub id: NodeId,
         .               /// Span
         .               pub span: Span,
         .               /// The visibility of the variant. Syntactically accepted but not semantically.
         .               pub vis: Visibility,
         .               /// Name of the variant.
         .               pub ident: Ident,
         .           
         .               /// Fields and constructor id of the variant.
-- line 2355 ----------------------------------------
-- line 2379 ----------------------------------------
         .           #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct UseTree {
         .               pub prefix: Path,
         .               pub kind: UseTreeKind,
         .               pub span: Span,
         .           }
         .           
         .           impl UseTree {
       752 ( 0.00%)      pub fn ident(&self) -> Ident {
     3,008 ( 0.00%)          match self.kind {
         .                       UseTreeKind::Simple(Some(rename), ..) => rename,
         .                       UseTreeKind::Simple(None, ..) => {
     1,504 ( 0.00%)                  self.prefix.segments.last().expect("empty prefix in a simple import").ident
         .                       }
         .                       _ => panic!("`UseTree::ident` can only be used on a simple import"),
         .                   }
     1,504 ( 0.00%)      }
         .           }
         .           
         .           /// Distinguishes between `Attribute`s that decorate items and Attributes that
         .           /// are contained as statements within items. These two cases need to be
         .           /// distinguished for pretty-printing.
    67,090 ( 0.00%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, Copy, HashStable_Generic)]
         .           pub enum AttrStyle {
         .               Outer,
         .               Inner,
         .           }
         .           
         .           rustc_index::newtype_index! {
         .               pub struct AttrId {
         .                   ENCODABLE = custom
-- line 2409 ----------------------------------------
-- line 2415 ----------------------------------------
         .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
         .                   s.emit_unit()
         .               }
         .           }
         .           
         .           impl<D: Decoder> rustc_serialize::Decodable<D> for AttrId {
         .               fn decode(d: &mut D) -> AttrId {
         .                   d.read_unit();
    16,567 ( 0.00%)          crate::attr::mk_attr_id()
         .               }
         .           }
         .           
    72,461 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub struct AttrItem {
         .               pub path: Path,
         .               pub args: MacArgs,
         .               pub tokens: Option<LazyTokenStream>,
         .           }
         .           
         .           /// A list of attributes.
         .           pub type AttrVec = ThinVec<Attribute>;
         .           
         .           /// Metadata associated with an item.
   640,327 ( 0.01%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct Attribute {
         .               pub kind: AttrKind,
     1,502 ( 0.00%)      pub id: AttrId,
         .               /// Denotes if the attribute decorates the following construct (outer)
         .               /// or the construct this attribute is contained within (inner).
         .               pub style: AttrStyle,
         .               pub span: Span,
         .           }
         .           
   230,860 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub enum AttrKind {
         .               /// A normal attribute.
         .               Normal(AttrItem, Option<LazyTokenStream>),
         .           
         .               /// A doc comment (e.g. `/// ...`, `//! ...`, `/** ... */`, `/*! ... */`).
         .               /// Doc attributes (e.g. `#[doc="..."]`) are represented with the `Normal`
         .               /// variant (which is much less compact and thus more expensive).
     1,398 ( 0.00%)      DocComment(CommentKind, Symbol),
         .           }
         .           
         .           /// `TraitRef`s appear in impls.
         .           ///
         .           /// Resolution maps each `TraitRef`'s `ref_id` to its defining trait; that's all
         .           /// that the `ref_id` is for. The `impl_id` maps to the "self type" of this impl.
         .           /// If this impl is an `ItemKind::Impl`, the `impl_id` is redundant (it could be the
         .           /// same as the impl's `NodeId`).
         .           #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct TraitRef {
         .               pub path: Path,
       767 ( 0.00%)      pub ref_id: NodeId,
         .           }
         .           
       400 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct PolyTraitRef {
         .               /// The `'a` in `<'a> Foo<&'a T>`.
       120 ( 0.00%)      pub bound_generic_params: Vec<GenericParam>,
         .           
         .               /// The `Foo<&'a T>` in `<'a> Foo<&'a T>`.
         .               pub trait_ref: TraitRef,
         .           
         .               pub span: Span,
         .           }
         .           
         .           impl PolyTraitRef {
       158 ( 0.00%)      pub fn new(generic_params: Vec<GenericParam>, path: Path, span: Span) -> Self {
       316 ( 0.00%)          PolyTraitRef {
       632 ( 0.00%)              bound_generic_params: generic_params,
       948 ( 0.00%)              trait_ref: TraitRef { path, ref_id: DUMMY_NODE_ID },
         .                       span,
         .                   }
       158 ( 0.00%)      }
         .           }
         .           
        35 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub enum CrateSugar {
         .               /// Source is `pub(crate)`.
         .               PubCrate,
         .           
         .               /// Source is (just) `crate`.
         .               JustCrate,
         .           }
         .           
     6,204 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct Visibility {
         .               pub kind: VisibilityKind,
         .               pub span: Span,
         .               pub tokens: Option<LazyTokenStream>,
         .           }
         .           
     9,307 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub enum VisibilityKind {
         .               Public,
         .               Crate(CrateSugar),
        27 ( 0.00%)      Restricted { path: P<Path>, id: NodeId },
         .               Inherited,
         .           }
         .           
         .           impl VisibilityKind {
         .               pub fn is_pub(&self) -> bool {
     3,390 ( 0.00%)          matches!(self, VisibilityKind::Public)
     1,695 ( 0.00%)      }
         .           }
         .           
         .           /// Field definition in a struct, variant or union.
         .           ///
         .           /// E.g., `bar: usize` as in `struct Foo { bar: usize }`.
     1,344 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct FieldDef {
       192 ( 0.00%)      pub attrs: AttrVec,
       192 ( 0.00%)      pub id: NodeId,
         .               pub span: Span,
         .               pub vis: Visibility,
         .               pub ident: Option<Ident>,
         .           
         .               pub ty: P<Ty>,
         .               pub is_placeholder: bool,
         .           }
         .           
         .           /// Fields and constructor ids of enum variants and structs.
     7,488 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub enum VariantData {
         .               /// Struct variant.
         .               ///
         .               /// E.g., `Bar { .. }` as in `enum Foo { Bar { .. } }`.
       102 ( 0.00%)      Struct(Vec<FieldDef>, bool),
         .               /// Tuple variant.
         .               ///
         .               /// E.g., `Bar(..)` as in `enum Foo { Bar(..) }`.
       317 ( 0.00%)      Tuple(Vec<FieldDef>, NodeId),
         .               /// Unit variant.
         .               ///
         .               /// E.g., `Bar = ..` as in `enum Foo { Bar = .. }`.
       600 ( 0.00%)      Unit(NodeId),
         .           }
         .           
         .           impl VariantData {
         .               /// Return the fields of this variant.
     4,400 ( 0.00%)      pub fn fields(&self) -> &[FieldDef] {
    17,600 ( 0.00%)          match *self {
         .                       VariantData::Struct(ref fields, ..) | VariantData::Tuple(ref fields, _) => fields,
         .                       _ => &[],
         .                   }
     4,400 ( 0.00%)      }
         .           
         .               /// Return the `NodeId` of this variant's constructor, if it has one.
         .               pub fn ctor_id(&self) -> Option<NodeId> {
     3,060 ( 0.00%)          match *self {
         .                       VariantData::Struct(..) => None,
         .                       VariantData::Tuple(_, id) | VariantData::Unit(id) => Some(id),
         .                   }
     1,020 ( 0.00%)      }
         .           }
         .           
         .           /// An item definition.
     9,612 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct Item<K = ItemKind> {
       798 ( 0.00%)      pub attrs: Vec<Attribute>,
       531 ( 0.00%)      pub id: NodeId,
         .               pub span: Span,
         .               pub vis: Visibility,
         .               /// The name of the item.
         .               /// It might be a dummy name in case of anonymous items.
         .               pub ident: Ident,
         .           
         .               pub kind: K,
         .           
-- line 2584 ----------------------------------------
-- line 2589 ----------------------------------------
         .               ///
         .               /// Note that the tokens here do not include the outer attributes, but will
         .               /// include inner attributes.
         .               pub tokens: Option<LazyTokenStream>,
         .           }
         .           
         .           impl Item {
         .               /// Return the span that encompasses the attributes.
     5,870 ( 0.00%)      pub fn span_with_attributes(&self) -> Span {
     6,643 ( 0.00%)          self.attrs.iter().fold(self.span, |acc, attr| acc.to(attr.span))
     7,044 ( 0.00%)      }
         .           }
         .           
         .           impl<K: Into<ItemKind>> Item<K> {
         .               pub fn into_item(self) -> Item {
         .                   let Item { attrs, id, span, vis, ident, kind, tokens } = self;
         .                   Item { attrs, id, span, vis, ident, kind: kind.into(), tokens }
         .               }
         .           }
-- line 2607 ----------------------------------------
-- line 2639 ----------------------------------------
         .                   matches!(unsafety, Unsafe::Yes(_))
         .                       || asyncness.is_async()
         .                       || matches!(constness, Const::Yes(_))
         .                       || !matches!(ext, Extern::None)
         .               }
         .           }
         .           
         .           impl Default for FnHeader {
       135 ( 0.00%)      fn default() -> FnHeader {
       540 ( 0.00%)          FnHeader {
         .                       unsafety: Unsafe::No,
         .                       asyncness: Async::No,
         .                       constness: Const::No,
         .                       ext: Extern::None,
         .                   }
       135 ( 0.00%)      }
         .           }
         .           
         .           #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct Trait {
         .               pub unsafety: Unsafe,
         .               pub is_auto: IsAuto,
         .               pub generics: Generics,
         .               pub bounds: GenericBounds,
-- line 2662 ----------------------------------------
-- line 2666 ----------------------------------------
         .           #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct TyAlias {
         .               pub defaultness: Defaultness,
         .               pub generics: Generics,
         .               pub bounds: GenericBounds,
         .               pub ty: Option<P<Ty>>,
         .           }
         .           
     2,772 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct Impl {
         .               pub defaultness: Defaultness,
         .               pub unsafety: Unsafe,
         .               pub generics: Generics,
         .               pub constness: Const,
         .               pub polarity: ImplPolarity,
         .               /// The trait being implemented, if any.
         .               pub of_trait: Option<TraitRef>,
         .               pub self_ty: P<Ty>,
       264 ( 0.00%)      pub items: Vec<P<AssocItem>>,
         .           }
         .           
     2,835 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub struct Fn {
         .               pub defaultness: Defaultness,
         .               pub generics: Generics,
         .               pub sig: FnSig,
         .               pub body: Option<P<Block>>,
         .           }
         .           
     3,618 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub enum ItemKind {
         .               /// An `extern crate` item, with the optional *original* crate name if the crate was renamed.
         .               ///
         .               /// E.g., `extern crate foo` or `extern crate foo_bar as foo`.
         .               ExternCrate(Option<Symbol>),
         .               /// A use declaration item (`use`).
         .               ///
         .               /// E.g., `use foo;`, `use foo::bar;` or `use foo::bar as FooBar;`.
-- line 2703 ----------------------------------------
-- line 2728 ----------------------------------------
         .               GlobalAsm(Box<InlineAsm>),
         .               /// A type alias (`type`).
         .               ///
         .               /// E.g., `type Foo = Bar<u8>;`.
         .               TyAlias(Box<TyAlias>),
         .               /// An enum definition (`enum`).
         .               ///
         .               /// E.g., `enum Foo<A, B> { C<A>, D<B> }`.
       168 ( 0.00%)      Enum(EnumDef, Generics),
         .               /// A struct definition (`struct`).
         .               ///
         .               /// E.g., `struct Foo<A> { x: A }`.
         .               Struct(VariantData, Generics),
         .               /// A union definition (`union`).
         .               ///
         .               /// E.g., `union Foo<A, B> { x: A, y: B }`.
         .               Union(VariantData, Generics),
-- line 2744 ----------------------------------------
-- line 2748 ----------------------------------------
         .               Trait(Box<Trait>),
         .               /// Trait alias
         .               ///
         .               /// E.g., `trait Foo = Bar + Quux;`.
         .               TraitAlias(Generics, GenericBounds),
         .               /// An implementation.
         .               ///
         .               /// E.g., `impl<A> Foo<A> { .. }` or `impl<A> Trait for Foo<A> { .. }`.
       132 ( 0.00%)      Impl(Box<Impl>),
         .               /// A macro invocation.
         .               ///
         .               /// E.g., `foo!(..)`.
         .               MacCall(MacCall),
         .           
         .               /// A macro definition.
         .               MacroDef(MacroDef),
         .           }
-- line 2764 ----------------------------------------
-- line 2819 ----------------------------------------
         .           
         .           /// Represents associated item kinds.
         .           ///
         .           /// The term "provided" in the variants below refers to the item having a default
         .           /// definition / body. Meanwhile, a "required" item lacks a definition / body.
         .           /// In an implementation, all items must be provided.
         .           /// The `Option`s below denote the bodies, where `Some(_)`
         .           /// means "provided" and conversely `None` means "required".
     1,080 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub enum AssocItemKind {
         .               /// An associated constant, `const $ident: $ty $def?;` where `def ::= "=" $expr? ;`.
         .               /// If `def` is parsed, then the constant is provided, and otherwise required.
         .               Const(Defaultness, P<Ty>, Option<P<Expr>>),
         .               /// An associated function.
       405 ( 0.00%)      Fn(Box<Fn>),
         .               /// An associated type.
         .               TyAlias(Box<TyAlias>),
         .               /// A macro expanding to associated items.
         .               MacCall(MacCall),
         .           }
         .           
         .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
         .           rustc_data_structures::static_assert_size!(AssocItemKind, 72);
         .           
         .           impl AssocItemKind {
         .               pub fn defaultness(&self) -> Defaultness {
    16,794 ( 0.00%)          match *self {
       924 ( 0.00%)              Self::Const(defaultness, ..)
     9,112 ( 0.00%)              | Self::Fn(box Fn { defaultness, .. })
       639 ( 0.00%)              | Self::TyAlias(box TyAlias { defaultness, .. }) => defaultness,
         .                       Self::MacCall(..) => Defaultness::Final,
         .                   }
    16,794 ( 0.00%)      }
         .           }
         .           
         .           impl From<AssocItemKind> for ItemKind {
         .               fn from(assoc_item_kind: AssocItemKind) -> ItemKind {
         .                   match assoc_item_kind {
         .                       AssocItemKind::Const(a, b, c) => ItemKind::Const(a, b, c),
         .                       AssocItemKind::Fn(fn_kind) => ItemKind::Fn(fn_kind),
         .                       AssocItemKind::TyAlias(ty_alias_kind) => ItemKind::TyAlias(ty_alias_kind),
-- line 2859 ----------------------------------------
-- line 2860 ----------------------------------------
         .                       AssocItemKind::MacCall(a) => ItemKind::MacCall(a),
         .                   }
         .               }
         .           }
         .           
         .           impl TryFrom<ItemKind> for AssocItemKind {
         .               type Error = ItemKind;
         .           
     1,380 ( 0.00%)      fn try_from(item_kind: ItemKind) -> Result<AssocItemKind, ItemKind> {
    10,350 ( 0.00%)          Ok(match item_kind {
       385 ( 0.00%)              ItemKind::Const(a, b, c) => AssocItemKind::Const(a, b, c),
     1,626 ( 0.00%)              ItemKind::Fn(fn_kind) => AssocItemKind::Fn(fn_kind),
       213 ( 0.00%)              ItemKind::TyAlias(ty_alias_kind) => AssocItemKind::TyAlias(ty_alias_kind),
         .                       ItemKind::MacCall(a) => AssocItemKind::MacCall(a),
         .                       _ => return Err(item_kind),
         .                   })
     1,380 ( 0.00%)      }
         .           }
         .           
         .           /// An item in `extern` block.
         .           #[derive(Clone, Encodable, Decodable, Debug)]
         .           pub enum ForeignItemKind {
         .               /// A foreign static item (`static FOO: u8`).
         .               Static(P<Ty>, Mutability, Option<P<Expr>>),
         .               /// An foreign function.
-- line 2884 ----------------------------------------

   568,905 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/ast.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 157 ----------------------------------------
         .               pub fn opt_fn_def_id(self) -> Option<DefId> {
         .                   if let Res::Def(DefKind::Fn, def_id) = self.res { Some(def_id) } else { None }
         .               }
         .           }
         .           
         .           /// The "header" of an impl is everything outside the body: a Self type, a trait
         .           /// ref (in the case of a trait impl), and a set of predicates (from the
         .           /// bounds / where-clauses).
     5,785 ( 0.00%)  #[derive(Clone, Debug, TypeFoldable)]
         .           pub struct ImplHeader<'tcx> {
         .               pub impl_def_id: DefId,
         .               pub self_ty: Ty<'tcx>,
         .               pub trait_ref: Option<TraitRef<'tcx>>,
         .               pub predicates: Vec<Predicate<'tcx>>,
         .           }
         .           
         .           #[derive(
         .               Copy,
         .               Clone,
   360,180 ( 0.00%)      PartialEq,
         .               Eq,
         .               Hash,
         .               TyEncodable,
    20,128 ( 0.00%)      TyDecodable,
         .               HashStable,
         .               Debug,
         .               TypeFoldable
         .           )]
         .           pub enum ImplPolarity {
         .               /// `impl Trait for Type`
         .               Positive,
         .               /// `impl !Trait for Type`
-- line 188 ----------------------------------------
-- line 210 ----------------------------------------
         .                   match self {
         .                       Self::Positive => f.write_str("positive"),
         .                       Self::Negative => f.write_str("negative"),
         .                       Self::Reservation => f.write_str("reservation"),
         .                   }
         .               }
         .           }
         .           
   212,772 ( 0.00%)  #[derive(Clone, Debug, PartialEq, Eq, Copy, Hash, TyEncodable, TyDecodable, HashStable)]
         .           pub enum Visibility {
         .               /// Visible everywhere (including in other crates).
         .               Public,
         .               /// Visible only in the given crate-local module.
         .               Restricted(DefId),
         .               /// Not visible anywhere in the local crate. This is the visibility of private external items.
         .               Invisible,
         .           }
         .           
   483,647 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable, TyEncodable, TyDecodable)]
         .           pub enum BoundConstness {
         .               /// `T: Trait`
         .               NotConst,
         .               /// `T: ~const Trait`
         .               ///
         .               /// Requires resolving to const only when we are in a const context.
         .               ConstIfConst,
         .           }
         .           
         .           impl BoundConstness {
         .               /// Reduce `self` and `constness` to two possible combined states instead of four.
   153,024 ( 0.00%)      pub fn and(&mut self, constness: hir::Constness) -> hir::Constness {
   229,536 ( 0.00%)          match (constness, self) {
         .                       (hir::Constness::Const, BoundConstness::ConstIfConst) => hir::Constness::Const,
         .                       (_, this) => {
   213,299 ( 0.00%)                  *this = BoundConstness::NotConst;
         .                           hir::Constness::NotConst
         .                       }
         .                   }
    76,512 ( 0.00%)      }
         .           }
         .           
         .           impl fmt::Display for BoundConstness {
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   match self {
         .                       Self::NotConst => f.write_str("normal"),
         .                       Self::ConstIfConst => f.write_str("`~const`"),
         .                   }
-- line 256 ----------------------------------------
-- line 274 ----------------------------------------
         .               pub before_feature_tys: Ty<'tcx>,
         .               /// Tuple containing the types of closure captures after the feature `capture_disjoint_fields`
         .               pub after_feature_tys: Ty<'tcx>,
         .           }
         .           
         .           pub trait DefIdTree: Copy {
         .               fn parent(self, id: DefId) -> Option<DefId>;
         .           
       140 ( 0.00%)      fn is_descendant_of(self, mut descendant: DefId, ancestor: DefId) -> bool {
       103 ( 0.00%)          if descendant.krate != ancestor.krate {
         .                       return false;
         .                   }
         .           
    38,325 ( 0.00%)          while descendant != ancestor {
    45,536 ( 0.00%)              match self.parent(descendant) {
         .                           Some(parent) => descendant = parent,
         .                           None => return false,
         .                       }
         .                   }
         .                   true
       160 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> DefIdTree for TyCtxt<'tcx> {
    39,912 ( 0.00%)      fn parent(self, id: DefId) -> Option<DefId> {
         .                   self.def_key(id).parent.map(|index| DefId { index, ..id })
    59,868 ( 0.00%)      }
         .           }
         .           
         .           impl Visibility {
       414 ( 0.00%)      pub fn from_hir(visibility: &hir::Visibility<'_>, id: hir::HirId, tcx: TyCtxt<'_>) -> Self {
     1,242 ( 0.00%)          match visibility.node {
         .                       hir::VisibilityKind::Public => Visibility::Public,
         .                       hir::VisibilityKind::Crate(_) => Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)),
         .                       hir::VisibilityKind::Restricted { ref path, .. } => match path.res {
         .                           // If there is no resolution, `resolve` will have already reported an error, so
         .                           // assume that the visibility is public to avoid reporting more privacy errors.
         .                           Res::Err => Visibility::Public,
         .                           def => Visibility::Restricted(def.def_id()),
         .                       },
         .                       hir::VisibilityKind::Inherited => {
       408 ( 0.00%)                  Visibility::Restricted(tcx.parent_module(id).to_def_id())
         .                       }
         .                   }
       414 ( 0.00%)      }
         .           
         .               /// Returns `true` if an item with this visibility is accessible from the given block.
    92,529 ( 0.00%)      pub fn is_accessible_from<T: DefIdTree>(self, module: DefId, tree: T) -> bool {
   352,619 ( 0.00%)          let restriction = match self {
         .                       // Public items are visible everywhere.
         .                       Visibility::Public => return true,
         .                       // Private items from other crates are visible nowhere.
         .                       Visibility::Invisible => return false,
         .                       // Restricted items are visible in an arbitrary local module.
    13,732 ( 0.00%)              Visibility::Restricted(other) if other.krate != module.krate => return false,
         .                       Visibility::Restricted(module) => module,
         .                   };
         .           
        40 ( 0.00%)          tree.is_descendant_of(module, restriction)
    92,529 ( 0.00%)      }
         .           
         .               /// Returns `true` if this visibility is at least as accessible as the given visibility
     8,406 ( 0.00%)      pub fn is_at_least<T: DefIdTree>(self, vis: Visibility, tree: T) -> bool {
    36,066 ( 0.00%)          let vis_restriction = match vis {
         .                       Visibility::Public => return self == Visibility::Public,
         .                       Visibility::Invisible => return true,
         .                       Visibility::Restricted(module) => module,
         .                   };
         .           
         .                   self.is_accessible_from(vis_restriction, tree)
     8,406 ( 0.00%)      }
         .           
         .               // Returns `true` if this item is visible anywhere in the local crate.
         .               pub fn is_visible_locally(self) -> bool {
         .                   match self {
         .                       Visibility::Public => true,
         .                       Visibility::Restricted(def_id) => def_id.is_local(),
         .                       Visibility::Invisible => false,
         .                   }
         .               }
         .           
         .               pub fn is_public(self) -> bool {
     7,402 ( 0.00%)          matches!(self, Visibility::Public)
     3,701 ( 0.00%)      }
         .           }
         .           
         .           /// The crate variances map is computed during typeck and contains the
         .           /// variance of every item in the local crate. You should not use it
         .           /// directly, because to do so will make your pass dependent on the
         .           /// HIR of every item in the local crate. Instead, use
         .           /// `tcx.variances_of()` to get the variance for a *particular*
         .           /// item.
-- line 365 ----------------------------------------
-- line 434 ----------------------------------------
         .           }
         .           
         .           // `TyS` is used a lot. Make sure it doesn't unintentionally get bigger.
         .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
         .           static_assert_size!(TyS<'_>, 40);
         .           
         .           impl<'tcx> Ord for TyS<'tcx> {
         .               fn cmp(&self, other: &TyS<'tcx>) -> Ordering {
         6 ( 0.00%)          self.kind().cmp(other.kind())
         .               }
         .           }
         .           
         .           impl<'tcx> PartialOrd for TyS<'tcx> {
         .               fn partial_cmp(&self, other: &TyS<'tcx>) -> Option<Ordering> {
         .                   Some(self.kind().cmp(other.kind()))
         .               }
         .           }
-- line 450 ----------------------------------------
-- line 474 ----------------------------------------
         .           
         .                       // The other fields just provide fast access to information that is
         .                       // also contained in `kind`, so no need to hash them.
         .                       flags: _,
         .           
         .                       outer_exclusive_binder: _,
         .                   } = *self;
         .           
    27,219 ( 0.00%)          kind.hash_stable(hcx, hasher);
         .               }
         .           }
         .           
         .           #[rustc_diagnostic_item = "Ty"]
         .           #[cfg_attr(not(bootstrap), rustc_pass_by_value)]
         .           pub type Ty<'tcx> = &'tcx TyS<'tcx>;
         .           
         .           impl ty::EarlyBoundRegion {
-- line 490 ----------------------------------------
-- line 509 ----------------------------------------
         .           #[derive(Clone, Copy, Lift)]
         .           pub struct Predicate<'tcx> {
         .               inner: &'tcx PredicateInner<'tcx>,
         .           }
         .           
         .           impl<'tcx> PartialEq for Predicate<'tcx> {
         .               fn eq(&self, other: &Self) -> bool {
         .                   // `self.kind` is always interned.
   360,878 ( 0.00%)          ptr::eq(self.inner, other.inner)
   343,047 ( 0.00%)      }
         .           }
         .           
         .           impl Hash for Predicate<'_> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   (self.inner as *const PredicateInner<'_>).hash(s)
         .               }
         .           }
         .           
         .           impl<'tcx> Eq for Predicate<'tcx> {}
         .           
         .           impl<'tcx> Predicate<'tcx> {
         .               /// Gets the inner `Binder<'tcx, PredicateKind<'tcx>>`.
         .               #[inline]
         .               pub fn kind(self) -> Binder<'tcx, PredicateKind<'tcx>> {
 3,637,009 ( 0.03%)          self.inner.kind
         .               }
         .           
         .               /// Flips the polarity of a Predicate.
         .               ///
         .               /// Given `T: Trait` predicate it returns `T: !Trait` and given `T: !Trait` returns `T: Trait`.
         .               pub fn flip_polarity(&self, tcx: TyCtxt<'tcx>) -> Option<Predicate<'tcx>> {
         .                   let kind = self
         .                       .inner
-- line 541 ----------------------------------------
-- line 567 ----------------------------------------
         .                       flags: _,
         .                       outer_exclusive_binder: _,
         .                   } = self.inner;
         .           
         .                   kind.hash_stable(hcx, hasher);
         .               }
         .           }
         .           
14,919,680 ( 0.13%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
11,736,658 ( 0.10%)  #[derive(HashStable, TypeFoldable)]
         .           pub enum PredicateKind<'tcx> {
         .               /// Corresponds to `where Foo: Bar<A, B, C>`. `Foo` here would be
         .               /// the `Self` type of the trait reference and `A`, `B`, and `C`
         .               /// would be the type parameters.
         .               Trait(TraitPredicate<'tcx>),
         .           
         .               /// `where 'a: 'b`
         .               RegionOutlives(RegionOutlivesPredicate<'tcx>),
-- line 584 ----------------------------------------
-- line 594 ----------------------------------------
         .               WellFormed(GenericArg<'tcx>),
         .           
         .               /// Trait must be object-safe.
         .               ObjectSafe(DefId),
         .           
         .               /// No direct syntax. May be thought of as `where T: FnFoo<...>`
         .               /// for some substitutions `...` and `T` being a closure type.
         .               /// Satisfied (or refuted) once we know the closure's kind.
     2,423 ( 0.00%)      ClosureKind(DefId, SubstsRef<'tcx>, ClosureKind),
         .           
         .               /// `T1 <: T2`
         .               ///
         .               /// This obligation is created most often when we have two
         .               /// unresolved type variables and hence don't have enough
         .               /// information to process the subtyping obligation yet.
     1,259 ( 0.00%)      Subtype(SubtypePredicate<'tcx>),
         .           
         .               /// `T1` coerced to `T2`
         .               ///
         .               /// Like a subtyping obligation, this is created most often
         .               /// when we have two unresolved type variables and hence
         .               /// don't have enough information to process the coercion
         .               /// obligation yet. At the moment, we actually process coercions
         .               /// very much like subtyping and don't handle the full coercion
-- line 617 ----------------------------------------
-- line 645 ----------------------------------------
         .           }
         .           
         .           impl<'tcx> Predicate<'tcx> {
         .               /// Performs a substitution suitable for going from a
         .               /// poly-trait-ref to supertraits that must hold if that
         .               /// poly-trait-ref holds. This is slightly different from a normal
         .               /// substitution in terms of what happens with bound regions. See
         .               /// lengthy comment below for details.
    13,644 ( 0.00%)      pub fn subst_supertrait(
         .                   self,
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_ref: &ty::PolyTraitRef<'tcx>,
         .               ) -> Predicate<'tcx> {
         .                   // The interaction between HRTB and supertraits is not entirely
         .                   // obvious. Let me walk you (and myself) through an example.
         .                   //
         .                   // Let's start with an easy case. Consider two traits:
-- line 661 ----------------------------------------
-- line 731 ----------------------------------------
         .                   //    ['x, 'b]
         .                   let bound_pred = self.kind();
         .                   let pred_bound_vars = bound_pred.bound_vars();
         .                   let trait_bound_vars = trait_ref.bound_vars();
         .                   // 1) Self: Bar1<'a, '^0.0> -> Self: Bar1<'a, '^0.1>
         .                   let shifted_pred =
         .                       tcx.shift_bound_var_indices(trait_bound_vars.len(), bound_pred.skip_binder());
         .                   // 2) Self: Bar1<'a, '^0.1> -> T: Bar1<'^0.0, '^0.1>
     1,516 ( 0.00%)          let new = shifted_pred.subst(tcx, trait_ref.skip_binder().substs);
         .                   // 3) ['x] + ['b] -> ['x, 'b]
         .                   let bound_vars =
         .                       tcx.mk_bound_variable_kinds(trait_bound_vars.iter().chain(pred_bound_vars));
    13,644 ( 0.00%)          tcx.reuse_or_mk_predicate(self, ty::Binder::bind_with_vars(new, bound_vars))
    10,612 ( 0.00%)      }
         .           }
         .           
    13,353 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
   768,307 ( 0.01%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct TraitPredicate<'tcx> {
         .               pub trait_ref: TraitRef<'tcx>,
         .           
 1,353,033 ( 0.01%)      pub constness: BoundConstness,
         .           
 1,430,454 ( 0.01%)      pub polarity: ImplPolarity,
         .           }
         .           
         .           pub type PolyTraitPredicate<'tcx> = ty::Binder<'tcx, TraitPredicate<'tcx>>;
         .           
         .           impl<'tcx> TraitPredicate<'tcx> {
 1,115,080 ( 0.01%)      pub fn remap_constness(&mut self, tcx: TyCtxt<'tcx>, param_env: &mut ParamEnv<'tcx>) {
   978,639 ( 0.01%)          if unlikely!(Some(self.trait_ref.def_id) == tcx.lang_items().drop_trait()) {
         .                       // remap without changing constness of this predicate.
         .                       // this is because `T: ~const Drop` has a different meaning to `T: Drop`
     2,944 ( 0.00%)              param_env.remap_constness_with(self.constness)
         .                   } else {
   137,913 ( 0.00%)              *param_env = param_env.with_constness(self.constness.and(param_env.constness()))
         .                   }
   836,310 ( 0.01%)      }
         .           
         .               /// Remap the constness of this predicate before emitting it for diagnostics.
         .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
         .                   // this is different to `remap_constness` that callees want to print this predicate
         .                   // in case of selection errors. `T: ~const Drop` bounds cannot end up here when the
         .                   // param_env is not const because we it is always satisfied in non-const contexts.
         .                   if let hir::Constness::NotConst = param_env.constness() {
         .                       self.constness = ty::BoundConstness::NotConst;
         .                   }
         .               }
         .           
         .               pub fn def_id(self) -> DefId {
   188,418 ( 0.00%)          self.trait_ref.def_id
    94,209 ( 0.00%)      }
         .           
   131,805 ( 0.00%)      pub fn self_ty(self) -> Ty<'tcx> {
   395,415 ( 0.00%)          self.trait_ref.self_ty()
   263,610 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> PolyTraitPredicate<'tcx> {
         .               pub fn def_id(self) -> DefId {
         .                   // Ok to skip binder since trait `DefId` does not care about regions.
         .                   self.skip_binder().def_id()
    77,107 ( 0.00%)      }
         .           
       162 ( 0.00%)      pub fn self_ty(self) -> ty::Binder<'tcx, Ty<'tcx>> {
       648 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.self_ty())
       324 ( 0.00%)      }
         .           
         .               /// Remap the constness of this predicate before emitting it for diagnostics.
         .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
         .                   *self = self.map_bound(|mut p| {
         .                       p.remap_constness_diag(param_env);
         .                       p
         .                   });
         .               }
         .           }
         .           
       216 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
    66,725 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
    84,588 ( 0.00%)  pub struct OutlivesPredicate<A, B>(pub A, pub B); // `A: B`
         .           pub type RegionOutlivesPredicate<'tcx> = OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>;
         .           pub type TypeOutlivesPredicate<'tcx> = OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>;
         .           pub type PolyRegionOutlivesPredicate<'tcx> = ty::Binder<'tcx, RegionOutlivesPredicate<'tcx>>;
         .           pub type PolyTypeOutlivesPredicate<'tcx> = ty::Binder<'tcx, TypeOutlivesPredicate<'tcx>>;
         .           
         .           /// Encodes that `a` must be a subtype of `b`. The `a_is_expected` flag indicates
         .           /// whether the `a` type is the type that we should label as "expected" when
         .           /// presenting user diagnostics.
         .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
     3,348 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct SubtypePredicate<'tcx> {
     5,587 ( 0.00%)      pub a_is_expected: bool,
         .               pub a: Ty<'tcx>,
         .               pub b: Ty<'tcx>,
         .           }
         .           pub type PolySubtypePredicate<'tcx> = ty::Binder<'tcx, SubtypePredicate<'tcx>>;
         .           
         .           /// Encodes that we have to coerce *from* the `a` type to the `b` type.
         .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
       111 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct CoercePredicate<'tcx> {
         .               pub a: Ty<'tcx>,
         .               pub b: Ty<'tcx>,
         .           }
         .           pub type PolyCoercePredicate<'tcx> = ty::Binder<'tcx, CoercePredicate<'tcx>>;
         .           
   231,510 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, TyEncodable, TyDecodable)]
   398,164 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub enum Term<'tcx> {
         3 ( 0.00%)      Ty(Ty<'tcx>),
         .               Const(&'tcx Const<'tcx>),
         .           }
         .           
         .           impl<'tcx> From<Ty<'tcx>> for Term<'tcx> {
         .               fn from(ty: Ty<'tcx>) -> Self {
         .                   Term::Ty(ty)
    35,523 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> From<&'tcx Const<'tcx>> for Term<'tcx> {
         .               fn from(c: &'tcx Const<'tcx>) -> Self {
         .                   Term::Const(c)
         .               }
         .           }
         .           
         .           impl<'tcx> Term<'tcx> {
         .               pub fn ty(&self) -> Option<Ty<'tcx>> {
    31,136 ( 0.00%)          if let Term::Ty(ty) = self { Some(ty) } else { None }
    15,568 ( 0.00%)      }
         .           }
         .           
         .           /// This kind of predicate has no *direct* correspondent in the
         .           /// syntax, but it roughly corresponds to the syntactic forms:
         .           ///
         .           /// 1. `T: TraitRef<..., Item = Type>`
         .           /// 2. `<T as TraitRef<...>>::Item == Type` (NYI)
         .           ///
         .           /// In particular, form #1 is "desugared" to the combination of a
         .           /// normal trait predicate (`T: TraitRef<...>`) and one of these
         .           /// predicates. Form #2 is a broader form in that it also permits
         .           /// equality between arbitrary types. Processing an instance of
         .           /// Form #2 eventually yields one of these `ProjectionPredicate`
         .           /// instances to normalize the LHS.
        70 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
   106,913 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ProjectionPredicate<'tcx> {
         .               pub projection_ty: ProjectionTy<'tcx>,
    99,832 ( 0.00%)      pub term: Term<'tcx>,
         .           }
         .           
         .           pub type PolyProjectionPredicate<'tcx> = Binder<'tcx, ProjectionPredicate<'tcx>>;
         .           
         .           impl<'tcx> PolyProjectionPredicate<'tcx> {
         .               /// Returns the `DefId` of the trait of the associated item being projected.
         .               #[inline]
         .               pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
       348 ( 0.00%)          self.skip_binder().projection_ty.trait_def_id(tcx)
         .               }
         .           
         .               /// Get the [PolyTraitRef] required for this projection to be well formed.
         .               /// Note that for generic associated types the predicates of the associated
         .               /// type also need to be checked.
         .               #[inline]
         .               pub fn required_poly_trait_ref(&self, tcx: TyCtxt<'tcx>) -> PolyTraitRef<'tcx> {
         .                   // Note: unlike with `TraitRef::to_poly_trait_ref()`,
         .                   // `self.0.trait_ref` is permitted to have escaping regions.
         .                   // This is because here `self` has a `Binder` and so does our
         .                   // return value, so we are preserving the number of binding
         .                   // levels.
       178 ( 0.00%)          self.map_bound(|predicate| predicate.projection_ty.trait_ref(tcx))
         .               }
         .           
         .               pub fn term(&self) -> Binder<'tcx, Term<'tcx>> {
         .                   self.map_bound(|predicate| predicate.term)
         .               }
         .           
         .               /// The `DefId` of the `TraitItem` for the associated type.
         .               ///
         .               /// Note that this is not the `DefId` of the `TraitRef` containing this
         .               /// associated type, which is in `tcx.associated_item(projection_def_id()).container`.
         .               pub fn projection_def_id(&self) -> DefId {
         .                   // Ok to skip binder since trait `DefId` does not care about regions.
       386 ( 0.00%)          self.skip_binder().projection_ty.item_def_id
       193 ( 0.00%)      }
         .           }
         .           
         .           pub trait ToPolyTraitRef<'tcx> {
         .               fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx>;
         .           }
         .           
         .           impl<'tcx> ToPolyTraitRef<'tcx> for PolyTraitPredicate<'tcx> {
     7,967 ( 0.00%)      fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx> {
     7,967 ( 0.00%)          self.map_bound_ref(|trait_pred| trait_pred.trait_ref)
     7,967 ( 0.00%)      }
         .           }
         .           
         .           pub trait ToPredicate<'tcx> {
         .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx>;
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for Binder<'tcx, PredicateKind<'tcx>> {
         .               #[inline(always)]
         .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
         .                   tcx.mk_predicate(self)
         .               }
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for PolyTraitPredicate<'tcx> {
    42,673 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
   213,365 ( 0.00%)          self.map_bound(PredicateKind::Trait).to_predicate(tcx)
    85,346 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate<'tcx> {
       139 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
       278 ( 0.00%)          self.map_bound(PredicateKind::RegionOutlives).to_predicate(tcx)
       278 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for PolyTypeOutlivesPredicate<'tcx> {
       190 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
       380 ( 0.00%)          self.map_bound(PredicateKind::TypeOutlives).to_predicate(tcx)
       380 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {
    11,424 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
    57,120 ( 0.00%)          self.map_bound(PredicateKind::Projection).to_predicate(tcx)
    22,848 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Predicate<'tcx> {
    41,834 ( 0.00%)      pub fn to_opt_poly_trait_pred(self) -> Option<PolyTraitPredicate<'tcx>> {
         .                   let predicate = self.kind();
   125,502 ( 0.00%)          match predicate.skip_binder() {
    97,365 ( 0.00%)              PredicateKind::Trait(t) => Some(predicate.rebind(t)),
         .                       PredicateKind::Projection(..)
         .                       | PredicateKind::Subtype(..)
         .                       | PredicateKind::Coerce(..)
         .                       | PredicateKind::RegionOutlives(..)
         .                       | PredicateKind::WellFormed(..)
         .                       | PredicateKind::ObjectSafe(..)
         .                       | PredicateKind::ClosureKind(..)
         .                       | PredicateKind::TypeOutlives(..)
         .                       | PredicateKind::ConstEvaluatable(..)
         .                       | PredicateKind::ConstEquate(..)
     1,444 ( 0.00%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
         .                   }
    41,834 ( 0.00%)      }
         .           
     5,275 ( 0.00%)      pub fn to_opt_type_outlives(self) -> Option<PolyTypeOutlivesPredicate<'tcx>> {
         .                   let predicate = self.kind();
    10,550 ( 0.00%)          match predicate.skip_binder() {
       798 ( 0.00%)              PredicateKind::TypeOutlives(data) => Some(predicate.rebind(data)),
         .                       PredicateKind::Trait(..)
         .                       | PredicateKind::Projection(..)
         .                       | PredicateKind::Subtype(..)
         .                       | PredicateKind::Coerce(..)
         .                       | PredicateKind::RegionOutlives(..)
         .                       | PredicateKind::WellFormed(..)
         .                       | PredicateKind::ObjectSafe(..)
         .                       | PredicateKind::ClosureKind(..)
         .                       | PredicateKind::ConstEvaluatable(..)
         .                       | PredicateKind::ConstEquate(..)
     5,009 ( 0.00%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
         .                   }
     5,275 ( 0.00%)      }
         .           }
         .           
         .           /// Represents the bounds declared on a particular set of type
         .           /// parameters. Should eventually be generalized into a flag list of
         .           /// where-clauses. You can obtain an `InstantiatedPredicates` list from a
         .           /// `GenericPredicates` by using the `instantiate` method. Note that this method
         .           /// reflects an important semantic invariant of `InstantiatedPredicates`: while
         .           /// the `GenericPredicates` are expressed in terms of the bound type
-- line 1005 ----------------------------------------
-- line 1011 ----------------------------------------
         .           /// Example:
         .           ///
         .           ///     struct Foo<T, U: Bar<T>> { ... }
         .           ///
         .           /// Here, the `GenericPredicates` for `Foo` would contain a list of bounds like
         .           /// `[[], [U:Bar<T>]]`. Now if there were some particular reference
         .           /// like `Foo<isize,usize>`, then the `InstantiatedPredicates` would be `[[],
         .           /// [usize:Bar<isize>]]`.
   351,929 ( 0.00%)  #[derive(Clone, Debug, TypeFoldable)]
         .           pub struct InstantiatedPredicates<'tcx> {
         .               pub predicates: Vec<Predicate<'tcx>>,
         .               pub spans: Vec<Span>,
         .           }
         .           
         .           impl<'tcx> InstantiatedPredicates<'tcx> {
       146 ( 0.00%)      pub fn empty() -> InstantiatedPredicates<'tcx> {
    83,876 ( 0.00%)          InstantiatedPredicates { predicates: vec![], spans: vec![] }
       146 ( 0.00%)      }
         .           
         .               pub fn is_empty(&self) -> bool {
         .                   self.predicates.is_empty()
        71 ( 0.00%)      }
         .           }
         .           
         .           #[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable, TyEncodable, TyDecodable, TypeFoldable)]
         .           pub struct OpaqueTypeKey<'tcx> {
         .               pub def_id: DefId,
         .               pub substs: SubstsRef<'tcx>,
         .           }
         .           
-- line 1040 ----------------------------------------
-- line 1091 ----------------------------------------
         .               /// ```
         .               /// for<'a> fn(&'a u32)
         .               /// ```
         .               ///
         .               /// Once we "enter" into this `for<'a>` quantifier, we are in a
         .               /// new universe that extends `U` -- in this new universe, we can
         .               /// name the region `'a`, but that region was not nameable from
         .               /// `U` because it was not in scope there.
    70,048 ( 0.00%)      pub fn next_universe(self) -> UniverseIndex {
         .                   UniverseIndex::from_u32(self.private.checked_add(1).unwrap())
   210,144 ( 0.00%)      }
         .           
         .               /// Returns `true` if `self` can name a name from `other` -- in other words,
         .               /// if the set of names in `self` is a superset of those in
         .               /// `other` (`self >= other`).
         .               pub fn can_name(self, other: UniverseIndex) -> bool {
    62,328 ( 0.00%)          self.private >= other.private
    31,164 ( 0.00%)      }
         .           
         .               /// Returns `true` if `self` cannot name some names from `other` -- in other
         .               /// words, if the set of names in `self` is a strict subset of
         .               /// those in `other` (`self < other`).
         .               pub fn cannot_name(self, other: UniverseIndex) -> bool {
        86 ( 0.00%)          self.private < other.private
        43 ( 0.00%)      }
         .           }
         .           
         .           /// The "placeholder index" fully defines a placeholder region, type, or const. Placeholders are
         .           /// identified by both a universe, as well as a name residing within that universe. Distinct bound
         .           /// regions/types/consts within the same universe simply have an unknown relationship to one
         .           /// another.
         .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, PartialOrd, Ord)]
         .           pub struct Placeholder<T> {
     1,182 ( 0.00%)      pub universe: UniverseIndex,
       992 ( 0.00%)      pub name: T,
         .           }
         .           
         .           impl<'a, T> HashStable<StableHashingContext<'a>> for Placeholder<T>
         .           where
         .               T: HashStable<StableHashingContext<'a>>,
         .           {
         .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
         .                   self.universe.hash_stable(hcx, hasher);
-- line 1133 ----------------------------------------
-- line 1194 ----------------------------------------
         .           /// aren't allowed to call that query: it is equal to `type_of(const_param)` which is
         .           /// trivial to compute.
         .           ///
         .           /// If we now want to use that constant in a place which potentionally needs its type
         .           /// we also pass the type of its `const_param`. This is the point of `WithOptConstParam`,
         .           /// except that instead of a `Ty` we bundle the `DefId` of the const parameter.
         .           /// Meaning that we need to use `type_of(const_param_did)` if `const_param_did` is `Some`
         .           /// to get the type of `did`.
    20,789 ( 0.00%)  #[derive(Copy, Clone, Debug, TypeFoldable, Lift, TyEncodable, TyDecodable)]
         .           #[derive(PartialEq, Eq, PartialOrd, Ord)]
        54 ( 0.00%)  #[derive(Hash, HashStable)]
         .           pub struct WithOptConstParam<T> {
    15,127 ( 0.00%)      pub did: T,
         .               /// The `DefId` of the corresponding generic parameter in case `did` is
         .               /// a const argument.
         .               ///
         .               /// Note that even if `did` is a const argument, this may still be `None`.
         .               /// All queries taking `WithOptConstParam` start by calling `tcx.opt_const_param_of(def.did)`
         .               /// to potentially update `param_did` in the case it is `None`.
   151,444 ( 0.00%)      pub const_param_did: Option<DefId>,
         .           }
         .           
         .           impl<T> WithOptConstParam<T> {
         .               /// Creates a new `WithOptConstParam` setting `const_param_did` to `None`.
         .               #[inline(always)]
         .               pub fn unknown(did: T) -> WithOptConstParam<T> {
         .                   WithOptConstParam { did, const_param_did: None }
    60,325 ( 0.00%)      }
         .           }
         .           
         .           impl WithOptConstParam<LocalDefId> {
         .               /// Returns `Some((did, param_did))` if `def_id` is a const argument,
         .               /// `None` otherwise.
         .               #[inline(always)]
         .               pub fn try_lookup(did: LocalDefId, tcx: TyCtxt<'_>) -> Option<(LocalDefId, DefId)> {
         .                   tcx.opt_const_param_of(did).map(|param_did| (did, param_did))
         .               }
         .           
         .               /// In case `self` is unknown but `self.did` is a const argument, this returns
         .               /// a `WithOptConstParam` with the correct `const_param_did`.
         .               #[inline(always)]
         .               pub fn try_upgrade(self, tcx: TyCtxt<'_>) -> Option<WithOptConstParam<LocalDefId>> {
     3,847 ( 0.00%)          if self.const_param_did.is_none() {
     5,771 ( 0.00%)              if let const_param_did @ Some(_) = tcx.opt_const_param_of(self.did) {
         .                           return Some(WithOptConstParam { did: self.did, const_param_did });
         .                       }
         .                   }
         .           
         .                   None
         .               }
         .           
         .               pub fn to_global(self) -> WithOptConstParam<DefId> {
         .                   WithOptConstParam { did: self.did.to_def_id(), const_param_did: self.const_param_did }
         8 ( 0.00%)      }
         .           
       728 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
       609 ( 0.00%)          if let Some(did) = self.const_param_did { did } else { self.did.to_def_id() }
       182 ( 0.00%)      }
         .           }
         .           
         .           impl WithOptConstParam<DefId> {
     2,449 ( 0.00%)      pub fn as_local(self) -> Option<WithOptConstParam<LocalDefId>> {
         .                   self.did
         .                       .as_local()
         .                       .map(|did| WithOptConstParam { did, const_param_did: self.const_param_did })
     2,449 ( 0.00%)      }
         .           
         .               pub fn as_const_arg(self) -> Option<(LocalDefId, DefId)> {
    15,849 ( 0.00%)          if let Some(param_did) = self.const_param_did {
     7,581 ( 0.00%)              if let Some(did) = self.did.as_local() {
         .                           return Some((did, param_did));
         .                       }
         .                   }
         .           
         .                   None
     1,782 ( 0.00%)      }
         .           
         .               pub fn is_local(self) -> bool {
         .                   self.did.is_local()
         .               }
         .           
     1,397 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
         .                   self.const_param_did.unwrap_or(self.did)
     1,397 ( 0.00%)      }
         .           }
         .           
         .           /// When type checking, we use the `ParamEnv` to track
         .           /// details about the set of where-clauses that are in scope at this
         .           /// particular point.
         .           #[derive(Copy, Clone, Hash, PartialEq, Eq)]
         .           pub struct ParamEnv<'tcx> {
         .               /// This packs both caller bounds and the reveal enum into one pointer.
-- line 1285 ----------------------------------------
-- line 1302 ----------------------------------------
         .               reveal: traits::Reveal,
         .               constness: hir::Constness,
         .           }
         .           
         .           unsafe impl rustc_data_structures::tagged_ptr::Tag for ParamTag {
         .               const BITS: usize = 2;
         .               #[inline]
         .               fn into_usize(self) -> usize {
   329,185 ( 0.00%)          match self {
         .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst } => 0,
         .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst } => 1,
         .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const } => 2,
         .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::Const } => 3,
         .                   }
         .               }
         .               #[inline]
         .               unsafe fn from_usize(ptr: usize) -> Self {
 2,522,981 ( 0.02%)          match ptr {
         .                       0 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst },
         .                       1 => Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst },
         .                       2 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const },
         .                       3 => Self { reveal: traits::Reveal::All, constness: hir::Constness::Const },
         .                       _ => std::hint::unreachable_unchecked(),
         .                   }
         .               }
         .           }
-- line 1327 ----------------------------------------
-- line 1405 ----------------------------------------
         .               pub fn new(
         .                   caller_bounds: &'tcx List<Predicate<'tcx>>,
         .                   reveal: Reveal,
         .                   constness: hir::Constness,
         .               ) -> Self {
         .                   ty::ParamEnv { packed: CopyTaggedPtr::new(caller_bounds, ParamTag { reveal, constness }) }
         .               }
         .           
       301 ( 0.00%)      pub fn with_user_facing(mut self) -> Self {
         .                   self.packed.set_tag(ParamTag { reveal: Reveal::UserFacing, ..self.packed.tag() });
         .                   self
       301 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn with_constness(mut self, constness: hir::Constness) -> Self {
         .                   self.packed.set_tag(ParamTag { constness, ..self.packed.tag() });
         .                   self
         .               }
         .           
         .               #[inline]
-- line 1424 ----------------------------------------
-- line 1430 ----------------------------------------
         .               #[inline]
         .               pub fn without_const(mut self) -> Self {
         .                   self.packed.set_tag(ParamTag { constness: hir::Constness::NotConst, ..self.packed.tag() });
         .                   self
         .               }
         .           
         .               #[inline]
         .               pub fn remap_constness_with(&mut self, mut constness: ty::BoundConstness) {
    83,228 ( 0.00%)          *self = self.with_constness(constness.and(self.constness()))
         .               }
         .           
         .               /// Returns a new parameter environment with the same clauses, but
         .               /// which "reveals" the true results of projections in all cases
         .               /// (even for associated types that are specializable). This is
         .               /// the desired behavior during codegen and certain other special
         .               /// contexts; normally though we want to use `Reveal::UserFacing`,
         .               /// which is the default.
         .               /// All opaque types in the caller_bounds of the `ParamEnv`
         .               /// will be normalized to their underlying types.
         .               /// See PR #65989 and issue #65918 for more details
    51,352 ( 0.00%)      pub fn with_reveal_all_normalized(self, tcx: TyCtxt<'tcx>) -> Self {
         .                   if self.packed.tag().reveal == traits::Reveal::All {
         .                       return self;
         .                   }
         .           
         .                   ParamEnv::new(
         .                       tcx.normalize_opaque_types(self.caller_bounds()),
         .                       Reveal::All,
         .                       self.constness(),
         .                   )
    57,771 ( 0.00%)      }
         .           
         .               /// Returns this same environment but with no caller bounds.
         .               #[inline]
         .               pub fn without_caller_bounds(self) -> Self {
         .                   Self::new(List::empty(), self.reveal(), self.constness())
         .               }
         .           
         .               /// Creates a suitable environment in which to perform trait
-- line 1468 ----------------------------------------
-- line 1472 ----------------------------------------
         .               /// pair it with the empty environment. This improves caching and is generally
         .               /// invisible.
         .               ///
         .               /// N.B., we preserve the environment when type-checking because it
         .               /// is possible for the user to have wacky where-clauses like
         .               /// `where Box<u32>: Copy`, which are clearly never
         .               /// satisfiable. We generally want to behave as if they were true,
         .               /// although the surrounding function is never reachable.
   174,170 ( 0.00%)      pub fn and<T: TypeFoldable<'tcx>>(self, value: T) -> ParamEnvAnd<'tcx, T> {
         .                   match self.reveal() {
         .                       Reveal::UserFacing => ParamEnvAnd { param_env: self, value },
         .           
         .                       Reveal::All => {
   211,156 ( 0.00%)                  if value.is_global() {
     8,256 ( 0.00%)                      ParamEnvAnd { param_env: self.without_caller_bounds(), value }
         .                           } else {
         .                               ParamEnvAnd { param_env: self, value }
         .                           }
         .                       }
         .                   }
   156,651 ( 0.00%)      }
         .           }
         .           
         .           // FIXME(ecstaticmorse): Audit all occurrences of `without_const().to_predicate(tcx)` to ensure that
         .           // the constness of trait bounds is being propagated correctly.
         .           impl<'tcx> PolyTraitRef<'tcx> {
         .               #[inline]
         .               pub fn with_constness(self, constness: BoundConstness) -> PolyTraitPredicate<'tcx> {
     1,780 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
         .                       trait_ref,
         .                       constness,
         .                       polarity: ty::ImplPolarity::Positive,
         .                   })
         .               }
         .               #[inline]
         .               pub fn without_const(self) -> PolyTraitPredicate<'tcx> {
         .                   self.with_constness(BoundConstness::NotConst)
         .               }
         .           }
         .           
     8,503 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TypeFoldable)]
         .           pub struct ParamEnvAnd<'tcx, T> {
    65,266 ( 0.00%)      pub param_env: ParamEnv<'tcx>,
 1,750,488 ( 0.02%)      pub value: T,
         .           }
         .           
         .           impl<'tcx, T> ParamEnvAnd<'tcx, T> {
         .               pub fn into_parts(self) -> (ParamEnv<'tcx>, T) {
         .                   (self.param_env, self.value)
         .               }
         .           
         .               #[inline]
         .               pub fn without_const(mut self) -> Self {
         .                   self.param_env = self.param_env.without_const();
    67,541 ( 0.00%)          self
         .               }
         .           }
         .           
         .           impl<'a, 'tcx, T> HashStable<StableHashingContext<'a>> for ParamEnvAnd<'tcx, T>
         .           where
         .               T: HashStable<StableHashingContext<'a>>,
         .           {
         .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
-- line 1534 ----------------------------------------
-- line 1542 ----------------------------------------
         .           #[derive(Copy, Clone, Debug, HashStable)]
         .           pub struct Destructor {
         .               /// The `DefId` of the destructor method
         .               pub did: DefId,
         .               /// The constness of the destructor method
         .               pub constness: hir::Constness,
         .           }
         .           
     3,047 ( 0.00%)  bitflags! {
     7,668 ( 0.00%)      #[derive(HashStable, TyEncodable, TyDecodable)]
         .               pub struct VariantFlags: u32 {
         .                   const NO_VARIANT_FLAGS        = 0;
         .                   /// Indicates whether the field list of this variant is `#[non_exhaustive]`.
         .                   const IS_FIELD_LIST_NON_EXHAUSTIVE = 1 << 0;
         .                   /// Indicates whether this variant was obtained as part of recovering from
         .                   /// a syntactic error. May be incomplete or bogus.
         .                   const IS_RECOVERED = 1 << 1;
         .               }
         .           }
         .           
         .           /// Definition of a variant -- a struct's fields or an enum variant.
   184,536 ( 0.00%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
         .           pub struct VariantDef {
         .               /// `DefId` that identifies the variant itself.
         .               /// If this variant belongs to a struct or union, then this is a copy of its `DefId`.
         .               pub def_id: DefId,
         .               /// `DefId` that identifies the variant's constructor.
         .               /// If this variant is a struct variant, then this is `None`.
         .               pub ctor_def_id: Option<DefId>,
         .               /// Variant or struct name.
-- line 1571 ----------------------------------------
-- line 1592 ----------------------------------------
         .               /// `parent_did` is the `DefId` of the `AdtDef` representing the enum or struct that
         .               /// owns this variant. It is used for checking if a struct has `#[non_exhaustive]` w/out having
         .               /// to go through the redirect of checking the ctor's attributes - but compiling a small crate
         .               /// requires loading the `AdtDef`s for all the structs in the universe (e.g., coherence for any
         .               /// built-in trait), and we do not want to load attributes twice.
         .               ///
         .               /// If someone speeds up attribute loading to not be a performance concern, they can
         .               /// remove this hack and use the constructor `DefId` everywhere.
     2,536 ( 0.00%)      pub fn new(
         .                   name: Symbol,
         .                   variant_did: Option<DefId>,
         .                   ctor_def_id: Option<DefId>,
         .                   discr: VariantDiscr,
         .                   fields: Vec<FieldDef>,
         .                   ctor_kind: CtorKind,
         .                   adt_kind: AdtKind,
         .                   parent_did: DefId,
-- line 1608 ----------------------------------------
-- line 1611 ----------------------------------------
         .               ) -> Self {
         .                   debug!(
         .                       "VariantDef::new(name = {:?}, variant_did = {:?}, ctor_def_id = {:?}, discr = {:?},
         .                        fields = {:?}, ctor_kind = {:?}, adt_kind = {:?}, parent_did = {:?})",
         .                       name, variant_did, ctor_def_id, discr, fields, ctor_kind, adt_kind, parent_did,
         .                   );
         .           
         .                   let mut flags = VariantFlags::NO_VARIANT_FLAGS;
       317 ( 0.00%)          if is_field_list_non_exhaustive {
         .                       flags |= VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE;
         .                   }
         .           
       951 ( 0.00%)          if recovered {
         .                       flags |= VariantFlags::IS_RECOVERED;
         .                   }
         .           
     2,853 ( 0.00%)          VariantDef {
         .                       def_id: variant_did.unwrap_or(parent_did),
         .                       ctor_def_id,
         .                       name,
         .                       discr,
     1,268 ( 0.00%)              fields,
         .                       ctor_kind,
         .                       flags,
         .                   }
     1,268 ( 0.00%)      }
         .           
         .               /// Is this field list non-exhaustive?
         .               #[inline]
         .               pub fn is_field_list_non_exhaustive(&self) -> bool {
         .                   self.flags.intersects(VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE)
         .               }
         .           
         .               /// Was this variant obtained as part of recovering from a syntactic error?
         .               #[inline]
         .               pub fn is_recovered(&self) -> bool {
         .                   self.flags.intersects(VariantFlags::IS_RECOVERED)
         .               }
         .           
         .               /// Computes the `Ident` of this variant by looking up the `Span`
    13,370 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
     7,640 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.def_id).unwrap())
    17,190 ( 0.00%)      }
         .           }
         .           
   107,648 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]
         .           pub enum VariantDiscr {
         .               /// Explicit value for this variant, i.e., `X = 123`.
         .               /// The `DefId` corresponds to the embedded constant.
         .               Explicit(DefId),
         .           
         .               /// The previous variant's discriminant plus one.
         .               /// For efficiency reasons, the distance from the
         .               /// last `Explicit` discriminant is being stored,
         .               /// or `0` for the first variant, if it has none.
         .               Relative(u32),
         .           }
         .           
   238,442 ( 0.00%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
         .           pub struct FieldDef {
         .               pub did: DefId,
         .               pub name: Symbol,
         .               pub vis: Visibility,
         .           }
         .           
     8,321 ( 0.00%)  bitflags! {
         .               #[derive(TyEncodable, TyDecodable, Default, HashStable)]
         .               pub struct ReprFlags: u8 {
         .                   const IS_C               = 1 << 0;
         .                   const IS_SIMD            = 1 << 1;
         .                   const IS_TRANSPARENT     = 1 << 2;
         .                   // Internal only for now. If true, don't reorder fields.
         .                   const IS_LINEAR          = 1 << 3;
         .                   // If true, don't expose any niche to type's context.
-- line 1684 ----------------------------------------
-- line 1689 ----------------------------------------
         .                   // Any of these flags being set prevent field reordering optimisation.
         .                   const IS_UNOPTIMISABLE   = ReprFlags::IS_C.bits
         .                                            | ReprFlags::IS_SIMD.bits
         .                                            | ReprFlags::IS_LINEAR.bits;
         .               }
         .           }
         .           
         .           /// Represents the repr options provided by the user,
   149,218 ( 0.00%)  #[derive(Copy, Clone, Debug, Eq, PartialEq, TyEncodable, TyDecodable, Default, HashStable)]
         .           pub struct ReprOptions {
         .               pub int: Option<attr::IntType>,
         .               pub align: Option<Align>,
         .               pub pack: Option<Align>,
         .               pub flags: ReprFlags,
         .               /// The seed to be used for randomizing a type's layout
         .               ///
         .               /// Note: This could technically be a `[u8; 16]` (a `u128`) which would
-- line 1705 ----------------------------------------
-- line 1706 ----------------------------------------
         .               /// be the "most accurate" hash as it'd encompass the item and crate
         .               /// hash without loss, but it does pay the price of being larger.
         .               /// Everything's a tradeoff, a `u64` seed should be sufficient for our
         .               /// purposes (primarily `-Z randomize-layout`)
         .               pub field_shuffle_seed: u64,
         .           }
         .           
         .           impl ReprOptions {
       858 ( 0.00%)      pub fn new(tcx: TyCtxt<'_>, did: DefId) -> ReprOptions {
         .                   let mut flags = ReprFlags::empty();
         .                   let mut size = None;
         .                   let mut max_align: Option<Align> = None;
         .                   let mut min_pack: Option<Align> = None;
         .           
         .                   // Generate a deterministically-derived seed from the item's path hash
         .                   // to allow for cross-crate compilation to actually work
         .                   let mut field_shuffle_seed = tcx.def_path_hash(did).0.to_smaller_hash();
         .           
         .                   // If the user defined a custom seed for layout randomization, xor the item's
         .                   // path hash with the user defined seed, this will allowing determinism while
         .                   // still allowing users to further randomize layout generation for e.g. fuzzing
       198 ( 0.00%)          if let Some(user_seed) = tcx.sess.opts.debugging_opts.layout_seed {
         .                       field_shuffle_seed ^= user_seed;
         .                   }
         .           
       264 ( 0.00%)          for attr in tcx.get_attrs(did).iter() {
     2,265 ( 0.00%)              for r in attr::find_repr_attrs(&tcx.sess, attr) {
         .                           flags.insert(match r {
         .                               attr::ReprC => ReprFlags::IS_C,
         .                               attr::ReprPacked(pack) => {
         .                                   let pack = Align::from_bytes(pack as u64).unwrap();
         .                                   min_pack = Some(if let Some(min_pack) = min_pack {
         .                                       min_pack.min(pack)
         .                                   } else {
         .                                       pack
-- line 1740 ----------------------------------------
-- line 1753 ----------------------------------------
         .                                   ReprFlags::empty()
         .                               }
         .                           });
         .                       }
         .                   }
         .           
         .                   // If `-Z randomize-layout` was enabled for the type definition then we can
         .                   // consider performing layout randomization
       528 ( 0.00%)          if tcx.sess.opts.debugging_opts.randomize_layout {
         .                       flags.insert(ReprFlags::RANDOMIZE_LAYOUT);
         .                   }
         .           
         .                   // This is here instead of layout because the choice must make it into metadata.
       396 ( 0.00%)          if !tcx.consider_optimizing(|| format!("Reorder fields of {:?}", tcx.def_path_str(did))) {
         .                       flags.insert(ReprFlags::IS_LINEAR);
         .                   }
         .           
       132 ( 0.00%)          Self { int: size, align: max_align, pack: min_pack, flags, field_shuffle_seed }
     1,848 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn simd(&self) -> bool {
         .                   self.flags.contains(ReprFlags::IS_SIMD)
         .               }
         .           
         .               #[inline]
         .               pub fn c(&self) -> bool {
-- line 1779 ----------------------------------------
-- line 1798 ----------------------------------------
         .               #[inline]
         .               pub fn hide_niche(&self) -> bool {
         .                   self.flags.contains(ReprFlags::HIDE_NICHE)
         .               }
         .           
         .               /// Returns the discriminant type, given these `repr` options.
         .               /// This must only be called on enums!
         .               pub fn discr_type(&self) -> attr::IntType {
     8,550 ( 0.00%)          self.int.unwrap_or(attr::SignedInt(ast::IntTy::Isize))
     4,299 ( 0.00%)      }
         .           
         .               /// Returns `true` if this `#[repr()]` should inhabit "smart enum
         .               /// layout" optimizations, such as representing `Foo<&T>` as a
         .               /// single pointer.
         .               pub fn inhibit_enum_layout_opt(&self) -> bool {
     1,720 ( 0.00%)          self.c() || self.int.is_some()
         .               }
         .           
         .               /// Returns `true` if this `#[repr()]` should inhibit struct field reordering
         .               /// optimizations, such as with `repr(C)`, `repr(packed(1))`, or `repr(<int>)`.
         .               pub fn inhibit_struct_field_reordering_opt(&self) -> bool {
     6,984 ( 0.00%)          if let Some(pack) = self.pack {
         .                       if pack.bytes() == 1 {
         .                           return true;
         .                       }
         .                   }
         .           
    14,036 ( 0.00%)          self.flags.intersects(ReprFlags::IS_UNOPTIMISABLE) || self.int.is_some()
         .               }
         .           
         .               /// Returns `true` if this type is valid for reordering and `-Z randomize-layout`
         .               /// was enabled for its declaration crate
         .               pub fn can_randomize_type_layout(&self) -> bool {
     3,475 ( 0.00%)          !self.inhibit_struct_field_reordering_opt()
         .                       && self.flags.contains(ReprFlags::RANDOMIZE_LAYOUT)
         .               }
         .           
         .               /// Returns `true` if this `#[repr()]` should inhibit union ABI optimisations.
         .               pub fn inhibit_union_abi_opt(&self) -> bool {
        12 ( 0.00%)          self.c()
         .               }
         .           }
         .           
         .           impl<'tcx> FieldDef {
         .               /// Returns the type of this field. The resulting type is not normalized. The `subst` is
         .               /// typically obtained via the second field of [`TyKind::Adt`].
   153,230 ( 0.00%)      pub fn ty(&self, tcx: TyCtxt<'tcx>, subst: SubstsRef<'tcx>) -> Ty<'tcx> {
    43,780 ( 0.00%)          tcx.type_of(self.did).subst(tcx, subst)
   175,120 ( 0.00%)      }
         .           
         .               /// Computes the `Ident` of this variant by looking up the `Span`
    16,681 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
     9,532 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.did).unwrap())
    21,447 ( 0.00%)      }
         .           }
         .           
         .           pub type Attributes<'tcx> = &'tcx [ast::Attribute];
         .           
         .           #[derive(Debug, PartialEq, Eq)]
         .           pub enum ImplOverlapKind {
         .               /// These impls are always allowed to overlap.
         .               Permitted {
-- line 1859 ----------------------------------------
-- line 1891 ----------------------------------------
         .               /// marker traits.
         .               /// 4. Neither of the impls can have any where-clauses.
         .               ///
         .               /// Once `traitobject` 0.1.0 is no longer an active concern, this hack can be removed.
         .               Issue33140,
         .           }
         .           
         .           impl<'tcx> TyCtxt<'tcx> {
    50,320 ( 0.00%)      pub fn typeck_body(self, body: hir::BodyId) -> &'tcx TypeckResults<'tcx> {
    12,580 ( 0.00%)          self.typeck(self.hir().body_owner_def_id(body))
    50,320 ( 0.00%)      }
         .           
         .               pub fn provided_trait_methods(self, id: DefId) -> impl 'tcx + Iterator<Item = &'tcx AssocItem> {
         .                   self.associated_items(id)
         .                       .in_definition_order()
         .                       .filter(|item| item.kind == AssocKind::Fn && item.defaultness.has_value())
         .               }
         .           
         .               fn item_name_from_hir(self, def_id: DefId) -> Option<Ident> {
         .                   self.hir().get_if_local(def_id).and_then(|node| node.ident())
         .               }
         .           
     3,051 ( 0.00%)      fn item_name_from_def_id(self, def_id: DefId) -> Option<Symbol> {
       339 ( 0.00%)          if def_id.index == CRATE_DEF_INDEX {
         .                       Some(self.crate_name(def_id.krate))
         .                   } else {
     1,017 ( 0.00%)              let def_key = self.def_key(def_id);
     1,695 ( 0.00%)              match def_key.disambiguated_data.data {
         .                           // The name of a constructor is that of its parent.
         .                           rustc_hir::definitions::DefPathData::Ctor => self.item_name_from_def_id(DefId {
         .                               krate: def_id.krate,
         .                               index: def_key.parent.unwrap(),
         .                           }),
       678 ( 0.00%)                  _ => def_key.disambiguated_data.data.get_opt_name(),
         .                       }
         .                   }
     2,712 ( 0.00%)      }
         .           
         .               /// Look up the name of an item across crates. This does not look at HIR.
         .               ///
         .               /// When possible, this function should be used for cross-crate lookups over
         .               /// [`opt_item_name`] to avoid invalidating the incremental cache. If you
         .               /// need to handle items without a name, or HIR items that will not be
         .               /// serialized cross-crate, or if you need the span of the item, use
         .               /// [`opt_item_name`] instead.
         .               ///
         .               /// [`opt_item_name`]: Self::opt_item_name
     2,373 ( 0.00%)      pub fn item_name(self, id: DefId) -> Symbol {
         .                   // Look at cross-crate items first to avoid invalidating the incremental cache
         .                   // unless we have to.
       339 ( 0.00%)          self.item_name_from_def_id(id).unwrap_or_else(|| {
         .                       bug!("item_name: no name for {:?}", self.def_path(id));
         .                   })
     1,695 ( 0.00%)      }
         .           
         .               /// Look up the name and span of an item or [`Node`].
         .               ///
         .               /// See [`item_name`][Self::item_name] for more information.
         .               pub fn opt_item_name(self, def_id: DefId) -> Option<Ident> {
         .                   // Look at the HIR first so the span will be correct if this is a local item.
         .                   self.item_name_from_hir(def_id)
         .                       .or_else(|| self.item_name_from_def_id(def_id).map(Ident::with_dummy_span))
         .               }
         .           
   562,220 ( 0.00%)      pub fn opt_associated_item(self, def_id: DefId) -> Option<&'tcx AssocItem> {
   224,888 ( 0.00%)          if let DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy = self.def_kind(def_id) {
         .                       Some(self.associated_item(def_id))
         .                   } else {
         .                       None
         .                   }
   505,998 ( 0.00%)      }
         .           
     2,845 ( 0.00%)      pub fn field_index(self, hir_id: hir::HirId, typeck_results: &TypeckResults<'_>) -> usize {
         .                   typeck_results.field_indices().get(hir_id).cloned().expect("no index for a field")
     5,690 ( 0.00%)      }
         .           
         .               pub fn find_field_index(self, ident: Ident, variant: &VariantDef) -> Option<usize> {
         .                   variant
         .                       .fields
         .                       .iter()
         .                       .position(|field| self.hygienic_eq(ident, field.ident(self), variant.def_id))
         .               }
         .           
         .               /// Returns `true` if the impls are the same polarity and the trait either
         .               /// has no items or is annotated `#[marker]` and prevents item overrides.
    18,100 ( 0.00%)      pub fn impls_are_allowed_to_overlap(
         .                   self,
         .                   def_id1: DefId,
         .                   def_id2: DefId,
         .               ) -> Option<ImplOverlapKind> {
         .                   // If either trait impl references an error, they're allowed to overlap,
         .                   // as one of them essentially doesn't exist.
         .                   if self.impl_trait_ref(def_id1).map_or(false, |tr| tr.references_error())
     3,620 ( 0.00%)              || self.impl_trait_ref(def_id2).map_or(false, |tr| tr.references_error())
         .                   {
         .                       return Some(ImplOverlapKind::Permitted { marker: false });
         .                   }
         .           
    18,100 ( 0.00%)          match (self.impl_polarity(def_id1), self.impl_polarity(def_id2)) {
         .                       (ImplPolarity::Reservation, _) | (_, ImplPolarity::Reservation) => {
         .                           // `#[rustc_reservation_impl]` impls don't overlap with anything
         .                           debug!(
         .                               "impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (reservations)",
         .                               def_id1, def_id2
         .                           );
         .                           return Some(ImplOverlapKind::Permitted { marker: false });
         .                       }
-- line 1997 ----------------------------------------
-- line 2004 ----------------------------------------
         .                           );
         .                           return None;
         .                       }
         .                       (ImplPolarity::Positive, ImplPolarity::Positive)
         .                       | (ImplPolarity::Negative, ImplPolarity::Negative) => {}
         .                   };
         .           
         .                   let is_marker_overlap = {
    18,100 ( 0.00%)              let is_marker_impl = |def_id: DefId| -> bool {
     5,430 ( 0.00%)                  let trait_ref = self.impl_trait_ref(def_id);
     5,430 ( 0.00%)                  trait_ref.map_or(false, |tr| self.trait_def(tr.def_id).is_marker)
    14,480 ( 0.00%)              };
     7,240 ( 0.00%)              is_marker_impl(def_id1) && is_marker_impl(def_id2)
         .                   };
         .           
         .                   if is_marker_overlap {
         .                       debug!(
         .                           "impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (marker overlap)",
         .                           def_id1, def_id2
         .                       );
         .                       Some(ImplOverlapKind::Permitted { marker: true })
         .                   } else {
     7,240 ( 0.00%)              if let Some(self_ty1) = self.issue33140_self_ty(def_id1) {
         .                           if let Some(self_ty2) = self.issue33140_self_ty(def_id2) {
         .                               if self_ty1 == self_ty2 {
         .                                   debug!(
         .                                       "impls_are_allowed_to_overlap({:?}, {:?}) - issue #33140 HACK",
         .                                       def_id1, def_id2
         .                                   );
         .                                   return Some(ImplOverlapKind::Issue33140);
         .                               } else {
-- line 2034 ----------------------------------------
-- line 2038 ----------------------------------------
         .                                   );
         .                               }
         .                           }
         .                       }
         .           
         .                       debug!("impls_are_allowed_to_overlap({:?}, {:?}) = None", def_id1, def_id2);
         .                       None
         .                   }
    14,480 ( 0.00%)      }
         .           
         .               /// Returns `ty::VariantDef` if `res` refers to a struct,
         .               /// or variant or their constructors, panics otherwise.
     1,813 ( 0.00%)      pub fn expect_variant_res(self, res: Res) -> &'tcx VariantDef {
     3,108 ( 0.00%)          match res {
         .                       Res::Def(DefKind::Variant, did) => {
         .                           let enum_did = self.parent(did).unwrap();
         .                           self.adt_def(enum_did).variant_with_id(did)
         .                       }
         .                       Res::Def(DefKind::Struct | DefKind::Union, did) => self.adt_def(did).non_enum_variant(),
         .                       Res::Def(DefKind::Ctor(CtorOf::Variant, ..), variant_ctor_did) => {
         .                           let variant_did = self.parent(variant_ctor_did).unwrap();
         .                           let enum_did = self.parent(variant_did).unwrap();
-- line 2059 ----------------------------------------
-- line 2060 ----------------------------------------
         .                           self.adt_def(enum_did).variant_with_ctor_id(variant_ctor_did)
         .                       }
         .                       Res::Def(DefKind::Ctor(CtorOf::Struct, ..), ctor_did) => {
         .                           let struct_did = self.parent(ctor_did).expect("struct ctor has no parent");
         .                           self.adt_def(struct_did).non_enum_variant()
         .                       }
         .                       _ => bug!("expect_variant_res used with unexpected res {:?}", res),
         .                   }
     2,072 ( 0.00%)      }
         .           
         .               /// Returns the possibly-auto-generated MIR of a `(DefId, Subst)` pair.
    24,328 ( 0.00%)      pub fn instance_mir(self, instance: ty::InstanceDef<'tcx>) -> &'tcx Body<'tcx> {
     6,082 ( 0.00%)          match instance {
    28,510 ( 0.00%)              ty::InstanceDef::Item(def) => match self.def_kind(def.did) {
         .                           DefKind::Const
         .                           | DefKind::Static
         .                           | DefKind::AssocConst
         .                           | DefKind::Ctor(..)
         .                           | DefKind::AnonConst
         6 ( 0.00%)                  | DefKind::InlineConst => self.mir_for_ctfe_opt_const_arg(def),
         .                           // If the caller wants `mir_for_ctfe` of a function they should not be using
         .                           // `instance_mir`, so we'll assume const fn also wants the optimized version.
         .                           _ => {
     2,848 ( 0.00%)                      assert_eq!(def.const_param_did, None);
         .                               self.optimized_mir(def.did)
         .                           }
         .                       },
         .                       ty::InstanceDef::VtableShim(..)
         .                       | ty::InstanceDef::ReifyShim(..)
         .                       | ty::InstanceDef::Intrinsic(..)
         .                       | ty::InstanceDef::FnPtrShim(..)
         .                       | ty::InstanceDef::Virtual(..)
         .                       | ty::InstanceDef::ClosureOnceShim { .. }
         .                       | ty::InstanceDef::DropGlue(..)
         .                       | ty::InstanceDef::CloneShim(..) => self.mir_shims(instance),
         .                   }
    27,369 ( 0.00%)      }
         .           
         .               /// Gets the attributes of a definition.
   337,470 ( 0.00%)      pub fn get_attrs(self, did: DefId) -> Attributes<'tcx> {
   101,241 ( 0.00%)          if let Some(did) = did.as_local() {
    91,377 ( 0.00%)              self.hir().attrs(self.hir().local_def_id_to_hir_id(did))
         .                   } else {
         .                       self.item_attrs(did)
         .                   }
   269,976 ( 0.00%)      }
         .           
         .               /// Determines whether an item is annotated with an attribute.
    35,976 ( 0.00%)      pub fn has_attr(self, did: DefId, attr: Symbol) -> bool {
   118,440 ( 0.00%)          self.sess.contains_name(&self.get_attrs(did), attr)
         .               }
         .           
         .               /// Determines whether an item is annotated with `doc(hidden)`.
     2,534 ( 0.00%)      pub fn is_doc_hidden(self, did: DefId) -> bool {
       362 ( 0.00%)          self.get_attrs(did)
         .                       .iter()
        60 ( 0.00%)              .filter_map(|attr| if attr.has_name(sym::doc) { attr.meta_item_list() } else { None })
         .                       .any(|items| items.iter().any(|item| item.has_name(sym::hidden)))
     2,896 ( 0.00%)      }
         .           
         .               /// Returns `true` if this is an `auto trait`.
    22,883 ( 0.00%)      pub fn trait_is_auto(self, trait_def_id: DefId) -> bool {
     3,269 ( 0.00%)          self.trait_def(trait_def_id).has_auto_impl
    26,152 ( 0.00%)      }
         .           
         .               /// Returns layout of a generator. Layout might be unavailable if the
         .               /// generator is tainted by errors.
         .               pub fn generator_layout(self, def_id: DefId) -> Option<&'tcx GeneratorLayout<'tcx>> {
         .                   self.optimized_mir(def_id).generator_layout()
         .               }
         .           
         .               /// Given the `DefId` of an impl, returns the `DefId` of the trait it implements.
         .               /// If it implements no trait, returns `None`.
    63,791 ( 0.00%)      pub fn trait_id_of_impl(self, def_id: DefId) -> Option<DefId> {
         .                   self.impl_trait_ref(def_id).map(|tr| tr.def_id)
    82,017 ( 0.00%)      }
         .           
         .               /// If the given defid describes a method belonging to an impl, returns the
         .               /// `DefId` of the impl that the method belongs to; otherwise, returns `None`.
     2,934 ( 0.00%)      pub fn impl_of_method(self, def_id: DefId) -> Option<DefId> {
    10,584 ( 0.00%)          self.opt_associated_item(def_id).and_then(|trait_item| match trait_item.container {
         .                       TraitContainer(_) => None,
         .                       ImplContainer(def_id) => Some(def_id),
         .                   })
     5,868 ( 0.00%)      }
         .           
         .               /// Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`
         .               /// with the name of the crate containing the impl.
         .               pub fn span_of_impl(self, impl_did: DefId) -> Result<Span, Symbol> {
         .                   if let Some(impl_did) = impl_did.as_local() {
         .                       Ok(self.def_span(impl_did))
         .                   } else {
         .                       Err(self.crate_name(impl_did.krate))
         .                   }
         .               }
         .           
         .               /// Hygienically compares a use-site name (`use_name`) for a field or an associated item with
         .               /// its supposed definition name (`def_name`). The method also needs `DefId` of the supposed
         .               /// definition's parent/scope to perform comparison.
   122,808 ( 0.00%)      pub fn hygienic_eq(self, use_name: Ident, def_name: Ident, def_parent_def_id: DefId) -> bool {
         .                   // We could use `Ident::eq` here, but we deliberately don't. The name
         .                   // comparison fails frequently, and we want to avoid the expensive
         .                   // `normalize_to_macros_2_0()` calls required for the span comparison whenever possible.
    15,351 ( 0.00%)          use_name.name == def_name.name
    46,035 ( 0.00%)              && use_name
         .                           .span
         .                           .ctxt()
         .                           .hygienic_eq(def_name.span.ctxt(), self.expn_that_defined(def_parent_def_id))
   122,808 ( 0.00%)      }
         .           
     5,184 ( 0.00%)      pub fn adjust_ident(self, mut ident: Ident, scope: DefId) -> Ident {
     1,152 ( 0.00%)          ident.span.normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope));
     1,152 ( 0.00%)          ident
     4,608 ( 0.00%)      }
         .           
    30,357 ( 0.00%)      pub fn adjust_ident_and_get_scope(
         .                   self,
         .                   mut ident: Ident,
         .                   scope: DefId,
         .                   block: hir::HirId,
         .               ) -> (Ident, DefId) {
     3,373 ( 0.00%)          let scope = ident
         .                       .span
         .                       .normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope))
         .                       .and_then(|actual_expansion| actual_expansion.expn_data().parent_module)
    13,492 ( 0.00%)              .unwrap_or_else(|| self.parent_module(block).to_def_id());
    20,238 ( 0.00%)          (ident, scope)
    30,357 ( 0.00%)      }
         .           
     2,338 ( 0.00%)      pub fn is_object_safe(self, key: DefId) -> bool {
         .                   self.object_safety_violations(key).is_empty()
     2,672 ( 0.00%)      }
         .           }
         .           
         .           /// Yields the parent function's `LocalDefId` if `def_id` is an `impl Trait` definition.
     9,573 ( 0.00%)  pub fn is_impl_trait_defn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<LocalDefId> {
     9,573 ( 0.00%)      let def_id = def_id.as_local()?;
     8,132 ( 0.00%)      if let Node::Item(item) = tcx.hir().get_by_def_id(def_id) {
     2,160 ( 0.00%)          if let hir::ItemKind::OpaqueTy(ref opaque_ty) = item.kind {
         .                       return match opaque_ty.origin {
         .                           hir::OpaqueTyOrigin::FnReturn(parent) | hir::OpaqueTyOrigin::AsyncFn(parent) => {
         .                               Some(parent)
         .                           }
         .                           hir::OpaqueTyOrigin::TyAlias => None,
         .                       };
         .                   }
         .               }
         .               None
    12,764 ( 0.00%)  }
         .           
         .           pub fn int_ty(ity: ast::IntTy) -> IntTy {
         .               match ity {
         .                   ast::IntTy::Isize => IntTy::Isize,
         .                   ast::IntTy::I8 => IntTy::I8,
         .                   ast::IntTy::I16 => IntTy::I16,
         .                   ast::IntTy::I32 => IntTy::I32,
         .                   ast::IntTy::I64 => IntTy::I64,
-- line 2216 ----------------------------------------
-- line 2224 ----------------------------------------
         .                   ast::UintTy::U8 => UintTy::U8,
         .                   ast::UintTy::U16 => UintTy::U16,
         .                   ast::UintTy::U32 => UintTy::U32,
         .                   ast::UintTy::U64 => UintTy::U64,
         .                   ast::UintTy::U128 => UintTy::U128,
         .               }
         .           }
         .           
         4 ( 0.00%)  pub fn float_ty(fty: ast::FloatTy) -> FloatTy {
         .               match fty {
         .                   ast::FloatTy::F32 => FloatTy::F32,
         .                   ast::FloatTy::F64 => FloatTy::F64,
         .               }
         4 ( 0.00%)  }
         .           
     1,216 ( 0.00%)  pub fn ast_int_ty(ity: IntTy) -> ast::IntTy {
         .               match ity {
         .                   IntTy::Isize => ast::IntTy::Isize,
         .                   IntTy::I8 => ast::IntTy::I8,
         .                   IntTy::I16 => ast::IntTy::I16,
         .                   IntTy::I32 => ast::IntTy::I32,
         .                   IntTy::I64 => ast::IntTy::I64,
         .                   IntTy::I128 => ast::IntTy::I128,
         .               }
     1,216 ( 0.00%)  }
         .           
         .           pub fn ast_uint_ty(uty: UintTy) -> ast::UintTy {
         .               match uty {
         .                   UintTy::Usize => ast::UintTy::Usize,
         .                   UintTy::U8 => ast::UintTy::U8,
         .                   UintTy::U16 => ast::UintTy::U16,
         .                   UintTy::U32 => ast::UintTy::U32,
         .                   UintTy::U64 => ast::UintTy::U64,
-- line 2256 ----------------------------------------
-- line 2262 ----------------------------------------
         .               closure::provide(providers);
         .               context::provide(providers);
         .               erase_regions::provide(providers);
         .               layout::provide(providers);
         .               util::provide(providers);
         .               print::provide(providers);
         .               super::util::bug::provide(providers);
         .               super::middle::provide(providers);
         8 ( 0.00%)      *providers = ty::query::Providers {
         .                   trait_impls_of: trait_def::trait_impls_of_provider,
         .                   type_uninhabited_from: inhabitedness::type_uninhabited_from,
         .                   const_param_default: consts::const_param_default,
         .                   vtable_allocation: vtable::vtable_allocation_provider,
         .                   ..*providers
         .               };
         1 ( 0.00%)  }
         .           
         .           /// A map for the local crate mapping each type to a vector of its
         .           /// inherent impls. This is not meant to be used outside of coherence;
         .           /// rather, you should request the vector for a specific type via
         .           /// `tcx.inherent_impls(def_id)` so as to minimize your dependencies
         .           /// (constructing this map requires touching the entire crate).
         .           #[derive(Clone, Debug, Default, HashStable)]
         .           pub struct CrateInherentImpls {
         .               pub inherent_impls: LocalDefIdMap<Vec<DefId>>,
         .           }
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, HashStable)]
         .           pub struct SymbolName<'tcx> {
         .               /// `&str` gives a consistent ordering, which ensures reproducible builds.
    32,545 ( 0.00%)      pub name: &'tcx str,
         .           }
         .           
         .           impl<'tcx> SymbolName<'tcx> {
     7,908 ( 0.00%)      pub fn new(tcx: TyCtxt<'tcx>, name: &str) -> SymbolName<'tcx> {
         .                   SymbolName {
         .                       name: unsafe { str::from_utf8_unchecked(tcx.arena.alloc_slice(name.as_bytes())) },
         .                   }
    10,544 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> fmt::Display for SymbolName<'tcx> {
       804 ( 0.00%)      fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   fmt::Display::fmt(&self.name, fmt)
         .               }
         .           }
         .           
         .           impl<'tcx> fmt::Debug for SymbolName<'tcx> {
         .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   fmt::Display::fmt(&self.name, fmt)
         .               }
-- line 2312 ----------------------------------------

11,610,533 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 97 ----------------------------------------
        .           
        .               /// If true, the capture is behind a reference.
        .               by_ref: bool,
        .           }
        .           
        .           const DEREF_PROJECTION: &[PlaceElem<'_>; 1] = &[ProjectionElem::Deref];
        .           
        .           pub fn provide(providers: &mut Providers) {
        4 ( 0.00%)      *providers = Providers {
        .                   mir_borrowck: |tcx, did| {
      962 ( 0.00%)              if let Some(def) = ty::WithOptConstParam::try_lookup(did, tcx) {
        .                           tcx.mir_borrowck_const_arg(def)
        .                       } else {
    3,848 ( 0.00%)                  mir_borrowck(tcx, ty::WithOptConstParam::unknown(did))
        .                       }
        .                   },
        .                   mir_borrowck_const_arg: |tcx, (did, param_did)| {
        .                       mir_borrowck(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })
        .                   },
        .                   ..*providers
        .               };
        1 ( 0.00%)  }
        .           
    9,620 ( 0.00%)  fn mir_borrowck<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               def: ty::WithOptConstParam<LocalDefId>,
        .           ) -> &'tcx BorrowCheckResult<'tcx> {
        .               let (input_body, promoted) = tcx.mir_promoted(def);
        .               debug!("run query mir_borrowck: {}", tcx.def_path_str(def.did.to_def_id()));
        .           
   12,506 ( 0.00%)      let opt_closure_req = tcx.infer_ctxt().with_opaque_type_inference(def.did).enter(|infcx| {
        .                   let input_body: &Body<'_> = &input_body.borrow();
        .                   let promoted: &IndexVec<_, _> = &promoted.borrow();
   13,468 ( 0.00%)          do_mir_borrowck(&infcx, input_body, promoted, false).0
    3,848 ( 0.00%)      });
        .               debug!("mir_borrowck done");
        .           
      962 ( 0.00%)      tcx.arena.alloc(opt_closure_req)
    7,696 ( 0.00%)  }
        .           
        .           /// Perform the actual borrow checking.
        .           ///
        .           /// If `return_body_with_facts` is true, then return the body with non-erased
        .           /// region ids on which the borrow checking was performed together with Polonius
        .           /// facts.
   21,164 ( 0.00%)  #[instrument(skip(infcx, input_body, input_promoted), level = "debug")]
        .           fn do_mir_borrowck<'a, 'tcx>(
        .               infcx: &InferCtxt<'a, 'tcx>,
        .               input_body: &Body<'tcx>,
        .               input_promoted: &IndexVec<Promoted, Body<'tcx>>,
        .               return_body_with_facts: bool,
        .           ) -> (BorrowCheckResult<'tcx>, Option<Box<BodyWithBorrowckFacts<'tcx>>>) {
    9,620 ( 0.00%)      let def = input_body.source.with_opt_param().as_local().unwrap();
        .           
        .               debug!(?def);
        .           
    1,924 ( 0.00%)      let tcx = infcx.tcx;
        .               let param_env = tcx.param_env(def.did);
      962 ( 0.00%)      let id = tcx.hir().local_def_id_to_hir_id(def.did);
        .           
    1,924 ( 0.00%)      let mut local_names = IndexVec::from_elem(None, &input_body.local_decls);
        .               for var_debug_info in &input_body.var_debug_info {
    7,947 ( 0.00%)          if let VarDebugInfoContents::Place(place) = var_debug_info.value {
    3,789 ( 0.00%)              if let Some(local) = place.as_local() {
    5,637 ( 0.00%)                  if let Some(prev_name) = local_names[local] {
        .                               if var_debug_info.name != prev_name {
        .                                   span_bug!(
        .                                       var_debug_info.source_info.span,
        .                                       "local {:?} has many names (`{}` vs `{}`)",
        .                                       local,
        .                                       prev_name,
        .                                       var_debug_info.name
        .                                   );
        .                               }
        .                           }
    5,637 ( 0.00%)                  local_names[local] = Some(var_debug_info.name);
        .                       }
        .                   }
        .               }
        .           
        .               // Gather the upvars of a closure, if any.
    3,848 ( 0.00%)      let tables = tcx.typeck_opt_const_arg(def);
    1,924 ( 0.00%)      if let Some(ErrorReported) = tables.tainted_by_errors {
        .                   infcx.set_tainted_by_errors();
        .               }
    3,848 ( 0.00%)      let upvars: Vec<_> = tables
        .                   .closure_min_captures_flattened(def.did.to_def_id())
        .                   .map(|captured_place| {
        .                       let capture = captured_place.info.capture_kind;
       31 ( 0.00%)              let by_ref = match capture {
        .                           ty::UpvarCapture::ByValue => false,
        .                           ty::UpvarCapture::ByRef(..) => true,
        .                       };
        .                       Upvar { place: captured_place.clone(), by_ref }
        .                   })
        .                   .collect();
        .           
        .               // Replace all regions with fresh inference variables. This
        .               // requires first making our own copy of the MIR. This copy will
        .               // be modified (in place) to contain non-lexical lifetimes. It
        .               // will have a lifetime tied to the inference context.
    1,924 ( 0.00%)      let mut body_owned = input_body.clone();
        .               let mut promoted = input_promoted.clone();
        .               let free_regions =
    2,886 ( 0.00%)          nll::replace_regions_in_mir(infcx, param_env, &mut body_owned, &mut promoted);
        .               let body = &body_owned; // no further changes
        .           
      962 ( 0.00%)      let location_table_owned = LocationTable::new(body);
        .               let location_table = &location_table_owned;
        .           
        .               let mut errors_buffer = Vec::new();
    2,886 ( 0.00%)      let (move_data, move_errors): (MoveData<'tcx>, Vec<(Place<'tcx>, MoveError<'tcx>)>) =
    6,734 ( 0.00%)          match MoveData::gather_moves(&body, tcx, param_env) {
    5,772 ( 0.00%)              Ok(move_data) => (move_data, Vec::new()),
        .                       Err((move_data, move_errors)) => (move_data, move_errors),
        .                   };
        .               let promoted_errors = promoted
        .                   .iter_enumerated()
      270 ( 0.00%)          .map(|(idx, body)| (idx, MoveData::gather_moves(&body, tcx, param_env)));
        .           
    5,772 ( 0.00%)      let mdpe = MoveDataParamEnv { move_data, param_env };
        .           
    7,696 ( 0.00%)      let mut flow_inits = MaybeInitializedPlaces::new(tcx, &body, &mdpe)
      962 ( 0.00%)          .into_engine(tcx, &body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint()
        .                   .into_results_cursor(&body);
        .           
   11,544 ( 0.00%)      let locals_are_invalidated_at_exit = tcx.hir().body_owner_kind(id).is_fn_or_closure();
        .               let borrow_set =
    9,620 ( 0.00%)          Rc::new(BorrowSet::build(tcx, body, locals_are_invalidated_at_exit, &mdpe.move_data));
        .           
    4,810 ( 0.00%)      let use_polonius = return_body_with_facts || infcx.tcx.sess.opts.debugging_opts.polonius;
        .           
        .               // Compute non-lexical lifetimes.
        .               let nll::NllOutput {
    2,886 ( 0.00%)          regioncx,
    3,848 ( 0.00%)          opaque_type_values,
    1,924 ( 0.00%)          polonius_input,
    2,886 ( 0.00%)          polonius_output,
    3,848 ( 0.00%)          opt_closure_req,
    9,620 ( 0.00%)          nll_errors,
   17,316 ( 0.00%)      } = nll::compute_regions(
        .                   infcx,
   15,392 ( 0.00%)          free_regions,
        .                   body,
        .                   &promoted,
        .                   location_table,
        .                   param_env,
        .                   &mut flow_inits,
        .                   &mdpe.move_data,
        .                   &borrow_set,
        .                   &upvars,
        .                   use_polonius,
        .               );
        .           
        .               // Dump MIR results into a file, if that is enabled. This let us
        .               // write unit-tests, as well as helping with debugging.
    2,886 ( 0.00%)      nll::dump_mir_results(infcx, &body, &regioncx, &opt_closure_req);
        .           
        .               // We also have a `#[rustc_regions]` annotation that causes us to dump
        .               // information.
    1,924 ( 0.00%)      nll::dump_annotation(
        .                   infcx,
        .                   &body,
        .                   &regioncx,
        .                   &opt_closure_req,
        .                   &opaque_type_values,
        .                   &mut errors_buffer,
        .               );
        .           
        .               // The various `flow_*` structures can be large. We drop `flow_inits` here
        .               // so it doesn't overlap with the others below. This reduces peak memory
        .               // usage significantly on some benchmarks.
   15,392 ( 0.00%)      drop(flow_inits);
        .           
      962 ( 0.00%)      let regioncx = Rc::new(regioncx);
        .           
    5,772 ( 0.00%)      let flow_borrows = Borrows::new(tcx, body, &regioncx, &borrow_set)
      962 ( 0.00%)          .into_engine(tcx, body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint();
    5,772 ( 0.00%)      let flow_uninits = MaybeUninitializedPlaces::new(tcx, body, &mdpe)
      962 ( 0.00%)          .into_engine(tcx, body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint();
    5,772 ( 0.00%)      let flow_ever_inits = EverInitializedPlaces::new(tcx, body, &mdpe)
      962 ( 0.00%)          .into_engine(tcx, body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint();
        .           
    2,276 ( 0.00%)      let movable_generator = !matches!(
    6,124 ( 0.00%)          tcx.hir().get(id),
        .                   Node::Expr(&hir::Expr {
        .                       kind: hir::ExprKind::Closure(.., Some(hir::Movability::Static)),
        .                       ..
        .                   })
        .               );
        .           
      189 ( 0.00%)      for (idx, move_data_results) in promoted_errors {
        .                   let promoted_body = &promoted[idx];
        .           
       54 ( 0.00%)          if let Err((move_data, move_errors)) = move_data_results {
        .                       let mut promoted_mbcx = MirBorrowckCtxt {
        .                           infcx,
        .                           param_env,
        .                           body: promoted_body,
        .                           move_data: &move_data,
        .                           location_table, // no need to create a real one for the promoted, it is not used
        .                           movable_generator,
        .                           fn_self_span_reported: Default::default(),
-- line 307 ----------------------------------------
-- line 325 ----------------------------------------
        .                       };
        .                       promoted_mbcx.report_move_errors(move_errors);
        .                       errors_buffer = promoted_mbcx.errors_buffer;
        .                   };
        .               }
        .           
        .               let dominators = body.dominators();
        .           
   43,290 ( 0.00%)      let mut mbcx = MirBorrowckCtxt {
        .                   infcx,
        .                   param_env,
        .                   body,
        .                   move_data: &mdpe.move_data,
        .                   location_table,
        .                   movable_generator,
        .                   locals_are_invalidated_at_exit,
        .                   fn_self_span_reported: Default::default(),
        .                   access_place_error_reported: Default::default(),
        .                   reservation_error_reported: Default::default(),
        .                   reservation_warnings: Default::default(),
        .                   move_error_reported: BTreeMap::new(),
        .                   uninitialized_error_reported: Default::default(),
    3,848 ( 0.00%)          errors_buffer,
      962 ( 0.00%)          regioncx: Rc::clone(&regioncx),
        .                   used_mut: Default::default(),
        .                   used_mut_upvars: SmallVec::new(),
      962 ( 0.00%)          borrow_set: Rc::clone(&borrow_set),
    5,772 ( 0.00%)          dominators,
    3,848 ( 0.00%)          upvars,
    3,848 ( 0.00%)          local_names,
        .                   region_names: RefCell::default(),
        .                   next_region_name: RefCell::new(1),
        .                   polonius_output,
        .               };
        .           
        .               // Compute and report region errors, if any.
    2,886 ( 0.00%)      mbcx.report_region_errors(nll_errors);
        .           
        .               let results = BorrowckResults {
    5,772 ( 0.00%)          ever_inits: flow_ever_inits,
    7,696 ( 0.00%)          uninits: flow_uninits,
   10,582 ( 0.00%)          borrows: flow_borrows,
        .               };
        .           
    5,772 ( 0.00%)      mbcx.report_move_errors(move_errors);
        .           
      962 ( 0.00%)      rustc_mir_dataflow::visit_results(
        .                   body,
      962 ( 0.00%)          traversal::reverse_postorder(body).map(|(bb, _)| bb),
        .                   &results,
        .                   &mut mbcx,
        .               );
        .           
        .               // Convert any reservation warnings into lints.
        .               let reservation_warnings = mem::take(&mut mbcx.reservation_warnings);
        .               for (_, (place, span, location, bk, borrow)) in reservation_warnings {
        .                   let mut initial_diag = mbcx.report_conflicting_borrow(location, (place, span), bk, &borrow);
-- line 381 ----------------------------------------
-- line 406 ----------------------------------------
        .               // For each non-user used mutable variable, check if it's been assigned from
        .               // a user-declared local. If so, then put that local into the used_mut set.
        .               // Note that this set is expected to be small - only upvars from closures
        .               // would have a chance of erroneously adding non-user-defined mutable vars
        .               // to the set.
        .               let temporary_used_locals: FxHashSet<Local> = mbcx
        .                   .used_mut
        .                   .iter()
      962 ( 0.00%)          .filter(|&local| !mbcx.body.local_decls[*local].is_user_variable())
        .                   .cloned()
        .                   .collect();
        .               // For the remaining unused locals that are marked as mutable, we avoid linting any that
        .               // were never initialized. These locals may have been removed as unreachable code; or will be
        .               // linted as unused variables.
        .               let unused_mut_locals =
      962 ( 0.00%)          mbcx.body.mut_vars_iter().filter(|local| !mbcx.used_mut.contains(local)).collect();
    3,848 ( 0.00%)      mbcx.gather_used_muts(temporary_used_locals, unused_mut_locals);
        .           
        .               debug!("mbcx.used_mut: {:?}", mbcx.used_mut);
    3,848 ( 0.00%)      let used_mut = mbcx.used_mut;
      962 ( 0.00%)      for local in mbcx.body.mut_vars_and_args_iter().filter(|local| !used_mut.contains(local)) {
      102 ( 0.00%)          let local_decl = &mbcx.body.local_decls[local];
      612 ( 0.00%)          let lint_root = match &mbcx.body.source_scopes[local_decl.source_info.scope].local_data {
        .                       ClearCrossCrate::Set(data) => data.lint_root,
        .                       _ => continue,
        .                   };
        .           
        .                   // Skip over locals that begin with an underscore or have no name
      306 ( 0.00%)          match mbcx.local_names[local] {
        .                       Some(name) => {
        .                           if name.as_str().starts_with('_') {
        .                               continue;
        .                           }
        .                       }
        .                       None => continue,
        .                   }
        .           
-- line 442 ----------------------------------------
-- line 455 ----------------------------------------
        .                               String::new(),
        .                               Applicability::MachineApplicable,
        .                           )
        .                           .emit();
        .                   })
        .               }
        .           
        .               // Buffer any move errors that we collected and de-duplicated.
    8,658 ( 0.00%)      for (_, (_, diag)) in mbcx.move_error_reported {
        .                   diag.buffer(&mut mbcx.errors_buffer);
        .               }
        .           
      962 ( 0.00%)      if !mbcx.errors_buffer.is_empty() {
        .                   mbcx.errors_buffer.sort_by_key(|diag| diag.sort_span);
        .           
        .                   for diag in mbcx.errors_buffer.drain(..) {
        .                       mbcx.infcx.tcx.sess.diagnostic().emit_diagnostic(&diag);
        .                   }
        .               }
        .           
        .               let result = BorrowCheckResult {
    3,848 ( 0.00%)          concrete_opaque_types: opaque_type_values,
    4,810 ( 0.00%)          closure_requirements: opt_closure_req,
    5,772 ( 0.00%)          used_mut_upvars: mbcx.used_mut_upvars,
        .               };
        .           
    1,924 ( 0.00%)      let body_with_facts = if return_body_with_facts {
        .                   let output_facts = mbcx.polonius_output.expect("Polonius output was not computed");
        .                   Some(Box::new(BodyWithBorrowckFacts {
        .                       body: body_owned,
        .                       input_facts: *polonius_input.expect("Polonius input facts were not generated"),
        .                       output_facts,
        .                       location_table: location_table_owned,
        .                   }))
        .               } else {
        .                   None
        .               };
        .           
        .               debug!("do_mir_borrowck: result = {:#?}", result);
        .           
   13,468 ( 0.00%)      (result, body_with_facts)
   11,544 ( 0.00%)  }
        .           
        .           /// A `Body` with information computed by the borrow checker. This struct is
        .           /// intended to be consumed by compiler consumers.
        .           ///
        .           /// We need to include the MIR body here because the region identifiers must
        .           /// match the ones in the Polonius facts.
        .           pub struct BodyWithBorrowckFacts<'tcx> {
        .               /// A mir body that contains region identifiers.
-- line 504 ----------------------------------------
-- line 608 ----------------------------------------
        .           // Check that:
        .           // 1. assignments are always made to mutable locations (FIXME: does that still really go here?)
        .           // 2. loans made in overlapping scopes do not conflict
        .           // 3. assignments do not affect things loaned out as immutable
        .           // 4. moves do not affect things loaned out in any way
        .           impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx> {
        .               type FlowState = Flows<'cx, 'tcx>;
        .           
  740,124 ( 0.01%)      fn visit_statement_before_primary_effect(
        .                   &mut self,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   stmt: &'cx Statement<'tcx>,
        .                   location: Location,
        .               ) {
        .                   debug!("MirBorrowckCtxt::process_statement({:?}, {:?}): {:?}", location, stmt, flow_state);
        .                   let span = stmt.source_info.span;
        .           
        .                   self.check_activations(location, span, flow_state);
        .           
  411,180 ( 0.00%)          match &stmt.kind {
   73,960 ( 0.00%)              StatementKind::Assign(box (lhs, ref rhs)) => {
        .                           self.consume_rvalue(location, (rhs, span), flow_state);
        .           
  147,920 ( 0.00%)                  self.mutate_place(location, (*lhs, span), Shallow(None), flow_state);
        .                       }
      660 ( 0.00%)              StatementKind::FakeRead(box (_, ref place)) => {
        .                           // Read for match doesn't access any memory and is used to
        .                           // assert that a place is safe and live. So we don't have to
        .                           // do any checks here.
        .                           //
        .                           // FIXME: Remove check that the place is initialized. This is
        .                           // needed for now because matches don't have never patterns yet.
        .                           // So this is the only place we prevent
        .                           //      let x: !;
        .                           //      match x {};
        .                           // from compiling.
    2,640 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
    5,940 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .                       StatementKind::SetDiscriminant { place, variant_index: _ } => {
        .                           self.mutate_place(location, (**place, span), Shallow(None), flow_state);
        .                       }
        .                       StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {
        .                           ..
-- line 655 ----------------------------------------
-- line 663 ----------------------------------------
        .                       | StatementKind::Coverage(..)
        .                       | StatementKind::AscribeUserType(..)
        .                       | StatementKind::Retag { .. }
        .                       | StatementKind::StorageLive(..) => {
        .                           // `Nop`, `AscribeUserType`, `Retag`, and `StorageLive` are irrelevant
        .                           // to borrow check.
        .                       }
        .                       StatementKind::StorageDead(local) => {
  135,372 ( 0.00%)                  self.access_place(
        .                               location,
  248,182 ( 0.00%)                      (Place::from(*local), span),
        .                               (Shallow(None), Write(WriteKind::StorageDeadOrDrop)),
        .                               LocalMutationIsAllowed::Yes,
        .                               flow_state,
        .                           );
        .                       }
        .                   }
  657,888 ( 0.01%)      }
        .           
  178,048 ( 0.00%)      fn visit_terminator_before_primary_effect(
        .                   &mut self,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   term: &'cx Terminator<'tcx>,
        .                   loc: Location,
        .               ) {
        .                   debug!("MirBorrowckCtxt::process_terminator({:?}, {:?}): {:?}", loc, term, flow_state);
        .                   let span = term.source_info.span;
        .           
        .                   self.check_activations(loc, span, flow_state);
        .           
  111,280 ( 0.00%)          match term.kind {
    6,508 ( 0.00%)              TerminatorKind::SwitchInt { ref discr, switch_ty: _, targets: _ } => {
    6,508 ( 0.00%)                  self.consume_operand(loc, (discr, span), flow_state);
        .                       }
    3,064 ( 0.00%)              TerminatorKind::Drop { place, target: _, unwind: _ } => {
        .                           debug!(
        .                               "visit_terminator_drop \
        .                                loc: {:?} term: {:?} place: {:?} span: {:?}",
        .                               loc, term, place, span
        .                           );
        .           
    9,192 ( 0.00%)                  self.access_place(
        .                               loc,
   13,788 ( 0.00%)                      (place, span),
        .                               (AccessDepth::Drop, Write(WriteKind::StorageDeadOrDrop)),
        .                               LocalMutationIsAllowed::Yes,
        .                               flow_state,
        .                           );
        .                       }
        .                       TerminatorKind::DropAndReplace {
       36 ( 0.00%)                  place: drop_place,
       18 ( 0.00%)                  value: ref new_value,
        .                           target: _,
        .                           unwind: _,
        .                       } => {
      288 ( 0.00%)                  self.mutate_place(loc, (drop_place, span), Deep, flow_state);
        .                           self.consume_operand(loc, (new_value, span), flow_state);
        .                       }
        .                       TerminatorKind::Call {
    7,035 ( 0.00%)                  ref func,
        .                           ref args,
        .                           ref destination,
        .                           cleanup: _,
        .                           from_hir_call: _,
        .                           fn_span: _,
        .                       } => {
   18,760 ( 0.00%)                  self.consume_operand(loc, (func, span), flow_state);
        .                           for arg in args {
   19,602 ( 0.00%)                      self.consume_operand(loc, (arg, span), flow_state);
        .                           }
    9,327 ( 0.00%)                  if let Some((dest, _ /*bb*/)) = *destination {
   27,504 ( 0.00%)                      self.mutate_place(loc, (dest, span), Deep, flow_state);
        .                           }
        .                       }
   66,126 ( 0.00%)              TerminatorKind::Assert { ref cond, expected: _, ref msg, target: _, cleanup: _ } => {
   11,021 ( 0.00%)                  self.consume_operand(loc, (cond, span), flow_state);
        .                           use rustc_middle::mir::AssertKind;
   29,854 ( 0.00%)                  if let AssertKind::BoundsCheck { ref len, ref index } = *msg {
   26,040 ( 0.00%)                      self.consume_operand(loc, (len, span), flow_state);
        .                               self.consume_operand(loc, (index, span), flow_state);
        .                           }
        .                       }
        .           
        .                       TerminatorKind::Yield { ref value, resume: _, resume_arg, drop: _ } => {
        .                           self.consume_operand(loc, (value, span), flow_state);
        .                           self.mutate_place(loc, (resume_arg, span), Deep, flow_state);
        .                       }
-- line 749 ----------------------------------------
-- line 790 ----------------------------------------
        .                       | TerminatorKind::Resume
        .                       | TerminatorKind::Return
        .                       | TerminatorKind::GeneratorDrop
        .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
        .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ } => {
        .                           // no data used, thus irrelevant to borrowck
        .                       }
        .                   }
  144,056 ( 0.00%)      }
        .           
  155,792 ( 0.00%)      fn visit_terminator_after_primary_effect(
        .                   &mut self,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   term: &'cx Terminator<'tcx>,
        .                   loc: Location,
        .               ) {
   22,256 ( 0.00%)          let span = term.source_info.span;
        .           
   89,024 ( 0.00%)          match term.kind {
        .                       TerminatorKind::Yield { value: _, resume: _, resume_arg: _, drop: _ } => {
        .                           if self.movable_generator {
        .                               // Look for any active borrows to locals
        .                               let borrow_set = self.borrow_set.clone();
        .                               for i in flow_state.borrows.iter() {
        .                                   let borrow = &borrow_set[i];
        .                                   self.check_for_local_borrow(borrow, span);
        .                               }
-- line 816 ----------------------------------------
-- line 817 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       TerminatorKind::Resume | TerminatorKind::Return | TerminatorKind::GeneratorDrop => {
        .                           // Returning from the function implicitly kills storage for all locals and statics.
        .                           // Often, the storage will already have been killed by an explicit
        .                           // StorageDead, but we don't always emit those (notably on unwind paths),
        .                           // so this "extra check" serves as a kind of backup.
    3,544 ( 0.00%)                  let borrow_set = self.borrow_set.clone();
        .                           for i in flow_state.borrows.iter() {
        .                               let borrow = &borrow_set[i];
        .                               self.check_for_invalidation_at_exit(loc, borrow, span);
        .                           }
        .                       }
        .           
        .                       TerminatorKind::Abort
        .                       | TerminatorKind::Assert { .. }
-- line 833 ----------------------------------------
-- line 836 ----------------------------------------
        .                       | TerminatorKind::DropAndReplace { .. }
        .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
        .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ }
        .                       | TerminatorKind::Goto { .. }
        .                       | TerminatorKind::SwitchInt { .. }
        .                       | TerminatorKind::Unreachable
        .                       | TerminatorKind::InlineAsm { .. } => {}
        .                   }
  178,048 ( 0.00%)      }
        .           }
        .           
        .           use self::AccessDepth::{Deep, Shallow};
        .           use self::ReadOrWrite::{Activation, Read, Reservation, Write};
        .           
        .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           enum ArtificialField {
        .               ArrayLength,
-- line 852 ----------------------------------------
-- line 913 ----------------------------------------
        .           /// When checking permissions for a place access, this flag is used to indicate that an immutable
        .           /// local place can be mutated.
        .           //
        .           // FIXME: @nikomatsakis suggested that this flag could be removed with the following modifications:
        .           // - Merge `check_access_permissions()` and `check_if_reassignment_to_immutable_state()`.
        .           // - Split `is_mutable()` into `is_assignable()` (can be directly assigned) and
        .           //   `is_declared_mutable()`.
        .           // - Take flow state into consideration in `is_assignable()` for local variables.
   35,218 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           enum LocalMutationIsAllowed {
        .               Yes,
        .               /// We want use of immutable upvars to cause a "write to immutable upvar"
        .               /// error, not an "reassignment" error.
        .               ExceptUpvars,
        .               No,
        .           }
        .           
-- line 929 ----------------------------------------
-- line 970 ----------------------------------------
        .               }
        .           
        .               /// Checks an access to the given place to see if it is allowed. Examines the set of borrows
        .               /// that are in scope, as well as which paths have been initialized, to ensure that (a) the
        .               /// place is initialized and (b) it is not borrowed in some way that would prevent this
        .               /// access.
        .               ///
        .               /// Returns `true` if an error is reported.
1,846,032 ( 0.02%)      fn access_place(
        .                   &mut self,
        .                   location: Location,
        .                   place_span: (Place<'tcx>, Span),
        .                   kind: (AccessDepth, ReadOrWrite),
        .                   is_local_mutation_allowed: LocalMutationIsAllowed,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   let (sd, rw) = kind;
        .           
  461,508 ( 0.00%)          if let Activation(_, borrow_index) = rw {
    1,126 ( 0.00%)              if self.reservation_error_reported.contains(&place_span.0) {
        .                           debug!(
        .                               "skipping access_place for activation of invalid reservation \
        .                                place: {:?} borrow_index: {:?}",
        .                               place_span.0, borrow_index
        .                           );
        .                           return;
        .                       }
        .                   }
        .           
        .                   // Check is_empty() first because it's the common case, and doing that
        .                   // way we avoid the clone() call.
  115,377 ( 0.00%)          if !self.access_place_error_reported.is_empty()
        .                       && self.access_place_error_reported.contains(&(place_span.0, place_span.1))
        .                   {
        .                       debug!(
        .                           "access_place: suppressing error place_span=`{:?}` kind=`{:?}`",
        .                           place_span, kind
        .                       );
        .                       return;
        .                   }
        .           
  692,262 ( 0.01%)          let mutability_error = self.check_access_permissions(
  461,508 ( 0.00%)              place_span,
        .                       rw,
        .                       is_local_mutation_allowed,
        .                       flow_state,
        .                       location,
        .                   );
        .                   let conflict_error =
1,269,147 ( 0.01%)              self.check_access_for_conflict(location, place_span, sd, rw, flow_state);
        .           
  346,131 ( 0.00%)          if let (Activation(_, borrow_idx), true) = (kind.1, conflict_error) {
        .                       // Suppress this warning when there's an error being emitted for the
        .                       // same borrow: fixing the error is likely to fix the warning.
        .                       self.reservation_warnings.remove(&borrow_idx);
        .                   }
        .           
  346,131 ( 0.00%)          if conflict_error || mutability_error {
        .                       debug!("access_place: logging error place_span=`{:?}` kind=`{:?}`", place_span, kind);
        .           
        .                       self.access_place_error_reported.insert((place_span.0, place_span.1));
        .                   }
  923,016 ( 0.01%)      }
        .           
        .               fn check_access_for_conflict(
        .                   &mut self,
        .                   location: Location,
        .                   place_span: (Place<'tcx>, Span),
        .                   sd: AccessDepth,
        .                   rw: ReadOrWrite,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) -> bool {
        .                   debug!(
        .                       "check_access_for_conflict(location={:?}, place_span={:?}, sd={:?}, rw={:?})",
        .                       location, place_span, sd, rw,
        .                   );
        .           
  115,377 ( 0.00%)          let mut error_reported = false;
  346,131 ( 0.00%)          let tcx = self.infcx.tcx;
        .                   let body = self.body;
  230,754 ( 0.00%)          let borrow_set = self.borrow_set.clone();
        .           
        .                   // Use polonius output if it has been enabled.
  230,754 ( 0.00%)          let polonius_output = self.polonius_output.clone();
        .                   let borrows_in_scope = if let Some(polonius) = &polonius_output {
        .                       let location = self.location_table.start_index(location);
        .                       Either::Left(polonius.errors_at(location).iter().copied())
        .                   } else {
        .                       Either::Right(flow_state.borrows.iter())
        .                   };
        .           
1,499,901 ( 0.01%)          each_borrow_involving_path(
        .                       self,
        .                       tcx,
        .                       body,
        .                       location,
  692,262 ( 0.01%)              (sd, place_span.0),
        .                       &borrow_set,
  692,262 ( 0.01%)              borrows_in_scope,
1,276,523 ( 0.01%)              |this, borrow_index, borrow| match (rw, borrow.kind) {
        .                           // Obviously an activation is compatible with its own
        .                           // reservation (or even prior activating uses of same
        .                           // borrow); so don't check if they interfere.
        .                           //
        .                           // NOTE: *reservations* do conflict with themselves;
        .                           // thus aren't injecting unsoundenss w/ this check.)
      563 ( 0.00%)                  (Activation(_, activating), _) if activating == borrow_index => {
        .                               debug!(
        .                                   "check_access_for_conflict place_span: {:?} sd: {:?} rw: {:?} \
        .                                    skipping {:?} b/c activation of same borrow_index",
        .                                   place_span,
        .                                   sd,
        .                                   rw,
        .                                   (borrow_index, borrow),
        .                               );
-- line 1084 ----------------------------------------
-- line 1179 ----------------------------------------
        .                                   }
        .                               }
        .                               Control::Break
        .                           }
        .                       },
        .                   );
        .           
        .                   error_reported
  346,131 ( 0.00%)      }
        .           
  392,900 ( 0.00%)      fn mutate_place(
        .                   &mut self,
        .                   location: Location,
        .                   place_span: (Place<'tcx>, Span),
        .                   kind: AccessDepth,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   // Write of P[i] or *P requires P init'd.
  353,610 ( 0.00%)          self.check_if_assigned_path_is_moved(location, place_span, flow_state);
        .           
        .                   // Special case: you can assign an immutable local variable
        .                   // (e.g., `x = ...`) so long as it has never been initialized
        .                   // before (at this point in the flow).
   39,290 ( 0.00%)          if let Some(local) = place_span.0.as_local() {
  154,776 ( 0.00%)              if let Mutability::Not = self.body.local_decls[local].mutability {
        .                           // check for reassignments to immutable local variables
        .                           self.check_if_reassignment_to_immutable_state(
        .                               location, local, place_span, flow_state,
        .                           );
        .                           return;
        .                       }
        .                   }
        .           
        .                   // Otherwise, use the normal access permission rules.
  413,328 ( 0.00%)          self.access_place(
        .                       location,
  137,776 ( 0.00%)              place_span,
        .                       (kind, Write(WriteKind::Mutate)),
        .                       LocalMutationIsAllowed::No,
        .                       flow_state,
        .                   );
  314,320 ( 0.00%)      }
        .           
        .               fn consume_rvalue(
        .                   &mut self,
        .                   location: Location,
        .                   (rvalue, span): (&'cx Rvalue<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
  221,880 ( 0.00%)          match *rvalue {
    9,483 ( 0.00%)              Rvalue::Ref(_ /*rgn*/, bk, place) => {
   36,368 ( 0.00%)                  let access_kind = match bk {
        .                               BorrowKind::Shallow => {
        .                                   (Shallow(Some(ArtificialField::ShallowBorrow)), Read(ReadKind::Borrow(bk)))
        .                               }
        .                               BorrowKind::Shared => (Deep, Read(ReadKind::Borrow(bk))),
        .                               BorrowKind::Unique | BorrowKind::Mut { .. } => {
        .                                   let wk = WriteKind::MutableBorrow(bk);
    1,564 ( 0.00%)                          if allow_two_phase_borrow(bk) {
        .                                       (Deep, Reservation(wk))
        .                                   } else {
        .                                       (Deep, Write(wk))
        .                                   }
        .                               }
        .                           };
        .           
   66,381 ( 0.00%)                  self.access_place(
        .                               location,
   12,644 ( 0.00%)                      (place, span),
        .                               access_kind,
        .                               LocalMutationIsAllowed::No,
        .                               flow_state,
        .                           );
        .           
        .                           let action = if bk == BorrowKind::Shallow {
        .                               InitializationRequiringAction::MatchOn
        .                           } else {
        .                               InitializationRequiringAction::Borrow
        .                           };
        .           
   22,127 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               action,
   22,127 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .           
       66 ( 0.00%)              Rvalue::AddressOf(mutability, place) => {
       22 ( 0.00%)                  let access_kind = match mutability {
        .                               Mutability::Mut => (
        .                                   Deep,
        .                                   Write(WriteKind::MutableBorrow(BorrowKind::Mut {
        .                                       allow_two_phase_borrow: false,
        .                                   })),
        .                               ),
        .                               Mutability::Not => (Deep, Read(ReadKind::Borrow(BorrowKind::Shared))),
        .                           };
        .           
      187 ( 0.00%)                  self.access_place(
        .                               location,
       44 ( 0.00%)                      (place, span),
        .                               access_kind,
        .                               LocalMutationIsAllowed::No,
        .                               flow_state,
        .                           );
        .           
       77 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Borrow,
       77 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .           
        .                       Rvalue::ThreadLocalRef(_) => {}
        .           
        .                       Rvalue::Use(ref operand)
        .                       | Rvalue::Repeat(ref operand, _)
-- line 1297 ----------------------------------------
-- line 1302 ----------------------------------------
        .                       }
        .           
        .                       Rvalue::Len(place) | Rvalue::Discriminant(place) => {
        .                           let af = match *rvalue {
        .                               Rvalue::Len(..) => Some(ArtificialField::ArrayLength),
        .                               Rvalue::Discriminant(..) => None,
        .                               _ => unreachable!(),
        .                           };
   45,408 ( 0.00%)                  self.access_place(
        .                               location,
   11,352 ( 0.00%)                      (place, span),
        .                               (Shallow(af), Read(ReadKind::Copy)),
        .                               LocalMutationIsAllowed::No,
        .                               flow_state,
        .                           );
   19,866 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
   19,866 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .           
        .                       Rvalue::BinaryOp(_bin_op, box (ref operand1, ref operand2))
        .                       | Rvalue::CheckedBinaryOp(_bin_op, box (ref operand1, ref operand2)) => {
  122,600 ( 0.00%)                  self.consume_operand(location, (operand1, span), flow_state);
   85,820 ( 0.00%)                  self.consume_operand(location, (operand2, span), flow_state);
        .                       }
        .           
        .                       Rvalue::NullaryOp(_op, _ty) => {
        .                           // nullary ops take no dynamic input; no borrowck effect.
        .                       }
        .           
        .                       Rvalue::Aggregate(ref aggregate_kind, ref operands) => {
        .                           // We need to report back the list of mutable upvars that were
        .                           // moved into the closure and subsequently used by the closure,
        .                           // in order to populate our used_mut set.
    4,017 ( 0.00%)                  match **aggregate_kind {
        .                               AggregateKind::Closure(def_id, _) | AggregateKind::Generator(def_id, _, _) => {
        .                                   let BorrowCheckResult { used_mut_upvars, .. } =
      352 ( 0.00%)                              self.infcx.tcx.mir_borrowck(def_id.expect_local());
        .                                   debug!("{:?} used_mut_upvars={:?}", def_id, used_mut_upvars);
        .                                   for field in used_mut_upvars {
        .                                       self.propagate_closure_used_mut_upvar(&operands[field.index()]);
        .                                   }
        .                               }
        .                               AggregateKind::Adt(..)
        .                               | AggregateKind::Array(..)
        .                               | AggregateKind::Tuple { .. } => (),
-- line 1350 ----------------------------------------
-- line 1448 ----------------------------------------
        .                               }
        .                               _ => propagate_closure_used_mut_place(self, place),
        .                           }
        .                       }
        .                       Operand::Constant(..) => {}
        .                   }
        .               }
        .           
  784,524 ( 0.01%)      fn consume_operand(
        .                   &mut self,
        .                   location: Location,
        .                   (operand, span): (&'cx Operand<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
  307,995 ( 0.00%)          match *operand {
   54,840 ( 0.00%)              Operand::Copy(place) => {
        .                           // copy of place: check if this is "copy of frozen path"
        .                           // (FIXME: see check_loans.rs)
  109,708 ( 0.00%)                  self.access_place(
        .                               location,
   91,400 ( 0.00%)                      (place, span),
        .                               (Deep, Read(ReadKind::Copy)),
        .                               LocalMutationIsAllowed::No,
        .                               flow_state,
        .                           );
        .           
        .                           // Finally, check if path was already moved.
       28 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
       24 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
   95,958 ( 0.00%)              Operand::Move(place) => {
        .                           // move of place: check if this is move of already borrowed path
  230,508 ( 0.00%)                  self.access_place(
        .                               location,
  159,930 ( 0.00%)                      (place, span),
        .                               (Deep, Write(WriteKind::Move)),
        .                               LocalMutationIsAllowed::Yes,
        .                               flow_state,
        .                           );
        .           
        .                           // Finally, check if path was already moved.
    8,808 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
    6,606 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .                       Operand::Constant(_) => {}
        .                   }
  523,016 ( 0.00%)      }
        .           
        .               /// Checks whether a borrow of this place is invalidated when the function
        .               /// exits
        .               fn check_for_invalidation_at_exit(
        .                   &mut self,
        .                   location: Location,
        .                   borrow: &BorrowData<'tcx>,
        .                   span: Span,
        .               ) {
        .                   debug!("check_for_invalidation_at_exit({:?})", borrow);
      145 ( 0.00%)          let place = borrow.borrowed_place;
        .                   let mut root_place = PlaceRef { local: place.local, projection: &[] };
        .           
        .                   // FIXME(nll-rfc#40): do more precise destructor tracking here. For now
        .                   // we just know that all locals are dropped at function exit (otherwise
        .                   // we'll have a memory leak) and assume that all statics have a destructor.
        .                   //
        .                   // FIXME: allow thread-locals to borrow other thread locals?
        .           
        .                   let (might_be_alive, will_be_dropped) =
    1,015 ( 0.00%)              if self.body.local_decls[root_place.local].is_ref_to_thread_local() {
        .                           // Thread-locals might be dropped after the function exits
        .                           // We have to dereference the outer reference because
        .                           // borrows don't conflict behind shared references.
        .                           root_place.projection = DEREF_PROJECTION;
        .                           (true, true)
        .                       } else {
        .                           (false, self.locals_are_invalidated_at_exit)
        .                       };
        .           
      725 ( 0.00%)          if !will_be_dropped {
        .                       debug!("place_is_invalidated_at_exit({:?}) - won't be dropped", place);
        .                       return;
        .                   }
        .           
        .                   let sd = if might_be_alive { Deep } else { Shallow(None) };
        .           
    1,740 ( 0.00%)          if places_conflict::borrow_conflicts_with_place(
      290 ( 0.00%)              self.infcx.tcx,
        .                       &self.body,
        .                       place,
        .                       borrow.kind,
      580 ( 0.00%)              root_place,
        .                       sd,
        .                       places_conflict::PlaceConflictBias::Overlap,
        .                   ) {
        .                       debug!("check_for_invalidation_at_exit({:?}): INVALID", place);
        .                       // FIXME: should be talking about the region lifetime instead
        .                       // of just a span here.
        .                       let span = self.infcx.tcx.sess.source_map().end_point(span);
        .                       self.report_borrowed_value_does_not_live_long_enough(
-- line 1553 ----------------------------------------
-- line 1573 ----------------------------------------
        .                       err.buffer(&mut self.errors_buffer);
        .                   }
        .               }
        .           
        .               fn check_activations(&mut self, location: Location, span: Span, flow_state: &Flows<'cx, 'tcx>) {
        .                   // Two-phase borrow support: For each activation that is newly
        .                   // generated at this statement, check if it interferes with
        .                   // another borrow.
  208,984 ( 0.00%)          let borrow_set = self.borrow_set.clone();
  396,275 ( 0.00%)          for &borrow_index in borrow_set.activations_at_location(location) {
        .                       let borrow = &borrow_set[borrow_index];
        .           
        .                       // only mutable borrows should be 2-phase
    2,815 ( 0.00%)              assert!(match borrow.kind {
        .                           BorrowKind::Shared | BorrowKind::Shallow => false,
        .                           BorrowKind::Unique | BorrowKind::Mut { .. } => true,
        .                       });
        .           
    6,756 ( 0.00%)              self.access_place(
        .                           location,
    3,378 ( 0.00%)                  (borrow.borrowed_place, span),
    5,067 ( 0.00%)                  (Deep, Activation(WriteKind::MutableBorrow(borrow.kind), borrow_index)),
        .                           LocalMutationIsAllowed::No,
        .                           flow_state,
        .                       );
        .                       // We do not need to call `check_if_path_or_subpath_is_moved`
        .                       // again, as we already called it when we made the
        .                       // initial reservation.
        .                   }
        .               }
-- line 1602 ----------------------------------------
-- line 1606 ----------------------------------------
        .                   location: Location,
        .                   local: Local,
        .                   place_span: (Place<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   debug!("check_if_reassignment_to_immutable_state({:?})", local);
        .           
        .                   // Check if any of the initializiations of `local` have happened yet:
   29,076 ( 0.00%)          if let Some(init_index) = self.is_local_ever_initialized(local, flow_state) {
        .                       // And, if so, report an error.
        .                       let init = &self.move_data.inits[init_index];
        .                       let span = init.span(&self.body);
        .                       self.report_illegal_reassignment(location, place_span, span, place_span.0);
        .                   }
        .               }
        .           
  747,786 ( 0.01%)      fn check_if_full_path_is_moved(
        .                   &mut self,
        .                   location: Location,
        .                   desired_action: InitializationRequiringAction,
        .                   place_span: (PlaceRef<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   let maybe_uninits = &flow_state.uninits;
        .           
-- line 1630 ----------------------------------------
-- line 1660 ----------------------------------------
        .                   // Therefore, if we seek out the *closest* prefix for which we
        .                   // have a MovePath, that should capture the initialization
        .                   // state for the place scenario.
        .                   //
        .                   // This code covers scenarios 1, 2, and 3.
        .           
        .                   debug!("check_if_full_path_is_moved place: {:?}", place_span.0);
        .                   let (prefix, mpi) = self.move_path_closest_to(place_span.0);
   57,522 ( 0.00%)          if maybe_uninits.contains(mpi) {
        .                       self.report_use_of_moved_or_uninitialized(
        .                           location,
        .                           desired_action,
        .                           (prefix, place_span.0, place_span.1),
        .                           mpi,
        .                       );
        .                   } // Only query longest prefix with a MovePath, not further
        .                   // ancestors; dataflow recurs on children when parents
        .                   // move (to support partial (re)inits).
        .                   //
        .                   // (I.e., querying parents breaks scenario 7; but may want
        .                   // to do such a query based on partial-init feature-gate.)
  460,176 ( 0.00%)      }
        .           
        .               /// Subslices correspond to multiple move paths, so we iterate through the
        .               /// elements of the base array. For each element we check
        .               ///
        .               /// * Does this element overlap with our slice.
        .               /// * Is any part of it uninitialized.
        .               fn check_if_subslice_element_is_moved(
        .                   &mut self,
-- line 1689 ----------------------------------------
-- line 1719 ----------------------------------------
        .                                       return; // don't bother finding other problems.
        .                                   }
        .                               }
        .                           }
        .                       }
        .                   }
        .               }
        .           
  626,362 ( 0.01%)      fn check_if_path_or_subpath_is_moved(
        .                   &mut self,
        .                   location: Location,
        .                   desired_action: InitializationRequiringAction,
        .                   place_span: (PlaceRef<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
  113,884 ( 0.00%)          let maybe_uninits = &flow_state.uninits;
        .           
        .                   // Bad scenarios:
        .                   //
        .                   // 1. Move of `a.b.c`, use of `a` or `a.b`
        .                   //    partial initialization support, one might have `a.x`
        .                   //    initialized but not `a.b`.
        .                   // 2. All bad scenarios from `check_if_full_path_is_moved`
        .                   //
-- line 1742 ----------------------------------------
-- line 1743 ----------------------------------------
        .                   // OK scenarios:
        .                   //
        .                   // 3. Move of `a.b.c`, use of `a.b.d`
        .                   // 4. Uninitialized `a.x`, initialized `a.b`, use of `a.b`
        .                   // 5. Copied `(a.b: &_)`, use of `*(a.b).c`; note that `a.b`
        .                   //    must have been initialized for the use to be sound.
        .                   // 6. Move of `a.b.c` then reinit of `a.b.c.d`, use of `a.b.c.d`
        .           
  398,594 ( 0.00%)          self.check_if_full_path_is_moved(location, desired_action, place_span, flow_state);
        .           
  100,172 ( 0.00%)          if let Some((place_base, ProjectionElem::Subslice { from, to, from_end: false })) =
   56,942 ( 0.00%)              place_span.0.last_projection()
        .                   {
        .                       let place_ty = place_base.ty(self.body(), self.infcx.tcx);
        .                       if let ty::Array(..) = place_ty.ty.kind() {
        .                           self.check_if_subslice_element_is_moved(
        .                               location,
        .                               desired_action,
        .                               (place_base, place_span.1),
        .                               maybe_uninits,
-- line 1762 ----------------------------------------
-- line 1772 ----------------------------------------
        .                   //
        .                   // (Distinct from handling of scenarios 1+2+4 above because
        .                   // `place` does not interfere with suffixes of its prefixes,
        .                   // e.g., `a.b.c` does not interfere with `a.b.d`)
        .                   //
        .                   // This code covers scenario 1.
        .           
        .                   debug!("check_if_path_or_subpath_is_moved place: {:?}", place_span.0);
  227,768 ( 0.00%)          if let Some(mpi) = self.move_path_for_place(place_span.0) {
  195,576 ( 0.00%)              let uninit_mpi = self
        .                           .move_data
        .                           .find_in_move_path_or_its_descendants(mpi, |mpi| maybe_uninits.contains(mpi));
        .           
   97,788 ( 0.00%)              if let Some(uninit_mpi) = uninit_mpi {
        .                           self.report_use_of_moved_or_uninitialized(
        .                               location,
        .                               desired_action,
        .                               (place_span.0, place_span.0, place_span.1),
        .                               uninit_mpi,
        .                           );
        .                           return; // don't bother finding other problems.
        .                       }
        .                   }
  455,536 ( 0.00%)      }
        .           
        .               /// Currently MoveData does not store entries for all places in
        .               /// the input MIR. For example it will currently filter out
        .               /// places that are Copy; thus we do not track places of shared
        .               /// reference type. This routine will walk up a place along its
        .               /// prefixes, searching for a foundational place that *is*
        .               /// tracked in the MoveData.
        .               ///
        .               /// An Err result includes a tag indicated why the search failed.
        .               /// Currently this can only occur if the place is built off of a
        .               /// static variable, as we do not track those in the MoveData.
        .               fn move_path_closest_to(&mut self, place: PlaceRef<'tcx>) -> (PlaceRef<'tcx>, MovePathIndex) {
  747,786 ( 0.01%)          match self.move_data.rev_lookup.find(place) {
        .                       LookupResult::Parent(Some(mpi)) | LookupResult::Exact(mpi) => {
        .                           (self.move_data.move_paths[mpi].place.as_ref(), mpi)
        .                       }
        .                       LookupResult::Parent(None) => panic!("should have move path for every Local"),
        .                   }
        .               }
        .           
        .               fn move_path_for_place(&mut self, place: PlaceRef<'tcx>) -> Option<MovePathIndex> {
        .                   // If returns None, then there is no move path corresponding
        .                   // to a direct owner of `place` (which means there is nothing
        .                   // that borrowck tracks for its analysis).
        .           
  513,014 ( 0.00%)          match self.move_data.rev_lookup.find(place) {
        .                       LookupResult::Parent(_) => None,
        .                       LookupResult::Exact(mpi) => Some(mpi),
        .                   }
        .               }
        .           
        .               fn check_if_assigned_path_is_moved(
        .                   &mut self,
        .                   location: Location,
        .                   (place, span): (Place<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   debug!("check_if_assigned_path_is_moved place: {:?}", place);
        .           
        .                   // None case => assigning to `x` does not require `x` be initialized.
      596 ( 0.00%)          for (place_base, elem) in place.iter_projections().rev() {
    4,672 ( 0.00%)              match elem {
        .                           ProjectionElem::Index(_/*operand*/) |
        .                           ProjectionElem::ConstantIndex { .. } |
        .                           // assigning to P[i] requires P to be valid.
        .                           ProjectionElem::Downcast(_/*adt_def*/, _/*variant_idx*/) =>
        .                           // assigning to (P->variant) is okay if assigning to `P` is okay
        .                           //
        .                           // FIXME: is this true even if P is an adt with a dtor?
        .                           { }
        .           
        .                           // assigning to (*P) requires P to be initialized
        .                           ProjectionElem::Deref => {
    4,060 ( 0.00%)                      self.check_if_full_path_is_moved(
        .                                   location, InitializationRequiringAction::Use,
    3,480 ( 0.00%)                          (place_base, span), flow_state);
        .                               // (base initialized; no need to
        .                               // recur further)
        .                               break;
        .                           }
        .           
        .                           ProjectionElem::Subslice { .. } => {
        .                               panic!("we don't allow assignments to subslices, location: {:?}",
        .                                      location);
        .                           }
        .           
        .                           ProjectionElem::Field(..) => {
        .                               // if type of `P` has a dtor, then
        .                               // assigning to `P.f` requires `P` itself
        .                               // be already initialized
        .                               let tcx = self.infcx.tcx;
       73 ( 0.00%)                      let base_ty = place_base.ty(self.body(), tcx).ty;
      219 ( 0.00%)                      match base_ty.kind() {
      438 ( 0.00%)                          ty::Adt(def, _) if def.has_dtor(tcx) => {
       36 ( 0.00%)                              self.check_if_path_or_subpath_is_moved(
        .                                           location, InitializationRequiringAction::Assignment,
       36 ( 0.00%)                                  (place_base, span), flow_state);
        .           
        .                                       // (base initialized; no need to
        .                                       // recur further)
        .                                       break;
        .                                   }
        .           
        .                                   // Once `let s; s.x = V; read(s.x);`,
        .                                   // is allowed, remove this match arm.
-- line 1880 ----------------------------------------
-- line 1931 ----------------------------------------
        .           
        .                       // Shallow so that we'll stop at any dereference; we'll
        .                       // report errors about issues with such bases elsewhere.
        .                       let maybe_uninits = &flow_state.uninits;
        .           
        .                       // Find the shortest uninitialized prefix you can reach
        .                       // without going over a Deref.
        .                       let mut shortest_uninit_seen = None;
    1,484 ( 0.00%)              for prefix in this.prefixes(base, PrefixSet::Shallow) {
       87 ( 0.00%)                  let mpi = match this.move_path_for_place(prefix) {
        .                               Some(mpi) => mpi,
        .                               None => continue,
        .                           };
        .           
       10 ( 0.00%)                  if maybe_uninits.contains(mpi) {
        .                               debug!(
        .                                   "check_parent_of_field updating shortest_uninit_seen from {:?} to {:?}",
        .                                   shortest_uninit_seen,
        .                                   Some((prefix, mpi))
        .                               );
        .                               shortest_uninit_seen = Some((prefix, mpi));
        .                           } else {
        .                               debug!("check_parent_of_field {:?} is definitely initialized", (prefix, mpi));
        .                           }
        .                       }
        .           
      201 ( 0.00%)              if let Some((prefix, mpi)) = shortest_uninit_seen {
        .                           // Check for a reassignment into an uninitialized field of a union (for example,
        .                           // after a move out). In this case, do not report an error here. There is an
        .                           // exception, if this is the first assignment into the union (that is, there is
        .                           // no move out from an earlier location) then this is an attempt at initialization
        .                           // of the union - we should error in that case.
        .                           let tcx = this.infcx.tcx;
        .                           if base.ty(this.body(), tcx).ty.is_union() {
        .                               if this.move_data.path_map[mpi].iter().any(|moi| {
-- line 1965 ----------------------------------------
-- line 1979 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Checks the permissions for the given place and read or write kind
        .               ///
        .               /// Returns `true` if an error is reported.
        .               fn check_access_permissions(
        .                   &mut self,
  230,754 ( 0.00%)          (place, span): (Place<'tcx>, Span),
        .                   kind: ReadOrWrite,
        .                   is_local_mutation_allowed: LocalMutationIsAllowed,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   location: Location,
        .               ) -> bool {
        .                   debug!(
        .                       "check_access_permissions({:?}, {:?}, is_local_mutation_allowed: {:?})",
        .                       place, kind, is_local_mutation_allowed
        .                   );
        .           
        .                   let error_access;
        .                   let the_place_err;
        .           
1,723,897 ( 0.02%)          match kind {
        .                       Reservation(WriteKind::MutableBorrow(
        .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
        .                       ))
        .                       | Write(WriteKind::MutableBorrow(
        .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
        .                       )) => {
    7,866 ( 0.00%)                  let is_local_mutation_allowed = match borrow_kind {
        .                               BorrowKind::Unique => LocalMutationIsAllowed::Yes,
        .                               BorrowKind::Mut { .. } => is_local_mutation_allowed,
        .                               BorrowKind::Shared | BorrowKind::Shallow => unreachable!(),
        .                           };
    5,509 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
        .                               Ok(root_place) => {
        .                                   self.add_used_mut(root_place, flow_state);
        .                                   return false;
        .                               }
        .                               Err(place_err) => {
        .                                   error_access = AccessKind::MutableBorrow;
        .                                   the_place_err = place_err;
        .                               }
        .                           }
        .                       }
        .                       Reservation(WriteKind::Mutate) | Write(WriteKind::Mutate) => {
  241,108 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
        .                               Ok(root_place) => {
        .                                   self.add_used_mut(root_place, flow_state);
        .                                   return false;
        .                               }
        .                               Err(place_err) => {
        .                                   error_access = AccessKind::Mutate;
        .                                   the_place_err = place_err;
        .                               }
-- line 2033 ----------------------------------------
-- line 2041 ----------------------------------------
        .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
        .                       )
        .                       | Write(
        .                           WriteKind::Move
        .                           | WriteKind::StorageDeadOrDrop
        .                           | WriteKind::MutableBorrow(BorrowKind::Shared)
        .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
        .                       ) => {
  112,160 ( 0.00%)                  if let (Err(_), true) = (
  392,560 ( 0.00%)                      self.is_mutable(place.as_ref(), is_local_mutation_allowed),
        .                               self.errors_buffer.is_empty(),
        .                           ) {
        .                               // rust-lang/rust#46908: In pure NLL mode this code path should be
        .                               // unreachable, but we use `delay_span_bug` because we can hit this when
        .                               // dereferencing a non-Copy raw pointer *and* have `-Ztreat-err-as-bug`
        .                               // enabled. We don't want to ICE for that case, as other errors will have
        .                               // been emitted (#52262).
        .                               self.infcx.tcx.sess.delay_span_bug(
-- line 2058 ----------------------------------------
-- line 2094 ----------------------------------------
        .                   if previously_initialized {
        .                       self.report_mutability_error(place, span, the_place_err, error_access, location);
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
  194,200 ( 0.00%)      fn is_local_ever_initialized(
        .                   &self,
        .                   local: Local,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) -> Option<InitIndex> {
  116,520 ( 0.00%)          let mpi = self.move_data.rev_lookup.find_local(local);
   38,840 ( 0.00%)          let ii = &self.move_data.init_path_map[mpi];
  188,166 ( 0.00%)          for &index in ii {
  143,292 ( 0.00%)              if flow_state.ever_inits.contains(index) {
        .                           return Some(index);
        .                       }
        .                   }
        .                   None
  155,360 ( 0.00%)      }
        .           
        .               /// Adds the place into the used mutable variables set
  140,924 ( 0.00%)      fn add_used_mut(&mut self, root_place: RootPlace<'tcx>, flow_state: &Flows<'cx, 'tcx>) {
       26 ( 0.00%)          match root_place {
  105,693 ( 0.00%)              RootPlace { place_local: local, place_projection: [], is_local_mutation_allowed } => {
        .                           // If the local may have been initialized, and it is now currently being
        .                           // mutated, then it is justified to be annotated with the `mut`
        .                           // keyword, since the mutation may be a possible reassignment.
   69,212 ( 0.00%)                  if is_local_mutation_allowed != LocalMutationIsAllowed::Yes
  101,982 ( 0.00%)                      && self.is_local_ever_initialized(local, flow_state).is_some()
        .                           {
        .                               self.used_mut.insert(local);
        .                           }
        .                       }
        .                       RootPlace {
        .                           place_local: _,
        .                           place_projection: _,
        .                           is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
        .                       } => {}
        .                       RootPlace {
        7 ( 0.00%)                  place_local,
        7 ( 0.00%)                  place_projection: place_projection @ [.., _],
        .                           is_local_mutation_allowed: _,
        .                       } => {
       14 ( 0.00%)                  if let Some(field) = self.is_upvar_field_projection(PlaceRef {
        .                               local: place_local,
        .                               projection: place_projection,
        .                           }) {
        .                               self.used_mut_upvars.push(field);
        .                           }
        .                       }
        .                   }
  139,384 ( 0.00%)      }
        .           
        .               /// Whether this value can be written or borrowed mutably.
        .               /// Returns the root place if the place passed in is a projection.
1,213,751 ( 0.01%)      fn is_mutable(
        .                   &self,
        .                   place: PlaceRef<'tcx>,
        .                   is_local_mutation_allowed: LocalMutationIsAllowed,
        .               ) -> Result<RootPlace<'tcx>, PlaceRef<'tcx>> {
        .                   debug!("is_mutable: place={:?}, is_local...={:?}", place, is_local_mutation_allowed);
  369,097 ( 0.00%)          match place.last_projection() {
        .                       None => {
   91,304 ( 0.00%)                  let local = &self.body.local_decls[place.local];
  273,912 ( 0.00%)                  match local.mutability {
   13,786 ( 0.00%)                      Mutability::Not => match is_local_mutation_allowed {
   41,358 ( 0.00%)                          LocalMutationIsAllowed::Yes => Ok(RootPlace {
        .                                       place_local: place.local,
        .                                       place_projection: place.projection,
        .                                       is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
        .                                   }),
        .                                   LocalMutationIsAllowed::ExceptUpvars => Ok(RootPlace {
        .                                       place_local: place.local,
        .                                       place_projection: place.projection,
        .                                       is_local_mutation_allowed: LocalMutationIsAllowed::ExceptUpvars,
        .                                   }),
        .                                   LocalMutationIsAllowed::No => Err(place),
        .                               },
  168,822 ( 0.00%)                      Mutability::Mut => Ok(RootPlace {
        .                                   place_local: place.local,
        .                                   place_projection: place.projection,
        .                                   is_local_mutation_allowed,
        .                               }),
        .                           }
        .                       }
        .                       Some((place_base, elem)) => {
   57,111 ( 0.00%)                  match elem {
        .                               ProjectionElem::Deref => {
    2,526 ( 0.00%)                          let base_ty = place_base.ty(self.body(), self.infcx.tcx).ty;
        .           
        .                                   // Check the kind of deref to decide
    7,557 ( 0.00%)                          match base_ty.kind() {
        .                                       ty::Ref(_, _, mutbl) => {
    2,472 ( 0.00%)                                  match mutbl {
        .                                               // Shared borrowed data is never mutable
        .                                               hir::Mutability::Not => Err(place),
        .                                               // Mutably borrowed data is mutable, but only if we have a
        .                                               // unique path to the `&mut`
        .                                               hir::Mutability::Mut => {
    2,472 ( 0.00%)                                          let mode = match self.is_upvar_field_projection(place) {
       10 ( 0.00%)                                              Some(field) if self.upvars[field.index()].by_ref => {
        .                                                           is_local_mutation_allowed
        .                                                       }
        .                                                       _ => LocalMutationIsAllowed::Yes,
        .                                                   };
        .           
    7,416 ( 0.00%)                                          self.is_mutable(place_base, mode)
        .                                               }
        .                                           }
        .                                       }
        .                                       ty::RawPtr(tnm) => {
       14 ( 0.00%)                                  match tnm.mutbl {
        .                                               // `*const` raw pointers are not mutable
        .                                               hir::Mutability::Not => Err(place),
        .                                               // `*mut` raw pointers are always mutable, regardless of
        .                                               // context. The users have to check by themselves.
        .                                               hir::Mutability::Mut => Ok(RootPlace {
        .                                                   place_local: place.local,
        .                                                   place_projection: place.projection,
        .                                                   is_local_mutation_allowed,
        .                                               }),
        .                                           }
        .                                       }
        .                                       // `Box<T>` owns its content, so mutable if its location is mutable
       20 ( 0.00%)                              _ if base_ty.is_box() => {
        .                                           self.is_mutable(place_base, is_local_mutation_allowed)
        .                                       }
        .                                       // Deref should only be for reference, pointers or boxes
        .                                       _ => bug!("Deref of unexpected type: {:?}", base_ty),
        .                                   }
        .                               }
        .                               // All other projections are owned by their base path, so mutable if
        .                               // base path is mutable
        .                               ProjectionElem::Field(..)
        .                               | ProjectionElem::Index(..)
        .                               | ProjectionElem::ConstantIndex { .. }
        .                               | ProjectionElem::Subslice { .. }
        .                               | ProjectionElem::Downcast(..) => {
        .                                   let upvar_field_projection = self.is_upvar_field_projection(place);
   35,548 ( 0.00%)                          if let Some(field) = upvar_field_projection {
        .                                       let upvar = &self.upvars[field.index()];
        .                                       debug!(
        .                                           "is_mutable: upvar.mutability={:?} local_mutation_is_allowed={:?} \
        .                                            place={:?}, place_base={:?}",
        .                                           upvar, is_local_mutation_allowed, place, place_base
        .                                       );
      115 ( 0.00%)                              match (upvar.place.mutability, is_local_mutation_allowed) {
        .                                           (
        .                                               Mutability::Not,
        .                                               LocalMutationIsAllowed::No
        .                                               | LocalMutationIsAllowed::ExceptUpvars,
        .                                           ) => Err(place),
        .                                           (Mutability::Not, LocalMutationIsAllowed::Yes)
        .                                           | (Mutability::Mut, _) => {
        .                                               // Subtle: this is an upvar
-- line 2251 ----------------------------------------
-- line 2270 ----------------------------------------
        .                                               // fn main() {
        .                                               //     let var = Vec::new();
        .                                               //     foo(move || {
        .                                               //         var.push(1);
        .                                               //     });
        .                                               // }
        .                                               // ```
        .                                               let _ =
      207 ( 0.00%)                                          self.is_mutable(place_base, is_local_mutation_allowed)?;
        .                                               Ok(RootPlace {
        .                                                   place_local: place.local,
        .                                                   place_projection: place.projection,
        .                                                   is_local_mutation_allowed,
        .                                               })
        .                                           }
        .                                       }
        .                                   } else {
        .                                       self.is_mutable(place_base, is_local_mutation_allowed)
        .                                   }
        .                               }
        .                           }
        .                       }
        .                   }
  882,728 ( 0.01%)      }
        .           
        .               /// If `place` is a field projection, and the field is being projected from a closure type,
        .               /// then returns the index of the field being projected. Note that this closure will always
        .               /// be `self` in the current MIR, because that is the only time we directly access the fields
        .               /// of a closure type.
        .               fn is_upvar_field_projection(&self, place_ref: PlaceRef<'tcx>) -> Option<Field> {
  171,146 ( 0.00%)          path_utils::is_upvar_field_projection(self.infcx.tcx, &self.upvars, place_ref, self.body())
        .               }
        .           }
        .           
        .           /// The degree of overlap between 2 places for borrow-checking.
        .           enum Overlap {
        .               /// The places might partially overlap - in this case, we give
        .               /// up and say that they might conflict. This occurs when
        .               /// different fields of a union are borrowed. For example,
-- line 2308 ----------------------------------------

4,314,057 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./malloc/malloc.c
  ./stdlib/msort.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
2,948,000,016 (25.73%)  events annotated

