--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name actix_web --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=0 --cfg feature="__compress" --cfg feature="compress-brotli" --cfg feature="compress-gzip" --cfg feature="compress-zstd" --cfg feature="cookie" --cfg feature="cookies" --cfg feature="default" -C metadata=b0e9678694832f00 -C extra-filename=-b0e9678694832f00 --out-dir /usr/home/liquid/tmp/.tmpOD4Anf/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmpOD4Anf/target/debug/deps --extern actix_codec=/usr/home/liquid/tmp/.tmpOD4Anf/target/debug/deps/libactix_codec-e9c1d9b1672c68e1.rmeta --extern actix_http=/usr/home/liquid/tmp/.tmpOD4Anf/target/debug/deps/libactix_http-f49e12ae8807ef5e.rmeta --extern actix_macros=/usr/home/liquid/tmp/.tmpOD4Anf/target/debug/deps/libactix_macros-c99150f140ed73e1.so --extern actix_router=/usr/home/liquid/tmp/.tmpOD4Anf/target/debug/deps/libactix_router-9c3413dfec467b41.rmeta --extern actix_rt=/usr/home/liquid/tmp/.tmpOD4Anf/target/debug/deps/libactix_rt-7b66a039f9bfc244.rmeta --extern actix_server=/usr/home/liquid/tmp/.tmpOD4Anf/target/debug/deps/libactix_server-380da7d6a2588a99.rmeta --extern actix_service=/usr/home/liquid/tmp/.tmpOD4Anf/target/debug/deps/libactix_service-1349ee52948ca79d.rmeta --extern actix_utils=/usr/home/liquid/tmp/.tmpOD4Anf/target/debug/deps/libactix_utils-dd3411ad906eea6a.rmeta --extern actix_web_codegen=/usr/home/liquid/tmp/.tmpOD4Anf/target/debug/deps/libactix_web_codegen-6c9f7a34f5cc4599.so --extern ahash=/usr/home/liquid/tmp/.tmpOD4Anf/target/debug/deps/libahash-b159545087edd977.rmeta --extern bytes=/usr/home/liquid/tmp/.tmpOD4Anf/target/debug/deps/libbytes-a196d0b08ddb6fce.rmeta --extern cfg_if=/usr/home/liquid/tmp/.tmpOD4Anf/target/debug/deps/libcfg_if-a678461e6cd797aa.rmeta --extern cookie=/usr/home/liquid/tmp/.tmpOD4Anf/target/debug/deps/libcookie-f95b24d2064f02bd.rmeta --extern derive_more=/usr/home/liquid/tmp/.tmpOD4Anf/target/debug/deps/libderive_more-7a98f0ac48494985.so --extern encoding_rs=/usr/home/liquid/tmp/.tmpOD4Anf/target/debug/deps/libencoding_rs-ec683cad2d491a86.rmeta --extern futures_core=/usr/home/liquid/tmp/.tmpOD4Anf/target/debug/deps/libfutures_core-f813a8f5518d3627.rmeta --extern futures_util=/usr/home/liquid/tmp/.tmpOD4Anf/target/debug/deps/libfutures_util-031ddad4e35cd5c5.rmeta --extern itoa=/usr/home/liquid/tmp/.tmpOD4Anf/target/debug/deps/libitoa-12174ffaebc8b1f6.rmeta --extern language_tags=/usr/home/liquid/tmp/.tmpOD4Anf/target/debug/deps/liblanguage_tags-2cd0c62c69ddde9c.rmeta --extern log=/usr/home/liquid/tmp/.tmpOD4Anf/target/debug/deps/liblog-c0a03d9d67c7edf2.rmeta --extern mime=/usr/home/liquid/tmp/.tmpOD4Anf/target/debug/deps/libmime-c690ab2d70230174.rmeta --extern once_cell=/usr/home/liquid/tmp/.tmpOD4Anf/target/debug/deps/libonce_cell-74365fdc39fccd3e.rmeta --extern pin_project_lite=/usr/home/liquid/tmp/.tmpOD4Anf/target/debug/deps/libpin_project_lite-1fe29b8043ac441d.rmeta --extern regex=/usr/home/liquid/tmp/.tmpOD4Anf/target/debug/deps/libregex-a93cd588ac951427.rmeta --extern serde=/usr/home/liquid/tmp/.tmpOD4Anf/target/debug/deps/libserde-99e9b5436d5b316f.rmeta --extern serde_json=/usr/home/liquid/tmp/.tmpOD4Anf/target/debug/deps/libserde_json-95dc74b75f58f634.rmeta --extern serde_urlencoded=/usr/home/liquid/tmp/.tmpOD4Anf/target/debug/deps/libserde_urlencoded-3478c1551fe34481.rmeta --extern smallvec=/usr/home/liquid/tmp/.tmpOD4Anf/target/debug/deps/libsmallvec-ee428164a35a6ade.rmeta --extern socket2=/usr/home/liquid/tmp/.tmpOD4Anf/target/debug/deps/libsocket2-fde08ce5d1a2489a.rmeta --extern time=/usr/home/liquid/tmp/.tmpOD4Anf/target/debug/deps/libtime-ccc385ae88fc4047.rmeta --extern url=/usr/home/liquid/tmp/.tmpOD4Anf/target/debug/deps/liburl-07ed96e8de72505f.rmeta -L native=/usr/home/liquid/tmp/.tmpOD4Anf/target/debug/build/zstd-sys-ad08001ac0c541d2/out -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-actix-web-4.0.0-beta.21-Debug-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                      
--------------------------------------------------------------------------------
20,495,274,311 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                      file:function
--------------------------------------------------------------------------------
1,184,802,046 ( 5.78%)  ???:llvm::FPPassManager::runOnFunction(llvm::Function&)
  559,017,001 ( 2.73%)  ./malloc/malloc.c:_int_free
  506,838,414 ( 2.47%)  ./malloc/malloc.c:_int_malloc
  460,836,391 ( 2.25%)  ???:llvm::SelectionDAG::Combine(llvm::CombineLevel, llvm::AAResults*, llvm::CodeGenOpt::Level)
  333,263,637 ( 1.63%)  ./malloc/malloc.c:malloc
  275,485,317 ( 1.34%)  ???:llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const
  198,282,816 ( 0.97%)  ???:llvm::PMDataManager::verifyPreservedAnalysis(llvm::Pass*)
  197,571,286 ( 0.96%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
  181,471,224 ( 0.89%)  ???:llvm::MachineInstr::addOperand(llvm::MachineFunction&, llvm::MachineOperand const&)
  174,407,285 ( 0.85%)  ???:(anonymous namespace)::RegAllocFast::allocateBasicBlock(llvm::MachineBasicBlock&)
  166,971,543 ( 0.81%)  ./malloc/malloc.c:free
  157,299,357 ( 0.77%)  ???:(anonymous namespace)::Verifier::visitInstruction(llvm::Instruction&)
  139,364,643 ( 0.68%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
  135,967,877 ( 0.66%)  ???:llvm::SelectionDAGISel::SelectCodeCommon(llvm::SDNode*, unsigned char const*, unsigned int)
  104,504,946 ( 0.51%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
   95,416,416 ( 0.47%)  ???:llvm::ScheduleDAGSDNodes::BuildSchedUnits()
   94,793,548 ( 0.46%)  ???:llvm::TargetRegisterInfo::checkAllSuperRegsMarked(llvm::BitVector const&, llvm::ArrayRef<unsigned short>) const
   94,232,182 ( 0.46%)  ???:llvm::coro::declaresIntrinsics(llvm::Module const&, std::initializer_list<llvm::StringRef>)
   89,688,314 ( 0.44%)  ???:llvm::raw_svector_ostream::write_impl(char const*, unsigned long)
   85,932,252 ( 0.42%)  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:__strncmp_avx2
   83,269,197 ( 0.41%)  ???:multikeySort(llvm::MutableArrayRef<std::pair<llvm::CachedHashStringRef, unsigned long>*>, int)
   82,576,156 ( 0.40%)  ???:llvm::TargetLoweringBase::getTypeConversion(llvm::LLVMContext&, llvm::EVT) const
   75,344,010 ( 0.37%)  ./malloc/malloc.c:malloc_consolidate
   71,080,486 ( 0.35%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
   68,147,430 ( 0.33%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
   67,493,663 ( 0.33%)  ???:(anonymous namespace)::TwoAddressInstructionPass::runOnMachineFunction(llvm::MachineFunction&)
   66,831,403 ( 0.33%)  ???:(anonymous namespace)::Verifier::verifyFunctionAttrs(llvm::FunctionType*, llvm::AttributeList, llvm::Value const*, bool)
   64,419,585 ( 0.31%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::CalculateFromScratch(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::BatchUpdateInfo*)
   63,681,232 ( 0.31%)  ???:llvm::MCExpr::evaluateAsRelocatableImpl(llvm::MCValue&, llvm::MCAssembler const*, llvm::MCAsmLayout const*, llvm::MCFixup const*, llvm::DenseMap<llvm::MCSection const*, unsigned long, llvm::DenseMapInfo<llvm::MCSection const*>, llvm::detail::DenseMapPair<llvm::MCSection const*, unsigned long> > const*, bool) const
   62,292,321 ( 0.30%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   61,383,478 ( 0.30%)  ???:llvm::MCContext::getOrCreateSymbol(llvm::Twine const&)
   59,819,806 ( 0.29%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
   58,942,361 ( 0.29%)  ???:llvm::DAGTypeLegalizer::run()
   58,557,476 ( 0.29%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
   58,215,139 ( 0.28%)  ???:(anonymous namespace)::X86MCCodeEmitter::emitPrefixImpl(unsigned int&, llvm::MCInst const&, llvm::MCSubtargetInfo const&, llvm::raw_ostream&) const
   56,932,777 ( 0.28%)  ???:llvm::SelectionDAG::MorphNodeTo(llvm::SDNode*, unsigned int, llvm::SDVTList, llvm::ArrayRef<llvm::SDValue>)
   56,402,259 ( 0.28%)  ???:llvm::InstrEmitter::EmitMachineNode(llvm::SDNode*, bool, bool, llvm::DenseMap<llvm::SDValue, llvm::Register, llvm::DenseMapInfo<llvm::SDValue>, llvm::detail::DenseMapPair<llvm::SDValue, llvm::Register> >&)
   56,303,481 ( 0.27%)  ???:(anonymous namespace)::SelectionDAGLegalize::LegalizeOp(llvm::SDNode*) [clone .llvm.8386621111310650999]
   55,985,985 ( 0.27%)  ./malloc/malloc.c:unlink_chunk.constprop.0
   52,314,333 ( 0.26%)  ???:llvm::MCAsmLayout::getSymbolOffset(llvm::MCSymbol const&) const
   51,769,611 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   50,856,883 ( 0.25%)  ./elf/dl-lookup.c:do_lookup_x
   50,510,249 ( 0.25%)  ???:llvm::SelectionDAG::Legalize()
   48,326,318 ( 0.24%)  ???:(anonymous namespace)::Verifier::verify(llvm::Function const&) [clone .llvm.4153962086227604281]
   46,496,264 ( 0.23%)  ???:llvm::TargetRegisterInfo::shouldRealignStack(llvm::MachineFunction const&) const
   46,044,230 ( 0.22%)  ???:llvm::FoldingSet<llvm::AttributeImpl>::NodeEquals(llvm::FoldingSetBase const*, llvm::FoldingSetBase::Node*, llvm::FoldingSetNodeID const&, unsigned int, llvm::FoldingSetNodeID&)
   45,970,581 ( 0.22%)  ???:llvm::SelectionDAG::getConstant(llvm::ConstantInt const&, llvm::SDLoc const&, llvm::EVT, bool, bool)
   45,850,432 ( 0.22%)  ???:(anonymous namespace)::PEI::runOnMachineFunction(llvm::MachineFunction&)
   44,842,388 ( 0.22%)  ???:(anonymous namespace)::DAGCombiner::combine(llvm::SDNode*)
   43,770,388 ( 0.21%)  ???:llvm::FoldingSetBase::FindNodeOrInsertPos(llvm::FoldingSetNodeID const&, void*&, llvm::FoldingSetBase::FoldingSetInfo const&)
   42,334,953 ( 0.21%)  ???:(anonymous namespace)::ScheduleDAGRRList::Schedule() [clone .llvm.6953762222372402862]
   42,230,692 ( 0.21%)  ./malloc/malloc.c:realloc
   41,595,095 ( 0.20%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_sse2_unaligned_erms
   39,493,025 ( 0.19%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
   39,327,029 ( 0.19%)  ???:llvm::PMDataManager::removeNotPreservedAnalysis(llvm::Pass*)
   38,652,075 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
   38,333,328 ( 0.19%)  ???:(anonymous namespace)::X86MCInstLower::Lower(llvm::MachineInstr const*, llvm::MCInst&) const
   36,560,793 ( 0.18%)  ???:llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&)
   36,205,051 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
   35,328,443 ( 0.17%)  ???:llvm::MachineFunctionPass::runOnFunction(llvm::Function&)
   34,535,389 ( 0.17%)  ???:(anonymous namespace)::X86MCCodeEmitter::encodeInstruction(llvm::MCInst const&, llvm::raw_ostream&, llvm::SmallVectorImpl<llvm::MCFixup>&, llvm::MCSubtargetInfo const&) const
   34,370,696 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/canonical/canonicalizer.rs:<rustc_infer::infer::canonical::canonicalizer::Canonicalizer as rustc_middle::ty::fold::TypeFolder>::fold_ty
   34,350,924 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
   34,038,949 ( 0.17%)  ???:(anonymous namespace)::Verifier::visitCallBase(llvm::CallBase&)
   34,038,623 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   32,830,658 ( 0.16%)  ???:llvm::X86TargetMachine::getTargetTransformInfo(llvm::Function const&)
   32,614,829 ( 0.16%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
   32,180,030 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
   32,037,783 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_middle::ty::subst::SubstFolder as rustc_middle::ty::fold::TypeFolder>::fold_ty
   31,550,884 ( 0.15%)  ???:llvm::ScheduleDAGSDNodes::AddSchedEdges()
   31,397,974 ( 0.15%)  ???:(anonymous namespace)::CFIInstrInserter::runOnMachineFunction(llvm::MachineFunction&)
   31,097,821 ( 0.15%)  ???:llvm::MCAsmLayout::getFragmentOffset(llvm::MCFragment const*) const
   30,539,763 ( 0.15%)  ???:(anonymous namespace)::RegAllocFast::markRegUsedInInstr(unsigned short)
   30,437,306 ( 0.15%)  ???:llvm::FunctionLoweringInfo::set(llvm::Function const&, llvm::MachineFunction&, llvm::SelectionDAG*)
   30,261,855 ( 0.15%)  ???:llvm::MachineFunction::CreateMachineInstr(llvm::MCInstrDesc const&, llvm::DebugLoc const&, bool)
   29,760,969 ( 0.15%)  ???:llvm::SelectionDAG::AssignTopologicalOrder()
   29,537,206 ( 0.14%)  ./malloc/malloc.c:_int_realloc
   28,831,404 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
   28,755,438 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
   28,600,575 ( 0.14%)  ???:llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)
   26,971,568 ( 0.13%)  ???:llvm::SelectionDAG::getRegister(unsigned int, llvm::EVT)
   26,119,311 ( 0.13%)  ???:llvm::DataLayout::getAlignment(llvm::Type*, bool) const
   26,067,695 ( 0.13%)  ???:llvm::SelectionDAGISel::SelectAllBasicBlocks(llvm::Function const&)
   25,932,593 ( 0.13%)  ???:llvm::AsmPrinter::emitFunctionBody()
   25,928,100 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
   25,350,036 ( 0.12%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::runSemiNCA(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, unsigned int)
   25,129,528 ( 0.12%)  ???:llvm::X86RegisterInfo::getReservedRegs(llvm::MachineFunction const&) const
   24,725,078 ( 0.12%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms
   24,541,664 ( 0.12%)  ???:llvm::X86FrameLowering::hasFP(llvm::MachineFunction const&) const
   24,241,599 ( 0.12%)  ???:(anonymous namespace)::X86MCCodeEmitter::emitMemModRMByte(llvm::MCInst const&, unsigned int, unsigned int, unsigned long, bool, unsigned long, llvm::raw_ostream&, llvm::SmallVectorImpl<llvm::MCFixup>&, llvm::MCSubtargetInfo const&, bool) const
   23,951,115 ( 0.12%)  ???:llvm::MCELFStreamer::emitInstToData(llvm::MCInst const&, llvm::MCSubtargetInfo const&)
   23,640,264 ( 0.12%)  ???:llvm::Module::getOrInsertFunction(llvm::StringRef, llvm::FunctionType*)
   23,325,027 ( 0.11%)  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long)
   23,210,025 ( 0.11%)  ???:llvm::X86TargetMachine::getSubtargetImpl(llvm::Function const&) const
   22,943,054 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::TokenCursor>::next
   22,870,283 ( 0.11%)  ???:llvm::SelectionDAG::getNode(unsigned int, llvm::SDLoc const&, llvm::SDVTList, llvm::ArrayRef<llvm::SDValue>)
   22,789,897 ( 0.11%)  ???:llvm::ScheduleDAGSDNodes::EmitSchedule(llvm::MachineInstrBundleIterator<llvm::MachineInstr, false>&)
   22,773,542 ( 0.11%)  ./nptl/pthread_rwlock_common.c:pthread_rwlock_unlock
   22,462,332 ( 0.11%)  ./malloc/malloc.c:calloc
   21,911,843 ( 0.11%)  ???:llvm::X86RegisterInfo::eliminateFrameIndex(llvm::MachineInstrBundleIterator<llvm::MachineInstr, false>, int, unsigned int, llvm::RegScavenger*) const
   21,552,182 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs:rustc_middle::ty::relate::super_relate_tys::<rustc_infer::infer::combine::Generalizer>
   21,543,218 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::canonical::canonicalizer::Canonicalizer>
   21,476,036 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump
   21,255,881 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::context::TyCtxt>::reuse_or_mk_predicate
   21,205,875 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs:<rustc_infer::infer::combine::Generalizer as rustc_middle::ty::relate::TypeRelation>::tys
   21,156,611 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   20,810,871 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   20,810,145 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs:rustc_mir_dataflow::drop_flag_effects::on_all_children_bits::is_terminal_path
   20,629,660 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
   20,606,760 ( 0.10%)  ???:(anonymous namespace)::ELFWriter::writeObject(llvm::MCAssembler&, llvm::MCAsmLayout const&)
   20,599,768 ( 0.10%)  ???:???
   20,564,300 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::canonical::canonicalizer::Canonicalizer>
   20,508,647 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::reuse_or_mk_predicate

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/canonical/canonicalizer.rs
--------------------------------------------------------------------------------
Ir                  

-- line 39 ----------------------------------------
         .               pub fn canonicalize_query<V>(
         .                   &self,
         .                   value: V,
         .                   query_state: &mut OriginalQueryValues<'tcx>,
         .               ) -> Canonicalized<'tcx, V>
         .               where
         .                   V: TypeFoldable<'tcx>,
         .               {
    54,864 ( 0.00%)          self.tcx.sess.perf_stats.queries_canonicalized.fetch_add(1, Ordering::Relaxed);
         .           
   269,926 ( 0.00%)          Canonicalizer::canonicalize(value, self, self.tcx, &CanonicalizeAllFreeRegions, query_state)
         .               }
         .           
         .               /// Canonicalizes a query *response* `V`. When we canonicalize a
         .               /// query response, we only canonicalize unbound inference
         .               /// variables, and we leave other free regions alone. So,
         .               /// continuing with the example from `canonicalize_query`, if
         .               /// there was an input query `T: Trait<'static>`, it would have
         .               /// been canonicalized to
-- line 57 ----------------------------------------
-- line 69 ----------------------------------------
         .               /// things) includes a mapping to `'?0 := 'static`. When
         .               /// canonicalizing this query result R, we would leave this
         .               /// reference to `'static` alone.
         .               ///
         .               /// To get a good understanding of what is happening here, check
         .               /// out the [chapter in the rustc dev guide][c].
         .               ///
         .               /// [c]: https://rust-lang.github.io/chalk/book/canonical_queries/canonicalization.html#canonicalizing-the-query-result
     1,836 ( 0.00%)      pub fn canonicalize_response<V>(&self, value: V) -> Canonicalized<'tcx, V>
         .               where
         .                   V: TypeFoldable<'tcx>,
         .               {
    51,556 ( 0.00%)          let mut query_state = OriginalQueryValues::default();
   180,446 ( 0.00%)          Canonicalizer::canonicalize(
   305,368 ( 0.00%)              value,
         .                       self,
    25,778 ( 0.00%)              self.tcx,
         .                       &CanonicalizeQueryResponse,
         .                       &mut query_state,
         .                   )
     1,428 ( 0.00%)      }
         .           
    41,013 ( 0.00%)      pub fn canonicalize_user_type_annotation<V>(&self, value: V) -> Canonicalized<'tcx, V>
         .               where
         .                   V: TypeFoldable<'tcx>,
         .               {
    10,034 ( 0.00%)          let mut query_state = OriginalQueryValues::default();
    35,119 ( 0.00%)          Canonicalizer::canonicalize(
    29,642 ( 0.00%)              value,
         .                       self,
     5,017 ( 0.00%)              self.tcx,
         .                       &CanonicalizeUserTypeAnnotation,
         .                       &mut query_state,
         .                   )
    31,899 ( 0.00%)      }
         .           
         .               /// A variant of `canonicalize_query` that does not
         .               /// canonicalize `'static`. This is useful when
         .               /// the query implementation can perform more efficient
         .               /// handling of `'static` regions (e.g. trait evaluation).
    62,015 ( 0.00%)      pub fn canonicalize_query_keep_static<V>(
         .                   &self,
         .                   value: V,
         .                   query_state: &mut OriginalQueryValues<'tcx>,
         .               ) -> Canonicalized<'tcx, V>
         .               where
         .                   V: TypeFoldable<'tcx>,
         .               {
   215,436 ( 0.00%)          self.tcx.sess.perf_stats.queries_canonicalized.fetch_add(1, Ordering::Relaxed);
         .           
   958,495 ( 0.00%)          Canonicalizer::canonicalize(
    68,340 ( 0.00%)              value,
         .                       self,
   107,718 ( 0.00%)              self.tcx,
         .                       &CanonicalizeFreeRegionsOtherThanStatic,
         .                       query_state,
         .                   )
    62,015 ( 0.00%)      }
         .           }
         .           
         .           /// Controls how we canonicalize "free regions" that are not inference
         .           /// variables. This depends on what we are canonicalizing *for* --
         .           /// e.g., if we are canonicalizing to create a query, we want to
         .           /// replace those with inference variables, since we want to make a
         .           /// maximally general query. But if we are canonicalizing a *query
         .           /// response*, then we don't typically replace free regions, as they
-- line 134 ----------------------------------------
-- line 141 ----------------------------------------
         .               ) -> ty::Region<'tcx>;
         .           
         .               fn any(&self) -> bool;
         .           }
         .           
         .           struct CanonicalizeQueryResponse;
         .           
         .           impl CanonicalizeRegionMode for CanonicalizeQueryResponse {
   243,525 ( 0.00%)      fn canonicalize_free_region<'tcx>(
         .                   &self,
         .                   canonicalizer: &mut Canonicalizer<'_, 'tcx>,
         .                   r: ty::Region<'tcx>,
         .               ) -> ty::Region<'tcx> {
   146,115 ( 0.00%)          match r {
         .                       ty::ReFree(_)
         .                       | ty::ReErased
         .                       | ty::ReStatic
         .                       | ty::ReEmpty(ty::UniverseIndex::ROOT)
         .                       | ty::ReEarlyBound(..) => r,
         .           
         .                       ty::RePlaceholder(placeholder) => canonicalizer.canonical_var_for_region(
         .                           CanonicalVarInfo { kind: CanonicalVarKind::PlaceholderRegion(*placeholder) },
         .                           r,
         .                       ),
         .           
         .                       ty::ReVar(vid) => {
    47,219 ( 0.00%)                  let universe = canonicalizer.region_var_universe(*vid);
         .                           canonicalizer.canonical_var_for_region(
         .                               CanonicalVarInfo { kind: CanonicalVarKind::Region(universe) },
         .                               r,
         .                           )
         .                       }
         .           
         .                       ty::ReEmpty(ui) => {
         .                           bug!("canonicalizing 'empty in universe {:?}", ui) // FIXME
-- line 175 ----------------------------------------
-- line 188 ----------------------------------------
         .                               tcx.sess.delay_span_bug(
         .                                   rustc_span::DUMMY_SP,
         .                                   &format!("unexpected region in query response: `{:?}`", r),
         .                               );
         .                           });
         .                           r
         .                       }
         .                   }
   243,525 ( 0.00%)      }
         .           
         .               fn any(&self) -> bool {
         .                   false
         .               }
         .           }
         .           
         .           struct CanonicalizeUserTypeAnnotation;
         .           
         .           impl CanonicalizeRegionMode for CanonicalizeUserTypeAnnotation {
     7,548 ( 0.00%)      fn canonicalize_free_region<'tcx>(
         .                   &self,
         .                   canonicalizer: &mut Canonicalizer<'_, 'tcx>,
         .                   r: ty::Region<'tcx>,
         .               ) -> ty::Region<'tcx> {
     7,548 ( 0.00%)          match r {
         .                       ty::ReEarlyBound(_) | ty::ReFree(_) | ty::ReErased | ty::ReStatic => r,
         .                       ty::ReVar(_) => canonicalizer.canonical_var_for_region_in_root_universe(r),
         .                       _ => {
         .                           // We only expect region names that the user can type.
         .                           bug!("unexpected region in query response: `{:?}`", r)
         .                       }
         .                   }
     7,548 ( 0.00%)      }
         .           
         .               fn any(&self) -> bool {
         .                   false
    61,590 ( 0.00%)      }
         .           }
         .           
         .           struct CanonicalizeAllFreeRegions;
         .           
         .           impl CanonicalizeRegionMode for CanonicalizeAllFreeRegions {
   136,488 ( 0.00%)      fn canonicalize_free_region<'tcx>(
         .                   &self,
         .                   canonicalizer: &mut Canonicalizer<'_, 'tcx>,
         .                   r: ty::Region<'tcx>,
         .               ) -> ty::Region<'tcx> {
         .                   canonicalizer.canonical_var_for_region_in_root_universe(r)
   102,366 ( 0.00%)      }
         .           
         .               fn any(&self) -> bool {
         .                   true
   270,300 ( 0.00%)      }
         .           }
         .           
         .           struct CanonicalizeFreeRegionsOtherThanStatic;
         .           
         .           impl CanonicalizeRegionMode for CanonicalizeFreeRegionsOtherThanStatic {
   674,817 ( 0.00%)      fn canonicalize_free_region<'tcx>(
         .                   &self,
         .                   canonicalizer: &mut Canonicalizer<'_, 'tcx>,
         .                   r: ty::Region<'tcx>,
         .               ) -> ty::Region<'tcx> {
   449,878 ( 0.00%)          if let ty::ReStatic = r {
         .                       r
         .                   } else {
         .                       canonicalizer.canonical_var_for_region_in_root_universe(r)
         .                   }
   674,817 ( 0.00%)      }
         .           
         .               fn any(&self) -> bool {
         .                   true
         .               }
         .           }
         .           
         .           struct Canonicalizer<'cx, 'tcx> {
         .               infcx: &'cx InferCtxt<'cx, 'tcx>,
-- line 263 ----------------------------------------
-- line 270 ----------------------------------------
         .               canonicalize_region_mode: &'cx dyn CanonicalizeRegionMode,
         .               needs_canonical_flags: TypeFlags,
         .           
         .               binder_index: ty::DebruijnIndex,
         .           }
         .           
         .           impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
 1,133,462 ( 0.01%)          self.tcx
   737,242 ( 0.00%)      }
         .           
         .               fn fold_binder<T>(&mut self, t: ty::Binder<'tcx, T>) -> ty::Binder<'tcx, T>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
 2,847,186 ( 0.01%)          self.binder_index.shift_in(1);
 6,334,747 ( 0.03%)          let t = t.super_fold_with(self);
 2,808,278 ( 0.01%)          self.binder_index.shift_out(1);
         .                   t
         .               }
         .           
 1,255,520 ( 0.01%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
 1,883,280 ( 0.01%)          match *r {
     3,598 ( 0.00%)              ty::ReLateBound(index, ..) => {
     3,598 ( 0.00%)                  if index >= self.binder_index {
         .                               bug!("escaping late-bound region during canonicalization");
         .                           } else {
         .                               r
         .                           }
         .                       }
         .           
         .                       ty::ReVar(vid) => {
   106,537 ( 0.00%)                  let resolved_vid = self
         .                               .infcx
         .                               .inner
         .                               .borrow_mut()
         .                               .unwrap_region_constraints()
         .                               .opportunistic_resolve_var(vid);
         .                           debug!(
         .                               "canonical: region var found with vid {:?}, \
         .                                opportunistically resolved to {:?}",
         .                               vid, r
         .                           );
   426,148 ( 0.00%)                  let r = self.tcx.reuse_or_mk_region(r, ty::ReVar(resolved_vid));
   639,222 ( 0.00%)                  self.canonicalize_region_mode.canonicalize_free_region(self, r)
         .                       }
         .           
         .                       ty::ReStatic
         .                       | ty::ReEarlyBound(..)
         .                       | ty::ReFree(_)
         .                       | ty::ReEmpty(_)
         .                       | ty::RePlaceholder(..)
 2,037,450 ( 0.01%)              | ty::ReErased => self.canonicalize_region_mode.canonicalize_free_region(self, r),
         .                   }
   660,810 ( 0.00%)      }
         .           
10,604,898 ( 0.05%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
 8,896,474 ( 0.04%)          match *t.kind() {
    16,588 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
         .                           debug!("canonical: type var found with vid {:?}", vid);
    66,352 ( 0.00%)                  match self.infcx.probe_ty_var(vid) {
         .                               // `t` could be a float / int variable; canonicalize that instead.
         .                               Ok(t) => {
         .                                   debug!("(resolved to {:?})", t);
         .                                   self.fold_ty(t)
         .                               }
         .           
         .                               // `TyVar(vid)` is unresolved, track its universe index in the canonicalized
         .                               // result.
         .                               Err(mut ui) => {
         .                                   // FIXME: perf problem described in #55921.
         .                                   ui = ty::UniverseIndex::ROOT;
         .                                   self.canonicalize_ty_var(
    14,738 ( 0.00%)                              CanonicalVarInfo {
         .                                           kind: CanonicalVarKind::Ty(CanonicalTyVarKind::General(ui)),
         .                                       },
         .                                       t,
         .                                   )
         .                               }
         .                           }
         .                       }
         .           
-- line 351 ----------------------------------------
-- line 395 ----------------------------------------
         .                       | ty::FnPtr(_)
         .                       | ty::Dynamic(..)
         .                       | ty::Never
         .                       | ty::Tuple(..)
         .                       | ty::Projection(..)
         .                       | ty::Foreign(..)
         .                       | ty::Param(..)
         .                       | ty::Opaque(..) => {
 3,505,472 ( 0.02%)                  if t.flags().intersects(self.needs_canonical_flags) {
 4,112,598 ( 0.02%)                      t.super_fold_with(self)
         .                           } else {
         .                               t
         .                           }
         .                       }
         .                   }
 7,079,814 ( 0.03%)      }
         .           
     6,146 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
     6,146 ( 0.00%)          match ct.val {
         .                       ty::ConstKind::Infer(InferConst::Var(vid)) => {
         .                           debug!("canonical: const var found with vid {:?}", vid);
         .                           match self.infcx.probe_const_var(vid) {
         .                               Ok(c) => {
         .                                   debug!("(resolved to {:?})", c);
         .                                   return self.fold_const(c);
         .                               }
         .           
-- line 421 ----------------------------------------
-- line 445 ----------------------------------------
         .                           return self.canonicalize_const_var(
         .                               CanonicalVarInfo { kind: CanonicalVarKind::PlaceholderConst(placeholder) },
         .                               ct,
         .                           );
         .                       }
         .                       _ => {}
         .                   }
         .           
     1,756 ( 0.00%)          let flags = FlagComputation::for_const(ct);
       878 ( 0.00%)          if flags.intersects(self.needs_canonical_flags) { ct.super_fold_with(self) } else { ct }
     5,268 ( 0.00%)      }
         .           }
         .           
         .           impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {
         .               /// The main `canonicalize` method, shared impl of
         .               /// `canonicalize_query` and `canonicalize_response`.
 2,260,295 ( 0.01%)      fn canonicalize<V>(
         .                   value: V,
         .                   infcx: &InferCtxt<'_, 'tcx>,
         .                   tcx: TyCtxt<'tcx>,
         .                   canonicalize_region_mode: &dyn CanonicalizeRegionMode,
         .                   query_state: &mut OriginalQueryValues<'tcx>,
         .               ) -> Canonicalized<'tcx, V>
         .               where
         .                   V: TypeFoldable<'tcx>,
         .               {
 1,011,697 ( 0.00%)          let needs_canonical_flags = if canonicalize_region_mode.any() {
         .                       TypeFlags::NEEDS_INFER |
         .                       TypeFlags::HAS_FREE_REGIONS | // `HAS_RE_PLACEHOLDER` implies `HAS_FREE_REGIONS`
         .                       TypeFlags::HAS_TY_PLACEHOLDER |
         .                       TypeFlags::HAS_CT_PLACEHOLDER
         .                   } else {
         .                       TypeFlags::NEEDS_INFER
         .                           | TypeFlags::HAS_RE_PLACEHOLDER
         .                           | TypeFlags::HAS_TY_PLACEHOLDER
         .                           | TypeFlags::HAS_CT_PLACEHOLDER
         .                   };
         .           
         .                   // Fast path: nothing that needs to be canonicalized.
   204,677 ( 0.00%)          if !value.has_type_flags(needs_canonical_flags) {
         .                       let canon_value = Canonical {
         .                           max_universe: ty::UniverseIndex::ROOT,
         .                           variables: List::empty(),
   190,655 ( 0.00%)                  value,
         .                       };
   377,668 ( 0.00%)              return canon_value;
         .                   }
         .           
   897,106 ( 0.00%)          let mut canonicalizer = Canonicalizer {
         .                       infcx,
         .                       tcx,
         .                       canonicalize_region_mode,
         .                       needs_canonical_flags,
         .                       variables: SmallVec::new(),
         .                       query_state,
         .                       indices: FxHashMap::default(),
         .                       binder_index: ty::INNERMOST,
         .                   };
   327,214 ( 0.00%)          let out_value = value.fold_with(&mut canonicalizer);
         .           
         .                   // Once we have canonicalized `out_value`, it should not
         .                   // contain anything that ties it to this inference context
         .                   // anymore, so it should live in the global arena.
         .                   debug_assert!(!out_value.needs_infer());
         .           
   160,326 ( 0.00%)          let canonical_variables = tcx.intern_canonical_var_infos(&canonicalizer.variables);
         .           
         .                   let max_universe = canonical_variables
         .                       .iter()
   290,615 ( 0.00%)              .map(|cvar| cvar.universe())
         .                       .max()
         .                       .unwrap_or(ty::UniverseIndex::ROOT);
         .           
   537,761 ( 0.00%)          Canonical { max_universe, variables: canonical_variables, value: out_value }
 1,504,397 ( 0.01%)      }
         .           
         .               /// Creates a canonical variable replacing `kind` from the input,
         .               /// or returns an existing variable if `kind` has already been
         .               /// seen. `kind` is expected to be an unbound variable (or
         .               /// potentially a free region).
 1,518,830 ( 0.01%)      fn canonical_var(&mut self, info: CanonicalVarInfo<'tcx>, kind: GenericArg<'tcx>) -> BoundVar {
   303,766 ( 0.00%)          let Canonicalizer { variables, query_state, indices, .. } = self;
         .           
   303,766 ( 0.00%)          let var_values = &mut query_state.var_values;
         .           
         .                   // This code is hot. `variables` and `var_values` are usually small
         .                   // (fewer than 8 elements ~95% of the time). They are SmallVec's to
         .                   // avoid allocations in those cases. We also don't use `indices` to
         .                   // determine if a kind has been seen before until the limit of 8 has
         .                   // been exceeded, to also avoid allocations for `indices`.
   303,766 ( 0.00%)          if !var_values.spilled() {
         .                       // `var_values` is stack-allocated. `indices` isn't used yet. Do a
         .                       // direct linear search of `var_values`.
         .                       if let Some(idx) = var_values.iter().position(|&k| k == kind) {
         .                           // `kind` is already present in `var_values`.
         .                           BoundVar::new(idx)
         .                       } else {
         .                           // `kind` isn't present in `var_values`. Append it. Likewise
         .                           // for `info` and `variables`.
         .                           variables.push(info);
         .                           var_values.push(kind);
   489,610 ( 0.00%)                  assert_eq!(variables.len(), var_values.len());
         .           
         .                           // If `var_values` has become big enough to be heap-allocated,
         .                           // fill up `indices` to facilitate subsequent lookups.
    97,922 ( 0.00%)                  if var_values.spilled() {
       252 ( 0.00%)                      assert!(indices.is_empty());
     1,008 ( 0.00%)                      *indices = var_values
         .                                   .iter()
         .                                   .enumerate()
         .                                   .map(|(i, &kind)| (kind, BoundVar::new(i)))
         .                                   .collect();
         .                           }
         .                           // The cv is the index of the appended element.
   195,844 ( 0.00%)                  BoundVar::new(var_values.len() - 1)
         .                       }
         .                   } else {
         .                       // `var_values` is large. Do a hashmap search via `indices`.
     3,084 ( 0.00%)              *indices.entry(kind).or_insert_with(|| {
         .                           variables.push(info);
         .                           var_values.push(kind);
     1,744 ( 0.00%)                  assert_eq!(variables.len(), var_values.len());
       872 ( 0.00%)                  BoundVar::new(variables.len() - 1)
         .                       })
         .                   }
 1,366,947 ( 0.01%)      }
         .           
         .               /// Shorthand helper that creates a canonical region variable for
         .               /// `r` (always in the root universe). The reason that we always
         .               /// put these variables into the root universe is because this
         .               /// method is used during **query construction:** in that case, we
         .               /// are taking all the regions and just putting them into the most
         .               /// generic context we can. This may generate solutions that don't
         .               /// fit (e.g., that equate some region variable with a placeholder
-- line 578 ----------------------------------------
-- line 599 ----------------------------------------
         .           
         .               /// Creates a canonical variable (with the given `info`)
         .               /// representing the region `r`; return a region referencing it.
         .               fn canonical_var_for_region(
         .                   &mut self,
         .                   info: CanonicalVarInfo<'tcx>,
         .                   r: ty::Region<'tcx>,
         .               ) -> ty::Region<'tcx> {
   501,763 ( 0.00%)          let var = self.canonical_var(info, r.into());
         .                   let br = ty::BoundRegion { var, kind: ty::BrAnon(var.as_u32()) };
    89,479 ( 0.00%)          let region = ty::ReLateBound(self.binder_index, br);
   626,353 ( 0.00%)          self.tcx().mk_region(region)
         .               }
         .           
         .               /// Given a type variable `ty_var` of the given kind, first check
         .               /// if `ty_var` is bound to anything; if so, canonicalize
         .               /// *that*. Otherwise, create a new canonical variable for
         .               /// `ty_var`.
   117,976 ( 0.00%)      fn canonicalize_ty_var(&mut self, info: CanonicalVarInfo<'tcx>, ty_var: Ty<'tcx>) -> Ty<'tcx> {
    14,747 ( 0.00%)          let infcx = self.infcx;
         .                   let bound_to = infcx.shallow_resolve(ty_var);
    14,747 ( 0.00%)          if bound_to != ty_var {
         .                       self.fold_ty(bound_to)
         .                   } else {
   103,229 ( 0.00%)              let var = self.canonical_var(info, ty_var.into());
    14,747 ( 0.00%)              self.tcx().mk_ty(ty::Bound(self.binder_index, var.into()))
         .                   }
    88,482 ( 0.00%)      }
         .           
         .               /// Given a type variable `const_var` of the given kind, first check
         .               /// if `const_var` is bound to anything; if so, canonicalize
         .               /// *that*. Otherwise, create a new canonical variable for
         .               /// `const_var`.
         .               fn canonicalize_const_var(
         .                   &mut self,
         .                   info: CanonicalVarInfo<'tcx>,
-- line 634 ----------------------------------------

 2,305,361 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/canonical/canonicalizer.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs
--------------------------------------------------------------------------------
Ir                  

-- line 17 ----------------------------------------
         .           pub struct BitMask(pub BitMaskWord);
         .           
         .           #[allow(clippy::use_self)]
         .           impl BitMask {
         .               /// Returns a new `BitMask` with all bits inverted.
         .               #[inline]
         .               #[must_use]
         .               pub fn invert(self) -> Self {
   432,995 ( 0.00%)          BitMask(self.0 ^ BITMASK_MASK)
         .               }
         .           
         .               /// Flip the bit in the mask for the entry at the given index.
         .               ///
         .               /// Returns the bit's previous state.
         .               #[inline]
         .               #[allow(clippy::cast_ptr_alignment)]
         .               #[cfg(feature = "raw")]
-- line 33 ----------------------------------------
-- line 38 ----------------------------------------
         .                   // The bit was set if the bit is now 0.
         .                   self.0 & mask == 0
         .               }
         .           
         .               /// Returns a new `BitMask` with the lowest bit removed.
         .               #[inline]
         .               #[must_use]
         .               pub fn remove_lowest_bit(self) -> Self {
   529,888 ( 0.00%)          BitMask(self.0 & (self.0 - 1))
         .               }
         .               /// Returns whether the `BitMask` has at least one set bit.
         .               #[inline]
         .               pub fn any_bit_set(self) -> bool {
 6,677,559 ( 0.03%)          self.0 != 0
         .               }
         .           
         .               /// Returns the first set bit in the `BitMask`, if there is one.
         .               #[inline]
         .               pub fn lowest_set_bit(self) -> Option<usize> {
92,165,429 ( 0.45%)          if self.0 == 0 {
         .                       None
         .                   } else {
         .                       Some(unsafe { self.lowest_set_bit_nonzero() })
         .                   }
         .               }
         .           
         .               /// Returns the first set bit in the `BitMask`, if there is one. The
         .               /// bitmask must not be empty.
         .               #[inline]
         .               #[cfg(feature = "nightly")]
         .               pub unsafe fn lowest_set_bit_nonzero(self) -> usize {
   122,666 ( 0.00%)          intrinsics::cttz_nonzero(self.0) as usize / BITMASK_STRIDE
         .               }
         .               #[inline]
         .               #[cfg(not(feature = "nightly"))]
         .               pub unsafe fn lowest_set_bit_nonzero(self) -> usize {
         .                   self.trailing_zeros()
         .               }
         .           
         .               /// Returns the number of trailing zeroes in the `BitMask`.
-- line 77 ----------------------------------------
-- line 110 ----------------------------------------
         .           /// bits.
         .           pub struct BitMaskIter(BitMask);
         .           
         .           impl Iterator for BitMaskIter {
         .               type Item = usize;
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<usize> {
25,069,661 ( 0.12%)          let bit = self.0.lowest_set_bit()?;
         .                   self.0 = self.0.remove_lowest_bit();
         .                   Some(bit)
         .               }
         .           }

   427,630 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs
--------------------------------------------------------------------------------
Ir                  

-- line 46 ----------------------------------------
         .           ///
         .           /// To implement this conveniently, use the derive macro located in `rustc_macros`.
         .           pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {
         .               /// Consumers may find this more convenient to use with infallible folders than
         .               /// [`try_super_fold_with`][`TypeFoldable::try_super_fold_with`], to which the
         .               /// provided default definition delegates.  Implementors **should not** override
         .               /// this provided default definition, to ensure that the two methods are coherent
         .               /// (provide a definition of `try_super_fold_with` instead).
29,886,124 ( 0.15%)      fn super_fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {
 3,364,586 ( 0.02%)          self.try_super_fold_with(folder).into_ok()
31,013,244 ( 0.15%)      }
         .               /// Consumers may find this more convenient to use with infallible folders than
         .               /// [`try_fold_with`][`TypeFoldable::try_fold_with`], to which the provided
         .               /// default definition delegates.  Implementors **should not** override this
         .               /// provided default definition, to ensure that the two methods are coherent
         .               /// (provide a definition of `try_fold_with` instead).
 1,190,943 ( 0.01%)      fn fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {
   435,486 ( 0.00%)          self.try_fold_with(folder).into_ok()
 1,099,643 ( 0.01%)      }
         .           
         .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
         .                   self,
         .                   folder: &mut F,
         .               ) -> Result<Self, F::Error>;
         .           
46,326,315 ( 0.23%)      fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {
13,846,550 ( 0.07%)          self.try_super_fold_with(folder)
48,153,889 ( 0.23%)      }
         .           
         .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;
 2,853,679 ( 0.01%)      fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
 2,029,057 ( 0.01%)          self.super_visit_with(visitor)
 1,752,645 ( 0.01%)      }
         .           
         .               /// Returns `true` if `self` has any late-bound regions that are either
         .               /// bound by `binder` or bound by some binder outside of `binder`.
         .               /// If `binder` is `ty::INNERMOST`, this indicates whether
         .               /// there are any late-bound regions that appear free.
         .               fn has_vars_bound_at_or_above(&self, binder: ty::DebruijnIndex) -> bool {
 1,301,362 ( 0.01%)          self.visit_with(&mut HasEscapingVarsVisitor { outer_index: binder }).is_break()
         .               }
         .           
         .               /// Returns `true` if this `self` has any regions that escape `binder` (and
         .               /// hence are not bound by it).
         .               fn has_vars_bound_above(&self, binder: ty::DebruijnIndex) -> bool {
       459 ( 0.00%)          self.has_vars_bound_at_or_above(binder.shifted_in(1))
         .               }
         .           
 3,071,731 ( 0.01%)      fn has_escaping_bound_vars(&self) -> bool {
   538,543 ( 0.00%)          self.has_vars_bound_at_or_above(ty::INNERMOST)
 3,083,486 ( 0.02%)      }
         .           
   464,736 ( 0.00%)      #[instrument(level = "trace")]
         .               fn has_type_flags(&self, flags: TypeFlags) -> bool {
   569,270 ( 0.00%)          self.visit_with(&mut HasTypeFlagsVisitor { flags }).break_value() == Some(FoundFlags)
         .               }
         .               fn has_projections(&self) -> bool {
    22,914 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_PROJECTION)
         .               }
         .               fn has_opaque_types(&self) -> bool {
         .                   self.has_type_flags(TypeFlags::HAS_TY_OPAQUE)
         .               }
   111,808 ( 0.00%)      fn references_error(&self) -> bool {
         .                   self.has_type_flags(TypeFlags::HAS_ERROR)
   111,808 ( 0.00%)      }
         .               fn has_param_types_or_consts(&self) -> bool {
    12,015 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_CT_PARAM)
         .               }
         .               fn has_infer_regions(&self) -> bool {
         .                   self.has_type_flags(TypeFlags::HAS_RE_INFER)
         .               }
         .               fn has_infer_types(&self) -> bool {
         .                   self.has_type_flags(TypeFlags::HAS_TY_INFER)
         .               }
         .               fn has_infer_types_or_consts(&self) -> bool {
   639,816 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_TY_INFER | TypeFlags::HAS_CT_INFER)
         .               }
   327,470 ( 0.00%)      fn needs_infer(&self) -> bool {
   451,235 ( 0.00%)          self.has_type_flags(TypeFlags::NEEDS_INFER)
   333,212 ( 0.00%)      }
         .               fn has_placeholders(&self) -> bool {
         .                   self.has_type_flags(
         .                       TypeFlags::HAS_RE_PLACEHOLDER
         .                           | TypeFlags::HAS_TY_PLACEHOLDER
         .                           | TypeFlags::HAS_CT_PLACEHOLDER,
         .                   )
         .               }
         .               fn needs_subst(&self) -> bool {
         3 ( 0.00%)          self.has_type_flags(TypeFlags::NEEDS_SUBST)
         .               }
         .               /// "Free" regions in this context means that it has any region
         .               /// that is not (a) erased or (b) late-bound.
         .               fn has_free_regions(&self) -> bool {
         .                   self.has_type_flags(TypeFlags::HAS_FREE_REGIONS)
         .               }
         .           
         .               fn has_erased_regions(&self) -> bool {
-- line 142 ----------------------------------------
-- line 147 ----------------------------------------
         .               fn has_erasable_regions(&self) -> bool {
         .                   self.has_type_flags(TypeFlags::HAS_FREE_REGIONS)
         .               }
         .           
         .               /// Indicates whether this value references only 'global'
         .               /// generic parameters that are the same regardless of what fn we are
         .               /// in. This is used for caching.
         .               fn is_global(&self) -> bool {
   259,834 ( 0.00%)          !self.has_type_flags(TypeFlags::HAS_FREE_LOCAL_NAMES)
         .               }
         .           
         .               /// True if there are any late-bound regions
         .               fn has_late_bound_regions(&self) -> bool {
         6 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_RE_LATE_BOUND)
         .               }
         .           
         .               /// Indicates whether this value still has parameters/placeholders/inference variables
         .               /// which could be replaced later, in a way that would change the results of `impl`
         .               /// specialization.
       250 ( 0.00%)      fn still_further_specializable(&self) -> bool {
         .                   self.has_type_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE)
       300 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TypeFoldable<'tcx> for hir::Constness {
         .               fn try_super_fold_with<F: TypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {
         .                   Ok(self)
         .               }
         .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {
         .                   ControlFlow::CONTINUE
-- line 176 ----------------------------------------
-- line 194 ----------------------------------------
         .           
         .               fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;
         .           
         .               fn fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Binder<'tcx, T>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .                   Self: TypeFolder<'tcx, Error = !>,
         .               {
 7,961,625 ( 0.04%)          t.super_fold_with(self)
         .               }
         .           
         .               fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx>
         .               where
         .                   Self: TypeFolder<'tcx, Error = !>,
         .               {
   574,683 ( 0.00%)          t.super_fold_with(self)
         .               }
         .           
         .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx>
         .               where
         .                   Self: TypeFolder<'tcx, Error = !>,
         .               {
         .                   r.super_fold_with(self)
         .               }
         .           
         .               fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>
         .               where
         .                   Self: TypeFolder<'tcx, Error = !>,
         .               {
    40,087 ( 0.00%)          c.super_fold_with(self)
         .               }
         .           
         .               fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx>
         .               where
         .                   Self: TypeFolder<'tcx, Error = !>,
         .               {
    79,100 ( 0.00%)          p.super_fold_with(self)
         .               }
         .           
         .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx>
         .               where
         .                   Self: TypeFolder<'tcx, Error = !>,
         .               {
         .                   bug!("most type folders should not be folding MIR datastructures: {:?}", c)
         .               }
-- line 238 ----------------------------------------
-- line 247 ----------------------------------------
         .           /// A blanket implementation of this trait (that defers to the relevant
         .           /// method of [`TypeFolder`]) is provided for all infallible folders in
         .           /// order to ensure the two APIs are coherent.
         .           pub trait FallibleTypeFolder<'tcx>: TypeFolder<'tcx> {
         .               fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
   211,688 ( 0.00%)          t.try_super_fold_with(self)
         .               }
         .           
         .               fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
         .                   t.try_super_fold_with(self)
         .               }
         .           
         .               fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {
         .                   r.try_super_fold_with(self)
-- line 263 ----------------------------------------
-- line 269 ----------------------------------------
         .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
         .                   c.try_super_fold_with(self)
         .               }
         .           
         .               fn try_fold_predicate(
         .                   &mut self,
         .                   p: ty::Predicate<'tcx>,
         .               ) -> Result<ty::Predicate<'tcx>, Self::Error> {
    48,561 ( 0.00%)          p.try_super_fold_with(self)
         .               }
         .           
         .               fn try_fold_mir_const(
         .                   &mut self,
         .                   c: mir::ConstantKind<'tcx>,
         .               ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {
         .                   bug!("most type folders should not be folding MIR datastructures: {:?}", c)
         .               }
-- line 285 ----------------------------------------
-- line 286 ----------------------------------------
         .           }
         .           
         .           // Blanket implementation of fallible trait for infallible folders
         .           // delegates to infallible methods to prevent incoherence
         .           impl<'tcx, F> FallibleTypeFolder<'tcx> for F
         .           where
         .               F: TypeFolder<'tcx, Error = !>,
         .           {
   832,234 ( 0.00%)      fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
 1,739,938 ( 0.01%)          Ok(self.fold_binder(t))
 1,198,459 ( 0.01%)      }
         .           
 1,145,031 ( 0.01%)      fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
15,850,506 ( 0.08%)          Ok(self.fold_ty(t))
 1,020,918 ( 0.00%)      }
         .           
    70,464 ( 0.00%)      fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {
 2,445,527 ( 0.01%)          Ok(self.fold_region(r))
    70,464 ( 0.00%)      }
         .           
     8,631 ( 0.00%)      fn try_fold_const(
         .                   &mut self,
         .                   c: &'tcx ty::Const<'tcx>,
         .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
   645,983 ( 0.00%)          Ok(self.fold_const(c))
     8,026 ( 0.00%)      }
         .           
         .               fn try_fold_predicate(
         .                   &mut self,
         .                   p: ty::Predicate<'tcx>,
         .               ) -> Result<ty::Predicate<'tcx>, Self::Error> {
         .                   Ok(self.fold_predicate(p))
         .               }
         .           
    24,920 ( 0.00%)      fn try_fold_mir_const(
         .                   &mut self,
         .                   c: mir::ConstantKind<'tcx>,
         .               ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {
    77,695 ( 0.00%)          Ok(self.fold_mir_const(c))
    24,920 ( 0.00%)      }
         .           }
         .           
         .           pub trait TypeVisitor<'tcx>: Sized {
         .               type BreakTy = !;
         .           
         .               fn visit_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: &Binder<'tcx, T>,
         .               ) -> ControlFlow<Self::BreakTy> {
    42,375 ( 0.00%)          t.super_visit_with(self)
         .               }
         .           
         .               fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
    41,431 ( 0.00%)          t.super_visit_with(self)
         .               }
         .           
         .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   r.super_visit_with(self)
         .               }
         .           
       284 ( 0.00%)      fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   c.super_visit_with(self)
       248 ( 0.00%)      }
         .           
         .               fn visit_unevaluated_const(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   uv.super_visit_with(self)
         .               }
         .           
         .               fn visit_predicate(&mut self, p: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   p.super_visit_with(self)
         .               }
-- line 359 ----------------------------------------
-- line 376 ----------------------------------------
         .           
         .           impl<'tcx, F, G, H> TypeFolder<'tcx> for BottomUpFolder<'tcx, F, G, H>
         .           where
         .               F: FnMut(Ty<'tcx>) -> Ty<'tcx>,
         .               G: FnMut(ty::Region<'tcx>) -> ty::Region<'tcx>,
         .               H: FnMut(&'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>,
         .           {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
     1,122 ( 0.00%)          self.tcx
         .               }
         .           
         .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
    18,285 ( 0.00%)          let t = ty.super_fold_with(self);
         .                   (self.ty_op)(t)
         .               }
         .           
         .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
         .                   let r = r.super_fold_with(self);
         .                   (self.lt_op)(r)
         .               }
         .           
         .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
        89 ( 0.00%)          let ct = ct.super_fold_with(self);
         .                   (self.ct_op)(ct)
         .               }
         .           }
         .           
         .           ///////////////////////////////////////////////////////////////////////////
         .           // Region folder
         .           
         .           impl<'tcx> TyCtxt<'tcx> {
-- line 406 ----------------------------------------
-- line 415 ----------------------------------------
         .               ) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   value.fold_with(&mut RegionFolder::new(self, skipped_regions, &mut f))
         .               }
         .           
         .               /// Invoke `callback` on every region appearing free in `value`.
    13,785 ( 0.00%)      pub fn for_each_free_region(
         .                   self,
         .                   value: &impl TypeFoldable<'tcx>,
         .                   mut callback: impl FnMut(ty::Region<'tcx>),
         .               ) {
         .                   self.any_free_region_meets(value, |r| {
    97,953 ( 0.00%)              callback(r);
         .                       false
         .                   });
    11,895 ( 0.00%)      }
         .           
         .               /// Returns `true` if `callback` returns true for every region appearing free in `value`.
         .               pub fn all_free_regions_meet(
         .                   self,
         .                   value: &impl TypeFoldable<'tcx>,
         .                   mut callback: impl FnMut(ty::Region<'tcx>) -> bool,
         .               ) -> bool {
    17,510 ( 0.00%)          !self.any_free_region_meets(value, |r| !callback(r))
         .               }
         .           
         .               /// Returns `true` if `callback` returns true for some region appearing free in `value`.
         .               pub fn any_free_region_meets(
         .                   self,
         .                   value: &impl TypeFoldable<'tcx>,
         .                   callback: impl FnMut(ty::Region<'tcx>) -> bool,
         .               ) -> bool {
-- line 448 ----------------------------------------
-- line 473 ----------------------------------------
         .                       F: FnMut(ty::Region<'tcx>) -> bool,
         .                   {
         .                       type BreakTy = ();
         .           
         .                       fn visit_binder<T: TypeFoldable<'tcx>>(
         .                           &mut self,
         .                           t: &Binder<'tcx, T>,
         .                       ) -> ControlFlow<Self::BreakTy> {
    27,230 ( 0.00%)                  self.outer_index.shift_in(1);
    29,528 ( 0.00%)                  let result = t.as_ref().skip_binder().visit_with(self);
    22,146 ( 0.00%)                  self.outer_index.shift_out(1);
         .                           result
         .                       }
         .           
    85,100 ( 0.00%)              fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
   146,069 ( 0.00%)                  match *r {
     2,266 ( 0.00%)                      ty::ReLateBound(debruijn, _) if debruijn < self.outer_index => {
         .                                   ControlFlow::CONTINUE
         .                               }
         .                               _ => {
         .                                   if (self.callback)(r) {
         .                                       ControlFlow::BREAK
         .                                   } else {
         .                                       ControlFlow::CONTINUE
         .                                   }
         .                               }
         .                           }
   119,140 ( 0.00%)              }
         .           
         .                       fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                           // We're only interested in types involving regions
   121,997 ( 0.00%)                  if ty.flags().intersects(TypeFlags::HAS_FREE_REGIONS) {
   149,219 ( 0.00%)                      ty.super_visit_with(self)
         .                           } else {
         .                               ControlFlow::CONTINUE
         .                           }
         .                       }
         .                   }
         .           
   178,608 ( 0.00%)          value.visit_with(&mut RegionVisitor { outer_index: ty::INNERMOST, callback }).is_break()
         .               }
         .           }
         .           
         .           /// Folds over the substructure of a type, visiting its component
         .           /// types and all regions that occur *free* within it.
         .           ///
         .           /// That is, `Ty` can contain function or method types that bind
         .           /// regions at the call site (`ReLateBound`), and occurrences of
-- line 520 ----------------------------------------
-- line 540 ----------------------------------------
         .           
         .           impl<'a, 'tcx> RegionFolder<'a, 'tcx> {
         .               #[inline]
         .               pub fn new(
         .                   tcx: TyCtxt<'tcx>,
         .                   skipped_regions: &'a mut bool,
         .                   fold_region_fn: &'a mut dyn FnMut(ty::Region<'tcx>, ty::DebruijnIndex) -> ty::Region<'tcx>,
         .               ) -> RegionFolder<'a, 'tcx> {
   669,170 ( 0.00%)          RegionFolder { tcx, skipped_regions, current_index: ty::INNERMOST, fold_region_fn }
         .               }
         .           }
         .           
         .           impl<'a, 'tcx> TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
   302,796 ( 0.00%)          self.tcx
   302,796 ( 0.00%)      }
         .           
         .               fn fold_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: ty::Binder<'tcx, T>,
         .               ) -> ty::Binder<'tcx, T> {
    41,756 ( 0.00%)          self.current_index.shift_in(1);
   128,859 ( 0.00%)          let t = t.super_fold_with(self);
    38,981 ( 0.00%)          self.current_index.shift_out(1);
         .                   t
         .               }
         .           
     9,892 ( 0.00%)      #[instrument(skip(self), level = "debug")]
         .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
   134,112 ( 0.00%)          match *r {
     9,892 ( 0.00%)              ty::ReLateBound(debruijn, _) if debruijn < self.current_index => {
         .                           debug!(?self.current_index, "skipped bound region");
     9,892 ( 0.00%)                  *self.skipped_regions = true;
         .                           r
         .                       }
         .                       _ => {
         .                           debug!(?self.current_index, "folding free region");
   372,660 ( 0.00%)                  (self.fold_region_fn)(r, self.current_index)
         .                       }
         .                   }
         .               }
         .           }
         .           
         .           ///////////////////////////////////////////////////////////////////////////
         .           // Bound vars replacer
         .           
-- line 585 ----------------------------------------
-- line 592 ----------------------------------------
         .               current_index: ty::DebruijnIndex,
         .           
         .               fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,
         .               fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,
         .               fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,
         .           }
         .           
         .           impl<'a, 'tcx> BoundVarReplacer<'a, 'tcx> {
   292,326 ( 0.00%)      fn new(
         .                   tcx: TyCtxt<'tcx>,
         .                   fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,
         .                   fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,
         .                   fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,
         .               ) -> Self {
 1,099,805 ( 0.01%)          BoundVarReplacer { tcx, current_index: ty::INNERMOST, fld_r, fld_t, fld_c }
   146,163 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, 'tcx> TypeFolder<'tcx> for BoundVarReplacer<'a, 'tcx> {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
   438,187 ( 0.00%)          self.tcx
   189,638 ( 0.00%)      }
         .           
         .               fn fold_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: ty::Binder<'tcx, T>,
         .               ) -> ty::Binder<'tcx, T> {
   710,843 ( 0.00%)          self.current_index.shift_in(1);
 1,286,980 ( 0.01%)          let t = t.super_fold_with(self);
   667,060 ( 0.00%)          self.current_index.shift_out(1);
         .                   t
         .               }
         .           
 1,433,540 ( 0.01%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
 1,058,162 ( 0.01%)          match *t.kind() {
    30,075 ( 0.00%)              ty::Bound(debruijn, bound_ty) if debruijn == self.current_index => {
     6,024 ( 0.00%)                  if let Some(fld_t) = self.fld_t.as_mut() {
         .                               let ty = fld_t(bound_ty);
     6,024 ( 0.00%)                      return ty::fold::shift_vars(self.tcx, &ty, self.current_index.as_u32());
         .                           }
         .                       }
 1,046,114 ( 0.01%)              _ if t.has_vars_bound_at_or_above(self.current_index) => {
 1,174,933 ( 0.01%)                  return t.super_fold_with(self);
         .                       }
         .                       _ => {}
         .                   }
         .                   t
 1,300,350 ( 0.01%)      }
         .           
   566,424 ( 0.00%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
   481,126 ( 0.00%)          match *r {
   458,058 ( 0.00%)              ty::ReLateBound(debruijn, br) if debruijn == self.current_index => {
   227,791 ( 0.00%)                  if let Some(fld_r) = self.fld_r.as_mut() {
         .                               let region = fld_r(br);
   474,366 ( 0.00%)                      return if let ty::ReLateBound(debruijn1, br) = *region {
         .                                   // If the callback returns a late-bound region,
         .                                   // that region should always use the INNERMOST
         .                                   // debruijn index. Then we adjust it to the
         .                                   // correct depth.
     9,392 ( 0.00%)                          assert_eq!(debruijn1, ty::INNERMOST);
    92,638 ( 0.00%)                          self.tcx.mk_region(ty::ReLateBound(debruijn, br))
         .                               } else {
         .                                   region
         .                               };
         .                           }
         .                       }
         .                       _ => {}
         .                   }
         .                   r
   566,424 ( 0.00%)      }
         .           
         .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
       414 ( 0.00%)          match *ct {
         .                       ty::Const { val: ty::ConstKind::Bound(debruijn, bound_const), ty }
         .                           if debruijn == self.current_index =>
         .                       {
         .                           if let Some(fld_c) = self.fld_c.as_mut() {
         .                               let ct = fld_c(bound_const, ty);
         .                               return ty::fold::shift_vars(self.tcx, &ct, self.current_index.as_u32());
         .                           }
         .                       }
       138 ( 0.00%)              _ if ct.has_vars_bound_at_or_above(self.current_index) => {
         .                           return ct.super_fold_with(self);
         .                       }
         .                       _ => {}
         .                   }
         .                   ct
         .               }
         .           }
         .           
-- line 681 ----------------------------------------
-- line 697 ----------------------------------------
         .                   mut fld_r: F,
         .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
         .               where
         .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   let mut region_map = BTreeMap::new();
         .                   let mut real_fld_r =
   735,751 ( 0.00%)              |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));
    47,527 ( 0.00%)          let value = value.skip_binder();
   183,732 ( 0.00%)          let value = if !value.has_escaping_bound_vars() {
   318,446 ( 0.00%)              value
         .                   } else {
    56,879 ( 0.00%)              let mut replacer = BoundVarReplacer::new(self, Some(&mut real_fld_r), None, None);
    16,038 ( 0.00%)              value.fold_with(&mut replacer)
         .                   };
   735,725 ( 0.00%)          (value, region_map)
         .               }
         .           
         .               /// Replaces all escaping bound vars. The `fld_r` closure replaces escaping
         .               /// bound regions; the `fld_t` closure replaces escaping bound types and the `fld_c`
         .               /// closure replaces escaping bound consts.
 1,097,091 ( 0.01%)      pub fn replace_escaping_bound_vars<T, F, G, H>(
         .                   self,
         .                   value: T,
         .                   mut fld_r: F,
         .                   mut fld_t: G,
         .                   mut fld_c: H,
         .               ) -> T
         .               where
         .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
         .                   G: FnMut(ty::BoundTy) -> Ty<'tcx>,
         .                   H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,
         .                   T: TypeFoldable<'tcx>,
         .               {
   188,041 ( 0.00%)          if !value.has_escaping_bound_vars() {
   310,785 ( 0.00%)              value
         .                   } else {
         .                       let mut replacer =
 1,682,311 ( 0.01%)                  BoundVarReplacer::new(self, Some(&mut fld_r), Some(&mut fld_t), Some(&mut fld_c));
    92,854 ( 0.00%)              value.fold_with(&mut replacer)
         .                   }
   754,016 ( 0.00%)      }
         .           
         .               /// Replaces all types or regions bound by the given `Binder`. The `fld_r`
         .               /// closure replaces bound regions while the `fld_t` closure replaces bound
         .               /// types.
 3,019,183 ( 0.01%)      pub fn replace_bound_vars<T, F, G, H>(
         .                   self,
         .                   value: Binder<'tcx, T>,
         .                   mut fld_r: F,
         .                   fld_t: G,
         .                   fld_c: H,
         .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
         .               where
         .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
         .                   G: FnMut(ty::BoundTy) -> Ty<'tcx>,
         .                   H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   let mut region_map = BTreeMap::new();
   504,902 ( 0.00%)          let real_fld_r = |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));
 2,712,450 ( 0.01%)          let value = self.replace_escaping_bound_vars(value.skip_binder(), real_fld_r, fld_t, fld_c);
 2,313,344 ( 0.01%)          (value, region_map)
 2,264,884 ( 0.01%)      }
         .           
         .               /// Replaces any late-bound regions bound in `value` with
         .               /// free variants attached to `all_outlive_scope`.
    46,607 ( 0.00%)      pub fn liberate_late_bound_regions<T>(
         .                   self,
         .                   all_outlive_scope: DefId,
         .                   value: ty::Binder<'tcx, T>,
         .               ) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   self.replace_late_bound_regions(value, |br| {
    64,350 ( 0.00%)              self.mk_region(ty::ReFree(ty::FreeRegion {
     9,900 ( 0.00%)                  scope: all_outlive_scope,
         .                           bound_region: br.kind,
         .                       }))
         .                   })
         .                   .0
    25,422 ( 0.00%)      }
         .           
         .               pub fn shift_bound_var_indices<T>(self, bound_vars: usize, value: T) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   self.replace_escaping_bound_vars(
   131,265 ( 0.00%)              value,
        75 ( 0.00%)              |r| {
       525 ( 0.00%)                  self.mk_region(ty::ReLateBound(
         .                               ty::INNERMOST,
         .                               ty::BoundRegion {
       300 ( 0.00%)                          var: ty::BoundVar::from_usize(r.var.as_usize() + bound_vars),
         .                                   kind: r.kind,
         .                               },
         .                           ))
       150 ( 0.00%)              },
         .                       |t| {
         .                           self.mk_ty(ty::Bound(
         .                               ty::INNERMOST,
         .                               ty::BoundTy {
         .                                   var: ty::BoundVar::from_usize(t.var.as_usize() + bound_vars),
         .                                   kind: t.kind,
         .                               },
         .                           ))
-- line 804 ----------------------------------------
-- line 843 ----------------------------------------
         .               fn collect_late_bound_regions<T>(
         .                   self,
         .                   value: &Binder<'tcx, T>,
         .                   just_constraint: bool,
         .               ) -> FxHashSet<ty::BoundRegionKind>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
     7,156 ( 0.00%)          let mut collector = LateBoundRegionsCollector::new(just_constraint);
         .                   let result = value.as_ref().skip_binder().visit_with(&mut collector);
         .                   assert!(result.is_continue()); // should never have stopped early
    12,920 ( 0.00%)          collector.regions
         .               }
         .           
         .               /// Replaces any late-bound regions bound in `value` with `'erased`. Useful in codegen but also
         .               /// method lookup and a few other places where precise region relationships are not required.
     4,123 ( 0.00%)      pub fn erase_late_bound_regions<T>(self, value: Binder<'tcx, T>) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
    33,204 ( 0.00%)          self.replace_late_bound_regions(value, |_| self.lifetimes.re_erased).0
     3,534 ( 0.00%)      }
         .           
         .               /// Rewrite any late-bound regions so that they are anonymous. Region numbers are
         .               /// assigned starting at 0 and increasing monotonically in the order traversed
         .               /// by the fold operation.
         .               ///
         .               /// The chief purpose of this function is to canonicalize regions so that two
         .               /// `FnSig`s or `TraitRef`s which are equivalent up to region naming will become
         .               /// structurally identical. For example, `for<'a, 'b> fn(&'a isize, &'b isize)` and
         .               /// `for<'a, 'b> fn(&'b isize, &'a isize)` will become identical after anonymization.
   429,970 ( 0.00%)      pub fn anonymize_late_bound_regions<T>(self, sig: Binder<'tcx, T>) -> Binder<'tcx, T>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
   313,430 ( 0.00%)          let mut counter = 0;
    37,344 ( 0.00%)          let inner = self
         .                       .replace_late_bound_regions(sig, |_| {
         .                           let br = ty::BoundRegion {
    16,544 ( 0.00%)                      var: ty::BoundVar::from_u32(counter),
         .                               kind: ty::BrAnon(counter),
         .                           };
    66,176 ( 0.00%)                  let r = self.mk_region(ty::ReLateBound(ty::INNERMOST, br));
    41,360 ( 0.00%)                  counter += 1;
         .                           r
         .                       })
         .                       .0;
    62,686 ( 0.00%)          let bound_vars = self.mk_bound_variable_kinds(
   188,058 ( 0.00%)              (0..counter).map(|i| ty::BoundVariableKind::Region(ty::BrAnon(i))),
         .                   );
   331,148 ( 0.00%)          Binder::bind_with_vars(inner, bound_vars)
   371,993 ( 0.00%)      }
         .           }
         .           
         .           pub struct ValidateBoundVars<'tcx> {
         .               bound_vars: &'tcx ty::List<ty::BoundVariableKind>,
         .               binder_index: ty::DebruijnIndex,
         .               // We may encounter the same variable at different levels of binding, so
         .               // this can't just be `Ty`
         .               visited: SsoHashSet<(ty::DebruijnIndex, Ty<'tcx>)>,
-- line 902 ----------------------------------------
-- line 1004 ----------------------------------------
         .               tcx: TyCtxt<'tcx>,
         .               current_index: ty::DebruijnIndex,
         .               amount: u32,
         .           }
         .           
         .           impl<'tcx> Shifter<'tcx> {
         .               pub fn new(tcx: TyCtxt<'tcx>, amount: u32) -> Self {
         .                   Shifter { tcx, current_index: ty::INNERMOST, amount }
    13,412 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TypeFolder<'tcx> for Shifter<'tcx> {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
     5,010 ( 0.00%)          self.tcx
         .               }
         .           
         .               fn fold_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: ty::Binder<'tcx, T>,
         .               ) -> ty::Binder<'tcx, T> {
     6,972 ( 0.00%)          self.current_index.shift_in(1);
    31,020 ( 0.00%)          let t = t.super_fold_with(self);
     6,944 ( 0.00%)          self.current_index.shift_out(1);
         .                   t
         .               }
         .           
         .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
     2,418 ( 0.00%)          match *r {
         .                       ty::ReLateBound(debruijn, br) => {
     4,816 ( 0.00%)                  if self.amount == 0 || debruijn < self.current_index {
         .                               r
         .                           } else {
     1,120 ( 0.00%)                      let debruijn = debruijn.shifted_in(self.amount);
         .                               let shifted = ty::ReLateBound(debruijn, br);
    11,200 ( 0.00%)                      self.tcx.mk_region(shifted)
         .                           }
         .                       }
         .                       _ => r,
         .                   }
         .               }
         .           
         .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
    29,054 ( 0.00%)          match *ty.kind() {
         .                       ty::Bound(debruijn, bound_ty) => {
         .                           if self.amount == 0 || debruijn < self.current_index {
         .                               ty
         .                           } else {
         .                               let debruijn = debruijn.shifted_in(self.amount);
         .                               self.tcx.mk_ty(ty::Bound(debruijn, bound_ty))
         .                           }
         .                       }
         .           
    45,116 ( 0.00%)              _ => ty.super_fold_with(self),
         .                   }
         .               }
         .           
         .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
         .                   if let ty::Const { val: ty::ConstKind::Bound(debruijn, bound_ct), ty } = *ct {
         .                       if self.amount == 0 || debruijn < self.current_index {
         .                           ct
         .                       } else {
-- line 1064 ----------------------------------------
-- line 1073 ----------------------------------------
         .           
         .           pub fn shift_region<'tcx>(
         .               tcx: TyCtxt<'tcx>,
         .               region: ty::Region<'tcx>,
         .               amount: u32,
         .           ) -> ty::Region<'tcx> {
         .               match region {
         .                   ty::ReLateBound(debruijn, br) if amount > 0 => {
     9,750 ( 0.00%)              tcx.mk_region(ty::ReLateBound(debruijn.shifted_in(amount), *br))
         .                   }
         .                   _ => region,
         .               }
         .           }
         .           
         .           pub fn shift_vars<'tcx, T>(tcx: TyCtxt<'tcx>, value: T, amount: u32) -> T
         .           where
         .               T: TypeFoldable<'tcx>,
         .           {
         .               debug!("shift_vars(value={:?}, amount={})", value, amount);
         .           
    13,592 ( 0.00%)      value.fold_with(&mut Shifter::new(tcx, amount))
         .           }
         .           
         .           #[derive(Debug, PartialEq, Eq, Copy, Clone)]
         .           struct FoundEscapingVars;
         .           
         .           /// An "escaping var" is a bound var whose binder is not part of `t`. A bound var can be a
         .           /// bound region or a bound type.
         .           ///
-- line 1101 ----------------------------------------
-- line 1128 ----------------------------------------
         .           
         .           impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {
         .               type BreakTy = FoundEscapingVars;
         .           
         .               fn visit_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: &Binder<'tcx, T>,
         .               ) -> ControlFlow<Self::BreakTy> {
   116,419 ( 0.00%)          self.outer_index.shift_in(1);
         .                   let result = t.super_visit_with(self);
   151,911 ( 0.00%)          self.outer_index.shift_out(1);
         .                   result
         .               }
         .           
         .               #[inline]
         .               fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   // If the outer-exclusive-binder is *strictly greater* than
         .                   // `outer_index`, that means that `t` contains some content
         .                   // bound at `outer_index` or above (because
-- line 1146 ----------------------------------------
-- line 1160 ----------------------------------------
         .                   // visited.
         .                   if r.bound_at_or_above_binder(self.outer_index) {
         .                       ControlFlow::Break(FoundEscapingVars)
         .                   } else {
         .                       ControlFlow::CONTINUE
         .                   }
         .               }
         .           
     2,356 ( 0.00%)      fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   // we don't have a `visit_infer_const` callback, so we have to
         .                   // hook in here to catch this case (annoying...), but
         .                   // otherwise we do want to remember to visit the rest of the
         .                   // const, as it has types/regions embedded in a lot of other
         .                   // places.
     3,581 ( 0.00%)          match ct.val {
         .                       ty::ConstKind::Bound(debruijn, _) if debruijn >= self.outer_index => {
         .                           ControlFlow::Break(FoundEscapingVars)
         .                       }
        12 ( 0.00%)              _ => ct.super_visit_with(self),
         .                   }
     2,356 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   if predicate.inner.outer_exclusive_binder > self.outer_index {
         .                       ControlFlow::Break(FoundEscapingVars)
         .                   } else {
         .                       ControlFlow::CONTINUE
         .                   }
-- line 1188 ----------------------------------------
-- line 1210 ----------------------------------------
         .               #[instrument(level = "trace")]
         .               fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<Self::BreakTy> {
         .                   debug!(
         .                       "HasTypeFlagsVisitor: t={:?} t.flags={:?} self.flags={:?}",
         .                       t,
         .                       t.flags(),
         .                       self.flags
         .                   );
 2,389,753 ( 0.01%)          if t.flags().intersects(self.flags) {
         .                       ControlFlow::Break(FoundFlags)
         .                   } else {
         .                       ControlFlow::CONTINUE
         .                   }
         .               }
         .           
         .               #[inline]
         .               #[instrument(skip(self), level = "trace")]
         .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
    68,742 ( 0.00%)          let flags = r.type_flags();
         .                   trace!(r.flags=?flags);
         .                   if flags.intersects(self.flags) {
         .                       ControlFlow::Break(FoundFlags)
         .                   } else {
         .                       ControlFlow::CONTINUE
         .                   }
         .               }
         .           
         .               #[inline]
         .               #[instrument(level = "trace")]
         .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
   225,197 ( 0.00%)          let flags = FlagComputation::for_const(c);
         .                   trace!(r.flags=?flags);
    11,760 ( 0.00%)          if flags.intersects(self.flags) {
         .                       ControlFlow::Break(FoundFlags)
         .                   } else {
         .                       ControlFlow::CONTINUE
         .                   }
         .               }
         .           
         .               #[inline]
         .               #[instrument(level = "trace")]
         .               fn visit_unevaluated_const(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {
    24,290 ( 0.00%)          let flags = FlagComputation::for_unevaluated_const(uv);
         .                   trace!(r.flags=?flags);
         .                   if flags.intersects(self.flags) {
         .                       ControlFlow::Break(FoundFlags)
         .                   } else {
         .                       ControlFlow::CONTINUE
         .                   }
         .               }
         .           
-- line 1260 ----------------------------------------
-- line 1285 ----------------------------------------
         .               /// them constraints `'a == 'b`. But if you have `<&'a u32 as
         .               /// Trait>::Foo` and `<&'b u32 as Trait>::Foo`, normalizing those
         .               /// types may mean that `'a` and `'b` don't appear in the results,
         .               /// so they are not considered *constrained*.
         .               just_constrained: bool,
         .           }
         .           
         .           impl LateBoundRegionsCollector {
     3,230 ( 0.00%)      fn new(just_constrained: bool) -> Self {
    22,610 ( 0.00%)          LateBoundRegionsCollector {
         .                       current_index: ty::INNERMOST,
         .                       regions: Default::default(),
         .                       just_constrained,
         .                   }
     3,230 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {
         .               fn visit_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: &Binder<'tcx, T>,
         .               ) -> ControlFlow<Self::BreakTy> {
       681 ( 0.00%)          self.current_index.shift_in(1);
       681 ( 0.00%)          let result = t.super_visit_with(self);
       681 ( 0.00%)          self.current_index.shift_out(1);
         .                   result
         .               }
         .           
    12,054 ( 0.00%)      fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   // if we are only looking for "constrained" region, we have to
         .                   // ignore the inputs to a projection, as they may not appear
         .                   // in the normalized form
    15,436 ( 0.00%)          if self.just_constrained {
    16,760 ( 0.00%)              if let ty::Projection(..) | ty::Opaque(..) = t.kind() {
         .                           return ControlFlow::CONTINUE;
         .                       }
         .                   }
         .           
    18,915 ( 0.00%)          t.super_visit_with(self)
     8,036 ( 0.00%)      }
         .           
         .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   // if we are only looking for "constrained" region, we have to
         .                   // ignore the inputs of an unevaluated const, as they may not appear
         .                   // in the normalized form
         .                   if self.just_constrained {
         .                       if let ty::ConstKind::Unevaluated(..) = c.val {
         .                           return ControlFlow::CONTINUE;
         .                       }
         .                   }
         .           
         .                   c.super_visit_with(self)
         .               }
         .           
         .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
     8,404 ( 0.00%)          if let ty::ReLateBound(debruijn, br) = *r {
     1,620 ( 0.00%)              if debruijn == self.current_index {
         .                           self.regions.insert(br.kind);
         .                       }
         .                   }
         .                   ControlFlow::CONTINUE
         .               }
         .           }

 1,246,275 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir                  

-- line 186 ----------------------------------------
         .           /// // use the values stored in map
         .           /// ```
         .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
         .               pub(crate) hash_builder: S,
         .               pub(crate) table: RawTable<(K, V), A>,
         .           }
         .           
         .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
     1,352 ( 0.00%)      fn clone(&self) -> Self {
   120,897 ( 0.00%)          HashMap {
         .                       hash_builder: self.hash_builder.clone(),
    24,469 ( 0.00%)              table: self.table.clone(),
         .                   }
     1,521 ( 0.00%)      }
         .           
         .               fn clone_from(&mut self, source: &Self) {
         .                   self.table.clone_from(&source.table);
         .           
         .                   // Update hash_builder only if we successfully cloned all elements.
         .                   self.hash_builder.clone_from(&source.hash_builder);
         .               }
         .           }
-- line 207 ----------------------------------------
-- line 210 ----------------------------------------
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash,
         .               S: BuildHasher,
         .           {
   852,887 ( 0.00%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
         .           }
         .           
         .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: ?Sized + Eq,
         .           {
 1,725,484 ( 0.01%)      move |x| k.eq(x.0.borrow())
         .           }
         .           
         .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: ?Sized + Eq,
         .           {
 2,342,452 ( 0.01%)      move |x| k.eq(x.borrow())
         .           }
         .           
         .           #[cfg(not(feature = "nightly"))]
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
         .               use core::hash::Hasher;
         .               let mut state = hash_builder.build_hasher();
         .               val.hash(&mut state);
         .               state.finish()
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           #[cfg_attr(feature = "inline-more", inline)]
         2 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash + ?Sized,
         .               S: BuildHasher,
         .           {
    10,115 ( 0.00%)      hash_builder.hash_one(val)
         4 ( 0.00%)  }
         .           
         .           #[cfg(not(feature = "nightly"))]
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
         .           where
         .               K: Hash,
         .               S: BuildHasher,
         .           {
-- line 274 ----------------------------------------
-- line 280 ----------------------------------------
         .           
         .           #[cfg(feature = "nightly")]
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
         .           where
         .               K: Hash,
         .               S: BuildHasher,
         .           {
   107,454 ( 0.00%)      hash_builder.hash_one(val)
         .           }
         .           
         .           #[cfg(feature = "ahash")]
         .           impl<K, V> HashMap<K, V, DefaultHashBuilder> {
         .               /// Creates an empty `HashMap`.
         .               ///
         .               /// The hash map is initially created with a capacity of 0, so it will not allocate until it
         .               /// is first inserted into.
-- line 296 ----------------------------------------
-- line 367 ----------------------------------------
         .               /// let s = DefaultHashBuilder::default();
         .               /// let mut map = HashMap::with_hasher(s);
         .               /// map.insert(1, 2);
         .               /// ```
         .               ///
         .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub const fn with_hasher(hash_builder: S) -> Self {
   840,492 ( 0.00%)          Self {
         .                       hash_builder,
         .                       table: RawTable::new(),
         .                   }
         .               }
         .           
         .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
         .               /// to hash the keys.
         .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
         .               /// use hashbrown::hash_map::DefaultHashBuilder;
         .               ///
         .               /// let s = DefaultHashBuilder::default();
         .               /// let mut map = HashMap::with_hasher(s);
         .               /// map.insert(1, 2);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
       361 ( 0.00%)          Self {
         .                       hash_builder,
         .                       table: RawTable::new_in(alloc),
         .                   }
         .               }
         .           
         .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
         .               /// to hash the keys. It will be allocated with the given allocator.
         .               ///
-- line 453 ----------------------------------------
-- line 527 ----------------------------------------
         .               /// map.insert("c", 3);
         .               ///
         .               /// for key in map.keys() {
         .               ///     println!("{}", key);
         .               /// }
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn keys(&self) -> Keys<'_, K, V> {
         6 ( 0.00%)          Keys { inner: self.iter() }
         .               }
         .           
         .               /// An iterator visiting all values in arbitrary order.
         .               /// The iterator element type is `&'a V`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 543 ----------------------------------------
-- line 663 ----------------------------------------
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// assert_eq!(a.len(), 0);
         .               /// a.insert(1, "a");
         .               /// assert_eq!(a.len(), 1);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn len(&self) -> usize {
    69,879 ( 0.00%)          self.table.len()
         .               }
         .           
         .               /// Returns `true` if the map contains no elements.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// assert!(a.is_empty());
         .               /// a.insert(1, "a");
         .               /// assert!(!a.is_empty());
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn is_empty(&self) -> bool {
   321,578 ( 0.00%)          self.len() == 0
         .               }
         .           
         .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
         .               /// allocated memory for reuse.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// a.insert(1, "a");
         .               /// a.clear();
         .               /// assert!(a.is_empty());
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         6 ( 0.00%)      pub fn clear(&mut self) {
         .                   self.table.clear();
         6 ( 0.00%)      }
         .           
         .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
         .               /// The map cannot be used after calling this.
         .               /// The iterator element type is `K`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
         .               /// }
         .               ///
         .               /// assert_eq!(letters[&'s'], 2);
         .               /// assert_eq!(letters[&'t'], 3);
         .               /// assert_eq!(letters[&'u'], 1);
         .               /// assert_eq!(letters.get(&'y'), None);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
    10,476 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
         .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
         .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
     2,305 ( 0.00%)              Entry::Occupied(OccupiedEntry {
         .                           hash,
         .                           key: Some(key),
         .                           elem,
         .                           table: self,
         .                       })
         .                   } else {
    10,790 ( 0.00%)              Entry::Vacant(VacantEntry {
         .                           hash,
         .                           key,
         .                           table: self,
         .                       })
         .                   }
    13,095 ( 0.00%)      }
         .           
         .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
         .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
 3,604,220 ( 0.02%)          match self.get_inner(k) {
         .                       Some(&(_, ref v)) => Some(v),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Returns the key-value pair corresponding to the supplied key.
         .               ///
         .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
         .               }
         .           
         .               #[inline]
         .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
 4,364,171 ( 0.02%)          if self.table.is_empty() {
         .                       None
         .                   } else {
         1 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
         .                       self.table.get(hash, equivalent_key(k))
         .                   }
         .               }
         .           
         .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
         .               ///
         .               /// The supplied key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// assert_eq!(map.contains_key(&1), true);
         .               /// assert_eq!(map.contains_key(&2), false);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
 1,905,252 ( 0.01%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   self.get_inner(k).is_some()
 2,408,460 ( 0.01%)      }
         .           
         .               /// Returns a mutable reference to the value corresponding to the key.
         .               ///
         .               /// The key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
         .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// if let Some(x) = map.get_mut(&1) {
         .               ///     *x = "b";
         .               /// }
         .               /// assert_eq!(map[&1], "b");
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
     2,058 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
    24,768 ( 0.00%)          match self.get_inner_mut(k) {
         .                       Some(&mut (_, ref mut v)) => Some(v),
         .                       None => None,
         .                   }
     4,116 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
     8,279 ( 0.00%)          if self.table.is_empty() {
         .                       None
         .                   } else {
         .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
    13,700 ( 0.00%)              self.table.get_mut(hash, equivalent_key(k))
         .                   }
         .               }
         .           
         .               /// Attempts to get mutable references to `N` values in the map at once.
         .               ///
         .               /// Returns an array of length `N` with the results of each query. For soundness, at most one
         .               /// mutable reference will be returned to any value. `None` will be returned if any of the
         .               /// keys are duplicates or missing.
-- line 1223 ----------------------------------------
-- line 1495 ----------------------------------------
         .               /// assert_eq!(map.insert(37, "a"), None);
         .               /// assert_eq!(map.is_empty(), false);
         .               ///
         .               /// map.insert(37, "b");
         .               /// assert_eq!(map.insert(37, "c"), Some("b"));
         .               /// assert_eq!(map[&37], "c");
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
16,641,867 ( 0.08%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
         .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
    34,846 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
        10 ( 0.00%)              Some(mem::replace(item, v))
         .                   } else {
 7,695,142 ( 0.04%)              self.table
 9,293,502 ( 0.05%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
 1,132,699 ( 0.01%)              None
         .                   }
15,041,539 ( 0.07%)      }
         .           
         .               /// Insert a key-value pair into the map without checking
         .               /// if the key already exists in the map.
         .               ///
         .               /// Returns a reference to the key and value just inserted.
         .               ///
         .               /// This operation is safe if a key does not exist in the map.
         .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// assert_eq!(map.remove(&1), Some("a"));
         .               /// assert_eq!(map.remove(&1), None);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
   223,385 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
 3,340,016 ( 0.02%)          match self.remove_entry(k) {
   175,418 ( 0.00%)              Some((_, v)) => Some(v),
   193,998 ( 0.00%)              None => None,
         .                   }
   496,346 ( 0.00%)      }
         .           
         .               /// Removes a key from the map, returning the stored key and value if the
         .               /// key was previously in the map.
         .               ///
         .               /// The key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
 1,171,761 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
         .               }
         .           }
         .           
         .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
         .               /// Creates a raw entry builder for the HashMap.
         .               ///
         .               /// Raw entries provide the lowest level of control for searching and
         .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
         .               /// Creates a `RawEntryMut` from the given key and its hash.
         .               #[inline]
         .               #[allow(clippy::wrong_self_convention)]
         .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Eq,
         .               {
16,230,708 ( 0.08%)          self.from_hash(hash, equivalent(k))
         .               }
         .           }
         .           
         .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
         .               /// Creates a `RawEntryMut` from the given hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
42,038,303 ( 0.21%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   for<'b> F: FnMut(&'b K) -> bool,
         .               {
         .                   self.search(hash, is_match)
45,389,327 ( 0.22%)      }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   for<'b> F: FnMut(&'b K) -> bool,
         .               {
 4,696,220 ( 0.02%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
27,497,064 ( 0.13%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
         .                           elem,
         .                           table: &mut self.map.table,
         .                           hash_builder: &self.map.hash_builder,
         .                       }),
 1,661,152 ( 0.01%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
         .                           table: &mut self.map.table,
         .                           hash_builder: &self.map.hash_builder,
         .                       }),
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
         .               {
         .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
         .                   self.from_key_hashed_nocheck(hash, k)
         .               }
         .           
         .               /// Access an entry by a key and its hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
 7,110,927 ( 0.03%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Eq,
         .               {
 7,522,924 ( 0.04%)          self.from_hash(hash, equivalent(k))
12,578,637 ( 0.06%)      }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
         .               where
         .                   F: FnMut(&K) -> bool,
         .               {
10,159,861 ( 0.05%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
         .                       Some(&(ref key, ref value)) => Some((key, value)),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Access an entry by hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
         .               /// and returns a mutable reference to it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::shadow_unrelated)]
         .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
         .               where
         .                   K: Hash,
         .                   S: BuildHasher,
         .               {
 2,720,446 ( 0.01%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
         .                       hash,
         .                       (key, value),
         .                       make_hasher::<K, _, V, S>(self.hash_builder),
         .                   );
         .                   (k, v)
         .               }
         .           
         .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
         .               /// map.insert("a", 1);
         .               /// map.insert("b", 2);
         .               /// map.insert("c", 3);
         .               ///
         .               /// // Not possible with .iter()
         .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
     6,332 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
   119,077 ( 0.00%)          IntoIter {
    60,631 ( 0.00%)              inner: self.table.into_iter(),
         .                   }
    18,996 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
         .               type Item = (&'a K, &'a V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
   680,461 ( 0.00%)          match self.inner.next() {
         .                       Some(x) => unsafe {
         .                           let r = x.as_ref();
     5,708 ( 0.00%)                  Some((&r.0, &r.1))
         .                       },
         .                       None => None,
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
     1,166 ( 0.00%)          self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn len(&self) -> usize {
         .                   self.inner.len()
         .               }
         .           }
-- line 3013 ----------------------------------------
-- line 3018 ----------------------------------------
         .               type Item = (&'a K, &'a mut V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(&'a K, &'a mut V)> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match self.inner.next() {
         .                       Some(x) => unsafe {
         .                           let r = x.as_mut();
        39 ( 0.00%)                  Some((&r.0, &mut r.1))
         .                       },
         .                       None => None,
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
-- line 3034 ----------------------------------------
-- line 3051 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
         .               type Item = (K, V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(K, V)> {
    39,101 ( 0.00%)          self.inner.next()
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
         .                   f.debug_list().entries(self.iter()).finish()
         .               }
         .           }
         .           
         .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
         .               type Item = &'a K;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
       968 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match self.inner.next() {
         .                       Some((k, _)) => Some(k),
         .                       None => None,
         .                   }
     1,936 ( 0.00%)      }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 3819 ----------------------------------------
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn insert(self, value: V) -> &'a mut V
         .               where
         .                   K: Hash,
         .                   S: BuildHasher,
         .               {
         .                   let table = &mut self.table.table;
       647 ( 0.00%)          let entry = table.insert_entry(
         .                       self.hash,
         .                       (self.key, value),
         .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
         .                   );
         .                   &mut entry.1
         .               }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
         .           /// keys with new values returned from the iterator.
         .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
         .           where
         .               K: Eq + Hash,
         .               S: BuildHasher,
         .               A: Allocator + Clone,
         .           {
         .               #[cfg_attr(feature = "inline-more", inline)]
   267,368 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
         .                   // Keys may be already present or show multiple times in the iterator.
         .                   // Reserve the entire hint lower bound if the map is empty.
         .                   // Otherwise reserve half the hint (rounded up), so the map
         .                   // will only resize twice in the worst case.
   221,105 ( 0.00%)          let iter = iter.into_iter();
    90,751 ( 0.00%)          let reserve = if self.is_empty() {
         .                       iter.size_hint().0
         .                   } else {
     6,534 ( 0.00%)              (iter.size_hint().0 + 1) / 2
         .                   };
         .                   self.reserve(reserve);
         .                   iter.for_each(move |(k, v)| {
 1,205,459 ( 0.01%)              self.insert(k, v);
         .                   });
   199,081 ( 0.00%)      }
         .           
         .               #[inline]
         .               #[cfg(feature = "nightly")]
         .               fn extend_one(&mut self, (k, v): (K, V)) {
         .                   self.insert(k, v);
         .               }
         .           
         .               #[inline]
-- line 4588 ----------------------------------------

15,245,353 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs
--------------------------------------------------------------------------------
Ir                  

-- line 267 ----------------------------------------
         .           macro_rules! bitor_impl {
         .               ($($t:ty)*) => ($(
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_unstable(feature = "const_ops", issue = "90080")]
         .                   impl const BitOr for $t {
         .                       type Output = $t;
         .           
         .                       #[inline]
    20,935 ( 0.00%)              fn bitor(self, rhs: $t) -> $t { self | rhs }
         .                   }
         .           
         .                   forward_ref_binop! { impl const BitOr, bitor for $t, $t }
         .               )*)
         .           }
         .           
         .           bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }
         .           
-- line 283 ----------------------------------------
-- line 368 ----------------------------------------
         .           macro_rules! bitxor_impl {
         .               ($($t:ty)*) => ($(
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_unstable(feature = "const_ops", issue = "90080")]
         .                   impl const BitXor for $t {
         .                       type Output = $t;
         .           
         .                       #[inline]
29,920,096 ( 0.15%)              fn bitxor(self, other: $t) -> $t { self ^ other }
         .                   }
         .           
         .                   forward_ref_binop! { impl const BitXor, bitxor for $t, $t }
         .               )*)
         .           }
         .           
         .           bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }
         .           
-- line 384 ----------------------------------------
-- line 468 ----------------------------------------
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_unstable(feature = "const_ops", issue = "90080")]
         .                   impl const Shl<$f> for $t {
         .                       type Output = $t;
         .           
         .                       #[inline]
         .                       #[rustc_inherit_overflow_checks]
         .                       fn shl(self, other: $f) -> $t {
    18,306 ( 0.00%)                  self << other
         .                       }
         .                   }
         .           
         .                   forward_ref_binop! { impl const Shl, shl for $t, $f }
         .               };
         .           }
         .           
         .           macro_rules! shl_impl_all {
-- line 484 ----------------------------------------

12,616,606 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 157 ----------------------------------------
         .               pub fn opt_fn_def_id(self) -> Option<DefId> {
         .                   if let Res::Def(DefKind::Fn, def_id) = self.res { Some(def_id) } else { None }
         .               }
         .           }
         .           
         .           /// The "header" of an impl is everything outside the body: a Self type, a trait
         .           /// ref (in the case of a trait impl), and a set of predicates (from the
         .           /// bounds / where-clauses).
     1,738 ( 0.00%)  #[derive(Clone, Debug, TypeFoldable)]
         .           pub struct ImplHeader<'tcx> {
         .               pub impl_def_id: DefId,
         .               pub self_ty: Ty<'tcx>,
         .               pub trait_ref: Option<TraitRef<'tcx>>,
         .               pub predicates: Vec<Predicate<'tcx>>,
         .           }
         .           
         .           #[derive(
         .               Copy,
         .               Clone,
   523,053 ( 0.00%)      PartialEq,
         .               Eq,
         .               Hash,
         .               TyEncodable,
    43,344 ( 0.00%)      TyDecodable,
         .               HashStable,
         .               Debug,
         .               TypeFoldable
         .           )]
         .           pub enum ImplPolarity {
         .               /// `impl Trait for Type`
         .               Positive,
         .               /// `impl !Trait for Type`
-- line 188 ----------------------------------------
-- line 210 ----------------------------------------
         .                   match self {
         .                       Self::Positive => f.write_str("positive"),
         .                       Self::Negative => f.write_str("negative"),
         .                       Self::Reservation => f.write_str("reservation"),
         .                   }
         .               }
         .           }
         .           
   807,224 ( 0.00%)  #[derive(Clone, Debug, PartialEq, Eq, Copy, Hash, TyEncodable, TyDecodable, HashStable)]
         .           pub enum Visibility {
         .               /// Visible everywhere (including in other crates).
         .               Public,
         .               /// Visible only in the given crate-local module.
         .               Restricted(DefId),
         .               /// Not visible anywhere in the local crate. This is the visibility of private external items.
         .               Invisible,
         .           }
         .           
 1,571,088 ( 0.01%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable, TyEncodable, TyDecodable)]
         .           pub enum BoundConstness {
         .               /// `T: Trait`
         .               NotConst,
         .               /// `T: ~const Trait`
         .               ///
         .               /// Requires resolving to const only when we are in a const context.
         .               ConstIfConst,
         .           }
         .           
         .           impl BoundConstness {
         .               /// Reduce `self` and `constness` to two possible combined states instead of four.
   115,772 ( 0.00%)      pub fn and(&mut self, constness: hir::Constness) -> hir::Constness {
   173,658 ( 0.00%)          match (constness, self) {
         .                       (hir::Constness::Const, BoundConstness::ConstIfConst) => hir::Constness::Const,
         .                       (_, this) => {
   252,481 ( 0.00%)                  *this = BoundConstness::NotConst;
         .                           hir::Constness::NotConst
         .                       }
         .                   }
    57,886 ( 0.00%)      }
         .           }
         .           
         .           impl fmt::Display for BoundConstness {
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   match self {
         .                       Self::NotConst => f.write_str("normal"),
         .                       Self::ConstIfConst => f.write_str("`~const`"),
         .                   }
-- line 256 ----------------------------------------
-- line 274 ----------------------------------------
         .               pub before_feature_tys: Ty<'tcx>,
         .               /// Tuple containing the types of closure captures after the feature `capture_disjoint_fields`
         .               pub after_feature_tys: Ty<'tcx>,
         .           }
         .           
         .           pub trait DefIdTree: Copy {
         .               fn parent(self, id: DefId) -> Option<DefId>;
         .           
        21 ( 0.00%)      fn is_descendant_of(self, mut descendant: DefId, ancestor: DefId) -> bool {
       179 ( 0.00%)          if descendant.krate != ancestor.krate {
         .                       return false;
         .                   }
         .           
    57,672 ( 0.00%)          while descendant != ancestor {
    76,837 ( 0.00%)              match self.parent(descendant) {
         .                           Some(parent) => descendant = parent,
         .                           None => return false,
         .                       }
         .                   }
         .                   true
        24 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> DefIdTree for TyCtxt<'tcx> {
    98,034 ( 0.00%)      fn parent(self, id: DefId) -> Option<DefId> {
         .                   self.def_key(id).parent.map(|index| DefId { index, ..id })
   147,051 ( 0.00%)      }
         .           }
         .           
         .           impl Visibility {
     2,182 ( 0.00%)      pub fn from_hir(visibility: &hir::Visibility<'_>, id: hir::HirId, tcx: TyCtxt<'_>) -> Self {
     6,546 ( 0.00%)          match visibility.node {
         .                       hir::VisibilityKind::Public => Visibility::Public,
         .                       hir::VisibilityKind::Crate(_) => Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)),
         .                       hir::VisibilityKind::Restricted { ref path, .. } => match path.res {
         .                           // If there is no resolution, `resolve` will have already reported an error, so
         .                           // assume that the visibility is public to avoid reporting more privacy errors.
         .                           Res::Err => Visibility::Public,
         .                           def => Visibility::Restricted(def.def_id()),
         .                       },
         .                       hir::VisibilityKind::Inherited => {
     3,880 ( 0.00%)                  Visibility::Restricted(tcx.parent_module(id).to_def_id())
         .                       }
         .                   }
     2,182 ( 0.00%)      }
         .           
         .               /// Returns `true` if an item with this visibility is accessible from the given block.
   277,299 ( 0.00%)      pub fn is_accessible_from<T: DefIdTree>(self, module: DefId, tree: T) -> bool {
 1,249,457 ( 0.01%)          let restriction = match self {
         .                       // Public items are visible everywhere.
         .                       Visibility::Public => return true,
         .                       // Private items from other crates are visible nowhere.
         .                       Visibility::Invisible => return false,
         .                       // Restricted items are visible in an arbitrary local module.
    21,754 ( 0.00%)              Visibility::Restricted(other) if other.krate != module.krate => return false,
         .                       Visibility::Restricted(module) => module,
         .                   };
         .           
         6 ( 0.00%)          tree.is_descendant_of(module, restriction)
   277,299 ( 0.00%)      }
         .           
         .               /// Returns `true` if this visibility is at least as accessible as the given visibility
    23,958 ( 0.00%)      pub fn is_at_least<T: DefIdTree>(self, vis: Visibility, tree: T) -> bool {
    82,596 ( 0.00%)          let vis_restriction = match vis {
         .                       Visibility::Public => return self == Visibility::Public,
         .                       Visibility::Invisible => return true,
         .                       Visibility::Restricted(module) => module,
         .                   };
         .           
         .                   self.is_accessible_from(vis_restriction, tree)
    23,958 ( 0.00%)      }
         .           
         .               // Returns `true` if this item is visible anywhere in the local crate.
         .               pub fn is_visible_locally(self) -> bool {
         .                   match self {
         .                       Visibility::Public => true,
         .                       Visibility::Restricted(def_id) => def_id.is_local(),
         .                       Visibility::Invisible => false,
         .                   }
         .               }
         .           
         .               pub fn is_public(self) -> bool {
    24,630 ( 0.00%)          matches!(self, Visibility::Public)
    12,315 ( 0.00%)      }
         .           }
         .           
         .           /// The crate variances map is computed during typeck and contains the
         .           /// variance of every item in the local crate. You should not use it
         .           /// directly, because to do so will make your pass dependent on the
         .           /// HIR of every item in the local crate. Instead, use
         .           /// `tcx.variances_of()` to get the variance for a *particular*
         .           /// item.
-- line 365 ----------------------------------------
-- line 434 ----------------------------------------
         .           }
         .           
         .           // `TyS` is used a lot. Make sure it doesn't unintentionally get bigger.
         .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
         .           static_assert_size!(TyS<'_>, 40);
         .           
         .           impl<'tcx> Ord for TyS<'tcx> {
         .               fn cmp(&self, other: &TyS<'tcx>) -> Ordering {
     8,584 ( 0.00%)          self.kind().cmp(other.kind())
         .               }
         .           }
         .           
         .           impl<'tcx> PartialOrd for TyS<'tcx> {
         .               fn partial_cmp(&self, other: &TyS<'tcx>) -> Option<Ordering> {
         .                   Some(self.kind().cmp(other.kind()))
         .               }
         .           }
-- line 450 ----------------------------------------
-- line 474 ----------------------------------------
         .           
         .                       // The other fields just provide fast access to information that is
         .                       // also contained in `kind`, so no need to hash them.
         .                       flags: _,
         .           
         .                       outer_exclusive_binder: _,
         .                   } = *self;
         .           
    98,204 ( 0.00%)          kind.hash_stable(hcx, hasher);
         .               }
         .           }
         .           
         .           #[rustc_diagnostic_item = "Ty"]
         .           #[cfg_attr(not(bootstrap), rustc_pass_by_value)]
         .           pub type Ty<'tcx> = &'tcx TyS<'tcx>;
         .           
         .           impl ty::EarlyBoundRegion {
-- line 490 ----------------------------------------
-- line 509 ----------------------------------------
         .           #[derive(Clone, Copy, Lift)]
         .           pub struct Predicate<'tcx> {
         .               inner: &'tcx PredicateInner<'tcx>,
         .           }
         .           
         .           impl<'tcx> PartialEq for Predicate<'tcx> {
         .               fn eq(&self, other: &Self) -> bool {
         .                   // `self.kind` is always interned.
 1,819,658 ( 0.01%)          ptr::eq(self.inner, other.inner)
 1,660,576 ( 0.01%)      }
         .           }
         .           
         .           impl Hash for Predicate<'_> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   (self.inner as *const PredicateInner<'_>).hash(s)
         .               }
         .           }
         .           
         .           impl<'tcx> Eq for Predicate<'tcx> {}
         .           
         .           impl<'tcx> Predicate<'tcx> {
         .               /// Gets the inner `Binder<'tcx, PredicateKind<'tcx>>`.
         .               #[inline]
         .               pub fn kind(self) -> Binder<'tcx, PredicateKind<'tcx>> {
 7,267,114 ( 0.04%)          self.inner.kind
         .               }
         .           
         .               /// Flips the polarity of a Predicate.
         .               ///
         .               /// Given `T: Trait` predicate it returns `T: !Trait` and given `T: !Trait` returns `T: Trait`.
         .               pub fn flip_polarity(&self, tcx: TyCtxt<'tcx>) -> Option<Predicate<'tcx>> {
         .                   let kind = self
         .                       .inner
-- line 541 ----------------------------------------
-- line 567 ----------------------------------------
         .                       flags: _,
         .                       outer_exclusive_binder: _,
         .                   } = self.inner;
         .           
         .                   kind.hash_stable(hcx, hasher);
         .               }
         .           }
         .           
24,433,761 ( 0.12%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
33,251,366 ( 0.16%)  #[derive(HashStable, TypeFoldable)]
         .           pub enum PredicateKind<'tcx> {
         .               /// Corresponds to `where Foo: Bar<A, B, C>`. `Foo` here would be
         .               /// the `Self` type of the trait reference and `A`, `B`, and `C`
         .               /// would be the type parameters.
         .               Trait(TraitPredicate<'tcx>),
         .           
         .               /// `where 'a: 'b`
         .               RegionOutlives(RegionOutlivesPredicate<'tcx>),
-- line 584 ----------------------------------------
-- line 594 ----------------------------------------
         .               WellFormed(GenericArg<'tcx>),
         .           
         .               /// Trait must be object-safe.
         .               ObjectSafe(DefId),
         .           
         .               /// No direct syntax. May be thought of as `where T: FnFoo<...>`
         .               /// for some substitutions `...` and `T` being a closure type.
         .               /// Satisfied (or refuted) once we know the closure's kind.
     9,790 ( 0.00%)      ClosureKind(DefId, SubstsRef<'tcx>, ClosureKind),
         .           
         .               /// `T1 <: T2`
         .               ///
         .               /// This obligation is created most often when we have two
         .               /// unresolved type variables and hence don't have enough
         .               /// information to process the subtyping obligation yet.
     4,734 ( 0.00%)      Subtype(SubtypePredicate<'tcx>),
         .           
         .               /// `T1` coerced to `T2`
         .               ///
         .               /// Like a subtyping obligation, this is created most often
         .               /// when we have two unresolved type variables and hence
         .               /// don't have enough information to process the coercion
         .               /// obligation yet. At the moment, we actually process coercions
         .               /// very much like subtyping and don't handle the full coercion
-- line 617 ----------------------------------------
-- line 645 ----------------------------------------
         .           }
         .           
         .           impl<'tcx> Predicate<'tcx> {
         .               /// Performs a substitution suitable for going from a
         .               /// poly-trait-ref to supertraits that must hold if that
         .               /// poly-trait-ref holds. This is slightly different from a normal
         .               /// substitution in terms of what happens with bound regions. See
         .               /// lengthy comment below for details.
    78,759 ( 0.00%)      pub fn subst_supertrait(
         .                   self,
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_ref: &ty::PolyTraitRef<'tcx>,
         .               ) -> Predicate<'tcx> {
         .                   // The interaction between HRTB and supertraits is not entirely
         .                   // obvious. Let me walk you (and myself) through an example.
         .                   //
         .                   // Let's start with an easy case. Consider two traits:
-- line 661 ----------------------------------------
-- line 731 ----------------------------------------
         .                   //    ['x, 'b]
         .                   let bound_pred = self.kind();
         .                   let pred_bound_vars = bound_pred.bound_vars();
         .                   let trait_bound_vars = trait_ref.bound_vars();
         .                   // 1) Self: Bar1<'a, '^0.0> -> Self: Bar1<'a, '^0.1>
         .                   let shifted_pred =
         .                       tcx.shift_bound_var_indices(trait_bound_vars.len(), bound_pred.skip_binder());
         .                   // 2) Self: Bar1<'a, '^0.1> -> T: Bar1<'^0.0, '^0.1>
     8,751 ( 0.00%)          let new = shifted_pred.subst(tcx, trait_ref.skip_binder().substs);
         .                   // 3) ['x] + ['b] -> ['x, 'b]
         .                   let bound_vars =
         .                       tcx.mk_bound_variable_kinds(trait_bound_vars.iter().chain(pred_bound_vars));
    78,759 ( 0.00%)          tcx.reuse_or_mk_predicate(self, ty::Binder::bind_with_vars(new, bound_vars))
    61,257 ( 0.00%)      }
         .           }
         .           
   127,649 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
 2,889,015 ( 0.01%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct TraitPredicate<'tcx> {
         .               pub trait_ref: TraitRef<'tcx>,
         .           
 2,748,806 ( 0.01%)      pub constness: BoundConstness,
         .           
 4,613,451 ( 0.02%)      pub polarity: ImplPolarity,
         .           }
         .           
         .           pub type PolyTraitPredicate<'tcx> = ty::Binder<'tcx, TraitPredicate<'tcx>>;
         .           
         .           impl<'tcx> TraitPredicate<'tcx> {
 1,568,624 ( 0.01%)      pub fn remap_constness(&mut self, tcx: TyCtxt<'tcx>, param_env: &mut ParamEnv<'tcx>) {
 1,375,112 ( 0.01%)          if unlikely!(Some(self.trait_ref.def_id) == tcx.lang_items().drop_trait()) {
         .                       // remap without changing constness of this predicate.
         .                       // this is because `T: ~const Drop` has a different meaning to `T: Drop`
     2,566 ( 0.00%)              param_env.remap_constness_with(self.constness)
         .                   } else {
   194,795 ( 0.00%)              *param_env = param_env.with_constness(self.constness.and(param_env.constness()))
         .                   }
 1,176,468 ( 0.01%)      }
         .           
         .               /// Remap the constness of this predicate before emitting it for diagnostics.
         .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
         .                   // this is different to `remap_constness` that callees want to print this predicate
         .                   // in case of selection errors. `T: ~const Drop` bounds cannot end up here when the
         .                   // param_env is not const because we it is always satisfied in non-const contexts.
         .                   if let hir::Constness::NotConst = param_env.constness() {
         .                       self.constness = ty::BoundConstness::NotConst;
         .                   }
         .               }
         .           
         .               pub fn def_id(self) -> DefId {
   225,814 ( 0.00%)          self.trait_ref.def_id
   112,907 ( 0.00%)      }
         .           
   231,325 ( 0.00%)      pub fn self_ty(self) -> Ty<'tcx> {
   693,975 ( 0.00%)          self.trait_ref.self_ty()
   462,650 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> PolyTraitPredicate<'tcx> {
         .               pub fn def_id(self) -> DefId {
         .                   // Ok to skip binder since trait `DefId` does not care about regions.
         .                   self.skip_binder().def_id()
   651,696 ( 0.00%)      }
         .           
     1,448 ( 0.00%)      pub fn self_ty(self) -> ty::Binder<'tcx, Ty<'tcx>> {
     5,792 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.self_ty())
     2,896 ( 0.00%)      }
         .           
         .               /// Remap the constness of this predicate before emitting it for diagnostics.
         .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
         .                   *self = self.map_bound(|mut p| {
         .                       p.remap_constness_diag(param_env);
         .                       p
         .                   });
         .               }
         .           }
         .           
     3,972 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
   190,948 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
   442,006 ( 0.00%)  pub struct OutlivesPredicate<A, B>(pub A, pub B); // `A: B`
         .           pub type RegionOutlivesPredicate<'tcx> = OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>;
         .           pub type TypeOutlivesPredicate<'tcx> = OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>;
         .           pub type PolyRegionOutlivesPredicate<'tcx> = ty::Binder<'tcx, RegionOutlivesPredicate<'tcx>>;
         .           pub type PolyTypeOutlivesPredicate<'tcx> = ty::Binder<'tcx, TypeOutlivesPredicate<'tcx>>;
         .           
         .           /// Encodes that `a` must be a subtype of `b`. The `a_is_expected` flag indicates
         .           /// whether the `a` type is the type that we should label as "expected" when
         .           /// presenting user diagnostics.
         .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
    12,165 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct SubtypePredicate<'tcx> {
    22,700 ( 0.00%)      pub a_is_expected: bool,
         .               pub a: Ty<'tcx>,
         .               pub b: Ty<'tcx>,
         .           }
         .           pub type PolySubtypePredicate<'tcx> = ty::Binder<'tcx, SubtypePredicate<'tcx>>;
         .           
         .           /// Encodes that we have to coerce *from* the `a` type to the `b` type.
         .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
        98 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct CoercePredicate<'tcx> {
         .               pub a: Ty<'tcx>,
         .               pub b: Ty<'tcx>,
         .           }
         .           pub type PolyCoercePredicate<'tcx> = ty::Binder<'tcx, CoercePredicate<'tcx>>;
         .           
 1,845,870 ( 0.01%)  #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, TyEncodable, TyDecodable)]
   795,638 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub enum Term<'tcx> {
   233,178 ( 0.00%)      Ty(Ty<'tcx>),
         .               Const(&'tcx Const<'tcx>),
         .           }
         .           
         .           impl<'tcx> From<Ty<'tcx>> for Term<'tcx> {
         .               fn from(ty: Ty<'tcx>) -> Self {
         .                   Term::Ty(ty)
   117,921 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> From<&'tcx Const<'tcx>> for Term<'tcx> {
         .               fn from(c: &'tcx Const<'tcx>) -> Self {
         .                   Term::Const(c)
         .               }
         .           }
         .           
         .           impl<'tcx> Term<'tcx> {
         .               pub fn ty(&self) -> Option<Ty<'tcx>> {
    26,318 ( 0.00%)          if let Term::Ty(ty) = self { Some(ty) } else { None }
    13,150 ( 0.00%)      }
         .           }
         .           
         .           /// This kind of predicate has no *direct* correspondent in the
         .           /// syntax, but it roughly corresponds to the syntactic forms:
         .           ///
         .           /// 1. `T: TraitRef<..., Item = Type>`
         .           /// 2. `<T as TraitRef<...>>::Item == Type` (NYI)
         .           ///
         .           /// In particular, form #1 is "desugared" to the combination of a
         .           /// normal trait predicate (`T: TraitRef<...>`) and one of these
         .           /// predicates. Form #2 is a broader form in that it also permits
         .           /// equality between arbitrary types. Processing an instance of
         .           /// Form #2 eventually yields one of these `ProjectionPredicate`
         .           /// instances to normalize the LHS.
       903 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
    35,870 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ProjectionPredicate<'tcx> {
         .               pub projection_ty: ProjectionTy<'tcx>,
   376,335 ( 0.00%)      pub term: Term<'tcx>,
         .           }
         .           
         .           pub type PolyProjectionPredicate<'tcx> = Binder<'tcx, ProjectionPredicate<'tcx>>;
         .           
         .           impl<'tcx> PolyProjectionPredicate<'tcx> {
         .               /// Returns the `DefId` of the trait of the associated item being projected.
         .               #[inline]
         .               pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
       716 ( 0.00%)          self.skip_binder().projection_ty.trait_def_id(tcx)
         .               }
         .           
         .               /// Get the [PolyTraitRef] required for this projection to be well formed.
         .               /// Note that for generic associated types the predicates of the associated
         .               /// type also need to be checked.
         .               #[inline]
         .               pub fn required_poly_trait_ref(&self, tcx: TyCtxt<'tcx>) -> PolyTraitRef<'tcx> {
         .                   // Note: unlike with `TraitRef::to_poly_trait_ref()`,
         .                   // `self.0.trait_ref` is permitted to have escaping regions.
         .                   // This is because here `self` has a `Binder` and so does our
         .                   // return value, so we are preserving the number of binding
         .                   // levels.
     1,494 ( 0.00%)          self.map_bound(|predicate| predicate.projection_ty.trait_ref(tcx))
         .               }
         .           
         .               pub fn term(&self) -> Binder<'tcx, Term<'tcx>> {
         .                   self.map_bound(|predicate| predicate.term)
         .               }
         .           
         .               /// The `DefId` of the `TraitItem` for the associated type.
         .               ///
         .               /// Note that this is not the `DefId` of the `TraitRef` containing this
         .               /// associated type, which is in `tcx.associated_item(projection_def_id()).container`.
         .               pub fn projection_def_id(&self) -> DefId {
         .                   // Ok to skip binder since trait `DefId` does not care about regions.
    41,712 ( 0.00%)          self.skip_binder().projection_ty.item_def_id
    20,856 ( 0.00%)      }
         .           }
         .           
         .           pub trait ToPolyTraitRef<'tcx> {
         .               fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx>;
         .           }
         .           
         .           impl<'tcx> ToPolyTraitRef<'tcx> for PolyTraitPredicate<'tcx> {
    84,734 ( 0.00%)      fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx> {
    84,734 ( 0.00%)          self.map_bound_ref(|trait_pred| trait_pred.trait_ref)
    84,734 ( 0.00%)      }
         .           }
         .           
         .           pub trait ToPredicate<'tcx> {
         .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx>;
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for Binder<'tcx, PredicateKind<'tcx>> {
         .               #[inline(always)]
         .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
         .                   tcx.mk_predicate(self)
         .               }
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for PolyTraitPredicate<'tcx> {
    59,513 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
   297,565 ( 0.00%)          self.map_bound(PredicateKind::Trait).to_predicate(tcx)
   119,026 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate<'tcx> {
       140 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
       280 ( 0.00%)          self.map_bound(PredicateKind::RegionOutlives).to_predicate(tcx)
       280 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for PolyTypeOutlivesPredicate<'tcx> {
       559 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
     1,118 ( 0.00%)          self.map_bound(PredicateKind::TypeOutlives).to_predicate(tcx)
     1,118 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {
     2,098 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
    10,490 ( 0.00%)          self.map_bound(PredicateKind::Projection).to_predicate(tcx)
     4,196 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Predicate<'tcx> {
   641,668 ( 0.00%)      pub fn to_opt_poly_trait_pred(self) -> Option<PolyTraitPredicate<'tcx>> {
         .                   let predicate = self.kind();
 1,925,004 ( 0.01%)          match predicate.skip_binder() {
 1,253,965 ( 0.01%)              PredicateKind::Trait(t) => Some(predicate.rebind(t)),
         .                       PredicateKind::Projection(..)
         .                       | PredicateKind::Subtype(..)
         .                       | PredicateKind::Coerce(..)
         .                       | PredicateKind::RegionOutlives(..)
         .                       | PredicateKind::WellFormed(..)
         .                       | PredicateKind::ObjectSafe(..)
         .                       | PredicateKind::ClosureKind(..)
         .                       | PredicateKind::TypeOutlives(..)
         .                       | PredicateKind::ConstEvaluatable(..)
         .                       | PredicateKind::ConstEquate(..)
    70,041 ( 0.00%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
         .                   }
   641,668 ( 0.00%)      }
         .           
   398,638 ( 0.00%)      pub fn to_opt_type_outlives(self) -> Option<PolyTypeOutlivesPredicate<'tcx>> {
         .                   let predicate = self.kind();
   797,276 ( 0.00%)          match predicate.skip_binder() {
    70,779 ( 0.00%)              PredicateKind::TypeOutlives(data) => Some(predicate.rebind(data)),
         .                       PredicateKind::Trait(..)
         .                       | PredicateKind::Projection(..)
         .                       | PredicateKind::Subtype(..)
         .                       | PredicateKind::Coerce(..)
         .                       | PredicateKind::RegionOutlives(..)
         .                       | PredicateKind::WellFormed(..)
         .                       | PredicateKind::ObjectSafe(..)
         .                       | PredicateKind::ClosureKind(..)
         .                       | PredicateKind::ConstEvaluatable(..)
         .                       | PredicateKind::ConstEquate(..)
   375,045 ( 0.00%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
         .                   }
   398,638 ( 0.00%)      }
         .           }
         .           
         .           /// Represents the bounds declared on a particular set of type
         .           /// parameters. Should eventually be generalized into a flag list of
         .           /// where-clauses. You can obtain an `InstantiatedPredicates` list from a
         .           /// `GenericPredicates` by using the `instantiate` method. Note that this method
         .           /// reflects an important semantic invariant of `InstantiatedPredicates`: while
         .           /// the `GenericPredicates` are expressed in terms of the bound type
-- line 1005 ----------------------------------------
-- line 1011 ----------------------------------------
         .           /// Example:
         .           ///
         .           ///     struct Foo<T, U: Bar<T>> { ... }
         .           ///
         .           /// Here, the `GenericPredicates` for `Foo` would contain a list of bounds like
         .           /// `[[], [U:Bar<T>]]`. Now if there were some particular reference
         .           /// like `Foo<isize,usize>`, then the `InstantiatedPredicates` would be `[[],
         .           /// [usize:Bar<isize>]]`.
   261,317 ( 0.00%)  #[derive(Clone, Debug, TypeFoldable)]
         .           pub struct InstantiatedPredicates<'tcx> {
         .               pub predicates: Vec<Predicate<'tcx>>,
         .               pub spans: Vec<Span>,
         .           }
         .           
         .           impl<'tcx> InstantiatedPredicates<'tcx> {
       816 ( 0.00%)      pub fn empty() -> InstantiatedPredicates<'tcx> {
   187,520 ( 0.00%)          InstantiatedPredicates { predicates: vec![], spans: vec![] }
       816 ( 0.00%)      }
         .           
         .               pub fn is_empty(&self) -> bool {
         .                   self.predicates.is_empty()
       313 ( 0.00%)      }
         .           }
         .           
       252 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable, TyEncodable, TyDecodable, TypeFoldable)]
         .           pub struct OpaqueTypeKey<'tcx> {
         .               pub def_id: DefId,
        66 ( 0.00%)      pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           rustc_index::newtype_index! {
         .               /// "Universes" are used during type- and trait-checking in the
         .               /// presence of `for<..>` binders to control what sets of names are
         .               /// visible. Universes are arranged into a tree: the root universe
         .               /// contains names that are always visible. Each child then adds a new
         .               /// set of names that are visible, in addition to those of its parent.
-- line 1046 ----------------------------------------
-- line 1091 ----------------------------------------
         .               /// ```
         .               /// for<'a> fn(&'a u32)
         .               /// ```
         .               ///
         .               /// Once we "enter" into this `for<'a>` quantifier, we are in a
         .               /// new universe that extends `U` -- in this new universe, we can
         .               /// name the region `'a`, but that region was not nameable from
         .               /// `U` because it was not in scope there.
   165,248 ( 0.00%)      pub fn next_universe(self) -> UniverseIndex {
         .                   UniverseIndex::from_u32(self.private.checked_add(1).unwrap())
   495,744 ( 0.00%)      }
         .           
         .               /// Returns `true` if `self` can name a name from `other` -- in other words,
         .               /// if the set of names in `self` is a superset of those in
         .               /// `other` (`self >= other`).
         .               pub fn can_name(self, other: UniverseIndex) -> bool {
   222,284 ( 0.00%)          self.private >= other.private
   111,142 ( 0.00%)      }
         .           
         .               /// Returns `true` if `self` cannot name some names from `other` -- in other
         .               /// words, if the set of names in `self` is a strict subset of
         .               /// those in `other` (`self < other`).
         .               pub fn cannot_name(self, other: UniverseIndex) -> bool {
     2,270 ( 0.00%)          self.private < other.private
     1,135 ( 0.00%)      }
         .           }
         .           
         .           /// The "placeholder index" fully defines a placeholder region, type, or const. Placeholders are
         .           /// identified by both a universe, as well as a name residing within that universe. Distinct bound
         .           /// regions/types/consts within the same universe simply have an unknown relationship to one
         .           /// another.
         .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, PartialOrd, Ord)]
         .           pub struct Placeholder<T> {
    54,603 ( 0.00%)      pub universe: UniverseIndex,
    26,710 ( 0.00%)      pub name: T,
         .           }
         .           
         .           impl<'a, T> HashStable<StableHashingContext<'a>> for Placeholder<T>
         .           where
         .               T: HashStable<StableHashingContext<'a>>,
         .           {
         .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
         .                   self.universe.hash_stable(hcx, hasher);
-- line 1133 ----------------------------------------
-- line 1194 ----------------------------------------
         .           /// aren't allowed to call that query: it is equal to `type_of(const_param)` which is
         .           /// trivial to compute.
         .           ///
         .           /// If we now want to use that constant in a place which potentionally needs its type
         .           /// we also pass the type of its `const_param`. This is the point of `WithOptConstParam`,
         .           /// except that instead of a `Ty` we bundle the `DefId` of the const parameter.
         .           /// Meaning that we need to use `type_of(const_param_did)` if `const_param_did` is `Some`
         .           /// to get the type of `did`.
    58,567 ( 0.00%)  #[derive(Copy, Clone, Debug, TypeFoldable, Lift, TyEncodable, TyDecodable)]
         .           #[derive(PartialEq, Eq, PartialOrd, Ord)]
         6 ( 0.00%)  #[derive(Hash, HashStable)]
         .           pub struct WithOptConstParam<T> {
    19,086 ( 0.00%)      pub did: T,
         .               /// The `DefId` of the corresponding generic parameter in case `did` is
         .               /// a const argument.
         .               ///
         .               /// Note that even if `did` is a const argument, this may still be `None`.
         .               /// All queries taking `WithOptConstParam` start by calling `tcx.opt_const_param_of(def.did)`
         .               /// to potentially update `param_did` in the case it is `None`.
   712,758 ( 0.00%)      pub const_param_did: Option<DefId>,
         .           }
         .           
         .           impl<T> WithOptConstParam<T> {
         .               /// Creates a new `WithOptConstParam` setting `const_param_did` to `None`.
         .               #[inline(always)]
         .               pub fn unknown(did: T) -> WithOptConstParam<T> {
         .                   WithOptConstParam { did, const_param_did: None }
   221,965 ( 0.00%)      }
         .           }
         .           
         .           impl WithOptConstParam<LocalDefId> {
         .               /// Returns `Some((did, param_did))` if `def_id` is a const argument,
         .               /// `None` otherwise.
         .               #[inline(always)]
         .               pub fn try_lookup(did: LocalDefId, tcx: TyCtxt<'_>) -> Option<(LocalDefId, DefId)> {
         .                   tcx.opt_const_param_of(did).map(|param_did| (did, param_did))
         .               }
         .           
         .               /// In case `self` is unknown but `self.did` is a const argument, this returns
         .               /// a `WithOptConstParam` with the correct `const_param_did`.
         .               #[inline(always)]
         .               pub fn try_upgrade(self, tcx: TyCtxt<'_>) -> Option<WithOptConstParam<LocalDefId>> {
     5,949 ( 0.00%)          if self.const_param_did.is_none() {
     8,925 ( 0.00%)              if let const_param_did @ Some(_) = tcx.opt_const_param_of(self.did) {
         .                           return Some(WithOptConstParam { did: self.did, const_param_did });
         .                       }
         .                   }
         .           
         .                   None
         .               }
         .           
         .               pub fn to_global(self) -> WithOptConstParam<DefId> {
         .                   WithOptConstParam { did: self.did.to_def_id(), const_param_did: self.const_param_did }
         .               }
         .           
       160 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
       138 ( 0.00%)          if let Some(did) = self.const_param_did { did } else { self.did.to_def_id() }
        40 ( 0.00%)      }
         .           }
         .           
         .           impl WithOptConstParam<DefId> {
     4,783 ( 0.00%)      pub fn as_local(self) -> Option<WithOptConstParam<LocalDefId>> {
         .                   self.did
         .                       .as_local()
         .                       .map(|did| WithOptConstParam { did, const_param_did: self.const_param_did })
     4,783 ( 0.00%)      }
         .           
         .               pub fn as_const_arg(self) -> Option<(LocalDefId, DefId)> {
    90,277 ( 0.00%)          if let Some(param_did) = self.const_param_did {
    37,490 ( 0.00%)              if let Some(did) = self.did.as_local() {
         .                           return Some((did, param_did));
         .                       }
         .                   }
         .           
         .                   None
     6,984 ( 0.00%)      }
         .           
         .               pub fn is_local(self) -> bool {
         .                   self.did.is_local()
         .               }
         .           
     8,327 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
         .                   self.const_param_did.unwrap_or(self.did)
     8,327 ( 0.00%)      }
         .           }
         .           
         .           /// When type checking, we use the `ParamEnv` to track
         .           /// details about the set of where-clauses that are in scope at this
         .           /// particular point.
         .           #[derive(Copy, Clone, Hash, PartialEq, Eq)]
         .           pub struct ParamEnv<'tcx> {
         .               /// This packs both caller bounds and the reveal enum into one pointer.
-- line 1285 ----------------------------------------
-- line 1302 ----------------------------------------
         .               reveal: traits::Reveal,
         .               constness: hir::Constness,
         .           }
         .           
         .           unsafe impl rustc_data_structures::tagged_ptr::Tag for ParamTag {
         .               const BITS: usize = 2;
         .               #[inline]
         .               fn into_usize(self) -> usize {
   246,449 ( 0.00%)          match self {
         .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst } => 0,
         .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst } => 1,
         .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const } => 2,
         .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::Const } => 3,
         .                   }
         .               }
         .               #[inline]
         .               unsafe fn from_usize(ptr: usize) -> Self {
 3,925,624 ( 0.02%)          match ptr {
         .                       0 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst },
         .                       1 => Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst },
         .                       2 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const },
         .                       3 => Self { reveal: traits::Reveal::All, constness: hir::Constness::Const },
         .                       _ => std::hint::unreachable_unchecked(),
         .                   }
         .               }
         .           }
-- line 1327 ----------------------------------------
-- line 1405 ----------------------------------------
         .               pub fn new(
         .                   caller_bounds: &'tcx List<Predicate<'tcx>>,
         .                   reveal: Reveal,
         .                   constness: hir::Constness,
         .               ) -> Self {
         .                   ty::ParamEnv { packed: CopyTaggedPtr::new(caller_bounds, ParamTag { reveal, constness }) }
         .               }
         .           
       978 ( 0.00%)      pub fn with_user_facing(mut self) -> Self {
         .                   self.packed.set_tag(ParamTag { reveal: Reveal::UserFacing, ..self.packed.tag() });
         .                   self
       978 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn with_constness(mut self, constness: hir::Constness) -> Self {
         .                   self.packed.set_tag(ParamTag { constness, ..self.packed.tag() });
         .                   self
         .               }
         .           
         .               #[inline]
-- line 1424 ----------------------------------------
-- line 1430 ----------------------------------------
         .               #[inline]
         .               pub fn without_const(mut self) -> Self {
         .                   self.packed.set_tag(ParamTag { constness: hir::Constness::NotConst, ..self.packed.tag() });
         .                   self
         .               }
         .           
         .               #[inline]
         .               pub fn remap_constness_with(&mut self, mut constness: ty::BoundConstness) {
    40,135 ( 0.00%)          *self = self.with_constness(constness.and(self.constness()))
         .               }
         .           
         .               /// Returns a new parameter environment with the same clauses, but
         .               /// which "reveals" the true results of projections in all cases
         .               /// (even for associated types that are specializable). This is
         .               /// the desired behavior during codegen and certain other special
         .               /// contexts; normally though we want to use `Reveal::UserFacing`,
         .               /// which is the default.
         .               /// All opaque types in the caller_bounds of the `ParamEnv`
         .               /// will be normalized to their underlying types.
         .               /// See PR #65989 and issue #65918 for more details
   218,376 ( 0.00%)      pub fn with_reveal_all_normalized(self, tcx: TyCtxt<'tcx>) -> Self {
         .                   if self.packed.tag().reveal == traits::Reveal::All {
         .                       return self;
         .                   }
         .           
         .                   ParamEnv::new(
         .                       tcx.normalize_opaque_types(self.caller_bounds()),
         .                       Reveal::All,
         .                       self.constness(),
         .                   )
   245,673 ( 0.00%)      }
         .           
         .               /// Returns this same environment but with no caller bounds.
         .               #[inline]
         .               pub fn without_caller_bounds(self) -> Self {
         .                   Self::new(List::empty(), self.reveal(), self.constness())
         .               }
         .           
         .               /// Creates a suitable environment in which to perform trait
-- line 1468 ----------------------------------------
-- line 1472 ----------------------------------------
         .               /// pair it with the empty environment. This improves caching and is generally
         .               /// invisible.
         .               ///
         .               /// N.B., we preserve the environment when type-checking because it
         .               /// is possible for the user to have wacky where-clauses like
         .               /// `where Box<u32>: Copy`, which are clearly never
         .               /// satisfiable. We generally want to behave as if they were true,
         .               /// although the surrounding function is never reachable.
   972,959 ( 0.00%)      pub fn and<T: TypeFoldable<'tcx>>(self, value: T) -> ParamEnvAnd<'tcx, T> {
         .                   match self.reveal() {
         .                       Reveal::UserFacing => ParamEnvAnd { param_env: self, value },
         .           
         .                       Reveal::All => {
   293,293 ( 0.00%)                  if value.is_global() {
    48,744 ( 0.00%)                      ParamEnvAnd { param_env: self.without_caller_bounds(), value }
         .                           } else {
         .                               ParamEnvAnd { param_env: self, value }
         .                           }
         .                       }
         .                   }
   868,674 ( 0.00%)      }
         .           }
         .           
         .           // FIXME(ecstaticmorse): Audit all occurrences of `without_const().to_predicate(tcx)` to ensure that
         .           // the constness of trait bounds is being propagated correctly.
         .           impl<'tcx> PolyTraitRef<'tcx> {
         .               #[inline]
         .               pub fn with_constness(self, constness: BoundConstness) -> PolyTraitPredicate<'tcx> {
    11,870 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
         .                       trait_ref,
         .                       constness,
         .                       polarity: ty::ImplPolarity::Positive,
         .                   })
         .               }
         .               #[inline]
         .               pub fn without_const(self) -> PolyTraitPredicate<'tcx> {
         .                   self.with_constness(BoundConstness::NotConst)
         .               }
         .           }
         .           
    48,420 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TypeFoldable)]
         .           pub struct ParamEnvAnd<'tcx, T> {
   117,306 ( 0.00%)      pub param_env: ParamEnv<'tcx>,
 1,957,947 ( 0.01%)      pub value: T,
         .           }
         .           
         .           impl<'tcx, T> ParamEnvAnd<'tcx, T> {
         .               pub fn into_parts(self) -> (ParamEnv<'tcx>, T) {
         .                   (self.param_env, self.value)
         .               }
         .           
         .               #[inline]
         .               pub fn without_const(mut self) -> Self {
         .                   self.param_env = self.param_env.without_const();
   373,146 ( 0.00%)          self
         .               }
         .           }
         .           
         .           impl<'a, 'tcx, T> HashStable<StableHashingContext<'a>> for ParamEnvAnd<'tcx, T>
         .           where
         .               T: HashStable<StableHashingContext<'a>>,
         .           {
         .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
-- line 1534 ----------------------------------------
-- line 1542 ----------------------------------------
         .           #[derive(Copy, Clone, Debug, HashStable)]
         .           pub struct Destructor {
         .               /// The `DefId` of the destructor method
         .               pub did: DefId,
         .               /// The constness of the destructor method
         .               pub constness: hir::Constness,
         .           }
         .           
    12,210 ( 0.00%)  bitflags! {
    33,732 ( 0.00%)      #[derive(HashStable, TyEncodable, TyDecodable)]
         .               pub struct VariantFlags: u32 {
         .                   const NO_VARIANT_FLAGS        = 0;
         .                   /// Indicates whether the field list of this variant is `#[non_exhaustive]`.
         .                   const IS_FIELD_LIST_NON_EXHAUSTIVE = 1 << 0;
         .                   /// Indicates whether this variant was obtained as part of recovering from
         .                   /// a syntactic error. May be incomplete or bogus.
         .                   const IS_RECOVERED = 1 << 1;
         .               }
         .           }
         .           
         .           /// Definition of a variant -- a struct's fields or an enum variant.
   894,874 ( 0.00%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
         .           pub struct VariantDef {
         .               /// `DefId` that identifies the variant itself.
         .               /// If this variant belongs to a struct or union, then this is a copy of its `DefId`.
         .               pub def_id: DefId,
         .               /// `DefId` that identifies the variant's constructor.
         .               /// If this variant is a struct variant, then this is `None`.
         .               pub ctor_def_id: Option<DefId>,
         .               /// Variant or struct name.
-- line 1571 ----------------------------------------
-- line 1592 ----------------------------------------
         .               /// `parent_did` is the `DefId` of the `AdtDef` representing the enum or struct that
         .               /// owns this variant. It is used for checking if a struct has `#[non_exhaustive]` w/out having
         .               /// to go through the redirect of checking the ctor's attributes - but compiling a small crate
         .               /// requires loading the `AdtDef`s for all the structs in the universe (e.g., coherence for any
         .               /// built-in trait), and we do not want to load attributes twice.
         .               ///
         .               /// If someone speeds up attribute loading to not be a performance concern, they can
         .               /// remove this hack and use the constructor `DefId` everywhere.
    13,304 ( 0.00%)      pub fn new(
         .                   name: Symbol,
         .                   variant_did: Option<DefId>,
         .                   ctor_def_id: Option<DefId>,
         .                   discr: VariantDiscr,
         .                   fields: Vec<FieldDef>,
         .                   ctor_kind: CtorKind,
         .                   adt_kind: AdtKind,
         .                   parent_did: DefId,
-- line 1608 ----------------------------------------
-- line 1611 ----------------------------------------
         .               ) -> Self {
         .                   debug!(
         .                       "VariantDef::new(name = {:?}, variant_did = {:?}, ctor_def_id = {:?}, discr = {:?},
         .                        fields = {:?}, ctor_kind = {:?}, adt_kind = {:?}, parent_did = {:?})",
         .                       name, variant_did, ctor_def_id, discr, fields, ctor_kind, adt_kind, parent_did,
         .                   );
         .           
         .                   let mut flags = VariantFlags::NO_VARIANT_FLAGS;
     1,663 ( 0.00%)          if is_field_list_non_exhaustive {
         .                       flags |= VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE;
         .                   }
         .           
     4,989 ( 0.00%)          if recovered {
         .                       flags |= VariantFlags::IS_RECOVERED;
         .                   }
         .           
    14,967 ( 0.00%)          VariantDef {
         .                       def_id: variant_did.unwrap_or(parent_did),
         .                       ctor_def_id,
         .                       name,
         .                       discr,
     6,652 ( 0.00%)              fields,
         .                       ctor_kind,
         .                       flags,
         .                   }
     6,652 ( 0.00%)      }
         .           
         .               /// Is this field list non-exhaustive?
         .               #[inline]
         .               pub fn is_field_list_non_exhaustive(&self) -> bool {
         .                   self.flags.intersects(VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE)
         .               }
         .           
         .               /// Was this variant obtained as part of recovering from a syntactic error?
         .               #[inline]
         .               pub fn is_recovered(&self) -> bool {
         .                   self.flags.intersects(VariantFlags::IS_RECOVERED)
         .               }
         .           
         .               /// Computes the `Ident` of this variant by looking up the `Span`
    13,888 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
     7,936 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.def_id).unwrap())
    17,856 ( 0.00%)      }
         .           }
         .           
   508,845 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]
         .           pub enum VariantDiscr {
         .               /// Explicit value for this variant, i.e., `X = 123`.
         .               /// The `DefId` corresponds to the embedded constant.
         .               Explicit(DefId),
         .           
         .               /// The previous variant's discriminant plus one.
         .               /// For efficiency reasons, the distance from the
         .               /// last `Explicit` discriminant is being stored,
         .               /// or `0` for the first variant, if it has none.
         .               Relative(u32),
         .           }
         .           
 1,027,776 ( 0.01%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
         .           pub struct FieldDef {
         .               pub did: DefId,
         .               pub name: Symbol,
         .               pub vis: Visibility,
         .           }
         .           
    46,654 ( 0.00%)  bitflags! {
         .               #[derive(TyEncodable, TyDecodable, Default, HashStable)]
         .               pub struct ReprFlags: u8 {
         .                   const IS_C               = 1 << 0;
         .                   const IS_SIMD            = 1 << 1;
         .                   const IS_TRANSPARENT     = 1 << 2;
         .                   // Internal only for now. If true, don't reorder fields.
         .                   const IS_LINEAR          = 1 << 3;
         .                   // If true, don't expose any niche to type's context.
-- line 1684 ----------------------------------------
-- line 1689 ----------------------------------------
         .                   // Any of these flags being set prevent field reordering optimisation.
         .                   const IS_UNOPTIMISABLE   = ReprFlags::IS_C.bits
         .                                            | ReprFlags::IS_SIMD.bits
         .                                            | ReprFlags::IS_LINEAR.bits;
         .               }
         .           }
         .           
         .           /// Represents the repr options provided by the user,
   745,108 ( 0.00%)  #[derive(Copy, Clone, Debug, Eq, PartialEq, TyEncodable, TyDecodable, Default, HashStable)]
         .           pub struct ReprOptions {
         .               pub int: Option<attr::IntType>,
         .               pub align: Option<Align>,
         .               pub pack: Option<Align>,
         .               pub flags: ReprFlags,
         .               /// The seed to be used for randomizing a type's layout
         .               ///
         .               /// Note: This could technically be a `[u8; 16]` (a `u128`) which would
-- line 1705 ----------------------------------------
-- line 1706 ----------------------------------------
         .               /// be the "most accurate" hash as it'd encompass the item and crate
         .               /// hash without loss, but it does pay the price of being larger.
         .               /// Everything's a tradeoff, a `u64` seed should be sufficient for our
         .               /// purposes (primarily `-Z randomize-layout`)
         .               pub field_shuffle_seed: u64,
         .           }
         .           
         .           impl ReprOptions {
     2,925 ( 0.00%)      pub fn new(tcx: TyCtxt<'_>, did: DefId) -> ReprOptions {
         .                   let mut flags = ReprFlags::empty();
         .                   let mut size = None;
         .                   let mut max_align: Option<Align> = None;
         .                   let mut min_pack: Option<Align> = None;
         .           
         .                   // Generate a deterministically-derived seed from the item's path hash
         .                   // to allow for cross-crate compilation to actually work
         .                   let mut field_shuffle_seed = tcx.def_path_hash(did).0.to_smaller_hash();
         .           
         .                   // If the user defined a custom seed for layout randomization, xor the item's
         .                   // path hash with the user defined seed, this will allowing determinism while
         .                   // still allowing users to further randomize layout generation for e.g. fuzzing
       675 ( 0.00%)          if let Some(user_seed) = tcx.sess.opts.debugging_opts.layout_seed {
         .                       field_shuffle_seed ^= user_seed;
         .                   }
         .           
       900 ( 0.00%)          for attr in tcx.get_attrs(did).iter() {
    11,640 ( 0.00%)              for r in attr::find_repr_attrs(&tcx.sess, attr) {
         .                           flags.insert(match r {
         .                               attr::ReprC => ReprFlags::IS_C,
         .                               attr::ReprPacked(pack) => {
         .                                   let pack = Align::from_bytes(pack as u64).unwrap();
         .                                   min_pack = Some(if let Some(min_pack) = min_pack {
         .                                       min_pack.min(pack)
         .                                   } else {
         .                                       pack
-- line 1740 ----------------------------------------
-- line 1753 ----------------------------------------
         .                                   ReprFlags::empty()
         .                               }
         .                           });
         .                       }
         .                   }
         .           
         .                   // If `-Z randomize-layout` was enabled for the type definition then we can
         .                   // consider performing layout randomization
     1,800 ( 0.00%)          if tcx.sess.opts.debugging_opts.randomize_layout {
         .                       flags.insert(ReprFlags::RANDOMIZE_LAYOUT);
         .                   }
         .           
         .                   // This is here instead of layout because the choice must make it into metadata.
     1,350 ( 0.00%)          if !tcx.consider_optimizing(|| format!("Reorder fields of {:?}", tcx.def_path_str(did))) {
         .                       flags.insert(ReprFlags::IS_LINEAR);
         .                   }
         .           
       450 ( 0.00%)          Self { int: size, align: max_align, pack: min_pack, flags, field_shuffle_seed }
     6,300 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn simd(&self) -> bool {
         .                   self.flags.contains(ReprFlags::IS_SIMD)
         .               }
         .           
         .               #[inline]
         .               pub fn c(&self) -> bool {
-- line 1779 ----------------------------------------
-- line 1798 ----------------------------------------
         .               #[inline]
         .               pub fn hide_niche(&self) -> bool {
         .                   self.flags.contains(ReprFlags::HIDE_NICHE)
         .               }
         .           
         .               /// Returns the discriminant type, given these `repr` options.
         .               /// This must only be called on enums!
         .               pub fn discr_type(&self) -> attr::IntType {
    28,559 ( 0.00%)          self.int.unwrap_or(attr::SignedInt(ast::IntTy::Isize))
    13,016 ( 0.00%)      }
         .           
         .               /// Returns `true` if this `#[repr()]` should inhabit "smart enum
         .               /// layout" optimizations, such as representing `Foo<&T>` as a
         .               /// single pointer.
         .               pub fn inhibit_enum_layout_opt(&self) -> bool {
     6,570 ( 0.00%)          self.c() || self.int.is_some()
         .               }
         .           
         .               /// Returns `true` if this `#[repr()]` should inhibit struct field reordering
         .               /// optimizations, such as with `repr(C)`, `repr(packed(1))`, or `repr(<int>)`.
         .               pub fn inhibit_struct_field_reordering_opt(&self) -> bool {
    35,932 ( 0.00%)          if let Some(pack) = self.pack {
         .                       if pack.bytes() == 1 {
         .                           return true;
         .                       }
         .                   }
         .           
    72,380 ( 0.00%)          self.flags.intersects(ReprFlags::IS_UNOPTIMISABLE) || self.int.is_some()
         .               }
         .           
         .               /// Returns `true` if this type is valid for reordering and `-Z randomize-layout`
         .               /// was enabled for its declaration crate
         .               pub fn can_randomize_type_layout(&self) -> bool {
    17,837 ( 0.00%)          !self.inhibit_struct_field_reordering_opt()
         .                       && self.flags.contains(ReprFlags::RANDOMIZE_LAYOUT)
         .               }
         .           
         .               /// Returns `true` if this `#[repr()]` should inhibit union ABI optimisations.
         .               pub fn inhibit_union_abi_opt(&self) -> bool {
       138 ( 0.00%)          self.c()
         .               }
         .           }
         .           
         .           impl<'tcx> FieldDef {
         .               /// Returns the type of this field. The resulting type is not normalized. The `subst` is
         .               /// typically obtained via the second field of [`TyKind::Adt`].
   611,205 ( 0.00%)      pub fn ty(&self, tcx: TyCtxt<'tcx>, subst: SubstsRef<'tcx>) -> Ty<'tcx> {
   174,630 ( 0.00%)          tcx.type_of(self.did).subst(tcx, subst)
   698,520 ( 0.00%)      }
         .           
         .               /// Computes the `Ident` of this variant by looking up the `Span`
    47,943 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
    27,396 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.did).unwrap())
    61,641 ( 0.00%)      }
         .           }
         .           
         .           pub type Attributes<'tcx> = &'tcx [ast::Attribute];
         .           
         .           #[derive(Debug, PartialEq, Eq)]
         .           pub enum ImplOverlapKind {
         .               /// These impls are always allowed to overlap.
         .               Permitted {
-- line 1859 ----------------------------------------
-- line 1891 ----------------------------------------
         .               /// marker traits.
         .               /// 4. Neither of the impls can have any where-clauses.
         .               ///
         .               /// Once `traitobject` 0.1.0 is no longer an active concern, this hack can be removed.
         .               Issue33140,
         .           }
         .           
         .           impl<'tcx> TyCtxt<'tcx> {
    76,856 ( 0.00%)      pub fn typeck_body(self, body: hir::BodyId) -> &'tcx TypeckResults<'tcx> {
    19,214 ( 0.00%)          self.typeck(self.hir().body_owner_def_id(body))
    76,856 ( 0.00%)      }
         .           
       350 ( 0.00%)      pub fn provided_trait_methods(self, id: DefId) -> impl 'tcx + Iterator<Item = &'tcx AssocItem> {
         .                   self.associated_items(id)
         .                       .in_definition_order()
        30 ( 0.00%)              .filter(|item| item.kind == AssocKind::Fn && item.defaultness.has_value())
       400 ( 0.00%)      }
         .           
         .               fn item_name_from_hir(self, def_id: DefId) -> Option<Ident> {
         .                   self.hir().get_if_local(def_id).and_then(|node| node.ident())
         .               }
         .           
    13,275 ( 0.00%)      fn item_name_from_def_id(self, def_id: DefId) -> Option<Symbol> {
     1,475 ( 0.00%)          if def_id.index == CRATE_DEF_INDEX {
         .                       Some(self.crate_name(def_id.krate))
         .                   } else {
     4,425 ( 0.00%)              let def_key = self.def_key(def_id);
     7,375 ( 0.00%)              match def_key.disambiguated_data.data {
         .                           // The name of a constructor is that of its parent.
         .                           rustc_hir::definitions::DefPathData::Ctor => self.item_name_from_def_id(DefId {
         .                               krate: def_id.krate,
         .                               index: def_key.parent.unwrap(),
         .                           }),
     2,950 ( 0.00%)                  _ => def_key.disambiguated_data.data.get_opt_name(),
         .                       }
         .                   }
    11,800 ( 0.00%)      }
         .           
         .               /// Look up the name of an item across crates. This does not look at HIR.
         .               ///
         .               /// When possible, this function should be used for cross-crate lookups over
         .               /// [`opt_item_name`] to avoid invalidating the incremental cache. If you
         .               /// need to handle items without a name, or HIR items that will not be
         .               /// serialized cross-crate, or if you need the span of the item, use
         .               /// [`opt_item_name`] instead.
         .               ///
         .               /// [`opt_item_name`]: Self::opt_item_name
    10,325 ( 0.00%)      pub fn item_name(self, id: DefId) -> Symbol {
         .                   // Look at cross-crate items first to avoid invalidating the incremental cache
         .                   // unless we have to.
     1,475 ( 0.00%)          self.item_name_from_def_id(id).unwrap_or_else(|| {
         .                       bug!("item_name: no name for {:?}", self.def_path(id));
         .                   })
     7,375 ( 0.00%)      }
         .           
         .               /// Look up the name and span of an item or [`Node`].
         .               ///
         .               /// See [`item_name`][Self::item_name] for more information.
         .               pub fn opt_item_name(self, def_id: DefId) -> Option<Ident> {
         .                   // Look at the HIR first so the span will be correct if this is a local item.
         .                   self.item_name_from_hir(def_id)
         .                       .or_else(|| self.item_name_from_def_id(def_id).map(Ident::with_dummy_span))
         .               }
         .           
 1,732,210 ( 0.01%)      pub fn opt_associated_item(self, def_id: DefId) -> Option<&'tcx AssocItem> {
   692,884 ( 0.00%)          if let DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy = self.def_kind(def_id) {
         .                       Some(self.associated_item(def_id))
         .                   } else {
         .                       None
         .                   }
 1,558,989 ( 0.01%)      }
         .           
     6,861 ( 0.00%)      pub fn field_index(self, hir_id: hir::HirId, typeck_results: &TypeckResults<'_>) -> usize {
         .                   typeck_results.field_indices().get(hir_id).cloned().expect("no index for a field")
    13,722 ( 0.00%)      }
         .           
         .               pub fn find_field_index(self, ident: Ident, variant: &VariantDef) -> Option<usize> {
         .                   variant
         .                       .fields
         .                       .iter()
         .                       .position(|field| self.hygienic_eq(ident, field.ident(self), variant.def_id))
         .               }
         .           
         .               /// Returns `true` if the impls are the same polarity and the trait either
         .               /// has no items or is annotated `#[marker]` and prevents item overrides.
     4,950 ( 0.00%)      pub fn impls_are_allowed_to_overlap(
         .                   self,
         .                   def_id1: DefId,
         .                   def_id2: DefId,
         .               ) -> Option<ImplOverlapKind> {
         .                   // If either trait impl references an error, they're allowed to overlap,
         .                   // as one of them essentially doesn't exist.
         .                   if self.impl_trait_ref(def_id1).map_or(false, |tr| tr.references_error())
       990 ( 0.00%)              || self.impl_trait_ref(def_id2).map_or(false, |tr| tr.references_error())
         .                   {
         .                       return Some(ImplOverlapKind::Permitted { marker: false });
         .                   }
         .           
     4,949 ( 0.00%)          match (self.impl_polarity(def_id1), self.impl_polarity(def_id2)) {
         .                       (ImplPolarity::Reservation, _) | (_, ImplPolarity::Reservation) => {
         .                           // `#[rustc_reservation_impl]` impls don't overlap with anything
         .                           debug!(
         .                               "impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (reservations)",
         .                               def_id1, def_id2
         .                           );
         .                           return Some(ImplOverlapKind::Permitted { marker: false });
         .                       }
-- line 1997 ----------------------------------------
-- line 2004 ----------------------------------------
         .                           );
         .                           return None;
         .                       }
         .                       (ImplPolarity::Positive, ImplPolarity::Positive)
         .                       | (ImplPolarity::Negative, ImplPolarity::Negative) => {}
         .                   };
         .           
         .                   let is_marker_overlap = {
     4,940 ( 0.00%)              let is_marker_impl = |def_id: DefId| -> bool {
     1,482 ( 0.00%)                  let trait_ref = self.impl_trait_ref(def_id);
     1,482 ( 0.00%)                  trait_ref.map_or(false, |tr| self.trait_def(tr.def_id).is_marker)
     3,952 ( 0.00%)              };
     1,976 ( 0.00%)              is_marker_impl(def_id1) && is_marker_impl(def_id2)
         .                   };
         .           
         .                   if is_marker_overlap {
         .                       debug!(
         .                           "impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (marker overlap)",
         .                           def_id1, def_id2
         .                       );
         .                       Some(ImplOverlapKind::Permitted { marker: true })
         .                   } else {
     1,976 ( 0.00%)              if let Some(self_ty1) = self.issue33140_self_ty(def_id1) {
         .                           if let Some(self_ty2) = self.issue33140_self_ty(def_id2) {
         .                               if self_ty1 == self_ty2 {
         .                                   debug!(
         .                                       "impls_are_allowed_to_overlap({:?}, {:?}) - issue #33140 HACK",
         .                                       def_id1, def_id2
         .                                   );
         .                                   return Some(ImplOverlapKind::Issue33140);
         .                               } else {
-- line 2034 ----------------------------------------
-- line 2038 ----------------------------------------
         .                                   );
         .                               }
         .                           }
         .                       }
         .           
         .                       debug!("impls_are_allowed_to_overlap({:?}, {:?}) = None", def_id1, def_id2);
         .                       None
         .                   }
     3,960 ( 0.00%)      }
         .           
         .               /// Returns `ty::VariantDef` if `res` refers to a struct,
         .               /// or variant or their constructors, panics otherwise.
     6,734 ( 0.00%)      pub fn expect_variant_res(self, res: Res) -> &'tcx VariantDef {
    11,544 ( 0.00%)          match res {
         .                       Res::Def(DefKind::Variant, did) => {
         .                           let enum_did = self.parent(did).unwrap();
         .                           self.adt_def(enum_did).variant_with_id(did)
         .                       }
         .                       Res::Def(DefKind::Struct | DefKind::Union, did) => self.adt_def(did).non_enum_variant(),
         .                       Res::Def(DefKind::Ctor(CtorOf::Variant, ..), variant_ctor_did) => {
         .                           let variant_did = self.parent(variant_ctor_did).unwrap();
         .                           let enum_did = self.parent(variant_did).unwrap();
-- line 2059 ----------------------------------------
-- line 2060 ----------------------------------------
         .                           self.adt_def(enum_did).variant_with_ctor_id(variant_ctor_did)
         .                       }
         .                       Res::Def(DefKind::Ctor(CtorOf::Struct, ..), ctor_did) => {
         .                           let struct_did = self.parent(ctor_did).expect("struct ctor has no parent");
         .                           self.adt_def(struct_did).non_enum_variant()
         .                       }
         .                       _ => bug!("expect_variant_res used with unexpected res {:?}", res),
         .                   }
     7,696 ( 0.00%)      }
         .           
         .               /// Returns the possibly-auto-generated MIR of a `(DefId, Subst)` pair.
   144,576 ( 0.00%)      pub fn instance_mir(self, instance: ty::InstanceDef<'tcx>) -> &'tcx Body<'tcx> {
    36,144 ( 0.00%)          match instance {
   160,680 ( 0.00%)              ty::InstanceDef::Item(def) => match self.def_kind(def.did) {
         .                           DefKind::Const
         .                           | DefKind::Static
         .                           | DefKind::AssocConst
         .                           | DefKind::Ctor(..)
         .                           | DefKind::AnonConst
        54 ( 0.00%)                  | DefKind::InlineConst => self.mir_for_ctfe_opt_const_arg(def),
         .                           // If the caller wants `mir_for_ctfe` of a function they should not be using
         .                           // `instance_mir`, so we'll assume const fn also wants the optimized version.
         .                           _ => {
    16,041 ( 0.00%)                      assert_eq!(def.const_param_did, None);
         .                               self.optimized_mir(def.did)
         .                           }
         .                       },
         .                       ty::InstanceDef::VtableShim(..)
         .                       | ty::InstanceDef::ReifyShim(..)
         .                       | ty::InstanceDef::Intrinsic(..)
         .                       | ty::InstanceDef::FnPtrShim(..)
         .                       | ty::InstanceDef::Virtual(..)
         .                       | ty::InstanceDef::ClosureOnceShim { .. }
         .                       | ty::InstanceDef::DropGlue(..)
         .                       | ty::InstanceDef::CloneShim(..) => self.mir_shims(instance),
         .                   }
   162,648 ( 0.00%)      }
         .           
         .               /// Gets the attributes of a definition.
   682,560 ( 0.00%)      pub fn get_attrs(self, did: DefId) -> Attributes<'tcx> {
   204,768 ( 0.00%)          if let Some(did) = did.as_local() {
   171,075 ( 0.00%)              self.hir().attrs(self.hir().local_def_id_to_hir_id(did))
         .                   } else {
         .                       self.item_attrs(did)
         .                   }
   546,048 ( 0.00%)      }
         .           
         .               /// Determines whether an item is annotated with an attribute.
    60,608 ( 0.00%)      pub fn has_attr(self, did: DefId, attr: Symbol) -> bool {
   205,542 ( 0.00%)          self.sess.contains_name(&self.get_attrs(did), attr)
         .               }
         .           
         .               /// Determines whether an item is annotated with `doc(hidden)`.
     4,228 ( 0.00%)      pub fn is_doc_hidden(self, did: DefId) -> bool {
       604 ( 0.00%)          self.get_attrs(did)
         .                       .iter()
     5,753 ( 0.00%)              .filter_map(|attr| if attr.has_name(sym::doc) { attr.meta_item_list() } else { None })
        18 ( 0.00%)              .any(|items| items.iter().any(|item| item.has_name(sym::hidden)))
     4,832 ( 0.00%)      }
         .           
         .               /// Returns `true` if this is an `auto trait`.
    98,182 ( 0.00%)      pub fn trait_is_auto(self, trait_def_id: DefId) -> bool {
    14,026 ( 0.00%)          self.trait_def(trait_def_id).has_auto_impl
   112,208 ( 0.00%)      }
         .           
         .               /// Returns layout of a generator. Layout might be unavailable if the
         .               /// generator is tainted by errors.
     1,407 ( 0.00%)      pub fn generator_layout(self, def_id: DefId) -> Option<&'tcx GeneratorLayout<'tcx>> {
         .                   self.optimized_mir(def_id).generator_layout()
     1,005 ( 0.00%)      }
         .           
         .               /// Given the `DefId` of an impl, returns the `DefId` of the trait it implements.
         .               /// If it implements no trait, returns `None`.
    69,881 ( 0.00%)      pub fn trait_id_of_impl(self, def_id: DefId) -> Option<DefId> {
         .                   self.impl_trait_ref(def_id).map(|tr| tr.def_id)
    89,847 ( 0.00%)      }
         .           
         .               /// If the given defid describes a method belonging to an impl, returns the
         .               /// `DefId` of the impl that the method belongs to; otherwise, returns `None`.
     6,856 ( 0.00%)      pub fn impl_of_method(self, def_id: DefId) -> Option<DefId> {
    23,956 ( 0.00%)          self.opt_associated_item(def_id).and_then(|trait_item| match trait_item.container {
         .                       TraitContainer(_) => None,
         .                       ImplContainer(def_id) => Some(def_id),
         .                   })
    13,712 ( 0.00%)      }
         .           
         .               /// Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`
         .               /// with the name of the crate containing the impl.
         .               pub fn span_of_impl(self, impl_did: DefId) -> Result<Span, Symbol> {
         .                   if let Some(impl_did) = impl_did.as_local() {
         .                       Ok(self.def_span(impl_did))
         .                   } else {
         .                       Err(self.crate_name(impl_did.krate))
         .                   }
         .               }
         .           
         .               /// Hygienically compares a use-site name (`use_name`) for a field or an associated item with
         .               /// its supposed definition name (`def_name`). The method also needs `DefId` of the supposed
         .               /// definition's parent/scope to perform comparison.
    77,728 ( 0.00%)      pub fn hygienic_eq(self, use_name: Ident, def_name: Ident, def_parent_def_id: DefId) -> bool {
         .                   // We could use `Ident::eq` here, but we deliberately don't. The name
         .                   // comparison fails frequently, and we want to avoid the expensive
         .                   // `normalize_to_macros_2_0()` calls required for the span comparison whenever possible.
     9,716 ( 0.00%)          use_name.name == def_name.name
    28,320 ( 0.00%)              && use_name
         .                           .span
         .                           .ctxt()
         .                           .hygienic_eq(def_name.span.ctxt(), self.expn_that_defined(def_parent_def_id))
    77,728 ( 0.00%)      }
         .           
    14,787 ( 0.00%)      pub fn adjust_ident(self, mut ident: Ident, scope: DefId) -> Ident {
     3,286 ( 0.00%)          ident.span.normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope));
     3,286 ( 0.00%)          ident
    13,144 ( 0.00%)      }
         .           
    92,781 ( 0.00%)      pub fn adjust_ident_and_get_scope(
         .                   self,
         .                   mut ident: Ident,
         .                   scope: DefId,
         .                   block: hir::HirId,
         .               ) -> (Ident, DefId) {
    10,309 ( 0.00%)          let scope = ident
         .                       .span
         .                       .normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope))
        28 ( 0.00%)              .and_then(|actual_expansion| actual_expansion.expn_data().parent_module)
    41,180 ( 0.00%)              .unwrap_or_else(|| self.parent_module(block).to_def_id());
    61,854 ( 0.00%)          (ident, scope)
    92,781 ( 0.00%)      }
         .           
     9,800 ( 0.00%)      pub fn is_object_safe(self, key: DefId) -> bool {
         .                   self.object_safety_violations(key).is_empty()
    11,200 ( 0.00%)      }
         .           }
         .           
         .           /// Yields the parent function's `LocalDefId` if `def_id` is an `impl Trait` definition.
    23,304 ( 0.00%)  pub fn is_impl_trait_defn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<LocalDefId> {
    23,304 ( 0.00%)      let def_id = def_id.as_local()?;
    19,404 ( 0.00%)      if let Node::Item(item) = tcx.hir().get_by_def_id(def_id) {
     6,194 ( 0.00%)          if let hir::ItemKind::OpaqueTy(ref opaque_ty) = item.kind {
       588 ( 0.00%)              return match opaque_ty.origin {
         .                           hir::OpaqueTyOrigin::FnReturn(parent) | hir::OpaqueTyOrigin::AsyncFn(parent) => {
         .                               Some(parent)
         .                           }
         .                           hir::OpaqueTyOrigin::TyAlias => None,
         .                       };
         .                   }
         .               }
         .               None
    31,072 ( 0.00%)  }
         .           
         .           pub fn int_ty(ity: ast::IntTy) -> IntTy {
         .               match ity {
         .                   ast::IntTy::Isize => IntTy::Isize,
         .                   ast::IntTy::I8 => IntTy::I8,
         .                   ast::IntTy::I16 => IntTy::I16,
         .                   ast::IntTy::I32 => IntTy::I32,
         .                   ast::IntTy::I64 => IntTy::I64,
-- line 2216 ----------------------------------------
-- line 2224 ----------------------------------------
         .                   ast::UintTy::U8 => UintTy::U8,
         .                   ast::UintTy::U16 => UintTy::U16,
         .                   ast::UintTy::U32 => UintTy::U32,
         .                   ast::UintTy::U64 => UintTy::U64,
         .                   ast::UintTy::U128 => UintTy::U128,
         .               }
         .           }
         .           
         1 ( 0.00%)  pub fn float_ty(fty: ast::FloatTy) -> FloatTy {
         .               match fty {
         .                   ast::FloatTy::F32 => FloatTy::F32,
         .                   ast::FloatTy::F64 => FloatTy::F64,
         .               }
         1 ( 0.00%)  }
         .           
       231 ( 0.00%)  pub fn ast_int_ty(ity: IntTy) -> ast::IntTy {
         .               match ity {
         .                   IntTy::Isize => ast::IntTy::Isize,
         .                   IntTy::I8 => ast::IntTy::I8,
         .                   IntTy::I16 => ast::IntTy::I16,
         .                   IntTy::I32 => ast::IntTy::I32,
         .                   IntTy::I64 => ast::IntTy::I64,
         .                   IntTy::I128 => ast::IntTy::I128,
         .               }
       231 ( 0.00%)  }
         .           
         .           pub fn ast_uint_ty(uty: UintTy) -> ast::UintTy {
         .               match uty {
         .                   UintTy::Usize => ast::UintTy::Usize,
         .                   UintTy::U8 => ast::UintTy::U8,
         .                   UintTy::U16 => ast::UintTy::U16,
         .                   UintTy::U32 => ast::UintTy::U32,
         .                   UintTy::U64 => ast::UintTy::U64,
-- line 2256 ----------------------------------------
-- line 2262 ----------------------------------------
         .               closure::provide(providers);
         .               context::provide(providers);
         .               erase_regions::provide(providers);
         .               layout::provide(providers);
         .               util::provide(providers);
         .               print::provide(providers);
         .               super::util::bug::provide(providers);
         .               super::middle::provide(providers);
         8 ( 0.00%)      *providers = ty::query::Providers {
         .                   trait_impls_of: trait_def::trait_impls_of_provider,
         .                   type_uninhabited_from: inhabitedness::type_uninhabited_from,
         .                   const_param_default: consts::const_param_default,
         .                   vtable_allocation: vtable::vtable_allocation_provider,
         .                   ..*providers
         .               };
         1 ( 0.00%)  }
         .           
         .           /// A map for the local crate mapping each type to a vector of its
         .           /// inherent impls. This is not meant to be used outside of coherence;
         .           /// rather, you should request the vector for a specific type via
         .           /// `tcx.inherent_impls(def_id)` so as to minimize your dependencies
         .           /// (constructing this map requires touching the entire crate).
         .           #[derive(Clone, Debug, Default, HashStable)]
         .           pub struct CrateInherentImpls {
         .               pub inherent_impls: LocalDefIdMap<Vec<DefId>>,
         .           }
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, HashStable)]
         .           pub struct SymbolName<'tcx> {
         .               /// `&str` gives a consistent ordering, which ensures reproducible builds.
   383,793 ( 0.00%)      pub name: &'tcx str,
         .           }
         .           
         .           impl<'tcx> SymbolName<'tcx> {
    50,958 ( 0.00%)      pub fn new(tcx: TyCtxt<'tcx>, name: &str) -> SymbolName<'tcx> {
         .                   SymbolName {
         .                       name: unsafe { str::from_utf8_unchecked(tcx.arena.alloc_slice(name.as_bytes())) },
         .                   }
    67,944 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> fmt::Display for SymbolName<'tcx> {
     5,799 ( 0.00%)      fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   fmt::Display::fmt(&self.name, fmt)
         .               }
         .           }
         .           
         .           impl<'tcx> fmt::Debug for SymbolName<'tcx> {
         .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   fmt::Display::fmt(&self.name, fmt)
         .               }
-- line 2312 ----------------------------------------

26,275,827 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                   

-- line 111 ----------------------------------------
          .           const EMPTY: u8 = 0b1111_1111;
          .           
          .           /// Control byte value for a deleted bucket.
          .           const DELETED: u8 = 0b1000_0000;
          .           
          .           /// Checks whether a control byte represents a full bucket (top bit is clear).
          .           #[inline]
          .           fn is_full(ctrl: u8) -> bool {
 10,790,693 ( 0.05%)      ctrl & 0x80 == 0
          .           }
          .           
          .           /// Checks whether a control byte represents a special value (top bit is set).
          .           #[inline]
          .           fn is_special(ctrl: u8) -> bool {
          .               ctrl & 0x80 != 0
          .           }
          .           
          .           /// Checks whether a special control value is EMPTY (just check 1 bit).
          .           #[inline]
          .           fn special_is_empty(ctrl: u8) -> bool {
          .               debug_assert!(is_special(ctrl));
    782,344 ( 0.00%)      ctrl & 0x01 != 0
          .           }
          .           
          .           /// Primary hash function, used to select the initial bucket to probe from.
          .           #[inline]
          .           #[allow(clippy::cast_possible_truncation)]
          .           fn h1(hash: u64) -> usize {
          .               // On 32-bit platforms we simply ignore the higher hash bits.
          .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
          .           /// Secondary hash function, saved in the low 7 bits of the control byte.
          .           #[inline]
          .           #[allow(clippy::cast_possible_truncation)]
          .           fn h2(hash: u64) -> u8 {
          .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
          .               // value, some hash functions (such as FxHash) produce a usize result
          .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
          .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
243,072,448 ( 1.19%)      let top7 = hash >> (hash_len * 8 - 7);
          .               (top7 & 0x7f) as u8 // truncation
          .           }
          .           
          .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
          .           /// table size is a power of two) to visit every group of elements exactly once.
          .           ///
          .           /// A triangular probe has us jump by 1 more group every time. So first we
          .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
          .               #[inline]
          .               fn move_next(&mut self, bucket_mask: usize) {
          .                   // We should have found an empty bucket by now and ended the probe.
          .                   debug_assert!(
          .                       self.stride <= bucket_mask,
          .                       "Went past end of probe sequence"
          .                   );
          .           
  1,542,926 ( 0.01%)          self.stride += Group::WIDTH;
  1,542,926 ( 0.01%)          self.pos += self.stride;
  1,289,770 ( 0.01%)          self.pos &= bucket_mask;
          .               }
          .           }
          .           
          .           /// Returns the number of buckets needed to hold the given number of items,
          .           /// taking the maximum load factor into account.
          .           ///
          .           /// Returns `None` if an overflow occurs.
          .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
          .           #[cfg_attr(target_os = "emscripten", inline(never))]
          .           #[cfg_attr(not(target_os = "emscripten"), inline)]
          .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
          .               debug_assert_ne!(cap, 0);
          .           
          .               // For small tables we require at least 1 empty bucket so that lookups are
          .               // guaranteed to terminate if an element doesn't exist in the table.
    739,992 ( 0.00%)      if cap < 8 {
          .                   // We don't bother with a table size of 2 buckets since that can only
          .                   // hold a single element. Instead we skip directly to a 4 bucket table
          .                   // which can hold 3 elements.
  1,435,215 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
          .               }
          .           
          .               // Otherwise require 1/8 buckets to be empty (87.5% load)
          .               //
          .               // Be careful when modifying this, calculate_layout relies on the
          .               // overflow check here.
    497,718 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
          .           
          .               // Any overflows will have been caught by the checked_mul. Also, any
          .               // rounding errors from the division above will be cleaned up by
          .               // next_power_of_two (which can't overflow because of the previous division).
          .               Some(adjusted_cap.next_power_of_two())
          .           }
          .           
          .           /// Returns the maximum effective capacity for the given bucket mask, taking
          .           /// the maximum load factor into account.
          .           #[inline]
          .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
  2,033,443 ( 0.01%)      if bucket_mask < 8 {
          .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
          .                   // Keep in mind that the bucket mask is one less than the bucket count.
          .                   bucket_mask
          .               } else {
          .                   // For larger tables we reserve 12.5% of the slots as empty.
    630,962 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
          .               }
          .           }
          .           
          .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
          .           /// while keeping the rest of `calculate_layout_for` independent of `T`
          .           #[derive(Copy, Clone)]
          .           struct TableLayout {
          .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
          .           
          .               #[inline]
          .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   let TableLayout { size, ctrl_align } = self;
          .                   // Manual layout calculation since Layout methods are not yet stable.
          .                   let ctrl_offset =
  1,400,535 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
  1,964,534 ( 0.01%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
          .           
          .                   Some((
          .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
          .                       ctrl_offset,
          .                   ))
          .               }
          .           }
          .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
          .                   }
          .               }
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub unsafe fn drop(&self) {
          .                   self.as_ptr().drop_in_place();
          .               }
          .               #[inline]
          .               pub unsafe fn read(&self) -> T {
      5,626 ( 0.00%)          self.as_ptr().read()
          .               }
          .               #[inline]
          .               pub unsafe fn write(&self, val: T) {
          .                   self.as_ptr().write(val);
          .               }
          .               #[inline]
          .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
          .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
          .               /// Creates a new empty hash table without allocating any memory, using the
          .               /// given allocator.
          .               ///
          .               /// In effect this returns a table with exactly 1 bucket. However we can
          .               /// leave the data pointer dangling since that bucket is never written to
          .               /// due to our load factor forcing us to always have at least 1 free bucket.
          .               #[inline]
          .               pub fn new_in(alloc: A) -> Self {
     73,389 ( 0.00%)          Self {
          .                       table: RawTableInner::new_in(alloc),
          .                       marker: PhantomData,
          .                   }
          .               }
          .           
          .               /// Allocates a new hash table with the given number of buckets.
          .               ///
          .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
          .               unsafe fn new_uninitialized(
          .                   alloc: A,
          .                   buckets: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   Ok(Self {
        575 ( 0.00%)              table: RawTableInner::new_uninitialized(
          .                           alloc,
          .                           TableLayout::new::<T>(),
          .                           buckets,
          .                           fallibility,
          .                       )?,
          .                       marker: PhantomData,
          .                   })
          .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
          .               /// Attempts to allocate a new hash table with at least enough capacity
          .               /// for inserting the given number of elements without reallocating.
          .               fn fallible_with_capacity(
          .                   alloc: A,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   Ok(Self {
     41,105 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
          .                           alloc,
          .                           TableLayout::new::<T>(),
          .                           capacity,
          .                           fallibility,
          .                       )?,
          .                       marker: PhantomData,
          .                   })
          .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
          .                   debug_assert_ne!(self.table.bucket_mask, 0);
          .                   debug_assert!(index < self.buckets());
          .                   Bucket::from_base_index(self.data_end(), index)
          .               }
          .           
          .               /// Erases an element from the table without dropping it.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    135,917 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    135,917 ( 0.00%)          let index = self.bucket_index(item);
          .                   self.table.erase(index);
    271,834 ( 0.00%)      }
          .           
          .               /// Erases an element from the table, dropping it in place.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::needless_pass_by_value)]
          .               #[allow(deprecated)]
          .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
          .                   // Erase the element from the table first since drop might panic.
     49,208 ( 0.00%)          self.erase_no_drop(&item);
          .                   item.drop();
          .               }
          .           
          .               /// Finds and erases an element from the table, dropping it in place.
          .               /// Returns true if an element was found.
          .               #[cfg(feature = "raw")]
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
          .                   }
          .               }
          .           
          .               /// Removes an element from the table, returning it.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::needless_pass_by_value)]
          .               #[allow(deprecated)]
          .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    222,626 ( 0.00%)          self.erase_no_drop(&item);
      1,062 ( 0.00%)          item.read()
          .               }
          .           
          .               /// Finds and removes an element from the table, returning it.
          .               #[cfg_attr(feature = "inline-more", inline)]
  3,779,940 ( 0.02%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
     13,648 ( 0.00%)          match self.find(hash, eq) {
     32,309 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
    583,624 ( 0.00%)              None => None,
          .                   }
  4,992,520 ( 0.02%)      }
          .           
          .               /// Marks all table buckets as empty without dropping their contents.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn clear_no_drop(&mut self) {
          .                   self.table.clear_no_drop();
          .               }
          .           
          .               /// Removes all elements from the table without freeing the backing memory.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn clear(&mut self) {
          .                   // Ensure that the table is reset even if one of the drops panic
          .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
          .                   unsafe {
          1 ( 0.00%)              self_.drop_elements();
          .                   }
          .               }
          .           
          7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
     84,302 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
          .                       for item in self.iter() {
          .                           item.drop();
          .                       }
          .                   }
          8 ( 0.00%)      }
          .           
          .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
          .                   // Calculate the minimal number of elements that we need to reserve
          .                   // space for.
          .                   let min_size = usize::max(self.table.items, min_size);
          .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
          .                       }
          .                   }
          .               }
          .           
          .               /// Ensures that at least `additional` items can be inserted into the table
          .               /// without reallocation.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
  2,118,465 ( 0.01%)          if additional > self.table.growth_left {
          .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
  1,272,826 ( 0.01%)              if self
          .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
          .                           .is_err()
          .                       {
          .                           unsafe { hint::unreachable_unchecked() }
          .                       }
          .                   }
          .               }
          .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
          .                   } else {
          .                       Ok(())
          .                   }
          .               }
          .           
          .               /// Out-of-line slow path for `reserve` and `try_reserve`.
          .               #[cold]
          .               #[inline(never)]
  2,979,630 ( 0.01%)      fn reserve_rehash(
          .                   &mut self,
          .                   additional: usize,
          .                   hasher: impl Fn(&T) -> u64,
          .                   fallibility: Fallibility,
          .               ) -> Result<(), TryReserveError> {
          .                   unsafe {
          .                       self.table.reserve_rehash_inner(
          .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
          .                           TableLayout::new::<T>(),
          .                           if mem::needs_drop::<T>() {
          .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
          .                           } else {
          .                               None
          .                           },
          .                       )
          .                   }
  2,027,600 ( 0.01%)      }
          .           
          .               /// Allocates a new table of a different size and moves the contents of the
          .               /// current table into it.
          .               fn resize(
          .                   &mut self,
          .                   capacity: usize,
          .                   hasher: impl Fn(&T) -> u64,
          .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
          .                       )
          .                   }
          .               }
          .           
          .               /// Inserts a new element into the table, and returns its raw bucket.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
 15,928,638 ( 0.08%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
          .                   unsafe {
          .                       let mut index = self.table.find_insert_slot(hash);
          .           
          .                       // We can avoid growing the table once we have reached our load
          .                       // factor if we are replacing a tombstone. This works since the
          .                       // number of EMPTY slots does not change in this case.
     31,838 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
 10,549,945 ( 0.05%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
          .                           self.reserve(1, hasher);
          .                           index = self.table.find_insert_slot(hash);
          .                       }
          .           
          .                       self.table.record_item_insert_at(index, old_ctrl, hash);
          .           
          .                       let bucket = self.bucket(index);
          2 ( 0.00%)              bucket.write(value);
          .                       bucket
          .                   }
 11,812,708 ( 0.06%)      }
          .           
          .               /// Attempts to insert a new element without growing the table and return its raw bucket.
          .               ///
          .               /// Returns an `Err` containing the given element if inserting it would require growing the
          .               /// table.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
          .                       }
          .                   }
          .               }
          .           
          .               /// Inserts a new element into the table, and returns a mutable reference to it.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
  3,885,072 ( 0.02%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
      3,866 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
  2,913,804 ( 0.01%)      }
          .           
          .               /// Inserts a new element into the table, without growing the table.
          .               ///
          .               /// There must be enough space in the table to insert the new element.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
     18,063 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
  2,220,768 ( 0.01%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
     55,017 ( 0.00%)          let bucket = self.table.bucket(index);
          .           
          .                   // If we are replacing a DELETED entry then we don't need to update
          .                   // the load counter.
  4,631,546 ( 0.02%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
          .           
          .                   bucket.write(value);
  3,607,279 ( 0.02%)          self.table.items += 1;
          .                   bucket
     36,101 ( 0.00%)      }
          .           
          .               /// Temporary removes a bucket, applying the given function to the removed
          .               /// element and optionally put back the returned value in the same bucket.
          .               ///
          .               /// Returns `true` if the bucket still contains an element
          .               ///
          .               /// This does not check if the given bucket is actually occupied.
          .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
          .                       true
          .                   } else {
          .                       false
          .                   }
          .               }
          .           
          .               /// Searches for an element in the table.
          .               #[inline]
    288,763 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
     36,801 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    373,267 ( 0.00%)              eq(self.bucket(index).as_ref())
      9,630 ( 0.00%)          });
          .           
          .                   // Avoid `Option::map` because it bloats LLVM IR.
          .                   match result {
      3,725 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
          .                       None => None,
          .                   }
    328,802 ( 0.00%)      }
          .           
          .               /// Gets a reference to an element in the table.
          .               #[inline]
          .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
    217,778 ( 0.00%)          match self.find(hash, eq) {
          .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
          .                       None => None,
          .                   }
          .               }
          .           
          .               /// Gets a mutable reference to an element in the table.
          .               #[inline]
     42,617 ( 0.00%)      pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
    149,518 ( 0.00%)          match self.find(hash, eq) {
          .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
          .                       None => None,
          .                   }
     49,428 ( 0.00%)      }
          .           
          .               /// Attempts to get mutable references to `N` entries in the table at once.
          .               ///
          .               /// Returns an array of length `N` with the results of each query.
          .               ///
          .               /// At most one mutable reference will be returned to any entry. `None` will be returned if any
          .               /// of the hashes are duplicates. `None` will be returned if the hash is not found.
          .               ///
-- line 859 ----------------------------------------
-- line 920 ----------------------------------------
          .               #[inline]
          .               pub fn len(&self) -> usize {
          .                   self.table.items
          .               }
          .           
          .               /// Returns `true` if the table contains no elements.
          .               #[inline]
          .               pub fn is_empty(&self) -> bool {
  4,390,815 ( 0.02%)          self.len() == 0
          .               }
          .           
          .               /// Returns the number of buckets in the table.
          .               #[inline]
          .               pub fn buckets(&self) -> usize {
          .                   self.table.bucket_mask + 1
          .               }
          .           
          .               /// Returns an iterator over every element in the table. It is up to
          .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
          .               /// Because we cannot make the `next` method unsafe on the `RawIter`
          .               /// struct, we have to make the `iter` method unsafe.
          .               #[inline]
          .               pub unsafe fn iter(&self) -> RawIter<T> {
          1 ( 0.00%)          let data = Bucket::from_base_index(self.data_end(), 0);
          .                   RawIter {
          .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
    505,378 ( 0.00%)              items: self.table.items,
          .                   }
          .               }
          .           
          .               /// Returns an iterator over occupied buckets that could match a given hash.
          .               ///
          .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
          .               /// return items that have a hash value different than the one provided. You
          .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
          .               /// Iteration starts at the provided iterator's current location.
          .               ///
          .               /// It is up to the caller to ensure that the iterator is valid for this
          .               /// `RawTable` and covers all items that remain in the table.
          .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
          .                   debug_assert_eq!(iter.len(), self.len());
          .           
          .                   let alloc = self.table.alloc.clone();
     27,704 ( 0.00%)          let allocation = self.into_allocation();
     20,778 ( 0.00%)          RawIntoIter {
     34,630 ( 0.00%)              iter,
          .                       allocation,
          .                       marker: PhantomData,
          .                       alloc,
          .                   }
          .               }
          .           
          .               /// Converts the table into a raw allocation. The contents of the table
          .               /// should be dropped using a `RawIter` before freeing the allocation.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
     13,258 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
          .                       None
          .                   } else {
          .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
          .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
          .                           Some(lco) => lco,
          .                           None => unsafe { hint::unreachable_unchecked() },
          .                       };
          .                       Some((
      2,367 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
          .                           layout,
          .                       ))
          .                   };
          .                   mem::forget(self);
          .                   alloc
          .               }
          .           }
          .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           impl<A> RawTableInner<A> {
          .               #[inline]
          .               const fn new_in(alloc: A) -> Self {
  3,963,591 ( 0.02%)          Self {
          .                       // Be careful to cast the entire slice to a raw pointer.
          .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
          .                       bucket_mask: 0,
          .                       items: 0,
          .                       growth_left: 0,
          .                       alloc,
          .                   }
          .               }
          .           }
          .           
          .           impl<A: Allocator + Clone> RawTableInner<A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
  2,473,297 ( 0.01%)      unsafe fn new_uninitialized(
          .                   alloc: A,
          .                   table_layout: TableLayout,
          .                   buckets: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
          .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
          .                   // such allocations will never succeed anyways.
          .                   //
          .                   // This mirrors what Vec does in the standard library.
          .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
          .                       return Err(fallibility.capacity_overflow());
          .                   }
          .           
    576,436 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
          .                       Ok(block) => block.cast(),
          .                       Err(_) => return Err(fallibility.alloc_err(layout)),
          .                   };
          .           
          .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
  1,367,346 ( 0.01%)          Ok(Self {
          .                       ctrl,
    598,003 ( 0.00%)              bucket_mask: buckets - 1,
          .                       items: 0,
          .                       growth_left: bucket_mask_to_capacity(buckets - 1),
          .                       alloc,
          .                   })
  1,800,792 ( 0.01%)      }
          .           
          .               #[inline]
    129,423 ( 0.00%)      fn fallible_with_capacity(
          .                   alloc: A,
          .                   table_layout: TableLayout,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
     33,330 ( 0.00%)          if capacity == 0 {
     21,988 ( 0.00%)              Ok(Self::new_in(alloc))
          .                   } else {
          .                       unsafe {
          .                           let buckets =
          .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
          .           
  1,116,913 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
          .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
          .           
     72,057 ( 0.00%)                  Ok(result)
          .                       }
          .                   }
    129,423 ( 0.00%)      }
          .           
          .               /// Searches for an empty or deleted bucket which is suitable for inserting
          .               /// a new element and sets the hash for that slot.
          .               ///
          .               /// There must be at least 1 empty bucket in the table.
          .               #[inline]
    764,301 ( 0.00%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
          .                   let index = self.find_insert_slot(hash);
    764,301 ( 0.00%)          let old_ctrl = *self.ctrl(index);
          .                   self.set_ctrl_h2(index, hash);
          .                   (index, old_ctrl)
  1,528,602 ( 0.01%)      }
          .           
          .               /// Searches for an empty or deleted bucket which is suitable for inserting
          .               /// a new element.
          .               ///
          .               /// There must be at least 1 empty bucket in the table.
          .               #[inline]
          .               fn find_insert_slot(&self, hash: u64) -> usize {
          .                   let mut probe_seq = self.probe_seq(hash);
          .                   loop {
          .                       unsafe {
          .                           let group = Group::load(self.ctrl(probe_seq.pos));
  7,045,534 ( 0.03%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
 20,575,418 ( 0.10%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
          .           
          .                               // In tables smaller than the group width, trailing control
          .                               // bytes outside the range of the table are filled with
          .                               // EMPTY entries. These will unfortunately trigger a
          .                               // match, but once masked may point to a full bucket that
          .                               // is already occupied. We detect this situation here and
          .                               // perform a second scan starting at the beginning of the
          .                               // table. This second scan is guaranteed to find an empty
          .                               // slot (due to the load factor) before hitting the trailing
          .                               // control bytes (containing EMPTY).
  9,491,428 ( 0.05%)                      if unlikely(is_full(*self.ctrl(result))) {
          .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
          .                                   debug_assert_ne!(probe_seq.pos, 0);
          .                                   return Group::load_aligned(self.ctrl(0))
          .                                       .match_empty_or_deleted()
          .                                       .lowest_set_bit_nonzero();
          .                               }
          .           
          .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
          .           
          .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
          .               /// code generated, but it is eliminated by LLVM optimizations.
          .               #[inline]
          .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
          .                   let h2_hash = h2(hash);
          .                   let mut probe_seq = self.probe_seq(hash);
          .           
    627,480 ( 0.00%)          loop {
          .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
          .           
 23,079,350 ( 0.11%)              for bit in group.match_byte(h2_hash) {
 47,380,854 ( 0.23%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
          .           
 31,559,869 ( 0.15%)                  if likely(eq(index)) {
          .                               return Some(index);
          .                           }
          .                       }
          .           
  6,261,994 ( 0.03%)              if likely(group.match_empty().any_bit_set()) {
          .                           return None;
          .                       }
          .           
          .                       probe_seq.move_next(self.bucket_mask);
          .                   }
          .               }
          .           
          .               #[allow(clippy::mut_mut)]
          .               #[inline]
          .               unsafe fn prepare_rehash_in_place(&mut self) {
          .                   // Bulk convert all full control bytes to DELETED, and all DELETED
          .                   // control bytes to EMPTY. This effectively frees up all buckets
          .                   // containing a DELETED entry.
          3 ( 0.00%)          for i in (0..self.buckets()).step_by(Group::WIDTH) {
          .                       let group = Group::load_aligned(self.ctrl(i));
          .                       let group = group.convert_special_to_empty_and_full_to_deleted();
          .                       group.store_aligned(self.ctrl(i));
          .                   }
          .           
          .                   // Fix up the trailing control bytes. See the comments in set_ctrl
          .                   // for the handling of tables smaller than the group width.
          3 ( 0.00%)          if self.buckets() < Group::WIDTH {
          .                       self.ctrl(0)
          .                           .copy_to(self.ctrl(Group::WIDTH), self.buckets());
          .                   } else {
          .                       self.ctrl(0)
          .                           .copy_to(self.ctrl(self.buckets()), Group::WIDTH);
          .                   }
          .               }
          .           
-- line 1220 ----------------------------------------
-- line 1225 ----------------------------------------
          .                   Bucket::from_base_index(self.data_end(), index)
          .               }
          .           
          .               #[inline]
          .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
          .                   debug_assert_ne!(self.bucket_mask, 0);
          .                   debug_assert!(index < self.buckets());
          .                   let base: *mut u8 = self.data_end().as_ptr();
 25,578,656 ( 0.12%)          base.sub((index + 1) * size_of)
          .               }
          .           
          .               #[inline]
          .               unsafe fn data_end<T>(&self) -> NonNull<T> {
          .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
          .               }
          .           
          .               /// Returns an iterator-like object for a probe sequence on the table.
          .               ///
          .               /// This iterator never terminates, but is guaranteed to visit each bucket
          .               /// group exactly once. The loop using `probe_seq` must terminate upon
          .               /// reaching a group containing an empty bucket.
          .               #[inline]
          .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
          .                   ProbeSeq {
131,648,332 ( 0.64%)              pos: h1(hash) & self.bucket_mask,
          .                       stride: 0,
          .                   }
          .               }
          .           
          .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
          .               /// in the table, otherwise returns error
          .               #[cfg(feature = "raw")]
          .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
          .                   } else {
          .                       self.record_item_insert_at(index, old_ctrl, hash);
          .                       Ok(index)
          .                   }
          .               }
          .           
          .               #[inline]
          .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
 13,183,285 ( 0.06%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
          .                   self.set_ctrl_h2(index, hash);
 10,546,576 ( 0.05%)          self.items += 1;
          .               }
          .           
          .               #[inline]
          .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
          .                   let probe_seq_pos = self.probe_seq(hash).pos;
          .                   let probe_index =
          .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
         24 ( 0.00%)          probe_index(i) == probe_index(new_i)
          .               }
          .           
          .               /// Sets a control byte to the hash, and possibly also the replicated control byte at
          .               /// the end of the array.
          .               #[inline]
          .               unsafe fn set_ctrl_h2(&self, index: usize, hash: u64) {
          .                   self.set_ctrl(index, h2(hash));
          .               }
-- line 1289 ----------------------------------------
-- line 1312 ----------------------------------------
          .                   // replicate the buckets at the end of the trailing group. For example
          .                   // with 2 buckets and a group size of 4, the control bytes will look
          .                   // like this:
          .                   //
          .                   //     Real    |             Replicated
          .                   // ---------------------------------------------
          .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
          .                   // ---------------------------------------------
 19,866,028 ( 0.10%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
          .           
  6,616,320 ( 0.03%)          *self.ctrl(index) = ctrl;
  6,622,075 ( 0.03%)          *self.ctrl(index2) = ctrl;
          .               }
          .           
          .               /// Returns a pointer to a control byte.
          .               #[inline]
          .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
          .                   debug_assert!(index < self.num_ctrl_bytes());
          .                   self.ctrl.as_ptr().add(index)
          .               }
          .           
          .               #[inline]
          .               fn buckets(&self) -> usize {
  1,642,990 ( 0.01%)          self.bucket_mask + 1
          .               }
          .           
          .               #[inline]
          .               fn num_ctrl_bytes(&self) -> usize {
  1,436,064 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
          .               }
          .           
          .               #[inline]
          .               fn is_empty_singleton(&self) -> bool {
  7,381,857 ( 0.04%)          self.bucket_mask == 0
          .               }
          .           
          .               #[allow(clippy::mut_mut)]
          .               #[inline]
          .               unsafe fn prepare_resize(
          .                   &self,
          .                   table_layout: TableLayout,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
          .                   debug_assert!(self.items <= capacity);
          .           
          .                   // Allocate and initialize the new table.
     18,192 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
          .                       self.alloc.clone(),
          .                       table_layout,
          .                       capacity,
          .                       fallibility,
          .                   )?;
    800,118 ( 0.00%)          new_table.growth_left -= self.items;
          .                   new_table.items = self.items;
          .           
          .                   // The hash function may panic, in which case we simply free the new
          .                   // table without dropping any elements that may have been copied into
          .                   // it.
          .                   //
          .                   // This guard is also used to free the old table on success, see
          .                   // the comment at the bottom of this function.
          .                   Ok(guard(new_table, move |self_| {
    364,041 ( 0.00%)              if !self_.is_empty_singleton() {
          .                           self_.free_buckets(table_layout);
          .                       }
          .                   }))
          .               }
          .           
          .               /// Reserves or rehashes to make room for `additional` more elements.
          .               ///
          .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
          .                   &mut self,
          .                   additional: usize,
          .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
          .                   fallibility: Fallibility,
          .                   layout: TableLayout,
          .                   drop: Option<fn(*mut u8)>,
          .               ) -> Result<(), TryReserveError> {
          .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
    728,086 ( 0.00%)          let new_items = match self.items.checked_add(additional) {
          .                       Some(new_items) => new_items,
          .                       None => return Err(fallibility.capacity_overflow()),
          .                   };
    728,084 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
  1,552,108 ( 0.01%)          if new_items <= full_capacity / 2 {
          .                       // Rehash in-place without re-allocating if we have plenty of spare
          .                       // capacity that is locked up due to DELETED entries.
          .                       self.rehash_in_place(hasher, layout.size, drop);
          2 ( 0.00%)              Ok(())
          .                   } else {
          .                       // Otherwise, conservatively resize to at least the next size up
          .                       // to avoid churning deletes into frequent rehashes.
          .                       self.resize_inner(
    364,041 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
          .                           hasher,
          .                           fallibility,
          .                           layout,
          .                       )
          .                   }
          .               }
          .           
          .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
          .               #[inline(always)]
          .               unsafe fn resize_inner(
          .                   &mut self,
          .                   capacity: usize,
          .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
          .                   fallibility: Fallibility,
          .                   layout: TableLayout,
          .               ) -> Result<(), TryReserveError> {
     45,086 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
          .           
          .                   // Copy all elements to the new table.
          .                   for i in 0..self.buckets() {
  3,935,909 ( 0.02%)              if !is_full(*self.ctrl(i)) {
          .                           continue;
          .                       }
          .           
          .                       // This may panic.
          .                       let hash = hasher(self, i);
          .           
          .                       // We can use a simpler version of insert() here since:
          .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
          .                   }
          .           
          .                   // We successfully copied all elements without panicking. Now replace
          .                   // self with the new table. The old table will have its memory freed but
          .                   // the items will not be dropped (since they have been moved into the
          .                   // new table).
          .                   mem::swap(self, &mut new_table);
          .           
    364,041 ( 0.00%)          Ok(())
          .               }
          .           
          .               /// Rehashes the contents of the table in place (i.e. without changing the
          .               /// allocation).
          .               ///
          .               /// If `hasher` panics then some the table's contents may be lost.
          .               ///
          .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1496 ----------------------------------------
          .                       }
          .                       self_.growth_left = bucket_mask_to_capacity(self_.bucket_mask) - self_.items;
          .                   });
          .           
          .                   // At this point, DELETED elements are elements that we haven't
          .                   // rehashed yet. Find them and re-insert them at their ideal
          .                   // position.
          .                   'outer: for i in 0..guard.buckets() {
         64 ( 0.00%)              if *guard.ctrl(i) != DELETED {
          .                           continue;
          .                       }
          .           
          .                       let i_p = guard.bucket_ptr(i, size_of);
          .           
          .                       'inner: loop {
          .                           // Hash the current item
          .                           let hash = hasher(*guard, i);
-- line 1512 ----------------------------------------
-- line 1515 ----------------------------------------
          .                           let new_i = guard.find_insert_slot(hash);
          .                           let new_i_p = guard.bucket_ptr(new_i, size_of);
          .           
          .                           // Probing works by scanning through all of the control
          .                           // bytes in groups, which may not be aligned to the group
          .                           // size. If both the new and old position fall within the
          .                           // same unaligned group, then there is no benefit in moving
          .                           // it and we can just continue to the next item.
          8 ( 0.00%)                  if likely(guard.is_in_same_group(i, new_i, hash)) {
          .                               guard.set_ctrl_h2(i, hash);
          .                               continue 'outer;
          .                           }
          .           
          .                           // We are moving the current item to a new position. Write
          .                           // our H2 to the control byte of the new position.
          .                           let prev_ctrl = guard.replace_ctrl_h2(new_i, hash);
          .                           if prev_ctrl == EMPTY {
-- line 1531 ----------------------------------------
-- line 1541 ----------------------------------------
          .                               // swapped into the old slot.
          .                               debug_assert_eq!(prev_ctrl, DELETED);
          .                               ptr::swap_nonoverlapping(i_p, new_i_p, size_of);
          .                               continue 'inner;
          .                           }
          .                       }
          .                   }
          .           
          3 ( 0.00%)          guard.growth_left = bucket_mask_to_capacity(guard.bucket_mask) - guard.items;
          .           
          .                   mem::forget(guard);
          .               }
          .           
          .               #[inline]
          .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
          .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
          .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
          .                       Some(lco) => lco,
          .                       None => hint::unreachable_unchecked(),
          .                   };
          .                   self.alloc.deallocate(
    240,507 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
          .                       layout,
          .                   );
          .               }
          .           
          .               /// Marks all table buckets as empty without dropping their contents.
          .               #[inline]
          .               fn clear_no_drop(&mut self) {
     61,657 ( 0.00%)          if !self.is_empty_singleton() {
          .                       unsafe {
          .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
          .                       }
          .                   }
     74,611 ( 0.00%)          self.items = 0;
     61,896 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
          .               }
          .           
          .               #[inline]
          .               unsafe fn erase(&mut self, index: usize) {
          .                   debug_assert!(is_full(*self.ctrl(index)));
    634,353 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
          .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
          .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
          .           
          .                   // If we are inside a continuous block of Group::WIDTH full or deleted
          .                   // cells then a probe window may have seen a full block when trying to
          .                   // insert. We therefore need to keep that block non-empty so that
          .                   // lookups will continue searching to the next probe window.
          .                   //
          .                   // Note that in this context `leading_zeros` refers to the bytes at the
          .                   // end of a group, while `trailing_zeros` refers to the bytes at the
          .                   // beginning of a group.
  2,537,412 ( 0.01%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
          .                       DELETED
          .                   } else {
  3,117,305 ( 0.02%)              self.growth_left += 1;
          .                       EMPTY
          .                   };
          .                   self.set_ctrl(index, ctrl);
  2,537,412 ( 0.01%)          self.items -= 1;
          .               }
          .           }
          .           
          .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
    195,760 ( 0.00%)      fn clone(&self) -> Self {
     24,639 ( 0.00%)          if self.table.is_empty_singleton() {
          .                       Self::new_in(self.table.alloc.clone())
          .                   } else {
          .                       unsafe {
          .                           let mut new_table = ManuallyDrop::new(
          .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
          .                               match Self::new_uninitialized(
          .                                   self.table.alloc.clone(),
          .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
          .                               // We need to free the memory allocated for the new table.
          .                               new_table.free_buckets();
          .                           });
          .           
          .                           // Return the newly created table.
          .                           ManuallyDrop::into_inner(new_table)
          .                       }
          .                   }
    220,230 ( 0.00%)      }
          .           
          .               fn clone_from(&mut self, source: &Self) {
          .                   if source.table.is_empty_singleton() {
          .                       *self = Self::new_in(self.table.alloc.clone());
          .                   } else {
          .                       unsafe {
          .                           // First, drop all our elements without clearing the control bytes.
          .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
          .                       .table
          .                       .ctrl(0)
          .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
          .                   source
          .                       .data_start()
          .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
          .           
          .                   self.table.items = source.table.items;
        222 ( 0.00%)          self.table.growth_left = source.table.growth_left;
          .               }
          .           }
          .           
          .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
          .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
          .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1732 ----------------------------------------
          .                       // Update the index in case we need to unwind.
          .                       guard.0 = index;
          .                   }
          .           
          .                   // Successfully cloned all items, no need to clean up.
          .                   mem::forget(guard);
          .           
          .                   self.table.items = source.table.items;
         15 ( 0.00%)          self.table.growth_left = source.table.growth_left;
          .               }
          .           
          .               /// Variant of `clone_from` to use when a hasher is available.
          .               #[cfg(feature = "raw")]
          .               pub fn clone_from_with_hasher(&mut self, source: &Self, hasher: impl Fn(&T) -> u64) {
          .                   // If we have enough capacity in the table, just clear it and insert
          .                   // elements one by one. We don't do this if we have the same number of
          .                   // buckets as the source since we can just copy the contents directly
-- line 1748 ----------------------------------------
-- line 1790 ----------------------------------------
          .               fn default() -> Self {
          .                   Self::new_in(Default::default())
          .               }
          .           }
          .           
          .           #[cfg(feature = "nightly")]
          .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
  3,912,476 ( 0.02%)      fn drop(&mut self) {
  3,157,776 ( 0.02%)          if !self.table.is_empty_singleton() {
          .                       unsafe {
          .                           self.drop_elements();
          .                           self.free_buckets();
          .                       }
          .                   }
  4,171,742 ( 0.02%)      }
          .           }
          .           #[cfg(not(feature = "nightly"))]
          .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn drop(&mut self) {
          .                   if !self.table.is_empty_singleton() {
          .                       unsafe {
          .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
          .               type Item = T;
          .               type IntoIter = RawIntoIter<T, A>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
     27,704 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
          .                   unsafe {
          .                       let iter = self.iter();
          .                       self.into_iter_from(iter)
          .                   }
     34,630 ( 0.00%)      }
          .           }
          .           
          .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
          .           /// not track an item count.
          .           pub(crate) struct RawIterRange<T> {
          .               // Mask of full buckets in the current group. Bits are cleared from this
          .               // mask as each element is processed.
          .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
          .           
          .           impl<T> Iterator for RawIterRange<T> {
          .               type Item = Bucket<T>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn next(&mut self) -> Option<Bucket<T>> {
          .                   unsafe {
          .                       loop {
  1,606,078 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    206,893 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    322,177 ( 0.00%)                      return Some(self.data.next_n(index));
          .                           }
          .           
  1,136,966 ( 0.01%)                  if self.next_ctrl >= self.end {
          .                               return None;
          .                           }
          .           
          .                           // We might read past self.end up to the next group boundary,
          .                           // but this is fine because it only occurs on tables smaller
          .                           // than the group size where the trailing control bytes are all
          .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
          .                           // to the group size (since tables are power-of-two sized).
     41,841 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
     31,089 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
     88,181 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
          .                       }
          .                   }
          .               }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          .                   // We don't have an item count, so just guess based on the range size.
          .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
          .                           }
          .                       } else {
          .                           // We must have already iterated past the removed item.
          .                       }
          .                   }
          .               }
          .           
          .               unsafe fn drop_elements(&mut self) {
     10,653 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
          .                       for item in self {
          .                           item.drop();
          .                       }
          .                   }
          .               }
          .           }
          .           
          .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
          .                   }
          .               }
          .           }
          .           
          .           impl<T> Iterator for RawIter<T> {
          .               type Item = Bucket<T>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
    212,177 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
    881,096 ( 0.00%)          if let Some(b) = self.iter.next() {
  2,327,621 ( 0.01%)              self.items -= 1;
          .                       Some(b)
          .                   } else {
          .                       // We don't check against items == 0 here to allow the
          .                       // compiler to optimize away the item count entirely if the
          .                       // iterator length is never queried.
          .                       debug_assert_eq!(self.items, 0);
          .                       None
          .                   }
    424,354 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          .                   (self.items, Some(self.items))
          .               }
          .           }
          .           
          .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           #[cfg(feature = "nightly")]
          .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
     11,802 ( 0.00%)      fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements
          .                       self.iter.drop_elements();
          .           
          .                       // Free the table
     62,622 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
          .                           self.alloc.deallocate(ptr, layout);
          .                       }
          .                   }
      1,232 ( 0.00%)      }
          .           }
          .           #[cfg(not(feature = "nightly"))]
          .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements
          .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
          .                   }
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
          .               type Item = T;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
     15,544 ( 0.00%)      fn next(&mut self) -> Option<T> {
      8,940 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
     39,115 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
         14 ( 0.00%)          self.iter.size_hint()
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
          .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
          .           
          .           /// Iterator which consumes elements without freeing the table storage.
          .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
          .           where
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
     15,640 ( 0.00%)      fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements. Note that this may panic.
          .                       self.iter.drop_elements();
          .           
          .                       // Reset the contents of the table now that all elements have been
          .                       // dropped.
          .                       self.table.clear_no_drop();
          .           
          .                       // Move the now empty table back to its original location.
      1,955 ( 0.00%)              self.orig_table
          .                           .as_ptr()
          .                           .copy_from_nonoverlapping(&*self.table, 1);
          .                   }
     15,640 ( 0.00%)      }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
          .               type Item = T;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn next(&mut self) -> Option<T> {
          .                   unsafe {
-- line 2289 ----------------------------------------

 73,859,725 ( 0.36%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir                  

-- line 118 ----------------------------------------
         .               stability: InternedSet<'tcx, attr::Stability>,
         .           
         .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
         .               const_stability: InternedSet<'tcx, attr::ConstStability>,
         .           }
         .           
         .           impl<'tcx> CtxtInterners<'tcx> {
         .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
        17 ( 0.00%)          CtxtInterners {
         .                       arena,
         .                       type_: Default::default(),
         .                       type_list: Default::default(),
         .                       substs: Default::default(),
         .                       region: Default::default(),
         .                       poly_existential_predicates: Default::default(),
         .                       canonical_var_infos: Default::default(),
         .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
         .                       stability: Default::default(),
         .                       const_stability: Default::default(),
         .                   }
         .               }
         .           
         .               /// Interns a type.
         .               #[allow(rustc::usage_of_ty_tykind)]
         .               #[inline(never)]
21,309,656 ( 0.10%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
         .                   self.type_
13,318,535 ( 0.06%)              .intern(kind, |kind| {
   348,072 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
         .           
         .                           let ty_struct = TyS {
   696,144 ( 0.00%)                      kind,
         .                               flags: flags.flags,
         .                               outer_exclusive_binder: flags.outer_exclusive_binder,
         .                           };
         .           
         .                           Interned(self.arena.alloc(ty_struct))
         .                       })
         .                       .0
23,973,363 ( 0.12%)      }
         .           
         .               #[inline(never)]
 4,208,736 ( 0.02%)      fn intern_predicate(
         .                   &self,
         .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
         .               ) -> &'tcx PredicateInner<'tcx> {
         .                   self.predicate
 3,682,644 ( 0.02%)              .intern(kind, |kind| {
   606,048 ( 0.00%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
         .           
         .                           let predicate_struct = PredicateInner {
         .                               kind,
         .                               flags: flags.flags,
         .                               outer_exclusive_binder: flags.outer_exclusive_binder,
         .                           };
         .           
         .                           Interned(self.arena.alloc(predicate_struct))
         .                       })
         .                       .0
 4,734,828 ( 0.02%)      }
         .           }
         .           
         .           pub struct CommonTypes<'tcx> {
         .               pub unit: Ty<'tcx>,
         .               pub bool: Ty<'tcx>,
         .               pub char: Ty<'tcx>,
         .               pub isize: Ty<'tcx>,
         .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
         .           /// safely used as a key in the maps of a TypeckResults. For that to be
         .           /// the case, the HirId must have the same `owner` as all the other IDs in
         .           /// this table (signified by `hir_owner`). Otherwise the HirId
         .           /// would be in a different frame of reference and using its `local_id`
         .           /// would result in lookup errors, or worse, in silently wrong data being
         .           /// stored/returned.
         .           #[inline]
         .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
   826,642 ( 0.00%)      if hir_id.owner != hir_owner {
         .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
         .               }
         .           }
         .           
         .           #[cold]
         .           #[inline(never)]
         .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
         .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
         .           }
         .           
         .           impl<'a, V> LocalTableInContext<'a, V> {
         .               pub fn contains_key(&self, id: hir::HirId) -> bool {
         .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.data.contains_key(&id.local_id)
         .               }
         .           
   626,693 ( 0.00%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
   125,059 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
   125,059 ( 0.00%)          self.data.get(&id.local_id)
   503,082 ( 0.00%)      }
         .           
         .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
         .                   self.data.iter()
         .               }
         .           }
         .           
         .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
         .               type Output = V;
         .           
     8,688 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
         1 ( 0.00%)          self.get(key).expect("LocalTableInContext: key not found")
     5,792 ( 0.00%)      }
         .           }
         .           
         .           pub struct LocalTableInContextMut<'a, V> {
         .               hir_owner: LocalDefId,
         .               data: &'a mut ItemLocalMap<V>,
         .           }
         .           
         .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 328 ----------------------------------------
         .           /// ```
         .           ///
         .           /// Here, we would store the type `T`, the span of the value `x`, the "scope-span" for
         .           /// the scope that contains `x`, the expr `T` evaluated from, and the span of `foo.await`.
         .           #[derive(TyEncodable, TyDecodable, Clone, Debug, Eq, Hash, PartialEq, HashStable)]
         .           #[derive(TypeFoldable)]
         .           pub struct GeneratorInteriorTypeCause<'tcx> {
         .               /// Type of the captured binding.
       439 ( 0.00%)      pub ty: Ty<'tcx>,
         .               /// Span of the binding that was captured.
       163 ( 0.00%)      pub span: Span,
         .               /// Span of the scope of the captured binding.
       746 ( 0.00%)      pub scope_span: Option<Span>,
         .               /// Span of `.await` or `yield` expression.
       745 ( 0.00%)      pub yield_span: Span,
         .               /// Expr which the type evaluated from.
     1,043 ( 0.00%)      pub expr: Option<hir::HirId>,
         .           }
         .           
         .           #[derive(TyEncodable, TyDecodable, Debug)]
         .           pub struct TypeckResults<'tcx> {
         .               /// The `HirId::owner` all `ItemLocalId`s in this table are relative to.
         .               pub hir_owner: LocalDefId,
         .           
         .               /// Resolved definitions for `<T>::X` associated paths and
-- line 352 ----------------------------------------
-- line 507 ----------------------------------------
         .               pub treat_byte_string_as_slice: ItemLocalSet,
         .           
         .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
         .               /// on closure size.
         .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
         .           }
         .           
         .           impl<'tcx> TypeckResults<'tcx> {
    31,674 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
   374,809 ( 0.00%)          TypeckResults {
         .                       hir_owner,
         .                       type_dependent_defs: Default::default(),
         .                       field_indices: Default::default(),
         .                       user_provided_types: Default::default(),
         .                       user_provided_sigs: Default::default(),
         .                       node_types: Default::default(),
         .                       node_substs: Default::default(),
         .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
         .                       tainted_by_errors: None,
         .                       concrete_opaque_types: Default::default(),
         .                       closure_min_captures: Default::default(),
         .                       closure_fake_reads: Default::default(),
         .                       generator_interior_types: ty::Binder::dummy(Default::default()),
         .                       treat_byte_string_as_slice: Default::default(),
         .                       closure_size_eval: Default::default(),
         .                   }
    31,674 ( 0.00%)      }
         .           
         .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
   164,592 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
   109,728 ( 0.00%)          match *qpath {
   250,524 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
         .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
         .                           .type_dependent_def(id)
    78,660 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
         .                   }
   274,320 ( 0.00%)      }
         .           
     1,881 ( 0.00%)      pub fn type_dependent_defs(
         .                   &self,
         .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
     8,074 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
     1,881 ( 0.00%)      }
         .           
    18,861 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
    39,783 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
    37,722 ( 0.00%)      }
         .           
    31,248 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
         .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
    31,248 ( 0.00%)      }
         .           
    51,733 ( 0.00%)      pub fn type_dependent_defs_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
    51,733 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
    51,733 ( 0.00%)      }
         .           
         .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
    12,047 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
     2,593 ( 0.00%)      }
         .           
         .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
    16,878 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
     8,439 ( 0.00%)      }
         .           
         .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
    25,756 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    12,878 ( 0.00%)      }
         .           
         .               pub fn user_provided_types_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
     6,076 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
     3,038 ( 0.00%)      }
         .           
         .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
   108,752 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
    54,376 ( 0.00%)      }
         .           
         .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
   187,568 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
    93,784 ( 0.00%)      }
         .           
   843,510 ( 0.00%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
   140,585 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
         .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
         .                   })
   702,925 ( 0.00%)      }
         .           
   189,217 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
   189,217 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.node_types.get(&id.local_id).cloned()
   378,434 ( 0.00%)      }
         .           
         .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
    25,236 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
    12,618 ( 0.00%)      }
         .           
    61,391 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
    61,391 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
   122,782 ( 0.00%)      }
         .           
    40,437 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
    40,437 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.node_substs.get(&id.local_id).cloned()
    80,874 ( 0.00%)      }
         .           
         .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
         .               // doesn't provide type parameter substitutions.
         .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
    18,912 ( 0.00%)          self.node_type(pat.hir_id)
         .               }
         .           
         .               // Returns the type of an expression as a monotype.
         .               //
         .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
         .               // some cases, we insert `Adjustment` annotations such as auto-deref or
         .               // auto-ref.  The type returned by this function does not consider such
         .               // adjustments.  See `expr_ty_adjusted()` instead.
         .               //
         .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
         .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
         .               // instead of "fn(ty) -> T with T = isize".
         .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
   160,160 ( 0.00%)          self.node_type(expr.hir_id)
         .               }
         .           
         .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
   179,798 ( 0.00%)          self.node_type_opt(expr.hir_id)
         .               }
         .           
         .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
    76,644 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
    38,322 ( 0.00%)      }
         .           
         .               pub fn adjustments_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   114,992 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
    57,496 ( 0.00%)      }
         .           
    73,812 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
   147,624 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
         .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
   147,624 ( 0.00%)      }
         .           
         .               /// Returns the type of `expr`, considering any `Adjustment`
         .               /// entry recorded for that expression.
    10,335 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
     2,067 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
     2,172 ( 0.00%)      }
         .           
     5,875 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
     1,175 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
     1,028 ( 0.00%)      }
         .           
     6,193 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
         .                   // Only paths and method calls/overloaded operators have
         .                   // entries in type_dependent_defs, ignore the former here.
    12,386 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
         .                       return false;
         .                   }
         .           
    13,626 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
    12,386 ( 0.00%)      }
         .           
    40,137 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
         .                   self.pat_binding_modes().get(id).copied().or_else(|| {
         .                       s.delay_span_bug(sp, "missing binding mode");
         .                       None
         .                   })
    53,516 ( 0.00%)      }
         .           
         .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
    35,447 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
    11,034 ( 0.00%)      }
         .           
         .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
    17,192 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
     8,596 ( 0.00%)      }
         .           
         .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    52,754 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
    26,377 ( 0.00%)      }
         .           
         .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
    15,612 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
     7,806 ( 0.00%)      }
         .           
         .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
         .               /// by the closure.
     9,752 ( 0.00%)      pub fn closure_min_captures_flattened(
         .                   &self,
         .                   closure_def_id: DefId,
         .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
         .                   self.closure_min_captures
         .                       .get(&closure_def_id)
         .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
         .                       .into_iter()
         .                       .flatten()
    12,190 ( 0.00%)      }
         .           
         .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
     2,598 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
     1,299 ( 0.00%)      }
         .           
         .               pub fn closure_kind_origins_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
         .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
         .               }
         .           
         .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
     8,390 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
     4,195 ( 0.00%)      }
         .           
         .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
     5,792 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
     2,896 ( 0.00%)      }
         .           
         .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
     2,600 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
     1,300 ( 0.00%)      }
         .           
         .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
         4 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
         2 ( 0.00%)      }
         .           
        66 ( 0.00%)      pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
        22 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
         .                   self.coercion_casts.contains(&hir_id.local_id)
        44 ( 0.00%)      }
         .           
         .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
         .                   self.coercion_casts.insert(id);
         .               }
         .           
         .               pub fn coercion_casts(&self) -> &ItemLocalSet {
     1,299 ( 0.00%)          &self.coercion_casts
     1,299 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
         .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
         .                   let ty::TypeckResults {
         .                       hir_owner,
         .                       ref type_dependent_defs,
         .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
         .                   const START_INDEX = 0,
         .               }
         .           }
         .           
         .           /// Mapping of type annotation indices to canonical user type annotations.
         .           pub type CanonicalUserTypeAnnotations<'tcx> =
         .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
         .           
     1,414 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
         .           pub struct CanonicalUserTypeAnnotation<'tcx> {
         .               pub user_ty: CanonicalUserType<'tcx>,
         .               pub span: Span,
     1,585 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
         .           }
         .           
         .           /// Canonicalized user type annotation.
         .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
         .           
         .           impl<'tcx> CanonicalUserType<'tcx> {
         .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
         .               /// i.e., each thing is mapped to a canonical variable with the same index.
     4,955 ( 0.00%)      pub fn is_identity(&self) -> bool {
     9,910 ( 0.00%)          match self.value {
         .                       UserType::Ty(_) => false,
         .                       UserType::TypeOf(_, user_substs) => {
     4,955 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
         .                               return false;
         .                           }
         .           
         .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
         .                               match kind.unpack() {
    11,692 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
         .                                       ty::Bound(debruijn, b) => {
         .                                           // We only allow a `ty::INNERMOST` index in substitutions.
     5,781 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
         .                                           cvar == b.var
         .                                       }
         .                                       _ => false,
         .                                   },
         .           
       684 ( 0.00%)                          GenericArgKind::Lifetime(r) => match r {
         .                                       ty::ReLateBound(debruijn, br) => {
         .                                           // We only allow a `ty::INNERMOST` index in substitutions.
         .                                           assert_eq!(*debruijn, ty::INNERMOST);
         .                                           cvar == br.var
         .                                       }
         .                                       _ => false,
         .                                   },
         .           
-- line 867 ----------------------------------------
-- line 872 ----------------------------------------
         .                                           cvar == b
         .                                       }
         .                                       _ => false,
         .                                   },
         .                               }
         .                           })
         .                       }
         .                   }
     9,910 ( 0.00%)      }
         .           }
         .           
         .           /// A user-given type annotation attached to a constant. These arise
         .           /// from constants that are named via paths, like `Foo::<A>::new` and
         .           /// so forth.
     9,510 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
    61,021 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
         .           pub enum UserType<'tcx> {
         .               Ty(Ty<'tcx>),
         .           
         .               /// The canonical type is the result of `type_of(def_id)` with the
         .               /// given substitutions applied.
         .               TypeOf(DefId, UserSubsts<'tcx>),
         .           }
         .           
         .           impl<'tcx> CommonTypes<'tcx> {
         .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
       111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
         .           
         .                   CommonTypes {
         .                       unit: mk(Tuple(List::empty())),
         .                       bool: mk(Bool),
         .                       char: mk(Char),
         .                       never: mk(Never),
         .                       isize: mk(Int(ty::IntTy::Isize)),
         .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
         .           
         .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> CommonLifetimes<'tcx> {
         .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
        67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
         .           
         .                   CommonLifetimes {
         5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
         5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
         5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> CommonConsts<'tcx> {
         .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
         6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
         .           
         .                   CommonConsts {
         .                       unit: mk_const(ty::Const {
         .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
         .                           ty: types.unit,
         .                       }),
         .                   }
         .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
         .           
         .               /// Stores memory for globals (statics/consts).
         .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
         .           
         .               output_filenames: Arc<OutputFilenames>,
         .           }
         .           
         .           impl<'tcx> TyCtxt<'tcx> {
    63,060 ( 0.00%)      pub fn typeck_opt_const_arg(
         .                   self,
         .                   def: ty::WithOptConstParam<LocalDefId>,
         .               ) -> &'tcx TypeckResults<'tcx> {
    25,224 ( 0.00%)          if let Some(param_did) = def.const_param_did {
         .                       self.typeck_const_arg((def.did, param_did))
         .                   } else {
         .                       self.typeck(def.did)
         .                   }
    50,448 ( 0.00%)      }
         .           
     4,464 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
     1,488 ( 0.00%)          self.arena.alloc(Steal::new(thir))
     5,952 ( 0.00%)      }
         .           
    29,745 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
     5,949 ( 0.00%)          self.arena.alloc(Steal::new(mir))
    41,643 ( 0.00%)      }
         .           
     5,952 ( 0.00%)      pub fn alloc_steal_promoted(
         .                   self,
         .                   promoted: IndexVec<Promoted, Body<'tcx>>,
         .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
     1,488 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
     7,440 ( 0.00%)      }
         .           
     8,946 ( 0.00%)      pub fn alloc_adt_def(
         .                   self,
         .                   did: DefId,
         .                   kind: AdtKind,
         .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
         .                   repr: ReprOptions,
         .               ) -> &'tcx ty::AdtDef {
    15,904 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
     3,976 ( 0.00%)      }
         .           
         .               /// Allocates a read-only byte or string literal for `mir::interpret`.
         .               pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
         .                   // Create an allocation that just contains these bytes.
         .                   let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
         .                   let alloc = self.intern_const_alloc(alloc);
         .                   self.create_memory_alloc(alloc)
         .               }
         .           
         .               /// Returns a range of the start/end indices specified with the
         .               /// `rustc_layout_scalar_valid_range` attribute.
         .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
    55,992 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
    27,996 ( 0.00%)          let attrs = self.get_attrs(def_id);
   118,983 ( 0.00%)          let get = |name| {
    27,996 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
         .                           Some(attr) => attr,
         .                           None => return Bound::Unbounded,
         .                       };
         .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
     2,968 ( 0.00%)              if let Some(
         .                           &[
         .                               ast::NestedMetaItem::Literal(ast::Lit {
     1,484 ( 0.00%)                          kind: ast::LitKind::Int(a, _), ..
         .                               }),
         .                           ],
       742 ( 0.00%)              ) = attr.meta_item_list().as_deref()
         .                       {
         .                           Bound::Included(a)
         .                       } else {
         .                           self.sess
         .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
         .                           Bound::Unbounded
         .                       }
   139,980 ( 0.00%)          };
    41,994 ( 0.00%)          (
    41,994 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
    20,997 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
         .                   )
    55,992 ( 0.00%)      }
         .           
         .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
         .                   value.lift_to_tcx(self)
         .               }
         .           
         .               /// Creates a type context and call the closure with a `TyCtxt` reference
         .               /// to the context. The closure enforces that the type context and any interned
         .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
         .               /// reference to the context, to allow formatting values that need it.
        23 ( 0.00%)      pub fn create_global_ctxt(
         .                   s: &'tcx Session,
         .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
         .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
         .                   resolutions: ty::ResolverOutputs,
         .                   krate: &'tcx hir::Crate<'tcx>,
         .                   dep_graph: DepGraph,
         .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
         .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
         .                   query_kinds: &'tcx [DepKindStruct],
         .                   crate_name: &str,
         .                   output_filenames: OutputFilenames,
         .               ) -> GlobalCtxt<'tcx> {
         1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
         .                       s.fatal(&err);
         .                   });
         .                   let interners = CtxtInterners::new(arena);
         .                   let common_types = CommonTypes::new(&interners);
         .                   let common_lifetimes = CommonLifetimes::new(&interners);
         .                   let common_consts = CommonConsts::new(&interners, &common_types);
         .           
       127 ( 0.00%)          GlobalCtxt {
         .                       sess: s,
         6 ( 0.00%)              lint_store,
         .                       arena,
         2 ( 0.00%)              interners,
         5 ( 0.00%)              dep_graph,
         4 ( 0.00%)              untracked_resolutions: resolutions,
         2 ( 0.00%)              prof: s.prof.clone(),
         .                       types: common_types,
         .                       lifetimes: common_lifetimes,
         .                       consts: common_consts,
         .                       untracked_crate: krate,
         .                       on_disk_cache,
         .                       queries,
         .                       query_caches: query::QueryCaches::default(),
         .                       query_kinds,
         .                       ty_rcache: Default::default(),
         .                       pred_rcache: Default::default(),
         .                       selection_cache: Default::default(),
         .                       evaluation_cache: Default::default(),
         1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
         .                       data_layout,
         .                       alloc_map: Lock::new(interpret::AllocMap::new()),
         .                       output_filenames: Arc::new(output_filenames),
         .                   }
         9 ( 0.00%)      }
         .           
         .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
         .                   &self.query_kinds[k as usize]
         .               }
         .           
         .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
         .               #[track_caller]
         .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
         .                   ty: Ty<'tcx>,
         .                   span: S,
         .                   msg: &str,
         .               ) -> &'tcx Const<'tcx> {
         .                   self.sess.delay_span_bug(span, msg);
         .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
         .               }
         .           
    72,681 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
    10,383 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
    77,314 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
    83,064 ( 0.00%)      }
         .           
         .               /// Obtain all lang items of this crate and all dependencies (recursively)
 4,003,384 ( 0.02%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
         .                   self.get_lang_items(())
 5,147,208 ( 0.03%)      }
         .           
         .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
         .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
     1,071 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
         .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
     1,224 ( 0.00%)      }
         .           
         .               /// Obtain the diagnostic item's name
    77,840 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
         .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
    88,960 ( 0.00%)      }
         .           
         .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
    92,547 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
         .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
   105,768 ( 0.00%)      }
         .           
    38,752 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
         .                   self.stability_index(())
    49,824 ( 0.00%)      }
         .           
 1,095,276 ( 0.01%)      pub fn features(self) -> &'tcx rustc_feature::Features {
         .                   self.features_query(())
 1,251,744 ( 0.01%)      }
         .           
    93,766 ( 0.00%)      pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
         .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
 1,345,378 ( 0.01%)          if let Some(id) = id.as_local() {
         .                       self.untracked_resolutions.definitions.def_key(id)
         .                   } else {
 1,611,227 ( 0.01%)              self.untracked_resolutions.cstore.def_key(id)
         .                   }
    23,176 ( 0.00%)      }
         .           
         .               /// Converts a `DefId` into its fully expanded `DefPath` (every
         .               /// `DefId` is really just an interned `DefPath`).
         .               ///
         .               /// Note that if `id` is not local to this crate, the result will
         .               ///  be a non-local `DefPath`.
       508 ( 0.00%)      pub fn def_path(self, id: DefId) -> rustc_hir::definitions::DefPath {
         .                   // Accessing the DefPath is ok, since it is part of DefPathHash.
       762 ( 0.00%)          if let Some(id) = id.as_local() {
       171 ( 0.00%)              self.untracked_resolutions.definitions.def_path(id)
         .                   } else {
       985 ( 0.00%)              self.untracked_resolutions.cstore.def_path(id)
         .                   }
       762 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
         .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
    31,441 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
         .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
         .                   } else {
    34,976 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
         .                   if crate_num == LOCAL_CRATE {
         .                       self.sess.local_stable_crate_id()
         .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
         .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
         .                       self.def_path(def_id).to_string_no_crate_verbose()
         .                   )
         .               }
         .           
         .               /// Note that this is *untracked* and should only be used within the query
         .               /// system if the result is otherwise tracked through queries
         .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
   213,498 ( 0.00%)          &*self.untracked_resolutions.cstore
   106,749 ( 0.00%)      }
         .           
         .               /// Note that this is *untracked* and should only be used within the query
         .               /// system if the result is otherwise tracked through queries
         .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
         .                   &self.untracked_resolutions.definitions
         .               }
         .           
         .               #[inline(always)]
         .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
     8,556 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
    34,269 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
         .               }
         .           
         .               #[inline(always)]
         .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
         .                   let resolutions = &self.gcx.untracked_resolutions;
         .                   StableHashingContext::ignore_spans(
         .                       self.sess,
         .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
         .               /// If `true`, we should use the MIR-based borrowck, but also
         .               /// fall back on the AST borrowck if the MIR-based one errors.
         .               pub fn migrate_borrowck(self) -> bool {
         .                   self.borrowck_mode().migrate()
         .               }
         .           
         .               /// What mode(s) of borrowck should we run? AST? MIR? both?
         .               /// (Also considers the `#![feature(nll)]` setting.)
     2,598 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
         .                   // Here are the main constraints we need to deal with:
         .                   //
         .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
         .                   //    synonymous with no `-Z borrowck=...` flag at all.
         .                   //
         .                   // 2. We want to allow developers on the Nightly channel
         .                   //    to opt back into the "hard error" mode for NLL,
         .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
         .                   //   errors. (To simplify the code here, it now even overrides
         .                   //   a user's attempt to specify `-Z borrowck=compare`, which
         .                   //   we arguably do not need anymore and should remove.)
         .                   //
         .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
         .                   //
         .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
         .           
     3,897 ( 0.00%)          if self.features().nll {
         .                       return BorrowckMode::Mir;
         .                   }
         .           
     1,299 ( 0.00%)          self.sess.opts.borrowck_mode
     5,196 ( 0.00%)      }
         .           
         .               /// If `true`, we should use lazy normalization for constants, otherwise
         .               /// we still evaluate them eagerly.
         .               #[inline]
         .               pub fn lazy_normalization(self) -> bool {
        62 ( 0.00%)          let features = self.features();
         .                   // Note: We only use lazy normalization for generic const expressions.
        56 ( 0.00%)          features.generic_const_exprs
         .               }
         .           
         .               #[inline]
         .               pub fn local_crate_exports_generics(self) -> bool {
         .                   debug_assert!(self.sess.opts.share_generics());
         .           
    12,860 ( 0.00%)          self.sess.crate_types().iter().any(|crate_type| {
    21,438 ( 0.00%)              match crate_type {
         .                           CrateType::Executable
         .                           | CrateType::Staticlib
         .                           | CrateType::ProcMacro
         .                           | CrateType::Cdylib => false,
         .           
         .                           // FIXME rust-lang/rust#64319, rust-lang/rust#64872:
         .                           // We want to block export of generics from dylibs,
         .                           // but we must fix rust-lang/rust#65890 before we can
-- line 1450 ----------------------------------------
-- line 1540 ----------------------------------------
         .                       // FIXME(#42706) -- in some cases, we could do better here.
         .                       return true;
         .                   }
         .                   false
         .               }
         .           
         .               /// Determines whether identifiers in the assembly have strict naming rules.
         .               /// Currently, only NVPTX* targets need it.
    45,941 ( 0.00%)      pub fn has_strict_asm_symbol_naming(self) -> bool {
    45,941 ( 0.00%)          self.sess.target.arch.contains("nvptx")
    91,882 ( 0.00%)      }
         .           
         .               /// Returns `&'static core::panic::Location<'static>`.
     8,022 ( 0.00%)      pub fn caller_location_ty(self) -> Ty<'tcx> {
         .                   self.mk_imm_ref(
     1,337 ( 0.00%)              self.lifetimes.re_static,
         .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
     2,674 ( 0.00%)                  .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
         .                   )
     8,022 ( 0.00%)      }
         .           
         .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
    11,154 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
     8,112 ( 0.00%)          match self.def_kind(def_id) {
         .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
         .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
         .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
         .                       },
    18,252 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
         .                   }
     9,126 ( 0.00%)      }
         .           
   274,386 ( 0.00%)      pub fn type_length_limit(self) -> Limit {
         .                   self.limits(()).type_length_limit
   313,584 ( 0.00%)      }
         .           
 1,896,202 ( 0.01%)      pub fn recursion_limit(self) -> Limit {
         .                   self.limits(()).recursion_limit
 2,167,088 ( 0.01%)      }
         .           
   492,408 ( 0.00%)      pub fn move_size_limit(self) -> Limit {
         .                   self.limits(()).move_size_limit
   562,752 ( 0.00%)      }
         .           
    13,538 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
         .                   self.limits(()).const_eval_limit
    15,472 ( 0.00%)      }
         .           
         .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
         .                   iter::once(LOCAL_CRATE)
         .                       .chain(self.crates(()).iter().copied())
         .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
         .               }
         .           }
         .           
-- line 1594 ----------------------------------------
-- line 1614 ----------------------------------------
         .               fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted>;
         .           }
         .           
         .           macro_rules! nop_lift {
         .               ($set:ident; $ty:ty => $lifted:ty) => {
         .                   impl<'a, 'tcx> Lift<'tcx> for $ty {
         .                       type Lifted = $lifted;
         .                       fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {
    23,028 ( 0.00%)                  if tcx.interners.$set.contains_pointer_to(&Interned(self)) {
         .                               Some(unsafe { mem::transmute(self) })
         .                           } else {
         .                               None
         .                           }
         .                       }
         .                   }
         .               };
         .           }
-- line 1630 ----------------------------------------
-- line 1684 ----------------------------------------
         .               /// This is the implicit state of rustc. It contains the current
         .               /// `TyCtxt` and query. It is updated when creating a local interner or
         .               /// executing a new query. Whenever there's a `TyCtxt` value available
         .               /// you should also have access to an `ImplicitCtxt` through the functions
         .               /// in this module.
         .               #[derive(Clone)]
         .               pub struct ImplicitCtxt<'a, 'tcx> {
         .                   /// The current `TyCtxt`.
         2 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
         .           
         .                   /// The current query job, if any. This is updated by `JobOwner::start` in
         .                   /// `ty::query::plumbing` when executing a query.
         .                   pub query: Option<query::QueryJobId<DepKind>>,
         .           
         .                   /// Where to store diagnostics for the current query job, if any.
         .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
         .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
         .                   pub layout_depth: usize,
         .           
         .                   /// The current dep graph task. This is used to add dependencies to queries
         .                   /// when executing them.
         .                   pub task_deps: TaskDepsRef<'a>,
         .               }
         .           
         .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
         5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
         .                       let tcx = TyCtxt { gcx };
        25 ( 0.00%)              ImplicitCtxt {
         .                           tcx,
         .                           query: None,
         .                           diagnostics: None,
         .                           layout_depth: 0,
         .                           task_deps: TaskDepsRef::Ignore,
         .                       }
         5 ( 0.00%)          }
         .               }
         .           
         .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
         .               /// to `value` during the call to `f`. It is restored to its previous value after.
         .               /// This is used to set the pointer to the new `ImplicitCtxt`.
         .               #[cfg(parallel_compiler)]
         .               #[inline]
         .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
         .           
         .               /// Sets TLV to `value` during the call to `f`.
         .               /// It is restored to its previous value after.
         .               /// This is used to set the pointer to the new `ImplicitCtxt`.
         .               #[cfg(not(parallel_compiler))]
         .               #[inline]
         .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
         .                   let old = get_tlv();
   463,587 ( 0.00%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
         .                   TLV.with(|tlv| tlv.set(value));
         .                   f()
         .               }
         .           
         .               /// Gets the pointer to the current `ImplicitCtxt`.
         .               #[cfg(not(parallel_compiler))]
         .               #[inline]
         .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
         .               }
         .           
         .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
         .               #[inline]
         .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
         .               where
         .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
         .               {
         1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
         .               }
         .           
         .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
         .               #[inline]
         .               pub fn with_context_opt<F, R>(f: F) -> R
         .               where
         .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
         .               {
         .                   let context = get_tlv();
 1,948,607 ( 0.01%)          if context == 0 {
         .                       f(None)
         .                   } else {
         .                       // We could get an `ImplicitCtxt` pointer from another thread.
         .                       // Ensure that `ImplicitCtxt` is `Sync`.
         .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
         .           
         .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
         .                   }
-- line 1789 ----------------------------------------
-- line 1791 ----------------------------------------
         .           
         .               /// Allows access to the current `ImplicitCtxt`.
         .               /// Panics if there is no `ImplicitCtxt` available.
         .               #[inline]
         .               pub fn with_context<F, R>(f: F) -> R
         .               where
         .                   F: for<'a, 'tcx> FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
         .               {
    12,833 ( 0.00%)          with_context_opt(|opt_context| f(opt_context.expect("no ImplicitCtxt stored in tls")))
         .               }
         .           
         .               /// Allows access to the current `ImplicitCtxt` whose tcx field is the same as the tcx argument
         .               /// passed in. This means the closure is given an `ImplicitCtxt` with the same `'tcx` lifetime
         .               /// as the `TyCtxt` passed in.
         .               /// This will panic if you pass it a `TyCtxt` which is different from the current
         .               /// `ImplicitCtxt`'s `tcx` field.
         .               #[inline]
         .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
         .               where
         .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
         .               {
         .                   with_context(|context| unsafe {
   935,954 ( 0.00%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
         .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
   914,172 ( 0.00%)              f(context)
         .                   })
         .               }
         .           
         .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
         .               /// Panics if there is no `ImplicitCtxt` available.
         .               #[inline]
         .               pub fn with<F, R>(f: F) -> R
         .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
         .               fn into_pointer(&self) -> *const () {
         .                   self.0 as *const _ as *const ()
         .               }
         .           }
         .           
         .           #[allow(rustc::usage_of_ty_tykind)]
         .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
         .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
 2,530,468 ( 0.01%)          &self.0.kind()
         .               }
         .           }
         .           
         .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
         .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
         .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
         .                   // `x == y`.
         .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
         .           
         .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   711,144 ( 0.00%)          self.0.kind().hash(s)
         .               }
         .           }
         .           
         .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
         .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
   438,817 ( 0.00%)          &self.0.kind
         .               }
         .           }
         .           
         .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
         .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
         .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
         .                   // `x == y`.
         .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
         .           
         .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   114,684 ( 0.00%)          self.0.kind.hash(s)
         .               }
         .           }
         .           
         .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
         .               fn borrow<'a>(&'a self) -> &'a [T] {
 2,080,006 ( 0.01%)          &self.0[..]
         .               }
         .           }
         .           
         .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
         .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
         .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
         .                   // `x == y`.
         .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
         .           
         .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   298,564 ( 0.00%)          self.0[..].hash(s)
         .               }
         .           }
         .           
         .           macro_rules! direct_interners {
         .               ($($name:ident: $method:ident($ty:ty),)+) => {
         .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
         .                       fn borrow<'a>(&'a self) -> &'a $ty {
   455,292 ( 0.00%)                  &self.0
         .                       }
         .                   }
         .           
         .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
         .                       fn eq(&self, other: &Self) -> bool {
         .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
         .                           // equals `x == y`.
         .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
         .                   }
         .           
         .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
         .           
         .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
         .                       fn hash<H: Hasher>(&self, s: &mut H) {
         .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
         .                           // x.hash(s)`.
   148,798 ( 0.00%)                  self.0.hash(s)
         .                       }
         .                   }
         .           
         .                   impl<'tcx> TyCtxt<'tcx> {
 3,866,327 ( 0.02%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
 2,013,926 ( 0.01%)                  self.interners.$name.intern(v, |v| {
    28,519 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
         .                           }).0
 4,320,765 ( 0.02%)              }
         .                   })+
         .               }
         .           }
         .           
         .           direct_interners! {
         .               region: mk_region(RegionKind),
         .               const_: mk_const(Const<'tcx>),
         .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
         .               adt_def: intern_adt_def(AdtDef),
         .               stability: intern_stability(attr::Stability),
         .               const_stability: intern_const_stability(attr::ConstStability),
         .           }
         .           
         .           macro_rules! slice_interners {
         .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
         .                   impl<'tcx> TyCtxt<'tcx> {
22,377,175 ( 0.11%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
         .                           self.interners.$field.intern_ref(v, || {
         .                               Interned(List::from_arena(&*self.arena, v))
         .                           }).0
20,004,597 ( 0.10%)              })+
         .                   }
         .               );
         .           }
         .           
         .           slice_interners!(
         .               type_list: _intern_type_list(Ty<'tcx>),
         .               substs: _intern_substs(GenericArg<'tcx>),
         .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2129 ----------------------------------------
         .               /// unsafe.
         .               pub fn safe_to_unsafe_fn_ty(self, sig: PolyFnSig<'tcx>) -> Ty<'tcx> {
         .                   assert_eq!(sig.unsafety(), hir::Unsafety::Normal);
         .                   self.mk_fn_ptr(sig.map_bound(|sig| ty::FnSig { unsafety: hir::Unsafety::Unsafe, ..sig }))
         .               }
         .           
         .               /// Given the def_id of a Trait `trait_def_id` and the name of an associated item `assoc_name`
         .               /// returns true if the `trait_def_id` defines an associated item of name `assoc_name`.
     7,836 ( 0.00%)      pub fn trait_may_define_assoc_type(self, trait_def_id: DefId, assoc_name: Ident) -> bool {
         .                   self.super_traits_of(trait_def_id).any(|trait_did| {
         .                       self.associated_items(trait_did)
         .                           .find_by_name_and_kind(self, assoc_name, ty::AssocKind::Type, trait_did)
         .                           .is_some()
         .                   })
     5,877 ( 0.00%)      }
         .           
         .               /// Computes the def-ids of the transitive supertraits of `trait_def_id`. This (intentionally)
         .               /// does not compute the full elaborated super-predicates but just the set of def-ids. It is used
         .               /// to identify which traits may define a given associated type to help avoid cycle errors.
         .               /// Returns a `DefId` iterator.
         .               fn super_traits_of(self, trait_def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {
         .                   let mut set = FxHashSet::default();
     1,306 ( 0.00%)          let mut stack = vec![trait_def_id];
         .           
         .                   set.insert(trait_def_id);
         .           
     5,877 ( 0.00%)          iter::from_fn(move || -> Option<DefId> {
     1,552 ( 0.00%)              let trait_did = stack.pop()?;
       776 ( 0.00%)              let generic_predicates = self.super_predicates_of(trait_did);
         .           
         .                       for (predicate, _) in generic_predicates.predicates {
     1,446 ( 0.00%)                  if let ty::PredicateKind::Trait(data) = predicate.kind().skip_binder() {
       956 ( 0.00%)                      if set.insert(data.def_id()) {
         .                                   stack.push(data.def_id());
         .                               }
         .                           }
         .                       }
         .           
         .                       Some(trait_did)
         .                   })
         .               }
-- line 2169 ----------------------------------------
-- line 2170 ----------------------------------------
         .           
         .               /// Given a closure signature, returns an equivalent fn signature. Detuples
         .               /// and so forth -- so e.g., if we have a sig with `Fn<(u32, i32)>` then
         .               /// you would get a `fn(u32, i32)`.
         .               /// `unsafety` determines the unsafety of the fn signature. If you pass
         .               /// `hir::Unsafety::Unsafe` in the previous example, then you would get
         .               /// an `unsafe fn (u32, i32)`.
         .               /// It cannot convert a closure that requires unsafe.
        60 ( 0.00%)      pub fn signature_unclosure(
         .                   self,
         .                   sig: PolyFnSig<'tcx>,
         .                   unsafety: hir::Unsafety,
         .               ) -> PolyFnSig<'tcx> {
        96 ( 0.00%)          sig.map_bound(|s| {
        60 ( 0.00%)              let params_iter = match s.inputs()[0].kind() {
         .                           ty::Tuple(params) => params.into_iter().map(|k| k.expect_ty()),
         .                           _ => bug!(),
         .                       };
        84 ( 0.00%)              self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
         .                   })
        48 ( 0.00%)      }
         .           
         .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
         .               /// `*r == kind`.
         .               #[inline]
         .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
   523,200 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
         .               }
         .           
         .               #[allow(rustc::usage_of_ty_tykind)]
         .               #[inline]
         .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
17,899,634 ( 0.09%)          self.interners.intern_ty(st)
         .               }
         .           
         .               #[inline]
         .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
 5,648,544 ( 0.03%)          let inner = self.interners.intern_predicate(binder);
         .                   Predicate { inner }
         .               }
         .           
         .               #[inline]
14,514,848 ( 0.07%)      pub fn reuse_or_mk_predicate(
         .                   self,
         .                   pred: Predicate<'tcx>,
         .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
         .               ) -> Predicate<'tcx> {
 1,467,840 ( 0.01%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
14,514,848 ( 0.07%)      }
         .           
         .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
        60 ( 0.00%)          match tm {
         .                       IntTy::Isize => self.types.isize,
         .                       IntTy::I8 => self.types.i8,
         .                       IntTy::I16 => self.types.i16,
         .                       IntTy::I32 => self.types.i32,
         .                       IntTy::I64 => self.types.i64,
         .                       IntTy::I128 => self.types.i128,
         .                   }
        60 ( 0.00%)      }
         .           
         .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
       333 ( 0.00%)          match tm {
         .                       UintTy::Usize => self.types.usize,
         .                       UintTy::U8 => self.types.u8,
         .                       UintTy::U16 => self.types.u16,
         .                       UintTy::U32 => self.types.u32,
         .                       UintTy::U64 => self.types.u64,
         .                       UintTy::U128 => self.types.u128,
         .                   }
       333 ( 0.00%)      }
         .           
         .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
         3 ( 0.00%)          match tm {
         .                       FloatTy::F32 => self.types.f32,
         .                       FloatTy::F64 => self.types.f64,
         .                   }
         3 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn mk_static_str(self) -> Ty<'tcx> {
     1,680 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
         .               }
         .           
         .               #[inline]
         .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
         .                   // Take a copy of substs so that we own the vectors inside.
         .                   self.mk_ty(Adt(def, substs))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_foreign(self, def_id: DefId) -> Ty<'tcx> {
         .                   self.mk_ty(Foreign(def_id))
         .               }
         .           
       896 ( 0.00%)      fn mk_generic_adt(self, wrapper_def_id: DefId, ty_param: Ty<'tcx>) -> Ty<'tcx> {
         .                   let adt_def = self.adt_def(wrapper_def_id);
         .                   let substs =
     1,644 ( 0.00%)              InternalSubsts::for_item(self, wrapper_def_id, |param, substs| match param.kind {
         .                           GenericParamDefKind::Lifetime | GenericParamDefKind::Const { .. } => bug!(),
        94 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
       412 ( 0.00%)                      if param.index == 0 {
         .                                   ty_param.into()
         .                               } else {
        94 ( 0.00%)                          assert!(has_default);
       282 ( 0.00%)                          self.type_of(param.def_id).subst(self, substs).into()
         .                               }
         .                           }
         .                       });
       112 ( 0.00%)          self.mk_ty(Adt(adt_def, substs))
       896 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn mk_box(self, ty: Ty<'tcx>) -> Ty<'tcx> {
       470 ( 0.00%)          let def_id = self.require_lang_item(LangItem::OwnedBox, None);
       628 ( 0.00%)          self.mk_generic_adt(def_id, ty)
         .               }
         .           
         .               #[inline]
         .               pub fn mk_lang_item(self, ty: Ty<'tcx>, item: LangItem) -> Option<Ty<'tcx>> {
         .                   let def_id = self.lang_items().require(item).ok()?;
         .                   Some(self.mk_generic_adt(def_id, ty))
         .               }
         .           
-- line 2293 ----------------------------------------
-- line 2295 ----------------------------------------
         .               pub fn mk_diagnostic_item(self, ty: Ty<'tcx>, name: Symbol) -> Option<Ty<'tcx>> {
         .                   let def_id = self.get_diagnostic_item(name)?;
         .                   Some(self.mk_generic_adt(def_id, ty))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_maybe_uninit(self, ty: Ty<'tcx>) -> Ty<'tcx> {
         .                   let def_id = self.require_lang_item(LangItem::MaybeUninit, None);
        54 ( 0.00%)          self.mk_generic_adt(def_id, ty)
         .               }
         .           
         .               #[inline]
         .               pub fn mk_ptr(self, tm: TypeAndMut<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ty(RawPtr(tm))
         .               }
         .           
         .               #[inline]
-- line 2311 ----------------------------------------
-- line 2329 ----------------------------------------
         .               }
         .           
         .               #[inline]
         .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
         .               }
         .           
         .               #[inline]
    25,538 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
         .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
    26,680 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ty(Slice(ty))
         .               }
         .           
         .               #[inline]
         .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
     6,304 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
     8,790 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
         .               }
         .           
         .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
   174,954 ( 0.00%)          iter.intern_with(|ts| {
    50,803 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
   168,877 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
   157,275 ( 0.00%)          })
         .               }
         .           
         .               #[inline]
         .               pub fn mk_unit(self) -> Ty<'tcx> {
     8,405 ( 0.00%)          self.types.unit
         .               }
         .           
         .               #[inline]
         .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
         .                   if self.features().never_type_fallback { self.types.never } else { self.types.unit }
         .               }
         .           
         .               #[inline]
         .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ty(FnDef(def_id, substs))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
    18,888 ( 0.00%)          self.mk_ty(FnPtr(fty))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_dynamic(
         .                   self,
         .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
         .                   reg: ty::Region<'tcx>,
         .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
         .                   self.mk_ty_infer(TyVar(v))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
       750 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
         .               }
         .           
         .               #[inline]
         .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
         .                   self.mk_ty_infer(IntVar(v))
         .               }
         .           
         .               #[inline]
-- line 2428 ----------------------------------------
-- line 2445 ----------------------------------------
         .                   self.mk_ty(Param(ParamTy { index, name }))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
         .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
         .               }
         .           
   107,233 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
    75,985 ( 0.00%)          match param.kind {
         .                       GenericParamDefKind::Lifetime => {
     1,830 ( 0.00%)                  self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
         .                       }
    30,028 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
         .                       GenericParamDefKind::Const { .. } => {
         .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
         .                       }
         .                   }
   107,233 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ty(Opaque(def_id, substs))
         .               }
         .           
     6,915 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
     6,915 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
    13,830 ( 0.00%)      }
         .           
       815 ( 0.00%)      pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
     2,445 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Deref)
     1,630 ( 0.00%)      }
         .           
     1,314 ( 0.00%)      pub fn mk_place_downcast(
         .                   self,
         .                   place: Place<'tcx>,
         .                   adt_def: &'tcx AdtDef,
         .                   variant_index: VariantIdx,
         .               ) -> Place<'tcx> {
     1,314 ( 0.00%)          self.mk_place_elem(
         .                       place,
     2,628 ( 0.00%)              PlaceElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index),
         .                   )
     2,628 ( 0.00%)      }
         .           
       314 ( 0.00%)      pub fn mk_place_downcast_unnamed(
         .                   self,
         .                   place: Place<'tcx>,
         .                   variant_index: VariantIdx,
         .               ) -> Place<'tcx> {
       314 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Downcast(None, variant_index))
       628 ( 0.00%)      }
         .           
        62 ( 0.00%)      pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
        62 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Index(index))
       124 ( 0.00%)      }
         .           
         .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
         .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
         .               /// flight.
   106,074 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
         .                   let mut projection = place.projection.to_vec();
         .                   projection.push(elem);
         .           
         .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
   117,860 ( 0.00%)      }
         .           
   289,989 ( 0.00%)      pub fn intern_poly_existential_predicates(
         .                   self,
         .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
         .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
    47,393 ( 0.00%)          assert!(!eps.is_empty());
         .                   assert!(
         .                       eps.array_windows()
   337,420 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
         .                               != Ordering::Greater)
         .                   );
   189,572 ( 0.00%)          self._intern_poly_existential_predicates(eps)
   331,416 ( 0.00%)      }
         .           
         .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
         .                   // FIXME consider asking the input slice to be sorted to avoid
         .                   // re-interning permutations, in which case that would be asserted
         .                   // here.
    43,817 ( 0.00%)          if preds.is_empty() {
         .                       // The macro-generated method below asserts we don't intern an empty slice.
         .                       List::empty()
         .                   } else {
    24,826 ( 0.00%)              self._intern_predicates(preds)
         .                   }
    39,130 ( 0.00%)      }
         .           
         .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
   283,132 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
    32,764 ( 0.00%)      }
         .           
         .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
 3,803,309 ( 0.02%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
   341,204 ( 0.00%)      }
         .           
         .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
         .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
         .               }
         .           
         .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
   115,485 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
    83,770 ( 0.00%)      }
         .           
         .               pub fn intern_canonical_var_infos(
         .                   self,
         .                   ts: &[CanonicalVarInfo<'tcx>],
         .               ) -> CanonicalVarInfos<'tcx> {
   149,839 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
    37,070 ( 0.00%)      }
         .           
         .               pub fn intern_bound_variable_kinds(
         .                   self,
         .                   ts: &[ty::BoundVariableKind],
         .               ) -> &'tcx List<ty::BoundVariableKind> {
    78,474 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
   110,618 ( 0.00%)      }
         .           
         .               pub fn mk_fn_sig<I>(
         .                   self,
         .                   inputs: I,
         .                   output: I::Item,
         .                   c_variadic: bool,
         .                   unsafety: hir::Unsafety,
         .                   abi: abi::Abi,
         .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
         .               where
         .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
         .               {
         .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
    11,799 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
     2,384 ( 0.00%)              c_variadic,
     3,159 ( 0.00%)              unsafety,
     3,218 ( 0.00%)              abi,
     1,590 ( 0.00%)          })
         .               }
         .           
         .               pub fn mk_poly_existential_predicates<
         .                   I: InternAs<
         .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
         .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
         .                   >,
         .               >(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
   136,102 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
         .               }
         .           
         .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
       152 ( 0.00%)          iter.intern_with(|xs| self.intern_predicates(xs))
         .               }
         .           
         .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
   219,602 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
         .               }
         .           
     1,482 ( 0.00%)      pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
 3,003,571 ( 0.01%)          iter.intern_with(|xs| self.intern_substs(xs))
     1,976 ( 0.00%)      }
         .           
         .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
   605,764 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
         .               }
         .           
    79,676 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
         .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
   159,352 ( 0.00%)      }
         .           
         .               pub fn mk_bound_variable_kinds<
         .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
         .               >(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
   385,479 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
         .               }
         .           
         .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
         .               /// It stops at `bound` and just returns it if reached.
   452,872 ( 0.00%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
   452,872 ( 0.00%)          let hir = self.hir();
         .                   loop {
   962,265 ( 0.00%)              if id == bound {
         .                           return bound;
         .                       }
         .           
 1,287,001 ( 0.01%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
         .                           return id;
         .                       }
         .                       let next = hir.get_parent_node(id);
   768,177 ( 0.00%)              if next == id {
         .                           bug!("lint traversal reached the root of the crate");
         .                       }
         .                       id = next;
         .                   }
   646,960 ( 0.00%)      }
         .           
    50,928 ( 0.00%)      pub fn lint_level_at_node(
         .                   self,
         .                   lint: &'static Lint,
         .                   mut id: hir::HirId,
         .               ) -> (Level, LintLevelSource) {
         .                   let sets = self.lint_levels(());
         .                   loop {
   427,281 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
         .                           return pair;
         .                       }
    37,573 ( 0.00%)              let next = self.hir().get_parent_node(id);
   112,719 ( 0.00%)              if next == id {
         .                           bug!("lint traversal reached the root of the crate");
         .                       }
         .                       id = next;
         .                   }
    50,928 ( 0.00%)      }
         .           
       952 ( 0.00%)      pub fn struct_span_lint_hir(
         .                   self,
         .                   lint: &'static Lint,
         .                   hir_id: HirId,
         .                   span: impl Into<MultiSpan>,
         .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
         .               ) {
    22,943 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
     5,997 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
       544 ( 0.00%)      }
         .           
         .               pub fn struct_lint_node(
         .                   self,
         .                   lint: &'static Lint,
         .                   id: HirId,
         .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
         .               ) {
         .                   let (level, src) = self.lint_level_at_node(lint, id);
         .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
         .               }
         .           
    30,758 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
     8,788 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
         .                   let candidates = map.get(&id.local_id)?;
     8,788 ( 0.00%)          Some(&*candidates)
    35,152 ( 0.00%)      }
         .           
    50,393 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
         .                   debug!(?id, "named_region");
         .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
    64,791 ( 0.00%)      }
         .           
     3,285 ( 0.00%)      pub fn is_late_bound(self, id: HirId) -> bool {
         .                   self.is_late_bound_map(id.owner)
       260 ( 0.00%)              .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
     2,920 ( 0.00%)      }
         .           
    58,296 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
         .                   self.object_lifetime_defaults_map(id.owner)
    74,952 ( 0.00%)      }
         .           
    62,046 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
         .                   self.mk_bound_variable_kinds(
         .                       self.late_bound_vars_map(id.owner)
         .                           .and_then(|map| map.get(&id.local_id).cloned())
         .                           .unwrap_or_else(|| {
         .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
         .                           })
         .                           .iter(),
         .                   )
    62,046 ( 0.00%)      }
         .           
         .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
         .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
         .               }
         .           
         .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
         .               /// feature gates
     2,680 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
       268 ( 0.00%)          if self.is_const_fn_raw(def_id) {
       186 ( 0.00%)              match self.lookup_const_stability(def_id) {
        52 ( 0.00%)                  Some(stability) if stability.level.is_unstable() => {
         .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
         .                               // corresponding feature gate.
        22 ( 0.00%)                      self.features()
         .                                   .declared_lib_features
         .                                   .iter()
         .                                   .any(|&(sym, _)| sym == stability.feature)
         .                           }
         .                           // functions without const stability are either stable user written
         .                           // const fn or the user is using feature gates and we thus don't
         .                           // care what they do
         .                           _ => true,
         .                       }
         .                   } else {
         .                       false
         .                   }
     2,412 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TyCtxtAt<'tcx> {
         .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
         .               #[track_caller]
         .               pub fn ty_error(self) -> Ty<'tcx> {
         .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
         .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
         .           }
         .           
         .           impl<I, T, R, E> InternAs<[T], R> for I
         .           where
         .               E: InternIteratorElement<T, R>,
         .               I: Iterator<Item = E>,
         .           {
         .               type Output = E::Output;
 1,070,928 ( 0.01%)      fn intern_with<F>(self, f: F) -> Self::Output
         .               where
         .                   F: FnOnce(&[T]) -> R,
         .               {
11,935,765 ( 0.06%)          E::intern_with(self, f)
   819,162 ( 0.00%)      }
         .           }
         .           
         .           pub trait InternIteratorElement<T, R>: Sized {
         .               type Output;
         .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
         .           }
         .           
         .           impl<T, R> InternIteratorElement<T, R> for T {
         .               type Output = R;
 1,191,331 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
         .                   mut iter: I,
         .                   f: F,
         .               ) -> Self::Output {
         .                   // This code is hot enough that it's worth specializing for the most
         .                   // common length lists, to avoid the overhead of `SmallVec` creation.
         .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
         .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
         .                   // `assert`.
 1,433,916 ( 0.01%)          match iter.size_hint() {
         .                       (0, Some(0)) => {
         9 ( 0.00%)                  assert!(iter.next().is_none());
         .                           f(&[])
         .                       }
         .                       (1, Some(1)) => {
         .                           let t0 = iter.next().unwrap();
       193 ( 0.00%)                  assert!(iter.next().is_none());
   182,284 ( 0.00%)                  f(&[t0])
         .                       }
         .                       (2, Some(2)) => {
         .                           let t0 = iter.next().unwrap();
         .                           let t1 = iter.next().unwrap();
       974 ( 0.00%)                  assert!(iter.next().is_none());
   177,192 ( 0.00%)                  f(&[t0, t1])
         .                       }
     5,752 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
         .                   }
   877,345 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
         .           where
         .               T: Clone + 'a,
         .           {
         .               type Output = R;
    44,334 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
         .                   // This code isn't hot.
       636 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
    36,066 ( 0.00%)      }
         .           }
         .           
         .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
         .               type Output = Result<R, E>;
 4,606,992 ( 0.02%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
         .                   mut iter: I,
         .                   f: F,
         .               ) -> Self::Output {
         .                   // This code is hot enough that it's worth specializing for the most
         .                   // common length lists, to avoid the overhead of `SmallVec` creation.
         .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
         .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
         .                   // `assert`, unless a failure happens first, in which case the result
         .                   // will be an error anyway.
 3,444,258 ( 0.02%)          Ok(match iter.size_hint() {
         .                       (0, Some(0)) => {
         .                           assert!(iter.next().is_none());
         .                           f(&[])
         .                       }
         .                       (1, Some(1)) => {
    22,312 ( 0.00%)                  let t0 = iter.next().unwrap()?;
       312 ( 0.00%)                  assert!(iter.next().is_none());
   260,871 ( 0.00%)                  f(&[t0])
         .                       }
         .                       (2, Some(2)) => {
    65,852 ( 0.00%)                  let t0 = iter.next().unwrap()?;
    65,852 ( 0.00%)                  let t1 = iter.next().unwrap()?;
    15,798 ( 0.00%)                  assert!(iter.next().is_none());
   479,052 ( 0.00%)                  f(&[t0, t1])
         .                       }
   178,615 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
         .                   })
 5,133,421 ( 0.03%)      }
         .           }
         .           
         .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
         .           // won't work for us.
         .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
   935,954 ( 0.00%)      t as *const () == u as *const ()
         .           }
         .           
         .           pub fn provide(providers: &mut ty::query::Providers) {
         2 ( 0.00%)      providers.in_scope_traits_map =
         .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
         3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
         2 ( 0.00%)      providers.module_reexports =
         .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
         2 ( 0.00%)      providers.crate_name = |tcx, id| {
         1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
         1 ( 0.00%)          tcx.crate_name
         .               };
         2 ( 0.00%)      providers.maybe_unused_trait_import =
         .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
         2 ( 0.00%)      providers.maybe_unused_extern_crates =
         .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
         2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
         .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
         .               };
         .           
        20 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
         2 ( 0.00%)      providers.lookup_const_stability =
       243 ( 0.00%)          |tcx, id| tcx.stability().local_const_stability(id.expect_local());
         2 ( 0.00%)      providers.lookup_deprecation_entry =
    43,880 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
         2 ( 0.00%)      providers.extern_mod_stmt_cnum =
         .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
         3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
         3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
         2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
         1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
         7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
         .               };
         2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
         1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
         7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
         .               };
         2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
         1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
         .                   // We want to check if the panic handler was defined in this crate
         3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
         .               };
         .           }

 9,712,667 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs
--------------------------------------------------------------------------------
Ir                  

-- line 22 ----------------------------------------
         .           
         .           /// An entity in the Rust type system, which can be one of
         .           /// several kinds (types, lifetimes, and consts).
         .           /// To reduce memory usage, a `GenericArg` is an interned pointer,
         .           /// with the lowest 2 bits being reserved for a tag to
         .           /// indicate the type (`Ty`, `Region`, or `Const`) it points to.
         .           #[derive(Copy, Clone, PartialEq, Eq, Hash)]
         .           pub struct GenericArg<'tcx> {
 3,315,434 ( 0.02%)      ptr: NonZeroUsize,
 8,400,366 ( 0.04%)      marker: PhantomData<(Ty<'tcx>, ty::Region<'tcx>, &'tcx ty::Const<'tcx>)>,
         .           }
         .           
         .           const TAG_MASK: usize = 0b11;
         .           const TYPE_TAG: usize = 0b00;
         .           const REGION_TAG: usize = 0b01;
         .           const CONST_TAG: usize = 0b10;
         .           
   636,988 ( 0.00%)  #[derive(Debug, TyEncodable, TyDecodable, PartialEq, Eq, PartialOrd, Ord, HashStable)]
         .           pub enum GenericArgKind<'tcx> {
         .               Lifetime(ty::Region<'tcx>),
         .               Type(Ty<'tcx>),
         .               Const(&'tcx ty::Const<'tcx>),
         .           }
         .           
         .           impl<'tcx> GenericArgKind<'tcx> {
   149,555 ( 0.00%)      fn pack(self) -> GenericArg<'tcx> {
   149,555 ( 0.00%)          let (tag, ptr) = match self {
         .                       GenericArgKind::Lifetime(lt) => {
         .                           // Ensure we can use the tag bits.
         .                           assert_eq!(mem::align_of_val(lt) & TAG_MASK, 0);
         .                           (REGION_TAG, lt as *const _ as usize)
         .                       }
         .                       GenericArgKind::Type(ty) => {
         .                           // Ensure we can use the tag bits.
         .                           assert_eq!(mem::align_of_val(ty) & TAG_MASK, 0);
-- line 56 ----------------------------------------
-- line 58 ----------------------------------------
         .                       }
         .                       GenericArgKind::Const(ct) => {
         .                           // Ensure we can use the tag bits.
         .                           assert_eq!(mem::align_of_val(ct) & TAG_MASK, 0);
         .                           (CONST_TAG, ct as *const _ as usize)
         .                       }
         .                   };
         .           
   777,606 ( 0.00%)          GenericArg { ptr: unsafe { NonZeroUsize::new_unchecked(ptr | tag) }, marker: PhantomData }
   149,555 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> fmt::Debug for GenericArg<'tcx> {
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   match self.unpack() {
         .                       GenericArgKind::Lifetime(lt) => lt.fmt(f),
         .                       GenericArgKind::Type(ty) => ty.fmt(f),
         .                       GenericArgKind::Const(ct) => ct.fmt(f),
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> Ord for GenericArg<'tcx> {
    12,876 ( 0.00%)      fn cmp(&self, other: &GenericArg<'_>) -> Ordering {
     8,584 ( 0.00%)          self.unpack().cmp(&other.unpack())
         .               }
         .           }
         .           
         .           impl<'tcx> PartialOrd for GenericArg<'tcx> {
         .               fn partial_cmp(&self, other: &GenericArg<'_>) -> Option<Ordering> {
         .                   Some(self.cmp(&other))
         .               }
         .           }
         .           
         .           impl<'tcx> From<ty::Region<'tcx>> for GenericArg<'tcx> {
   455,930 ( 0.00%)      fn from(r: ty::Region<'tcx>) -> GenericArg<'tcx> {
         .                   GenericArgKind::Lifetime(r).pack()
   455,930 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> From<Ty<'tcx>> for GenericArg<'tcx> {
 5,026,210 ( 0.02%)      fn from(ty: Ty<'tcx>) -> GenericArg<'tcx> {
         .                   GenericArgKind::Type(ty).pack()
 5,026,210 ( 0.02%)      }
         .           }
         .           
         .           impl<'tcx> From<&'tcx ty::Const<'tcx>> for GenericArg<'tcx> {
       148 ( 0.00%)      fn from(c: &'tcx ty::Const<'tcx>) -> GenericArg<'tcx> {
         .                   GenericArgKind::Const(c).pack()
       148 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> GenericArg<'tcx> {
         .               #[inline]
         .               pub fn unpack(self) -> GenericArgKind<'tcx> {
         .                   let ptr = self.ptr.get();
         .                   unsafe {
46,571,051 ( 0.23%)              match ptr & TAG_MASK {
   421,179 ( 0.00%)                  REGION_TAG => GenericArgKind::Lifetime(&*((ptr & !TAG_MASK) as *const _)),
12,154,600 ( 0.06%)                  TYPE_TAG => GenericArgKind::Type(&*((ptr & !TAG_MASK) as *const _)),
     3,978 ( 0.00%)                  CONST_TAG => GenericArgKind::Const(&*((ptr & !TAG_MASK) as *const _)),
         .                           _ => intrinsics::unreachable(),
         .                       }
         .                   }
         .               }
         .           
         .               /// Unpack the `GenericArg` as a type when it is known certainly to be a type.
         .               /// This is true in cases where `Substs` is used in places where the kinds are known
         .               /// to be limited (e.g. in tuples, where the only parameters are type parameters).
         .               pub fn expect_ty(self) -> Ty<'tcx> {
         .                   match self.unpack() {
         .                       GenericArgKind::Type(ty) => ty,
         .                       _ => bug!("expected a type, but found another kind"),
         .                   }
   253,980 ( 0.00%)      }
         .           
         .               /// Unpack the `GenericArg` as a const when it is known certainly to be a const.
         .               pub fn expect_const(self) -> &'tcx ty::Const<'tcx> {
         .                   match self.unpack() {
         .                       GenericArgKind::Const(c) => c,
         .                       _ => bug!("expected a const, but found another kind"),
         .                   }
         .               }
-- line 140 ----------------------------------------
-- line 155 ----------------------------------------
         .           impl<'tcx> TypeFoldable<'tcx> for GenericArg<'tcx> {
         .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
         .                   self,
         .                   folder: &mut F,
         .               ) -> Result<Self, F::Error> {
         .                   match self.unpack() {
         .                       GenericArgKind::Lifetime(lt) => lt.try_fold_with(folder).map(Into::into),
         .                       GenericArgKind::Type(ty) => ty.try_fold_with(folder).map(Into::into),
         3 ( 0.00%)              GenericArgKind::Const(ct) => ct.try_fold_with(folder).map(Into::into),
         .                   }
         .               }
         .           
         .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
         .                   match self.unpack() {
         .                       GenericArgKind::Lifetime(lt) => lt.visit_with(visitor),
         .                       GenericArgKind::Type(ty) => ty.visit_with(visitor),
         .                       GenericArgKind::Const(ct) => ct.visit_with(visitor),
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for GenericArg<'tcx> {
         .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
    75,393 ( 0.00%)          self.unpack().encode(e)
         .               }
         .           }
         .           
         .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for GenericArg<'tcx> {
   747,775 ( 0.00%)      fn decode(d: &mut D) -> GenericArg<'tcx> {
   747,775 ( 0.00%)          GenericArgKind::decode(d).pack()
         .               }
         .           }
         .           
         .           /// A substitution mapping generic parameters to new values.
         .           pub type InternalSubsts<'tcx> = List<GenericArg<'tcx>>;
         .           
         .           pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;
         .           
         .           impl<'a, 'tcx> InternalSubsts<'tcx> {
         .               /// Interpret these substitutions as the substitutions of a closure type.
         .               /// Closure substitutions have a particular structure controlled by the
         .               /// compiler that encodes information like the signature and closure kind;
         .               /// see `ty::ClosureSubsts` struct for more comments.
    15,377 ( 0.00%)      pub fn as_closure(&'a self) -> ClosureSubsts<'a> {
         .                   ClosureSubsts { substs: self }
    15,377 ( 0.00%)      }
         .           
         .               /// Interpret these substitutions as the substitutions of a generator type.
         .               /// Generator substitutions have a particular structure controlled by the
         .               /// compiler that encodes information like the signature and generator kind;
         .               /// see `ty::GeneratorSubsts` struct for more comments.
         .               pub fn as_generator(&'tcx self) -> GeneratorSubsts<'tcx> {
         .                   GeneratorSubsts { substs: self }
         .               }
-- line 208 ----------------------------------------
-- line 211 ----------------------------------------
         .               /// Inline const substitutions have a particular structure controlled by the
         .               /// compiler that encodes information like the inferred type;
         .               /// see `ty::InlineConstSubsts` struct for more comments.
         .               pub fn as_inline_const(&'tcx self) -> InlineConstSubsts<'tcx> {
         .                   InlineConstSubsts { substs: self }
         .               }
         .           
         .               /// Creates an `InternalSubsts` that maps each generic parameter to itself.
    72,950 ( 0.00%)      pub fn identity_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {
    35,292 ( 0.00%)          Self::for_item(tcx, def_id, |param, _| tcx.mk_param_from_def(param))
    65,655 ( 0.00%)      }
         .           
         .               /// Creates an `InternalSubsts` for generic parameter definitions,
         .               /// by calling closures to obtain each kind.
         .               /// The closures get to observe the `InternalSubsts` as they're
         .               /// being built, which can be used to correctly
         .               /// substitute defaults of generic parameters.
   557,992 ( 0.00%)      pub fn for_item<F>(tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
         .               where
         .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
         .               {
         .                   let defs = tcx.generics_of(def_id);
         .                   let count = defs.count();
         .                   let mut substs = SmallVec::with_capacity(count);
   210,096 ( 0.00%)          Self::fill_item(&mut substs, tcx, defs, &mut mk_kind);
   118,754 ( 0.00%)          tcx.intern_substs(&substs)
   560,961 ( 0.00%)      }
         .           
         .               pub fn extend_to<F>(&self, tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
         .               where
         .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
         .               {
         .                   Self::for_item(tcx, def_id, |param, substs| {
         .                       self.get(param.index as usize).cloned().unwrap_or_else(|| mk_kind(param, substs))
         .                   })
         .               }
         .           
   823,122 ( 0.00%)      pub fn fill_item<F>(
         .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
         .                   tcx: TyCtxt<'tcx>,
         .                   defs: &ty::Generics,
         .                   mk_kind: &mut F,
         .               ) where
         .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
         .               {
   343,249 ( 0.00%)          if let Some(def_id) = defs.parent {
         .                       let parent_defs = tcx.generics_of(def_id);
    58,123 ( 0.00%)              Self::fill_item(substs, tcx, parent_defs, mk_kind);
         .                   }
         .                   Self::fill_single(substs, defs, mk_kind)
   651,808 ( 0.00%)      }
         .           
     2,504 ( 0.00%)      pub fn fill_single<F>(
         .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
         .                   defs: &ty::Generics,
         .                   mk_kind: &mut F,
         .               ) where
         .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
         .               {
         .                   substs.reserve(defs.params.len());
         .                   for param in &defs.params {
        32 ( 0.00%)              let kind = mk_kind(param, substs);
   567,499 ( 0.00%)              assert_eq!(param.index as usize, substs.len());
         .                       substs.push(kind);
         .                   }
     2,504 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn types(&'a self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'a {
         .                   self.iter()
         .                       .filter_map(|k| if let GenericArgKind::Type(ty) = k.unpack() { Some(ty) } else { None })
         .               }
         .           
         .               #[inline]
-- line 284 ----------------------------------------
-- line 301 ----------------------------------------
         .               ) -> impl DoubleEndedIterator<Item = GenericArgKind<'tcx>> + 'a {
         .                   self.iter().filter_map(|k| match k.unpack() {
         .                       GenericArgKind::Lifetime(_) => None,
         .                       generic => Some(generic),
         .                   })
         .               }
         .           
         .               #[inline]
       141 ( 0.00%)      pub fn type_at(&self, i: usize) -> Ty<'tcx> {
 1,165,338 ( 0.01%)          if let GenericArgKind::Type(ty) = self[i].unpack() {
         .                       ty
         .                   } else {
         .                       bug!("expected type for param #{} in {:?}", i, self);
         .                   }
        94 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn region_at(&self, i: usize) -> ty::Region<'tcx> {
         .                   if let GenericArgKind::Lifetime(lt) = self[i].unpack() {
         .                       lt
         .                   } else {
         .                       bug!("expected region for param #{} in {:?}", i, self);
         .                   }
-- line 323 ----------------------------------------
-- line 350 ----------------------------------------
         .               /// impl<U> X<U> for U { fn f<V>() {} }
         .               /// ```
         .               ///
         .               /// * If `self` is `[Self, S, T]`: the identity substs of `f` in the trait.
         .               /// * If `source_ancestor` is the def_id of the trait.
         .               /// * If `target_substs` is `[U]`, the substs for the impl.
         .               /// * Then we will return `[U, T]`, the subst for `f` in the impl that
         .               ///   are needed for it to match the trait.
    81,487 ( 0.00%)      pub fn rebase_onto(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   source_ancestor: DefId,
         .                   target_substs: SubstsRef<'tcx>,
         .               ) -> SubstsRef<'tcx> {
         .                   let defs = tcx.generics_of(source_ancestor);
    23,282 ( 0.00%)          tcx.mk_substs(target_substs.iter().chain(self.iter().skip(defs.params.len())))
    93,128 ( 0.00%)      }
         .           
         .               pub fn truncate_to(&self, tcx: TyCtxt<'tcx>, generics: &ty::Generics) -> SubstsRef<'tcx> {
         .                   tcx.mk_substs(self.iter().take(generics.count()))
         .               }
         .           }
         .           
         .           impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {
 1,021,993 ( 0.00%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
         .                   self,
         .                   folder: &mut F,
         .               ) -> Result<Self, F::Error> {
         .                   // This code is hot enough that it's worth specializing for the most
         .                   // common length lists, to avoid the overhead of `SmallVec` creation.
         .                   // The match arms are in order of frequency. The 1, 2, and 0 cases are
         .                   // typically hit in 90--99.99% of cases. When folding doesn't change
         .                   // the substs, it's faster to reuse the existing substs rather than
         .                   // calling `intern_substs`.
17,200,338 ( 0.08%)          match self.len() {
         .                       1 => {
 2,882,761 ( 0.01%)                  let param0 = self[0].try_fold_with(folder)?;
 8,067,523 ( 0.04%)                  if param0 == self[0] { Ok(self) } else { Ok(folder.tcx().intern_substs(&[param0])) }
         .                       }
         .                       2 => {
 1,308,327 ( 0.01%)                  let param0 = self[0].try_fold_with(folder)?;
 3,242,935 ( 0.02%)                  let param1 = self[1].try_fold_with(folder)?;
 3,798,134 ( 0.02%)                  if param0 == self[0] && param1 == self[1] {
         .                               Ok(self)
         .                           } else {
 1,795,262 ( 0.01%)                      Ok(folder.tcx().intern_substs(&[param0, param1]))
         .                           }
         .                       }
         .                       0 => Ok(self),
         .                       _ => {
         .                           let params: SmallVec<[_; 8]> =
   595,730 ( 0.00%)                      self.iter().map(|k| k.try_fold_with(folder)).collect::<Result<_, _>>()?;
    35,060 ( 0.00%)                  if params[..] == self[..] {
         .                               Ok(self)
         .                           } else {
    72,715 ( 0.00%)                      Ok(folder.tcx().intern_substs(&params))
         .                           }
         .                       }
         .                   }
 1,331,573 ( 0.01%)      }
         .           
         .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
 1,543,810 ( 0.01%)          self.iter().try_for_each(|t| t.visit_with(visitor))
         .               }
         .           }
         .           
         .           ///////////////////////////////////////////////////////////////////////////
         .           // Public trait `Subst`
         .           //
         .           // Just call `foo.subst(tcx, substs)` to perform a substitution across
         .           // `foo`. Or use `foo.subst_spanned(tcx, substs, Some(span))` when
-- line 420 ----------------------------------------
-- line 435 ----------------------------------------
         .           
         .           impl<'tcx, T: TypeFoldable<'tcx>> Subst<'tcx> for T {
         .               fn subst_spanned(
         .                   self,
         .                   tcx: TyCtxt<'tcx>,
         .                   substs: &[GenericArg<'tcx>],
         .                   span: Option<Span>,
         .               ) -> T {
 5,342,887 ( 0.03%)          let mut folder = SubstFolder { tcx, substs, span, binders_passed: 0 };
         .                   self.fold_with(&mut folder)
         .               }
         .           }
         .           
         .           ///////////////////////////////////////////////////////////////////////////
         .           // The actual substitution engine itself is a type folder.
         .           
         .           struct SubstFolder<'a, 'tcx> {
-- line 451 ----------------------------------------
-- line 456 ----------------------------------------
         .               span: Option<Span>,
         .           
         .               /// Number of region binders we have passed through while doing the substitution
         .               binders_passed: u32,
         .           }
         .           
         .           impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
 1,036,368 ( 0.01%)          self.tcx
         .               }
         .           
         .               fn fold_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: ty::Binder<'tcx, T>,
         .               ) -> ty::Binder<'tcx, T> {
   954,028 ( 0.00%)          self.binders_passed += 1;
   290,983 ( 0.00%)          let t = t.super_fold_with(self);
   954,028 ( 0.00%)          self.binders_passed -= 1;
         .                   t
         .               }
         .           
 1,082,628 ( 0.01%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
         .                   // Note: This routine only handles regions that are bound on
         .                   // type declarations and other outer declarations, not those
         .                   // bound in *fn types*. Region substitution of the bound
         .                   // regions that appear in a function signature is done using
         .                   // the specialized routine `ty::replace_late_regions()`.
   360,876 ( 0.00%)          match *r {
   169,062 ( 0.00%)              ty::ReEarlyBound(data) => {
   169,062 ( 0.00%)                  let rk = self.substs.get(data.index as usize).map(|k| k.unpack());
         .                           match rk {
    84,531 ( 0.00%)                      Some(GenericArgKind::Lifetime(lt)) => self.shift_region_through_binders(lt),
         .                               _ => {
         .                                   let span = self.span.unwrap_or(DUMMY_SP);
         .                                   let msg = format!(
         .                                       "Region parameter out of range \
         .                                        when substituting in region {} (index={})",
         .                                       data.name, data.index
         .                                   );
         .                                   span_bug!(span, "{}", msg);
         .                               }
         .                           }
         .                       }
         .                       _ => r,
         .                   }
 1,263,066 ( 0.01%)      }
         .           
 5,232,495 ( 0.03%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
 1,744,165 ( 0.01%)          if !t.needs_subst() {
         .                       return t;
         .                   }
         .           
 2,689,016 ( 0.01%)          match *t.kind() {
 4,073,910 ( 0.02%)              ty::Param(p) => self.ty_for_param(p, t),
 3,178,356 ( 0.02%)              _ => t.super_fold_with(self),
         .                   }
 6,072,195 ( 0.03%)      }
         .           
   343,581 ( 0.00%)      fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    99,091 ( 0.00%)          if let ty::ConstKind::Param(p) = c.val {
         .                       self.const_for_param(p, c)
         .                   } else {
   440,082 ( 0.00%)              c.super_fold_with(self)
         .                   }
     1,480 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {
         .                   c.super_fold_with(self)
         .               }
         .           }
         .           
         .           impl<'a, 'tcx> SubstFolder<'a, 'tcx> {
         .               fn ty_for_param(&self, p: ty::ParamTy, source_ty: Ty<'tcx>) -> Ty<'tcx> {
         .                   // Look up the type in the substitutions. It really should be in there.
 1,629,564 ( 0.01%)          let opt_ty = self.substs.get(p.index as usize).map(|k| k.unpack());
         .                   let ty = match opt_ty {
         .                       Some(GenericArgKind::Type(ty)) => ty,
         .                       Some(kind) => {
         .                           let span = self.span.unwrap_or(DUMMY_SP);
         .                           span_bug!(
         .                               span,
         .                               "expected type for `{:?}` ({:?}/{}) but found {:?} \
         .                                when substituting, substs={:?}",
-- line 539 ----------------------------------------
-- line 562 ----------------------------------------
         .               }
         .           
         .               fn const_for_param(
         .                   &self,
         .                   p: ParamConst,
         .                   source_ct: &'tcx ty::Const<'tcx>,
         .               ) -> &'tcx ty::Const<'tcx> {
         .                   // Look up the const in the substitutions. It really should be in there.
       370 ( 0.00%)          let opt_ct = self.substs.get(p.index as usize).map(|k| k.unpack());
         .                   let ct = match opt_ct {
         .                       Some(GenericArgKind::Const(ct)) => ct,
         .                       Some(kind) => {
         .                           let span = self.span.unwrap_or(DUMMY_SP);
         .                           span_bug!(
         .                               span,
         .                               "expected const for `{:?}` ({:?}/{}) but found {:?} \
         .                                when substituting substs={:?}",
-- line 578 ----------------------------------------
-- line 645 ----------------------------------------
         .               fn shift_vars_through_binders<T: TypeFoldable<'tcx>>(&self, val: T) -> T {
         .                   debug!(
         .                       "shift_vars(val={:?}, binders_passed={:?}, has_escaping_bound_vars={:?})",
         .                       val,
         .                       self.binders_passed,
         .                       val.has_escaping_bound_vars()
         .                   );
         .           
 2,813,637 ( 0.01%)          if self.binders_passed == 0 || !val.has_escaping_bound_vars() {
         .                       return val;
         .                   }
         .           
         .                   let result = ty::fold::shift_vars(self.tcx(), val, self.binders_passed);
         .                   debug!("shift_vars: shifted result = {:?}", result);
         .           
         .                   result
         .               }
         .           
         .               fn shift_region_through_binders(&self, region: ty::Region<'tcx>) -> ty::Region<'tcx> {
   204,850 ( 0.00%)          if self.binders_passed == 0 || !region.has_escaping_bound_vars() {
         .                       return region;
         .                   }
         .                   ty::fold::shift_region(self.tcx, region, self.binders_passed)
         .               }
         .           }
         .           
         .           /// Stores the user-given substs to reach some fully qualified path
         .           /// (e.g., `<T>::Item` or `<T as Trait>::Item`).
         .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
    24,482 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
         .           pub struct UserSubsts<'tcx> {
         .               /// The substitutions for the item as given by the user.
         .               pub substs: SubstsRef<'tcx>,
         .           
         .               /// The self type, in the case of a `<T>::Item` path (when applied
         .               /// to an inherent impl). See `UserSelfTy` below.
     9,287 ( 0.00%)      pub user_self_ty: Option<UserSelfTy<'tcx>>,
         .           }
         .           
         .           /// Specifies the user-given self type. In the case of a path that
         .           /// refers to a member in an inherent impl, this self type is
         .           /// sometimes needed to constrain the type parameters on the impl. For
         .           /// example, in this code:
         .           ///
         .           /// ```
-- line 689 ----------------------------------------
-- line 696 ----------------------------------------
         .           /// self type `Foo<u32>`. Then we can instantiate the parameters of
         .           /// the impl (with the substs from `UserSubsts`) and apply those to
         .           /// the self type, giving `Foo<?A>`. Finally, we unify that with
         .           /// the self type here, which contains `?A` to be `&'static u32`
         .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
         .           #[derive(HashStable, TypeFoldable, Lift)]
         .           pub struct UserSelfTy<'tcx> {
         .               pub impl_def_id: DefId,
     4,143 ( 0.00%)      pub self_ty: Ty<'tcx>,
         .           }

21,190,246 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs
--------------------------------------------------------------------------------
Ir                 

-- line 56 ----------------------------------------
        .           #[derive(Copy, Clone, Debug)]
        .           pub enum RelationDir {
        .               SubtypeOf,
        .               SupertypeOf,
        .               EqTo,
        .           }
        .           
        .           impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {
1,344,429 ( 0.01%)      pub fn super_combine_tys<R>(
        .                   &self,
        .                   relation: &mut R,
        .                   a: Ty<'tcx>,
        .                   b: Ty<'tcx>,
        .               ) -> RelateResult<'tcx, Ty<'tcx>>
        .               where
        .                   R: TypeRelation<'tcx>,
        .               {
        .                   let a_is_expected = relation.a_is_expected();
        .           
1,299,507 ( 0.01%)          match (a.kind(), b.kind()) {
        .                       // Relate integral variables to other types
        4 ( 0.00%)              (&ty::Infer(ty::IntVar(a_id)), &ty::Infer(ty::IntVar(b_id))) => {
       22 ( 0.00%)                  self.inner
        .                               .borrow_mut()
        .                               .int_unification_table()
        .                               .unify_var_var(a_id, b_id)
        .                               .map_err(|e| int_unification_error(a_is_expected, e))?;
        .                           Ok(a)
        .                       }
       58 ( 0.00%)              (&ty::Infer(ty::IntVar(v_id)), &ty::Int(v)) => {
      116 ( 0.00%)                  self.unify_integral_variable(a_is_expected, v_id, IntType(v))
        .                       }
        .                       (&ty::Int(v), &ty::Infer(ty::IntVar(v_id))) => {
        .                           self.unify_integral_variable(!a_is_expected, v_id, IntType(v))
        .                       }
       99 ( 0.00%)              (&ty::Infer(ty::IntVar(v_id)), &ty::Uint(v)) => {
      198 ( 0.00%)                  self.unify_integral_variable(a_is_expected, v_id, UintType(v))
        .                       }
        5 ( 0.00%)              (&ty::Uint(v), &ty::Infer(ty::IntVar(v_id))) => {
       10 ( 0.00%)                  self.unify_integral_variable(!a_is_expected, v_id, UintType(v))
        .                       }
        .           
        .                       // Relate floating-point variables to other types
        .                       (&ty::Infer(ty::FloatVar(a_id)), &ty::Infer(ty::FloatVar(b_id))) => {
        .                           self.inner
        .                               .borrow_mut()
        .                               .float_unification_table()
        .                               .unify_var_var(a_id, b_id)
        .                               .map_err(|e| float_unification_error(relation.a_is_expected(), e))?;
        .                           Ok(a)
        .                       }
        4 ( 0.00%)              (&ty::Infer(ty::FloatVar(v_id)), &ty::Float(v)) => {
        4 ( 0.00%)                  self.unify_float_variable(a_is_expected, v_id, v)
        .                       }
        .                       (&ty::Float(v), &ty::Infer(ty::FloatVar(v_id))) => {
        .                           self.unify_float_variable(!a_is_expected, v_id, v)
        .                       }
        .           
        .                       // All other cases of inference are errors
        .                       (&ty::Infer(_), _) | (_, &ty::Infer(_)) => {
   10,455 ( 0.00%)                  Err(TypeError::Sorts(ty::relate::expected_found(relation, a, b)))
        .                       }
        .           
1,252,962 ( 0.01%)              _ => ty::relate::super_relate_tys(relation, a, b),
        .                   }
1,344,429 ( 0.01%)      }
        .           
    6,180 ( 0.00%)      pub fn super_combine_consts<R>(
        .                   &self,
        .                   relation: &mut R,
        .                   a: &'tcx ty::Const<'tcx>,
        .                   b: &'tcx ty::Const<'tcx>,
        .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>>
        .               where
        .                   R: ConstEquateRelation<'tcx>,
        .               {
        .                   debug!("{}.consts({:?}, {:?})", relation.tag(), a, b);
   15,530 ( 0.00%)          if a == b {
        .                       return Ok(a);
        .                   }
        .           
    1,410 ( 0.00%)          let a = replace_if_possible(&mut self.inner.borrow_mut().const_unification_table(), a);
    1,410 ( 0.00%)          let b = replace_if_possible(&mut self.inner.borrow_mut().const_unification_table(), b);
        .           
        .                   let a_is_expected = relation.a_is_expected();
        .           
    6,500 ( 0.00%)          match (a.val, b.val) {
        .                       (
        .                           ty::ConstKind::Infer(InferConst::Var(a_vid)),
        .                           ty::ConstKind::Infer(InferConst::Var(b_vid)),
        .                       ) => {
        .                           self.inner
        .                               .borrow_mut()
        .                               .const_unification_table()
        .                               .unify_var_var(a_vid, b_vid)
-- line 150 ----------------------------------------
-- line 158 ----------------------------------------
        .                           bug!("tried to combine ConstKind::Infer/ConstKind::Infer(InferConst::Var)")
        .                       }
        .           
        .                       (ty::ConstKind::Infer(InferConst::Var(vid)), _) => {
        .                           return self.unify_const_variable(relation.param_env(), vid, b, a_is_expected);
        .                       }
        .           
        .                       (_, ty::ConstKind::Infer(InferConst::Var(vid))) => {
      100 ( 0.00%)                  return self.unify_const_variable(relation.param_env(), vid, a, !a_is_expected);
        .                       }
        .                       (ty::ConstKind::Unevaluated(..), _) if self.tcx.lazy_normalization() => {
        .                           // FIXME(#59490): Need to remove the leak check to accommodate
        .                           // escaping bound variables here.
        .                           if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {
        .                               relation.const_equate_obligation(a, b);
        .                           }
        .                           return Ok(b);
-- line 174 ----------------------------------------
-- line 179 ----------------------------------------
        .                           if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {
        .                               relation.const_equate_obligation(a, b);
        .                           }
        .                           return Ok(a);
        .                       }
        .                       _ => {}
        .                   }
        .           
    2,250 ( 0.00%)          ty::relate::super_relate_consts(relation, a, b)
    4,635 ( 0.00%)      }
        .           
        .               /// Unifies the const variable `target_vid` with the given constant.
        .               ///
        .               /// This also tests if the given const `ct` contains an inference variable which was previously
        .               /// unioned with `target_vid`. If this is the case, inferring `target_vid` to `ct`
        .               /// would result in an infinite type as we continuously replace an inference variable
        .               /// in `ct` with `ct` itself.
        .               ///
-- line 196 ----------------------------------------
-- line 216 ----------------------------------------
        .               /// of `fn bind` (meaning that its substs contain `N`).
        .               ///
        .               /// `bind(arr)` now infers that the type of `arr` must be `[u8; N]`.
        .               /// The assignment `arr = bind(arr)` now tries to equate `N` with `3 + 4`.
        .               ///
        .               /// As `3 + 4` contains `N` in its substs, this must not succeed.
        .               ///
        .               /// See `src/test/ui/const-generics/occurs-check/` for more examples where this is relevant.
      380 ( 0.00%)      #[instrument(level = "debug", skip(self))]
        .               fn unify_const_variable(
        .                   &self,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   target_vid: ty::ConstVid<'tcx>,
        .                   ct: &'tcx ty::Const<'tcx>,
        .                   vid_is_expected: bool,
        .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
        .                   let (for_universe, span) = {
        .                       let mut inner = self.inner.borrow_mut();
       80 ( 0.00%)              let variable_table = &mut inner.const_unification_table();
       40 ( 0.00%)              let var_value = variable_table.probe_value(target_vid);
       40 ( 0.00%)              match var_value.val {
        .                           ConstVariableValue::Known { value } => {
        .                               bug!("instantiating {:?} which has a known value {:?}", target_vid, value)
        .                           }
        .                           ConstVariableValue::Unknown { universe } => (universe, var_value.origin.span),
        .                       }
        .                   };
      160 ( 0.00%)          let value = ConstInferUnifier { infcx: self, span, param_env, for_universe, target_vid }
        .                       .relate(ct, ct)?;
        .           
       80 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .const_unification_table()
        .                       .unify_var_value(
        .                           target_vid,
      120 ( 0.00%)                  ConstVarValue {
        .                               origin: ConstVariableOrigin {
        .                                   kind: ConstVariableOriginKind::ConstInference,
        .                                   span: DUMMY_SP,
        .                               },
        .                               val: ConstVariableValue::Known { value },
        .                           },
        .                       )
        .                       .map(|()| value)
        .                       .map_err(|e| const_unification_error(vid_is_expected, e))
        .               }
        .           
      972 ( 0.00%)      fn unify_integral_variable(
        .                   &self,
        .                   vid_is_expected: bool,
        .                   vid: ty::IntVid,
        .                   val: ty::IntVarValue,
        .               ) -> RelateResult<'tcx, Ty<'tcx>> {
    1,296 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .int_unification_table()
        .                       .unify_var_value(vid, Some(val))
        .                       .map_err(|e| int_unification_error(vid_is_expected, e))?;
      324 ( 0.00%)          match val {
       58 ( 0.00%)              IntType(v) => Ok(self.tcx.mk_mach_int(v)),
      370 ( 0.00%)              UintType(v) => Ok(self.tcx.mk_mach_uint(v)),
        .                   }
    1,296 ( 0.00%)      }
        .           
       10 ( 0.00%)      fn unify_float_variable(
        .                   &self,
        .                   vid_is_expected: bool,
        .                   vid: ty::FloatVid,
        .                   val: ty::FloatTy,
        .               ) -> RelateResult<'tcx, Ty<'tcx>> {
       14 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .float_unification_table()
        .                       .unify_var_value(vid, Some(ty::FloatVarValue(val)))
        .                       .map_err(|e| float_unification_error(vid_is_expected, e))?;
       12 ( 0.00%)          Ok(self.tcx.mk_mach_float(val))
       14 ( 0.00%)      }
        .           }
        .           
        .           impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {
        .               pub fn tcx(&self) -> TyCtxt<'tcx> {
  194,588 ( 0.00%)          self.infcx.tcx
        .               }
        .           
        .               pub fn equate<'a>(&'a mut self, a_is_expected: bool) -> Equate<'a, 'infcx, 'tcx> {
        .                   Equate::new(self, a_is_expected)
        .               }
        .           
  449,006 ( 0.00%)      pub fn sub<'a>(&'a mut self, a_is_expected: bool) -> Sub<'a, 'infcx, 'tcx> {
        .                   Sub::new(self, a_is_expected)
  224,503 ( 0.00%)      }
        .           
        .               pub fn lub<'a>(&'a mut self, a_is_expected: bool) -> Lub<'a, 'infcx, 'tcx> {
        .                   Lub::new(self, a_is_expected)
        .               }
        .           
  384,696 ( 0.00%)      pub fn glb<'a>(&'a mut self, a_is_expected: bool) -> Glb<'a, 'infcx, 'tcx> {
        .                   Glb::new(self, a_is_expected)
  192,348 ( 0.00%)      }
        .           
        .               /// Here, `dir` is either `EqTo`, `SubtypeOf`, or `SupertypeOf`.
        .               /// The idea is that we should ensure that the type `a_ty` is equal
        .               /// to, a subtype of, or a supertype of (respectively) the type
        .               /// to which `b_vid` is bound.
        .               ///
        .               /// Since `b_vid` has not yet been instantiated with a type, we
        .               /// will first instantiate `b_vid` with a *generalized* version
        .               /// of `a_ty`. Generalization introduces other inference
        .               /// variables wherever subtyping could occur.
1,060,653 ( 0.01%)      pub fn instantiate(
        .                   &mut self,
        .                   a_ty: Ty<'tcx>,
        .                   dir: RelationDir,
        .                   b_vid: ty::TyVid,
        .                   a_is_expected: bool,
        .               ) -> RelateResult<'tcx, ()> {
        .                   use self::RelationDir::*;
        .           
-- line 333 ----------------------------------------
-- line 342 ----------------------------------------
        .                   // - `a_ty == &'x ?1`, where `'x` is some free region and `?1` is an
        .                   //   inference variable,
        .                   // - and `dir` == `SubtypeOf`.
        .                   //
        .                   // Then the generalized form `b_ty` would be `&'?2 ?3`, where
        .                   // `'?2` and `?3` are fresh region/type inference
        .                   // variables. (Down below, we will relate `a_ty <: b_ty`,
        .                   // adding constraints like `'x: '?2` and `?1 <: ?3`.)
   96,422 ( 0.00%)          let Generalization { ty: b_ty, needs_wf } = self.generalize(a_ty, b_vid, dir)?;
        .                   debug!(
        .                       "instantiate(a_ty={:?}, dir={:?}, b_vid={:?}, generalized b_ty={:?})",
        .                       a_ty, dir, b_vid, b_ty
        .                   );
  674,954 ( 0.00%)          self.infcx.inner.borrow_mut().type_variables().instantiate(b_vid, b_ty);
        .           
   96,422 ( 0.00%)          if needs_wf {
        .                       self.obligations.push(Obligation::new(
        .                           self.trace.cause.clone(),
       17 ( 0.00%)                  self.param_env,
       51 ( 0.00%)                  ty::Binder::dummy(ty::PredicateKind::WellFormed(b_ty.into()))
       34 ( 0.00%)                      .to_predicate(self.infcx.tcx),
        .                       ));
        .                   }
        .           
        .                   // Finally, relate `b_ty` to `a_ty`, as described in previous comment.
        .                   //
        .                   // FIXME(#16847): This code is non-ideal because all these subtype
        .                   // relations wind up attributed to the same spans. We need
        .                   // to associate causes/spans with each of the relations in
        .                   // the stack to get this right.
  366,066 ( 0.00%)          match dir {
  363,280 ( 0.00%)              EqTo => self.equate(a_is_expected).relate(a_ty, b_ty),
   49,055 ( 0.00%)              SubtypeOf => self.sub(a_is_expected).relate(a_ty, b_ty),
   27,910 ( 0.00%)              SupertypeOf => self.sub(a_is_expected).relate_with_variance(
        .                           ty::Contravariant,
        .                           ty::VarianceDiagInfo::default(),
        .                           a_ty,
        .                           b_ty,
        .                       ),
        .                   }?;
        .           
   96,422 ( 0.00%)          Ok(())
  771,384 ( 0.00%)      }
        .           
        .               /// Attempts to generalize `ty` for the type variable `for_vid`.
        .               /// This checks for cycle -- that is, whether the type `ty`
        .               /// references `for_vid`. The `dir` is the "direction" for which we
        .               /// a performing the generalization (i.e., are we producing a type
        .               /// that can be used as a supertype etc).
        .               ///
        .               /// Preconditions:
-- line 392 ----------------------------------------
-- line 401 ----------------------------------------
        .                   debug!("generalize(ty={:?}, for_vid={:?}, dir={:?}", ty, for_vid, dir);
        .                   // Determine the ambient variance within which `ty` appears.
        .                   // The surrounding equation is:
        .                   //
        .                   //     ty [op] ty2
        .                   //
        .                   // where `op` is either `==`, `<:`, or `:>`. This maps quite
        .                   // naturally.
  385,692 ( 0.00%)          let ambient_variance = match dir {
        .                       RelationDir::EqTo => ty::Invariant,
        .                       RelationDir::SubtypeOf => ty::Covariant,
        .                       RelationDir::SupertypeOf => ty::Contravariant,
        .                   };
        .           
        .                   debug!("generalize: ambient_variance = {:?}", ambient_variance);
        .           
  964,230 ( 0.00%)          let for_universe = match self.infcx.inner.borrow_mut().type_variables().probe(for_vid) {
        .                       v @ TypeVariableValue::Known { .. } => {
        .                           bug!("instantiating {:?} which has a known value {:?}", for_vid, v,)
        .                       }
        .                       TypeVariableValue::Unknown { universe } => universe,
        .                   };
        .           
        .                   debug!("generalize: for_universe = {:?}", for_universe);
        .                   debug!("generalize: trace = {:?}", self.trace);
        .           
  964,230 ( 0.00%)          let mut generalize = Generalizer {
        .                       infcx: self.infcx,
        .                       cause: &self.trace.cause,
        .                       for_vid_sub_root: self.infcx.inner.borrow_mut().type_variables().sub_root_var(for_vid),
        .                       for_universe,
        .                       ambient_variance,
        .                       needs_wf: false,
        .                       root_ty: ty,
   96,423 ( 0.00%)              param_env: self.param_env,
        .                       cache: SsoHashMap::new(),
        .                   };
        .           
  192,846 ( 0.00%)          let ty = match generalize.relate(ty, ty) {
   96,422 ( 0.00%)              Ok(ty) => ty,
        .                       Err(e) => {
        .                           debug!("generalize: failure {:?}", e);
        6 ( 0.00%)                  return Err(e);
        .                       }
        .                   };
   96,422 ( 0.00%)          let needs_wf = generalize.needs_wf;
        .                   debug!("generalize: success {{ {:?}, {:?} }}", ty, needs_wf);
        .                   Ok(Generalization { ty, needs_wf })
        .               }
        .           
        .               pub fn add_const_equate_obligation(
        .                   &mut self,
        .                   a_is_expected: bool,
        .                   a: &'tcx ty::Const<'tcx>,
-- line 454 ----------------------------------------
-- line 528 ----------------------------------------
        .               /// will force the calling code to check that `WF(Foo<?C, ?D>)`
        .               /// holds, which in turn implies that `?C::Item == ?D`. So once
        .               /// `?C` is constrained, that should suffice to restrict `?D`.
        .               needs_wf: bool,
        .           }
        .           
        .           impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
  640,292 ( 0.00%)          self.infcx.tcx
        .               }
        .               fn param_env(&self) -> ty::ParamEnv<'tcx> {
      872 ( 0.00%)          self.param_env
        .               }
        .           
        .               fn tag(&self) -> &'static str {
        .                   "Generalizer"
        .               }
        .           
        .               fn a_is_expected(&self) -> bool {
        .                   true
        .               }
        .           
  370,920 ( 0.00%)      fn binders<T>(
        .                   &mut self,
        .                   a: ty::Binder<'tcx, T>,
        .                   b: ty::Binder<'tcx, T>,
        .               ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>
        .               where
        .                   T: Relate<'tcx>,
        .               {
  375,587 ( 0.00%)          Ok(a.rebind(self.relate(a.skip_binder(), b.skip_binder())?))
  373,347 ( 0.00%)      }
        .           
2,110,559 ( 0.01%)      fn relate_item_substs(
        .                   &mut self,
        .                   item_def_id: DefId,
        .                   a_subst: SubstsRef<'tcx>,
        .                   b_subst: SubstsRef<'tcx>,
        .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
  191,869 ( 0.00%)          if self.ambient_variance == ty::Variance::Invariant {
        .                       // Avoid fetching the variance if we are in an invariant
        .                       // context; no need, and it can induce dependency cycles
        .                       // (e.g., #41849).
  168,849 ( 0.00%)              relate::relate_substs(self, None, a_subst, b_subst)
        .                   } else {
        .                       let tcx = self.tcx();
        .                       let opt_variances = tcx.variances_of(item_def_id);
  115,100 ( 0.00%)              relate::relate_substs(self, Some((item_def_id, &opt_variances)), a_subst, b_subst)
        .                   }
1,726,821 ( 0.01%)      }
        .           
  180,891 ( 0.00%)      fn relate_with_variance<T: Relate<'tcx>>(
        .                   &mut self,
        .                   variance: ty::Variance,
        .                   _info: ty::VarianceDiagInfo<'tcx>,
        .                   a: T,
        .                   b: T,
        .               ) -> RelateResult<'tcx, T> {
   28,485 ( 0.00%)          let old_ambient_variance = self.ambient_variance;
2,048,845 ( 0.01%)          self.ambient_variance = self.ambient_variance.xform(variance);
        .           
        .                   let result = self.relate(a, b);
  392,381 ( 0.00%)          self.ambient_variance = old_ambient_variance;
        .                   result
  140,693 ( 0.00%)      }
        .           
4,067,586 ( 0.02%)      fn tys(&mut self, t: Ty<'tcx>, t2: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {
  451,954 ( 0.00%)          assert_eq!(t, t2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==
        .           
2,711,724 ( 0.01%)          if let Some(result) = self.cache.get(&t) {
  332,092 ( 0.00%)              return result.clone();
        .                   }
        .                   debug!("generalize: t={:?}", t);
        .           
        .                   // Check to see whether the type we are generalizing references
        .                   // any other type variable related to `vid` via
        .                   // subtyping. This is basically our "occurs check", preventing
        .                   // us from creating infinitely sized types.
1,155,147 ( 0.01%)          let result = match *t.kind() {
    8,031 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
    8,031 ( 0.00%)                  let vid = self.infcx.inner.borrow_mut().type_variables().root_var(vid);
    8,031 ( 0.00%)                  let sub_vid = self.infcx.inner.borrow_mut().type_variables().sub_root_var(vid);
    8,031 ( 0.00%)                  if sub_vid == self.for_vid_sub_root {
        .                               // If sub-roots are equal, then `for_vid` and
        .                               // `vid` are related via subtyping.
        5 ( 0.00%)                      Err(TypeError::CyclicTy(self.root_ty))
        .                           } else {
   48,180 ( 0.00%)                      let probe = self.infcx.inner.borrow_mut().type_variables().probe(vid);
   16,060 ( 0.00%)                      match probe {
        .                                   TypeVariableValue::Known { value: u } => {
        .                                       debug!("generalize: known value {:?}", u);
        .                                       self.relate(u, u)
        .                                   }
        .                                   TypeVariableValue::Unknown { universe } => {
   37,440 ( 0.00%)                              match self.ambient_variance {
        .                                           // Invariant: no need to make a fresh type variable.
        .                                           ty::Invariant => {
   30,540 ( 0.00%)                                      if self.for_universe.can_name(universe) {
   23,808 ( 0.00%)                                          return Ok(t);
        .                                               }
        .                                           }
        .           
        .                                           // Bivariant: make a fresh var, but we
        .                                           // may need a WF predicate. See
        .                                           // comment on `needs_wf` field for
        .                                           // more info.
       27 ( 0.00%)                                  ty::Bivariant => self.needs_wf = true,
        .           
        .                                           // Co/contravariant: this will be
        .                                           // sufficiently constrained later on.
        .                                           ty::Covariant | ty::Contravariant => (),
        .                                       }
        .           
        .                                       let origin =
   13,824 ( 0.00%)                                  *self.infcx.inner.borrow_mut().type_variables().var_origin(vid);
   10,752 ( 0.00%)                              let new_var_id = self
        .                                           .infcx
        .                                           .inner
        .                                           .borrow_mut()
        .                                           .type_variables()
   10,752 ( 0.00%)                                  .new_var(self.for_universe, origin);
        .                                       let u = self.tcx().mk_ty_var(new_var_id);
        .           
        .                                       // Record that we replaced `vid` with `new_var_id` as part of a generalization
        .                                       // operation. This is needed to detect cyclic types. To see why, see the
        .                                       // docs in the `type_variables` module.
    7,680 ( 0.00%)                              self.infcx.inner.borrow_mut().type_variables().sub(vid, new_var_id);
        .                                       debug!("generalize: replacing original vid={:?} with new={:?}", vid, u);
    3,072 ( 0.00%)                              Ok(u)
        .                                   }
        .                               }
        .                           }
        .                       }
        .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_)) => {
        .                           // No matter what mode we are in,
        .                           // integer/floating-point types must be equal to be
        .                           // relatable.
       42 ( 0.00%)                  Ok(t)
        .                       }
1,082,574 ( 0.01%)              _ => relate::super_relate_tys(self, t, t),
        .                   };
        .           
3,629,790 ( 0.02%)          self.cache.insert(t, result.clone());
2,177,874 ( 0.01%)          return result;
4,067,586 ( 0.02%)      }
        .           
  427,096 ( 0.00%)      fn regions(
        .                   &mut self,
        .                   r: ty::Region<'tcx>,
        .                   r2: ty::Region<'tcx>,
        .               ) -> RelateResult<'tcx, ty::Region<'tcx>> {
   34,406 ( 0.00%)          assert_eq!(r, r2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==
        .           
        .                   debug!("generalize: regions r={:?}", r);
        .           
   68,812 ( 0.00%)          match *r {
        .                       // Never make variables for regions bound within the type itself,
        .                       // nor for erased regions.
        .                       ty::ReLateBound(..) | ty::ReErased => {
        .                           return Ok(r);
        .                       }
        .           
        .                       ty::RePlaceholder(..)
        .                       | ty::ReVar(..)
-- line 691 ----------------------------------------
-- line 697 ----------------------------------------
        .                       }
        .                   }
        .           
        .                   // If we are in an invariant context, we can re-use the region
        .                   // as is, unless it happens to be in some universe that we
        .                   // can't name. (In the case of a region *variable*, we could
        .                   // use it if we promoted it into our universe, but we don't
        .                   // bother.)
   63,722 ( 0.00%)          if let ty::Invariant = self.ambient_variance {
   67,389 ( 0.00%)              let r_universe = self.infcx.universe_of_region(r);
  157,152 ( 0.00%)              if self.for_universe.can_name(r_universe) {
        .                           return Ok(r);
        .                       }
        .                   }
        .           
        .                   // FIXME: This is non-ideal because we don't give a
        .                   // very descriptive origin for this region variable.
   94,781 ( 0.00%)          Ok(self.infcx.next_region_var_in_universe(MiscVariable(self.cause.span), self.for_universe))
  427,096 ( 0.00%)      }
        .           
    8,208 ( 0.00%)      fn consts(
        .                   &mut self,
        .                   c: &'tcx ty::Const<'tcx>,
        .                   c2: &'tcx ty::Const<'tcx>,
        .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
    2,616 ( 0.00%)          assert_eq!(c, c2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==
        .           
        .                   match c.val {
        .                       ty::ConstKind::Infer(InferConst::Var(vid)) => {
       40 ( 0.00%)                  let mut inner = self.infcx.inner.borrow_mut();
      160 ( 0.00%)                  let variable_table = &mut inner.const_unification_table();
       40 ( 0.00%)                  let var_value = variable_table.probe_value(vid);
       80 ( 0.00%)                  match var_value.val {
        .                               ConstVariableValue::Known { value: u } => {
        .                                   drop(inner);
        .                                   self.relate(u, u)
        .                               }
       40 ( 0.00%)                      ConstVariableValue::Unknown { universe } => {
      200 ( 0.00%)                          if self.for_universe.can_name(universe) {
        .                                       Ok(c)
        .                                   } else {
        .                                       let new_var_id = variable_table.new_key(ConstVarValue {
        .                                           origin: var_value.origin,
        .                                           val: ConstVariableValue::Unknown { universe: self.for_universe },
        .                                       });
        .                                       Ok(self.tcx().mk_const_var(new_var_id, c.ty))
        .                                   }
-- line 743 ----------------------------------------
-- line 754 ----------------------------------------
        .                               substs,
        .                               substs,
        .                           )?;
        .                           Ok(self.tcx().mk_const(ty::Const {
        .                               ty: c.ty,
        .                               val: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),
        .                           }))
        .                       }
    4,360 ( 0.00%)              _ => relate::super_relate_consts(self, c, c),
        .                   }
    8,208 ( 0.00%)      }
        .           }
        .           
        .           pub trait ConstEquateRelation<'tcx>: TypeRelation<'tcx> {
        .               /// Register an obligation that both constants must be equal to each other.
        .               ///
        .               /// If they aren't equal then the relation doesn't hold.
        .               fn const_equate_obligation(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>);
        .           }
-- line 772 ----------------------------------------
-- line 824 ----------------------------------------
        .               target_vid: ty::ConstVid<'tcx>,
        .           }
        .           
        .           // We use `TypeRelation` here to propagate `RelateResult` upwards.
        .           //
        .           // Both inputs are expected to be the same.
        .           impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
       78 ( 0.00%)          self.infcx.tcx
        .               }
        .           
        .               fn param_env(&self) -> ty::ParamEnv<'tcx> {
       20 ( 0.00%)          self.param_env
        .               }
        .           
        .               fn tag(&self) -> &'static str {
        .                   "ConstInferUnifier"
        .               }
        .           
        .               fn a_is_expected(&self) -> bool {
        .                   true
-- line 844 ----------------------------------------
-- line 937 ----------------------------------------
        .                       return Ok(r);
        .                   } else {
        .                       // FIXME: This is non-ideal because we don't give a
        .                       // very descriptive origin for this region variable.
        .                       Ok(self.infcx.next_region_var_in_universe(MiscVariable(self.span), self.for_universe))
        .                   }
        .               }
        .           
      380 ( 0.00%)      #[tracing::instrument(level = "debug", skip(self))]
        .               fn consts(
        .                   &mut self,
        .                   c: &'tcx ty::Const<'tcx>,
        .                   _c: &'tcx ty::Const<'tcx>,
        .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
        .                   debug_assert_eq!(c, _c);
        .                   debug!("ConstInferUnifier: c={:?}", c);
        .           
      100 ( 0.00%)          match c.val {
        .                       ty::ConstKind::Infer(InferConst::Var(vid)) => {
        .                           // Check if the current unification would end up
        .                           // unifying `target_vid` with a const which contains
        .                           // an inference variable which is unioned with `target_vid`.
        .                           //
        .                           // Not doing so can easily result in stack overflows.
        .                           if self
        .                               .infcx
-- line 962 ----------------------------------------
-- line 1000 ----------------------------------------
        .                               substs,
        .                               substs,
        .                           )?;
        .                           Ok(self.tcx().mk_const(ty::Const {
        .                               ty: c.ty,
        .                               val: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),
        .                           }))
        .                       }
      100 ( 0.00%)              _ => relate::super_relate_consts(self, c, c),
        .                   }
        .               }
        .           }

2,395,025 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                  

-- line 57 ----------------------------------------
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
     1,088 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
       544 ( 0.00%)              from_str_radix(src, radix)
     1,632 ( 0.00%)          }
         .           
         .                   /// Returns the number of ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[doc(alias = "popcount")]
         .                   #[doc(alias = "popcnt")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn count_ones(self) -> u32 {
 1,231,590 ( 0.01%)              intrinsics::ctpop(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of zeros in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
         .                   /// assert_eq!(n.leading_zeros(), 2);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn leading_zeros(self) -> u32 {
 2,595,540 ( 0.01%)              intrinsics::ctlz(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of trailing zeros in the binary representation
         .                   /// of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
         .                   /// assert_eq!(n.trailing_zeros(), 3);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn trailing_zeros(self) -> u32 {
 2,466,640 ( 0.01%)              intrinsics::cttz(self) as u32
         .                   }
         .           
         .                   /// Returns the number of leading ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn rotate_left(self, n: u32) -> Self {
61,731,157 ( 0.30%)              intrinsics::rotate_left(self, n as $SelfT)
         .                   }
         .           
         .                   /// Shifts the bits to the right by a specified amount, `n`,
         .                   /// wrapping the truncated bits to the beginning of the resulting
         .                   /// integer.
         .                   ///
         .                   /// Please note this isn't the same operation as the `>>` shifting operator!
         .                   ///
-- line 220 ----------------------------------------
-- line 430 ----------------------------------------
         .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   pub const fn checked_add(self, rhs: Self) -> Option<Self> {
     1,308 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
         .                       if unlikely!(b) {None} else {Some(a)}
         .                   }
         .           
         .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
         .                   /// cannot occur.
         .                   ///
         .                   /// # Safety
         .                   ///
-- line 446 ----------------------------------------
-- line 456 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_add`.
 5,575,057 ( 0.03%)              unsafe { intrinsics::unchecked_add(self, rhs) }
         .                   }
         .           
         .                   /// Checked addition with a signed integer. Computes `self + rhs`,
         .                   /// returning `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_sub`.
   636,807 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
         .                   }
         .           
         .                   /// Checked integer multiplication. Computes `self * rhs`, returning
         .                   /// `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 596 ----------------------------------------
         .                                 without modifying the original"]
         .                   #[inline]
         .                   pub const fn checked_div(self, rhs: Self) -> Option<Self> {
         .                       if unlikely!(rhs == 0) {
         .                           None
         .                       } else {
         .                           // SAFETY: div by zero has been checked above and unsigned types have no other
         .                           // failure modes for division
    16,136 ( 0.00%)                  Some(unsafe { intrinsics::unchecked_div(self, rhs) })
         .                       }
         .                   }
         .           
         .                   /// Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning `None`
         .                   /// if `rhs == 0`.
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 612 ----------------------------------------
-- line 1035 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_add(self, rhs: Self) -> Self {
 1,292,915 ( 0.01%)              intrinsics::saturating_add(self, rhs)
         .                   }
         .           
         .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
    67,501 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
         .                   }
         .           
         .                   /// Saturating integer multiplication. Computes `self * rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1104 ----------------------------------------
         .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX).saturating_mul(10), ", stringify!($SelfT),"::MAX);")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   pub const fn saturating_mul(self, rhs: Self) -> Self {
         2 ( 0.00%)              match self.checked_mul(rhs) {
         .                           Some(x) => x,
         .                           None => Self::MAX,
         .                       }
         .                   }
         .           
         .                   /// Saturating integer division. Computes `self / rhs`, saturating at the
         .                   /// numeric bounds instead of overflowing.
         .                   ///
-- line 1120 ----------------------------------------
-- line 1175 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
26,529,149 ( 0.13%)              intrinsics::wrapping_add(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) addition with a signed integer. Computes
         .                   /// `self + rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
11,393,694 ( 0.06%)              intrinsics::wrapping_sub(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) multiplication. Computes `self *
         .                   /// rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
         .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
45,342,222 ( 0.22%)              intrinsics::wrapping_mul(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) division. Computes `self / rhs`.
         .                   /// Wrapped division on unsigned types is just normal division.
         .                   /// There's no way wrapping could ever happen.
         .                   /// This function exists, so that all operations
         .                   /// are accounted for in the wrapping operations.
         .                   ///
-- line 1256 ----------------------------------------
-- line 1397 ----------------------------------------
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_shl(self, rhs: u32) -> Self {
         .                       // SAFETY: the masking by the bitsize of the type ensures that we do not shift
         .                       // out of bounds
         .                       unsafe {
        41 ( 0.00%)                  intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)
         .                       }
         .                   }
         .           
         .                   /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,
         .                   /// where `mask` removes any high-order bits of `rhs` that
         .                   /// would cause the shift to exceed the bitwidth of the type.
         .                   ///
         .                   /// Note that this is *not* the same as a rotate-right; the
-- line 1413 ----------------------------------------
-- line 1491 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_add(2), (7, false));")]
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
       115 ( 0.00%)          pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
 4,761,564 ( 0.02%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
       230 ( 0.00%)          }
         .           
         .                   /// Calculates `self + rhs + carry` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
         .                   /// additional bit of overflow. This allows for chaining together multiple additions
         .                   /// to create "big integers" which represent larger values.
         .                   ///
         .                   #[doc = concat!("This can be thought of as a ", stringify!($BITS), "-bit \"full adder\", in the electronics sense.")]
-- line 1510 ----------------------------------------
-- line 1587 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_sub(2), (3, false));")]
         .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
       587 ( 0.00%)          pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
 1,215,647 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
     1,174 ( 0.00%)          }
         .           
         .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
         .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
         .                   /// to create "big integers" which represent larger values.
         .                   ///
         .                   /// # Examples
-- line 1606 ----------------------------------------
-- line 1673 ----------------------------------------
         .                   /// assert_eq!(5u32.overflowing_mul(2), (10, false));
         .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                     without modifying the original"]
         .                   #[inline(always)]
         4 ( 0.00%)          pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
 9,450,769 ( 0.05%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
         2 ( 0.00%)          }
         .           
         .                   /// Calculates the divisor when `self` is divided by `rhs`.
         .                   ///
         .                   /// Returns a tuple of the divisor along with a boolean indicating
         .                   /// whether an arithmetic overflow would occur. Note that for unsigned
         .                   /// integers overflow never occurs, so the second value is always
         .                   /// `false`.
         .                   ///
-- line 1692 ----------------------------------------
-- line 1838 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(0x1", stringify!($SelfT), ".overflowing_shl(132), (0x10, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_shl(self, rhs: u32) -> (Self, bool) {
         3 ( 0.00%)              (self.wrapping_shl(rhs), (rhs > ($BITS - 1)))
         .                   }
         .           
         .                   /// Shifts self right by `rhs` bits.
         .                   ///
         .                   /// Returns a tuple of the shifted version of self along with a boolean
         .                   /// indicating whether the shift value was larger than or equal to the
         .                   /// number of bits. If the shift value is too large, then value is
         .                   /// masked (N-1) where N is the number of bits, and this value is then
-- line 1854 ----------------------------------------
-- line 2132 ----------------------------------------
         .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
         .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
         .                   /// ```
         .                   #[must_use]
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
         .                   #[inline(always)]
         .                   pub const fn is_power_of_two(self) -> bool {
       786 ( 0.00%)              self.count_ones() == 1
         .                   }
         .           
         .                   // Returns one less than next power of two.
         .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
         .                   //
         .                   // 8u8.one_less_than_next_power_of_two() == 7
         .                   // 6u8.one_less_than_next_power_of_two() == 7
         .                   //
         .                   // This method cannot overflow, as in the `next_power_of_two`
         .                   // overflow cases it instead ends up returning the maximum value
         .                   // of the type, and can return 0 for 0.
         .                   #[inline]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   const fn one_less_than_next_power_of_two(self) -> Self {
   104,580 ( 0.00%)              if self <= 1 { return 0; }
         .           
   161,441 ( 0.00%)              let p = self - 1;
         .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
         .                       // That means the shift is always in-bounds, and some processors
         .                       // (such as intel pre-haswell) have more efficient ctlz
         .                       // intrinsics when the argument is non-zero.
   472,500 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
   172,928 ( 0.00%)              <$SelfT>::MAX >> z
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `self`.
         .                   ///
         .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
         .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
         .                   /// release mode (the only situation in which method can return 0).
         .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   #[rustc_inherit_overflow_checks]
         .                   pub const fn next_power_of_two(self) -> Self {
   218,106 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `n`. If
         .                   /// the next power of two is greater than the type's maximum value,
         .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 2195 ----------------------------------------

   689,686 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir                 

-- line 27 ----------------------------------------
        .           impl CacheEntry {
        .               #[inline]
        .               fn update(
        .                   &mut self,
        .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
        .                   pos: BytePos,
        .                   time_stamp: usize,
        .               ) {
   52,877 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
   38,976 ( 0.00%)              self.file = file;
   52,989 ( 0.00%)              self.file_index = file_idx;
        .                   }
        .           
   19,751 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
        .                   let line_bounds = self.file.line_bounds(line_index);
  100,812 ( 0.00%)          self.line_number = line_index + 1;
  154,143 ( 0.00%)          self.line = line_bounds;
        .                   self.touch(time_stamp);
        .               }
        .           
        .               #[inline]
        .               fn touch(&mut self, time_stamp: usize) {
  510,251 ( 0.00%)          self.time_stamp = time_stamp;
        .               }
        .           }
        .           
        .           #[derive(Clone)]
        .           pub struct CachingSourceMapView<'sm> {
        .               source_map: &'sm SourceMap,
        .               line_cache: [CacheEntry; 3],
        .               time_stamp: usize,
        .           }
        .           
        .           impl<'sm> CachingSourceMapView<'sm> {
   18,342 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
        .                   let files = source_map.files();
    9,171 ( 0.00%)          let first_file = files[0].clone();
        .                   let entry = CacheEntry {
        .                       time_stamp: 0,
        .                       line_number: 0,
        .                       line: BytePos(0)..BytePos(0),
        .                       file: first_file,
        .                       file_index: 0,
        .                   };
        .           
   45,855 ( 0.00%)          CachingSourceMapView {
        .                       source_map,
   64,197 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
        .                       time_stamp: 0,
        .                   }
   36,684 ( 0.00%)      }
        .           
        .               pub fn byte_pos_to_line_and_col(
        .                   &mut self,
        .                   pos: BytePos,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
        .                   self.time_stamp += 1;
        .           
        .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
        .                   };
        .           
        .                   let cache_entry = &mut self.line_cache[oldest];
        .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
        .           
        .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
        .               }
        .           
1,933,176 ( 0.01%)      pub fn span_data_to_lines_and_cols(
        .                   &mut self,
        .                   span_data: &SpanData,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
1,104,672 ( 0.01%)          self.time_stamp += 1;
        .           
        .                   // Check if lo and hi are in the cached lines.
  276,168 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
  276,168 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
        .           
  471,948 ( 0.00%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
        .                       // Cache hit for span lo and hi. Check if they belong to the same file.
        .                       let result = {
  468,166 ( 0.00%)                  let lo = &self.line_cache[lo_cache_idx as usize];
        .                           let hi = &self.line_cache[hi_cache_idx as usize];
        .           
1,404,498 ( 0.01%)                  if lo.file_index != hi.file_index {
        .                               return None;
        .                           }
        .           
        .                           (
  468,166 ( 0.00%)                      lo.file.clone(),
        .                               lo.line_number,
        .                               span_data.lo - lo.line.start,
  234,083 ( 0.00%)                      hi.line_number,
        .                               span_data.hi - hi.line.start,
        .                           )
        .                       };
        .           
  234,083 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
  234,083 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
        .           
  936,332 ( 0.00%)              return Some(result);
        .                   }
        .           
        .                   // No cache hit or cache hit for only one of span lo and hi.
   80,388 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
        .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
        .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
        .                   } else {
        .                       self.oldest_cache_entry_index()
        .                   };
        .           
        .                   // If the entry doesn't point to the correct file, get the new file and index.
        .                   // Return early if the file containing beginning of span doesn't contain end of span.
  326,796 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
  111,670 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
  134,004 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
        .                           return None;
        .                       }
        .           
   89,336 ( 0.00%)              Some(new_file_and_idx)
        .                   } else {
        .                       let file = &self.line_cache[oldest].file;
   59,253 ( 0.00%)              if !file_contains(&file, span_data.hi) {
        .                           return None;
        .                       }
        .           
   59,253 ( 0.00%)              None
        .                   };
        .           
        .                   // Update the cache entries.
  210,425 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, -1) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
        .           
  104,394 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
        .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
        .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
        .                               let hi = &mut self.line_cache[next_oldest];
        .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
        .                               (oldest, next_oldest)
        .                           } else {
        .                               (oldest, oldest)
        .                           }
        .                       }
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, _) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
    3,782 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
    5,673 ( 0.00%)                  hi.touch(self.time_stamp);
        .                           (oldest, hi_cache_idx as usize)
        .                       }
        .                       // Oldest cache entry is for span_data.hi line.
        .                       (_, -1) => {
        .                           let hi = &mut self.line_cache[oldest];
    5,396 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
   10,792 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
   21,584 ( 0.00%)                  lo.touch(self.time_stamp);
        .                           (lo_cache_idx as usize, oldest)
        .                       }
        .                       _ => {
        .                           panic!();
        .                       }
        .                   };
        .           
        .                   let lo = &self.line_cache[lo_idx];
        .                   let hi = &self.line_cache[hi_idx];
        .           
        .                   // Span lo and hi may equal line end when last line doesn't
        .                   // end in newline, hence the inclusive upper bounds below.
   84,170 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
   42,085 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
   84,170 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
   42,085 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
  210,425 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
  126,255 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
  126,255 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
        .           
  126,255 ( 0.00%)          Some((
   42,085 ( 0.00%)              lo.file.clone(),
        .                       lo.line_number,
        .                       span_data.lo - lo.line.start,
   42,085 ( 0.00%)              hi.line_number,
        .                       span_data.hi - hi.line.start,
        .                   ))
2,485,512 ( 0.01%)      }
        .           
        .               fn cache_entry_index(&self, pos: BytePos) -> isize {
        .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
2,890,972 ( 0.01%)              if cache_entry.line.contains(&pos) {
        .                           return idx as isize;
        .                       }
        .                   }
        .           
        .                   -1
        .               }
        .           
        .               fn oldest_cache_entry_index(&self) -> usize {
        .                   let mut oldest = 0;
        .           
        .                   for idx in 1..self.line_cache.len() {
  208,788 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
        .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
        .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
        .           
        .                   for idx in 0..self.line_cache.len() {
   92,701 ( 0.00%)              if idx != avoid_idx
   53,743 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
        .                       {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
  111,670 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
   22,334 ( 0.00%)          if !self.source_map.files().is_empty() {
   44,668 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
        .                       let file = &self.source_map.files()[file_idx];
        .           
  178,672 ( 0.00%)              if file_contains(file, pos) {
        .                           return Some((file.clone(), file_idx));
        .                       }
        .                   }
        .           
        .                   None
  111,670 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
        .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
        .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
        .               // purposes of converting a byte position to a line and column number, we can't come up with a
        .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

3,822,654 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                   

-- line 70 ----------------------------------------
          .           
          .                   impl<'a, T> $name<'a, T> {
          .                       // Helper function for creating a slice from the iterator.
          .                       #[inline(always)]
          .                       fn make_slice(&self) -> &'a [T] {
          .                           // SAFETY: the iterator was created from a slice with pointer
          .                           // `self.ptr` and length `len!(self)`. This guarantees that all
          .                           // the prerequisites for `from_raw_parts` are fulfilled.
    301,099 ( 0.00%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
          .                       }
          .           
          .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
          .                       // returning the old start.
          .                       // Unsafe because the offset must not exceed `self.len()`.
          .                       #[inline(always)]
          .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
          .                           if mem::size_of::<T>() == 0 {
          .                               zst_shrink!(self, offset);
          .                               self.ptr.as_ptr()
          .                           } else {
          .                               let old = self.ptr.as_ptr();
          .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
          .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
  2,462,488 ( 0.01%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
          .                               old
          .                           }
          .                       }
          .           
          .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
          .                       // returning the new end.
          .                       // Unsafe because the offset must not exceed `self.len()`.
          .                       #[inline(always)]
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
          .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
          .                           if mem::size_of::<T>() == 0 {
          .                               zst_shrink!(self, offset);
          .                               self.ptr.as_ptr()
          .                           } else {
          .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
          .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
          .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
     36,593 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
          .                               self.end
          .                           }
          .                       }
          .                   }
          .           
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   impl<T> ExactSizeIterator for $name<'_, T> {
          .                       #[inline(always)]
          .                       fn len(&self) -> usize {
    547,847 ( 0.00%)                  len!(self)
          .                       }
          .           
          .                       #[inline(always)]
          .                       fn is_empty(&self) -> bool {
          .                           is_empty!(self)
          .                       }
          .                   }
          .           
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
          .                       fn next(&mut self) -> Option<$elem> {
          .                           // could be implemented with slices, but this avoids bounds checks
          .           
          .                           // SAFETY: `assume` calls are safe since a slice's start pointer
          .                           // must be non-null, and slices over non-ZSTs must also have a
          .                           // non-null end pointer. The call to `next_unchecked!` is safe
          .                           // since we check if the iterator is empty first.
          .                           unsafe {
  1,192,953 ( 0.01%)                      assume(!self.ptr.as_ptr().is_null());
          .                               if mem::size_of::<T>() != 0 {
    317,790 ( 0.00%)                          assume(!self.end.is_null());
          .                               }
206,010,556 ( 1.01%)                      if is_empty!(self) {
          .                                   None
          .                               } else {
         13 ( 0.00%)                          Some(next_unchecked!(self))
          .                               }
          .                           }
          .                       }
          .           
          .                       #[inline]
          .                       fn size_hint(&self) -> (usize, Option<usize>) {
  7,337,659 ( 0.04%)                  let exact = len!(self);
          .                           (exact, Some(exact))
          .                       }
          .           
          .                       #[inline]
          .                       fn count(self) -> usize {
          .                           len!(self)
          .                       }
          .           
          .                       #[inline]
          .                       fn nth(&mut self, n: usize) -> Option<$elem> {
    106,100 ( 0.00%)                  if n >= len!(self) {
          .                               // This iterator is now empty.
          .                               if mem::size_of::<T>() == 0 {
          .                                   // We have to do it this way as `ptr` may never be 0, but `end`
          .                                   // could be (due to wrapping).
          .                                   self.end = self.ptr.as_ptr();
          .                               } else {
          .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
          .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
          .                       // faster to compile.
          .                       #[inline]
          .                       fn for_each<F>(mut self, mut f: F)
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item),
          .                       {
          .                           while let Some(x) = self.next() {
     16,431 ( 0.00%)                      f(x);
          .                           }
          .                       }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          .                       fn all<F>(&mut self, mut f: F) -> bool
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> bool,
          .                       {
     50,067 ( 0.00%)                  while let Some(x) = self.next() {
    117,867 ( 0.00%)                      if !f(x) {
          .                                   return false;
          .                               }
          .                           }
          .                           true
          .                       }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
      1,864 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> bool,
          .                       {
  1,698,974 ( 0.01%)                  while let Some(x) = self.next() {
  2,186,016 ( 0.01%)                      if f(x) {
          .                                   return true;
          .                               }
          .                           }
          .                           false
      1,864 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
          .                       where
          .                           Self: Sized,
          .                           P: FnMut(&Self::Item) -> bool,
          .                       {
     81,741 ( 0.00%)                  while let Some(x) = self.next() {
    453,389 ( 0.00%)                      if predicate(&x) {
         14 ( 0.00%)                          return Some(x);
          .                               }
          .                           }
          .                           None
    110,525 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> Option<B>,
          .                       {
    430,052 ( 0.00%)                  while let Some(x) = self.next() {
  1,953,265 ( 0.01%)                      if let Some(y) = f(x) {
    119,441 ( 0.00%)                          return Some(y);
          .                               }
          .                           }
          .                           None
     22,208 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile. Also, the `assume` avoids a bounds check.
          .                       #[inline]
          .                       #[rustc_inherit_overflow_checks]
          .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
          .                           Self: Sized,
          .                           P: FnMut(Self::Item) -> bool,
          .                       {
          .                           let n = len!(self);
          .                           let mut i = 0;
          .                           while let Some(x) = self.next() {
  1,533,906 ( 0.01%)                      if predicate(x) {
          .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
          .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
          .                                   unsafe { assume(i < n) };
          .                                   return Some(i);
          .                               }
          .                               i += 1;
          .                           }
          .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
          .                       // faster to compile. Also, the `assume` avoids a bounds check.
          .                       #[inline]
          .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
          .                           P: FnMut(Self::Item) -> bool,
          .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
          .                       {
          .                           let n = len!(self);
          .                           let mut i = n;
    155,839 ( 0.00%)                  while let Some(x) = self.next_back() {
  2,016,919 ( 0.01%)                      i -= 1;
  1,654,122 ( 0.01%)                      if predicate(x) {
          .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
          .                                   // and is only decreasing.
          .                                   unsafe { assume(i < n) };
          .                                   return Some(i);
          .                               }
          .                           }
          .                           None
          .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
          .                           // the returned references is guaranteed to refer to an element
          .                           // of the slice and thus guaranteed to be valid.
          .                           //
          .                           // Also note that the caller also guarantees that we're never
          .                           // called with the same index again, and that no other methods
          .                           // that will access this subslice are called, so it is valid
          .                           // for the returned reference to be mutable in the case of
          .                           // `IterMut`
    856,834 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
          .                       }
          .           
          .                       $($extra)*
          .                   }
          .           
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
          .                       #[inline]
-- line 348 ----------------------------------------
-- line 349 ----------------------------------------
          .                       fn next_back(&mut self) -> Option<$elem> {
          .                           // could be implemented with slices, but this avoids bounds checks
          .           
          .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
          .                           // and slices over non-ZSTs must also have a non-null end pointer.
          .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
          .                           // empty first.
          .                           unsafe {
     59,032 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
          .                               if mem::size_of::<T>() != 0 {
     59,147 ( 0.00%)                          assume(!self.end.is_null());
          .                               }
  4,997,770 ( 0.02%)                      if is_empty!(self) {
          .                                   None
          .                               } else {
          .                                   Some(next_back_unchecked!(self))
          .                               }
          .                           }
          .                       }
          .           
          .                       #[inline]
-- line 369 ----------------------------------------

 42,111,543 ( 0.21%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs
--------------------------------------------------------------------------------
Ir                 

-- line 10 ----------------------------------------
        .           pub fn move_path_children_matching<'tcx, F>(
        .               move_data: &MoveData<'tcx>,
        .               path: MovePathIndex,
        .               mut cond: F,
        .           ) -> Option<MovePathIndex>
        .           where
        .               F: FnMut(mir::PlaceElem<'tcx>) -> bool,
        .           {
    6,249 ( 0.00%)      let mut next_child = move_data.move_paths[path].first_child;
   19,904 ( 0.00%)      while let Some(child_index) = next_child {
        .                   let move_path_children = &move_data.move_paths[child_index];
   17,820 ( 0.00%)          if let Some(&elem) = move_path_children.place.projection.last() {
   29,746 ( 0.00%)              if cond(elem) {
        .                           return Some(child_index);
        .                       }
        .                   }
        .                   next_child = move_path_children.next_sibling;
        .               }
        .           
        .               None
        .           }
-- line 30 ----------------------------------------
-- line 48 ----------------------------------------
        .           //
        .           // FIXME: we have to do something for moving slice patterns.
        .           fn place_contents_drop_state_cannot_differ<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               place: mir::Place<'tcx>,
        .           ) -> bool {
        .               let ty = place.ty(body, tcx).ty;
3,401,522 ( 0.02%)      match ty.kind() {
        .                   ty::Array(..) => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} => false",
        .                           place, ty
        .                       );
        .                       false
        .                   }
        .                   ty::Slice(..) | ty::Ref(..) | ty::RawPtr(..) => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} refd => true",
        .                           place, ty
        .                       );
        .                       true
        .                   }
2,497,563 ( 0.01%)          ty::Adt(def, _) if (def.has_dtor(tcx) && !def.is_box()) || def.is_union() => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} Drop => true",
        .                           place, ty
        .                       );
        .                       true
        .                   }
        .                   _ => false,
        .               }
-- line 79 ----------------------------------------
-- line 83 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               lookup_result: LookupResult,
        .               each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
   95,568 ( 0.00%)      match lookup_result {
        .                   LookupResult::Parent(..) => {
        .                       // access to untracked value - do not touch children
        .                   }
        .                   LookupResult::Exact(e) => on_all_children_bits(tcx, body, move_data, e, each_child),
        .               }
        .           }
        .           
        .           pub fn on_all_children_bits<'tcx, F>(
-- line 99 ----------------------------------------
-- line 100 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               move_path_index: MovePathIndex,
        .               mut each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
5,049,376 ( 0.02%)      fn is_terminal_path<'tcx>(
        .                   tcx: TyCtxt<'tcx>,
        .                   body: &Body<'tcx>,
        .                   move_data: &MoveData<'tcx>,
        .                   path: MovePathIndex,
        .               ) -> bool {
1,262,344 ( 0.01%)          place_contents_drop_state_cannot_differ(tcx, body, move_data.move_paths[path].place)
5,049,376 ( 0.02%)      }
        .           
5,926,566 ( 0.03%)      fn on_all_children_bits<'tcx, F>(
        .                   tcx: TyCtxt<'tcx>,
        .                   body: &Body<'tcx>,
        .                   move_data: &MoveData<'tcx>,
        .                   move_path_index: MovePathIndex,
        .                   each_child: &mut F,
        .               ) where
        .                   F: FnMut(MovePathIndex),
        .               {
  138,676 ( 0.00%)          each_child(move_path_index);
        .           
4,430,934 ( 0.02%)          if is_terminal_path(tcx, body, move_data, move_path_index) {
        .                       return;
        .                   }
        .           
  415,889 ( 0.00%)          let mut next_child_index = move_data.move_paths[move_path_index].first_child;
1,141,037 ( 0.01%)          while let Some(child_index) = next_child_index {
  463,386 ( 0.00%)              on_all_children_bits(tcx, body, move_data, child_index, each_child);
   77,231 ( 0.00%)              next_child_index = move_data.move_paths[child_index].next_sibling;
        .                   }
4,916,634 ( 0.02%)      }
3,251,934 ( 0.02%)      on_all_children_bits(tcx, body, move_data, move_path_index, &mut each_child);
        .           }
        .           
        .           pub fn on_all_drop_children_bits<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               path: MovePathIndex,
        .               mut each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
  222,910 ( 0.00%)      on_all_children_bits(tcx, body, &ctxt.move_data, path, |child| {
  148,992 ( 0.00%)          let place = &ctxt.move_data.move_paths[path].place;
   37,248 ( 0.00%)          let ty = place.ty(body, tcx).ty;
        .                   debug!("on_all_drop_children_bits({:?}, {:?} : {:?})", path, place, ty);
        .           
   31,847 ( 0.00%)          let erased_ty = tcx.erase_regions(ty);
  228,244 ( 0.00%)          if erased_ty.needs_drop(tcx, ctxt.param_env) {
   37,241 ( 0.00%)              each_child(child);
        .                   } else {
        .                       debug!("on_all_drop_children_bits - skipping")
        .                   }
        .               })
        .           }
        .           
  122,961 ( 0.00%)  pub fn drop_flag_effects_for_function_entry<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex, DropFlagState),
        .           {
        .               let move_data = &ctxt.move_data;
   10,996 ( 0.00%)      for arg in body.args_iter() {
   24,772 ( 0.00%)          let place = mir::Place::from(arg);
   37,158 ( 0.00%)          let lookup_result = move_data.rev_lookup.find(place.as_ref());
        .                   on_lookup_result_bits(tcx, body, move_data, lookup_result, |mpi| {
   14,908 ( 0.00%)              callback(mpi, DropFlagState::Present)
        .                   });
        .               }
   87,968 ( 0.00%)  }
        .           
6,076,440 ( 0.03%)  pub fn drop_flag_effects_for_location<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               loc: Location,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex, DropFlagState),
        .           {
        .               let move_data = &ctxt.move_data;
        .               debug!("drop_flag_effects_for_location({:?})", loc);
        .           
        .               // first, move out of the RHS
  248,439 ( 0.00%)      for mi in &move_data.loc_map[loc] {
1,319,617 ( 0.01%)          let path = mi.move_path_index(move_data);
        .                   debug!("moving out of path {:?}", move_data.move_paths[path]);
        .           
  387,308 ( 0.00%)          on_all_children_bits(tcx, body, move_data, path, |mpi| callback(mpi, DropFlagState::Absent))
        .               }
        .           
        .               debug!("drop_flag_effects: assignment for location({:?})", loc);
        .           
  138,559 ( 0.00%)      for_location_inits(tcx, body, move_data, loc, |mpi| callback(mpi, DropFlagState::Present));
4,738,776 ( 0.02%)  }
        .           
        .           pub fn for_location_inits<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               loc: Location,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
  248,439 ( 0.00%)      for ii in &move_data.init_loc_map[loc] {
  707,660 ( 0.00%)          let init = move_data.inits[*ii];
  433,526 ( 0.00%)          match init.kind {
        .                       InitKind::Deep => {
        .                           let path = init.path;
        .           
        .                           on_all_children_bits(tcx, body, move_data, path, &mut callback)
        .                       }
        .                       InitKind::Shallow => {
        .                           let mpi = init.path;
        .                           callback(mpi);
-- line 226 ----------------------------------------
-- line 230 ----------------------------------------
        .               }
        .           }
        .           
        .           /// Calls `handle_inactive_variant` for each descendant move path of `enum_place` that contains a
        .           /// `Downcast` to a variant besides the `active_variant`.
        .           ///
        .           /// NOTE: If there are no move paths corresponding to an inactive variant,
        .           /// `handle_inactive_variant` will not be called for that variant.
   89,520 ( 0.00%)  pub(crate) fn on_all_inactive_variants<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &mir::Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               enum_place: mir::Place<'tcx>,
        .               active_variant: VariantIdx,
        .               mut handle_inactive_variant: impl FnMut(MovePathIndex),
        .           ) {
   37,300 ( 0.00%)      let enum_mpi = match move_data.rev_lookup.find(enum_place.as_ref()) {
        .                   LookupResult::Exact(mpi) => mpi,
        .                   LookupResult::Parent(_) => return,
        .               };
        .           
        .               let enum_path = &move_data.move_paths[enum_mpi];
   35,679 ( 0.00%)      for (variant_mpi, variant_path) in enum_path.children(&move_data.move_paths) {
        .                   // Because of the way we build the `MoveData` tree, each child should have exactly one more
        .                   // projection than `enum_place`. This additional projection must be a downcast since the
        .                   // base is an enum.
    6,022 ( 0.00%)          let (downcast, base_proj) = variant_path.place.projection.split_last().unwrap();
   24,088 ( 0.00%)          assert_eq!(enum_place.projection.len(), base_proj.len());
        .           
   18,066 ( 0.00%)          let variant_idx = match *downcast {
        .                       mir::ProjectionElem::Downcast(_, idx) => idx,
        .                       _ => unreachable!(),
        .                   };
        .           
    6,022 ( 0.00%)          if variant_idx != active_variant {
        .                       on_all_children_bits(tcx, body, move_data, variant_mpi, |mpi| {
    7,264 ( 0.00%)                  handle_inactive_variant(mpi)
        .                       });
        .                   }
        .               }
   59,680 ( 0.00%)  }

4,574,079 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 36 ----------------------------------------
        .           use rustc_session::parse::ParseSess;
        .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
        .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
        .           use tracing::debug;
        .           
        .           use std::ops::Range;
        .           use std::{cmp, mem, slice};
        .           
   69,265 ( 0.00%)  bitflags::bitflags! {
        .               struct Restrictions: u8 {
        .                   const STMT_EXPR         = 1 << 0;
        .                   const NO_STRUCT_LITERAL = 1 << 1;
        .                   const CONST_EXPR        = 1 << 2;
        .               }
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
        .                               $self.bump();
        .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
        .                           }
        .                       }
        .                   }
        .               };
        .           }
        .           
1,376,599 ( 0.01%)  #[derive(Clone)]
        .           pub struct Parser<'a> {
   50,629 ( 0.00%)      pub sess: &'a ParseSess,
        .               /// The current token.
   48,414 ( 0.00%)      pub token: Token,
        .               /// The spacing for the current token
   24,468 ( 0.00%)      pub token_spacing: Spacing,
        .               /// The previous token.
   72,621 ( 0.00%)      pub prev_token: Token,
   24,729 ( 0.00%)      pub capture_cfg: bool,
   49,719 ( 0.00%)      restrictions: Restrictions,
   48,936 ( 0.00%)      expected_tokens: Vec<TokenType>,
        .               // Important: This must only be advanced from `next_tok`
        .               // to ensure that `token_cursor.num_next_calls` is updated properly
        .               token_cursor: TokenCursor,
   48,936 ( 0.00%)      desugar_doc_comments: bool,
        .               /// This field is used to keep track of how many left angle brackets we have seen. This is
        .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
        .               /// appropriately.
        .               ///
        .               /// See the comments in the `parse_path_segment` function for more details.
   48,936 ( 0.00%)      unmatched_angle_bracket_count: u32,
   73,404 ( 0.00%)      max_angle_bracket_count: u32,
        .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
        .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
        .               /// error.
   24,468 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
        .               last_unexpected_token_span: Option<Span>,
        .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
        .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
        .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
        .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
        .               subparser_name: Option<&'static str>,
        .               capture_state: CaptureState,
        .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
        .           /// the first macro inner attribute to invoke a proc-macro).
        .           /// When create a `TokenStream`, the inner attributes get inserted
        .           /// into the proper place in the token stream.
        .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
        .           
        .           /// Controls how we capture tokens. Capturing can be expensive,
        .           /// so we try to avoid performing capturing in cases where
        .           /// we will never need an `AttrAnnotatedTokenStream`
   24,468 ( 0.00%)  #[derive(Copy, Clone)]
        .           pub enum Capturing {
        .               /// We aren't performing any capturing - this is the default mode.
        .               No,
        .               /// We are capturing tokens
        .               Yes,
        .           }
        .           
   99,826 ( 0.00%)  #[derive(Clone)]
        .           struct CaptureState {
   97,872 ( 0.00%)      capturing: Capturing,
   24,468 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
        .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
        .           }
        .           
        .           impl<'a> Drop for Parser<'a> {
        .               fn drop(&mut self) {
   94,641 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
        .               }
        .           }
        .           
  907,448 ( 0.00%)  #[derive(Clone)]
        .           struct TokenCursor {
        .               frame: TokenCursorFrame,
  207,335 ( 0.00%)      stack: Vec<TokenCursorFrame>,
        .               desugar_doc_comments: bool,
        .               // Counts the number of calls to `next` or `next_desugared`,
        .               // depending on whether `desugar_doc_comments` is set.
   67,383 ( 0.00%)      num_next_calls: usize,
        .               // During parsing, we may sometimes need to 'unglue' a
        .               // glued token into two component tokens
        .               // (e.g. '>>' into '>' and '>), so that the parser
        .               // can consume them one at a time. This process
        .               // bypasses the normal capturing mechanism
        .               // (e.g. `num_next_calls` will not be incremented),
        .               // since the 'unglued' tokens due not exist in
        .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
        .               // in `Option<Vec<u8>>` requires us to unglue
        .               // the trailing `>>` token. The `break_last_token`
        .               // field is used to track this token - it gets
        .               // appended to the captured stream when
        .               // we evaluate a `LazyTokenStream`
        .               break_last_token: bool,
        .           }
        .           
  409,818 ( 0.00%)  #[derive(Clone)]
        .           struct TokenCursorFrame {
  107,576 ( 0.00%)      delim: token::DelimToken,
        .               span: DelimSpan,
        .               open_delim: bool,
  215,152 ( 0.00%)      tree_cursor: tokenstream::Cursor,
        .               close_delim: bool,
        .           }
        .           
        .           impl TokenCursorFrame {
        .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
   32,010 ( 0.00%)          TokenCursorFrame {
        .                       delim,
        .                       span,
        .                       open_delim: false,
   70,835 ( 0.00%)              tree_cursor: tts.into_trees(),
        .                       close_delim: false,
        .                   }
        .               }
        .           }
        .           
        .           impl TokenCursor {
5,084,340 ( 0.02%)      fn next(&mut self) -> (Token, Spacing) {
        .                   loop {
2,471,442 ( 0.01%)              let (tree, spacing) = if !self.frame.open_delim {
   53,926 ( 0.00%)                  self.frame.open_delim = true;
  269,630 ( 0.00%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
4,864,326 ( 0.02%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
        .                           tree
  226,836 ( 0.00%)              } else if !self.frame.close_delim {
   53,191 ( 0.00%)                  self.frame.close_delim = true;
  265,955 ( 0.00%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
  103,862 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
  675,103 ( 0.00%)                  self.frame = frame;
        .                           continue;
        .                       } else {
  149,328 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
        .                       };
        .           
  947,032 ( 0.00%)              match tree {
        .                           TokenTree::Token(token) => {
3,389,560 ( 0.02%)                      return (token, spacing);
        .                           }
        .                           TokenTree::Delimited(sp, delim, tts) => {
        .                               let frame = TokenCursorFrame::new(sp, delim, tts);
        .                               self.stack.push(mem::replace(&mut self.frame, frame));
        .                           }
        .                       }
        .                   }
3,389,560 ( 0.02%)      }
        .           
1,363,770 ( 0.01%)      fn next_desugared(&mut self) -> (Token, Spacing) {
  417,341 ( 0.00%)          let (data, attr_style, sp) = match self.next() {
   12,315 ( 0.00%)              (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
        .                           (data, attr_style, span)
        .                       }
  661,360 ( 0.00%)              tok => return tok,
        .                   };
        .           
        .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
        .                   // required to wrap the text.
        .                   let mut num_of_hashes = 0;
        .                   let mut count = 0;
  655,675 ( 0.00%)          for ch in data.as_str().chars() {
        .                       count = match ch {
        .                           '"' => 1,
      960 ( 0.00%)                  '#' if count > 0 => count + 1,
        .                           _ => 0,
        .                       };
        .                       num_of_hashes = cmp::max(num_of_hashes, count);
        .                   }
        .           
   16,420 ( 0.00%)          let delim_span = DelimSpan::from_single(sp);
   20,525 ( 0.00%)          let body = TokenTree::Delimited(
        .                       delim_span,
        .                       token::Bracket,
   49,260 ( 0.00%)              [
   28,735 ( 0.00%)                  TokenTree::token(token::Ident(sym::doc, false), sp),
   16,420 ( 0.00%)                  TokenTree::token(token::Eq, sp),
   32,840 ( 0.00%)                  TokenTree::token(TokenKind::lit(token::StrRaw(num_of_hashes), data, None), sp),
        .                       ]
        .                       .iter()
        .                       .cloned()
        .                       .collect::<TokenStream>(),
    4,105 ( 0.00%)          );
        .           
        .                   self.stack.push(mem::replace(
        .                       &mut self.frame,
        .                       TokenCursorFrame::new(
        .                           delim_span,
        .                           token::NoDelim,
    4,105 ( 0.00%)                  if attr_style == AttrStyle::Inner {
        .                               [TokenTree::token(token::Pound, sp), TokenTree::token(token::Not, sp), body]
        .                                   .iter()
        .                                   .cloned()
        .                                   .collect::<TokenStream>()
        .                           } else {
   49,260 ( 0.00%)                      [TokenTree::token(token::Pound, sp), body]
        .                                   .iter()
        .                                   .cloned()
        .                                   .collect::<TokenStream>()
        .                           },
        .                       ),
        .                   ));
        .           
   12,315 ( 0.00%)          self.next()
1,227,393 ( 0.01%)      }
        .           }
        .           
  123,690 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
        .           enum TokenType {
   98,952 ( 0.00%)      Token(TokenKind),
        .               Keyword(Symbol),
        .               Operator,
        .               Lifetime,
        .               Ident,
        .               Path,
        .               Type,
        .               Const,
        .           }
-- line 353 ----------------------------------------
-- line 378 ----------------------------------------
        .               /// The separator token.
        .               sep: Option<TokenKind>,
        .               /// `true` if a trailing separator is allowed.
        .               trailing_sep_allowed: bool,
        .           }
        .           
        .           impl SeqSep {
        .               fn trailing_allowed(t: TokenKind) -> SeqSep {
      726 ( 0.00%)          SeqSep { sep: Some(t), trailing_sep_allowed: true }
        .               }
        .           
        .               fn none() -> SeqSep {
        .                   SeqSep { sep: None, trailing_sep_allowed: false }
        .               }
        .           }
        .           
        .           pub enum FollowedByType {
        .               Yes,
        .               No,
        .           }
        .           
        .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
    2,924 ( 0.00%)      Some(match token.kind {
    5,968 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
    5,848 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
    5,848 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
        .                   token::DocComment(..) => "doc comment",
        .                   _ => return None,
        .               })
        .           }
        .           
   10,444 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
    2,984 ( 0.00%)      let token_str = pprust::token_to_string(token);
        .               match token_descr_opt(token) {
      390 ( 0.00%)          Some(prefix) => format!("{} `{}`", prefix, token_str),
   10,234 ( 0.00%)          _ => format!("`{}`", token_str),
        .               }
    7,460 ( 0.00%)  }
        .           
        .           impl<'a> Parser<'a> {
   89,628 ( 0.00%)      pub fn new(
        .                   sess: &'a ParseSess,
        .                   tokens: TokenStream,
        .                   desugar_doc_comments: bool,
        .                   subparser_name: Option<&'static str>,
        .               ) -> Self {
    6,402 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
   12,804 ( 0.00%)          start_frame.open_delim = true;
        .                   start_frame.close_delim = true;
        .           
  198,462 ( 0.00%)          let mut parser = Parser {
        .                       sess,
    6,402 ( 0.00%)              token: Token::dummy(),
        .                       token_spacing: Spacing::Alone,
    6,402 ( 0.00%)              prev_token: Token::dummy(),
        .                       capture_cfg: false,
        .                       restrictions: Restrictions::empty(),
        .                       expected_tokens: Vec::new(),
        .                       token_cursor: TokenCursor {
   38,412 ( 0.00%)                  frame: start_frame,
        .                           stack: Vec::new(),
        .                           num_next_calls: 0,
        .                           desugar_doc_comments,
        .                           break_last_token: false,
        .                       },
        .                       desugar_doc_comments,
        .                       unmatched_angle_bracket_count: 0,
        .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
        .                           capturing: Capturing::No,
        .                           replace_ranges: Vec::new(),
        .                           inner_attr_ranges: Default::default(),
        .                       },
        .                       current_closure: None,
        .                   };
        .           
        .                   // Make parser point to the first token.
   12,804 ( 0.00%)          parser.bump();
        .           
        .                   parser
   57,618 ( 0.00%)      }
        .           
        .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
        .                   loop {
2,378,202 ( 0.01%)              let (mut next, spacing) = if self.desugar_doc_comments {
  536,236 ( 0.00%)                  self.token_cursor.next_desugared()
        .                       } else {
  786,924 ( 0.00%)                  self.token_cursor.next()
        .                       };
1,585,468 ( 0.01%)              self.token_cursor.num_next_calls += 1;
        .                       // We've retrieved an token from the underlying
        .                       // cursor, so we no longer need to worry about
        .                       // an unglued token. See `break_and_eat` for more details
  396,367 ( 0.00%)              self.token_cursor.break_last_token = false;
1,585,468 ( 0.01%)              if next.span.is_dummy() {
        .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
   26,072 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
        .                       }
1,344,630 ( 0.01%)              if matches!(
  792,734 ( 0.00%)                  next.kind,
        .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
        .                       ) {
        .                           continue;
        .                       }
1,552,140 ( 0.01%)              return (next, spacing);
        .                   }
        .               }
        .           
        .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
        .                   match self.expect_one_of(&[], &[]) {
        .                       Err(e) => Err(e),
        .                       // We can get `Ok(true)` from `recover_closing_delimiter`
        .                       // which is called in `expected_one_of_not_found`.
        .                       Ok(_) => FatalError.raise(),
        .                   }
        .               }
        .           
        .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
  227,835 ( 0.00%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
   25,315 ( 0.00%)          if self.expected_tokens.is_empty() {
   19,908 ( 0.00%)              if self.token == *t {
   16,590 ( 0.00%)                  self.bump();
        .                           Ok(false)
        .                       } else {
        .                           self.unexpected_try_recover(t)
        .                       }
        .                   } else {
  263,964 ( 0.00%)              self.expect_one_of(slice::from_ref(t), &[])
        .                   }
  379,725 ( 0.00%)      }
        .           
        .               /// Expect next token to be edible or inedible token.  If edible,
        .               /// then consume it; if inedible, then return without consuming
        .               /// anything.  Signal a fatal error if next token is unexpected.
  309,768 ( 0.00%)      pub fn expect_one_of(
        .                   &mut self,
        .                   edible: &[TokenKind],
        .                   inedible: &[TokenKind],
        .               ) -> PResult<'a, bool /* recovered */> {
   51,628 ( 0.00%)          if edible.contains(&self.token.kind) {
   70,026 ( 0.00%)              self.bump();
        .                       Ok(false)
        .                   } else if inedible.contains(&self.token.kind) {
        .                       // leave it in the input
        .                       Ok(false)
        .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
        .                       FatalError.raise();
        .                   } else {
        .                       self.expected_one_of_not_found(edible, inedible)
        .                   }
  387,210 ( 0.00%)      }
        .           
        .               // Public for rustfmt usage.
        .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
  214,752 ( 0.00%)          self.parse_ident_common(true)
        .               }
        .           
        .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
  166,713 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
        .                       TokenKind::DocComment(..) => {
        .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
        .                       }
        .                       _ => self.expected_ident_found(),
        .                   })
        .               }
        .           
  383,453 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
   54,779 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
  328,674 ( 0.00%)          if !is_raw && ident.is_reserved() {
        .                       let mut err = self.expected_ident_found();
        .                       if recover {
        .                           err.emit();
        .                       } else {
        .                           return Err(err);
        .                       }
        .                   }
  219,116 ( 0.00%)          self.bump();
        .                   Ok(ident)
  547,790 ( 0.00%)      }
        .           
        .               /// Checks if the next token is `tok`, and returns `true` if so.
        .               ///
        .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
        .               /// encountered.
4,384,205 ( 0.02%)      fn check(&mut self, tok: &TokenKind) -> bool {
1,926,683 ( 0.01%)          let is_present = self.token == *tok;
1,306,128 ( 0.01%)          if !is_present {
2,691,650 ( 0.01%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
        .                   }
        .                   is_present
4,384,205 ( 0.02%)      }
        .           
        .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
    3,576 ( 0.00%)      pub fn eat(&mut self, tok: &TokenKind) -> bool {
  925,538 ( 0.00%)          let is_present = self.check(tok);
  605,540 ( 0.00%)          if is_present {
  137,503 ( 0.00%)              self.bump()
        .                   }
        .                   is_present
    4,470 ( 0.00%)      }
        .           
        .               /// If the next token is the given keyword, returns `true` without eating it.
        .               /// An expectation is also added for diagnostics purposes.
  139,395 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
   31,916 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
  981,448 ( 0.00%)          self.token.is_keyword(kw)
        .               }
        .           
        .               /// If the next token is the given keyword, eats it and returns `true`.
        .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
        .               // Public for rustfmt usage.
  273,425 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
  209,844 ( 0.00%)          if self.check_keyword(kw) {
   22,508 ( 0.00%)              self.bump();
        .                       true
        .                   } else {
        .                       false
        .                   }
  273,425 ( 0.00%)      }
        .           
        .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
   46,656 ( 0.00%)          if self.token.is_keyword(kw) {
    9,027 ( 0.00%)              self.bump();
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// If the given word is not a keyword, signals an error.
        .               /// If the next token is not the given word, signals an error.
        .               /// Otherwise, eats it.
    4,080 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
        .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
    3,264 ( 0.00%)      }
        .           
        .               /// Is the given keyword `kw` followed by a non-reserved identifier?
  138,000 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
   69,000 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
  155,250 ( 0.00%)      }
        .           
  285,018 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
  103,118 ( 0.00%)          if ok {
        .                       true
        .                   } else {
   57,248 ( 0.00%)              self.expected_tokens.push(typ);
        .                       false
        .                   }
  285,018 ( 0.00%)      }
        .           
        .               fn check_ident(&mut self) -> bool {
   53,132 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
        .               }
        .           
   87,688 ( 0.00%)      fn check_path(&mut self) -> bool {
  208,795 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
  109,610 ( 0.00%)      }
        .           
        .               fn check_type(&mut self) -> bool {
   34,752 ( 0.00%)          self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
        .               }
        .           
        .               fn check_const_arg(&mut self) -> bool {
   30,960 ( 0.00%)          self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
        .               }
        .           
   46,359 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
   25,755 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
        .                       && self.look_ahead(dist + 1, |t| match t.kind {
        .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
        .                           token::OpenDelim(DelimToken::Brace) => true,
        .                           _ => false,
        .                       })
   46,359 ( 0.00%)      }
        .           
        .               /// Checks to see if the next token is either `+` or `+=`.
        .               /// Otherwise returns `false`.
        .               fn check_plus(&mut self) -> bool {
   31,280 ( 0.00%)          self.check_or_expected(
   15,640 ( 0.00%)              self.token.is_like_plus(),
   15,640 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
        .                   )
        .               }
        .           
        .               /// Eats the expected token if it's present possibly breaking
        .               /// compound tokens like multi-character operators in process.
        .               /// Returns `true` if the token was eaten.
  384,456 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
  224,266 ( 0.00%)          if self.token.kind == expected {
   16,100 ( 0.00%)              self.bump();
        .                       return true;
        .                   }
  119,940 ( 0.00%)          match self.token.kind.break_two_token_op() {
    2,197 ( 0.00%)              Some((first, second)) if first == expected => {
      952 ( 0.00%)                  let first_span = self.sess.source_map().start_point(self.token.span);
    1,190 ( 0.00%)                  let second_span = self.token.span.with_lo(first_span.hi());
    2,142 ( 0.00%)                  self.token = Token::new(first, first_span);
        .                           // Keep track of this token - if we end token capturing now,
        .                           // we'll want to append this token to the captured stream.
        .                           //
        .                           // If we consume any additional tokens, then this token
        .                           // is not needed (we'll capture the entire 'glued' token),
        .                           // and `next_tok` will set this field to `None`
      238 ( 0.00%)                  self.token_cursor.break_last_token = true;
        .                           // Use the spacing of the glued token as the spacing
        .                           // of the unglued second token.
    3,332 ( 0.00%)                  self.bump_with((Token::new(second, second_span), self.token_spacing));
        .                           true
        .                       }
        .                       _ => {
   71,250 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
        .                           false
        .                       }
        .                   }
  383,519 ( 0.00%)      }
        .           
        .               /// Eats `+` possibly breaking tokens like `+=` in process.
        .               fn eat_plus(&mut self) -> bool {
    7,628 ( 0.00%)          self.break_and_eat(token::BinOp(token::Plus))
        .               }
        .           
        .               /// Eats `&` possibly breaking tokens like `&&` in process.
        .               /// Signals an error if `&` is not eaten.
        .               fn expect_and(&mut self) -> PResult<'a, ()> {
   10,086 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `|` possibly breaking tokens like `||` in process.
        .               /// Signals an error if `|` was not eaten.
        .               fn expect_or(&mut self) -> PResult<'a, ()> {
    1,452 ( 0.00%)          if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `<` possibly breaking tokens like `<<` in process.
   20,022 ( 0.00%)      fn eat_lt(&mut self) -> bool {
   80,252 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
   52,794 ( 0.00%)          if ate {
        .                       // See doc comment for `unmatched_angle_bracket_count`.
   12,128 ( 0.00%)              self.unmatched_angle_bracket_count += 1;
   12,805 ( 0.00%)              self.max_angle_bracket_count += 1;
        .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
        .                   }
        .                   ate
   20,022 ( 0.00%)      }
        .           
        .               /// Eats `<` possibly breaking tokens like `<<` in process.
        .               /// Signals an error if `<` was not eaten.
        .               fn expect_lt(&mut self) -> PResult<'a, ()> {
        .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `>` possibly breaking tokens like `>>` in process.
        .               /// Signals an error if `>` was not eaten.
        .               fn expect_gt(&mut self) -> PResult<'a, ()> {
   18,060 ( 0.00%)          if self.break_and_eat(token::Gt) {
        .                       // See doc comment for `unmatched_angle_bracket_count`.
    9,030 ( 0.00%)              if self.unmatched_angle_bracket_count > 0 {
    6,020 ( 0.00%)                  self.unmatched_angle_bracket_count -= 1;
        .                           debug!("expect_gt: (decrement) count={:?}", self.unmatched_angle_bracket_count);
        .                       }
        .                       Ok(())
        .                   } else {
        .                       self.unexpected()
        .                   }
        .               }
        .           
        .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
        .                   kets.iter().any(|k| match expect {
   64,440 ( 0.00%)              TokenExpectType::Expect => self.check(k),
    4,182 ( 0.00%)              TokenExpectType::NoExpect => self.token == **k,
        .                   })
        .               }
        .           
        .               fn parse_seq_to_before_tokens<T>(
        .                   &mut self,
        .                   kets: &[&TokenKind],
        .                   sep: SeqSep,
        .                   expect: TokenExpectType,
-- line 759 ----------------------------------------
-- line 761 ----------------------------------------
        .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
        .                   let mut first = true;
        .                   let mut recovered = false;
        .                   let mut trailing = false;
        .                   let mut v = vec![];
        .                   let unclosed_delims = !self.unclosed_delims.is_empty();
        .           
        .                   while !self.expect_any_with_type(kets, expect) {
   72,057 ( 0.00%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
        .                           break;
        .                       }
   53,309 ( 0.00%)              if let Some(ref t) = sep.sep {
   61,190 ( 0.00%)                  if first {
        .                               first = false;
        .                           } else {
   28,565 ( 0.00%)                      match self.expect(t) {
        .                                   Ok(false) => {
        .                                       self.current_closure.take();
        .                                   }
        .                                   Ok(true) => {
        .                                       self.current_closure.take();
        .                                       recovered = true;
        .                                       break;
        .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
        .                                               e.cancel();
        .                                               break;
        .                                           }
        .                                       }
        .                                   }
        .                               }
        .                           }
        .                       }
   25,062 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
        .                           trailing = true;
        .                           break;
        .                       }
        .           
   14,610 ( 0.00%)              let t = f(self)?;
   16,933 ( 0.00%)              v.push(t);
        .                   }
        .           
   48,768 ( 0.00%)          Ok((v, trailing, recovered))
        .               }
        .           
        .               fn recover_missing_braces_around_closure_body(
        .                   &mut self,
        .                   closure_spans: ClosureSpans,
        .                   mut expect_err: DiagnosticBuilder<'_>,
        .               ) -> PResult<'a, ()> {
        .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
        .               fn parse_seq_to_before_end<T>(
        .                   &mut self,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
   49,648 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
        .               }
        .           
        .               /// Parses a sequence, including the closing delimiter. The function
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
   83,060 ( 0.00%)      fn parse_seq_to_end<T>(
        .                   &mut self,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
   32,744 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
   15,056 ( 0.00%)          if !recovered {
        .                       self.eat(ket);
        .                   }
   87,336 ( 0.00%)          Ok((val, trailing))
   66,448 ( 0.00%)      }
        .           
        .               /// Parses a sequence, including the closing delimiter. The function
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
        .               fn parse_unspanned_seq<T>(
        .                   &mut self,
        .                   bra: &TokenKind,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
   30,249 ( 0.00%)          self.expect(bra)?;
   66,448 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
        .               }
        .           
        .               fn parse_delim_comma_seq<T>(
        .                   &mut self,
        .                   delim: DelimToken,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
        .                   self.parse_unspanned_seq(
   11,658 ( 0.00%)              &token::OpenDelim(delim),
   15,042 ( 0.00%)              &token::CloseDelim(delim),
        .                       SeqSep::trailing_allowed(token::Comma),
        .                       f,
        .                   )
        .               }
        .           
        .               fn parse_paren_comma_seq<T>(
        .                   &mut self,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
        .                   self.parse_delim_comma_seq(token::Paren, f)
        .               }
        .           
        .               /// Advance the parser by one token using provided token as the next one.
5,047,549 ( 0.02%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
        .                   // Bumping after EOF is a bad sign, usually an infinite loop.
2,329,638 ( 0.01%)          if self.prev_token.kind == TokenKind::Eof {
        .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
        .                       self.span_bug(self.token.span, msg);
        .                   }
        .           
        .                   // Update the current and previous tokens.
1,553,092 ( 0.01%)          self.prev_token = mem::replace(&mut self.token, next_token);
  388,273 ( 0.00%)          self.token_spacing = next_spacing;
        .           
        .                   // Diagnostics.
  388,273 ( 0.00%)          self.expected_tokens.clear();
        .               }
        .           
        .               /// Advance the parser by one token.
3,104,280 ( 0.02%)      pub fn bump(&mut self) {
1,552,140 ( 0.01%)          let next_token = self.next_tok(self.token.span);
2,328,210 ( 0.01%)          self.bump_with(next_token);
3,104,280 ( 0.02%)      }
        .           
        .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
        .               /// When `dist == 0` then the current token is looked at.
    1,040 ( 0.00%)      pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
   16,708 ( 0.00%)          if dist == 0 {
    6,999 ( 0.00%)              return looker(&self.token);
        .                   }
        .           
   80,721 ( 0.00%)          let frame = &self.token_cursor.frame;
   88,734 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
        .                       let all_normal = (0..dist).all(|i| {
  222,961 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
  287,007 ( 0.00%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
        .                       });
        .                       if all_normal {
  364,268 ( 0.00%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
  122,350 ( 0.00%)                      Some(tree) => match tree {
   57,425 ( 0.00%)                          TokenTree::Token(token) => looker(token),
        .                                   TokenTree::Delimited(dspan, delim, _) => {
   31,786 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
        .                                   }
        .                               },
   86,343 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
        .                           };
        .                       }
        .                   }
        .           
        .                   let mut cursor = self.token_cursor.clone();
        .                   let mut i = 0;
   15,818 ( 0.00%)          let mut token = Token::dummy();
   11,150 ( 0.00%)          while i < dist {
  117,238 ( 0.00%)              token = cursor.next().0;
   50,698 ( 0.00%)              if matches!(
   32,178 ( 0.00%)                  token.kind,
        .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
        .                       ) {
        .                           continue;
        .                       }
    5,700 ( 0.00%)              i += 1;
        .                   }
    2,269 ( 0.00%)          return looker(&token);
    1,152 ( 0.00%)      }
        .           
        .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
   64,845 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
   16,972 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
   64,845 ( 0.00%)      }
        .           
        .               /// Parses asyncness: `async` or nothing.
        .               fn parse_asyncness(&mut self) -> Async {
        .                   if self.eat_keyword(kw::Async) {
      955 ( 0.00%)              let span = self.prev_token.uninterpolated_span();
        .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
        .                   } else {
        .                       Async::No
        .                   }
        .               }
        .           
        .               /// Parses unsafety: `unsafe` or nothing.
    4,232 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
        .                   if self.eat_keyword(kw::Unsafe) {
        .                       Unsafe::Yes(self.prev_token.uninterpolated_span())
        .                   } else {
        .                       Unsafe::No
        .                   }
   16,928 ( 0.00%)      }
        .           
        .               /// Parses constness: `const` or nothing.
   43,128 ( 0.00%)      fn parse_constness(&mut self) -> Const {
        .                   // Avoid const blocks to be parsed as const items
   13,495 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
        .                       && self.eat_keyword(kw::Const)
        .                   {
      230 ( 0.00%)              Const::Yes(self.prev_token.uninterpolated_span())
        .                   } else {
        .                       Const::No
        .                   }
   75,474 ( 0.00%)      }
        .           
        .               /// Parses inline const expressions.
        .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
        .                   if pat {
        .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
        .                   } else {
        .                       self.sess.gated_spans.gate(sym::inline_const, span);
        .                   }
-- line 1104 ----------------------------------------
-- line 1108 ----------------------------------------
        .                       id: DUMMY_NODE_ID,
        .                       value: self.mk_expr(blk.span, ExprKind::Block(blk, None), AttrVec::new()),
        .                   };
        .                   let blk_span = anon_const.value.span;
        .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
        .               }
        .           
        .               /// Parses mutability (`mut` or nothing).
      164 ( 0.00%)      fn parse_mutability(&mut self) -> Mutability {
        .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
    3,612 ( 0.00%)      }
        .           
        .               /// Possibly parses mutability (`const` or `mut`).
       36 ( 0.00%)      fn parse_const_or_mut(&mut self) -> Option<Mutability> {
        .                   if self.eat_keyword(kw::Mut) {
        .                       Some(Mutability::Mut)
        .                   } else if self.eat_keyword(kw::Const) {
        .                       Some(Mutability::Not)
        .                   } else {
        .                       None
        .                   }
       36 ( 0.00%)      }
        .           
        .               fn parse_field_name(&mut self) -> PResult<'a, Ident> {
    2,194 ( 0.00%)          if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) = self.token.kind
        .                   {
        .                       self.expect_no_suffix(self.token.span, "a tuple index", suffix);
        .                       self.bump();
        .                       Ok(Ident::new(symbol, self.prev_token.span))
        .                   } else {
    3,291 ( 0.00%)              self.parse_ident_common(true)
        .                   }
        .               }
        .           
        .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
    9,652 ( 0.00%)          self.parse_mac_args_common(true).map(P)
        .               }
        .           
        .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
   17,550 ( 0.00%)          self.parse_mac_args_common(false)
        .               }
        .           
   85,689 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
   76,168 ( 0.00%)          Ok(
   69,247 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
   16,332 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
   16,131 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
        .                       {
   18,716 ( 0.00%)                  match self.parse_token_tree() {
   23,395 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
        .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
        .                               {
    9,358 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
        .                               }
        .                               _ => unreachable!(),
        .                           }
    9,684 ( 0.00%)              } else if !delimited_only {
        .                           if self.eat(&token::Eq) {
    4,244 ( 0.00%)                      let eq_span = self.prev_token.span;
        .           
        .                               // Collect tokens because they are used during lowering to HIR.
    4,244 ( 0.00%)                      let expr = self.parse_expr_force_collect()?;
    4,244 ( 0.00%)                      let span = expr.span;
        .           
   21,220 ( 0.00%)                      let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
   38,196 ( 0.00%)                      MacArgs::Eq(eq_span, Token::new(token_kind, span))
        .                           } else {
        .                               MacArgs::Empty
        .                           }
        .                       } else {
        .                           return self.unexpected();
        .                       },
        .                   )
   66,647 ( 0.00%)      }
        .           
        .               fn parse_or_use_outer_attributes(
        .                   &mut self,
        .                   already_parsed_attrs: Option<AttrWrapper>,
        .               ) -> PResult<'a, AttrWrapper> {
   64,999 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
        .                       Ok(attrs)
        .                   } else {
   40,126 ( 0.00%)              self.parse_outer_attributes()
        .                   }
        .               }
        .           
        .               /// Parses a single token tree from the input.
  168,528 ( 0.00%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
  122,374 ( 0.00%)          match self.token.kind {
        .                       token::OpenDelim(..) => {
        .                           let depth = self.token_cursor.stack.len();
        .           
        .                           // We keep advancing the token cursor until we hit
        .                           // the matching `CloseDelim` token.
  316,558 ( 0.00%)                  while !(depth == self.token_cursor.stack.len()
        .                               && matches!(self.token.kind, token::CloseDelim(_)))
        .                           {
        .                               // Advance one token at a time, so `TokenCursor::next()`
        .                               // can capture these tokens if necessary.
  222,188 ( 0.00%)                      self.bump();
        .                           }
        .                           // We are still inside the frame corresponding
        .                           // to the delimited stream we captured, so grab
        .                           // the tokens from this frame.
        .                           let frame = &self.token_cursor.frame;
   12,544 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
   12,544 ( 0.00%)                  let span = frame.span;
    6,272 ( 0.00%)                  let delim = frame.delim;
        .                           // Consume close delimiter
   12,544 ( 0.00%)                  self.bump();
   31,360 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
        .                       }
        .                       token::CloseDelim(_) | token::Eof => unreachable!(),
        .                       _ => {
   29,588 ( 0.00%)                  self.bump();
   73,970 ( 0.00%)                  TokenTree::Token(self.prev_token.clone())
        .                       }
        .                   }
  147,462 ( 0.00%)      }
        .           
        .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
        .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
        .                   let mut tts = Vec::new();
        .                   while self.token != token::Eof {
        .                       tts.push(self.parse_token_tree());
        .                   }
        .                   Ok(tts)
        .               }
        .           
       32 ( 0.00%)      pub fn parse_tokens(&mut self) -> TokenStream {
        .                   let mut result = Vec::new();
        .                   loop {
       68 ( 0.00%)              match self.token.kind {
        .                           token::Eof | token::CloseDelim(..) => break,
       24 ( 0.00%)                  _ => result.push(self.parse_token_tree().into()),
        .                       }
        .                   }
       24 ( 0.00%)          TokenStream::new(result)
       32 ( 0.00%)      }
        .           
        .               /// Evaluates the closure with restrictions in place.
        .               ///
        .               /// Afters the closure is evaluated, restrictions are reset.
        .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
   23,174 ( 0.00%)          let old = self.restrictions;
   26,398 ( 0.00%)          self.restrictions = res;
        .                   let res = f(self);
   25,972 ( 0.00%)          self.restrictions = old;
        .                   res
        .               }
        .           
   73,736 ( 0.00%)      fn is_crate_vis(&self) -> bool {
   46,085 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
   82,953 ( 0.00%)      }
        .           
        .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
        .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
        .               /// If the following element can't be a tuple (i.e., it's a function definition), then
        .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
        .               /// so emit a proper diagnostic.
        .               // Public for rustfmt usage.
   73,930 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
   27,358 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
        .           
    6,233 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
   24,932 ( 0.00%)          if self.is_crate_vis() {
        .                       self.bump(); // `crate`
        .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
        .                       return Ok(Visibility {
        .                           span: self.prev_token.span,
        .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
        .                           tokens: None,
        .                       });
        .                   }
        .           
        .                   if !self.eat_keyword(kw::Pub) {
        .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
        .                       // keyword to grab a span from for inherited visibility; an empty span at the
        .                       // beginning of the current token would seem to be the "Schelling span".
    5,372 ( 0.00%)              return Ok(Visibility {
   16,116 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
        .                           kind: VisibilityKind::Inherited,
        .                           tokens: None,
        .                       });
        .                   }
      861 ( 0.00%)          let lo = self.prev_token.span;
        .           
    4,305 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
        .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
        .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
        .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
        .                       // by the following tokens.
      867 ( 0.00%)              if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
        .                       // account for `pub(crate::foo)`
        .                       {
        .                           // Parse `pub(crate)`.
      282 ( 0.00%)                  self.bump(); // `(`
      188 ( 0.00%)                  self.bump(); // `crate`
      282 ( 0.00%)                  self.expect(&token::CloseDelim(token::Paren))?; // `)`
       94 ( 0.00%)                  let vis = VisibilityKind::Crate(CrateSugar::PubCrate);
        .                           return Ok(Visibility {
      282 ( 0.00%)                      span: lo.to(self.prev_token.span),
        .                               kind: vis,
        .                               tokens: None,
        .                           });
       21 ( 0.00%)              } else if self.is_keyword_ahead(1, &[kw::In]) {
        .                           // Parse `pub(in path)`.
        .                           self.bump(); // `(`
        .                           self.bump(); // `in`
        .                           let path = self.parse_path(PathStyle::Mod)?; // `path`
        .                           self.expect(&token::CloseDelim(token::Paren))?; // `)`
        .                           let vis = VisibilityKind::Restricted { path: P(path), id: ast::DUMMY_NODE_ID };
        .                           return Ok(Visibility {
        .                               span: lo.to(self.prev_token.span),
        .                               kind: vis,
        .                               tokens: None,
        .                           });
       12 ( 0.00%)              } else if self.look_ahead(2, |t| t == &token::CloseDelim(token::Paren))
       15 ( 0.00%)                  && self.is_keyword_ahead(1, &[kw::Super, kw::SelfLower])
        .                       {
        .                           // Parse `pub(self)` or `pub(super)`.
        9 ( 0.00%)                  self.bump(); // `(`
        3 ( 0.00%)                  let path = self.parse_path(PathStyle::Mod)?; // `super`/`self`
        9 ( 0.00%)                  self.expect(&token::CloseDelim(token::Paren))?; // `)`
       33 ( 0.00%)                  let vis = VisibilityKind::Restricted { path: P(path), id: ast::DUMMY_NODE_ID };
        .                           return Ok(Visibility {
       12 ( 0.00%)                      span: lo.to(self.prev_token.span),
        .                               kind: vis,
        .                               tokens: None,
        .                           });
        .                       } else if let FollowedByType::No = fbt {
        .                           // Provide this diagnostic if a type cannot follow;
        .                           // in particular, if this is not a tuple struct.
        .                           self.recover_incorrect_vis_restriction()?;
        .                           // Emit diagnostic, but continue with public visibility.
        .                       }
        .                   }
        .           
    2,292 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
   66,537 ( 0.00%)      }
        .           
        .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
        .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
        .                   self.bump(); // `(`
        .                   let path = self.parse_path(PathStyle::Mod)?;
        .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
        .           
        .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
        .                       )
        .                       .emit();
        .           
        .                   Ok(())
        .               }
        .           
        .               /// Parses `extern string_literal?`.
        .               fn parse_extern(&mut self) -> Extern {
    1,373 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
        .               }
        .           
        .               /// Parses a string literal as an ABI spec.
        .               fn parse_abi(&mut self) -> Option<StrLit> {
        .                   match self.parse_str_lit() {
        .                       Ok(str_lit) => Some(str_lit),
        .                       Err(Some(lit)) => match lit.kind {
        .                           ast::LitKind::Err(_) => None,
-- line 1386 ----------------------------------------
-- line 1395 ----------------------------------------
        .                                   .emit();
        .                               None
        .                           }
        .                       },
        .                       Err(None) => None,
        .                   }
        .               }
        .           
   51,390 ( 0.00%)      pub fn collect_tokens_no_attrs<R: AstLike>(
        .                   &mut self,
        .                   f: impl FnOnce(&mut Self) -> PResult<'a, R>,
        .               ) -> PResult<'a, R> {
        .                   // The only reason to call `collect_tokens_no_attrs` is if you want tokens, so use
        .                   // `ForceCollect::Yes`
        .                   self.collect_tokens_trailing_token(
        .                       AttrWrapper::empty(),
        .                       ForceCollect::Yes,
    5,996 ( 0.00%)              |this, _attrs| Ok((f(this)?, TrailingToken::None)),
        .                   )
   51,390 ( 0.00%)      }
        .           
        .               /// `::{` or `::*`
  380,048 ( 0.00%)      fn is_import_coupler(&mut self) -> bool {
  190,024 ( 0.00%)          self.check(&token::ModSep)
        .                       && self.look_ahead(1, |t| {
  152,413 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
        .                       })
  357,975 ( 0.00%)      }
        .           
        .               pub fn clear_expected_tokens(&mut self) {
        .                   self.expected_tokens.clear();
        .               }
        .           }
        .           
        .           crate fn make_unclosed_delims_error(
        .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
        .                   err.span_label(sp, "closing delimiter possibly meant for this");
        .               }
        .               if let Some(sp) = unmatched.unclosed_span {
        .                   err.span_label(sp, "unclosed delimiter");
        .               }
        .               Some(err)
        .           }
        .           
  247,656 ( 0.00%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
  123,828 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
        .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
  123,828 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
        .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
        .                       e.emit();
        .                   }
        .               }
  247,656 ( 0.00%)  }
        .           
        .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
        .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
        .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
        .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
        .           /// `AttrAnnotatedTokenTree::Delimited` tokens
        .           #[derive(Debug, Clone)]
        .           pub enum FlatToken {
-- line 1474 ----------------------------------------

2,476,307 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs
--------------------------------------------------------------------------------
Ir                  

-- line 28 ----------------------------------------
         .           
         .               /// Returns a static string we can use for printouts.
         .               fn tag(&self) -> &'static str;
         .           
         .               /// Returns `true` if the value `a` is the "expected" type in the
         .               /// relation. Just affects error messages.
         .               fn a_is_expected(&self) -> bool;
         .           
   232,022 ( 0.00%)      fn with_cause<F, R>(&mut self, _cause: Cause, f: F) -> R
         .               where
         .                   F: FnOnce(&mut Self) -> R,
         .               {
         .                   f(self)
   203,824 ( 0.00%)      }
         .           
         .               /// Generic relation routine suitable for most anything.
 1,364,924 ( 0.01%)      fn relate<T: Relate<'tcx>>(&mut self, a: T, b: T) -> RelateResult<'tcx, T> {
 3,763,820 ( 0.02%)          Relate::relate(self, a, b)
 1,133,615 ( 0.01%)      }
         .           
         .               /// Relate the two substitutions for the given item. The default
         .               /// is to look up the variance for the item and proceed
         .               /// accordingly.
   353,810 ( 0.00%)      fn relate_item_substs(
         .                   &mut self,
         .                   item_def_id: DefId,
         .                   a_subst: SubstsRef<'tcx>,
         .                   b_subst: SubstsRef<'tcx>,
         .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
         .                   debug!(
         .                       "relate_item_substs(item_def_id={:?}, a_subst={:?}, b_subst={:?})",
         .                       item_def_id, a_subst, b_subst
         .                   );
         .           
         .                   let tcx = self.tcx();
         .                   let opt_variances = tcx.variances_of(item_def_id);
   141,524 ( 0.00%)          relate_substs(self, Some((item_def_id, opt_variances)), a_subst, b_subst)
   318,424 ( 0.00%)      }
         .           
         .               /// Switch variance for the purpose of relating `a` and `b`.
         .               fn relate_with_variance<T: Relate<'tcx>>(
         .                   &mut self,
         .                   variance: ty::Variance,
         .                   info: ty::VarianceDiagInfo<'tcx>,
         .                   a: T,
         .                   b: T,
-- line 73 ----------------------------------------
-- line 108 ----------------------------------------
         .                   a: Self,
         .                   b: Self,
         .               ) -> RelateResult<'tcx, Self>;
         .           }
         .           
         .           ///////////////////////////////////////////////////////////////////////////
         .           // Relate impls
         .           
   478,921 ( 0.00%)  pub fn relate_type_and_mut<'tcx, R: TypeRelation<'tcx>>(
         .               relation: &mut R,
         .               a: ty::TypeAndMut<'tcx>,
         .               b: ty::TypeAndMut<'tcx>,
         .               base_ty: Ty<'tcx>,
         .           ) -> RelateResult<'tcx, ty::TypeAndMut<'tcx>> {
         .               debug!("{}.mts({:?}, {:?})", relation.tag(), a, b);
    88,190 ( 0.00%)      if a.mutbl != b.mutbl {
     1,548 ( 0.00%)          Err(TypeError::Mutability)
         .               } else {
         .                   let mutbl = a.mutbl;
         .                   let (variance, info) = match mutbl {
         .                       ast::Mutability::Not => (ty::Covariant, ty::VarianceDiagInfo::None),
         .                       ast::Mutability::Mut => {
         .                           (ty::Invariant, ty::VarianceDiagInfo::Invariant { ty: base_ty, param_index: 0 })
         .                       }
         .                   };
    31,277 ( 0.00%)          let ty = relation.relate_with_variance(variance, info, a.ty, b.ty)?;
   214,830 ( 0.00%)          Ok(ty::TypeAndMut { ty, mutbl })
         .               }
   480,662 ( 0.00%)  }
         .           
     8,115 ( 0.00%)  pub fn relate_substs<'tcx, R: TypeRelation<'tcx>>(
         .               relation: &mut R,
         .               variances: Option<(DefId, &[ty::Variance])>,
         .               a_subst: SubstsRef<'tcx>,
         .               b_subst: SubstsRef<'tcx>,
         .           ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
 1,058,306 ( 0.01%)      let tcx = relation.tcx();
   497,303 ( 0.00%)      let mut cached_ty = None;
         .           
         .               let params = iter::zip(a_subst, b_subst).enumerate().map(|(i, (a, b))| {
 3,223,226 ( 0.02%)          let (variance, variance_info) = match variances {
   138,858 ( 0.00%)              Some((ty_def_id, variances)) => {
   208,286 ( 0.00%)                  let variance = variances[i];
    69,429 ( 0.00%)                  let variance_info = if variance == ty::Invariant {
         .                               let ty =
    25,563 ( 0.00%)                          cached_ty.get_or_insert_with(|| tcx.type_of(ty_def_id).subst(tcx, a_subst));
         .                               ty::VarianceDiagInfo::Invariant { ty, param_index: i.try_into().unwrap() }
         .                           } else {
         .                               ty::VarianceDiagInfo::default()
         .                           };
         .                           (variance, variance_info)
         .                       }
         .                       None => (ty::Invariant, ty::VarianceDiagInfo::default()),
         .                   };
   670,053 ( 0.00%)          relation.relate_with_variance(variance, variance_info, a, b)
         .               });
         .           
         .               tcx.mk_substs(params)
     9,738 ( 0.00%)  }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {
   100,841 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::FnSig<'tcx>,
         .                   b: ty::FnSig<'tcx>,
         .               ) -> RelateResult<'tcx, ty::FnSig<'tcx>> {
         .                   let tcx = relation.tcx();
         .           
    46,542 ( 0.00%)          if a.c_variadic != b.c_variadic {
         .                       return Err(TypeError::VariadicMismatch(expected_found(
         .                           relation,
         .                           a.c_variadic,
         .                           b.c_variadic,
         .                       )));
         .                   }
    33,886 ( 0.00%)          let unsafety = relation.relate(a.unsafety, b.unsafety)?;
         .                   let abi = relation.relate(a.abi, b.abi)?;
         .           
    68,384 ( 0.00%)          if a.inputs().len() != b.inputs().len() {
         .                       return Err(TypeError::ArgCount);
         .                   }
         .           
    69,813 ( 0.00%)          let inputs_and_output = iter::zip(a.inputs(), b.inputs())
    30,509 ( 0.00%)              .map(|(&a, &b)| ((a, b), false))
    62,056 ( 0.00%)              .chain(iter::once(((a.output(), b.output()), true)))
    12,871 ( 0.00%)              .map(|((a, b), is_output)| {
    12,871 ( 0.00%)                  if is_output {
     5,384 ( 0.00%)                      relation.relate(a, b)
         .                           } else {
         .                               relation.relate_with_variance(
         .                                   ty::Contravariant,
         .                                   ty::VarianceDiagInfo::default(),
         .                                   a,
         .                                   b,
         .                               )
         .                           }
         .                       })
         .                       .enumerate()
    36,640 ( 0.00%)              .map(|(i, r)| match r {
         .                           Err(TypeError::Sorts(exp_found) | TypeError::ArgumentSorts(exp_found, _)) => {
         .                               Err(TypeError::ArgumentSorts(exp_found, i))
         .                           }
         .                           Err(TypeError::Mutability | TypeError::ArgumentMutability(_)) => {
         .                               Err(TypeError::ArgumentMutability(i))
         .                           }
    70,003 ( 0.00%)                  r => r,
         .                       });
    55,728 ( 0.00%)          Ok(ty::FnSig {
         .                       inputs_and_output: tcx.mk_type_list(inputs_and_output)?,
     7,757 ( 0.00%)              c_variadic: a.c_variadic,
         .                       unsafety,
         .                       abi,
         .                   })
    69,813 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::BoundConstness {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::BoundConstness,
         .                   b: ty::BoundConstness,
         .               ) -> RelateResult<'tcx, ty::BoundConstness> {
         5 ( 0.00%)          if a != b {
         .                       Err(TypeError::ConstnessMismatch(expected_found(relation, a, b)))
         .                   } else {
         .                       Ok(a)
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ast::Unsafety {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ast::Unsafety,
         .                   b: ast::Unsafety,
         .               ) -> RelateResult<'tcx, ast::Unsafety> {
     7,757 ( 0.00%)          if a != b {
         .                       Err(TypeError::UnsafetyMismatch(expected_found(relation, a, b)))
         .                   } else {
         .                       Ok(a)
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for abi::Abi {
-- line 252 ----------------------------------------
-- line 255 ----------------------------------------
         .                   a: abi::Abi,
         .                   b: abi::Abi,
         .               ) -> RelateResult<'tcx, abi::Abi> {
         .                   if a == b { Ok(a) } else { Err(TypeError::AbiMismatch(expected_found(relation, a, b))) }
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::ProjectionTy<'tcx> {
   241,127 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::ProjectionTy<'tcx>,
         .                   b: ty::ProjectionTy<'tcx>,
         .               ) -> RelateResult<'tcx, ty::ProjectionTy<'tcx>> {
    67,048 ( 0.00%)          if a.item_def_id != b.item_def_id {
       174 ( 0.00%)              Err(TypeError::ProjectionMismatched(expected_found(
         .                           relation,
         .                           a.item_def_id,
         .                           b.item_def_id,
         .                       )))
         .                   } else {
         .                       let substs = relation.relate(a.substs, b.substs)?;
    84,768 ( 0.00%)              Ok(ty::ProjectionTy { item_def_id: a.item_def_id, substs: &substs })
         .                   }
   172,150 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::ExistentialProjection<'tcx> {
   377,146 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::ExistentialProjection<'tcx>,
         .                   b: ty::ExistentialProjection<'tcx>,
         .               ) -> RelateResult<'tcx, ty::ExistentialProjection<'tcx>> {
   246,813 ( 0.00%)          if a.item_def_id != b.item_def_id {
         .                       Err(TypeError::ProjectionMismatched(expected_found(
         .                           relation,
         .                           a.item_def_id,
         .                           b.item_def_id,
         .                       )))
         .                   } else {
         .                       let term = relation.relate_with_variance(
         .                           ty::Invariant,
         .                           ty::VarianceDiagInfo::default(),
   106,241 ( 0.00%)                  a.term,
   137,189 ( 0.00%)                  b.term,
         .                       )?;
    23,996 ( 0.00%)              let substs = relation.relate_with_variance(
         .                           ty::Invariant,
         .                           ty::VarianceDiagInfo::default(),
    35,259 ( 0.00%)                  a.substs,
    35,259 ( 0.00%)                  b.substs,
         .                       )?;
   346,580 ( 0.00%)              Ok(ty::ExistentialProjection { item_def_id: a.item_def_id, substs, term })
         .                   }
   317,331 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::TraitRef<'tcx> {
 1,885,195 ( 0.01%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::TraitRef<'tcx>,
         .                   b: ty::TraitRef<'tcx>,
         .               ) -> RelateResult<'tcx, ty::TraitRef<'tcx>> {
         .                   // Different traits cannot be related.
   404,948 ( 0.00%)          if a.def_id != b.def_id {
       753 ( 0.00%)              Err(TypeError::Traits(expected_found(relation, a.def_id, b.def_id)))
         .                   } else {
   134,899 ( 0.00%)              let substs = relate_substs(relation, None, a.substs, b.substs)?;
   346,060 ( 0.00%)              Ok(ty::TraitRef { def_id: a.def_id, substs })
         .                   }
 1,211,756 ( 0.01%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::ExistentialTraitRef<'tcx> {
    12,562 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::ExistentialTraitRef<'tcx>,
         .                   b: ty::ExistentialTraitRef<'tcx>,
         .               ) -> RelateResult<'tcx, ty::ExistentialTraitRef<'tcx>> {
         .                   // Different traits cannot be related.
    88,227 ( 0.00%)          if a.def_id != b.def_id {
         .                       Err(TypeError::Traits(expected_found(relation, a.def_id, b.def_id)))
         .                   } else {
    33,774 ( 0.00%)              let substs = relate_substs(relation, None, a.substs, b.substs)?;
    53,086 ( 0.00%)              Ok(ty::ExistentialTraitRef { def_id: a.def_id, substs })
         .                   }
     7,994 ( 0.00%)      }
         .           }
         .           
         .           #[derive(Copy, Debug, Clone, TypeFoldable)]
         .           struct GeneratorWitness<'tcx>(&'tcx ty::List<Ty<'tcx>>);
         .           
         .           impl<'tcx> Relate<'tcx> for GeneratorWitness<'tcx> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: GeneratorWitness<'tcx>,
         .                   b: GeneratorWitness<'tcx>,
         .               ) -> RelateResult<'tcx, GeneratorWitness<'tcx>> {
     9,708 ( 0.00%)          assert_eq!(a.0.len(), b.0.len());
         .                   let tcx = relation.tcx();
         .                   let types = tcx.mk_type_list(iter::zip(a.0, b.0).map(|(a, b)| relation.relate(a, b)))?;
         .                   Ok(GeneratorWitness(types))
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for Ty<'tcx> {
         .               #[inline]
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: Ty<'tcx>,
         .                   b: Ty<'tcx>,
         .               ) -> RelateResult<'tcx, Ty<'tcx>> {
 1,921,039 ( 0.01%)          relation.tys(a, b)
         .               }
         .           }
         .           
         .           /// The main "type relation" routine. Note that this does not handle
         .           /// inference artifacts, so you should filter those out before calling
         .           /// it.
 4,619,568 ( 0.02%)  pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(
         .               relation: &mut R,
         .               a: Ty<'tcx>,
         .               b: Ty<'tcx>,
         .           ) -> RelateResult<'tcx, Ty<'tcx>> {
         .               let tcx = relation.tcx();
         .               debug!("super_relate_tys: a={:?} b={:?}", a, b);
10,359,714 ( 0.05%)      match (a.kind(), b.kind()) {
         .                   (&ty::Infer(_), _) | (_, &ty::Infer(_)) => {
         .                       // The caller should handle these cases!
         .                       bug!("var types encountered in super_relate_tys")
         .                   }
         .           
         .                   (ty::Bound(..), _) | (_, ty::Bound(..)) => {
         .                       bug!("bound types encountered in super_relate_tys")
         .                   }
-- line 388 ----------------------------------------
-- line 391 ----------------------------------------
         .           
         .                   (&ty::Never, _)
         .                   | (&ty::Char, _)
         .                   | (&ty::Bool, _)
         .                   | (&ty::Int(_), _)
         .                   | (&ty::Uint(_), _)
         .                   | (&ty::Float(_), _)
         .                   | (&ty::Str, _)
    17,274 ( 0.00%)              if a == b =>
         .                   {
         .                       Ok(a)
         .                   }
         .           
   253,424 ( 0.00%)          (&ty::Param(ref a_p), &ty::Param(ref b_p)) if a_p.index == b_p.index => Ok(a),
         .           
         .                   (ty::Placeholder(p1), ty::Placeholder(p2)) if p1 == p2 => Ok(a),
         .           
 2,634,366 ( 0.01%)          (&ty::Adt(a_def, a_substs), &ty::Adt(b_def, b_substs)) if a_def == b_def => {
   825,404 ( 0.00%)              let substs = relation.relate_item_substs(a_def.did, a_substs, b_substs)?;
         .                       Ok(tcx.mk_adt(a_def, substs))
         .                   }
         .           
         .                   (&ty::Foreign(a_id), &ty::Foreign(b_id)) if a_id == b_id => Ok(tcx.mk_foreign(a_id)),
         .           
   219,051 ( 0.00%)          (&ty::Dynamic(a_obj, a_region), &ty::Dynamic(b_obj, b_region)) => {
    59,386 ( 0.00%)              let region_bound = relation.with_cause(Cause::ExistentialRegionBound, |relation| {
         .                           relation.relate_with_variance(
         .                               ty::Contravariant,
         .                               ty::VarianceDiagInfo::default(),
    29,693 ( 0.00%)                      a_region,
         .                               b_region,
         .                           )
         .                       })?;
         .                       Ok(tcx.mk_dynamic(relation.relate(a_obj, b_obj)?, region_bound))
         .                   }
         .           
    12,640 ( 0.00%)          (&ty::Generator(a_id, a_substs, movability), &ty::Generator(b_id, b_substs, _))
    15,800 ( 0.00%)              if a_id == b_id =>
         .                   {
         .                       // All Generator types with the same id represent
         .                       // the (anonymous) type of the same generator expression. So
         .                       // all of their regions should be equated.
     6,336 ( 0.00%)              let substs = relation.relate(a_substs, b_substs)?;
         .                       Ok(tcx.mk_generator(a_id, substs, movability))
         .                   }
         .           
    12,315 ( 0.00%)          (&ty::GeneratorWitness(a_types), &ty::GeneratorWitness(b_types)) => {
         .                       // Wrap our types with a temporary GeneratorWitness struct
         .                       // inside the binder so we can related them
         .                       let a_types = a_types.map_bound(GeneratorWitness);
         .                       let b_types = b_types.map_bound(GeneratorWitness);
         .                       // Then remove the GeneratorWitness for the result
         .                       let types = relation.relate(a_types, b_types)?.map_bound(|witness| witness.0);
         .                       Ok(tcx.mk_generator_witness(types))
         .                   }
         .           
    41,736 ( 0.00%)          (&ty::Closure(a_id, a_substs), &ty::Closure(b_id, b_substs)) if a_id == b_id => {
         .                       // All Closure types with the same id represent
         .                       // the (anonymous) type of the same closure expression. So
         .                       // all of their regions should be equated.
    10,434 ( 0.00%)              let substs = relation.relate(a_substs, b_substs)?;
         .                       Ok(tcx.mk_closure(a_id, &substs))
         .                   }
         .           
       818 ( 0.00%)          (&ty::RawPtr(a_mt), &ty::RawPtr(b_mt)) => {
       185 ( 0.00%)              let mt = relate_type_and_mut(relation, a_mt, b_mt, a)?;
         .                       Ok(tcx.mk_ptr(mt))
         .                   }
         .           
   857,727 ( 0.00%)          (&ty::Ref(a_r, a_ty, a_mutbl), &ty::Ref(b_r, b_ty, b_mutbl)) => {
   364,875 ( 0.00%)              let r = relation.relate_with_variance(
         .                           ty::Contravariant,
         .                           ty::VarianceDiagInfo::default(),
         .                           a_r,
         .                           b_r,
         .                       )?;
         .                       let a_mt = ty::TypeAndMut { ty: a_ty, mutbl: a_mutbl };
         .                       let b_mt = ty::TypeAndMut { ty: b_ty, mutbl: b_mutbl };
   541,832 ( 0.00%)              let mt = relate_type_and_mut(relation, a_mt, b_mt, a)?;
         .                       Ok(tcx.mk_ref(r, mt))
         .                   }
         .           
    20,154 ( 0.00%)          (&ty::Array(a_t, sz_a), &ty::Array(b_t, sz_b)) => {
     7,773 ( 0.00%)              let t = relation.relate(a_t, b_t)?;
     8,038 ( 0.00%)              match relation.relate(sz_a, sz_b) {
    10,713 ( 0.00%)                  Ok(sz) => Ok(tcx.mk_ty(ty::Array(t, sz))),
         .                           Err(err) => {
         .                               // Check whether the lengths are both concrete/known values,
         .                               // but are unequal, for better diagnostics.
         .                               //
         .                               // It might seem dubious to eagerly evaluate these constants here,
         .                               // we however cannot end up with errors in `Relate` during both
         .                               // `type_of` and `predicates_of`. This means that evaluating the
         .                               // constants should not cause cycle errors here.
     2,240 ( 0.00%)                      let sz_a = sz_a.try_eval_usize(tcx, relation.param_env());
     1,344 ( 0.00%)                      let sz_b = sz_b.try_eval_usize(tcx, relation.param_env());
     2,688 ( 0.00%)                      match (sz_a, sz_b) {
     1,792 ( 0.00%)                          (Some(sz_a_val), Some(sz_b_val)) if sz_a_val != sz_b_val => Err(
         .                                       TypeError::FixedArraySize(expected_found(relation, sz_a_val, sz_b_val)),
         .                                   ),
         .                                   _ => Err(err),
         .                               }
         .                           }
         .                       }
         .                   }
         .           
    11,968 ( 0.00%)          (&ty::Slice(a_t), &ty::Slice(b_t)) => {
     2,318 ( 0.00%)              let t = relation.relate(a_t, b_t)?;
         .                       Ok(tcx.mk_slice(t))
         .                   }
         .           
    64,198 ( 0.00%)          (&ty::Tuple(as_), &ty::Tuple(bs)) => {
    64,198 ( 0.00%)              if as_.len() == bs.len() {
         .                           Ok(tcx.mk_tup(
   228,154 ( 0.00%)                      iter::zip(as_, bs).map(|(a, b)| relation.relate(a.expect_ty(), b.expect_ty())),
         .                           )?)
        51 ( 0.00%)              } else if !(as_.is_empty() || bs.is_empty()) {
         .                           Err(TypeError::TupleSize(expected_found(relation, as_.len(), bs.len())))
         .                       } else {
         .                           Err(TypeError::Sorts(expected_found(relation, a, b)))
         .                       }
         .                   }
         .           
     5,865 ( 0.00%)          (&ty::FnDef(a_def_id, a_substs), &ty::FnDef(b_def_id, b_substs))
     9,775 ( 0.00%)              if a_def_id == b_def_id =>
         .                   {
     7,820 ( 0.00%)              let substs = relation.relate_item_substs(a_def_id, a_substs, b_substs)?;
         .                       Ok(tcx.mk_fn_def(a_def_id, substs))
         .                   }
         .           
         .                   (&ty::FnPtr(a_fty), &ty::FnPtr(b_fty)) => {
    33,950 ( 0.00%)              let fty = relation.relate(a_fty, b_fty)?;
         .                       Ok(tcx.mk_fn_ptr(fty))
         .                   }
         .           
         .                   // these two are already handled downstream in case of lazy normalization
    73,340 ( 0.00%)          (&ty::Projection(a_data), &ty::Projection(b_data)) => {
         .                       let projection_ty = relation.relate(a_data, b_data)?;
         .                       Ok(tcx.mk_projection(projection_ty.item_def_id, projection_ty.substs))
         .                   }
         .           
     3,246 ( 0.00%)          (&ty::Opaque(a_def_id, a_substs), &ty::Opaque(b_def_id, b_substs))
     8,115 ( 0.00%)              if a_def_id == b_def_id =>
         .                   {
     9,738 ( 0.00%)              let substs = relate_substs(relation, None, a_substs, b_substs)?;
         .                       Ok(tcx.mk_opaque(a_def_id, substs))
         .                   }
         .           
         .                   _ => Err(TypeError::Sorts(expected_found(relation, a, b))),
         .               }
 5,197,014 ( 0.03%)  }
         .           
         .           /// The main "const relation" routine. Note that this does not handle
         .           /// inference artifacts, so you should filter those out before calling
         .           /// it.
    13,430 ( 0.00%)  pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(
         .               relation: &mut R,
         .               a: &'tcx ty::Const<'tcx>,
         .               b: &'tcx ty::Const<'tcx>,
         .           ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
         .               debug!("{}.super_relate_consts(a = {:?}, b = {:?})", relation.tag(), a, b);
         .               let tcx = relation.tcx();
         .           
         .               // FIXME(oli-obk): once const generics can have generic types, this assertion
         .               // will likely get triggered. Move to `normalize_erasing_regions` at that point.
     2,686 ( 0.00%)      let a_ty = tcx.erase_regions(a.ty);
     2,686 ( 0.00%)      let b_ty = tcx.erase_regions(b.ty);
     1,343 ( 0.00%)      if a_ty != b_ty {
         .                   relation.tcx().sess.delay_span_bug(
         .                       DUMMY_SP,
         .                       &format!("cannot relate constants of different types: {} != {}", a_ty, b_ty),
         .                   );
         .               }
         .           
         .               let eagerly_eval = |x: &'tcx ty::Const<'tcx>| x.eval(tcx, relation.param_env());
     1,343 ( 0.00%)      let a = eagerly_eval(a);
     2,686 ( 0.00%)      let b = eagerly_eval(b);
         .           
         .               // Currently, the values that can be unified are primitive types,
         .               // and those that derive both `PartialEq` and `Eq`, corresponding
         .               // to structural-match types.
    14,777 ( 0.00%)      let is_match = match (a.val, b.val) {
         .                   (ty::ConstKind::Infer(_), _) | (_, ty::ConstKind::Infer(_)) => {
         .                       // The caller should handle these cases!
         .                       bug!("var types encountered in super_relate_consts: {:?} {:?}", a, b)
         .                   }
         .           
         .                   (ty::ConstKind::Error(_), _) => return Ok(a),
         .                   (_, ty::ConstKind::Error(_)) => return Ok(b),
         .           
-- line 580 ----------------------------------------
-- line 608 ----------------------------------------
         .                               substs,
         .                               promoted: au.promoted,
         .                           }),
         .                           ty: a.ty,
         .                       }));
         .                   }
         .                   _ => false,
         .               };
     7,604 ( 0.00%)      if is_match { Ok(a) } else { Err(TypeError::ConstMismatch(expected_found(relation, a, b))) }
    12,087 ( 0.00%)  }
         .           
         .           fn check_const_value_eq<'tcx, R: TypeRelation<'tcx>>(
         .               relation: &mut R,
         .               a_val: ConstValue<'tcx>,
         .               b_val: ConstValue<'tcx>,
         .               // FIXME(oli-obk): these arguments should go away with valtrees
         .               a: &'tcx ty::Const<'tcx>,
         .               b: &'tcx ty::Const<'tcx>,
         .               // FIXME(oli-obk): this should just be `bool` with valtrees
         .           ) -> RelateResult<'tcx, bool> {
     1,341 ( 0.00%)      let tcx = relation.tcx();
    14,751 ( 0.00%)      Ok(match (a_val, b_val) {
    29,502 ( 0.00%)          (ConstValue::Scalar(Scalar::Int(a_val)), ConstValue::Scalar(Scalar::Int(b_val))) => {
     1,341 ( 0.00%)              a_val == b_val
         .                   }
         .                   (
         .                       ConstValue::Scalar(Scalar::Ptr(a_val, _a_size)),
         .                       ConstValue::Scalar(Scalar::Ptr(b_val, _b_size)),
         .                   ) => {
         .                       a_val == b_val
         .                           || match (tcx.global_alloc(a_val.provenance), tcx.global_alloc(b_val.provenance)) {
         .                               (GlobalAlloc::Function(a_instance), GlobalAlloc::Function(b_instance)) => {
-- line 639 ----------------------------------------
-- line 672 ----------------------------------------
         .                       }
         .                   }
         .           
         .                   _ => false,
         .               })
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>> {
   319,340 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: Self,
         .                   b: Self,
         .               ) -> RelateResult<'tcx, Self> {
    31,934 ( 0.00%)          let tcx = relation.tcx();
         .           
         .                   // FIXME: this is wasteful, but want to do a perf run to see how slow it is.
         .                   // We need to perform this deduplication as we sometimes generate duplicate projections
         .                   // in `a`.
         .                   let mut a_v: Vec<_> = a.into_iter().collect();
         .                   let mut b_v: Vec<_> = b.into_iter().collect();
         .                   // `skip_binder` here is okay because `stable_cmp` doesn't look at binders
   294,524 ( 0.00%)          a_v.sort_by(|a, b| a.skip_binder().stable_cmp(tcx, &b.skip_binder()));
         .                   a_v.dedup();
         .                   b_v.sort_by(|a, b| a.skip_binder().stable_cmp(tcx, &b.skip_binder()));
         .                   b_v.dedup();
    95,802 ( 0.00%)          if a_v.len() != b_v.len() {
        48 ( 0.00%)              return Err(TypeError::ExistentialMismatch(expected_found(relation, a, b)));
         .                   }
         .           
   127,688 ( 0.00%)          let v = iter::zip(a_v, b_v).map(|(ep_a, ep_b)| {
         .                       use crate::ty::ExistentialPredicate::*;
   351,392 ( 0.00%)              match (ep_a.skip_binder(), ep_b.skip_binder()) {
   103,232 ( 0.00%)                  (Trait(a), Trait(b)) => Ok(ep_a
     6,113 ( 0.00%)                      .rebind(Trait(relation.relate(ep_a.rebind(a), ep_b.rebind(b))?.skip_binder()))),
   129,052 ( 0.00%)                  (Projection(a), Projection(b)) => Ok(ep_a.rebind(Projection(
   123,548 ( 0.00%)                      relation.relate(ep_a.rebind(a), ep_b.rebind(b))?.skip_binder(),
         .                           ))),
    11,004 ( 0.00%)                  (AutoTrait(a), AutoTrait(b)) if a == b => Ok(ep_a.rebind(AutoTrait(a))),
         .                           _ => Err(TypeError::ExistentialMismatch(expected_found(relation, a, b))),
         .                       }
         .                   });
    63,844 ( 0.00%)          tcx.mk_poly_existential_predicates(v)
   255,472 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::ClosureSubsts<'tcx> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::ClosureSubsts<'tcx>,
         .                   b: ty::ClosureSubsts<'tcx>,
         .               ) -> RelateResult<'tcx, ty::ClosureSubsts<'tcx>> {
-- line 722 ----------------------------------------
-- line 737 ----------------------------------------
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for SubstsRef<'tcx> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: SubstsRef<'tcx>,
         .                   b: SubstsRef<'tcx>,
         .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
    65,966 ( 0.00%)          relate_substs(relation, None, a, b)
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::Region<'tcx> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::Region<'tcx>,
         .                   b: ty::Region<'tcx>,
         .               ) -> RelateResult<'tcx, ty::Region<'tcx>> {
   576,827 ( 0.00%)          relation.regions(a, b)
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for &'tcx ty::Const<'tcx> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: &'tcx ty::Const<'tcx>,
         .                   b: &'tcx ty::Const<'tcx>,
         .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
    14,078 ( 0.00%)          relation.consts(a, b)
         .               }
         .           }
         .           
         .           impl<'tcx, T: Relate<'tcx>> Relate<'tcx> for ty::Binder<'tcx, T> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::Binder<'tcx, T>,
         .                   b: ty::Binder<'tcx, T>,
         .               ) -> RelateResult<'tcx, ty::Binder<'tcx, T>> {
   903,750 ( 0.00%)          relation.binders(a, b)
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for GenericArg<'tcx> {
 2,383,915 ( 0.01%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: GenericArg<'tcx>,
         .                   b: GenericArg<'tcx>,
         .               ) -> RelateResult<'tcx, GenericArg<'tcx>> {
 3,281,708 ( 0.02%)          match (a.unpack(), b.unpack()) {
         .                       (GenericArgKind::Lifetime(a_lt), GenericArgKind::Lifetime(b_lt)) => {
         .                           Ok(relation.relate(a_lt, b_lt)?.into())
         .                       }
         .                       (GenericArgKind::Type(a_ty), GenericArgKind::Type(b_ty)) => {
    25,085 ( 0.00%)                  Ok(relation.relate(a_ty, b_ty)?.into())
         .                       }
         .                       (GenericArgKind::Const(a_ct), GenericArgKind::Const(b_ct)) => {
         .                           Ok(relation.relate(a_ct, b_ct)?.into())
         .                       }
         .                       (GenericArgKind::Lifetime(unpacked), x) => {
         .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
         .                       }
         .                       (GenericArgKind::Type(unpacked), x) => {
         .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
         .                       }
         .                       (GenericArgKind::Const(unpacked), x) => {
         .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
         .                       }
         .                   }
 2,700,867 ( 0.01%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::ImplPolarity {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::ImplPolarity,
         .                   b: ty::ImplPolarity,
         .               ) -> RelateResult<'tcx, ty::ImplPolarity> {
         5 ( 0.00%)          if a != b {
         .                       Err(TypeError::PolarityMismatch(expected_found(relation, a, b)))
         .                   } else {
         .                       Ok(a)
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::TraitPredicate<'tcx> {
     3,224 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::TraitPredicate<'tcx>,
         .                   b: ty::TraitPredicate<'tcx>,
         .               ) -> RelateResult<'tcx, ty::TraitPredicate<'tcx>> {
        30 ( 0.00%)          Ok(ty::TraitPredicate {
     1,475 ( 0.00%)              trait_ref: relation.relate(a.trait_ref, b.trait_ref)?,
        30 ( 0.00%)              constness: relation.relate(a.constness, b.constness)?,
        10 ( 0.00%)              polarity: relation.relate(a.polarity, b.polarity)?,
         .                   })
     2,641 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::Term<'tcx> {
   105,777 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: Self,
         .                   b: Self,
         .               ) -> RelateResult<'tcx, Self> {
   246,821 ( 0.00%)          Ok(match (a, b) {
    10,284 ( 0.00%)              (Term::Ty(a), Term::Ty(b)) => relation.relate(a, b)?.into(),
         .                       (Term::Const(a), Term::Const(b)) => relation.relate(a, b)?.into(),
         .                       _ => return Err(TypeError::Mismatch),
         .                   })
   141,036 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::ProjectionPredicate<'tcx> {
        30 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::ProjectionPredicate<'tcx>,
         .                   b: ty::ProjectionPredicate<'tcx>,
         .               ) -> RelateResult<'tcx, ty::ProjectionPredicate<'tcx>> {
        12 ( 0.00%)          Ok(ty::ProjectionPredicate {
        15 ( 0.00%)              projection_ty: relation.relate(a.projection_ty, b.projection_ty)?,
         2 ( 0.00%)              term: relation.relate(a.term, b.term)?.into(),
         .                   })
        24 ( 0.00%)      }
         .           }
         .           
         .           ///////////////////////////////////////////////////////////////////////////
         .           // Error handling
         .           
         .           pub fn expected_found<'tcx, R, T>(relation: &mut R, a: T, b: T) -> ExpectedFound<T>
         .           where
         .               R: TypeRelation<'tcx>,
         .           {
       496 ( 0.00%)      ExpectedFound::new(relation.a_is_expected(), a, b)
         .           }

12,248,204 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 108 ----------------------------------------
        .                   suppress_errors: bool,
        .               },
        .           }
        .           
        .           impl RegionckMode {
        .               /// Indicates that the MIR borrowck will repeat these region
        .               /// checks, so we should ignore errors if NLL is (unconditionally)
        .               /// enabled.
    1,299 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
        .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
        .                   // this always `true` and then proceed to eliminate the dead code.
    1,299 ( 0.00%)          match tcx.borrowck_mode() {
        .                       // If we're on Migrate mode, report AST region errors
        .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
        .           
        .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
        .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
        .                   }
    2,598 ( 0.00%)      }
        .           }
        .           
        .           /// This type contains all the things within `InferCtxt` that sit within a
        .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
        .           /// operations are hot enough that we want only one call to `borrow_mut` per
        .           /// call to `start_snapshot` and `rollback_to`.
        .           pub struct InferCtxtInner<'tcx> {
        .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
        .               /// type instantiations (`ty::Infer`) to the actual opaque
        .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
        .               /// opaque type inference variables to their corresponding
        .               /// opaque type.
        .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
        .           }
        .           
        .           impl<'tcx> InferCtxtInner<'tcx> {
  444,985 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
3,025,898 ( 0.01%)          InferCtxtInner {
        .                       projection_cache: Default::default(),
        .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
        .                       undo_log: InferCtxtUndoLogs::default(),
        .                       const_unification_storage: ut::UnificationTableStorage::new(),
        .                       int_unification_storage: ut::UnificationTableStorage::new(),
        .                       float_unification_storage: ut::UnificationTableStorage::new(),
  266,991 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
        .                       region_obligations: vec![],
        .                       opaque_types: Default::default(),
        .                       opaque_types_vars: Default::default(),
        .                   }
  533,982 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
        .                   &self.region_obligations
        .               }
        .           
        .               #[inline]
        .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
   85,418 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
1,810,698 ( 0.01%)          self.type_variable_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn int_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::IntVid,
        .                       &mut ut::UnificationStorage<ty::IntVid>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
    1,432 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn float_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::FloatVid,
        .                       &mut ut::UnificationStorage<ty::FloatVid>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
       29 ( 0.00%)          self.float_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn const_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::ConstVid<'tcx>,
        .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
    6,494 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
  429,112 ( 0.00%)          self.region_constraint_storage
        .                       .as_mut()
        .                       .expect("region constraints already solved")
  531,738 ( 0.00%)              .with_log(&mut self.undo_log)
        .               }
        .           }
        .           
        .           pub struct InferCtxt<'a, 'tcx> {
        .               pub tcx: TyCtxt<'tcx>,
        .           
        .               /// The `DefId` of the item in whose context we are performing inference or typeck.
        .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
        .               /// item we are type-checking, and just consider those names as
        .               /// part of the root universe. So this would only get incremented
        .               /// when we enter into a higher-ranked (`for<..>`) type or trait
        .               /// bound.
        .               universe: Cell<ty::UniverseIndex>,
        .           }
        .           
        .           /// See the `error_reporting` module for more details.
  551,832 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
        .           pub enum ValuePairs<'tcx> {
        .               Types(ExpectedFound<Ty<'tcx>>),
        .               Regions(ExpectedFound<ty::Region<'tcx>>),
        .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
        .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
        .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
        .           }
        .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
        .           pub struct TypeTrace<'tcx> {
        .               cause: ObligationCause<'tcx>,
        .               values: ValuePairs<'tcx>,
        .           }
        .           
        .           /// The origin of a `r1 <= r2` constraint.
        .           ///
        .           /// See `error_reporting` module for more details
  590,441 ( 0.00%)  #[derive(Clone, Debug)]
        .           pub enum SubregionOrigin<'tcx> {
        .               /// Arose from a subtyping relation
   29,593 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
        .           
        .               /// When casting `&'a T` to an `&'b Trait` object,
        .               /// relating `'a` to `'b`
        .               RelateObjectBound(Span),
        .           
        .               /// Some type parameter was instantiated with the given type,
        .               /// and that type must outlive some region.
   11,813 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
        .           
        .               /// The given region parameter was instantiated with a region
        .               /// that must outlive some other region.
        .               RelateRegionParamBound(Span),
        .           
        .               /// Creating a pointer `b` to contents of another reference
        .               Reborrow(Span),
        .           
        .               /// Creating a pointer `b` to contents of an upvar
        .               ReborrowUpvar(Span, ty::UpvarId),
        .           
        .               /// Data with type `Ty<'tcx>` was borrowed
    5,429 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
        .           
        .               /// (&'a &'b T) where a >= b
    6,271 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
        .           
        .               /// Comparing the signature and requirements of an impl method against
        .               /// the containing trait.
        .               CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
        .           
        .               /// Comparing the signature and requirements of an impl associated type
        .               /// against the containing trait
        .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
-- line 426 ----------------------------------------
-- line 554 ----------------------------------------
        .               defining_use_anchor: Option<LocalDefId>,
        .           }
        .           
        .           pub trait TyCtxtInferExt<'tcx> {
        .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
        .           }
        .           
        .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
   88,997 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
  266,991 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
   88,997 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> InferCtxtBuilder<'tcx> {
        .               /// Used only by `rustc_typeck` during body type-checking/inference,
        .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
        .               /// Will also change the scope for opaque type defining use checks to the given owner.
   35,820 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
   43,780 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
   19,900 ( 0.00%)          self.with_opaque_type_inference(table_owner)
   27,860 ( 0.00%)      }
        .           
        .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
        .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
        .               ///
        .               /// It is only meant to be called in two places, for typeck
        .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
        .               /// in mir borrowck.
    3,048 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
    1,524 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
   11,008 ( 0.00%)          self
    4,572 ( 0.00%)      }
        .           
        .               /// Given a canonical value `C` as a starting point, create an
        .               /// inference context that contains each of the bound values
        .               /// within instantiated as a fresh variable. The `f` closure is
        .               /// invoked with the new infcx, along with the instantiated value
        .               /// `V` and a substitution `S`. This substitution `S` maps from
        .               /// the bound values in `C` to their instantiated values in `V`
        .               /// (in other words, `S(C) = V`).
  206,921 ( 0.00%)      pub fn enter_with_canonical<T, R>(
        .                   &mut self,
        .                   span: Span,
        .                   canonical: &Canonical<'tcx, T>,
        .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
        .               ) -> R
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   self.enter(|infcx| {
  277,132 ( 0.00%)              let (value, subst) =
   13,666 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
  416,382 ( 0.00%)              f(infcx, value, subst)
        .                   })
  224,313 ( 0.00%)      }
        .           
  394,878 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
  254,509 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
        .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
3,663,435 ( 0.02%)          f(InferCtxt {
        .                       tcx,
        .                       defining_use_anchor,
        .                       in_progress_typeck_results,
   88,997 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
        .                       lexical_region_resolutions: RefCell::new(None),
        .                       selection_cache: Default::default(),
        .                       evaluation_cache: Default::default(),
        .                       reported_trait_errors: Default::default(),
        .                       reported_closure_mismatch: Default::default(),
        .                       tainted_by_errors_flag: Cell::new(false),
   88,997 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
        .                       in_snapshot: Cell::new(false),
        .                       skip_leak_check: Cell::new(false),
        .                       universe: Cell::new(ty::UniverseIndex::ROOT),
        .                   })
  422,071 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx, T> InferOk<'tcx, T> {
        .               pub fn unit(self) -> InferOk<'tcx, ()> {
        .                   InferOk { value: (), obligations: self.obligations }
        .               }
        .           
        .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
        .               pub fn into_value_registering_obligations(
        .                   self,
        .                   infcx: &InferCtxt<'_, 'tcx>,
        .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
        .               ) -> T {
    3,868 ( 0.00%)          let InferOk { value, obligations } = self;
   16,732 ( 0.00%)          for obligation in obligations {
    6,123 ( 0.00%)              fulfill_cx.register_predicate_obligation(infcx, obligation);
        .                   }
        .                   value
        .               }
        .           }
        .           
        .           impl<'tcx> InferOk<'tcx, ()> {
   59,527 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
  238,108 ( 0.00%)          self.obligations
   59,527 ( 0.00%)      }
        .           }
        .           
        .           #[must_use = "once you start a snapshot, you should always consume it"]
        .           pub struct CombinedSnapshot<'a, 'tcx> {
        .               undo_snapshot: Snapshot<'tcx>,
        .               region_constraints_snapshot: RegionSnapshot,
        .               universe: ty::UniverseIndex,
        .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
        .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
        .                   debug!("canonical consts: {:?}", &canonical.value);
        .           
        .                   self.tcx.try_unify_abstract_consts(canonical.value)
        .               }
        .           
        .               pub fn is_in_snapshot(&self) -> bool {
        .                   self.in_snapshot.get()
  108,607 ( 0.00%)      }
        .           
  981,256 ( 0.00%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
1,103,913 ( 0.01%)          t.fold_with(&mut self.freshener())
1,103,913 ( 0.01%)      }
        .           
        .               /// Returns the origin of the type variable identified by `vid`, or `None`
        .               /// if this is not a type variable.
        .               ///
        .               /// No attempt is made to resolve `ty`.
      952 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
    1,904 ( 0.00%)          match *ty.kind() {
      476 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
    1,904 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
        .                       }
        .                       _ => None,
        .                   }
    1,904 ( 0.00%)      }
        .           
  122,657 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
        .                   freshen::TypeFreshener::new(self, false)
  122,657 ( 0.00%)      }
        .           
        .               /// Like `freshener`, but does not replace `'static` regions.
  357,429 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
        .                   freshen::TypeFreshener::new(self, true)
  357,429 ( 0.00%)      }
        .           
    5,872 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
    2,936 ( 0.00%)          let mut inner = self.inner.borrow_mut();
    2,936 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
        .                       .type_variables()
        .                       .unsolved_variables()
        .                       .into_iter()
      952 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
        .                       .collect();
        .                   vars.extend(
        .                       (0..inner.int_unification_table().len())
        .                           .map(|i| ty::IntVid { index: i as u32 })
      114 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
        .                           .map(|v| self.tcx.mk_int_var(v)),
        .                   );
        .                   vars.extend(
        .                       (0..inner.float_unification_table().len())
        .                           .map(|i| ty::FloatVid { index: i as u32 })
        3 ( 0.00%)                  .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
        .                           .map(|v| self.tcx.mk_float_var(v)),
        .                   );
        .                   vars
   10,276 ( 0.00%)      }
        .           
  227,359 ( 0.00%)      fn combine_fields(
        .                   &'a self,
        .                   trace: TypeTrace<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .               ) -> CombineFields<'a, 'tcx> {
  911,196 ( 0.00%)          CombineFields {
        .                       infcx: self,
2,277,990 ( 0.01%)              trace,
        .                       cause: None,
        .                       param_env,
        .                       obligations: PredicateObligations::new(),
        .                   }
  227,359 ( 0.00%)      }
        .           
        .               /// Clear the "currently in a snapshot" flag, invoke the closure,
        .               /// then restore the flag to its original value. This flag is a
        .               /// debugging measure designed to detect cases where we start a
        .               /// snapshot, create type variables, and register obligations
        .               /// which may involve those type variables in the fulfillment cx,
        .               /// potentially leaving "dangling type variables" behind.
        .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 755 ----------------------------------------
        .               /// better than grovelling through megabytes of `RUSTC_LOG` output.
        .               ///
        .               /// HOWEVER, in some cases the flag is unhelpful. In particular, we
        .               /// sometimes create a "mini-fulfilment-cx" in which we enroll
        .               /// obligations. As long as this fulfillment cx is fully drained
        .               /// before we return, this is not a problem, as there won't be any
        .               /// escaping obligations in the main cx. In those cases, you can
        .               /// use this function.
      192 ( 0.00%)      pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
        .               where
        .                   F: FnOnce(&Self) -> R,
        .               {
        .                   let flag = self.in_snapshot.replace(false);
   29,700 ( 0.00%)          let result = func(self);
        .                   self.in_snapshot.set(flag);
        .                   result
      216 ( 0.00%)      }
        .           
1,297,710 ( 0.01%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
        .                   debug!("start_snapshot()");
        .           
        .                   let in_snapshot = self.in_snapshot.replace(true);
        .           
        .                   let mut inner = self.inner.borrow_mut();
        .           
3,893,130 ( 0.02%)          CombinedSnapshot {
        .                       undo_snapshot: inner.undo_log.start_snapshot(),
        .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
        .                       universe: self.universe(),
        .                       was_in_snapshot: in_snapshot,
        .                       // Borrow typeck results "in progress" (i.e., during typeck)
        .                       // to ban writes from within a snapshot to them.
  648,855 ( 0.00%)              _in_progress_typeck_results: self
        .                           .in_progress_typeck_results
        .                           .map(|typeck_results| typeck_results.borrow()),
        .                   }
2,595,420 ( 0.01%)      }
        .           
3,085,841 ( 0.02%)      #[instrument(skip(self, snapshot), level = "debug")]
        .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
        .                   let CombinedSnapshot {
  280,531 ( 0.00%)              undo_snapshot,
  280,531 ( 0.00%)              region_constraints_snapshot,
  280,531 ( 0.00%)              universe,
  280,531 ( 0.00%)              was_in_snapshot,
  561,062 ( 0.00%)              _in_progress_typeck_results,
        .                   } = snapshot;
        .           
        .                   self.in_snapshot.set(was_in_snapshot);
        .                   self.universe.set(universe);
        .           
        .                   let mut inner = self.inner.borrow_mut();
  280,531 ( 0.00%)          inner.rollback_to(undo_snapshot);
        .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
        .               }
        .           
5,524,860 ( 0.03%)      #[instrument(skip(self, snapshot), level = "debug")]
        .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
        .                   let CombinedSnapshot {
  368,324 ( 0.00%)              undo_snapshot,
        .                       region_constraints_snapshot: _,
        .                       universe: _,
  368,324 ( 0.00%)              was_in_snapshot,
  736,648 ( 0.00%)              _in_progress_typeck_results,
        .                   } = snapshot;
        .           
        .                   self.in_snapshot.set(was_in_snapshot);
        .           
        .                   self.inner.borrow_mut().commit(undo_snapshot);
        .               }
        .           
        .               /// Executes `f` and commit the bindings.
  357,368 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
  450,681 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
   40,971 ( 0.00%)          let snapshot = self.start_snapshot();
  165,855 ( 0.00%)          let r = f(&snapshot);
  286,797 ( 0.00%)          self.commit_from(snapshot);
  276,383 ( 0.00%)          r
        .               }
        .           
        .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
3,178,398 ( 0.02%)      #[instrument(skip(self, f), level = "debug")]
3,901,470 ( 0.02%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
        .               {
  495,331 ( 0.00%)          let snapshot = self.start_snapshot();
1,804,865 ( 0.01%)          let r = f(&snapshot);
        .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
  353,315 ( 0.00%)          match r {
        .                       Ok(_) => {
2,450,661 ( 0.01%)                  self.commit_from(snapshot);
        .                       }
        .                       Err(_) => {
1,255,194 ( 0.01%)                  self.rollback_to("commit_if_ok -- error", snapshot);
        .                       }
        .                   }
2,464,212 ( 0.01%)          r
        .               }
        .           
        .               /// Execute `f` then unroll any bindings it creates.
1,114,206 ( 0.01%)      #[instrument(skip(self, f), level = "debug")]
1,246,076 ( 0.01%)      pub fn probe<R, F>(&self, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
  315,845 ( 0.00%)          let snapshot = self.start_snapshot();
  466,971 ( 0.00%)          let r = f(&snapshot);
1,435,433 ( 0.01%)          self.rollback_to("probe", snapshot);
  120,092 ( 0.00%)          r
        .               }
        .           
        .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
      576 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
      768 ( 0.00%)      pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
      128 ( 0.00%)          let snapshot = self.start_snapshot();
       64 ( 0.00%)          let was_skip_leak_check = self.skip_leak_check.get();
      128 ( 0.00%)          if should_skip {
        .                       self.skip_leak_check.set(true);
        .                   }
      256 ( 0.00%)          let r = f(&snapshot);
      576 ( 0.00%)          self.rollback_to("probe", snapshot);
        .                   self.skip_leak_check.set(was_skip_leak_check);
      768 ( 0.00%)          r
        .               }
        .           
        .               /// Scan the constraints produced since `snapshot` began and returns:
        .               ///
        .               /// - `None` -- if none of them involve "region outlives" constraints
        .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
        .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
  165,844 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
        .                   &self,
        .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
        .               ) -> Option<bool> {
  331,688 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .unwrap_region_constraints()
        .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
  248,766 ( 0.00%)      }
        .           
       12 ( 0.00%)      pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
       24 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
       18 ( 0.00%)      }
        .           
      672 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
        .               where
        .                   T: at::ToTrace<'tcx>,
        .               {
        .                   let origin = &ObligationCause::dummy();
        .                   self.probe(|_| {
        .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
        .                           // Ignore obligations, since we are unrolling
        .                           // everything anyway.
        .                       })
        .                   })
      504 ( 0.00%)      }
        .           
   19,020 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
        .               where
        .                   T: at::ToTrace<'tcx>,
        .               {
        .                   let origin = &ObligationCause::dummy();
        .                   self.probe(|_| {
        .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
        .                           // Ignore obligations, since we are unrolling
        .                           // everything anyway.
        .                       })
        .                   })
   14,265 ( 0.00%)      }
        .           
  162,870 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               pub fn sub_regions(
        .                   &self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   a: ty::Region<'tcx>,
        .                   b: ty::Region<'tcx>,
        .               ) {
  146,583 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
        .               }
        .           
        .               /// Require that the region `r` be equal to one of the regions in
        .               /// the set `regions`.
       65 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               pub fn member_constraint(
        .                   &self,
        .                   opaque_type_def_id: DefId,
        .                   definition_span: Span,
        .                   hidden_ty: Ty<'tcx>,
        .                   region: ty::Region<'tcx>,
        .                   in_regions: &Lrc<Vec<ty::Region<'tcx>>>,
        .               ) {
       65 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().member_constraint(
        .                       opaque_type_def_id,
        .                       definition_span,
        .                       hidden_ty,
        .                       region,
        .                       in_regions,
        .                   );
        .               }
        .           
-- line 961 ----------------------------------------
-- line 969 ----------------------------------------
        .               /// to `subtype_predicate` -- that is, "coercing" `a` to `b` winds up
        .               /// actually requiring `a <: b`. This is of course a valid coercion,
        .               /// but it's not as flexible as `FnCtxt::coerce` would be.
        .               ///
        .               /// (We may refactor this in the future, but there are a number of
        .               /// practical obstacles. Among other things, `FnCtxt::coerce` presently
        .               /// records adjustments that are required on the HIR in order to perform
        .               /// the coercion, and we don't currently have a way to manage that.)
      294 ( 0.00%)      pub fn coerce_predicate(
        .                   &self,
        .                   cause: &ObligationCause<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   predicate: ty::PolyCoercePredicate<'tcx>,
        .               ) -> Option<InferResult<'tcx, ()>> {
      196 ( 0.00%)          let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
        .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
        .                       a: p.a,
        .                       b: p.b,
        .                   });
      490 ( 0.00%)          self.subtype_predicate(cause, param_env, subtype_predicate)
      392 ( 0.00%)      }
        .           
   18,360 ( 0.00%)      pub fn subtype_predicate(
        .                   &self,
        .                   cause: &ObligationCause<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   predicate: ty::PolySubtypePredicate<'tcx>,
        .               ) -> Option<InferResult<'tcx, ()>> {
        .                   // Check for two unresolved inference variables, in which case we can
        .                   // make no progress. This is partly a micro-optimization, but it's
        .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
        .                   // earlier that they are sub-unified).
        .                   //
        .                   // Note that we can just skip the binders here because
        .                   // type variables can't (at present, at
        .                   // least) capture any of the things bound by this binder.
        .                   //
        .                   // Note that this sub here is not just for diagnostics - it has semantic
        .                   // effects as well.
    1,530 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
    1,530 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
   10,558 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
    2,308 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
        .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
    2,308 ( 0.00%)                  return None;
        .                       }
        .                       _ => {}
        .                   }
        .           
        .                   Some(self.commit_if_ok(|_snapshot| {
      376 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
        .                           self.replace_bound_vars_with_placeholders(predicate);
        .           
      752 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
        .           
        .                       Ok(ok.unit())
        .                   }))
   13,770 ( 0.00%)      }
        .           
   45,084 ( 0.00%)      pub fn region_outlives_predicate(
        .                   &self,
        .                   cause: &traits::ObligationCause<'tcx>,
        .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
        .               ) -> UnitResult<'tcx> {
        .                   self.commit_if_ok(|_snapshot| {
        .                       let ty::OutlivesPredicate(r_a, r_b) =
        .                           self.replace_bound_vars_with_placeholders(predicate);
        .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
        .                           RelateRegionParamBound(cause.span)
        .                       });
   37,570 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
        .                       Ok(())
        .                   })
   30,056 ( 0.00%)      }
        .           
        .               /// Number of type variables created so far.
      169 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
        .                   self.inner.borrow_mut().type_variables().num_vars()
      338 ( 0.00%)      }
        .           
   50,762 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
  253,810 ( 0.00%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
   76,143 ( 0.00%)      }
        .           
   47,304 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
  175,944 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
   70,956 ( 0.00%)      }
        .           
    9,056 ( 0.00%)      pub fn next_ty_var_in_universe(
        .                   &self,
        .                   origin: TypeVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> Ty<'tcx> {
   49,808 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
    4,528 ( 0.00%)          self.tcx.mk_ty_var(vid)
   13,584 ( 0.00%)      }
        .           
        .               pub fn next_const_var(
        .                   &self,
        .                   ty: Ty<'tcx>,
        .                   origin: ConstVariableOrigin,
        .               ) -> &'tcx ty::Const<'tcx> {
        .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
        .               }
-- line 1074 ----------------------------------------
-- line 1090 ----------------------------------------
        .               pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
        .                   self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
        .                       origin,
        .                       val: ConstVariableValue::Unknown { universe: self.universe() },
        .                   })
        .               }
        .           
        .               fn next_int_var_id(&self) -> IntVid {
      195 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
        .               }
        .           
      117 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
        .                   self.tcx.mk_int_var(self.next_int_var_id())
      156 ( 0.00%)      }
        .           
        .               fn next_float_var_id(&self) -> FloatVid {
        5 ( 0.00%)          self.inner.borrow_mut().float_unification_table().new_key(None)
        .               }
        .           
        3 ( 0.00%)      pub fn next_float_var(&self) -> Ty<'tcx> {
        .                   self.tcx.mk_float_var(self.next_float_var_id())
        4 ( 0.00%)      }
        .           
        .               /// Creates a fresh region variable with the next available index.
        .               /// The variable will be created in the maximum universe created
        .               /// thus far, allowing it to name any region created thus far.
   25,026 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
  635,626 ( 0.00%)          self.next_region_var_in_universe(origin, self.universe())
   50,052 ( 0.00%)      }
        .           
        .               /// Creates a fresh region variable with the next available index
        .               /// in the given universe; typically, you can use
        .               /// `next_region_var` and just use the maximal universe.
  285,810 ( 0.00%)      pub fn next_region_var_in_universe(
        .                   &self,
        .                   origin: RegionVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> ty::Region<'tcx> {
        .                   let region_var =
1,857,765 ( 0.01%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
  714,525 ( 0.00%)          self.tcx.mk_region(ty::ReVar(region_var))
  428,715 ( 0.00%)      }
        .           
        .               /// Return the universe that the region `r` was created in.  For
        .               /// most regions (e.g., `'static`, named regions from the user,
        .               /// etc) this is the root universe U0. For inference variables or
        .               /// placeholders, however, it will return the universe which which
        .               /// they are associated.
   44,926 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
        .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
   67,389 ( 0.00%)      }
        .           
        .               /// Number of region variables created so far.
   12,282 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
        .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
   18,423 ( 0.00%)      }
        .           
        .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
   54,831 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
        .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
  109,662 ( 0.00%)      }
        .           
        .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
    3,957 ( 0.00%)      pub fn next_nll_region_var_in_universe(
        .                   &self,
        .                   origin: NllRegionVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> ty::Region<'tcx> {
   30,971 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
    7,914 ( 0.00%)      }
        .           
  765,456 ( 0.00%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
  438,918 ( 0.00%)          match param.kind {
        .                       GenericParamDefKind::Lifetime => {
        .                           // Create a region inference variable for the given
        .                           // region parameter definition.
   19,746 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
        .                       }
        .                       GenericParamDefKind::Type { .. } => {
        .                           // Create a type inference variable for the given
        .                           // type parameter definition. The substitutions are
        .                           // for actual parameters that may be referred to by
        .                           // the default of this type parameter, if it exists.
        .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
        .                           // used in a path such as `Foo::<T, U>::new()` will
        .                           // use an inference variable for `C` with `[T, U]`
        .                           // as the substitutions for the default, `(T, U)`.
  303,244 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
        .                               self.universe(),
  379,055 ( 0.00%)                      TypeVariableOrigin {
        .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
   75,811 ( 0.00%)                              param.name,
   75,811 ( 0.00%)                              Some(param.def_id),
        .                                   ),
        .                                   span,
        .                               },
        .                           );
        .           
   75,811 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
        .                       }
        .                       GenericParamDefKind::Const { .. } => {
        .                           let origin = ConstVariableOrigin {
        .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
        .                                   param.name,
        .                                   param.def_id,
        .                               ),
        .                               span,
        .                           };
        .                           let const_var_id =
    1,375 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
        .                                   origin,
        .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
        .                               });
      125 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
        .                       }
        .                   }
    1,000 ( 0.00%)      }
        .           
        .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
        .               /// type/region parameter to a fresh inference variable.
  147,975 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
  737,020 ( 0.00%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
   98,650 ( 0.00%)      }
        .           
        .               /// Returns `true` if errors have been reported since this infcx was
        .               /// created. This is sometimes used as a heuristic to skip
        .               /// reporting errors that often occur as a result of earlier
        .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
        .               /// inference variables, regionck errors).
    3,694 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
        .                   debug!(
        .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
        .                        tainted_by_errors_flag={})",
        .                       self.tcx.sess.err_count(),
        .                       self.err_count_on_creation,
        .                       self.tainted_by_errors_flag.get()
        .                   );
        .           
  136,511 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
        .                       return true; // errors reported since this infcx was made
        .                   }
        .                   self.tainted_by_errors_flag.get()
    5,541 ( 0.00%)      }
        .           
        .               /// Set the "tainted by errors" flag to true. We call this when we
        .               /// observe an error from a prior pass.
        .               pub fn set_tainted_by_errors(&self) {
        .                   debug!("set_tainted_by_errors()");
        .                   self.tainted_by_errors_flag.set(true)
        .               }
        .           
        .               /// Process the region constraints and return any any errors that
        .               /// result. After this, no more unification operations should be
        .               /// done -- or the compiler will panic -- but it is legal to use
        .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
  144,179 ( 0.00%)      pub fn resolve_regions(
        .                   &self,
        .                   region_context: DefId,
        .                   outlives_env: &OutlivesEnvironment<'tcx>,
        .                   mode: RegionckMode,
        .               ) -> Vec<RegionResolutionError<'tcx>> {
  391,343 ( 0.00%)          let (var_infos, data) = {
        .                       let mut inner = self.inner.borrow_mut();
        .                       let inner = &mut *inner;
   20,597 ( 0.00%)              assert!(
   61,791 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
        .                           "region_obligations not empty: {:#?}",
        .                           inner.region_obligations
        .                       );
        .                       inner
        .                           .region_constraint_storage
        .                           .take()
        .                           .expect("regions already resolved")
        .                           .with_log(&mut inner.undo_log)
        .                           .into_infos_and_data()
   20,597 ( 0.00%)          };
        .           
        .                   let region_rels =
   20,597 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
        .           
  185,373 ( 0.00%)          let (lexical_region_resolutions, errors) =
  494,328 ( 0.00%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
        .           
   82,388 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
   20,597 ( 0.00%)          assert!(old_value.is_none());
        .           
        .                   errors
  185,373 ( 0.00%)      }
        .           
        .               /// Process the region constraints and report any errors that
        .               /// result. After this, no more unification operations should be
        .               /// done -- or the compiler will panic -- but it is legal to use
        .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
  205,970 ( 0.00%)      pub fn resolve_regions_and_report_errors(
        .                   &self,
        .                   region_context: DefId,
        .                   outlives_env: &OutlivesEnvironment<'tcx>,
        .                   mode: RegionckMode,
        .               ) {
   41,194 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
        .           
   61,791 ( 0.00%)          if !self.is_tainted_by_errors() {
        .                       // As a heuristic, just skip reporting region errors
        .                       // altogether if other errors have been reported while
        .                       // this infcx was in use.  This is totally hokey but
        .                       // otherwise we have a hard time separating legit region
        .                       // errors from silly ones.
   41,194 ( 0.00%)              self.report_region_errors(&errors);
        .                   }
  102,985 ( 0.00%)      }
        .           
        .               /// Obtains (and clears) the current set of region
        .               /// constraints. The inference context is still usable: further
        .               /// unifications will simply add new constraints.
        .               ///
        .               /// This method is not meant to be used with normal lexical region
        .               /// resolution. Rather, it is used in the NLL mode as a kind of
        .               /// interim hack: basically we run normal type-check and generate
        .               /// region constraints as normal, but then we take them and
        .               /// translate them into the form that the NLL solver
        .               /// understands. See the NLL module for mode details.
      252 ( 0.00%)      pub fn take_and_reset_region_constraints(&self) -> RegionConstraintData<'tcx> {
       84 ( 0.00%)          assert!(
        .                       self.inner.borrow().region_obligations.is_empty(),
        .                       "region_obligations not empty: {:#?}",
        .                       self.inner.borrow().region_obligations
        .                   );
        .           
      336 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().take_and_reset_data()
      420 ( 0.00%)      }
        .           
        .               /// Gives temporary access to the region constraint data.
        .               pub fn with_region_constraints<R>(
        .                   &self,
        .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
        .               ) -> R {
        .                   let mut inner = self.inner.borrow_mut();
   87,800 ( 0.00%)          op(inner.unwrap_region_constraints().data())
        .               }
        .           
        .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
        .                   let mut inner = self.inner.borrow_mut();
        .                   let inner = &mut *inner;
        .                   inner
        .                       .region_constraint_storage
        .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
        .                       .var_origin(vid)
        .               }
        .           
        .               /// Takes ownership of the list of variable regions. This implies
        .               /// that all the region constraints have already been taken, and
        .               /// hence that `resolve_regions_and_report_errors` can never be
        .               /// called. This is used only during NLL processing to "hand off" ownership
        .               /// of the set of region variables into the NLL region context.
    7,440 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
        .                   let mut inner = self.inner.borrow_mut();
   28,272 ( 0.00%)          let (var_infos, data) = inner
        .                       .region_constraint_storage
        .                       .take()
        .                       .expect("regions already resolved")
        .                       .with_log(&mut inner.undo_log)
    1,488 ( 0.00%)              .into_infos_and_data();
    1,488 ( 0.00%)          assert!(data.is_empty());
        .                   var_infos
   11,904 ( 0.00%)      }
        .           
        .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
        .                   self.resolve_vars_if_possible(t).to_string()
        .               }
        .           
        .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
        .               /// universe index of `TyVar(vid)`.
   36,748 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
        .                   use self::type_variable::TypeVariableValue;
        .           
  110,244 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
        .                       TypeVariableValue::Known { value } => Ok(value),
        .                       TypeVariableValue::Unknown { universe } => Err(universe),
        .                   }
  128,618 ( 0.00%)      }
        .           
        .               /// Resolve any type variables found in `value` -- but only one
        .               /// level.  So, if the variable `?X` is bound to some type
        .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
        .               /// itself be bound to a type).
        .               ///
        .               /// Useful when you only need to inspect the outermost level of
        .               /// the type and don't care about nested types (or perhaps you
        .               /// will be resolving them as well, e.g. in a loop).
        .               pub fn shallow_resolve<T>(&self, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  707,671 ( 0.00%)          value.fold_with(&mut ShallowResolver { infcx: self })
        .               }
        .           
   42,990 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
        .                   self.inner.borrow_mut().type_variables().root_var(var)
   64,485 ( 0.00%)      }
        .           
        .               /// Where possible, replaces type/const variables in
        .               /// `value` with their final value. Note that region variables
        .               /// are unaffected. If a type/const variable has not been unified, it
        .               /// is left as is. This is an idempotent operation that does
        .               /// not affect inference state in any way and so you can do it
        .               /// at will.
    2,460 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  734,651 ( 0.00%)          if !value.needs_infer() {
  827,490 ( 0.00%)              return value; // Avoid duplicated subst-folding.
        .                   }
  668,990 ( 0.00%)          let mut r = resolve::OpportunisticVarResolver::new(self);
  823,313 ( 0.00%)          value.fold_with(&mut r)
    2,620 ( 0.00%)      }
        .           
        .               /// Returns the first unresolved variable contained in `T`. In the
        .               /// process of visiting `T`, this will resolve (where possible)
        .               /// type variables in `T`, but it never constructs the final,
        .               /// resolved type, so it's more efficient than
        .               /// `resolve_vars_if_possible()`.
        .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
    9,268 ( 0.00%)          value.visit_with(&mut resolve::UnresolvedTypeFinder::new(self)).break_value()
        .               }
        .           
        .               pub fn probe_const_var(
        .                   &self,
        .                   vid: ty::ConstVid<'tcx>,
        .               ) -> Result<&'tcx ty::Const<'tcx>, ty::UniverseIndex> {
        .                   match self.inner.borrow_mut().const_unification_table().probe_value(vid).val {
        .                       ConstVariableValue::Known { value } => Ok(value),
-- line 1426 ----------------------------------------
-- line 1490 ----------------------------------------
        .                   expected: &'tcx ty::Const<'tcx>,
        .                   actual: &'tcx ty::Const<'tcx>,
        .                   err: TypeError<'tcx>,
        .               ) -> DiagnosticBuilder<'tcx> {
        .                   let trace = TypeTrace::consts(cause, true, expected, actual);
        .                   self.report_and_explain_type_error(trace, &err)
        .               }
        .           
   36,450 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
        .                   &self,
        .                   span: Span,
        .                   lbrct: LateBoundRegionConversionTime,
        .                   value: ty::Binder<'tcx, T>,
        .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   let fld_r =
  270,206 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
        .                   let fld_t = |_| {
        .                       self.next_ty_var(TypeVariableOrigin {
        .                           kind: TypeVariableOriginKind::MiscVariable,
        .                           span,
        .                       })
        .                   };
        .                   let fld_c = |_, ty| {
        .                       self.next_const_var(
        .                           ty,
        .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
        .                       )
        .                   };
1,878,654 ( 0.01%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
   24,300 ( 0.00%)      }
        .           
        .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
   65,728 ( 0.00%)      pub fn verify_generic_bound(
        .                   &self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   kind: GenericKind<'tcx>,
        .                   a: ty::Region<'tcx>,
        .                   bound: VerifyBound<'tcx>,
        .               ) {
        .                   debug!("verify_generic_bound({:?}, {:?} <: {:?})", kind, a, bound);
        .           
   24,648 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .unwrap_region_constraints()
  139,672 ( 0.00%)              .verify_generic_bound(origin, kind, a, bound);
   57,512 ( 0.00%)      }
        .           
        .               /// Obtains the latest type of the given closure; this may be a
        .               /// closure in the current function, in which case its
        .               /// `ClosureKind` may not yet be known.
    7,032 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
   14,064 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
        .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
   10,548 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
        .               }
        .           
        .               /// Clears the selection, evaluation, and projection caches. This is useful when
        .               /// repeatedly attempting to select an `Obligation` while changing only
        .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
        .               pub fn clear_caches(&self) {
        .                   self.selection_cache.clear();
        .                   self.evaluation_cache.clear();
        .                   self.inner.borrow_mut().projection_cache().clear();
        .               }
        .           
        .               pub fn universe(&self) -> ty::UniverseIndex {
1,467,732 ( 0.01%)          self.universe.get()
  421,967 ( 0.00%)      }
        .           
        .               /// Creates and return a fresh universe that extends all previous
        .               /// universes. Updates `self.universe` to that new universe.
    4,754 ( 0.00%)      pub fn create_next_universe(&self) -> ty::UniverseIndex {
    6,864 ( 0.00%)          let u = self.universe.get().next_universe();
        .                   self.universe.set(u);
        .                   u
    4,754 ( 0.00%)      }
        .           
        .               /// Resolves and evaluates a constant.
        .               ///
        .               /// The constant can be located on a trait like `<A as B>::C`, in which case the given
        .               /// substitutions and environment are used to resolve the constant. Alternatively if the
        .               /// constant has generic parameters in scope the substitutions are used to evaluate the value of
        .               /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count
        .               /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still
-- line 1576 ----------------------------------------
-- line 1606 ----------------------------------------
        .                   // variables, thus we don't need to substitute back the original values.
        .                   self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
        .               }
        .           
        .               /// If `typ` is a type variable of some kind, resolve it one level
        .               /// (but do not resolve types found in the result). If `typ` is
        .               /// not a type variable, just return it unmodified.
        .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
8,267,296 ( 0.04%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
4,323,441 ( 0.02%)          match *typ.kind() {
        .                       ty::Infer(ty::TyVar(v)) => {
        .                           // Not entirely obvious: if `typ` is a type variable,
        .                           // it can be resolved to an int/float variable, which
        .                           // can then be recursively resolved, hence the
        .                           // recursion. Note though that we prevent type
        .                           // variables from unifying to other type variables
        .                           // directly (though they may be embedded
        .                           // structurally), and we prevent cycles in any case,
        .                           // so this recursion should always be of very limited
        .                           // depth.
        .                           //
        .                           // Note: if these two lines are combined into one we get
        .                           // dynamic borrow errors on `self.inner`.
2,170,940 ( 0.01%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
        .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
        .                       }
        .           
    2,296 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
        .                           .inner
        .                           .borrow_mut()
        .                           .int_unification_table()
        .                           .probe_value(v)
      717 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
        .                           .unwrap_or(typ),
        .           
       60 ( 0.00%)              ty::Infer(ty::FloatVar(v)) => self
        .                           .inner
        .                           .borrow_mut()
        .                           .float_unification_table()
        .                           .probe_value(v)
       28 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
        .                           .unwrap_or(typ),
        .           
        .                       _ => typ,
        .                   }
9,300,708 ( 0.05%)      }
        .           
        .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
        .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
        .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
        .               ///
        .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
        .               /// inlined, despite being large, because it has only two call sites that
        .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
        .               #[inline(always)]
        .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
        .                   match infer_var {
        .                       TyOrConstInferVar::Ty(v) => {
        .                           use self::type_variable::TypeVariableValue;
        .           
        .                           // If `inlined_probe` returns a `Known` value, it never equals
        .                           // `ty::Infer(ty::TyVar(v))`.
1,950,860 ( 0.01%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
        .                               TypeVariableValue::Unknown { .. } => false,
        .                               TypeVariableValue::Known { .. } => true,
        .                           }
        .                       }
        .           
        .                       TyOrConstInferVar::TyInt(v) => {
        .                           // If `inlined_probe_value` returns a value it's always a
        .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
        .                           // `ty::Infer(_)`.
       30 ( 0.00%)                  self.inner.borrow_mut().int_unification_table().inlined_probe_value(v).is_some()
        .                       }
        .           
        .                       TyOrConstInferVar::TyFloat(v) => {
        .                           // If `probe_value` returns a value it's always a
        .                           // `ty::Float(_)`, which never matches a `ty::Infer(_)`.
        .                           //
        .                           // Not `inlined_probe_value(v)` because this call site is colder.
        .                           self.inner.borrow_mut().float_unification_table().probe_value(v).is_some()
-- line 1688 ----------------------------------------
-- line 1716 ----------------------------------------
        .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
        .               Const(ConstVid<'tcx>),
        .           }
        .           
        .           impl<'tcx> TyOrConstInferVar<'tcx> {
        .               /// Tries to extract an inference variable from a type or a constant, returns `None`
        .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
        .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
   17,940 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
        .                   match arg.unpack() {
        .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
        .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
        .                       GenericArgKind::Lifetime(_) => None,
        .                   }
   17,940 ( 0.00%)      }
        .           
        .               /// Tries to extract an inference variable from a type, returns `None`
        .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
    2,154 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
  177,588 ( 0.00%)          match *ty.kind() {
   39,250 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
       10 ( 0.00%)              ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
        .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
        .                       _ => None,
        .                   }
    2,154 ( 0.00%)      }
        .           
        .               /// Tries to extract an inference variable from a constant, returns `None`
        .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
        .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
        .                   match ct.val {
        .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
        .                       _ => None,
        .                   }
-- line 1749 ----------------------------------------
-- line 1751 ----------------------------------------
        .           }
        .           
        .           struct ShallowResolver<'a, 'tcx> {
        .               infcx: &'a InferCtxt<'a, 'tcx>,
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
        8 ( 0.00%)          self.infcx.tcx
        4 ( 0.00%)      }
        .           
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
1,559,199 ( 0.01%)          self.infcx.shallow_resolve_ty(ty)
        .               }
        .           
   10,936 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    5,754 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
      715 ( 0.00%)              self.infcx
        .                           .inner
        .                           .borrow_mut()
        .                           .const_unification_table()
      429 ( 0.00%)                  .probe_value(*vid)
        .                           .val
        .                           .known()
        .                           .unwrap_or(ct)
        .                   } else {
        .                       ct
        .                   }
   13,670 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeTrace<'tcx> {
        .               pub fn span(&self) -> Span {
      116 ( 0.00%)          self.cause.span
        .               }
        .           
        .               pub fn types(
        .                   cause: &ObligationCause<'tcx>,
        .                   a_is_expected: bool,
        .                   a: Ty<'tcx>,
        .                   b: Ty<'tcx>,
        .               ) -> TypeTrace<'tcx> {
-- line 1792 ----------------------------------------
-- line 1800 ----------------------------------------
        .                   b: &'tcx ty::Const<'tcx>,
        .               ) -> TypeTrace<'tcx> {
        .                   TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }
        .               }
        .           }
        .           
        .           impl<'tcx> SubregionOrigin<'tcx> {
        .               pub fn span(&self) -> Span {
      290 ( 0.00%)          match *self {
       58 ( 0.00%)              Subtype(ref a) => a.span(),
        .                       RelateObjectBound(a) => a,
        .                       RelateParamBound(a, ..) => a,
        .                       RelateRegionParamBound(a) => a,
        .                       Reborrow(a) => a,
        .                       ReborrowUpvar(a, _) => a,
        .                       DataBorrowed(_, a) => a,
        .                       ReferenceOutlivesReferent(_, a) => a,
        .                       CompareImplMethodObligation { span, .. } => span,
-- line 1817 ----------------------------------------
-- line 1818 ----------------------------------------
        .                       CompareImplTypeObligation { span, .. } => span,
        .                   }
        .               }
        .           
        .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
        .               where
        .                   F: FnOnce() -> Self,
        .               {
   96,221 ( 0.00%)          match *cause.code() {
   11,363 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
   56,815 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
        .                       }
        .           
        .                       traits::ObligationCauseCode::CompareImplMethodObligation {
        .                           impl_item_def_id,
        .                           trait_item_def_id,
        .                       } => SubregionOrigin::CompareImplMethodObligation {
        .                           span: cause.span,
        .                           impl_item_def_id,
-- line 1836 ----------------------------------------

7,104,560 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir                  

-- line 21 ----------------------------------------
         .           use rustc_target::spec::abi;
         .           use std::borrow::Cow;
         .           use std::cmp::Ordering;
         .           use std::marker::PhantomData;
         .           use std::ops::Range;
         .           use ty::util::IntTypeExt;
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
       110 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
         .           pub struct TypeAndMut<'tcx> {
    50,058 ( 0.00%)      pub ty: Ty<'tcx>,
   250,290 ( 0.00%)      pub mutbl: hir::Mutability,
         .           }
         .           
         .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
         .           #[derive(HashStable)]
         .           /// A "free" region `fr` can be interpreted as "some region
         .           /// at least as big as the scope `fr.scope`".
         .           pub struct FreeRegion {
    86,497 ( 0.00%)      pub scope: DefId,
   157,247 ( 0.00%)      pub bound_region: BoundRegionKind,
         .           }
         .           
 1,902,340 ( 0.01%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
       488 ( 0.00%)  #[derive(HashStable)]
         .           pub enum BoundRegionKind {
         .               /// An anonymous region parameter for a given fn (&T)
   159,002 ( 0.00%)      BrAnon(u32),
         .           
         .               /// Named region parameters for functions (a in &'a T)
         .               ///
         .               /// The `DefId` is needed to distinguish free regions in
         .               /// the event of shadowing.
     4,689 ( 0.00%)      BrNamed(DefId, Symbol),
         .           
         .               /// Anonymous region for the implicit env pointer parameter
         .               /// to a closure
         .               BrEnv,
         .           }
         .           
     4,048 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
         .           #[derive(HashStable)]
         .           pub struct BoundRegion {
   415,401 ( 0.00%)      pub var: BoundVar,
   362,149 ( 0.00%)      pub kind: BoundRegionKind,
         .           }
         .           
         .           impl BoundRegionKind {
         .               pub fn is_named(&self) -> bool {
         .                   match *self {
         .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
         .                       _ => false,
         .                   }
         .               }
         .           }
         .           
         .           /// Defines the kinds of types.
         .           ///
         .           /// N.B., if you change this, you'll probably want to change the corresponding
         .           /// AST structure in `rustc_ast/src/ast.rs` as well.
79,777,899 ( 0.39%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
   481,148 ( 0.00%)  #[derive(HashStable)]
         .           #[rustc_diagnostic_item = "TyKind"]
         .           pub enum TyKind<'tcx> {
         .               /// The primitive boolean type. Written as `bool`.
         .               Bool,
         .           
         .               /// The primitive character type; holds a Unicode scalar value
         .               /// (a non-surrogate code point). Written as `char`.
         .               Char,
-- line 90 ----------------------------------------
-- line 99 ----------------------------------------
         .               Float(ty::FloatTy),
         .           
         .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
         .               ///
         .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
         .               /// That is, even after substitution it is possible that there are type
         .               /// variables. This happens when the `Adt` corresponds to an ADT
         .               /// definition and not a concrete use of it.
12,369,837 ( 0.06%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
         .           
         .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
         .               Foreign(DefId),
         .           
         .               /// The pointee of a string slice. Written as `str`.
         .               Str,
         .           
         .               /// An array with the given length. Written as `[T; n]`.
    95,464 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
         .           
         .               /// The pointee of an array slice. Written as `[T]`.
         .               Slice(Ty<'tcx>),
         .           
         .               /// A raw pointer. Written as `*mut T` or `*const T`
         .               RawPtr(TypeAndMut<'tcx>),
         .           
         .               /// A reference; a pointer with an associated lifetime. Written as
         .               /// `&'a mut T` or `&'a T`.
 4,607,599 ( 0.02%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
         .           
         .               /// The anonymous type of a function declaration/definition. Each
         .               /// function has a unique type, which is output (for a function
         .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
         .               ///
         .               /// For example the type of `bar` here:
         .               ///
         .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
         .               ///
         .               /// ```rust
         .               /// fn foo() -> i32 { 1 }
         .               /// let bar: fn() -> i32 = foo;
         .               /// ```
         .               FnPtr(PolyFnSig<'tcx>),
         .           
         .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
 1,771,042 ( 0.01%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
         .           
         .               /// The anonymous type of a closure. Used to represent the type of
         .               /// `|a| a`.
         .               Closure(DefId, SubstsRef<'tcx>),
         .           
         .               /// The anonymous type of a generator. Used to represent the type of
         .               /// `|a| yield a`.
    98,439 ( 0.00%)      Generator(DefId, SubstsRef<'tcx>, hir::Movability),
         .           
         .               /// A type representing the types stored inside a generator.
         .               /// This should only appear in GeneratorInteriors.
         .               GeneratorWitness(Binder<'tcx, &'tcx List<Ty<'tcx>>>),
         .           
         .               /// The never type `!`.
         .               Never,
         .           
-- line 167 ----------------------------------------
-- line 180 ----------------------------------------
         .               /// The substitutions are for the generics of the function in question.
         .               /// After typeck, the concrete type can be found in the `types` map.
         .               Opaque(DefId, SubstsRef<'tcx>),
         .           
         .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
         .               Param(ParamTy),
         .           
         .               /// Bound type variable, used only when preparing a trait query.
    14,717 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
         .           
         .               /// A placeholder type - universally quantified higher-ranked type.
         .               Placeholder(ty::PlaceholderType),
         .           
         .               /// A type variable used during type checking.
         .               Infer(InferTy),
         .           
         .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 330 ----------------------------------------
         .               pub closure_kind_ty: T,
         .               pub closure_sig_as_fn_ptr_ty: T,
         .               pub tupled_upvars_ty: T,
         .           }
         .           
         .           impl<'tcx> ClosureSubsts<'tcx> {
         .               /// Construct `ClosureSubsts` from `ClosureSubstsParts`, containing `Substs`
         .               /// for the closure parent, alongside additional closure-specific components.
       157 ( 0.00%)      pub fn new(
         .                   tcx: TyCtxt<'tcx>,
         .                   parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,
         .               ) -> ClosureSubsts<'tcx> {
         .                   ClosureSubsts {
         .                       substs: tcx.mk_substs(
       314 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
       628 ( 0.00%)                      [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]
         .                                   .iter()
         .                                   .map(|&ty| ty.into()),
         .                           ),
         .                       ),
         .                   }
       314 ( 0.00%)      }
         .           
         .               /// Divides the closure substs into their respective components.
         .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
     6,210 ( 0.00%)      fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
         .                   match self.substs[..] {
    59,364 ( 0.00%)              [
    15,570 ( 0.00%)                  ref parent_substs @ ..,
    15,291 ( 0.00%)                  closure_kind_ty,
     8,928 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
    11,708 ( 0.00%)                  tupled_upvars_ty,
    24,840 ( 0.00%)              ] => ClosureSubstsParts {
         .                           parent_substs,
         .                           closure_kind_ty,
         .                           closure_sig_as_fn_ptr_ty,
         .                           tupled_upvars_ty,
         .                       },
         .                       _ => bug!("closure substs missing synthetics"),
         .                   }
    18,630 ( 0.00%)      }
         .           
         .               /// Returns `true` only if enough of the synthetic types are known to
         .               /// allow using all of the methods on `ClosureSubsts` without panicking.
         .               ///
         .               /// Used primarily by `ty::print::pretty` to be able to handle closure
         .               /// types that haven't had their synthetic types substituted in.
        35 ( 0.00%)      pub fn is_valid(self) -> bool {
        70 ( 0.00%)          self.substs.len() >= 3
        70 ( 0.00%)              && matches!(self.split().tupled_upvars_ty.expect_ty().kind(), Tuple(_))
        70 ( 0.00%)      }
         .           
         .               /// Returns the substitutions of the closure's parent.
         .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
         .                   self.split().parent_substs
         .               }
         .           
         .               /// Returns an iterator over the list of types of captured paths by the closure.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
       810 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
     4,098 ( 0.00%)          match self.tupled_upvars_ty().kind() {
         .                       TyKind::Error(_) => None,
     1,831 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
       540 ( 0.00%)      }
         .           
         .               /// Returns the tuple type representing the upvars for this closure.
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
    31,690 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
         .               }
         .           
         .               /// Returns the closure kind for this closure; may return a type
         .               /// variable during inference. To get the closure kind during
         .               /// inference, use `infcx.closure_kind(substs)`.
     3,520 ( 0.00%)      pub fn kind_ty(self) -> Ty<'tcx> {
         .                   self.split().closure_kind_ty.expect_ty()
     7,040 ( 0.00%)      }
         .           
         .               /// Returns the `fn` pointer type representing the closure signature for this
         .               /// closure.
         .               // FIXME(eddyb) this should be unnecessary, as the shallowly resolved
         .               // type is known at the time of the creation of `ClosureSubsts`,
         .               // see `rustc_typeck::check::closure`.
         .               pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {
         .                   self.split().closure_sig_as_fn_ptr_ty.expect_ty()
         .               }
         .           
         .               /// Returns the closure kind for this closure; only usable outside
         .               /// of an inference context, because in that context we know that
         .               /// there are no type variables.
         .               ///
         .               /// If you have an inference context, use `infcx.closure_kind()`.
        65 ( 0.00%)      pub fn kind(self) -> ty::ClosureKind {
       325 ( 0.00%)          self.kind_ty().to_opt_closure_kind().unwrap()
       130 ( 0.00%)      }
         .           
         .               /// Extracts the signature from the closure.
     4,248 ( 0.00%)      pub fn sig(self) -> ty::PolyFnSig<'tcx> {
         .                   let ty = self.sig_as_fn_ptr_ty();
     8,496 ( 0.00%)          match ty.kind() {
    16,992 ( 0.00%)              ty::FnPtr(sig) => *sig,
         .                       _ => bug!("closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}", ty.kind()),
         .                   }
    12,744 ( 0.00%)      }
         .           }
         .           
         .           /// Similar to `ClosureSubsts`; see the above documentation for more.
         .           #[derive(Copy, Clone, Debug, TypeFoldable)]
         .           pub struct GeneratorSubsts<'tcx> {
         .               pub substs: SubstsRef<'tcx>,
         .           }
         .           
-- line 448 ----------------------------------------
-- line 453 ----------------------------------------
         .               pub return_ty: T,
         .               pub witness: T,
         .               pub tupled_upvars_ty: T,
         .           }
         .           
         .           impl<'tcx> GeneratorSubsts<'tcx> {
         .               /// Construct `GeneratorSubsts` from `GeneratorSubstsParts`, containing `Substs`
         .               /// for the generator parent, alongside additional generator-specific components.
        32 ( 0.00%)      pub fn new(
         .                   tcx: TyCtxt<'tcx>,
         .                   parts: GeneratorSubstsParts<'tcx, Ty<'tcx>>,
         .               ) -> GeneratorSubsts<'tcx> {
         .                   GeneratorSubsts {
         .                       substs: tcx.mk_substs(
        64 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
        96 ( 0.00%)                      [
        32 ( 0.00%)                          parts.resume_ty,
         .                                   parts.yield_ty,
        32 ( 0.00%)                          parts.return_ty,
         .                                   parts.witness,
        32 ( 0.00%)                          parts.tupled_upvars_ty,
         .                               ]
         .                               .iter()
         .                               .map(|&ty| ty.into()),
         .                           ),
         .                       ),
         .                   }
        64 ( 0.00%)      }
         .           
         .               /// Divides the generator substs into their respective components.
         .               /// The ordering assumed here must match that used by `GeneratorSubsts::new` above.
     1,643 ( 0.00%)      fn split(self) -> GeneratorSubstsParts<'tcx, GenericArg<'tcx>> {
         .                   match self.substs[..] {
    26,413 ( 0.00%)              [ref parent_substs @ .., resume_ty, yield_ty, return_ty, witness, tupled_upvars_ty] => {
     8,215 ( 0.00%)                  GeneratorSubstsParts {
         .                               parent_substs,
         .                               resume_ty,
         .                               yield_ty,
         .                               return_ty,
         .                               witness,
         .                               tupled_upvars_ty,
         .                           }
         .                       }
         .                       _ => bug!("generator substs missing synthetics"),
         .                   }
     4,929 ( 0.00%)      }
         .           
         .               /// Returns `true` only if enough of the synthetic types are known to
         .               /// allow using all of the methods on `GeneratorSubsts` without panicking.
         .               ///
         .               /// Used primarily by `ty::print::pretty` to be able to handle generator
         .               /// types that haven't had their synthetic types substituted in.
        32 ( 0.00%)      pub fn is_valid(self) -> bool {
        64 ( 0.00%)          self.substs.len() >= 5
        64 ( 0.00%)              && matches!(self.split().tupled_upvars_ty.expect_ty().kind(), Tuple(_))
        64 ( 0.00%)      }
         .           
         .               /// Returns the substitutions of the generator's parent.
         .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
         .                   self.split().parent_substs
         .               }
         .           
         .               /// This describes the types that can be contained in a generator.
         .               /// It will be a type variable initially and unified in the last stages of typeck of a body.
         .               /// It contains a tuple of all the types that could end up on a generator frame.
         .               /// The state transformation MIR pass may only produce layouts which mention types
         .               /// in this tuple. Upvars are not counted here.
       151 ( 0.00%)      pub fn witness(self) -> Ty<'tcx> {
         .                   self.split().witness.expect_ty()
       302 ( 0.00%)      }
         .           
         .               /// Returns an iterator over the list of types of captured paths by the generator.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
       924 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
     2,088 ( 0.00%)          match self.tupled_upvars_ty().kind() {
         .                       TyKind::Error(_) => None,
     1,278 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
       616 ( 0.00%)      }
         .           
         .               /// Returns the tuple type representing the upvars for this generator.
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
     6,262 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
         .               }
         .           
         .               /// Returns the type representing the resume type of the generator.
        71 ( 0.00%)      pub fn resume_ty(self) -> Ty<'tcx> {
         .                   self.split().resume_ty.expect_ty()
       142 ( 0.00%)      }
         .           
         .               /// Returns the type representing the yield type of the generator.
        39 ( 0.00%)      pub fn yield_ty(self) -> Ty<'tcx> {
         .                   self.split().yield_ty.expect_ty()
        78 ( 0.00%)      }
         .           
         .               /// Returns the type representing the return type of the generator.
        39 ( 0.00%)      pub fn return_ty(self) -> Ty<'tcx> {
         .                   self.split().return_ty.expect_ty()
        78 ( 0.00%)      }
         .           
         .               /// Returns the "generator signature", which consists of its yield
         .               /// and return types.
         .               ///
         .               /// N.B., some bits of the code prefers to see this wrapped in a
         .               /// binder, but it never contains bound regions. Probably this
         .               /// function should be removed.
     4,060 ( 0.00%)      pub fn poly_sig(self) -> PolyGenSig<'tcx> {
     1,027 ( 0.00%)          ty::Binder::dummy(self.sig())
     4,060 ( 0.00%)      }
         .           
         .               /// Returns the "generator signature", which consists of its resume, yield
         .               /// and return types.
     1,059 ( 0.00%)      pub fn sig(self) -> GenSig<'tcx> {
     3,177 ( 0.00%)          ty::GenSig {
         .                       resume_ty: self.resume_ty(),
         .                       yield_ty: self.yield_ty(),
         .                       return_ty: self.return_ty(),
         .                   }
     3,177 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> GeneratorSubsts<'tcx> {
         .               /// Generator has not been resumed yet.
         .               pub const UNRESUMED: usize = 0;
         .               /// Generator has returned or is completed.
         .               pub const RETURNED: usize = 1;
         .               /// Generator has been poisoned.
-- line 586 ----------------------------------------
-- line 589 ----------------------------------------
         .               const UNRESUMED_NAME: &'static str = "Unresumed";
         .               const RETURNED_NAME: &'static str = "Returned";
         .               const POISONED_NAME: &'static str = "Panicked";
         .           
         .               /// The valid variant indices of this generator.
         .               #[inline]
         .               pub fn variant_range(&self, def_id: DefId, tcx: TyCtxt<'tcx>) -> Range<VariantIdx> {
         .                   // FIXME requires optimized MIR
       124 ( 0.00%)          let num_variants = tcx.generator_layout(def_id).unwrap().variant_fields.len();
         .                   VariantIdx::new(0)..VariantIdx::new(num_variants)
         .               }
         .           
         .               /// The discriminant for the given variant. Panics if the `variant_index` is
         .               /// out of range.
         .               #[inline]
         .               pub fn discriminant_for_variant(
         .                   &self,
         .                   def_id: DefId,
         .                   tcx: TyCtxt<'tcx>,
         .                   variant_index: VariantIdx,
         .               ) -> Discr<'tcx> {
         .                   // Generators don't support explicit discriminant values, so they are
         .                   // the same as the variant index.
        62 ( 0.00%)          assert!(self.variant_range(def_id, tcx).contains(&variant_index));
       124 ( 0.00%)          Discr { val: variant_index.as_usize() as u128, ty: self.discr_ty(tcx) }
         .               }
         .           
         .               /// The set of all discriminants for the generator, enumerated with their
         .               /// variant indices.
         .               #[inline]
         .               pub fn discriminants(
         .                   self,
         .                   def_id: DefId,
-- line 621 ----------------------------------------
-- line 623 ----------------------------------------
         .               ) -> impl Iterator<Item = (VariantIdx, Discr<'tcx>)> + Captures<'tcx> {
         .                   self.variant_range(def_id, tcx).map(move |index| {
         .                       (index, Discr { val: index.as_usize() as u128, ty: self.discr_ty(tcx) })
         .                   })
         .               }
         .           
         .               /// Calls `f` with a reference to the name of the enumerator for the given
         .               /// variant `v`.
        69 ( 0.00%)      pub fn variant_name(v: VariantIdx) -> Cow<'static, str> {
       138 ( 0.00%)          match v.as_usize() {
         .                       Self::UNRESUMED => Cow::from(Self::UNRESUMED_NAME),
         .                       Self::RETURNED => Cow::from(Self::RETURNED_NAME),
         .                       Self::POISONED => Cow::from(Self::POISONED_NAME),
       161 ( 0.00%)              _ => Cow::from(format!("Suspend{}", v.as_usize() - 3)),
         .                   }
        92 ( 0.00%)      }
         .           
         .               /// The type of the state discriminant used in the generator type.
         .               #[inline]
         .               pub fn discr_ty(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
       296 ( 0.00%)          tcx.types.u32
         .               }
         .           
         .               /// This returns the types of the MIR locals which had to be stored across suspension points.
         .               /// It is calculated in rustc_const_eval::transform::generator::StateTransform.
         .               /// All the types here must be in the tuple in GeneratorInterior.
         .               ///
         .               /// The locals are grouped by their variant number. Note that some locals may
         .               /// be repeated in multiple variants.
         .               #[inline]
         .               pub fn state_tys(
         .                   self,
         .                   def_id: DefId,
         .                   tcx: TyCtxt<'tcx>,
         .               ) -> impl Iterator<Item = impl Iterator<Item = Ty<'tcx>> + Captures<'tcx>> {
       556 ( 0.00%)          let layout = tcx.generator_layout(def_id).unwrap();
         .                   layout.variant_fields.iter().map(move |variant| {
       398 ( 0.00%)              variant.iter().map(move |field| layout.field_tys[*field].subst(tcx, self.substs))
         .                   })
         .               }
         .           
         .               /// This is the types of the fields of a generator which are not stored in a
         .               /// variant.
         .               #[inline]
     2,330 ( 0.00%)      pub fn prefix_tys(self) -> impl Iterator<Item = Ty<'tcx>> {
         .                   self.upvar_tys()
     1,660 ( 0.00%)      }
         .           }
         .           
         .           #[derive(Debug, Copy, Clone, HashStable)]
         .           pub enum UpvarSubsts<'tcx> {
         .               Closure(SubstsRef<'tcx>),
         .               Generator(SubstsRef<'tcx>),
         .           }
         .           
         .           impl<'tcx> UpvarSubsts<'tcx> {
         .               /// Returns an iterator over the list of types of captured paths by the closure/generator.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
         .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       572 ( 0.00%)          let tupled_tys = match self {
       601 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
       160 ( 0.00%)              UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
         .                   };
         .           
     1,236 ( 0.00%)          match tupled_tys.kind() {
         .                       TyKind::Error(_) => None,
     1,047 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
         .               }
         .           
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
       950 ( 0.00%)          match self {
       859 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
       249 ( 0.00%)              UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
         .                   }
         .               }
         .           }
         .           
         .           /// An inline const is modeled like
         .           ///
         .           ///     const InlineConst<'l0...'li, T0...Tj, R>: R;
         .           ///
-- line 711 ----------------------------------------
-- line 760 ----------------------------------------
         .               }
         .           
         .               /// Returns the type of this inline const.
         .               pub fn ty(self) -> Ty<'tcx> {
         .                   self.split().ty.expect_ty()
         .               }
         .           }
         .           
 4,283,663 ( 0.02%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
 3,415,308 ( 0.02%)  #[derive(HashStable, TypeFoldable)]
         .           pub enum ExistentialPredicate<'tcx> {
         .               /// E.g., `Iterator`.
         .               Trait(ExistentialTraitRef<'tcx>),
         .               /// E.g., `Iterator::Item = T`.
         .               Projection(ExistentialProjection<'tcx>),
         .               /// E.g., `Send`.
     8,922 ( 0.00%)      AutoTrait(DefId),
         .           }
         .           
         .           impl<'tcx> ExistentialPredicate<'tcx> {
         .               /// Compares via an ordering that will not change if modules are reordered or other changes are
         .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
   719,255 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
         .                   use self::ExistentialPredicate::*;
 1,091,334 ( 0.01%)          match (*self, *other) {
         .                       (Trait(_), Trait(_)) => Ordering::Equal,
         .                       (Projection(ref a), Projection(ref b)) => {
         .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
         .                       }
         .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
         .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
         .                       }
         .                       (Trait(_), _) => Ordering::Less,
         .                       (Projection(_), Trait(_)) => Ordering::Greater,
         .                       (Projection(_), _) => Ordering::Less,
         .                       (AutoTrait(_), _) => Ordering::Greater,
         .                   }
   863,106 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
    29,196 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
         .                   use crate::ty::ToPredicate;
    17,636 ( 0.00%)          match self.skip_binder() {
         .                       ExistentialPredicate::Trait(tr) => {
         .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
         .                       }
         .                       ExistentialPredicate::Projection(p) => {
        56 ( 0.00%)                  self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
         .                       }
         .                       ExistentialPredicate::AutoTrait(did) => {
       894 ( 0.00%)                  let trait_ref = self.rebind(ty::TraitRef {
         .                               def_id: did,
         .                               substs: tcx.mk_substs_trait(self_ty, &[]),
         .                           });
         .                           trait_ref.without_const().to_predicate(tcx)
         .                       }
         .                   }
    25,952 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
         .               /// Returns the "principal `DefId`" of this set of existential predicates.
         .               ///
         .               /// A Rust trait object type consists (in addition to a lifetime bound)
         .               /// of a set of trait bounds, which are separated into any number
         .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 839 ----------------------------------------
         .               /// are the set `{Sync}`.
         .               ///
         .               /// It is also possible to have a "trivial" trait object that
         .               /// consists only of auto traits, with no principal - for example,
         .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
         .               /// is `{Send, Sync}`, while there is no principal. These trait objects
         .               /// have a "trivial" vtable consisting of just the size, alignment,
         .               /// and destructor.
     1,297 ( 0.00%)      pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
    27,626 ( 0.00%)          self[0]
    15,795 ( 0.00%)              .map_bound(|this| match this {
         .                           ExistentialPredicate::Trait(tr) => Some(tr),
         .                           _ => None,
     5,188 ( 0.00%)              })
         .                       .transpose()
     3,891 ( 0.00%)      }
         .           
     3,348 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
         .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
     6,696 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn projection_bounds<'a>(
         .                   &'a self,
         .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
         .                   self.iter().filter_map(|predicate| {
     2,724 ( 0.00%)              predicate
    18,914 ( 0.00%)                  .map_bound(|pred| match pred {
     5,630 ( 0.00%)                      ExistentialPredicate::Projection(projection) => Some(projection),
         .                               _ => None,
         .                           })
         .                           .transpose()
         .                   })
         .               }
         .           
         .               #[inline]
         .               pub fn auto_traits<'a>(&'a self) -> impl Iterator<Item = DefId> + 'a {
        65 ( 0.00%)          self.iter().filter_map(|predicate| match predicate.skip_binder() {
         .                       ExistentialPredicate::AutoTrait(did) => Some(did),
         .                       _ => None,
         .                   })
         .               }
         .           }
         .           
         .           /// A complete reference to a trait. These take numerous guises in syntax,
         .           /// but perhaps the most recognizable form is in a where-clause:
-- line 884 ----------------------------------------
-- line 886 ----------------------------------------
         .           ///     T: Foo<U>
         .           ///
         .           /// This would be represented by a trait-reference where the `DefId` is the
         .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
         .           /// and `U` as parameter 1.
         .           ///
         .           /// Trait references also appear in object types like `Foo<U>`, but in
         .           /// that case the `Self` parameter is absent from the substitutions.
    54,766 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
11,889,793 ( 0.06%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct TraitRef<'tcx> {
    24,067 ( 0.00%)      pub def_id: DefId,
 6,090,812 ( 0.03%)      pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           impl<'tcx> TraitRef<'tcx> {
     7,631 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
         .                   TraitRef { def_id, substs }
    30,524 ( 0.00%)      }
         .           
         .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
         .               /// are the parameters defined on trait.
     6,165 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
     2,740 ( 0.00%)          ty::Binder::dummy(TraitRef {
         .                       def_id,
     4,110 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
         .                   })
     5,480 ( 0.00%)      }
         .           
         .               #[inline]
        15 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
         .                   self.substs.type_at(0)
        10 ( 0.00%)      }
         .           
    25,472 ( 0.00%)      pub fn from_method(
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_id: DefId,
         .                   substs: SubstsRef<'tcx>,
         .               ) -> ty::TraitRef<'tcx> {
         .                   let defs = tcx.generics_of(trait_id);
         .           
     3,184 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
    35,024 ( 0.00%)      }
         .           }
         .           
         .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
         .           
         .           impl<'tcx> PolyTraitRef<'tcx> {
         .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
         .                   self.map_bound_ref(|tr| tr.self_ty())
         .               }
         .           
         .               pub fn def_id(&self) -> DefId {
    50,460 ( 0.00%)          self.skip_binder().def_id
    16,820 ( 0.00%)      }
         .           
    24,125 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
    48,250 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
         .                       trait_ref,
         .                       constness: ty::BoundConstness::NotConst,
         .                       polarity: ty::ImplPolarity::Positive,
         .                   })
    24,125 ( 0.00%)      }
         .           }
         .           
         .           /// An existential reference to a trait, where `Self` is erased.
         .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
         .           ///
         .           ///     exists T. T: Trait<'a, 'b, X, Y>
         .           ///
         .           /// The substitutions don't include the erased `Self`, only trait
         .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
     7,643 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
   788,664 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ExistentialTraitRef<'tcx> {
    93,768 ( 0.00%)      pub def_id: DefId,
   936,048 ( 0.00%)      pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           impl<'tcx> ExistentialTraitRef<'tcx> {
     2,560 ( 0.00%)      pub fn erase_self_ty(
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_ref: ty::TraitRef<'tcx>,
         .               ) -> ty::ExistentialTraitRef<'tcx> {
         .                   // Assert there is a Self.
         .                   trait_ref.substs.type_at(0);
         .           
         .                   ty::ExistentialTraitRef {
         .                       def_id: trait_ref.def_id,
         .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
         .                   }
     2,560 ( 0.00%)      }
         .           
         .               /// Object types don't have a self type specified. Therefore, when
         .               /// we convert the principal trait-ref into a normal trait-ref,
         .               /// you must give *some* self type. A common choice is `mk_err()`
         .               /// or some placeholder type.
     1,660 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
         .                   // otherwise the escaping vars would be captured by the binder
         .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
         .           
       830 ( 0.00%)          ty::TraitRef { def_id: self.def_id, substs: tcx.mk_substs_trait(self_ty, self.substs) }
     4,150 ( 0.00%)      }
         .           }
         .           
         .           pub type PolyExistentialTraitRef<'tcx> = Binder<'tcx, ExistentialTraitRef<'tcx>>;
         .           
         .           impl<'tcx> PolyExistentialTraitRef<'tcx> {
         .               pub fn def_id(&self) -> DefId {
         .                   self.skip_binder().def_id
         .               }
         .           
         .               /// Object types don't have a self type specified. Therefore, when
         .               /// we convert the principal trait-ref into a normal trait-ref,
         .               /// you must give *some* self type. A common choice is `mk_err()`
         .               /// or some placeholder type.
     1,527 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
     2,079 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
     2,036 ( 0.00%)      }
         .           }
         .           
   296,407 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
       606 ( 0.00%)  #[derive(HashStable)]
         .           pub enum BoundVariableKind {
         .               Ty(BoundTyKind),
         .               Region(BoundRegionKind),
         .               Const,
         .           }
         .           
         .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
         .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
         .           /// (which would be represented by the type `PolyTraitRef ==
         .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
         .           /// erase, or otherwise "discharge" these bound vars, we change the
         .           /// type from `Binder<'tcx, T>` to just `T` (see
         .           /// e.g., `liberate_late_bound_regions`).
         .           ///
         .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
 3,953,228 ( 0.02%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
 3,024,485 ( 0.01%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
         .           
         .           impl<'tcx, T> Binder<'tcx, T>
         .           where
         .               T: TypeFoldable<'tcx>,
         .           {
         .               /// Wraps `value` in a binder, asserting that `value` does not
         .               /// contain any bound vars that would be bound by the
         .               /// binder. This is commonly used to 'inject' a value T into a
         .               /// different binding level.
   131,567 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
   406,820 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
 1,004,933 ( 0.00%)          Binder(value, ty::List::empty())
   128,156 ( 0.00%)      }
         .           
         .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(vars);
         .                       value.visit_with(&mut validator);
         .                   }
   145,319 ( 0.00%)          Binder(value, vars)
         .               }
         .           }
         .           
         .           impl<'tcx, T> Binder<'tcx, T> {
         .               /// Skips the binder and returns the "bound" value. This is a
         .               /// risky thing to do because it's easy to get confused about
         .               /// De Bruijn indices and the like. It is usually better to
         .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
         .               /// accounting.
         .               ///
         .               /// Some examples where `skip_binder` is reasonable:
         .               ///
         .               /// - extracting the `DefId` from a PolyTraitRef;
         .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
         .               ///   a type parameter `X`, since the type `X` does not reference any regions
         .               pub fn skip_binder(self) -> T {
 7,696,442 ( 0.04%)          self.0
         .               }
         .           
         .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
     9,354 ( 0.00%)          self.1
         .               }
         .           
         .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
    86,150 ( 0.00%)          Binder(&self.0, self.1)
         .               }
         .           
         .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(&T) -> U,
         .               {
         .                   let value = f(&self.0);
         .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
         .           
         .               pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(&T) -> U,
         .               {
         .                   self.as_ref().map_bound(f)
         .               }
         .           
     6,417 ( 0.00%)      pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(T) -> U,
         .               {
   266,718 ( 0.00%)          let value = f(self.0);
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.1);
         .                       value.visit_with(&mut validator);
         .                   }
 1,373,849 ( 0.01%)          Binder(value, self.1)
     7,148 ( 0.00%)      }
         .           
         .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
         .               where
         .                   F: FnOnce(T) -> Result<U, E>,
         .               {
         .                   let value = f(self.0)?;
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.1);
         .                       value.visit_with(&mut validator);
         .                   }
   110,986 ( 0.00%)          Ok(Binder(value, self.1))
         .               }
         .           
         .               /// Wraps a `value` in a binder, using the same bound variables as the
         .               /// current `Binder`. This should not be used if the new value *changes*
         .               /// the bound variables. Note: the (old or new) value itself does not
         .               /// necessarily need to *name* all the bound variables.
         .               ///
         .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
         .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
         .               where
         .                   U: TypeFoldable<'tcx>,
         .               {
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
         .                       value.visit_with(&mut validator);
         .                   }
   267,376 ( 0.00%)          Binder(value, self.1)
         .               }
         .           
         .               /// Unwraps and returns the value within, but only if it contains
         .               /// no bound vars at all. (In other words, if this binder --
         .               /// and indeed any enclosing binder -- doesn't bind anything at
         .               /// all.) Otherwise, returns `None`.
         .               ///
         .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
         .               /// binder, but permits late-bound vars bound by enclosing
         .               /// binders, but that would require adjusting the debruijn
         .               /// indices, and given the shallow binding structure we often use,
         .               /// would not be that useful.)
         .               pub fn no_bound_vars(self) -> Option<T>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
   859,933 ( 0.00%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
     5,465 ( 0.00%)      }
         .           
         .               /// Splits the contents into two things that share the same binder
         .               /// level as the original, returning two distinct binders.
         .               ///
         .               /// `f` should consider bound regions at depth 1 to be free, and
         .               /// anything it produces with bound regions at depth 1 will be
         .               /// bound in the resulting return values.
         .               pub fn split<U, V, F>(self, f: F) -> (Binder<'tcx, U>, Binder<'tcx, V>)
-- line 1160 ----------------------------------------
-- line 1170 ----------------------------------------
         .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
         .                   let bound_vars = self.1;
         .                   self.0.map(|v| Binder(v, bound_vars))
         .               }
         .           }
         .           
         .           /// Represents the projection of an associated type. In explicit UFCS
         .           /// form this would be written `<T as Trait<..>>::N`.
    12,023 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
   950,788 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ProjectionTy<'tcx> {
         .               /// The parameters of the associated item.
   433,246 ( 0.00%)      pub substs: SubstsRef<'tcx>,
         .           
         .               /// The `DefId` of the `TraitItem` for the associated type `N`.
         .               ///
         .               /// Note that this is not the `DefId` of the `TraitRef` containing this
         .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
   799,532 ( 0.00%)      pub item_def_id: DefId,
         .           }
         .           
         .           impl<'tcx> ProjectionTy<'tcx> {
   163,338 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
    46,668 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
   186,672 ( 0.00%)      }
         .           
         .               /// Extracts the underlying trait reference and own substs from this projection.
         .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
         .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
    94,269 ( 0.00%)      pub fn trait_ref_and_own_substs(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
    40,401 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
         .                   let trait_generics = tcx.generics_of(def_id);
    67,335 ( 0.00%)          (
         .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
         .                       &self.substs[trait_generics.count()..],
         .                   )
   121,203 ( 0.00%)      }
         .           
         .               /// Extracts the underlying trait reference from this projection.
         .               /// For example, if this is a projection of `<T as Iterator>::Item`,
         .               /// then this function would return a `T: Iterator` trait reference.
         .               ///
         .               /// WARNING: This will drop the substs for generic associated types
         .               /// consider calling [Self::trait_ref_and_own_substs] to get those
         .               /// as well.
   208,305 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
    23,145 ( 0.00%)          let def_id = self.trait_def_id(tcx);
    23,145 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
   254,595 ( 0.00%)      }
         .           
    45,140 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
   135,420 ( 0.00%)          self.substs.type_at(0)
    90,280 ( 0.00%)      }
         .           }
         .           
     4,466 ( 0.00%)  #[derive(Copy, Clone, Debug, TypeFoldable)]
         .           pub struct GenSig<'tcx> {
         .               pub resume_ty: Ty<'tcx>,
         .               pub yield_ty: Ty<'tcx>,
         .               pub return_ty: Ty<'tcx>,
         .           }
         .           
         .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
         .           
         .           /// Signature of a function type, which we have arbitrarily
         .           /// decided to use to refer to the input/output types.
         .           ///
         .           /// - `inputs`: is the list of arguments and their modes.
         .           /// - `output`: is the return type.
         .           /// - `c_variadic`: indicates whether this is a C-variadic function.
   250,437 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
   180,098 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct FnSig<'tcx> {
    34,590 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
   280,719 ( 0.00%)      pub c_variadic: bool,
    58,427 ( 0.00%)      pub unsafety: hir::Unsafety,
   219,491 ( 0.00%)      pub abi: abi::Abi,
         .           }
         .           
         .           impl<'tcx> FnSig<'tcx> {
   117,522 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
   527,243 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
   235,044 ( 0.00%)      }
         .           
    64,905 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
   534,137 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
   129,810 ( 0.00%)      }
         .           
         .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
         .               // method.
         .               fn fake() -> FnSig<'tcx> {
         .                   FnSig {
         .                       inputs_and_output: List::empty(),
         .                       c_variadic: false,
         .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
         .               }
         .           }
         .           
         .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
         .           
         .           impl<'tcx> PolyFnSig<'tcx> {
         .               #[inline]
         .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
    25,566 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
         .               }
         .               #[inline]
         .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
    33,379 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
         .               }
         .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
         .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
     1,416 ( 0.00%)      }
         .               #[inline]
         .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
    22,359 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
         .               }
         .               pub fn c_variadic(&self) -> bool {
     2,824 ( 0.00%)          self.skip_binder().c_variadic
     1,412 ( 0.00%)      }
         .               pub fn unsafety(&self) -> hir::Unsafety {
    13,280 ( 0.00%)          self.skip_binder().unsafety
     6,640 ( 0.00%)      }
         .               pub fn abi(&self) -> abi::Abi {
   187,304 ( 0.00%)          self.skip_binder().abi
    46,826 ( 0.00%)      }
         .           }
         .           
         .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
         .           
       516 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
     2,660 ( 0.00%)  #[derive(HashStable)]
         .           pub struct ParamTy {
     6,510 ( 0.00%)      pub index: u32,
         .               pub name: Symbol,
         .           }
         .           
         .           impl<'tcx> ParamTy {
     3,338 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
         .                   ParamTy { index, name }
     1,669 ( 0.00%)      }
         .           
         .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
     1,762 ( 0.00%)          ParamTy::new(def.index, def.name)
       881 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
         .                   tcx.mk_ty_param(self.index, self.name)
         .               }
         .           }
         .           
         .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
        33 ( 0.00%)  #[derive(HashStable)]
         .           pub struct ParamConst {
       194 ( 0.00%)      pub index: u32,
       194 ( 0.00%)      pub name: Symbol,
         .           }
         .           
         .           impl ParamConst {
         .               pub fn new(index: u32, name: Symbol) -> ParamConst {
         .                   ParamConst { index, name }
         .               }
         .           
         .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
         .           /// the inference variable is supposed to satisfy the relation
         .           /// *for every value of the placeholder region*. To ensure that doesn't
         .           /// happen, you can use `leak_check`. This is more clearly explained
         .           /// by the [rustc dev guide].
         .           ///
         .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
         .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
         .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
17,677,587 ( 0.09%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
    27,504 ( 0.00%)  pub enum RegionKind {
         .               /// Region bound in a type or fn declaration which will be
         .               /// substituted 'early' -- that is, at the same time when type
         .               /// parameters are substituted.
         .               ReEarlyBound(EarlyBoundRegion),
         .           
         .               /// Region bound in a function scope, which will be substituted when the
         .               /// function is called.
   711,452 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
         .           
         .               /// When checking a function body, the types of all arguments and so forth
         .               /// that refer to bound region parameters are modified to refer to free
         .               /// region parameters.
         .               ReFree(FreeRegion),
         .           
         .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
         .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
         .               /// regions visible from `U`, but not less than regions not visible
         .               /// from `U`.
         .               ReEmpty(ty::UniverseIndex),
         .           
         .               /// Erased region, used by trait selection, in MIR and during codegen.
         .               ReErased,
         .           }
         .           
    36,100 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
         .           pub struct EarlyBoundRegion {
     7,604 ( 0.00%)      pub def_id: DefId,
    30,238 ( 0.00%)      pub index: u32,
    52,318 ( 0.00%)      pub name: Symbol,
         .           }
         .           
         .           /// A **`const`** **v**ariable **ID**.
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
         .           pub struct ConstVid<'tcx> {
     4,107 ( 0.00%)      pub index: u32,
       285 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
         .           }
         .           
         .           rustc_index::newtype_index! {
         .               /// A **region** (lifetime) **v**ariable **ID**.
         .               pub struct RegionVid {
         .                   DEBUG_FORMAT = custom,
         .               }
         .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
         .           rustc_index::newtype_index! {
         .               pub struct BoundVar { .. }
         .           }
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub struct BoundTy {
         .               pub var: BoundVar,
    14,717 ( 0.00%)      pub kind: BoundTyKind,
         .           }
         .           
   250,471 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub enum BoundTyKind {
         .               Anon,
         .               Param(Symbol),
         .           }
         .           
         .           impl From<BoundVar> for BoundTy {
         .               fn from(var: BoundVar) -> Self {
         .                   BoundTy { var, kind: BoundTyKind::Anon }
         .               }
         .           }
         .           
         .           /// A `ProjectionPredicate` for an `ExistentialTraitRef`.
    14,113 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
   807,602 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ExistentialProjection<'tcx> {
   151,432 ( 0.00%)      pub item_def_id: DefId,
   953,640 ( 0.00%)      pub substs: SubstsRef<'tcx>,
   233,079 ( 0.00%)      pub term: Term<'tcx>,
         .           }
         .           
         .           pub type PolyExistentialProjection<'tcx> = Binder<'tcx, ExistentialProjection<'tcx>>;
         .           
         .           impl<'tcx> ExistentialProjection<'tcx> {
         .               /// Extracts the underlying existential trait reference from this projection.
         .               /// For example, if this is a projection of `exists T. <T as Iterator>::Item == X`,
         .               /// then this function would return an `exists T. T: Iterator` existential trait
         .               /// reference.
    41,930 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::ExistentialTraitRef<'tcx> {
    17,970 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
    11,980 ( 0.00%)          let subst_count = tcx.generics_of(def_id).count() - 1;
     5,990 ( 0.00%)          let substs = tcx.intern_substs(&self.substs[..subst_count]);
         .                   ty::ExistentialTraitRef { def_id, substs }
    53,910 ( 0.00%)      }
         .           
         .               pub fn with_self_ty(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   self_ty: Ty<'tcx>,
         .               ) -> ty::ProjectionPredicate<'tcx> {
         .                   // otherwise the escaping regions would be captured by the binders
         .                   debug_assert!(!self_ty.has_escaping_bound_vars());
-- line 1566 ----------------------------------------
-- line 1569 ----------------------------------------
         .                       projection_ty: ty::ProjectionTy {
         .                           item_def_id: self.item_def_id,
         .                           substs: tcx.mk_substs_trait(self_ty, self.substs),
         .                       },
         .                       term: self.term,
         .                   }
         .               }
         .           
       195 ( 0.00%)      pub fn erase_self_ty(
         .                   tcx: TyCtxt<'tcx>,
         .                   projection_predicate: ty::ProjectionPredicate<'tcx>,
         .               ) -> Self {
         .                   // Assert there is a Self.
       117 ( 0.00%)          projection_predicate.projection_ty.substs.type_at(0);
         .           
       156 ( 0.00%)          Self {
        78 ( 0.00%)              item_def_id: projection_predicate.projection_ty.item_def_id,
         .                       substs: tcx.intern_substs(&projection_predicate.projection_ty.substs[1..]),
        39 ( 0.00%)              term: projection_predicate.term,
         .                   }
       273 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> PolyExistentialProjection<'tcx> {
     1,570 ( 0.00%)      pub fn with_self_ty(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   self_ty: Ty<'tcx>,
         .               ) -> ty::PolyProjectionPredicate<'tcx> {
     1,570 ( 0.00%)          self.map_bound(|p| p.with_self_ty(tcx, self_ty))
     1,884 ( 0.00%)      }
         .           
         .               pub fn item_def_id(&self) -> DefId {
     1,024 ( 0.00%)          self.skip_binder().item_def_id
       512 ( 0.00%)      }
         .           }
         .           
         .           /// Region utilities
         .           impl RegionKind {
         .               /// Is this region named by the user?
         .               pub fn has_name(&self) -> bool {
         .                   match *self {
         .                       RegionKind::ReEarlyBound(ebr) => ebr.has_name(),
-- line 1611 ----------------------------------------
-- line 1616 ----------------------------------------
         .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
         .                       RegionKind::ReEmpty(_) => false,
         .                       RegionKind::ReErased => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_late_bound(&self) -> bool {
    13,310 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_placeholder(&self) -> bool {
        27 ( 0.00%)          matches!(*self, ty::RePlaceholder(..))
         .               }
         .           
         .               #[inline]
         .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
   384,535 ( 0.00%)          match *self {
         .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               pub fn type_flags(&self) -> TypeFlags {
         .                   let mut flags = TypeFlags::empty();
         .           
   552,839 ( 0.00%)          match *self {
         .                       ty::ReVar(..) => {
         .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
         .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
         .                           flags = flags | TypeFlags::HAS_RE_INFER;
         .                       }
         .                       ty::RePlaceholder(..) => {
         .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
         .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
         .                       ty::ReErased => {
         .                           flags = flags | TypeFlags::HAS_RE_ERASED;
         .                       }
         .                   }
         .           
         .                   debug!("type_flags({:?}) = {:?}", self, flags);
         .           
         .                   flags
    34,909 ( 0.00%)      }
         .           
         .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
         .               /// For example, consider the regions in this snippet of code:
         .               ///
         .               /// ```
         .               /// impl<'a> Foo {
         .               ///      ^^ -- early bound, declared on an impl
         .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
         .           
         .               #[inline(always)]
         .               pub fn flags(&self) -> TypeFlags {
         .                   self.flags
         .               }
         .           
         .               #[inline]
         .               pub fn is_unit(&self) -> bool {
     8,557 ( 0.00%)          match self.kind() {
     1,807 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_never(&self) -> bool {
    95,014 ( 0.00%)          matches!(self.kind(), Never)
         .               }
         .           
         .               #[inline]
         .               pub fn is_primitive(&self) -> bool {
         .                   self.kind().is_primitive()
         .               }
         .           
         .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn is_ref(&self) -> bool {
         .                   matches!(self.kind(), Ref(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_ty_var(&self) -> bool {
   166,914 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
   161,860 ( 0.00%)          match self.kind() {
    18,588 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_ty_infer(&self) -> bool {
       567 ( 0.00%)          matches!(self.kind(), Infer(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_phantom_data(&self) -> bool {
         8 ( 0.00%)          if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
         .               }
         .           
         .               #[inline]
         .               pub fn is_bool(&self) -> bool {
         .                   *self.kind() == Bool
         .               }
         .           
         .               /// Returns `true` if this type is a `str`.
         .               #[inline]
         .               pub fn is_str(&self) -> bool {
         .                   *self.kind() == Str
         .               }
         .           
         .               #[inline]
         .               pub fn is_param(&self, index: u32) -> bool {
     2,708 ( 0.00%)          match self.kind() {
         .                       ty::Param(ref data) => data.index == index,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_slice(&self) -> bool {
         .                   match self.kind() {
         .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_array(&self) -> bool {
       803 ( 0.00%)          matches!(self.kind(), Array(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_simd(&self) -> bool {
        16 ( 0.00%)          match self.kind() {
         8 ( 0.00%)              Adt(def, _) => def.repr.simd(),
         .                       _ => false,
         .                   }
         .               }
         .           
     1,140 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
     2,280 ( 0.00%)          match self.kind() {
         .                       Array(ty, _) | Slice(ty) => ty,
         .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
         .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
         .                   }
     1,140 ( 0.00%)      }
         .           
         .               pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
         .                   match self.kind() {
         .                       Adt(def, substs) => {
         .                           assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
         .                           let variant = def.non_enum_variant();
         .                           let f0_ty = variant.fields[0].ty(tcx, substs);
         .           
-- line 1824 ----------------------------------------
-- line 1838 ----------------------------------------
         .                           }
         .                       }
         .                       _ => bug!("`simd_size_and_type` called on invalid type"),
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_region_ptr(&self) -> bool {
         7 ( 0.00%)          matches!(self.kind(), Ref(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_mutable_ptr(&self) -> bool {
        15 ( 0.00%)          matches!(
        10 ( 0.00%)              self.kind(),
         .                       RawPtr(TypeAndMut { mutbl: hir::Mutability::Mut, .. })
         .                           | Ref(_, _, hir::Mutability::Mut)
         .                   )
         .               }
         .           
         .               /// Get the mutability of the reference or `None` when not a reference
         .               #[inline]
         .               pub fn ref_mutability(&self) -> Option<hir::Mutability> {
-- line 1860 ----------------------------------------
-- line 1861 ----------------------------------------
         .                   match self.kind() {
         .                       Ref(_, _, mutability) => Some(*mutability),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_unsafe_ptr(&self) -> bool {
    26,164 ( 0.00%)          matches!(self.kind(), RawPtr(_))
         .               }
         .           
         .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
         .               #[inline]
         .               pub fn is_any_ptr(&self) -> bool {
        98 ( 0.00%)          self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
         .               }
         .           
         .               #[inline]
         .               pub fn is_box(&self) -> bool {
   174,532 ( 0.00%)          match self.kind() {
    37,554 ( 0.00%)              Adt(def, _) => def.is_box(),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               /// Panics if called on any type other than `Box<T>`.
     4,040 ( 0.00%)      pub fn boxed_ty(&self) -> Ty<'tcx> {
     4,040 ( 0.00%)          match self.kind() {
    10,100 ( 0.00%)              Adt(def, substs) if def.is_box() => substs.type_at(0),
         .                       _ => bug!("`boxed_ty` is called on non-box type {:?}", self),
         .                   }
     4,040 ( 0.00%)      }
         .           
         .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
         .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
         .               /// contents are abstract to rustc.)
         .               #[inline]
         .               pub fn is_scalar(&self) -> bool {
       970 ( 0.00%)          matches!(
     2,306 ( 0.00%)              self.kind(),
         .                       Bool | Char
         .                           | Int(_)
         .                           | Float(_)
         .                           | Uint(_)
         .                           | FnDef(..)
         .                           | FnPtr(_)
         .                           | RawPtr(_)
         .                           | Infer(IntVar(_) | FloatVar(_))
         .                   )
         .               }
         .           
         .               /// Returns `true` if this type is a floating point type.
         .               #[inline]
         .               pub fn is_floating_point(&self) -> bool {
     6,185 ( 0.00%)          matches!(self.kind(), Float(_) | Infer(FloatVar(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_trait(&self) -> bool {
     1,441 ( 0.00%)          matches!(self.kind(), Dynamic(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_enum(&self) -> bool {
     7,382 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
         .               }
         .           
         .               #[inline]
         .               pub fn is_union(&self) -> bool {
    26,240 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
         .               }
         .           
         .               #[inline]
         .               pub fn is_closure(&self) -> bool {
     6,954 ( 0.00%)          matches!(self.kind(), Closure(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_generator(&self) -> bool {
    13,122 ( 0.00%)          matches!(self.kind(), Generator(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_integral(&self) -> bool {
    12,144 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fresh_ty(&self) -> bool {
         .                   matches!(self.kind(), Infer(FreshTy(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fresh(&self) -> bool {
    24,965 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_char(&self) -> bool {
         .                   matches!(self.kind(), Char)
         .               }
         .           
         .               #[inline]
         .               pub fn is_numeric(&self) -> bool {
         .                   self.is_integral() || self.is_floating_point()
         .               }
         .           
         .               #[inline]
         .               pub fn is_signed(&self) -> bool {
     1,997 ( 0.00%)          matches!(self.kind(), Int(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_ptr_sized_integral(&self) -> bool {
     1,140 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
         .               }
         .           
         .               #[inline]
         .               pub fn has_concrete_skeleton(&self) -> bool {
         .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
         .               }
         .           
         .               /// Returns the type and mutability of `*ty`.
         .               ///
         .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
         .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
    36,088 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
   244,261 ( 0.00%)          match self.kind() {
     6,066 ( 0.00%)              Adt(def, _) if def.is_box() => {
     2,308 ( 0.00%)                  Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
         .                       }
   120,838 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
    17,778 ( 0.00%)              RawPtr(mt) if explicit => Some(*mt),
         .                       _ => None,
         .                   }
    72,176 ( 0.00%)      }
         .           
         .               /// Returns the type of `ty[i]`.
         .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
       255 ( 0.00%)          match self.kind() {
         .                       Array(ty, _) | Slice(ty) => Some(ty),
         .                       _ => None,
         .                   }
        21 ( 0.00%)      }
         .           
   504,696 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
   252,348 ( 0.00%)          match self.kind() {
   189,117 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
       240 ( 0.00%)              FnPtr(f) => *f,
         .                       Error(_) => {
         .                           // ignore errors (#54954)
         .                           ty::Binder::dummy(FnSig::fake())
         .                       }
         .                       Closure(..) => bug!(
         .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
         .                       ),
         .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
         .                   }
   567,783 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn is_fn(&self) -> bool {
    54,237 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fn_ptr(&self) -> bool {
         .                   matches!(self.kind(), FnPtr(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_impl_trait(&self) -> bool {
        22 ( 0.00%)          matches!(self.kind(), Opaque(..))
         .               }
         .           
         .               #[inline]
         .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
    10,796 ( 0.00%)          match self.kind() {
         .                       Adt(adt, _) => Some(adt),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               /// Iterates over tuple fields.
         .               /// Panics when called on anything but a tuple.
     2,276 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
    11,100 ( 0.00%)          match self.kind() {
    10,392 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
         .                       _ => bug!("tuple_fields called on non-tuple"),
         .                   }
     4,552 ( 0.00%)      }
         .           
         .               /// Get the `i`-th element of a tuple.
         .               /// Panics when called on anything but a tuple.
       335 ( 0.00%)      pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
       670 ( 0.00%)          match self.kind() {
       670 ( 0.00%)              Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
         .                       _ => bug!("tuple_fields called on non-tuple"),
         .                   }
       670 ( 0.00%)      }
         .           
         .               /// If the type contains variants, returns the valid range of variant indices.
         .               //
         .               // FIXME: This requires the optimized MIR in the case of generators.
         .               #[inline]
         .               pub fn variant_range(&self, tcx: TyCtxt<'tcx>) -> Option<Range<VariantIdx>> {
         .                   match self.kind() {
         .                       TyKind::Adt(adt, _) => Some(adt.variant_range()),
-- line 2068 ----------------------------------------
-- line 2073 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// If the type contains variants, returns the variant for `variant_index`.
         .               /// Panics if `variant_index` is out of range.
         .               //
         .               // FIXME: This requires the optimized MIR in the case of generators.
         .               #[inline]
    32,300 ( 0.00%)      pub fn discriminant_for_variant(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   variant_index: VariantIdx,
         .               ) -> Option<Discr<'tcx>> {
    24,311 ( 0.00%)          match self.kind() {
     6,158 ( 0.00%)              TyKind::Adt(adt, _) if adt.variants.is_empty() => {
         .                           // This can actually happen during CTFE, see
         .                           // https://github.com/rust-lang/rust/issues/89765.
         .                           None
         .                       }
     3,079 ( 0.00%)              TyKind::Adt(adt, _) if adt.is_enum() => {
         .                           Some(adt.discriminant_for_variant(tcx, variant_index))
         .                       }
         .                       TyKind::Generator(def_id, substs, _) => {
       248 ( 0.00%)                  Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
         .                       }
         .                       _ => None,
         .                   }
    25,840 ( 0.00%)      }
         .           
         .               /// Returns the type of the discriminant of this type.
    47,220 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
    23,610 ( 0.00%)          match self.kind() {
    37,338 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
         .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
         .           
         .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
         .                           let assoc_items = tcx.associated_item_def_ids(
         .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
         .                           );
         .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
         .                       }
-- line 2113 ----------------------------------------
-- line 2127 ----------------------------------------
         .                       | ty::FnDef(..)
         .                       | ty::FnPtr(..)
         .                       | ty::Dynamic(..)
         .                       | ty::Closure(..)
         .                       | ty::GeneratorWitness(..)
         .                       | ty::Never
         .                       | ty::Tuple(_)
         .                       | ty::Error(_)
         1 ( 0.00%)              | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
         .           
         .                       ty::Bound(..)
         .                       | ty::Placeholder(_)
         .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
         .                       }
         .                   }
    37,776 ( 0.00%)      }
         .           
         .               /// Returns the type of metadata for (potentially fat) pointers to this type.
       819 ( 0.00%)      pub fn ptr_metadata_ty(
         .                   &'tcx self,
         .                   tcx: TyCtxt<'tcx>,
         .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
         .               ) -> Ty<'tcx> {
       819 ( 0.00%)          let tail = tcx.struct_tail_with_normalize(self, normalize);
       455 ( 0.00%)          match tail.kind() {
         .                       // Sized types
         .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
         .                       | ty::Uint(_)
         .                       | ty::Int(_)
         .                       | ty::Bool
         .                       | ty::Float(_)
         .                       | ty::FnDef(..)
         .                       | ty::FnPtr(_)
-- line 2160 ----------------------------------------
-- line 2170 ----------------------------------------
         .                       | ty::Foreign(..)
         .                       // If returned by `struct_tail_without_normalization` this is a unit struct
         .                       // without any fields, or not a struct, and therefore is Sized.
         .                       | ty::Adt(..)
         .                       // If returned by `struct_tail_without_normalization` this is the empty tuple,
         .                       // a.k.a. unit type, which is Sized
         .                       | ty::Tuple(..) => tcx.types.unit,
         .           
       182 ( 0.00%)              ty::Str | ty::Slice(_) => tcx.types.usize,
         .                       ty::Dynamic(..) => {
         .                           let dyn_metadata = tcx.lang_items().dyn_metadata().unwrap();
         .                           tcx.type_of(dyn_metadata).subst(tcx, &[tail.into()])
         .                       },
         .           
         .                       ty::Projection(_)
         .                       | ty::Param(_)
         .                       | ty::Opaque(..)
         .                       | ty::Infer(ty::TyVar(_))
         .                       | ty::Bound(..)
         .                       | ty::Placeholder(..)
         .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`ptr_metadata_ty` applied to unexpected type: {:?}", tail)
         .                       }
         .                   }
       728 ( 0.00%)      }
         .           
         .               /// When we create a closure, we record its kind (i.e., what trait
         .               /// it implements) into its `ClosureSubsts` using a type
         .               /// parameter. This is kind of a phantom type, except that the
         .               /// most convenient thing for us to are the integral types. This
         .               /// function converts such a special type into the closure
         .               /// kind. To go the other way, use
         .               /// `tcx.closure_kind_ty(closure_kind)`.
         .               ///
         .               /// Note that during type checking, we use an inference variable
         .               /// to represent the closure kind, because it has not yet been
         .               /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)
         .               /// is complete, that type variable will be unified.
     8,794 ( 0.00%)      pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {
    17,588 ( 0.00%)          match self.kind() {
    16,700 ( 0.00%)              Int(int_ty) => match int_ty {
         .                           ty::IntTy::I8 => Some(ty::ClosureKind::Fn),
         .                           ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),
         .                           ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),
         .                           _ => bug!("cannot convert type `{:?}` to a closure kind", self),
         .                       },
         .           
         .                       // "Bound" types appear in canonical queries when the
         .                       // closure type is not yet known
         .                       Bound(..) | Infer(_) => None,
         .           
         .                       Error(_) => Some(ty::ClosureKind::Fn),
         .           
         .                       _ => bug!("cannot convert type `{:?}` to a closure kind", self),
         .                   }
     8,794 ( 0.00%)      }
         .           
         .               /// Fast path helper for testing if a type is `Sized`.
         .               ///
         .               /// Returning true means the type is known to be sized. Returning
         .               /// `false` means nothing -- could be sized, might not be.
         .               ///
         .               /// Note that we could never rely on the fact that a type such as `[_]` is
         .               /// trivially `!Sized` because we could be in a type environment with a
         .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
         .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
         .               /// this method doesn't return `Option<bool>`.
   739,638 ( 0.00%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
   493,092 ( 0.00%)          match self.kind() {
         .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
         .                       | ty::Uint(_)
         .                       | ty::Int(_)
         .                       | ty::Bool
         .                       | ty::Float(_)
         .                       | ty::FnDef(..)
         .                       | ty::FnPtr(_)
         .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
         .                       | ty::GeneratorWitness(..)
         .                       | ty::Array(..)
         .                       | ty::Closure(..)
         .                       | ty::Never
         .                       | ty::Error(_) => true,
         .           
         .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
         .           
     6,909 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
         .           
    91,503 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
         .           
         .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
         .           
         .                       ty::Infer(ty::TyVar(_)) => false,
         .           
         .                       ty::Bound(..)
         .                       | ty::Placeholder(..)
         .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
         .                       }
         .                   }
   739,638 ( 0.00%)      }
         .           }
         .           
         .           /// Extra information about why we ended up with a particular variance.
         .           /// This is only used to add more information to error messages, and
         .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
         .           /// may lead to confusing notes in error messages, it will never cause
         .           /// a miscompilation or unsoundness.
         .           ///
         .           /// When in doubt, use `VarianceDiagInfo::default()`
     4,170 ( 0.00%)  #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]
         .           pub enum VarianceDiagInfo<'tcx> {
         .               /// No additional information - this is the default.
         .               /// We will not add any additional information to error messages.
         .               #[default]
         .               None,
         .               /// We switched our variance because a generic argument occurs inside
         .               /// the invariant generic argument of another type.
         .               Invariant {
-- line 2290 ----------------------------------------
-- line 2295 ----------------------------------------
         .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
         .                   param_index: u32,
         .               },
         .           }
         .           
         .           impl<'tcx> VarianceDiagInfo<'tcx> {
         .               /// Mirrors `Variance::xform` - used to 'combine' the existing
         .               /// and new `VarianceDiagInfo`s when our variance changes.
   217,796 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
         .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
   326,694 ( 0.00%)          match self {
         .                       VarianceDiagInfo::None => other,
         .                       VarianceDiagInfo::Invariant { .. } => self,
         .                   }
   108,898 ( 0.00%)      }
         .           }

91,922,809 ( 0.45%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir                  

-- line 5 ----------------------------------------
         .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
         .           unsafe impl GlobalAlloc for System {
         .               #[inline]
         .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
         .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
         .                   // So only rely on MIN_ALIGN if size >= align.
         .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
         .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
18,388,586 ( 0.09%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
13,791,438 ( 0.07%)              libc::malloc(layout.size()) as *mut u8
         .                   } else {
         .                       #[cfg(target_os = "macos")]
         .                       {
         .                           if layout.align() > (1 << 31) {
         .                               return ptr::null_mut();
         .                           }
         .                       }
         .                       aligned_malloc(&layout)
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
         .                   // See the comment above in `alloc` for why this check looks the way it does.
   811,992 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
 1,217,988 ( 0.01%)              libc::calloc(layout.size(), 1) as *mut u8
         .                   } else {
         .                       let ptr = self.alloc(layout);
         .                       if !ptr.is_null() {
         .                           ptr::write_bytes(ptr, 0, layout.size());
         .                       }
         .                       ptr
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
 4,800,133 ( 0.02%)          libc::free(ptr as *mut libc::c_void)
         .               }
         .           
         .               #[inline]
         .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
 1,748,900 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
 3,497,800 ( 0.02%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
         .                   } else {
         .                       realloc_fallback(self, ptr, layout, new_size)
         .                   }
         .               }
         .           }
         .           
         .           cfg_if::cfg_if! {
         .               if #[cfg(any(
-- line 56 ----------------------------------------
-- line 84 ----------------------------------------
         .               } else if #[cfg(target_os = "wasi")] {
         .                   #[inline]
         .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
         .                       libc::aligned_alloc(layout.align(), layout.size()) as *mut u8
         .                   }
         .               } else {
         .                   #[inline]
         .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
         1 ( 0.00%)              let mut out = ptr::null_mut();
         .                       // posix_memalign requires that the alignment be a multiple of `sizeof(void*)`.
         .                       // Since these are all powers of 2, we can just use max.
         .                       let align = layout.align().max(crate::mem::size_of::<usize>());
         2 ( 0.00%)              let ret = libc::posix_memalign(&mut out, align, layout.size());
         2 ( 0.00%)              if ret != 0 { ptr::null_mut() } else { out as *mut u8 }
         .                   }
         .               }
         .           }

         1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir                  

-- line 91 ----------------------------------------
         .           // maximum of number bytes needed to fill an 8-byte-sized element on which
         .           // SipHash operates. Note that for variable-sized copies which are known to be
         .           // less than 8 bytes, this function will perform more work than necessary unless
         .           // the compiler is able to optimize the extra work away.
         .           #[inline]
         .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
         .               debug_assert!(count <= 8);
         .           
   187,726 ( 0.00%)      if count == 8 {
         .                   ptr::copy_nonoverlapping(src, dst, 8);
         .                   return;
         .               }
         .           
         .               let mut i = 0;
   212,850 ( 0.00%)      if i + 3 < count {
         .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
         .                   i += 4;
         .               }
         .           
   454,029 ( 0.00%)      if i + 1 < count {
         .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
    51,487 ( 0.00%)          i += 2
         .               }
         .           
   212,850 ( 0.00%)      if i < count {
   160,884 ( 0.00%)          *dst.add(i) = *src.add(i);
         .                   i += 1;
         .               }
         .           
         .               debug_assert_eq!(i, count);
         .           }
         .           
         .           // # Implementation
         .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
         .           
         .                   hasher
         .               }
         .           
         .               // A specialized write function for values with size <= 8.
         .               #[inline]
         .               fn short_write<T>(&mut self, x: T) {
         .                   let size = mem::size_of::<T>();
 2,568,430 ( 0.01%)          let nbuf = self.nbuf;
         .                   debug_assert!(size <= 8);
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
         .           
17,518,986 ( 0.09%)          if nbuf + size < BUFFER_SIZE {
         .                       unsafe {
         .                           // The memcpy call is optimized away because the size is known.
         .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
         .                       }
         .           
 5,478,212 ( 0.03%)              self.nbuf = nbuf + size;
         .           
         .                       return;
         .                   }
         .           
   906,273 ( 0.00%)          unsafe { self.short_write_process_buffer(x) }
         .               }
         .           
         .               // A specialized write function for values with size <= 8 that should only
         .               // be called when the write would cause the buffer to fill.
         .               //
         .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
         .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
         .               // overflow) if it wasn't already.
         .               #[inline(never)]
   276,036 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
         .                   let size = mem::size_of::<T>();
   276,036 ( 0.00%)          let nbuf = self.nbuf;
         .                   debug_assert!(size <= 8);
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
         .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
         .           
         .                   // Copy first part of input into end of buffer, possibly into spill
         .                   // element. The memcpy call is optimized away because the size is known.
         .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
         .           
         .                   // Process buffer.
         .                   for i in 0..BUFFER_CAPACITY {
 2,760,360 ( 0.01%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
 2,208,288 ( 0.01%)              self.state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut self.state);
 2,484,324 ( 0.01%)              self.state.v0 ^= elem;
         .                   }
         .           
         .                   // Copy remaining input into start of buffer by copying size - 1
         .                   // elements from spill (at most size - 1 bytes could have overflowed
         .                   // into the spill). The memcpy call is optimized away because the size
         .                   // is known. And the whole copy is optimized away for size == 1.
         .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
         .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
         .           
         .                   // This function should only be called when the write fills the buffer.
         .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
         .                   // is statically known, so the branch is optimized away.
 1,307,504 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
 1,104,144 ( 0.01%)          self.processed += BUFFER_SIZE;
   552,072 ( 0.00%)      }
         .           
         .               // A write function for byte slices.
         .               #[inline]
         .               fn slice_write(&mut self, msg: &[u8]) {
         .                   let length = msg.len();
    35,005 ( 0.00%)          let nbuf = self.nbuf;
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .           
   654,685 ( 0.00%)          if nbuf + length < BUFFER_SIZE {
         .                       unsafe {
         .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .           
   238,746 ( 0.00%)                  if length <= 8 {
         .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
         .                           } else {
         .                               // This memcpy is *not* optimized away.
         .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
         .                           }
         .                       }
         .           
   119,749 ( 0.00%)              self.nbuf = nbuf + length;
         .           
         .                       return;
         .                   }
         .           
    90,520 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
         .               }
         .           
         .               // A write function for byte slices that should only be called when the
         .               // write would cause the buffer to fill.
         .               //
         .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
         .               // and `msg` must contain enough bytes to initialize the rest of the element
         .               // containing the byte offset `self.nbuf`.
         .               #[inline(never)]
    55,225 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
         .                   let length = msg.len();
    11,045 ( 0.00%)          let nbuf = self.nbuf;
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
         .           
         .                   // Always copy first part of input into current element of buffer.
         .                   // This function should only be called when the write fills the buffer,
         .                   // so we know that there is enough input to fill the current element.
    33,135 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
    11,045 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
         .           
         .                   let src = msg.as_ptr();
         .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
         .           
         .                   // Process buffer.
         .           
         .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
         .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
         .                   // We know that is true, because last step ensured we have a full
         .                   // element in the buffer.
    22,090 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
         .           
         .                   for i in 0..last {
    80,340 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
    91,385 ( 0.00%)              self.state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut self.state);
   160,680 ( 0.00%)              self.state.v0 ^= elem;
         .                   }
         .           
         .                   // Process the remaining element-sized chunks of input.
         .                   let mut processed = needed_in_elem;
    22,090 ( 0.00%)          let input_left = length - processed;
    16,857 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
         .                   let extra_bytes_left = input_left % ELEM_SIZE;
         .           
         .                   for _ in 0..elems_left {
    12,861 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
    12,861 ( 0.00%)              self.state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut self.state);
    12,861 ( 0.00%)              self.state.v0 ^= elem;
    25,722 ( 0.00%)              processed += ELEM_SIZE;
         .                   }
         .           
         .                   // Copy remaining input into start of buffer.
         .                   let src = msg.as_ptr().add(processed);
         .                   let dst = self.buf.as_mut_ptr() as *mut u8;
         .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
         .           
    11,045 ( 0.00%)          self.nbuf = extra_bytes_left;
    55,225 ( 0.00%)          self.processed += nbuf + processed;
    66,270 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn finish128(mut self) -> (u64, u64) {
         .                   debug_assert!(self.nbuf < BUFFER_SIZE);
         .           
         .                   // Process full elements in buffer.
   163,398 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
         .           
         .                   // Since we're consuming self, avoid updating members for a potential
         .                   // performance gain.
   217,864 ( 0.00%)          let mut state = self.state;
         .           
         .                   for i in 0..last {
   149,723 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
   149,723 ( 0.00%)              state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut state);
   149,723 ( 0.00%)              state.v0 ^= elem;
         .                   }
         .           
         .                   // Get remaining partial element.
   108,932 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
         .                       unsafe {
         .                           // Ensure element is initialized by writing zero bytes. At most
         .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
         .                           // to write this many because we have the spill and we maintain
         .                           // `self.nbuf` such that this write will start before the spill.
         .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
         .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
    52,183 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
         .                       }
         .                   } else {
         .                       0
         .                   };
         .           
         .                   // Finalize the hash.
   152,653 ( 0.00%)          let length = self.processed + self.nbuf;
    91,942 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
         .           
    45,971 ( 0.00%)          state.v3 ^= b;
         .                   Sip24Rounds::c_rounds(&mut state);
    45,971 ( 0.00%)          state.v0 ^= b;
         .           
    45,971 ( 0.00%)          state.v2 ^= 0xee;
         .                   Sip24Rounds::d_rounds(&mut state);
   152,630 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
         .           
    60,660 ( 0.00%)          state.v1 ^= 0xdd;
         .                   Sip24Rounds::d_rounds(&mut state);
    60,660 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
         .           
         .                   (_0, _1)
         .               }
         .           }
         .           
         .           impl Hasher for SipHasher128 {
         .               #[inline]
         .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
         .           }
         .           
         .           #[derive(Debug, Clone, Default)]
         .           struct Sip24Rounds;
         .           
         .           impl Sip24Rounds {
         .               #[inline]
         .               fn c_rounds(state: &mut State) {
10,297,903 ( 0.05%)          compress!(state);
11,057,860 ( 0.05%)          compress!(state);
         .               }
         .           
         .               #[inline]
         .               fn d_rounds(state: &mut State) {
   305,204 ( 0.00%)          compress!(state);
   305,204 ( 0.00%)          compress!(state);
   305,204 ( 0.00%)          compress!(state);
   259,247 ( 0.00%)          compress!(state);
         .               }
         .           }

 2,130,583 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/dl-lookup.c
  ./malloc/malloc.c
  ./nptl/pthread_rwlock_common.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S
  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
3,195,676,055 (15.59%)  events annotated

