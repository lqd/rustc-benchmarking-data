--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name zeroize --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --cfg feature="alloc" --cfg feature="default" -C metadata=9bfd03e052210bcb -C extra-filename=-9bfd03e052210bcb --out-dir /usr/home/liquid/tmp/.tmphLF5GJ/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmphLF5GJ/target/debug/deps -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-zeroize-1.5.1-Debug-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
488,947,645 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   file:function
--------------------------------------------------------------------------------
20,743,741 ( 4.24%)  ???:llvm::FPPassManager::runOnFunction(llvm::Function&)
15,429,460 ( 3.16%)  ./malloc/malloc.c:_int_free
15,105,632 ( 3.09%)  ./malloc/malloc.c:_int_malloc
10,309,062 ( 2.11%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
 9,198,931 ( 1.88%)  ./malloc/malloc.c:malloc
 5,696,385 ( 1.17%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
 4,845,537 ( 0.99%)  ./elf/dl-lookup.c:do_lookup_x
 4,548,070 ( 0.93%)  ./malloc/malloc.c:free
 4,251,008 ( 0.87%)  ???:llvm::PassRegistry::enumerateWith(llvm::PassRegistrationListener*)
 4,141,271 ( 0.85%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
 4,098,024 ( 0.84%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
 3,940,877 ( 0.81%)  ???:llvm::PMDataManager::verifyPreservedAnalysis(llvm::Pass*)
 3,791,527 ( 0.78%)  ???:llvm::X86TargetLowering::X86TargetLowering(llvm::X86TargetMachine const&, llvm::X86Subtarget const&)
 3,243,770 ( 0.66%)  ???:llvm::TargetLoweringBase::computeRegisterProperties(llvm::TargetRegisterInfo const*)
 2,965,156 ( 0.61%)  ???:SetImpliedBits(llvm::FeatureBitset&, llvm::FeatureBitset const&, llvm::ArrayRef<llvm::SubtargetFeatureKV>)
 2,882,063 ( 0.59%)  ???:llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const
 2,438,001 ( 0.50%)  ???:llvm::raw_svector_ostream::write_impl(char const*, unsigned long)
 2,255,182 ( 0.46%)  ???:(anonymous namespace)::Verifier::visitMDNode(llvm::MDNode const&, (anonymous namespace)::Verifier::AreDebugLocsAllowed)
 2,231,775 ( 0.46%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,191,890 ( 0.45%)  ./malloc/malloc.c:malloc_consolidate
 2,186,028 ( 0.45%)  ???:llvm::SelectionDAG::Combine(llvm::CombineLevel, llvm::AAResults*, llvm::CodeGenOpt::Level)
 2,154,099 ( 0.44%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
 2,139,033 ( 0.44%)  ./elf/do-rel.h:_dl_relocate_object
 1,960,672 ( 0.40%)  ???:llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)
 1,912,823 ( 0.39%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 1,831,886 ( 0.37%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 1,722,964 ( 0.35%)  ???:llvm::coro::declaresIntrinsics(llvm::Module const&, std::initializer_list<llvm::StringRef>)
 1,717,032 ( 0.35%)  ???:llvm::TargetRegisterInfo::checkAllSuperRegsMarked(llvm::BitVector const&, llvm::ArrayRef<unsigned short>) const
 1,678,318 ( 0.34%)  ???:(anonymous namespace)::Verifier::visitInstruction(llvm::Instruction&)
 1,677,457 ( 0.34%)  ./malloc/malloc.c:unlink_chunk.constprop.0
 1,642,108 ( 0.34%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::source_map::SourceMap>::lookup_source_file_idx
 1,606,621 ( 0.33%)  ???:llvm::MCExpr::evaluateAsRelocatableImpl(llvm::MCValue&, llvm::MCAssembler const*, llvm::MCAsmLayout const*, llvm::MCFixup const*, llvm::DenseMap<llvm::MCSection const*, unsigned long, llvm::DenseMapInfo<llvm::MCSection const*>, llvm::detail::DenseMapPair<llvm::MCSection const*, unsigned long> > const*, bool) const
 1,592,219 ( 0.33%)  ???:llvm::MachineInstr::addOperand(llvm::MachineFunction&, llvm::MachineOperand const&)
 1,572,811 ( 0.32%)  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:__strncmp_avx2
 1,535,551 ( 0.31%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 1,517,857 ( 0.31%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 1,501,284 ( 0.31%)  ???:llvm::MCObjectStreamer::emitBytes(llvm::StringRef)
 1,469,864 ( 0.30%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/imports.rs:<rustc_resolve::Resolver>::try_define
 1,397,763 ( 0.29%)  ???:(anonymous namespace)::GetCFGOnlyPasses::passEnumerate(llvm::PassInfo const*) [clone .llvm.764396836974782617]
 1,397,406 ( 0.29%)  ???:llvm::PMDataManager::removeNotPreservedAnalysis(llvm::Pass*)
 1,261,762 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
 1,246,700 ( 0.25%)  ???:llvm::X86_MC::initLLVMToSEHAndCVRegMapping(llvm::MCRegisterInfo*)
 1,221,346 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 1,220,603 ( 0.25%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 1,215,969 ( 0.25%)  ./malloc/malloc.c:realloc
 1,203,750 ( 0.25%)  ???:(anonymous namespace)::RegAllocFast::allocateBasicBlock(llvm::MachineBasicBlock&)
 1,094,620 ( 0.22%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs:<&str as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 1,033,109 ( 0.21%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_sse2_unaligned_erms
 1,030,811 ( 0.21%)  ???:multikeySort(llvm::MutableArrayRef<std::pair<llvm::CachedHashStringRef, unsigned long>*>, int)
 1,025,025 ( 0.21%)  ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:__strlen_avx2
 1,008,704 ( 0.21%)  ???:llvm::PMTopLevelManager::AUFoldingSetNode::Profile(llvm::FoldingSetNodeID&, llvm::AnalysisUsage const&)
   935,236 ( 0.19%)  ???:llvm::FoldingSetBase::FindNodeOrInsertPos(llvm::FoldingSetNodeID const&, void*&, llvm::FoldingSetBase::FoldingSetInfo const&)
   909,175 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
   898,478 ( 0.18%)  ???:llvm::SelectionDAGISel::SelectCodeCommon(llvm::SDNode*, unsigned char const*, unsigned int)
   873,256 ( 0.18%)  ???:llvm::LegacyLegalizerInfo::computeTables()
   866,356 ( 0.18%)  ./elf/dl-lookup.c:check_match
   859,706 ( 0.18%)  ./malloc/malloc.c:_int_realloc
   830,731 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/encoder.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Encodable<rustc_metadata::rmeta::encoder::EncodeContext>>::encode
   827,816 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   825,231 ( 0.17%)  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long)
   825,014 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
   823,125 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
   819,288 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
   812,481 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>)>>::remove_entry::<hashbrown::map::equivalent_key<rustc_span::def_id::DefId, rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>>::{closure#0}>
   788,791 ( 0.16%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_data_structures::ptr_key::PtrKey<rustc_resolve::NameBinding>, &rustc_resolve::ModuleData)>>::insert::<hashbrown::map::make_hasher<rustc_data_structures::ptr_key::PtrKey<rustc_resolve::NameBinding>, rustc_data_structures::ptr_key::PtrKey<rustc_resolve::NameBinding>, &rustc_resolve::ModuleData, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   783,144 ( 0.16%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_data_structures::ptr_key::PtrKey<rustc_resolve::NameBinding>, &rustc_resolve::ModuleData)>>::reserve_rehash::<hashbrown::map::make_hasher<rustc_data_structures::ptr_key::PtrKey<rustc_resolve::NameBinding>, rustc_data_structures::ptr_key::PtrKey<rustc_resolve::NameBinding>, &rustc_resolve::ModuleData, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   770,700 ( 0.16%)  ???:llvm::DenseMapBase<llvm::DenseMap<llvm::MCRegister, int, llvm::DenseMapInfo<llvm::MCRegister>, llvm::detail::DenseMapPair<llvm::MCRegister, int> >, llvm::MCRegister, int, llvm::DenseMapInfo<llvm::MCRegister>, llvm::detail::DenseMapPair<llvm::MCRegister, int> >::moveFromOldBuckets(llvm::detail::DenseMapPair<llvm::MCRegister, int>*, llvm::detail::DenseMapPair<llvm::MCRegister, int>*)
   768,042 ( 0.16%)  ???:llvm::MCAsmLayout::getFragmentOffset(llvm::MCFragment const*) const
   767,032 ( 0.16%)  ???:(anonymous namespace)::VarLocBasedLDV::process(llvm::MachineInstr&, (anonymous namespace)::VarLocBasedLDV::OpenRangesSet&, (anonymous namespace)::VarLocBasedLDV::VarLocMap&, llvm::SmallVector<(anonymous namespace)::VarLocBasedLDV::TransferDebugPair, 4u>&)
   766,334 ( 0.16%)  ???:(anonymous namespace)::Verifier::verifyFunctionAttrs(llvm::FunctionType*, llvm::AttributeList, llvm::Value const*, bool)
   748,644 ( 0.15%)  ???:llvm::TargetRegisterInfo::shouldRealignStack(llvm::MachineFunction const&) const
   748,341 ( 0.15%)  ???:(anonymous namespace)::Verifier::visitCallBase(llvm::CallBase&)
   739,038 ( 0.15%)  ./malloc/malloc.c:calloc
   724,984 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
   713,806 ( 0.15%)  ???:llvm::FoldingSetNodeID::AddInteger(unsigned int)
   705,145 ( 0.14%)  ???:(anonymous namespace)::ELFWriter::writeObject(llvm::MCAssembler&, llvm::MCAsmLayout const&)
   695,443 ( 0.14%)  ???:llvm::LLVMContextImpl::~LLVMContextImpl()
   688,119 ( 0.14%)  ???:llvm::MCAsmLayout::getSymbolOffset(llvm::MCSymbol const&) const
   667,198 ( 0.14%)  ???:(anonymous namespace)::ELFObjectWriter::recordRelocation(llvm::MCAssembler&, llvm::MCAsmLayout const&, llvm::MCFragment const*, llvm::MCFixup const&, llvm::MCValue, unsigned long&) [clone .llvm.14145361893594770252]
   663,414 ( 0.14%)  ???:llvm::SmallSet<llvm::Register, 32u, std::less<llvm::Register> >::insert(llvm::Register const&)
   646,888 ( 0.13%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::CalculateFromScratch(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::BatchUpdateInfo*)
   636,536 ( 0.13%)  ???:llvm::MachineFunctionPass::runOnFunction(llvm::Function&)
   632,790 ( 0.13%)  ???:llvm::PMTopLevelManager::setLastUser(llvm::ArrayRef<llvm::Pass*>, llvm::Pass*)
   632,011 ( 0.13%)  ???:llvm::raw_ostream::write(char const*, unsigned long)
   627,944 ( 0.13%)  ???:(anonymous namespace)::Verifier::verify(llvm::Function const&) [clone .llvm.4153962086227604281]
   620,437 ( 0.13%)  ???:???
   614,858 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
   597,088 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   596,617 ( 0.12%)  ???:llvm::MCStreamer::emitULEB128IntValue(unsigned long, unsigned int)
   581,738 ( 0.12%)  ???:llvm::MCContext::getOrCreateSymbol(llvm::Twine const&)
   571,856 ( 0.12%)  ???:llvm::AnalysisUsage::pushUnique(llvm::SmallVectorImpl<void const*>&, void const*)
   565,261 ( 0.12%)  ???:(anonymous namespace)::VarLocBasedLDV::ExtendRanges(llvm::MachineFunction&, llvm::TargetPassConfig*) [clone .llvm.4451506318407214204]
   562,808 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   562,682 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   559,870 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   550,919 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::Visibility>::is_at_least::<&rustc_resolve::Resolver>
   549,102 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   545,748 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
   542,602 ( 0.11%)  ???:llvm::MDNode::MDNode(llvm::LLVMContext&, unsigned int, llvm::Metadata::StorageType, llvm::ArrayRef<llvm::Metadata*>, llvm::ArrayRef<llvm::Metadata*>)
   539,381 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(&str, rustc_span::symbol::Symbol)>>::insert::<hashbrown::map::make_hasher<&str, &str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   531,466 ( 0.11%)  ./string/../sysdeps/x86_64/strcmp.S:strcmp
   531,457 ( 0.11%)  ???:(anonymous namespace)::TwoAddressInstructionPass::runOnMachineFunction(llvm::MachineFunction&)
   526,194 ( 0.11%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms
   513,069 ( 0.10%)  ???:llvm::StringMapImpl::RehashTable(unsigned int)
   511,708 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   505,412 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/lib.rs:<rustc_resolve::Resolver>::resolution
   501,306 ( 0.10%)  ./nptl/pthread_rwlock_common.c:pthread_rwlock_unlock

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
  204,758 ( 0.04%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
       15 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
      728 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
        .               LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    1,864 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
        4 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
       16 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 224 ----------------------------------------
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    2,516 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
      258 ( 0.00%)      pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
      647 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
      387 ( 0.00%)      }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
    3,918 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    4,414 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        2 ( 0.00%)      QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
        .               MacroExpansion(u64),
        .               ProcMacroSourceCode(u64),
        .               /// Strings provided as `--cfg [cfgspec]` stored in a `crate_cfg`.
        .               CfgSpec(u64),
-- line 285 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
       14 ( 0.00%)      fn from(p: PathBuf) -> Self {
        4 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
       12 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
       14 ( 0.00%)      }
        .           }
        .           
       34 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
    1,524 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
    2,286 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
    2,286 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
    1,905 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
       32 ( 0.00%)      pub fn to_string_lossy(&self) -> Cow<'_, str> {
       24 ( 0.00%)          match self.inner {
        8 ( 0.00%)              FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
       32 ( 0.00%)      }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    1,498 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
        .                       | DocTest(_, _)
        .                       | InlineAsm(_) => false,
        .                   }
        .               }
        .           
      387 ( 0.00%)      pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
      774 ( 0.00%)      }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
        2 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
        4 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 383 ----------------------------------------
        .               }
        .           
        .               pub fn proc_macro_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::ProcMacroSourceCode(hasher.finish())
        .               }
        .           
       10 ( 0.00%)      pub fn cfg_spec_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        4 ( 0.00%)          FileName::QuoteExpansion(hasher.finish())
       10 ( 0.00%)      }
        .           
        .               pub fn cli_crate_attr_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::CliCrateAttr(hasher.finish())
        .               }
        .           
        .               pub fn doc_test_source_code(path: PathBuf, line: isize) -> FileName {
-- line 403 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
       11 ( 0.00%)      pub lo: BytePos,
       11 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
       30 ( 0.00%)      pub ctxt: SyntaxContext,
       10 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
   48,229 ( 0.01%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
       27 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
   14,344 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
   10,758 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
   14,344 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
    4,419 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
    2,946 ( 0.00%)      }
        .               #[inline]
    3,268 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
    3,268 ( 0.00%)      }
        .               #[inline]
    8,532 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
    5,688 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
      625 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
      375 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
        9 ( 0.00%)      pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
        6 ( 0.00%)      }
        .           
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
        .                   self.data_untracked().is_dummy()
        .               }
        .           
        .               /// Returns `true` if this span comes from a macro or desugaring.
-- line 574 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
        9 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
        6 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
       81 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
       54 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 663 ----------------------------------------
        .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
        .               /// if any.
        .               pub fn parent_callsite(self) -> Option<Span> {
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
        .               }
        .           
        .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
       40 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
       20 ( 0.00%)          while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
       44 ( 0.00%)      }
        .           
        .               /// Edition of the crate from which this span came.
    2,385 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
    1,590 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
      613 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
      202 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
      293 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
       35 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
        7 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
       28 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
    1,092 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
      936 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
      780 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
        .               pub fn desugaring_kind(self) -> Option<DesugaringKind> {
        .                   match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
       92 ( 0.00%)      pub fn allows_unsafe(self) -> bool {
       23 ( 0.00%)          self.ctxt().outer_expn_data().allow_internal_unsafe
       92 ( 0.00%)      }
        .           
        .               pub fn macro_backtrace(mut self) -> impl Iterator<Item = ExpnData> {
        .                   let mut prev_span = DUMMY_SP;
        .                   std::iter::from_fn(move || {
        .                       loop {
        .                           let expn_data = self.ctxt().outer_expn_data();
        .                           if expn_data.is_root() {
        .                               return None;
-- line 752 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
   48,895 ( 0.01%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
    8,640 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
      250 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
      240 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
   29,379 ( 0.01%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
   40,005 ( 0.01%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
      913 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
      581 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
      664 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
       88 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
       16 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
       56 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
       72 ( 0.00%)      }
        .           
        .               pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
        .               }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
       46 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
        6 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        .                   self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
      312 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
      182 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
   16,551 ( 0.00%)          span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
        .               pub fn remove_mark(&mut self) -> ExpnId {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.remove_mark();
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
-- line 897 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
    4,752 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
    3,168 ( 0.00%)          let mut span = self.data();
    2,536 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
    4,752 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
    5,176 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
   44,820 ( 0.01%)      pub fn reverse_glob_adjust(
        .                   &mut self,
        .                   expn_id: ExpnId,
        .                   glob_span: Span,
        .               ) -> Option<Option<ExpnId>> {
   39,910 ( 0.01%)          let mut span = self.data();
   44,960 ( 0.01%)          let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
   84,940 ( 0.02%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
   49,800 ( 0.01%)      }
        .           
        .               #[inline]
    7,648 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
    6,692 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
      685 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
        5 ( 0.00%)          MultiSpan { primary_spans: vec, span_labels: vec![] }
        .               }
        .           
        .               pub fn push_span_label(&mut self, span: Span, label: String) {
        .                   self.span_labels.push((span, label));
        .               }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
       55 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
        1 ( 0.00%)      }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
        .                   self.primary_spans.iter().any(|sp| !sp.is_dummy())
        .               }
        .           
        .               /// Returns `true` if this contains only a dummy primary span with any hygienic context.
        .               pub fn is_dummy(&self) -> bool {
-- line 1084 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
      685 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
      685 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
        5 ( 0.00%)      fn from(spans: Vec<Span>) -> MultiSpan {
        4 ( 0.00%)          MultiSpan::from_spans(spans)
        5 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      294 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      518 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      147 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      518 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      441 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
        6 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1267 ----------------------------------------
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
      736 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
       12 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    1,472 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        .                   let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
       12 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
-- line 1321 ----------------------------------------
-- line 1324 ----------------------------------------
        .           
        .               /// Check if the stored hash matches the hash of the string.
        .               pub fn matches(&self, src: &str) -> bool {
        .                   Self::new(self.kind, src) == *self
        .               }
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
       51 ( 0.00%)          let len = self.hash_len();
       51 ( 0.00%)          &self.value[..len]
       51 ( 0.00%)      }
        .           
        .               fn hash_len(&self) -> usize {
      114 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
      116 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
        2 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
        2 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
        2 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
        8 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
        4 ( 0.00%)                          0..=0xFF => 1,
        .                                   0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
        4 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
        6 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
       22 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    3,312 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      368 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  705,550 ( 0.14%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
      736 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    4,048 ( 0.00%)              SourceFile {
    2,944 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    1,472 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    1,472 ( 0.00%)                  lines,
    1,472 ( 0.00%)                  multibyte_chars,
    1,472 ( 0.00%)                  non_narrow_chars,
    1,472 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    3,312 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
       44 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
       12 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
        8 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
        8 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
       12 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
       48 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
        8 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
       68 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
       44 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
       16 ( 0.00%)              lines,
       16 ( 0.00%)              multibyte_chars,
       16 ( 0.00%)              non_narrow_chars,
       16 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
       36 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
    4,424 ( 0.00%)      pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
    2,212 ( 0.00%)          self.lines[line_index]
    4,424 ( 0.00%)      }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
      952 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
      136 ( 0.00%)          if matches!(
      272 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        .                       let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        .                       if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
-- line 1582 ----------------------------------------
-- line 1592 ----------------------------------------
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
      136 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
    1,224 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
      749 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
   13,805 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
    5,880 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
    3,355 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
    2,427 ( 0.00%)          assert!(line_index < self.lines.len());
    3,288 ( 0.00%)          if line_index == (self.lines.len() - 1) {
        6 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
    2,188 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
       18 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
       54 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
       24 ( 0.00%)              if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
       24 ( 0.00%)                  total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
       20 ( 0.00%)                  assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
      108 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
       90 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
       36 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
       63 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
       18 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
        7 ( 0.00%)          match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
        9 ( 0.00%)                  let linebpos = self.lines[a];
       18 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
        9 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
       72 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
       72 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
       27 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
       18 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
        9 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
       45 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
       63 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
       40 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
       36 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        4 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        4 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
    6,581 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
      669 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
   11,533 ( 0.00%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
1,283,159 ( 0.26%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
  795,671 ( 0.16%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
  157,024 ( 0.03%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
   62,510 ( 0.01%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
   13,792 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
   48,718 ( 0.01%)          let span = self.data_untracked();
   12,204 ( 0.00%)          span.ctxt.hash_stable(ctx, hasher);
   26,790 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
        .           
   18,007 ( 0.00%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
   17,566 ( 0.00%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
   35,132 ( 0.01%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
   17,566 ( 0.00%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
    8,783 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
    8,783 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
   71,440 ( 0.01%)      }
        .           }

1,076,897 ( 0.22%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir               

-- line 118 ----------------------------------------
      .               stability: InternedSet<'tcx, attr::Stability>,
      .           
      .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
      .               const_stability: InternedSet<'tcx, attr::ConstStability>,
      .           }
      .           
      .           impl<'tcx> CtxtInterners<'tcx> {
      .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
     17 ( 0.00%)          CtxtInterners {
      .                       arena,
      .                       type_: Default::default(),
      .                       type_list: Default::default(),
      .                       substs: Default::default(),
      .                       region: Default::default(),
      .                       poly_existential_predicates: Default::default(),
      .                       canonical_var_infos: Default::default(),
      .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
      .                       stability: Default::default(),
      .                       const_stability: Default::default(),
      .                   }
      .               }
      .           
      .               /// Interns a type.
      .               #[allow(rustc::usage_of_ty_tykind)]
      .               #[inline(never)]
189,280 ( 0.04%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
      .                   self.type_
118,300 ( 0.02%)              .intern(kind, |kind| {
  7,208 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
      .           
      .                           let ty_struct = TyS {
 14,416 ( 0.00%)                      kind,
      .                               flags: flags.flags,
      .                               outer_exclusive_binder: flags.outer_exclusive_binder,
      .                           };
      .           
      .                           Interned(self.arena.alloc(ty_struct))
      .                       })
      .                       .0
212,940 ( 0.04%)      }
      .           
      .               #[inline(never)]
 65,168 ( 0.01%)      fn intern_predicate(
      .                   &self,
      .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
      .               ) -> &'tcx PredicateInner<'tcx> {
      .                   self.predicate
 57,022 ( 0.01%)              .intern(kind, |kind| {
 12,192 ( 0.00%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
      .           
      .                           let predicate_struct = PredicateInner {
      .                               kind,
      .                               flags: flags.flags,
      .                               outer_exclusive_binder: flags.outer_exclusive_binder,
      .                           };
      .           
      .                           Interned(self.arena.alloc(predicate_struct))
      .                       })
      .                       .0
 73,314 ( 0.01%)      }
      .           }
      .           
      .           pub struct CommonTypes<'tcx> {
      .               pub unit: Ty<'tcx>,
      .               pub bool: Ty<'tcx>,
      .               pub char: Ty<'tcx>,
      .               pub isize: Ty<'tcx>,
      .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
      .           /// safely used as a key in the maps of a TypeckResults. For that to be
      .           /// the case, the HirId must have the same `owner` as all the other IDs in
      .           /// this table (signified by `hir_owner`). Otherwise the HirId
      .           /// would be in a different frame of reference and using its `local_id`
      .           /// would result in lookup errors, or worse, in silently wrong data being
      .           /// stored/returned.
      .           #[inline]
      .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
 16,235 ( 0.00%)      if hir_id.owner != hir_owner {
      .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
      .               }
      .           }
      .           
      .           #[cold]
      .           #[inline(never)]
      .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
      .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
      .           }
      .           
      .           impl<'a, V> LocalTableInContext<'a, V> {
      .               pub fn contains_key(&self, id: hir::HirId) -> bool {
      .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.data.contains_key(&id.local_id)
      .               }
      .           
 12,555 ( 0.00%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
  2,534 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
  2,534 ( 0.00%)          self.data.get(&id.local_id)
 10,076 ( 0.00%)      }
      .           
      .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
      .                   self.data.iter()
      .               }
      .           }
      .           
      .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
      .               type Output = V;
      .           
    330 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
      .                   self.get(key).expect("LocalTableInContext: key not found")
    220 ( 0.00%)      }
      .           }
      .           
      .           pub struct LocalTableInContextMut<'a, V> {
      .               hir_owner: LocalDefId,
      .               data: &'a mut ItemLocalMap<V>,
      .           }
      .           
      .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
      .               pub treat_byte_string_as_slice: ItemLocalSet,
      .           
      .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
      .               /// on closure size.
      .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
      .           }
      .           
      .           impl<'tcx> TypeckResults<'tcx> {
  1,602 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
 18,957 ( 0.00%)          TypeckResults {
      .                       hir_owner,
      .                       type_dependent_defs: Default::default(),
      .                       field_indices: Default::default(),
      .                       user_provided_types: Default::default(),
      .                       user_provided_sigs: Default::default(),
      .                       node_types: Default::default(),
      .                       node_substs: Default::default(),
      .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
      .                       tainted_by_errors: None,
      .                       concrete_opaque_types: Default::default(),
      .                       closure_min_captures: Default::default(),
      .                       closure_fake_reads: Default::default(),
      .                       generator_interior_types: ty::Binder::dummy(Default::default()),
      .                       treat_byte_string_as_slice: Default::default(),
      .                       closure_size_eval: Default::default(),
      .                   }
  1,602 ( 0.00%)      }
      .           
      .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
  2,706 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
  1,804 ( 0.00%)          match *qpath {
  4,704 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
      .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
      .                           .type_dependent_def(id)
    708 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
      .                   }
  4,510 ( 0.00%)      }
      .           
     19 ( 0.00%)      pub fn type_dependent_defs(
      .                   &self,
      .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
    128 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
     19 ( 0.00%)      }
      .           
    379 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
    810 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
    758 ( 0.00%)      }
      .           
  1,252 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
      .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
  1,252 ( 0.00%)      }
      .           
  1,079 ( 0.00%)      pub fn type_dependent_defs_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
  1,079 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
  1,079 ( 0.00%)      }
      .           
      .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
     57 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
     14 ( 0.00%)      }
      .           
      .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
     78 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
     39 ( 0.00%)      }
      .           
      .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
    504 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    252 ( 0.00%)      }
      .           
      .               pub fn user_provided_types_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
     28 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
     14 ( 0.00%)      }
      .           
      .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
  2,420 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
  1,210 ( 0.00%)      }
      .           
      .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
  3,842 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
  1,921 ( 0.00%)      }
      .           
 16,290 ( 0.00%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
  2,715 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
      .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
      .                   })
 13,575 ( 0.00%)      }
      .           
  3,381 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
  3,381 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_types.get(&id.local_id).cloned()
  6,762 ( 0.00%)      }
      .           
      .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
    524 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
    262 ( 0.00%)      }
      .           
  1,238 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
  1,238 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
  2,476 ( 0.00%)      }
      .           
    841 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
    841 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_substs.get(&id.local_id).cloned()
  1,682 ( 0.00%)      }
      .           
      .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
      .               // doesn't provide type parameter substitutions.
      .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
    300 ( 0.00%)          self.node_type(pat.hir_id)
      .               }
      .           
      .               // Returns the type of an expression as a monotype.
      .               //
      .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
      .               // some cases, we insert `Adjustment` annotations such as auto-deref or
      .               // auto-ref.  The type returned by this function does not consider such
      .               // adjustments.  See `expr_ty_adjusted()` instead.
      .               //
      .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
      .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
      .               // instead of "fn(ty) -> T with T = isize".
      .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
  3,391 ( 0.00%)          self.node_type(expr.hir_id)
      .               }
      .           
      .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
  2,408 ( 0.00%)          self.node_type_opt(expr.hir_id)
      .               }
      .           
      .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
  1,438 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
    719 ( 0.00%)      }
      .           
      .               pub fn adjustments_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
  2,650 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
  1,325 ( 0.00%)      }
      .           
  1,161 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
  2,322 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
      .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
  2,322 ( 0.00%)      }
      .           
      .               /// Returns the type of `expr`, considering any `Adjustment`
      .               /// entry recorded for that expression.
     90 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
     18 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
     36 ( 0.00%)      }
      .           
      .               pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
      .                   self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
      .               }
      .           
    109 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
      .                   // Only paths and method calls/overloaded operators have
      .                   // entries in type_dependent_defs, ignore the former here.
    218 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
      .                       return false;
      .                   }
      .           
    226 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
    218 ( 0.00%)      }
      .           
  1,158 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
      .                   self.pat_binding_modes().get(id).copied().or_else(|| {
      .                       s.delay_span_bug(sp, "missing binding mode");
      .                       None
      .                   })
  1,544 ( 0.00%)      }
      .           
      .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
  1,024 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
    319 ( 0.00%)      }
      .           
      .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
    516 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
    258 ( 0.00%)      }
      .           
      .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
  1,016 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
    508 ( 0.00%)      }
      .           
      .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
    340 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
    170 ( 0.00%)      }
      .           
      .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
      .               /// by the closure.
    228 ( 0.00%)      pub fn closure_min_captures_flattened(
      .                   &self,
      .                   closure_def_id: DefId,
      .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
      .                   self.closure_min_captures
      .                       .get(&closure_def_id)
      .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
      .                       .into_iter()
      .                       .flatten()
    285 ( 0.00%)      }
      .           
      .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
    114 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
     57 ( 0.00%)      }
      .           
      .               pub fn closure_kind_origins_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
      .               }
      .           
      .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
    334 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
    167 ( 0.00%)      }
      .           
      .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
    220 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
    110 ( 0.00%)      }
      .           
      .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    114 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
     57 ( 0.00%)      }
      .           
      .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
      .               }
      .           
     18 ( 0.00%)      pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
      6 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
      .                   self.coercion_casts.contains(&hir_id.local_id)
     12 ( 0.00%)      }
      .           
      .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
      .                   self.coercion_casts.insert(id);
      .               }
      .           
      .               pub fn coercion_casts(&self) -> &ItemLocalSet {
     57 ( 0.00%)          &self.coercion_casts
     57 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
      .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
      .                   let ty::TypeckResults {
      .                       hir_owner,
      .                       ref type_dependent_defs,
      .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 823 ----------------------------------------
      .           /// Mapping of type annotation indices to canonical user type annotations.
      .           pub type CanonicalUserTypeAnnotations<'tcx> =
      .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
      .           
      .           #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
      .           pub struct CanonicalUserTypeAnnotation<'tcx> {
      .               pub user_ty: CanonicalUserType<'tcx>,
      .               pub span: Span,
      8 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
      .           }
      .           
      .           /// Canonicalized user type annotation.
      .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
      .           
      .           impl<'tcx> CanonicalUserType<'tcx> {
      .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
      .               /// i.e., each thing is mapped to a canonical variable with the same index.
     42 ( 0.00%)      pub fn is_identity(&self) -> bool {
     84 ( 0.00%)          match self.value {
      .                       UserType::Ty(_) => false,
      .                       UserType::TypeOf(_, user_substs) => {
     42 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
      .                               return false;
      .                           }
      .           
      .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
      .                               match kind.unpack() {
     76 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
      .                                       ty::Bound(debruijn, b) => {
      .                                           // We only allow a `ty::INNERMOST` index in substitutions.
     37 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
      .                                           cvar == b.var
      .                                       }
      .                                       _ => false,
      .                                   },
      .           
      2 ( 0.00%)                          GenericArgKind::Lifetime(r) => match r {
      .                                       ty::ReLateBound(debruijn, br) => {
      .                                           // We only allow a `ty::INNERMOST` index in substitutions.
      .                                           assert_eq!(*debruijn, ty::INNERMOST);
      .                                           cvar == br.var
      .                                       }
      .                                       _ => false,
      .                                   },
      .           
-- line 867 ----------------------------------------
-- line 872 ----------------------------------------
      .                                           cvar == b
      .                                       }
      .                                       _ => false,
      .                                   },
      .                               }
      .                           })
      .                       }
      .                   }
     84 ( 0.00%)      }
      .           }
      .           
      .           /// A user-given type annotation attached to a constant. These arise
      .           /// from constants that are named via paths, like `Foo::<A>::new` and
      .           /// so forth.
     48 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
    450 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
      .           pub enum UserType<'tcx> {
      .               Ty(Ty<'tcx>),
      .           
      .               /// The canonical type is the result of `type_of(def_id)` with the
      .               /// given substitutions applied.
      .               TypeOf(DefId, UserSubsts<'tcx>),
      .           }
      .           
      .           impl<'tcx> CommonTypes<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
    111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
      .           
      .                   CommonTypes {
      .                       unit: mk(Tuple(List::empty())),
      .                       bool: mk(Bool),
      .                       char: mk(Char),
      .                       never: mk(Never),
      .                       isize: mk(Int(ty::IntTy::Isize)),
      .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
      .           
      .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> CommonLifetimes<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
     67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
      .           
      .                   CommonLifetimes {
      5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
      5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
      5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> CommonConsts<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
      6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
      .           
      .                   CommonConsts {
      .                       unit: mk_const(ty::Const {
      .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
      .                           ty: types.unit,
      .                       }),
      .                   }
      .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
      .           
      .               /// Stores memory for globals (statics/consts).
      .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
      .           
      .               output_filenames: Arc<OutputFilenames>,
      .           }
      .           
      .           impl<'tcx> TyCtxt<'tcx> {
  2,280 ( 0.00%)      pub fn typeck_opt_const_arg(
      .                   self,
      .                   def: ty::WithOptConstParam<LocalDefId>,
      .               ) -> &'tcx TypeckResults<'tcx> {
    912 ( 0.00%)          if let Some(param_did) = def.const_param_did {
      .                       self.typeck_const_arg((def.did, param_did))
      .                   } else {
      .                       self.typeck(def.did)
      .                   }
  1,824 ( 0.00%)      }
      .           
    171 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
     57 ( 0.00%)          self.arena.alloc(Steal::new(thir))
    228 ( 0.00%)      }
      .           
  1,140 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
    228 ( 0.00%)          self.arena.alloc(Steal::new(mir))
  1,596 ( 0.00%)      }
      .           
    228 ( 0.00%)      pub fn alloc_steal_promoted(
      .                   self,
      .                   promoted: IndexVec<Promoted, Body<'tcx>>,
      .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
     57 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
    285 ( 0.00%)      }
      .           
    369 ( 0.00%)      pub fn alloc_adt_def(
      .                   self,
      .                   did: DefId,
      .                   kind: AdtKind,
      .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
      .                   repr: ReprOptions,
      .               ) -> &'tcx ty::AdtDef {
    656 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
    164 ( 0.00%)      }
      .           
      .               /// Allocates a read-only byte or string literal for `mir::interpret`.
      .               pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
      .                   // Create an allocation that just contains these bytes.
      .                   let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
      .                   let alloc = self.intern_const_alloc(alloc);
      .                   self.create_memory_alloc(alloc)
      .               }
      .           
      .               /// Returns a range of the start/end indices specified with the
      .               /// `rustc_layout_scalar_valid_range` attribute.
      .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
    472 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
    236 ( 0.00%)          let attrs = self.get_attrs(def_id);
  1,003 ( 0.00%)          let get = |name| {
    236 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
      .                           Some(attr) => attr,
      .                           None => return Bound::Unbounded,
      .                       };
      .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
    120 ( 0.00%)              if let Some(
      .                           &[
      .                               ast::NestedMetaItem::Literal(ast::Lit {
     60 ( 0.00%)                          kind: ast::LitKind::Int(a, _), ..
      .                               }),
      .                           ],
     30 ( 0.00%)              ) = attr.meta_item_list().as_deref()
      .                       {
      .                           Bound::Included(a)
      .                       } else {
      .                           self.sess
      .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
      .                           Bound::Unbounded
      .                       }
  1,180 ( 0.00%)          };
    354 ( 0.00%)          (
    354 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
    177 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
      .                   )
    472 ( 0.00%)      }
      .           
      .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
      .                   value.lift_to_tcx(self)
      .               }
      .           
      .               /// Creates a type context and call the closure with a `TyCtxt` reference
      .               /// to the context. The closure enforces that the type context and any interned
      .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
      .               /// reference to the context, to allow formatting values that need it.
     23 ( 0.00%)      pub fn create_global_ctxt(
      .                   s: &'tcx Session,
      .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
      .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
      .                   resolutions: ty::ResolverOutputs,
      .                   krate: &'tcx hir::Crate<'tcx>,
      .                   dep_graph: DepGraph,
      .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
      .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
      .                   query_kinds: &'tcx [DepKindStruct],
      .                   crate_name: &str,
      .                   output_filenames: OutputFilenames,
      .               ) -> GlobalCtxt<'tcx> {
      1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
      .                       s.fatal(&err);
      .                   });
      .                   let interners = CtxtInterners::new(arena);
      .                   let common_types = CommonTypes::new(&interners);
      .                   let common_lifetimes = CommonLifetimes::new(&interners);
      .                   let common_consts = CommonConsts::new(&interners, &common_types);
      .           
    127 ( 0.00%)          GlobalCtxt {
      .                       sess: s,
      6 ( 0.00%)              lint_store,
      .                       arena,
      2 ( 0.00%)              interners,
      5 ( 0.00%)              dep_graph,
      4 ( 0.00%)              untracked_resolutions: resolutions,
      2 ( 0.00%)              prof: s.prof.clone(),
      .                       types: common_types,
      .                       lifetimes: common_lifetimes,
      .                       consts: common_consts,
      .                       untracked_crate: krate,
      .                       on_disk_cache,
      .                       queries,
      .                       query_caches: query::QueryCaches::default(),
      .                       query_kinds,
      .                       ty_rcache: Default::default(),
      .                       pred_rcache: Default::default(),
      .                       selection_cache: Default::default(),
      .                       evaluation_cache: Default::default(),
      1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
      .                       data_layout,
      .                       alloc_map: Lock::new(interpret::AllocMap::new()),
      .                       output_filenames: Arc::new(output_filenames),
      .                   }
      9 ( 0.00%)      }
      .           
      .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
      .                   &self.query_kinds[k as usize]
      .               }
      .           
      .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
      .               #[track_caller]
      .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
      .                   ty: Ty<'tcx>,
      .                   span: S,
      .                   msg: &str,
      .               ) -> &'tcx Const<'tcx> {
      .                   self.sess.delay_span_bug(span, msg);
      .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
      .               }
      .           
    413 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
     59 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
    466 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
    472 ( 0.00%)      }
      .           
      .               /// Obtain all lang items of this crate and all dependencies (recursively)
 96,992 ( 0.02%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
      .                   self.get_lang_items(())
124,704 ( 0.03%)      }
      .           
      .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
      .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
     14 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
      .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
     16 ( 0.00%)      }
      .           
      .               /// Obtain the diagnostic item's name
  2,093 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
      .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
  2,392 ( 0.00%)      }
      .           
      .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
  2,191 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
      .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
  2,504 ( 0.00%)      }
      .           
  2,163 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
      .                   self.stability_index(())
  2,781 ( 0.00%)      }
      .           
 34,811 ( 0.01%)      pub fn features(self) -> &'tcx rustc_feature::Features {
      .                   self.features_query(())
 39,784 ( 0.01%)      }
      .           
  2,049 ( 0.00%)      pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
      .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
 10,173 ( 0.00%)          if let Some(id) = id.as_local() {
      .                       self.untracked_resolutions.definitions.def_key(id)
      .                   } else {
 14,397 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
      .                   }
    712 ( 0.00%)      }
      .           
      .               /// Converts a `DefId` into its fully expanded `DefPath` (every
      .               /// `DefId` is really just an interned `DefPath`).
      .               ///
      .               /// Note that if `id` is not local to this crate, the result will
      .               ///  be a non-local `DefPath`.
     56 ( 0.00%)      pub fn def_path(self, id: DefId) -> rustc_hir::definitions::DefPath {
      .                   // Accessing the DefPath is ok, since it is part of DefPathHash.
     84 ( 0.00%)          if let Some(id) = id.as_local() {
      3 ( 0.00%)              self.untracked_resolutions.definitions.def_path(id)
      .                   } else {
    135 ( 0.00%)              self.untracked_resolutions.cstore.def_path(id)
      .                   }
     84 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
      .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
  1,045 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
      .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
      .                   } else {
    548 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
      .                   if crate_num == LOCAL_CRATE {
      .                       self.sess.local_stable_crate_id()
      .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
      .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
      .                       self.def_path(def_id).to_string_no_crate_verbose()
      .                   )
      .               }
      .           
      .               /// Note that this is *untracked* and should only be used within the query
      .               /// system if the result is otherwise tracked through queries
      .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
 19,132 ( 0.00%)          &*self.untracked_resolutions.cstore
  9,566 ( 0.00%)      }
      .           
      .               /// Note that this is *untracked* and should only be used within the query
      .               /// system if the result is otherwise tracked through queries
      .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
      .                   &self.untracked_resolutions.definitions
      .               }
      .           
      .               #[inline(always)]
      .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
    469 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
  1,878 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
      .               }
      .           
      .               #[inline(always)]
      .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
      .                   let resolutions = &self.gcx.untracked_resolutions;
      .                   StableHashingContext::ignore_spans(
      .                       self.sess,
      .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
      .               /// If `true`, we should use the MIR-based borrowck, but also
      .               /// fall back on the AST borrowck if the MIR-based one errors.
      .               pub fn migrate_borrowck(self) -> bool {
      .                   self.borrowck_mode().migrate()
      .               }
      .           
      .               /// What mode(s) of borrowck should we run? AST? MIR? both?
      .               /// (Also considers the `#![feature(nll)]` setting.)
    114 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
      .                   // Here are the main constraints we need to deal with:
      .                   //
      .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
      .                   //    synonymous with no `-Z borrowck=...` flag at all.
      .                   //
      .                   // 2. We want to allow developers on the Nightly channel
      .                   //    to opt back into the "hard error" mode for NLL,
      .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
      .                   //   errors. (To simplify the code here, it now even overrides
      .                   //   a user's attempt to specify `-Z borrowck=compare`, which
      .                   //   we arguably do not need anymore and should remove.)
      .                   //
      .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
      .                   //
      .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
      .           
    171 ( 0.00%)          if self.features().nll {
      .                       return BorrowckMode::Mir;
      .                   }
      .           
     57 ( 0.00%)          self.sess.opts.borrowck_mode
    228 ( 0.00%)      }
      .           
      .               /// If `true`, we should use lazy normalization for constants, otherwise
      .               /// we still evaluate them eagerly.
      .               #[inline]
      .               pub fn lazy_normalization(self) -> bool {
     10 ( 0.00%)          let features = self.features();
      .                   // Note: We only use lazy normalization for generic const expressions.
      6 ( 0.00%)          features.generic_const_exprs
      .               }
      .           
      .               #[inline]
      .               pub fn local_crate_exports_generics(self) -> bool {
      .                   debug_assert!(self.sess.opts.share_generics());
      .           
    176 ( 0.00%)          self.sess.crate_types().iter().any(|crate_type| {
    298 ( 0.00%)              match crate_type {
      .                           CrateType::Executable
      .                           | CrateType::Staticlib
      .                           | CrateType::ProcMacro
      .                           | CrateType::Cdylib => false,
      .           
      .                           // FIXME rust-lang/rust#64319, rust-lang/rust#64872:
      .                           // We want to block export of generics from dylibs,
      .                           // but we must fix rust-lang/rust#65890 before we can
-- line 1450 ----------------------------------------
-- line 1540 ----------------------------------------
      .                       // FIXME(#42706) -- in some cases, we could do better here.
      .                       return true;
      .                   }
      .                   false
      .               }
      .           
      .               /// Determines whether identifiers in the assembly have strict naming rules.
      .               /// Currently, only NVPTX* targets need it.
    250 ( 0.00%)      pub fn has_strict_asm_symbol_naming(self) -> bool {
    250 ( 0.00%)          self.sess.target.arch.contains("nvptx")
    500 ( 0.00%)      }
      .           
      .               /// Returns `&'static core::panic::Location<'static>`.
     72 ( 0.00%)      pub fn caller_location_ty(self) -> Ty<'tcx> {
      .                   self.mk_imm_ref(
     12 ( 0.00%)              self.lifetimes.re_static,
      .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
     24 ( 0.00%)                  .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
      .                   )
     72 ( 0.00%)      }
      .           
      .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
    231 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
    168 ( 0.00%)          match self.def_kind(def_id) {
      .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
      .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
      .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
      .                       },
    378 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
      .                   }
    189 ( 0.00%)      }
      .           
  1,204 ( 0.00%)      pub fn type_length_limit(self) -> Limit {
      .                   self.limits(()).type_length_limit
  1,376 ( 0.00%)      }
      .           
 31,703 ( 0.01%)      pub fn recursion_limit(self) -> Limit {
      .                   self.limits(()).recursion_limit
 36,232 ( 0.01%)      }
      .           
  5,572 ( 0.00%)      pub fn move_size_limit(self) -> Limit {
      .                   self.limits(()).move_size_limit
  6,368 ( 0.00%)      }
      .           
    168 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
      .                   self.limits(()).const_eval_limit
    192 ( 0.00%)      }
      .           
      .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
      .                   iter::once(LOCAL_CRATE)
      .                       .chain(self.crates(()).iter().copied())
      .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
      .               }
      .           }
      .           
-- line 1594 ----------------------------------------
-- line 1614 ----------------------------------------
      .               fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted>;
      .           }
      .           
      .           macro_rules! nop_lift {
      .               ($set:ident; $ty:ty => $lifted:ty) => {
      .                   impl<'a, 'tcx> Lift<'tcx> for $ty {
      .                       type Lifted = $lifted;
      .                       fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {
     96 ( 0.00%)                  if tcx.interners.$set.contains_pointer_to(&Interned(self)) {
      .                               Some(unsafe { mem::transmute(self) })
      .                           } else {
      .                               None
      .                           }
      .                       }
      .                   }
      .               };
      .           }
-- line 1630 ----------------------------------------
-- line 1684 ----------------------------------------
      .               /// This is the implicit state of rustc. It contains the current
      .               /// `TyCtxt` and query. It is updated when creating a local interner or
      .               /// executing a new query. Whenever there's a `TyCtxt` value available
      .               /// you should also have access to an `ImplicitCtxt` through the functions
      .               /// in this module.
      .               #[derive(Clone)]
      .               pub struct ImplicitCtxt<'a, 'tcx> {
      .                   /// The current `TyCtxt`.
      2 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
      .           
      .                   /// The current query job, if any. This is updated by `JobOwner::start` in
      .                   /// `ty::query::plumbing` when executing a query.
      .                   pub query: Option<query::QueryJobId<DepKind>>,
      .           
      .                   /// Where to store diagnostics for the current query job, if any.
      .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
      .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
      .                   pub layout_depth: usize,
      .           
      .                   /// The current dep graph task. This is used to add dependencies to queries
      .                   /// when executing them.
      .                   pub task_deps: TaskDepsRef<'a>,
      .               }
      .           
      .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
      5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
      .                       let tcx = TyCtxt { gcx };
     25 ( 0.00%)              ImplicitCtxt {
      .                           tcx,
      .                           query: None,
      .                           diagnostics: None,
      .                           layout_depth: 0,
      .                           task_deps: TaskDepsRef::Ignore,
      .                       }
      5 ( 0.00%)          }
      .               }
      .           
      .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
      .               /// to `value` during the call to `f`. It is restored to its previous value after.
      .               /// This is used to set the pointer to the new `ImplicitCtxt`.
      .               #[cfg(parallel_compiler)]
      .               #[inline]
      .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
      .           
      .               /// Sets TLV to `value` during the call to `f`.
      .               /// It is restored to its previous value after.
      .               /// This is used to set the pointer to the new `ImplicitCtxt`.
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
      .                   let old = get_tlv();
 23,011 ( 0.00%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
      .                   TLV.with(|tlv| tlv.set(value));
      .                   f()
      .               }
      .           
      .               /// Gets the pointer to the current `ImplicitCtxt`.
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
      .               }
      .           
      .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
      .               #[inline]
      .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
      .               where
      .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
      .               {
      1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
      .               }
      .           
      .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
      .               #[inline]
      .               pub fn with_context_opt<F, R>(f: F) -> R
      .               where
      .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
      .               {
      .                   let context = get_tlv();
 89,360 ( 0.02%)          if context == 0 {
      .                       f(None)
      .                   } else {
      .                       // We could get an `ImplicitCtxt` pointer from another thread.
      .                       // Ensure that `ImplicitCtxt` is `Sync`.
      .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
      .           
      .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
      .                   }
-- line 1789 ----------------------------------------
-- line 1791 ----------------------------------------
      .           
      .               /// Allows access to the current `ImplicitCtxt`.
      .               /// Panics if there is no `ImplicitCtxt` available.
      .               #[inline]
      .               pub fn with_context<F, R>(f: F) -> R
      .               where
      .                   F: for<'a, 'tcx> FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
      .               {
     73 ( 0.00%)          with_context_opt(|opt_context| f(opt_context.expect("no ImplicitCtxt stored in tls")))
      .               }
      .           
      .               /// Allows access to the current `ImplicitCtxt` whose tcx field is the same as the tcx argument
      .               /// passed in. This means the closure is given an `ImplicitCtxt` with the same `'tcx` lifetime
      .               /// as the `TyCtxt` passed in.
      .               /// This will panic if you pass it a `TyCtxt` which is different from the current
      .               /// `ImplicitCtxt`'s `tcx` field.
      .               #[inline]
      .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
      .               where
      .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
      .               {
      .                   with_context(|context| unsafe {
 44,073 ( 0.01%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
      .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
 43,602 ( 0.01%)              f(context)
      .                   })
      .               }
      .           
      .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
      .               /// Panics if there is no `ImplicitCtxt` available.
      .               #[inline]
      .               pub fn with<F, R>(f: F) -> R
      .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
      .               fn into_pointer(&self) -> *const () {
      .                   self.0 as *const _ as *const ()
      .               }
      .           }
      .           
      .           #[allow(rustc::usage_of_ty_tykind)]
      .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
      .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
 20,618 ( 0.00%)          &self.0.kind()
      .               }
      .           }
      .           
      .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
      .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
      .           
      .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
 21,588 ( 0.00%)          self.0.kind().hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
  6,342 ( 0.00%)          &self.0.kind
      .               }
      .           }
      .           
      .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
      .           
      .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  3,580 ( 0.00%)          self.0.kind.hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
      .               fn borrow<'a>(&'a self) -> &'a [T] {
 20,055 ( 0.00%)          &self.0[..]
      .               }
      .           }
      .           
      .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
      .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
      .           
      .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  5,600 ( 0.00%)          self.0[..].hash(s)
      .               }
      .           }
      .           
      .           macro_rules! direct_interners {
      .               ($($name:ident: $method:ident($ty:ty),)+) => {
      .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
      .                       fn borrow<'a>(&'a self) -> &'a $ty {
  5,620 ( 0.00%)                  &self.0
      .                       }
      .                   }
      .           
      .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
      .                       fn eq(&self, other: &Self) -> bool {
      .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
      .                           // equals `x == y`.
      .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
      .                   }
      .           
      .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
      .           
      .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
      .                       fn hash<H: Hasher>(&self, s: &mut H) {
      .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
      .                           // x.hash(s)`.
  4,616 ( 0.00%)                  self.0.hash(s)
      .                       }
      .                   }
      .           
      .                   impl<'tcx> TyCtxt<'tcx> {
 54,163 ( 0.01%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
 27,720 ( 0.01%)                  self.interners.$name.intern(v, |v| {
  1,131 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
      .                           }).0
 59,985 ( 0.01%)              }
      .                   })+
      .               }
      .           }
      .           
      .           direct_interners! {
      .               region: mk_region(RegionKind),
      .               const_: mk_const(Const<'tcx>),
      .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
      .               adt_def: intern_adt_def(AdtDef),
      .               stability: intern_stability(attr::Stability),
      .               const_stability: intern_const_stability(attr::ConstStability),
      .           }
      .           
      .           macro_rules! slice_interners {
      .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
      .                   impl<'tcx> TyCtxt<'tcx> {
239,673 ( 0.05%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
      .                           self.interners.$field.intern_ref(v, || {
      .                               Interned(List::from_arena(&*self.arena, v))
      .                           }).0
214,560 ( 0.04%)              })+
      .                   }
      .               );
      .           }
      .           
      .           slice_interners!(
      .               type_list: _intern_type_list(Ty<'tcx>),
      .               substs: _intern_substs(GenericArg<'tcx>),
      .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2188 ----------------------------------------
      .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
      .                   })
      .               }
      .           
      .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
      .               /// `*r == kind`.
      .               #[inline]
      .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
  5,072 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
      .               }
      .           
      .               #[allow(rustc::usage_of_ty_tykind)]
      .               #[inline]
      .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
162,775 ( 0.03%)          self.interners.intern_ty(st)
      .               }
      .           
      .               #[inline]
      .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
 86,726 ( 0.02%)          let inner = self.interners.intern_predicate(binder);
      .                   Predicate { inner }
      .               }
      .           
      .               #[inline]
122,728 ( 0.03%)      pub fn reuse_or_mk_predicate(
      .                   self,
      .                   pred: Predicate<'tcx>,
      .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
      .               ) -> Predicate<'tcx> {
 11,109 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
122,728 ( 0.03%)      }
      .           
      .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
     12 ( 0.00%)          match tm {
      .                       IntTy::Isize => self.types.isize,
      .                       IntTy::I8 => self.types.i8,
      .                       IntTy::I16 => self.types.i16,
      .                       IntTy::I32 => self.types.i32,
      .                       IntTy::I64 => self.types.i64,
      .                       IntTy::I128 => self.types.i128,
      .                   }
     12 ( 0.00%)      }
      .           
      .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
     23 ( 0.00%)          match tm {
      .                       UintTy::Usize => self.types.usize,
      .                       UintTy::U8 => self.types.u8,
      .                       UintTy::U16 => self.types.u16,
      .                       UintTy::U32 => self.types.u32,
      .                       UintTy::U64 => self.types.u64,
      .                       UintTy::U128 => self.types.u128,
      .                   }
     23 ( 0.00%)      }
      .           
      .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
      4 ( 0.00%)          match tm {
      .                       FloatTy::F32 => self.types.f32,
      .                       FloatTy::F64 => self.types.f64,
      .                   }
      4 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn mk_static_str(self) -> Ty<'tcx> {
      6 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
      .               }
      .           
      .               #[inline]
      .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   // Take a copy of substs so that we own the vectors inside.
      .                   self.mk_ty(Adt(def, substs))
      .               }
      .           
-- line 2259 ----------------------------------------
-- line 2329 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
      .               }
      .           
      .               #[inline]
      8 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
      .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
      8 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(Slice(ty))
      .               }
      .           
      .               #[inline]
      .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
     12 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
     12 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
      .               }
      .           
      .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
  1,280 ( 0.00%)          iter.intern_with(|ts| {
    941 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
  1,338 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
  1,152 ( 0.00%)          })
      .               }
      .           
      .               #[inline]
      .               pub fn mk_unit(self) -> Ty<'tcx> {
    210 ( 0.00%)          self.types.unit
      .               }
      .           
      .               #[inline]
      .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
      .                   if self.features().never_type_fallback { self.types.never } else { self.types.unit }
      .               }
      .           
      .               #[inline]
      .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(FnDef(def_id, substs))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
    104 ( 0.00%)          self.mk_ty(FnPtr(fty))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_dynamic(
      .                   self,
      .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
      .                   reg: ty::Region<'tcx>,
      .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
      .                   self.mk_ty_infer(TyVar(v))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
     48 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
      .               }
      .           
      .               #[inline]
      .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
      .                   self.mk_ty_infer(IntVar(v))
      .               }
      .           
      .               #[inline]
-- line 2428 ----------------------------------------
-- line 2432 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn mk_ty_infer(self, it: InferTy) -> Ty<'tcx> {
      .                   self.mk_ty(Infer(it))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_const_infer(self, ic: InferConst<'tcx>, ty: Ty<'tcx>) -> &'tcx ty::Const<'tcx> {
     21 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(ic), ty })
      .               }
      .           
      .               #[inline]
      .               pub fn mk_ty_param(self, index: u32, name: Symbol) -> Ty<'tcx> {
      .                   self.mk_ty(Param(ParamTy { index, name }))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
     49 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
      .               }
      .           
  4,368 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
  3,096 ( 0.00%)          match param.kind {
      .                       GenericParamDefKind::Lifetime => {
     72 ( 0.00%)                  self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
      .                       }
  1,210 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
      .                       GenericParamDefKind::Const { .. } => {
     28 ( 0.00%)                  self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
      .                       }
      .                   }
  4,368 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(Opaque(def_id, substs))
      .               }
      .           
      7 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
      7 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
     14 ( 0.00%)      }
      .           
      3 ( 0.00%)      pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
      9 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Deref)
      6 ( 0.00%)      }
      .           
      1 ( 0.00%)      pub fn mk_place_downcast(
      .                   self,
      .                   place: Place<'tcx>,
      .                   adt_def: &'tcx AdtDef,
      .                   variant_index: VariantIdx,
      .               ) -> Place<'tcx> {
      1 ( 0.00%)          self.mk_place_elem(
      .                       place,
      2 ( 0.00%)              PlaceElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index),
      .                   )
      2 ( 0.00%)      }
      .           
      .               pub fn mk_place_downcast_unnamed(
      .                   self,
      .                   place: Place<'tcx>,
      .                   variant_index: VariantIdx,
      .               ) -> Place<'tcx> {
      .                   self.mk_place_elem(place, PlaceElem::Downcast(None, variant_index))
      .               }
-- line 2496 ----------------------------------------
-- line 2497 ----------------------------------------
      .           
      .               pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
      .                   self.mk_place_elem(place, PlaceElem::Index(index))
      .               }
      .           
      .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
      .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
      .               /// flight.
     99 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
      .                   let mut projection = place.projection.to_vec();
      .                   projection.push(elem);
      .           
      .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
    110 ( 0.00%)      }
      .           
    112 ( 0.00%)      pub fn intern_poly_existential_predicates(
      .                   self,
      .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
      .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
     16 ( 0.00%)          assert!(!eps.is_empty());
      .                   assert!(
      .                       eps.array_windows()
     30 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
      .                               != Ordering::Greater)
      .                   );
     64 ( 0.00%)          self._intern_poly_existential_predicates(eps)
    128 ( 0.00%)      }
      .           
      .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
      .                   // FIXME consider asking the input slice to be sorted to avoid
      .                   // re-interning permutations, in which case that would be asserted
      .                   // here.
  1,528 ( 0.00%)          if preds.is_empty() {
      .                       // The macro-generated method below asserts we don't intern an empty slice.
      .                       List::empty()
      .                   } else {
    784 ( 0.00%)              self._intern_predicates(preds)
      .                   }
  1,488 ( 0.00%)      }
      .           
      .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
  5,265 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
    470 ( 0.00%)      }
      .           
      .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
 37,805 ( 0.01%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
  2,318 ( 0.00%)      }
      .           
      .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
      .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
      .               }
      .           
      .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
  1,481 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
  1,674 ( 0.00%)      }
      .           
      .               pub fn intern_canonical_var_infos(
      .                   self,
      .                   ts: &[CanonicalVarInfo<'tcx>],
      .               ) -> CanonicalVarInfos<'tcx> {
  1,878 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
     16 ( 0.00%)      }
      .           
      .               pub fn intern_bound_variable_kinds(
      .                   self,
      .                   ts: &[ty::BoundVariableKind],
      .               ) -> &'tcx List<ty::BoundVariableKind> {
  2,702 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
  4,092 ( 0.00%)      }
      .           
      .               pub fn mk_fn_sig<I>(
      .                   self,
      .                   inputs: I,
      .                   output: I::Item,
      .                   c_variadic: bool,
      .                   unsafety: hir::Unsafety,
      .                   abi: abi::Abi,
      .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
      .               where
      .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
      .               {
      .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
    484 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
     64 ( 0.00%)              c_variadic,
    116 ( 0.00%)              unsafety,
     24 ( 0.00%)              abi,
      .                   })
      .               }
      .           
      .               pub fn mk_poly_existential_predicates<
      .                   I: InternAs<
      .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
      .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
      .                   >,
      .               >(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
     56 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
      .               }
      .           
      .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
      2 ( 0.00%)          iter.intern_with(|xs| self.intern_predicates(xs))
      .               }
      .           
      .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
  3,168 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
      .               }
      .           
     24 ( 0.00%)      pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
 53,928 ( 0.01%)          iter.intern_with(|xs| self.intern_substs(xs))
     32 ( 0.00%)      }
      .           
      .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
 14,130 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
      .               }
      .           
  1,622 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
      .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
  3,244 ( 0.00%)      }
      .           
      .               pub fn mk_bound_variable_kinds<
      .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
      .               >(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
 13,876 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
      .               }
      .           
      .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
      .               /// It stops at `bound` and just returns it if reached.
  8,778 ( 0.00%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
  8,778 ( 0.00%)          let hir = self.hir();
      .                   loop {
 12,891 ( 0.00%)              if id == bound {
      .                           return bound;
      .                       }
      .           
 15,431 ( 0.00%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
      .                           return id;
      .                       }
      .                       let next = hir.get_parent_node(id);
  9,129 ( 0.00%)              if next == id {
      .                           bug!("lint traversal reached the root of the crate");
      .                       }
      .                       id = next;
      .                   }
 12,540 ( 0.00%)      }
      .           
  1,672 ( 0.00%)      pub fn lint_level_at_node(
      .                   self,
      .                   lint: &'static Lint,
      .                   mut id: hir::HirId,
      .               ) -> (Level, LintLevelSource) {
      .                   let sets = self.lint_levels(());
      .                   loop {
  4,915 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
      .                           return pair;
      .                       }
    221 ( 0.00%)              let next = self.hir().get_parent_node(id);
    663 ( 0.00%)              if next == id {
      .                           bug!("lint traversal reached the root of the crate");
      .                       }
      .                       id = next;
      .                   }
  1,672 ( 0.00%)      }
      .           
     14 ( 0.00%)      pub fn struct_span_lint_hir(
      .                   self,
      .                   lint: &'static Lint,
      .                   hir_id: HirId,
      .                   span: impl Into<MultiSpan>,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
    500 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
    128 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
      8 ( 0.00%)      }
      .           
      .               pub fn struct_lint_node(
      .                   self,
      .                   lint: &'static Lint,
      .                   id: HirId,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
      .                   let (level, src) = self.lint_level_at_node(lint, id);
      .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
      .               }
      .           
    728 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
    208 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
      .                   let candidates = map.get(&id.local_id)?;
    208 ( 0.00%)          Some(&*candidates)
    832 ( 0.00%)      }
      .           
  1,260 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
      .                   debug!(?id, "named_region");
      .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
  1,620 ( 0.00%)      }
      .           
     36 ( 0.00%)      pub fn is_late_bound(self, id: HirId) -> bool {
      .                   self.is_late_bound_map(id.owner)
      2 ( 0.00%)              .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
     32 ( 0.00%)      }
      .           
  2,569 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
      .                   self.object_lifetime_defaults_map(id.owner)
  3,303 ( 0.00%)      }
      .           
  4,158 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
      .                   self.mk_bound_variable_kinds(
      .                       self.late_bound_vars_map(id.owner)
      .                           .and_then(|map| map.get(&id.local_id).cloned())
      .                           .unwrap_or_else(|| {
      .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
      .                           })
      .                           .iter(),
      .                   )
  4,158 ( 0.00%)      }
      .           
      .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
      .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
      .               }
      .           
      .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
      .               /// feature gates
     20 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
      2 ( 0.00%)          if self.is_const_fn_raw(def_id) {
      .                       match self.lookup_const_stability(def_id) {
      .                           Some(stability) if stability.level.is_unstable() => {
      .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
      .                               // corresponding feature gate.
      .                               self.features()
      .                                   .declared_lib_features
      .                                   .iter()
      .                                   .any(|&(sym, _)| sym == stability.feature)
-- line 2741 ----------------------------------------
-- line 2743 ----------------------------------------
      .                           // functions without const stability are either stable user written
      .                           // const fn or the user is using feature gates and we thus don't
      .                           // care what they do
      .                           _ => true,
      .                       }
      .                   } else {
      .                       false
      .                   }
     18 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> TyCtxtAt<'tcx> {
      .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
      .               #[track_caller]
      .               pub fn ty_error(self) -> Ty<'tcx> {
      .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
      .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
      .           }
      .           
      .           impl<I, T, R, E> InternAs<[T], R> for I
      .           where
      .               E: InternIteratorElement<T, R>,
      .               I: Iterator<Item = E>,
      .           {
      .               type Output = E::Output;
 37,088 ( 0.01%)      fn intern_with<F>(self, f: F) -> Self::Output
      .               where
      .                   F: FnOnce(&[T]) -> R,
      .               {
166,055 ( 0.03%)          E::intern_with(self, f)
 32,040 ( 0.01%)      }
      .           }
      .           
      .           pub trait InternIteratorElement<T, R>: Sized {
      .               type Output;
      .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
      .           }
      .           
      .           impl<T, R> InternIteratorElement<T, R> for T {
      .               type Output = R;
 26,619 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
      .                   mut iter: I,
      .                   f: F,
      .               ) -> Self::Output {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
      .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
      .                   // `assert`.
 34,742 ( 0.01%)          match iter.size_hint() {
      .                       (0, Some(0)) => {
      .                           assert!(iter.next().is_none());
      .                           f(&[])
      .                       }
      .                       (1, Some(1)) => {
      .                           let t0 = iter.next().unwrap();
      2 ( 0.00%)                  assert!(iter.next().is_none());
  4,470 ( 0.00%)                  f(&[t0])
      .                       }
      .                       (2, Some(2)) => {
      .                           let t0 = iter.next().unwrap();
      .                           let t1 = iter.next().unwrap();
     52 ( 0.00%)                  assert!(iter.next().is_none());
  4,132 ( 0.00%)                  f(&[t0, t1])
      .                       }
     48 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
      .                   }
 14,653 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
      .           where
      .               T: Clone + 'a,
      .           {
      .               type Output = R;
  2,390 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
      .                   // This code isn't hot.
      .                   f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
  1,912 ( 0.00%)      }
      .           }
      .           
      .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
      .               type Output = Result<R, E>;
 47,146 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
      .                   mut iter: I,
      .                   f: F,
      .               ) -> Self::Output {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
      .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
      .                   // `assert`, unless a failure happens first, in which case the result
      .                   // will be an error anyway.
 30,940 ( 0.01%)          Ok(match iter.size_hint() {
      .                       (0, Some(0)) => {
      .                           assert!(iter.next().is_none());
      .                           f(&[])
      .                       }
      .                       (1, Some(1)) => {
     21 ( 0.00%)                  let t0 = iter.next().unwrap()?;
      .                           assert!(iter.next().is_none());
  2,650 ( 0.00%)                  f(&[t0])
      .                       }
      .                       (2, Some(2)) => {
     88 ( 0.00%)                  let t0 = iter.next().unwrap()?;
     88 ( 0.00%)                  let t1 = iter.next().unwrap()?;
    132 ( 0.00%)                  assert!(iter.next().is_none());
    774 ( 0.00%)                  f(&[t0, t1])
      .                       }
    748 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
      .                   })
 53,178 ( 0.01%)      }
      .           }
      .           
      .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
      .           // won't work for us.
      .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
 44,073 ( 0.01%)      t as *const () == u as *const ()
      .           }
      .           
      .           pub fn provide(providers: &mut ty::query::Providers) {
      2 ( 0.00%)      providers.in_scope_traits_map =
      .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
      3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
      2 ( 0.00%)      providers.module_reexports =
      .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
      2 ( 0.00%)      providers.crate_name = |tcx, id| {
      1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
      1 ( 0.00%)          tcx.crate_name
      .               };
      2 ( 0.00%)      providers.maybe_unused_trait_import =
      .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
      2 ( 0.00%)      providers.maybe_unused_extern_crates =
      .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
      2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
      .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
      .               };
      .           
     11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
      2 ( 0.00%)      providers.lookup_const_stability =
      .                   |tcx, id| tcx.stability().local_const_stability(id.expect_local());
      2 ( 0.00%)      providers.lookup_deprecation_entry =
  2,456 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
      2 ( 0.00%)      providers.extern_mod_stmt_cnum =
      .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
      3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
      3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
      2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
      1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
      7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
      .               };
      2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
      1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
      7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
      .               };
      2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
      1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
      .                   // We want to check if the panic handler was defined in this crate
      3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
      .               };
      .           }

152,699 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir               

-- line 186 ----------------------------------------
      .           /// // use the values stored in map
      .           /// ```
      .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
      .               pub(crate) hash_builder: S,
      .               pub(crate) table: RawTable<(K, V), A>,
      .           }
      .           
      .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
      8 ( 0.00%)      fn clone(&self) -> Self {
    260 ( 0.00%)          HashMap {
      .                       hash_builder: self.hash_builder.clone(),
     55 ( 0.00%)              table: self.table.clone(),
      .                   }
      9 ( 0.00%)      }
      .           
      .               fn clone_from(&mut self, source: &Self) {
      .                   self.table.clone_from(&source.table);
      .           
      .                   // Update hash_builder only if we successfully cloned all elements.
      .                   self.hash_builder.clone_from(&source.hash_builder);
      .               }
      .           }
-- line 207 ----------------------------------------
-- line 210 ----------------------------------------
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash,
      .               S: BuildHasher,
      .           {
 68,254 ( 0.01%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
      .           }
      .           
      .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: ?Sized + Eq,
      .           {
 36,780 ( 0.01%)      move |x| k.eq(x.0.borrow())
      .           }
      .           
      .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: ?Sized + Eq,
      .           {
 30,134 ( 0.01%)      move |x| k.eq(x.borrow())
      .           }
      .           
      .           #[cfg(not(feature = "nightly"))]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
      .               use core::hash::Hasher;
      .               let mut state = hash_builder.build_hasher();
      .               val.hash(&mut state);
      .               state.finish()
      .           }
      .           
      .           #[cfg(feature = "nightly")]
      .           #[cfg_attr(feature = "inline-more", inline)]
      6 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash + ?Sized,
      .               S: BuildHasher,
      .           {
      .               hash_builder.hash_one(val)
     12 ( 0.00%)  }
      .           
      .           #[cfg(not(feature = "nightly"))]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
      .           where
      .               K: Hash,
      .               S: BuildHasher,
      .           {
-- line 274 ----------------------------------------
-- line 367 ----------------------------------------
      .               /// let s = DefaultHashBuilder::default();
      .               /// let mut map = HashMap::with_hasher(s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               ///
      .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub const fn with_hasher(hash_builder: S) -> Self {
 19,045 ( 0.00%)          Self {
      .                       hash_builder,
      .                       table: RawTable::new(),
      .                   }
      .               }
      .           
      .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
      .               /// to hash the keys.
      .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
      .               /// use hashbrown::hash_map::DefaultHashBuilder;
      .               ///
      .               /// let s = DefaultHashBuilder::default();
      .               /// let mut map = HashMap::with_hasher(s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
     16 ( 0.00%)          Self {
      .                       hash_builder,
      .                       table: RawTable::new_in(alloc),
      .                   }
      .               }
      .           
      .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
      .               /// to hash the keys. It will be allocated with the given allocator.
      .               ///
-- line 453 ----------------------------------------
-- line 527 ----------------------------------------
      .               /// map.insert("c", 3);
      .               ///
      .               /// for key in map.keys() {
      .               ///     println!("{}", key);
      .               /// }
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn keys(&self) -> Keys<'_, K, V> {
      6 ( 0.00%)          Keys { inner: self.iter() }
      .               }
      .           
      .               /// An iterator visiting all values in arbitrary order.
      .               /// The iterator element type is `&'a V`.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 543 ----------------------------------------
-- line 663 ----------------------------------------
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// assert_eq!(a.len(), 0);
      .               /// a.insert(1, "a");
      .               /// assert_eq!(a.len(), 1);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn len(&self) -> usize {
  1,595 ( 0.00%)          self.table.len()
      .               }
      .           
      .               /// Returns `true` if the map contains no elements.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// assert!(a.is_empty());
      .               /// a.insert(1, "a");
      .               /// assert!(!a.is_empty());
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn is_empty(&self) -> bool {
 21,091 ( 0.00%)          self.len() == 0
      .               }
      .           
      .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
      .               /// allocated memory for reuse.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// a.insert(1, "a");
      .               /// a.clear();
      .               /// assert!(a.is_empty());
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      6 ( 0.00%)      pub fn clear(&mut self) {
      .                   self.table.clear();
      6 ( 0.00%)      }
      .           
      .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
      .               /// The map cannot be used after calling this.
      .               /// The iterator element type is `K`.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
      .               /// }
      .               ///
      .               /// assert_eq!(letters[&'s'], 2);
      .               /// assert_eq!(letters[&'t'], 3);
      .               /// assert_eq!(letters[&'u'], 1);
      .               /// assert_eq!(letters.get(&'y'), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
     40 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
      .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
      .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
      5 ( 0.00%)              Entry::Occupied(OccupiedEntry {
      .                           hash,
      .                           key: Some(key),
      .                           elem,
      .                           table: self,
      .                       })
      .                   } else {
     45 ( 0.00%)              Entry::Vacant(VacantEntry {
      .                           hash,
      .                           key,
      .                           table: self,
      .                       })
      .                   }
     50 ( 0.00%)      }
      .           
      .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
      .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
      .               /// ```
      .               #[inline]
      .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
 54,203 ( 0.01%)          match self.get_inner(k) {
      .                       Some(&(_, ref v)) => Some(v),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Returns the key-value pair corresponding to the supplied key.
      .               ///
      .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
114,698 ( 0.02%)          if self.table.is_empty() {
      .                       None
      .                   } else {
      3 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      .                       self.table.get(hash, equivalent_key(k))
      .                   }
      .               }
      .           
      .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
      .               ///
      .               /// The supplied key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// assert_eq!(map.contains_key(&1), true);
      .               /// assert_eq!(map.contains_key(&2), false);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
 45,196 ( 0.01%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   self.get_inner(k).is_some()
 66,130 ( 0.01%)      }
      .           
      .               /// Returns a mutable reference to the value corresponding to the key.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
      .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// if let Some(x) = map.get_mut(&1) {
      .               ///     *x = "b";
      .               /// }
      .               /// assert_eq!(map[&1], "b");
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
     53 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
    207 ( 0.00%)          match self.get_inner_mut(k) {
      .                       Some(&mut (_, ref mut v)) => Some(v),
      .                       None => None,
      .                   }
    106 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
     69 ( 0.00%)          if self.table.is_empty() {
      .                       None
      .                   } else {
      .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
     32 ( 0.00%)              self.table.get_mut(hash, equivalent_key(k))
      .                   }
      .               }
      .           
      .               /// Attempts to get mutable references to `N` values in the map at once.
      .               ///
      .               /// Returns an array of length `N` with the results of each query. For soundness, at most one
      .               /// mutable reference will be returned to any value. `None` will be returned if any of the
      .               /// keys are duplicates or missing.
-- line 1223 ----------------------------------------
-- line 1495 ----------------------------------------
      .               /// assert_eq!(map.insert(37, "a"), None);
      .               /// assert_eq!(map.is_empty(), false);
      .               ///
      .               /// map.insert(37, "b");
      .               /// assert_eq!(map.insert(37, "c"), Some("b"));
      .               /// assert_eq!(map[&37], "c");
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
692,667 ( 0.14%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
      .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
    519 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
      .                       Some(mem::replace(item, v))
      .                   } else {
387,396 ( 0.08%)              self.table
311,691 ( 0.06%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
 28,836 ( 0.01%)              None
      .                   }
616,926 ( 0.13%)      }
      .           
      .               /// Insert a key-value pair into the map without checking
      .               /// if the key already exists in the map.
      .               ///
      .               /// Returns a reference to the key and value just inserted.
      .               ///
      .               /// This operation is safe if a key does not exist in the map.
      .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// assert_eq!(map.remove(&1), Some("a"));
      .               /// assert_eq!(map.remove(&1), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
  4,563 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
145,685 ( 0.03%)          match self.remove_entry(k) {
  2,388 ( 0.00%)              Some((_, v)) => Some(v),
  4,624 ( 0.00%)              None => None,
      .                   }
 10,382 ( 0.00%)      }
      .           
      .               /// Removes a key from the map, returning the stored key and value if the
      .               /// key was previously in the map.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
 38,152 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
      .               }
      .           }
      .           
      .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
      .               /// Creates a raw entry builder for the HashMap.
      .               ///
      .               /// Raw entries provide the lowest level of control for searching and
      .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
      .               /// Creates a `RawEntryMut` from the given key and its hash.
      .               #[inline]
      .               #[allow(clippy::wrong_self_convention)]
      .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Eq,
      .               {
172,310 ( 0.04%)          self.from_hash(hash, equivalent(k))
      .               }
      .           }
      .           
      .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
      .               /// Creates a `RawEntryMut` from the given hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
446,696 ( 0.09%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   for<'b> F: FnMut(&'b K) -> bool,
      .               {
      .                   self.search(hash, is_match)
482,574 ( 0.10%)      }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   for<'b> F: FnMut(&'b K) -> bool,
      .               {
 49,492 ( 0.01%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
262,786 ( 0.05%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
      .                           elem,
      .                           table: &mut self.map.table,
      .                           hash_builder: &self.map.hash_builder,
      .                       }),
 38,017 ( 0.01%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
      .                           table: &mut self.map.table,
      .                           hash_builder: &self.map.hash_builder,
      .                       }),
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
      .               {
      .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
      .                   self.from_key_hashed_nocheck(hash, k)
      .               }
      .           
      .               /// Access an entry by a key and its hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
141,574 ( 0.03%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Eq,
      .               {
169,845 ( 0.03%)          self.from_hash(hash, equivalent(k))
258,818 ( 0.05%)      }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
      .               where
      .                   F: FnMut(&K) -> bool,
      .               {
239,489 ( 0.05%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
      .                       Some(&(ref key, ref value)) => Some((key, value)),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Access an entry by hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
      .               /// and returns a mutable reference to it.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::shadow_unrelated)]
      .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
      .               where
      .                   K: Hash,
      .                   S: BuildHasher,
      .               {
 62,060 ( 0.01%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
      .                       hash,
      .                       (key, value),
      .                       make_hasher::<K, _, V, S>(self.hash_builder),
      .                   );
      .                   (k, v)
      .               }
      .           
      .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
      .               /// map.insert("a", 1);
      .               /// map.insert("b", 2);
      .               /// map.insert("c", 3);
      .               ///
      .               /// // Not possible with .iter()
      .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
    315 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
  6,194 ( 0.00%)          IntoIter {
  3,756 ( 0.00%)              inner: self.table.into_iter(),
      .                   }
    945 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
      .               type Item = (&'a K, &'a V);
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
 17,476 ( 0.00%)          match self.inner.next() {
      .                       Some(x) => unsafe {
      .                           let r = x.as_ref();
    104 ( 0.00%)                  Some((&r.0, &r.1))
      .                       },
      .                       None => None,
      .                   }
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
     14 ( 0.00%)          self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn len(&self) -> usize {
      .                   self.inner.len()
      .               }
      .           }
-- line 3013 ----------------------------------------
-- line 3051 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
      .               type Item = (K, V);
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<(K, V)> {
    801 ( 0.00%)          self.inner.next()
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
      .                   f.debug_list().entries(self.iter()).finish()
      .               }
      .           }
      .           
      .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
      .               type Item = &'a K;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      1 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
      .                   match self.inner.next() {
      .                       Some((k, _)) => Some(k),
      .                       None => None,
      .                   }
      2 ( 0.00%)      }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 3819 ----------------------------------------
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn insert(self, value: V) -> &'a mut V
      .               where
      .                   K: Hash,
      .                   S: BuildHasher,
      .               {
      .                   let table = &mut self.table.table;
      2 ( 0.00%)          let entry = table.insert_entry(
      .                       self.hash,
      .                       (self.key, value),
      .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
      .                   );
      .                   &mut entry.1
      .               }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
      .           /// keys with new values returned from the iterator.
      .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
      .           where
      .               K: Eq + Hash,
      .               S: BuildHasher,
      .               A: Allocator + Clone,
      .           {
      .               #[cfg_attr(feature = "inline-more", inline)]
  5,333 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
      .                   // Keys may be already present or show multiple times in the iterator.
      .                   // Reserve the entire hint lower bound if the map is empty.
      .                   // Otherwise reserve half the hint (rounded up), so the map
      .                   // will only resize twice in the worst case.
  5,373 ( 0.00%)          let iter = iter.into_iter();
  2,061 ( 0.00%)          let reserve = if self.is_empty() {
      .                       iter.size_hint().0
      .                   } else {
     11 ( 0.00%)              (iter.size_hint().0 + 1) / 2
      .                   };
      .                   self.reserve(reserve);
      .                   iter.for_each(move |(k, v)| {
 20,768 ( 0.00%)              self.insert(k, v);
      .                   });
  2,895 ( 0.00%)      }
      .           
      .               #[inline]
      .               #[cfg(feature = "nightly")]
      .               fn extend_one(&mut self, (k, v): (K, V)) {
      .                   self.insert(k, v);
      .               }
      .           
      .               #[inline]
-- line 4588 ----------------------------------------

214,417 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 111 ----------------------------------------
        .           const EMPTY: u8 = 0b1111_1111;
        .           
        .           /// Control byte value for a deleted bucket.
        .           const DELETED: u8 = 0b1000_0000;
        .           
        .           /// Checks whether a control byte represents a full bucket (top bit is clear).
        .           #[inline]
        .           fn is_full(ctrl: u8) -> bool {
  435,209 ( 0.09%)      ctrl & 0x80 == 0
        .           }
        .           
        .           /// Checks whether a control byte represents a special value (top bit is set).
        .           #[inline]
        .           fn is_special(ctrl: u8) -> bool {
        .               ctrl & 0x80 != 0
        .           }
        .           
        .           /// Checks whether a special control value is EMPTY (just check 1 bit).
        .           #[inline]
        .           fn special_is_empty(ctrl: u8) -> bool {
        .               debug_assert!(is_special(ctrl));
   30,664 ( 0.01%)      ctrl & 0x01 != 0
        .           }
        .           
        .           /// Primary hash function, used to select the initial bucket to probe from.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h1(hash: u64) -> usize {
        .               // On 32-bit platforms we simply ignore the higher hash bits.
        .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
        .           /// Secondary hash function, saved in the low 7 bits of the control byte.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h2(hash: u64) -> u8 {
        .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
        .               // value, some hash functions (such as FxHash) produce a usize result
        .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
        .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
3,769,040 ( 0.77%)      let top7 = hash >> (hash_len * 8 - 7);
        .               (top7 & 0x7f) as u8 // truncation
        .           }
        .           
        .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
        .           /// table size is a power of two) to visit every group of elements exactly once.
        .           ///
        .           /// A triangular probe has us jump by 1 more group every time. So first we
        .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
        .               #[inline]
        .               fn move_next(&mut self, bucket_mask: usize) {
        .                   // We should have found an empty bucket by now and ended the probe.
        .                   debug_assert!(
        .                       self.stride <= bucket_mask,
        .                       "Went past end of probe sequence"
        .                   );
        .           
   44,680 ( 0.01%)          self.stride += Group::WIDTH;
   44,680 ( 0.01%)          self.pos += self.stride;
   35,566 ( 0.01%)          self.pos &= bucket_mask;
        .               }
        .           }
        .           
        .           /// Returns the number of buckets needed to hold the given number of items,
        .           /// taking the maximum load factor into account.
        .           ///
        .           /// Returns `None` if an overflow occurs.
        .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
        .           #[cfg_attr(target_os = "emscripten", inline(never))]
        .           #[cfg_attr(not(target_os = "emscripten"), inline)]
        .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
        .               debug_assert_ne!(cap, 0);
        .           
        .               // For small tables we require at least 1 empty bucket so that lookups are
        .               // guaranteed to terminate if an element doesn't exist in the table.
   23,732 ( 0.00%)      if cap < 8 {
        .                   // We don't bother with a table size of 2 buckets since that can only
        .                   // hold a single element. Instead we skip directly to a 4 bucket table
        .                   // which can hold 3 elements.
   48,415 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
        .               }
        .           
        .               // Otherwise require 1/8 buckets to be empty (87.5% load)
        .               //
        .               // Be careful when modifying this, calculate_layout relies on the
        .               // overflow check here.
   13,098 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
        .           
        .               // Any overflows will have been caught by the checked_mul. Also, any
        .               // rounding errors from the division above will be cleaned up by
        .               // next_power_of_two (which can't overflow because of the previous division).
        .               Some(adjusted_cap.next_power_of_two())
        .           }
        .           
        .           /// Returns the maximum effective capacity for the given bucket mask, taking
        .           /// the maximum load factor into account.
        .           #[inline]
        .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
   61,360 ( 0.01%)      if bucket_mask < 8 {
        .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
        .                   // Keep in mind that the bucket mask is one less than the bucket count.
        .                   bucket_mask
        .               } else {
        .                   // For larger tables we reserve 12.5% of the slots as empty.
   15,792 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
        .               }
        .           }
        .           
        .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
        .           /// while keeping the rest of `calculate_layout_for` independent of `T`
        .           #[derive(Copy, Clone)]
        .           struct TableLayout {
        .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
        .           
        .               #[inline]
        .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   let TableLayout { size, ctrl_align } = self;
        .                   // Manual layout calculation since Layout methods are not yet stable.
        .                   let ctrl_offset =
   47,567 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
   64,190 ( 0.01%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
        .           
        .                   Some((
        .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
        .                       ctrl_offset,
        .                   ))
        .               }
        .           }
        .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
        .                   }
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub unsafe fn drop(&self) {
        .                   self.as_ptr().drop_in_place();
        .               }
        .               #[inline]
        .               pub unsafe fn read(&self) -> T {
       26 ( 0.00%)          self.as_ptr().read()
        .               }
        .               #[inline]
        .               pub unsafe fn write(&self, val: T) {
        .                   self.as_ptr().write(val);
        .               }
        .               #[inline]
        .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
        .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
        .               /// Creates a new empty hash table without allocating any memory, using the
        .               /// given allocator.
        .               ///
        .               /// In effect this returns a table with exactly 1 bucket. However we can
        .               /// leave the data pointer dangling since that bucket is never written to
        .               /// due to our load factor forcing us to always have at least 1 free bucket.
        .               #[inline]
        .               pub fn new_in(alloc: A) -> Self {
      162 ( 0.00%)          Self {
        .                       table: RawTableInner::new_in(alloc),
        .                       marker: PhantomData,
        .                   }
        .               }
        .           
        .               /// Allocates a new hash table with the given number of buckets.
        .               ///
        .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
        .               unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   Ok(Self {
       15 ( 0.00%)              table: RawTableInner::new_uninitialized(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           buckets,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
        .               /// Attempts to allocate a new hash table with at least enough capacity
        .               /// for inserting the given number of elements without reallocating.
        .               fn fallible_with_capacity(
        .                   alloc: A,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   Ok(Self {
    1,675 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           capacity,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
        .                   debug_assert_ne!(self.table.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               /// Erases an element from the table without dropping it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    2,593 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    2,593 ( 0.00%)          let index = self.bucket_index(item);
        .                   self.table.erase(index);
    5,186 ( 0.00%)      }
        .           
        .               /// Erases an element from the table, dropping it in place.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
        .                   // Erase the element from the table first since drop might panic.
      502 ( 0.00%)          self.erase_no_drop(&item);
        .                   item.drop();
        .               }
        .           
        .               /// Finds and erases an element from the table, dropping it in place.
        .               /// Returns true if an element was found.
        .               #[cfg(feature = "raw")]
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    4,684 ( 0.00%)          self.erase_no_drop(&item);
       25 ( 0.00%)          item.read()
        .               }
        .           
        .               /// Finds and removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
  116,171 ( 0.02%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
      568 ( 0.00%)          match self.find(hash, eq) {
      748 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
   14,231 ( 0.00%)              None => None,
        .                   }
  168,070 ( 0.03%)      }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear_no_drop(&mut self) {
        .                   self.table.clear_no_drop();
        .               }
        .           
        .               /// Removes all elements from the table without freeing the backing memory.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear(&mut self) {
        .                   // Ensure that the table is reset even if one of the drops panic
        .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
        .                   unsafe {
        1 ( 0.00%)              self_.drop_elements();
        .                   }
        .               }
        .           
        7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
    2,306 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
        .                       for item in self.iter() {
        .                           item.drop();
        .                       }
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
        .                   // Calculate the minimal number of elements that we need to reserve
        .                   // space for.
        .                   let min_size = usize::max(self.table.items, min_size);
        .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Ensures that at least `additional` items can be inserted into the table
        .               /// without reallocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
   72,408 ( 0.01%)          if additional > self.table.growth_left {
        .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
   39,521 ( 0.01%)              if self
        .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
        .                           .is_err()
        .                       {
        .                           unsafe { hint::unreachable_unchecked() }
        .                       }
        .                   }
        .               }
        .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
        .                   } else {
        .                       Ok(())
        .                   }
        .               }
        .           
        .               /// Out-of-line slow path for `reserve` and `try_reserve`.
        .               #[cold]
        .               #[inline(never)]
   95,836 ( 0.02%)      fn reserve_rehash(
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
        .               ) -> Result<(), TryReserveError> {
        .                   unsafe {
        .                       self.table.reserve_rehash_inner(
        .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
        .                           TableLayout::new::<T>(),
        .                           if mem::needs_drop::<T>() {
        .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
        .                           } else {
        .                               None
        .                           },
        .                       )
        .                   }
   62,920 ( 0.01%)      }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
        .               /// current table into it.
        .               fn resize(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
        .                       )
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns its raw bucket.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
  704,002 ( 0.14%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
        .                   unsafe {
        .                       let mut index = self.table.find_insert_slot(hash);
        .           
        .                       // We can avoid growing the table once we have reached our load
        .                       // factor if we are replacing a tombstone. This works since the
        .                       // number of EMPTY slots does not change in this case.
      858 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
  394,763 ( 0.08%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
        .                           self.reserve(1, hasher);
        .                           index = self.table.find_insert_slot(hash);
        .                       }
        .           
        .                       self.table.record_item_insert_at(index, old_ctrl, hash);
        .           
        .                       let bucket = self.bucket(index);
        2 ( 0.00%)              bucket.write(value);
        .                       bucket
        .                   }
  513,889 ( 0.11%)      }
        .           
        .               /// Attempts to insert a new element without growing the table and return its raw bucket.
        .               ///
        .               /// Returns an `Err` containing the given element if inserting it would require growing the
        .               /// table.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns a mutable reference to it.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
   88,864 ( 0.02%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
       16 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
   66,648 ( 0.01%)      }
        .           
        .               /// Inserts a new element into the table, without growing the table.
        .               ///
        .               /// There must be enough space in the table to insert the new element.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
       68 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
   90,030 ( 0.02%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
    1,076 ( 0.00%)          let bucket = self.table.bucket(index);
        .           
        .                   // If we are replacing a DELETED entry then we don't need to update
        .                   // the load counter.
  184,606 ( 0.04%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
        .           
        .                   bucket.write(value);
  146,949 ( 0.03%)          self.table.items += 1;
        .                   bucket
      121 ( 0.00%)      }
        .           
        .               /// Temporary removes a bucket, applying the given function to the removed
        .               /// element and optionally put back the returned value in the same bucket.
        .               ///
        .               /// Returns `true` if the bucket still contains an element
        .               ///
        .               /// This does not check if the given bucket is actually occupied.
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// Searches for an element in the table.
        .               #[inline]
    4,854 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
      437 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    2,940 ( 0.00%)              eq(self.bucket(index).as_ref())
       17 ( 0.00%)          });
        .           
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match result {
       10 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
        .                       None => None,
        .                   }
    5,480 ( 0.00%)      }
        .           
        .               /// Gets a reference to an element in the table.
        .               #[inline]
        .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
    3,512 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Gets a mutable reference to an element in the table.
        .               #[inline]
      112 ( 0.00%)      pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
    2,598 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
        .                       None => None,
        .                   }
      128 ( 0.00%)      }
        .           
        .               /// Attempts to get mutable references to `N` entries in the table at once.
        .               ///
        .               /// Returns an array of length `N` with the results of each query.
        .               ///
        .               /// At most one mutable reference will be returned to any entry. `None` will be returned if any
        .               /// of the hashes are duplicates. `None` will be returned if the hash is not found.
        .               ///
-- line 859 ----------------------------------------
-- line 920 ----------------------------------------
        .               #[inline]
        .               pub fn len(&self) -> usize {
        .                   self.table.items
        .               }
        .           
        .               /// Returns `true` if the table contains no elements.
        .               #[inline]
        .               pub fn is_empty(&self) -> bool {
  115,626 ( 0.02%)          self.len() == 0
        .               }
        .           
        .               /// Returns the number of buckets in the table.
        .               #[inline]
        .               pub fn buckets(&self) -> usize {
        .                   self.table.bucket_mask + 1
        .               }
        .           
-- line 936 ----------------------------------------
-- line 938 ----------------------------------------
        .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
        .               /// Because we cannot make the `next` method unsafe on the `RawIter`
        .               /// struct, we have to make the `iter` method unsafe.
        .               #[inline]
        .               pub unsafe fn iter(&self) -> RawIter<T> {
        .                   let data = Bucket::from_base_index(self.data_end(), 0);
        .                   RawIter {
        .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
   14,837 ( 0.00%)              items: self.table.items,
        .                   }
        .               }
        .           
        .               /// Returns an iterator over occupied buckets that could match a given hash.
        .               ///
        .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
        .               /// return items that have a hash value different than the one provided. You
        .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
        .               /// Iteration starts at the provided iterator's current location.
        .               ///
        .               /// It is up to the caller to ensure that the iterator is valid for this
        .               /// `RawTable` and covers all items that remain in the table.
        .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
        .                   debug_assert_eq!(iter.len(), self.len());
        .           
        .                   let alloc = self.table.alloc.clone();
    1,776 ( 0.00%)          let allocation = self.into_allocation();
    1,332 ( 0.00%)          RawIntoIter {
    2,220 ( 0.00%)              iter,
        .                       allocation,
        .                       marker: PhantomData,
        .                       alloc,
        .                   }
        .               }
        .           
        .               /// Converts the table into a raw allocation. The contents of the table
        .               /// should be dropped using a `RawIter` before freeing the allocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
      759 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
        .                       None
        .                   } else {
        .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
        .                           Some(lco) => lco,
        .                           None => unsafe { hint::unreachable_unchecked() },
        .                       };
        .                       Some((
      181 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
        .                           layout,
        .                       ))
        .                   };
        .                   mem::forget(self);
        .                   alloc
        .               }
        .           }
        .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<A> RawTableInner<A> {
        .               #[inline]
        .               const fn new_in(alloc: A) -> Self {
  112,550 ( 0.02%)          Self {
        .                       // Be careful to cast the entire slice to a raw pointer.
        .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
        .                       bucket_mask: 0,
        .                       items: 0,
        .                       growth_left: 0,
        .                       alloc,
        .                   }
        .               }
        .           }
        .           
        .           impl<A: Allocator + Clone> RawTableInner<A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
   83,577 ( 0.02%)      unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
        .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
        .                   // such allocations will never succeed anyways.
        .                   //
        .                   // This mirrors what Vec does in the standard library.
        .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
        .                       return Err(fallibility.capacity_overflow());
        .                   }
        .           
   19,880 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
        .                       Ok(block) => block.cast(),
        .                       Err(_) => return Err(fallibility.alloc_err(layout)),
        .                   };
        .           
        .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
   47,286 ( 0.01%)          Ok(Self {
        .                       ctrl,
   19,750 ( 0.00%)              bucket_mask: buckets - 1,
        .                       items: 0,
        .                       growth_left: bucket_mask_to_capacity(buckets - 1),
        .                       alloc,
        .                   })
   60,972 ( 0.01%)      }
        .           
        .               #[inline]
    5,181 ( 0.00%)      fn fallible_with_capacity(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
    1,338 ( 0.00%)          if capacity == 0 {
    1,408 ( 0.00%)              Ok(Self::new_in(alloc))
        .                   } else {
        .                       unsafe {
        .                           let buckets =
        .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
        .           
   38,324 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
        .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
        .           
    2,256 ( 0.00%)                  Ok(result)
        .                       }
        .                   }
    5,181 ( 0.00%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element and sets the hash for that slot.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
   30,611 ( 0.01%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
        .                   let index = self.find_insert_slot(hash);
   30,611 ( 0.01%)          let old_ctrl = *self.ctrl(index);
        .                   self.set_ctrl_h2(index, hash);
        .                   (index, old_ctrl)
   61,222 ( 0.01%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
        .               fn find_insert_slot(&self, hash: u64) -> usize {
        .                   let mut probe_seq = self.probe_seq(hash);
        .                   loop {
        .                       unsafe {
        .                           let group = Group::load(self.ctrl(probe_seq.pos));
  280,677 ( 0.06%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
  818,279 ( 0.17%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
        .           
        .                               // In tables smaller than the group width, trailing control
        .                               // bytes outside the range of the table are filled with
        .                               // EMPTY entries. These will unfortunately trigger a
        .                               // match, but once masked may point to a full bucket that
        .                               // is already occupied. We detect this situation here and
        .                               // perform a second scan starting at the beginning of the
        .                               // table. This second scan is guaranteed to find an empty
        .                               // slot (due to the load factor) before hitting the trailing
        .                               // control bytes (containing EMPTY).
  371,399 ( 0.08%)                      if unlikely(is_full(*self.ctrl(result))) {
        .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
        .                                   debug_assert_ne!(probe_seq.pos, 0);
        .                                   return Group::load_aligned(self.ctrl(0))
        .                                       .match_empty_or_deleted()
        .                                       .lowest_set_bit_nonzero();
        .                               }
        .           
        .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
        .           
        .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
        .               /// code generated, but it is eliminated by LLVM optimizations.
        .               #[inline]
        .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
        .                   let h2_hash = h2(hash);
        .                   let mut probe_seq = self.probe_seq(hash);
        .           
   13,184 ( 0.00%)          loop {
        .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
        .           
  527,606 ( 0.11%)              for bit in group.match_byte(h2_hash) {
  850,877 ( 0.17%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
        .           
  618,952 ( 0.13%)                  if likely(eq(index)) {
        .                               return Some(index);
        .                           }
        .                       }
        .           
  211,656 ( 0.04%)              if likely(group.match_empty().any_bit_set()) {
        .                           return None;
        .                       }
        .           
        .                       probe_seq.move_next(self.bucket_mask);
        .                   }
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
-- line 1198 ----------------------------------------
-- line 1225 ----------------------------------------
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               #[inline]
        .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
        .                   debug_assert_ne!(self.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   let base: *mut u8 = self.data_end().as_ptr();
1,075,488 ( 0.22%)          base.sub((index + 1) * size_of)
        .               }
        .           
        .               #[inline]
        .               unsafe fn data_end<T>(&self) -> NonNull<T> {
        .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
        .               }
        .           
        .               /// Returns an iterator-like object for a probe sequence on the table.
        .               ///
        .               /// This iterator never terminates, but is guaranteed to visit each bucket
        .               /// group exactly once. The loop using `probe_seq` must terminate upon
        .               /// reaching a group containing an empty bucket.
        .               #[inline]
        .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
        .                   ProbeSeq {
3,673,818 ( 0.75%)              pos: h1(hash) & self.bucket_mask,
        .                       stride: 0,
        .                   }
        .               }
        .           
        .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
        .               /// in the table, otherwise returns error
        .               #[cfg(feature = "raw")]
        .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
        .                   } else {
        .                       self.record_item_insert_at(index, old_ctrl, hash);
        .                       Ok(index)
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
  493,780 ( 0.10%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
        .                   self.set_ctrl_h2(index, hash);
  394,756 ( 0.08%)          self.items += 1;
        .               }
        .           
        .               #[inline]
        .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
        .                   let probe_seq_pos = self.probe_seq(hash).pos;
        .                   let probe_index =
        .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
        .                   probe_index(i) == probe_index(new_i)
-- line 1281 ----------------------------------------
-- line 1312 ----------------------------------------
        .                   // replicate the buckets at the end of the trailing group. For example
        .                   // with 2 buckets and a group size of 4, the control bytes will look
        .                   // like this:
        .                   //
        .                   //     Real    |             Replicated
        .                   // ---------------------------------------------
        .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
        .                   // ---------------------------------------------
  791,645 ( 0.16%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
        .           
  263,789 ( 0.05%)          *self.ctrl(index) = ctrl;
  264,131 ( 0.05%)          *self.ctrl(index2) = ctrl;
        .               }
        .           
        .               /// Returns a pointer to a control byte.
        .               #[inline]
        .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
        .                   debug_assert!(index < self.num_ctrl_bytes());
        .                   self.ctrl.as_ptr().add(index)
        .               }
        .           
        .               #[inline]
        .               fn buckets(&self) -> usize {
   50,406 ( 0.01%)          self.bucket_mask + 1
        .               }
        .           
        .               #[inline]
        .               fn num_ctrl_bytes(&self) -> usize {
   43,670 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
        .               }
        .           
        .               #[inline]
        .               fn is_empty_singleton(&self) -> bool {
  232,253 ( 0.05%)          self.bucket_mask == 0
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
        .               #[inline]
        .               unsafe fn prepare_resize(
        .                   &self,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
        .                   debug_assert!(self.items <= capacity);
        .           
        .                   // Allocate and initialize the new table.
      708 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
        .                       self.alloc.clone(),
        .                       table_layout,
        .                       capacity,
        .                       fallibility,
        .                   )?;
   25,291 ( 0.01%)          new_table.growth_left -= self.items;
        .                   new_table.items = self.items;
        .           
        .                   // The hash function may panic, in which case we simply free the new
        .                   // table without dropping any elements that may have been copied into
        .                   // it.
        .                   //
        .                   // This guard is also used to free the old table on success, see
        .                   // the comment at the bottom of this function.
        .                   Ok(guard(new_table, move |self_| {
   11,726 ( 0.00%)              if !self_.is_empty_singleton() {
        .                           self_.free_buckets(table_layout);
        .                       }
        .                   }))
        .               }
        .           
        .               /// Reserves or rehashes to make room for `additional` more elements.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .                   drop: Option<fn(*mut u8)>,
        .               ) -> Result<(), TryReserveError> {
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
   23,452 ( 0.00%)          let new_items = match self.items.checked_add(additional) {
        .                       Some(new_items) => new_items,
        .                       None => return Err(fallibility.capacity_overflow()),
        .                   };
   23,452 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
   48,759 ( 0.01%)          if new_items <= full_capacity / 2 {
        .                       // Rehash in-place without re-allocating if we have plenty of spare
        .                       // capacity that is locked up due to DELETED entries.
        .                       self.rehash_in_place(hasher, layout.size, drop);
        .                       Ok(())
        .                   } else {
        .                       // Otherwise, conservatively resize to at least the next size up
        .                       // to avoid churning deletes into frequent rehashes.
        .                       self.resize_inner(
   11,726 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
        .                           hasher,
        .                           fallibility,
        .                           layout,
        .                       )
        .                   }
        .               }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
        .               #[inline(always)]
        .               unsafe fn resize_inner(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .               ) -> Result<(), TryReserveError> {
    1,756 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
        .           
        .                   // Copy all elements to the new table.
        .                   for i in 0..self.buckets() {
  162,499 ( 0.03%)              if !is_full(*self.ctrl(i)) {
        .                           continue;
        .                       }
        .           
        .                       // This may panic.
        .                       let hash = hasher(self, i);
        .           
        .                       // We can use a simpler version of insert() here since:
        .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
        .                   }
        .           
        .                   // We successfully copied all elements without panicking. Now replace
        .                   // self with the new table. The old table will have its memory freed but
        .                   // the items will not be dropped (since they have been moved into the
        .                   // new table).
        .                   mem::swap(self, &mut new_table);
        .           
   11,726 ( 0.00%)          Ok(())
        .               }
        .           
        .               /// Rehashes the contents of the table in place (i.e. without changing the
        .               /// allocation).
        .               ///
        .               /// If `hasher` panics then some the table's contents may be lost.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1554 ----------------------------------------
        .               #[inline]
        .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
        .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
        .                       Some(lco) => lco,
        .                       None => hint::unreachable_unchecked(),
        .                   };
        .                   self.alloc.deallocate(
    7,121 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
        .                       layout,
        .                   );
        .               }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[inline]
        .               fn clear_no_drop(&mut self) {
      978 ( 0.00%)          if !self.is_empty_singleton() {
        .                       unsafe {
        .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
        .                       }
        .                   }
    1,358 ( 0.00%)          self.items = 0;
      990 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
        .               }
        .           
        .               #[inline]
        .               unsafe fn erase(&mut self, index: usize) {
        .                   debug_assert!(is_full(*self.ctrl(index)));
   25,279 ( 0.01%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
        .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
        .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
        .           
        .                   // If we are inside a continuous block of Group::WIDTH full or deleted
        .                   // cells then a probe window may have seen a full block when trying to
        .                   // insert. We therefore need to keep that block non-empty so that
        .                   // lookups will continue searching to the next probe window.
        .                   //
        .                   // Note that in this context `leading_zeros` refers to the bytes at the
        .                   // end of a group, while `trailing_zeros` refers to the bytes at the
        .                   // beginning of a group.
  101,116 ( 0.02%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
        .                       DELETED
        .                   } else {
  126,275 ( 0.03%)              self.growth_left += 1;
        .                       EMPTY
        .                   };
        .                   self.set_ctrl(index, ctrl);
  101,116 ( 0.02%)          self.items -= 1;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
      448 ( 0.00%)      fn clone(&self) -> Self {
       57 ( 0.00%)          if self.table.is_empty_singleton() {
        .                       Self::new_in(self.table.alloc.clone())
        .                   } else {
        .                       unsafe {
        .                           let mut new_table = ManuallyDrop::new(
        .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
        .                               match Self::new_uninitialized(
        .                                   self.table.alloc.clone(),
        .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
        .                               // We need to free the memory allocated for the new table.
        .                               new_table.free_buckets();
        .                           });
        .           
        .                           // Return the newly created table.
        .                           ManuallyDrop::into_inner(new_table)
        .                       }
        .                   }
      504 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   if source.table.is_empty_singleton() {
        .                       *self = Self::new_in(self.table.alloc.clone());
        .                   } else {
        .                       unsafe {
        .                           // First, drop all our elements without clearing the control bytes.
        .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
        .                       .table
        .                       .ctrl(0)
        .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
        .                   source
        .                       .data_start()
        .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
        .           
        .                   self.table.items = source.table.items;
        6 ( 0.00%)          self.table.growth_left = source.table.growth_left;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
        .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
        .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
        .               fn default() -> Self {
        .                   Self::new_in(Default::default())
        .               }
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
  119,392 ( 0.02%)      fn drop(&mut self) {
  100,941 ( 0.02%)          if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
        .                           self.free_buckets();
        .                       }
        .                   }
  128,812 ( 0.03%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
        .               type Item = T;
        .               type IntoIter = RawIntoIter<T, A>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
    1,776 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
        .                   unsafe {
        .                       let iter = self.iter();
        .                       self.into_iter_from(iter)
        .                   }
    2,220 ( 0.00%)      }
        .           }
        .           
        .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
        .           /// not track an item count.
        .           pub(crate) struct RawIterRange<T> {
        .               // Mask of full buckets in the current group. Bits are cleared from this
        .               // mask as each element is processed.
        .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
        .           
        .           impl<T> Iterator for RawIterRange<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<Bucket<T>> {
        .                   unsafe {
        .                       loop {
   37,040 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    5,466 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    8,186 ( 0.00%)                      return Some(self.data.next_n(index));
        .                           }
        .           
   29,729 ( 0.01%)                  if self.next_ctrl >= self.end {
        .                               return None;
        .                           }
        .           
        .                           // We might read past self.end up to the next group boundary,
        .                           // but this is fine because it only occurs on tables smaller
        .                           // than the group size where the trailing control bytes are all
        .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
        .                           // to the group size (since tables are power-of-two sized).
    1,211 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
      502 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
    2,905 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
        .                       }
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   // We don't have an item count, so just guess based on the range size.
        .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
        .                           }
        .                       } else {
        .                           // We must have already iterated past the removed item.
        .                       }
        .                   }
        .               }
        .           
        .               unsafe fn drop_elements(&mut self) {
      401 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
        .                       for item in self {
        .                           item.drop();
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Iterator for RawIter<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
    5,746 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
   14,452 ( 0.00%)          if let Some(b) = self.iter.next() {
   42,268 ( 0.01%)              self.items -= 1;
        .                       Some(b)
        .                   } else {
        .                       // We don't check against items == 0 here to allow the
        .                       // compiler to optimize away the item count entirely if the
        .                       // iterator length is never queried.
        .                       debug_assert_eq!(self.items, 0);
        .                       None
        .                   }
   11,492 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   (self.items, Some(self.items))
        .               }
        .           }
        .           
        .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
      888 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
        .           
        .                       // Free the table
    3,492 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
        .                           self.alloc.deallocate(ptr, layout);
        .                       }
        .                   }
       48 ( 0.00%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
      324 ( 0.00%)      fn next(&mut self) -> Option<T> {
       93 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
      805 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        3 ( 0.00%)          self.iter.size_hint()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
        .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
        .           
        .           /// Iterator which consumes elements without freeing the table storage.
        .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
        .           where
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
      144 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements. Note that this may panic.
        .                       self.iter.drop_elements();
        .           
        .                       // Reset the contents of the table now that all elements have been
        .                       // dropped.
        .                       self.table.clear_no_drop();
        .           
        .                       // Move the now empty table back to its original location.
       18 ( 0.00%)              self.orig_table
        .                           .as_ptr()
        .                           .copy_from_nonoverlapping(&*self.table, 1);
        .                   }
      144 ( 0.00%)      }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<T> {
        .                   unsafe {
-- line 2289 ----------------------------------------

1,991,609 ( 0.41%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir               

-- line 23 ----------------------------------------
      .           use std::cmp::Ordering;
      .           use std::marker::PhantomData;
      .           use std::ops::Range;
      .           use ty::util::IntTypeExt;
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable, TypeFoldable, Lift)]
      .           pub struct TypeAndMut<'tcx> {
  1,360 ( 0.00%)      pub ty: Ty<'tcx>,
  6,800 ( 0.00%)      pub mutbl: hir::Mutability,
      .           }
      .           
      .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
      .           #[derive(HashStable)]
      .           /// A "free" region `fr` can be interpreted as "some region
      .           /// at least as big as the scope `fr.scope`".
      .           pub struct FreeRegion {
  2,108 ( 0.00%)      pub scope: DefId,
  4,873 ( 0.00%)      pub bound_region: BoundRegionKind,
      .           }
      .           
 22,873 ( 0.00%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
     45 ( 0.00%)  #[derive(HashStable)]
      .           pub enum BoundRegionKind {
      .               /// An anonymous region parameter for a given fn (&T)
    870 ( 0.00%)      BrAnon(u32),
      .           
      .               /// Named region parameters for functions (a in &'a T)
      .               ///
      .               /// The `DefId` is needed to distinguish free regions in
      .               /// the event of shadowing.
      4 ( 0.00%)      BrNamed(DefId, Symbol),
      .           
      .               /// Anonymous region for the implicit env pointer parameter
      .               /// to a closure
      .               BrEnv,
      .           }
      .           
    270 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
      .           #[derive(HashStable)]
      .           pub struct BoundRegion {
  3,933 ( 0.00%)      pub var: BoundVar,
  3,727 ( 0.00%)      pub kind: BoundRegionKind,
      .           }
      .           
      .           impl BoundRegionKind {
      .               pub fn is_named(&self) -> bool {
      .                   match *self {
      .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
      .                       _ => false,
      .                   }
      .               }
      .           }
      .           
      .           /// Defines the kinds of types.
      .           ///
      .           /// N.B., if you change this, you'll probably want to change the corresponding
      .           /// AST structure in `rustc_ast/src/ast.rs` as well.
722,240 ( 0.15%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
 17,578 ( 0.00%)  #[derive(HashStable)]
      .           #[rustc_diagnostic_item = "TyKind"]
      .           pub enum TyKind<'tcx> {
      .               /// The primitive boolean type. Written as `bool`.
      .               Bool,
      .           
      .               /// The primitive character type; holds a Unicode scalar value
      .               /// (a non-surrogate code point). Written as `char`.
      .               Char,
-- line 90 ----------------------------------------
-- line 99 ----------------------------------------
      .               Float(ty::FloatTy),
      .           
      .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
      .               ///
      .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
      .               /// That is, even after substitution it is possible that there are type
      .               /// variables. This happens when the `Adt` corresponds to an ADT
      .               /// definition and not a concrete use of it.
 34,829 ( 0.01%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
      .           
      .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
      .               Foreign(DefId),
      .           
      .               /// The pointee of a string slice. Written as `str`.
      .               Str,
      .           
      .               /// An array with the given length. Written as `[T; n]`.
    472 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
      .           
      .               /// The pointee of an array slice. Written as `[T]`.
      .               Slice(Ty<'tcx>),
      .           
      .               /// A raw pointer. Written as `*mut T` or `*const T`
      .               RawPtr(TypeAndMut<'tcx>),
      .           
      .               /// A reference; a pointer with an associated lifetime. Written as
      .               /// `&'a mut T` or `&'a T`.
 68,346 ( 0.01%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
      .           
      .               /// The anonymous type of a function declaration/definition. Each
      .               /// function has a unique type, which is output (for a function
      .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
      .               ///
      .               /// For example the type of `bar` here:
      .               ///
      .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
      .               ///
      .               /// ```rust
      .               /// fn foo() -> i32 { 1 }
      .               /// let bar: fn() -> i32 = foo;
      .               /// ```
      .               FnPtr(PolyFnSig<'tcx>),
      .           
      .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
    353 ( 0.00%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
      .           
      .               /// The anonymous type of a closure. Used to represent the type of
      .               /// `|a| a`.
      .               Closure(DefId, SubstsRef<'tcx>),
      .           
      .               /// The anonymous type of a generator. Used to represent the type of
      .               /// `|a| yield a`.
      .               Generator(DefId, SubstsRef<'tcx>, hir::Movability),
-- line 159 ----------------------------------------
-- line 180 ----------------------------------------
      .               /// The substitutions are for the generics of the function in question.
      .               /// After typeck, the concrete type can be found in the `types` map.
      .               Opaque(DefId, SubstsRef<'tcx>),
      .           
      .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
      .               Param(ParamTy),
      .           
      .               /// Bound type variable, used only when preparing a trait query.
     58 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
      .           
      .               /// A placeholder type - universally quantified higher-ranked type.
      .               Placeholder(ty::PlaceholderType),
      .           
      .               /// A type variable used during type checking.
      .               Infer(InferTy),
      .           
      .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 760 ----------------------------------------
      .               }
      .           
      .               /// Returns the type of this inline const.
      .               pub fn ty(self) -> Ty<'tcx> {
      .                   self.split().ty.expect_ty()
      .               }
      .           }
      .           
    460 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
    281 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub enum ExistentialPredicate<'tcx> {
      .               /// E.g., `Iterator`.
      .               Trait(ExistentialTraitRef<'tcx>),
      .               /// E.g., `Iterator::Item = T`.
      .               Projection(ExistentialProjection<'tcx>),
      .               /// E.g., `Send`.
      6 ( 0.00%)      AutoTrait(DefId),
      .           }
      .           
      .           impl<'tcx> ExistentialPredicate<'tcx> {
      .               /// Compares via an ordering that will not change if modules are reordered or other changes are
      .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
     30 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
      .                   use self::ExistentialPredicate::*;
     32 ( 0.00%)          match (*self, *other) {
      .                       (Trait(_), Trait(_)) => Ordering::Equal,
      .                       (Projection(ref a), Projection(ref b)) => {
      .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
      .                       }
      .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
      .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
      .                       }
      .                       (Trait(_), _) => Ordering::Less,
      .                       (Projection(_), Trait(_)) => Ordering::Greater,
      .                       (Projection(_), _) => Ordering::Less,
      .                       (AutoTrait(_), _) => Ordering::Greater,
      .                   }
     36 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
     36 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
      .                   use crate::ty::ToPredicate;
     20 ( 0.00%)          match self.skip_binder() {
      .                       ExistentialPredicate::Trait(tr) => {
      .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
      .                       }
      .                       ExistentialPredicate::Projection(p) => {
      .                           self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
      .                       }
      .                       ExistentialPredicate::AutoTrait(did) => {
      .                           let trait_ref = self.rebind(ty::TraitRef {
      .                               def_id: did,
      .                               substs: tcx.mk_substs_trait(self_ty, &[]),
      .                           });
      .                           trait_ref.without_const().to_predicate(tcx)
      .                       }
      .                   }
     32 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
      .               /// Returns the "principal `DefId`" of this set of existential predicates.
      .               ///
      .               /// A Rust trait object type consists (in addition to a lifetime bound)
      .               /// of a set of trait bounds, which are separated into any number
      .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 839 ----------------------------------------
      .               /// are the set `{Sync}`.
      .               ///
      .               /// It is also possible to have a "trivial" trait object that
      .               /// consists only of auto traits, with no principal - for example,
      .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
      .               /// is `{Send, Sync}`, while there is no principal. These trait objects
      .               /// have a "trivial" vtable consisting of just the size, alignment,
      .               /// and destructor.
      1 ( 0.00%)      pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
     22 ( 0.00%)          self[0]
     19 ( 0.00%)              .map_bound(|this| match this {
      .                           ExistentialPredicate::Trait(tr) => Some(tr),
      .                           _ => None,
      4 ( 0.00%)              })
      .                       .transpose()
      3 ( 0.00%)      }
      .           
      4 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
      .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
      8 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn projection_bounds<'a>(
      .                   &'a self,
      .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
      .                   self.iter().filter_map(|predicate| {
      .                       predicate
      4 ( 0.00%)                  .map_bound(|pred| match pred {
      .                               ExistentialPredicate::Projection(projection) => Some(projection),
      .                               _ => None,
      .                           })
      .                           .transpose()
      .                   })
      .               }
      .           
      .               #[inline]
-- line 874 ----------------------------------------
-- line 886 ----------------------------------------
      .           ///     T: Foo<U>
      .           ///
      .           /// This would be represented by a trait-reference where the `DefId` is the
      .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
      .           /// and `U` as parameter 1.
      .           ///
      .           /// Trait references also appear in object types like `Foo<U>`, but in
      .           /// that case the `Self` parameter is absent from the substitutions.
  7,851 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
123,562 ( 0.03%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct TraitRef<'tcx> {
    266 ( 0.00%)      pub def_id: DefId,
 76,699 ( 0.02%)      pub substs: SubstsRef<'tcx>,
      .           }
      .           
      .           impl<'tcx> TraitRef<'tcx> {
    556 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
      .                   TraitRef { def_id, substs }
  2,224 ( 0.00%)      }
      .           
      .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
      .               /// are the parameters defined on trait.
    288 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
    128 ( 0.00%)          ty::Binder::dummy(TraitRef {
      .                       def_id,
    192 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
      .                   })
    256 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn self_ty(&self) -> Ty<'tcx> {
      .                   self.substs.type_at(0)
      .               }
      .           
    712 ( 0.00%)      pub fn from_method(
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_id: DefId,
      .                   substs: SubstsRef<'tcx>,
      .               ) -> ty::TraitRef<'tcx> {
      .                   let defs = tcx.generics_of(trait_id);
      .           
     89 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
    979 ( 0.00%)      }
      .           }
      .           
      .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
      .           
      .           impl<'tcx> PolyTraitRef<'tcx> {
      .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
      .                   self.map_bound_ref(|tr| tr.self_ty())
      .               }
      .           
      .               pub fn def_id(&self) -> DefId {
    468 ( 0.00%)          self.skip_binder().def_id
    156 ( 0.00%)      }
      .           
    122 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
    244 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
      .                       trait_ref,
      .                       constness: ty::BoundConstness::NotConst,
      .                       polarity: ty::ImplPolarity::Positive,
      .                   })
    122 ( 0.00%)      }
      .           }
      .           
      .           /// An existential reference to a trait, where `Self` is erased.
      .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
      .           ///
      .           ///     exists T. T: Trait<'a, 'b, X, Y>
      .           ///
      .           /// The substitutions don't include the erased `Self`, only trait
      .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
     36 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    142 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct ExistentialTraitRef<'tcx> {
     22 ( 0.00%)      pub def_id: DefId,
    164 ( 0.00%)      pub substs: SubstsRef<'tcx>,
      .           }
      .           
      .           impl<'tcx> ExistentialTraitRef<'tcx> {
      4 ( 0.00%)      pub fn erase_self_ty(
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_ref: ty::TraitRef<'tcx>,
      .               ) -> ty::ExistentialTraitRef<'tcx> {
      .                   // Assert there is a Self.
      .                   trait_ref.substs.type_at(0);
      .           
      .                   ty::ExistentialTraitRef {
      .                       def_id: trait_ref.def_id,
      .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
      .                   }
      4 ( 0.00%)      }
      .           
      .               /// Object types don't have a self type specified. Therefore, when
      .               /// we convert the principal trait-ref into a normal trait-ref,
      .               /// you must give *some* self type. A common choice is `mk_err()`
      .               /// or some placeholder type.
      .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
      .                   // otherwise the escaping vars would be captured by the binder
      .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
-- line 985 ----------------------------------------
-- line 999 ----------------------------------------
      .               /// we convert the principal trait-ref into a normal trait-ref,
      .               /// you must give *some* self type. A common choice is `mk_err()`
      .               /// or some placeholder type.
      .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
      .                   self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
      .               }
      .           }
      .           
  4,691 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
     60 ( 0.00%)  #[derive(HashStable)]
      .           pub enum BoundVariableKind {
      .               Ty(BoundTyKind),
      .               Region(BoundRegionKind),
      .               Const,
      .           }
      .           
      .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
      .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
      .           /// (which would be represented by the type `PolyTraitRef ==
      .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
      .           /// erase, or otherwise "discharge" these bound vars, we change the
      .           /// type from `Binder<'tcx, T>` to just `T` (see
      .           /// e.g., `liberate_late_bound_regions`).
      .           ///
      .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
    558 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
 32,959 ( 0.01%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
      .           
      .           impl<'tcx, T> Binder<'tcx, T>
      .           where
      .               T: TypeFoldable<'tcx>,
      .           {
      .               /// Wraps `value` in a binder, asserting that `value` does not
      .               /// contain any bound vars that would be bound by the
      .               /// binder. This is commonly used to 'inject' a value T into a
      .               /// different binding level.
  1,875 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
  7,625 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
 17,630 ( 0.00%)          Binder(value, ty::List::empty())
  1,873 ( 0.00%)      }
      .           
      .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(vars);
      .                       value.visit_with(&mut validator);
      .                   }
  4,102 ( 0.00%)          Binder(value, vars)
      .               }
      .           }
      .           
      .           impl<'tcx, T> Binder<'tcx, T> {
      .               /// Skips the binder and returns the "bound" value. This is a
      .               /// risky thing to do because it's easy to get confused about
      .               /// De Bruijn indices and the like. It is usually better to
      .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
      .               /// accounting.
      .               ///
      .               /// Some examples where `skip_binder` is reasonable:
      .               ///
      .               /// - extracting the `DefId` from a PolyTraitRef;
      .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
      .               ///   a type parameter `X`, since the type `X` does not reference any regions
      .               pub fn skip_binder(self) -> T {
143,396 ( 0.03%)          self.0
      .               }
      .           
      .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
    238 ( 0.00%)          self.1
      .               }
      .           
      .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
  3,910 ( 0.00%)          Binder(&self.0, self.1)
      .               }
      .           
      .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
      .               where
      .                   F: FnOnce(&T) -> U,
      .               {
      .                   let value = f(&self.0);
      .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1089 ----------------------------------------
      .               {
      .                   self.as_ref().map_bound(f)
      .               }
      .           
      .               pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
      .               where
      .                   F: FnOnce(T) -> U,
      .               {
  7,125 ( 0.00%)          let value = f(self.0);
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(self.1);
      .                       value.visit_with(&mut validator);
      .                   }
 45,896 ( 0.01%)          Binder(value, self.1)
      .               }
      .           
      .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
      .               where
      .                   F: FnOnce(T) -> Result<U, E>,
      .               {
      .                   let value = f(self.0)?;
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(self.1);
      .                       value.visit_with(&mut validator);
      .                   }
  2,300 ( 0.00%)          Ok(Binder(value, self.1))
      .               }
      .           
      .               /// Wraps a `value` in a binder, using the same bound variables as the
      .               /// current `Binder`. This should not be used if the new value *changes*
      .               /// the bound variables. Note: the (old or new) value itself does not
      .               /// necessarily need to *name* all the bound variables.
      .               ///
      .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
      .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
      .               where
      .                   U: TypeFoldable<'tcx>,
      .               {
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
      .                       value.visit_with(&mut validator);
      .                   }
  1,290 ( 0.00%)          Binder(value, self.1)
      .               }
      .           
      .               /// Unwraps and returns the value within, but only if it contains
      .               /// no bound vars at all. (In other words, if this binder --
      .               /// and indeed any enclosing binder -- doesn't bind anything at
      .               /// all.) Otherwise, returns `None`.
      .               ///
      .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
      .               /// binder, but permits late-bound vars bound by enclosing
      .               /// binders, but that would require adjusting the debruijn
      .               /// indices, and given the shallow binding structure we often use,
      .               /// would not be that useful.)
      .               pub fn no_bound_vars(self) -> Option<T>
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
 22,303 ( 0.00%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
      .               }
      .           
      .               /// Splits the contents into two things that share the same binder
      .               /// level as the original, returning two distinct binders.
      .               ///
      .               /// `f` should consider bound regions at depth 1 to be free, and
      .               /// anything it produces with bound regions at depth 1 will be
      .               /// bound in the resulting return values.
-- line 1159 ----------------------------------------
-- line 1170 ----------------------------------------
      .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
      .                   let bound_vars = self.1;
      .                   self.0.map(|v| Binder(v, bound_vars))
      .               }
      .           }
      .           
      .           /// Represents the projection of an associated type. In explicit UFCS
      .           /// form this would be written `<T as Trait<..>>::N`.
     50 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
  1,062 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct ProjectionTy<'tcx> {
      .               /// The parameters of the associated item.
    291 ( 0.00%)      pub substs: SubstsRef<'tcx>,
      .           
      .               /// The `DefId` of the `TraitItem` for the associated type `N`.
      .               ///
      .               /// Note that this is not the `DefId` of the `TraitRef` containing this
      .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
    290 ( 0.00%)      pub item_def_id: DefId,
      .           }
      .           
      .           impl<'tcx> ProjectionTy<'tcx> {
    224 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
     64 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
    256 ( 0.00%)      }
      .           
      .               /// Extracts the underlying trait reference and own substs from this projection.
      .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
      .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
     28 ( 0.00%)      pub fn trait_ref_and_own_substs(
      .                   &self,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
     12 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
      .                   let trait_generics = tcx.generics_of(def_id);
     20 ( 0.00%)          (
      .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
      .                       &self.substs[trait_generics.count()..],
      .                   )
     36 ( 0.00%)      }
      .           
      .               /// Extracts the underlying trait reference from this projection.
      .               /// For example, if this is a projection of `<T as Iterator>::Item`,
      .               /// then this function would return a `T: Iterator` trait reference.
      .               ///
      .               /// WARNING: This will drop the substs for generic associated types
      .               /// consider calling [Self::trait_ref_and_own_substs] to get those
      .               /// as well.
    288 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
     32 ( 0.00%)          let def_id = self.trait_def_id(tcx);
     32 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
    352 ( 0.00%)      }
      .           
     75 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
    225 ( 0.00%)          self.substs.type_at(0)
    150 ( 0.00%)      }
      .           }
      .           
      .           #[derive(Copy, Clone, Debug, TypeFoldable)]
      .           pub struct GenSig<'tcx> {
      .               pub resume_ty: Ty<'tcx>,
      .               pub yield_ty: Ty<'tcx>,
      .               pub return_ty: Ty<'tcx>,
      .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
      .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
      .           
      .           /// Signature of a function type, which we have arbitrarily
      .           /// decided to use to refer to the input/output types.
      .           ///
      .           /// - `inputs`: is the list of arguments and their modes.
      .           /// - `output`: is the return type.
      .           /// - `c_variadic`: indicates whether this is a C-variadic function.
  6,889 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
  2,937 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct FnSig<'tcx> {
     11 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
  1,191 ( 0.00%)      pub c_variadic: bool,
     80 ( 0.00%)      pub unsafety: hir::Unsafety,
  2,692 ( 0.00%)      pub abi: abi::Abi,
      .           }
      .           
      .           impl<'tcx> FnSig<'tcx> {
  2,330 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
 11,543 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
  4,660 ( 0.00%)      }
      .           
  1,400 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
 11,621 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
  2,800 ( 0.00%)      }
      .           
      .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
      .               // method.
      .               fn fake() -> FnSig<'tcx> {
      .                   FnSig {
      .                       inputs_and_output: List::empty(),
      .                       c_variadic: false,
      .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
      .               }
      .           }
      .           
      .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
      .           
      .           impl<'tcx> PolyFnSig<'tcx> {
      .               #[inline]
      .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
    603 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
      .               }
      .               #[inline]
      .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
    522 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
      .               }
      .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
      .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
     55 ( 0.00%)      }
      .               #[inline]
      .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
    502 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
      .               }
      .               pub fn c_variadic(&self) -> bool {
    110 ( 0.00%)          self.skip_binder().c_variadic
     55 ( 0.00%)      }
      .               pub fn unsafety(&self) -> hir::Unsafety {
    336 ( 0.00%)          self.skip_binder().unsafety
    168 ( 0.00%)      }
      .               pub fn abi(&self) -> abi::Abi {
  4,364 ( 0.00%)          self.skip_binder().abi
  1,091 ( 0.00%)      }
      .           }
      .           
      .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
      .           
     76 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    126 ( 0.00%)  #[derive(HashStable)]
      .           pub struct ParamTy {
  1,608 ( 0.00%)      pub index: u32,
      .               pub name: Symbol,
      .           }
      .           
      .           impl<'tcx> ParamTy {
    290 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
      .                   ParamTy { index, name }
    145 ( 0.00%)      }
      .           
      .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
    284 ( 0.00%)          ParamTy::new(def.index, def.name)
    142 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
      .                   tcx.mk_ty_param(self.index, self.name)
      .               }
      .           }
      .           
      .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
      .           #[derive(HashStable)]
      .           pub struct ParamConst {
    163 ( 0.00%)      pub index: u32,
    156 ( 0.00%)      pub name: Symbol,
      .           }
      .           
      .           impl ParamConst {
      .               pub fn new(index: u32, name: Symbol) -> ParamConst {
      .                   ParamConst { index, name }
      .               }
      .           
      .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
      .           /// the inference variable is supposed to satisfy the relation
      .           /// *for every value of the placeholder region*. To ensure that doesn't
      .           /// happen, you can use `leak_check`. This is more clearly explained
      .           /// by the [rustc dev guide].
      .           ///
      .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
      .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
      .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
205,753 ( 0.04%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
    158 ( 0.00%)  pub enum RegionKind {
      .               /// Region bound in a type or fn declaration which will be
      .               /// substituted 'early' -- that is, at the same time when type
      .               /// parameters are substituted.
      .               ReEarlyBound(EarlyBoundRegion),
      .           
      .               /// Region bound in a function scope, which will be substituted when the
      .               /// function is called.
  7,454 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
      .           
      .               /// When checking a function body, the types of all arguments and so forth
      .               /// that refer to bound region parameters are modified to refer to free
      .               /// region parameters.
      .               ReFree(FreeRegion),
      .           
      .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
      .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
      .               /// regions visible from `U`, but not less than regions not visible
      .               /// from `U`.
      .               ReEmpty(ty::UniverseIndex),
      .           
      .               /// Erased region, used by trait selection, in MIR and during codegen.
      .               ReErased,
      .           }
      .           
  4,040 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
      .           pub struct EarlyBoundRegion {
    209 ( 0.00%)      pub def_id: DefId,
  1,994 ( 0.00%)      pub index: u32,
  1,708 ( 0.00%)      pub name: Symbol,
      .           }
      .           
      .           /// A **`const`** **v**ariable **ID**.
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
      .           pub struct ConstVid<'tcx> {
     86 ( 0.00%)      pub index: u32,
     36 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
      .           }
      .           
      .           rustc_index::newtype_index! {
      .               /// A **region** (lifetime) **v**ariable **ID**.
      .               pub struct RegionVid {
      .                   DEBUG_FORMAT = custom,
      .               }
      .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
      .           rustc_index::newtype_index! {
      .               pub struct BoundVar { .. }
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable)]
      .           pub struct BoundTy {
      .               pub var: BoundVar,
     58 ( 0.00%)      pub kind: BoundTyKind,
      .           }
      .           
  1,013 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable)]
      .           pub enum BoundTyKind {
      .               Anon,
      .               Param(Symbol),
      .           }
      .           
      .           impl From<BoundVar> for BoundTy {
      .               fn from(var: BoundVar) -> Self {
-- line 1532 ----------------------------------------
-- line 1616 ----------------------------------------
      .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
      .                       RegionKind::ReEmpty(_) => false,
      .                       RegionKind::ReErased => false,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_late_bound(&self) -> bool {
     52 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_placeholder(&self) -> bool {
      .                   matches!(*self, ty::RePlaceholder(..))
      .               }
      .           
      .               #[inline]
      .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
  3,001 ( 0.00%)          match *self {
      .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               pub fn type_flags(&self) -> TypeFlags {
      .                   let mut flags = TypeFlags::empty();
      .           
 11,568 ( 0.00%)          match *self {
      .                       ty::ReVar(..) => {
      .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
      .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
      .                           flags = flags | TypeFlags::HAS_RE_INFER;
      .                       }
      .                       ty::RePlaceholder(..) => {
      .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
      .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
      .                       ty::ReErased => {
      .                           flags = flags | TypeFlags::HAS_RE_ERASED;
      .                       }
      .                   }
      .           
      .                   debug!("type_flags({:?}) = {:?}", self, flags);
      .           
      .                   flags
    540 ( 0.00%)      }
      .           
      .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
      .               /// For example, consider the regions in this snippet of code:
      .               ///
      .               /// ```
      .               /// impl<'a> Foo {
      .               ///      ^^ -- early bound, declared on an impl
      .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
      .           
      .               #[inline(always)]
      .               pub fn flags(&self) -> TypeFlags {
      .                   self.flags
      .               }
      .           
      .               #[inline]
      .               pub fn is_unit(&self) -> bool {
    454 ( 0.00%)          match self.kind() {
    198 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
      .                       _ => false,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_never(&self) -> bool {
  1,648 ( 0.00%)          matches!(self.kind(), Never)
      .               }
      .           
      .               #[inline]
      .               pub fn is_primitive(&self) -> bool {
      .                   self.kind().is_primitive()
      .               }
      .           
      .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn is_ref(&self) -> bool {
      .                   matches!(self.kind(), Ref(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_ty_var(&self) -> bool {
  3,627 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
      .               }
      .           
      .               #[inline]
      .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
  3,210 ( 0.00%)          match self.kind() {
    233 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_ty_infer(&self) -> bool {
      .                   matches!(self.kind(), Infer(_))
      .               }
-- line 1763 ----------------------------------------
-- line 1791 ----------------------------------------
      .                   match self.kind() {
      .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
      .                       _ => false,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_array(&self) -> bool {
     10 ( 0.00%)          matches!(self.kind(), Array(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_simd(&self) -> bool {
      .                   match self.kind() {
      .                       Adt(def, _) => def.repr.simd(),
      .                       _ => false,
      .                   }
-- line 1807 ----------------------------------------
-- line 1838 ----------------------------------------
      .                           }
      .                       }
      .                       _ => bug!("`simd_size_and_type` called on invalid type"),
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_region_ptr(&self) -> bool {
      5 ( 0.00%)          matches!(self.kind(), Ref(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_mutable_ptr(&self) -> bool {
      .                   matches!(
      .                       self.kind(),
      .                       RawPtr(TypeAndMut { mutbl: hir::Mutability::Mut, .. })
      .                           | Ref(_, _, hir::Mutability::Mut)
-- line 1854 ----------------------------------------
-- line 1861 ----------------------------------------
      .                   match self.kind() {
      .                       Ref(_, _, mutability) => Some(*mutability),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_unsafe_ptr(&self) -> bool {
    807 ( 0.00%)          matches!(self.kind(), RawPtr(_))
      .               }
      .           
      .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
      .               #[inline]
      .               pub fn is_any_ptr(&self) -> bool {
      4 ( 0.00%)          self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
      .               }
      .           
      .               #[inline]
      .               pub fn is_box(&self) -> bool {
  1,808 ( 0.00%)          match self.kind() {
    159 ( 0.00%)              Adt(def, _) => def.is_box(),
      .                       _ => false,
      .                   }
      .               }
      .           
      .               /// Panics if called on any type other than `Box<T>`.
     14 ( 0.00%)      pub fn boxed_ty(&self) -> Ty<'tcx> {
     14 ( 0.00%)          match self.kind() {
     35 ( 0.00%)              Adt(def, substs) if def.is_box() => substs.type_at(0),
      .                       _ => bug!("`boxed_ty` is called on non-box type {:?}", self),
      .                   }
     14 ( 0.00%)      }
      .           
      .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
      .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
      .               /// contents are abstract to rustc.)
      .               #[inline]
      .               pub fn is_scalar(&self) -> bool {
     14 ( 0.00%)          matches!(
     34 ( 0.00%)              self.kind(),
      .                       Bool | Char
      .                           | Int(_)
      .                           | Float(_)
      .                           | Uint(_)
      .                           | FnDef(..)
      .                           | FnPtr(_)
      .                           | RawPtr(_)
      .                           | Infer(IntVar(_) | FloatVar(_))
      .                   )
      .               }
      .           
      .               /// Returns `true` if this type is a floating point type.
      .               #[inline]
      .               pub fn is_floating_point(&self) -> bool {
     66 ( 0.00%)          matches!(self.kind(), Float(_) | Infer(FloatVar(_)))
      .               }
      .           
      .               #[inline]
      .               pub fn is_trait(&self) -> bool {
      8 ( 0.00%)          matches!(self.kind(), Dynamic(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_enum(&self) -> bool {
     22 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
      .               }
      .           
      .               #[inline]
      .               pub fn is_union(&self) -> bool {
    814 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
      .               }
      .           
      .               #[inline]
      .               pub fn is_closure(&self) -> bool {
    262 ( 0.00%)          matches!(self.kind(), Closure(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_generator(&self) -> bool {
    503 ( 0.00%)          matches!(self.kind(), Generator(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_integral(&self) -> bool {
     62 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_fresh_ty(&self) -> bool {
      .                   matches!(self.kind(), Infer(FreshTy(_)))
      .               }
      .           
      .               #[inline]
      .               pub fn is_fresh(&self) -> bool {
    844 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
      .               }
      .           
      .               #[inline]
      .               pub fn is_char(&self) -> bool {
      .                   matches!(self.kind(), Char)
      .               }
      .           
      .               #[inline]
      .               pub fn is_numeric(&self) -> bool {
      .                   self.is_integral() || self.is_floating_point()
      .               }
      .           
      .               #[inline]
      .               pub fn is_signed(&self) -> bool {
     21 ( 0.00%)          matches!(self.kind(), Int(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_ptr_sized_integral(&self) -> bool {
     18 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
      .               }
      .           
      .               #[inline]
      .               pub fn has_concrete_skeleton(&self) -> bool {
      .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
      .               }
      .           
      .               /// Returns the type and mutability of `*ty`.
      .               ///
      .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
      .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
    868 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
  6,288 ( 0.00%)          match self.kind() {
     28 ( 0.00%)              Adt(def, _) if def.is_box() => {
     17 ( 0.00%)                  Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
      .                       }
  3,702 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
     84 ( 0.00%)              RawPtr(mt) if explicit => Some(*mt),
      .                       _ => None,
      .                   }
  1,736 ( 0.00%)      }
      .           
      .               /// Returns the type of `ty[i]`.
      .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
      .                   match self.kind() {
      .                       Array(ty, _) | Slice(ty) => Some(ty),
      .                       _ => None,
      .                   }
      .               }
      .           
 10,768 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
  5,384 ( 0.00%)          match self.kind() {
  4,032 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
     10 ( 0.00%)              FnPtr(f) => *f,
      .                       Error(_) => {
      .                           // ignore errors (#54954)
      .                           ty::Binder::dummy(FnSig::fake())
      .                       }
      .                       Closure(..) => bug!(
      .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
      .                       ),
      .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
      .                   }
 12,114 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn is_fn(&self) -> bool {
    588 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_fn_ptr(&self) -> bool {
      .                   matches!(self.kind(), FnPtr(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_impl_trait(&self) -> bool {
      .                   matches!(self.kind(), Opaque(..))
      .               }
      .           
      .               #[inline]
      .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
    642 ( 0.00%)          match self.kind() {
      .                       Adt(adt, _) => Some(adt),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               /// Iterates over tuple fields.
      .               /// Panics when called on anything but a tuple.
      4 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
    218 ( 0.00%)          match self.kind() {
    121 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
      .                       _ => bug!("tuple_fields called on non-tuple"),
      .                   }
      8 ( 0.00%)      }
      .           
      .               /// Get the `i`-th element of a tuple.
      .               /// Panics when called on anything but a tuple.
      .               pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
      .                   match self.kind() {
      .                       Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
      .                       _ => bug!("tuple_fields called on non-tuple"),
      .                   }
-- line 2059 ----------------------------------------
-- line 2073 ----------------------------------------
      .                   }
      .               }
      .           
      .               /// If the type contains variants, returns the variant for `variant_index`.
      .               /// Panics if `variant_index` is out of range.
      .               //
      .               // FIXME: This requires the optimized MIR in the case of generators.
      .               #[inline]
    450 ( 0.00%)      pub fn discriminant_for_variant(
      .                   &self,
      .                   tcx: TyCtxt<'tcx>,
      .                   variant_index: VariantIdx,
      .               ) -> Option<Discr<'tcx>> {
    278 ( 0.00%)          match self.kind() {
     42 ( 0.00%)              TyKind::Adt(adt, _) if adt.variants.is_empty() => {
      .                           // This can actually happen during CTFE, see
      .                           // https://github.com/rust-lang/rust/issues/89765.
      .                           None
      .                       }
     21 ( 0.00%)              TyKind::Adt(adt, _) if adt.is_enum() => {
      .                           Some(adt.discriminant_for_variant(tcx, variant_index))
      .                       }
      .                       TyKind::Generator(def_id, substs, _) => {
      .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
      .                       }
      .                       _ => None,
      .                   }
    360 ( 0.00%)      }
      .           
      .               /// Returns the type of the discriminant of this type.
    130 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
     65 ( 0.00%)          match self.kind() {
    104 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
      .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
      .           
      .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
      .                           let assoc_items = tcx.associated_item_def_ids(
      .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
      .                           );
      .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
      .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
      .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
      .           
      .                       ty::Bound(..)
      .                       | ty::Placeholder(_)
      .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
      .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
      .                       }
      .                   }
    104 ( 0.00%)      }
      .           
      .               /// Returns the type of metadata for (potentially fat) pointers to this type.
     36 ( 0.00%)      pub fn ptr_metadata_ty(
      .                   &'tcx self,
      .                   tcx: TyCtxt<'tcx>,
      .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
      .               ) -> Ty<'tcx> {
     36 ( 0.00%)          let tail = tcx.struct_tail_with_normalize(self, normalize);
     20 ( 0.00%)          match tail.kind() {
      .                       // Sized types
      .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
      .                       | ty::Uint(_)
      .                       | ty::Int(_)
      .                       | ty::Bool
      .                       | ty::Float(_)
      .                       | ty::FnDef(..)
      .                       | ty::FnPtr(_)
-- line 2160 ----------------------------------------
-- line 2170 ----------------------------------------
      .                       | ty::Foreign(..)
      .                       // If returned by `struct_tail_without_normalization` this is a unit struct
      .                       // without any fields, or not a struct, and therefore is Sized.
      .                       | ty::Adt(..)
      .                       // If returned by `struct_tail_without_normalization` this is the empty tuple,
      .                       // a.k.a. unit type, which is Sized
      .                       | ty::Tuple(..) => tcx.types.unit,
      .           
      8 ( 0.00%)              ty::Str | ty::Slice(_) => tcx.types.usize,
      .                       ty::Dynamic(..) => {
      .                           let dyn_metadata = tcx.lang_items().dyn_metadata().unwrap();
      .                           tcx.type_of(dyn_metadata).subst(tcx, &[tail.into()])
      .                       },
      .           
      .                       ty::Projection(_)
      .                       | ty::Param(_)
      .                       | ty::Opaque(..)
      .                       | ty::Infer(ty::TyVar(_))
      .                       | ty::Bound(..)
      .                       | ty::Placeholder(..)
      .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
      .                           bug!("`ptr_metadata_ty` applied to unexpected type: {:?}", tail)
      .                       }
      .                   }
     32 ( 0.00%)      }
      .           
      .               /// When we create a closure, we record its kind (i.e., what trait
      .               /// it implements) into its `ClosureSubsts` using a type
      .               /// parameter. This is kind of a phantom type, except that the
      .               /// most convenient thing for us to are the integral types. This
      .               /// function converts such a special type into the closure
      .               /// kind. To go the other way, use
      .               /// `tcx.closure_kind_ty(closure_kind)`.
-- line 2202 ----------------------------------------
-- line 2229 ----------------------------------------
      .               /// Returning true means the type is known to be sized. Returning
      .               /// `false` means nothing -- could be sized, might not be.
      .               ///
      .               /// Note that we could never rely on the fact that a type such as `[_]` is
      .               /// trivially `!Sized` because we could be in a type environment with a
      .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
      .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
      .               /// this method doesn't return `Option<bool>`.
 10,161 ( 0.00%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
  6,774 ( 0.00%)          match self.kind() {
      .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
      .                       | ty::Uint(_)
      .                       | ty::Int(_)
      .                       | ty::Bool
      .                       | ty::Float(_)
      .                       | ty::FnDef(..)
      .                       | ty::FnPtr(_)
      .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
      .                       | ty::GeneratorWitness(..)
      .                       | ty::Array(..)
      .                       | ty::Closure(..)
      .                       | ty::Never
      .                       | ty::Error(_) => true,
      .           
      .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
      .           
    184 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
      .           
    636 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
      .           
      .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
      .           
      .                       ty::Infer(ty::TyVar(_)) => false,
      .           
      .                       ty::Bound(..)
      .                       | ty::Placeholder(..)
      .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
      .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
      .                       }
      .                   }
 10,161 ( 0.00%)      }
      .           }
      .           
      .           /// Extra information about why we ended up with a particular variance.
      .           /// This is only used to add more information to error messages, and
      .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
      .           /// may lead to confusing notes in error messages, it will never cause
      .           /// a miscompilation or unsoundness.
      .           ///
-- line 2280 ----------------------------------------
-- line 2295 ----------------------------------------
      .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
      .                   param_index: u32,
      .               },
      .           }
      .           
      .           impl<'tcx> VarianceDiagInfo<'tcx> {
      .               /// Mirrors `Variance::xform` - used to 'combine' the existing
      .               /// and new `VarianceDiagInfo`s when our variance changes.
  1,596 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
      .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
  2,394 ( 0.00%)          match self {
      .                       VarianceDiagInfo::None => other,
      .                       VarianceDiagInfo::Invariant { .. } => self,
      .                   }
    798 ( 0.00%)      }
      .           }

859,226 ( 0.18%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .                   #[inline]
        .                   pub fn $fn_name(
        .                       out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len!($int_ty)],
        .                       mut value: $int_ty,
        .                   ) -> &[u8] {
        .                       let mut i = 0;
        .           
        .                       loop {
  309,732 ( 0.06%)                  if value < 0x80 {
        .                               unsafe {
  117,527 ( 0.02%)                          *out.get_unchecked_mut(i).as_mut_ptr() = value as u8;
        .                               }
        .           
  181,579 ( 0.04%)                      i += 1;
        .                               break;
        .                           } else {
        .                               unsafe {
  170,464 ( 0.03%)                          *out.get_unchecked_mut(i).as_mut_ptr() = ((value & 0x7f) | 0x80) as u8;
        .                               }
        .           
   68,762 ( 0.01%)                      value >>= 7;
        .                               i += 1;
        .                           }
        .                       }
        .           
        .                       unsafe { ::std::mem::MaybeUninit::slice_assume_init_ref(&out.get_unchecked(..i)) }
        .                   }
        .               };
        .           }
-- line 45 ----------------------------------------
-- line 53 ----------------------------------------
        .           macro_rules! impl_read_unsigned_leb128 {
        .               ($fn_name:ident, $int_ty:ty) => {
        .                   #[inline]
        .                   pub fn $fn_name(slice: &[u8], position: &mut usize) -> $int_ty {
        .                       // The first iteration of this loop is unpeeled. This is a
        .                       // performance win because this code is hot and integer values less
        .                       // than 128 are very common, typically occurring 50-80% or more of
        .                       // the time, even for u64 and u128.
1,197,880 ( 0.24%)              let byte = slice[*position];
  598,940 ( 0.12%)              *position += 1;
  598,940 ( 0.12%)              if (byte & 0x80) == 0 {
      324 ( 0.00%)                  return byte as $int_ty;
        .                       }
      754 ( 0.00%)              let mut result = (byte & 0x7F) as $int_ty;
        .                       let mut shift = 7;
        .                       loop {
  455,241 ( 0.09%)                  let byte = slice[*position];
  299,251 ( 0.06%)                  *position += 1;
  303,494 ( 0.06%)                  if (byte & 0x80) == 0 {
  211,823 ( 0.04%)                      result |= (byte as $int_ty) << shift;
        .                               return result;
        .                           } else {
        .                               result |= ((byte & 0x7F) as $int_ty) << shift;
        .                           }
        .                           shift += 7;
        .                       }
        .                   }
        .               };
-- line 80 ----------------------------------------

  552,304 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/encoder.rs
--------------------------------------------------------------------------------
Ir               

-- line 83 ----------------------------------------
      .                   if $self.is_proc_macro {
      .                       return Lazy::empty();
      .                   }
      .               };
      .           }
      .           
      .           macro_rules! encoder_methods {
      .               ($($name:ident($ty:ty);)*) => {
 30,944 ( 0.01%)          $(fn $name(&mut self, value: $ty) -> Result<(), Self::Error> {
      .                       self.opaque.$name(value)
 37,134 ( 0.01%)          })*
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Encoder for EncodeContext<'a, 'tcx> {
      .               type Error = <opaque::Encoder as Encoder>::Error;
      .           
      .               #[inline]
      .               fn emit_unit(&mut self) -> Result<(), Self::Error> {
-- line 101 ----------------------------------------
-- line 125 ----------------------------------------
      .                   emit_raw_bytes(&[u8]);
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Encodable<EncodeContext<'a, 'tcx>>> Encodable<EncodeContext<'a, 'tcx>>
      .               for Lazy<T>
      .           {
      .               fn encode(&self, e: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
  1,088 ( 0.00%)          e.emit_lazy_distance(*self)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Encodable<EncodeContext<'a, 'tcx>>> Encodable<EncodeContext<'a, 'tcx>>
      .               for Lazy<[T]>
      .           {
     15 ( 0.00%)      fn encode(&self, e: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
      .                   e.emit_usize(self.meta)?;
    182 ( 0.00%)          if self.meta == 0 {
      .                       return Ok(());
      .                   }
    433 ( 0.00%)          e.emit_lazy_distance(*self)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, I: Idx, T: Encodable<EncodeContext<'a, 'tcx>>> Encodable<EncodeContext<'a, 'tcx>>
      .               for Lazy<Table<I, T>>
      .           where
      .               Option<T>: FixedSizeEncoding,
      .           {
      .               fn encode(&self, e: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
      .                   e.emit_usize(self.meta)?;
    144 ( 0.00%)          e.emit_lazy_distance(*self)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for CrateNum {
 37,716 ( 0.01%)      fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
 54,282 ( 0.01%)          if *self != LOCAL_CRATE && s.is_proc_macro {
      .                       panic!("Attempted to encode non-local CrateNum {:?} for proc-macro crate", self);
      .                   }
      .                   s.emit_u32(self.as_u32())
 32,328 ( 0.01%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for DefIndex {
  2,025 ( 0.00%)      fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
      .                   s.emit_u32(self.as_u32())
  2,430 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for ExpnIndex {
      .               fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
      .                   s.emit_u32(self.as_u32())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for SyntaxContext {
 65,990 ( 0.01%)      fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
 39,594 ( 0.01%)          rustc_span::hygiene::raw_encode_syntax_context(*self, &s.hygiene_ctxt, s)
 79,188 ( 0.02%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for ExpnId {
      .               fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
    384 ( 0.00%)          if self.krate == LOCAL_CRATE {
      .                       // We will only write details for local expansions.  Non-local expansions will fetch
      .                       // data from the corresponding crate's metadata.
      .                       // FIXME(#43047) FIXME(#74731) We may eventually want to avoid relying on external
      .                       // metadata from proc-macro crates.
  1,308 ( 0.00%)              s.hygiene_ctxt.schedule_expn_data_for_encoding(*self);
      .                   }
    893 ( 0.00%)          self.krate.encode(s)?;
      .                   self.local_id.encode(s)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for Span {
104,840 ( 0.02%)      fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
 78,630 ( 0.02%)          let span = self.data();
      .           
      .                   // Don't serialize any `SyntaxContext`s from a proc-macro crate,
      .                   // since we don't load proc-macro dependencies during serialization.
      .                   // This means that any hygiene information from macros used *within*
      .                   // a proc-macro crate (e.g. invoking a macro that expands to a proc-macro
      .                   // definition) will be lost.
      .                   //
      .                   // This can show up in two ways:
-- line 211 ----------------------------------------
-- line 228 ----------------------------------------
      .                   // None of these user-visible effects should result in any
      .                   // cross-crate inconsistencies (getting one behavior in the same
      .                   // crate, and a different behavior in another crate) due to the
      .                   // limited surface that proc-macros can expose.
      .                   //
      .                   // IMPORTANT: If this is ever changed, be sure to update
      .                   // `rustc_span::hygiene::raw_encode_expn_id` to handle
      .                   // encoding `ExpnData` for proc-macro crates.
 26,210 ( 0.01%)          if s.is_proc_macro {
      .                       SyntaxContext::root().encode(s)?;
      .                   } else {
 13,105 ( 0.00%)              span.ctxt.encode(s)?;
      .                   }
      .           
 13,105 ( 0.00%)          if self.is_dummy() {
      .                       return TAG_PARTIAL_SPAN.encode(s);
      .                   }
      .           
      .                   // The Span infrastructure should make sure that this invariant holds:
      .                   debug_assert!(span.lo <= span.hi);
      .           
 55,021 ( 0.01%)          if !s.source_file_cache.0.contains(span.lo) {
 19,910 ( 0.00%)              let source_map = s.tcx.sess.source_map();
 39,820 ( 0.01%)              let source_file_index = source_map.lookup_source_file_idx(span.lo);
 19,910 ( 0.00%)              s.source_file_cache =
 39,820 ( 0.01%)                  (source_map.files()[source_file_index].clone(), source_file_index);
      .                   }
      .           
 78,805 ( 0.02%)          if !s.source_file_cache.0.contains(span.hi) {
      .                       // Unfortunately, macro expansion still sometimes generates Spans
      .                       // that malformed in this way.
      .                       return TAG_PARTIAL_SPAN.encode(s);
      .                   }
      .           
      .                   let source_files = s.required_source_files.as_mut().expect("Already encoded SourceMap!");
      .                   // Record the fact that we need to encode the data for this `SourceFile`
 12,995 ( 0.00%)          source_files.insert(s.source_file_cache.1);
      .           
      .                   // There are two possible cases here:
      .                   // 1. This span comes from a 'foreign' crate - e.g. some crate upstream of the
      .                   // crate we are writing metadata for. When the metadata for *this* crate gets
      .                   // deserialized, the deserializer will need to know which crate it originally came
      .                   // from. We use `TAG_VALID_SPAN_FOREIGN` to indicate that a `CrateNum` should
      .                   // be deserialized after the rest of the span data, which tells the deserializer
      .                   // which crate contains the source map information.
-- line 272 ----------------------------------------
-- line 274 ----------------------------------------
      .                   // write `TAG_VALID_SPAN_LOCAL` to let the deserializer know that it should use
      .                   // our own source map information.
      .                   //
      .                   // If we're a proc-macro crate, we always treat this as a local `Span`.
      .                   // In `encode_source_map`, we serialize foreign `SourceFile`s into our metadata
      .                   // if we're a proc-macro crate.
      .                   // This allows us to avoid loading the dependencies of proc-macro crates: all of
      .                   // the information we need to decode `Span`s is stored in the proc-macro crate.
 77,970 ( 0.02%)          let (tag, lo, hi) = if s.source_file_cache.0.is_imported() && !s.is_proc_macro {
      .                       // To simplify deserialization, we 'rebase' this span onto the crate it originally came from
      .                       // (the crate that 'owns' the file it references. These rebased 'lo' and 'hi' values
      .                       // are relative to the source map information for the 'foreign' crate whose CrateNum
      .                       // we write into the metadata. This allows `imported_source_files` to binary
      .                       // search through the 'foreign' crate's source map information, using the
      .                       // deserialized 'lo' and 'hi' values directly.
      .                       //
      .                       // All of this logic ensures that the final result of deserialization is a 'normal'
      .                       // Span that can be used without any additional trouble.
      .                       let external_start_pos = {
      .                           // Introduce a new scope so that we drop the 'lock()' temporary
 14,913 ( 0.00%)                  match &*s.source_file_cache.0.external_src.lock() {
  4,971 ( 0.00%)                      ExternalSource::Foreign { original_start_pos, .. } => *original_start_pos,
      .                               src => panic!("Unexpected external source {:?}", src),
      .                           }
      .                       };
 14,913 ( 0.00%)              let lo = (span.lo - s.source_file_cache.0.start_pos) + external_start_pos;
  4,971 ( 0.00%)              let hi = (span.hi - s.source_file_cache.0.start_pos) + external_start_pos;
      .           
      .                       (TAG_VALID_SPAN_FOREIGN, lo, hi)
      .                   } else {
 24,072 ( 0.00%)              (TAG_VALID_SPAN_LOCAL, span.lo, span.hi)
      .                   };
      .           
      .                   tag.encode(s)?;
      .                   lo.encode(s)?;
      .           
      .                   // Encode length which is usually less than span.hi and profits more
      .                   // from the variable-length integer encoding that we use.
      .                   let len = hi - lo;
      .                   len.encode(s)?;
      .           
 25,990 ( 0.01%)          if tag == TAG_VALID_SPAN_FOREIGN {
      .                       // This needs to be two lines to avoid holding the `s.source_file_cache`
      .                       // while calling `cnum.encode(s)`
 19,884 ( 0.00%)              let cnum = s.source_file_cache.0.cnum;
 14,913 ( 0.00%)              cnum.encode(s)?;
      .                   }
      .           
      .                   Ok(())
104,840 ( 0.02%)      }
      .           }
      .           
      .           impl<'a, 'tcx> TyEncoder<'tcx> for EncodeContext<'a, 'tcx> {
      .               const CLEAR_CROSS_CRATE: bool = true;
      .           
      .               fn position(&self) -> usize {
      .                   self.opaque.position()
      .               }
-- line 331 ----------------------------------------
-- line 361 ----------------------------------------
      .           }
      .           
      .           /// Helper trait to allow overloading `EncodeContext::lazy` for iterators.
      .           trait EncodeContentsForLazy<'a, 'tcx, T: ?Sized + LazyMeta> {
      .               fn encode_contents_for_lazy(self, ecx: &mut EncodeContext<'a, 'tcx>) -> T::Meta;
      .           }
      .           
      .           impl<'a, 'tcx, T: Encodable<EncodeContext<'a, 'tcx>>> EncodeContentsForLazy<'a, 'tcx, T> for &T {
  3,112 ( 0.00%)      fn encode_contents_for_lazy(self, ecx: &mut EncodeContext<'a, 'tcx>) {
  1,338 ( 0.00%)          self.encode(ecx).unwrap()
      6 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx, T: Encodable<EncodeContext<'a, 'tcx>>> EncodeContentsForLazy<'a, 'tcx, T> for T {
  6,258 ( 0.00%)      fn encode_contents_for_lazy(self, ecx: &mut EncodeContext<'a, 'tcx>) {
  3,477 ( 0.00%)          self.encode(ecx).unwrap()
  3,908 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx, I, T: Encodable<EncodeContext<'a, 'tcx>>> EncodeContentsForLazy<'a, 'tcx, [T]> for I
      .           where
      .               I: IntoIterator,
      .               I::Item: EncodeContentsForLazy<'a, 'tcx, T>,
      .           {
    665 ( 0.00%)      fn encode_contents_for_lazy(self, ecx: &mut EncodeContext<'a, 'tcx>) -> usize {
  2,241 ( 0.00%)          self.into_iter().map(|value| value.encode_contents_for_lazy(ecx)).count()
    855 ( 0.00%)      }
      .           }
      .           
      .           // Shorthand for `$self.$tables.$table.set($def_id.index, $self.lazy($value))`, which would
      .           // normally need extra variables to avoid errors about multiple mutable borrows.
      .           macro_rules! record {
      .               ($self:ident.$tables:ident.$table:ident[$def_id:expr] <- $value:expr) => {{
      .                   {
      .                       let value = $value;
      .                       let lazy = $self.lazy(value);
      .                       $self.$tables.$table.set($def_id.index, lazy);
      .                   }
      .               }};
      .           }
      .           
      .           impl<'a, 'tcx> EncodeContext<'a, 'tcx> {
  1,380 ( 0.00%)      fn emit_lazy_distance<T: ?Sized + LazyMeta>(
      .                   &mut self,
      .                   lazy: Lazy<T>,
      .               ) -> Result<(), <Self as Encoder>::Error> {
      .                   let pos = lazy.position.get();
    938 ( 0.00%)          let distance = match self.lazy_state {
      .                       LazyState::NoNode => bug!("emit_lazy_distance: outside of a metadata node"),
    221 ( 0.00%)              LazyState::NodeStart(start) => {
      .                           let start = start.get();
    442 ( 0.00%)                  assert!(pos <= start);
      .                           start - pos
      .                       }
     55 ( 0.00%)              LazyState::Previous(last_pos) => {
     55 ( 0.00%)                  assert!(
      .                               last_pos <= lazy.position,
      .                               "make sure that the calls to `lazy*` \
      .                                are in the same order as the metadata fields",
      .                           );
    165 ( 0.00%)                  lazy.position.get() - last_pos.get()
      .                       }
      .                   };
    552 ( 0.00%)          self.lazy_state = LazyState::Previous(NonZeroUsize::new(pos).unwrap());
      .                   self.emit_usize(distance)
  1,380 ( 0.00%)      }
      .           
  3,738 ( 0.00%)      fn lazy<T: ?Sized + LazyMeta>(
      .                   &mut self,
      .                   value: impl EncodeContentsForLazy<'a, 'tcx, T>,
      .               ) -> Lazy<T> {
      .                   let pos = NonZeroUsize::new(self.position()).unwrap();
      .           
  4,017 ( 0.00%)          assert_eq!(self.lazy_state, LazyState::NoNode);
 11,903 ( 0.00%)          self.lazy_state = LazyState::NodeStart(pos);
  8,437 ( 0.00%)          let meta = value.encode_contents_for_lazy(self);
  4,866 ( 0.00%)          self.lazy_state = LazyState::NoNode;
      .           
  8,312 ( 0.00%)          assert!(pos.get() <= self.position());
      .           
      .                   Lazy::from_position_and_meta(pos, meta)
  5,454 ( 0.00%)      }
      .           
      .               fn encode_info_for_items(&mut self) {
      9 ( 0.00%)          self.encode_info_for_mod(CRATE_DEF_ID, self.tcx.hir().root_module());
      .           
      .                   // Proc-macro crates only export proc-macro items, which are looked
      .                   // up using `proc_macro_data`
      2 ( 0.00%)          if self.is_proc_macro {
      .                       return;
      .                   }
      .           
      6 ( 0.00%)          self.tcx.hir().visit_all_item_likes(&mut self.as_deep_visitor());
      .               }
      .           
      .               fn encode_def_path_table(&mut self) {
      4 ( 0.00%)          let table = self.tcx.resolutions(()).definitions.def_path_table();
      2 ( 0.00%)          if self.is_proc_macro {
      .                       for def_index in std::iter::once(CRATE_DEF_INDEX)
      .                           .chain(self.tcx.resolutions(()).proc_macros.iter().map(|p| p.local_def_index))
      .                       {
      .                           let def_key = self.lazy(table.def_key(def_index));
      .                           let def_path_hash = self.lazy(table.def_path_hash(def_index));
      .                           self.tables.def_keys.set(def_index, def_key);
      .                           self.tables.def_path_hashes.set(def_index, def_path_hash);
      .                       }
      .                   } else {
      5 ( 0.00%)              for (def_index, def_key, def_path_hash) in table.enumerated_keys_and_path_hashes() {
      .                           let def_key = self.lazy(def_key);
      .                           let def_path_hash = self.lazy(def_path_hash);
  1,616 ( 0.00%)                  self.tables.def_keys.set(def_index, def_key);
  1,616 ( 0.00%)                  self.tables.def_path_hashes.set(def_index, def_path_hash);
      .                       }
      .                   }
      .               }
      .           
      .               fn encode_def_path_hash_map(&mut self) -> Lazy<DefPathHashMapRef<'tcx>> {
      .                   self.lazy(DefPathHashMapRef::BorrowedFromTcx(
      2 ( 0.00%)              self.tcx.resolutions(()).definitions.def_path_hash_to_def_index_map(),
      .                   ))
      .               }
      .           
      .               fn encode_source_map(&mut self) -> Lazy<[rustc_span::SourceFile]> {
      2 ( 0.00%)          let source_map = self.tcx.sess.source_map();
      3 ( 0.00%)          let all_source_files = source_map.files();
      .           
      .                   // By replacing the `Option` with `None`, we ensure that we can't
      .                   // accidentally serialize any more `Span`s after the source map encoding
      .                   // is done.
      .                   let required_source_files = self.required_source_files.take().unwrap();
      .           
      .                   let adapted = all_source_files
      .                       .iter()
      .                       .enumerate()
      .                       .filter(|(idx, source_file)| {
      .                           // Only serialize `SourceFile`s that were used
      .                           // during the encoding of a `Span`
    739 ( 0.00%)                  required_source_files.contains(*idx) &&
      .                           // Don't serialize imported `SourceFile`s, unless
      .                           // we're in a proc-macro crate.
    450 ( 0.00%)                  (!source_file.is_imported() || self.is_proc_macro)
      .                       })
      .                       .map(|(_, source_file)| {
      6 ( 0.00%)                  let mut adapted = match source_file.name {
      .                               FileName::Real(ref realname) => {
      4 ( 0.00%)                          let mut adapted = (**source_file).clone();
     32 ( 0.00%)                          adapted.name = FileName::Real(match realname {
      .                                       RealFileName::LocalPath(path_to_file) => {
      .                                           // Prepend path of working directory onto potentially
      .                                           // relative paths, because they could become relative
      .                                           // to a wrong directory.
      .                                           // We include `working_dir` as part of the crate hash,
      .                                           // so it's okay for us to use it as part of the encoded
      .                                           // metadata.
      4 ( 0.00%)                                  let working_dir = &self.tcx.sess.opts.working_dir;
      4 ( 0.00%)                                  match working_dir {
      .                                               RealFileName::LocalPath(absolute) => {
      .                                                   // Although neither working_dir or the file name were subject
      .                                                   // to path remapping, the concatenation between the two may
      .                                                   // be. Hence we need to do a remapping here.
      .                                                   let joined = Path::new(absolute).join(path_to_file);
     14 ( 0.00%)                                          let (joined, remapped) =
     22 ( 0.00%)                                              source_map.path_mapping().map_prefix(joined);
      4 ( 0.00%)                                          if remapped {
      .                                                       RealFileName::Remapped {
      .                                                           local_path: None,
      .                                                           virtual_name: joined,
      .                                                       }
      .                                                   } else {
      .                                                       RealFileName::LocalPath(joined)
      .                                                   }
      .                                               }
-- line 532 ----------------------------------------
-- line 544 ----------------------------------------
      .                                       RealFileName::Remapped { local_path: _, virtual_name } => {
      .                                           RealFileName::Remapped {
      .                                               // We do not want any local path to be exported into metadata
      .                                               local_path: None,
      .                                               virtual_name: virtual_name.clone(),
      .                                           }
      .                                       }
      .                                   });
      4 ( 0.00%)                          adapted.name_hash = {
      .                                       let mut hasher: StableHasher = StableHasher::new();
      2 ( 0.00%)                              adapted.name.hash(&mut hasher);
      .                                       hasher.finish::<u128>()
      .                                   };
      2 ( 0.00%)                          Lrc::new(adapted)
      .                               }
      .           
      .                               // expanded code, not from a file
      .                               _ => source_file.clone(),
      .                           };
      .           
      .                           // We're serializing this `SourceFile` into our crate metadata,
      .                           // so mark it as coming from this crate.
      .                           // This also ensures that we don't try to deserialize the
      .                           // `CrateNum` for a proc-macro dependency - since proc macro
      .                           // dependencies aren't loaded when we deserialize a proc-macro,
      .                           // trying to remap the `CrateNum` would fail.
      4 ( 0.00%)                  if self.is_proc_macro {
      .                               Lrc::make_mut(&mut adapted).cnum = LOCAL_CRATE;
      .                           }
      .                           adapted
      .                       })
      .                       .collect::<Vec<_>>();
      .           
      .                   self.lazy(adapted.iter().map(|rc| &**rc))
      .               }
      .           
      8 ( 0.00%)      fn encode_crate_root(&mut self) -> Lazy<CrateRoot<'tcx>> {
      .                   let mut i = self.position();
      .           
      .                   // Encode the crate deps
      .                   let crate_deps = self.encode_crate_deps();
      .                   let dylib_dependency_formats = self.encode_dylib_dependency_formats();
      5 ( 0.00%)          let dep_bytes = self.position() - i;
      .           
      .                   // Encode the lib features.
      .                   i = self.position();
      .                   let lib_features = self.encode_lib_features();
      7 ( 0.00%)          let lib_feature_bytes = self.position() - i;
      .           
      .                   // Encode the language items.
      .                   i = self.position();
      .                   let lang_items = self.encode_lang_items();
      .                   let lang_items_missing = self.encode_lang_items_missing();
      5 ( 0.00%)          let lang_item_bytes = self.position() - i;
      .           
      .                   // Encode the diagnostic items.
      .                   i = self.position();
      .                   let diagnostic_items = self.encode_diagnostic_items();
      5 ( 0.00%)          let diagnostic_item_bytes = self.position() - i;
      .           
      .                   // Encode the native libraries used
      .                   i = self.position();
      .                   let native_libraries = self.encode_native_libraries();
      4 ( 0.00%)          let native_lib_bytes = self.position() - i;
      .           
      .                   let foreign_modules = self.encode_foreign_modules();
      .           
      .                   // Encode DefPathTable
      .                   i = self.position();
      .                   self.encode_def_path_table();
      5 ( 0.00%)          let def_path_table_bytes = self.position() - i;
      .           
      .                   // Encode the def IDs of traits, for rustdoc and diagnostics.
      .                   i = self.position();
      .                   let traits = self.encode_traits();
      5 ( 0.00%)          let traits_bytes = self.position() - i;
      .           
      .                   // Encode the def IDs of impls, for coherence checking.
      .                   i = self.position();
      .                   let impls = self.encode_impls();
      5 ( 0.00%)          let impls_bytes = self.position() - i;
      .           
      3 ( 0.00%)          let tcx = self.tcx;
      .           
      .                   // Encode MIR.
      .                   i = self.position();
      .                   self.encode_mir();
      5 ( 0.00%)          let mir_bytes = self.position() - i;
      .           
      .                   // Encode the items.
      .                   i = self.position();
      .                   self.encode_def_ids();
      .                   self.encode_info_for_items();
      4 ( 0.00%)          let item_bytes = self.position() - i;
      .           
      .                   // Encode the allocation index
      .                   let interpret_alloc_index = {
      .                       let mut interpret_alloc_index = Vec::new();
      .                       let mut n = 0;
      .                       trace!("beginning to encode alloc ids");
      .                       loop {
      .                           let new_n = self.interpret_allocs.len();
      .                           // if we have found new ids, serialize those, too
      2 ( 0.00%)                  if n == new_n {
      .                               // otherwise, abort
      .                               break;
      .                           }
      .                           trace!("encoding {} further alloc ids", new_n - n);
      .                           for idx in n..new_n {
      .                               let id = self.interpret_allocs[idx];
      .                               let pos = self.position() as u32;
      .                               interpret_alloc_index.push(pos);
      .                               interpret::specialized_encode_alloc_id(self, tcx, id).unwrap();
      .                           }
      .                           n = new_n;
      .                       }
      6 ( 0.00%)              self.lazy(interpret_alloc_index)
      .                   };
      .           
      .                   // Encode the proc macro data. This affects 'tables',
      .                   // so we need to do this before we encode the tables
      .                   i = self.position();
      .                   let proc_macro_data = self.encode_proc_macros();
      4 ( 0.00%)          let proc_macro_data_bytes = self.position() - i;
      .           
      .                   i = self.position();
      4 ( 0.00%)          let tables = self.tables.encode(&mut self.opaque);
      4 ( 0.00%)          let tables_bytes = self.position() - i;
      .           
      .                   // Encode exported symbols info. This is prefetched in `encode_metadata` so we encode
      .                   // this as late as possible to give the prefetching as much time as possible to complete.
      .                   i = self.position();
      .                   let exported_symbols = tcx.exported_symbols(LOCAL_CRATE);
      .                   let exported_symbols = self.encode_exported_symbols(&exported_symbols);
      4 ( 0.00%)          let exported_symbols_bytes = self.position() - i;
      .           
      .                   // Encode the hygiene data,
      .                   // IMPORTANT: this *must* be the last thing that we encode (other than `SourceMap`). The process
      .                   // of encoding other items (e.g. `optimized_mir`) may cause us to load
      .                   // data from the incremental cache. If this causes us to deserialize a `Span`,
      .                   // then we may load additional `SyntaxContext`s into the global `HygieneData`.
      .                   // Therefore, we need to encode the hygiene data last to ensure that we encode
      .                   // any `SyntaxContext`s that might be used.
      .                   i = self.position();
      .                   let (syntax_contexts, expn_data, expn_hashes) = self.encode_hygiene();
      5 ( 0.00%)          let hygiene_bytes = self.position() - i;
      .           
      .                   i = self.position();
      .                   let def_path_hash_map = self.encode_def_path_hash_map();
      1 ( 0.00%)          let def_path_hash_map_bytes = self.position() - i;
      .           
      .                   // Encode source_map. This needs to be done last,
      .                   // since encoding `Span`s tells us which `SourceFiles` we actually
      .                   // need to encode.
      .                   i = self.position();
      .                   let source_map = self.encode_source_map();
      4 ( 0.00%)          let source_map_bytes = self.position() - i;
      .           
      3 ( 0.00%)          let attrs = tcx.hir().krate_attrs();
      7 ( 0.00%)          let has_default_lib_allocator = tcx.sess.contains_name(&attrs, sym::default_lib_allocator);
      .           
    118 ( 0.00%)          let root = self.lazy(CrateRoot {
      .                       name: tcx.crate_name(LOCAL_CRATE),
      3 ( 0.00%)              extra_filename: tcx.sess.opts.cg.extra_filename.clone(),
      1 ( 0.00%)              triple: tcx.sess.opts.target_triple.clone(),
      .                       hash: tcx.crate_hash(LOCAL_CRATE),
      .                       stable_crate_id: tcx.def_path_hash(LOCAL_CRATE.as_def_id()).stable_crate_id(),
      3 ( 0.00%)              panic_strategy: tcx.sess.panic_strategy(),
      3 ( 0.00%)              panic_in_drop_strategy: tcx.sess.opts.debugging_opts.panic_in_drop,
      2 ( 0.00%)              edition: tcx.sess.edition(),
      .                       has_global_allocator: tcx.has_global_allocator(LOCAL_CRATE),
      .                       has_panic_handler: tcx.has_panic_handler(LOCAL_CRATE),
      .                       has_default_lib_allocator,
      .                       proc_macro_data,
      6 ( 0.00%)              compiler_builtins: tcx.sess.contains_name(&attrs, sym::compiler_builtins),
      6 ( 0.00%)              needs_allocator: tcx.sess.contains_name(&attrs, sym::needs_allocator),
      6 ( 0.00%)              needs_panic_runtime: tcx.sess.contains_name(&attrs, sym::needs_panic_runtime),
      6 ( 0.00%)              no_builtins: tcx.sess.contains_name(&attrs, sym::no_builtins),
      5 ( 0.00%)              panic_runtime: tcx.sess.contains_name(&attrs, sym::panic_runtime),
      5 ( 0.00%)              profiler_runtime: tcx.sess.contains_name(&attrs, sym::profiler_runtime),
      2 ( 0.00%)              symbol_mangling_version: tcx.sess.opts.get_symbol_mangling_version(),
      .           
      .                       crate_deps,
      .                       dylib_dependency_formats,
      .                       lib_features,
      .                       lang_items,
      .                       diagnostic_items,
      .                       lang_items_missing,
      .                       native_libraries,
      .                       foreign_modules,
      .                       source_map,
      .                       traits,
      .                       impls,
      .                       exported_symbols,
      .                       interpret_alloc_index,
      2 ( 0.00%)              tables,
      .                       syntax_contexts,
      .                       expn_data,
      .                       expn_hashes,
      .                       def_path_hash_map,
      .                   });
      .           
      1 ( 0.00%)          let total_bytes = self.position();
      .           
      4 ( 0.00%)          if tcx.sess.meta_stats() {
      .                       let mut zero_bytes = 0;
      .                       for e in self.opaque.data.iter() {
      .                           if *e == 0 {
      .                               zero_bytes += 1;
      .                           }
      .                       }
      .           
      .                       eprintln!("metadata stats:");
-- line 756 ----------------------------------------
-- line 770 ----------------------------------------
      .                       eprintln!("            item bytes: {}", item_bytes);
      .                       eprintln!("           table bytes: {}", tables_bytes);
      .                       eprintln!("         hygiene bytes: {}", hygiene_bytes);
      .                       eprintln!("            zero bytes: {}", zero_bytes);
      .                       eprintln!("           total bytes: {}", total_bytes);
      .                   }
      .           
      .                   root
      9 ( 0.00%)      }
      .           }
      .           
      .           fn should_encode_visibility(def_kind: DefKind) -> bool {
      .               match def_kind {
      .                   DefKind::Mod
      .                   | DefKind::Struct
      .                   | DefKind::Union
      .                   | DefKind::Enum
-- line 786 ----------------------------------------
-- line 853 ----------------------------------------
      .           /// Whether we should encode MIR.
      .           ///
      .           /// Computing, optimizing and encoding the MIR is a relatively expensive operation.
      .           /// We want to avoid this work when not required. Therefore:
      .           /// - we only compute `mir_for_ctfe` on items with const-eval semantics;
      .           /// - we skip `optimized_mir` for check runs.
      .           ///
      .           /// Return a pair, resp. for CTFE and for LLVM.
    522 ( 0.00%)  fn should_encode_mir(tcx: TyCtxt<'_>, def_id: LocalDefId) -> (bool, bool) {
    290 ( 0.00%)      match tcx.def_kind(def_id) {
      .                   // Constructors
      .                   DefKind::Ctor(_, _) => {
      6 ( 0.00%)              let mir_opt_base = tcx.sess.opts.output_types.should_codegen()
      .                           || tcx.sess.opts.debugging_opts.always_encode_mir;
      .                       (true, mir_opt_base)
      .                   }
      .                   // Constants
      .                   DefKind::AnonConst
      .                   | DefKind::InlineConst
      .                   | DefKind::AssocConst
      .                   | DefKind::Static
      .                   | DefKind::Const => (true, false),
      .                   // Full-fledged functions
      .                   DefKind::AssocFn | DefKind::Fn => {
      .                       let generics = tcx.generics_of(def_id);
    258 ( 0.00%)              let needs_inline = (generics.requires_monomorphization(tcx)
     38 ( 0.00%)                  || tcx.codegen_fn_attrs(def_id).requests_inline())
    111 ( 0.00%)                  && tcx.sess.opts.output_types.should_codegen();
      .                       // The function has a `const` modifier or is annotated with `default_method_body_is_const`.
     55 ( 0.00%)              let is_const_fn = tcx.is_const_fn_raw(def_id.to_def_id())
    275 ( 0.00%)                  || tcx.has_attr(def_id.to_def_id(), sym::default_method_body_is_const);
      .                       let always_encode_mir = tcx.sess.opts.debugging_opts.always_encode_mir;
    110 ( 0.00%)              (is_const_fn, needs_inline || always_encode_mir)
      .                   }
      .                   // Closures can't be const fn.
      .                   DefKind::Closure => {
      .                       let generics = tcx.generics_of(def_id);
      .                       let needs_inline = (generics.requires_monomorphization(tcx)
      .                           || tcx.codegen_fn_attrs(def_id).requests_inline())
      .                           && tcx.sess.opts.output_types.should_codegen();
      .                       let always_encode_mir = tcx.sess.opts.debugging_opts.always_encode_mir;
      .                       (false, needs_inline || always_encode_mir)
      .                   }
      .                   // Generators require optimized MIR to compute layout.
      .                   DefKind::Generator => (false, true),
      .                   // The others don't have MIR.
      .                   _ => (false, false),
      .               }
    522 ( 0.00%)  }
      .           
      .           fn should_encode_variances(def_kind: DefKind) -> bool {
      .               match def_kind {
      .                   DefKind::Struct
      .                   | DefKind::Union
      .                   | DefKind::Enum
      .                   | DefKind::Variant
      .                   | DefKind::Fn
-- line 909 ----------------------------------------
-- line 969 ----------------------------------------
      .                   | DefKind::LifetimeParam
      .                   | DefKind::GlobalAsm
      .                   | DefKind::ExternCrate => false,
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> EncodeContext<'a, 'tcx> {
      .               fn encode_def_ids(&mut self) {
      2 ( 0.00%)          if self.is_proc_macro {
      .                       return;
      .                   }
      1 ( 0.00%)          let tcx = self.tcx;
      3 ( 0.00%)          let hir = tcx.hir();
     45 ( 0.00%)          for local_id in hir.iter_local_def_id() {
      .                       let def_id = local_id.to_def_id();
      .                       let def_kind = tcx.opt_def_kind(local_id);
  2,424 ( 0.00%)              let def_kind = if let Some(def_kind) = def_kind { def_kind } else { continue };
  5,632 ( 0.00%)              record!(self.tables.def_kind[def_id] <- match def_kind {
      .                           // Replace Ctor by the enclosing object to avoid leaking details in children crates.
      .                           DefKind::Ctor(CtorOf::Struct, _) => DefKind::Struct,
      .                           DefKind::Ctor(CtorOf::Variant, _) => DefKind::Variant,
      .                           def_kind => def_kind,
      .                       });
  1,056 ( 0.00%)              record!(self.tables.span[def_id] <- tcx.def_span(def_id));
  4,224 ( 0.00%)              record!(self.tables.attributes[def_id] <- tcx.get_attrs(def_id));
  2,816 ( 0.00%)              record!(self.tables.expn_that_defined[def_id] <- self.tcx.expn_that_defined(def_id));
      .                       if should_encode_visibility(def_kind) {
  1,200 ( 0.00%)                  record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));
      .                       }
      .                       if should_encode_stability(def_kind) {
      .                           self.encode_stability(def_id);
      .                           self.encode_const_stability(def_id);
  1,842 ( 0.00%)                  self.encode_deprecation(def_id);
      .                       }
      .                       if should_encode_variances(def_kind) {
    122 ( 0.00%)                  let v = self.tcx.variances_of(def_id);
    427 ( 0.00%)                  record!(self.tables.variances[def_id] <- v);
      .                       }
      .                       if should_encode_generics(def_kind) {
      .                           let g = tcx.generics_of(def_id);
  1,200 ( 0.00%)                  record!(self.tables.generics[def_id] <- g);
  3,600 ( 0.00%)                  record!(self.tables.explicit_predicates[def_id] <- self.tcx.explicit_predicates_of(def_id));
    300 ( 0.00%)                  let inferred_outlives = self.tcx.inferred_outlives_of(def_id);
    443 ( 0.00%)                  if !inferred_outlives.is_empty() {
      .                               record!(self.tables.inferred_outlives[def_id] <- inferred_outlives);
      .                           }
      .                       }
  2,464 ( 0.00%)              if let DefKind::Trait | DefKind::TraitAlias = def_kind {
     84 ( 0.00%)                  record!(self.tables.super_predicates[def_id] <- self.tcx.super_predicates_of(def_id));
      .                       }
      .                   }
      .                   let inherent_impls = tcx.crate_inherent_impls(());
      .                   for (def_id, implementations) in inherent_impls.inherent_impls.iter() {
      1 ( 0.00%)              if implementations.is_empty() {
      .                           continue;
      .                       }
      9 ( 0.00%)              record!(self.tables.inherent_impls[def_id.to_def_id()] <- implementations.iter().map(|&def_id| {
      1 ( 0.00%)                  assert!(def_id.is_local());
      .                           def_id.index
      .                       }));
      .                   }
      .               }
      .           
  1,071 ( 0.00%)      fn encode_item_type(&mut self, def_id: DefId) {
      .                   debug!("EncodeContext::encode_item_type({:?})", def_id);
    918 ( 0.00%)          record!(self.tables.ty[def_id] <- self.tcx.type_of(def_id));
  1,224 ( 0.00%)      }
      .           
      .               fn encode_enum_variant_info(&mut self, def: &ty::AdtDef, index: VariantIdx) {
      .                   let tcx = self.tcx;
      .                   let variant = &def.variants[index];
      .                   let def_id = variant.def_id;
      .                   debug!("EncodeContext::encode_enum_variant_info({:?})", def_id);
      .           
      .                   let data = VariantData {
-- line 1043 ----------------------------------------
-- line 1078 ----------------------------------------
      .           
      .                   record!(self.tables.kind[def_id] <- EntryKind::Variant(self.lazy(data)));
      .                   self.encode_item_type(def_id);
      .                   if variant.ctor_kind == CtorKind::Fn {
      .                       record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));
      .                   }
      .               }
      .           
     30 ( 0.00%)      fn encode_info_for_mod(&mut self, local_def_id: LocalDefId, md: &hir::Mod<'_>) {
      6 ( 0.00%)          let tcx = self.tcx;
      .                   let def_id = local_def_id.to_def_id();
      .                   debug!("EncodeContext::encode_info_for_mod({:?})", def_id);
      .           
      .                   // If we are encoding a proc-macro crates, `encode_info_for_mod` will
      .                   // only ever get called for the crate root. We still want to encode
      .                   // the crate root for consistency with other crates (some of the resolver
      .                   // code uses it). However, we skip encoding anything relating to child
      .                   // items - we encode information about proc-macros later on.
      9 ( 0.00%)          let reexports = if !self.is_proc_macro {
      6 ( 0.00%)              match tcx.module_reexports(local_def_id) {
      .                           Some(exports) => self.lazy(exports),
      .                           _ => Lazy::empty(),
      .                       }
      .                   } else {
      .                       Lazy::empty()
      .                   };
      .           
     12 ( 0.00%)          record!(self.tables.kind[def_id] <- EntryKind::Mod(reexports));
      6 ( 0.00%)          if self.is_proc_macro {
      .                       // Encode this here because we don't do it in encode_def_ids.
      .                       record!(self.tables.expn_that_defined[def_id] <- tcx.expn_that_defined(local_def_id));
      .                   } else {
      .                       let direct_children = md.item_ids.iter().map(|item_id| item_id.def_id.local_def_index);
      .                       // Foreign items are planted into their parent modules from name resolution point of view.
      6 ( 0.00%)              let tcx = self.tcx;
      .                       let foreign_item_children = md
      .                           .item_ids
      .                           .iter()
    710 ( 0.00%)                  .filter_map(|item_id| match tcx.hir().item(*item_id).kind {
      .                               hir::ItemKind::ForeignMod { items, .. } => {
      .                                   Some(items.iter().map(|fi_ref| fi_ref.id.def_id.local_def_index))
      .                               }
      .                               _ => None,
      .                           })
      .                           .flatten();
      .           
     21 ( 0.00%)              record!(self.tables.children[def_id] <- direct_children.chain(foreign_item_children));
      .                   }
     24 ( 0.00%)      }
      .           
      .               fn encode_field(
      .                   &mut self,
      .                   adt_def: &ty::AdtDef,
      .                   variant_index: VariantIdx,
      .                   field_index: usize,
      .               ) {
      .                   let variant = &adt_def.variants[variant_index];
      .                   let field = &variant.fields[field_index];
      .           
      .                   let def_id = field.did;
      .                   debug!("EncodeContext::encode_field({:?})", def_id);
      .           
      .                   record!(self.tables.kind[def_id] <- EntryKind::Field);
      2 ( 0.00%)          self.encode_ident_span(def_id, field.ident(self.tcx));
      3 ( 0.00%)          self.encode_item_type(def_id);
      .               }
      .           
      .               fn encode_struct_ctor(&mut self, adt_def: &ty::AdtDef, def_id: DefId) {
      .                   debug!("EncodeContext::encode_struct_ctor({:?})", def_id);
      1 ( 0.00%)          let tcx = self.tcx;
      3 ( 0.00%)          let variant = adt_def.non_enum_variant();
      .           
      .                   let data = VariantData {
      1 ( 0.00%)              ctor_kind: variant.ctor_kind,
      .                       discr: variant.discr,
      .                       ctor: Some(def_id.index),
      1 ( 0.00%)              is_non_exhaustive: variant.is_field_list_non_exhaustive(),
      .                   };
      .           
      7 ( 0.00%)          record!(self.tables.kind[def_id] <- EntryKind::Struct(self.lazy(data), adt_def.repr));
      5 ( 0.00%)          self.encode_item_type(def_id);
      1 ( 0.00%)          if variant.ctor_kind == CtorKind::Fn {
      1 ( 0.00%)              record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));
      .                   }
      .               }
      .           
      .               fn encode_explicit_item_bounds(&mut self, def_id: DefId) {
      .                   debug!("EncodeContext::encode_explicit_item_bounds({:?})", def_id);
      .                   let bounds = self.tcx.explicit_item_bounds(def_id);
      .                   if !bounds.is_empty() {
      .                       record!(self.tables.explicit_item_bounds[def_id] <- bounds);
      .                   }
      .               }
      .           
      .               fn encode_info_for_trait_item(&mut self, def_id: DefId) {
      .                   debug!("EncodeContext::encode_info_for_trait_item({:?})", def_id);
      4 ( 0.00%)          let tcx = self.tcx;
      .           
     28 ( 0.00%)          let ast_item = tcx.hir().expect_trait_item(def_id.expect_local());
      .                   let trait_item = tcx.associated_item(def_id);
      .           
     20 ( 0.00%)          let container = match trait_item.defaultness {
      .                       hir::Defaultness::Default { has_value: true } => AssocContainer::TraitWithDefault,
      .                       hir::Defaultness::Default { has_value: false } => AssocContainer::TraitRequired,
      .                       hir::Defaultness::Final => span_bug!(ast_item.span, "traits cannot have final items"),
      .                   };
      .           
     24 ( 0.00%)          match trait_item.kind {
      .                       ty::AssocKind::Const => {
      .                           let rendered = rustc_hir_pretty::to_string(
      .                               &(&self.tcx.hir() as &dyn intravisit::Map<'_>),
      .                               |s| s.print_trait_item(ast_item),
      .                           );
      .                           let rendered_const = self.lazy(RenderedConst(rendered));
      .           
      .                           record!(self.tables.kind[def_id] <- EntryKind::AssocConst(
      .                               container,
      .                               Default::default(),
      .                               rendered_const,
      .                           ));
      .                       }
      .                       ty::AssocKind::Fn => {
      8 ( 0.00%)                  let fn_data = if let hir::TraitItemKind::Fn(m_sig, m) = &ast_item.kind {
      8 ( 0.00%)                      let param_names = match *m {
      .                                   hir::TraitFn::Required(ref names) => self.encode_fn_param_names(names),
      .                                   hir::TraitFn::Provided(body) => self.encode_fn_param_names_for_body(body),
      .                               };
      .                               FnData {
      .                                   asyncness: m_sig.header.asyncness,
      .                                   constness: hir::Constness::NotConst,
      .                                   param_names,
      .                               }
-- line 1209 ----------------------------------------
-- line 1217 ----------------------------------------
      .                           })));
      .                       }
      .                       ty::AssocKind::Type => {
      .                           self.encode_explicit_item_bounds(def_id);
      .                           record!(self.tables.kind[def_id] <- EntryKind::AssocType(container));
      .                       }
      .                   }
      .                   self.encode_ident_span(def_id, ast_item.ident);
     12 ( 0.00%)          match trait_item.kind {
      .                       ty::AssocKind::Const | ty::AssocKind::Fn => {
      .                           self.encode_item_type(def_id);
      .                       }
      .                       ty::AssocKind::Type => {
      .                           if trait_item.defaultness.has_value() {
      .                               self.encode_item_type(def_id);
      .                           }
      .                       }
      .                   }
      4 ( 0.00%)          if trait_item.kind == ty::AssocKind::Fn {
      .                       record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));
      .                   }
      .               }
      .           
      .               fn encode_info_for_impl_item(&mut self, def_id: DefId) {
      .                   debug!("EncodeContext::encode_info_for_impl_item({:?})", def_id);
    106 ( 0.00%)          let tcx = self.tcx;
      .           
    318 ( 0.00%)          let ast_item = self.tcx.hir().expect_impl_item(def_id.expect_local());
     53 ( 0.00%)          let impl_item = self.tcx.associated_item(def_id);
      .           
    212 ( 0.00%)          let container = match impl_item.defaultness {
      .                       hir::Defaultness::Default { has_value: true } => AssocContainer::ImplDefault,
      .                       hir::Defaultness::Final => AssocContainer::ImplFinal,
      .                       hir::Defaultness::Default { has_value: false } => {
      .                           span_bug!(ast_item.span, "impl items always have values (currently)")
      .                       }
      .                   };
      .           
    318 ( 0.00%)          match impl_item.kind {
      .                       ty::AssocKind::Const => {
      .                           if let hir::ImplItemKind::Const(_, body_id) = ast_item.kind {
      .                               let qualifs = self.tcx.at(ast_item.span).mir_const_qualif(def_id);
      .           
      .                               record!(self.tables.kind[def_id] <- EntryKind::AssocConst(
      .                                   container,
      .                                   qualifs,
      .                                   self.encode_rendered_const_for_body(body_id))
      .                               );
      .                           } else {
      .                               bug!()
      .                           }
      .                       }
      .                       ty::AssocKind::Fn => {
    104 ( 0.00%)                  let fn_data = if let hir::ImplItemKind::Fn(ref sig, body) = ast_item.kind {
      .                               FnData {
      .                                   asyncness: sig.header.asyncness,
      .                                   // Can be inside `impl const Trait`, so using sig.header.constness is not reliable
     52 ( 0.00%)                          constness: if self.tcx.is_const_fn_raw(def_id) {
      .                                       hir::Constness::Const
      .                                   } else {
      .                                       hir::Constness::NotConst
      .                                   },
      .                                   param_names: self.encode_fn_param_names_for_body(body),
      .                               }
      .                           } else {
      .                               bug!()
-- line 1282 ----------------------------------------
-- line 1286 ----------------------------------------
      .                               container,
      .                               has_self: impl_item.fn_has_self_parameter,
      .                           })));
      .                       }
      .                       ty::AssocKind::Type => {
      .                           record!(self.tables.kind[def_id] <- EntryKind::AssocType(container));
      .                       }
      .                   }
    159 ( 0.00%)          self.encode_ident_span(def_id, impl_item.ident(self.tcx));
    265 ( 0.00%)          self.encode_item_type(def_id);
    212 ( 0.00%)          if let Some(trait_item_def_id) = impl_item.trait_item_def_id {
      .                       record!(self.tables.trait_item_def_id[def_id] <- trait_item_def_id);
      .                   }
     53 ( 0.00%)          if impl_item.kind == ty::AssocKind::Fn {
      .                       record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));
      .                   }
      .               }
      .           
     24 ( 0.00%)      fn encode_fn_param_names_for_body(&mut self, body_id: hir::BodyId) -> Lazy<[Ident]> {
    379 ( 0.00%)          self.lazy(self.tcx.hir().body_param_names(body_id))
     24 ( 0.00%)      }
      .           
      .               fn encode_fn_param_names(&mut self, param_names: &[Ident]) -> Lazy<[Ident]> {
      .                   self.lazy(param_names.iter())
      .               }
      .           
      .               fn encode_mir(&mut self) {
      3 ( 0.00%)          if self.is_proc_macro {
      .                       return;
      .                   }
      .           
      .                   let keys_and_jobs = self
      .                       .tcx
      .                       .mir_keys(())
      .                       .iter()
      .                       .filter_map(|&def_id| {
    290 ( 0.00%)                  let (encode_const, encode_opt) = should_encode_mir(self.tcx, def_id);
    294 ( 0.00%)                  if encode_const || encode_opt {
     80 ( 0.00%)                      Some((def_id, encode_const, encode_opt))
      .                           } else {
      .                               None
      .                           }
    116 ( 0.00%)              })
      .                       .collect::<Vec<_>>();
    205 ( 0.00%)          for (def_id, encode_const, encode_opt) in keys_and_jobs.into_iter() {
      .                       debug_assert!(encode_const || encode_opt);
      .           
      .                       debug!("EntryBuilder::encode_mir({:?})", def_id);
     40 ( 0.00%)              if encode_opt {
    152 ( 0.00%)                  record!(self.tables.mir[def_id.to_def_id()] <- self.tcx.optimized_mir(def_id));
      .                       }
     40 ( 0.00%)              if encode_const {
     12 ( 0.00%)                  record!(self.tables.mir_for_ctfe[def_id.to_def_id()] <- self.tcx.mir_for_ctfe(def_id));
      .           
      .                           // FIXME(generic_const_exprs): this feels wrong to have in `encode_mir`
      3 ( 0.00%)                  let abstract_const = self.tcx.thir_abstract_const(def_id);
     12 ( 0.00%)                  if let Ok(Some(abstract_const)) = abstract_const {
      .                               record!(self.tables.thir_abstract_consts[def_id.to_def_id()] <- abstract_const);
      .                           }
      .                       }
    160 ( 0.00%)              record!(self.tables.promoted_mir[def_id.to_def_id()] <- self.tcx.promoted_mir(def_id));
      .           
      .                       let instance =
      .                           ty::InstanceDef::Item(ty::WithOptConstParam::unknown(def_id.to_def_id()));
     40 ( 0.00%)              let unused = self.tcx.unused_generic_params(instance);
     40 ( 0.00%)              if !unused.is_empty() {
      .                           record!(self.tables.unused_generic_params[def_id.to_def_id()] <- unused);
      .                       }
      .                   }
      .               }
      .           
      .               fn encode_stability(&mut self, def_id: DefId) {
      .                   debug!("EncodeContext::encode_stability({:?})", def_id);
      .           
      .                   // The query lookup can take a measurable amount of time in crates with many items. Check if
      .                   // the stability attributes are even enabled before using their queries.
  2,456 ( 0.00%)          if self.feat.staged_api || self.tcx.sess.opts.debugging_opts.force_unstable_if_unmarked {
      .                       if let Some(stab) = self.tcx.lookup_stability(def_id) {
      .                           record!(self.tables.stability[def_id] <- stab)
      .                       }
      .                   }
      .               }
      .           
      .               fn encode_const_stability(&mut self, def_id: DefId) {
      .                   debug!("EncodeContext::encode_const_stability({:?})", def_id);
      .           
      .                   // The query lookup can take a measurable amount of time in crates with many items. Check if
      .                   // the stability attributes are even enabled before using their queries.
  2,149 ( 0.00%)          if self.feat.staged_api || self.tcx.sess.opts.debugging_opts.force_unstable_if_unmarked {
      .                       if let Some(stab) = self.tcx.lookup_const_stability(def_id) {
      .                           record!(self.tables.const_stability[def_id] <- stab)
      .                       }
      .                   }
      .               }
      .           
  1,842 ( 0.00%)      fn encode_deprecation(&mut self, def_id: DefId) {
      .                   debug!("EncodeContext::encode_deprecation({:?})", def_id);
  1,535 ( 0.00%)          if let Some(depr) = self.tcx.lookup_deprecation(def_id) {
      .                       record!(self.tables.deprecation[def_id] <- depr);
      .                   }
  1,535 ( 0.00%)      }
      .           
     12 ( 0.00%)      fn encode_rendered_const_for_body(&mut self, body_id: hir::BodyId) -> Lazy<RenderedConst> {
      6 ( 0.00%)          let hir = self.tcx.hir();
      4 ( 0.00%)          let body = hir.body(body_id);
     16 ( 0.00%)          let rendered = rustc_hir_pretty::to_string(&(&hir as &dyn intravisit::Map<'_>), |s| {
      6 ( 0.00%)              s.print_expr(&body.value)
      .                   });
      4 ( 0.00%)          let rendered_const = &RenderedConst(rendered);
      .                   self.lazy(rendered_const)
     14 ( 0.00%)      }
      .           
    918 ( 0.00%)      fn encode_info_for_item(&mut self, def_id: DefId, item: &'tcx hir::Item<'tcx>) {
      .                   let tcx = self.tcx;
      .           
      .                   debug!("EncodeContext::encode_info_for_item({:?})", def_id);
      .           
      .                   self.encode_ident_span(def_id, item.ident);
      .           
    612 ( 0.00%)          let entry_kind = match item.kind {
      .                       hir::ItemKind::Static(_, hir::Mutability::Mut, _) => EntryKind::MutStatic,
      .                       hir::ItemKind::Static(_, hir::Mutability::Not, _) => EntryKind::ImmStatic,
      .                       hir::ItemKind::Const(_, body_id) => {
      .                           let qualifs = self.tcx.at(item.span).mir_const_qualif(def_id);
      .                           EntryKind::Const(qualifs, self.encode_rendered_const_for_body(body_id))
      .                       }
      6 ( 0.00%)              hir::ItemKind::Fn(ref sig, .., body) => {
      .                           let data = FnData {
      3 ( 0.00%)                      asyncness: sig.header.asyncness,
      3 ( 0.00%)                      constness: sig.header.constness,
      6 ( 0.00%)                      param_names: self.encode_fn_param_names_for_body(body),
      .                           };
      .           
      .                           EntryKind::Fn(self.lazy(data))
      .                       }
      4 ( 0.00%)              hir::ItemKind::Macro(ref macro_def) => {
      .                           EntryKind::MacroDef(self.lazy(macro_def.clone()))
      .                       }
      .                       hir::ItemKind::Mod(ref m) => {
     24 ( 0.00%)                  return self.encode_info_for_mod(item.def_id, m);
      .                       }
      .                       hir::ItemKind::ForeignMod { .. } => EntryKind::ForeignMod,
      .                       hir::ItemKind::GlobalAsm(..) => EntryKind::GlobalAsm,
      .                       hir::ItemKind::TyAlias(..) => EntryKind::Type,
      .                       hir::ItemKind::OpaqueTy(..) => {
      .                           self.encode_explicit_item_bounds(def_id);
      .                           EntryKind::OpaqueTy
      .                       }
      .                       hir::ItemKind::Enum(..) => EntryKind::Enum(self.tcx.adt_def(def_id).repr),
      .                       hir::ItemKind::Struct(ref struct_def, _) => {
      2 ( 0.00%)                  let adt_def = self.tcx.adt_def(def_id);
      3 ( 0.00%)                  let variant = adt_def.non_enum_variant();
      .           
      .                           // Encode def_ids for each field and method
      .                           // for methods, write all the stuff get_trait_method
      .                           // needs to know
      4 ( 0.00%)                  let ctor = struct_def
      .                               .ctor_hir_id()
      4 ( 0.00%)                      .map(|ctor_hir_id| self.tcx.hir().local_def_id(ctor_hir_id).local_def_index);
      .           
      .                           EntryKind::Struct(
      .                               self.lazy(VariantData {
      1 ( 0.00%)                          ctor_kind: variant.ctor_kind,
      4 ( 0.00%)                          discr: variant.discr,
      .                                   ctor,
      .                                   is_non_exhaustive: variant.is_field_list_non_exhaustive(),
      .                               }),
      3 ( 0.00%)                      adt_def.repr,
      .                           )
      .                       }
      .                       hir::ItemKind::Union(..) => {
      .                           let adt_def = self.tcx.adt_def(def_id);
      .                           let variant = adt_def.non_enum_variant();
      .           
      .                           EntryKind::Union(
      .                               self.lazy(VariantData {
-- line 1461 ----------------------------------------
-- line 1462 ----------------------------------------
      .                                   ctor_kind: variant.ctor_kind,
      .                                   discr: variant.discr,
      .                                   ctor: None,
      .                                   is_non_exhaustive: variant.is_field_list_non_exhaustive(),
      .                               }),
      .                               adt_def.repr,
      .                           )
      .                       }
    344 ( 0.00%)              hir::ItemKind::Impl(hir::Impl { defaultness, constness, .. }) => {
    342 ( 0.00%)                  let trait_ref = self.tcx.impl_trait_ref(def_id);
    172 ( 0.00%)                  let polarity = self.tcx.impl_polarity(def_id);
    172 ( 0.00%)                  let parent = if let Some(trait_ref) = trait_ref {
     85 ( 0.00%)                      let trait_def = self.tcx.trait_def(trait_ref.def_id);
    510 ( 0.00%)                      trait_def.ancestors(self.tcx, def_id).ok().and_then(|mut an| {
    510 ( 0.00%)                          an.nth(1).and_then(|node| match node {
      .                                       specialization_graph::Node::Impl(parent) => Some(parent),
      .                                       _ => None,
      .                                   })
      .                               })
      .                           } else {
      .                               None
      .                           };
      .           
      .                           // if this is an impl of `CoerceUnsized`, create its
      .                           // "unsized info", else just store None
      .                           let coerce_unsized_info = trait_ref.and_then(|t| {
    510 ( 0.00%)                      if Some(t.def_id) == self.tcx.lang_items().coerce_unsized_trait() {
      .                                   Some(self.tcx.at(item.span).coerce_unsized_info(def_id))
      .                               } else {
      .                                   None
      .                               }
      .                           });
      .           
      .                           let data = ImplData {
      .                               polarity,
-- line 1496 ----------------------------------------
-- line 1498 ----------------------------------------
      .                               constness,
      .                               parent_impl: parent,
      .                               coerce_unsized_info,
      .                           };
      .           
      .                           EntryKind::Impl(self.lazy(data))
      .                       }
      .                       hir::ItemKind::Trait(..) => {
     12 ( 0.00%)                  let trait_def = self.tcx.trait_def(def_id);
      .                           let data = TraitData {
      6 ( 0.00%)                      unsafety: trait_def.unsafety,
     12 ( 0.00%)                      paren_sugar: trait_def.paren_sugar,
     30 ( 0.00%)                      has_auto_impl: self.tcx.trait_is_auto(def_id),
      6 ( 0.00%)                      is_marker: trait_def.is_marker,
      6 ( 0.00%)                      skip_array_during_method_dispatch: trait_def.skip_array_during_method_dispatch,
      6 ( 0.00%)                      specialization_kind: trait_def.specialization_kind,
      .                               must_implement_one_of: trait_def.must_implement_one_of.clone(),
      .                           };
      .           
      .                           EntryKind::Trait(self.lazy(data))
      .                       }
      .                       hir::ItemKind::TraitAlias(..) => EntryKind::TraitAlias,
      .                       hir::ItemKind::ExternCrate(_) | hir::ItemKind::Use(..) => {
      .                           bug!("cannot encode info for item {:?}", item)
      .                       }
      .                   };
      .                   record!(self.tables.kind[def_id] <- entry_kind);
      .                   // FIXME(eddyb) there should be a nicer way to do this.
    500 ( 0.00%)          match item.kind {
      .                       hir::ItemKind::Enum(..) => record!(self.tables.children[def_id] <-
      .                           self.tcx.adt_def(def_id).variants.iter().map(|v| {
      .                               assert!(v.def_id.is_local());
      .                               v.def_id.index
      .                           })
      .                       ),
      .                       hir::ItemKind::Struct(..) | hir::ItemKind::Union(..) => {
      .                           record!(self.tables.children[def_id] <-
      3 ( 0.00%)                      self.tcx.adt_def(def_id).non_enum_variant().fields.iter().map(|f| {
      1 ( 0.00%)                          assert!(f.did.is_local());
      .                                   f.did.index
      .                               })
      .                           )
      .                       }
      .                       hir::ItemKind::Impl { .. } | hir::ItemKind::Trait(..) => {
    184 ( 0.00%)                  let associated_item_def_ids = self.tcx.associated_item_def_ids(def_id);
      .                           record!(self.tables.children[def_id] <-
      .                               associated_item_def_ids.iter().map(|&def_id| {
     57 ( 0.00%)                          assert!(def_id.is_local());
      .                                   def_id.index
      .                               })
      .                           );
      .                       }
      .                       _ => {}
      .                   }
    293 ( 0.00%)          match item.kind {
      .                       hir::ItemKind::Static(..)
      .                       | hir::ItemKind::Const(..)
      .                       | hir::ItemKind::Fn(..)
      .                       | hir::ItemKind::TyAlias(..)
      .                       | hir::ItemKind::OpaqueTy(..)
      .                       | hir::ItemKind::Enum(..)
      .                       | hir::ItemKind::Struct(..)
      .                       | hir::ItemKind::Union(..)
    360 ( 0.00%)              | hir::ItemKind::Impl { .. } => self.encode_item_type(def_id),
      .                       _ => {}
      .                   }
    290 ( 0.00%)          if let hir::ItemKind::Fn(..) = item.kind {
     12 ( 0.00%)              record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));
      .                   }
    203 ( 0.00%)          if let hir::ItemKind::Impl { .. } = item.kind {
    430 ( 0.00%)              if let Some(trait_ref) = self.tcx.impl_trait_ref(def_id) {
    425 ( 0.00%)                  record!(self.tables.impl_trait_ref[def_id] <- trait_ref);
      .                       }
      .                   }
    800 ( 0.00%)      }
      .           
      .               fn encode_info_for_generic_param(&mut self, def_id: DefId, kind: EntryKind, encode_type: bool) {
    435 ( 0.00%)          record!(self.tables.kind[def_id] <- kind);
    143 ( 0.00%)          if encode_type {
      8 ( 0.00%)              self.encode_item_type(def_id);
      .                   }
      .               }
      .           
      .               fn encode_info_for_closure(&mut self, hir_id: hir::HirId) {
      .                   let def_id = self.tcx.hir().local_def_id(hir_id);
      .                   debug!("EncodeContext::encode_info_for_closure({:?})", def_id);
      .           
      .                   // NOTE(eddyb) `tcx.type_of(def_id)` isn't used because it's fully generic,
-- line 1585 ----------------------------------------
-- line 1600 ----------------------------------------
      .                   }
      .                   self.encode_item_type(def_id.to_def_id());
      .                   if let ty::Closure(def_id, substs) = *ty.kind() {
      .                       record!(self.tables.fn_sig[def_id] <- substs.as_closure().sig());
      .                   }
      .               }
      .           
      .               fn encode_info_for_anon_const(&mut self, id: hir::HirId) {
     14 ( 0.00%)          let def_id = self.tcx.hir().local_def_id(id);
      .                   debug!("EncodeContext::encode_info_for_anon_const({:?})", def_id);
     10 ( 0.00%)          let body_id = self.tcx.hir().body_owned_by(id);
      8 ( 0.00%)          let const_data = self.encode_rendered_const_for_body(body_id);
      2 ( 0.00%)          let qualifs = self.tcx.mir_const_qualif(def_id);
      .           
      8 ( 0.00%)          record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::AnonConst(qualifs, const_data));
      8 ( 0.00%)          self.encode_item_type(def_id.to_def_id());
      .               }
      .           
      .               fn encode_native_libraries(&mut self) -> Lazy<[NativeLib]> {
      2 ( 0.00%)          empty_proc_macro!(self);
      2 ( 0.00%)          let used_libraries = self.tcx.native_libraries(LOCAL_CRATE);
      .                   self.lazy(used_libraries.iter())
      .               }
      .           
      .               fn encode_foreign_modules(&mut self) -> Lazy<[ForeignModule]> {
      5 ( 0.00%)          empty_proc_macro!(self);
      2 ( 0.00%)          let foreign_modules = self.tcx.foreign_modules(LOCAL_CRATE);
      .                   self.lazy(foreign_modules.iter().map(|(_, m)| m).cloned())
      .               }
      .           
      .               fn encode_hygiene(&mut self) -> (SyntaxContextTable, ExpnDataTable, ExpnHashTable) {
      .                   let mut syntax_contexts: TableBuilder<_, _> = Default::default();
      .                   let mut expn_data_table: TableBuilder<_, _> = Default::default();
      .                   let mut expn_hash_table: TableBuilder<_, _> = Default::default();
      .           
      2 ( 0.00%)          let _: Result<(), !> = self.hygiene_ctxt.encode(
      8 ( 0.00%)              &mut (&mut *self, &mut syntax_contexts, &mut expn_data_table, &mut expn_hash_table),
      .                       |(this, syntax_contexts, _, _), index, ctxt_data| {
      .                           syntax_contexts.set(index, this.lazy(ctxt_data));
      .                           Ok(())
      .                       },
      .                       |(this, _, expn_data_table, expn_hash_table), index, expn_data, hash| {
      .                           if let Some(index) = index.as_local() {
     64 ( 0.00%)                      expn_data_table.set(index.as_raw(), this.lazy(expn_data));
     64 ( 0.00%)                      expn_hash_table.set(index.as_raw(), this.lazy(hash));
      .                           }
      .                           Ok(())
      .                       },
      .                   );
      .           
      .                   (
      .                       syntax_contexts.encode(&mut self.opaque),
      .                       expn_data_table.encode(&mut self.opaque),
      .                       expn_hash_table.encode(&mut self.opaque),
      .                   )
      .               }
      .           
      .               fn encode_proc_macros(&mut self) -> Option<ProcMacroData> {
      6 ( 0.00%)          let is_proc_macro = self.tcx.sess.crate_types().contains(&CrateType::ProcMacro);
      .                   if is_proc_macro {
      .                       let tcx = self.tcx;
      .                       let hir = tcx.hir();
      .           
      .                       let proc_macro_decls_static = tcx.proc_macro_decls_static(()).unwrap().local_def_index;
      .                       let stability = tcx.lookup_stability(DefId::local(CRATE_DEF_INDEX)).copied();
      .                       let macros =
      .                           self.lazy(tcx.resolutions(()).proc_macros.iter().map(|p| p.local_def_index));
-- line 1666 ----------------------------------------
-- line 1725 ----------------------------------------
      .           
      .                       Some(ProcMacroData { proc_macro_decls_static, stability, macros })
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
      .               fn encode_crate_deps(&mut self) -> Lazy<[CrateDep]> {
      7 ( 0.00%)          empty_proc_macro!(self);
      .           
      1 ( 0.00%)          let deps = self
      .                       .tcx
      .                       .crates(())
      .                       .iter()
      .                       .map(|&cnum| {
      .                           let dep = CrateDep {
      4 ( 0.00%)                      name: self.tcx.crate_name(cnum),
      4 ( 0.00%)                      hash: self.tcx.crate_hash(cnum),
      4 ( 0.00%)                      host_hash: self.tcx.crate_host_hash(cnum),
      4 ( 0.00%)                      kind: self.tcx.dep_kind(cnum),
      4 ( 0.00%)                      extra_filename: self.tcx.extra_filename(cnum),
      .                           };
     20 ( 0.00%)                  (cnum, dep)
      .                       })
      .                       .collect::<Vec<_>>();
      .           
      .                   {
      .                       // Sanity-check the crate numbers
      .                       let mut expected_cnum = 1;
      8 ( 0.00%)              for &(n, _) in &deps {
     10 ( 0.00%)                  assert_eq!(n, CrateNum::new(expected_cnum));
      .                           expected_cnum += 1;
      .                       }
      .                   }
      .           
      .                   // We're just going to write a list of crate 'name-hash-version's, with
      .                   // the assumption that they are numbered 1 to n.
      .                   // FIXME (#2166): This is not nearly enough to support correct versioning
      .                   // but is enough to get transitive crate dependencies working.
      .                   self.lazy(deps.iter().map(|&(_, ref dep)| dep))
      .               }
      .           
      .               fn encode_lib_features(&mut self) -> Lazy<[(Symbol, Option<Symbol>)]> {
      2 ( 0.00%)          empty_proc_macro!(self);
      1 ( 0.00%)          let tcx = self.tcx;
      .                   let lib_features = tcx.lib_features(());
      2 ( 0.00%)          self.lazy(lib_features.to_vec())
      .               }
      .           
      .               fn encode_diagnostic_items(&mut self) -> Lazy<[(Symbol, DefIndex)]> {
      3 ( 0.00%)          empty_proc_macro!(self);
      1 ( 0.00%)          let tcx = self.tcx;
      .                   let diagnostic_items = &tcx.diagnostic_items(LOCAL_CRATE).name_to_id;
      .                   self.lazy(diagnostic_items.iter().map(|(&name, def_id)| (name, def_id.index)))
      .               }
      .           
      .               fn encode_lang_items(&mut self) -> Lazy<[(DefIndex, usize)]> {
      4 ( 0.00%)          empty_proc_macro!(self);
      1 ( 0.00%)          let tcx = self.tcx;
      1 ( 0.00%)          let lang_items = tcx.lang_items();
      2 ( 0.00%)          let lang_items = lang_items.items().iter();
      .                   self.lazy(lang_items.enumerate().filter_map(|(i, &opt_def_id)| {
    568 ( 0.00%)              if let Some(def_id) = opt_def_id {
      .                           if def_id.is_local() {
      .                               return Some((def_id.index, i));
      .                           }
      .                       }
      .                       None
      .                   }))
      .               }
      .           
      .               fn encode_lang_items_missing(&mut self) -> Lazy<[lang_items::LangItem]> {
      2 ( 0.00%)          empty_proc_macro!(self);
      1 ( 0.00%)          let tcx = self.tcx;
      1 ( 0.00%)          self.lazy(&tcx.lang_items().missing)
      .               }
      .           
      .               fn encode_traits(&mut self) -> Lazy<[DefIndex]> {
      3 ( 0.00%)          empty_proc_macro!(self);
      1 ( 0.00%)          self.lazy(self.tcx.traits_in_crate(LOCAL_CRATE).iter().map(|def_id| def_id.index))
      .               }
      .           
      .               /// Encodes an index, mapping each trait to its (local) implementations.
      .               fn encode_impls(&mut self) -> Lazy<[TraitImpls]> {
      .                   debug!("EncodeContext::encode_traits_and_impls()");
      2 ( 0.00%)          empty_proc_macro!(self);
      2 ( 0.00%)          let tcx = self.tcx;
      5 ( 0.00%)          let mut visitor = ImplsVisitor { tcx, impls: FxHashMap::default() };
      4 ( 0.00%)          tcx.hir().visit_all_item_likes(&mut visitor);
      .           
      .                   let mut all_impls: Vec<_> = visitor.impls.into_iter().collect();
      .           
      .                   // Bring everything into deterministic order for hashing
     16 ( 0.00%)          all_impls.sort_by_cached_key(|&(trait_def_id, _)| tcx.def_path_hash(trait_def_id));
      .           
      .                   let all_impls: Vec<_> = all_impls
      .                       .into_iter()
    240 ( 0.00%)              .map(|(trait_def_id, mut impls)| {
      .                           // Bring everything into deterministic order for hashing
      3 ( 0.00%)                  impls.sort_by_cached_key(|&(index, _)| {
     72 ( 0.00%)                      tcx.hir().def_path_hash(LocalDefId { local_def_index: index })
      .                           });
      .           
     64 ( 0.00%)                  TraitImpls {
      .                               trait_id: (trait_def_id.krate.as_u32(), trait_def_id.index),
     48 ( 0.00%)                      impls: self.lazy(&impls),
      .                           }
    128 ( 0.00%)              })
      .                       .collect();
      .           
      .                   self.lazy(&all_impls)
      .               }
      .           
      .               // Encodes all symbols exported from this crate into the metadata.
      .               //
      .               // This pass is seeded off the reachability list calculated in the
      .               // middle::reachable module but filters out items that either don't have a
      .               // symbol associated with them (they weren't translated) or if they're an FFI
      .               // definition (as that's not defined in this crate).
      .               fn encode_exported_symbols(
      .                   &mut self,
      .                   exported_symbols: &[(ExportedSymbol<'tcx>, SymbolExportLevel)],
      .               ) -> Lazy<[(ExportedSymbol<'tcx>, SymbolExportLevel)]> {
      2 ( 0.00%)          empty_proc_macro!(self);
      .                   // The metadata symbol name is special. It should not show up in
      .                   // downstream crates.
      9 ( 0.00%)          let metadata_symbol_name = SymbolName::new(self.tcx, &metadata_symbol_name(self.tcx));
      .           
      .                   self.lazy(
      .                       exported_symbols
      .                           .iter()
    178 ( 0.00%)                  .filter(|&&(ref exported_symbol, _)| match *exported_symbol {
      .                               ExportedSymbol::NoDefId(symbol_name) => symbol_name != metadata_symbol_name,
      .                               _ => true,
      .                           })
      .                           .cloned(),
      .                   )
      .               }
      .           
      .               fn encode_dylib_dependency_formats(&mut self) -> Lazy<[Option<LinkagePreference>]> {
      2 ( 0.00%)          empty_proc_macro!(self);
      2 ( 0.00%)          let formats = self.tcx.dependency_formats(());
      4 ( 0.00%)          for (ty, arr) in formats.iter() {
      2 ( 0.00%)              if *ty != CrateType::Dylib {
      .                           continue;
      .                       }
      .                       return self.lazy(arr.iter().map(|slot| match *slot {
      .                           Linkage::NotLinked | Linkage::IncludedFromDylib => None,
      .           
      .                           Linkage::Dynamic => Some(LinkagePreference::RequireDynamic),
      .                           Linkage::Static => Some(LinkagePreference::RequireStatic),
      .                       }));
-- line 1876 ----------------------------------------
-- line 1914 ----------------------------------------
      .               }
      .           }
      .           
      .           // FIXME(eddyb) make metadata encoding walk over all definitions, instead of HIR.
      .           impl<'a, 'tcx> Visitor<'tcx> for EncodeContext<'a, 'tcx> {
      .               type NestedFilter = nested_filter::OnlyBodies;
      .           
      .               fn nested_visit_map(&mut self) -> Self::Map {
     57 ( 0.00%)          self.tcx.hir()
      .               }
  4,887 ( 0.00%)      fn visit_expr(&mut self, ex: &'tcx hir::Expr<'tcx>) {
    543 ( 0.00%)          intravisit::walk_expr(self, ex);
      .                   self.encode_info_for_expr(ex);
  4,344 ( 0.00%)      }
     18 ( 0.00%)      fn visit_anon_const(&mut self, c: &'tcx AnonConst) {
      .                   intravisit::walk_anon_const(self, c);
      4 ( 0.00%)          self.encode_info_for_anon_const(c.hir_id);
     16 ( 0.00%)      }
      .               fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    429 ( 0.00%)          intravisit::walk_item(self, item);
    286 ( 0.00%)          match item.kind {
      .                       hir::ItemKind::ExternCrate(_) | hir::ItemKind::Use(..) => {} // ignore these
    408 ( 0.00%)              _ => self.encode_info_for_item(item.def_id.to_def_id(), item),
      .                   }
    572 ( 0.00%)          self.encode_addl_info_for_item(item);
      .               }
      .               fn visit_foreign_item(&mut self, ni: &'tcx hir::ForeignItem<'tcx>) {
      .                   intravisit::walk_foreign_item(self, ni);
      .                   self.encode_info_for_foreign_item(ni.def_id.to_def_id(), ni);
      .               }
  1,377 ( 0.00%)      fn visit_generics(&mut self, generics: &'tcx hir::Generics<'tcx>) {
      .                   intravisit::walk_generics(self, generics);
      .                   self.encode_info_for_generics(generics);
  1,224 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> EncodeContext<'a, 'tcx> {
      7 ( 0.00%)      fn encode_fields(&mut self, adt_def: &ty::AdtDef) {
      .                   for (variant_index, variant) in adt_def.variants.iter_enumerated() {
      .                       for (field_index, _field) in variant.fields.iter().enumerate() {
      .                           self.encode_field(adt_def, variant_index, field_index);
      .                       }
      .                   }
      8 ( 0.00%)      }
      .           
      .               fn encode_info_for_generics(&mut self, generics: &hir::Generics<'tcx>) {
      .                   for param in generics.params {
    882 ( 0.00%)              let def_id = self.tcx.hir().local_def_id(param.hir_id);
    943 ( 0.00%)              match param.kind {
      .                           GenericParamKind::Lifetime { .. } => continue,
      .                           GenericParamKind::Type { default, .. } => {
      .                               self.encode_info_for_generic_param(
      .                                   def_id.to_def_id(),
      .                                   EntryKind::TypeParam,
      .                                   default.is_some(),
      .                               );
      .                           }
      .                           GenericParamKind::Const { ref default, .. } => {
      .                               let def_id = def_id.to_def_id();
      .                               self.encode_info_for_generic_param(def_id, EntryKind::ConstParam, true);
      2 ( 0.00%)                      if default.is_some() {
      .                                   record!(self.tables.const_defaults[def_id] <- self.tcx.const_param_default(def_id))
      .                               }
      .                           }
      .                       }
      .                   }
      .               }
      .           
      .               fn encode_info_for_expr(&mut self, expr: &hir::Expr<'_>) {
  1,086 ( 0.00%)          if let hir::ExprKind::Closure(..) = expr.kind {
      .                       self.encode_info_for_closure(expr.hir_id);
      .                   }
      .               }
      .           
      .               fn encode_ident_span(&mut self, def_id: DefId, ident: Ident) {
      .                   record!(self.tables.ident_span[def_id] <- ident.span);
      .               }
      .           
      .               /// In some cases, along with the item itself, we also
      .               /// encode some sub-items. Usually we want some info from the item
      .               /// so it's easier to do that here then to wait until we would encounter
      .               /// normally in the visitor walk.
  1,287 ( 0.00%)      fn encode_addl_info_for_item(&mut self, item: &hir::Item<'_>) {
    715 ( 0.00%)          match item.kind {
      .                       hir::ItemKind::Static(..)
      .                       | hir::ItemKind::Const(..)
      .                       | hir::ItemKind::Fn(..)
      .                       | hir::ItemKind::Macro(..)
      .                       | hir::ItemKind::Mod(..)
      .                       | hir::ItemKind::ForeignMod { .. }
      .                       | hir::ItemKind::GlobalAsm(..)
      .                       | hir::ItemKind::ExternCrate(..)
-- line 2005 ----------------------------------------
-- line 2017 ----------------------------------------
      .                               self.encode_enum_variant_info(def, i);
      .           
      .                               if let Some(_ctor_def_id) = variant.ctor_def_id {
      .                                   self.encode_enum_variant_ctor(def, i);
      .                               }
      .                           }
      .                       }
      .                       hir::ItemKind::Struct(ref struct_def, _) => {
      1 ( 0.00%)                  let def = self.tcx.adt_def(item.def_id.to_def_id());
      2 ( 0.00%)                  self.encode_fields(def);
      .           
      .                           // If the struct has a constructor, encode it.
      4 ( 0.00%)                  if let Some(ctor_hir_id) = struct_def.ctor_hir_id() {
      6 ( 0.00%)                      let ctor_def_id = self.tcx.hir().local_def_id(ctor_hir_id);
      .                               self.encode_struct_ctor(def, ctor_def_id.to_def_id());
      .                           }
      .                       }
      .                       hir::ItemKind::Union(..) => {
      .                           let def = self.tcx.adt_def(item.def_id.to_def_id());
      .                           self.encode_fields(def);
      .                       }
      .                       hir::ItemKind::Impl { .. } => {
    212 ( 0.00%)                  for &trait_item_def_id in
     86 ( 0.00%)                      self.tcx.associated_item_def_ids(item.def_id.to_def_id()).iter()
      .                           {
      .                               self.encode_info_for_impl_item(trait_item_def_id);
      .                           }
      .                       }
      .                       hir::ItemKind::Trait(..) => {
     18 ( 0.00%)                  for &item_def_id in self.tcx.associated_item_def_ids(item.def_id.to_def_id()).iter()
      .                           {
      .                               self.encode_info_for_trait_item(item_def_id);
      .                           }
      .                       }
      .                   }
  1,144 ( 0.00%)      }
      .           }
      .           
      .           struct ImplsVisitor<'tcx> {
      .               tcx: TyCtxt<'tcx>,
      .               impls: FxHashMap<DefId, Vec<(DefIndex, Option<SimplifiedType>)>>,
      .           }
      .           
      .           impl<'tcx, 'v> ItemLikeVisitor<'v> for ImplsVisitor<'tcx> {
  1,001 ( 0.00%)      fn visit_item(&mut self, item: &hir::Item<'_>) {
    286 ( 0.00%)          match item.kind {
      .                       hir::ItemKind::Impl(..) => {
    342 ( 0.00%)                  if let Some(trait_ref) = self.tcx.impl_trait_ref(item.def_id.to_def_id()) {
    510 ( 0.00%)                      let simplified_self_ty = fast_reject::simplify_type(
      .                                   self.tcx,
      .                                   trait_ref.self_ty(),
      .                                   SimplifyParams::No,
      .                                   StripReferences::No,
      .                               );
      .           
      .                               self.impls
      .                                   .entry(trait_ref.def_id)
      .                                   .or_default()
      .                                   .push((item.def_id.local_def_index, simplified_self_ty));
      .                           }
      .                       }
      .                       _ => {}
      .                   }
  1,144 ( 0.00%)      }
      .           
      .               fn visit_trait_item(&mut self, _trait_item: &'v hir::TraitItem<'v>) {}
      .           
      .               fn visit_impl_item(&mut self, _impl_item: &'v hir::ImplItem<'v>) {
      .                   // handled in `visit_item` above
      .               }
      .           
      .               fn visit_foreign_item(&mut self, _foreign_item: &'v hir::ForeignItem<'v>) {}
-- line 2088 ----------------------------------------
-- line 2146 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               pub fn raw_data(&self) -> &[u8] {
      .                   &self.raw_data
      .               }
      .           }
      .           
     10 ( 0.00%)  pub fn encode_metadata(tcx: TyCtxt<'_>) -> EncodedMetadata {
      5 ( 0.00%)      let _prof_timer = tcx.prof.verbose_generic_activity("generate_crate_metadata");
      .           
      .               // Since encoding metadata is not in a query, and nothing is cached,
      .               // there's no need to do dep-graph tracking for any of it.
      .               tcx.dep_graph.assert_ignored();
      .           
      7 ( 0.00%)      join(
      3 ( 0.00%)          || encode_metadata_impl(tcx),
      .                   || {
      5 ( 0.00%)              if tcx.sess.threads() == 1 {
      .                           return;
      .                       }
      .                       // Prefetch some queries used by metadata encoding.
      .                       // This is not necessary for correctness, but is only done for performance reasons.
      .                       // It can be removed if it turns out to cause trouble or be detrimental to performance.
      .                       join(|| prefetch_mir(tcx), || tcx.exported_symbols(LOCAL_CRATE));
      .                   },
      .               )
      .               .0
      9 ( 0.00%)  }
      .           
      9 ( 0.00%)  fn encode_metadata_impl(tcx: TyCtxt<'_>) -> EncodedMetadata {
      1 ( 0.00%)      let mut encoder = opaque::Encoder::new(vec![]);
      .               encoder.emit_raw_bytes(METADATA_HEADER).unwrap();
      .           
      .               // Will be filled with the root position after encoding everything.
      .               encoder.emit_raw_bytes(&[0, 0, 0, 0]).unwrap();
      .           
      2 ( 0.00%)      let source_map_files = tcx.sess.source_map().files();
      3 ( 0.00%)      let source_file_cache = (source_map_files[0].clone(), 0);
      2 ( 0.00%)      let required_source_files = Some(GrowableBitSet::with_capacity(source_map_files.len()));
      .               drop(source_map_files);
      .           
      .               let hygiene_ctxt = HygieneEncodeContext::default();
      .           
     35 ( 0.00%)      let mut ecx = EncodeContext {
      4 ( 0.00%)          opaque: encoder,
      .                   tcx,
      2 ( 0.00%)          feat: tcx.features(),
      .                   tables: Default::default(),
      .                   lazy_state: LazyState::NoNode,
      .                   type_shorthands: Default::default(),
      .                   predicate_shorthands: Default::default(),
      4 ( 0.00%)          source_file_cache,
      .                   interpret_allocs: Default::default(),
      4 ( 0.00%)          required_source_files,
      2 ( 0.00%)          is_proc_macro: tcx.sess.crate_types().contains(&CrateType::ProcMacro),
      .                   hygiene_ctxt: &hygiene_ctxt,
      .               };
      .           
      .               // Encode the rustc version string in a predictable location.
      .               rustc_version().encode(&mut ecx).unwrap();
      .           
      .               // Encode all the entries and extra information in the crate,
      .               // culminating in the `CrateRoot` which points to all of it.
      1 ( 0.00%)      let root = ecx.encode_crate_root();
      .           
      7 ( 0.00%)      let mut result = ecx.opaque.into_inner();
      .           
      .               // Encode the root position.
      .               let header = METADATA_HEADER.len();
      .               let pos = root.position.get();
      3 ( 0.00%)      result[header + 0] = (pos >> 24) as u8;
      3 ( 0.00%)      result[header + 1] = (pos >> 16) as u8;
      1 ( 0.00%)      result[header + 2] = (pos >> 8) as u8;
      5 ( 0.00%)      result[header + 3] = (pos >> 0) as u8;
      .           
      .               // Record metadata size for self-profiling
      .               tcx.prof.artifact_size("crate_metadata", "crate_metadata", result.len() as u64);
      .           
      5 ( 0.00%)      EncodedMetadata { raw_data: result }
     12 ( 0.00%)  }
      .           
      .           pub fn provide(providers: &mut Providers) {
      2 ( 0.00%)      *providers = Providers {
      .                   traits_in_crate: |tcx, cnum| {
      1 ( 0.00%)              assert_eq!(cnum, LOCAL_CRATE);
      .           
      1 ( 0.00%)              #[derive(Default)]
      .                       struct TraitsVisitor {
      .                           traits: Vec<DefId>,
      .                       }
      .                       impl ItemLikeVisitor<'_> for TraitsVisitor {
      .                           fn visit_item(&mut self, item: &hir::Item<'_>) {
    572 ( 0.00%)                      if let hir::ItemKind::Trait(..) | hir::ItemKind::TraitAlias(..) = item.kind {
      6 ( 0.00%)                          self.traits.push(item.def_id.to_def_id());
      .                               }
      .                           }
      .                           fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {}
      .                           fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {}
      .                           fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'_>) {}
      .                       }
      .           
      .                       let mut visitor = TraitsVisitor::default();
      4 ( 0.00%)              tcx.hir().visit_all_item_likes(&mut visitor);
      .                       // Bring everything into deterministic order.
      6 ( 0.00%)              visitor.traits.sort_by_cached_key(|&def_id| tcx.def_path_hash(def_id));
      .                       tcx.arena.alloc_slice(&visitor.traits)
      .                   },
      .           
      .                   ..*providers
      .               };
      .           }

 37,811 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/encoder.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir               

-- line 5 ----------------------------------------
      .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
      .           unsafe impl GlobalAlloc for System {
      .               #[inline]
      .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
      .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
      .                   // So only rely on MIN_ALIGN if size >= align.
      .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
      .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
414,274 ( 0.08%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
310,704 ( 0.06%)              libc::malloc(layout.size()) as *mut u8
      .                   } else {
      .                       #[cfg(target_os = "macos")]
      .                       {
      .                           if layout.align() > (1 << 31) {
      .                               return ptr::null_mut();
      .                           }
      .                       }
      .                       aligned_malloc(&layout)
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
      .                   // See the comment above in `alloc` for why this check looks the way it does.
 23,412 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
 35,118 ( 0.01%)              libc::calloc(layout.size(), 1) as *mut u8
      .                   } else {
      .                       let ptr = self.alloc(layout);
      .                       if !ptr.is_null() {
      .                           ptr::write_bytes(ptr, 0, layout.size());
      .                       }
      .                       ptr
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
109,411 ( 0.02%)          libc::free(ptr as *mut libc::c_void)
      .               }
      .           
      .               #[inline]
      .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
 41,620 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
 83,240 ( 0.02%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
      .                   } else {
      .                       realloc_fallback(self, ptr, layout, new_size)
      .                   }
      .               }
      .           }
      .           
      .           cfg_if::cfg_if! {
      .               if #[cfg(any(
-- line 56 ----------------------------------------
-- line 84 ----------------------------------------
      .               } else if #[cfg(target_os = "wasi")] {
      .                   #[inline]
      .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
      .                       libc::aligned_alloc(layout.align(), layout.size()) as *mut u8
      .                   }
      .               } else {
      .                   #[inline]
      .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
      1 ( 0.00%)              let mut out = ptr::null_mut();
      .                       // posix_memalign requires that the alignment be a multiple of `sizeof(void*)`.
      .                       // Since these are all powers of 2, we can just use max.
      .                       let align = layout.align().max(crate::mem::size_of::<usize>());
      2 ( 0.00%)              let ret = libc::posix_memalign(&mut out, align, layout.size());
      2 ( 0.00%)              if ret != 0 { ptr::null_mut() } else { out as *mut u8 }
      .                   }
      .               }
      .           }

      1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 157 ----------------------------------------
      .               pub fn opt_fn_def_id(self) -> Option<DefId> {
      .                   if let Res::Def(DefKind::Fn, def_id) = self.res { Some(def_id) } else { None }
      .               }
      .           }
      .           
      .           /// The "header" of an impl is everything outside the body: a Self type, a trait
      .           /// ref (in the case of a trait impl), and a set of predicates (from the
      .           /// bounds / where-clauses).
  1,046 ( 0.00%)  #[derive(Clone, Debug, TypeFoldable)]
      .           pub struct ImplHeader<'tcx> {
      .               pub impl_def_id: DefId,
      .               pub self_ty: Ty<'tcx>,
      .               pub trait_ref: Option<TraitRef<'tcx>>,
      .               pub predicates: Vec<Predicate<'tcx>>,
      .           }
      .           
      .           #[derive(
      .               Copy,
      .               Clone,
  9,879 ( 0.00%)      PartialEq,
      .               Eq,
      .               Hash,
      .               TyEncodable,
  5,232 ( 0.00%)      TyDecodable,
      .               HashStable,
      .               Debug,
      .               TypeFoldable
      .           )]
      .           pub enum ImplPolarity {
      .               /// `impl Trait for Type`
      .               Positive,
      .               /// `impl !Trait for Type`
-- line 188 ----------------------------------------
-- line 210 ----------------------------------------
      .                   match self {
      .                       Self::Positive => f.write_str("positive"),
      .                       Self::Negative => f.write_str("negative"),
      .                       Self::Reservation => f.write_str("reservation"),
      .                   }
      .               }
      .           }
      .           
317,600 ( 0.06%)  #[derive(Clone, Debug, PartialEq, Eq, Copy, Hash, TyEncodable, TyDecodable, HashStable)]
      .           pub enum Visibility {
      .               /// Visible everywhere (including in other crates).
      .               Public,
      .               /// Visible only in the given crate-local module.
      .               Restricted(DefId),
      .               /// Not visible anywhere in the local crate. This is the visibility of private external items.
      .               Invisible,
      .           }
      .           
 17,228 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable, TyEncodable, TyDecodable)]
      .           pub enum BoundConstness {
      .               /// `T: Trait`
      .               NotConst,
      .               /// `T: ~const Trait`
      .               ///
      .               /// Requires resolving to const only when we are in a const context.
      .               ConstIfConst,
      .           }
      .           
      .           impl BoundConstness {
      .               /// Reduce `self` and `constness` to two possible combined states instead of four.
  1,688 ( 0.00%)      pub fn and(&mut self, constness: hir::Constness) -> hir::Constness {
  2,532 ( 0.00%)          match (constness, self) {
      .                       (hir::Constness::Const, BoundConstness::ConstIfConst) => hir::Constness::Const,
      .                       (_, this) => {
  5,398 ( 0.00%)                  *this = BoundConstness::NotConst;
      .                           hir::Constness::NotConst
      .                       }
      .                   }
    844 ( 0.00%)      }
      .           }
      .           
      .           impl fmt::Display for BoundConstness {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   match self {
      .                       Self::NotConst => f.write_str("normal"),
      .                       Self::ConstIfConst => f.write_str("`~const`"),
      .                   }
-- line 256 ----------------------------------------
-- line 274 ----------------------------------------
      .               pub before_feature_tys: Ty<'tcx>,
      .               /// Tuple containing the types of closure captures after the feature `capture_disjoint_fields`
      .               pub after_feature_tys: Ty<'tcx>,
      .           }
      .           
      .           pub trait DefIdTree: Copy {
      .               fn parent(self, id: DefId) -> Option<DefId>;
      .           
     14 ( 0.00%)      fn is_descendant_of(self, mut descendant: DefId, ancestor: DefId) -> bool {
      4 ( 0.00%)          if descendant.krate != ancestor.krate {
      .                       return false;
      .                   }
      .           
  5,422 ( 0.00%)          while descendant != ancestor {
    379 ( 0.00%)              match self.parent(descendant) {
      .                           Some(parent) => descendant = parent,
      .                           None => return false,
      .                       }
      .                   }
      .                   true
     16 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> DefIdTree for TyCtxt<'tcx> {
  1,318 ( 0.00%)      fn parent(self, id: DefId) -> Option<DefId> {
      .                   self.def_key(id).parent.map(|index| DefId { index, ..id })
  1,977 ( 0.00%)      }
      .           }
      .           
      .           impl Visibility {
     56 ( 0.00%)      pub fn from_hir(visibility: &hir::Visibility<'_>, id: hir::HirId, tcx: TyCtxt<'_>) -> Self {
    168 ( 0.00%)          match visibility.node {
      .                       hir::VisibilityKind::Public => Visibility::Public,
      .                       hir::VisibilityKind::Crate(_) => Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)),
      .                       hir::VisibilityKind::Restricted { ref path, .. } => match path.res {
      .                           // If there is no resolution, `resolve` will have already reported an error, so
      .                           // assume that the visibility is public to avoid reporting more privacy errors.
      .                           Res::Err => Visibility::Public,
      .                           def => Visibility::Restricted(def.def_id()),
      .                       },
      .                       hir::VisibilityKind::Inherited => {
    112 ( 0.00%)                  Visibility::Restricted(tcx.parent_module(id).to_def_id())
      .                       }
      .                   }
     56 ( 0.00%)      }
      .           
      .               /// Returns `true` if an item with this visibility is accessible from the given block.
  6,003 ( 0.00%)      pub fn is_accessible_from<T: DefIdTree>(self, module: DefId, tree: T) -> bool {
171,734 ( 0.04%)          let restriction = match self {
      .                       // Public items are visible everywhere.
      .                       Visibility::Public => return true,
      .                       // Private items from other crates are visible nowhere.
      .                       Visibility::Invisible => return false,
      .                       // Restricted items are visible in an arbitrary local module.
  5,249 ( 0.00%)              Visibility::Restricted(other) if other.krate != module.krate => return false,
      .                       Visibility::Restricted(module) => module,
      .                   };
      .           
      4 ( 0.00%)          tree.is_descendant_of(module, restriction)
  6,003 ( 0.00%)      }
      .           
      .               /// Returns `true` if this visibility is at least as accessible as the given visibility
135,225 ( 0.03%)      pub fn is_at_least<T: DefIdTree>(self, vis: Visibility, tree: T) -> bool {
121,840 ( 0.02%)          let vis_restriction = match vis {
      .                       Visibility::Public => return self == Visibility::Public,
      .                       Visibility::Invisible => return true,
      .                       Visibility::Restricted(module) => module,
      .                   };
      .           
      .                   self.is_accessible_from(vis_restriction, tree)
135,225 ( 0.03%)      }
      .           
      .               // Returns `true` if this item is visible anywhere in the local crate.
      .               pub fn is_visible_locally(self) -> bool {
      .                   match self {
      .                       Visibility::Public => true,
      .                       Visibility::Restricted(def_id) => def_id.is_local(),
      .                       Visibility::Invisible => false,
      .                   }
      .               }
      .           
      .               pub fn is_public(self) -> bool {
    312 ( 0.00%)          matches!(self, Visibility::Public)
    156 ( 0.00%)      }
      .           }
      .           
      .           /// The crate variances map is computed during typeck and contains the
      .           /// variance of every item in the local crate. You should not use it
      .           /// directly, because to do so will make your pass dependent on the
      .           /// HIR of every item in the local crate. Instead, use
      .           /// `tcx.variances_of()` to get the variance for a *particular*
      .           /// item.
-- line 365 ----------------------------------------
-- line 474 ----------------------------------------
      .           
      .                       // The other fields just provide fast access to information that is
      .                       // also contained in `kind`, so no need to hash them.
      .                       flags: _,
      .           
      .                       outer_exclusive_binder: _,
      .                   } = *self;
      .           
  1,963 ( 0.00%)          kind.hash_stable(hcx, hasher);
      .               }
      .           }
      .           
      .           #[rustc_diagnostic_item = "Ty"]
      .           #[cfg_attr(not(bootstrap), rustc_pass_by_value)]
      .           pub type Ty<'tcx> = &'tcx TyS<'tcx>;
      .           
      .           impl ty::EarlyBoundRegion {
-- line 490 ----------------------------------------
-- line 509 ----------------------------------------
      .           #[derive(Clone, Copy, Lift)]
      .           pub struct Predicate<'tcx> {
      .               inner: &'tcx PredicateInner<'tcx>,
      .           }
      .           
      .           impl<'tcx> PartialEq for Predicate<'tcx> {
      .               fn eq(&self, other: &Self) -> bool {
      .                   // `self.kind` is always interned.
 15,993 ( 0.00%)          ptr::eq(self.inner, other.inner)
 13,559 ( 0.00%)      }
      .           }
      .           
      .           impl Hash for Predicate<'_> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   (self.inner as *const PredicateInner<'_>).hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Predicate<'tcx> {}
      .           
      .           impl<'tcx> Predicate<'tcx> {
      .               /// Gets the inner `Binder<'tcx, PredicateKind<'tcx>>`.
      .               #[inline]
      .               pub fn kind(self) -> Binder<'tcx, PredicateKind<'tcx>> {
107,051 ( 0.02%)          self.inner.kind
      .               }
      .           
      .               /// Flips the polarity of a Predicate.
      .               ///
      .               /// Given `T: Trait` predicate it returns `T: !Trait` and given `T: !Trait` returns `T: Trait`.
      .               pub fn flip_polarity(&self, tcx: TyCtxt<'tcx>) -> Option<Predicate<'tcx>> {
      .                   let kind = self
      .                       .inner
-- line 541 ----------------------------------------
-- line 567 ----------------------------------------
      .                       flags: _,
      .                       outer_exclusive_binder: _,
      .                   } = self.inner;
      .           
      .                   kind.hash_stable(hcx, hasher);
      .               }
      .           }
      .           
328,433 ( 0.07%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
319,638 ( 0.07%)  #[derive(HashStable, TypeFoldable)]
      .           pub enum PredicateKind<'tcx> {
      .               /// Corresponds to `where Foo: Bar<A, B, C>`. `Foo` here would be
      .               /// the `Self` type of the trait reference and `A`, `B`, and `C`
      .               /// would be the type parameters.
      .               Trait(TraitPredicate<'tcx>),
      .           
      .               /// `where 'a: 'b`
      .               RegionOutlives(RegionOutlivesPredicate<'tcx>),
-- line 584 ----------------------------------------
-- line 601 ----------------------------------------
      .               /// Satisfied (or refuted) once we know the closure's kind.
      .               ClosureKind(DefId, SubstsRef<'tcx>, ClosureKind),
      .           
      .               /// `T1 <: T2`
      .               ///
      .               /// This obligation is created most often when we have two
      .               /// unresolved type variables and hence don't have enough
      .               /// information to process the subtyping obligation yet.
     24 ( 0.00%)      Subtype(SubtypePredicate<'tcx>),
      .           
      .               /// `T1` coerced to `T2`
      .               ///
      .               /// Like a subtyping obligation, this is created most often
      .               /// when we have two unresolved type variables and hence
      .               /// don't have enough information to process the coercion
      .               /// obligation yet. At the moment, we actually process coercions
      .               /// very much like subtyping and don't handle the full coercion
-- line 617 ----------------------------------------
-- line 645 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> Predicate<'tcx> {
      .               /// Performs a substitution suitable for going from a
      .               /// poly-trait-ref to supertraits that must hold if that
      .               /// poly-trait-ref holds. This is slightly different from a normal
      .               /// substitution in terms of what happens with bound regions. See
      .               /// lengthy comment below for details.
  2,124 ( 0.00%)      pub fn subst_supertrait(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_ref: &ty::PolyTraitRef<'tcx>,
      .               ) -> Predicate<'tcx> {
      .                   // The interaction between HRTB and supertraits is not entirely
      .                   // obvious. Let me walk you (and myself) through an example.
      .                   //
      .                   // Let's start with an easy case. Consider two traits:
-- line 661 ----------------------------------------
-- line 731 ----------------------------------------
      .                   //    ['x, 'b]
      .                   let bound_pred = self.kind();
      .                   let pred_bound_vars = bound_pred.bound_vars();
      .                   let trait_bound_vars = trait_ref.bound_vars();
      .                   // 1) Self: Bar1<'a, '^0.0> -> Self: Bar1<'a, '^0.1>
      .                   let shifted_pred =
      .                       tcx.shift_bound_var_indices(trait_bound_vars.len(), bound_pred.skip_binder());
      .                   // 2) Self: Bar1<'a, '^0.1> -> T: Bar1<'^0.0, '^0.1>
    236 ( 0.00%)          let new = shifted_pred.subst(tcx, trait_ref.skip_binder().substs);
      .                   // 3) ['x] + ['b] -> ['x, 'b]
      .                   let bound_vars =
      .                       tcx.mk_bound_variable_kinds(trait_bound_vars.iter().chain(pred_bound_vars));
  2,124 ( 0.00%)          tcx.reuse_or_mk_predicate(self, ty::Binder::bind_with_vars(new, bound_vars))
  1,652 ( 0.00%)      }
      .           }
      .           
  5,897 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
 30,291 ( 0.01%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct TraitPredicate<'tcx> {
      .               pub trait_ref: TraitRef<'tcx>,
      .           
 45,421 ( 0.01%)      pub constness: BoundConstness,
      .           
 53,846 ( 0.01%)      pub polarity: ImplPolarity,
      .           }
      .           
      .           pub type PolyTraitPredicate<'tcx> = ty::Binder<'tcx, TraitPredicate<'tcx>>;
      .           
      .           impl<'tcx> TraitPredicate<'tcx> {
 36,448 ( 0.01%)      pub fn remap_constness(&mut self, tcx: TyCtxt<'tcx>, param_env: &mut ParamEnv<'tcx>) {
 31,896 ( 0.01%)          if unlikely!(Some(self.trait_ref.def_id) == tcx.lang_items().drop_trait()) {
      .                       // remap without changing constness of this predicate.
      .                       // this is because `T: ~const Drop` has a different meaning to `T: Drop`
      4 ( 0.00%)              param_env.remap_constness_with(self.constness)
      .                   } else {
  4,554 ( 0.00%)              *param_env = param_env.with_constness(self.constness.and(param_env.constness()))
      .                   }
 27,336 ( 0.01%)      }
      .           
      .               /// Remap the constness of this predicate before emitting it for diagnostics.
      .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
      .                   // this is different to `remap_constness` that callees want to print this predicate
      .                   // in case of selection errors. `T: ~const Drop` bounds cannot end up here when the
      .                   // param_env is not const because we it is always satisfied in non-const contexts.
      .                   if let hir::Constness::NotConst = param_env.constness() {
      .                       self.constness = ty::BoundConstness::NotConst;
      .                   }
      .               }
      .           
      .               pub fn def_id(self) -> DefId {
  6,028 ( 0.00%)          self.trait_ref.def_id
  3,014 ( 0.00%)      }
      .           
  6,285 ( 0.00%)      pub fn self_ty(self) -> Ty<'tcx> {
 18,855 ( 0.00%)          self.trait_ref.self_ty()
 12,570 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> PolyTraitPredicate<'tcx> {
      .               pub fn def_id(self) -> DefId {
      .                   // Ok to skip binder since trait `DefId` does not care about regions.
      .                   self.skip_binder().def_id()
 22,066 ( 0.00%)      }
      .           
      .               pub fn self_ty(self) -> ty::Binder<'tcx, Ty<'tcx>> {
      .                   self.map_bound(|trait_ref| trait_ref.self_ty())
      .               }
      .           
      .               /// Remap the constness of this predicate before emitting it for diagnostics.
      .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
      .                   *self = self.map_bound(|mut p| {
      .                       p.remap_constness_diag(param_env);
      .                       p
      .                   });
      .               }
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
  1,470 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
  1,386 ( 0.00%)  pub struct OutlivesPredicate<A, B>(pub A, pub B); // `A: B`
      .           pub type RegionOutlivesPredicate<'tcx> = OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>;
      .           pub type TypeOutlivesPredicate<'tcx> = OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>;
      .           pub type PolyRegionOutlivesPredicate<'tcx> = ty::Binder<'tcx, RegionOutlivesPredicate<'tcx>>;
      .           pub type PolyTypeOutlivesPredicate<'tcx> = ty::Binder<'tcx, TypeOutlivesPredicate<'tcx>>;
      .           
      .           /// Encodes that `a` must be a subtype of `b`. The `a_is_expected` flag indicates
      .           /// whether the `a` type is the type that we should label as "expected" when
      .           /// presenting user diagnostics.
      .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
     55 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct SubtypePredicate<'tcx> {
     89 ( 0.00%)      pub a_is_expected: bool,
      .               pub a: Ty<'tcx>,
      .               pub b: Ty<'tcx>,
      .           }
      .           pub type PolySubtypePredicate<'tcx> = ty::Binder<'tcx, SubtypePredicate<'tcx>>;
      .           
      .           /// Encodes that we have to coerce *from* the `a` type to the `b` type.
      .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
      2 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct CoercePredicate<'tcx> {
      .               pub a: Ty<'tcx>,
      .               pub b: Ty<'tcx>,
      .           }
      .           pub type PolyCoercePredicate<'tcx> = ty::Binder<'tcx, CoercePredicate<'tcx>>;
      .           
     78 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, TyEncodable, TyDecodable)]
    120 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub enum Term<'tcx> {
      .               Ty(Ty<'tcx>),
      .               Const(&'tcx Const<'tcx>),
      .           }
      .           
      .           impl<'tcx> From<Ty<'tcx>> for Term<'tcx> {
      .               fn from(ty: Ty<'tcx>) -> Self {
      .                   Term::Ty(ty)
     27 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> From<&'tcx Const<'tcx>> for Term<'tcx> {
      .               fn from(c: &'tcx Const<'tcx>) -> Self {
      .                   Term::Const(c)
      .               }
      .           }
      .           
      .           impl<'tcx> Term<'tcx> {
      .               pub fn ty(&self) -> Option<Ty<'tcx>> {
     24 ( 0.00%)          if let Term::Ty(ty) = self { Some(ty) } else { None }
     12 ( 0.00%)      }
      .           }
      .           
      .           /// This kind of predicate has no *direct* correspondent in the
      .           /// syntax, but it roughly corresponds to the syntactic forms:
      .           ///
      .           /// 1. `T: TraitRef<..., Item = Type>`
      .           /// 2. `<T as TraitRef<...>>::Item == Type` (NYI)
      .           ///
      .           /// In particular, form #1 is "desugared" to the combination of a
      .           /// normal trait predicate (`T: TraitRef<...>`) and one of these
      .           /// predicates. Form #2 is a broader form in that it also permits
      .           /// equality between arbitrary types. Processing an instance of
      .           /// Form #2 eventually yields one of these `ProjectionPredicate`
      .           /// instances to normalize the LHS.
      .           #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
     36 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct ProjectionPredicate<'tcx> {
      .               pub projection_ty: ProjectionTy<'tcx>,
     24 ( 0.00%)      pub term: Term<'tcx>,
      .           }
      .           
      .           pub type PolyProjectionPredicate<'tcx> = Binder<'tcx, ProjectionPredicate<'tcx>>;
      .           
      .           impl<'tcx> PolyProjectionPredicate<'tcx> {
      .               /// Returns the `DefId` of the trait of the associated item being projected.
      .               #[inline]
      .               pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
-- line 886 ----------------------------------------
-- line 914 ----------------------------------------
      .               }
      .           }
      .           
      .           pub trait ToPolyTraitRef<'tcx> {
      .               fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx>;
      .           }
      .           
      .           impl<'tcx> ToPolyTraitRef<'tcx> for PolyTraitPredicate<'tcx> {
  3,855 ( 0.00%)      fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx> {
  3,855 ( 0.00%)          self.map_bound_ref(|trait_pred| trait_pred.trait_ref)
  3,855 ( 0.00%)      }
      .           }
      .           
      .           pub trait ToPredicate<'tcx> {
      .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx>;
      .           }
      .           
      .           impl<'tcx> ToPredicate<'tcx> for Binder<'tcx, PredicateKind<'tcx>> {
      .               #[inline(always)]
      .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
      .                   tcx.mk_predicate(self)
      .               }
      .           }
      .           
      .           impl<'tcx> ToPredicate<'tcx> for PolyTraitPredicate<'tcx> {
  1,649 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
  8,245 ( 0.00%)          self.map_bound(PredicateKind::Trait).to_predicate(tcx)
  3,298 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate<'tcx> {
      .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
      .                   self.map_bound(PredicateKind::RegionOutlives).to_predicate(tcx)
      .               }
      .           }
      .           
      .           impl<'tcx> ToPredicate<'tcx> for PolyTypeOutlivesPredicate<'tcx> {
      2 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
      4 ( 0.00%)          self.map_bound(PredicateKind::TypeOutlives).to_predicate(tcx)
      4 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {
      5 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
     25 ( 0.00%)          self.map_bound(PredicateKind::Projection).to_predicate(tcx)
     10 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> Predicate<'tcx> {
 16,822 ( 0.00%)      pub fn to_opt_poly_trait_pred(self) -> Option<PolyTraitPredicate<'tcx>> {
      .                   let predicate = self.kind();
 50,466 ( 0.01%)          match predicate.skip_binder() {
 42,055 ( 0.01%)              PredicateKind::Trait(t) => Some(predicate.rebind(t)),
      .                       PredicateKind::Projection(..)
      .                       | PredicateKind::Subtype(..)
      .                       | PredicateKind::Coerce(..)
      .                       | PredicateKind::RegionOutlives(..)
      .                       | PredicateKind::WellFormed(..)
      .                       | PredicateKind::ObjectSafe(..)
      .                       | PredicateKind::ClosureKind(..)
      .                       | PredicateKind::TypeOutlives(..)
      .                       | PredicateKind::ConstEvaluatable(..)
      .                       | PredicateKind::ConstEquate(..)
      .                       | PredicateKind::TypeWellFormedFromEnv(..) => None,
      .                   }
 16,822 ( 0.00%)      }
      .           
  4,271 ( 0.00%)      pub fn to_opt_type_outlives(self) -> Option<PolyTypeOutlivesPredicate<'tcx>> {
      .                   let predicate = self.kind();
  8,542 ( 0.00%)          match predicate.skip_binder() {
      .                       PredicateKind::TypeOutlives(data) => Some(predicate.rebind(data)),
      .                       PredicateKind::Trait(..)
      .                       | PredicateKind::Projection(..)
      .                       | PredicateKind::Subtype(..)
      .                       | PredicateKind::Coerce(..)
      .                       | PredicateKind::RegionOutlives(..)
      .                       | PredicateKind::WellFormed(..)
      .                       | PredicateKind::ObjectSafe(..)
      .                       | PredicateKind::ClosureKind(..)
      .                       | PredicateKind::ConstEvaluatable(..)
      .                       | PredicateKind::ConstEquate(..)
  4,271 ( 0.00%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
      .                   }
  4,271 ( 0.00%)      }
      .           }
      .           
      .           /// Represents the bounds declared on a particular set of type
      .           /// parameters. Should eventually be generalized into a flag list of
      .           /// where-clauses. You can obtain an `InstantiatedPredicates` list from a
      .           /// `GenericPredicates` by using the `instantiate` method. Note that this method
      .           /// reflects an important semantic invariant of `InstantiatedPredicates`: while
      .           /// the `GenericPredicates` are expressed in terms of the bound type
-- line 1005 ----------------------------------------
-- line 1011 ----------------------------------------
      .           /// Example:
      .           ///
      .           ///     struct Foo<T, U: Bar<T>> { ... }
      .           ///
      .           /// Here, the `GenericPredicates` for `Foo` would contain a list of bounds like
      .           /// `[[], [U:Bar<T>]]`. Now if there were some particular reference
      .           /// like `Foo<isize,usize>`, then the `InstantiatedPredicates` would be `[[],
      .           /// [usize:Bar<isize>]]`.
  4,149 ( 0.00%)  #[derive(Clone, Debug, TypeFoldable)]
      .           pub struct InstantiatedPredicates<'tcx> {
      .               pub predicates: Vec<Predicate<'tcx>>,
      .               pub spans: Vec<Span>,
      .           }
      .           
      .           impl<'tcx> InstantiatedPredicates<'tcx> {
      .               pub fn empty() -> InstantiatedPredicates<'tcx> {
  3,814 ( 0.00%)          InstantiatedPredicates { predicates: vec![], spans: vec![] }
      .               }
      .           
      .               pub fn is_empty(&self) -> bool {
      .                   self.predicates.is_empty()
      1 ( 0.00%)      }
      .           }
      .           
      .           #[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable, TyEncodable, TyDecodable, TypeFoldable)]
      .           pub struct OpaqueTypeKey<'tcx> {
      .               pub def_id: DefId,
      .               pub substs: SubstsRef<'tcx>,
      .           }
      .           
-- line 1040 ----------------------------------------
-- line 1091 ----------------------------------------
      .               /// ```
      .               /// for<'a> fn(&'a u32)
      .               /// ```
      .               ///
      .               /// Once we "enter" into this `for<'a>` quantifier, we are in a
      .               /// new universe that extends `U` -- in this new universe, we can
      .               /// name the region `'a`, but that region was not nameable from
      .               /// `U` because it was not in scope there.
  4,979 ( 0.00%)      pub fn next_universe(self) -> UniverseIndex {
      .                   UniverseIndex::from_u32(self.private.checked_add(1).unwrap())
 14,937 ( 0.00%)      }
      .           
      .               /// Returns `true` if `self` can name a name from `other` -- in other words,
      .               /// if the set of names in `self` is a superset of those in
      .               /// `other` (`self >= other`).
      .               pub fn can_name(self, other: UniverseIndex) -> bool {
  2,896 ( 0.00%)          self.private >= other.private
  1,448 ( 0.00%)      }
      .           
      .               /// Returns `true` if `self` cannot name some names from `other` -- in other
      .               /// words, if the set of names in `self` is a strict subset of
      .               /// those in `other` (`self < other`).
      .               pub fn cannot_name(self, other: UniverseIndex) -> bool {
      .                   self.private < other.private
      .               }
      .           }
-- line 1116 ----------------------------------------
-- line 1194 ----------------------------------------
      .           /// aren't allowed to call that query: it is equal to `type_of(const_param)` which is
      .           /// trivial to compute.
      .           ///
      .           /// If we now want to use that constant in a place which potentionally needs its type
      .           /// we also pass the type of its `const_param`. This is the point of `WithOptConstParam`,
      .           /// except that instead of a `Ty` we bundle the `DefId` of the const parameter.
      .           /// Meaning that we need to use `type_of(const_param_did)` if `const_param_did` is `Some`
      .           /// to get the type of `did`.
  2,427 ( 0.00%)  #[derive(Copy, Clone, Debug, TypeFoldable, Lift, TyEncodable, TyDecodable)]
      .           #[derive(PartialEq, Eq, PartialOrd, Ord)]
      .           #[derive(Hash, HashStable)]
      .           pub struct WithOptConstParam<T> {
    839 ( 0.00%)      pub did: T,
      .               /// The `DefId` of the corresponding generic parameter in case `did` is
      .               /// a const argument.
      .               ///
      .               /// Note that even if `did` is a const argument, this may still be `None`.
      .               /// All queries taking `WithOptConstParam` start by calling `tcx.opt_const_param_of(def.did)`
      .               /// to potentially update `param_did` in the case it is `None`.
 12,411 ( 0.00%)      pub const_param_did: Option<DefId>,
      .           }
      .           
      .           impl<T> WithOptConstParam<T> {
      .               /// Creates a new `WithOptConstParam` setting `const_param_did` to `None`.
      .               #[inline(always)]
      .               pub fn unknown(did: T) -> WithOptConstParam<T> {
      .                   WithOptConstParam { did, const_param_did: None }
  4,320 ( 0.00%)      }
      .           }
      .           
      .           impl WithOptConstParam<LocalDefId> {
      .               /// Returns `Some((did, param_did))` if `def_id` is a const argument,
      .               /// `None` otherwise.
      .               #[inline(always)]
      .               pub fn try_lookup(did: LocalDefId, tcx: TyCtxt<'_>) -> Option<(LocalDefId, DefId)> {
      .                   tcx.opt_const_param_of(did).map(|param_did| (did, param_did))
      .               }
      .           
      .               /// In case `self` is unknown but `self.did` is a const argument, this returns
      .               /// a `WithOptConstParam` with the correct `const_param_did`.
      .               #[inline(always)]
      .               pub fn try_upgrade(self, tcx: TyCtxt<'_>) -> Option<WithOptConstParam<LocalDefId>> {
    228 ( 0.00%)          if self.const_param_did.is_none() {
    342 ( 0.00%)              if let const_param_did @ Some(_) = tcx.opt_const_param_of(self.did) {
      .                           return Some(WithOptConstParam { did: self.did, const_param_did });
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .           
      .               pub fn to_global(self) -> WithOptConstParam<DefId> {
      .                   WithOptConstParam { did: self.did.to_def_id(), const_param_did: self.const_param_did }
      .               }
      .           
      8 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
     18 ( 0.00%)          if let Some(did) = self.const_param_did { did } else { self.did.to_def_id() }
      2 ( 0.00%)      }
      .           }
      .           
      .           impl WithOptConstParam<DefId> {
    130 ( 0.00%)      pub fn as_local(self) -> Option<WithOptConstParam<LocalDefId>> {
      .                   self.did
      .                       .as_local()
      .                       .map(|did| WithOptConstParam { did, const_param_did: self.const_param_did })
    130 ( 0.00%)      }
      .           
      .               pub fn as_const_arg(self) -> Option<(LocalDefId, DefId)> {
  1,114 ( 0.00%)          if let Some(param_did) = self.const_param_did {
    549 ( 0.00%)              if let Some(did) = self.did.as_local() {
      .                           return Some((did, param_did));
      .                       }
      .                   }
      .           
      .                   None
     48 ( 0.00%)      }
      .           
      .               pub fn is_local(self) -> bool {
      .                   self.did.is_local()
      .               }
      .           
    201 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
      .                   self.const_param_did.unwrap_or(self.did)
    201 ( 0.00%)      }
      .           }
      .           
      .           /// When type checking, we use the `ParamEnv` to track
      .           /// details about the set of where-clauses that are in scope at this
      .           /// particular point.
      .           #[derive(Copy, Clone, Hash, PartialEq, Eq)]
      .           pub struct ParamEnv<'tcx> {
      .               /// This packs both caller bounds and the reveal enum into one pointer.
-- line 1285 ----------------------------------------
-- line 1302 ----------------------------------------
      .               reveal: traits::Reveal,
      .               constness: hir::Constness,
      .           }
      .           
      .           unsafe impl rustc_data_structures::tagged_ptr::Tag for ParamTag {
      .               const BITS: usize = 2;
      .               #[inline]
      .               fn into_usize(self) -> usize {
  3,622 ( 0.00%)          match self {
      .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst } => 0,
      .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst } => 1,
      .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const } => 2,
      .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::Const } => 3,
      .                   }
      .               }
      .               #[inline]
      .               unsafe fn from_usize(ptr: usize) -> Self {
 68,505 ( 0.01%)          match ptr {
      .                       0 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst },
      .                       1 => Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst },
      .                       2 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const },
      .                       3 => Self { reveal: traits::Reveal::All, constness: hir::Constness::Const },
      .                       _ => std::hint::unreachable_unchecked(),
      .                   }
      .               }
      .           }
-- line 1327 ----------------------------------------
-- line 1405 ----------------------------------------
      .               pub fn new(
      .                   caller_bounds: &'tcx List<Predicate<'tcx>>,
      .                   reveal: Reveal,
      .                   constness: hir::Constness,
      .               ) -> Self {
      .                   ty::ParamEnv { packed: CopyTaggedPtr::new(caller_bounds, ParamTag { reveal, constness }) }
      .               }
      .           
      8 ( 0.00%)      pub fn with_user_facing(mut self) -> Self {
      .                   self.packed.set_tag(ParamTag { reveal: Reveal::UserFacing, ..self.packed.tag() });
      .                   self
      8 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn with_constness(mut self, constness: hir::Constness) -> Self {
      .                   self.packed.set_tag(ParamTag { constness, ..self.packed.tag() });
      .                   self
      .               }
      .           
      .               #[inline]
-- line 1424 ----------------------------------------
-- line 1430 ----------------------------------------
      .               #[inline]
      .               pub fn without_const(mut self) -> Self {
      .                   self.packed.set_tag(ParamTag { constness: hir::Constness::NotConst, ..self.packed.tag() });
      .                   self
      .               }
      .           
      .               #[inline]
      .               pub fn remap_constness_with(&mut self, mut constness: ty::BoundConstness) {
    598 ( 0.00%)          *self = self.with_constness(constness.and(self.constness()))
      .               }
      .           
      .               /// Returns a new parameter environment with the same clauses, but
      .               /// which "reveals" the true results of projections in all cases
      .               /// (even for associated types that are specializable). This is
      .               /// the desired behavior during codegen and certain other special
      .               /// contexts; normally though we want to use `Reveal::UserFacing`,
      .               /// which is the default.
      .               /// All opaque types in the caller_bounds of the `ParamEnv`
      .               /// will be normalized to their underlying types.
      .               /// See PR #65989 and issue #65918 for more details
  4,488 ( 0.00%)      pub fn with_reveal_all_normalized(self, tcx: TyCtxt<'tcx>) -> Self {
      .                   if self.packed.tag().reveal == traits::Reveal::All {
      .                       return self;
      .                   }
      .           
      .                   ParamEnv::new(
      .                       tcx.normalize_opaque_types(self.caller_bounds()),
      .                       Reveal::All,
      .                       self.constness(),
      .                   )
  5,049 ( 0.00%)      }
      .           
      .               /// Returns this same environment but with no caller bounds.
      .               #[inline]
      .               pub fn without_caller_bounds(self) -> Self {
      .                   Self::new(List::empty(), self.reveal(), self.constness())
      .               }
      .           
      .               /// Creates a suitable environment in which to perform trait
-- line 1468 ----------------------------------------
-- line 1472 ----------------------------------------
      .               /// pair it with the empty environment. This improves caching and is generally
      .               /// invisible.
      .               ///
      .               /// N.B., we preserve the environment when type-checking because it
      .               /// is possible for the user to have wacky where-clauses like
      .               /// `where Box<u32>: Copy`, which are clearly never
      .               /// satisfiable. We generally want to behave as if they were true,
      .               /// although the surrounding function is never reachable.
 17,980 ( 0.00%)      pub fn and<T: TypeFoldable<'tcx>>(self, value: T) -> ParamEnvAnd<'tcx, T> {
      .                   match self.reveal() {
      .                       Reveal::UserFacing => ParamEnvAnd { param_env: self, value },
      .           
      .                       Reveal::All => {
  2,579 ( 0.00%)                  if value.is_global() {
    624 ( 0.00%)                      ParamEnvAnd { param_env: self.without_caller_bounds(), value }
      .                           } else {
      .                               ParamEnvAnd { param_env: self, value }
      .                           }
      .                       }
      .                   }
 16,788 ( 0.00%)      }
      .           }
      .           
      .           // FIXME(ecstaticmorse): Audit all occurrences of `without_const().to_predicate(tcx)` to ensure that
      .           // the constness of trait bounds is being propagated correctly.
      .           impl<'tcx> PolyTraitRef<'tcx> {
      .               #[inline]
      .               pub fn with_constness(self, constness: BoundConstness) -> PolyTraitPredicate<'tcx> {
    930 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
      .                       trait_ref,
      .                       constness,
      .                       polarity: ty::ImplPolarity::Positive,
      .                   })
      .               }
      .               #[inline]
      .               pub fn without_const(self) -> PolyTraitPredicate<'tcx> {
      .                   self.with_constness(BoundConstness::NotConst)
      .               }
      .           }
      .           
    598 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TypeFoldable)]
      .           pub struct ParamEnvAnd<'tcx, T> {
  2,380 ( 0.00%)      pub param_env: ParamEnv<'tcx>,
 28,988 ( 0.01%)      pub value: T,
      .           }
      .           
      .           impl<'tcx, T> ParamEnvAnd<'tcx, T> {
      .               pub fn into_parts(self) -> (ParamEnv<'tcx>, T) {
      .                   (self.param_env, self.value)
      .               }
      .           
      .               #[inline]
      .               pub fn without_const(mut self) -> Self {
      .                   self.param_env = self.param_env.without_const();
  4,802 ( 0.00%)          self
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T> HashStable<StableHashingContext<'a>> for ParamEnvAnd<'tcx, T>
      .           where
      .               T: HashStable<StableHashingContext<'a>>,
      .           {
      .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
-- line 1534 ----------------------------------------
-- line 1542 ----------------------------------------
      .           #[derive(Copy, Clone, Debug, HashStable)]
      .           pub struct Destructor {
      .               /// The `DefId` of the destructor method
      .               pub did: DefId,
      .               /// The constness of the destructor method
      .               pub constness: hir::Constness,
      .           }
      .           
     53 ( 0.00%)  bitflags! {
    414 ( 0.00%)      #[derive(HashStable, TyEncodable, TyDecodable)]
      .               pub struct VariantFlags: u32 {
      .                   const NO_VARIANT_FLAGS        = 0;
      .                   /// Indicates whether the field list of this variant is `#[non_exhaustive]`.
      .                   const IS_FIELD_LIST_NON_EXHAUSTIVE = 1 << 0;
      .                   /// Indicates whether this variant was obtained as part of recovering from
      .                   /// a syntactic error. May be incomplete or bogus.
      .                   const IS_RECOVERED = 1 << 1;
      .               }
      .           }
      .           
      .           /// Definition of a variant -- a struct's fields or an enum variant.
 37,310 ( 0.01%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
      .           pub struct VariantDef {
      .               /// `DefId` that identifies the variant itself.
      .               /// If this variant belongs to a struct or union, then this is a copy of its `DefId`.
      .               pub def_id: DefId,
      .               /// `DefId` that identifies the variant's constructor.
      .               /// If this variant is a struct variant, then this is `None`.
      .               pub ctor_def_id: Option<DefId>,
      .               /// Variant or struct name.
-- line 1571 ----------------------------------------
-- line 1592 ----------------------------------------
      .               /// `parent_did` is the `DefId` of the `AdtDef` representing the enum or struct that
      .               /// owns this variant. It is used for checking if a struct has `#[non_exhaustive]` w/out having
      .               /// to go through the redirect of checking the ctor's attributes - but compiling a small crate
      .               /// requires loading the `AdtDef`s for all the structs in the universe (e.g., coherence for any
      .               /// built-in trait), and we do not want to load attributes twice.
      .               ///
      .               /// If someone speeds up attribute loading to not be a performance concern, they can
      .               /// remove this hack and use the constructor `DefId` everywhere.
    392 ( 0.00%)      pub fn new(
      .                   name: Symbol,
      .                   variant_did: Option<DefId>,
      .                   ctor_def_id: Option<DefId>,
      .                   discr: VariantDiscr,
      .                   fields: Vec<FieldDef>,
      .                   ctor_kind: CtorKind,
      .                   adt_kind: AdtKind,
      .                   parent_did: DefId,
-- line 1608 ----------------------------------------
-- line 1611 ----------------------------------------
      .               ) -> Self {
      .                   debug!(
      .                       "VariantDef::new(name = {:?}, variant_did = {:?}, ctor_def_id = {:?}, discr = {:?},
      .                        fields = {:?}, ctor_kind = {:?}, adt_kind = {:?}, parent_did = {:?})",
      .                       name, variant_did, ctor_def_id, discr, fields, ctor_kind, adt_kind, parent_did,
      .                   );
      .           
      .                   let mut flags = VariantFlags::NO_VARIANT_FLAGS;
     49 ( 0.00%)          if is_field_list_non_exhaustive {
      .                       flags |= VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE;
      .                   }
      .           
    147 ( 0.00%)          if recovered {
      .                       flags |= VariantFlags::IS_RECOVERED;
      .                   }
      .           
    441 ( 0.00%)          VariantDef {
      .                       def_id: variant_did.unwrap_or(parent_did),
      .                       ctor_def_id,
      .                       name,
      .                       discr,
    196 ( 0.00%)              fields,
      .                       ctor_kind,
      .                       flags,
      .                   }
    196 ( 0.00%)      }
      .           
      .               /// Is this field list non-exhaustive?
      .               #[inline]
      .               pub fn is_field_list_non_exhaustive(&self) -> bool {
      .                   self.flags.intersects(VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE)
      .               }
      .           
      .               /// Was this variant obtained as part of recovering from a syntactic error?
      .               #[inline]
      .               pub fn is_recovered(&self) -> bool {
      .                   self.flags.intersects(VariantFlags::IS_RECOVERED)
      .               }
      .           
      .               /// Computes the `Ident` of this variant by looking up the `Span`
     28 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
     16 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.def_id).unwrap())
     36 ( 0.00%)      }
      .           }
      .           
 22,786 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]
      .           pub enum VariantDiscr {
      .               /// Explicit value for this variant, i.e., `X = 123`.
      .               /// The `DefId` corresponds to the embedded constant.
      .               Explicit(DefId),
      .           
      .               /// The previous variant's discriminant plus one.
      .               /// For efficiency reasons, the distance from the
      .               /// last `Explicit` discriminant is being stored,
      .               /// or `0` for the first variant, if it has none.
      .               Relative(u32),
      .           }
      .           
 54,688 ( 0.01%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
      .           pub struct FieldDef {
      .               pub did: DefId,
      .               pub name: Symbol,
      .               pub vis: Visibility,
      .           }
      .           
    516 ( 0.00%)  bitflags! {
      .               #[derive(TyEncodable, TyDecodable, Default, HashStable)]
      .               pub struct ReprFlags: u8 {
      .                   const IS_C               = 1 << 0;
      .                   const IS_SIMD            = 1 << 1;
      .                   const IS_TRANSPARENT     = 1 << 2;
      .                   // Internal only for now. If true, don't reorder fields.
      .                   const IS_LINEAR          = 1 << 3;
      .                   // If true, don't expose any niche to type's context.
-- line 1684 ----------------------------------------
-- line 1689 ----------------------------------------
      .                   // Any of these flags being set prevent field reordering optimisation.
      .                   const IS_UNOPTIMISABLE   = ReprFlags::IS_C.bits
      .                                            | ReprFlags::IS_SIMD.bits
      .                                            | ReprFlags::IS_LINEAR.bits;
      .               }
      .           }
      .           
      .           /// Represents the repr options provided by the user,
 40,934 ( 0.01%)  #[derive(Copy, Clone, Debug, Eq, PartialEq, TyEncodable, TyDecodable, Default, HashStable)]
      .           pub struct ReprOptions {
      .               pub int: Option<attr::IntType>,
      .               pub align: Option<Align>,
      .               pub pack: Option<Align>,
      .               pub flags: ReprFlags,
      .               /// The seed to be used for randomizing a type's layout
      .               ///
      .               /// Note: This could technically be a `[u8; 16]` (a `u128`) which would
-- line 1705 ----------------------------------------
-- line 1706 ----------------------------------------
      .               /// be the "most accurate" hash as it'd encompass the item and crate
      .               /// hash without loss, but it does pay the price of being larger.
      .               /// Everything's a tradeoff, a `u64` seed should be sufficient for our
      .               /// purposes (primarily `-Z randomize-layout`)
      .               pub field_shuffle_seed: u64,
      .           }
      .           
      .           impl ReprOptions {
     13 ( 0.00%)      pub fn new(tcx: TyCtxt<'_>, did: DefId) -> ReprOptions {
      .                   let mut flags = ReprFlags::empty();
      .                   let mut size = None;
      .                   let mut max_align: Option<Align> = None;
      .                   let mut min_pack: Option<Align> = None;
      .           
      .                   // Generate a deterministically-derived seed from the item's path hash
      .                   // to allow for cross-crate compilation to actually work
      .                   let mut field_shuffle_seed = tcx.def_path_hash(did).0.to_smaller_hash();
      .           
      .                   // If the user defined a custom seed for layout randomization, xor the item's
      .                   // path hash with the user defined seed, this will allowing determinism while
      .                   // still allowing users to further randomize layout generation for e.g. fuzzing
      3 ( 0.00%)          if let Some(user_seed) = tcx.sess.opts.debugging_opts.layout_seed {
      .                       field_shuffle_seed ^= user_seed;
      .                   }
      .           
      4 ( 0.00%)          for attr in tcx.get_attrs(did).iter() {
     10 ( 0.00%)              for r in attr::find_repr_attrs(&tcx.sess, attr) {
      .                           flags.insert(match r {
      .                               attr::ReprC => ReprFlags::IS_C,
      .                               attr::ReprPacked(pack) => {
      .                                   let pack = Align::from_bytes(pack as u64).unwrap();
      .                                   min_pack = Some(if let Some(min_pack) = min_pack {
      .                                       min_pack.min(pack)
      .                                   } else {
      .                                       pack
-- line 1740 ----------------------------------------
-- line 1753 ----------------------------------------
      .                                   ReprFlags::empty()
      .                               }
      .                           });
      .                       }
      .                   }
      .           
      .                   // If `-Z randomize-layout` was enabled for the type definition then we can
      .                   // consider performing layout randomization
      8 ( 0.00%)          if tcx.sess.opts.debugging_opts.randomize_layout {
      .                       flags.insert(ReprFlags::RANDOMIZE_LAYOUT);
      .                   }
      .           
      .                   // This is here instead of layout because the choice must make it into metadata.
      6 ( 0.00%)          if !tcx.consider_optimizing(|| format!("Reorder fields of {:?}", tcx.def_path_str(did))) {
      .                       flags.insert(ReprFlags::IS_LINEAR);
      .                   }
      .           
      2 ( 0.00%)          Self { int: size, align: max_align, pack: min_pack, flags, field_shuffle_seed }
     28 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn simd(&self) -> bool {
      .                   self.flags.contains(ReprFlags::IS_SIMD)
      .               }
      .           
      .               #[inline]
      .               pub fn c(&self) -> bool {
-- line 1779 ----------------------------------------
-- line 1798 ----------------------------------------
      .               #[inline]
      .               pub fn hide_niche(&self) -> bool {
      .                   self.flags.contains(ReprFlags::HIDE_NICHE)
      .               }
      .           
      .               /// Returns the discriminant type, given these `repr` options.
      .               /// This must only be called on enums!
      .               pub fn discr_type(&self) -> attr::IntType {
    141 ( 0.00%)          self.int.unwrap_or(attr::SignedInt(ast::IntTy::Isize))
     48 ( 0.00%)      }
      .           
      .               /// Returns `true` if this `#[repr()]` should inhabit "smart enum
      .               /// layout" optimizations, such as representing `Foo<&T>` as a
      .               /// single pointer.
      .               pub fn inhibit_enum_layout_opt(&self) -> bool {
     50 ( 0.00%)          self.c() || self.int.is_some()
      .               }
      .           
      .               /// Returns `true` if this `#[repr()]` should inhibit struct field reordering
      .               /// optimizations, such as with `repr(C)`, `repr(packed(1))`, or `repr(<int>)`.
      .               pub fn inhibit_struct_field_reordering_opt(&self) -> bool {
    492 ( 0.00%)          if let Some(pack) = self.pack {
      .                       if pack.bytes() == 1 {
      .                           return true;
      .                       }
      .                   }
      .           
    988 ( 0.00%)          self.flags.intersects(ReprFlags::IS_UNOPTIMISABLE) || self.int.is_some()
      .               }
      .           
      .               /// Returns `true` if this type is valid for reordering and `-Z randomize-layout`
      .               /// was enabled for its declaration crate
      .               pub fn can_randomize_type_layout(&self) -> bool {
    245 ( 0.00%)          !self.inhibit_struct_field_reordering_opt()
      .                       && self.flags.contains(ReprFlags::RANDOMIZE_LAYOUT)
      .               }
      .           
      .               /// Returns `true` if this `#[repr()]` should inhibit union ABI optimisations.
      .               pub fn inhibit_union_abi_opt(&self) -> bool {
      4 ( 0.00%)          self.c()
      .               }
      .           }
      .           
      .           impl<'tcx> FieldDef {
      .               /// Returns the type of this field. The resulting type is not normalized. The `subst` is
      .               /// typically obtained via the second field of [`TyKind::Adt`].
  3,857 ( 0.00%)      pub fn ty(&self, tcx: TyCtxt<'tcx>, subst: SubstsRef<'tcx>) -> Ty<'tcx> {
  1,102 ( 0.00%)          tcx.type_of(self.did).subst(tcx, subst)
  4,408 ( 0.00%)      }
      .           
      .               /// Computes the `Ident` of this variant by looking up the `Span`
    105 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
     60 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.did).unwrap())
    135 ( 0.00%)      }
      .           }
      .           
      .           pub type Attributes<'tcx> = &'tcx [ast::Attribute];
      .           
      .           #[derive(Debug, PartialEq, Eq)]
      .           pub enum ImplOverlapKind {
      .               /// These impls are always allowed to overlap.
      .               Permitted {
-- line 1859 ----------------------------------------
-- line 1891 ----------------------------------------
      .               /// marker traits.
      .               /// 4. Neither of the impls can have any where-clauses.
      .               ///
      .               /// Once `traitobject` 0.1.0 is no longer an active concern, this hack can be removed.
      .               Issue33140,
      .           }
      .           
      .           impl<'tcx> TyCtxt<'tcx> {
  2,904 ( 0.00%)      pub fn typeck_body(self, body: hir::BodyId) -> &'tcx TypeckResults<'tcx> {
    726 ( 0.00%)          self.typeck(self.hir().body_owner_def_id(body))
  2,904 ( 0.00%)      }
      .           
      .               pub fn provided_trait_methods(self, id: DefId) -> impl 'tcx + Iterator<Item = &'tcx AssocItem> {
      .                   self.associated_items(id)
      .                       .in_definition_order()
      .                       .filter(|item| item.kind == AssocKind::Fn && item.defaultness.has_value())
      .               }
      .           
      .               fn item_name_from_hir(self, def_id: DefId) -> Option<Ident> {
      .                   self.hir().get_if_local(def_id).and_then(|node| node.ident())
      .               }
      .           
    666 ( 0.00%)      fn item_name_from_def_id(self, def_id: DefId) -> Option<Symbol> {
     74 ( 0.00%)          if def_id.index == CRATE_DEF_INDEX {
      .                       Some(self.crate_name(def_id.krate))
      .                   } else {
    222 ( 0.00%)              let def_key = self.def_key(def_id);
    369 ( 0.00%)              match def_key.disambiguated_data.data {
      .                           // The name of a constructor is that of its parent.
      5 ( 0.00%)                  rustc_hir::definitions::DefPathData::Ctor => self.item_name_from_def_id(DefId {
      .                               krate: def_id.krate,
      .                               index: def_key.parent.unwrap(),
      .                           }),
    146 ( 0.00%)                  _ => def_key.disambiguated_data.data.get_opt_name(),
      .                       }
      .                   }
    592 ( 0.00%)      }
      .           
      .               /// Look up the name of an item across crates. This does not look at HIR.
      .               ///
      .               /// When possible, this function should be used for cross-crate lookups over
      .               /// [`opt_item_name`] to avoid invalidating the incremental cache. If you
      .               /// need to handle items without a name, or HIR items that will not be
      .               /// serialized cross-crate, or if you need the span of the item, use
      .               /// [`opt_item_name`] instead.
      .               ///
      .               /// [`opt_item_name`]: Self::opt_item_name
    511 ( 0.00%)      pub fn item_name(self, id: DefId) -> Symbol {
      .                   // Look at cross-crate items first to avoid invalidating the incremental cache
      .                   // unless we have to.
     73 ( 0.00%)          self.item_name_from_def_id(id).unwrap_or_else(|| {
      .                       bug!("item_name: no name for {:?}", self.def_path(id));
      .                   })
    365 ( 0.00%)      }
      .           
      .               /// Look up the name and span of an item or [`Node`].
      .               ///
      .               /// See [`item_name`][Self::item_name] for more information.
      .               pub fn opt_item_name(self, def_id: DefId) -> Option<Ident> {
      .                   // Look at the HIR first so the span will be correct if this is a local item.
      .                   self.item_name_from_hir(def_id)
      .                       .or_else(|| self.item_name_from_def_id(def_id).map(Ident::with_dummy_span))
      .               }
      .           
 21,260 ( 0.00%)      pub fn opt_associated_item(self, def_id: DefId) -> Option<&'tcx AssocItem> {
  8,504 ( 0.00%)          if let DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy = self.def_kind(def_id) {
      .                       Some(self.associated_item(def_id))
      .                   } else {
      .                       None
      .                   }
 19,134 ( 0.00%)      }
      .           
     29 ( 0.00%)      pub fn field_index(self, hir_id: hir::HirId, typeck_results: &TypeckResults<'_>) -> usize {
      .                   typeck_results.field_indices().get(hir_id).cloned().expect("no index for a field")
     58 ( 0.00%)      }
      .           
      .               pub fn find_field_index(self, ident: Ident, variant: &VariantDef) -> Option<usize> {
      .                   variant
      .                       .fields
      .                       .iter()
      .                       .position(|field| self.hygienic_eq(ident, field.ident(self), variant.def_id))
      .               }
      .           
-- line 1973 ----------------------------------------
-- line 2042 ----------------------------------------
      .           
      .                       debug!("impls_are_allowed_to_overlap({:?}, {:?}) = None", def_id1, def_id2);
      .                       None
      .                   }
      .               }
      .           
      .               /// Returns `ty::VariantDef` if `res` refers to a struct,
      .               /// or variant or their constructors, panics otherwise.
     42 ( 0.00%)      pub fn expect_variant_res(self, res: Res) -> &'tcx VariantDef {
     72 ( 0.00%)          match res {
      .                       Res::Def(DefKind::Variant, did) => {
      .                           let enum_did = self.parent(did).unwrap();
      .                           self.adt_def(enum_did).variant_with_id(did)
      .                       }
      .                       Res::Def(DefKind::Struct | DefKind::Union, did) => self.adt_def(did).non_enum_variant(),
      .                       Res::Def(DefKind::Ctor(CtorOf::Variant, ..), variant_ctor_did) => {
      .                           let variant_did = self.parent(variant_ctor_did).unwrap();
      .                           let enum_did = self.parent(variant_did).unwrap();
-- line 2059 ----------------------------------------
-- line 2060 ----------------------------------------
      .                           self.adt_def(enum_did).variant_with_ctor_id(variant_ctor_did)
      .                       }
      .                       Res::Def(DefKind::Ctor(CtorOf::Struct, ..), ctor_did) => {
      .                           let struct_did = self.parent(ctor_did).expect("struct ctor has no parent");
      .                           self.adt_def(struct_did).non_enum_variant()
      .                       }
      .                       _ => bug!("expect_variant_res used with unexpected res {:?}", res),
      .                   }
     48 ( 0.00%)      }
      .           
      .               /// Returns the possibly-auto-generated MIR of a `(DefId, Subst)` pair.
  3,000 ( 0.00%)      pub fn instance_mir(self, instance: ty::InstanceDef<'tcx>) -> &'tcx Body<'tcx> {
    750 ( 0.00%)          match instance {
  3,750 ( 0.00%)              ty::InstanceDef::Item(def) => match self.def_kind(def.did) {
      .                           DefKind::Const
      .                           | DefKind::Static
      .                           | DefKind::AssocConst
      .                           | DefKind::Ctor(..)
      .                           | DefKind::AnonConst
      .                           | DefKind::InlineConst => self.mir_for_ctfe_opt_const_arg(def),
      .                           // If the caller wants `mir_for_ctfe` of a function they should not be using
      .                           // `instance_mir`, so we'll assume const fn also wants the optimized version.
      .                           _ => {
    375 ( 0.00%)                      assert_eq!(def.const_param_did, None);
      .                               self.optimized_mir(def.did)
      .                           }
      .                       },
      .                       ty::InstanceDef::VtableShim(..)
      .                       | ty::InstanceDef::ReifyShim(..)
      .                       | ty::InstanceDef::Intrinsic(..)
      .                       | ty::InstanceDef::FnPtrShim(..)
      .                       | ty::InstanceDef::Virtual(..)
      .                       | ty::InstanceDef::ClosureOnceShim { .. }
      .                       | ty::InstanceDef::DropGlue(..)
      .                       | ty::InstanceDef::CloneShim(..) => self.mir_shims(instance),
      .                   }
  3,375 ( 0.00%)      }
      .           
      .               /// Gets the attributes of a definition.
 28,270 ( 0.01%)      pub fn get_attrs(self, did: DefId) -> Attributes<'tcx> {
  8,481 ( 0.00%)          if let Some(did) = did.as_local() {
  7,614 ( 0.00%)              self.hir().attrs(self.hir().local_def_id_to_hir_id(did))
      .                   } else {
      .                       self.item_attrs(did)
      .                   }
 22,616 ( 0.00%)      }
      .           
      .               /// Determines whether an item is annotated with an attribute.
  2,544 ( 0.00%)      pub fn has_attr(self, did: DefId, attr: Symbol) -> bool {
  8,730 ( 0.00%)          self.sess.contains_name(&self.get_attrs(did), attr)
      .               }
      .           
      .               /// Determines whether an item is annotated with `doc(hidden)`.
     14 ( 0.00%)      pub fn is_doc_hidden(self, did: DefId) -> bool {
      2 ( 0.00%)          self.get_attrs(did)
      .                       .iter()
      2 ( 0.00%)              .filter_map(|attr| if attr.has_name(sym::doc) { attr.meta_item_list() } else { None })
      .                       .any(|items| items.iter().any(|item| item.has_name(sym::hidden)))
     16 ( 0.00%)      }
      .           
      .               /// Returns `true` if this is an `auto trait`.
  3,745 ( 0.00%)      pub fn trait_is_auto(self, trait_def_id: DefId) -> bool {
    535 ( 0.00%)          self.trait_def(trait_def_id).has_auto_impl
  4,280 ( 0.00%)      }
      .           
      .               /// Returns layout of a generator. Layout might be unavailable if the
      .               /// generator is tainted by errors.
      .               pub fn generator_layout(self, def_id: DefId) -> Option<&'tcx GeneratorLayout<'tcx>> {
      .                   self.optimized_mir(def_id).generator_layout()
      .               }
      .           
      .               /// Given the `DefId` of an impl, returns the `DefId` of the trait it implements.
      .               /// If it implements no trait, returns `None`.
    938 ( 0.00%)      pub fn trait_id_of_impl(self, def_id: DefId) -> Option<DefId> {
      .                   self.impl_trait_ref(def_id).map(|tr| tr.def_id)
  1,206 ( 0.00%)      }
      .           
      .               /// If the given defid describes a method belonging to an impl, returns the
      .               /// `DefId` of the impl that the method belongs to; otherwise, returns `None`.
    310 ( 0.00%)      pub fn impl_of_method(self, def_id: DefId) -> Option<DefId> {
    910 ( 0.00%)          self.opt_associated_item(def_id).and_then(|trait_item| match trait_item.container {
      .                       TraitContainer(_) => None,
      .                       ImplContainer(def_id) => Some(def_id),
      .                   })
    620 ( 0.00%)      }
      .           
      .               /// Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`
      .               /// with the name of the crate containing the impl.
      .               pub fn span_of_impl(self, impl_did: DefId) -> Result<Span, Symbol> {
      .                   if let Some(impl_did) = impl_did.as_local() {
      .                       Ok(self.def_span(impl_did))
      .                   } else {
      .                       Err(self.crate_name(impl_did.krate))
      .                   }
      .               }
      .           
      .               /// Hygienically compares a use-site name (`use_name`) for a field or an associated item with
      .               /// its supposed definition name (`def_name`). The method also needs `DefId` of the supposed
      .               /// definition's parent/scope to perform comparison.
  1,472 ( 0.00%)      pub fn hygienic_eq(self, use_name: Ident, def_name: Ident, def_parent_def_id: DefId) -> bool {
      .                   // We could use `Ident::eq` here, but we deliberately don't. The name
      .                   // comparison fails frequently, and we want to avoid the expensive
      .                   // `normalize_to_macros_2_0()` calls required for the span comparison whenever possible.
    184 ( 0.00%)          use_name.name == def_name.name
    546 ( 0.00%)              && use_name
      .                           .span
      .                           .ctxt()
      .                           .hygienic_eq(def_name.span.ctxt(), self.expn_that_defined(def_parent_def_id))
  1,472 ( 0.00%)      }
      .           
     36 ( 0.00%)      pub fn adjust_ident(self, mut ident: Ident, scope: DefId) -> Ident {
      8 ( 0.00%)          ident.span.normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope));
      8 ( 0.00%)          ident
     32 ( 0.00%)      }
      .           
  1,656 ( 0.00%)      pub fn adjust_ident_and_get_scope(
      .                   self,
      .                   mut ident: Ident,
      .                   scope: DefId,
      .                   block: hir::HirId,
      .               ) -> (Ident, DefId) {
    184 ( 0.00%)          let scope = ident
      .                       .span
      .                       .normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope))
      .                       .and_then(|actual_expansion| actual_expansion.expn_data().parent_module)
    736 ( 0.00%)              .unwrap_or_else(|| self.parent_module(block).to_def_id());
  1,104 ( 0.00%)          (ident, scope)
  1,656 ( 0.00%)      }
      .           
     28 ( 0.00%)      pub fn is_object_safe(self, key: DefId) -> bool {
      .                   self.object_safety_violations(key).is_empty()
     32 ( 0.00%)      }
      .           }
      .           
      .           /// Yields the parent function's `LocalDefId` if `def_id` is an `impl Trait` definition.
    990 ( 0.00%)  pub fn is_impl_trait_defn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<LocalDefId> {
    990 ( 0.00%)      let def_id = def_id.as_local()?;
    812 ( 0.00%)      if let Node::Item(item) = tcx.hir().get_by_def_id(def_id) {
    286 ( 0.00%)          if let hir::ItemKind::OpaqueTy(ref opaque_ty) = item.kind {
      .                       return match opaque_ty.origin {
      .                           hir::OpaqueTyOrigin::FnReturn(parent) | hir::OpaqueTyOrigin::AsyncFn(parent) => {
      .                               Some(parent)
      .                           }
      .                           hir::OpaqueTyOrigin::TyAlias => None,
      .                       };
      .                   }
      .               }
      .               None
  1,320 ( 0.00%)  }
      .           
      .           pub fn int_ty(ity: ast::IntTy) -> IntTy {
      .               match ity {
      .                   ast::IntTy::Isize => IntTy::Isize,
      .                   ast::IntTy::I8 => IntTy::I8,
      .                   ast::IntTy::I16 => IntTy::I16,
      .                   ast::IntTy::I32 => IntTy::I32,
      .                   ast::IntTy::I64 => IntTy::I64,
-- line 2216 ----------------------------------------
-- line 2224 ----------------------------------------
      .                   ast::UintTy::U8 => UintTy::U8,
      .                   ast::UintTy::U16 => UintTy::U16,
      .                   ast::UintTy::U32 => UintTy::U32,
      .                   ast::UintTy::U64 => UintTy::U64,
      .                   ast::UintTy::U128 => UintTy::U128,
      .               }
      .           }
      .           
      4 ( 0.00%)  pub fn float_ty(fty: ast::FloatTy) -> FloatTy {
      .               match fty {
      .                   ast::FloatTy::F32 => FloatTy::F32,
      .                   ast::FloatTy::F64 => FloatTy::F64,
      .               }
      4 ( 0.00%)  }
      .           
     34 ( 0.00%)  pub fn ast_int_ty(ity: IntTy) -> ast::IntTy {
      .               match ity {
      .                   IntTy::Isize => ast::IntTy::Isize,
      .                   IntTy::I8 => ast::IntTy::I8,
      .                   IntTy::I16 => ast::IntTy::I16,
      .                   IntTy::I32 => ast::IntTy::I32,
      .                   IntTy::I64 => ast::IntTy::I64,
      .                   IntTy::I128 => ast::IntTy::I128,
      .               }
     34 ( 0.00%)  }
      .           
      .           pub fn ast_uint_ty(uty: UintTy) -> ast::UintTy {
      .               match uty {
      .                   UintTy::Usize => ast::UintTy::Usize,
      .                   UintTy::U8 => ast::UintTy::U8,
      .                   UintTy::U16 => ast::UintTy::U16,
      .                   UintTy::U32 => ast::UintTy::U32,
      .                   UintTy::U64 => ast::UintTy::U64,
-- line 2256 ----------------------------------------
-- line 2262 ----------------------------------------
      .               closure::provide(providers);
      .               context::provide(providers);
      .               erase_regions::provide(providers);
      .               layout::provide(providers);
      .               util::provide(providers);
      .               print::provide(providers);
      .               super::util::bug::provide(providers);
      .               super::middle::provide(providers);
      8 ( 0.00%)      *providers = ty::query::Providers {
      .                   trait_impls_of: trait_def::trait_impls_of_provider,
      .                   type_uninhabited_from: inhabitedness::type_uninhabited_from,
      .                   const_param_default: consts::const_param_default,
      .                   vtable_allocation: vtable::vtable_allocation_provider,
      .                   ..*providers
      .               };
      1 ( 0.00%)  }
      .           
      .           /// A map for the local crate mapping each type to a vector of its
      .           /// inherent impls. This is not meant to be used outside of coherence;
      .           /// rather, you should request the vector for a specific type via
      .           /// `tcx.inherent_impls(def_id)` so as to minimize your dependencies
      .           /// (constructing this map requires touching the entire crate).
      .           #[derive(Clone, Debug, Default, HashStable)]
      .           pub struct CrateInherentImpls {
      .               pub inherent_impls: LocalDefIdMap<Vec<DefId>>,
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, HashStable)]
      .           pub struct SymbolName<'tcx> {
      .               /// `&str` gives a consistent ordering, which ensures reproducible builds.
  2,579 ( 0.00%)      pub name: &'tcx str,
      .           }
      .           
      .           impl<'tcx> SymbolName<'tcx> {
    840 ( 0.00%)      pub fn new(tcx: TyCtxt<'tcx>, name: &str) -> SymbolName<'tcx> {
      .                   SymbolName {
      .                       name: unsafe { str::from_utf8_unchecked(tcx.arena.alloc_slice(name.as_bytes())) },
      .                   }
  1,120 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> fmt::Display for SymbolName<'tcx> {
     89 ( 0.00%)      fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Display::fmt(&self.name, fmt)
      .               }
      .           }
      .           
      .           impl<'tcx> fmt::Debug for SymbolName<'tcx> {
      .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Display::fmt(&self.name, fmt)
      .               }
-- line 2312 ----------------------------------------

393,018 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 57 ----------------------------------------
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
      100 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
       50 ( 0.00%)              from_str_radix(src, radix)
      150 ( 0.00%)          }
        .           
        .                   /// Returns the number of ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[doc(alias = "popcount")]
        .                   #[doc(alias = "popcnt")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn count_ones(self) -> u32 {
   28,545 ( 0.01%)              intrinsics::ctpop(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of zeros in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
        .                   /// assert_eq!(n.leading_zeros(), 2);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn leading_zeros(self) -> u32 {
  102,967 ( 0.02%)              intrinsics::ctlz(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of trailing zeros in the binary representation
        .                   /// of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
        .                   /// assert_eq!(n.trailing_zeros(), 3);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn trailing_zeros(self) -> u32 {
   87,054 ( 0.02%)              intrinsics::cttz(self) as u32
        .                   }
        .           
        .                   /// Returns the number of leading ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn rotate_left(self, n: u32) -> Self {
1,775,014 ( 0.36%)              intrinsics::rotate_left(self, n as $SelfT)
        .                   }
        .           
        .                   /// Shifts the bits to the right by a specified amount, `n`,
        .                   /// wrapping the truncated bits to the beginning of the resulting
        .                   /// integer.
        .                   ///
        .                   /// Please note this isn't the same operation as the `>>` shifting operator!
        .                   ///
-- line 220 ----------------------------------------
-- line 456 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_add`.
  219,510 ( 0.04%)              unsafe { intrinsics::unchecked_add(self, rhs) }
        .                   }
        .           
        .                   /// Checked addition with a signed integer. Computes `self + rhs`,
        .                   /// returning `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_sub`.
    7,465 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
        .                   }
        .           
        .                   /// Checked integer multiplication. Computes `self * rhs`, returning
        .                   /// `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 596 ----------------------------------------
        .                                 without modifying the original"]
        .                   #[inline]
        .                   pub const fn checked_div(self, rhs: Self) -> Option<Self> {
        .                       if unlikely!(rhs == 0) {
        .                           None
        .                       } else {
        .                           // SAFETY: div by zero has been checked above and unsigned types have no other
        .                           // failure modes for division
      544 ( 0.00%)                  Some(unsafe { intrinsics::unchecked_div(self, rhs) })
        .                       }
        .                   }
        .           
        .                   /// Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning `None`
        .                   /// if `rhs == 0`.
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 612 ----------------------------------------
-- line 1035 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_add(self, rhs: Self) -> Self {
   22,621 ( 0.00%)              intrinsics::saturating_add(self, rhs)
        .                   }
        .           
        .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
      795 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
        .                   }
        .           
        .                   /// Saturating integer multiplication. Computes `self * rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
  857,822 ( 0.18%)              intrinsics::wrapping_add(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) addition with a signed integer. Computes
        .                   /// `self + rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
  404,953 ( 0.08%)              intrinsics::wrapping_sub(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) multiplication. Computes `self *
        .                   /// rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
        .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
1,171,099 ( 0.24%)              intrinsics::wrapping_mul(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) division. Computes `self / rhs`.
        .                   /// Wrapped division on unsigned types is just normal division.
        .                   /// There's no way wrapping could ever happen.
        .                   /// This function exists, so that all operations
        .                   /// are accounted for in the wrapping operations.
        .                   ///
-- line 1256 ----------------------------------------
-- line 1492 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
  141,950 ( 0.03%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates `self + rhs + carry` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
        .                   /// additional bit of overflow. This allows for chaining together multiple additions
        .                   /// to create "big integers" which represent larger values.
-- line 1508 ----------------------------------------
-- line 1588 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
   57,988 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
        .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
        .                   /// to create "big integers" which represent larger values.
-- line 1604 ----------------------------------------
-- line 1674 ----------------------------------------
        .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                     without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
  240,949 ( 0.05%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates the divisor when `self` is divided by `rhs`.
        .                   ///
        .                   /// Returns a tuple of the divisor along with a boolean indicating
        .                   /// whether an arithmetic overflow would occur. Note that for unsigned
        .                   /// integers overflow never occurs, so the second value is always
-- line 1690 ----------------------------------------
-- line 2132 ----------------------------------------
        .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
        .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
        .                   /// ```
        .                   #[must_use]
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
        .                   #[inline(always)]
        .                   pub const fn is_power_of_two(self) -> bool {
       60 ( 0.00%)              self.count_ones() == 1
        .                   }
        .           
        .                   // Returns one less than next power of two.
        .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
        .                   //
        .                   // 8u8.one_less_than_next_power_of_two() == 7
        .                   // 6u8.one_less_than_next_power_of_two() == 7
        .                   //
        .                   // This method cannot overflow, as in the `next_power_of_two`
        .                   // overflow cases it instead ends up returning the maximum value
        .                   // of the type, and can return 0 for 0.
        .                   #[inline]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   const fn one_less_than_next_power_of_two(self) -> Self {
    1,216 ( 0.00%)              if self <= 1 { return 0; }
        .           
    3,628 ( 0.00%)              let p = self - 1;
        .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
        .                       // That means the shift is always in-bounds, and some processors
        .                       // (such as intel pre-haswell) have more efficient ctlz
        .                       // intrinsics when the argument is non-zero.
   10,783 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    3,705 ( 0.00%)              <$SelfT>::MAX >> z
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `self`.
        .                   ///
        .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
        .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
        .                   /// release mode (the only situation in which method can return 0).
        .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        .                   #[rustc_inherit_overflow_checks]
        .                   pub const fn next_power_of_two(self) -> Self {
    6,028 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `n`. If
        .                   /// the next power of two is greater than the type's maximum value,
        .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 2195 ----------------------------------------

   21,899 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 70 ----------------------------------------
        .           
        .                   impl<'a, T> $name<'a, T> {
        .                       // Helper function for creating a slice from the iterator.
        .                       #[inline(always)]
        .                       fn make_slice(&self) -> &'a [T] {
        .                           // SAFETY: the iterator was created from a slice with pointer
        .                           // `self.ptr` and length `len!(self)`. This guarantees that all
        .                           // the prerequisites for `from_raw_parts` are fulfilled.
    7,031 ( 0.00%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
        .                       }
        .           
        .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
        .                       // returning the old start.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
        .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               let old = self.ptr.as_ptr();
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
   47,889 ( 0.01%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
        .                               old
        .                           }
        .                       }
        .           
        .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
        .                       // returning the new end.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
        .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
        .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
       97 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
        .                               self.end
        .                           }
        .                       }
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<T> ExactSizeIterator for $name<'_, T> {
        .                       #[inline(always)]
        .                       fn len(&self) -> usize {
   84,670 ( 0.02%)                  len!(self)
        .                       }
        .           
        .                       #[inline(always)]
        .                       fn is_empty(&self) -> bool {
        .                           is_empty!(self)
        .                       }
        .                   }
        .           
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
        .                       fn next(&mut self) -> Option<$elem> {
        .                           // could be implemented with slices, but this avoids bounds checks
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer
        .                           // must be non-null, and slices over non-ZSTs must also have a
        .                           // non-null end pointer. The call to `next_unchecked!` is safe
        .                           // since we check if the iterator is empty first.
        .                           unsafe {
   26,193 ( 0.01%)                      assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
    6,277 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
5,085,589 ( 1.04%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
       12 ( 0.00%)                          Some(next_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
        .                       fn size_hint(&self) -> (usize, Option<usize>) {
  105,125 ( 0.02%)                  let exact = len!(self);
        .                           (exact, Some(exact))
        .                       }
        .           
        .                       #[inline]
        .                       fn count(self) -> usize {
        .                           len!(self)
        .                       }
        .           
        .                       #[inline]
        .                       fn nth(&mut self, n: usize) -> Option<$elem> {
    1,190 ( 0.00%)                  if n >= len!(self) {
        .                               // This iterator is now empty.
        .                               if mem::size_of::<T>() == 0 {
        .                                   // We have to do it this way as `ptr` may never be 0, but `end`
        .                                   // could be (due to wrapping).
        .                                   self.end = self.ptr.as_ptr();
        .                               } else {
        .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
        .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
        .                       // faster to compile.
        .                       #[inline]
        .                       fn for_each<F>(mut self, mut f: F)
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item),
        .                       {
        .                           while let Some(x) = self.next() {
      366 ( 0.00%)                      f(x);
        .                           }
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn all<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
       59 ( 0.00%)                  while let Some(x) = self.next() {
    2,480 ( 0.00%)                      if !f(x) {
        .                                   return false;
        .                               }
        .                           }
        .                           true
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        8 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
   30,946 ( 0.01%)                  while let Some(x) = self.next() {
  191,585 ( 0.04%)                      if f(x) {
        .                                   return true;
        .                               }
        .                           }
        .                           false
        8 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
        .                       where
        .                           Self: Sized,
        .                           P: FnMut(&Self::Item) -> bool,
        .                       {
    7,527 ( 0.00%)                  while let Some(x) = self.next() {
    7,285 ( 0.00%)                      if predicate(&x) {
        .                                   return Some(x);
        .                               }
        .                           }
        .                           None
       64 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> Option<B>,
        .                       {
   21,705 ( 0.00%)                  while let Some(x) = self.next() {
   24,302 ( 0.00%)                      if let Some(y) = f(x) {
    1,829 ( 0.00%)                          return Some(y);
        .                               }
        .                           }
        .                           None
    1,010 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       #[rustc_inherit_overflow_checks]
        .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           Self: Sized,
        .                           P: FnMut(Self::Item) -> bool,
        .                       {
        .                           let n = len!(self);
        .                           let mut i = 0;
        .                           while let Some(x) = self.next() {
   20,703 ( 0.00%)                      if predicate(x) {
        .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
        .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                               i += 1;
        .                           }
        .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           P: FnMut(Self::Item) -> bool,
        .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
        .                       {
        .                           let n = len!(self);
        .                           let mut i = n;
    5,860 ( 0.00%)                  while let Some(x) = self.next_back() {
   89,194 ( 0.02%)                      i -= 1;
   75,015 ( 0.02%)                      if predicate(x) {
        .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
        .                                   // and is only decreasing.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                           }
        .                           None
        .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
        .                           // the returned references is guaranteed to refer to an element
        .                           // of the slice and thus guaranteed to be valid.
        .                           //
        .                           // Also note that the caller also guarantees that we're never
        .                           // called with the same index again, and that no other methods
        .                           // that will access this subslice are called, so it is valid
        .                           // for the returned reference to be mutable in the case of
        .                           // `IterMut`
   11,371 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
        .                       }
        .           
        .                       $($extra)*
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
        .                       #[inline]
-- line 348 ----------------------------------------
-- line 349 ----------------------------------------
        .                       fn next_back(&mut self) -> Option<$elem> {
        .                           // could be implemented with slices, but this avoids bounds checks
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
        .                           // and slices over non-ZSTs must also have a non-null end pointer.
        .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
        .                           // empty first.
        .                           unsafe {
      153 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
      158 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
  105,000 ( 0.02%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        .                                   Some(next_back_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
-- line 369 ----------------------------------------

  827,929 ( 0.17%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 91 ----------------------------------------
      .           mod late;
      .           mod macros;
      .           
      .           enum Weak {
      .               Yes,
      .               No,
      .           }
      .           
    288 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Debug)]
      .           pub enum Determinacy {
      .               Determined,
      .               Undetermined,
      .           }
      .           
      .           impl Determinacy {
      .               fn determined(determined: bool) -> Determinacy {
      .                   if determined { Determinacy::Determined } else { Determinacy::Undetermined }
    192 ( 0.00%)      }
      .           }
      .           
      .           /// A specific scope in which a name can be looked up.
      .           /// This enum is currently used only for early resolution (imports and macros),
      .           /// but not for late resolution yet.
      .           #[derive(Clone, Copy)]
      .           enum Scope<'a> {
      .               DeriveHelpers(LocalExpnId),
-- line 116 ----------------------------------------
-- line 157 ----------------------------------------
      .               macro_rules: MacroRulesScopeRef<'a>,
      .               derives: &'a [ast::Path],
      .           }
      .           
      .           impl<'a> ParentScope<'a> {
      .               /// Creates a parent scope with the passed argument used as the module scope component,
      .               /// and other scope components set to default empty values.
      .               pub fn module(module: Module<'a>, resolver: &Resolver<'a>) -> ParentScope<'a> {
      8 ( 0.00%)          ParentScope {
      .                       module,
      .                       expansion: LocalExpnId::ROOT,
  5,930 ( 0.00%)              macro_rules: resolver.arenas.alloc_macro_rules_scope(MacroRulesScope::Empty),
      .                       derives: &[],
      .                   }
      .               }
      .           }
      .           
      .           #[derive(Copy, Debug, Clone)]
      .           enum ImplTraitContext {
      .               Existential,
-- line 176 ----------------------------------------
-- line 278 ----------------------------------------
      .               FailedToResolve(Span, String, Option<Suggestion>),
      .               ExpectedFound(Span, String, Res),
      .               Indeterminate(Span),
      .               ModuleOnly(Span),
      .           }
      .           
      .           /// A minimal representation of a path segment. We use this in resolve because we synthesize 'path
      .           /// segments' which don't have the rest of an AST or HIR `PathSegment`.
    130 ( 0.00%)  #[derive(Clone, Copy, Debug)]
      .           pub struct Segment {
      .               ident: Ident,
      .               id: Option<NodeId>,
      .               /// Signals whether this `PathSegment` has generic arguments. Used to avoid providing
      .               /// nonsensical suggestions.
      .               has_generic_args: bool,
      .           }
      .           
-- line 294 ----------------------------------------
-- line 303 ----------------------------------------
      .           
      .               fn names_to_string(segments: &[Segment]) -> String {
      .                   names_to_string(&segments.iter().map(|seg| seg.ident.name).collect::<Vec<_>>())
      .               }
      .           }
      .           
      .           impl<'a> From<&'a ast::PathSegment> for Segment {
      .               fn from(seg: &'a ast::PathSegment) -> Segment {
     50 ( 0.00%)          Segment { ident: seg.ident, id: Some(seg.id), has_generic_args: seg.args.is_some() }
      .               }
      .           }
      .           
      .           struct UsePlacementFinder {
      .               target_module: NodeId,
      .               span: Option<Span>,
      .               found_use: bool,
      .           }
-- line 319 ----------------------------------------
-- line 391 ----------------------------------------
      .           #[derive(Debug)]
      .           enum LexicalScopeBinding<'a> {
      .               Item(&'a NameBinding<'a>),
      .               Res(Res),
      .           }
      .           
      .           impl<'a> LexicalScopeBinding<'a> {
      .               fn res(self) -> Res {
    212 ( 0.00%)          match self {
      .                       LexicalScopeBinding::Item(binding) => binding.res(),
    318 ( 0.00%)              LexicalScopeBinding::Res(res) => res,
      .                   }
      .               }
      .           }
      .           
      .           #[derive(Copy, Clone, Debug)]
      .           enum ModuleOrUniformRoot<'a> {
      .               /// Regular module.
      .               Module(Module<'a>),
-- line 409 ----------------------------------------
-- line 418 ----------------------------------------
      .               /// Virtual module that denotes resolution in current scope.
      .               /// Used only for resolving single-segment imports. The reason it exists is that import paths
      .               /// are always split into two parts, the first of which should be some kind of module.
      .               CurrentScope,
      .           }
      .           
      .           impl ModuleOrUniformRoot<'_> {
      .               fn same_def(lhs: Self, rhs: Self) -> bool {
    120 ( 0.00%)          match (lhs, rhs) {
      .                       (ModuleOrUniformRoot::Module(lhs), ModuleOrUniformRoot::Module(rhs)) => {
      .                           ptr::eq(lhs, rhs)
      .                       }
      .                       (
      .                           ModuleOrUniformRoot::CrateRootAndExternPrelude,
      .                           ModuleOrUniformRoot::CrateRootAndExternPrelude,
      .                       )
      .                       | (ModuleOrUniformRoot::ExternPrelude, ModuleOrUniformRoot::ExternPrelude)
-- line 434 ----------------------------------------
-- line 491 ----------------------------------------
      .           /// A key that identifies a binding in a given `Module`.
      .           ///
      .           /// Multiple bindings in the same module can have the same key (in a valid
      .           /// program) if all but one of them come from glob imports.
      .           #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]
      .           struct BindingKey {
      .               /// The identifier for the binding, aways the `normalize_to_macros_2_0` version of the
      .               /// identifier.
 85,536 ( 0.02%)      ident: Ident,
 26,526 ( 0.01%)      ns: Namespace,
      .               /// 0 if ident is not `_`, otherwise a value that's unique to the specific
      .               /// `_` in the expanded AST that introduced this binding.
 18,405 ( 0.00%)      disambiguator: u32,
      .           }
      .           
      .           type Resolutions<'a> = RefCell<FxIndexMap<BindingKey, &'a RefCell<NameResolution<'a>>>>;
      .           
      .           /// One node in the tree of modules.
      .           ///
      .           /// Note that a "module" in resolve is broader than a `mod` that you declare in Rust code. It may be one of these:
      .           ///
-- line 511 ----------------------------------------
-- line 551 ----------------------------------------
      .           impl<'a> ModuleData<'a> {
      .               fn new(
      .                   parent: Option<Module<'a>>,
      .                   kind: ModuleKind,
      .                   expansion: ExpnId,
      .                   span: Span,
      .                   no_implicit_prelude: bool,
      .               ) -> Self {
  2,366 ( 0.00%)          let is_foreign = match kind {
      .                       ModuleKind::Def(_, def_id, _) => !def_id.is_local(),
      .                       ModuleKind::Block(_) => false,
      .                   };
  7,774 ( 0.00%)          ModuleData {
      .                       parent,
      .                       kind,
      .                       lazy_resolutions: Default::default(),
      .                       populate_on_access: Cell::new(is_foreign),
      .                       unexpanded_invocations: Default::default(),
      .                       no_implicit_prelude,
      .                       glob_importers: RefCell::new(Vec::new()),
      .                       globs: RefCell::new(Vec::new()),
      .                       traits: RefCell::new(None),
      .                       span,
      .                       expansion,
      .                   }
      .               }
      .           
    152 ( 0.00%)      fn for_each_child<R, F>(&'a self, resolver: &mut R, mut f: F)
      .               where
      .                   R: AsMut<Resolver<'a>>,
      .                   F: FnMut(&mut R, Ident, Namespace, &'a NameBinding<'a>),
      .               {
     59 ( 0.00%)          for (key, name_resolution) in resolver.as_mut().resolutions(self).borrow().iter() {
 22,028 ( 0.00%)              if let Some(binding) = name_resolution.borrow().binding {
 15,150 ( 0.00%)                  f(resolver, key.ident, key.ns, binding);
      .                       }
      .                   }
    120 ( 0.00%)      }
      .           
      .               /// This modifies `self` in place. The traits will be stored in `self.traits`.
      .               fn ensure_traits<R>(&'a self, resolver: &mut R)
      .               where
      .                   R: AsMut<Resolver<'a>>,
      .               {
      .                   let mut traits = self.traits.borrow_mut();
    241 ( 0.00%)          if traits.is_none() {
      .                       let mut collected_traits = Vec::new();
      .                       self.for_each_child(resolver, |_, name, ns, binding| {
    152 ( 0.00%)                  if ns != TypeNS {
      .                               return;
      .                           }
    476 ( 0.00%)                  if let Res::Def(DefKind::Trait | DefKind::TraitAlias, _) = binding.res() {
      .                               collected_traits.push((name, binding))
      .                           }
      .                       });
     36 ( 0.00%)              *traits = Some(collected_traits.into_boxed_slice());
      .                   }
      .               }
      .           
      .               fn res(&self) -> Option<Res> {
  3,423 ( 0.00%)          match self.kind {
  5,600 ( 0.00%)              ModuleKind::Def(kind, def_id, _) => Some(Res::Def(kind, def_id)),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               // Public for rustdoc.
      .               pub fn def_id(&self) -> DefId {
      .                   self.opt_def_id().expect("`ModuleData::def_id` is called on a block module")
      .               }
      .           
      .               fn opt_def_id(&self) -> Option<DefId> {
  1,305 ( 0.00%)          match self.kind {
      .                       ModuleKind::Def(_, def_id, _) => Some(def_id),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               // `self` resolves to the first module ancestor that `is_normal`.
      .               fn is_normal(&self) -> bool {
    597 ( 0.00%)          matches!(self.kind, ModuleKind::Def(DefKind::Mod, _, _))
      .               }
      .           
      .               fn is_trait(&self) -> bool {
      3 ( 0.00%)          matches!(self.kind, ModuleKind::Def(DefKind::Trait, _, _))
      .               }
      .           
      .               fn nearest_item_scope(&'a self) -> Module<'a> {
  2,012 ( 0.00%)          match self.kind {
      .                       ModuleKind::Def(DefKind::Enum | DefKind::Trait, ..) => {
      1 ( 0.00%)                  self.parent.expect("enum or trait module without a parent")
      .                       }
      .                       _ => self,
      .                   }
      .               }
      .           
      .               /// The [`DefId`] of the nearest `mod` item ancestor (which may be this module).
      .               /// This may be the crate root.
 10,862 ( 0.00%)      fn nearest_parent_mod(&self) -> DefId {
 43,414 ( 0.01%)          match self.kind {
 21,690 ( 0.00%)              ModuleKind::Def(DefKind::Mod, def_id, _) => def_id,
     34 ( 0.00%)              _ => self.parent.expect("non-root module without parent").nearest_parent_mod(),
      .                   }
 21,724 ( 0.00%)      }
      .           
      .               fn is_ancestor_of(&self, mut other: &Self) -> bool {
      .                   while !ptr::eq(self, other) {
      .                       if let Some(parent) = other.parent {
      .                           other = parent;
      .                       } else {
      .                           return false;
      .                       }
-- line 662 ----------------------------------------
-- line 773 ----------------------------------------
      .               b1: &'a NameBinding<'a>,
      .               b2: &'a NameBinding<'a>,
      .               misc1: AmbiguityErrorMisc,
      .               misc2: AmbiguityErrorMisc,
      .           }
      .           
      .           impl<'a> NameBinding<'a> {
      .               fn module(&self) -> Option<Module<'a>> {
 19,257 ( 0.00%)          match self.kind {
  3,632 ( 0.00%)              NameBindingKind::Module(module) => Some(module),
     82 ( 0.00%)              NameBindingKind::Import { binding, .. } => binding.module(),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn res(&self) -> Res {
224,458 ( 0.05%)          match self.kind {
140,475 ( 0.03%)              NameBindingKind::Res(res, _) => res,
  1,472 ( 0.00%)              NameBindingKind::Module(module) => module.res().unwrap(),
 20,315 ( 0.00%)              NameBindingKind::Import { binding, .. } => binding.res(),
      .                   }
      .               }
      .           
      .               fn is_ambiguity(&self) -> bool {
 10,092 ( 0.00%)          self.ambiguity.is_some()
 10,118 ( 0.00%)              || match self.kind {
  5,059 ( 0.00%)                  NameBindingKind::Import { binding, .. } => binding.is_ambiguity(),
      .                           _ => false,
      .                       }
      .               }
      .           
      .               fn is_possibly_imported_variant(&self) -> bool {
      .                   match self.kind {
      .                       NameBindingKind::Import { binding, .. } => binding.is_possibly_imported_variant(),
      .                       NameBindingKind::Res(
-- line 807 ----------------------------------------
-- line 822 ----------------------------------------
      .                           kind: ModuleKind::Def(DefKind::Mod, def_id, _),
      .                           ..
      .                       }) => def_id.index == CRATE_DEF_INDEX,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn is_import(&self) -> bool {
 10,100 ( 0.00%)          matches!(self.kind, NameBindingKind::Import { .. })
      .               }
      .           
      .               fn is_glob_import(&self) -> bool {
 82,824 ( 0.02%)          match self.kind {
 24,926 ( 0.01%)              NameBindingKind::Import { import, .. } => import.is_glob(),
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn is_importable(&self) -> bool {
    104 ( 0.00%)          !matches!(
      .                       self.res(),
      .                       Res::Def(DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy, _)
      .                   )
      .               }
      .           
      .               fn is_macro_def(&self) -> bool {
     19 ( 0.00%)          matches!(self.kind, NameBindingKind::Res(Res::Def(DefKind::Macro(..), _), _))
      .               }
      .           
      .               fn macro_kind(&self) -> Option<MacroKind> {
      .                   self.res().macro_kind()
      .               }
      .           
      .               // Suppose that we resolved macro invocation with `invoc_parent_expansion` to binding `binding`
      .               // at some expansion round `max(invoc, binding)` when they both emerged from macros.
-- line 856 ----------------------------------------
-- line 1065 ----------------------------------------
      .               /// they are declared in the static array generated by proc_macro_harness.
      .               proc_macros: Vec<NodeId>,
      .               confused_type_with_std_module: FxHashMap<Span, Span>,
      .           
      .               access_levels: AccessLevels,
      .           }
      .           
      .           /// Nothing really interesting here; it just provides memory for the rest of the crate.
      7 ( 0.00%)  #[derive(Default)]
      .           pub struct ResolverArenas<'a> {
      .               modules: TypedArena<ModuleData<'a>>,
      .               local_modules: RefCell<Vec<Module<'a>>>,
      .               imports: TypedArena<Import<'a>>,
      .               name_resolutions: TypedArena<RefCell<NameResolution<'a>>>,
      .               ast_paths: TypedArena<ast::Path>,
      .               dropless: DroplessArena,
      .           }
      .           
      .           impl<'a> ResolverArenas<'a> {
  4,394 ( 0.00%)      fn new_module(
      .                   &'a self,
      .                   parent: Option<Module<'a>>,
      .                   kind: ModuleKind,
      .                   expn_id: ExpnId,
      .                   span: Span,
      .                   no_implicit_prelude: bool,
      .                   module_map: &mut FxHashMap<DefId, Module<'a>>,
      .               ) -> Module<'a> {
      .                   let module =
      .                       self.modules.alloc(ModuleData::new(parent, kind, expn_id, span, no_implicit_prelude));
      .                   let def_id = module.opt_def_id();
  1,014 ( 0.00%)          if def_id.map_or(true, |def_id| def_id.is_local()) {
      .                       self.local_modules.borrow_mut().push(module);
      .                   }
    338 ( 0.00%)          if let Some(def_id) = def_id {
      .                       module_map.insert(def_id, module);
      .                   }
      .                   module
  3,042 ( 0.00%)      }
      .               fn local_modules(&'a self) -> std::cell::Ref<'a, Vec<Module<'a>>> {
      .                   self.local_modules.borrow()
      .               }
      .               fn alloc_name_binding(&'a self, name_binding: NameBinding<'a>) -> &'a NameBinding<'a> {
      .                   self.dropless.alloc(name_binding)
      .               }
     35 ( 0.00%)      fn alloc_import(&'a self, import: Import<'a>) -> &'a Import<'_> {
    800 ( 0.00%)          self.imports.alloc(import)
     35 ( 0.00%)      }
      .               fn alloc_name_resolution(&'a self) -> &'a RefCell<NameResolution<'a>> {
 11,293 ( 0.00%)          self.name_resolutions.alloc(Default::default())
      .               }
      .               fn alloc_macro_rules_scope(&'a self, scope: MacroRulesScope<'a>) -> MacroRulesScopeRef<'a> {
      .                   PtrKey(self.dropless.alloc(Cell::new(scope)))
      .               }
      .               fn alloc_macro_rules_binding(
      .                   &'a self,
      .                   binding: MacroRulesBinding<'a>,
      .               ) -> &'a MacroRulesBinding<'a> {
-- line 1122 ----------------------------------------
-- line 1133 ----------------------------------------
      .           impl<'a> AsMut<Resolver<'a>> for Resolver<'a> {
      .               fn as_mut(&mut self) -> &mut Resolver<'a> {
      .                   self
      .               }
      .           }
      .           
      .           impl<'a, 'b> DefIdTree for &'a Resolver<'b> {
      .               fn parent(self, id: DefId) -> Option<DefId> {
  5,155 ( 0.00%)          match id.as_local() {
      .                       Some(id) => self.definitions.def_key(id).parent,
      .                       None => self.cstore().def_key(id).parent,
      .                   }
      .                   .map(|index| DefId { index, ..id })
      .               }
      .           }
      .           
      .           /// This interface is used through the AST→HIR step, to embed full paths into the HIR. After that
      .           /// the resolver is no longer needed as all the relevant information is inline.
      .           impl ResolverAstLowering for Resolver<'_> {
      .               fn def_key(&mut self, id: DefId) -> DefKey {
      .                   if let Some(id) = id.as_local() {
      .                       self.definitions().def_key(id)
      .                   } else {
    500 ( 0.00%)              self.cstore().def_key(id)
      .                   }
      .               }
      .           
      .               #[inline]
      .               fn def_span(&self, id: LocalDefId) -> Span {
      .                   self.definitions.def_span(id)
      .               }
      .           
  1,818 ( 0.00%)      fn item_generics_num_lifetimes(&self, def_id: DefId) -> usize {
    763 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
    230 ( 0.00%)              self.item_generics_num_lifetimes[&def_id]
      .                   } else {
    584 ( 0.00%)              self.cstore().item_generics_num_lifetimes(def_id, self.session)
      .                   }
    920 ( 0.00%)      }
      .           
    146 ( 0.00%)      fn legacy_const_generic_args(&mut self, expr: &Expr) -> Option<Vec<usize>> {
     73 ( 0.00%)          self.legacy_const_generic_args(expr)
    219 ( 0.00%)      }
      .           
  1,954 ( 0.00%)      fn get_partial_res(&self, id: NodeId) -> Option<PartialRes> {
      .                   self.partial_res_map.get(&id).cloned()
  5,862 ( 0.00%)      }
      .           
    240 ( 0.00%)      fn get_import_res(&mut self, id: NodeId) -> PerNS<Option<Res>> {
     60 ( 0.00%)          self.import_res_map.get(&id).cloned().unwrap_or_default()
    300 ( 0.00%)      }
      .           
      .               fn get_label_res(&mut self, id: NodeId) -> Option<NodeId> {
      .                   self.label_res_map.get(&id).cloned()
      .               }
      .           
      .               fn definitions(&mut self) -> &mut Definitions {
    204 ( 0.00%)          &mut self.definitions
    204 ( 0.00%)      }
      .           
  1,644 ( 0.00%)      fn create_stable_hashing_context(&self) -> StableHashingContext<'_> {
  2,615 ( 0.00%)          StableHashingContext::new(self.session, &self.definitions, self.crate_loader.cstore())
  2,055 ( 0.00%)      }
      .           
      .               fn lint_buffer(&mut self) -> &mut LintBuffer {
      .                   &mut self.lint_buffer
      .               }
      .           
      .               fn next_node_id(&mut self) -> NodeId {
      .                   self.next_node_id()
      .               }
      .           
 12,132 ( 0.00%)      fn take_trait_map(&mut self, node: NodeId) -> Option<Vec<TraitCandidate>> {
      .                   self.trait_map.remove(&node)
 12,132 ( 0.00%)      }
      .           
 12,054 ( 0.00%)      fn opt_local_def_id(&self, node: NodeId) -> Option<LocalDefId> {
  2,491 ( 0.00%)          self.node_id_to_def_id.get(&node).copied()
 12,054 ( 0.00%)      }
      .           
  1,076 ( 0.00%)      fn local_def_id(&self, node: NodeId) -> LocalDefId {
      .                   self.opt_local_def_id(node).unwrap_or_else(|| panic!("no entry for node id: `{:?}`", node))
  1,076 ( 0.00%)      }
      .           
      .               fn def_path_hash(&self, def_id: DefId) -> DefPathHash {
      .                   match def_id.as_local() {
      .                       Some(def_id) => self.definitions.def_path_hash(def_id),
      .                       None => self.cstore().def_path_hash(def_id),
      .                   }
      .               }
      .           
      .               /// Adds a definition with a parent definition.
  6,045 ( 0.00%)      fn create_def(
      .                   &mut self,
      .                   parent: LocalDefId,
      .                   node_id: ast::NodeId,
      .                   data: DefPathData,
      .                   expn_id: ExpnId,
      .                   span: Span,
      .               ) -> LocalDefId {
    806 ( 0.00%)          assert!(
    806 ( 0.00%)              !self.node_id_to_def_id.contains_key(&node_id),
      .                       "adding a def'n for node-id {:?} and data {:?} but a previous def'n exists: {:?}",
      .                       node_id,
      .                       data,
      .                       self.definitions.def_key(self.node_id_to_def_id[&node_id]),
      .                   );
      .           
      .                   // Find the next free disambiguator for this key.
    403 ( 0.00%)          let next_disambiguator = &mut self.next_disambiguator;
      .                   let next_disambiguator = |parent, data| {
  2,015 ( 0.00%)              let next_disamb = next_disambiguator.entry((parent, data)).or_insert(0);
    403 ( 0.00%)              let disambiguator = *next_disamb;
    403 ( 0.00%)              *next_disamb = next_disamb.checked_add(1).expect("disambiguator overflow");
      .                       disambiguator
      .                   };
      .           
  4,030 ( 0.00%)          let def_id = self.definitions.create_def(parent, data, expn_id, next_disambiguator, span);
      .           
      .                   // Some things for which we allocate `LocalDefId`s don't correspond to
      .                   // anything in the AST, so they don't have a `NodeId`. For these cases
      .                   // we don't need a mapping from `NodeId` to `LocalDefId`.
  1,209 ( 0.00%)          if node_id != ast::DUMMY_NODE_ID {
      .                       debug!("create_def: def_id_to_node_id[{:?}] <-> {:?}", def_id, node_id);
      .                       self.node_id_to_def_id.insert(node_id, def_id);
      .                   }
  1,209 ( 0.00%)          assert_eq!(self.def_id_to_node_id.push(node_id), def_id);
      .           
      .                   def_id
  3,627 ( 0.00%)      }
      .           }
      .           
      .           impl<'a> Resolver<'a> {
     16 ( 0.00%)      pub fn new(
      .                   session: &'a Session,
      .                   krate: &Crate,
      .                   crate_name: &str,
      .                   metadata_loader: Box<MetadataLoaderDyn>,
      .                   arenas: &'a ResolverArenas<'a>,
      .               ) -> Resolver<'a> {
      .                   let root_def_id = CRATE_DEF_ID.to_def_id();
      .                   let mut module_map = FxHashMap::default();
     14 ( 0.00%)          let graph_root = arenas.new_module(
      .                       None,
      .                       ModuleKind::Def(DefKind::Mod, root_def_id, kw::Empty),
      1 ( 0.00%)              ExpnId::root(),
      1 ( 0.00%)              krate.span,
      2 ( 0.00%)              session.contains_name(&krate.attrs, sym::no_implicit_prelude),
      .                       &mut module_map,
      .                   );
     12 ( 0.00%)          let empty_module = arenas.new_module(
      .                       None,
      .                       ModuleKind::Def(DefKind::Mod, root_def_id, kw::Empty),
      1 ( 0.00%)              ExpnId::root(),
      .                       DUMMY_SP,
      .                       true,
      .                       &mut FxHashMap::default(),
      .                   );
      .           
      4 ( 0.00%)          let definitions = Definitions::new(session.local_stable_crate_id(), krate.span);
      2 ( 0.00%)          let root = definitions.get_root_def();
      .           
      .                   let mut visibilities = FxHashMap::default();
      .                   visibilities.insert(CRATE_DEF_ID, ty::Visibility::Public);
      .           
      .                   let mut def_id_to_node_id = IndexVec::default();
      2 ( 0.00%)          assert_eq!(def_id_to_node_id.push(CRATE_NODE_ID), root);
      .                   let mut node_id_to_def_id = FxHashMap::default();
      .                   node_id_to_def_id.insert(CRATE_NODE_ID, root);
      .           
      .                   let mut invocation_parents = FxHashMap::default();
      .                   invocation_parents.insert(LocalExpnId::ROOT, (root, ImplTraitContext::Existential));
      .           
      3 ( 0.00%)          let mut extern_prelude: FxHashMap<Ident, ExternPreludeEntry<'_>> = session
      .                       .opts
      .                       .externs
      .                       .iter()
      .                       .filter(|(_, entry)| entry.add_prelude)
      .                       .map(|(name, _)| (Ident::from_str(name), Default::default()))
      .                       .collect();
      .           
      9 ( 0.00%)          if !session.contains_name(&krate.attrs, sym::no_core) {
      .                       extern_prelude.insert(Ident::with_dummy_span(sym::core), Default::default());
      7 ( 0.00%)              if !session.contains_name(&krate.attrs, sym::no_std) {
      .                           extern_prelude.insert(Ident::with_dummy_span(sym::std), Default::default());
      .                       }
      .                   }
      .           
      8 ( 0.00%)          let (registered_attrs, registered_tools) =
      4 ( 0.00%)              macros::registered_attrs_and_tools(session, &krate.attrs);
      .           
      .                   let features = session.features_untracked();
      .           
    237 ( 0.00%)          let mut resolver = Resolver {
      .                       session,
      .           
      2 ( 0.00%)              definitions,
      .           
      .                       // The outermost module has def ID 0; this is not reflected in the
      .                       // AST.
      .                       graph_root,
      .                       prelude: None,
      4 ( 0.00%)              extern_prelude,
      .           
      .                       has_self: FxHashSet::default(),
      .                       field_names: FxHashMap::default(),
      .           
      .                       determined_imports: Vec::new(),
      .                       indeterminate_imports: Vec::new(),
      .           
      .                       last_import_segment: false,
-- line 1343 ----------------------------------------
-- line 1347 ----------------------------------------
      .                       partial_res_map: Default::default(),
      .                       import_res_map: Default::default(),
      .                       label_res_map: Default::default(),
      .                       extern_crate_map: Default::default(),
      .                       reexport_map: FxHashMap::default(),
      .                       trait_map: NodeMap::default(),
      .                       underscore_disambiguator: 0,
      .                       empty_module,
      4 ( 0.00%)              module_map,
      .                       block_map: Default::default(),
      .                       binding_parent_modules: FxHashMap::default(),
      .                       ast_transform_scopes: FxHashMap::default(),
      .           
      .                       glob_map: Default::default(),
      4 ( 0.00%)              visibilities,
      .                       used_imports: FxHashSet::default(),
      .                       maybe_unused_trait_imports: Default::default(),
      .                       maybe_unused_extern_crates: Vec::new(),
      .           
      .                       privacy_errors: Vec::new(),
      .                       ambiguity_errors: Vec::new(),
      .                       use_injections: Vec::new(),
      .                       macro_expanded_macro_export_errors: BTreeSet::new(),
-- line 1369 ----------------------------------------
-- line 1372 ----------------------------------------
      .                       dummy_binding: arenas.alloc_name_binding(NameBinding {
      .                           kind: NameBindingKind::Res(Res::Err, false),
      .                           ambiguity: None,
      .                           expansion: LocalExpnId::ROOT,
      .                           span: DUMMY_SP,
      .                           vis: ty::Visibility::Public,
      .                       }),
      .           
      6 ( 0.00%)              crate_loader: CrateLoader::new(session, metadata_loader, crate_name),
      .                       macro_names: FxHashSet::default(),
      .                       builtin_macros: Default::default(),
      4 ( 0.00%)              registered_attrs,
      4 ( 0.00%)              registered_tools,
      .                       macro_use_prelude: FxHashMap::default(),
      .                       all_macros: FxHashMap::default(),
      .                       macro_map: FxHashMap::default(),
      7 ( 0.00%)              dummy_ext_bang: Lrc::new(SyntaxExtension::dummy_bang(session.edition())),
      6 ( 0.00%)              dummy_ext_derive: Lrc::new(SyntaxExtension::dummy_derive(session.edition())),
      5 ( 0.00%)              non_macro_attr: Lrc::new(SyntaxExtension::non_macro_attr(session.edition())),
      .                       invocation_parent_scopes: Default::default(),
      .                       output_macro_rules_scopes: Default::default(),
      .                       helper_attrs: Default::default(),
      .                       derive_data: Default::default(),
      .                       local_macro_def_scopes: FxHashMap::default(),
      .                       name_already_seen: FxHashMap::default(),
      .                       potentially_unused_imports: Vec::new(),
      .                       struct_constructors: Default::default(),
-- line 1398 ----------------------------------------
-- line 1405 ----------------------------------------
      .                       active_features: features
      .                           .declared_lib_features
      .                           .iter()
      .                           .map(|(feat, ..)| *feat)
      .                           .chain(features.declared_lang_features.iter().map(|(feat, ..)| *feat))
      .                           .collect(),
      .                       lint_buffer: LintBuffer::default(),
      .                       next_node_id: CRATE_NODE_ID,
      4 ( 0.00%)              node_id_to_def_id,
      4 ( 0.00%)              def_id_to_node_id,
      .                       placeholder_field_indices: Default::default(),
      4 ( 0.00%)              invocation_parents,
      .                       next_disambiguator: Default::default(),
      .                       trait_impl_items: Default::default(),
      .                       legacy_const_generic_args: Default::default(),
      .                       item_generics_num_lifetimes: Default::default(),
      .                       main_def: Default::default(),
      .                       trait_impls: Default::default(),
      .                       proc_macros: Default::default(),
      .                       confused_type_with_std_module: Default::default(),
      .                       access_levels: Default::default(),
      .                   };
      .           
      .                   let root_parent_scope = ParentScope::module(graph_root, &resolver);
      .                   resolver.invocation_parent_scopes.insert(LocalExpnId::ROOT, root_parent_scope);
      .           
      .                   resolver
      9 ( 0.00%)      }
      .           
      .               fn new_module(
      .                   &mut self,
      .                   parent: Option<Module<'a>>,
      .                   kind: ModuleKind,
      .                   expn_id: ExpnId,
      .                   span: Span,
      .                   no_implicit_prelude: bool,
      .               ) -> Module<'a> {
      5 ( 0.00%)          let module_map = &mut self.module_map;
  3,308 ( 0.00%)          self.arenas.new_module(parent, kind, expn_id, span, no_implicit_prelude, module_map)
      .               }
      .           
      .               pub fn next_node_id(&mut self) -> NodeId {
      .                   let next =
  3,195 ( 0.00%)              self.next_node_id.as_u32().checked_add(1).expect("input too large; ran out of NodeIds");
      .                   mem::replace(&mut self.next_node_id, ast::NodeId::from_u32(next))
      .               }
      .           
      .               pub fn lint_buffer(&mut self) -> &mut LintBuffer {
      3 ( 0.00%)          &mut self.lint_buffer
      3 ( 0.00%)      }
      .           
      1 ( 0.00%)      pub fn arenas() -> ResolverArenas<'a> {
      .                   Default::default()
      1 ( 0.00%)      }
      .           
      9 ( 0.00%)      pub fn into_outputs(self) -> ResolverOutputs {
      .                   let proc_macros = self.proc_macros.iter().map(|id| self.local_def_id(*id)).collect();
      1 ( 0.00%)          let definitions = self.definitions;
      4 ( 0.00%)          let visibilities = self.visibilities;
      4 ( 0.00%)          let extern_crate_map = self.extern_crate_map;
      4 ( 0.00%)          let reexport_map = self.reexport_map;
      4 ( 0.00%)          let maybe_unused_trait_imports = self.maybe_unused_trait_imports;
      4 ( 0.00%)          let maybe_unused_extern_crates = self.maybe_unused_extern_crates;
      4 ( 0.00%)          let glob_map = self.glob_map;
      6 ( 0.00%)          let main_def = self.main_def;
      4 ( 0.00%)          let confused_type_with_std_module = self.confused_type_with_std_module;
      6 ( 0.00%)          let access_levels = self.access_levels;
     37 ( 0.00%)          ResolverOutputs {
      2 ( 0.00%)              definitions,
     11 ( 0.00%)              cstore: Box::new(self.crate_loader.into_cstore()),
      4 ( 0.00%)              visibilities,
      4 ( 0.00%)              access_levels,
      4 ( 0.00%)              extern_crate_map,
      4 ( 0.00%)              reexport_map,
      4 ( 0.00%)              glob_map,
      4 ( 0.00%)              maybe_unused_trait_imports,
      4 ( 0.00%)              maybe_unused_extern_crates,
      .                       extern_prelude: self
      .                           .extern_prelude
      .                           .iter()
      4 ( 0.00%)                  .map(|(ident, entry)| (ident.name, entry.introduced_by_item))
      .                           .collect(),
      6 ( 0.00%)              main_def,
      4 ( 0.00%)              trait_impls: self.trait_impls,
      4 ( 0.00%)              proc_macros,
      4 ( 0.00%)              confused_type_with_std_module,
      5 ( 0.00%)              registered_tools: self.registered_tools,
      .                   }
     19 ( 0.00%)      }
      .           
      .               pub fn clone_outputs(&self) -> ResolverOutputs {
      .                   let proc_macros = self.proc_macros.iter().map(|id| self.local_def_id(*id)).collect();
      .                   ResolverOutputs {
      .                       definitions: self.definitions.clone(),
      .                       access_levels: self.access_levels.clone(),
      .                       cstore: Box::new(self.cstore().clone()),
      .                       visibilities: self.visibilities.clone(),
-- line 1501 ----------------------------------------
-- line 1513 ----------------------------------------
      .                       trait_impls: self.trait_impls.clone(),
      .                       proc_macros,
      .                       confused_type_with_std_module: self.confused_type_with_std_module.clone(),
      .                       registered_tools: self.registered_tools.clone(),
      .                   }
      .               }
      .           
      .               pub fn cstore(&self) -> &CStore {
 15,918 ( 0.00%)          self.crate_loader.cstore()
      .               }
      .           
      .               fn dummy_ext(&self, macro_kind: MacroKind) -> Lrc<SyntaxExtension> {
      .                   match macro_kind {
      .                       MacroKind::Bang => self.dummy_ext_bang.clone(),
      .                       MacroKind::Derive => self.dummy_ext_derive.clone(),
      .                       MacroKind::Attr => self.non_macro_attr.clone(),
      .                   }
      .               }
      .           
      .               /// Runs the function on each namespace.
    236 ( 0.00%)      fn per_ns<F: FnMut(&mut Self, Namespace)>(&mut self, mut f: F) {
    427 ( 0.00%)          f(self, TypeNS);
    406 ( 0.00%)          f(self, ValueNS);
    409 ( 0.00%)          f(self, MacroNS);
    204 ( 0.00%)      }
      .           
      .               fn is_builtin_macro(&mut self, res: Res) -> bool {
      .                   self.get_macro(res).map_or(false, |ext| ext.builtin_name.is_some())
      .               }
      .           
      .               fn macro_def(&self, mut ctxt: SyntaxContext) -> DefId {
      .                   loop {
      .                       match ctxt.outer_expn_data().macro_def_id {
      .                           Some(def_id) => return def_id,
      .                           None => ctxt.remove_mark(),
      .                       };
      .                   }
      .               }
      .           
      .               /// Entry point to crate resolution.
      2 ( 0.00%)      pub fn resolve_crate(&mut self, krate: &Crate) {
      4 ( 0.00%)          self.session.time("resolve_crate", || {
      3 ( 0.00%)              self.session.time("finalize_imports", || ImportResolver { r: self }.finalize_imports());
      .                       self.session.time("resolve_access_levels", || {
      3 ( 0.00%)                  AccessLevelsVisitor::compute_access_levels(self, krate)
      .                       });
      2 ( 0.00%)              self.session.time("finalize_macro_resolutions", || self.finalize_macro_resolutions());
      3 ( 0.00%)              self.session.time("late_resolve_crate", || self.late_resolve_crate(krate));
      2 ( 0.00%)              self.session.time("resolve_main", || self.resolve_main());
      3 ( 0.00%)              self.session.time("resolve_check_unused", || self.check_unused(krate));
      3 ( 0.00%)              self.session.time("resolve_report_errors", || self.report_errors(krate));
      4 ( 0.00%)              self.session.time("resolve_postprocess", || self.crate_loader.postprocess(krate));
      .                   });
      .               }
      .           
  1,356 ( 0.00%)      pub fn traits_in_scope(
      .                   &mut self,
      .                   current_trait: Option<Module<'a>>,
      .                   parent_scope: &ParentScope<'a>,
      .                   ctxt: SyntaxContext,
      .                   assoc_item: Option<(Symbol, Namespace)>,
      .               ) -> Vec<TraitCandidate> {
      .                   let mut found_traits = Vec::new();
      .           
    226 ( 0.00%)          if let Some(module) = current_trait {
      .                       if self.trait_may_have_item(Some(module), assoc_item) {
      .                           let def_id = module.def_id();
    195 ( 0.00%)                  found_traits.push(TraitCandidate { def_id, import_ids: smallvec![] });
      .                       }
      .                   }
      .           
      .                   self.visit_scopes(ScopeSet::All(TypeNS, false), parent_scope, ctxt, |this, scope, _, _| {
      .                       match scope {
      .                           Scope::Module(module, _) => {
      .                               this.traits_in_module(module, assoc_item, &mut found_traits);
      .                           }
      .                           Scope::StdLibPrelude => {
    339 ( 0.00%)                      if let Some(module) = this.prelude {
      .                                   this.traits_in_module(module, assoc_item, &mut found_traits);
      .                               }
      .                           }
      .                           Scope::ExternPrelude | Scope::ToolPrelude | Scope::BuiltinTypes => {}
      .                           _ => unreachable!(),
      .                       }
      .                       None::<()>
      .                   });
      .           
      .                   found_traits
    904 ( 0.00%)      }
      .           
      .               fn traits_in_module(
      .                   &mut self,
      .                   module: Module<'a>,
      .                   assoc_item: Option<(Symbol, Namespace)>,
      .                   found_traits: &mut Vec<TraitCandidate>,
      .               ) {
      .                   module.ensure_traits(self);
      .                   let traits = module.traits.borrow();
  6,573 ( 0.00%)          for (trait_name, trait_binding) in traits.as_ref().unwrap().iter() {
      .                       if self.trait_may_have_item(trait_binding.module(), assoc_item) {
      .                           let def_id = trait_binding.res().def_id();
    228 ( 0.00%)                  let import_ids = self.find_transitive_imports(&trait_binding.kind, *trait_name);
    684 ( 0.00%)                  found_traits.push(TraitCandidate { def_id, import_ids });
      .                       }
      .                   }
      .               }
      .           
      .               // List of traits in scope is pruned on best effort basis. We reject traits not having an
      .               // associated item with the given name and namespace (if specified). This is a conservative
      .               // optimization, proper hygienic type-based resolution of associated items is done in typeck.
      .               // We don't reject trait aliases (`trait_module == None`) because we don't have access to their
      .               // associated items.
      .               fn trait_may_have_item(
      .                   &mut self,
      .                   trait_module: Option<Module<'a>>,
      .                   assoc_item: Option<(Symbol, Namespace)>,
      .               ) -> bool {
  3,388 ( 0.00%)          match (trait_module, assoc_item) {
      .                       (Some(trait_module), Some((name, ns))) => {
  6,665 ( 0.00%)                  self.resolutions(trait_module).borrow().iter().any(|resolution| {
      .                               let (&BindingKey { ident: assoc_ident, ns: assoc_ns, .. }, _) = resolution;
 22,779 ( 0.00%)                      assoc_ns == ns && assoc_ident.name == name
      .                           })
      .                       }
      .                       _ => true,
      .                   }
      .               }
      .           
      .               fn find_transitive_imports(
      .                   &mut self,
      .                   mut kind: &NameBindingKind<'_>,
      .                   trait_name: Ident,
      .               ) -> SmallVec<[LocalDefId; 1]> {
      .                   let mut import_ids = smallvec![];
    157 ( 0.00%)          while let NameBindingKind::Import { import, binding, .. } = kind {
      3 ( 0.00%)              let id = self.local_def_id(import.id);
      .                       self.maybe_unused_trait_imports.insert(id);
      1 ( 0.00%)              self.add_to_glob_map(&import, trait_name);
      .                       import_ids.push(id);
      1 ( 0.00%)              kind = &binding.kind;
      .                   }
      .                   import_ids
      .               }
      .           
      .               fn new_key(&mut self, ident: Ident, ns: Namespace) -> BindingKey {
 40,336 ( 0.01%)          let ident = ident.normalize_to_macros_2_0();
  7,463 ( 0.00%)          let disambiguator = if ident.name == kw::Underscore {
      .                       self.underscore_disambiguator += 1;
      .                       self.underscore_disambiguator
      .                   } else {
      .                       0
      .                   };
      .                   BindingKey { ident, ns, disambiguator }
      .               }
      .           
165,824 ( 0.03%)      fn resolutions(&mut self, module: Module<'a>) -> &'a Resolutions<'a> {
 20,728 ( 0.00%)          if module.populate_on_access.get() {
      .                       module.populate_on_access.set(false);
      .                       self.build_reduced_graph_external(module);
      .                   }
 20,728 ( 0.00%)          &module.lazy_resolutions
186,552 ( 0.04%)      }
      .           
156,852 ( 0.03%)      fn resolution(
      .                   &mut self,
      .                   module: Module<'a>,
      .                   key: BindingKey,
      .               ) -> &'a RefCell<NameResolution<'a>> {
 52,284 ( 0.01%)          *self
      .                       .resolutions(module)
      .                       .borrow_mut()
104,568 ( 0.02%)              .entry(key)
 34,856 ( 0.01%)              .or_insert_with(|| self.arenas.alloc_name_resolution())
139,424 ( 0.03%)      }
      .           
  7,040 ( 0.00%)      fn record_use(
      .                   &mut self,
      .                   ident: Ident,
      .                   used_binding: &'a NameBinding<'a>,
      .                   is_lexical_scope: bool,
      .               ) {
  1,920 ( 0.00%)          if let Some((b2, kind)) = used_binding.ambiguity {
      .                       self.ambiguity_errors.push(AmbiguityError {
      .                           kind,
      .                           ident,
      .                           b1: used_binding,
      .                           b2,
      .                           misc1: AmbiguityErrorMisc::None,
      .                           misc2: AmbiguityErrorMisc::None,
      .                       });
      .                   }
  1,438 ( 0.00%)          if let NameBindingKind::Import { import, binding, ref used } = used_binding.kind {
      .                       // Avoid marking `extern crate` items that refer to a name from extern prelude,
      .                       // but not introduce it, as used if they are accessed from lexical scope.
    158 ( 0.00%)              if is_lexical_scope {
     44 ( 0.00%)                  if let Some(entry) = self.extern_prelude.get(&ident.normalize_to_macros_2_0()) {
     20 ( 0.00%)                      if let Some(crate_item) = entry.extern_crate_item {
      8 ( 0.00%)                          if ptr::eq(used_binding, crate_item) && !entry.introduced_by_item {
      .                                       return;
      .                                   }
      .                               }
      .                           }
      .                       }
      .                       used.set(true);
      .                       import.used.set(true);
     79 ( 0.00%)              self.used_imports.insert(import.id);
    395 ( 0.00%)              self.add_to_glob_map(&import, ident);
    474 ( 0.00%)              self.record_use(ident, binding, false);
      .                   }
  5,120 ( 0.00%)      }
      .           
      .               #[inline]
    237 ( 0.00%)      fn add_to_glob_map(&mut self, import: &Import<'_>, ident: Ident) {
     80 ( 0.00%)          if import.is_glob() {
     18 ( 0.00%)              let def_id = self.local_def_id(import.id);
      .                       self.glob_map.entry(def_id).or_default().insert(ident.name);
      .                   }
    284 ( 0.00%)      }
      .           
      .               /// A generic scope visitor.
      .               /// Visits scopes in order to resolve some identifier in them or perform other actions.
      .               /// If the callback returns `Some` result, we stop visiting scopes and return it.
      .               fn visit_scopes<T>(
      .                   &mut self,
      .                   scope_set: ScopeSet<'a>,
      .                   parent_scope: &ParentScope<'a>,
-- line 1738 ----------------------------------------
-- line 1780 ----------------------------------------
      .                   //    ambiguities with `macro_rules`.
      .                   // 4. `macro_use` prelude (open, the open part is from macro expansions, not controlled).
      .                   // 4a. User-defined prelude from macro-use
      .                   //    (open, the open part is from macro expansions, not controlled).
      .                   // 4b. "Standard library prelude" part implemented through `macro-use` (closed, controlled).
      .                   // 4c. Standard library prelude (de-facto closed, controlled).
      .                   // 6. Language prelude: builtin attributes (closed, controlled).
      .           
  6,756 ( 0.00%)          let rust_2015 = ctxt.edition() == Edition::Edition2015;
      .                   let (ns, macro_kind, is_absolute_path) = match scope_set {
      .                       ScopeSet::All(ns, _) => (ns, None, false),
      .                       ScopeSet::AbsolutePath(ns) => (ns, None, true),
      .                       ScopeSet::Macro(macro_kind) => (MacroNS, Some(macro_kind), false),
      .                       ScopeSet::Late(ns, ..) => (ns, None, false),
      .                   };
 19,964 ( 0.00%)          let module = match scope_set {
      .                       // Start with the specified module.
      .                       ScopeSet::Late(_, module, _) => module,
      .                       // Jump out of trait or enum modules, they do not act as scopes.
    265 ( 0.00%)              _ => parent_scope.module.nearest_item_scope(),
      .                   };
  1,426 ( 0.00%)          let mut scope = match ns {
  3,565 ( 0.00%)              _ if is_absolute_path => Scope::CrateRoot,
      .                       TypeNS | ValueNS => Scope::Module(module, None),
    297 ( 0.00%)              MacroNS => Scope::DeriveHelpers(parent_scope.expansion),
      .                   };
  1,652 ( 0.00%)          let mut ctxt = ctxt.normalize_to_macros_2_0();
  4,208 ( 0.00%)          let mut use_prelude = !module.no_implicit_prelude;
      .           
      .                   loop {
 20,197 ( 0.00%)              let visit = match scope {
      .                           // Derive helpers are not in scope when resolving derives in the same container.
      .                           Scope::DeriveHelpers(expn_id) => {
    305 ( 0.00%)                      !(expn_id == parent_scope.expansion && macro_kind == Some(MacroKind::Derive))
      .                           }
      .                           Scope::DeriveHelpersCompat => true,
      .                           Scope::MacroRules(macro_rules_scope) => {
      .                               // Use "path compression" on `macro_rules` scope chains. This is an optimization
      .                               // used to avoid long scope chains, see the comments on `MacroRulesScopeRef`.
      .                               // As another consequence of this optimization visitors never observe invocation
      .                               // scopes for macros that were already expanded.
    570 ( 0.00%)                      while let MacroRulesScope::Invocation(invoc_id) = macro_rules_scope.get() {
      .                                   if let Some(next_scope) = self.output_macro_rules_scopes.get(&invoc_id) {
      .                                       macro_rules_scope.set(next_scope.get());
      .                                   } else {
      .                                       break;
      .                                   }
      .                               }
      .                               true
      .                           }
      .                           Scope::CrateRoot => true,
      .                           Scope::Module(..) => true,
     82 ( 0.00%)                  Scope::RegisteredAttrs => use_prelude,
      .                           Scope::MacroUsePrelude => use_prelude || rust_2015,
      .                           Scope::BuiltinAttrs => true,
    333 ( 0.00%)                  Scope::ExternPrelude => use_prelude || is_absolute_path,
     74 ( 0.00%)                  Scope::ToolPrelude => use_prelude,
  1,708 ( 0.00%)                  Scope::StdLibPrelude => use_prelude || ns == MacroNS,
      .                           Scope::BuiltinTypes => true,
      .                       };
      .           
    437 ( 0.00%)              if visit {
  1,898 ( 0.00%)                  if let break_result @ Some(..) = visitor(self, scope, use_prelude, ctxt) {
      .                               return break_result;
      .                           }
      .                       }
      .           
  5,327 ( 0.00%)              scope = match scope {
      .                           Scope::DeriveHelpers(LocalExpnId::ROOT) => Scope::DeriveHelpersCompat,
      .                           Scope::DeriveHelpers(expn_id) => {
      .                               // Derive helpers are not visible to code generated by bang or derive macros.
      .                               let expn_data = expn_id.expn_data();
    279 ( 0.00%)                      match expn_data.kind {
      .                                   ExpnKind::Root
      .                                   | ExpnKind::Macro(MacroKind::Bang | MacroKind::Derive, _) => {
      .                                       Scope::DeriveHelpersCompat
      .                                   }
      8 ( 0.00%)                          _ => Scope::DeriveHelpers(expn_data.parent.expect_local()),
      .                               }
      .                           }
    297 ( 0.00%)                  Scope::DeriveHelpersCompat => Scope::MacroRules(parent_scope.macro_rules),
    820 ( 0.00%)                  Scope::MacroRules(macro_rules_scope) => match macro_rules_scope.get() {
      .                               MacroRulesScope::Binding(binding) => {
    492 ( 0.00%)                          Scope::MacroRules(binding.parent_macro_rules_scope)
      .                               }
      .                               MacroRulesScope::Invocation(invoc_id) => {
      .                                   Scope::MacroRules(self.invocation_parent_scopes[&invoc_id].macro_rules)
      .                               }
      .                               MacroRulesScope::Empty => Scope::Module(module, None),
      .                           },
      .                           Scope::CrateRoot => match ns {
      .                               TypeNS => {
      .                                   ctxt.adjust(ExpnId::root());
      .                                   Scope::ExternPrelude
      .                               }
      .                               ValueNS | MacroNS => break,
      .                           },
      .                           Scope::Module(module, prev_lint_id) => {
  1,548 ( 0.00%)                      use_prelude = !module.no_implicit_prelude;
      .                               let derive_fallback_lint_id = match scope_set {
      .                                   ScopeSet::Late(.., lint_id) => lint_id,
      .                                   _ => None,
      .                               };
  2,834 ( 0.00%)                      match self.hygienic_lexical_parent(module, &mut ctxt, derive_fallback_lint_id) {
      .                                   Some((parent_module, lint_id)) => {
      .                                       Scope::Module(parent_module, lint_id.or(prev_lint_id))
      .                                   }
      .                                   None => {
  2,108 ( 0.00%)                              ctxt.adjust(ExpnId::root());
    922 ( 0.00%)                              match ns {
      .                                           TypeNS => Scope::ExternPrelude,
      .                                           ValueNS => Scope::StdLibPrelude,
      .                                           MacroNS => Scope::RegisteredAttrs,
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                           Scope::RegisteredAttrs => Scope::MacroUsePrelude,
      .                           Scope::MacroUsePrelude => Scope::StdLibPrelude,
      .                           Scope::BuiltinAttrs => break, // nowhere else to search
    148 ( 0.00%)                  Scope::ExternPrelude if is_absolute_path => break,
      .                           Scope::ExternPrelude => Scope::ToolPrelude,
      .                           Scope::ToolPrelude => Scope::StdLibPrelude,
    766 ( 0.00%)                  Scope::StdLibPrelude => match ns {
      .                               TypeNS => Scope::BuiltinTypes,
      .                               ValueNS => break, // nowhere else to search
      .                               MacroNS => Scope::BuiltinAttrs,
      .                           },
      .                           Scope::BuiltinTypes => break, // nowhere else to search
      .                       };
      .                   }
      .           
-- line 1911 ----------------------------------------
-- line 1924 ----------------------------------------
      .               ///    let g = || {};
      .               ///    fn g() {}
      .               ///    g(); // This resolves to the local variable `g` since it shadows the item.
      .               /// }
      .               /// ```
      .               ///
      .               /// Invariant: This must only be called during main resolution, not during
      .               /// import resolution.
 10,140 ( 0.00%)      fn resolve_ident_in_lexical_scope(
      .                   &mut self,
      .                   mut ident: Ident,
      .                   ns: Namespace,
      .                   parent_scope: &ParentScope<'a>,
      .                   record_used_id: Option<NodeId>,
      .                   path_span: Span,
      .                   ribs: &[Rib<'a>],
      .               ) -> Option<LexicalScopeBinding<'a>> {
  2,028 ( 0.00%)          assert!(ns == TypeNS || ns == ValueNS);
      .                   let orig_ident = ident;
  7,098 ( 0.00%)          if ident.name == kw::Empty {
      .                       return Some(LexicalScopeBinding::Res(Res::Err));
      .                   }
      .                   let (general_span, normalized_span) = if ident.name == kw::SelfUpper {
      .                       // FIXME(jseyfried) improve `Self` hygiene
      .                       let empty_span = ident.span.with_ctxt(SyntaxContext::root());
      .                       (empty_span, empty_span)
    955 ( 0.00%)          } else if ns == TypeNS {
  3,145 ( 0.00%)              let normalized_span = ident.span.normalize_to_macros_2_0();
      .                       (normalized_span, normalized_span)
      .                   } else {
  1,630 ( 0.00%)              (ident.span.normalize_to_macro_rules(), ident.span.normalize_to_macros_2_0())
      .                   };
      .                   ident.span = general_span;
      .                   let normalized_ident = Ident { span: normalized_span, ..ident };
      .           
      .                   // Walk backwards up the ribs in scope.
      .                   let record_used = record_used_id.is_some();
  3,042 ( 0.00%)          let mut module = self.graph_root;
      .                   for i in (0..ribs.len()).rev() {
      .                       debug!("walk rib\n{:?}", ribs[i].bindings);
      .                       // Use the rib kind to determine whether we are resolving parameters
      .                       // (macro 2.0 hygiene) or local variables (`macro_rules` hygiene).
  3,596 ( 0.00%)              let rib_ident = if ribs[i].kind.contains_params() { normalized_ident } else { ident };
      .                       if let Some((original_rib_ident_def, res)) = ribs[i].bindings.get_key_value(&rib_ident)
      .                       {
      .                           // The ident resolves to a type parameter or local variable.
  4,836 ( 0.00%)                  return Some(LexicalScopeBinding::Res(self.validate_res_from_ribs(
      .                               i,
    806 ( 0.00%)                      rib_ident,
  2,015 ( 0.00%)                      *res,
      .                               record_used,
      .                               path_span,
      .                               *original_rib_ident_def,
      .                               ribs,
      .                           )));
      .                       }
      .           
 19,751 ( 0.00%)              module = match ribs[i].kind {
    650 ( 0.00%)                  ModuleRibKind(module) => module,
      .                           MacroDefinition(def) if def == self.macro_def(ident.span.ctxt()) => {
      .                               // If an invocation of this macro created `ident`, give up on `ident`
      .                               // and switch to `ident`'s source from the macro definition.
      .                               ident.span.remove_mark();
      .                               continue;
      .                           }
      .                           _ => continue,
      .                       };
      .           
  1,950 ( 0.00%)              match module.kind {
      .                           ModuleKind::Block(..) => {} // We can see through blocks
      .                           _ => break,
      .                       }
      .           
      .                       let item = self.resolve_ident_in_module_unadjusted(
      .                           ModuleOrUniformRoot::Module(module),
      .                           ident,
      .                           ns,
      .                           parent_scope,
      .                           record_used,
      .                           path_span,
      .                       );
      .                       if let Ok(binding) = item {
      .                           // The ident resolves to an item.
      3 ( 0.00%)                  return Some(LexicalScopeBinding::Item(binding));
      .                       }
      .                   }
 10,370 ( 0.00%)          self.early_resolve_ident_in_lexical_scope(
      .                       orig_ident,
      .                       ScopeSet::Late(ns, module, record_used_id),
      .                       parent_scope,
      .                       record_used,
      .                       record_used,
      .                       path_span,
      .                   )
      .                   .ok()
      .                   .map(LexicalScopeBinding::Item)
  9,126 ( 0.00%)      }
      .           
  4,961 ( 0.00%)      fn hygienic_lexical_parent(
      .                   &mut self,
      .                   module: Module<'a>,
      .                   ctxt: &mut SyntaxContext,
      .                   derive_fallback_lint_id: Option<NodeId>,
      .               ) -> Option<(Module<'a>, Option<NodeId>)> {
  3,157 ( 0.00%)          if !module.expansion.outer_expn_is_descendant_of(*ctxt) {
    180 ( 0.00%)              return Some((self.expn_def_scope(ctxt.remove_mark()), None));
      .                   }
      .           
    842 ( 0.00%)          if let ModuleKind::Block(..) = module.kind {
     22 ( 0.00%)              return Some((module.parent.unwrap().nearest_item_scope(), None));
      .                   }
      .           
      .                   // We need to support the next case under a deprecation warning
      .                   // ```
      .                   // struct MyStruct;
      .                   // ---- begin: this comes from a proc macro derive
      .                   // mod implementation_details {
      .                   //     // Note that `MyStruct` is not in scope here.
      .                   //     impl SomeTrait for MyStruct { ... }
      .                   // }
      .                   // ---- end
      .                   // ```
      .                   // So we have to fall back to the module's parent during lexical resolution in this case.
    399 ( 0.00%)          if derive_fallback_lint_id.is_some() {
    138 ( 0.00%)              if let Some(parent) = module.parent {
      .                           // Inner module is inside the macro, parent module is outside of the macro.
     10 ( 0.00%)                  if module.expansion != parent.expansion
      .                               && module.expansion.is_descendant_of(parent.expansion)
      .                           {
      .                               // The macro is a proc macro derive
      .                               if let Some(def_id) = module.expansion.expn_data().macro_def_id {
      .                                   let ext = self.get_macro_by_def_id(def_id);
      .                                   if ext.builtin_name.is_none()
      .                                       && ext.macro_kind() == MacroKind::Derive
      .                                       && parent.expansion.outer_expn_is_descendant_of(*ctxt)
-- line 2058 ----------------------------------------
-- line 2060 ----------------------------------------
      .                                       return Some((parent, derive_fallback_lint_id));
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   }
      .           
      .                   None
  4,510 ( 0.00%)      }
      .           
      .               fn resolve_ident_in_module(
      .                   &mut self,
      .                   module: ModuleOrUniformRoot<'a>,
      .                   ident: Ident,
      .                   ns: Namespace,
      .                   parent_scope: &ParentScope<'a>,
      .                   record_used: bool,
      .                   path_span: Span,
      .               ) -> Result<&'a NameBinding<'a>, Determinacy> {
  2,504 ( 0.00%)          self.resolve_ident_in_module_ext(module, ident, ns, parent_scope, record_used, path_span)
      .                       .map_err(|(determinacy, _)| determinacy)
      .               }
      .           
  5,740 ( 0.00%)      fn resolve_ident_in_module_ext(
      .                   &mut self,
      .                   module: ModuleOrUniformRoot<'a>,
      .                   mut ident: Ident,
      .                   ns: Namespace,
      .                   parent_scope: &ParentScope<'a>,
      .                   record_used: bool,
      .                   path_span: Span,
      .               ) -> Result<&'a NameBinding<'a>, (Determinacy, Weak)> {
      .                   let tmp_parent_scope;
      .                   let mut adjusted_parent_scope = parent_scope;
      .                   match module {
      .                       ModuleOrUniformRoot::Module(m) => {
  1,728 ( 0.00%)                  if let Some(def) = ident.span.normalize_to_macros_2_0_and_adjust(m.expansion) {
    200 ( 0.00%)                      tmp_parent_scope =
    240 ( 0.00%)                          ParentScope { module: self.expn_def_scope(def), ..*parent_scope };
      .                               adjusted_parent_scope = &tmp_parent_scope;
      .                           }
      .                       }
      .                       ModuleOrUniformRoot::ExternPrelude => {
      .                           ident.span.normalize_to_macros_2_0_and_adjust(ExpnId::root());
      .                       }
      .                       ModuleOrUniformRoot::CrateRootAndExternPrelude | ModuleOrUniformRoot::CurrentScope => {
      .                           // No adjustments
      .                       }
      .                   }
  3,167 ( 0.00%)          self.resolve_ident_in_module_unadjusted_ext(
      .                       module,
    576 ( 0.00%)              ident,
      .                       ns,
      .                       adjusted_parent_scope,
      .                       false,
      .                       record_used,
      .                       path_span,
      .                   )
  2,009 ( 0.00%)      }
      .           
    610 ( 0.00%)      fn resolve_crate_root(&mut self, ident: Ident) -> Module<'a> {
      .                   debug!("resolve_crate_root({:?})", ident);
     61 ( 0.00%)          let mut ctxt = ident.span.ctxt();
     61 ( 0.00%)          let mark = if ident.name == kw::DollarCrate {
      .                       // When resolving `$crate` from a `macro_rules!` invoked in a `macro`,
      .                       // we don't want to pretend that the `macro_rules!` definition is in the `macro`
      .                       // as described in `SyntaxContext::apply_mark`, so we ignore prepended opaque marks.
      .                       // FIXME: This is only a guess and it doesn't work correctly for `macro_rules!`
      .                       // definitions actually produced by `macro` and `macro` definitions produced by
      .                       // `macro_rules!`, but at least such configurations are not stable yet.
    110 ( 0.00%)              ctxt = ctxt.normalize_to_macro_rules();
      .                       debug!(
      .                           "resolve_crate_root: marks={:?}",
      .                           ctxt.marks().into_iter().map(|(i, t)| (i.expn_data(), t)).collect::<Vec<_>>()
      .                       );
    110 ( 0.00%)              let mut iter = ctxt.marks().into_iter().rev().peekable();
      .                       let mut result = None;
      .                       // Find the last opaque mark from the end if it exists.
    264 ( 0.00%)              while let Some(&(mark, transparency)) = iter.peek() {
      .                           if transparency == Transparency::Opaque {
      .                               result = Some(mark);
      .                               iter.next();
      .                           } else {
      .                               break;
      .                           }
      .                       }
      .                       debug!(
      .                           "resolve_crate_root: found opaque mark {:?} {:?}",
      .                           result,
      .                           result.map(|r| r.expn_data())
      .                       );
      .                       // Then find the last semi-transparent mark from the end if it exists.
    165 ( 0.00%)              for (mark, transparency) in iter {
      .                           if transparency == Transparency::SemiTransparent {
      .                               result = Some(mark);
      .                           } else {
      .                               break;
      .                           }
      .                       }
      .                       debug!(
      .                           "resolve_crate_root: found semi-transparent mark {:?} {:?}",
      .                           result,
      .                           result.map(|r| r.expn_data())
      .                       );
      .                       result
      .                   } else {
      .                       debug!("resolve_crate_root: not DollarCrate");
      6 ( 0.00%)              ctxt = ctxt.normalize_to_macros_2_0();
     42 ( 0.00%)              ctxt.adjust(ExpnId::root())
      .                   };
    122 ( 0.00%)          let module = match mark {
    255 ( 0.00%)              Some(def) => self.expn_def_scope(def),
      .                       None => {
      .                           debug!(
      .                               "resolve_crate_root({:?}): found no mark (ident.span = {:?})",
      .                               ident, ident.span
      .                           );
     20 ( 0.00%)                  return self.graph_root;
      .                       }
      .                   };
      .                   let module = self.expect_module(
      .                       module.opt_def_id().map_or(LOCAL_CRATE, |def_id| def_id.krate).as_def_id(),
      .                   );
      .                   debug!(
      .                       "resolve_crate_root({:?}): got module {:?} ({:?}) (ident.span = {:?})",
      .                       ident,
      .                       module,
      .                       module.kind.name(),
      .                       ident.span
      .                   );
      .                   module
    427 ( 0.00%)      }
      .           
     36 ( 0.00%)      fn resolve_self(&mut self, ctxt: &mut SyntaxContext, module: Module<'a>) -> Module<'a> {
      8 ( 0.00%)          let mut module = self.expect_module(module.nearest_parent_mod());
     16 ( 0.00%)          while module.span.ctxt().normalize_to_macros_2_0() != *ctxt {
      .                       let parent = module.parent.unwrap_or_else(|| self.expn_def_scope(ctxt.remove_mark()));
      .                       module = self.expect_module(parent.nearest_parent_mod());
      .                   }
      .                   module
     36 ( 0.00%)      }
      .           
      .               fn resolve_path(
      .                   &mut self,
      .                   path: &[Segment],
      .                   opt_ns: Option<Namespace>, // `None` indicates a module path in import
      .                   parent_scope: &ParentScope<'a>,
      .                   record_used: bool,
      .                   path_span: Span,
      .                   crate_lint: CrateLint,
      .               ) -> PathResult<'a> {
    630 ( 0.00%)          self.resolve_path_with_ribs(
      .                       path,
      .                       opt_ns,
      .                       parent_scope,
      .                       record_used,
      .                       path_span,
      .                       crate_lint,
      .                       None,
      .                   )
      .               }
      .           
 13,065 ( 0.00%)      fn resolve_path_with_ribs(
      .                   &mut self,
      .                   path: &[Segment],
      .                   opt_ns: Option<Namespace>, // `None` indicates a module path in import
      .                   parent_scope: &ParentScope<'a>,
      .                   record_used: bool,
      .                   path_span: Span,
      .                   crate_lint: CrateLint,
      .                   ribs: Option<&PerNS<Vec<Rib<'a>>>>,
      .               ) -> PathResult<'a> {
    871 ( 0.00%)          let mut module = None;
      .                   let mut allow_super = true;
      .                   let mut second_binding = None;
      .           
      .                   debug!(
      .                       "resolve_path(path={:?}, opt_ns={:?}, record_used={:?}, \
      .                        path_span={:?}, crate_lint={:?})",
      .                       path, opt_ns, record_used, path_span, crate_lint,
      .                   );
      .           
  5,928 ( 0.00%)          for (i, &Segment { ident, id, has_generic_args: _ }) in path.iter().enumerate() {
      .                       debug!("resolve_path ident {} {:?} {:?}", i, ident, id);
  7,295 ( 0.00%)              let record_segment_res = |this: &mut Self, res| {
  2,355 ( 0.00%)                  if record_used {
  3,675 ( 0.00%)                      if let Some(id) = id {
  1,470 ( 0.00%)                          if !this.partial_res_map.contains_key(&id) {
  1,224 ( 0.00%)                              assert!(id != ast::DUMMY_NODE_ID, "Trying to resolve dummy id");
  2,448 ( 0.00%)                              this.record_partial_res(id, PartialRes::new(res));
      .                                   }
      .                               }
      .                           }
  3,140 ( 0.00%)              };
      .           
  2,282 ( 0.00%)              let is_last = i == path.len() - 1;
  4,940 ( 0.00%)              let ns = if is_last { opt_ns.unwrap_or(TypeNS) } else { TypeNS };
    988 ( 0.00%)              let name = ident.name;
      .           
  1,762 ( 0.00%)              allow_super &= ns == TypeNS && (name == kw::SelfLower || name == kw::Super);
      .           
      .                       if ns == TypeNS {
  1,548 ( 0.00%)                  if allow_super && name == kw::Super {
      8 ( 0.00%)                      let mut ctxt = ident.span.ctxt().normalize_to_macros_2_0();
      4 ( 0.00%)                      let self_module = match i {
      8 ( 0.00%)                          0 => Some(self.resolve_self(&mut ctxt, parent_scope.module)),
      .                                   _ => match module {
      .                                       Some(ModuleOrUniformRoot::Module(module)) => Some(module),
      .                                       _ => None,
      .                                   },
      .                               };
      .                               if let Some(self_module) = self_module {
      6 ( 0.00%)                          if let Some(parent) = self_module.parent {
     10 ( 0.00%)                              module = Some(ModuleOrUniformRoot::Module(
      4 ( 0.00%)                                  self.resolve_self(&mut ctxt, parent),
      .                                       ));
      .                                       continue;
      .                                   }
      .                               }
      .                               let msg = "there are too many leading `super` keywords".to_string();
      .                               return PathResult::Failed {
      .                                   span: ident.span,
      .                                   label: msg,
      .                                   suggestion: None,
      .                                   is_error_from_last_segment: false,
      .                               };
      .                           }
  1,544 ( 0.00%)                  if i == 0 {
  2,007 ( 0.00%)                      if name == kw::SelfLower {
      .                                   let mut ctxt = ident.span.ctxt().normalize_to_macros_2_0();
      .                                   module = Some(ModuleOrUniformRoot::Module(
      .                                       self.resolve_self(&mut ctxt, parent_scope.module),
      .                                   ));
      .                                   continue;
      .                               }
      .                               if name == kw::PathRoot && ident.span.rust_2018() {
      .                                   module = Some(ModuleOrUniformRoot::ExternPrelude);
-- line 2296 ----------------------------------------
-- line 2298 ----------------------------------------
      .                               }
      .                               if name == kw::PathRoot && ident.span.rust_2015() && self.session.rust_2018() {
      .                                   // `::a::b` from 2015 macro on 2018 global edition
      .                                   module = Some(ModuleOrUniformRoot::CrateRootAndExternPrelude);
      .                                   continue;
      .                               }
      .                               if name == kw::PathRoot || name == kw::Crate || name == kw::DollarCrate {
      .                                   // `::a::b`, `crate::a::b` or `$crate::a::b`
    124 ( 0.00%)                          module = Some(ModuleOrUniformRoot::Module(self.resolve_crate_root(ident)));
      .                                   continue;
      .                               }
      .                           }
      .                       }
      .           
      .                       // Report special messages for path segment keywords in wrong positions.
  4,893 ( 0.00%)              if ident.is_path_segment_keyword() && i != 0 {
      .                           let name_str = if name == kw::PathRoot {
      .                               "crate root".to_string()
      .                           } else {
      .                               format!("`{}`", name)
      .                           };
      .                           let label = if i == 1 && path[0].ident.name == kw::PathRoot {
      .                               format!("global paths cannot start with {}", name_str)
      .                           } else {
-- line 2321 ----------------------------------------
-- line 2328 ----------------------------------------
      .                               is_error_from_last_segment: false,
      .                           };
      .                       }
      .           
      .                       enum FindBindingResult<'a> {
      .                           Binding(Result<&'a NameBinding<'a>, Determinacy>),
      .                           PathResult(PathResult<'a>),
      .                       }
 30,560 ( 0.01%)              let find_binding_in_ns = |this: &mut Self, ns| {
  3,937 ( 0.00%)                  let binding = if let Some(module) = module {
      .                               this.resolve_ident_in_module(
      .                                   module,
    351 ( 0.00%)                          ident,
      .                                   ns,
      .                                   parent_scope,
    234 ( 0.00%)                          record_used,
    117 ( 0.00%)                          path_span,
      .                               )
  4,820 ( 0.00%)                  } else if ribs.is_none() || opt_ns.is_none() || opt_ns == Some(MacroNS) {
      .                               let scopes = ScopeSet::All(ns, opt_ns.is_none());
    884 ( 0.00%)                      this.early_resolve_ident_in_lexical_scope(
    156 ( 0.00%)                          ident,
      .                                   scopes,
     52 ( 0.00%)                          parent_scope,
    104 ( 0.00%)                          record_used,
      .                                   record_used,
     52 ( 0.00%)                          path_span,
      .                               )
      .                           } else {
  3,144 ( 0.00%)                      let record_used_id = if record_used {
    770 ( 0.00%)                          crate_lint.node_id().or(Some(CRATE_NODE_ID))
      .                               } else {
      .                                   None
      .                               };
 11,152 ( 0.00%)                      match this.resolve_ident_in_lexical_scope(
  2,358 ( 0.00%)                          ident,
      .                                   ns,
    786 ( 0.00%)                          parent_scope,
      .                                   record_used_id,
  1,572 ( 0.00%)                          path_span,
      .                                   &ribs.unwrap()[ns],
      .                               ) {
      .                                   // we found a locally-imported or available item/module
  1,353 ( 0.00%)                          Some(LexicalScopeBinding::Item(binding)) => Ok(binding),
      .                                   // we found a local variable or type param
      .                                   Some(LexicalScopeBinding::Res(res))
    638 ( 0.00%)                              if opt_ns == Some(TypeNS) || opt_ns == Some(ValueNS) =>
      .                                   {
  2,871 ( 0.00%)                              record_segment_res(this, res);
  2,552 ( 0.00%)                              return FindBindingResult::PathResult(PathResult::NonModule(
  2,233 ( 0.00%)                                  PartialRes::with_unresolved_segments(res, path.len() - 1),
      .                                       ));
      .                                   }
     48 ( 0.00%)                          _ => Err(Determinacy::determined(record_used)),
      .                               }
      .                           };
  4,452 ( 0.00%)                  FindBindingResult::Binding(binding)
  7,640 ( 0.00%)              };
  6,685 ( 0.00%)              let binding = match find_binding_in_ns(self, ns) {
  4,466 ( 0.00%)                  FindBindingResult::PathResult(x) => return x,
      .                           FindBindingResult::Binding(binding) => binding,
      .                       };
  1,323 ( 0.00%)              match binding {
      .                           Ok(binding) => {
  3,095 ( 0.00%)                      if i == 1 {
      .                                   second_binding = Some(binding);
      .                               }
      .                               let res = binding.res();
  6,190 ( 0.00%)                      let maybe_assoc = opt_ns != Some(MacroNS) && PathSource::Type.is_expected(res);
      .                               if let Some(next_module) = binding.module() {
    932 ( 0.00%)                          module = Some(ModuleOrUniformRoot::Module(next_module));
  4,194 ( 0.00%)                          record_segment_res(self, res);
  1,071 ( 0.00%)                      } else if res == Res::ToolMod && i + 1 != path.len() {
      .                                   if binding.is_import() {
      .                                       self.session
      .                                           .struct_span_err(
      .                                               ident.span,
      .                                               "cannot use a tool module through an import",
      .                                           )
      .                                           .span_note(binding.span, "the tool module imported here")
      .                                           .emit();
      .                                   }
      .                                   let res = Res::NonMacroAttr(NonMacroAttrKind::Tool);
      .                                   return PathResult::NonModule(PartialRes::new(res));
    765 ( 0.00%)                      } else if res == Res::Err {
      .                                   return PathResult::NonModule(PartialRes::new(Res::Err));
    459 ( 0.00%)                      } else if opt_ns.is_some() && (is_last || maybe_assoc) {
  1,071 ( 0.00%)                          self.lint_if_path_starts_with_module(
    306 ( 0.00%)                              crate_lint,
      .                                       path,
    153 ( 0.00%)                              path_span,
      .                                       second_binding,
      .                                   );
    459 ( 0.00%)                          return PathResult::NonModule(PartialRes::with_unresolved_segments(
    612 ( 0.00%)                              res,
    612 ( 0.00%)                              path.len() - i - 1,
      .                                   ));
      .                               } else {
      .                                   let label = format!(
      .                                       "`{}` is {} {}, not a module",
      .                                       ident,
      .                                       res.article(),
      .                                       res.descr(),
      .                                   );
-- line 2431 ----------------------------------------
-- line 2433 ----------------------------------------
      .                                   return PathResult::Failed {
      .                                       span: ident.span,
      .                                       label,
      .                                       suggestion: None,
      .                                       is_error_from_last_segment: is_last,
      .                                   };
      .                               }
      .                           }
     32 ( 0.00%)                  Err(Undetermined) => return PathResult::Indeterminate,
      .                           Err(Determined) => {
      4 ( 0.00%)                      if let Some(ModuleOrUniformRoot::Module(module)) = module {
      4 ( 0.00%)                          if opt_ns.is_some() && !module.is_normal() {
      3 ( 0.00%)                              return PathResult::NonModule(PartialRes::with_unresolved_segments(
      .                                           module.res().unwrap(),
      2 ( 0.00%)                                  path.len() - i,
      .                                       ));
      .                                   }
      .                               }
      .                               let module_res = match module {
      .                                   Some(ModuleOrUniformRoot::Module(module)) => module.res(),
      .                                   _ => None,
      .                               };
      .                               let (label, suggestion) = if module_res == self.graph_root.res() {
-- line 2455 ----------------------------------------
-- line 2612 ----------------------------------------
      .                                   label,
      .                                   suggestion,
      .                                   is_error_from_last_segment: is_last,
      .                               };
      .                           }
      .                       }
      .                   }
      .           
  4,202 ( 0.00%)          self.lint_if_path_starts_with_module(crate_lint, path, path_span, second_binding);
      .           
  2,292 ( 0.00%)          PathResult::Module(match module {
    764 ( 0.00%)              Some(module) => module,
      .                       None if path.is_empty() => ModuleOrUniformRoot::CurrentScope,
      .                       _ => span_bug!(path_span, "resolve_path: non-empty path `{:?}` has no module", path),
      .                   })
  7,839 ( 0.00%)      }
      .           
  6,516 ( 0.00%)      fn lint_if_path_starts_with_module(
      .                   &mut self,
      .                   crate_lint: CrateLint,
      .                   path: &[Segment],
      .                   path_span: Span,
      .                   second_binding: Option<&NameBinding<'_>>,
      .               ) {
  2,715 ( 0.00%)          let (diag_id, diag_span) = match crate_lint {
      .                       CrateLint::No => return,
      .                       CrateLint::SimplePath(id) => (id, path_span),
      .                       CrateLint::UsePath { root_id, root_span } => (root_id, root_span),
      .                       CrateLint::QPathTrait { qpath_id, qpath_span } => (qpath_id, qpath_span),
      .                   };
      .           
    543 ( 0.00%)          let first_name = match path.get(0) {
      .                       // In the 2018 edition this lint is a hard error, so nothing to do
  1,086 ( 0.00%)              Some(seg) if seg.ident.span.rust_2015() && self.session.rust_2015() => seg.ident.name,
      .                       _ => return,
      .                   };
      .           
      .                   // We're only interested in `use` paths which should start with
      .                   // `{{root}}` currently.
      .                   if first_name != kw::PathRoot {
      .                       return;
      .                   }
-- line 2653 ----------------------------------------
-- line 2679 ----------------------------------------
      .                   self.lint_buffer.buffer_lint_with_diagnostic(
      .                       lint::builtin::ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE,
      .                       diag_id,
      .                       diag_span,
      .                       "absolute paths must start with `self`, `super`, \
      .                        `crate`, or an external crate name in the 2018 edition",
      .                       diag,
      .                   );
  4,344 ( 0.00%)      }
      .           
      .               // Validate a local resolution (from ribs).
      .               fn validate_res_from_ribs(
      .                   &mut self,
      .                   rib_index: usize,
      .                   rib_ident: Ident,
      .                   mut res: Res,
      .                   record_used: bool,
      .                   span: Span,
      .                   original_rib_ident_def: Ident,
      .                   all_ribs: &[Rib<'a>],
      .               ) -> Res {
      .                   const CG_BUG_STR: &str = "min_const_generics resolve check didn't stop compilation";
      .                   debug!("validate_res_from_ribs({:?})", res);
    806 ( 0.00%)          let ribs = &all_ribs[rib_index + 1..];
      .           
      .                   // An invalid forward use of a generic parameter from a previous default.
  1,612 ( 0.00%)          if let ForwardGenericParamBanRibKind = all_ribs[rib_index].kind {
      .                       if record_used {
      .                           let res_error = if rib_ident.name == kw::SelfUpper {
      .                               ResolutionError::SelfInGenericParamDefault
      .                           } else {
      .                               ResolutionError::ForwardDeclaredGenericParam
      .                           };
      .                           self.report_error(span, res_error);
      .                       }
      .                       assert_eq!(res, Res::Err);
      .                       return Res::Err;
      .                   }
      .           
  2,911 ( 0.00%)          match res {
      .                       Res::Local(_) => {
      .                           use ResolutionError::*;
    134 ( 0.00%)                  let mut res_err = None;
      .           
      .                           for rib in ribs {
    676 ( 0.00%)                      match rib.kind {
      .                                   NormalRibKind
      .                                   | ClosureOrAsyncRibKind
      .                                   | ModuleRibKind(..)
      .                                   | MacroDefinition(..)
      .                                   | ForwardGenericParamBanRibKind => {
      .                                       // Nothing to do. Continue.
      .                                   }
      .                                   ItemRibKind(_) | FnItemRibKind | AssocItemRibKind => {
      .                                       // This was an attempt to access an upvar inside a
      .                                       // named function item. This is not allowed, so we
      .                                       // report an error.
     74 ( 0.00%)                              if record_used {
      .                                           // We don't immediately trigger a resolve error, because
      .                                           // we want certain other resolution errors (namely those
      .                                           // emitted for `ConstantItemRibKind` below) to take
      .                                           // precedence.
      .                                           res_err = Some(CannotCaptureDynamicEnvironmentInFnItem);
      .                                       }
      .                                   }
      .                                   ConstantItemRibKind(_, item) => {
-- line 2744 ----------------------------------------
-- line 2773 ----------------------------------------
      .                                   ConstParamTyRibKind => {
      .                                       if record_used {
      .                                           self.report_error(span, ParamInTyOfConstParam(rib_ident.name));
      .                                       }
      .                                       return Res::Err;
      .                                   }
      .                               }
      .                           }
    148 ( 0.00%)                  if let Some(res_err) = res_err {
      .                               self.report_error(span, res_err);
      .                               return Res::Err;
      .                           }
      .                       }
      .                       Res::Def(DefKind::TyParam, _) | Res::SelfTy(..) => {
      .                           for rib in ribs {
  2,750 ( 0.00%)                      let has_generic_params: HasGenericParams = match rib.kind {
      .                                   NormalRibKind
      .                                   | ClosureOrAsyncRibKind
      .                                   | AssocItemRibKind
      .                                   | ModuleRibKind(..)
      .                                   | MacroDefinition(..)
      .                                   | ForwardGenericParamBanRibKind => {
      .                                       // Nothing to do. Continue.
      .                                       continue;
-- line 2796 ----------------------------------------
-- line 2799 ----------------------------------------
      .                                   ConstantItemRibKind(trivial, _) => {
      .                                       let features = self.session.features_untracked();
      .                                       // HACK(min_const_generics): We currently only allow `N` or `{ N }`.
      .                                       if !(trivial || features.generic_const_exprs) {
      .                                           // HACK(min_const_generics): If we encounter `Self` in an anonymous constant
      .                                           // we can't easily tell if it's generic at this stage, so we instead remember
      .                                           // this and then enforce the self type to be concrete later on.
      .                                           if let Res::SelfTy(trait_def, Some((impl_def, _))) = res {
    262 ( 0.00%)                                      res = Res::SelfTy(trait_def, Some((impl_def, true)));
      .                                           } else {
      .                                               if record_used {
      .                                                   self.report_error(
      .                                                       span,
      .                                                       ResolutionError::ParamInNonTrivialAnonConst {
      .                                                           name: rib_ident.name,
      .                                                           is_type: true,
      .                                                       },
-- line 2815 ----------------------------------------
-- line 2847 ----------------------------------------
      .                                       ),
      .                                   );
      .                               }
      .                               return Res::Err;
      .                           }
      .                       }
      .                       Res::Def(DefKind::ConstParam, _) => {
      .                           let mut ribs = ribs.iter().peekable();
      6 ( 0.00%)                  if let Some(Rib { kind: FnItemRibKind, .. }) = ribs.peek() {
      .                               // When declaring const parameters inside function signatures, the first rib
      .                               // is always a `FnItemRibKind`. In this case, we can skip it, to avoid it
      .                               // (spuriously) conflicting with the const param.
      .                               ribs.next();
      .                           }
      .           
      4 ( 0.00%)                  for rib in ribs {
     10 ( 0.00%)                      let has_generic_params = match rib.kind {
      .                                   NormalRibKind
      .                                   | ClosureOrAsyncRibKind
      .                                   | AssocItemRibKind
      .                                   | ModuleRibKind(..)
      .                                   | MacroDefinition(..)
      .                                   | ForwardGenericParamBanRibKind => continue,
      .           
      2 ( 0.00%)                          ConstantItemRibKind(trivial, _) => {
      .                                       let features = self.session.features_untracked();
      .                                       // HACK(min_const_generics): We currently only allow `N` or `{ N }`.
      4 ( 0.00%)                              if !(trivial || features.generic_const_exprs) {
      .                                           if record_used {
      .                                               self.report_error(
      .                                                   span,
      .                                                   ResolutionError::ParamInNonTrivialAnonConst {
      .                                                       name: rib_ident.name,
      .                                                       is_type: false,
      .                                                   },
      .                                               );
-- line 2882 ----------------------------------------
-- line 2912 ----------------------------------------
      .                                       ),
      .                                   );
      .                               }
      .                               return Res::Err;
      .                           }
      .                       }
      .                       _ => {}
      .                   }
  1,612 ( 0.00%)          res
      .               }
      .           
      .               fn record_partial_res(&mut self, node_id: NodeId, resolution: PartialRes) {
      .                   debug!("(recording res) recording {:?} for {}", resolution, node_id);
  3,680 ( 0.00%)          if let Some(prev_res) = self.partial_res_map.insert(node_id, resolution) {
      .                       panic!("path resolved multiple times ({:?} before, {:?} now)", prev_res, resolution);
      .                   }
      .               }
      .           
      .               fn record_pat_span(&mut self, node: NodeId, span: Span) {
      .                   debug!("(recording pat) recording {:?} for {:?}", node, span);
      .                   self.pat_span_map.insert(node, span);
      .               }
      .           
 50,130 ( 0.01%)      fn is_accessible_from(&self, vis: ty::Visibility, module: Module<'a>) -> bool {
 29,001 ( 0.01%)          vis.is_accessible_from(module.nearest_parent_mod(), self)
 45,117 ( 0.01%)      }
      .           
      .               fn set_binding_parent_module(&mut self, binding: &'a NameBinding<'a>, module: Module<'a>) {
 63,780 ( 0.01%)          if let Some(old_module) = self.binding_parent_modules.insert(PtrKey(binding), module) {
      .                       if !ptr::eq(module, old_module) {
      .                           span_bug!(binding.span, "parent module is reset for binding");
      .                       }
      .                   }
      .               }
      .           
      .               fn disambiguate_macro_rules_vs_modularized(
      .                   &self,
-- line 2948 ----------------------------------------
-- line 2959 ----------------------------------------
      .                       (Some(macro_rules), Some(modularized)) => {
      .                           macro_rules.nearest_parent_mod() == modularized.nearest_parent_mod()
      .                               && modularized.is_ancestor_of(macro_rules)
      .                       }
      .                       _ => false,
      .                   }
      .               }
      .           
      7 ( 0.00%)      fn report_errors(&mut self, krate: &Crate) {
      .                   self.report_with_use_injections(krate);
      .           
      6 ( 0.00%)          for &(span_use, span_def) in &self.macro_expanded_macro_export_errors {
      .                       let msg = "macro-expanded `macro_export` macros from the current crate \
      .                                  cannot be referred to by absolute paths";
      .                       self.lint_buffer.buffer_lint_with_diagnostic(
      .                           lint::builtin::MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS,
      .                           CRATE_NODE_ID,
      .                           span_use,
      .                           msg,
      .                           BuiltinLintDiagnostics::MacroExpandedMacroExportsAccessedByAbsolutePaths(span_def),
-- line 2978 ----------------------------------------
-- line 2984 ----------------------------------------
      .                   }
      .           
      .                   let mut reported_spans = FxHashSet::default();
      .                   for error in &self.privacy_errors {
      .                       if reported_spans.insert(error.dedup_span) {
      .                           self.report_privacy_error(error);
      .                       }
      .                   }
      8 ( 0.00%)      }
      .           
      .               fn report_with_use_injections(&mut self, krate: &Crate) {
      .                   for UseError { mut err, candidates, def_id, instead, suggestion } in
     10 ( 0.00%)              self.use_injections.drain(..)
      .                   {
      .                       let (span, found_use) = if let Some(def_id) = def_id.as_local() {
      .                           UsePlacementFinder::check(krate, self.def_id_to_node_id[def_id])
      .                       } else {
      .                           (None, false)
      .                       };
      .                       if !candidates.is_empty() {
      .                           diagnostics::show_candidates(
-- line 3004 ----------------------------------------
-- line 3284 ----------------------------------------
      .                       }
      .           
      .                       return;
      .                   }
      .           
      .                   err.span_suggestion(span, message, String::new(), Applicability::MachineApplicable);
      .               }
      .           
  1,090 ( 0.00%)      fn extern_prelude_get(
      .                   &mut self,
      .                   ident: Ident,
      .                   speculative: bool,
      .               ) -> Option<&'a NameBinding<'a>> {
    545 ( 0.00%)          if ident.is_path_segment_keyword() {
      .                       // Make sure `self`, `super` etc produce an error when passed to here.
      .                       return None;
      .                   }
    981 ( 0.00%)          self.extern_prelude.get(&ident.normalize_to_macros_2_0()).cloned().and_then(|entry| {
    124 ( 0.00%)              if let Some(binding) = entry.extern_crate_item {
     14 ( 0.00%)                  if !speculative && entry.introduced_by_item {
     21 ( 0.00%)                      self.record_use(ident, binding, false);
      .                           }
      .                           Some(binding)
      .                       } else {
    116 ( 0.00%)                  let crate_id = if !speculative {
     48 ( 0.00%)                      let Some(crate_id) =
     72 ( 0.00%)                          self.crate_loader.process_path_extern(ident.name, ident.span) else { return Some(self.dummy_binding); };
      .                               crate_id
      .                           } else {
    136 ( 0.00%)                      self.crate_loader.maybe_process_path_extern(ident.name)?
      .                           };
      .                           let crate_root = self.expect_module(crate_id.as_def_id());
      .                           Some(
      .                               (crate_root, ty::Visibility::Public, DUMMY_SP, LocalExpnId::ROOT)
     58 ( 0.00%)                          .to_name_binding(self.arenas),
      .                           )
      .                       }
      .                   })
    872 ( 0.00%)      }
      .           
      .               /// Rustdoc uses this to resolve things in a recoverable way. `ResolutionError<'a>`
      .               /// isn't something that can be returned because it can't be made to live that long,
      .               /// and also it's a private type. Fortunately rustdoc doesn't need to know the error,
      .               /// just that an error occurred.
      .               // FIXME(Manishearth): intra-doc links won't get warned of epoch changes.
      .               pub fn resolve_str_path_error(
      .                   &mut self,
-- line 3330 ----------------------------------------
-- line 3422 ----------------------------------------
      .               #[inline]
      .               pub fn opt_span(&self, def_id: DefId) -> Option<Span> {
      .                   def_id.as_local().map(|def_id| self.definitions.def_span(def_id))
      .               }
      .           
      .               /// Checks if an expression refers to a function marked with
      .               /// `#[rustc_legacy_const_generics]` and returns the argument index list
      .               /// from the attribute.
  1,168 ( 0.00%)      pub fn legacy_const_generic_args(&mut self, expr: &Expr) -> Option<Vec<usize>> {
    584 ( 0.00%)          if let ExprKind::Path(None, path) = &expr.kind {
      .                       // Don't perform legacy const generics rewriting if the path already
      .                       // has generic arguments.
    122 ( 0.00%)              if path.segments.last().unwrap().args.is_some() {
      .                           return None;
      .                       }
      .           
      .                       let partial_res = self.partial_res_map.get(&expr.id)?;
    236 ( 0.00%)              if partial_res.unresolved_segments() != 0 {
      .                           return None;
      .                       }
      .           
    412 ( 0.00%)              if let Res::Def(def::DefKind::Fn, def_id) = partial_res.base_res() {
      .                           // We only support cross-crate argument rewriting. Uses
      .                           // within the same crate should be updated to use the new
      .                           // const generics style.
     96 ( 0.00%)                  if def_id.is_local() {
      .                               return None;
      .                           }
      .           
      .                           if let Some(v) = self.legacy_const_generic_args.get(&def_id) {
      .                               return v.clone();
      .                           }
      .           
    120 ( 0.00%)                  let attr = self
      .                               .cstore()
     40 ( 0.00%)                      .item_attrs_untracked(def_id, self.session)
      .                               .find(|a| a.has_name(sym::rustc_legacy_const_generics))?;
      .                           let mut ret = Vec::new();
      .                           for meta in attr.meta_item_list()? {
      .                               match meta.literal()?.kind {
      .                                   LitKind::Int(a, _) => ret.push(a as usize),
      .                                   _ => panic!("invalid arg index"),
      .                               }
      .                           }
      .                           // Cache the lookup to avoid parsing attributes for an iterm multiple times.
      .                           self.legacy_const_generic_args.insert(def_id, Some(ret.clone()));
      .                           return Some(ret);
      .                       }
      .                   }
      .                   None
  1,314 ( 0.00%)      }
      .           
      7 ( 0.00%)      fn resolve_main(&mut self) {
      2 ( 0.00%)          let module = self.graph_root;
      .                   let ident = Ident::with_dummy_span(sym::main);
      .                   let parent_scope = &ParentScope::module(module, self);
      .           
      .                   let name_binding = match self.resolve_ident_in_module(
      .                       ModuleOrUniformRoot::Module(module),
      .                       ident,
      .                       ValueNS,
      .                       parent_scope,
-- line 3483 ----------------------------------------
-- line 3490 ----------------------------------------
      .           
      .                   let res = name_binding.res();
      .                   let is_import = name_binding.is_import();
      .                   let span = name_binding.span;
      .                   if let Res::Def(DefKind::Fn, _) = res {
      .                       self.record_use(ident, name_binding, false);
      .                   }
      .                   self.main_def = Some(MainDefinition { res, is_import, span });
      8 ( 0.00%)      }
      .           }
      .           
      .           fn names_to_string(names: &[Symbol]) -> String {
      .               let mut result = String::new();
      .               for (i, name) in names.iter().filter(|name| **name != kw::PathRoot).enumerate() {
      .                   if i > 0 {
      .                       result.push_str("::");
      .                   }
-- line 3506 ----------------------------------------
-- line 3558 ----------------------------------------
      .               /// This is the "trait item" from a fully qualified path. For example,
      .               /// we might be resolving  `X::Y::Z` from a path like `<T as X::Y>::Z`.
      .               /// The `path_span` is the span of the to the trait itself (`X::Y`).
      .               QPathTrait { qpath_id: NodeId, qpath_span: Span },
      .           }
      .           
      .           impl CrateLint {
      .               fn node_id(&self) -> Option<NodeId> {
  2,310 ( 0.00%)          match *self {
      .                       CrateLint::No => None,
      .                       CrateLint::SimplePath(id)
      .                       | CrateLint::UsePath { root_id: id, .. }
      .                       | CrateLint::QPathTrait { qpath_id: id, .. } => Some(id),
      .                   }
      .               }
      .           }
      .           
      .           pub fn provide(providers: &mut Providers) {
      .               late::lifetimes::provide(providers);
      1 ( 0.00%)  }

118,854 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs
--------------------------------------------------------------------------------
Ir               

-- line 176 ----------------------------------------
      .               }
      .               fn sess(self) -> Option<&'tcx Session> {
      .                   None
      .               }
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   None
      .               }
      .           
  3,894 ( 0.00%)      fn decoder(self, pos: usize) -> DecodeContext<'a, 'tcx> {
  1,298 ( 0.00%)          let tcx = self.tcx();
240,814 ( 0.05%)          DecodeContext {
 25,159 ( 0.01%)              opaque: opaque::Decoder::new(self.blob(), pos),
  1,298 ( 0.00%)              cdata: self.cdata(),
      .                       blob: self.blob(),
  7,478 ( 0.00%)              sess: self.sess().or(tcx.map(|tcx| tcx.sess)),
      .                       tcx,
      .                       last_source_file_index: 0,
      .                       lazy_state: LazyState::NoNode,
      .                       alloc_decoding_session: self
      .                           .cdata()
 22,688 ( 0.00%)                  .map(|cdata| cdata.cdata.alloc_decoding_state.new_decoding_session()),
      .                   }
  3,894 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Metadata<'a, 'tcx> for &'a MetadataBlob {
      .               #[inline]
      .               fn blob(self) -> &'a MetadataBlob {
      .                   self
      .               }
      .           }
-- line 206 ----------------------------------------
-- line 255 ----------------------------------------
      .               }
      .               #[inline]
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   Some(self.1)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<T> {
 28,858 ( 0.01%)      fn decode<M: Metadata<'a, 'tcx>>(self, metadata: M) -> T {
 16,418 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
 71,264 ( 0.01%)          dcx.lazy_state = LazyState::NodeStart(self.position);
 25,392 ( 0.01%)          T::decode(&mut dcx)
 36,865 ( 0.01%)      }
      .           }
      .           
      .           impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<[T]> {
      .               fn decode<M: Metadata<'a, 'tcx>>(
      .                   self,
      .                   metadata: M,
      .               ) -> impl ExactSizeIterator<Item = T> + Captures<'a> + Captures<'tcx> + 'x {
     63 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
     18 ( 0.00%)          dcx.lazy_state = LazyState::NodeStart(self.position);
 22,337 ( 0.00%)          (0..self.meta).map(move |_| T::decode(&mut dcx))
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> DecodeContext<'a, 'tcx> {
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   debug_assert!(self.tcx.is_some(), "missing TyCtxt in DecodeContext");
      .                   self.tcx.unwrap()
-- line 285 ----------------------------------------
-- line 292 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn cdata(&self) -> CrateMetadataRef<'a> {
      .                   debug_assert!(self.cdata.is_some(), "missing CrateMetadata in DecodeContext");
      .                   self.cdata.unwrap()
      .               }
      .           
      .               fn map_encoded_cnum_to_current(&self, cnum: CrateNum) -> CrateNum {
 61,931 ( 0.01%)          if cnum == LOCAL_CRATE { self.cdata().cnum } else { self.cdata().cnum_map[cnum] }
      .               }
      .           
 22,111 ( 0.00%)      fn read_lazy_with_meta<T: ?Sized + LazyMeta>(&mut self, meta: T::Meta) -> Lazy<T> {
      .                   let distance = self.read_usize();
 19,725 ( 0.00%)          let position = match self.lazy_state {
      .                       LazyState::NoNode => bug!("read_lazy_with_meta: outside of a metadata node"),
  5,300 ( 0.00%)              LazyState::NodeStart(start) => {
      .                           let start = start.get();
 10,600 ( 0.00%)                  assert!(distance <= start);
      .                           start - distance
      .                       }
  2,295 ( 0.00%)              LazyState::Previous(last_pos) => last_pos.get() + distance,
      .                   };
 12,130 ( 0.00%)          self.lazy_state = LazyState::Previous(NonZeroUsize::new(position).unwrap());
      .                   Lazy::from_position_and_meta(NonZeroUsize::new(position).unwrap(), meta)
 22,111 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn read_raw_bytes(&mut self, len: usize) -> &'a [u8] {
      .                   self.opaque.read_raw_bytes(len)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {
-- line 324 ----------------------------------------
-- line 326 ----------------------------------------
      .           
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   self.tcx.expect("missing TyCtxt in DecodeContext")
      .               }
      .           
      .               #[inline]
      .               fn peek_byte(&self) -> u8 {
 42,485 ( 0.01%)          self.opaque.data[self.opaque.position()]
      .               }
      .           
      .               #[inline]
      .               fn position(&self) -> usize {
      .                   self.opaque.position()
      .               }
      .           
 40,306 ( 0.01%)      fn cached_ty_for_shorthand<F>(&mut self, shorthand: usize, or_insert_with: F) -> Ty<'tcx>
      .               where
      .                   F: FnOnce(&mut Self) -> Ty<'tcx>,
      .               {
  5,758 ( 0.00%)          let tcx = self.tcx();
      .           
  5,758 ( 0.00%)          let key = ty::CReaderCacheKey { cnum: Some(self.cdata().cnum), pos: shorthand };
      .           
 17,784 ( 0.00%)          if let Some(&ty) = tcx.ty_rcache.borrow().get(&key) {
      .                       return ty;
      .                   }
      .           
  1,312 ( 0.00%)          let ty = or_insert_with(self);
      .                   tcx.ty_rcache.borrow_mut().insert(key, ty);
      .                   ty
 51,822 ( 0.01%)      }
      .           
      .               fn with_position<F, R>(&mut self, pos: usize, f: F) -> R
      .               where
      .                   F: FnOnce(&mut Self) -> R,
      .               {
      .                   let new_opaque = opaque::Decoder::new(self.opaque.data, pos);
      .                   let old_opaque = mem::replace(&mut self.opaque, new_opaque);
      .                   let old_state = mem::replace(&mut self.lazy_state, LazyState::NoNode);
      .                   let r = f(self);
  7,075 ( 0.00%)          self.opaque = old_opaque;
  1,415 ( 0.00%)          self.lazy_state = old_state;
      .                   r
      .               }
      .           
      .               fn decode_alloc_id(&mut self) -> rustc_middle::mir::interpret::AllocId {
      .                   if let Some(alloc_decoding_session) = self.alloc_decoding_session {
      .                       alloc_decoding_session.decode_alloc_id(self)
      .                   } else {
      .                       bug!("Attempting to decode interpret::AllocId without CrateMetadata")
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for CrateNum {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> CrateNum {
 33,148 ( 0.01%)          let cnum = CrateNum::from_u32(d.read_u32());
      .                   d.map_encoded_cnum_to_current(cnum)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for DefIndex {
    491 ( 0.00%)      fn decode(d: &mut DecodeContext<'a, 'tcx>) -> DefIndex {
 63,286 ( 0.01%)          DefIndex::from_u32(d.read_u32())
    982 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnIndex {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> ExpnIndex {
      .                   ExpnIndex::from_u32(d.read_u32())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {
103,344 ( 0.02%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> SyntaxContext {
 25,836 ( 0.01%)          let cdata = decoder.cdata();
 25,836 ( 0.01%)          let sess = decoder.sess.unwrap();
 51,672 ( 0.01%)          let cname = cdata.root.name;
      .                   rustc_span::hygiene::decode_syntax_context(decoder, &cdata.hygiene_context, |_, id| {
      .                       debug!("SpecializedDecoder<SyntaxContext>: decoding {}", id);
    332 ( 0.00%)              cdata
      .                           .root
      .                           .syntax_contexts
      .                           .get(cdata, id)
      .                           .unwrap_or_else(|| panic!("Missing SyntaxContext {:?} for crate {:?}", id, cname))
      .                           .decode((cdata, sess))
      .                   })
129,180 ( 0.03%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnId {
  3,864 ( 0.00%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> ExpnId {
    552 ( 0.00%)          let local_cdata = decoder.cdata();
    552 ( 0.00%)          let sess = decoder.sess.unwrap();
      .           
      .                   let cnum = CrateNum::decode(decoder);
      .                   let index = u32::decode(decoder);
      .           
      .                   let expn_id = rustc_span::hygiene::decode_expn_id(cnum, index, |expn_id| {
      .                       let ExpnId { krate: cnum, local_id: index } = expn_id;
      .                       // Lookup local `ExpnData`s in our own crate data. Foreign `ExpnData`s
      .                       // are stored in the owning crate, to avoid duplication.
      .                       debug_assert_ne!(cnum, LOCAL_CRATE);
    111 ( 0.00%)              let crate_data = if cnum == local_cdata.cnum {
      .                           local_cdata
      .                       } else {
      .                           local_cdata.cstore.get_crate_data(cnum)
      .                       };
    555 ( 0.00%)              let expn_data = crate_data
      .                           .root
      .                           .expn_data
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
    555 ( 0.00%)              let expn_hash = crate_data
      .                           .root
      .                           .expn_hashes
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
  1,110 ( 0.00%)              (expn_data, expn_hash)
      .                   });
      .                   expn_id
  4,416 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Span {
204,696 ( 0.04%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Span {
 25,587 ( 0.01%)          let ctxt = SyntaxContext::decode(decoder);
      .                   let tag = u8::decode(decoder);
      .           
 51,174 ( 0.01%)          if tag == TAG_PARTIAL_SPAN {
      .                       return DUMMY_SP.with_ctxt(ctxt);
      .                   }
      .           
      .                   debug_assert!(tag == TAG_VALID_SPAN_LOCAL || tag == TAG_VALID_SPAN_FOREIGN);
      .           
      .                   let lo = BytePos::decode(decoder);
      .                   let len = BytePos::decode(decoder);
      .                   let hi = lo + len;
      .           
 76,722 ( 0.02%)          let Some(sess) = decoder.sess else {
      .                       bug!("Cannot decode Span without Session.")
      .                   };
      .           
      .                   // There are two possibilities here:
      .                   // 1. This is a 'local span', which is located inside a `SourceFile`
      .                   // that came from this crate. In this case, we use the source map data
      .                   // encoded in this crate. This branch should be taken nearly all of the time.
      .                   // 2. This is a 'foreign span', which is located inside a `SourceFile`
-- line 476 ----------------------------------------
-- line 492 ----------------------------------------
      .                   // a transitive dependency.
      .                   //
      .                   // When we encode a foreign span, we adjust its 'lo' and 'high' values
      .                   // to be based on the *foreign* crate (e.g. crate C), not the crate
      .                   // we are writing metadata for (e.g. crate B). This allows us to
      .                   // treat the 'local' and 'foreign' cases almost identically during deserialization:
      .                   // we can call `imported_source_files` for the proper crate, and binary search
      .                   // through the returned slice using our span.
 65,095 ( 0.01%)          let imported_source_files = if tag == TAG_VALID_SPAN_LOCAL {
      .                       decoder.cdata().imported_source_files(sess)
      .                   } else {
      .                       // When we encode a proc-macro crate, all `Span`s should be encoded
      .                       // with `TAG_VALID_SPAN_LOCAL`
      .                       if decoder.cdata().root.is_proc_macro_crate() {
      .                           // Decode `CrateNum` as u32 - using `CrateNum::decode` will ICE
      .                           // since we don't have `cnum_map` populated.
      .                           let cnum = u32::decode(decoder);
-- line 508 ----------------------------------------
-- line 527 ----------------------------------------
      .           
      .                       let foreign_data = decoder.cdata().cstore.get_crate_data(cnum);
      .                       foreign_data.imported_source_files(sess)
      .                   };
      .           
      .                   let source_file = {
      .                       // Optimize for the case that most spans within a translated item
      .                       // originate from the same source_file.
 76,722 ( 0.02%)              let last_source_file = &imported_source_files[decoder.last_source_file_index];
      .           
 97,048 ( 0.02%)              if lo >= last_source_file.original_start_pos && lo <= last_source_file.original_end_pos
      .                       {
      .                           last_source_file
      .                       } else {
      .                           let index = imported_source_files
      .                               .binary_search_by_key(&lo, |source_file| source_file.original_start_pos)
 27,890 ( 0.01%)                      .unwrap_or_else(|index| index - 1);
      .           
      .                           // Don't try to cache the index for foreign spans,
      .                           // as this would require a map from CrateNums to indices
 13,947 ( 0.00%)                  if tag == TAG_VALID_SPAN_LOCAL {
 13,947 ( 0.00%)                      decoder.last_source_file_index = index;
      .                           }
 27,894 ( 0.01%)                  &imported_source_files[index]
      .                       }
      .                   };
      .           
      .                   // Make sure our binary search above is correct.
      .                   debug_assert!(
      .                       lo >= source_file.original_start_pos && lo <= source_file.original_end_pos,
      .                       "Bad binary search: lo={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       lo,
-- line 558 ----------------------------------------
-- line 565 ----------------------------------------
      .                       hi >= source_file.original_start_pos && hi <= source_file.original_end_pos,
      .                       "Bad binary search: hi={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       hi,
      .                       source_file.original_start_pos,
      .                       source_file.original_end_pos
      .                   );
      .           
      .                   let lo =
102,296 ( 0.02%)              (lo + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .                   let hi =
      .                       (hi + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .           
      .                   // Do not try to decode parent for foreign spans.
      .                   Span::new(lo, hi, ctxt, None)
230,283 ( 0.05%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for &'tcx [thir::abstract_const::Node<'tcx>] {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
-- line 587 ----------------------------------------
-- line 590 ----------------------------------------
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<T>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
  8,439 ( 0.00%)          decoder.read_lazy_with_meta(())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<[T]>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
 11,063 ( 0.00%)          if len == 0 { Lazy::empty() } else { decoder.read_lazy_with_meta(len) }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, I: Idx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<Table<I, T>>
      .           where
      .               Option<T>: FixedSizeEncoding,
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
  2,028 ( 0.00%)          decoder.read_lazy_with_meta(len)
      .               }
      .           }
      .           
      .           implement_ty_decoder!(DecodeContext<'a, 'tcx>);
      .           
      .           impl<'tcx> MetadataBlob {
      .               crate fn new(metadata_ref: MetadataRef) -> MetadataBlob {
      .                   MetadataBlob(Lrc::new(metadata_ref))
-- line 626 ----------------------------------------
-- line 630 ----------------------------------------
      .                   self.blob().starts_with(METADATA_HEADER)
      .               }
      .           
      .               crate fn get_rustc_version(&self) -> String {
      .                   Lazy::<String>::from_position(NonZeroUsize::new(METADATA_HEADER.len() + 4).unwrap())
      .                       .decode(self)
      .               }
      .           
     36 ( 0.00%)      crate fn get_root(&self) -> CrateRoot<'tcx> {
     12 ( 0.00%)          let slice = &self.blob()[..];
      .                   let offset = METADATA_HEADER.len();
     60 ( 0.00%)          let pos = (((slice[offset + 0] as u32) << 24)
     24 ( 0.00%)              | ((slice[offset + 1] as u32) << 16)
     48 ( 0.00%)              | ((slice[offset + 2] as u32) << 8)
     36 ( 0.00%)              | ((slice[offset + 3] as u32) << 0)) as usize;
      .                   Lazy::<CrateRoot<'tcx>>::from_position(NonZeroUsize::new(pos).unwrap()).decode(self)
     60 ( 0.00%)      }
      .           
      .               crate fn list_crate_metadata(&self, out: &mut dyn io::Write) -> io::Result<()> {
      .                   let root = self.get_root();
      .                   writeln!(out, "Crate info:")?;
      .                   writeln!(out, "name {}{}", root.name, root.extra_filename)?;
      .                   writeln!(out, "hash {} stable_crate_id {:?}", root.hash, root.stable_crate_id)?;
      .                   writeln!(out, "proc_macro {:?}", root.proc_macro_data.is_some())?;
      .                   writeln!(out, "=External Dependencies=")?;
-- line 654 ----------------------------------------
-- line 666 ----------------------------------------
      .                   }
      .                   write!(out, "\n")?;
      .                   Ok(())
      .               }
      .           }
      .           
      .           impl CrateRoot<'_> {
      .               crate fn is_proc_macro_crate(&self) -> bool {
      8 ( 0.00%)          self.proc_macro_data.is_some()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
      6 ( 0.00%)          self.name
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
      4 ( 0.00%)          self.hash
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
      8 ( 0.00%)          self.stable_crate_id
      .               }
      .           
      .               crate fn triple(&self) -> &TargetTriple {
      .                   &self.triple
      .               }
      .           
      .               crate fn decode_crate_deps<'a>(
      .                   &self,
      .                   metadata: &'a MetadataBlob,
      .               ) -> impl ExactSizeIterator<Item = CrateDep> + Captures<'a> {
      8 ( 0.00%)          self.crate_deps.decode(metadata)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> CrateMetadataRef<'a> {
      .               fn raw_proc_macro(self, id: DefIndex) -> &'a ProcMacro {
      .                   // DefIndex's in root.proc_macro_data have a one-to-one correspondence
      .                   // with items in 'raw_proc_macros'.
      .                   let pos = self
-- line 705 ----------------------------------------
-- line 709 ----------------------------------------
      .                       .unwrap()
      .                       .macros
      .                       .decode(self)
      .                       .position(|i| i == id)
      .                       .unwrap();
      .                   &self.raw_proc_macros.unwrap()[pos]
      .               }
      .           
 36,542 ( 0.01%)      fn opt_item_ident(self, item_index: DefIndex, sess: &Session) -> Option<Ident> {
 27,016 ( 0.01%)          let name = self.def_key(item_index).disambiguated_data.data.get_opt_name()?;
 13,713 ( 0.00%)          let span = match self.root.tables.ident_span.get(self, item_index) {
      .                       Some(lazy_span) => lazy_span.decode((self, sess)),
      .                       None => {
      .                           // FIXME: this weird case of a name with no span is specific to `extern crate`
      .                           // items, which are supposed to be treated like `use` items and only be encoded
      .                           // to metadata as `Export`s, return `None` because that's what all the callers
      .                           // expect in this case.
     36 ( 0.00%)                  assert_eq!(self.def_kind(item_index), DefKind::ExternCrate);
      .                           return None;
      .                       }
      .                   };
      .                   Some(Ident::new(name, span))
 46,684 ( 0.01%)      }
      .           
    350 ( 0.00%)      fn item_ident(self, item_index: DefIndex, sess: &Session) -> Ident {
  6,415 ( 0.00%)          self.opt_item_ident(item_index, sess).expect("no encoded ident for item")
    700 ( 0.00%)      }
      .           
      .               fn maybe_kind(self, item_id: DefIndex) -> Option<EntryKind> {
  8,766 ( 0.00%)          self.root.tables.kind.get(self, item_id).map(|k| k.decode(self))
      .               }
      .           
 35,064 ( 0.01%)      fn kind(self, item_id: DefIndex) -> EntryKind {
      .                   self.maybe_kind(item_id).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
 26,298 ( 0.01%)      }
      .           
  6,489 ( 0.00%)      fn def_kind(self, item_id: DefIndex) -> DefKind {
  5,523 ( 0.00%)          self.root.tables.def_kind.get(self, item_id).map(|k| k.decode(self)).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::def_kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
  3,708 ( 0.00%)      }
      .           
  3,150 ( 0.00%)      fn get_span(self, index: DefIndex, sess: &Session) -> Span {
  4,421 ( 0.00%)          self.root
      .                       .tables
      .                       .span
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing span for {:?}", index))
      .                       .decode((self, sess))
  1,750 ( 0.00%)      }
      .           
      .               fn load_proc_macro(self, id: DefIndex, sess: &Session) -> SyntaxExtension {
      .                   let (name, kind, helper_attrs) = match *self.raw_proc_macro(id) {
      .                       ProcMacro::CustomDerive { trait_name, attributes, client } => {
      .                           let helper_attrs =
      .                               attributes.iter().cloned().map(Symbol::intern).collect::<Vec<_>>();
      .                           (
      .                               trait_name,
-- line 778 ----------------------------------------
-- line 795 ----------------------------------------
      .                       self.get_span(id, sess),
      .                       helper_attrs,
      .                       self.root.edition,
      .                       Symbol::intern(name),
      .                       &attrs,
      .                   )
      .               }
      .           
    312 ( 0.00%)      fn get_trait_def(self, item_id: DefIndex, sess: &Session) -> ty::TraitDef {
     96 ( 0.00%)          match self.kind(item_id) {
     24 ( 0.00%)              EntryKind::Trait(data) => {
    144 ( 0.00%)                  let data = data.decode((self, sess));
    384 ( 0.00%)                  ty::TraitDef::new(
      .                               self.local_def_id(item_id),
     48 ( 0.00%)                      data.unsafety,
     48 ( 0.00%)                      data.paren_sugar,
     48 ( 0.00%)                      data.has_auto_impl,
     48 ( 0.00%)                      data.is_marker,
     24 ( 0.00%)                      data.skip_array_during_method_dispatch,
     24 ( 0.00%)                      data.specialization_kind,
     96 ( 0.00%)                      self.def_path_hash(item_id),
     24 ( 0.00%)                      data.must_implement_one_of,
      .                           )
      .                       }
      .                       EntryKind::TraitAlias => ty::TraitDef::new(
      .                           self.local_def_id(item_id),
      .                           hir::Unsafety::Normal,
      .                           false,
      .                           false,
      .                           false,
      .                           false,
      .                           ty::trait_def::TraitSpecializationKind::None,
      .                           self.def_path_hash(item_id),
      .                           None,
      .                       ),
      .                       _ => bug!("def-index does not refer to trait or trait alias"),
      .                   }
    216 ( 0.00%)      }
      .           
    432 ( 0.00%)      fn get_variant(
      .                   self,
      .                   kind: &EntryKind,
      .                   index: DefIndex,
      .                   parent_did: DefId,
      .                   sess: &Session,
      .               ) -> ty::VariantDef {
    192 ( 0.00%)          let data = match kind {
      .                       EntryKind::Variant(data) | EntryKind::Struct(data, _) | EntryKind::Union(data, _) => {
    240 ( 0.00%)                  data.decode(self)
      .                       }
      .                       _ => bug!(),
      .                   };
      .           
    170 ( 0.00%)          let adt_kind = match kind {
      .                       EntryKind::Variant(_) => ty::AdtKind::Enum,
      .                       EntryKind::Struct(..) => ty::AdtKind::Struct,
      .                       EntryKind::Union(..) => ty::AdtKind::Union,
      .                       _ => bug!(),
      .                   };
      .           
      .                   let variant_did =
      .                       if adt_kind == ty::AdtKind::Enum { Some(self.local_def_id(index)) } else { None };
     96 ( 0.00%)          let ctor_did = data.ctor.map(|index| self.local_def_id(index));
      .           
  1,056 ( 0.00%)          ty::VariantDef::new(
      .                       self.item_ident(index, sess).name,
      .                       variant_did,
      .                       ctor_did,
    192 ( 0.00%)              data.discr,
    288 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, index)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
      .                           .map(|index| ty::FieldDef {
     68 ( 0.00%)                      did: self.local_def_id(index),
    136 ( 0.00%)                      name: self.item_ident(index, sess).name,
    136 ( 0.00%)                      vis: self.get_visibility(index),
      .                           })
      .                           .collect(),
      .                       data.ctor_kind,
      .                       adt_kind,
      .                       parent_did,
      .                       false,
     48 ( 0.00%)              data.is_non_exhaustive,
      .                   )
    432 ( 0.00%)      }
      .           
    600 ( 0.00%)      fn get_adt_def(self, item_id: DefIndex, tcx: TyCtxt<'tcx>) -> &'tcx ty::AdtDef {
    160 ( 0.00%)          let kind = self.kind(item_id);
     80 ( 0.00%)          let did = self.local_def_id(item_id);
      .           
    194 ( 0.00%)          let (adt_kind, repr) = match kind {
      .                       EntryKind::Enum(repr) => (ty::AdtKind::Enum, repr),
      .                       EntryKind::Struct(_, repr) => (ty::AdtKind::Struct, repr),
      .                       EntryKind::Union(_, repr) => (ty::AdtKind::Union, repr),
      .                       _ => bug!("get_adt_def called on a non-ADT {:?}", did),
      .                   };
      .           
      .                   let variants = if let ty::AdtKind::Enum = adt_kind {
     20 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, item_id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
    204 ( 0.00%)                  .map(|index| self.get_variant(&self.kind(index), index, did, tcx.sess))
      .                           .collect()
      .                   } else {
    288 ( 0.00%)              std::iter::once(self.get_variant(&kind, item_id, did, tcx.sess)).collect()
      .                   };
      .           
    580 ( 0.00%)          tcx.alloc_adt_def(did, adt_kind, variants, repr)
    280 ( 0.00%)      }
      .           
      .               fn get_explicit_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
  1,530 ( 0.00%)          self.root.tables.explicit_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_inferred_outlives(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
  1,530 ( 0.00%)          self.root
      .                       .tables
      .                       .inferred_outlives
      .                       .get(self, item_id)
     16 ( 0.00%)              .map(|predicates| tcx.arena.alloc_from_iter(predicates.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_super_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
    120 ( 0.00%)          self.root.tables.super_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_explicit_item_bounds(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
     10 ( 0.00%)          self.root
      .                       .tables
      .                       .explicit_item_bounds
      .                       .get(self, item_id)
      4 ( 0.00%)              .map(|bounds| tcx.arena.alloc_from_iter(bounds.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_generics(self, item_id: DefIndex, sess: &Session) -> ty::Generics {
  1,807 ( 0.00%)          self.root.tables.generics.get(self, item_id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_type(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
  3,825 ( 0.00%)          self.root
      .                       .tables
      .                       .ty
      .                       .get(self, id)
      .                       .unwrap_or_else(|| panic!("Not a type: {:?}", id))
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_stability(self, id: DefIndex) -> Option<attr::Stability> {
    525 ( 0.00%)          self.root.tables.stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_const_stability(self, id: DefIndex) -> Option<attr::ConstStability> {
      .                   self.root.tables.const_stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_deprecation(self, id: DefIndex) -> Option<attr::Deprecation> {
    470 ( 0.00%)          self.root.tables.deprecation.get(self, id).map(|depr| depr.decode(self))
      .               }
      .           
    846 ( 0.00%)      fn get_visibility(self, id: DefIndex) -> ty::Visibility {
  7,325 ( 0.00%)          self.root.tables.visibility.get(self, id).unwrap().decode(self)
    564 ( 0.00%)      }
      .           
      .               fn get_impl_data(self, id: DefIndex) -> ImplData {
 14,976 ( 0.00%)          match self.kind(id) {
 12,480 ( 0.00%)              EntryKind::Impl(data) => data.decode(self),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_parent_impl(self, id: DefIndex) -> Option<DefId> {
  7,161 ( 0.00%)          self.get_impl_data(id).parent_impl
      .               }
      .           
      .               fn get_impl_polarity(self, id: DefIndex) -> ty::ImplPolarity {
     97 ( 0.00%)          self.get_impl_data(id).polarity
      .               }
      .           
      .               fn get_impl_defaultness(self, id: DefIndex) -> hir::Defaultness {
     12 ( 0.00%)          self.get_impl_data(id).defaultness
      .               }
      .           
      .               fn get_impl_constness(self, id: DefIndex) -> hir::Constness {
      .                   self.get_impl_data(id).constness
      .               }
      .           
      .               fn get_trait_item_def_id(self, id: DefIndex) -> Option<DefId> {
  5,010 ( 0.00%)          self.root.tables.trait_item_def_id.get(self, id).map(|d| d.decode(self))
      .               }
      .           
      .               fn get_coerce_unsized_info(self, id: DefIndex) -> Option<ty::adjustment::CoerceUnsizedInfo> {
      .                   self.get_impl_data(id).coerce_unsized_info
      .               }
      .           
      .               fn get_impl_trait(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Option<ty::TraitRef<'tcx>> {
 29,427 ( 0.01%)          self.root.tables.impl_trait_ref.get(self, id).map(|tr| tr.decode((self, tcx)))
      .               }
      .           
      .               fn get_expn_that_defined(self, id: DefIndex, sess: &Session) -> ExpnId {
  1,790 ( 0.00%)          self.root.tables.expn_that_defined.get(self, id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_const_param_default(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> rustc_middle::ty::Const<'tcx> {
      .                   self.root.tables.const_defaults.get(self, id).unwrap().decode((self, tcx))
-- line 1026 ----------------------------------------
-- line 1028 ----------------------------------------
      .           
      .               /// Iterates over all the stability attributes in the given crate.
      .               fn get_lib_features(self, tcx: TyCtxt<'tcx>) -> &'tcx [(Symbol, Option<Symbol>)] {
      .                   tcx.arena.alloc_from_iter(self.root.lib_features.decode(self))
      .               }
      .           
      .               /// Iterates over the language items in the given crate.
      .               fn get_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, usize)] {
     12 ( 0.00%)          tcx.arena.alloc_from_iter(
      8 ( 0.00%)              self.root
      .                           .lang_items
      .                           .decode(self)
    532 ( 0.00%)                  .map(|(def_index, index)| (self.local_def_id(def_index), index)),
      .                   )
      .               }
      .           
      .               /// Iterates over the diagnostic items in the given crate.
      .               fn get_diagnostic_items(self) -> DiagnosticItems {
      .                   let mut id_to_name = FxHashMap::default();
      8 ( 0.00%)          let name_to_id = self
      .                       .root
      .                       .diagnostic_items
      .                       .decode(self)
      .                       .map(|(name, def_index)| {
    106 ( 0.00%)                  let id = self.local_def_id(def_index);
    106 ( 0.00%)                  id_to_name.insert(id, name);
      .                           (name, id)
      .                       })
      .                       .collect();
     36 ( 0.00%)          DiagnosticItems { id_to_name, name_to_id }
      .               }
      .           
      .               /// Iterates over all named children of the given module,
      .               /// including both proper items and reexports.
      .               /// Module here is understood in name resolution sense - it can be a `mod` item,
      .               /// or a crate root, or an enum, or a trait.
      .               fn for_each_module_child(
      .                   self,
      .                   id: DefIndex,
      .                   mut callback: impl FnMut(ModChild),
      .                   sess: &Session,
      .               ) {
    212 ( 0.00%)          if let Some(data) = &self.root.proc_macro_data {
      .                       // If we are loading as a proc macro, we want to return
      .                       // the view of this crate as a proc macro crate.
      .                       if id == CRATE_DEF_INDEX {
      .                           for def_index in data.macros.decode(self) {
      .                               let raw_macro = self.raw_proc_macro(def_index);
      .                               let res = Res::Def(
      .                                   DefKind::Macro(macro_kind(raw_macro)),
      .                                   self.local_def_id(def_index),
-- line 1078 ----------------------------------------
-- line 1085 ----------------------------------------
      .                                   span: ident.span,
      .                               });
      .                           }
      .                       }
      .                       return;
      .                   }
      .           
      .                   // Iterate over all children.
    424 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    848 ( 0.00%)              for child_index in children.decode((self, sess)) {
 11,454 ( 0.00%)                  if let Some(ident) = self.opt_item_ident(child_index, sess) {
  1,494 ( 0.00%)                      let kind = self.def_kind(child_index);
    996 ( 0.00%)                      if matches!(kind, DefKind::Macro(..)) {
      .                                   // FIXME: Macros are currently encoded twice, once as items and once as
      .                                   // reexports. We ignore the items here and only use the reexports.
      .                                   continue;
      .                               }
      .                               let def_id = self.local_def_id(child_index);
      .                               let res = Res::Def(kind, def_id);
      .                               let vis = self.get_visibility(child_index);
      .                               let span = self.get_span(child_index, sess);
      .           
      .                               callback(ModChild { ident, res, vis, span });
      .           
      .                               // For non-re-export structs and variants add their constructors to children.
      .                               // Re-export lists automatically contain constructors when necessary.
  1,858 ( 0.00%)                      match kind {
      .                                   DefKind::Struct => {
     31 ( 0.00%)                              if let Some((ctor_def_id, ctor_kind)) =
      .                                           self.get_ctor_def_id_and_kind(child_index)
      .                                       {
      .                                           let ctor_res =
      .                                               Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);
      .                                           let vis = self.get_visibility(ctor_def_id.index);
      .                                           callback(ModChild { ident, res: ctor_res, vis, span });
      .                                       }
      .                                   }
      .                                   DefKind::Variant => {
      .                                       // Braced variants, unlike structs, generate unusable names in
      .                                       // value namespace, they are reserved for possible future use.
      .                                       // It's ok to use the variant's id as a ctor id since an
      .                                       // error will be reported on any use of such resolution anyway.
     21 ( 0.00%)                              let (ctor_def_id, ctor_kind) = self
      .                                           .get_ctor_def_id_and_kind(child_index)
      .                                           .unwrap_or((def_id, CtorKind::Fictive));
      .                                       let ctor_res =
      .                                           Res::Def(DefKind::Ctor(CtorOf::Variant, ctor_kind), ctor_def_id);
      .                                       let mut vis = self.get_visibility(ctor_def_id.index);
      7 ( 0.00%)                              if ctor_def_id == def_id && vis.is_public() {
      .                                           // For non-exhaustive variants lower the constructor visibility to
      .                                           // within the crate. We only need this for fictive constructors,
      .                                           // for other constructors correct visibilities
      .                                           // were already encoded in metadata.
      .                                           let mut attrs = self.get_item_attrs(def_id.index, sess);
      .                                           if attrs.any(|item| item.has_name(sym::non_exhaustive)) {
      .                                               let crate_def_id = self.local_def_id(CRATE_DEF_INDEX);
      .                                               vis = ty::Visibility::Restricted(crate_def_id);
-- line 1141 ----------------------------------------
-- line 1144 ----------------------------------------
      .                                       callback(ModChild { ident, res: ctor_res, vis, span });
      .                                   }
      .                                   _ => {}
      .                               }
      .                           }
      .                       }
      .                   }
      .           
    527 ( 0.00%)          match self.kind(id) {
     48 ( 0.00%)              EntryKind::Mod(exports) => {
 11,222 ( 0.00%)                  for exp in exports.decode((self, sess)) {
      .                               callback(exp);
      .                           }
      .                       }
      .                       EntryKind::Enum(..) | EntryKind::Trait(..) => {}
      .                       _ => bug!("`for_each_module_child` is called on a non-module: {:?}", self.def_kind(id)),
      .                   }
      .               }
      .           
      .               fn is_ctfe_mir_available(self, id: DefIndex) -> bool {
     16 ( 0.00%)          self.root.tables.mir_for_ctfe.get(self, id).is_some()
      .               }
      .           
      .               fn is_item_mir_available(self, id: DefIndex) -> bool {
    288 ( 0.00%)          self.root.tables.mir.get(self, id).is_some()
      .               }
      .           
      .               fn module_expansion(self, id: DefIndex, sess: &Session) -> ExpnId {
  2,275 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::Mod(_) | EntryKind::Enum(_) | EntryKind::Trait(_) => {
      .                           self.get_expn_that_defined(id, sess)
      .                       }
      .                       _ => panic!("Expected module, found {:?}", self.local_def_id(id)),
      .                   }
      .               }
      .           
      .               fn get_optimized_mir(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
    360 ( 0.00%)          self.root
      .                       .tables
      .                       .mir
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_optimized_mir: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_mir_for_ctfe(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
     20 ( 0.00%)          self.root
      .                       .tables
      .                       .mir_for_ctfe
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_mir_for_ctfe: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
-- line 1200 ----------------------------------------
-- line 1216 ----------------------------------------
      .                       .tables
      .                       .unused_generic_params
      .                       .get(self, id)
      .                       .map(|params| params.decode(self))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_promoted_mir(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> IndexVec<Promoted, Body<'tcx>> {
     10 ( 0.00%)          self.root
      .                       .tables
      .                       .promoted_mir
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_promoted_mir: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
-- line 1232 ----------------------------------------
-- line 1242 ----------------------------------------
      .                           qualif,
      .                           _,
      .                       ) => qualif,
      .                       _ => bug!("mir_const_qualif: unexpected kind"),
      .                   }
      .               }
      .           
      .               fn get_fn_has_self_parameter(self, id: DefIndex) -> bool {
    550 ( 0.00%)          match self.kind(id) {
    440 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).has_self,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn get_associated_item_def_ids(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [DefId] {
    889 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    381 ( 0.00%)              tcx.arena.alloc_from_iter(
    127 ( 0.00%)                  children.decode((self, tcx.sess)).map(|child_index| self.local_def_id(child_index)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
      .               }
      .           
 11,280 ( 0.00%)      fn get_associated_item(self, id: DefIndex, sess: &Session) -> ty::AssocItem {
  6,580 ( 0.00%)          let def_key = self.def_key(id);
      .                   let parent = self.local_def_id(def_key.parent.unwrap());
      .                   let ident = self.item_ident(id, sess);
      .           
  6,618 ( 0.00%)          let (kind, container, has_self) = match self.kind(id) {
     12 ( 0.00%)              EntryKind::AssocConst(container, _, _) => (ty::AssocKind::Const, container, false),
    924 ( 0.00%)              EntryKind::AssocFn(data) => {
      .                           let data = data.decode(self);
  6,468 ( 0.00%)                  (ty::AssocKind::Fn, data.container, data.has_self)
      .                       }
     26 ( 0.00%)              EntryKind::AssocType(container) => (ty::AssocKind::Type, container, false),
      .                       _ => bug!("cannot get associated-item of `{:?}`", def_key),
      .                   };
      .           
 16,920 ( 0.00%)          ty::AssocItem {
      .                       name: ident.name,
      .                       kind,
      .                       vis: self.get_visibility(id),
      .                       defaultness: container.defaultness(),
      .                       def_id: self.local_def_id(id),
      .                       trait_item_def_id: self.get_trait_item_def_id(id),
      .                       container: container.with_def_id(parent),
      .                       fn_has_self_parameter: has_self,
      .                   }
  8,460 ( 0.00%)      }
      .           
      .               fn get_item_variances(self, id: DefIndex) -> impl Iterator<Item = ty::Variance> + 'a {
    155 ( 0.00%)          self.root.tables.variances.get(self, id).unwrap_or_else(Lazy::empty).decode(self)
      .               }
      .           
      .               fn get_ctor_def_id_and_kind(self, node_id: DefIndex) -> Option<(DefId, CtorKind)> {
  1,371 ( 0.00%)          match self.kind(node_id) {
      .                       EntryKind::Struct(data, _) | EntryKind::Variant(data) => {
    590 ( 0.00%)                  let vdata = data.decode(self);
    436 ( 0.00%)                  vdata.ctor.map(|index| (self.local_def_id(index), vdata.ctor_kind))
      .                       }
      .                       _ => None,
      .                   }
    772 ( 0.00%)      }
      .           
    324 ( 0.00%)      fn get_item_attrs(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = ast::Attribute> + 'a {
  1,041 ( 0.00%)          self.root
      .                       .tables
      .                       .attributes
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           // Structure and variant constructors don't have any attributes encoded for them,
      .                           // but we assume that someone passing a constructor ID actually wants to look at
      .                           // the attributes on the corresponding struct or variant.
      .                           let def_key = self.def_key(id);
-- line 1320 ----------------------------------------
-- line 1322 ----------------------------------------
      .                           let parent_id = def_key.parent.expect("no parent for a constructor");
      .                           self.root
      .                               .tables
      .                               .attributes
      .                               .get(self, parent_id)
      .                               .expect("no encoded attributes for a structure or variant")
      .                       })
      .                       .decode((self, sess))
    243 ( 0.00%)      }
      .           
      .               fn get_struct_field_names(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = Spanned<Symbol>> + 'a {
    750 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
  3,500 ( 0.00%)              .map(move |index| respan(self.get_span(index, sess), self.item_ident(index, sess).name))
      .               }
      .           
      .               fn get_struct_field_visibilities(self, id: DefIndex) -> impl Iterator<Item = Visibility> + 'a {
    235 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
    282 ( 0.00%)              .map(move |field_index| self.get_visibility(field_index))
      .               }
      .           
      .               fn get_inherent_implementations_for_type(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> &'tcx [DefId] {
     80 ( 0.00%)          tcx.arena.alloc_from_iter(
    100 ( 0.00%)              self.root
      .                           .tables
      .                           .inherent_impls
      .                           .get(self, id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
  1,010 ( 0.00%)                  .map(|index| self.local_def_id(index)),
      .                   )
      .               }
      .           
      .               fn get_traits(self) -> impl Iterator<Item = DefId> + 'a {
      .                   self.root.traits.decode(self).map(move |index| self.local_def_id(index))
      .               }
      .           
      .               fn get_trait_impls(self) -> impl Iterator<Item = (DefId, DefId, Option<SimplifiedType>)> + 'a {
-- line 1376 ----------------------------------------
-- line 1380 ----------------------------------------
      .                           index: *trait_index,
      .                       };
      .                       impls.decode(self).map(move |(impl_index, simplified_self_ty)| {
      .                           (trait_def_id, self.local_def_id(impl_index), simplified_self_ty)
      .                       })
      .                   })
      .               }
      .           
    900 ( 0.00%)      fn get_implementations_of_trait(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_def_id: DefId,
      .               ) -> &'tcx [(DefId, Option<SimplifiedType>)] {
    100 ( 0.00%)          if self.trait_impls.is_empty() {
      .                       return &[];
      .                   }
      .           
      .                   // Do a reverse lookup beforehand to avoid touching the crate_num
      .                   // hash map in the loop below.
    150 ( 0.00%)          let key = match self.reverse_translate_def_id(trait_def_id) {
      .                       Some(def_id) => (def_id.krate.as_u32(), def_id.index),
      .                       None => return &[],
      .                   };
      .           
      .                   if let Some(impls) = self.trait_impls.get(&key) {
    188 ( 0.00%)              tcx.arena.alloc_from_iter(
     94 ( 0.00%)                  impls
      .                               .decode(self)
  2,779 ( 0.00%)                      .map(|(idx, simplified_self_ty)| (self.local_def_id(idx), simplified_self_ty)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
    800 ( 0.00%)      }
      .           
      .               fn get_trait_of_item(self, id: DefIndex) -> Option<DefId> {
    440 ( 0.00%)          let def_key = self.def_key(id);
    550 ( 0.00%)          match def_key.disambiguated_data.data {
      .                       DefPathData::TypeNs(..) | DefPathData::ValueNs(..) => (),
      .                       // Not an associated item
      .                       _ => return None,
      .                   }
    990 ( 0.00%)          def_key.parent.and_then(|parent_index| match self.kind(parent_index) {
      .                       EntryKind::Trait(_) | EntryKind::TraitAlias => Some(self.local_def_id(parent_index)),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               fn get_native_libraries(self, sess: &'a Session) -> impl Iterator<Item = NativeLib> + 'a {
      8 ( 0.00%)          self.root.native_libraries.decode((self, sess))
      .               }
      .           
      .               fn get_proc_macro_quoted_span(self, index: usize, sess: &Session) -> Span {
      .                   self.root
      .                       .tables
      .                       .proc_macro_quoted_spans
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing proc macro quoted span: {:?}", index))
-- line 1437 ----------------------------------------
-- line 1450 ----------------------------------------
      .                       self.root.dylib_dependency_formats.decode(self).enumerate().flat_map(|(i, link)| {
      .                           let cnum = CrateNum::new(i + 1);
      .                           link.map(|link| (self.cnum_map[cnum], link))
      .                       }),
      .                   )
      .               }
      .           
      .               fn get_missing_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [lang_items::LangItem] {
     20 ( 0.00%)          tcx.arena.alloc_from_iter(self.root.lang_items_missing.decode(self))
      .               }
      .           
      .               fn get_fn_param_names(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [Ident] {
      .                   let param_names = match self.kind(id) {
      .                       EntryKind::Fn(data) | EntryKind::ForeignFn(data) => data.decode(self).param_names,
      .                       EntryKind::AssocFn(data) => data.decode(self).fn_data.param_names,
      .                       _ => Lazy::empty(),
      .                   };
      .                   tcx.arena.alloc_from_iter(param_names.decode((self, tcx)))
      .               }
      .           
      .               fn exported_symbols(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ExportedSymbol<'tcx>, SymbolExportLevel)] {
     24 ( 0.00%)          tcx.arena.alloc_from_iter(self.root.exported_symbols.decode((self, tcx)))
      .               }
      .           
      .               fn get_rendered_const(self, id: DefIndex) -> String {
      .                   match self.kind(id) {
      .                       EntryKind::AnonConst(_, data)
      .                       | EntryKind::Const(_, data)
      .                       | EntryKind::AssocConst(_, _, data) => data.decode(self).0,
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_macro(self, id: DefIndex, sess: &Session) -> MacroDef {
     42 ( 0.00%)          match self.kind(id) {
      7 ( 0.00%)              EntryKind::MacroDef(macro_def) => macro_def.decode((self, sess)),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               // This replicates some of the logic of the crate-local `is_const_fn_raw` query, because we
      .               // don't serialize constness for tuple variant and tuple struct constructors.
      .               fn is_const_fn_raw(self, id: DefIndex) -> bool {
     18 ( 0.00%)          let constness = match self.kind(id) {
      4 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).fn_data.constness,
      .                       EntryKind::Fn(data) => data.decode(self).constness,
      .                       EntryKind::ForeignFn(data) => data.decode(self).constness,
      .                       EntryKind::Variant(..) | EntryKind::Struct(..) => hir::Constness::Const,
      .                       _ => hir::Constness::NotConst,
      .                   };
      .                   constness == hir::Constness::Const
      .               }
      .           
-- line 1505 ----------------------------------------
-- line 1508 ----------------------------------------
      .                       EntryKind::Fn(data) => data.decode(self).asyncness,
      .                       EntryKind::AssocFn(data) => data.decode(self).fn_data.asyncness,
      .                       EntryKind::ForeignFn(data) => data.decode(self).asyncness,
      .                       _ => bug!("asyncness: expected function kind"),
      .                   }
      .               }
      .           
      .               fn is_foreign_item(self, id: DefIndex) -> bool {
    814 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::ForeignImmStatic | EntryKind::ForeignMutStatic | EntryKind::ForeignFn(_) => {
      .                           true
      .                       }
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn static_mutability(self, id: DefIndex) -> Option<hir::Mutability> {
     66 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::ImmStatic | EntryKind::ForeignImmStatic => Some(hir::Mutability::Not),
      .                       EntryKind::MutStatic | EntryKind::ForeignMutStatic => Some(hir::Mutability::Mut),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn generator_kind(self, id: DefIndex) -> Option<hir::GeneratorKind> {
      .                   match self.kind(id) {
      .                       EntryKind::Generator(data) => Some(data),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn fn_sig(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {
    580 ( 0.00%)          self.root.tables.fn_sig.get(self, id).unwrap().decode((self, tcx))
      .               }
      .           
      .               #[inline]
 52,360 ( 0.01%)      fn def_key(self, index: DefIndex) -> DefKey {
 15,104 ( 0.00%)          *self
      .                       .def_key_cache
      .                       .lock()
      .                       .entry(index)
 16,530 ( 0.00%)              .or_insert_with(|| self.root.tables.def_keys.get(self, index).unwrap().decode(self))
 59,840 ( 0.01%)      }
      .           
      .               // Returns the path leading to the thing with this `id`.
      .               fn def_path(self, id: DefIndex) -> DefPath {
      .                   debug!("def_path(cnum={:?}, id={:?})", self.cnum, id);
    108 ( 0.00%)          DefPath::make(self.cnum, id, |parent| self.def_key(parent))
      .               }
      .           
      .               fn def_path_hash_unlocked(
      .                   self,
      .                   index: DefIndex,
      .                   def_path_hashes: &mut FxHashMap<DefIndex, DefPathHash>,
      .               ) -> DefPathHash {
  2,016 ( 0.00%)          *def_path_hashes.entry(index).or_insert_with(|| {
  1,595 ( 0.00%)              self.root.tables.def_path_hashes.get(self, index).unwrap().decode(self)
      .                   })
      .               }
      .           
      .               #[inline]
  7,056 ( 0.00%)      fn def_path_hash(self, index: DefIndex) -> DefPathHash {
      .                   let mut def_path_hashes = self.def_path_hash_cache.lock();
      .                   self.def_path_hash_unlocked(index, &mut def_path_hashes)
  8,064 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn def_path_hash_to_def_index(self, hash: DefPathHash) -> DefIndex {
      .                   self.def_path_hash_map.def_path_hash_to_def_index(&hash)
      .               }
      .           
      .               fn expn_hash_to_expn_id(self, sess: &Session, index_guess: u32, hash: ExpnHash) -> ExpnId {
      .                   debug_assert_eq!(ExpnId::from_hash(hash), None);
-- line 1580 ----------------------------------------
-- line 1635 ----------------------------------------
      .               /// Proc macro crates don't currently export spans, so this function does not have
      .               /// to work for them.
      .               fn imported_source_files(self, sess: &Session) -> &'a [ImportedSourceFile] {
      .                   // Translate the virtual `/rustc/$hash` prefix back to a real directory
      .                   // that should hold actual sources, where possible.
      .                   //
      .                   // NOTE: if you update this, you might need to also update bootstrap's code for generating
      .                   // the `rust-src` component in `Src::run` in `src/bootstrap/dist.rs`.
 51,148 ( 0.01%)          let virtual_rust_source_base_dir = option_env!("CFG_VIRTUAL_RUST_SOURCE_BASE_DIR")
      .                       .map(Path::new)
      .                       .filter(|_| {
      .                           // Only spend time on further checks if we have what to translate *to*.
      .                           sess.opts.real_rust_source_base_dir.is_some()
      .                       })
      .                       .filter(|virtual_dir| {
      .                           // Don't translate away `/rustc/$hash` if we're still remapping to it,
      .                           // since that means we're still building `std`/`rustc` that need it,
      .                           // and we don't want the real path to leak into codegen/debuginfo.
      .                           !sess.opts.remap_path_prefix.iter().any(|(_from, to)| to == virtual_dir)
      .                       });
 51,148 ( 0.01%)          let try_to_translate_virtual_to_real = |name: &mut rustc_span::FileName| {
      .                       debug!(
      .                           "try_to_translate_virtual_to_real(name={:?}): \
      .                            virtual_rust_source_base_dir={:?}, real_rust_source_base_dir={:?}",
      .                           name, virtual_rust_source_base_dir, sess.opts.real_rust_source_base_dir,
      .                       );
      .           
  1,840 ( 0.00%)              if let Some(virtual_dir) = virtual_rust_source_base_dir {
      .                           if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                               if let rustc_span::FileName::Real(old_name) = name {
      .                                   if let rustc_span::RealFileName::Remapped { local_path: _, virtual_name } =
      .                                       old_name
      .                                   {
      .                                       if let Ok(rest) = virtual_name.strip_prefix(virtual_dir) {
      .                                           let virtual_name = virtual_name.clone();
      .           
-- line 1670 ----------------------------------------
-- line 1709 ----------------------------------------
      .                                           *old_name = new_name;
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   };
      .           
 51,148 ( 0.01%)          self.cdata.source_map_import_info.get_or_init(|| {
     12 ( 0.00%)              let external_source_map = self.root.source_map.decode(self);
      .           
      .                       external_source_map
      .                           .map(|source_file_to_import| {
      .                               // We can't reuse an existing SourceFile, so allocate a new one
      .                               // containing the information we need.
      .                               let rustc_span::SourceFile {
  7,728 ( 0.00%)                          mut name,
  2,208 ( 0.00%)                          src_hash,
    368 ( 0.00%)                          start_pos,
    736 ( 0.00%)                          end_pos,
  1,840 ( 0.00%)                          mut lines,
  1,840 ( 0.00%)                          mut multibyte_chars,
  2,208 ( 0.00%)                          mut non_narrow_chars,
  1,840 ( 0.00%)                          mut normalized_pos,
  2,208 ( 0.00%)                          name_hash,
      .                                   ..
      .                               } = source_file_to_import;
      .           
      .                               // If this file is under $sysroot/lib/rustlib/src/ but has not been remapped
      .                               // during rust bootstrapping by `remap-debuginfo = true`, and the user
      .                               // wish to simulate that behaviour by -Z simulate-remapped-rust-src-base,
      .                               // then we change `name` to a similar state as if the rust was bootstrapped
      .                               // with `remap-debuginfo = true`.
      .                               // This is useful for testing so that tests about the effects of
      .                               // `try_to_translate_virtual_to_real` don't have to worry about how the
      .                               // compiler is bootstrapped.
    736 ( 0.00%)                      if let Some(virtual_dir) =
      .                                   &sess.opts.debugging_opts.simulate_remapped_rust_src_base
      .                               {
      .                                   if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                                       if let rustc_span::FileName::Real(ref mut old_name) = name {
      .                                           if let rustc_span::RealFileName::LocalPath(local) = old_name {
      .                                               if let Ok(rest) = local.strip_prefix(real_dir) {
      .                                                   *old_name = rustc_span::RealFileName::Remapped {
      .                                                       local_path: None,
-- line 1753 ----------------------------------------
-- line 1767 ----------------------------------------
      .                               let source_length = (end_pos - start_pos).to_usize();
      .           
      .                               // Translate line-start positions and multibyte character
      .                               // position into frame of reference local to file.
      .                               // `SourceMap::new_imported_source_file()` will then translate those
      .                               // coordinates to their new global frame of reference when the
      .                               // offset of the SourceFile is known.
      .                               for pos in &mut lines {
545,890 ( 0.11%)                          *pos = *pos - start_pos;
      .                               }
      .                               for mbc in &mut multibyte_chars {
  1,372 ( 0.00%)                          mbc.pos = mbc.pos - start_pos;
      .                               }
      .                               for swc in &mut non_narrow_chars {
    882 ( 0.00%)                          *swc = *swc - start_pos;
      .                               }
      .                               for np in &mut normalized_pos {
      .                                   np.pos = np.pos - start_pos;
      .                               }
      .           
  6,624 ( 0.00%)                      let local_version = sess.source_map().new_imported_source_file(
  4,784 ( 0.00%)                          name,
  2,576 ( 0.00%)                          src_hash,
      .                                   name_hash,
      .                                   source_length,
    736 ( 0.00%)                          self.cnum,
  1,840 ( 0.00%)                          lines,
  2,208 ( 0.00%)                          multibyte_chars,
  1,840 ( 0.00%)                          non_narrow_chars,
  1,472 ( 0.00%)                          normalized_pos,
      .                                   start_pos,
      .                                   end_pos,
      .                               );
      .                               debug!(
      .                                   "CrateMetaData::imported_source_files alloc \
      .                                    source_file {:?} original (start_pos {:?} end_pos {:?}) \
      .                                    translated (start_pos {:?} end_pos {:?})",
      .                                   local_version.name,
-- line 1804 ----------------------------------------
-- line 1808 ----------------------------------------
      .                                   local_version.end_pos
      .                               );
      .           
      .                               ImportedSourceFile {
      .                                   original_start_pos: start_pos,
      .                                   original_end_pos: end_pos,
      .                                   translated_source_file: local_version,
      .                               }
  1,104 ( 0.00%)                  })
      .                           .collect()
      .                   })
      .               }
      .           }
      .           
      .           impl CrateMetadata {
     48 ( 0.00%)      crate fn new(
      .                   sess: &Session,
      .                   blob: MetadataBlob,
      .                   root: CrateRoot<'static>,
      .                   raw_proc_macros: Option<&'static [ProcMacro]>,
      .                   cnum: CrateNum,
      .                   cnum_map: CrateNumMap,
      .                   dep_kind: CrateDepKind,
      .                   source: CrateSource,
      .                   private_dep: bool,
      .                   host_hash: Option<Svh>,
      .               ) -> CrateMetadata {
     12 ( 0.00%)          let trait_impls = root
      .                       .impls
      .                       .decode((&blob, sess))
      .                       .map(|trait_impls| (trait_impls.trait_id, trait_impls.impls))
      .                       .collect();
      .                   let alloc_decoding_state =
     12 ( 0.00%)              AllocDecodingState::new(root.interpret_alloc_index.decode(&blob).collect());
      .                   let dependencies = Lock::new(cnum_map.iter().cloned().collect());
      .           
      .                   // Pre-decode the DefPathHash->DefIndex table. This is a cheap operation
      .                   // that does not copy any data. It just does some data verification.
      4 ( 0.00%)          let def_path_hash_map = root.def_path_hash_map.decode(&blob);
      .           
     92 ( 0.00%)          CrateMetadata {
      4 ( 0.00%)              blob,
     12 ( 0.00%)              root,
     16 ( 0.00%)              trait_impls,
      .                       raw_proc_macros,
      .                       source_map_import_info: OnceCell::new(),
     16 ( 0.00%)              def_path_hash_map,
      .                       expn_hash_map: Default::default(),
     28 ( 0.00%)              alloc_decoding_state,
      .                       cnum,
     16 ( 0.00%)              cnum_map,
     20 ( 0.00%)              dependencies,
      .                       dep_kind: Lock::new(dep_kind),
     48 ( 0.00%)              source,
      .                       private_dep,
      .                       host_hash,
      .                       extern_crate: Lock::new(None),
      .                       hygiene_context: Default::default(),
      .                       def_key_cache: Default::default(),
      .                       def_path_hash_cache: Default::default(),
      .                   }
     36 ( 0.00%)      }
      .           
      .               crate fn dependencies(&self) -> LockGuard<'_, Vec<CrateNum>> {
      .                   self.dependencies.borrow()
      .               }
      .           
      .               crate fn add_dependency(&self, cnum: CrateNum) {
      .                   self.dependencies.borrow_mut().push(cnum);
      .               }
      .           
      .               crate fn update_extern_crate(&self, new_extern_crate: ExternCrate) -> bool {
      .                   let mut extern_crate = self.extern_crate.borrow_mut();
      .                   let update = Some(new_extern_crate.rank()) > extern_crate.as_ref().map(ExternCrate::rank);
      .                   if update {
     20 ( 0.00%)              *extern_crate = Some(new_extern_crate);
      .                   }
      .                   update
      .               }
      .           
      .               crate fn source(&self) -> &CrateSource {
    232 ( 0.00%)          &self.source
      .               }
      .           
      .               crate fn dep_kind(&self) -> CrateDepKind {
      .                   *self.dep_kind.lock()
      .               }
      .           
      .               crate fn update_dep_kind(&self, f: impl FnOnce(CrateDepKind) -> CrateDepKind) {
     63 ( 0.00%)          self.dep_kind.with_lock(|dep_kind| *dep_kind = f(*dep_kind))
      .               }
      .           
      .               crate fn panic_strategy(&self) -> PanicStrategy {
      .                   self.root.panic_strategy
      .               }
      .           
      .               crate fn needs_panic_runtime(&self) -> bool {
      .                   self.root.needs_panic_runtime
-- line 1905 ----------------------------------------
-- line 1909 ----------------------------------------
      .                   self.root.panic_runtime
      .               }
      .           
      .               crate fn is_profiler_runtime(&self) -> bool {
      .                   self.root.profiler_runtime
      .               }
      .           
      .               crate fn needs_allocator(&self) -> bool {
      4 ( 0.00%)          self.root.needs_allocator
      .               }
      .           
      .               crate fn has_global_allocator(&self) -> bool {
      .                   self.root.has_global_allocator
      .               }
      .           
      .               crate fn has_default_lib_allocator(&self) -> bool {
      .                   self.root.has_default_lib_allocator
      .               }
      .           
      .               crate fn is_proc_macro_crate(&self) -> bool {
      .                   self.root.is_proc_macro_crate()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
     62 ( 0.00%)          self.root.name
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
      .                   self.root.stable_crate_id
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
      .                   self.root.hash
      .               }
      .           
      .               fn num_def_ids(&self) -> usize {
      .                   self.root.tables.def_keys.size()
      .               }
      .           
      .               fn local_def_id(&self, index: DefIndex) -> DefId {
  9,515 ( 0.00%)          DefId { krate: self.cnum, index }
      .               }
      .           
      .               // Translate a DefId from the current compilation environment to a DefId
      .               // for an external crate.
      .               fn reverse_translate_def_id(&self, did: DefId) -> Option<DefId> {
      .                   for (local, &global) in self.cnum_map.iter_enumerated() {
    225 ( 0.00%)              if global == did.krate {
      .                           return Some(DefId { krate: local, index: did.index });
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .           }
      .           
-- line 1964 ----------------------------------------

491,536 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 141 ----------------------------------------
        .               /// ```
        .               /// let a = [1, 2, 3];
        .               /// assert!(!a.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
        .               #[inline]
        .               pub const fn is_empty(&self) -> bool {
   57,701 ( 0.01%)          self.len() == 0
        .               }
        .           
        .               /// Returns the first element of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
        .               ///
        .               /// let w: &[i32] = &[];
        .               /// assert_eq!(None, w.first());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn first(&self) -> Option<&T> {
      276 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
        .               }
        .           
        .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
        .               ///     *first = 5;
        .               /// }
        .               /// assert_eq!(x, &[5, 1, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
        .               #[inline]
        .               pub const fn first_mut(&mut self) -> Option<&mut T> {
       20 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
        .               }
        .           
        .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 237 ----------------------------------------
        .               ///     assert_eq!(last, &2);
        .               ///     assert_eq!(elements, &[0, 1]);
        .               /// }
        .               /// ```
        .               #[stable(feature = "slice_splits", since = "1.5.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
    2,183 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
        .               }
        .           
        .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
        .               ///
        .               /// let w: &[i32] = &[];
        .               /// assert_eq!(None, w.last());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn last(&self) -> Option<&T> {
   36,208 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
        .               }
        .           
        .               /// Returns a mutable pointer to the last item in the slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
        .               ///     *last = 10;
        .               /// }
        .               /// assert_eq!(x, &[0, 1, 10]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
        .               #[inline]
        .               pub const fn last_mut(&mut self) -> Option<&mut T> {
   44,439 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
        .               }
        .           
        .               /// Returns a reference to an element or subslice depending on the type of
        .               /// index.
        .               ///
        .               /// - If given a position, returns a reference to the element at that
        .               ///   position or `None` if out of bounds.
        .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 448 ----------------------------------------
        .               /// }
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: slice::as_mut_ptr
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
        .               #[inline]
        .               pub const fn as_ptr(&self) -> *const T {
   78,017 ( 0.02%)          self as *const [T] as *const T
        .               }
        .           
        .               /// Returns an unsafe mutable pointer to the slice's buffer.
        .               ///
        .               /// The caller must ensure that the slice outlives the pointer this
        .               /// function returns, or else it will end up pointing to garbage.
        .               ///
        .               /// Modifying the container referenced by this slice may cause its buffer
-- line 464 ----------------------------------------
-- line 476 ----------------------------------------
        .               ///     }
        .               /// }
        .               /// assert_eq!(x, &[3, 4, 6]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
        .               #[inline]
        .               pub const fn as_mut_ptr(&mut self) -> *mut T {
        2 ( 0.00%)          self as *mut [T] as *mut T
        .               }
        .           
        .               /// Returns the two raw pointers spanning the slice.
        .               ///
        .               /// The returned range is half-open, which means that the end pointer
        .               /// points *one past* the last element of the slice. This way, an empty
        .               /// slice is represented by two equal pointers, and the difference between
        .               /// the two pointers represents the size of the slice.
-- line 492 ----------------------------------------
-- line 582 ----------------------------------------
        .               /// v.swap(2, 4);
        .               /// assert!(v == ["a", "b", "e", "d", "c"]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
        .               #[inline]
        .               #[track_caller]
        .               pub const fn swap(&mut self, a: usize, b: usize) {
      572 ( 0.00%)          let _ = &self[a];
    2,729 ( 0.00%)          let _ = &self[b];
        .           
        .                   // SAFETY: we just checked that both `a` and `b` are in bounds
        .                   unsafe { self.swap_unchecked(a, b) }
        .               }
        .           
        .               /// Swaps two elements in the slice, without doing bounds checking.
        .               ///
        .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 677 ----------------------------------------
        .           
        .                       // Because this function is first compiled in isolation,
        .                       // this check tells LLVM that the indexing below is
        .                       // in-bounds.  Then after inlining -- once the actual
        .                       // lengths of the slices are known -- it's removed.
        .                       let (a, b) = (&mut a[..n], &mut b[..n]);
        .           
        .                       for i in 0..n {
    1,278 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns an iterator over the slice.
        .               ///
        .               /// # Examples
        .               ///
-- line 693 ----------------------------------------
-- line 1499 ----------------------------------------
        .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
        .               ///     assert_eq!(right, []);
        .               /// }
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               #[track_caller]
        .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
      336 ( 0.00%)          assert!(mid <= self.len());
        .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
        .                   // fulfills the requirements of `from_raw_parts_mut`.
        .                   unsafe { self.split_at_unchecked(mid) }
        .               }
        .           
        .               /// Divides one mutable slice into two at an index.
        .               ///
        .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
        .               /// left[1] = 2;
        .               /// right[1] = 4;
        .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               #[track_caller]
        .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
    4,744 ( 0.00%)          assert!(mid <= self.len());
        .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
        .                   // fulfills the requirements of `from_raw_parts_mut`.
        .                   unsafe { self.split_at_mut_unchecked(mid) }
        .               }
        .           
        .               /// Divides one slice into two at an index, without doing bounds checking.
        .               ///
        .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
        .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
        .                   let len = self.len();
        .                   let ptr = self.as_mut_ptr();
        .           
        .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
        .                   //
        .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
        .                   // is fine.
      903 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
        .               }
        .           
        .               /// Divides one slice into an array and a remainder slice at an index.
        .               ///
        .               /// The array will contain all indices from `[0, N)` (excluding
        .               /// the index `N` itself) and the slice will contain all
        .               /// indices from `[N, len)` (excluding the index `len` itself).
        .               ///
-- line 1644 ----------------------------------------
-- line 2113 ----------------------------------------
        .               /// assert!(!v.iter().any(|e| e == "hi"));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn contains(&self, x: &T) -> bool
        .               where
        .                   T: PartialEq,
        .               {
        2 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
        .               }
        .           
        .               /// Returns `true` if `needle` is a prefix of the slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2142 ----------------------------------------
        .               /// assert!(v.starts_with(&[]));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn starts_with(&self, needle: &[T]) -> bool
        .               where
        .                   T: PartialEq,
        .               {
        .                   let n = needle.len();
      942 ( 0.00%)          self.len() >= n && needle == &self[..n]
        .               }
        .           
        .               /// Returns `true` if `needle` is a suffix of the slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let v = [10, 40, 30];
-- line 2158 ----------------------------------------
-- line 2171 ----------------------------------------
        .               /// assert!(v.ends_with(&[]));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn ends_with(&self, needle: &[T]) -> bool
        .               where
        .                   T: PartialEq,
        .               {
        .                   let (m, n) = (self.len(), needle.len());
    1,973 ( 0.00%)          m >= n && needle == &self[m - n..]
        .               }
        .           
        .               /// Returns a subslice with the prefix removed.
        .               ///
        .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
        .               /// If `prefix` is empty, simply returns the original slice.
        .               ///
        .               /// If the slice does not start with `prefix`, returns `None`.
-- line 2187 ----------------------------------------
-- line 2293 ----------------------------------------
        .               /// s.insert(idx, num);
        .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
        .               where
        .                   T: Ord,
        .               {
        3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
        .               }
        .           
        .               /// Binary searches this sorted slice with a comparator function.
        .               ///
        .               /// The comparator function should implement an order consistent
        .               /// with the sort order of the underlying slice, returning an
        .               /// order code that indicates whether its argument is `Less`,
        .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
        .               #[inline]
        .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
        .               where
        .                   F: FnMut(&'a T) -> Ordering,
        .               {
        .                   let mut size = self.len();
        .                   let mut left = 0;
        .                   let mut right = size;
  658,698 ( 0.13%)          while left < right {
1,053,341 ( 0.22%)              let mid = left + size / 2;
        .           
        .                       // SAFETY: the call is made safe by the following invariants:
        .                       // - `mid >= 0`
        .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
  339,073 ( 0.07%)              let cmp = f(unsafe { self.get_unchecked(mid) });
        .           
        .                       // The reason why we use if/else control flow rather than match
        .                       // is because match reorders comparison operations, which is perf sensitive.
        .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
  294,852 ( 0.06%)              if cmp == Less {
  427,169 ( 0.09%)                  left = mid + 1;
  171,897 ( 0.04%)              } else if cmp == Greater {
        .                           right = mid;
        .                       } else {
        .                           // SAFETY: same as the `get_unchecked` above
        .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
        .                           return Ok(mid);
        .                       }
        .           
  866,137 ( 0.18%)              size = right - left;
        .                   }
        .                   Err(left)
        .               }
        .           
        .               /// Binary searches this sorted slice with a key extraction function.
        .               ///
        .               /// Assumes that the slice is sorted by the key, for instance with
        .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3203 ----------------------------------------
        .                   #[track_caller]
        .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
        .                       panic!(
        .                           "source slice length ({}) does not match destination slice length ({})",
        .                           src_len, dst_len,
        .                       );
        .                   }
        .           
    7,590 ( 0.00%)          if self.len() != src.len() {
        .                       len_mismatch_fail(self.len(), src.len());
        .                   }
        .           
        .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
        .                   // checked to have the same length. The slices cannot overlap because
        .                   // mutable references are exclusive.
        .                   unsafe {
        .                       ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
-- line 3219 ----------------------------------------
-- line 3382 ----------------------------------------
        .                   }
        .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
        .                   let ts: usize = mem::size_of::<U>() / gcd;
        .                   let us: usize = mem::size_of::<T>() / gcd;
        .           
        .                   // Armed with this knowledge, we can find how many `U`s we can fit!
        .                   let us_len = self.len() / ts * us;
        .                   // And how many `T`s will be in the trailing slice!
    3,250 ( 0.00%)          let ts_len = self.len() % ts;
        .                   (us_len, ts_len)
        .               }
        .           
        .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
        .               /// maintained.
        .               ///
        .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
        .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
        .                       return (self, &[], &[]);
        .                   }
        .           
        .                   // First, find at what point do we split between the first and 2nd slice. Easy with
        .                   // ptr.align_offset.
        .                   let ptr = self.as_ptr();
        .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
        .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
    3,250 ( 0.00%)          if offset > self.len() {
        .                       (self, &[], &[])
        .                   } else {
        .                       let (left, rest) = self.split_at(offset);
        .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
        .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
        .                       // since the caller guarantees that we can transmute `T` to `U` safely.
        .                       unsafe {
        .                           (
        .                               left,
        .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
    3,250 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
        .                           )
        .                       }
        .                   }
        .               }
        .           
        .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
        .               /// maintained.
        .               ///
-- line 3456 ----------------------------------------

  443,398 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           
        .           pub type EncodeResult = Result<(), !>;
        .           
        .           pub struct Encoder {
        .               pub data: Vec<u8>,
        .           }
        .           
        .           impl Encoder {
        1 ( 0.00%)      pub fn new(data: Vec<u8>) -> Encoder {
        4 ( 0.00%)          Encoder { data }
        1 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn into_inner(self) -> Vec<u8> {
        4 ( 0.00%)          self.data
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn position(&self) -> usize {
    5,191 ( 0.00%)          self.data.len()
        .               }
        .           }
        .           
        .           macro_rules! write_leb128 {
        .               ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{
        .                   const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);
        .                   let old_len = $enc.data.len();
        .           
-- line 40 ----------------------------------------
-- line 67 ----------------------------------------
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> EncodeResult {
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn emit_usize(&mut self, v: usize) -> EncodeResult {
  260,790 ( 0.05%)          write_leb128!(self, v, usize, write_usize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u128(&mut self, v: u128) -> EncodeResult {
      882 ( 0.00%)          write_leb128!(self, v, u128, write_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u64(&mut self, v: u64) -> EncodeResult {
      364 ( 0.00%)          write_leb128!(self, v, u64, write_u64_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u32(&mut self, v: u32) -> EncodeResult {
  463,000 ( 0.09%)          write_leb128!(self, v, u32, write_u32_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u16(&mut self, v: u16) -> EncodeResult {
        .                   self.data.extend_from_slice(&v.to_le_bytes());
        .                   Ok(())
        .               }
        .           
-- line 98 ----------------------------------------
-- line 131 ----------------------------------------
        .               #[inline]
        .               fn emit_i8(&mut self, v: i8) -> EncodeResult {
        .                   let as_u8: u8 = unsafe { std::mem::transmute(v) };
        .                   self.emit_u8(as_u8)
        .               }
        .           
        .               #[inline]
        .               fn emit_bool(&mut self, v: bool) -> EncodeResult {
    1,975 ( 0.00%)          self.emit_u8(if v { 1 } else { 0 })
        .               }
        .           
        .               #[inline]
        .               fn emit_f64(&mut self, v: f64) -> EncodeResult {
        .                   let as_u64: u64 = v.to_bits();
        .                   self.emit_u64(as_u64)
        .               }
        .           
-- line 147 ----------------------------------------
-- line 549 ----------------------------------------
        .               #[inline]
        .               pub fn advance(&mut self, bytes: usize) {
        .                   self.position += bytes;
        .               }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {
        .                   let start = self.position;
        4 ( 0.00%)          self.position += bytes;
        4 ( 0.00%)          &self.data[start..self.position]
        .               }
        .           }
        .           
        .           macro_rules! read_leb128 {
        .               ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};
        .           }
        .           
        .           impl<'a> serialize::Decoder for Decoder<'a> {
        .               #[inline]
        .               fn read_unit(&mut self) -> () {
        .                   ()
        .               }
        .           
        .               #[inline]
        .               fn read_u128(&mut self) -> u128 {
      539 ( 0.00%)          read_leb128!(self, read_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_u64(&mut self) -> u64 {
    1,218 ( 0.00%)          read_leb128!(self, read_u64_leb128)
        .               }
        .           
        .               #[inline]
   35,140 ( 0.01%)      fn read_u32(&mut self) -> u32 {
  143,326 ( 0.03%)          read_leb128!(self, read_u32_leb128)
   70,280 ( 0.01%)      }
        .           
        .               #[inline]
        .               fn read_u16(&mut self) -> u16 {
  562,149 ( 0.11%)          let bytes = [self.data[self.position], self.data[self.position + 1]];
   80,307 ( 0.02%)          let value = u16::from_le_bytes(bytes);
  160,832 ( 0.03%)          self.position += 2;
        .                   value
        .               }
        .           
        .               #[inline]
        .               fn read_u8(&mut self) -> u8 {
1,385,123 ( 0.28%)          let value = self.data[self.position];
  280,533 ( 0.06%)          self.position += 1;
        .                   value
        .               }
        .           
        .               #[inline]
  154,325 ( 0.03%)      fn read_usize(&mut self) -> usize {
  154,387 ( 0.03%)          read_leb128!(self, read_usize_leb128)
  308,650 ( 0.06%)      }
        .           
        .               #[inline]
        .               fn read_i128(&mut self) -> i128 {
        .                   read_leb128!(self, read_i128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_i64(&mut self) -> i64 {
-- line 613 ----------------------------------------
-- line 637 ----------------------------------------
        .               #[inline]
        .               fn read_isize(&mut self) -> isize {
        .                   read_leb128!(self, read_isize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_bool(&mut self) -> bool {
        .                   let value = self.read_u8();
    8,880 ( 0.00%)          value != 0
        .               }
        .           
        .               #[inline]
        .               fn read_f64(&mut self) -> f64 {
        .                   let bits = self.read_u64();
        .                   f64::from_bits(bits)
        .               }
        .           
-- line 653 ----------------------------------------
-- line 660 ----------------------------------------
        .               #[inline]
        .               fn read_char(&mut self) -> char {
        .                   let bits = self.read_u32();
        .                   std::char::from_u32(bits).unwrap()
        .               }
        .           
        .               #[inline]
        .               fn read_str(&mut self) -> Cow<'_, str> {
   22,907 ( 0.00%)          let len = self.read_usize();
  150,590 ( 0.03%)          let sentinel = self.data[self.position + len];
   37,694 ( 0.01%)          assert!(sentinel == STR_SENTINEL);
        .                   let s = unsafe {
        .                       std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])
        .                   };
   94,235 ( 0.02%)          self.position += len + 1;
   12,060 ( 0.00%)          Cow::Borrowed(s)
        .               }
        .           
        .               #[inline]
        .               fn read_raw_bytes_into(&mut self, s: &mut [u8]) {
      319 ( 0.00%)          let start = self.position;
    1,609 ( 0.00%)          self.position += s.len();
      319 ( 0.00%)          s.copy_from_slice(&self.data[start..self.position]);
        .               }
        .           }
        .           
        .           // Specializations for contiguous byte sequences follow. The default implementations for slices
        .           // encode and decode each element individually. This isn't necessary for `u8` slices when using
        .           // opaque encoders and decoders, because each `u8` is unchanged by encoding and decoding.
        .           // Therefore, we can use more efficient implementations that process the entire sequence at once.
        .           
-- line 690 ----------------------------------------

  540,082 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 71 ----------------------------------------
      .               fn default() -> FxHasher {
      .                   FxHasher { hash: 0 }
      .               }
      .           }
      .           
      .           impl FxHasher {
      .               #[inline]
      .               fn add_to_hash(&mut self, i: usize) {
183,752 ( 0.04%)          self.hash = self.hash.rotate_left(5).bitxor(i).wrapping_mul(K);
      .               }
      .           }
      .           
      .           impl Hasher for FxHasher {
      .               #[inline]
  1,459 ( 0.00%)      fn write(&mut self, mut bytes: &[u8]) {
      .                   #[cfg(target_pointer_width = "32")]
      .                   let read_usize = |bytes: &[u8]| u32::from_ne_bytes(bytes[..4].try_into().unwrap());
      .                   #[cfg(target_pointer_width = "64")]
      .                   let read_usize = |bytes: &[u8]| u64::from_ne_bytes(bytes[..8].try_into().unwrap());
      .           
 46,850 ( 0.01%)          let mut hash = FxHasher { hash: self.hash };
      .                   assert!(size_of::<usize>() <= 8);
778,286 ( 0.16%)          while bytes.len() >= size_of::<usize>() {
      .                       hash.add_to_hash(read_usize(bytes) as usize);
      .                       bytes = &bytes[size_of::<usize>()..];
      .                   }
 97,572 ( 0.02%)          if (size_of::<usize>() > 4) && (bytes.len() >= 4) {
      .                       hash.add_to_hash(u32::from_ne_bytes(bytes[..4].try_into().unwrap()) as usize);
      .                       bytes = &bytes[4..];
      .                   }
 97,572 ( 0.02%)          if (size_of::<usize>() > 2) && bytes.len() >= 2 {
      .                       hash.add_to_hash(u16::from_ne_bytes(bytes[..2].try_into().unwrap()) as usize);
      .                       bytes = &bytes[2..];
      .                   }
108,905 ( 0.02%)          if (size_of::<usize>() > 1) && bytes.len() >= 1 {
 23,743 ( 0.00%)              hash.add_to_hash(bytes[0] as usize);
      .                   }
  1,671 ( 0.00%)          self.hash = hash.hash;
  1,459 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
    422 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u16(&mut self, i: u16) {
    300 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u32(&mut self, i: u32) {
290,608 ( 0.06%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[cfg(target_pointer_width = "32")]
      .               #[inline]
      .               fn write_u64(&mut self, i: u64) {
      .                   self.add_to_hash(i as usize);
      .                   self.add_to_hash((i >> 32) as usize);
      .               }
-- line 131 ----------------------------------------

  1,395 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir               

-- line 27 ----------------------------------------
      .           impl CacheEntry {
      .               #[inline]
      .               fn update(
      .                   &mut self,
      .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
      .                   pos: BytePos,
      .                   time_stamp: usize,
      .               ) {
  1,499 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
    174 ( 0.00%)              self.file = file;
    147 ( 0.00%)              self.file_index = file_idx;
      .                   }
      .           
    989 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
      .                   let line_bounds = self.file.line_bounds(line_index);
  2,192 ( 0.00%)          self.line_number = line_index + 1;
  3,120 ( 0.00%)          self.line = line_bounds;
      .                   self.touch(time_stamp);
      .               }
      .           
      .               #[inline]
      .               fn touch(&mut self, time_stamp: usize) {
 16,537 ( 0.00%)          self.time_stamp = time_stamp;
      .               }
      .           }
      .           
      .           #[derive(Clone)]
      .           pub struct CachingSourceMapView<'sm> {
      .               source_map: &'sm SourceMap,
      .               line_cache: [CacheEntry; 3],
      .               time_stamp: usize,
      .           }
      .           
      .           impl<'sm> CachingSourceMapView<'sm> {
    506 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
      .                   let files = source_map.files();
    253 ( 0.00%)          let first_file = files[0].clone();
      .                   let entry = CacheEntry {
      .                       time_stamp: 0,
      .                       line_number: 0,
      .                       line: BytePos(0)..BytePos(0),
      .                       file: first_file,
      .                       file_index: 0,
      .                   };
      .           
  1,265 ( 0.00%)          CachingSourceMapView {
      .                       source_map,
  1,771 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
      .                       time_stamp: 0,
      .                   }
  1,012 ( 0.00%)      }
      .           
      .               pub fn byte_pos_to_line_and_col(
      .                   &mut self,
      .                   pos: BytePos,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
      .                   self.time_stamp += 1;
      .           
      .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
      .                   };
      .           
      .                   let cache_entry = &mut self.line_cache[oldest];
      .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
      .           
      .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
      .               }
      .           
 61,481 ( 0.01%)      pub fn span_data_to_lines_and_cols(
      .                   &mut self,
      .                   span_data: &SpanData,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
 35,132 ( 0.01%)          self.time_stamp += 1;
      .           
      .                   // Check if lo and hi are in the cached lines.
  8,783 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
  8,783 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
      .           
 15,564 ( 0.00%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
      .                       // Cache hit for span lo and hi. Check if they belong to the same file.
      .                       let result = {
 15,508 ( 0.00%)                  let lo = &self.line_cache[lo_cache_idx as usize];
      .                           let hi = &self.line_cache[hi_cache_idx as usize];
      .           
 46,524 ( 0.01%)                  if lo.file_index != hi.file_index {
      .                               return None;
      .                           }
      .           
      .                           (
 15,508 ( 0.00%)                      lo.file.clone(),
      .                               lo.line_number,
      .                               span_data.lo - lo.line.start,
  7,754 ( 0.00%)                      hi.line_number,
      .                               span_data.hi - hi.line.start,
      .                           )
      .                       };
      .           
  7,754 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
  7,754 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
      .           
 31,016 ( 0.01%)              return Some(result);
      .                   }
      .           
      .                   // No cache hit or cache hit for only one of span lo and hi.
  2,002 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
      .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
      .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
      .                   } else {
      .                       self.oldest_cache_entry_index()
      .                   };
      .           
      .                   // If the entry doesn't point to the correct file, get the new file and index.
      .                   // Return early if the file containing beginning of span doesn't contain end of span.
  8,232 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
    200 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
    240 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
      .                           return None;
      .                       }
      .           
    160 ( 0.00%)              Some(new_file_and_idx)
      .                   } else {
      .                       let file = &self.line_cache[oldest].file;
  2,967 ( 0.00%)              if !file_contains(&file, span_data.hi) {
      .                           return None;
      .                       }
      .           
  2,967 ( 0.00%)              None
      .                   };
      .           
      .                   // Update the cache entries.
  5,145 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, -1) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
      .           
  2,298 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
      .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
      .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
      .                               let hi = &mut self.line_cache[next_oldest];
      .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
      .                               (oldest, next_oldest)
      .                           } else {
      .                               (oldest, oldest)
      .                           }
      .                       }
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, _) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
     56 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
     84 ( 0.00%)                  hi.touch(self.time_stamp);
      .                           (oldest, hi_cache_idx as usize)
      .                       }
      .                       // Oldest cache entry is for span_data.hi line.
      .                       (_, -1) => {
      .                           let hi = &mut self.line_cache[oldest];
    235 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
    470 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
    940 ( 0.00%)                  lo.touch(self.time_stamp);
      .                           (lo_cache_idx as usize, oldest)
      .                       }
      .                       _ => {
      .                           panic!();
      .                       }
      .                   };
      .           
      .                   let lo = &self.line_cache[lo_idx];
      .                   let hi = &self.line_cache[hi_idx];
      .           
      .                   // Span lo and hi may equal line end when last line doesn't
      .                   // end in newline, hence the inclusive upper bounds below.
  2,058 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
  1,029 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
  2,058 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
  1,029 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
  5,145 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
  3,087 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
  3,087 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
      .           
  3,087 ( 0.00%)          Some((
  1,029 ( 0.00%)              lo.file.clone(),
      .                       lo.line_number,
      .                       span_data.lo - lo.line.start,
  1,029 ( 0.00%)              hi.line_number,
      .                       span_data.hi - hi.line.start,
      .                   ))
 79,047 ( 0.02%)      }
      .           
      .               fn cache_entry_index(&self, pos: BytePos) -> isize {
      .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
 87,040 ( 0.02%)              if cache_entry.line.contains(&pos) {
      .                           return idx as isize;
      .                       }
      .                   }
      .           
      .                   -1
      .               }
      .           
      .               fn oldest_cache_entry_index(&self) -> usize {
      .                   let mut oldest = 0;
      .           
      .                   for idx in 1..self.line_cache.len() {
  4,596 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
      .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
      .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
      .           
      .                   for idx in 0..self.line_cache.len() {
  1,927 ( 0.00%)              if idx != avoid_idx
    913 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
      .                       {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
    200 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
     40 ( 0.00%)          if !self.source_map.files().is_empty() {
     80 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
      .                       let file = &self.source_map.files()[file_idx];
      .           
    320 ( 0.00%)              if file_contains(file, pos) {
      .                           return Some((file.clone(), file_idx));
      .                       }
      .                   }
      .           
      .                   None
    200 ( 0.00%)      }
      .           }
      .           
      .           #[inline]
      .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
      .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
      .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
      .               // purposes of converting a byte position to a line and column number, we can't come up with a
      .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

106,562 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir               

-- line 91 ----------------------------------------
      .           // maximum of number bytes needed to fill an 8-byte-sized element on which
      .           // SipHash operates. Note that for variable-sized copies which are known to be
      .           // less than 8 bytes, this function will perform more work than necessary unless
      .           // the compiler is able to optimize the extra work away.
      .           #[inline]
      .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
      .               debug_assert!(count <= 8);
      .           
  9,735 ( 0.00%)      if count == 8 {
      .                   ptr::copy_nonoverlapping(src, dst, 8);
      .                   return;
      .               }
      .           
      .               let mut i = 0;
 13,718 ( 0.00%)      if i + 3 < count {
      .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
      .                   i += 4;
      .               }
      .           
 29,255 ( 0.01%)      if i + 1 < count {
      .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
  3,410 ( 0.00%)          i += 2
      .               }
      .           
 13,718 ( 0.00%)      if i < count {
  9,548 ( 0.00%)          *dst.add(i) = *src.add(i);
      .                   i += 1;
      .               }
      .           
      .               debug_assert_eq!(i, count);
      .           }
      .           
      .           // # Implementation
      .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
      .           
      .                   hasher
      .               }
      .           
      .               // A specialized write function for values with size <= 8.
      .               #[inline]
      .               fn short_write<T>(&mut self, x: T) {
      .                   let size = mem::size_of::<T>();
 83,244 ( 0.02%)          let nbuf = self.nbuf;
      .                   debug_assert!(size <= 8);
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
      .           
560,877 ( 0.11%)          if nbuf + size < BUFFER_SIZE {
      .                       unsafe {
      .                           // The memcpy call is optimized away because the size is known.
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
      .                       }
      .           
172,568 ( 0.04%)              self.nbuf = nbuf + size;
      .           
      .                       return;
      .                   }
      .           
 27,782 ( 0.01%)          unsafe { self.short_write_process_buffer(x) }
      .               }
      .           
      .               // A specialized write function for values with size <= 8 that should only
      .               // be called when the write would cause the buffer to fill.
      .               //
      .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
      .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
      .               // overflow) if it wasn't already.
      .               #[inline(never)]
  8,692 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
      .                   let size = mem::size_of::<T>();
  8,692 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(size <= 8);
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
      .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
      .           
      .                   // Copy first part of input into end of buffer, possibly into spill
      .                   // element. The memcpy call is optimized away because the size is known.
      .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
      .           
      .                   // Process buffer.
      .                   for i in 0..BUFFER_CAPACITY {
 86,920 ( 0.02%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
 69,536 ( 0.01%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
 78,228 ( 0.02%)              self.state.v0 ^= elem;
      .                   }
      .           
      .                   // Copy remaining input into start of buffer by copying size - 1
      .                   // elements from spill (at most size - 1 bytes could have overflowed
      .                   // into the spill). The memcpy call is optimized away because the size
      .                   // is known. And the whole copy is optimized away for size == 1.
      .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
      .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
      .           
      .                   // This function should only be called when the write fills the buffer.
      .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
      .                   // is statically known, so the branch is optimized away.
 40,984 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
 34,768 ( 0.01%)          self.processed += BUFFER_SIZE;
 17,384 ( 0.00%)      }
      .           
      .               // A write function for byte slices.
      .               #[inline]
      .               fn slice_write(&mut self, msg: &[u8]) {
      .                   let length = msg.len();
  4,943 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .           
 38,524 ( 0.01%)          if nbuf + length < BUFFER_SIZE {
      .                       unsafe {
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .           
 14,236 ( 0.00%)                  if length <= 8 {
      .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
      .                           } else {
      .                               // This memcpy is *not* optimized away.
      .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
      .                           }
      .                       }
      .           
  7,157 ( 0.00%)              self.nbuf = nbuf + length;
      .           
      .                       return;
      .                   }
      .           
  3,652 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
      .               }
      .           
      .               // A write function for byte slices that should only be called when the
      .               // write would cause the buffer to fill.
      .               //
      .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
      .               // and `msg` must contain enough bytes to initialize the rest of the element
      .               // containing the byte offset `self.nbuf`.
      .               #[inline(never)]
  2,815 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
      .                   let length = msg.len();
    563 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
      .           
      .                   // Always copy first part of input into current element of buffer.
      .                   // This function should only be called when the write fills the buffer,
      .                   // so we know that there is enough input to fill the current element.
  1,689 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
    563 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
      .           
      .                   let src = msg.as_ptr();
      .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
      .           
      .                   // Process buffer.
      .           
      .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
      .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
      .                   // We know that is true, because last step ensured we have a full
      .                   // element in the buffer.
  1,126 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
      .           
      .                   for i in 0..last {
  4,385 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
  4,948 ( 0.00%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
  8,770 ( 0.00%)              self.state.v0 ^= elem;
      .                   }
      .           
      .                   // Process the remaining element-sized chunks of input.
      .                   let mut processed = needed_in_elem;
  1,126 ( 0.00%)          let input_left = length - processed;
    408 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
      .                   let extra_bytes_left = input_left % ELEM_SIZE;
      .           
      .                   for _ in 0..elems_left {
    215 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
    215 ( 0.00%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
    215 ( 0.00%)              self.state.v0 ^= elem;
    430 ( 0.00%)              processed += ELEM_SIZE;
      .                   }
      .           
      .                   // Copy remaining input into start of buffer.
      .                   let src = msg.as_ptr().add(processed);
      .                   let dst = self.buf.as_mut_ptr() as *mut u8;
      .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
      .           
    563 ( 0.00%)          self.nbuf = extra_bytes_left;
  2,815 ( 0.00%)          self.processed += nbuf + processed;
  3,378 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn finish128(mut self) -> (u64, u64) {
      .                   debug_assert!(self.nbuf < BUFFER_SIZE);
      .           
      .                   // Process full elements in buffer.
  7,092 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
      .           
      .                   // Since we're consuming self, avoid updating members for a potential
      .                   // performance gain.
  9,456 ( 0.00%)          let mut state = self.state;
      .           
      .                   for i in 0..last {
  7,199 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
  7,199 ( 0.00%)              state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut state);
  7,199 ( 0.00%)              state.v0 ^= elem;
      .                   }
      .           
      .                   // Get remaining partial element.
  4,728 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
      .                       unsafe {
      .                           // Ensure element is initialized by writing zero bytes. At most
      .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
      .                           // to write this many because we have the spill and we maintain
      .                           // `self.nbuf` such that this write will start before the spill.
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
      .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
  1,862 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
      .                       }
      .                   } else {
      .                       0
      .                   };
      .           
      .                   // Finalize the hash.
  6,451 ( 0.00%)          let length = self.processed + self.nbuf;
  4,448 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
      .           
  2,224 ( 0.00%)          state.v3 ^= b;
      .                   Sip24Rounds::c_rounds(&mut state);
  2,224 ( 0.00%)          state.v0 ^= b;
      .           
  2,224 ( 0.00%)          state.v2 ^= 0xee;
      .                   Sip24Rounds::d_rounds(&mut state);
  7,280 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
      .           
  2,830 ( 0.00%)          state.v1 ^= 0xdd;
      .                   Sip24Rounds::d_rounds(&mut state);
  2,830 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
      .           
      .                   (_0, _1)
      .               }
      .           }
      .           
      .           impl Hasher for SipHasher128 {
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
      .           }
      .           
      .           #[derive(Debug, Clone, Default)]
      .           struct Sip24Rounds;
      .           
      .           impl Sip24Rounds {
      .               #[inline]
      .               fn c_rounds(state: &mut State) {
344,617 ( 0.07%)          compress!(state);
373,467 ( 0.08%)          compress!(state);
      .               }
      .           
      .               #[inline]
      .               fn d_rounds(state: &mut State) {
 14,556 ( 0.00%)          compress!(state);
 14,556 ( 0.00%)          compress!(state);
 14,556 ( 0.00%)          compress!(state);
 12,333 ( 0.00%)          compress!(state);
      .               }
      .           }

 68,722 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 417 ----------------------------------------
        .               /// # #![allow(unused_mut)]
        .               /// let mut vec: Vec<i32> = Vec::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub const fn new() -> Self {
  462,385 ( 0.09%)          Vec { buf: RawVec::NEW, len: 0 }
       72 ( 0.00%)      }
        .           
        .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
        .               ///
        .               /// The vector will be able to hold exactly `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the vector will not allocate.
        .               ///
        .               /// It is important to note that although the returned vector has the
        .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 601 ----------------------------------------
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
  150,968 ( 0.03%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
        .               }
        .           
        .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
   10,257 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
        .               }
        .           
        .               /// Decomposes a `Vec<T>` into its raw components.
        .               ///
        .               /// Returns the raw pointer to the underlying data, the length of
        .               /// the vector (in elements), and the allocated capacity of the
        .               /// data (in elements). These are the same arguments in the same
        .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let vec: Vec<i32> = Vec::with_capacity(10);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn capacity(&self) -> usize {
  128,267 ( 0.03%)          self.buf.capacity()
        .               }
        .           
        .               /// Reserves capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve(&mut self, additional: usize) {
   37,365 ( 0.01%)          self.buf.reserve(self.len, additional);
        .               }
        .           
        .               /// Reserves the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve_exact(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve_exact(&mut self, additional: usize) {
    3,137 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
        .               }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `try_reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
        .               /// assert!(vec.capacity() >= 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn shrink_to_fit(&mut self) {
        .                   // The capacity is never less than the length, and there's nothing to do when
        .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
        .                   // by only calling it with a greater capacity.
    3,340 ( 0.00%)          if self.capacity() > self.len {
    2,184 ( 0.00%)              self.buf.shrink_to_fit(self.len);
        .                   }
        .               }
        .           
        .               /// Shrinks the capacity of the vector with a lower bound.
        .               ///
        .               /// The capacity will remain at least as large as both the length
        .               /// and the supplied value.
        .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
        .               /// let slice = vec.into_boxed_slice();
        .               /// assert_eq!(slice.into_vec().capacity(), 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
        .                   unsafe {
        .                       self.shrink_to_fit();
      943 ( 0.00%)              let me = ManuallyDrop::new(self);
        .                       let buf = ptr::read(&me.buf);
        .                       let len = me.len();
        .                       buf.into_box(len).assume_init()
        .                   }
        .               }
        .           
        .               /// Shortens the vector, keeping the first `len` elements and dropping
        .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.truncate(0);
        .               /// assert_eq!(vec, []);
        .               /// ```
        .               ///
        .               /// [`clear`]: Vec::clear
        .               /// [`drain`]: Vec::drain
        .               #[stable(feature = "rust1", since = "1.0.0")]
   33,493 ( 0.01%)      pub fn truncate(&mut self, len: usize) {
        .                   // This is safe because:
        .                   //
        .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
        .                   //   case avoids creating an invalid slice, and
        .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
        .                   //   such that no value will be dropped twice in case `drop_in_place`
        .                   //   were to panic once (if it panics twice, the program aborts).
        .                   unsafe {
        .                       // Note: It's intentional that this is `>` and not `>=`.
        .                       //       Changing it to `>=` has negative performance
        .                       //       implications in some cases. See #78884 for more.
   27,225 ( 0.01%)              if len > self.len {
        .                           return;
        .                       }
        .                       let remaining_len = self.len - len;
        .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
   24,507 ( 0.01%)              self.len = len;
      730 ( 0.00%)              ptr::drop_in_place(s);
        .                   }
   40,172 ( 0.01%)      }
        .           
        .               /// Extracts a slice containing the entire vector.
        .               ///
        .               /// Equivalent to `&s[..]`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_ptr(&self) -> *const T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref`, which creates an intermediate reference.
  419,442 ( 0.09%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns an unsafe mutable pointer to the vector's buffer.
        .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
        .               /// }
        .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_mut_ptr(&mut self) -> *mut T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref_mut`, which creates an intermediate reference.
  648,678 ( 0.13%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
        .               ///
        .               /// Normally, here, one would use [`clear`] instead to correctly drop
        .               /// the contents and thus not leak memory.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   debug_assert!(new_len <= self.capacity());
        .           
  154,523 ( 0.03%)          self.len = new_len;
    1,982 ( 0.00%)      }
        .           
        .               /// Removes an element from the vector and returns it.
        .               ///
        .               /// The removed element is replaced by the last element of the vector.
        .               ///
        .               /// This does not preserve ordering, but is *O*(1).
        .               /// If you need to preserve the element order, use [`remove`] instead.
        .               ///
-- line 1276 ----------------------------------------
-- line 1305 ----------------------------------------
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // We replace self[index] with the last element. Note that if the
        .                       // bounds check above succeeds there must be a last element (which
        .                       // can be self[index] itself).
        .                       let value = ptr::read(self.as_ptr().add(index));
        .                       let base_ptr = self.as_mut_ptr();
        1 ( 0.00%)              ptr::copy(base_ptr.add(len - 1), base_ptr.add(index), 1);
        .                       self.set_len(len - 1);
        .                       value
        .                   }
        .               }
        .           
        .               /// Inserts an element at position `index` within the vector, shifting all
        .               /// elements after it to the right.
        .               ///
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.insert(1, 4);
        .               /// assert_eq!(vec, [1, 4, 2, 3]);
        .               /// vec.insert(4, 5);
        .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      924 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
        .                   }
        .           
      140 ( 0.00%)          let len = self.len();
      360 ( 0.00%)          if index > len {
        .                       assert_failed(index, len);
        .                   }
        .           
        .                   // space for the new element
      526 ( 0.00%)          if len == self.buf.capacity() {
        .                       self.reserve(1);
        .                   }
        .           
        .                   unsafe {
        .                       // infallible
        .                       // The spot to put the new value
        .                       {
        .                           let p = self.as_mut_ptr().add(index);
        .                           // Shift everything over to make space. (Duplicating the
        .                           // `index`th element into two consecutive places.)
      765 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
        .                           // Write it in, overwriting the first copy of the `index`th
        .                           // element.
        .                           ptr::write(p, element);
        .                       }
      526 ( 0.00%)              self.set_len(len + 1);
        .                   }
      792 ( 0.00%)      }
        .           
        .               /// Removes and returns the element at position `index` within the vector,
        .               /// shifting all elements after it to the left.
        .               ///
        .               /// Note: Because this shifts over the remaining elements, it has a
        .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
        .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
        .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1395 ----------------------------------------
        .               pub fn remove(&mut self, index: usize) -> T {
        .                   #[cold]
        .                   #[inline(never)]
        .                   #[track_caller]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("removal index (is {}) should be < len (is {})", index, len);
        .                   }
        .           
      110 ( 0.00%)          let len = self.len();
      409 ( 0.00%)          if index >= len {
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // infallible
        .                       let ret;
        .                       {
        .                           // the place we are taking from.
        .                           let ptr = self.as_mut_ptr().add(index);
        .                           // copy it out, unsafely having a copy of the value on
        .                           // the stack and in the vector at the same time.
      496 ( 0.00%)                  ret = ptr::read(ptr);
        .           
        .                           // Shift everything down to fill in that spot.
      302 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
        .                       }
      110 ( 0.00%)              self.set_len(len - 1);
        .                       ret
        .                   }
        .               }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
-- line 1428 ----------------------------------------
-- line 1442 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3, 4, 5];
        .               /// let keep = [false, true, true, false, true];
        .               /// let mut iter = keep.iter();
        .               /// vec.retain(|_| *iter.next().unwrap());
        .               /// assert_eq!(vec, [2, 3, 5]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
   30,239 ( 0.01%)      pub fn retain<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&T) -> bool,
        .               {
    1,664 ( 0.00%)          self.retain_mut(|elem| f(elem));
   29,336 ( 0.01%)      }
        .           
        .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
        .               /// });
        .               /// assert_eq!(vec, [2, 3, 4]);
        .               /// ```
        .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
        .               pub fn retain_mut<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
    3,683 ( 0.00%)          let original_len = self.len();
        .                   // Avoid double drop if the drop guard is not executed,
        .                   // since we may make some holes during the process.
        .                   unsafe { self.set_len(0) };
        .           
        .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
        .                   //      |<-              processed len   ->| ^- next to check
        .                   //                  |<-  deleted cnt     ->|
        .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
        .                       v: &'a mut Vec<T, A>,
        .                       processed_len: usize,
        .                       deleted_cnt: usize,
        .                       original_len: usize,
        .                   }
        .           
        .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
        .                       fn drop(&mut self) {
    3,190 ( 0.00%)                  if self.deleted_cnt > 0 {
        .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
        .                               unsafe {
        .                                   ptr::copy(
        .                                       self.v.as_ptr().add(self.processed_len),
    2,274 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
        .                                       self.original_len - self.processed_len,
        .                                   );
        .                               }
        .                           }
        .                           // SAFETY: After filling holes, all items are in contiguous memory.
        .                           unsafe {
        2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
        .                           }
        .                       }
        .                   }
        .           
        .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
        .           
        .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
        .                       original_len: usize,
        .                       f: &mut F,
        .                       g: &mut BackshiftOnDrop<'_, T, A>,
        .                   ) where
        .                       F: FnMut(&mut T) -> bool,
        .                   {
   44,547 ( 0.01%)              while g.processed_len != original_len {
        .                           // SAFETY: Unchecked element must be valid.
        .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
   13,970 ( 0.00%)                  if !f(cur) {
        .                               // Advance early to avoid double drop if `drop_in_place` panicked.
    2,145 ( 0.00%)                      g.processed_len += 1;
    1,078 ( 0.00%)                      g.deleted_cnt += 1;
        .                               // SAFETY: We never touch this element again after dropped.
        .                               unsafe { ptr::drop_in_place(cur) };
        .                               // We already advanced the counter.
        .                               if DELETED {
        .                                   continue;
        .                               } else {
        .                                   break;
        .                               }
        .                           }
        .                           if DELETED {
        .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
        .                               // We use copy for move, and never touch this element again.
        .                               unsafe {
    1,002 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
        .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
        .                               }
        .                           }
    1,001 ( 0.00%)                  g.processed_len += 1;
        .                       }
        .                   }
        .           
        .                   // Stage 1: Nothing was deleted.
        .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
        .           
        .                   // Stage 2: Some elements were deleted.
        .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
        .               ///
        .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
        .               ///
        .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
        .               /// ```
        .               #[stable(feature = "dedup_by", since = "1.16.0")]
      105 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
        .               where
        .                   F: FnMut(&mut T, &mut T) -> bool,
        .               {
      174 ( 0.00%)          let len = self.len();
      752 ( 0.00%)          if len <= 1 {
        .                       return;
        .                   }
        .           
        .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
        .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
        .                       /* Offset of the element we want to check if it is duplicate */
        .                       read: usize,
        .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
        .                   let ptr = gap.vec.as_mut_ptr();
        .           
        .                   /* Drop items while going through Vec, it should be more efficient than
        .                    * doing slice partition_dedup + truncate */
        .           
        .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
        .                    * are always in-bounds and read_ptr never aliases prev_ptr */
        .                   unsafe {
    1,328 ( 0.00%)              while gap.read < len {
        .                           let read_ptr = ptr.add(gap.read);
        .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
        .           
      334 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
        .                               // Increase `gap.read` now since the drop may panic.
        .                               gap.read += 1;
        .                               /* We have found duplicate, drop it in-place */
        .                               ptr::drop_in_place(read_ptr);
        .                           } else {
        .                               let write_ptr = ptr.add(gap.write);
        .           
        .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
        .                                * have to use `copy` or conditional `copy_nonoverlapping`.
        .                                * Looks like the first option is faster. */
        .                               ptr::copy(read_ptr, write_ptr, 1);
        .           
        .                               /* We have filled that place, so go further */
      640 ( 0.00%)                      gap.write += 1;
        .                               gap.read += 1;
        .                           }
        .                       }
        .           
        .                       /* Technically we could let `gap` clean up with its Drop, but
        .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
        .                        * the codegen, so we just do it manually */
        .                       gap.vec.set_len(gap.write);
        .                       mem::forget(gap);
        .                   }
      120 ( 0.00%)      }
        .           
        .               /// Appends an element to the back of a collection.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
        .               ///
        .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2];
        .               /// vec.push(3);
        .               /// assert_eq!(vec, [1, 2, 3]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
       15 ( 0.00%)      pub fn push(&mut self, value: T) {
        .                   // This will panic or abort if we would allocate > isize::MAX bytes
        .                   // or if the length increment would overflow for zero-sized types.
1,359,036 ( 0.28%)          if self.len == self.buf.capacity() {
   62,450 ( 0.01%)              self.buf.reserve_for_push(self.len);
        .                   }
        .                   unsafe {
   27,892 ( 0.01%)              let end = self.as_mut_ptr().add(self.len);
        .                       ptr::write(end, value);
1,570,177 ( 0.32%)              self.len += 1;
        .                   }
       12 ( 0.00%)      }
        .           
        .               /// Removes the last element from a vector and returns it, or [`None`] if it
        .               /// is empty.
        .               ///
        .               /// If you'd like to pop the first element, consider using
        .               /// [`VecDeque::pop_front`] instead.
        .               ///
        .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3];
        .               /// assert_eq!(vec.pop(), Some(3));
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop(&mut self) -> Option<T> {
  110,593 ( 0.02%)          if self.len == 0 {
        2 ( 0.00%)              None
        .                   } else {
        .                       unsafe {
   79,396 ( 0.02%)                  self.len -= 1;
   14,730 ( 0.00%)                  Some(ptr::read(self.as_ptr().add(self.len())))
        .                       }
        .                   }
        .               }
        .           
        .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
        .               ///
        .               /// # Panics
        .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
        .               /// let mut vec2 = vec![4, 5, 6];
        .               /// vec.append(&mut vec2);
        .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
        .               /// assert_eq!(vec2, []);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "append", since = "1.4.0")]
      595 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
        .                   unsafe {
        .                       self.append_elements(other.as_slice() as _);
        .                       other.set_len(0);
        .                   }
      510 ( 0.00%)      }
        .           
        .               /// Appends elements to `Self` from other buffer.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               unsafe fn append_elements(&mut self, other: *const [T]) {
        .                   let count = unsafe { (*other).len() };
        .                   self.reserve(count);
    8,030 ( 0.00%)          let len = self.len();
        .                   unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
   67,691 ( 0.01%)          self.len += count;
        .               }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// When the iterator **is** dropped, all elements in the range are removed
        .               /// from the vector, even if the iterator was not fully consumed. If the
        .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
        .                   // When the Drain is first created, it shortens the length of
        .                   // the source vector to make sure no uninitialized or moved-from elements
        .                   // are accessible at all if the Drain's destructor never gets to run.
        .                   //
        .                   // Drain will ptr::read out the values to remove.
        .                   // When finished, remaining tail of the vec is copied back to cover
        .                   // the hole, and the vector length is restored to the new length.
        .                   //
    1,947 ( 0.00%)          let len = self.len();
        .                   let Range { start, end } = slice::range(range, ..len);
        .           
        .                   unsafe {
        .                       // set self.vec length's to start, to be safe in case Drain is leaked
        .                       self.set_len(start);
        .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
        .                       // whole Drain iterator (like &mut T).
      115 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
      562 ( 0.00%)              Drain {
        .                           tail_start: end,
      114 ( 0.00%)                  tail_len: len - end,
        .                           iter: range_slice.iter(),
        .                           vec: NonNull::from(self),
        .                       }
        .                   }
        .               }
        .           
        .               /// Clears the vector, removing all values.
        .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
        .               ///
        .               /// v.clear();
        .               ///
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn clear(&mut self) {
   58,776 ( 0.01%)          self.truncate(0)
        .               }
        .           
        .               /// Returns the number of elements in the vector, also referred to
        .               /// as its 'length'.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
        .               /// let mut v = Vec::new();
        .               /// assert!(v.is_empty());
        .               ///
        .               /// v.push(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn is_empty(&self) -> bool {
   48,650 ( 0.01%)          self.len() == 0
        .               }
        .           
        .               /// Splits the collection into two at the given index.
        .               ///
        .               /// Returns a newly allocated vector containing the elements in the range
        .               /// `[at, len)`. After the call, the original vector will be left containing
        .               /// the elements `[0, at)` with its previous capacity unchanged.
        .               ///
-- line 1916 ----------------------------------------
-- line 1935 ----------------------------------------
        .                   A: Clone,
        .               {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(at: usize, len: usize) -> ! {
        .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
        .                   }
        .           
      521 ( 0.00%)          if at > self.len() {
        .                       assert_failed(at, self.len());
        .                   }
        .           
      349 ( 0.00%)          if at == 0 {
        .                       // the new vector can take over the original buffer and avoid the copy
        .                       return mem::replace(
        .                           self,
        .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
        .                       );
        .                   }
        .           
        .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
        .               ///
        .               /// let mut vec = vec![];
        .               /// let mut p = 1;
        .               /// vec.resize_with(4, || { p *= 2; p });
        .               /// assert_eq!(vec, [2, 4, 8, 16]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
    2,066 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
        .               where
        .                   F: FnMut() -> T,
        .               {
      278 ( 0.00%)          let len = self.len();
      556 ( 0.00%)          if new_len > len {
    3,121 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
    1,788 ( 0.00%)      }
        .           
        .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
        .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
        .               /// `'a`. If the type has only static references, or none at all, then this
        .               /// may be chosen to be `'static`.
        .               ///
        .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
        .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
        .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
        .               #[inline]
        .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
        .                   // Note:
        .                   // This method is not implemented in terms of `split_at_spare_mut`,
        .                   // to prevent invalidation of pointers to the buffer.
        .                   unsafe {
        .                       slice::from_raw_parts_mut(
        2 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
       41 ( 0.00%)                  self.buf.capacity() - self.len,
        .                       )
        .                   }
        .               }
        .           
        .               /// Returns vector content as a slice of `T`, along with the remaining spare
        .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
        .               ///
        .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2189 ----------------------------------------
        .               /// assert_eq!(vec, ["hello", "world", "world"]);
        .               ///
        .               /// let mut vec = vec![1, 2, 3, 4];
        .               /// vec.resize(2, 0);
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize", since = "1.5.0")]
    2,350 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
      235 ( 0.00%)          let len = self.len();
        .           
      705 ( 0.00%)          if new_len > len {
    1,188 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
      243 ( 0.00%)      }
        .           
        .               /// Clones and appends all elements in a slice to the `Vec`.
        .               ///
        .               /// Iterates over the slice `other`, clones each element, and then appends
        .               /// it to this `Vec`. The `other` slice is traversed in-order.
        .               ///
        .               /// Note that this function is same as [`extend`] except that it is
        .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2291 ----------------------------------------
        .               fn last(mut self) -> T {
        .                   (self.0)()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               #[cfg(not(no_global_oom_handling))]
        .               /// Extend the vector by `n` values, using the given generator.
   22,915 ( 0.00%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
        .                   self.reserve(n);
        .           
        .                   unsafe {
      965 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
        .                       // Use SetLenOnDrop to work around bug where compiler
        .                       // might not realize the store through `ptr` through self.set_len()
        .                       // don't alias.
        .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
        .           
        .                       // Write all elements except the last one
        .                       for _ in 1..n {
        .                           ptr::write(ptr, value.next());
        .                           ptr = ptr.offset(1);
        .                           // Increment the length in every step in case next() panics
        .                           local_len.increment_len(1);
        .                       }
        .           
   40,693 ( 0.01%)              if n > 0 {
        .                           // We can write the last element directly without cloning needlessly
        .                           ptr::write(ptr, value.last());
        .                           local_len.increment_len(1);
        .                       }
        .           
        .                       // len set by scope guard
        .                   }
   18,181 ( 0.00%)      }
        .           }
        .           
        .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
        .               /// Removes consecutive repeated elements in the vector according to the
        .               /// [`PartialEq`] trait implementation.
        .               ///
        .               /// If the vector is sorted, this removes all duplicates.
        .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
        .               ///
        .               /// vec.dedup();
        .               ///
        .               /// assert_eq!(vec, [1, 2, 3, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn dedup(&mut self) {
       16 ( 0.00%)          self.dedup_by(|a, b| a == b)
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Internal methods and functions
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
    7,614 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
   35,113 ( 0.01%)      <T as SpecFromElem>::from_elem(elem, n, Global)
    8,893 ( 0.00%)  }
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[unstable(feature = "allocator_api", issue = "32838")]
        .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
        .               <T as SpecFromElem>::from_elem(elem, n, alloc)
        .           }
        .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
        .           // Common trait implementations for Vec
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
        .               type Target = [T];
        .           
        .               fn deref(&self) -> &[T] {
  650,536 ( 0.13%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
        4 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
        .               fn deref_mut(&mut self) -> &mut [T] {
  127,227 ( 0.03%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           trait SpecCloneFrom {
        .               fn clone_from(this: &mut Self, other: &Self);
        .           }
        .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
        .                   this.extend_from_slice(other);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
        .               #[cfg(not(test))]
   29,212 ( 0.01%)      fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
        2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
   36,828 ( 0.01%)      }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Instead use the
        .               // `slice::to_vec`  function which is only available with cfg(test)
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
        .               type Output = I::Output;
        .           
        .               #[inline]
        .               fn index(&self, index: I) -> &Self::Output {
   11,826 ( 0.00%)          Index::index(&**self, index)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {
        .               #[inline]
        .               fn index_mut(&mut self, index: I) -> &mut Self::Output {
       20 ( 0.00%)          IndexMut::index_mut(&mut **self, index)
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> FromIterator<T> for Vec<T> {
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
  228,763 ( 0.05%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
        .               type Item = T;
        .               type IntoIter = IntoIter<T, A>;
        .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
        .               /// for s in v.into_iter() {
        .               ///     // s has type String, not &String
        .               ///     println!("{}", s);
        .               /// }
        .               /// ```
        .               #[inline]
        .               fn into_iter(self) -> IntoIter<T, A> {
        .                   unsafe {
   84,400 ( 0.02%)              let mut me = ManuallyDrop::new(self);
        .                       let alloc = ptr::read(me.allocator());
        .                       let begin = me.as_mut_ptr();
        .                       let end = if mem::size_of::<T>() == 0 {
        .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
        .                       } else {
        .                           begin.add(me.len()) as *const T
        .                       };
        .                       let cap = me.buf.capacity();
   27,106 ( 0.01%)              IntoIter {
        .                           buf: NonNull::new_unchecked(begin),
        .                           phantom: PhantomData,
        .                           cap,
        .                           alloc,
        .                           ptr: begin,
        .                           end,
        .                       }
        .                   }
-- line 2589 ----------------------------------------
-- line 2601 ----------------------------------------
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
        .               type Item = &'a mut T;
        .               type IntoIter = slice::IterMut<'a, T>;
        .           
        .               fn into_iter(self) -> slice::IterMut<'a, T> {
      736 ( 0.00%)          self.iter_mut()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
        .               #[inline]
       80 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  102,153 ( 0.02%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
       80 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, item: T) {
        .                   self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
-- line 2627 ----------------------------------------
-- line 2636 ----------------------------------------
        .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
        .                   // This is the case for a general iterator.
        .                   //
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iterator {
        .                   //          self.push(item);
        .                   //      }
   21,149 ( 0.00%)          while let Some(element) = iterator.next() {
    2,782 ( 0.00%)              let len = self.len();
   40,487 ( 0.01%)              if len == self.capacity() {
      489 ( 0.00%)                  let (lower, _) = iterator.size_hint();
        .                           self.reserve(lower.saturating_add(1));
        .                       }
        .                       unsafe {
        .                           ptr::write(self.as_mut_ptr().add(len), element);
        .                           // Since next() executes user code which can panic we have to bump the length
        .                           // after each step.
        .                           // NB can't overflow since we would have had to alloc the address space
   35,962 ( 0.01%)                  self.set_len(len + 1);
        .                       }
        .                   }
      241 ( 0.00%)      }
        .           
        .               /// Creates a splicing iterator that replaces the specified range in the vector
        .               /// with the given `replace_with` iterator and yields the removed items.
        .               /// `replace_with` does not need to be the same length as `range`.
        .               ///
        .               /// `range` is removed even if the iterator is not consumed until the end.
        .               ///
        .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2693 ----------------------------------------
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "vec_splice", since = "1.21.0")]
        .               pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, A>
        .               where
        .                   R: RangeBounds<usize>,
        .                   I: IntoIterator<Item = T>,
        .               {
      143 ( 0.00%)          Splice { drain: self.drain(range), replace_with: replace_with.into_iter() }
        .               }
        .           
        .               /// Creates an iterator which uses a closure to determine if an element should be removed.
        .               ///
        .               /// If the closure returns true, then the element is removed and yielded.
        .               /// If the closure returns false, the element will remain in the vector and will not be yielded
        .               /// by the iterator.
        .               ///
-- line 2709 ----------------------------------------
-- line 2745 ----------------------------------------
        .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
        .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
        .               /// ```
        .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
        .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
      405 ( 0.00%)          let old_len = self.len();
        .           
        .                   // Guard against us getting leaked (leak amplification)
        .                   unsafe {
        .                       self.set_len(0);
        .                   }
        .           
      192 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
        .               }
        .           }
        .           
        .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
        .           ///
        .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
        .           /// append the entire slice at once.
        .           ///
        .           /// [`copy_from_slice`]: slice::copy_from_slice
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "extend_ref", since = "1.2.0")]
        .           impl<'a, T: Copy + 'a, A: Allocator + 'a> Extend<&'a T> for Vec<T, A> {
      640 ( 0.00%)      fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {
        .                   self.spec_extend(iter.into_iter())
      480 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, &item: &'a T) {
        .                   self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
-- line 2783 ----------------------------------------
-- line 2803 ----------------------------------------
        .               #[inline]
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   Ord::cmp(&**self, &**other)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
  111,443 ( 0.02%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // use drop for [T]
        .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
        .                       // could avoid questions of validity in certain cases
   48,485 ( 0.01%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
        .                   }
        .                   // RawVec handles deallocation
  130,912 ( 0.03%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
        .           impl<T> const Default for Vec<T> {
        .               /// Creates an empty `Vec<T>`.
        .               fn default() -> Vec<T> {
        .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
        .               /// newly-allocated buffer with exactly the right capacity.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
        .               /// ```
        .               fn from(v: Vec<T, A>) -> Self {
        4 ( 0.00%)          v.into_boxed_slice()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl From<&str> for Vec<u8> {
        .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
        .               ///
-- line 2992 ----------------------------------------

  207,075 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/imports.rs
--------------------------------------------------------------------------------
Ir               

-- line 109 ----------------------------------------
      .               /// The resolution of `module_path`.
      .               pub imported_module: Cell<Option<ModuleOrUniformRoot<'a>>>,
      .               pub vis: Cell<ty::Visibility>,
      .               pub used: Cell<bool>,
      .           }
      .           
      .           impl<'a> Import<'a> {
      .               pub fn is_glob(&self) -> bool {
 39,907 ( 0.01%)          matches!(self.kind, ImportKind::Glob { .. })
      .               }
      .           
      .               pub fn is_nested(&self) -> bool {
      .                   match self.kind {
      .                       ImportKind::Single { nested, .. } => nested,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               crate fn crate_lint(&self) -> CrateLint {
     98 ( 0.00%)          CrateLint::UsePath { root_id: self.root_id, root_span: self.root_span }
    174 ( 0.00%)      }
      .           }
      .           
 33,879 ( 0.01%)  #[derive(Clone, Default, Debug)]
      .           /// Records information about the resolution of a name in a namespace of a module.
      .           pub struct NameResolution<'a> {
      .               /// Single imports that may define the name in the namespace.
      .               /// Imports are arena-allocated, so it's ok to use pointers as keys.
      .               single_imports: FxHashSet<PtrKey<'a, Import<'a>>>,
      .               /// The least shadowable known binding for this name, or None if there are no known bindings.
      .               pub binding: Option<&'a NameBinding<'a>>,
      .               shadowed_glob: Option<&'a NameBinding<'a>>,
      .           }
      .           
      .           impl<'a> NameResolution<'a> {
      .               // Returns the binding for the name if it is known or None if it not known.
      .               pub(crate) fn binding(&self) -> Option<&'a NameBinding<'a>> {
 26,119 ( 0.01%)          self.binding.and_then(|binding| {
 29,918 ( 0.01%)              if !binding.is_glob_import() || self.single_imports.is_empty() {
      .                           Some(binding)
      .                       } else {
      .                           None
      .                       }
      .                   })
      .               }
      .           
      .               crate fn add_single_import(&mut self, import: &'a Import<'a>) {
-- line 155 ----------------------------------------
-- line 177 ----------------------------------------
      .                   &mut self,
      .                   module: ModuleOrUniformRoot<'a>,
      .                   ident: Ident,
      .                   ns: Namespace,
      .                   parent_scope: &ParentScope<'a>,
      .                   record_used: bool,
      .                   path_span: Span,
      .               ) -> Result<&'a NameBinding<'a>, Determinacy> {
  2,645 ( 0.00%)          self.resolve_ident_in_module_unadjusted_ext(
      .                       module,
      .                       ident,
      .                       ns,
      .                       parent_scope,
      .                       false,
      .                       record_used,
      .                       path_span,
      .                   )
      .                   .map_err(|(determinacy, _)| determinacy)
      .               }
      .           
      .               /// Attempts to resolve `ident` in namespaces `ns` of `module`.
      .               /// Invariant: if `record_used` is `Some`, expansion and import resolution must be complete.
 27,426 ( 0.01%)      crate fn resolve_ident_in_module_unadjusted_ext(
      .                   &mut self,
      .                   module: ModuleOrUniformRoot<'a>,
      .                   ident: Ident,
      .                   ns: Namespace,
      .                   parent_scope: &ParentScope<'a>,
      .                   restricted_shadowing: bool,
      .                   record_used: bool,
      .                   path_span: Span,
-- line 207 ----------------------------------------
-- line 259 ----------------------------------------
      .                               path_span,
      .                           );
      .                           return binding.map_err(|determinacy| (determinacy, Weak::No));
      .                       }
      .                   };
      .           
      .                   let key = self.new_key(ident, ns);
      .                   let resolution =
 10,448 ( 0.00%)              self.resolution(module, key).try_borrow_mut().map_err(|_| (Determined, Weak::No))?; // This happens when there is a cycle of imports.
      .           
  5,200 ( 0.00%)          if let Some(binding) = resolution.binding {
    632 ( 0.00%)              if !restricted_shadowing && binding.expansion != LocalExpnId::ROOT {
    100 ( 0.00%)                  if let NameBindingKind::Res(_, true) = binding.kind {
      .                               self.macro_expanded_macro_export_errors.insert((path_span, binding.span));
      .                           }
      .                       }
      .                   }
      .           
  5,224 ( 0.00%)          let check_usable = |this: &mut Self, binding: &'a NameBinding<'a>| {
    750 ( 0.00%)              if let Some(unusable_binding) = this.unusable_binding {
      .                           if ptr::eq(binding, unusable_binding) {
      .                               return Err((Determined, Weak::No));
      .                           }
      .                       }
    411 ( 0.00%)              let usable = this.is_accessible_from(binding.vis, parent_scope.module);
    428 ( 0.00%)              if usable { Ok(binding) } else { Err((Determined, Weak::No)) }
      .                   };
      .           
  2,612 ( 0.00%)          if record_used {
  1,536 ( 0.00%)              return resolution
      .                           .binding
      .                           .and_then(|binding| {
      .                               // If the primary binding is unusable, search further and return the shadowed glob
      .                               // binding if it exists. What we really want here is having two separate scopes in
      .                               // a module - one for non-globs and one for globs, but until that's done use this
      .                               // hack to avoid inconsistent resolution ICEs during import validation.
  2,685 ( 0.00%)                      if let Some(unusable_binding) = self.unusable_binding {
      .                                   if ptr::eq(binding, unusable_binding) {
      .                                       return resolution.shadowed_glob;
      .                                   }
      .                               }
      .                               Some(binding)
      .                           })
      .                           .ok_or((Determined, Weak::No))
      .                           .and_then(|binding| {
  1,122 ( 0.00%)                      if self.last_import_segment && check_usable(self, binding).is_err() {
      .                                   Err((Determined, Weak::No))
      .                               } else {
  3,180 ( 0.00%)                          self.record_use(ident, binding, restricted_shadowing);
      .           
  1,590 ( 0.00%)                          if let Some(shadowed_glob) = resolution.shadowed_glob {
      .                                       // Forbid expanded shadowing to avoid time travel.
      .                                       if restricted_shadowing
      .                                           && binding.expansion != LocalExpnId::ROOT
      .                                           && binding.res() != shadowed_glob.res()
      .                                       {
      .                                           self.ambiguity_errors.push(AmbiguityError {
      .                                               kind: AmbiguityKind::GlobVsExpanded,
      .                                               ident,
-- line 317 ----------------------------------------
-- line 318 ----------------------------------------
      .                                               b1: binding,
      .                                               b2: shadowed_glob,
      .                                               misc1: AmbiguityErrorMisc::None,
      .                                               misc2: AmbiguityErrorMisc::None,
      .                                           });
      .                                       }
      .                                   }
      .           
  2,650 ( 0.00%)                          if !self.is_accessible_from(binding.vis, parent_scope.module) {
      .                                       self.privacy_errors.push(PrivacyError {
      .                                           ident,
      .                                           binding,
      .                                           dedup_span: path_span,
      .                                       });
      .                                   }
      .           
      .                                   Ok(binding)
      .                               }
      .                           });
      .                   }
      .           
      .                   // Items and single imports are not shadowable, if we have one, then it's determined.
  1,614 ( 0.00%)          if let Some(binding) = resolution.binding {
      9 ( 0.00%)              if !binding.is_glob_import() {
      .                           return check_usable(self, binding);
      .                       }
      .                   }
      .           
      .                   // --- From now on we either have a glob resolution or no resolution. ---
      .           
      .                   // Check if one of single imports can still define the name,
      .                   // if it can then our result is not determined and can be invalidated.
  4,280 ( 0.00%)          for single_import in &resolution.single_imports {
      .                       if !self.is_accessible_from(single_import.vis.get(), parent_scope.module) {
      .                           continue;
      .                       }
      .                       let module = match single_import.imported_module.get() {
      .                           Some(x) => x,
      .                           None => return Err((Undetermined, Weak::No)),
      .                       };
      .                       let ident = match single_import.kind {
-- line 358 ----------------------------------------
-- line 385 ----------------------------------------
      .                   // Additionally, any macro in any module can plant names in the root module if it creates
      .                   // `macro_export` macros, so the root module effectively has unresolved invocations if any
      .                   // module has unresolved invocations.
      .                   // However, it causes resolution/expansion to stuck too often (#53144), so, to make
      .                   // progress, we have to ignore those potential unresolved invocations from other modules
      .                   // and prohibit access to macro-expanded `macro_export` macros instead (unless restricted
      .                   // shadowing is enabled, see `macro_expanded_macro_export_errors`).
      .                   let unexpanded_macros = !module.unexpanded_invocations.borrow().is_empty();
  2,140 ( 0.00%)          if let Some(binding) = resolution.binding {
      .                       if !unexpanded_macros || ns == MacroNS || restricted_shadowing {
      .                           return check_usable(self, binding);
      .                       } else {
      .                           return Err((Undetermined, Weak::No));
      .                       }
      .                   }
      .           
      .                   // --- From now on we have no resolution. ---
-- line 401 ----------------------------------------
-- line 403 ----------------------------------------
      .                   // Now we are in situation when new item/import can appear only from a glob or a macro
      .                   // expansion. With restricted shadowing names from globs and macro expansions cannot
      .                   // shadow names from outer scopes, so we can freely fallback from module search to search
      .                   // in outer scopes. For `early_resolve_ident_in_lexical_scope` to continue search in outer
      .                   // scopes we return `Undetermined` with `Weak::Yes`.
      .           
      .                   // Check if one of unexpanded macros can still define the name,
      .                   // if it can then our "no resolution" result is not determined and can be invalidated.
    428 ( 0.00%)          if unexpanded_macros {
      .                       return Err((Undetermined, Weak::Yes));
      .                   }
      .           
      .                   // Check if one of glob imports can still define the name,
      .                   // if it can then our "no resolution" result is not determined and can be invalidated.
  1,524 ( 0.00%)          for glob_import in module.globs.borrow().iter() {
      .                       if !self.is_accessible_from(glob_import.vis.get(), parent_scope.module) {
      .                           continue;
      .                       }
      .                       let module = match glob_import.imported_module.get() {
      .                           Some(ModuleOrUniformRoot::Module(module)) => module,
      .                           Some(_) => continue,
      .                           None => return Err((Undetermined, Weak::Yes)),
      .                       };
-- line 425 ----------------------------------------
-- line 452 ----------------------------------------
      .                               continue;
      .                           }
      .                           Ok(_) | Err(Undetermined) => return Err((Undetermined, Weak::Yes)),
      .                       }
      .                   }
      .           
      .                   // No resolution and no one else can define the name - determinate error.
      .                   Err((Determined, Weak::No))
 23,508 ( 0.00%)      }
      .           
      .               // Given a binding and an import that resolves to it,
      .               // return the corresponding binding defined by the import.
100,310 ( 0.02%)      crate fn import(
      .                   &self,
      .                   binding: &'a NameBinding<'a>,
      .                   import: &'a Import<'a>,
      .               ) -> &'a NameBinding<'a> {
100,310 ( 0.02%)          let vis = if binding.vis.is_at_least(import.vis.get(), self)
      .                       || pub_use_of_private_extern_crate_hack(import, binding)
      .                   {
      .                       import.vis.get()
      .                   } else {
      .                       binding.vis
      .                   };
      .           
 30,093 ( 0.01%)          if let ImportKind::Glob { ref max_vis, .. } = import.kind {
 39,860 ( 0.01%)              if vis == import.vis.get() || vis.is_at_least(max_vis.get(), self) {
      .                           max_vis.set(vis)
      .                       }
      .                   }
      .           
 10,031 ( 0.00%)          self.arenas.alloc_name_binding(NameBinding {
      .                       kind: NameBindingKind::Import { binding, import, used: Cell::new(false) },
      .                       ambiguity: None,
 10,031 ( 0.00%)              span: import.span,
      .                       vis,
 10,031 ( 0.00%)              expansion: import.parent_scope.expansion,
      .                   })
 80,248 ( 0.02%)      }
      .           
      .               // Define the name or return the existing binding if there is a collision.
191,292 ( 0.04%)      crate fn try_define(
      .                   &mut self,
      .                   module: Module<'a>,
      .                   key: BindingKey,
      .                   binding: &'a NameBinding<'a>,
      .               ) -> Result<(), &'a NameBinding<'a>> {
      .                   let res = binding.res();
286,938 ( 0.06%)          self.check_reserved_macro_name(key.ident, res);
      .                   self.set_binding_parent_module(binding, module);
 95,646 ( 0.02%)          self.update_resolution(module, key, |this, resolution| {
      .                       if let Some(old_binding) = resolution.binding {
 24,820 ( 0.01%)                  if res == Res::Err {
      .                               // Do not override real bindings with `Res::Err`s from error recovery.
      .                               return Ok(());
      .                           }
  9,928 ( 0.00%)                  match (old_binding.is_glob_import(), binding.is_glob_import()) {
      .                               (true, true) => {
 14,892 ( 0.00%)                          if res != old_binding.res() {
      .                                       resolution.binding = Some(this.ambiguity(
      .                                           AmbiguityKind::GlobVsGlob,
      .                                           old_binding,
      .                                           binding,
      .                                       ));
 39,712 ( 0.01%)                          } else if !old_binding.vis.is_at_least(binding.vis, &*this) {
      .                                       // We are glob-importing the same item but with greater visibility.
      .                                       resolution.binding = Some(binding);
      .                                   }
      .                               }
      .                               (old_glob @ true, false) | (old_glob @ false, true) => {
      .                                   let (glob_binding, nonglob_binding) =
      .                                       if old_glob { (old_binding, binding) } else { (binding, old_binding) };
      .                                   if glob_binding.res() != nonglob_binding.res()
-- line 524 ----------------------------------------
-- line 535 ----------------------------------------
      .                                   }
      .                                   resolution.shadowed_glob = Some(glob_binding);
      .                               }
      .                               (false, false) => {
      .                                   return Err(old_binding);
      .                               }
      .                           }
      .                       } else {
 32,931 ( 0.01%)                  resolution.binding = Some(binding);
      .                       }
      .           
      .                       Ok(())
      .                   })
143,469 ( 0.03%)      }
      .           
      .               fn ambiguity(
      .                   &self,
      .                   kind: AmbiguityKind,
      .                   primary_binding: &'a NameBinding<'a>,
      .                   secondary_binding: &'a NameBinding<'a>,
      .               ) -> &'a NameBinding<'a> {
      .                   self.arenas.alloc_name_binding(NameBinding {
-- line 556 ----------------------------------------
-- line 563 ----------------------------------------
      .               // If the resolution becomes a success, define it in the module's glob importers.
      .               fn update_resolution<T, F>(&mut self, module: Module<'a>, key: BindingKey, f: F) -> T
      .               where
      .                   F: FnOnce(&mut Resolver<'a>, &mut NameResolution<'a>) -> T,
      .               {
      .                   // Ensure that `resolution` isn't borrowed when defining in the module's glob importers,
      .                   // during which the resolution might end up getting re-defined via a glob cycle.
      .                   let (binding, t) = {
255,456 ( 0.05%)              let resolution = &mut *self.resolution(module, key).borrow_mut();
      .                       let old_binding = resolution.binding();
      .           
      .                       let t = f(self, resolution);
      .           
      .                       match resolution.binding() {
      .                           _ if old_binding.is_some() => return t,
      .                           None => return t,
      .                           Some(binding) => match old_binding {
-- line 579 ----------------------------------------
-- line 580 ----------------------------------------
      .                               Some(old_binding) if ptr::eq(old_binding, binding) => return t,
      .                               _ => (binding, t),
      .                           },
      .                       }
      .                   };
      .           
      .                   // Define `binding` in `module`s glob importers.
      .                   for import in module.glob_importers.borrow_mut().iter() {
 19,920 ( 0.00%)              let mut ident = key.ident;
 44,820 ( 0.01%)              let scope = match ident.span.reverse_glob_adjust(module.expansion, import.span) {
      .                           Some(Some(def)) => self.expn_def_scope(def),
  9,960 ( 0.00%)                  Some(None) => import.parent_scope.module,
      .                           None => continue,
      .                       };
  9,960 ( 0.00%)              if self.is_accessible_from(binding.vis, scope) {
 19,864 ( 0.00%)                  let imported_binding = self.import(binding, import);
      .                           let key = BindingKey { ident, ..key };
 74,490 ( 0.02%)                  let _ = self.try_define(import.parent_scope.module, key, imported_binding);
      .                       }
      .                   }
      .           
      .                   t
      .               }
      .           
      .               // Define a "dummy" resolution containing a Res::Err as a placeholder for a
      .               // failed resolution
-- line 605 ----------------------------------------
-- line 643 ----------------------------------------
      .               // This is a fixed-point algorithm. We resolve imports until our efforts
      .               // are stymied by an unresolved import; then we bail out of the current
      .               // module and continue. We terminate successfully once no more imports
      .               // remain or unsuccessfully when no forward progress in resolving imports
      .               // is made.
      .           
      .               /// Resolves all imports for the crate. This method performs the fixed-
      .               /// point iteration.
     16 ( 0.00%)      pub fn resolve_imports(&mut self) {
     10 ( 0.00%)          let mut prev_num_indeterminates = self.r.indeterminate_imports.len() + 1;
     29 ( 0.00%)          while self.r.indeterminate_imports.len() < prev_num_indeterminates {
      .                       prev_num_indeterminates = self.r.indeterminate_imports.len();
     72 ( 0.00%)              for import in mem::take(&mut self.r.indeterminate_imports) {
      .                           match self.resolve_import(&import) {
     33 ( 0.00%)                      true => self.r.determined_imports.push(import),
      6 ( 0.00%)                      false => self.r.indeterminate_imports.push(import),
      .                           }
      .                       }
      .                   }
     16 ( 0.00%)      }
      .           
      7 ( 0.00%)      pub fn finalize_imports(&mut self) {
      2 ( 0.00%)          for module in self.r.arenas.local_modules().iter() {
     13 ( 0.00%)              self.finalize_resolutions_in(module);
      .                   }
      .           
      .                   let mut seen_spans = FxHashSet::default();
      .                   let mut errors = vec![];
      .                   let mut prev_root_id: NodeId = NodeId::from_u32(0);
      1 ( 0.00%)          let determined_imports = mem::take(&mut self.r.determined_imports);
      1 ( 0.00%)          let indeterminate_imports = mem::take(&mut self.r.indeterminate_imports);
      .           
     12 ( 0.00%)          for (is_indeterminate, import) in determined_imports
      .                       .into_iter()
      .                       .map(|i| (false, i))
      .                       .chain(indeterminate_imports.into_iter().map(|i| (true, i)))
      .                   {
    180 ( 0.00%)              if let Some(err) = self.finalize_import(import) {
      .                           if let ImportKind::Single { source, ref source_bindings, .. } = import.kind {
      .                               if source.name == kw::SelfLower {
      .                                   // Silence `unresolved import` error if E0429 is already emitted
      .                                   if let Err(Determined) = source_bindings.value_ns.get() {
      .                                       continue;
      .                                   }
      .                               }
      .                           }
-- line 688 ----------------------------------------
-- line 703 ----------------------------------------
      .                               let path = import_path_to_string(
      .                                   &import.module_path.iter().map(|seg| seg.ident).collect::<Vec<_>>(),
      .                                   &import.kind,
      .                                   err.span,
      .                               );
      .                               errors.push((path, err));
      .                               prev_root_id = import.root_id;
      .                           }
     60 ( 0.00%)              } else if is_indeterminate {
      .                           // Consider erroneous imports used to avoid duplicate diagnostics.
      .                           self.r.used_imports.insert(import.id);
      .                           let path = import_path_to_string(
      .                               &import.module_path.iter().map(|seg| seg.ident).collect::<Vec<_>>(),
      .                               &import.kind,
      .                               import.span,
      .                           );
      .                           let err = UnresolvedImportError {
-- line 719 ----------------------------------------
-- line 721 ----------------------------------------
      .                               label: None,
      .                               note: Vec::new(),
      .                               suggestion: None,
      .                           };
      .                           errors.push((path, err));
      .                       }
      .                   }
      .           
      1 ( 0.00%)          if !errors.is_empty() {
      .                       self.throw_unresolved_import_error(errors, None);
      .                   }
      8 ( 0.00%)      }
      .           
      .               fn throw_unresolved_import_error(
      .                   &self,
      .                   errors: Vec<(String, UnresolvedImportError)>,
      .                   span: Option<MultiSpan>,
      .               ) {
      .                   /// Upper limit on the number of `span_label` messages.
      .                   const MAX_LABEL_COUNT: usize = 10;
-- line 740 ----------------------------------------
-- line 776 ----------------------------------------
      .               /// If successful, the resolved bindings are written into the module.
      .               fn resolve_import(&mut self, import: &'b Import<'b>) -> bool {
      .                   debug!(
      .                       "(resolving import for module) resolving import `{}::...` in `{}`",
      .                       Segment::names_to_string(&import.module_path),
      .                       module_to_string(import.parent_scope.module).unwrap_or_else(|| "???".to_string()),
      .                   );
      .           
    114 ( 0.00%)          let module = if let Some(module) = import.imported_module.get() {
     12 ( 0.00%)              module
      .                   } else {
      .                       // For better failure detection, pretend that the import will
      .                       // not define any names while resolving its module path.
      .                       let orig_vis = import.vis.replace(ty::Visibility::Invisible);
      .                       let path_res = self.r.resolve_path(
      .                           &import.module_path,
      .                           None,
     30 ( 0.00%)                  &import.parent_scope,
      .                           false,
      .                           import.span,
      .                           import.crate_lint(),
      .                       );
      .                       import.vis.set(orig_vis);
      .           
    210 ( 0.00%)              match path_res {
    150 ( 0.00%)                  PathResult::Module(module) => module,
      .                           PathResult::Indeterminate => return false,
      .                           PathResult::NonModule(..) | PathResult::Failed { .. } => return true,
      .                       }
      .                   };
      .           
      .                   import.imported_module.set(Some(module));
    411 ( 0.00%)          let (source, target, source_bindings, target_bindings, type_ns_only) = match import.kind {
      .                       ImportKind::Single {
      .                           source,
      .                           target,
     33 ( 0.00%)                  ref source_bindings,
     33 ( 0.00%)                  ref target_bindings,
     33 ( 0.00%)                  type_ns_only,
      .                           ..
      .                       } => (source, target, source_bindings, target_bindings, type_ns_only),
      .                       ImportKind::Glob { .. } => {
      .                           self.resolve_glob_import(import);
      .                           return true;
      .                       }
      .                       _ => unreachable!(),
      .                   };
      .           
     33 ( 0.00%)          let mut indeterminate = false;
  1,419 ( 0.00%)          self.r.per_ns(|this, ns| {
    303 ( 0.00%)              if !type_ns_only || ns == TypeNS {
    394 ( 0.00%)                  if let Err(Undetermined) = source_bindings[ns].get() {
      .                               // For better failure detection, pretend that the import will
      .                               // not define any names while resolving its module path.
     91 ( 0.00%)                      let orig_vis = import.vis.replace(ty::Visibility::Invisible);
      .                               let binding = this.resolve_ident_in_module(
    273 ( 0.00%)                          module,
    273 ( 0.00%)                          source,
      .                                   ns,
     91 ( 0.00%)                          &import.parent_scope,
      .                                   false,
     91 ( 0.00%)                          import.span,
      .                               );
      .                               import.vis.set(orig_vis);
      .                               source_bindings[ns].set(binding);
      .                           } else {
      .                               return;
      .                           };
      .           
     91 ( 0.00%)                  let parent = import.parent_scope.module;
    215 ( 0.00%)                  match source_bindings[ns].get() {
     36 ( 0.00%)                      Err(Undetermined) => indeterminate = true,
      .                               // Don't update the resolution, because it was never added.
    100 ( 0.00%)                      Err(Determined) if target.name == kw::Underscore => {}
      .                               Err(Determined) => {
    100 ( 0.00%)                          let key = this.new_key(target, ns);
      .                                   this.update_resolution(parent, key, |_, resolution| {
    100 ( 0.00%)                              resolution.single_imports.remove(&PtrKey(import));
      .                                   });
      .                               }
      .                               Ok(binding) if !binding.is_importable() => {
      .                                   let msg = format!("`{}` is not directly importable", target);
      .                                   struct_span_err!(this.session, import.span, E0253, "{}", &msg)
      .                                       .span_label(import.span, "cannot be imported directly")
      .                                       .emit();
      .                                   // Do not import this illegal binding. Import a dummy binding and pretend
      .                                   // everything is fine
      .                                   this.import_dummy_binding(import);
      .                               }
      .                               Ok(binding) => {
    116 ( 0.00%)                          let imported_binding = this.import(binding, import);
     29 ( 0.00%)                          target_bindings[ns].set(Some(imported_binding));
     87 ( 0.00%)                          this.define(parent, target, ns, imported_binding);
      .                               }
      .                           }
      .                       }
    792 ( 0.00%)          });
      .           
     93 ( 0.00%)          !indeterminate
      .               }
      .           
      .               /// Performs final import resolution, consistency checks and error reporting.
      .               ///
      .               /// Optionally returns an unresolved import error. This error is buffered and used to
      .               /// consolidate multiple unresolved import errors into a single diagnostic.
    300 ( 0.00%)      fn finalize_import(&mut self, import: &'b Import<'b>) -> Option<UnresolvedImportError> {
      .                   let orig_vis = import.vis.replace(ty::Visibility::Invisible);
    120 ( 0.00%)          let orig_unusable_binding = match &import.kind {
      .                       ImportKind::Single { target_bindings, .. } => {
     54 ( 0.00%)                  Some(mem::replace(&mut self.r.unusable_binding, target_bindings[TypeNS].get()))
      .                       }
      .                       _ => None,
      .                   };
     60 ( 0.00%)          let prev_ambiguity_errors_len = self.r.ambiguity_errors.len();
      .                   let path_res = self.r.resolve_path(
      .                       &import.module_path,
      .                       None,
     30 ( 0.00%)              &import.parent_scope,
      .                       true,
     30 ( 0.00%)              import.span,
      .                       import.crate_lint(),
      .                   );
     30 ( 0.00%)          let no_ambiguity = self.r.ambiguity_errors.len() == prev_ambiguity_errors_len;
     30 ( 0.00%)          if let Some(orig_unusable_binding) = orig_unusable_binding {
     27 ( 0.00%)              self.r.unusable_binding = orig_unusable_binding;
      .                   }
      .                   import.vis.set(orig_vis);
    150 ( 0.00%)          if let PathResult::Failed { .. } | PathResult::NonModule(..) = path_res {
      .                       // Consider erroneous imports used to avoid duplicate diagnostics.
      .                       self.r.used_imports.insert(import.id);
      .                   }
      .                   let module = match path_res {
     90 ( 0.00%)              PathResult::Module(module) => {
      .                           // Consistency checks, analogous to `finalize_macro_resolutions`.
     90 ( 0.00%)                  if let Some(initial_module) = import.imported_module.get() {
     90 ( 0.00%)                      if !ModuleOrUniformRoot::same_def(module, initial_module) && no_ambiguity {
      .                                   span_bug!(import.span, "inconsistent resolution for an import");
      .                               }
      .                           } else if self.r.privacy_errors.is_empty() {
      .                               let msg = "cannot determine resolution for the import";
      .                               let msg_note = "import resolution is stuck, try simplifying other imports";
      .                               self.r.session.struct_span_err(import.span, msg).note(msg_note).emit();
      .                           }
      .           
     90 ( 0.00%)                  module
      .                       }
      .                       PathResult::Failed { is_error_from_last_segment: false, span, label, suggestion } => {
      .                           if no_ambiguity {
      .                               assert!(import.imported_module.get().is_none());
      .                               self.r
      .                                   .report_error(span, ResolutionError::FailedToResolve { label, suggestion });
      .                           }
      .                           return None;
-- line 928 ----------------------------------------
-- line 961 ----------------------------------------
      .                               assert!(import.imported_module.get().is_none());
      .                           }
      .                           // The error was already reported earlier.
      .                           return None;
      .                       }
      .                       PathResult::Indeterminate => unreachable!(),
      .                   };
      .           
    339 ( 0.00%)          let (ident, target, source_bindings, target_bindings, type_ns_only) = match import.kind {
      .                       ImportKind::Single {
      .                           source,
      .                           target,
     27 ( 0.00%)                  ref source_bindings,
     27 ( 0.00%)                  ref target_bindings,
     27 ( 0.00%)                  type_ns_only,
      .                           ..
      .                       } => (source, target, source_bindings, target_bindings, type_ns_only),
      6 ( 0.00%)              ImportKind::Glob { is_prelude, ref max_vis } => {
      9 ( 0.00%)                  if import.module_path.len() <= 1 {
      .                               // HACK(eddyb) `lint_if_path_starts_with_module` needs at least
      .                               // 2 segments, so the `resolve_path` above won't trigger it.
      .                               let mut full_path = import.module_path.clone();
      .                               full_path.push(Segment::from_ident(Ident::empty()));
      4 ( 0.00%)                      self.r.lint_if_path_starts_with_module(
      .                                   import.crate_lint(),
      .                                   &full_path,
      1 ( 0.00%)                          import.span,
      .                                   None,
      .                               );
      .                           }
      .           
     13 ( 0.00%)                  if let ModuleOrUniformRoot::Module(module) = module {
      3 ( 0.00%)                      if ptr::eq(module, import.parent_scope.module) {
      .                                   // Importing a module into itself is not allowed.
      .                                   return Some(UnresolvedImportError {
      .                                       span: import.span,
      .                                       label: Some(String::from("cannot glob-import a module into itself")),
      .                                       note: Vec::new(),
      .                                       suggestion: None,
      .                                   });
      .                               }
      .                           }
     11 ( 0.00%)                  if !is_prelude &&
      2 ( 0.00%)                     max_vis.get() != ty::Visibility::Invisible && // Allow empty globs.
      2 ( 0.00%)                     !max_vis.get().is_at_least(import.vis.get(), &*self)
      .                           {
      .                               let msg = "glob import doesn't reexport anything because no candidate is public enough";
      .                               self.r.lint_buffer.buffer_lint(UNUSED_IMPORTS, import.id, import.span, msg);
      .                           }
      .                           return None;
      .                       }
      .                       _ => unreachable!(),
      .                   };
      .           
     54 ( 0.00%)          let mut all_ns_err = true;
  1,242 ( 0.00%)          self.r.per_ns(|this, ns| {
    249 ( 0.00%)              if !type_ns_only || ns == TypeNS {
     79 ( 0.00%)                  let orig_vis = import.vis.replace(ty::Visibility::Invisible);
      .                           let orig_unusable_binding =
    158 ( 0.00%)                      mem::replace(&mut this.unusable_binding, target_bindings[ns].get());
      .                           let orig_last_import_segment = mem::replace(&mut this.last_import_segment, true);
      .                           let binding = this.resolve_ident_in_module(
    237 ( 0.00%)                      module,
    316 ( 0.00%)                      ident,
      .                               ns,
     79 ( 0.00%)                      &import.parent_scope,
      .                               true,
      .                               import.span,
      .                           );
    158 ( 0.00%)                  this.last_import_segment = orig_last_import_segment;
    158 ( 0.00%)                  this.unusable_binding = orig_unusable_binding;
      .                           import.vis.set(orig_vis);
      .           
      .                           match binding {
      .                               Ok(binding) => {
      .                                   // Consistency checks, analogous to `finalize_macro_resolutions`.
     87 ( 0.00%)                          let initial_res = source_bindings[ns].get().map(|initial_binding| {
     29 ( 0.00%)                              all_ns_err = false;
     87 ( 0.00%)                              if let Some(target_binding) = target_bindings[ns].get() {
     29 ( 0.00%)                                  if target.name == kw::Underscore
      .                                               && initial_binding.is_extern_crate()
      .                                               && !initial_binding.is_import()
      .                                           {
      .                                               this.record_use(
      .                                                   ident,
      .                                                   target_binding,
      .                                                   import.module_path.is_empty(),
      .                                               );
      .                                           }
      .                                       }
      .                                       initial_binding.res()
      .                                   });
      .                                   let res = binding.res();
    406 ( 0.00%)                          if let Ok(initial_res) = initial_res {
     87 ( 0.00%)                              if res != initial_res && this.ambiguity_errors.is_empty() {
      .                                           span_bug!(import.span, "inconsistent resolution for an import");
      .                                       }
      .                                   } else if res != Res::Err
      .                                       && this.ambiguity_errors.is_empty()
      .                                       && this.privacy_errors.is_empty()
      .                                   {
      .                                       let msg = "cannot determine resolution for the import";
      .                                       let msg_note =
-- line 1063 ----------------------------------------
-- line 1070 ----------------------------------------
      .                                   // single import (see test `issue-55884-2.rs`). In theory single imports should
      .                                   // always block globs, even if they are not yet resolved, so that this kind of
      .                                   // self-inconsistent resolution never happens.
      .                                   // Re-enable the assert when the issue is fixed.
      .                                   // assert!(result[ns].get().is_err());
      .                               }
      .                           }
      .                       }
    648 ( 0.00%)          });
      .           
     54 ( 0.00%)          if all_ns_err {
      .                       let mut all_ns_failed = true;
      .                       self.r.per_ns(|this, ns| {
      .                           if !type_ns_only || ns == TypeNS {
      .                               let binding = this.resolve_ident_in_module(
      .                                   module,
      .                                   ident,
      .                                   ns,
      .                                   &import.parent_scope,
-- line 1088 ----------------------------------------
-- line 1175 ----------------------------------------
      .                           })
      .                       } else {
      .                           // `resolve_ident_in_module` reported a privacy error.
      .                           self.r.import_dummy_binding(import);
      .                           None
      .                       };
      .                   }
      .           
     27 ( 0.00%)          let mut reexport_error = None;
     27 ( 0.00%)          let mut any_successful_reexport = false;
     54 ( 0.00%)          let mut crate_private_reexport = false;
    324 ( 0.00%)          self.r.per_ns(|this, ns| {
    189 ( 0.00%)              if let Ok(binding) = source_bindings[ns].get() {
     87 ( 0.00%)                  let vis = import.vis.get();
    174 ( 0.00%)                  if !binding.vis.is_at_least(vis, &*this) {
      .                               reexport_error = Some((ns, binding));
      .                               if let ty::Visibility::Restricted(binding_def_id) = binding.vis {
      .                                   if binding_def_id.is_top_level_module() {
      .                                       crate_private_reexport = true;
      .                                   }
      .                               }
      .                           } else {
     58 ( 0.00%)                      any_successful_reexport = true;
      .                           }
      .                       }
      .                   });
      .           
      .                   // All namespaces must be re-exported with extra visibility for an error to occur.
     54 ( 0.00%)          if !any_successful_reexport {
      .                       let (ns, binding) = reexport_error.unwrap();
      .                       if pub_use_of_private_extern_crate_hack(import, binding) {
      .                           let msg = format!(
      .                               "extern crate `{}` is private, and cannot be \
      .                                              re-exported (error E0365), consider declaring with \
      .                                              `pub`",
      .                               ident
      .                           );
-- line 1211 ----------------------------------------
-- line 1241 ----------------------------------------
      .                                   format!("consider marking `{}` as `pub` in the imported module", ident);
      .                               struct_span_err!(self.r.session, import.span, E0364, "{}", error_msg)
      .                                   .span_note(import.span, &note_msg)
      .                                   .emit();
      .                           }
      .                       }
      .                   }
      .           
     81 ( 0.00%)          if import.module_path.len() <= 1 {
      .                       // HACK(eddyb) `lint_if_path_starts_with_module` needs at least
      .                       // 2 segments, so the `resolve_path` above won't trigger it.
      .                       let mut full_path = import.module_path.clone();
     21 ( 0.00%)              full_path.push(Segment::from_ident(ident));
     49 ( 0.00%)              self.r.per_ns(|this, ns| {
     44 ( 0.00%)                  if let Ok(binding) = source_bindings[ns].get() {
     21 ( 0.00%)                      this.lint_if_path_starts_with_module(
      .                                   import.crate_lint(),
      .                                   &full_path,
      7 ( 0.00%)                          import.span,
      .                                   Some(binding),
      .                               );
      .                           }
      .                       });
      .                   }
      .           
      .                   // Record what this import resolves to for later uses in documentation,
      .                   // this may resolve to either a value or a type, but for documentation
      .                   // purposes it's good enough to just favor one over the other.
    756 ( 0.00%)          self.r.per_ns(|this, ns| {
    318 ( 0.00%)              if let Ok(binding) = source_bindings[ns].get() {
    464 ( 0.00%)                  this.import_res_map.entry(import.id).or_default()[ns] = Some(binding.res());
      .                       }
    648 ( 0.00%)          });
      .           
    243 ( 0.00%)          self.check_for_redundant_imports(ident, import, source_bindings, target_bindings, target);
      .           
      .                   debug!("(resolving single import) successfully resolved import");
      .                   None
    240 ( 0.00%)      }
      .           
      .               fn check_for_redundant_imports(
      .                   &mut self,
      .                   ident: Ident,
      .                   import: &'b Import<'b>,
      .                   source_bindings: &PerNS<Cell<Result<&'b NameBinding<'b>, Determinacy>>>,
      .                   target_bindings: &PerNS<Cell<Option<&'b NameBinding<'b>>>>,
      .                   target: Ident,
      .               ) {
      .                   // Skip if the import was produced by a macro.
     27 ( 0.00%)          if import.parent_scope.expansion != LocalExpnId::ROOT {
      .                       return;
      .                   }
      .           
      .                   // Skip if we are inside a named module (in contrast to an anonymous
      .                   // module defined by a block).
     81 ( 0.00%)          if let ModuleKind::Def(..) = import.parent_scope.module.kind {
      .                       return;
      .                   }
      .           
      2 ( 0.00%)          let mut is_redundant = PerNS { value_ns: None, type_ns: None, macro_ns: None };
      .           
      4 ( 0.00%)          let mut redundant_span = PerNS { value_ns: None, type_ns: None, macro_ns: None };
      .           
     44 ( 0.00%)          self.r.per_ns(|this, ns| {
     11 ( 0.00%)              if let Ok(binding) = source_bindings[ns].get() {
      5 ( 0.00%)                  if binding.res() == Res::Err {
      .                               return;
      .                           }
      .           
      .                           let orig_unusable_binding =
      2 ( 0.00%)                      mem::replace(&mut this.unusable_binding, target_bindings[ns].get());
      .           
     12 ( 0.00%)                  match this.early_resolve_ident_in_lexical_scope(
      3 ( 0.00%)                      target,
      .                               ScopeSet::All(ns, false),
      2 ( 0.00%)                      &import.parent_scope,
      .                               false,
      .                               false,
      .                               import.span,
      .                           ) {
      .                               Ok(other_binding) => {
      .                                   is_redundant[ns] = Some(
      .                                       binding.res() == other_binding.res() && !other_binding.is_ambiguity(),
      .                                   );
      .                                   redundant_span[ns] = Some((other_binding.span, other_binding.is_import()));
      .                               }
      2 ( 0.00%)                      Err(_) => is_redundant[ns] = Some(false),
      .                           }
      .           
      2 ( 0.00%)                  this.unusable_binding = orig_unusable_binding;
      .                       }
     24 ( 0.00%)          });
      .           
      8 ( 0.00%)          if !is_redundant.is_empty() && is_redundant.present_items().all(|is_redundant| is_redundant)
      .                   {
      .                       let mut redundant_spans: Vec<_> = redundant_span.present_items().collect();
      .                       redundant_spans.sort();
      .                       redundant_spans.dedup();
      .                       self.r.lint_buffer.buffer_lint_with_diagnostic(
      .                           UNUSED_IMPORTS,
      .                           import.id,
      .                           import.span,
-- line 1342 ----------------------------------------
-- line 1350 ----------------------------------------
      .                   let module = match import.imported_module.get().unwrap() {
      .                       ModuleOrUniformRoot::Module(module) => module,
      .                       _ => {
      .                           self.r.session.span_err(import.span, "cannot glob-import all possible crates");
      .                           return;
      .                       }
      .                   };
      .           
      9 ( 0.00%)          if module.is_trait() {
      .                       self.r.session.span_err(import.span, "items in traits are not importable");
      .                       return;
      3 ( 0.00%)          } else if ptr::eq(module, import.parent_scope.module) {
      .                       return;
     12 ( 0.00%)          } else if let ImportKind::Glob { is_prelude: true, .. } = import.kind {
      2 ( 0.00%)              self.r.prelude = Some(module);
      .                       return;
      .                   }
      .           
      .                   // Add to module's glob_importers
      .                   module.glob_importers.borrow_mut().push(import);
      .           
      .                   // Ensure that `resolutions` isn't borrowed during `try_define`,
      .                   // since it might get updated via a glob cycle.
      6 ( 0.00%)          let bindings = self
      .                       .r
      .                       .resolutions(module)
      .                       .borrow()
      .                       .iter()
      .                       .filter_map(|(key, resolution)| {
 20,109 ( 0.00%)                  resolution.borrow().binding().map(|binding| (*key, binding))
      .                       })
      .                       .collect::<Vec<_>>();
 10,030 ( 0.00%)          for (mut key, binding) in bindings {
 45,133 ( 0.01%)              let scope = match key.ident.span.reverse_glob_adjust(module.expansion, import.span) {
      .                           Some(Some(def)) => self.r.expn_def_scope(def),
 10,026 ( 0.00%)                  Some(None) => import.parent_scope.module,
      .                           None => continue,
      .                       };
 40,104 ( 0.01%)              if self.r.is_accessible_from(binding.vis, scope) {
  9,998 ( 0.00%)                  let imported_binding = self.r.import(binding, import);
 54,989 ( 0.01%)                  let _ = self.r.try_define(import.parent_scope.module, key, imported_binding);
      .                       }
      .                   }
      .           
      .                   // Record the destination of this import
      .                   self.r.record_partial_res(import.id, PartialRes::new(module.res().unwrap()));
      .               }
      .           
      .               // Miscellaneous post-processing, including recording re-exports,
      .               // reporting conflicts, and reporting unresolved imports.
      .               fn finalize_resolutions_in(&mut self, module: Module<'b>) {
      .                   // Since import resolution is finished, globs will not define any more names.
     52 ( 0.00%)          *module.globs.borrow_mut() = Vec::new();
      .           
      .                   let mut reexports = Vec::new();
      .           
     65 ( 0.00%)          module.for_each_child(self.r, |_, ident, _, binding| {
      .                       // Filter away ambiguous imports and anything that has def-site hygiene.
      .                       // FIXME: Implement actual cross-crate hygiene.
      .                       let is_good_import =
 10,083 ( 0.00%)                  binding.is_import() && !binding.is_ambiguity() && !ident.span.from_expansion();
  5,092 ( 0.00%)              if is_good_import || binding.is_macro_def() {
      .                           let res = binding.res().expect_non_local();
      .                           if res != def::Res::Err {
 20,124 ( 0.00%)                      reexports.push(ModChild { ident, res, vis: binding.vis, span: binding.span });
      .                           }
      .                       }
      .                   });
      .           
     13 ( 0.00%)          if !reexports.is_empty() {
     10 ( 0.00%)              if let Some(def_id) = module.opt_def_id() {
      .                           // Call to `expect_local` should be fine because current
      .                           // code is only called for local modules.
      .                           self.r.reexport_map.insert(def_id.expect_local(), reexports);
      .                       }
      .                   }
      .               }
      .           }
      .           
-- line 1428 ----------------------------------------

242,064 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/imports.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/dl-lookup.c
  ./elf/do-rel.h
  ./malloc/malloc.c
  ./nptl/pthread_rwlock_common.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S
  ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S
  ./string/../sysdeps/x86_64/strcmp.S
  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc

--------------------------------------------------------------------------------
Ir                  
--------------------------------------------------------------------------------
84,481,241 (17.28%)  events annotated

