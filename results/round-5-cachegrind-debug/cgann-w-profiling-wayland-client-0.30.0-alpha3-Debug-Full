--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name wayland_client --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 -C metadata=f3dd3bfb8647573c -C extra-filename=-f3dd3bfb8647573c --out-dir /usr/home/liquid/tmp/.tmptWzrSp/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmptWzrSp/target/debug/deps --extern bitflags=/usr/home/liquid/tmp/.tmptWzrSp/target/debug/deps/libbitflags-6fc10ffe78047b17.rmeta --extern futures_channel=/usr/home/liquid/tmp/.tmptWzrSp/target/debug/deps/libfutures_channel-895fd9fe5df219af.rmeta --extern log=/usr/home/liquid/tmp/.tmptWzrSp/target/debug/deps/liblog-4f7417fc1215ce43.rmeta --extern nix=/usr/home/liquid/tmp/.tmptWzrSp/target/debug/deps/libnix-bed5a6adaef2c086.rmeta --extern thiserror=/usr/home/liquid/tmp/.tmptWzrSp/target/debug/deps/libthiserror-ec69ad426345a8a9.rmeta --extern wayland_backend=/usr/home/liquid/tmp/.tmptWzrSp/target/debug/deps/libwayland_backend-2a79d1631e38f70c.rmeta --extern wayland_scanner=/usr/home/liquid/tmp/.tmptWzrSp/target/debug/deps/libwayland_scanner-e73eeb2c3bd74a80.so -L native=/usr/home/liquid/tmp/.tmptWzrSp/target/debug/build/wayland-backend-6594e89e0bb54133/out -L native=/usr/home/liquid/tmp/.tmptWzrSp/target/debug/build/wayland-backend-6594e89e0bb54133/out -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-wayland-client-0.30.0-alpha3-Debug-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
8,966,697,269 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                    file:function
--------------------------------------------------------------------------------
234,081,850 ( 2.61%)  ./malloc/malloc.c:_int_free
219,264,567 ( 2.45%)  ./malloc/malloc.c:_int_malloc
193,386,309 ( 2.16%)  ???:llvm::SelectionDAG::Combine(llvm::CombineLevel, llvm::AAResults*, llvm::CodeGenOpt::Level)
177,308,701 ( 1.98%)  ???:llvm::FPPassManager::runOnFunction(llvm::Function&)
136,349,393 ( 1.52%)  ./malloc/malloc.c:malloc
109,468,223 ( 1.22%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
 67,731,947 ( 0.76%)  ./malloc/malloc.c:free
 67,194,997 ( 0.75%)  ???:llvm::SelectionDAGISel::SelectCodeCommon(llvm::SDNode*, unsigned char const*, unsigned int)
 66,002,049 ( 0.74%)  ???:(anonymous namespace)::RegAllocFast::allocateBasicBlock(llvm::MachineBasicBlock&)
 63,734,723 ( 0.71%)  ???:(anonymous namespace)::Verifier::visitInstruction(llvm::Instruction&)
 58,314,800 ( 0.65%)  ???:llvm::MachineInstr::addOperand(llvm::MachineFunction&, llvm::MachineOperand const&)
 53,805,272 ( 0.60%)  ???:llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const
 49,776,204 ( 0.56%)  ???:llvm::raw_svector_ostream::write_impl(char const*, unsigned long)
 44,429,203 ( 0.50%)  ???:(anonymous namespace)::Verifier::visitMDNode(llvm::MDNode const&, (anonymous namespace)::Verifier::AreDebugLocsAllowed)
 38,144,321 ( 0.43%)  ???:llvm::PMDataManager::verifyPreservedAnalysis(llvm::Pass*)
 37,209,867 ( 0.41%)  ???:llvm::ScheduleDAGSDNodes::BuildSchedUnits()
 35,043,568 ( 0.39%)  ???:llvm::MCExpr::evaluateAsRelocatableImpl(llvm::MCValue&, llvm::MCAssembler const*, llvm::MCAsmLayout const*, llvm::MCFixup const*, llvm::DenseMap<llvm::MCSection const*, unsigned long, llvm::DenseMapInfo<llvm::MCSection const*>, llvm::detail::DenseMapPair<llvm::MCSection const*, unsigned long> > const*, bool) const
 33,933,080 ( 0.38%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
 33,367,686 ( 0.37%)  ./malloc/malloc.c:malloc_consolidate
 32,697,696 ( 0.36%)  ???:llvm::TargetLoweringBase::getTypeConversion(llvm::LLVMContext&, llvm::EVT) const
 29,575,296 ( 0.33%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 29,549,383 ( 0.33%)  ???:(anonymous namespace)::VarLocBasedLDV::process(llvm::MachineInstr&, (anonymous namespace)::VarLocBasedLDV::OpenRangesSet&, (anonymous namespace)::VarLocBasedLDV::VarLocMap&, llvm::SmallVector<(anonymous namespace)::VarLocBasedLDV::TransferDebugPair, 4u>&)
 29,160,178 ( 0.33%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/reader/lexer.rs:xml::reader::lexer::Lexer::next_token
 26,984,761 ( 0.30%)  ???:llvm::MCAsmLayout::getSymbolOffset(llvm::MCSymbol const&) const
 26,431,882 ( 0.29%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/util.rs:xml::util::next_char_from
 25,580,448 ( 0.29%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next
 24,405,990 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 23,715,058 ( 0.26%)  ./malloc/malloc.c:unlink_chunk.constprop.0
 23,448,374 ( 0.26%)  ???:llvm::SelectionDAG::MorphNodeTo(llvm::SDNode*, unsigned int, llvm::SDVTList, llvm::ArrayRef<llvm::SDValue>)
 23,372,315 ( 0.26%)  ???:llvm::InstrEmitter::EmitMachineNode(llvm::SDNode*, bool, bool, llvm::DenseMap<llvm::SDValue, llvm::Register, llvm::DenseMapInfo<llvm::SDValue>, llvm::detail::DenseMapPair<llvm::SDValue, llvm::Register> >&)
 22,980,854 ( 0.26%)  ???:llvm::DAGTypeLegalizer::run()
 22,678,184 ( 0.25%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
 22,650,088 ( 0.25%)  ???:(anonymous namespace)::SelectionDAGLegalize::LegalizeOp(llvm::SDNode*) [clone .llvm.8386621111310650999]
 22,144,494 ( 0.25%)  ???:(anonymous namespace)::TwoAddressInstructionPass::runOnMachineFunction(llvm::MachineFunction&)
 22,019,182 ( 0.25%)  ???:(anonymous namespace)::Verifier::visitCallBase(llvm::CallBase&)
 21,782,733 ( 0.24%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
 21,072,402 ( 0.24%)  ???:llvm::TargetRegisterInfo::shouldRealignStack(llvm::MachineFunction const&) const
 21,008,503 ( 0.23%)  ???:llvm::SelectionDAG::getConstant(llvm::ConstantInt const&, llvm::SDLoc const&, llvm::EVT, bool, bool)
 20,452,296 ( 0.23%)  ???:llvm::SmallSet<llvm::Register, 32u, std::less<llvm::Register> >::insert(llvm::Register const&)
 20,134,764 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs:<std::collections::hash::map::DefaultHasher as core::hash::Hasher>::write
 19,970,016 ( 0.22%)  ???:(anonymous namespace)::DAGCombiner::combine(llvm::SDNode*)
 19,953,701 ( 0.22%)  ./malloc/malloc.c:realloc
 19,674,712 ( 0.22%)  ???:llvm::calculateDbgEntityHistory(llvm::MachineFunction const*, llvm::TargetRegisterInfo const*, llvm::DbgValueHistoryMap&, llvm::DbgLabelInstrMap&)
 19,432,363 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/server.rs:<proc_macro::bridge::server::Dispatcher<proc_macro::bridge::server::MarkedTypes<rustc_expand::proc_macro_server::Rustc>> as proc_macro::bridge::server::DispatcherTrait>::dispatch
 19,205,940 ( 0.21%)  ???:(anonymous namespace)::X86MCCodeEmitter::emitPrefixImpl(unsigned int&, llvm::MCInst const&, llvm::MCSubtargetInfo const&, llvm::raw_ostream&) const
 18,622,428 ( 0.21%)  ???:llvm::SelectionDAG::Legalize()
 18,587,610 ( 0.21%)  ???:llvm::MetadataTracking::track(void*, llvm::Metadata&, llvm::PointerUnion<llvm::MetadataAsValue*, llvm::Metadata*>)
 18,044,598 ( 0.20%)  ./elf/../elf/dl-tls.c:_dl_update_slotinfo
 17,915,619 ( 0.20%)  ???:llvm::MCObjectStreamer::emitBytes(llvm::StringRef)
 17,862,198 ( 0.20%)  ???:(anonymous namespace)::Verifier::verifyFunctionAttrs(llvm::FunctionType*, llvm::AttributeList, llvm::Value const*, bool)
 17,772,328 ( 0.20%)  ???:(anonymous namespace)::Verifier::verify(llvm::Function const&) [clone .llvm.4153962086227604281]
 17,770,556 ( 0.20%)  ???:llvm::MCAsmLayout::getFragmentOffset(llvm::MCFragment const*) const
 17,616,467 ( 0.20%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_sse2_unaligned_erms
 17,576,986 ( 0.20%)  ???:llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)
 17,134,565 ( 0.19%)  ???:llvm::FoldingSetBase::FindNodeOrInsertPos(llvm::FoldingSetNodeID const&, void*&, llvm::FoldingSetBase::FoldingSetInfo const&)
 16,674,188 ( 0.19%)  ./elf/dl-lookup.c:do_lookup_x
 16,371,720 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 16,370,686 ( 0.18%)  ???:(anonymous namespace)::ScheduleDAGRRList::Schedule() [clone .llvm.6953762222372402862]
 16,187,191 ( 0.18%)  ???:llvm::FoldingSetNodeID::AddInteger(unsigned int)
 14,865,215 ( 0.17%)  ???:llvm::MCContext::getOrCreateSymbol(llvm::Twine const&)
 14,856,877 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/unescape.rs:rustc_lexer::unescape::scan_escape
 14,846,706 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs:core::ptr::mut_ptr::<impl *mut T>::guaranteed_eq
 14,820,388 ( 0.17%)  ???:llvm::coro::declaresIntrinsics(llvm::Module const&, std::initializer_list<llvm::StringRef>)
 14,802,000 ( 0.17%)  ???:llvm::TargetRegisterInfo::checkAllSuperRegsMarked(llvm::BitVector const&, llvm::ArrayRef<unsigned short>) const
 14,636,755 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:alloc::vec::Vec<T,A>::push
 14,493,511 ( 0.16%)  ???:(anonymous namespace)::VarLocBasedLDV::ExtendRanges(llvm::MachineFunction&, llvm::TargetPassConfig*) [clone .llvm.4451506318407214204]
 14,488,305 ( 0.16%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms
 14,262,480 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
 14,141,876 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
 13,969,488 ( 0.16%)  ./malloc/malloc.c:_int_realloc
 13,925,951 ( 0.16%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
 13,786,227 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs:core::ptr::mut_ptr::<impl *mut T>::is_null
 13,648,601 ( 0.15%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 13,555,023 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/non_null.rs:core::ptr::non_null::NonNull<T>::as_ptr
 13,548,777 ( 0.15%)  ???:(anonymous namespace)::PEI::runOnMachineFunction(llvm::MachineFunction&)
 13,482,478 ( 0.15%)  ???:multikeySort(llvm::MutableArrayRef<std::pair<llvm::CachedHashStringRef, unsigned long>*>, int)
 13,443,830 ( 0.15%)  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:__strncmp_avx2
 13,408,982 ( 0.15%)  ./stdlib/msort.c:msort_with_tmp.part.0
 13,347,383 ( 0.15%)  ./malloc/malloc.c:calloc
 13,338,893 ( 0.15%)  ???:llvm::SmallPtrSetImplBase::insert_imp_big(void const*)
 13,050,529 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
 12,949,019 ( 0.14%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::CalculateFromScratch(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::BatchUpdateInfo*)
 12,943,447 ( 0.14%)  ???:llvm::ScheduleDAGSDNodes::AddSchedEdges()
 12,781,927 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/client.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 12,766,327 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 12,425,176 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/reader/parser/mod.rs:xml::reader::parser::PullParser::next
 12,408,901 ( 0.14%)  ???:(anonymous namespace)::X86MCInstLower::Lower(llvm::MachineInstr const*, llvm::MCInst&) const
 12,258,908 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs:rustc_mir_dataflow::drop_flag_effects::on_all_children_bits::is_terminal_path
 12,247,842 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
 12,201,848 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::source_map::SourceMap>::lookup_source_file_idx
 12,068,280 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/const_ptr.rs:core::ptr::const_ptr::<impl *const T>::guaranteed_eq
 11,993,917 ( 0.13%)  ???:llvm::SelectionDAG::AssignTopologicalOrder()
 11,980,790 ( 0.13%)  ???:(anonymous namespace)::ELFObjectWriter::recordRelocation(llvm::MCAssembler&, llvm::MCAsmLayout const&, llvm::MCFragment const*, llvm::MCFixup const&, llvm::MCValue, unsigned long&) [clone .llvm.14145361893594770252]
 11,853,575 ( 0.13%)  ???:llvm::DataLayout::getAlignment(llvm::Type*, bool) const
 11,734,632 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/index.rs:<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked
 11,502,190 ( 0.13%)  ???:(anonymous namespace)::X86MCCodeEmitter::encodeInstruction(llvm::MCInst const&, llvm::raw_ostream&, llvm::SmallVectorImpl<llvm::MCFixup>&, llvm::MCSubtargetInfo const&) const
 11,473,716 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/reader/lexer.rs:xml::reader::lexer::Lexer::normal
 11,362,042 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/string.rs:alloc::string::String::push
 11,206,260 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/const_ptr.rs:core::ptr::const_ptr::<impl *const T>::is_null
 11,172,843 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter.rs:core::slice::iter::Iter<T>::new
 11,147,984 ( 0.12%)  ???:llvm::MachineFunction::CreateMachineInstr(llvm::MCInstrDesc const&, llvm::DebugLoc const&, bool)
 11,101,151 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/unescape.rs:rustc_lexer::unescape::unescape_literal::<<rustc_ast::ast::LitKind>::from_lit_token::{closure#2}>
 11,012,815 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs:core::option::Option<T>::map
 10,819,352 ( 0.12%)  ???:llvm::FunctionLoweringInfo::set(llvm::Function const&, llvm::MachineFunction&, llvm::SelectionDAG*)
 10,818,042 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/reader/parser/mod.rs:xml::reader::parser::PullParser::dispatch_token
 10,743,031 ( 0.12%)  ???:llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&)
 10,682,444 ( 0.12%)  ???:llvm::X86FrameLowering::hasFP(llvm::MachineFunction const&) const
 10,518,818 ( 0.12%)  ???:llvm::DwarfDebug::beginInstruction(llvm::MachineInstr const*)
 10,492,418 ( 0.12%)  ???:llvm::InstrEmitter::EmitCopyFromReg(llvm::SDNode*, unsigned int, bool, bool, llvm::Register, llvm::DenseMap<llvm::SDValue, llvm::Register, llvm::DenseMapInfo<llvm::SDValue>, llvm::detail::DenseMapPair<llvm::SDValue, llvm::Register> >&)
 10,426,798 ( 0.12%)  ???:llvm::FoldingSet<llvm::SDNode>::NodeEquals(llvm::FoldingSetBase const*, llvm::FoldingSetBase::Node*, llvm::FoldingSetNodeID const&, unsigned int, llvm::FoldingSetNodeID&)
 10,351,489 ( 0.12%)  ???:llvm::SelectionDAG::getRegister(unsigned int, llvm::EVT)
 10,295,967 ( 0.11%)  ???:(anonymous namespace)::RegAllocFast::markRegUsedInInstr(unsigned short)
 10,272,572 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
 10,069,855 ( 0.11%)  ???:(anonymous namespace)::VectorLegalizer::LegalizeOp(llvm::SDValue) [clone .llvm.3993696295502019106]
  9,795,063 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
  9,708,890 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/reader/parser/outside_tag.rs:xml::reader::parser::outside_tag::<impl xml::reader::parser::PullParser>::outside_tag
  9,519,152 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/validations.rs:core::str::validations::next_code_point
  9,459,956 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/io/mod.rs:<std::io::Bytes<R> as core::iter::traits::iterator::Iterator>::next
  9,288,140 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/validations.rs:core::str::converts::from_utf8
  9,265,752 ( 0.10%)  ???:llvm::TargetLowering::SimplifyDemandedBits(llvm::SDValue, llvm::APInt const&, llvm::APInt const&, llvm::KnownBits&, llvm::TargetLowering::TargetLoweringOpt&, unsigned int, bool) const
  9,163,741 ( 0.10%)  ???:???

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 110 ----------------------------------------
         .           /// Control byte value for an empty bucket.
         .           const EMPTY: u8 = 0b1111_1111;
         .           
         .           /// Control byte value for a deleted bucket.
         .           const DELETED: u8 = 0b1000_0000;
         .           
         .           /// Checks whether a control byte represents a full bucket (top bit is clear).
         .           #[inline]
        45 ( 0.00%)  fn is_full(ctrl: u8) -> bool {
 4,238,974 ( 0.05%)      ctrl & 0x80 == 0
        60 ( 0.00%)  }
         .           
         .           /// Checks whether a control byte represents a special value (top bit is set).
         .           #[inline]
         .           fn is_special(ctrl: u8) -> bool {
         .               ctrl & 0x80 != 0
         .           }
         .           
         .           /// Checks whether a special control value is EMPTY (just check 1 bit).
         .           #[inline]
        33 ( 0.00%)  fn special_is_empty(ctrl: u8) -> bool {
         .               debug_assert!(is_special(ctrl));
   294,869 ( 0.00%)      ctrl & 0x01 != 0
        44 ( 0.00%)  }
         .           
         .           /// Primary hash function, used to select the initial bucket to probe from.
         .           #[inline]
         .           #[allow(clippy::cast_possible_truncation)]
        93 ( 0.00%)  fn h1(hash: u64) -> usize {
         .               // On 32-bit platforms we simply ignore the higher hash bits.
         .               hash as usize
        62 ( 0.00%)  }
         .           
         .           /// Secondary hash function, saved in the low 7 bits of the control byte.
         .           #[inline]
         .           #[allow(clippy::cast_possible_truncation)]
        81 ( 0.00%)  fn h2(hash: u64) -> u8 {
         .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
         .               // value, some hash functions (such as FxHash) produce a usize result
         .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
       162 ( 0.00%)      let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
81,224,943 ( 0.91%)      let top7 = hash >> (hash_len * 8 - 7);
        27 ( 0.00%)      (top7 & 0x7f) as u8 // truncation
        54 ( 0.00%)  }
         .           
         .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
         .           /// table size is a power of two) to visit every group of elements exactly once.
         .           ///
         .           /// A triangular probe has us jump by 1 more group every time. So first we
         .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
         .           /// (skipping over 1 group), then 3 groups (skipping over 2 groups), and so on.
         .           ///
-- line 161 ----------------------------------------
-- line 170 ----------------------------------------
         .               #[inline]
         .               fn move_next(&mut self, bucket_mask: usize) {
         .                   // We should have found an empty bucket by now and ended the probe.
         .                   debug_assert!(
         .                       self.stride <= bucket_mask,
         .                       "Went past end of probe sequence"
         .                   );
         .           
   546,462 ( 0.01%)          self.stride += Group::WIDTH;
   546,462 ( 0.01%)          self.pos += self.stride;
   464,787 ( 0.01%)          self.pos &= bucket_mask;
         .               }
         .           }
         .           
         .           /// Returns the number of buckets needed to hold the given number of items,
         .           /// taking the maximum load factor into account.
         .           ///
         .           /// Returns `None` if an overflow occurs.
         .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
         .           #[cfg_attr(target_os = "emscripten", inline(never))]
         .           #[cfg_attr(not(target_os = "emscripten"), inline)]
        12 ( 0.00%)  fn capacity_to_buckets(cap: usize) -> Option<usize> {
         .               debug_assert_ne!(cap, 0);
         .           
         .               // For small tables we require at least 1 empty bucket so that lookups are
         .               // guaranteed to terminate if an element doesn't exist in the table.
   303,838 ( 0.00%)      if cap < 8 {
         .                   // We don't bother with a table size of 2 buckets since that can only
         .                   // hold a single element. Instead we skip directly to a 4 bucket table
         .                   // which can hold 3 elements.
   649,514 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
         .               }
         .           
         .               // Otherwise require 1/8 buckets to be empty (87.5% load)
         .               //
         .               // Be careful when modifying this, calculate_layout relies on the
         .               // overflow check here.
   132,102 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
         .           
         .               // Any overflows will have been caught by the checked_mul. Also, any
         .               // rounding errors from the division above will be cleaned up by
         .               // next_power_of_two (which can't overflow because of the previous division).
         .               Some(adjusted_cap.next_power_of_two())
        16 ( 0.00%)  }
         .           
         .           /// Returns the maximum effective capacity for the given bucket mask, taking
         .           /// the maximum load factor into account.
         .           #[inline]
        24 ( 0.00%)  fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
   817,090 ( 0.01%)      if bucket_mask < 8 {
         .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
         .                   // Keep in mind that the bucket mask is one less than the bucket count.
         8 ( 0.00%)          bucket_mask
         .               } else {
         .                   // For larger tables we reserve 12.5% of the slots as empty.
   179,834 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
         .               }
        24 ( 0.00%)  }
         .           
         .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
         .           /// while keeping the rest of `calculate_layout_for` independent of `T`
         .           #[derive(Copy, Clone)]
         .           struct TableLayout {
         .               size: usize,
         .               ctrl_align: usize,
         .           }
         .           
         .           impl TableLayout {
         .               #[inline]
         8 ( 0.00%)      fn new<T>() -> Self {
        24 ( 0.00%)          let layout = Layout::new::<T>();
        16 ( 0.00%)          Self {
        24 ( 0.00%)              size: layout.size(),
        48 ( 0.00%)              ctrl_align: usize::max(layout.align(), Group::WIDTH),
         .                   }
        32 ( 0.00%)      }
         .           
         .               #[inline]
       104 ( 0.00%)      fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
        16 ( 0.00%)          let TableLayout { size, ctrl_align } = self;
         .                   // Manual layout calculation since Layout methods are not yet stable.
         .                   let ctrl_offset =
   615,086 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
   824,392 ( 0.01%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
         .           
        72 ( 0.00%)          Some((
        32 ( 0.00%)              unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
         .                       ctrl_offset,
         .                   ))
        24 ( 0.00%)      }
         .           }
         .           
         .           /// Returns a Layout which describes the allocation required for a hash table,
         .           /// and the offset of the control bytes in the allocation.
         .           /// (the offset is also one past last element of buckets)
         .           ///
         .           /// Returns `None` if an overflow occurs.
         .           #[cfg_attr(feature = "inline-more", inline)]
-- line 269 ----------------------------------------
-- line 292 ----------------------------------------
         .               #[inline]
         .               fn clone(&self) -> Self {
         .                   Self { ptr: self.ptr }
         .               }
         .           }
         .           
         .           impl<T> Bucket<T> {
         .               #[inline]
       165 ( 0.00%)      unsafe fn from_base_index(base: NonNull<T>, index: usize) -> Self {
       132 ( 0.00%)          let ptr = if mem::size_of::<T>() == 0 {
         .                       // won't overflow because index must be less than length
         .                       (index + 1) as *mut T
         .                   } else {
       132 ( 0.00%)              base.as_ptr().sub(index)
         .                   };
        33 ( 0.00%)          Self {
       132 ( 0.00%)              ptr: NonNull::new_unchecked(ptr),
         .                   }
        99 ( 0.00%)      }
         .               #[inline]
         .               unsafe fn to_base_index(&self, base: NonNull<T>) -> usize {
         .                   if mem::size_of::<T>() == 0 {
         .                       self.ptr.as_ptr() as usize - 1
         .                   } else {
         .                       offset_from(base.as_ptr(), self.ptr.as_ptr())
         .                   }
         .               }
         .               #[inline]
        99 ( 0.00%)      pub fn as_ptr(&self) -> *mut T {
       132 ( 0.00%)          if mem::size_of::<T>() == 0 {
         .                       // Just return an arbitrary ZST pointer which is properly aligned
         .                       mem::align_of::<T>() as *mut T
         .                   } else {
       198 ( 0.00%)              unsafe { self.ptr.as_ptr().sub(1) }
         .                   }
        99 ( 0.00%)      }
         .               #[inline]
         .               unsafe fn next_n(&self, offset: usize) -> Self {
         .                   let ptr = if mem::size_of::<T>() == 0 {
         .                       (self.ptr.as_ptr() as usize + offset) as *mut T
         .                   } else {
         .                       self.ptr.as_ptr().sub(offset)
         .                   };
         .                   Self {
-- line 335 ----------------------------------------
-- line 337 ----------------------------------------
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub unsafe fn drop(&self) {
         .                   self.as_ptr().drop_in_place();
         .               }
         .               #[inline]
         .               pub unsafe fn read(&self) -> T {
     7,514 ( 0.00%)          self.as_ptr().read()
         .               }
         .               #[inline]
        42 ( 0.00%)      pub unsafe fn write(&self, val: T) {
        63 ( 0.00%)          self.as_ptr().write(val);
        14 ( 0.00%)      }
         .               #[inline]
        52 ( 0.00%)      pub unsafe fn as_ref<'a>(&self) -> &'a T {
        52 ( 0.00%)          &*self.as_ptr()
        52 ( 0.00%)      }
         .               #[inline]
         .               pub unsafe fn as_mut<'a>(&self) -> &'a mut T {
         .                   &mut *self.as_ptr()
         .               }
         .               #[cfg(feature = "raw")]
         .               #[inline]
         .               pub unsafe fn copy_from_nonoverlapping(&self, other: &Self) {
         .                   self.as_ptr().copy_from_nonoverlapping(other.as_ptr(), 1);
-- line 362 ----------------------------------------
-- line 392 ----------------------------------------
         .           
         .           impl<T> RawTable<T, Global> {
         .               /// Creates a new empty hash table without allocating any memory.
         .               ///
         .               /// In effect this returns a table with exactly 1 bucket. However we can
         .               /// leave the data pointer dangling since that bucket is never written to
         .               /// due to our load factor forcing us to always have at least 1 free bucket.
         .               #[inline]
        27 ( 0.00%)      pub const fn new() -> Self {
        72 ( 0.00%)          Self {
        18 ( 0.00%)              table: RawTableInner::new_in(Global),
         .                       marker: PhantomData,
         .                   }
        18 ( 0.00%)      }
         .           
         .               /// Attempts to allocate a new hash table with at least enough capacity
         .               /// for inserting the given number of elements without reallocating.
         .               #[cfg(feature = "raw")]
         .               pub fn try_with_capacity(capacity: usize) -> Result<Self, TryReserveError> {
         .                   Self::try_with_capacity_in(capacity, Global)
         .               }
         .           
-- line 413 ----------------------------------------
-- line 422 ----------------------------------------
         .               /// Creates a new empty hash table without allocating any memory, using the
         .               /// given allocator.
         .               ///
         .               /// In effect this returns a table with exactly 1 bucket. However we can
         .               /// leave the data pointer dangling since that bucket is never written to
         .               /// due to our load factor forcing us to always have at least 1 free bucket.
         .               #[inline]
         .               pub fn new_in(alloc: A) -> Self {
     6,090 ( 0.00%)          Self {
         .                       table: RawTableInner::new_in(alloc),
         .                       marker: PhantomData,
         .                   }
         .               }
         .           
         .               /// Allocates a new hash table with the given number of buckets.
         .               ///
         .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
         .               unsafe fn new_uninitialized(
         .                   alloc: A,
         .                   buckets: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   Ok(Self {
       270 ( 0.00%)              table: RawTableInner::new_uninitialized(
         .                           alloc,
         .                           TableLayout::new::<T>(),
         .                           buckets,
         .                           fallibility,
         .                       )?,
         .                       marker: PhantomData,
         .                   })
         .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
         .               /// Attempts to allocate a new hash table with at least enough capacity
         .               /// for inserting the given number of elements without reallocating.
         .               fn fallible_with_capacity(
         .                   alloc: A,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   Ok(Self {
    21,774 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
         .                           alloc,
         .                           TableLayout::new::<T>(),
         .                           capacity,
         .                           fallibility,
         .                       )?,
         .                       marker: PhantomData,
         .                   })
         .               }
-- line 474 ----------------------------------------
-- line 493 ----------------------------------------
         .               /// Returns a reference to the underlying allocator.
         .               #[inline]
         .               pub fn allocator(&self) -> &A {
         .                   &self.table.alloc
         .               }
         .           
         .               /// Deallocates the table without dropping any entries.
         .               #[cfg_attr(feature = "inline-more", inline)]
        12 ( 0.00%)      unsafe fn free_buckets(&mut self) {
        16 ( 0.00%)          self.table.free_buckets(TableLayout::new::<T>());
         8 ( 0.00%)      }
         .           
         .               /// Returns pointer to one past last element of data table.
         .               #[inline]
        66 ( 0.00%)      pub unsafe fn data_end(&self) -> NonNull<T> {
       165 ( 0.00%)          NonNull::new_unchecked(self.table.ctrl.as_ptr().cast())
        66 ( 0.00%)      }
         .           
         .               /// Returns pointer to start of data table.
         .               #[inline]
         .               #[cfg(feature = "nightly")]
         .               pub unsafe fn data_start(&self) -> *mut T {
         .                   self.data_end().as_ptr().wrapping_sub(self.buckets())
         .               }
         .           
-- line 517 ----------------------------------------
-- line 518 ----------------------------------------
         .               /// Returns the index of a bucket from a `Bucket`.
         .               #[inline]
         .               pub unsafe fn bucket_index(&self, bucket: &Bucket<T>) -> usize {
         .                   bucket.to_base_index(self.data_end())
         .               }
         .           
         .               /// Returns a pointer to an element in the table.
         .               #[inline]
       132 ( 0.00%)      pub unsafe fn bucket(&self, index: usize) -> Bucket<T> {
         .                   debug_assert_ne!(self.table.bucket_mask, 0);
         .                   debug_assert!(index < self.buckets());
       132 ( 0.00%)          Bucket::from_base_index(self.data_end(), index)
        66 ( 0.00%)      }
         .           
         .               /// Erases an element from the table without dropping it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    49,140 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    49,140 ( 0.00%)          let index = self.bucket_index(item);
         .                   self.table.erase(index);
    98,280 ( 0.00%)      }
         .           
         .               /// Erases an element from the table, dropping it in place.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::needless_pass_by_value)]
         .               #[allow(deprecated)]
         .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
         .                   // Erase the element from the table first since drop might panic.
    28,076 ( 0.00%)          self.erase_no_drop(&item);
         .                   item.drop();
         .               }
         .           
         .               /// Finds and erases an element from the table, dropping it in place.
         .               /// Returns true if an element was found.
         .               #[cfg(feature = "raw")]
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// Removes an element from the table, returning it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::needless_pass_by_value)]
         .               #[allow(deprecated)]
         .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    70,204 ( 0.00%)          self.erase_no_drop(&item);
       388 ( 0.00%)          item.read()
         .               }
         .           
         .               /// Finds and removes an element from the table, returning it.
         .               #[cfg_attr(feature = "inline-more", inline)]
 1,489,328 ( 0.02%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
     8,080 ( 0.00%)          match self.find(hash, eq) {
    22,561 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
   316,221 ( 0.00%)              None => None,
         .                   }
 2,093,026 ( 0.02%)      }
         .           
         .               /// Marks all table buckets as empty without dropping their contents.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn clear_no_drop(&mut self) {
         .                   self.table.clear_no_drop();
         .               }
         .           
         .               /// Removes all elements from the table without freeing the backing memory.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn clear(&mut self) {
         .                   // Ensure that the table is reset even if one of the drops panic
         .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
         .                   unsafe {
         1 ( 0.00%)              self_.drop_elements();
         .                   }
         .               }
         .           
        19 ( 0.00%)      unsafe fn drop_elements(&mut self) {
    34,040 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
         .                       for item in self.iter() {
         .                           item.drop();
         .                       }
         .                   }
        16 ( 0.00%)      }
         .           
         .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
         .                   // Calculate the minimal number of elements that we need to reserve
         .                   // space for.
         .                   let min_size = usize::max(self.table.items, min_size);
         .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 641 ----------------------------------------
         .                           }
         .                       }
         .                   }
         .               }
         .           
         .               /// Ensures that at least `additional` items can be inserted into the table
         .               /// without reallocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
        28 ( 0.00%)      pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
   804,327 ( 0.01%)          if additional > self.table.growth_left {
         .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
   524,122 ( 0.01%)              if self
         8 ( 0.00%)                  .reserve_rehash(additional, hasher, Fallibility::Infallible)
         .                           .is_err()
         .                       {
         .                           unsafe { hint::unreachable_unchecked() }
         .                       }
         .                   }
        20 ( 0.00%)      }
         .           
         .               /// Tries to ensure that at least `additional` items can be inserted into
         .               /// the table without reallocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn try_reserve(
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: impl Fn(&T) -> u64,
-- line 667 ----------------------------------------
-- line 671 ----------------------------------------
         .                   } else {
         .                       Ok(())
         .                   }
         .               }
         .           
         .               /// Out-of-line slow path for `reserve` and `try_reserve`.
         .               #[cold]
         .               #[inline(never)]
 1,219,045 ( 0.01%)      fn reserve_rehash(
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: impl Fn(&T) -> u64,
         .                   fallibility: Fallibility,
         .               ) -> Result<(), TryReserveError> {
         .                   unsafe {
        48 ( 0.00%)              self.table.reserve_rehash_inner(
         .                           additional,
        12 ( 0.00%)                  &|table, index| hasher(table.bucket::<T>(index).as_ref()),
         .                           fallibility,
        16 ( 0.00%)                  TableLayout::new::<T>(),
        28 ( 0.00%)                  if mem::needs_drop::<T>() {
         .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
         .                           } else {
         4 ( 0.00%)                      None
         .                           },
         .                       )
         .                   }
   866,236 ( 0.01%)      }
         .           
         .               /// Allocates a new table of a different size and moves the contents of the
         .               /// current table into it.
         .               fn resize(
         .                   &mut self,
         .                   capacity: usize,
         .                   hasher: impl Fn(&T) -> u64,
         .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
         .                       )
         .                   }
         .               }
         .           
         .               /// Inserts a new element into the table, and returns its raw bucket.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
 5,569,733 ( 0.06%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
         .                   unsafe {
        56 ( 0.00%)              let mut index = self.table.find_insert_slot(hash);
         .           
         .                       // We can avoid growing the table once we have reached our load
         .                       // factor if we are replacing a tombstone. This works since the
         .                       // number of EMPTY slots does not change in this case.
    12,875 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
 4,011,899 ( 0.04%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
        16 ( 0.00%)                  self.reserve(1, hasher);
        16 ( 0.00%)                  index = self.table.find_insert_slot(hash);
         .                       }
         .           
        28 ( 0.00%)              self.table.record_item_insert_at(index, old_ctrl, hash);
         .           
        35 ( 0.00%)              let bucket = self.bucket(index);
        30 ( 0.00%)              bucket.write(value);
        14 ( 0.00%)              bucket
         .                   }
 4,106,831 ( 0.05%)      }
         .           
         .               /// Attempts to insert a new element without growing the table and return its raw bucket.
         .               ///
         .               /// Returns an `Err` containing the given element if inserting it would require growing the
         .               /// table.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Inserts a new element into the table, and returns a mutable reference to it.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
 1,347,440 ( 0.02%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
       448 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
 1,010,580 ( 0.01%)      }
         .           
         .               /// Inserts a new element into the table, without growing the table.
         .               ///
         .               /// There must be enough space in the table to insert the new element.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
     5,947 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
   826,663 ( 0.01%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
    23,303 ( 0.00%)          let bucket = self.table.bucket(index);
         .           
         .                   // If we are replacing a DELETED entry then we don't need to update
         .                   // the load counter.
 1,721,570 ( 0.02%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
         .           
         .                   bucket.write(value);
 1,374,719 ( 0.02%)          self.table.items += 1;
         .                   bucket
    11,425 ( 0.00%)      }
         .           
         .               /// Temporary removes a bucket, applying the given function to the removed
         .               /// element and optionally put back the returned value in the same bucket.
         .               ///
         .               /// Returns `true` if the bucket still contains an element
         .               ///
         .               /// This does not check if the given bucket is actually occupied.
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
         .                       true
         .                   } else {
         .                       false
         .                   }
         .               }
         .           
         .               /// Searches for an element in the table.
         .               #[inline]
    59,126 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
    25,676 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    68,176 ( 0.00%)              eq(self.bucket(index).as_ref())
     9,793 ( 0.00%)          });
         .           
         .                   // Avoid `Option::map` because it bloats LLVM IR.
        86 ( 0.00%)          match result {
     3,091 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
        14 ( 0.00%)              None => None,
         .                   }
    66,008 ( 0.00%)      }
         .           
         .               /// Gets a reference to an element in the table.
         .               #[inline]
        52 ( 0.00%)      pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
    48,200 ( 0.00%)          match self.find(hash, eq) {
        78 ( 0.00%)              Some(bucket) => Some(unsafe { bucket.as_ref() }),
         .                       None => None,
         .                   }
        39 ( 0.00%)      }
         .           
         .               /// Gets a mutable reference to an element in the table.
         .               #[inline]
    10,136 ( 0.00%)      pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
    33,188 ( 0.00%)          match self.find(hash, eq) {
         .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
        14 ( 0.00%)              None => None,
         .                   }
    11,573 ( 0.00%)      }
         .           
         .               /// Attempts to get mutable references to `N` entries in the table at once.
         .               ///
         .               /// Returns an array of length `N` with the results of each query.
         .               ///
         .               /// At most one mutable reference will be returned to any entry. `None` will be returned if any
         .               /// of the hashes are duplicates. `None` will be returned if the hash is not found.
         .               ///
-- line 859 ----------------------------------------
-- line 913 ----------------------------------------
         .               /// more, but is guaranteed to be able to hold at least this many.
         .               #[inline]
         .               pub fn capacity(&self) -> usize {
         .                   self.table.items + self.table.growth_left
         .               }
         .           
         .               /// Returns the number of elements in the table.
         .               #[inline]
        26 ( 0.00%)      pub fn len(&self) -> usize {
        13 ( 0.00%)          self.table.items
        26 ( 0.00%)      }
         .           
         .               /// Returns `true` if the table contains no elements.
         .               #[inline]
        26 ( 0.00%)      pub fn is_empty(&self) -> bool {
 2,241,000 ( 0.02%)          self.len() == 0
        52 ( 0.00%)      }
         .           
         .               /// Returns the number of buckets in the table.
         .               #[inline]
         .               pub fn buckets(&self) -> usize {
         .                   self.table.bucket_mask + 1
         .               }
         .           
         .               /// Returns an iterator over every element in the table. It is up to
-- line 937 ----------------------------------------
-- line 938 ----------------------------------------
         .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
         .               /// Because we cannot make the `next` method unsafe on the `RawIter`
         .               /// struct, we have to make the `iter` method unsafe.
         .               #[inline]
         .               pub unsafe fn iter(&self) -> RawIter<T> {
         .                   let data = Bucket::from_base_index(self.data_end(), 0);
         .                   RawIter {
         .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
   271,727 ( 0.00%)              items: self.table.items,
         .                   }
         .               }
         .           
         .               /// Returns an iterator over occupied buckets that could match a given hash.
         .               ///
         .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
         .               /// return items that have a hash value different than the one provided. You
         .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
         .               /// Iteration starts at the provided iterator's current location.
         .               ///
         .               /// It is up to the caller to ensure that the iterator is valid for this
         .               /// `RawTable` and covers all items that remain in the table.
         .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
         .                   debug_assert_eq!(iter.len(), self.len());
         .           
         .                   let alloc = self.table.alloc.clone();
    21,332 ( 0.00%)          let allocation = self.into_allocation();
    15,999 ( 0.00%)          RawIntoIter {
    26,665 ( 0.00%)              iter,
         .                       allocation,
         .                       marker: PhantomData,
         .                       alloc,
         .                   }
         .               }
         .           
         .               /// Converts the table into a raw allocation. The contents of the table
         .               /// should be dropped using a `RawIter` before freeing the allocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
     9,348 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
         .                       None
         .                   } else {
         .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
         .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
         .                           Some(lco) => lco,
         .                           None => unsafe { hint::unreachable_unchecked() },
         .                       };
         .                       Some((
     1,071 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
         .                           layout,
         .                       ))
         .                   };
         .                   mem::forget(self);
         .                   alloc
         .               }
         .           }
         .           
-- line 1033 ----------------------------------------
-- line 1041 ----------------------------------------
         .           where
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           impl<A> RawTableInner<A> {
         .               #[inline]
        27 ( 0.00%)      const fn new_in(alloc: A) -> Self {
 1,785,396 ( 0.02%)          Self {
         .                       // Be careful to cast the entire slice to a raw pointer.
        63 ( 0.00%)              ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
         .                       bucket_mask: 0,
         .                       items: 0,
         .                       growth_left: 0,
         .                       alloc,
         .                   }
        18 ( 0.00%)      }
         .           }
         .           
         .           impl<A: Allocator + Clone> RawTableInner<A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
 1,098,096 ( 0.01%)      unsafe fn new_uninitialized(
         .                   alloc: A,
         .                   table_layout: TableLayout,
         .                   buckets: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
        64 ( 0.00%)          let (layout, ctrl_offset) = match table_layout.calculate_layout_for(buckets) {
        48 ( 0.00%)              Some(lco) => lco,
         .                       None => return Err(fallibility.capacity_overflow()),
         .                   };
         .           
         .                   // We need an additional check to ensure that the allocation doesn't
         .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
         .                   // such allocations will never succeed anyways.
         .                   //
         .                   // This mirrors what Vec does in the standard library.
        16 ( 0.00%)          if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
         .                       return Err(fallibility.capacity_overflow());
         .                   }
         .           
   264,056 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
        24 ( 0.00%)              Ok(block) => block.cast(),
         .                       Err(_) => return Err(fallibility.alloc_err(layout)),
         .                   };
         .           
        36 ( 0.00%)          let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
   604,204 ( 0.01%)          Ok(Self {
         .                       ctrl,
   252,681 ( 0.00%)              bucket_mask: buckets - 1,
         .                       items: 0,
        36 ( 0.00%)              growth_left: bucket_mask_to_capacity(buckets - 1),
         .                       alloc,
         .                   })
   799,168 ( 0.01%)      }
         .           
         .               #[inline]
    73,446 ( 0.00%)      fn fallible_with_capacity(
         .                   alloc: A,
         .                   table_layout: TableLayout,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
    19,330 ( 0.00%)          if capacity == 0 {
    15,052 ( 0.00%)              Ok(Self::new_in(alloc))
         .                   } else {
         .                       unsafe {
         .                           let buckets =
        68 ( 0.00%)                      capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
         .           
   498,183 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
        24 ( 0.00%)                  result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
         .           
    38,405 ( 0.00%)                  Ok(result)
         .                       }
         .                   }
    73,410 ( 0.00%)      }
         .           
         .               /// Searches for an empty or deleted bucket which is suitable for inserting
         .               /// a new element and sets the hash for that slot.
         .               ///
         .               /// There must be at least 1 empty bucket in the table.
         .               #[inline]
   289,242 ( 0.00%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
         .                   let index = self.find_insert_slot(hash);
   289,242 ( 0.00%)          let old_ctrl = *self.ctrl(index);
         .                   self.set_ctrl_h2(index, hash);
         .                   (index, old_ctrl)
   578,484 ( 0.01%)      }
         .           
         .               /// Searches for an empty or deleted bucket which is suitable for inserting
         .               /// a new element.
         .               ///
         .               /// There must be at least 1 empty bucket in the table.
         .               #[inline]
        44 ( 0.00%)      fn find_insert_slot(&self, hash: u64) -> usize {
        33 ( 0.00%)          let mut probe_seq = self.probe_seq(hash);
        11 ( 0.00%)          loop {
         .                       unsafe {
        88 ( 0.00%)                  let group = Group::load(self.ctrl(probe_seq.pos));
 2,737,387 ( 0.03%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
 8,008,884 ( 0.09%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
         .           
         .                               // In tables smaller than the group width, trailing control
         .                               // bytes outside the range of the table are filled with
         .                               // EMPTY entries. These will unfortunately trigger a
         .                               // match, but once masked may point to a full bucket that
         .                               // is already occupied. We detect this situation here and
         .                               // perform a second scan starting at the beginning of the
         .                               // table. This second scan is guaranteed to find an empty
         .                               // slot (due to the load factor) before hitting the trailing
         .                               // control bytes (containing EMPTY).
 3,670,093 ( 0.04%)                      if unlikely(is_full(*self.ctrl(result))) {
         .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
         .                                   debug_assert_ne!(probe_seq.pos, 0);
         .                                   return Group::load_aligned(self.ctrl(0))
         .                                       .match_empty_or_deleted()
         .                                       .lowest_set_bit_nonzero();
         .                               }
         .           
        22 ( 0.00%)                      return result;
         .                           }
         .                       }
         .                       probe_seq.move_next(self.bucket_mask);
         .                   }
        33 ( 0.00%)      }
         .           
         .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
         .               /// code generated, but it is eliminated by LLVM optimizations.
         .               #[inline]
       240 ( 0.00%)      fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
        60 ( 0.00%)          let h2_hash = h2(hash);
        60 ( 0.00%)          let mut probe_seq = self.probe_seq(hash);
         .           
   187,476 ( 0.00%)          loop {
       160 ( 0.00%)              let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
         .           
 9,137,587 ( 0.10%)              for bit in group.match_byte(h2_hash) {
17,909,151 ( 0.20%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
         .           
12,294,842 ( 0.14%)                  if likely(eq(index)) {
        26 ( 0.00%)                      return Some(index);
         .                           }
         .                       }
         .           
 2,714,061 ( 0.03%)              if likely(group.match_empty().any_bit_set()) {
         7 ( 0.00%)                  return None;
         .                       }
         .           
         .                       probe_seq.move_next(self.bucket_mask);
         .                   }
        80 ( 0.00%)      }
         .           
         .               #[allow(clippy::mut_mut)]
         .               #[inline]
         .               unsafe fn prepare_rehash_in_place(&mut self) {
         .                   // Bulk convert all full control bytes to DELETED, and all DELETED
         .                   // control bytes to EMPTY. This effectively frees up all buckets
         .                   // containing a DELETED entry.
         .                   for i in (0..self.buckets()).step_by(Group::WIDTH) {
-- line 1204 ----------------------------------------
-- line 1225 ----------------------------------------
         .                   Bucket::from_base_index(self.data_end(), index)
         .               }
         .           
         .               #[inline]
         .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
         .                   debug_assert_ne!(self.bucket_mask, 0);
         .                   debug_assert!(index < self.buckets());
         .                   let base: *mut u8 = self.data_end().as_ptr();
10,156,488 ( 0.11%)          base.sub((index + 1) * size_of)
         .               }
         .           
         .               #[inline]
         .               unsafe fn data_end<T>(&self) -> NonNull<T> {
         .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
         .               }
         .           
         .               /// Returns an iterator-like object for a probe sequence on the table.
         .               ///
         .               /// This iterator never terminates, but is guaranteed to visit each bucket
         .               /// group exactly once. The loop using `probe_seq` must terminate upon
         .               /// reaching a group containing an empty bucket.
         .               #[inline]
       217 ( 0.00%)      fn probe_seq(&self, hash: u64) -> ProbeSeq {
        62 ( 0.00%)          ProbeSeq {
50,583,309 ( 0.56%)              pos: h1(hash) & self.bucket_mask,
         .                       stride: 0,
         .                   }
       124 ( 0.00%)      }
         .           
         .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
         .               /// in the table, otherwise returns error
         .               #[cfg(feature = "raw")]
         .               #[inline]
         .               unsafe fn prepare_insert_no_grow(&mut self, hash: u64) -> Result<usize, ()> {
         .                   let index = self.find_insert_slot(hash);
         .                   let old_ctrl = *self.ctrl(index);
-- line 1260 ----------------------------------------
-- line 1262 ----------------------------------------
         .                       Err(())
         .                   } else {
         .                       self.record_item_insert_at(index, old_ctrl, hash);
         .                       Ok(index)
         .                   }
         .               }
         .           
         .               #[inline]
        63 ( 0.00%)      unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
 5,013,672 ( 0.06%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
        14 ( 0.00%)          self.set_ctrl_h2(index, hash);
 4,006,461 ( 0.04%)          self.items += 1;
        14 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
         .                   let probe_seq_pos = self.probe_seq(hash).pos;
         .                   let probe_index =
         .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
         .                   probe_index(i) == probe_index(new_i)
         .               }
         .           
         .               /// Sets a control byte to the hash, and possibly also the replicated control byte at
         .               /// the end of the array.
         .               #[inline]
        63 ( 0.00%)      unsafe fn set_ctrl_h2(&self, index: usize, hash: u64) {
        28 ( 0.00%)          self.set_ctrl(index, h2(hash));
        14 ( 0.00%)      }
         .           
         .               #[inline]
         .               unsafe fn replace_ctrl_h2(&self, index: usize, hash: u64) -> u8 {
         .                   let prev_ctrl = *self.ctrl(index);
         .                   self.set_ctrl_h2(index, hash);
         .                   prev_ctrl
         .               }
         .           
         .               /// Sets a control byte, and possibly also the replicated control byte at
         .               /// the end of the array.
         .               #[inline]
        70 ( 0.00%)      unsafe fn set_ctrl(&self, index: usize, ctrl: u8) {
         .                   // Replicate the first Group::WIDTH control bytes at the end of
         .                   // the array without using a branch:
         .                   // - If index >= Group::WIDTH then index == index2.
         .                   // - Otherwise index2 == self.bucket_mask + 1 + index.
         .                   //
         .                   // The very last replicated control byte is never actually read because
         .                   // we mask the initial index for unaligned loads, but we write it
         .                   // anyways because it makes the set_ctrl implementation simpler.
-- line 1309 ----------------------------------------
-- line 1312 ----------------------------------------
         .                   // replicate the buckets at the end of the trailing group. For example
         .                   // with 2 buckets and a group size of 4, the control bytes will look
         .                   // like this:
         .                   //
         .                   //     Real    |             Replicated
         .                   // ---------------------------------------------
         .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
         .                   // ---------------------------------------------
 7,700,733 ( 0.09%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
         .           
 2,566,028 ( 0.03%)          *self.ctrl(index) = ctrl;
 2,567,552 ( 0.03%)          *self.ctrl(index2) = ctrl;
        14 ( 0.00%)      }
         .           
         .               /// Returns a pointer to a control byte.
         .               #[inline]
       284 ( 0.00%)      unsafe fn ctrl(&self, index: usize) -> *mut u8 {
         .                   debug_assert!(index < self.num_ctrl_bytes());
       213 ( 0.00%)          self.ctrl.as_ptr().add(index)
       142 ( 0.00%)      }
         .           
         .               #[inline]
        16 ( 0.00%)      fn buckets(&self) -> usize {
   788,329 ( 0.01%)          self.bucket_mask + 1
        16 ( 0.00%)      }
         .           
         .               #[inline]
         8 ( 0.00%)      fn num_ctrl_bytes(&self) -> usize {
   655,253 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
         8 ( 0.00%)      }
         .           
         .               #[inline]
        26 ( 0.00%)      fn is_empty_singleton(&self) -> bool {
 3,244,519 ( 0.04%)          self.bucket_mask == 0
        52 ( 0.00%)      }
         .           
         .               #[allow(clippy::mut_mut)]
         .               #[inline]
        68 ( 0.00%)      unsafe fn prepare_resize(
         .                   &self,
         .                   table_layout: TableLayout,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
         4 ( 0.00%)          debug_assert!(self.items <= capacity);
         .           
         .                   // Allocate and initialize the new table.
    11,784 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
         4 ( 0.00%)              self.alloc.clone(),
         .                       table_layout,
         .                       capacity,
         .                       fallibility,
         .                   )?;
   329,494 ( 0.00%)          new_table.growth_left -= self.items;
         8 ( 0.00%)          new_table.items = self.items;
         .           
         .                   // The hash function may panic, in which case we simply free the new
         .                   // table without dropping any elements that may have been copied into
         .                   // it.
         .                   //
         .                   // This guard is also used to free the old table on success, see
         .                   // the comment at the bottom of this function.
       108 ( 0.00%)          Ok(guard(new_table, move |self_| {
   149,437 ( 0.00%)              if !self_.is_empty_singleton() {
         .                           self_.free_buckets(table_layout);
         .                       }
         8 ( 0.00%)          }))
        16 ( 0.00%)      }
         .           
         .               /// Reserves or rehashes to make room for `additional` more elements.
         .               ///
         .               /// This uses dynamic dispatch to reduce the amount of
         .               /// code generated, but it is eliminated by LLVM optimizations when inlined.
         .               #[allow(clippy::inline_always)]
         .               #[inline(always)]
         .               unsafe fn reserve_rehash_inner(
-- line 1387 ----------------------------------------
-- line 1388 ----------------------------------------
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
         .                   fallibility: Fallibility,
         .                   layout: TableLayout,
         .                   drop: Option<fn(*mut u8)>,
         .               ) -> Result<(), TryReserveError> {
         .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
   298,889 ( 0.00%)          let new_items = match self.items.checked_add(additional) {
        16 ( 0.00%)              Some(new_items) => new_items,
         .                       None => return Err(fallibility.capacity_overflow()),
         .                   };
   298,854 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
   629,092 ( 0.01%)          if new_items <= full_capacity / 2 {
         .                       // Rehash in-place without re-allocating if we have plenty of spare
         .                       // capacity that is locked up due to DELETED entries.
         .                       self.rehash_in_place(hasher, layout.size, drop);
         .                       Ok(())
         .                   } else {
         .                       // Otherwise, conservatively resize to at least the next size up
         .                       // to avoid churning deletes into frequent rehashes.
         .                       self.resize_inner(
   149,457 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
         .                           hasher,
         .                           fallibility,
         .                           layout,
         .                       )
         .                   }
         8 ( 0.00%)      }
         .           
         .               /// Allocates a new table of a different size and moves the contents of the
         .               /// current table into it.
         .               ///
         .               /// This uses dynamic dispatch to reduce the amount of
         .               /// code generated, but it is eliminated by LLVM optimizations when inlined.
         .               #[allow(clippy::inline_always)]
         .               #[inline(always)]
         .               unsafe fn resize_inner(
         .                   &mut self,
         .                   capacity: usize,
         .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
         .                   fallibility: Fallibility,
         .                   layout: TableLayout,
         .               ) -> Result<(), TryReserveError> {
    29,482 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
         .           
         .                   // Copy all elements to the new table.
       164 ( 0.00%)          for i in 0..self.buckets() {
 1,570,622 ( 0.02%)              if !is_full(*self.ctrl(i)) {
         .                           continue;
         .                       }
         .           
         .                       // This may panic.
         .                       let hash = hasher(self, i);
         .           
         .                       // We can use a simpler version of insert() here since:
         .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1452 ----------------------------------------
         .                           layout.size,
         .                       );
         .                   }
         .           
         .                   // We successfully copied all elements without panicking. Now replace
         .                   // self with the new table. The old table will have its memory freed but
         .                   // the items will not be dropped (since they have been moved into the
         .                   // new table).
        20 ( 0.00%)          mem::swap(self, &mut new_table);
         .           
   149,425 ( 0.00%)          Ok(())
        16 ( 0.00%)      }
         .           
         .               /// Rehashes the contents of the table in place (i.e. without changing the
         .               /// allocation).
         .               ///
         .               /// If `hasher` panics then some the table's contents may be lost.
         .               ///
         .               /// This uses dynamic dispatch to reduce the amount of
         .               /// code generated, but it is eliminated by LLVM optimizations when inlined.
-- line 1471 ----------------------------------------
-- line 1547 ----------------------------------------
         .                   }
         .           
         .                   guard.growth_left = bucket_mask_to_capacity(guard.bucket_mask) - guard.items;
         .           
         .                   mem::forget(guard);
         .               }
         .           
         .               #[inline]
        28 ( 0.00%)      unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
         .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        80 ( 0.00%)          let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
        48 ( 0.00%)              Some(lco) => lco,
         .                       None => hint::unreachable_unchecked(),
         .                   };
        12 ( 0.00%)          self.alloc.deallocate(
   101,325 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
         .                       layout,
         .                   );
         8 ( 0.00%)      }
         .           
         .               /// Marks all table buckets as empty without dropping their contents.
         .               #[inline]
         .               fn clear_no_drop(&mut self) {
    33,101 ( 0.00%)          if !self.is_empty_singleton() {
         .                       unsafe {
         .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
         .                       }
         .                   }
    41,605 ( 0.00%)          self.items = 0;
    33,298 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
         .               }
         .           
         .               #[inline]
         .               unsafe fn erase(&mut self, index: usize) {
         .                   debug_assert!(is_full(*self.ctrl(index)));
   258,706 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
         .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
         .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
         .           
         .                   // If we are inside a continuous block of Group::WIDTH full or deleted
         .                   // cells then a probe window may have seen a full block when trying to
         .                   // insert. We therefore need to keep that block non-empty so that
         .                   // lookups will continue searching to the next probe window.
         .                   //
         .                   // Note that in this context `leading_zeros` refers to the bytes at the
         .                   // end of a group, while `trailing_zeros` refers to the bytes at the
         .                   // beginning of a group.
 1,034,824 ( 0.01%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
         .                       DELETED
         .                   } else {
 1,270,740 ( 0.01%)              self.growth_left += 1;
         .                       EMPTY
         .                   };
         .                   self.set_ctrl(index, ctrl);
 1,034,824 ( 0.01%)          self.items -= 1;
         .               }
         .           }
         .           
         .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
    16,256 ( 0.00%)      fn clone(&self) -> Self {
     2,088 ( 0.00%)          if self.table.is_empty_singleton() {
         .                       Self::new_in(self.table.alloc.clone())
         .                   } else {
         .                       unsafe {
         .                           let mut new_table = ManuallyDrop::new(
         .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
         .                               match Self::new_uninitialized(
         .                                   self.table.alloc.clone(),
         .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
         .                               // We need to free the memory allocated for the new table.
         .                               new_table.free_buckets();
         .                           });
         .           
         .                           // Return the newly created table.
         .                           ManuallyDrop::into_inner(new_table)
         .                       }
         .                   }
    18,288 ( 0.00%)      }
         .           
         .               fn clone_from(&mut self, source: &Self) {
         .                   if source.table.is_empty_singleton() {
         .                       *self = Self::new_in(self.table.alloc.clone());
         .                   } else {
         .                       unsafe {
         .                           // First, drop all our elements without clearing the control bytes.
         .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
         .                       .table
         .                       .ctrl(0)
         .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
         .                   source
         .                       .data_start()
         .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
         .           
         .                   self.table.items = source.table.items;
       108 ( 0.00%)          self.table.growth_left = source.table.growth_left;
         .               }
         .           }
         .           
         .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
         .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
         .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
         .               fn default() -> Self {
         .                   Self::new_in(Default::default())
         .               }
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
 1,642,093 ( 0.02%)      fn drop(&mut self) {
 1,402,419 ( 0.02%)          if !self.table.is_empty_singleton() {
         .                       unsafe {
         4 ( 0.00%)                  self.drop_elements();
         4 ( 0.00%)                  self.free_buckets();
         .                       }
         .                   }
 1,768,578 ( 0.02%)      }
         .           }
         .           #[cfg(not(feature = "nightly"))]
         .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn drop(&mut self) {
         .                   if !self.table.is_empty_singleton() {
         .                       unsafe {
         .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
         .               type Item = T;
         .               type IntoIter = RawIntoIter<T, A>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
    21,332 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
         .                   unsafe {
         .                       let iter = self.iter();
         .                       self.into_iter_from(iter)
         .                   }
    26,665 ( 0.00%)      }
         .           }
         .           
         .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
         .           /// not track an item count.
         .           pub(crate) struct RawIterRange<T> {
         .               // Mask of full buckets in the current group. Bits are cleared from this
         .               // mask as each element is processed.
         .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
         .           
         .           impl<T> Iterator for RawIterRange<T> {
         .               type Item = Bucket<T>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<Bucket<T>> {
         .                   unsafe {
         .                       loop {
   615,235 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
   101,147 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
   171,597 ( 0.00%)                      return Some(self.data.next_n(index));
         .                           }
         .           
   536,591 ( 0.01%)                  if self.next_ctrl >= self.end {
         .                               return None;
         .                           }
         .           
         .                           // We might read past self.end up to the next group boundary,
         .                           // but this is fine because it only occurs on tables smaller
         .                           // than the group size where the trailing control bytes are all
         .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
         .                           // to the group size (since tables are power-of-two sized).
    13,212 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
    15,589 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
    21,576 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
         .                       }
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   // We don't have an item count, so just guess based on the range size.
         .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
         .                           }
         .                       } else {
         .                           // We must have already iterated past the removed item.
         .                       }
         .                   }
         .               }
         .           
         .               unsafe fn drop_elements(&mut self) {
     4,065 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
         .                       for item in self {
         .                           item.drop();
         .                       }
         .                   }
         .               }
         .           }
         .           
         .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<T> Iterator for RawIter<T> {
         .               type Item = Bucket<T>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
   120,548 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
   309,660 ( 0.00%)          if let Some(b) = self.iter.next() {
   894,276 ( 0.01%)              self.items -= 1;
         .                       Some(b)
         .                   } else {
         .                       // We don't check against items == 0 here to allow the
         .                       // compiler to optimize away the item count entirely if the
         .                       // iterator length is never queried.
         .                       debug_assert_eq!(self.items, 0);
         .                       None
         .                   }
   241,096 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   (self.items, Some(self.items))
         .               }
         .           }
         .           
         .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
     7,254 ( 0.00%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements
         .                       self.iter.drop_elements();
         .           
         .                       // Free the table
    43,733 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
         .                           self.alloc.deallocate(ptr, layout);
         .                       }
         .                   }
     2,168 ( 0.00%)      }
         .           }
         .           #[cfg(not(feature = "nightly"))]
         .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements
         .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
         .               type Item = T;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
     3,092 ( 0.00%)      fn next(&mut self) -> Option<T> {
     1,386 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
     7,356 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         4 ( 0.00%)          self.iter.size_hint()
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
         .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
         .           
         .           /// Iterator which consumes elements without freeing the table storage.
         .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
         .           where
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
     3,288 ( 0.00%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements. Note that this may panic.
         .                       self.iter.drop_elements();
         .           
         .                       // Reset the contents of the table now that all elements have been
         .                       // dropped.
         .                       self.table.clear_no_drop();
         .           
         .                       // Move the now empty table back to its original location.
       411 ( 0.00%)              self.orig_table
         .                           .as_ptr()
         .                           .copy_from_nonoverlapping(&*self.table, 1);
         .                   }
     3,288 ( 0.00%)      }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
         .               type Item = T;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<T> {
         .                   unsafe {
-- line 2289 ----------------------------------------

27,656,505 ( 0.31%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/validations.rs
--------------------------------------------------------------------------------
Ir                 

-- line 3 ----------------------------------------
        .           use crate::mem;
        .           
        .           use super::Utf8Error;
        .           
        .           /// Returns the initial codepoint accumulator for the first byte.
        .           /// The first byte is special, only want bottom 5 bits for width 2, 4 bits
        .           /// for width 3, and 3 bits for width 4.
        .           #[inline]
       50 ( 0.00%)  const fn utf8_first_byte(byte: u8, width: u32) -> u32 {
      188 ( 0.00%)      (byte & (0x7F >> width)) as u32
       20 ( 0.00%)  }
        .           
        .           /// Returns the value of `ch` updated with continuation byte `byte`.
        .           #[inline]
       60 ( 0.00%)  const fn utf8_acc_cont_byte(ch: u32, byte: u8) -> u32 {
      234 ( 0.00%)      (ch << 6) | (byte & CONT_MASK) as u32
       24 ( 0.00%)  }
        .           
        .           /// Checks whether the byte is a UTF-8 continuation byte (i.e., starts with the
        .           /// bits `10`).
        .           #[inline]
        .           pub(super) const fn utf8_is_cont_byte(byte: u8) -> bool {
        .               (byte as i8) < -64
        .           }
        .           
-- line 27 ----------------------------------------
-- line 28 ----------------------------------------
        .           /// Reads the next code point out of a byte iterator (assuming a
        .           /// UTF-8-like encoding).
        .           ///
        .           /// # Safety
        .           ///
        .           /// `bytes` must produce a valid UTF-8-like (UTF-8 or WTF-8) string
        .           #[unstable(feature = "str_internals", issue = "none")]
        .           #[inline]
  986,142 ( 0.01%)  pub unsafe fn next_code_point<'a, I: Iterator<Item = &'a u8>>(bytes: &mut I) -> Option<u32> {
        .               // Decode UTF-8
5,817,685 ( 0.06%)      let x = *bytes.next()?;
3,073,186 ( 0.03%)      if x < 128 {
  990,011 ( 0.01%)          return Some(x as u32);
        .               }
        .           
        .               // Multibyte case follows
        .               // Decode from a byte combination out of: [[[x y] z] w]
        .               // NOTE: Performance is sensitive to the exact formulation here
       60 ( 0.00%)      let init = utf8_first_byte(x, 2);
        .               // SAFETY: `bytes` produces an UTF-8-like string,
        .               // so the iterator must produce a value here.
       80 ( 0.00%)      let y = unsafe { *bytes.next().unwrap_unchecked() };
       30 ( 0.00%)      let mut ch = utf8_acc_cont_byte(init, y);
       80 ( 0.00%)      if x >= 0xE0 {
        .                   // [[x y z] w] case
        .                   // 5th bit in 0xE0 .. 0xEF is always clear, so `init` is still valid
        .                   // SAFETY: `bytes` produces an UTF-8-like string,
        .                   // so the iterator must produce a value here.
       14 ( 0.00%)          let z = unsafe { *bytes.next().unwrap_unchecked() };
       12 ( 0.00%)          let y_z = utf8_acc_cont_byte((y & CONT_MASK) as u32, z);
        8 ( 0.00%)          ch = init << 12 | y_z;
       62 ( 0.00%)          if x >= 0xF0 {
        .                       // [x y z w] case
        .                       // use only the lower 3 bits of `init`
        .                       // SAFETY: `bytes` produces an UTF-8-like string,
        .                       // so the iterator must produce a value here.
        .                       let w = unsafe { *bytes.next().unwrap_unchecked() };
        .                       ch = (init & 7) << 18 | utf8_acc_cont_byte(y_z, w);
        .                   }
        .               }
        .           
       30 ( 0.00%)      Some(ch)
1,643,570 ( 0.02%)  }
        .           
        .           /// Reads the last code point out of a byte iterator (assuming a
        .           /// UTF-8-like encoding).
        .           ///
        .           /// # Safety
        .           ///
        .           /// `bytes` must produce a valid UTF-8-like (UTF-8 or WTF-8) string
        .           #[inline]
   16,749 ( 0.00%)  pub(super) unsafe fn next_code_point_reverse<'a, I>(bytes: &mut I) -> Option<u32>
        .           where
        .               I: DoubleEndedIterator<Item = &'a u8>,
        .           {
        .               // Decode UTF-8
   68,451 ( 0.00%)      let w = match *bytes.next_back()? {
   55,502 ( 0.00%)          next_byte if next_byte < 128 => return Some(next_byte as u32),
        .                   back_byte => back_byte,
        .               };
        .           
        .               // Multibyte case follows
        .               // Decode from a byte combination out of: [x [y [z w]]]
        .               let mut ch;
        .               // SAFETY: `bytes` produces an UTF-8-like string,
        .               // so the iterator must produce a value here.
-- line 93 ----------------------------------------
-- line 105 ----------------------------------------
        .                       ch = utf8_first_byte(x, 4);
        .                       ch = utf8_acc_cont_byte(ch, y);
        .                   }
        .                   ch = utf8_acc_cont_byte(ch, z);
        .               }
        .               ch = utf8_acc_cont_byte(ch, w);
        .           
        .               Some(ch)
   27,915 ( 0.00%)  }
        .           
        .           // use truncation to fit u64 into usize
        .           const NONASCII_MASK: usize = 0x80808080_80808080u64 as usize;
        .           
        .           /// Returns `true` if any byte in the word `x` is nonascii (>= 128).
        .           #[inline]
        .           const fn contains_nonascii(x: usize) -> bool {
   36,769 ( 0.00%)      (x & NONASCII_MASK) != 0
        .           }
        .           
        .           /// Walks through `v` checking that it's a valid UTF-8 sequence,
        .           /// returning `Ok(())` in that case, or, if it is invalid, `Err(err)`.
        .           #[inline(always)]
        .           #[rustc_const_unstable(feature = "str_internals", issue = "none")]
        .           pub(super) const fn run_utf8_validation(v: &[u8]) -> Result<(), Utf8Error> {
        .               let mut index = 0;
        .               let len = v.len();
        .           
        .               let usize_bytes = mem::size_of::<usize>();
        .               let ascii_block_size = 2 * usize_bytes;
  952,398 ( 0.01%)      let blocks_end = if len >= ascii_block_size { len - ascii_block_size + 1 } else { 0 };
        .               let align = v.as_ptr().align_offset(usize_bytes);
        .           
1,257,156 ( 0.01%)      while index < len {
        .                   let old_offset = index;
        .                   macro_rules! err {
        .                       ($error_len: expr) => {
        .                           return Err(Utf8Error { valid_up_to: old_offset, error_len: $error_len })
        .                       };
        .                   }
        .           
        .                   macro_rules! next {
-- line 145 ----------------------------------------
-- line 148 ----------------------------------------
        .                           // we needed data, but there was none: error!
        .                           if index >= len {
        .                               err!(None)
        .                           }
        .                           v[index]
        .                       }};
        .                   }
        .           
  347,356 ( 0.00%)          let first = v[index];
  694,712 ( 0.01%)          if first >= 128 {
        .                       let w = utf8_char_width(first);
        .                       // 2-byte encoding is for codepoints  \u{0080} to  \u{07ff}
        .                       //        first  C2 80        last DF BF
        .                       // 3-byte encoding is for codepoints  \u{0800} to  \u{ffff}
        .                       //        first  E0 A0 80     last EF BF BF
        .                       //   excluding surrogates codepoints  \u{d800} to  \u{dfff}
        .                       //               ED A0 80 to       ED BF BF
        .                       // 4-byte encoding is for codepoints \u{1000}0 to \u{10ff}ff
-- line 165 ----------------------------------------
-- line 169 ----------------------------------------
        .                       //
        .                       // https://tools.ietf.org/html/rfc3629
        .                       // UTF8-1      = %x00-7F
        .                       // UTF8-2      = %xC2-DF UTF8-tail
        .                       // UTF8-3      = %xE0 %xA0-BF UTF8-tail / %xE1-EC 2( UTF8-tail ) /
        .                       //               %xED %x80-9F UTF8-tail / %xEE-EF 2( UTF8-tail )
        .                       // UTF8-4      = %xF0 %x90-BF 2( UTF8-tail ) / %xF1-F3 3( UTF8-tail ) /
        .                       //               %xF4 %x80-8F 2( UTF8-tail )
      128 ( 0.00%)              match w {
        .                           2 => {
       64 ( 0.00%)                      if next!() as i8 >= -64 {
        .                                   err!(Some(1))
        .                               }
        .                           }
        .                           3 => {
       54 ( 0.00%)                      match (first, next!()) {
        .                                   (0xE0, 0xA0..=0xBF)
       42 ( 0.00%)                          | (0xE1..=0xEC, 0x80..=0xBF)
        .                                   | (0xED, 0x80..=0x9F)
        .                                   | (0xEE..=0xEF, 0x80..=0xBF) => {}
        .                                   _ => err!(Some(1)),
        .                               }
       26 ( 0.00%)                      if next!() as i8 >= -64 {
        .                                   err!(Some(2))
        .                               }
        .                           }
        .                           4 => {
        .                               match (first, next!()) {
        .                                   (0xF0, 0x90..=0xBF) | (0xF1..=0xF3, 0x80..=0xBF) | (0xF4, 0x80..=0x8F) => {}
        .                                   _ => err!(Some(1)),
        .                               }
-- line 199 ----------------------------------------
-- line 201 ----------------------------------------
        .                                   err!(Some(2))
        .                               }
        .                               if next!() as i8 >= -64 {
        .                                   err!(Some(3))
        .                               }
        .                           }
        .                           _ => err!(Some(1)),
        .                       }
       36 ( 0.00%)              index += 1;
        .                   } else {
        .                       // Ascii case, try to skip forward quickly.
        .                       // When the pointer is aligned, read 2 words of data per iteration
        .                       // until we find a word containing a non-ascii byte.
1,078,591 ( 0.01%)              if align != usize::MAX && align.wrapping_sub(index) % usize_bytes == 0 {
        .                           let ptr = v.as_ptr();
  146,724 ( 0.00%)                  while index < blocks_end {
        .                               // SAFETY: since `align - index` and `ascii_block_size` are
        .                               // multiples of `usize_bytes`, `block = ptr.add(index)` is
        .                               // always aligned with a `usize` so it's safe to dereference
        .                               // both `block` and `block.offset(1)`.
        .                               unsafe {
        .                                   let block = ptr.add(index) as *const usize;
        .                                   // break if there is a nonascii byte
   36,769 ( 0.00%)                          let zu = contains_nonascii(*block);
        .                                   let zv = contains_nonascii(*block.offset(1));
   73,538 ( 0.00%)                          if zu || zv {
        .                                       break;
        .                                   }
        .                               }
   73,534 ( 0.00%)                      index += ascii_block_size;
        .                           }
        .                           // step from the point where the wordwise loop stopped
1,155,078 ( 0.01%)                  while index < len && v[index] < 128 {
  243,296 ( 0.00%)                      index += 1;
        .                           }
        .                       } else {
  310,737 ( 0.00%)                  index += 1;
        .                       }
        .                   }
        .               }
        .           
        .               Ok(())
        .           }
        .           
        .           // https://tools.ietf.org/html/rfc3629
-- line 245 ----------------------------------------
-- line 263 ----------------------------------------
        .               4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // F
        .           ];
        .           
        .           /// Given a first byte, determines how many bytes are in this UTF-8 character.
        .           #[unstable(feature = "str_internals", issue = "none")]
        .           #[must_use]
        .           #[inline]
        .           pub const fn utf8_char_width(b: u8) -> usize {
       48 ( 0.00%)      UTF8_CHAR_WIDTH[b as usize] as usize
        .           }
        .           
        .           /// Mask of the value bits of a continuation byte.
        .           const CONT_MASK: u8 = 0b0011_1111;
        .           
        .           // truncate `&str` to length at most equal to `max`
        .           // return `true` if it were truncated, and the new str.
        .           pub(super) fn truncate_to_char_boundary(s: &str, mut max: usize) -> (bool, &str) {
-- line 279 ----------------------------------------

7,177,786 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/validations.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                  

-- line 70 ----------------------------------------
         .           
         .                   impl<'a, T> $name<'a, T> {
         .                       // Helper function for creating a slice from the iterator.
         .                       #[inline(always)]
         .                       fn make_slice(&self) -> &'a [T] {
         .                           // SAFETY: the iterator was created from a slice with pointer
         .                           // `self.ptr` and length `len!(self)`. This guarantees that all
         .                           // the prerequisites for `from_raw_parts` are fulfilled.
 1,543,578 ( 0.02%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
         .                       }
         .           
         .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
         .                       // returning the old start.
         .                       // Unsafe because the offset must not exceed `self.len()`.
         .                       #[inline(always)]
         .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
         .                           if mem::size_of::<T>() == 0 {
         .                               zst_shrink!(self, offset);
         .                               self.ptr.as_ptr()
         .                           } else {
 2,868,918 ( 0.03%)                      let old = self.ptr.as_ptr();
         .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
         .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
 5,349,093 ( 0.06%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
   478,153 ( 0.01%)                      old
         .                           }
   956,306 ( 0.01%)              }
         .           
         .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
         .                       // returning the new end.
         .                       // Unsafe because the offset must not exceed `self.len()`.
         .                       #[inline(always)]
         .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
         .                           if mem::size_of::<T>() == 0 {
         .                               zst_shrink!(self, offset);
         .                               self.ptr.as_ptr()
         .                           } else {
         .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
         .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
         .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
   106,829 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
    29,432 ( 0.00%)                      self.end
         .                           }
    29,432 ( 0.00%)              }
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   impl<T> ExactSizeIterator for $name<'_, T> {
         .                       #[inline(always)]
         .                       fn len(&self) -> usize {
 3,914,104 ( 0.04%)                  len!(self)
   377,934 ( 0.00%)              }
         .           
         .                       #[inline(always)]
         .                       fn is_empty(&self) -> bool {
         .                           is_empty!(self)
         .                       }
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   impl<'a, T> Iterator for $name<'a, T> {
         .                       type Item = $elem;
         .           
         .                       #[inline]
 1,545,459 ( 0.02%)              fn next(&mut self) -> Option<$elem> {
         .                           // could be implemented with slices, but this avoids bounds checks
         .           
         .                           // SAFETY: `assume` calls are safe since a slice's start pointer
         .                           // must be non-null, and slices over non-ZSTs must also have a
         .                           // non-null end pointer. The call to `next_unchecked!` is safe
         .                           // since we check if the iterator is empty first.
         .                           unsafe {
 2,607,368 ( 0.03%)                      assume(!self.ptr.as_ptr().is_null());
 2,575,765 ( 0.03%)                      if mem::size_of::<T>() != 0 {
 1,562,443 ( 0.02%)                          assume(!self.end.is_null());
         .                               }
80,941,050 ( 0.90%)                      if is_empty!(self) {
    37,000 ( 0.00%)                          None
         .                               } else {
   956,375 ( 0.01%)                          Some(next_unchecked!(self))
         .                               }
         .                           }
 1,545,459 ( 0.02%)              }
         .           
         .                       #[inline]
        30 ( 0.00%)              fn size_hint(&self) -> (usize, Option<usize>) {
 2,768,390 ( 0.03%)                  let exact = len!(self);
        54 ( 0.00%)                  (exact, Some(exact))
        12 ( 0.00%)              }
         .           
         .                       #[inline]
         .                       fn count(self) -> usize {
         .                           len!(self)
         .                       }
         .           
         .                       #[inline]
         .                       fn nth(&mut self, n: usize) -> Option<$elem> {
    33,898 ( 0.00%)                  if n >= len!(self) {
         .                               // This iterator is now empty.
         .                               if mem::size_of::<T>() == 0 {
         .                                   // We have to do it this way as `ptr` may never be 0, but `end`
         .                                   // could be (due to wrapping).
         .                                   self.end = self.ptr.as_ptr();
         .                               } else {
         .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
         .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
         .                       // faster to compile.
         .                       #[inline]
         .                       fn for_each<F>(mut self, mut f: F)
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item),
         .                       {
         .                           while let Some(x) = self.next() {
    12,084 ( 0.00%)                      f(x);
         .                           }
         .                       }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
     1,848 ( 0.00%)              fn all<F>(&mut self, mut f: F) -> bool
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> bool,
         .                       {
    16,679 ( 0.00%)                  while let Some(x) = self.next() {
    47,876 ( 0.00%)                      if !f(x) {
       114 ( 0.00%)                          return false;
         .                               }
         .                           }
       252 ( 0.00%)                  true
     1,944 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
     5,980 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> bool,
         .                       {
   950,753 ( 0.01%)                  while let Some(x) = self.next() {
 1,273,010 ( 0.01%)                      if f(x) {
         9 ( 0.00%)                          return true;
         .                               }
         .                           }
         6 ( 0.00%)                  false
     5,988 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
    21,224 ( 0.00%)              fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
         .                       where
         .                           Self: Sized,
         .                           P: FnMut(&Self::Item) -> bool,
         .                       {
   277,714 ( 0.00%)                  while let Some(x) = self.next() {
   192,156 ( 0.00%)                      if predicate(&x) {
       130 ( 0.00%)                          return Some(x);
         .                               }
         .                           }
     3,544 ( 0.00%)                  None
    18,046 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
       636 ( 0.00%)              fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> Option<B>,
         .                       {
    50,814 ( 0.00%)                  while let Some(x) = self.next() {
   350,585 ( 0.00%)                      if let Some(y) = f(x) {
    40,673 ( 0.00%)                          return Some(y);
         .                               }
       360 ( 0.00%)                  }
        39 ( 0.00%)                  None
    13,485 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile. Also, the `assume` avoids a bounds check.
         .                       #[inline]
         .                       #[rustc_inherit_overflow_checks]
    26,884 ( 0.00%)              fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
         .                           Self: Sized,
         .                           P: FnMut(Self::Item) -> bool,
         .                       {
   168,025 ( 0.00%)                  let n = len!(self);
     6,721 ( 0.00%)                  let mut i = 0;
   629,962 ( 0.01%)                  while let Some(x) = self.next() {
   676,281 ( 0.01%)                      if predicate(x) {
         .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
         .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
       374 ( 0.00%)                          unsafe { assume(i < n) };
     1,122 ( 0.00%)                          return Some(i);
         .                               }
   313,464 ( 0.00%)                      i += 1;
         .                           }
     6,347 ( 0.00%)                  None
    27,258 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile. Also, the `assume` avoids a bounds check.
         .                       #[inline]
         .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
         .                           P: FnMut(Self::Item) -> bool,
         .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
         .                       {
         .                           let n = len!(self);
         .                           let mut i = n;
    99,370 ( 0.00%)                  while let Some(x) = self.next_back() {
 1,317,922 ( 0.01%)                      i -= 1;
 1,077,284 ( 0.01%)                      if predicate(x) {
         .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
         .                                   // and is only decreasing.
         .                                   unsafe { assume(i < n) };
         .                                   return Some(i);
         .                               }
         .                           }
         .                           None
         .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
         .                           // the returned references is guaranteed to refer to an element
         .                           // of the slice and thus guaranteed to be valid.
         .                           //
         .                           // Also note that the caller also guarantees that we're never
         .                           // called with the same index again, and that no other methods
         .                           // that will access this subslice are called, so it is valid
         .                           // for the returned reference to be mutable in the case of
         .                           // `IterMut`
   109,121 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
         .                       }
         .           
         .                       $($extra)*
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
         .                       #[inline]
    45,603 ( 0.00%)              fn next_back(&mut self) -> Option<$elem> {
         .                           // could be implemented with slices, but this avoids bounds checks
         .           
         .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
         .                           // and slices over non-ZSTs must also have a non-null end pointer.
         .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
         .                           // empty first.
         .                           unsafe {
    65,548 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
    76,005 ( 0.00%)                      if mem::size_of::<T>() != 0 {
    35,179 ( 0.00%)                          assume(!self.end.is_null());
         .                               }
 2,615,922 ( 0.03%)                      if is_empty!(self) {
       485 ( 0.00%)                          None
         .                               } else {
    29,432 ( 0.00%)                          Some(next_back_unchecked!(self))
         .                               }
         .                           }
    45,603 ( 0.00%)              }
         .           
         .                       #[inline]
         .                       fn nth_back(&mut self, n: usize) -> Option<$elem> {
         .                           if n >= len!(self) {
         .                               // This iterator is now empty.
         .                               self.end = self.ptr.as_ptr();
         .                               return None;
         .                           }
-- line 375 ----------------------------------------

21,821,109 ( 0.24%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/string.rs
--------------------------------------------------------------------------------
Ir                 

-- line 283 ----------------------------------------
        .           /// Here, there's no need to allocate more memory inside the loop.
        .           ///
        .           /// [str]: prim@str "str"
        .           /// [`str`]: prim@str "str"
        .           /// [`&str`]: prim@str "&str"
        .           /// [Deref]: core::ops::Deref "ops::Deref"
        .           /// [`Deref`]: core::ops::Deref "ops::Deref"
        .           /// [`as_str()`]: String::as_str
   25,896 ( 0.00%)  #[derive(PartialOrd, Eq, Ord)]
        .           #[cfg_attr(not(test), rustc_diagnostic_item = "String")]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           pub struct String {
   38,844 ( 0.00%)      vec: Vec<u8>,
        .           }
        .           
        .           /// A possible error value when converting a `String` from a UTF-8 byte vector.
        .           ///
        .           /// This type is the error type for the [`from_utf8`] method on [`String`]. It
        .           /// is designed in such a way to carefully avoid reallocations: the
        .           /// [`into_bytes`] method will give back the byte vector that was used in the
        .           /// conversion attempt.
-- line 303 ----------------------------------------
-- line 374 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let s = String::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_string_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
   34,608 ( 0.00%)      pub const fn new() -> String {
  123,366 ( 0.00%)          String { vec: Vec::new() }
   23,072 ( 0.00%)      }
        .           
        .               /// Creates a new empty `String` with a particular capacity.
        .               ///
        .               /// `String`s have an internal buffer to hold their data. The capacity is
        .               /// the length of that buffer, and can be queried with the [`capacity`]
        .               /// method. This method creates an empty `String`, but one with an initial
        .               /// buffer that can hold `capacity` bytes. This is useful when you may be
        .               /// appending a bunch of data to the `String`, reducing the number of
-- line 392 ----------------------------------------
-- line 420 ----------------------------------------
        .               /// // ...but this may make the string reallocate
        .               /// s.push('a');
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub fn with_capacity(capacity: usize) -> String {
  149,136 ( 0.00%)          String { vec: Vec::with_capacity(capacity) }
        .               }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Since we don't
        .               // require this method for testing purposes, I'll just stub it
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[inline]
        .               #[cfg(test)]
-- line 436 ----------------------------------------
-- line 492 ----------------------------------------
        .               ///
        .               /// [`from_utf8_unchecked`]: String::from_utf8_unchecked
        .               /// [`Vec<u8>`]: crate::vec::Vec "Vec"
        .               /// [`&str`]: prim@str "&str"
        .               /// [`into_bytes`]: String::into_bytes
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn from_utf8(vec: Vec<u8>) -> Result<String, FromUtf8Error> {
   71,535 ( 0.00%)          match str::from_utf8(&vec) {
        .                       Ok(..) => Ok(String { vec }),
   14,262 ( 0.00%)              Err(e) => Err(FromUtf8Error { bytes: vec, error: e }),
        .                   }
        .               }
        .           
        .               /// Converts a slice of bytes to a string, including invalid characters.
        .               ///
        .               /// Strings are made of bytes ([`u8`]), and a slice of bytes
        .               /// ([`&[u8]`][byteslice]) is made of bytes, so this function converts
        .               /// between the two. Not all byte slices are valid strings, however: strings
-- line 510 ----------------------------------------
-- line 550 ----------------------------------------
        .               /// let input = b"Hello \xF0\x90\x80World";
        .               /// let output = String::from_utf8_lossy(input);
        .               ///
        .               /// assert_eq!("Hello �World", output);
        .               /// ```
        .               #[must_use]
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
  153,333 ( 0.00%)      pub fn from_utf8_lossy(v: &[u8]) -> Cow<'_, str> {
  170,370 ( 0.00%)          let mut iter = lossy::Utf8Lossy::from_bytes(v).chunks();
        .           
   85,185 ( 0.00%)          let first_valid = if let Some(chunk) = iter.next() {
        .                       let lossy::Utf8LossyChunk { valid, broken } = chunk;
   17,037 ( 0.00%)              if broken.is_empty() {
        .                           debug_assert_eq!(valid.len(), v.len());
   17,037 ( 0.00%)                  return Cow::Borrowed(valid);
        .                       }
        .                       valid
        .                   } else {
        .                       return Cow::Borrowed("");
        .                   };
        .           
        .                   const REPLACEMENT: &str = "\u{FFFD}";
        .           
-- line 573 ----------------------------------------
-- line 578 ----------------------------------------
        .                   for lossy::Utf8LossyChunk { valid, broken } in iter {
        .                       res.push_str(valid);
        .                       if !broken.is_empty() {
        .                           res.push_str(REPLACEMENT);
        .                       }
        .                   }
        .           
        .                   Cow::Owned(res)
  136,296 ( 0.00%)      }
        .           
        .               /// Decode a UTF-16–encoded vector `v` into a `String`, returning [`Err`]
        .               /// if `v` contains any invalid data.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
        .               ///
-- line 594 ----------------------------------------
-- line 761 ----------------------------------------
        .               ///     String::from_utf8_unchecked(sparkle_heart)
        .               /// };
        .               ///
        .               /// assert_eq!("💖", sparkle_heart);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
   15,050 ( 0.00%)      pub unsafe fn from_utf8_unchecked(bytes: Vec<u8>) -> String {
   97,272 ( 0.00%)          String { vec: bytes }
   15,050 ( 0.00%)      }
        .           
        .               /// Converts a `String` into a byte vector.
        .               ///
        .               /// This consumes the `String`, so we do not need to copy its contents.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
-- line 779 ----------------------------------------
-- line 800 ----------------------------------------
        .               /// ```
        .               /// let s = String::from("foo");
        .               ///
        .               /// assert_eq!("foo", s.as_str());
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "string_as_str", since = "1.7.0")]
      414 ( 0.00%)      pub fn as_str(&self) -> &str {
      621 ( 0.00%)          self
      414 ( 0.00%)      }
        .           
        .               /// Converts a `String` into a mutable string slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
        .               ///
        .               /// ```
-- line 818 ----------------------------------------
-- line 841 ----------------------------------------
        .               ///
        .               /// s.push_str("bar");
        .               ///
        .               /// assert_eq!("foobar", s);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    4,375 ( 0.00%)      pub fn push_str(&mut self, string: &str) {
    5,420 ( 0.00%)          self.vec.extend_from_slice(string.as_bytes())
    1,250 ( 0.00%)      }
        .           
        .               /// Copies elements from `src` range to the end of the string.
        .               ///
        .               /// ## Panics
        .               ///
        .               /// Panics if the starting point or end point do not lie on a [`char`]
        .               /// boundary, or if they're out of bounds.
        .               ///
-- line 859 ----------------------------------------
-- line 946 ----------------------------------------
        .               /// s.reserve(8);
        .               ///
        .               /// // ... doesn't actually increase.
        .               /// assert_eq!(10, s.capacity());
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    2,469 ( 0.00%)      pub fn reserve(&mut self, additional: usize) {
      823 ( 0.00%)          self.vec.reserve(additional)
    1,646 ( 0.00%)      }
        .           
        .               /// Ensures that this `String`'s capacity is `additional` bytes
        .               /// larger than its length.
        .               ///
        .               /// Consider using the [`reserve`] method unless you absolutely know
        .               /// better than the allocator.
        .               ///
        .               /// [`reserve`]: String::reserve
-- line 964 ----------------------------------------
-- line 1138 ----------------------------------------
        .               /// s.push('2');
        .               /// s.push('3');
        .               ///
        .               /// assert_eq!("abc123", s);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
5,935,750 ( 0.07%)      pub fn push(&mut self, ch: char) {
1,010,528 ( 0.01%)          match ch.len_utf8() {
1,010,488 ( 0.01%)              1 => self.vec.push(ch as u8),
      149 ( 0.00%)              _ => self.vec.extend_from_slice(ch.encode_utf8(&mut [0; 4]).as_bytes()),
        .                   }
3,767,509 ( 0.04%)      }
        .           
        .               /// Returns a byte slice of this `String`'s contents.
        .               ///
        .               /// The inverse of this method is [`from_utf8`].
        .               ///
        .               /// [`from_utf8`]: String::from_utf8
        .               ///
        .               /// # Examples
-- line 1159 ----------------------------------------
-- line 1163 ----------------------------------------
        .               /// ```
        .               /// let s = String::from("hello");
        .               ///
        .               /// assert_eq!(&[104, 101, 108, 108, 111], s.as_bytes());
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
       78 ( 0.00%)      pub fn as_bytes(&self) -> &[u8] {
      117 ( 0.00%)          &self.vec
       78 ( 0.00%)      }
        .           
        .               /// Shortens this `String` to the specified length.
        .               ///
        .               /// If `new_len` is greater than the string's current length, this has no
        .               /// effect.
        .               ///
        .               /// Note that this method has no effect on the allocated capacity
        .               /// of the string
-- line 1181 ----------------------------------------
-- line 1193 ----------------------------------------
        .               ///
        .               /// s.truncate(2);
        .               ///
        .               /// assert_eq!("he", s);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn truncate(&mut self, new_len: usize) {
       38 ( 0.00%)          if new_len <= self.len() {
       38 ( 0.00%)              assert!(self.is_char_boundary(new_len));
        .                       self.vec.truncate(new_len)
        .                   }
        .               }
        .           
        .               /// Removes the last character from the string buffer and returns it.
        .               ///
        .               /// Returns [`None`] if this `String` is empty.
        .               ///
-- line 1210 ----------------------------------------
-- line 1378 ----------------------------------------
        .               {
        .                   struct SetLenOnDrop<'a> {
        .                       s: &'a mut String,
        .                       idx: usize,
        .                       del_bytes: usize,
        .                   }
        .           
        .                   impl<'a> Drop for SetLenOnDrop<'a> {
        1 ( 0.00%)              fn drop(&mut self) {
        3 ( 0.00%)                  let new_len = self.idx - self.del_bytes;
        .                           debug_assert!(new_len <= self.s.len());
        1 ( 0.00%)                  unsafe { self.s.vec.set_len(new_len) };
        2 ( 0.00%)              }
        .                   }
        .           
        .                   let len = self.len();
        3 ( 0.00%)          let mut guard = SetLenOnDrop { s: self, idx: 0, del_bytes: 0 };
        .           
       27 ( 0.00%)          while guard.idx < len {
        .                       let ch = unsafe { guard.s.get_unchecked(guard.idx..len).chars().next().unwrap() };
        .                       let ch_len = ch.len_utf8();
        .           
       13 ( 0.00%)              if !f(ch) {
       15 ( 0.00%)                  guard.del_bytes += ch_len;
       20 ( 0.00%)              } else if guard.del_bytes > 0 {
        .                           unsafe {
        .                               ptr::copy(
        .                                   guard.s.vec.as_ptr().add(guard.idx),
       18 ( 0.00%)                          guard.s.vec.as_mut_ptr().add(guard.idx - guard.del_bytes),
        .                                   ch_len,
        .                               );
        .                           }
        .                       }
        .           
        .                       // Point idx to the next char
       39 ( 0.00%)              guard.idx += ch_len;
        .                   }
        .           
        7 ( 0.00%)          drop(guard);
        .               }
        .           
        .               /// Inserts a character into this `String` at a byte position.
        .               ///
        .               /// This is an *O*(*n*) operation as it requires copying every element in the
        .               /// buffer.
        .               ///
        .               /// # Panics
-- line 1424 ----------------------------------------
-- line 1542 ----------------------------------------
        .               ///
        .               /// let fancy_f = String::from("ƒoo");
        .               /// assert_eq!(fancy_f.len(), 4);
        .               /// assert_eq!(fancy_f.chars().count(), 3);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
  600,384 ( 0.01%)      pub fn len(&self) -> usize {
  602,792 ( 0.01%)          self.vec.len()
  600,384 ( 0.01%)      }
        .           
        .               /// Returns `true` if this `String` has a length of zero, and `false` otherwise.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
        .               ///
        .               /// ```
-- line 1560 ----------------------------------------
-- line 1563 ----------------------------------------
        .               ///
        .               /// v.push('a');
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn is_empty(&self) -> bool {
   81,853 ( 0.00%)          self.len() == 0
        .               }
        .           
        .               /// Splits the string into two at the given byte index.
        .               ///
        .               /// Returns a newly allocated `String`. `self` contains bytes `[0, at)`, and
        .               /// the returned `String` contains bytes `[at, len)`. `at` must be on the
        .               /// boundary of a UTF-8 code point.
        .               ///
-- line 1579 ----------------------------------------
-- line 1747 ----------------------------------------
        .               /// let s = String::from("hello");
        .               ///
        .               /// let b = s.into_boxed_str();
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "box_str", since = "1.4.0")]
        .               #[must_use = "`self` will be dropped if the result is not used"]
        .               #[inline]
       36 ( 0.00%)      pub fn into_boxed_str(self) -> Box<str> {
      432 ( 0.00%)          let slice = self.vec.into_boxed_slice();
      108 ( 0.00%)          unsafe { from_boxed_utf8_unchecked(slice) }
       72 ( 0.00%)      }
        .           }
        .           
        .           impl FromUtf8Error {
        .               /// Returns a slice of [`u8`]s bytes that were attempted to convert to a `String`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
-- line 1766 ----------------------------------------
-- line 1845 ----------------------------------------
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   fmt::Display::fmt("invalid utf-16: lone surrogate found", f)
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl Clone for String {
  103,698 ( 0.00%)      fn clone(&self) -> Self {
   51,849 ( 0.00%)          String { vec: self.vec.clone() }
  120,981 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   self.vec.clone_from(&source.vec);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl FromIterator<char> for String {
    6,318 ( 0.00%)      fn from_iter<I: IntoIterator<Item = char>>(iter: I) -> String {
    3,292 ( 0.00%)          let mut buf = String::new();
   16,460 ( 0.00%)          buf.extend(iter);
        .                   buf
    4,130 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "string_from_iter_by_ref", since = "1.17.0")]
        .           impl<'a> FromIterator<&'a char> for String {
        .               fn from_iter<I: IntoIterator<Item = &'a char>>(iter: I) -> String {
        .                   let mut buf = String::new();
        .                   buf.extend(iter);
-- line 1877 ----------------------------------------
-- line 1936 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl Extend<char> for String {
    2,469 ( 0.00%)      fn extend<I: IntoIterator<Item = char>>(&mut self, iter: I) {
  406,419 ( 0.00%)          let iterator = iter.into_iter();
  401,988 ( 0.00%)          let (lower_bound, _) = iterator.size_hint();
    1,646 ( 0.00%)          self.reserve(lower_bound);
  372,570 ( 0.00%)          iterator.for_each(move |c| self.push(c));
    2,469 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, c: char) {
        .                   self.push(c);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
-- line 1957 ----------------------------------------
-- line 2067 ----------------------------------------
        .               fn strip_suffix_of(self, haystack: &'a str) -> Option<&'a str> {
        .                   self[..].strip_suffix_of(haystack)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl PartialEq for String {
        .               #[inline]
   14,504 ( 0.00%)      fn eq(&self, other: &String) -> bool {
   36,260 ( 0.00%)          PartialEq::eq(&self[..], &other[..])
   14,504 ( 0.00%)      }
        .               #[inline]
        .               fn ne(&self, other: &String) -> bool {
        .                   PartialEq::ne(&self[..], &other[..])
        .               }
        .           }
        .           
        .           macro_rules! impl_eq {
        .               ($lhs:ty, $rhs: ty) => {
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[allow(unused_lifetimes)]
        .                   impl<'a, 'b> PartialEq<$rhs> for $lhs {
        .                       #[inline]
    6,728 ( 0.00%)              fn eq(&self, other: &$rhs) -> bool {
   20,184 ( 0.00%)                  PartialEq::eq(&self[..], &other[..])
    6,728 ( 0.00%)              }
        .                       #[inline]
        .                       fn ne(&self, other: &$rhs) -> bool {
        .                           PartialEq::ne(&self[..], &other[..])
        .                       }
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[allow(unused_lifetimes)]
-- line 2100 ----------------------------------------
-- line 2128 ----------------------------------------
        .               fn default() -> String {
        .                   String::new()
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl fmt::Display for String {
        .               #[inline]
   12,864 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   20,286 ( 0.00%)          fmt::Display::fmt(&**self, f)
    7,656 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl fmt::Debug for String {
        .               #[inline]
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   fmt::Debug::fmt(&**self, f)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl hash::Hash for String {
        .               #[inline]
       64 ( 0.00%)      fn hash<H: hash::Hasher>(&self, hasher: &mut H) {
    3,640 ( 0.00%)          (**self).hash(hasher)
       32 ( 0.00%)      }
        .           }
        .           
        .           /// Implements the `+` operator for concatenating two strings.
        .           ///
        .           /// This consumes the `String` on the left-hand side and re-uses its buffer (growing it if
        .           /// necessary). This is done to avoid allocating a new `String` and copying the entire contents on
        .           /// every operation, which would lead to *O*(*n*^2) running time when building an *n*-byte string by
        .           /// repeated concatenation.
-- line 2162 ----------------------------------------
-- line 2194 ----------------------------------------
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl Add<&str> for String {
        .               type Output = String;
        .           
        .               #[inline]
        .               fn add(mut self, other: &str) -> String {
        .                   self.push_str(other);
       10 ( 0.00%)          self
        .               }
        .           }
        .           
        .           /// Implements the `+=` operator for appending to a `String`.
        .           ///
        .           /// This has the same behavior as the [`push_str`][String::push_str] method.
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "stringaddassign", since = "1.12.0")]
        .           impl AddAssign<&str> for String {
        .               #[inline]
      752 ( 0.00%)      fn add_assign(&mut self, other: &str) {
      188 ( 0.00%)          self.push_str(other);
      376 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl ops::Index<ops::Range<usize>> for String {
        .               type Output = str;
        .           
        .               #[inline]
        .               fn index(&self, index: ops::Range<usize>) -> &str {
-- line 2223 ----------------------------------------
-- line 2233 ----------------------------------------
        .                   &self[..][index]
        .               }
        .           }
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl ops::Index<ops::RangeFrom<usize>> for String {
        .               type Output = str;
        .           
        .               #[inline]
    6,994 ( 0.00%)      fn index(&self, index: ops::RangeFrom<usize>) -> &str {
    1,308 ( 0.00%)          &self[..][index]
    5,686 ( 0.00%)      }
        .           }
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl ops::Index<ops::RangeFull> for String {
        .               type Output = str;
        .           
        .               #[inline]
   38,466 ( 0.00%)      fn index(&self, _index: ops::RangeFull) -> &str {
  115,398 ( 0.00%)          unsafe { str::from_utf8_unchecked(&self.vec) }
   38,466 ( 0.00%)      }
        .           }
        .           #[stable(feature = "inclusive_range", since = "1.26.0")]
        .           impl ops::Index<ops::RangeInclusive<usize>> for String {
        .               type Output = str;
        .           
        .               #[inline]
        .               fn index(&self, index: ops::RangeInclusive<usize>) -> &str {
        .                   Index::index(&**self, index)
-- line 2260 ----------------------------------------
-- line 2313 ----------------------------------------
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl ops::Deref for String {
        .               type Target = str;
        .           
        .               #[inline]
   42,172 ( 0.00%)      fn deref(&self) -> &str {
  126,516 ( 0.00%)          unsafe { str::from_utf8_unchecked(&self.vec) }
   42,172 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "derefmut_for_string", since = "1.3.0")]
        .           impl ops::DerefMut for String {
        .               #[inline]
        .               fn deref_mut(&mut self) -> &mut str {
        .                   unsafe { str::from_utf8_unchecked_mut(&mut *self.vec) }
        .               }
-- line 2331 ----------------------------------------
-- line 2386 ----------------------------------------
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: fmt::Display + ?Sized> ToString for T {
        .               // A common guideline is to not inline generic functions. However,
        .               // removing `#[inline]` from this method causes non-negligible regressions.
        .               // See <https://github.com/rust-lang/rust/pull/74852>, the last attempt
        .               // to try to remove it.
        .               #[inline]
      930 ( 0.00%)      default fn to_string(&self) -> String {
      155 ( 0.00%)          let mut buf = String::new();
   87,818 ( 0.00%)          let mut formatter = core::fmt::Formatter::new(&mut buf);
        .                   // Bypass format_args!() to avoid write_str with zero-length strs
   32,940 ( 0.00%)          fmt::Display::fmt(self, &mut formatter)
        .                       .expect("a Display implementation returned an error unexpectedly");
        .                   buf
      310 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "char_to_string_specialization", since = "1.46.0")]
        .           impl ToString for char {
        .               #[inline]
        .               fn to_string(&self) -> String {
        .                   String::from(self.encode_utf8(&mut [0; 4]))
-- line 2409 ----------------------------------------
-- line 2494 ----------------------------------------
        .               fn as_mut(&mut self) -> &mut str {
        .                   self
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl AsRef<[u8]> for String {
        .               #[inline]
       18 ( 0.00%)      fn as_ref(&self) -> &[u8] {
       27 ( 0.00%)          self.as_bytes()
       18 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl From<&str> for String {
        .               /// Converts a `&str` into a [`String`].
        .               ///
        .               /// The result is allocated on the heap.
        .               #[inline]
   28,520 ( 0.00%)      fn from(s: &str) -> String {
    5,704 ( 0.00%)          s.to_owned()
   11,408 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "from_mut_str_for_string", since = "1.44.0")]
        .           impl From<&mut str> for String {
        .               /// Converts a `&mut str` into a [`String`].
        .               ///
        .               /// The result is allocated on the heap.
-- line 2524 ----------------------------------------
-- line 2553 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let s1: String = String::from("hello world");
        .               /// let s2: Box<str> = s1.into_boxed_str();
        .               /// let s3: String = String::from(s2);
        .               ///
        .               /// assert_eq!("hello world", s3)
        .               /// ```
        9 ( 0.00%)      fn from(s: Box<str>) -> String {
        .                   s.into_string()
        9 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "box_from_str", since = "1.20.0")]
        .           impl From<String> for Box<str> {
        .               /// Converts the given [`String`] to a boxed `str` slice that is owned.
        .               ///
        .               /// # Examples
-- line 2571 ----------------------------------------
-- line 2620 ----------------------------------------
        .               /// ```
        .               /// # use std::borrow::Cow;
        .               /// assert_eq!(Cow::from("eggplant"), Cow::Borrowed("eggplant"));
        .               /// ```
        .               ///
        .               /// [`Borrowed`]: crate::borrow::Cow::Borrowed "borrow::Cow::Borrowed"
        .               #[inline]
        .               fn from(s: &'a str) -> Cow<'a, str> {
   58,128 ( 0.00%)          Cow::Borrowed(s)
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a> From<String> for Cow<'a, str> {
        .               /// Converts a [`String`] into an [`Owned`] variant.
        .               /// No heap allocation is performed, and the string
-- line 2636 ----------------------------------------
-- line 2643 ----------------------------------------
        .               /// let s = "eggplant".to_string();
        .               /// let s2 = "eggplant".to_string();
        .               /// assert_eq!(Cow::from(s), Cow::<'static, str>::Owned(s2));
        .               /// ```
        .               ///
        .               /// [`Owned`]: crate::borrow::Cow::Owned "borrow::Cow::Owned"
        .               #[inline]
        .               fn from(s: String) -> Cow<'a, str> {
   13,250 ( 0.00%)          Cow::Owned(s)
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "cow_from_string_ref", since = "1.28.0")]
        .           impl<'a> From<&'a String> for Cow<'a, str> {
        .               /// Converts a [`String`] reference into a [`Borrowed`] variant.
        .               /// No heap allocation is performed, and the string
-- line 2659 ----------------------------------------
-- line 2709 ----------------------------------------
        .               /// ```
        .               /// let s1 = String::from("hello world");
        .               /// let v1 = Vec::from(s1);
        .               ///
        .               /// for b in v1 {
        .               ///     println!("{}", b);
        .               /// }
        .               /// ```
       68 ( 0.00%)      fn from(string: String) -> Vec<u8> {
      272 ( 0.00%)          string.into_bytes()
       68 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl fmt::Write for String {
        .               #[inline]
  309,820 ( 0.00%)      fn write_str(&mut self, s: &str) -> fmt::Result {
      155 ( 0.00%)          self.push_str(s);
      155 ( 0.00%)          Ok(())
  271,325 ( 0.00%)      }
        .           
        .               #[inline]
   29,412 ( 0.00%)      fn write_char(&mut self, c: char) -> fmt::Result {
        4 ( 0.00%)          self.push(c);
        .                   Ok(())
   29,412 ( 0.00%)      }
        .           }
        .           
        .           /// A draining iterator for `String`.
        .           ///
        .           /// This struct is created by the [`drain`] method on [`String`]. See its
        .           /// documentation for more.
        .           ///
        .           /// [`drain`]: String::drain
-- line 2743 ----------------------------------------

1,425,967 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/string.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs
--------------------------------------------------------------------------------
Ir                 

-- line 10 ----------------------------------------
        .           pub fn move_path_children_matching<'tcx, F>(
        .               move_data: &MoveData<'tcx>,
        .               path: MovePathIndex,
        .               mut cond: F,
        .           ) -> Option<MovePathIndex>
        .           where
        .               F: FnMut(mir::PlaceElem<'tcx>) -> bool,
        .           {
      693 ( 0.00%)      let mut next_child = move_data.move_paths[path].first_child;
    2,278 ( 0.00%)      while let Some(child_index) = next_child {
        .                   let move_path_children = &move_data.move_paths[child_index];
    1,862 ( 0.00%)          if let Some(&elem) = move_path_children.place.projection.last() {
    2,871 ( 0.00%)              if cond(elem) {
        .                           return Some(child_index);
        .                       }
        .                   }
        .                   next_child = move_path_children.next_sibling;
        .               }
        .           
        .               None
        .           }
-- line 30 ----------------------------------------
-- line 48 ----------------------------------------
        .           //
        .           // FIXME: we have to do something for moving slice patterns.
        .           fn place_contents_drop_state_cannot_differ<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               place: mir::Place<'tcx>,
        .           ) -> bool {
        .               let ty = place.ty(body, tcx).ty;
1,969,572 ( 0.02%)      match ty.kind() {
        .                   ty::Array(..) => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} => false",
        .                           place, ty
        .                       );
        .                       false
        .                   }
        .                   ty::Slice(..) | ty::Ref(..) | ty::RawPtr(..) => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} refd => true",
        .                           place, ty
        .                       );
        .                       true
        .                   }
1,228,329 ( 0.01%)          ty::Adt(def, _) if (def.has_dtor(tcx) && !def.is_box()) || def.is_union() => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} Drop => true",
        .                           place, ty
        .                       );
        .                       true
        .                   }
        .                   _ => false,
        .               }
-- line 79 ----------------------------------------
-- line 83 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               lookup_result: LookupResult,
        .               each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
   53,916 ( 0.00%)      match lookup_result {
        .                   LookupResult::Parent(..) => {
        .                       // access to untracked value - do not touch children
        .                   }
        .                   LookupResult::Exact(e) => on_all_children_bits(tcx, body, move_data, e, each_child),
        .               }
        .           }
        .           
        .           pub fn on_all_children_bits<'tcx, F>(
-- line 99 ----------------------------------------
-- line 100 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               move_path_index: MovePathIndex,
        .               mut each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
3,083,632 ( 0.03%)      fn is_terminal_path<'tcx>(
        .                   tcx: TyCtxt<'tcx>,
        .                   body: &Body<'tcx>,
        .                   move_data: &MoveData<'tcx>,
        .                   path: MovePathIndex,
        .               ) -> bool {
  770,908 ( 0.01%)          place_contents_drop_state_cannot_differ(tcx, body, move_data.move_paths[path].place)
3,083,632 ( 0.03%)      }
        .           
3,522,474 ( 0.04%)      fn on_all_children_bits<'tcx, F>(
        .                   tcx: TyCtxt<'tcx>,
        .                   body: &Body<'tcx>,
        .                   move_data: &MoveData<'tcx>,
        .                   move_path_index: MovePathIndex,
        .                   each_child: &mut F,
        .               ) where
        .                   F: FnMut(MovePathIndex),
        .               {
  117,798 ( 0.00%)          each_child(move_path_index);
        .           
2,701,577 ( 0.03%)          if is_terminal_path(tcx, body, move_data, move_path_index) {
        .                       return;
        .                   }
        .           
  201,331 ( 0.00%)          let mut next_child_index = move_data.move_paths[move_path_index].first_child;
  463,132 ( 0.01%)          while let Some(child_index) = next_child_index {
   85,680 ( 0.00%)              on_all_children_bits(tcx, body, move_data, child_index, each_child);
   14,280 ( 0.00%)              next_child_index = move_data.move_paths[child_index].next_sibling;
        .                   }
2,986,298 ( 0.03%)      }
2,215,781 ( 0.02%)      on_all_children_bits(tcx, body, move_data, move_path_index, &mut each_child);
        .           }
        .           
        .           pub fn on_all_drop_children_bits<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               path: MovePathIndex,
        .               mut each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
   62,769 ( 0.00%)      on_all_children_bits(tcx, body, &ctxt.move_data, path, |child| {
   34,912 ( 0.00%)          let place = &ctxt.move_data.move_paths[path].place;
    8,728 ( 0.00%)          let ty = place.ty(body, tcx).ty;
        .                   debug!("on_all_drop_children_bits({:?}, {:?} : {:?})", path, place, ty);
        .           
    2,252 ( 0.00%)          let erased_ty = tcx.erase_regions(ty);
   53,761 ( 0.00%)          if erased_ty.needs_drop(tcx, ctxt.param_env) {
    8,714 ( 0.00%)              each_child(child);
        .                   } else {
        .                       debug!("on_all_drop_children_bits - skipping")
        .                   }
        .               })
        .           }
        .           
   94,291 ( 0.00%)  pub fn drop_flag_effects_for_function_entry<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex, DropFlagState),
        .           {
        .               let move_data = &ctxt.move_data;
    8,442 ( 0.00%)      for arg in body.args_iter() {
   17,676 ( 0.00%)          let place = mir::Place::from(arg);
   26,514 ( 0.00%)          let lookup_result = move_data.rev_lookup.find(place.as_ref());
        .                   on_lookup_result_bits(tcx, body, move_data, lookup_result, |mpi| {
    9,182 ( 0.00%)              callback(mpi, DropFlagState::Present)
        .                   });
        .               }
   67,536 ( 0.00%)  }
        .           
4,189,902 ( 0.05%)  pub fn drop_flag_effects_for_location<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               loc: Location,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex, DropFlagState),
        .           {
        .               let move_data = &ctxt.move_data;
        .               debug!("drop_flag_effects_for_location({:?})", loc);
        .           
        .               // first, move out of the RHS
  169,718 ( 0.00%)      for mi in &move_data.loc_map[loc] {
  849,371 ( 0.01%)          let path = mi.move_path_index(move_data);
        .                   debug!("moving out of path {:?}", move_data.move_paths[path]);
        .           
  227,710 ( 0.00%)          on_all_children_bits(tcx, body, move_data, path, |mpi| callback(mpi, DropFlagState::Absent))
        .               }
        .           
        .               debug!("drop_flag_effects: assignment for location({:?})", loc);
        .           
  118,165 ( 0.00%)      for_location_inits(tcx, body, move_data, loc, |mpi| callback(mpi, DropFlagState::Present));
3,271,776 ( 0.04%)  }
        .           
        .           pub fn for_location_inits<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               loc: Location,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
  169,718 ( 0.00%)      for ii in &move_data.init_loc_map[loc] {
  550,868 ( 0.01%)          let init = move_data.inits[*ii];
  318,488 ( 0.00%)          match init.kind {
        .                       InitKind::Deep => {
        .                           let path = init.path;
        .           
        .                           on_all_children_bits(tcx, body, move_data, path, &mut callback)
        .                       }
        .                       InitKind::Shallow => {
        .                           let mpi = init.path;
        .                           callback(mpi);
-- line 226 ----------------------------------------
-- line 230 ----------------------------------------
        .               }
        .           }
        .           
        .           /// Calls `handle_inactive_variant` for each descendant move path of `enum_place` that contains a
        .           /// `Downcast` to a variant besides the `active_variant`.
        .           ///
        .           /// NOTE: If there are no move paths corresponding to an inactive variant,
        .           /// `handle_inactive_variant` will not be called for that variant.
   37,584 ( 0.00%)  pub(crate) fn on_all_inactive_variants<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &mir::Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               enum_place: mir::Place<'tcx>,
        .               active_variant: VariantIdx,
        .               mut handle_inactive_variant: impl FnMut(MovePathIndex),
        .           ) {
   15,660 ( 0.00%)      let enum_mpi = match move_data.rev_lookup.find(enum_place.as_ref()) {
        .                   LookupResult::Exact(mpi) => mpi,
        .                   LookupResult::Parent(_) => return,
        .               };
        .           
        .               let enum_path = &move_data.move_paths[enum_mpi];
    8,080 ( 0.00%)      for (variant_mpi, variant_path) in enum_path.children(&move_data.move_paths) {
        .                   // Because of the way we build the `MoveData` tree, each child should have exactly one more
        .                   // projection than `enum_place`. This additional projection must be a downcast since the
        .                   // base is an enum.
    1,490 ( 0.00%)          let (downcast, base_proj) = variant_path.place.projection.split_last().unwrap();
    5,960 ( 0.00%)          assert_eq!(enum_place.projection.len(), base_proj.len());
        .           
    4,470 ( 0.00%)          let variant_idx = match *downcast {
        .                       mir::ProjectionElem::Downcast(_, idx) => idx,
        .                       _ => unreachable!(),
        .                   };
        .           
    1,490 ( 0.00%)          if variant_idx != active_variant {
        .                       on_all_children_bits(tcx, body, move_data, variant_mpi, |mpi| {
    1,884 ( 0.00%)                  handle_inactive_variant(mpi)
        .                       });
        .                   }
        .               }
   25,056 ( 0.00%)  }

2,635,952 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir                 

-- line 27 ----------------------------------------
        .           impl CacheEntry {
        .               #[inline]
        .               fn update(
        .                   &mut self,
        .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
        .                   pos: BytePos,
        .                   time_stamp: usize,
        .               ) {
   12,692 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
    7,264 ( 0.00%)              self.file = file;
   10,259 ( 0.00%)              self.file_index = file_idx;
        .                   }
        .           
    5,752 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
        .                   let line_bounds = self.file.line_bounds(line_index);
   23,186 ( 0.00%)          self.line_number = line_index + 1;
   34,941 ( 0.00%)          self.line = line_bounds;
        .                   self.touch(time_stamp);
        .               }
        .           
        .               #[inline]
        .               fn touch(&mut self, time_stamp: usize) {
  304,352 ( 0.00%)          self.time_stamp = time_stamp;
        .               }
        .           }
        .           
        .           #[derive(Clone)]
        .           pub struct CachingSourceMapView<'sm> {
        .               source_map: &'sm SourceMap,
        .               line_cache: [CacheEntry; 3],
        .               time_stamp: usize,
        .           }
        .           
        .           impl<'sm> CachingSourceMapView<'sm> {
    9,154 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
        .                   let files = source_map.files();
    4,577 ( 0.00%)          let first_file = files[0].clone();
        .                   let entry = CacheEntry {
        .                       time_stamp: 0,
        .                       line_number: 0,
        .                       line: BytePos(0)..BytePos(0),
        .                       file: first_file,
        .                       file_index: 0,
        .                   };
        .           
   22,885 ( 0.00%)          CachingSourceMapView {
        .                       source_map,
   32,039 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
        .                       time_stamp: 0,
        .                   }
   18,308 ( 0.00%)      }
        .           
        .               pub fn byte_pos_to_line_and_col(
        .                   &mut self,
        .                   pos: BytePos,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
        .                   self.time_stamp += 1;
        .           
        .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
        .                   };
        .           
        .                   let cache_entry = &mut self.line_cache[oldest];
        .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
        .           
        .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
        .               }
        .           
1,102,766 ( 0.01%)      pub fn span_data_to_lines_and_cols(
        .                   &mut self,
        .                   span_data: &SpanData,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
  630,152 ( 0.01%)          self.time_stamp += 1;
        .           
        .                   // Check if lo and hi are in the cached lines.
  157,538 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
  157,538 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
        .           
  294,956 ( 0.00%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
        .                       // Cache hit for span lo and hi. Check if they belong to the same file.
        .                       let result = {
  294,288 ( 0.00%)                  let lo = &self.line_cache[lo_cache_idx as usize];
        .                           let hi = &self.line_cache[hi_cache_idx as usize];
        .           
  882,864 ( 0.01%)                  if lo.file_index != hi.file_index {
        .                               return None;
        .                           }
        .           
        .                           (
  294,182 ( 0.00%)                      lo.file.clone(),
        .                               lo.line_number,
        .                               span_data.lo - lo.line.start,
  147,091 ( 0.00%)                      hi.line_number,
        .                               span_data.hi - hi.line.start,
        .                           )
        .                       };
        .           
  147,091 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
  147,091 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
        .           
  588,364 ( 0.01%)              return Some(result);
        .                   }
        .           
        .                   // No cache hit or cache hit for only one of span lo and hi.
   20,120 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
        .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
        .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
        .                   } else {
        .                       self.oldest_cache_entry_index()
        .                   };
        .           
        .                   // If the entry doesn't point to the correct file, get the new file and index.
        .                   // Return early if the file containing beginning of span doesn't contain end of span.
   80,920 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
   22,710 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
   27,252 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
      124 ( 0.00%)                  return None;
        .                       }
        .           
   17,672 ( 0.00%)              Some(new_file_and_idx)
        .                   } else {
        .                       let file = &self.line_cache[oldest].file;
   17,556 ( 0.00%)              if !file_contains(&file, span_data.hi) {
        .                           return None;
        .                       }
        .           
   17,256 ( 0.00%)              None
        .                   };
        .           
        .                   // Update the cache entries.
   50,850 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, -1) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
        .           
   26,397 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
        .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
        .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
        .                               let hi = &mut self.line_cache[next_oldest];
        .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
        .                               (oldest, next_oldest)
        .                           } else {
        .                               (oldest, oldest)
        .                           }
        .                       }
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, _) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
      220 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
      330 ( 0.00%)                  hi.touch(self.time_stamp);
        .                           (oldest, hi_cache_idx as usize)
        .                       }
        .                       // Oldest cache entry is for span_data.hi line.
        .                       (_, -1) => {
        .                           let hi = &mut self.line_cache[oldest];
    1,261 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
    2,522 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
    5,044 ( 0.00%)                  lo.touch(self.time_stamp);
        .                           (lo_cache_idx as usize, oldest)
        .                       }
        .                       _ => {
        .                           panic!();
        .                       }
        .                   };
        .           
        .                   let lo = &self.line_cache[lo_idx];
        .                   let hi = &self.line_cache[hi_idx];
        .           
        .                   // Span lo and hi may equal line end when last line doesn't
        .                   // end in newline, hence the inclusive upper bounds below.
   20,340 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
   10,170 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
   20,340 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
   10,170 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
   50,850 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
   30,510 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
   30,510 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
        .           
   30,510 ( 0.00%)          Some((
   10,170 ( 0.00%)              lo.file.clone(),
        .                       lo.line_number,
        .                       span_data.lo - lo.line.start,
   10,170 ( 0.00%)              hi.line_number,
        .                       span_data.hi - hi.line.start,
        .                   ))
1,417,842 ( 0.02%)      }
        .           
        .               fn cache_entry_index(&self, pos: BytePos) -> isize {
        .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
1,206,282 ( 0.01%)              if cache_entry.line.contains(&pos) {
        .                           return idx as isize;
        .                       }
        .                   }
        .           
        .                   -1
        .               }
        .           
        .               fn oldest_cache_entry_index(&self) -> usize {
        .                   let mut oldest = 0;
        .           
        .                   for idx in 1..self.line_cache.len() {
   52,794 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
        .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
        .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
        .           
        .                   for idx in 0..self.line_cache.len() {
   17,256 ( 0.00%)              if idx != avoid_idx
    9,855 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
        .                       {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
   22,710 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
    4,542 ( 0.00%)          if !self.source_map.files().is_empty() {
    9,084 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
        .                       let file = &self.source_map.files()[file_idx];
        .           
   36,336 ( 0.00%)              if file_contains(file, pos) {
        .                           return Some((file.clone(), file_idx));
        .                       }
        .                   }
        .           
        .                   None
   22,710 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
        .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
        .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
        .               // purposes of converting a byte position to a line and column number, we can't come up with a
        .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

1,821,286 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir                 

-- line 5 ----------------------------------------
        .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
        .           unsafe impl GlobalAlloc for System {
        .               #[inline]
        .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
        .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
        .                   // So only rely on MIN_ALIGN if size >= align.
        .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
        .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
8,149,986 ( 0.09%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
6,112,488 ( 0.07%)              libc::malloc(layout.size()) as *mut u8
        .                   } else {
        .                       #[cfg(target_os = "macos")]
        .                       {
        .                           if layout.align() > (1 << 31) {
        .                               return ptr::null_mut();
        .                           }
        .                       }
        .                       aligned_malloc(&layout)
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
        .                   // See the comment above in `alloc` for why this check looks the way it does.
  483,280 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
  724,920 ( 0.01%)              libc::calloc(layout.size(), 1) as *mut u8
        .                   } else {
        .                       let ptr = self.alloc(layout);
        .                       if !ptr.is_null() {
        .                           ptr::write_bytes(ptr, 0, layout.size());
        .                       }
        .                       ptr
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
2,158,305 ( 0.02%)          libc::free(ptr as *mut libc::c_void)
        .               }
        .           
        .               #[inline]
        .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
  814,148 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
1,628,296 ( 0.02%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
        .                   } else {
        .                       realloc_fallback(self, ptr, layout, new_size)
        .                   }
        .               }
        .           }
        .           
        .           cfg_if::cfg_if! {
        .               if #[cfg(any(
-- line 56 ----------------------------------------
-- line 84 ----------------------------------------
        .               } else if #[cfg(target_os = "wasi")] {
        .                   #[inline]
        .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
        .                       libc::aligned_alloc(layout.align(), layout.size()) as *mut u8
        .                   }
        .               } else {
        .                   #[inline]
        .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
        1 ( 0.00%)              let mut out = ptr::null_mut();
        .                       // posix_memalign requires that the alignment be a multiple of `sizeof(void*)`.
        .                       // Since these are all powers of 2, we can just use max.
        .                       let align = layout.align().max(crate::mem::size_of::<usize>());
        2 ( 0.00%)              let ret = libc::posix_memalign(&mut out, align, layout.size());
        2 ( 0.00%)              if ret != 0 { ptr::null_mut() } else { out as *mut u8 }
        .                   }
        .               }
        .           }

        1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs
--------------------------------------------------------------------------------
Ir                 

-- line 120 ----------------------------------------
        .           }
        .           
        .           /// Loads a u64 using up to 7 bytes of a byte slice. It looks clumsy but the
        .           /// `copy_nonoverlapping` calls that occur (via `load_int_le!`) all have fixed
        .           /// sizes and avoid calling `memcpy`, which is good for speed.
        .           ///
        .           /// Unsafe because: unchecked indexing at start..start+len
        .           #[inline]
      324 ( 0.00%)  unsafe fn u8to64_le(buf: &[u8], start: usize, len: usize) -> u64 {
        .               debug_assert!(len < 8);
       36 ( 0.00%)      let mut i = 0; // current byte index (from LSB) in the output u64
       36 ( 0.00%)      let mut out = 0;
1,221,460 ( 0.01%)      if i + 3 < len {
        .                   // SAFETY: `i` cannot be greater than `len`, and the caller must guarantee
        .                   // that the index start..start+len is in bounds.
       72 ( 0.00%)          out = unsafe { load_int_le!(buf, start + i, u32) } as u64;
       28 ( 0.00%)          i += 4;
        .               }
2,536,519 ( 0.03%)      if i + 1 < len {
        .                   // SAFETY: same as above.
1,268,293 ( 0.01%)          out |= (unsafe { load_int_le!(buf, start + i, u16) } as u64) << (i * 8);
  633,878 ( 0.01%)          i += 2
        .               }
1,413,644 ( 0.02%)      if i < len {
        .                   // SAFETY: same as above.
2,074,151 ( 0.02%)          out |= (unsafe { *buf.get_unchecked(start + i) } as u64) << (i * 8);
      256 ( 0.00%)          i += 1;
        .               }
        .               debug_assert_eq!(i, len);
        .               out
      108 ( 0.00%)  }
        .           
        .           impl SipHasher {
        .               /// Creates a new `SipHasher` with the two initial keys set to 0.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_deprecated(
        .                   since = "1.13.0",
        .                   reason = "use `std::collections::hash_map::DefaultHasher` instead"
-- line 158 ----------------------------------------
-- line 189 ----------------------------------------
        .           
        .               /// Creates a `SipHasher13` that is keyed off the provided keys.
        .               #[inline]
        .               #[unstable(feature = "hashmap_internals", issue = "none")]
        .               #[rustc_deprecated(
        .                   since = "1.13.0",
        .                   reason = "use `std::collections::hash_map::DefaultHasher` instead"
        .               )]
      100 ( 0.00%)      pub fn new_with_keys(key0: u64, key1: u64) -> SipHasher13 {
  242,841 ( 0.00%)          SipHasher13 { hasher: Hasher::new_with_keys(key0, key1) }
       40 ( 0.00%)      }
        .           }
        .           
        .           impl<S: Sip> Hasher<S> {
        .               #[inline]
      120 ( 0.00%)      fn new_with_keys(key0: u64, key1: u64) -> Hasher<S> {
      269 ( 0.00%)          let mut state = Hasher {
        .                       k0: key0,
        .                       k1: key1,
        .                       length: 0,
       80 ( 0.00%)              state: State { v0: 0, v1: 0, v2: 0, v3: 0 },
        .                       tail: 0,
        .                       ntail: 0,
        .                       _marker: PhantomData,
        .                   };
       20 ( 0.00%)          state.reset();
        .                   state
       40 ( 0.00%)      }
        .           
        .               #[inline]
       40 ( 0.00%)      fn reset(&mut self) {
       20 ( 0.00%)          self.length = 0;
  364,137 ( 0.00%)          self.state.v0 = self.k0 ^ 0x736f6d6570736575;
  387,610 ( 0.00%)          self.state.v1 = self.k1 ^ 0x646f72616e646f6d;
       60 ( 0.00%)          self.state.v2 = self.k0 ^ 0x6c7967656e657261;
       60 ( 0.00%)          self.state.v3 = self.k1 ^ 0x7465646279746573;
       20 ( 0.00%)          self.ntail = 0;
       40 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl super::Hasher for SipHasher {
        .               #[inline]
        .               fn write(&mut self, msg: &[u8]) {
        .                   self.0.hasher.write(msg)
        .               }
-- line 234 ----------------------------------------
-- line 237 ----------------------------------------
        .               fn finish(&self) -> u64 {
        .                   self.0.hasher.finish()
        .               }
        .           }
        .           
        .           #[unstable(feature = "hashmap_internals", issue = "none")]
        .           impl super::Hasher for SipHasher13 {
        .               #[inline]
      144 ( 0.00%)      fn write(&mut self, msg: &[u8]) {
       36 ( 0.00%)          self.hasher.write(msg)
       72 ( 0.00%)      }
        .           
        .               #[inline]
       40 ( 0.00%)      fn finish(&self) -> u64 {
       40 ( 0.00%)          self.hasher.finish()
       40 ( 0.00%)      }
        .           }
        .           
        .           impl<S: Sip> super::Hasher for Hasher<S> {
        .               // Note: no integer hashing methods (`write_u*`, `write_i*`) are defined
        .               // for this type. We could add them, copy the `short_write` implementation
        .               // in librustc_data_structures/sip128.rs, and add `write_u*`/`write_i*`
        .               // methods to `SipHasher`, `SipHasher13`, and `DefaultHasher`. This would
        .               // greatly speed up integer hashing by those hashers, at the cost of
        .               // slightly slowing down compile speeds on some benchmarks. See #69152 for
        .               // details.
        .               #[inline]
      252 ( 0.00%)      fn write(&mut self, msg: &[u8]) {
       36 ( 0.00%)          let length = msg.len();
1,560,756 ( 0.02%)          self.length += length;
        .           
       36 ( 0.00%)          let mut needed = 0;
        .           
1,537,164 ( 0.02%)          if self.ntail != 0 {
  781,963 ( 0.01%)              needed = 8 - self.ntail;
        .                       // SAFETY: `cmp::min(length, needed)` is guaranteed to not be over `length`
3,909,642 ( 0.04%)              self.tail |= unsafe { u8to64_le(msg, 0, cmp::min(length, needed)) } << (8 * self.ntail);
  781,874 ( 0.01%)              if length < needed {
  538,596 ( 0.01%)                  self.ntail += length;
        .                           return;
        .                       } else {
  121,671 ( 0.00%)                  self.state.v3 ^= self.tail;
        .                           S::c_rounds(&mut self.state);
  243,342 ( 0.00%)                  self.state.v0 ^= self.tail;
  121,671 ( 0.00%)                  self.ntail = 0;
        .                       }
        .                   }
        .           
        .                   // Buffered tail is now flushed, process new input.
  439,367 ( 0.00%)          let len = length - needed;
  439,318 ( 0.00%)          let left = len & 0x7; // len % 8
        .           
       40 ( 0.00%)          let mut i = needed;
  659,541 ( 0.01%)          while i < len - left {
        .                       // SAFETY: because `len - left` is the biggest multiple of 8 under
        .                       // `len`, and because `i` starts at `needed` where `len` is `length - needed`,
        .                       // `i + 8` is guaranteed to be less than or equal to `length`.
      176 ( 0.00%)              let mi = unsafe { load_int_le!(msg, i, u64) };
        .           
      184 ( 0.00%)              self.state.v3 ^= mi;
       22 ( 0.00%)              S::c_rounds(&mut self.state);
      184 ( 0.00%)              self.state.v0 ^= mi;
        .           
      401 ( 0.00%)              i += 8;
        .                   }
        .           
        .                   // SAFETY: `i` is now `needed + len.div_euclid(8) * 8`,
        .                   // so `i + left` = `needed + len` = `length`, which is by
        .                   // definition equal to `msg.len()`.
  462,820 ( 0.01%)          self.tail = unsafe { u8to64_le(msg, i, left) };
       20 ( 0.00%)          self.ntail = left;
      108 ( 0.00%)      }
        .           
        .               #[inline]
       60 ( 0.00%)      fn finish(&self) -> u64 {
  121,522 ( 0.00%)          let mut state = self.state;
        .           
  606,950 ( 0.01%)          let b: u64 = ((self.length as u64 & 0xff) << 56) | self.tail;
        .           
  121,402 ( 0.00%)          state.v3 ^= b;
       40 ( 0.00%)          S::c_rounds(&mut state);
  121,402 ( 0.00%)          state.v0 ^= b;
        .           
  121,422 ( 0.00%)          state.v2 ^= 0xff;
       40 ( 0.00%)          S::d_rounds(&mut state);
        .           
  242,804 ( 0.00%)          state.v0 ^ state.v1 ^ state.v2 ^ state.v3
       40 ( 0.00%)      }
        .           }
        .           
        .           impl<S: Sip> Clone for Hasher<S> {
        .               #[inline]
        .               fn clone(&self) -> Hasher<S> {
        .                   Hasher {
        .                       k0: self.k0,
        .                       k1: self.k1,
-- line 332 ----------------------------------------
-- line 353 ----------------------------------------
        .               fn d_rounds(_: &mut State);
        .           }
        .           
        .           #[derive(Debug, Clone, Default)]
        .           struct Sip13Rounds;
        .           
        .           impl Sip for Sip13Rounds {
        .               #[inline]
       93 ( 0.00%)      fn c_rounds(state: &mut State) {
1,583,107 ( 0.02%)          compress!(state);
       62 ( 0.00%)      }
        .           
        .               #[inline]
       60 ( 0.00%)      fn d_rounds(state: &mut State) {
  486,568 ( 0.01%)          compress!(state);
  486,568 ( 0.01%)          compress!(state);
  365,206 ( 0.00%)          compress!(state);
       40 ( 0.00%)      }
        .           }
        .           
        .           #[derive(Debug, Clone, Default)]
        .           struct Sip24Rounds;
        .           
        .           impl Sip for Sip24Rounds {
        .               #[inline]
        .               fn c_rounds(state: &mut State) {
-- line 378 ----------------------------------------

3,642,267 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter.rs
--------------------------------------------------------------------------------
Ir                 

-- line 15 ----------------------------------------
        .           
        .           use super::{from_raw_parts, from_raw_parts_mut};
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T> IntoIterator for &'a [T] {
        .               type Item = &'a T;
        .               type IntoIter = Iter<'a, T>;
        .           
      210 ( 0.00%)      fn into_iter(self) -> Iter<'a, T> {
      210 ( 0.00%)          self.iter()
      140 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T> IntoIterator for &'a mut [T] {
        .               type Item = &'a mut T;
        .               type IntoIter = IterMut<'a, T>;
        .           
      636 ( 0.00%)      fn into_iter(self) -> IterMut<'a, T> {
      636 ( 0.00%)          self.iter_mut()
      424 ( 0.00%)      }
        .           }
        .           
        .           // Macro helper functions
        .           #[inline(always)]
        .           fn size_from_ptr<T>(_: *const T) -> usize {
        .               mem::size_of::<T>()
    6,721 ( 0.00%)  }
        .           
        .           /// Immutable slice iterator
        .           ///
        .           /// This struct is created by the [`iter`] method on [slices].
        .           ///
        .           /// # Examples
        .           ///
        .           /// Basic usage:
-- line 50 ----------------------------------------
-- line 79 ----------------------------------------
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<T: Sync> Sync for Iter<'_, T> {}
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<T: Sync> Send for Iter<'_, T> {}
        .           
        .           impl<'a, T> Iter<'a, T> {
        .               #[inline]
1,354,284 ( 0.02%)      pub(super) fn new(slice: &'a [T]) -> Self {
1,015,713 ( 0.01%)          let ptr = slice.as_ptr();
        .                   // SAFETY: Similar to `IterMut::new`.
        .                   unsafe {
  338,571 ( 0.00%)              assume(!ptr.is_null());
        .           
1,692,855 ( 0.02%)              let end = if mem::size_of::<T>() == 0 {
        .                           (ptr as *const u8).wrapping_add(slice.len()) as *const T
        .                       } else {
  338,571 ( 0.00%)                  ptr.add(slice.len())
        .                       };
        .           
2,487,657 ( 0.03%)              Self { ptr: NonNull::new_unchecked(ptr as *mut T), end, _marker: PhantomData }
        .                   }
1,354,284 ( 0.02%)      }
        .           
        .               /// Views the underlying data as a subslice of the original data.
        .               ///
        .               /// This has the same lifetime as the original slice, and so the
        .               /// iterator can continue to be used while this exists.
        .               ///
        .               /// # Examples
        .               ///
-- line 109 ----------------------------------------
-- line 121 ----------------------------------------
        .               ///
        .               /// // Next, we move to the second element of the slice:
        .               /// iter.next();
        .               /// // Now `as_slice` returns "[2, 3]":
        .               /// println!("{:?}", iter.as_slice());
        .               /// ```
        .               #[must_use]
        .               #[stable(feature = "iter_to_slice", since = "1.4.0")]
    9,604 ( 0.00%)      pub fn as_slice(&self) -> &'a [T] {
  492,835 ( 0.01%)          self.make_slice()
    4,802 ( 0.00%)      }
        .           }
        .           
        .           iterator! {struct Iter -> *const T, &'a T, const, {/* no mut */}, {
        .               fn is_sorted_by<F>(self, mut compare: F) -> bool
        .               where
        .                   Self: Sized,
        .                   F: FnMut(&Self::Item, &Self::Item) -> Option<Ordering>,
        .               {
-- line 139 ----------------------------------------
-- line 141 ----------------------------------------
        .                       compare(&&w[0], &&w[1]).map(|o| o != Ordering::Greater).unwrap_or(false)
        .                   })
        .               }
        .           }}
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> Clone for Iter<'_, T> {
        .               fn clone(&self) -> Self {
   43,933 ( 0.00%)          Iter { ptr: self.ptr, end: self.end, _marker: self._marker }
        .               }
        .           }
        .           
        .           #[stable(feature = "slice_iter_as_ref", since = "1.13.0")]
        .           impl<T> AsRef<[T]> for Iter<'_, T> {
        .               fn as_ref(&self) -> &[T] {
        .                   self.as_slice()
        .               }
-- line 157 ----------------------------------------
-- line 199 ----------------------------------------
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<T: Sync> Sync for IterMut<'_, T> {}
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<T: Send> Send for IterMut<'_, T> {}
        .           
        .           impl<'a, T> IterMut<'a, T> {
        .               #[inline]
    6,592 ( 0.00%)      pub(super) fn new(slice: &'a mut [T]) -> Self {
    4,944 ( 0.00%)          let ptr = slice.as_mut_ptr();
        .                   // SAFETY: There are several things here:
        .                   //
        .                   // `ptr` has been obtained by `slice.as_ptr()` where `slice` is a valid
        .                   // reference thus it is non-NUL and safe to use and pass to
        .                   // `NonNull::new_unchecked` .
        .                   //
        .                   // Adding `slice.len()` to the starting pointer gives a pointer
        .                   // at the end of `slice`. `end` will never be dereferenced, only checked
-- line 216 ----------------------------------------
-- line 218 ----------------------------------------
        .                   // done.
        .                   //
        .                   // In the case of a ZST, the end pointer is just the start pointer plus
        .                   // the length, to also allows for the fast `ptr == end` check.
        .                   //
        .                   // See the `next_unchecked!` and `is_empty!` macros as well as the
        .                   // `post_inc_start` method for more information.
        .                   unsafe {
    1,648 ( 0.00%)              assume(!ptr.is_null());
        .           
    8,240 ( 0.00%)              let end = if mem::size_of::<T>() == 0 {
        .                           (ptr as *mut u8).wrapping_add(slice.len()) as *mut T
        .                       } else {
    1,648 ( 0.00%)                  ptr.add(slice.len())
        .                       };
        .           
   22,989 ( 0.00%)              Self { ptr: NonNull::new_unchecked(ptr), end, _marker: PhantomData }
        .                   }
    6,592 ( 0.00%)      }
        .           
        .               /// Views the underlying data as a subslice of the original data.
        .               ///
        .               /// To avoid creating `&mut` references that alias, this is forced
        .               /// to consume the iterator.
        .               ///
        .               /// # Examples
        .               ///
-- line 244 ----------------------------------------
-- line 1711 ----------------------------------------
        .               v: &'a [T],
        .               rem: &'a [T],
        .               chunk_size: usize,
        .           }
        .           
        .           impl<'a, T> ChunksExact<'a, T> {
        .               #[inline]
        .               pub(super) fn new(slice: &'a [T], chunk_size: usize) -> Self {
       12 ( 0.00%)          let rem = slice.len() % chunk_size;
       18 ( 0.00%)          let fst_len = slice.len() - rem;
        .                   // SAFETY: 0 <= fst_len <= slice.len() by construction above
        .                   let (fst, snd) = unsafe { slice.split_at_unchecked(fst_len) };
        .                   Self { v: fst, rem: snd, chunk_size }
        .               }
        .           
        .               /// Returns the remainder of the original slice that is not going to be
        .               /// returned by the iterator. The returned slice has at most `chunk_size-1`
        .               /// elements.
-- line 1728 ----------------------------------------
-- line 1742 ----------------------------------------
        .           }
        .           
        .           #[stable(feature = "chunks_exact", since = "1.31.0")]
        .           impl<'a, T> Iterator for ChunksExact<'a, T> {
        .               type Item = &'a [T];
        .           
        .               #[inline]
        .               fn next(&mut self) -> Option<&'a [T]> {
    3,272 ( 0.00%)          if self.v.len() < self.chunk_size {
        .                       None
        .                   } else {
        .                       let (fst, snd) = self.v.split_at(self.chunk_size);
        .                       self.v = snd;
        .                       Some(fst)
        .                   }
        .               }
        .           
-- line 1758 ----------------------------------------
-- line 2024 ----------------------------------------
        .               num: usize,
        .               marker: PhantomData<&'a [T; N]>,
        .           }
        .           
        .           impl<'a, T: 'a, const N: usize> ArrayWindows<'a, T, N> {
        .               #[inline]
        .               pub(super) fn new(slice: &'a [T]) -> Self {
        .                   let num_windows = slice.len().saturating_sub(N - 1);
       11 ( 0.00%)          Self { slice_head: slice.as_ptr(), num: num_windows, marker: PhantomData }
        .               }
        .           }
        .           
        .           #[unstable(feature = "array_windows", issue = "75027")]
        .           impl<'a, T, const N: usize> Iterator for ArrayWindows<'a, T, N> {
        .               type Item = &'a [T; N];
        .           
        .               #[inline]
        .               fn next(&mut self) -> Option<Self::Item> {
   29,508 ( 0.00%)          if self.num == 0 {
        .                       return None;
        .                   }
        .                   // SAFETY:
        .                   // This is safe because it's indexing into a slice guaranteed to be length > N.
        .                   let ret = unsafe { &*self.slice_head.cast::<[T; N]>() };
        .                   // SAFETY: Guaranteed that there are at least 1 item remaining otherwise
        .                   // earlier branch would've been hit
        .                   self.slice_head = unsafe { self.slice_head.add(1) };
-- line 2050 ----------------------------------------

3,530,550 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 118 ----------------------------------------
         .               /// let a = [1, 2, 3];
         .               /// assert_eq!(a.len(), 3);
         .               /// ```
         .               #[lang = "slice_len_fn"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_len", since = "1.39.0")]
         .               #[inline]
         .               // SAFETY: const sound because we transmute out the length field as a usize (which it must be)
   164,946 ( 0.00%)      pub const fn len(&self) -> usize {
         .                   // FIXME: Replace with `crate::ptr::metadata(self)` when that is const-stable.
         .                   // As of this writing this causes a "Const-stable functions can only call other
         .                   // const-stable functions" error.
         .           
         .                   // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T
         .                   // and PtrComponents<T> have the same memory layouts. Only std can make this
         .                   // guarantee.
   164,946 ( 0.00%)          unsafe { crate::ptr::PtrRepr { const_ptr: self }.components.metadata }
   109,964 ( 0.00%)      }
         .           
         .               /// Returns `true` if the slice has a length of 0.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let a = [1, 2, 3];
         .               /// assert!(!a.is_empty());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
         .               #[inline]
       132 ( 0.00%)      pub const fn is_empty(&self) -> bool {
 1,406,921 ( 0.02%)          self.len() == 0
       176 ( 0.00%)      }
         .           
         .               /// Returns the first element of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
         .               /// assert_eq!(Some(&10), v.first());
-- line 158 ----------------------------------------
-- line 159 ----------------------------------------
         .               ///
         .               /// let w: &[i32] = &[];
         .               /// assert_eq!(None, w.first());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn first(&self) -> Option<&T> {
    17,371 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
         .               }
         .           
         .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
         .               ///     *first = 5;
         .               /// }
         .               /// assert_eq!(x, &[5, 1, 2]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
         .               #[inline]
         .               pub const fn first_mut(&mut self) -> Option<&mut T> {
     4,192 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
         .               }
         .           
         .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 237 ----------------------------------------
         .               ///     assert_eq!(last, &2);
         .               ///     assert_eq!(elements, &[0, 1]);
         .               /// }
         .               /// ```
         .               #[stable(feature = "slice_splits", since = "1.5.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
    50,947 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
         .               }
         .           
         .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
         .               ///
         .               /// let w: &[i32] = &[];
         .               /// assert_eq!(None, w.last());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn last(&self) -> Option<&T> {
   721,982 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
         .               }
         .           
         .               /// Returns a mutable pointer to the last item in the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 294 ----------------------------------------
         .               /// if let Some(last) = x.last_mut() {
         .               ///     *last = 10;
         .               /// }
         .               /// assert_eq!(x, &[0, 1, 10]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
         .               #[inline]
        30 ( 0.00%)      pub const fn last_mut(&mut self) -> Option<&mut T> {
 1,615,893 ( 0.02%)          if let [.., last] = self { Some(last) } else { None }
        18 ( 0.00%)      }
         .           
         .               /// Returns a reference to an element or subslice depending on the type of
         .               /// index.
         .               ///
         .               /// - If given a position, returns a reference to the element at that
         .               ///   position or `None` if out of bounds.
         .               /// - If given a range, returns the subslice corresponding to that range,
         .               ///   or `None` if out of bounds.
-- line 312 ----------------------------------------
-- line 317 ----------------------------------------
         .               /// let v = [10, 40, 30];
         .               /// assert_eq!(Some(&40), v.get(1));
         .               /// assert_eq!(Some(&[10, 40][..]), v.get(0..2));
         .               /// assert_eq!(None, v.get(3));
         .               /// assert_eq!(None, v.get(0..4));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
   136,425 ( 0.00%)      pub fn get<I>(&self, index: I) -> Option<&I::Output>
         .               where
         .                   I: SliceIndex<Self>,
         .               {
    37,015 ( 0.00%)          index.get(self)
    25,380 ( 0.00%)      }
         .           
         .               /// Returns a mutable reference to an element or subslice depending on the
         .               /// type of index (see [`get`]) or `None` if the index is out of bounds.
         .               ///
         .               /// [`get`]: slice::get
         .               ///
         .               /// # Examples
         .               ///
-- line 338 ----------------------------------------
-- line 372 ----------------------------------------
         .               /// let x = &[1, 2, 4];
         .               ///
         .               /// unsafe {
         .               ///     assert_eq!(x.get_unchecked(1), &2);
         .               /// }
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
   279,248 ( 0.00%)      pub unsafe fn get_unchecked<I>(&self, index: I) -> &I::Output
         .               where
         .                   I: SliceIndex<Self>,
         .               {
         .                   // SAFETY: the caller must uphold most of the safety requirements for `get_unchecked`;
         .                   // the slice is dereferenceable because `self` is a safe reference.
         .                   // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.
    82,666 ( 0.00%)          unsafe { &*index.get_unchecked(self) }
    69,812 ( 0.00%)      }
         .           
         .               /// Returns a mutable reference to an element or subslice, without doing
         .               /// bounds checking.
         .               ///
         .               /// For a safe alternative see [`get_mut`].
         .               ///
         .               /// # Safety
         .               ///
-- line 396 ----------------------------------------
-- line 408 ----------------------------------------
         .               /// unsafe {
         .               ///     let elem = x.get_unchecked_mut(1);
         .               ///     *elem = 13;
         .               /// }
         .               /// assert_eq!(x, &[1, 13, 4]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
   186,112 ( 0.00%)      pub unsafe fn get_unchecked_mut<I>(&mut self, index: I) -> &mut I::Output
         .               where
         .                   I: SliceIndex<Self>,
         .               {
         .                   // SAFETY: the caller must uphold the safety requirements for `get_unchecked_mut`;
         .                   // the slice is dereferenceable because `self` is a safe reference.
         .                   // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.
    56,777 ( 0.00%)          unsafe { &mut *index.get_unchecked_mut(self) }
    46,528 ( 0.00%)      }
         .           
         .               /// Returns a raw pointer to the slice's buffer.
         .               ///
         .               /// The caller must ensure that the slice outlives the pointer this
         .               /// function returns, or else it will end up pointing to garbage.
         .               ///
         .               /// The caller must also ensure that the memory the pointer (non-transitively) points to
         .               /// is never written to (except inside an `UnsafeCell`) using this pointer or any pointer
-- line 432 ----------------------------------------
-- line 447 ----------------------------------------
         .               ///     }
         .               /// }
         .               /// ```
         .               ///
         .               /// [`as_mut_ptr`]: slice::as_mut_ptr
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
         .               #[inline]
 1,826,492 ( 0.02%)      pub const fn as_ptr(&self) -> *const T {
 1,621,066 ( 0.02%)          self as *const [T] as *const T
   913,246 ( 0.01%)      }
         .           
         .               /// Returns an unsafe mutable pointer to the slice's buffer.
         .               ///
         .               /// The caller must ensure that the slice outlives the pointer this
         .               /// function returns, or else it will end up pointing to garbage.
         .               ///
         .               /// Modifying the container referenced by this slice may cause its buffer
         .               /// to be reallocated, which would also make any pointers to it invalid.
-- line 465 ----------------------------------------
-- line 475 ----------------------------------------
         .               ///         *x_ptr.add(i) += 2;
         .               ///     }
         .               /// }
         .               /// assert_eq!(x, &[3, 4, 6]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline]
   139,684 ( 0.00%)      pub const fn as_mut_ptr(&mut self) -> *mut T {
         6 ( 0.00%)          self as *mut [T] as *mut T
    69,842 ( 0.00%)      }
         .           
         .               /// Returns the two raw pointers spanning the slice.
         .               ///
         .               /// The returned range is half-open, which means that the end pointer
         .               /// points *one past* the last element of the slice. This way, an empty
         .               /// slice is represented by two equal pointers, and the difference between
         .               /// the two pointers represents the size of the slice.
         .               ///
-- line 493 ----------------------------------------
-- line 582 ----------------------------------------
         .               /// v.swap(2, 4);
         .               /// assert!(v == ["a", "b", "e", "d", "c"]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
         .               #[inline]
         .               #[track_caller]
         .               pub const fn swap(&mut self, a: usize, b: usize) {
    70,444 ( 0.00%)          let _ = &self[a];
   121,363 ( 0.00%)          let _ = &self[b];
         .           
         .                   // SAFETY: we just checked that both `a` and `b` are in bounds
         .                   unsafe { self.swap_unchecked(a, b) }
         .               }
         .           
         .               /// Swaps two elements in the slice, without doing bounds checking.
         .               ///
         .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 677 ----------------------------------------
         .           
         .                       // Because this function is first compiled in isolation,
         .                       // this check tells LLVM that the indexing below is
         .                       // in-bounds.  Then after inlining -- once the actual
         .                       // lengths of the slices are known -- it's removed.
         .                       let (a, b) = (&mut a[..n], &mut b[..n]);
         .           
         .                       for i in 0..n {
     8,354 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
         .                       }
         .                   }
         .               }
         .           
         .               /// Returns an iterator over the slice.
         .               ///
         .               /// # Examples
         .               ///
-- line 693 ----------------------------------------
-- line 697 ----------------------------------------
         .               ///
         .               /// assert_eq!(iterator.next(), Some(&1));
         .               /// assert_eq!(iterator.next(), Some(&2));
         .               /// assert_eq!(iterator.next(), Some(&4));
         .               /// assert_eq!(iterator.next(), None);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
 1,015,713 ( 0.01%)      pub fn iter(&self) -> Iter<'_, T> {
 1,015,713 ( 0.01%)          Iter::new(self)
   677,142 ( 0.01%)      }
         .           
         .               /// Returns an iterator that allows modifying each value.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [1, 2, 4];
         .               /// for elem in x.iter_mut() {
         .               ///     *elem += 2;
         .               /// }
         .               /// assert_eq!(x, &[3, 4, 6]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
     4,944 ( 0.00%)      pub fn iter_mut(&mut self) -> IterMut<'_, T> {
     4,944 ( 0.00%)          IterMut::new(self)
     3,296 ( 0.00%)      }
         .           
         .               /// Returns an iterator over all contiguous windows of length
         .               /// `size`. The windows overlap. If the slice is shorter than
         .               /// `size`, the iterator returns no values.
         .               ///
         .               /// # Panics
         .               ///
         .               /// Panics if `size` is 0.
-- line 732 ----------------------------------------
-- line 1499 ----------------------------------------
         .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
         .               ///     assert_eq!(right, []);
         .               /// }
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
         .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
       312 ( 0.00%)          assert!(mid <= self.len());
         .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
         .                   // fulfills the requirements of `from_raw_parts_mut`.
         .                   unsafe { self.split_at_unchecked(mid) }
         .               }
         .           
         .               /// Divides one mutable slice into two at an index.
         .               ///
         .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1529 ----------------------------------------
         .               /// assert_eq!(right, [3, 0, 5, 6]);
         .               /// left[1] = 2;
         .               /// right[1] = 4;
         .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
   123,060 ( 0.00%)      pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
   177,648 ( 0.00%)          assert!(mid <= self.len());
         .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
         .                   // fulfills the requirements of `from_raw_parts_mut`.
    24,612 ( 0.00%)          unsafe { self.split_at_mut_unchecked(mid) }
    24,612 ( 0.00%)      }
         .           
         .               /// Divides one slice into two at an index, without doing bounds checking.
         .               ///
         .               /// The first will contain all indices from `[0, mid)` (excluding
         .               /// the index `mid` itself) and the second will contain all
         .               /// indices from `[mid, len)` (excluding the index `len` itself).
         .               ///
         .               /// For a safe alternative see [`split_at`].
-- line 1550 ----------------------------------------
-- line 1620 ----------------------------------------
         .               ///     assert_eq!(right, [3, 0, 5, 6]);
         .               ///     left[1] = 2;
         .               ///     right[1] = 4;
         .               /// }
         .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
         .               /// ```
         .               #[unstable(feature = "slice_split_at_unchecked", reason = "new API", issue = "76014")]
         .               #[inline]
   159,978 ( 0.00%)      pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
    12,306 ( 0.00%)          let len = self.len();
    36,918 ( 0.00%)          let ptr = self.as_mut_ptr();
         .           
         .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
         .                   //
         .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
         .                   // is fine.
   208,137 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
    24,612 ( 0.00%)      }
         .           
         .               /// Divides one slice into an array and a remainder slice at an index.
         .               ///
         .               /// The array will contain all indices from `[0, N)` (excluding
         .               /// the index `N` itself) and the slice will contain all
         .               /// indices from `[N, len)` (excluding the index `len` itself).
         .               ///
         .               /// # Panics
-- line 1645 ----------------------------------------
-- line 2113 ----------------------------------------
         .               /// assert!(!v.iter().any(|e| e == "hi"));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               pub fn contains(&self, x: &T) -> bool
         .               where
         .                   T: PartialEq,
         .               {
     3,216 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
         .               }
         .           
         .               /// Returns `true` if `needle` is a prefix of the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2137 ----------------------------------------
         .               ///
         .               /// ```
         .               /// let v = &[10, 40, 30];
         .               /// assert!(v.starts_with(&[]));
         .               /// let v: &[u8] = &[];
         .               /// assert!(v.starts_with(&[]));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
   148,218 ( 0.00%)      pub fn starts_with(&self, needle: &[T]) -> bool
         .               where
         .                   T: PartialEq,
         .               {
    63,522 ( 0.00%)          let n = needle.len();
   416,024 ( 0.00%)          self.len() >= n && needle == &self[..n]
   105,870 ( 0.00%)      }
         .           
         .               /// Returns `true` if `needle` is a suffix of the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
         .               /// assert!(v.ends_with(&[30]));
-- line 2159 ----------------------------------------
-- line 2166 ----------------------------------------
         .               ///
         .               /// ```
         .               /// let v = &[10, 40, 30];
         .               /// assert!(v.ends_with(&[]));
         .               /// let v: &[u8] = &[];
         .               /// assert!(v.ends_with(&[]));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
        49 ( 0.00%)      pub fn ends_with(&self, needle: &[T]) -> bool
         .               where
         .                   T: PartialEq,
         .               {
        63 ( 0.00%)          let (m, n) = (self.len(), needle.len());
    40,460 ( 0.00%)          m >= n && needle == &self[m - n..]
        35 ( 0.00%)      }
         .           
         .               /// Returns a subslice with the prefix removed.
         .               ///
         .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
         .               /// If `prefix` is empty, simply returns the original slice.
         .               ///
         .               /// If the slice does not start with `prefix`, returns `None`.
         .               ///
-- line 2188 ----------------------------------------
-- line 2293 ----------------------------------------
         .               /// s.insert(idx, num);
         .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
         .               where
         .                   T: Ord,
         .               {
         3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
         .               }
         .           
         .               /// Binary searches this sorted slice with a comparator function.
         .               ///
         .               /// The comparator function should implement an order consistent
         .               /// with the sort order of the underlying slice, returning an
         .               /// order code that indicates whether its argument is `Less`,
         .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
         .               #[inline]
         .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
         .               where
         .                   F: FnMut(&'a T) -> Ordering,
         .               {
         .                   let mut size = self.len();
         .                   let mut left = 0;
         .                   let mut right = size;
 7,519,507 ( 0.08%)          while left < right {
10,809,632 ( 0.12%)              let mid = left + size / 2;
         .           
         .                       // SAFETY: the call is made safe by the following invariants:
         .                       // - `mid >= 0`
         .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
 1,575,830 ( 0.02%)              let cmp = f(unsafe { self.get_unchecked(mid) });
         .           
         .                       // The reason why we use if/else control flow rather than match
         .                       // is because match reorders comparison operations, which is perf sensitive.
         .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
 3,054,133 ( 0.03%)              if cmp == Less {
 3,674,907 ( 0.04%)                  left = mid + 1;
 2,028,265 ( 0.02%)              } else if cmp == Greater {
         .                           right = mid;
         .                       } else {
         .                           // SAFETY: same as the `get_unchecked` above
         .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
         .                           return Ok(mid);
         .                       }
         .           
 8,295,879 ( 0.09%)              size = right - left;
         .                   }
         .                   Err(left)
         .               }
         .           
         .               /// Binary searches this sorted slice with a key extraction function.
         .               ///
         .               /// Assumes that the slice is sorted by the key, for instance with
         .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3187 ----------------------------------------
         .               /// assert_eq!(slice, [4, 5, 3, 4, 5]);
         .               /// ```
         .               ///
         .               /// [`clone_from_slice`]: slice::clone_from_slice
         .               /// [`split_at_mut`]: slice::split_at_mut
         .               #[doc(alias = "memcpy")]
         .               #[stable(feature = "copy_from_slice", since = "1.9.0")]
         .               #[track_caller]
   123,090 ( 0.00%)      pub fn copy_from_slice(&mut self, src: &[T])
         .               where
         .                   T: Copy,
         .               {
         .                   // The panic code path was put into a cold function to not bloat the
         .                   // call site.
         .                   #[inline(never)]
         .                   #[cold]
         .                   #[track_caller]
         .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
         .                       panic!(
         .                           "source slice length ({}) does not match destination slice length ({})",
         .                           src_len, dst_len,
         .                       );
         .                   }
         .           
   297,852 ( 0.00%)          if self.len() != src.len() {
         .                       len_mismatch_fail(self.len(), src.len());
         .                   }
         .           
         .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
         .                   // checked to have the same length. The slices cannot overlap because
         .                   // mutable references are exclusive.
         .                   unsafe {
    73,854 ( 0.00%)              ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
         .                   }
    24,618 ( 0.00%)      }
         .           
         .               /// Copies elements from one part of the slice to another part of itself,
         .               /// using a memmove.
         .               ///
         .               /// `src` is the range within `self` to copy from. `dest` is the starting
         .               /// index of the range within `self` to copy to, which will have the same
         .               /// length as `src`. The two ranges may overlap. The ends of the two ranges
         .               /// must be less than or equal to `self.len()`.
-- line 3229 ----------------------------------------
-- line 3380 ----------------------------------------
         .                       }
         .                       a << k
         .                   }
         .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
         .                   let ts: usize = mem::size_of::<U>() / gcd;
         .                   let us: usize = mem::size_of::<T>() / gcd;
         .           
         .                   // Armed with this knowledge, we can find how many `U`s we can fit!
         4 ( 0.00%)          let us_len = self.len() / ts * us;
         .                   // And how many `T`s will be in the trailing slice!
    65,244 ( 0.00%)          let ts_len = self.len() % ts;
         .                   (us_len, ts_len)
         .               }
         .           
         .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
         .               /// maintained.
         .               ///
         .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
         .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
         .                       return (self, &[], &[]);
         .                   }
         .           
         .                   // First, find at what point do we split between the first and 2nd slice. Easy with
         .                   // ptr.align_offset.
         .                   let ptr = self.as_ptr();
         .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
         .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
    65,244 ( 0.00%)          if offset > self.len() {
         .                       (self, &[], &[])
         .                   } else {
         .                       let (left, rest) = self.split_at(offset);
         .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
         .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
         .                       // since the caller guarantees that we can transmute `T` to `U` safely.
         .                       unsafe {
         .                           (
         .                               left,
         .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
    65,248 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
         .                           )
         .                       }
         .                   }
         .               }
         .           
         .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
         .               /// maintained.
         .               ///
-- line 3456 ----------------------------------------
-- line 3731 ----------------------------------------
         .               /// let v = [1, 2, 3, 3, 5, 6, 7];
         .               /// let i = v.partition_point(|&x| x < 5);
         .               ///
         .               /// assert_eq!(i, 4);
         .               /// assert!(v[..i].iter().all(|&x| x < 5));
         .               /// assert!(v[i..].iter().all(|&x| !(x < 5)));
         .               /// ```
         .               #[stable(feature = "partition_point", since = "1.52.0")]
         8 ( 0.00%)      pub fn partition_point<P>(&self, mut pred: P) -> usize
         .               where
         .                   P: FnMut(&T) -> bool,
         .               {
         .                   self.binary_search_by(|x| if pred(x) { Less } else { Greater }).unwrap_or_else(|i| i)
        16 ( 0.00%)      }
         .           
         .               /// Removes the subslice corresponding to the given range
         .               /// and returns a reference to it.
         .               ///
         .               /// Returns `None` and does not modify the slice if the given
         .               /// range is out of bounds.
         .               ///
         .               /// Note that this method only accepts one-sided ranges such as
-- line 3752 ----------------------------------------

 7,289,003 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/index.rs
--------------------------------------------------------------------------------
Ir                  

-- line 6 ----------------------------------------
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, I> ops::Index<I> for [T]
         .           where
         .               I: SliceIndex<[T]>,
         .           {
         .               type Output = I::Output;
         .           
         .               #[inline]
 2,419,210 ( 0.03%)      fn index(&self, index: I) -> &I::Output {
   904,456 ( 0.01%)          index.index(self)
   602,978 ( 0.01%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, I> ops::IndexMut<I> for [T]
         .           where
         .               I: SliceIndex<[T]>,
         .           {
         .               #[inline]
    74,998 ( 0.00%)      fn index_mut(&mut self, index: I) -> &mut I::Output {
    40,902 ( 0.00%)          index.index_mut(self)
    27,268 ( 0.00%)      }
         .           }
         .           
         .           #[cfg_attr(not(feature = "panic_immediate_abort"), inline(never))]
         .           #[cfg_attr(feature = "panic_immediate_abort", inline)]
         .           #[cold]
         .           #[track_caller]
         .           fn slice_start_index_len_fail(index: usize, len: usize) -> ! {
         .               panic!("range start index {} out of range for slice of length {}", index, len);
-- line 35 ----------------------------------------
-- line 152 ----------------------------------------
         .               fn index_mut(self, slice: &mut T) -> &mut Self::Output;
         .           }
         .           
         .           #[stable(feature = "slice_get_slice_impls", since = "1.15.0")]
         .           unsafe impl<T> SliceIndex<[T]> for usize {
         .               type Output = T;
         .           
         .               #[inline]
     7,385 ( 0.00%)      fn get(self, slice: &[T]) -> Option<&T> {
         .                   // SAFETY: `self` is checked to be in bounds.
 2,629,407 ( 0.03%)          if self < slice.len() { unsafe { Some(&*self.get_unchecked(slice)) } } else { None }
     3,165 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn get_mut(self, slice: &mut [T]) -> Option<&mut T> {
         .                   // SAFETY: `self` is checked to be in bounds.
   519,526 ( 0.01%)          if self < slice.len() { unsafe { Some(&mut *self.get_unchecked_mut(slice)) } } else { None }
         .               }
         .           
         .               #[inline]
   253,979 ( 0.00%)      unsafe fn get_unchecked(self, slice: *const [T]) -> *const T {
         .                   // SAFETY: the caller guarantees that `slice` is not dangling, so it
         .                   // cannot be longer than `isize::MAX`. They also guarantee that
         .                   // `self` is in bounds of `slice` so `self` cannot overflow an `isize`,
         .                   // so the call to `add` is safe.
    46,178 ( 0.00%)          unsafe { slice.as_ptr().add(self) }
    46,178 ( 0.00%)      }
         .           
         .               #[inline]
   182,210 ( 0.00%)      unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut T {
         .                   // SAFETY: see comments for `get_unchecked` above.
         .                   unsafe { slice.as_mut_ptr().add(self) }
    26,030 ( 0.00%)      }
         .           
         .               #[inline]
        88 ( 0.00%)      fn index(self, slice: &[T]) -> &T {
         .                   // N.B., use intrinsic indexing
26,041,403 ( 0.29%)          &(*slice)[self]
        22 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn index_mut(self, slice: &mut [T]) -> &mut T {
         .                   // N.B., use intrinsic indexing
 8,588,538 ( 0.10%)          &mut (*slice)[self]
         .               }
         .           }
         .           
         .           #[stable(feature = "slice_get_slice_impls", since = "1.15.0")]
         .           unsafe impl<T> SliceIndex<[T]> for ops::Range<usize> {
         .               type Output = [T];
         .           
         .               #[inline]
   104,715 ( 0.00%)      fn get(self, slice: &[T]) -> Option<&[T]> {
   244,793 ( 0.00%)          if self.start > self.end || self.end > slice.len() {
         .                       None
         .                   } else {
         .                       // SAFETY: `self` is checked to be valid and in bounds above.
    69,810 ( 0.00%)              unsafe { Some(&*self.get_unchecked(slice)) }
         .                   }
    46,540 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn get_mut(self, slice: &mut [T]) -> Option<&mut [T]> {
         .                   if self.start > self.end || self.end > slice.len() {
         .                       None
         .                   } else {
         .                       // SAFETY: `self` is checked to be valid and in bounds above.
         .                       unsafe { Some(&mut *self.get_unchecked_mut(slice)) }
         .                   }
         .               }
         .           
         .               #[inline]
 4,237,506 ( 0.05%)      unsafe fn get_unchecked(self, slice: *const [T]) -> *const [T] {
         .                   // SAFETY: the caller guarantees that `slice` is not dangling, so it
         .                   // cannot be longer than `isize::MAX`. They also guarantee that
         .                   // `self` is in bounds of `slice` so `self` cannot overflow an `isize`,
         .                   // so the call to `add` is safe.
 6,489,405 ( 0.07%)          unsafe { ptr::slice_from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start) }
   651,924 ( 0.01%)      }
         .           
         .               #[inline]
   273,072 ( 0.00%)      unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut [T] {
         .                   // SAFETY: see comments for `get_unchecked` above.
         .                   unsafe {
   288,373 ( 0.00%)              ptr::slice_from_raw_parts_mut(slice.as_mut_ptr().add(self.start), self.end - self.start)
         .                   }
    34,134 ( 0.00%)      }
         .           
         .               #[inline]
 3,014,610 ( 0.03%)      fn index(self, slice: &[T]) -> &[T] {
   781,244 ( 0.01%)          if self.start > self.end {
         .                       slice_index_order_fail(self.start, self.end);
 3,218,584 ( 0.04%)          } else if self.end > slice.len() {
         .                       slice_end_index_len_fail(self.end, slice.len());
         .                   }
         .                   // SAFETY: `self` is checked to be valid and in bounds above.
 1,205,844 ( 0.01%)          unsafe { &*self.get_unchecked(slice) }
   602,922 ( 0.01%)      }
         .           
         .               #[inline]
    68,180 ( 0.00%)      fn index_mut(self, slice: &mut [T]) -> &mut [T] {
    28,564 ( 0.00%)          if self.start > self.end {
         .                       slice_index_order_fail(self.start, self.end);
   122,240 ( 0.00%)          } else if self.end > slice.len() {
         .                       slice_end_index_len_fail(self.end, slice.len());
         .                   }
         .                   // SAFETY: `self` is checked to be valid and in bounds above.
    27,272 ( 0.00%)          unsafe { &mut *self.get_unchecked_mut(slice) }
    13,636 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "slice_get_slice_impls", since = "1.15.0")]
         .           unsafe impl<T> SliceIndex<[T]> for ops::RangeTo<usize> {
         .               type Output = [T];
         .           
         .               #[inline]
         .               fn get(self, slice: &[T]) -> Option<&[T]> {
-- line 268 ----------------------------------------
-- line 270 ----------------------------------------
         .               }
         .           
         .               #[inline]
         .               fn get_mut(self, slice: &mut [T]) -> Option<&mut [T]> {
         .                   (0..self.end).get_mut(slice)
         .               }
         .           
         .               #[inline]
    38,562 ( 0.00%)      unsafe fn get_unchecked(self, slice: *const [T]) -> *const [T] {
         .                   // SAFETY: the caller has to uphold the safety contract for `get_unchecked`.
    44,989 ( 0.00%)          unsafe { (0..self.end).get_unchecked(slice) }
    12,854 ( 0.00%)      }
         .           
         .               #[inline]
    61,494 ( 0.00%)      unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut [T] {
         .                   // SAFETY: the caller has to uphold the safety contract for `get_unchecked_mut`.
    71,743 ( 0.00%)          unsafe { (0..self.end).get_unchecked_mut(slice) }
    20,498 ( 0.00%)      }
         .           
         .               #[inline]
 2,093,140 ( 0.02%)      fn index(self, slice: &[T]) -> &[T] {
 2,093,140 ( 0.02%)          (0..self.end).index(slice)
   598,040 ( 0.01%)      }
         .           
         .               #[inline]
    47,712 ( 0.00%)      fn index_mut(self, slice: &mut [T]) -> &mut [T] {
    47,712 ( 0.00%)          (0..self.end).index_mut(slice)
    13,632 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "slice_get_slice_impls", since = "1.15.0")]
         .           unsafe impl<T> SliceIndex<[T]> for ops::RangeFrom<usize> {
         .               type Output = [T];
         .           
         .               #[inline]
         .               fn get(self, slice: &[T]) -> Option<&[T]> {
-- line 305 ----------------------------------------
-- line 307 ----------------------------------------
         .               }
         .           
         .               #[inline]
         .               fn get_mut(self, slice: &mut [T]) -> Option<&mut [T]> {
         .                   (self.start..slice.len()).get_mut(slice)
         .               }
         .           
         .               #[inline]
    83,707 ( 0.00%)      unsafe fn get_unchecked(self, slice: *const [T]) -> *const [T] {
         .                   // SAFETY: the caller has to uphold the safety contract for `get_unchecked`.
    57,951 ( 0.00%)          unsafe { (self.start..slice.len()).get_unchecked(slice) }
    12,878 ( 0.00%)      }
         .           
         .               #[inline]
         .               unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut [T] {
         .                   // SAFETY: the caller has to uphold the safety contract for `get_unchecked_mut`.
         .                   unsafe { (self.start..slice.len()).get_unchecked_mut(slice) }
         .               }
         .           
         .               #[inline]
        96 ( 0.00%)      fn index(self, slice: &[T]) -> &[T] {
   470,983 ( 0.01%)          if self.start > slice.len() {
         .                       slice_start_index_len_fail(self.start, slice.len());
         .                   }
         .                   // SAFETY: `self` is checked to be valid and in bounds above.
        48 ( 0.00%)          unsafe { &*self.get_unchecked(slice) }
        24 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn index_mut(self, slice: &mut [T]) -> &mut [T] {
    14,399 ( 0.00%)          if self.start > slice.len() {
         .                       slice_start_index_len_fail(self.start, slice.len());
         .                   }
         .                   // SAFETY: `self` is checked to be valid and in bounds above.
         .                   unsafe { &mut *self.get_unchecked_mut(slice) }
         .               }
         .           }
         .           
         .           #[stable(feature = "slice_get_slice_impls", since = "1.15.0")]
-- line 345 ----------------------------------------
-- line 362 ----------------------------------------
         .               }
         .           
         .               #[inline]
         .               unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut [T] {
         .                   slice
         .               }
         .           
         .               #[inline]
        30 ( 0.00%)      fn index(self, slice: &[T]) -> &[T] {
         .                   slice
        10 ( 0.00%)      }
         .           
         .               #[inline]
    40,896 ( 0.00%)      fn index_mut(self, slice: &mut [T]) -> &mut [T] {
         .                   slice
    13,632 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "inclusive_range", since = "1.26.0")]
         .           unsafe impl<T> SliceIndex<[T]> for ops::RangeInclusive<usize> {
         .               type Output = [T];
         .           
         .               #[inline]
         .               fn get(self, slice: &[T]) -> Option<&[T]> {
-- line 385 ----------------------------------------
-- line 515 ----------------------------------------
         .           /// use std::slice;
         .           ///
         .           /// slice::range(1..=usize::MAX, ..3);
         .           /// ```
         .           ///
         .           /// [`Index::index`]: ops::Index::index
         .           #[track_caller]
         .           #[unstable(feature = "slice_range", issue = "76393")]
    39,272 ( 0.00%)  pub fn range<R>(range: R, bounds: ops::RangeTo<usize>) -> ops::Range<usize>
         .           where
         .               R: ops::RangeBounds<usize>,
         .           {
     9,818 ( 0.00%)      let len = bounds.end;
         .           
    78,544 ( 0.00%)      let start: ops::Bound<&usize> = range.start_bound();
    88,362 ( 0.00%)      let start = match start {
         .                   ops::Bound::Included(&start) => start,
         .                   ops::Bound::Excluded(start) => {
         .                       start.checked_add(1).unwrap_or_else(|| slice_start_index_overflow_fail())
         .                   }
     9,818 ( 0.00%)          ops::Bound::Unbounded => 0,
         .               };
         .           
    78,544 ( 0.00%)      let end: ops::Bound<&usize> = range.end_bound();
    88,362 ( 0.00%)      let end = match end {
         .                   ops::Bound::Included(end) => {
         .                       end.checked_add(1).unwrap_or_else(|| slice_end_index_overflow_fail())
         .                   }
         .                   ops::Bound::Excluded(&end) => end,
     9,818 ( 0.00%)          ops::Bound::Unbounded => len,
         .               };
         .           
    89,836 ( 0.00%)      if start > end {
         .                   slice_index_order_fail(start, end);
         .               }
    33,754 ( 0.00%)      if end > len {
         .                   slice_end_index_len_fail(end, len);
         .               }
         .           
    39,272 ( 0.00%)      ops::Range { start, end }
    49,090 ( 0.00%)  }
         .           
         .           /// Convert pair of `ops::Bound`s into `ops::Range` without performing any bounds checking and (in debug) overflow checking
         .           fn into_range_unchecked(
         .               len: usize,
         .               (start, end): (ops::Bound<usize>, ops::Bound<usize>),
         .           ) -> ops::Range<usize> {
         .               use ops::Bound;
         .               let start = match start {
-- line 563 ----------------------------------------

12,824,115 ( 0.14%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/index.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir                  

-- line 91 ----------------------------------------
         .           // maximum of number bytes needed to fill an 8-byte-sized element on which
         .           // SipHash operates. Note that for variable-sized copies which are known to be
         .           // less than 8 bytes, this function will perform more work than necessary unless
         .           // the compiler is able to optimize the extra work away.
         .           #[inline]
         .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
         .               debug_assert!(count <= 8);
         .           
   100,363 ( 0.00%)      if count == 8 {
         .                   ptr::copy_nonoverlapping(src, dst, 8);
         .                   return;
         .               }
         .           
         .               let mut i = 0;
   109,702 ( 0.00%)      if i + 3 < count {
         .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
         .                   i += 4;
         .               }
         .           
   237,847 ( 0.00%)      if i + 1 < count {
         .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
    29,053 ( 0.00%)          i += 2
         .               }
         .           
   109,702 ( 0.00%)      if i < count {
    75,184 ( 0.00%)          *dst.add(i) = *src.add(i);
         .                   i += 1;
         .               }
         .           
         .               debug_assert_eq!(i, count);
         .           }
         .           
         .           // # Implementation
         .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
         .           
         .                   hasher
         .               }
         .           
         .               // A specialized write function for values with size <= 8.
         .               #[inline]
         .               fn short_write<T>(&mut self, x: T) {
         .                   let size = mem::size_of::<T>();
 1,515,393 ( 0.02%)          let nbuf = self.nbuf;
         .                   debug_assert!(size <= 8);
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
         .           
10,593,979 ( 0.12%)          if nbuf + size < BUFFER_SIZE {
         .                       unsafe {
         .                           // The memcpy call is optimized away because the size is known.
         .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
         .                       }
         .           
 3,370,465 ( 0.04%)              self.nbuf = nbuf + size;
         .           
         .                       return;
         .                   }
         .           
   576,768 ( 0.01%)          unsafe { self.short_write_process_buffer(x) }
         .               }
         .           
         .               // A specialized write function for values with size <= 8 that should only
         .               // be called when the write would cause the buffer to fill.
         .               //
         .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
         .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
         .               // overflow) if it wasn't already.
         .               #[inline(never)]
   171,611 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
         .                   let size = mem::size_of::<T>();
   171,611 ( 0.00%)          let nbuf = self.nbuf;
         .                   debug_assert!(size <= 8);
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
         .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
         .           
         .                   // Copy first part of input into end of buffer, possibly into spill
         .                   // element. The memcpy call is optimized away because the size is known.
         .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
         .           
         .                   // Process buffer.
         .                   for i in 0..BUFFER_CAPACITY {
 1,716,110 ( 0.02%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
 1,372,888 ( 0.02%)              self.state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut self.state);
 1,544,499 ( 0.02%)              self.state.v0 ^= elem;
         .                   }
         .           
         .                   // Copy remaining input into start of buffer by copying size - 1
         .                   // elements from spill (at most size - 1 bytes could have overflowed
         .                   // into the spill). The memcpy call is optimized away because the size
         .                   // is known. And the whole copy is optimized away for size == 1.
         .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
         .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
         .           
         .                   // This function should only be called when the write fills the buffer.
         .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
         .                   // is statically known, so the branch is optimized away.
   817,007 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
   686,444 ( 0.01%)          self.processed += BUFFER_SIZE;
   343,222 ( 0.00%)      }
         .           
         .               // A write function for byte slices.
         .               #[inline]
         .               fn slice_write(&mut self, msg: &[u8]) {
         .                   let length = msg.len();
    18,407 ( 0.00%)          let nbuf = self.nbuf;
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .           
   353,470 ( 0.00%)          if nbuf + length < BUFFER_SIZE {
         .                       unsafe {
         .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .           
   125,558 ( 0.00%)                  if length <= 8 {
         .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
         .                           } else {
         .                               // This memcpy is *not* optimized away.
         .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
         .                           }
         .                       }
         .           
    64,891 ( 0.00%)              self.nbuf = nbuf + length;
         .           
         .                       return;
         .                   }
         .           
    53,365 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
         .               }
         .           
         .               // A write function for byte slices that should only be called when the
         .               // write would cause the buffer to fill.
         .               //
         .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
         .               // and `msg` must contain enough bytes to initialize the rest of the element
         .               // containing the byte offset `self.nbuf`.
         .               #[inline(never)]
    32,980 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
         .                   let length = msg.len();
     6,596 ( 0.00%)          let nbuf = self.nbuf;
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
         .           
         .                   // Always copy first part of input into current element of buffer.
         .                   // This function should only be called when the write fills the buffer,
         .                   // so we know that there is enough input to fill the current element.
    19,788 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
     6,596 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
         .           
         .                   let src = msg.as_ptr();
         .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
         .           
         .                   // Process buffer.
         .           
         .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
         .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
         .                   // We know that is true, because last step ensured we have a full
         .                   // element in the buffer.
    13,192 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
         .           
         .                   for i in 0..last {
    49,529 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
    56,125 ( 0.00%)              self.state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut self.state);
    99,058 ( 0.00%)              self.state.v0 ^= elem;
         .                   }
         .           
         .                   // Process the remaining element-sized chunks of input.
         .                   let mut processed = needed_in_elem;
    13,192 ( 0.00%)          let input_left = length - processed;
     8,529 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
         .                   let extra_bytes_left = input_left % ELEM_SIZE;
         .           
         .                   for _ in 0..elems_left {
    17,233 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
    17,233 ( 0.00%)              self.state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut self.state);
    17,233 ( 0.00%)              self.state.v0 ^= elem;
    34,466 ( 0.00%)              processed += ELEM_SIZE;
         .                   }
         .           
         .                   // Copy remaining input into start of buffer.
         .                   let src = msg.as_ptr().add(processed);
         .                   let dst = self.buf.as_mut_ptr() as *mut u8;
         .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
         .           
     6,596 ( 0.00%)          self.nbuf = extra_bytes_left;
    32,980 ( 0.00%)          self.processed += nbuf + processed;
    39,576 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn finish128(mut self) -> (u64, u64) {
         .                   debug_assert!(self.nbuf < BUFFER_SIZE);
         .           
         .                   // Process full elements in buffer.
    81,372 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
         .           
         .                   // Since we're consuming self, avoid updating members for a potential
         .                   // performance gain.
   108,496 ( 0.00%)          let mut state = self.state;
         .           
         .                   for i in 0..last {
    82,455 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
    82,455 ( 0.00%)              state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut state);
    82,455 ( 0.00%)              state.v0 ^= elem;
         .                   }
         .           
         .                   // Get remaining partial element.
    54,248 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
         .                       unsafe {
         .                           // Ensure element is initialized by writing zero bytes. At most
         .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
         .                           // to write this many because we have the spill and we maintain
         .                           // `self.nbuf` such that this write will start before the spill.
         .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
         .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
    20,532 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
         .                       }
         .                   } else {
         .                       0
         .                   };
         .           
         .                   // Finalize the hash.
    73,499 ( 0.00%)          let length = self.processed + self.nbuf;
    51,590 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
         .           
    25,795 ( 0.00%)          state.v3 ^= b;
         .                   Sip24Rounds::c_rounds(&mut state);
    25,795 ( 0.00%)          state.v0 ^= b;
         .           
    25,795 ( 0.00%)          state.v2 ^= 0xee;
         .                   Sip24Rounds::d_rounds(&mut state);
    89,362 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
         .           
    37,766 ( 0.00%)          state.v1 ^= 0xdd;
         .                   Sip24Rounds::d_rounds(&mut state);
    37,766 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
         .           
         .                   (_0, _1)
         .               }
         .           }
         .           
         .           impl Hasher for SipHasher128 {
         .               #[inline]
         .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
         .           }
         .           
         .           #[derive(Debug, Clone, Default)]
         .           struct Sip24Rounds;
         .           
         .           impl Sip24Rounds {
         .               #[inline]
         .               fn c_rounds(state: &mut State) {
 6,382,999 ( 0.07%)          compress!(state);
 6,855,020 ( 0.08%)          compress!(state);
         .               }
         .           
         .               #[inline]
         .               fn d_rounds(state: &mut State) {
   178,712 ( 0.00%)          compress!(state);
   178,712 ( 0.00%)          compress!(state);
   178,712 ( 0.00%)          compress!(state);
   152,920 ( 0.00%)          compress!(state);
         .               }
         .           }

 1,206,256 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/client.rs
--------------------------------------------------------------------------------
Ir                 

-- line 18 ----------------------------------------
        .                       // FIXME(eddyb) use a reference to the `static COUNTERS`, instead of
        .                       // a wrapper `fn` pointer, once `const fn` can reference `static`s.
        .                       extern "C" fn get() -> &'static Self {
        .                           static COUNTERS: HandleCounters = HandleCounters {
        .                               $($oty: AtomicUsize::new(1),)*
        .                               $($ity: AtomicUsize::new(1),)*
        .                           };
        .                           &COUNTERS
       10 ( 0.00%)              }
        .                   }
        .           
        .                   // FIXME(eddyb) generate the definition of `HandleStore` in `server.rs`.
        .                   #[repr(C)]
        .                   #[allow(non_snake_case)]
        .                   pub(super) struct HandleStore<S: server::Types> {
        .                       $($oty: handle::OwnedStore<S::$oty>,)*
        .                       $($ity: handle::InternedStore<S::$ity>,)*
        .                   }
        .           
        .                   impl<S: server::Types> HandleStore<S> {
       30 ( 0.00%)              pub(super) fn new(handle_counters: &'static HandleCounters) -> Self {
      295 ( 0.00%)                  HandleStore {
        .                               $($oty: handle::OwnedStore::new(&handle_counters.$oty),)*
        .                               $($ity: handle::InternedStore::new(&handle_counters.$ity),)*
        .                           }
       40 ( 0.00%)              }
        .                   }
        .           
        .                   $(
        .                       #[repr(C)]
        .                       pub(crate) struct $oty(handle::Handle);
        .                       impl !Send for $oty {}
        .                       impl !Sync for $oty {}
        .           
        .                       // Forward `Drop::drop` to the inherent `drop` method.
        .                       impl Drop for $oty {
    4,930 ( 0.00%)                  fn drop(&mut self) {
   24,208 ( 0.00%)                      $oty(self.0).drop();
    7,395 ( 0.00%)                  }
        .                       }
        .           
        .                       impl<S> Encode<S> for $oty {
       40 ( 0.00%)                  fn encode(self, w: &mut Writer, s: &mut S) {
       15 ( 0.00%)                      let handle = self.0;
       20 ( 0.00%)                      mem::forget(self);
        5 ( 0.00%)                      handle.encode(w, s);
       10 ( 0.00%)                  }
        .                       }
        .           
        .                       impl<S: server::Types> DecodeMut<'_, '_, HandleStore<server::MarkedTypes<S>>>
        .                           for Marked<S::$oty, $oty>
        .                       {
  292,095 ( 0.00%)                  fn decode(r: &mut Reader<'_>, s: &mut HandleStore<server::MarkedTypes<S>>) -> Self {
        .                               s.$oty.take(handle::Handle::decode(r, &mut ()))
  389,460 ( 0.00%)                  }
        .                       }
        .           
        .                       impl<S> Encode<S> for &$oty {
        .                           fn encode(self, w: &mut Writer, s: &mut S) {
   24,381 ( 0.00%)                      self.0.encode(w, s);
        .                           }
        .                       }
        .           
        .                       impl<'s, S: server::Types> Decode<'_, 's, HandleStore<server::MarkedTypes<S>>>
        .                           for &'s Marked<S::$oty, $oty>
        .                       {
    8,127 ( 0.00%)                  fn decode(r: &mut Reader<'_>, s: &'s HandleStore<server::MarkedTypes<S>>) -> Self {
        .                               &s.$oty[handle::Handle::decode(r, &mut ())]
   16,254 ( 0.00%)                  }
        .                       }
        .           
        .                       impl<S> Encode<S> for &mut $oty {
        .                           fn encode(self, w: &mut Writer, s: &mut S) {
  221,412 ( 0.00%)                      self.0.encode(w, s);
        .                           }
        .                       }
        .           
        .                       impl<'s, S: server::Types> DecodeMut<'_, 's, HandleStore<server::MarkedTypes<S>>>
        .                           for &'s mut Marked<S::$oty, $oty>
        .                       {
   73,804 ( 0.00%)                  fn decode(
        .                               r: &mut Reader<'_>,
        .                               s: &'s mut HandleStore<server::MarkedTypes<S>>
        .                           ) -> Self {
        .                               &mut s.$oty[handle::Handle::decode(r, &mut ())]
  147,608 ( 0.00%)                  }
        .                       }
        .           
        .                       impl<S: server::Types> Encode<HandleStore<server::MarkedTypes<S>>>
        .                           for Marked<S::$oty, $oty>
        .                       {
  602,323 ( 0.01%)                  fn encode(self, w: &mut Writer, s: &mut HandleStore<server::MarkedTypes<S>>) {
  102,572 ( 0.00%)                      s.$oty.alloc(self).encode(w, s);
        .                           }
        .                       }
        .           
        .                       impl<S> DecodeMut<'_, '_, S> for $oty {
       15 ( 0.00%)                  fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
       15 ( 0.00%)                      $oty(handle::Handle::decode(r, s))
       15 ( 0.00%)                  }
        .                       }
        .                   )*
        .           
        .                   $(
        .                       #[repr(C)]
  100,618 ( 0.00%)              #[derive(Copy, Clone, PartialEq, Eq, Hash)]
        .                       pub(crate) struct $ity(handle::Handle);
        .                       impl !Send for $ity {}
        .                       impl !Sync for $ity {}
        .           
        .                       impl<S> Encode<S> for $ity {
        .                           fn encode(self, w: &mut Writer, s: &mut S) {
        .                               self.0.encode(w, s);
        .                           }
        .                       }
        .           
        .                       impl<S: server::Types> DecodeMut<'_, '_, HandleStore<server::MarkedTypes<S>>>
        .                           for Marked<S::$ity, $ity>
        .                       {
   72,475 ( 0.00%)                  fn decode(r: &mut Reader<'_>, s: &mut HandleStore<server::MarkedTypes<S>>) -> Self {
        .                               s.$ity.copy(handle::Handle::decode(r, &mut ()))
  144,950 ( 0.00%)                  }
        .                       }
        .           
        .                       impl<S: server::Types> Encode<HandleStore<server::MarkedTypes<S>>>
        .                           for Marked<S::$ity, $ity>
        .                       {
        .                           fn encode(self, w: &mut Writer, s: &mut HandleStore<server::MarkedTypes<S>>) {
  670,542 ( 0.01%)                      s.$ity.alloc(self).encode(w, s);
        .                           }
        .                       }
        .           
        .                       impl<S> DecodeMut<'_, '_, S> for $ity {
        .                           fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
        .                               $ity(handle::Handle::decode(r, s))
        .                           }
        .                       }
-- line 154 ----------------------------------------
-- line 175 ----------------------------------------
        .           
        .           // FIXME(eddyb) generate these impls by pattern-matching on the
        .           // names of methods - also could use the presence of `fn drop`
        .           // to distinguish between 'owned and 'interned, above.
        .           // Alternatively, special 'modes" could be listed of types in with_api
        .           // instead of pattern matching on methods, here and in server decl.
        .           
        .           impl Clone for TokenStream {
   11,319 ( 0.00%)      fn clone(&self) -> Self {
        .                   self.clone()
   11,319 ( 0.00%)      }
        .           }
        .           
        .           impl Clone for TokenStreamIter {
        .               fn clone(&self) -> Self {
        .                   self.clone()
        .               }
        .           }
        .           
        .           impl Clone for Group {
    7,293 ( 0.00%)      fn clone(&self) -> Self {
        .                   self.clone()
    7,293 ( 0.00%)      }
        .           }
        .           
        .           impl Clone for Literal {
    3,888 ( 0.00%)      fn clone(&self) -> Self {
        .                   self.clone()
    3,888 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for Literal {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   f.debug_struct("Literal")
        .                       // format the kind without quotes, as in `kind: Float`
        .                       .field("kind", &format_args!("{}", &self.debug_kind()))
        .                       .field("symbol", &self.symbol())
-- line 211 ----------------------------------------
-- line 219 ----------------------------------------
        .           impl Clone for SourceFile {
        .               fn clone(&self) -> Self {
        .                   self.clone()
        .               }
        .           }
        .           
        .           impl fmt::Debug for Span {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
       35 ( 0.00%)          f.write_str(&self.debug())
        .               }
        .           }
        .           
        .           macro_rules! define_client_side {
        .               ($($name:ident {
        .                   $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)*;)*
        .               }),* $(,)?) => {
        .                   $(impl $name {
  440,526 ( 0.00%)              $(pub(crate) fn $method($($arg: $arg_ty),*) $(-> $ret_ty)* {
  226,237 ( 0.00%)                  Bridge::with(|bridge| {
        .                               let mut b = bridge.cached_buffer.take();
        .           
        .                               b.clear();
1,015,449 ( 0.01%)                      api_tags::Method::$name(api_tags::$name::$method).encode(&mut b, &mut ());
  303,405 ( 0.00%)                      reverse_encode!(b; $($arg),*);
        .           
2,030,898 ( 0.02%)                      b = bridge.dispatch.call(b);
        .           
1,406,875 ( 0.02%)                      let r = Result::<_, PanicMessage>::decode(&mut &b[..], &mut ());
        .           
4,061,796 ( 0.05%)                      bridge.cached_buffer = b;
        .           
  487,111 ( 0.01%)                      r.unwrap_or_else(|e| panic::resume_unwind(e.into()))
        .                           })
  367,105 ( 0.00%)              })*
        .                   })*
        .               }
        .           }
        .           with_api!(self, self, define_client_side);
        .           
        .           enum BridgeState<'a> {
        .               /// No server is currently connected to this client.
        .               NotConnected,
-- line 260 ----------------------------------------
-- line 270 ----------------------------------------
        .           enum BridgeStateL {}
        .           
        .           impl<'a> scoped_cell::ApplyL<'a> for BridgeStateL {
        .               type Out = BridgeState<'a>;
        .           }
        .           
        .           thread_local! {
        .               static BRIDGE_STATE: scoped_cell::ScopedCell<BridgeStateL> =
        3 ( 0.00%)          scoped_cell::ScopedCell::new(BridgeState::NotConnected);
        .           }
        .           
        .           impl BridgeState<'_> {
        .               /// Take exclusive control of the thread-local
        .               /// `BridgeState`, and pass it to `f`, mutably.
        .               /// The state will be restored after `f` exits, even
        .               /// by panic, including modifications made to it by `f`.
        .               ///
        .               /// N.B., while `f` is running, the thread-local state
        .               /// is `BridgeState::InUse`.
  165,335 ( 0.00%)      fn with<R>(f: impl FnOnce(&mut BridgeState<'_>) -> R) -> R {
  131,599 ( 0.00%)          BRIDGE_STATE.with(|state| {
1,873,445 ( 0.02%)              state.replace(BridgeState::InUse, |mut state| {
        .                           // FIXME(#52812) pass `f` directly to `replace` when `RefMutL` is gone
      120 ( 0.00%)                  f(&mut *state)
       20 ( 0.00%)              })
       20 ( 0.00%)          })
  146,052 ( 0.00%)      }
        .           }
        .           
        .           impl Bridge<'_> {
        .               pub(crate) fn is_available() -> bool {
        6 ( 0.00%)          BridgeState::with(|state| match state {
        .                       BridgeState::Connected(_) | BridgeState::InUse => true,
        .                       BridgeState::NotConnected => false,
        .                   })
        .               }
        .           
       30 ( 0.00%)      fn enter<R>(self, f: impl FnOnce() -> R) -> R {
       35 ( 0.00%)          let force_show_panics = self.force_show_panics;
        .                   // Hide the default panic output within `proc_macro` expansions.
        .                   // NB. the server can't do this because it may use a different libstd.
        .                   static HIDE_PANICS_DURING_EXPANSION: Once = Once::new();
       27 ( 0.00%)          HIDE_PANICS_DURING_EXPANSION.call_once(|| {
        7 ( 0.00%)              panic::update_hook(move |prev, info| {
        .                           let show = BridgeState::with(|state| match state {
        .                               BridgeState::NotConnected => true,
        .                               BridgeState::Connected(_) | BridgeState::InUse => force_show_panics,
        .                           });
        .                           if show {
        .                               prev(info)
        .                           }
        .                       });
        2 ( 0.00%)          });
        .           
      185 ( 0.00%)          BRIDGE_STATE.with(|state| state.set(BridgeState::Connected(self), f))
       10 ( 0.00%)      }
        .           
       25 ( 0.00%)      fn with<R>(f: impl FnOnce(&mut Bridge<'_>) -> R) -> R {
2,388,884 ( 0.03%)          BridgeState::with(|state| match state {
        .                       BridgeState::NotConnected => {
        .                           panic!("procedural macro API is used outside of a procedural macro");
        .                       }
        .                       BridgeState::InUse => {
        .                           panic!("procedural macro API is used while it's already in use");
        .                       }
       65 ( 0.00%)              BridgeState::Connected(bridge) => f(bridge),
       20 ( 0.00%)          })
       20 ( 0.00%)      }
        .           }
        .           
        .           /// A client-side "global object" (usually a function pointer),
        .           /// which may be using a different `proc_macro` from the one
        .           /// used by the server, but can be interacted with compatibly.
        .           ///
        .           /// N.B., `F` must have FFI-friendly memory layout (e.g., a pointer).
        .           /// The call ABI of function pointers used for `F` doesn't
-- line 345 ----------------------------------------
-- line 353 ----------------------------------------
        .               pub(super) get_handle_counters: extern "C" fn() -> &'static HandleCounters,
        .               pub(super) run: extern "C" fn(Bridge<'_>, F) -> Buffer<u8>,
        .               pub(super) f: F,
        .           }
        .           
        .           /// Client-side helper for handling client panics, entering the bridge,
        .           /// deserializing input and serializing output.
        .           // FIXME(eddyb) maybe replace `Bridge::enter` with this?
       35 ( 0.00%)  fn run_client<A: for<'a, 's> DecodeMut<'a, 's, ()>, R: Encode<()>>(
        .               mut bridge: Bridge<'_>,
        .               f: impl FnOnce(A) -> R,
        .           ) -> Buffer<u8> {
        .               // The initial `cached_buffer` contains the input.
       30 ( 0.00%)      let mut b = bridge.cached_buffer.take();
        .           
      180 ( 0.00%)      panic::catch_unwind(panic::AssertUnwindSafe(|| {
       75 ( 0.00%)          bridge.enter(|| {
       95 ( 0.00%)              let reader = &mut &b[..];
       35 ( 0.00%)              let input = A::decode(reader, &mut ());
        .           
        .                       // Put the `cached_buffer` back in the `Bridge`, for requests.
      100 ( 0.00%)              Bridge::with(|bridge| bridge.cached_buffer = b.take());
        .           
       80 ( 0.00%)              let output = f(input);
        .           
        .                       // Take the `cached_buffer` back out, for the output value.
       95 ( 0.00%)              b = Bridge::with(|bridge| bridge.cached_buffer.take());
        .           
        .                       // HACK(eddyb) Separate encoding a success value (`Ok(output)`)
        .                       // from encoding a panic (`Err(e: PanicMessage)`) to avoid
        .                       // having handles outside the `bridge.enter(|| ...)` scope, and
        .                       // to catch panics that could happen while encoding the success.
        .                       //
        .                       // Note that panics should be impossible beyond this point, but
        .                       // this is defensively trying to avoid any accidental panicking
        .                       // reaching the `extern "C"` (which should `abort` but might not
        .                       // at the moment, so this is also potentially preventing UB).
       15 ( 0.00%)              b.clear();
       50 ( 0.00%)              Ok::<_, ()>(output).encode(&mut b, &mut ());
       20 ( 0.00%)          })
       10 ( 0.00%)      }))
        .               .map_err(PanicMessage::from)
        5 ( 0.00%)      .unwrap_or_else(|e| {
        .                   b.clear();
        .                   Err::<(), _>(e).encode(&mut b, &mut ());
        .               });
        .               b
       10 ( 0.00%)  }
        .           
        .           impl Client<fn(crate::TokenStream) -> crate::TokenStream> {
        .               #[rustc_allow_const_fn_unstable(const_fn)]
        1 ( 0.00%)      pub const fn expand1(f: fn(crate::TokenStream) -> crate::TokenStream) -> Self {
       35 ( 0.00%)          extern "C" fn run(
        .                       bridge: Bridge<'_>,
        .                       f: impl FnOnce(crate::TokenStream) -> crate::TokenStream,
        .                   ) -> Buffer<u8> {
      150 ( 0.00%)              run_client(bridge, |input| f(crate::TokenStream(input)).0)
       10 ( 0.00%)          }
        5 ( 0.00%)          Client { get_handle_counters: HandleCounters::get, run, f }
        1 ( 0.00%)      }
        .           }
        .           
        .           impl Client<fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream> {
        .               #[rustc_allow_const_fn_unstable(const_fn)]
        .               pub const fn expand2(
        .                   f: fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,
        .               ) -> Self {
        .                   extern "C" fn run(
-- line 420 ----------------------------------------

  861,810 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/client.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/const_ptr.rs
--------------------------------------------------------------------------------
Ir                  

-- line 29 ----------------------------------------
         .               /// ```
         .               /// let s: &str = "Follow the rabbit";
         .               /// let ptr: *const u8 = s.as_ptr();
         .               /// assert!(!ptr.is_null());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_is_null", issue = "74939")]
         .               #[inline]
 3,448,080 ( 0.04%)      pub const fn is_null(self) -> bool {
         .                   // Compare via a cast to a thin pointer, so fat pointers are only
         .                   // considering their "data" part for null-ness.
 3,448,080 ( 0.04%)          (self as *const u8).guaranteed_eq(null())
 3,448,080 ( 0.04%)      }
         .           
         .               /// Casts to a pointer of another type.
         .               #[stable(feature = "ptr_cast", since = "1.38.0")]
         .               #[rustc_const_stable(feature = "const_ptr_cast", since = "1.38.0")]
         .               #[inline]
 1,278,435 ( 0.01%)      pub const fn cast<U>(self) -> *const U {
         .                   self as _
   852,290 ( 0.01%)      }
         .           
         .               /// Changes constness without changing the type.
         .               ///
         .               /// This is a bit safer than `as` because it wouldn't silently change the type if the code is
         .               /// refactored.
         .               #[unstable(feature = "ptr_const_cast", issue = "92675")]
         .               #[rustc_const_unstable(feature = "ptr_const_cast", issue = "92675")]
         .               pub const fn as_mut(self) -> *mut T {
-- line 57 ----------------------------------------
-- line 287 ----------------------------------------
         .               #[must_use = "returns a new pointer rather than modifying its argument"]
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline(always)]
         .               pub const unsafe fn offset(self, count: isize) -> *const T
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the caller must uphold the safety contract for `offset`.
13,187,607 ( 0.15%)          unsafe { intrinsics::offset(self, count) }
         .               }
         .           
         .               /// Calculates the offset from a pointer using wrapping arithmetic.
         .               ///
         .               /// `count` is in units of T; e.g., a `count` of 3 represents a pointer
         .               /// offset of `3 * size_of::<T>()` bytes.
         .               ///
         .               /// # Safety
-- line 303 ----------------------------------------
-- line 436 ----------------------------------------
         .               /// // they point to the same address!
         .               /// unsafe {
         .               ///     let zero = ptr2_other.offset_from(ptr2); // Undefined Behavior
         .               /// }
         .               /// ```
         .               #[stable(feature = "ptr_offset_from", since = "1.47.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_offset_from", issue = "92980")]
         .               #[inline]
     7,625 ( 0.00%)      pub const unsafe fn offset_from(self, origin: *const T) -> isize
         .               where
         .                   T: Sized,
         .               {
     1,525 ( 0.00%)          let pointee_size = mem::size_of::<T>();
    19,825 ( 0.00%)          assert!(0 < pointee_size && pointee_size <= isize::MAX as usize);
         .                   // SAFETY: the caller must uphold the safety contract for `ptr_offset_from`.
 2,883,753 ( 0.03%)          unsafe { intrinsics::ptr_offset_from(self, origin) }
     3,050 ( 0.00%)      }
         .           
         .               /// Returns whether two pointers are guaranteed to be equal.
         .               ///
         .               /// At runtime this function behaves like `self == other`.
         .               /// However, in some contexts (e.g., compile-time evaluation),
         .               /// it is not always possible to determine equality of two pointers, so this function may
         .               /// spuriously return `false` for pointers that later actually turn out to be equal.
         .               /// But when it returns `true`, the pointers are guaranteed to be equal.
-- line 460 ----------------------------------------
-- line 470 ----------------------------------------
         .               /// affect the outcome, but just the performance.
         .               /// The consequences of using this method to make runtime and compile-time code behave
         .               /// differently have not been explored. This method should not be used to introduce such
         .               /// differences, and it should also not be stabilized before we have a better understanding
         .               /// of this issue.
         .               #[unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
         .               #[rustc_const_unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
         .               #[inline]
 2,586,060 ( 0.03%)      pub const fn guaranteed_eq(self, other: *const T) -> bool
         .               where
         .                   T: Sized,
         .               {
 5,172,149 ( 0.06%)          intrinsics::ptr_guaranteed_eq(self, other)
 3,448,080 ( 0.04%)      }
         .           
         .               /// Returns whether two pointers are guaranteed to be unequal.
         .               ///
         .               /// At runtime this function behaves like `self != other`.
         .               /// However, in some contexts (e.g., compile-time evaluation),
         .               /// it is not always possible to determine the inequality of two pointers, so this function may
         .               /// spuriously return `false` for pointers that later actually turn out to be unequal.
         .               /// But when it returns `true`, the pointers are guaranteed to be unequal.
-- line 491 ----------------------------------------
-- line 569 ----------------------------------------
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline(always)]
         .               pub const unsafe fn add(self, count: usize) -> Self
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the caller must uphold the safety contract for `offset`.
         .                   unsafe { self.offset(count as isize) }
        41 ( 0.00%)      }
         .           
         .               /// Calculates the offset from a pointer (convenience for
         .               /// `.offset((count as isize).wrapping_neg())`).
         .               ///
         .               /// `count` is in units of T; e.g., a `count` of 3 represents a pointer
         .               /// offset of `3 * size_of::<T>()` bytes.
         .               ///
         .               /// # Safety
-- line 585 ----------------------------------------
-- line 809 ----------------------------------------
         .               /// memory in `self` unchanged.
         .               ///
         .               /// See [`ptr::read`] for safety concerns and examples.
         .               ///
         .               /// [`ptr::read`]: crate::ptr::read()
         .               #[stable(feature = "pointer_methods", since = "1.26.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_read", issue = "80377")]
         .               #[inline]
        28 ( 0.00%)      pub const unsafe fn read(self) -> T
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the caller must uphold the safety contract for `read`.
        28 ( 0.00%)          unsafe { read(self) }
        28 ( 0.00%)      }
         .           
         .               /// Performs a volatile read of the value from `self` without moving it. This
         .               /// leaves the memory in `self` unchanged.
         .               ///
         .               /// Volatile operations are intended to act on I/O memory, and are guaranteed
         .               /// to not be elided or reordered by the compiler across other volatile
         .               /// operations.
         .               ///
-- line 831 ----------------------------------------
-- line 886 ----------------------------------------
         .               /// NOTE: this has the *same* argument order as [`ptr::copy_nonoverlapping`].
         .               ///
         .               /// See [`ptr::copy_nonoverlapping`] for safety concerns and examples.
         .               ///
         .               /// [`ptr::copy_nonoverlapping`]: crate::ptr::copy_nonoverlapping()
         .               #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
         .               #[stable(feature = "pointer_methods", since = "1.26.0")]
         .               #[inline]
    23,756 ( 0.00%)      pub const unsafe fn copy_to_nonoverlapping(self, dest: *mut T, count: usize)
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the caller must uphold the safety contract for `copy_nonoverlapping`.
     5,939 ( 0.00%)          unsafe { copy_nonoverlapping(self, dest, count) }
    11,878 ( 0.00%)      }
         .           
         .               /// Computes the offset that needs to be applied to the pointer in order to make it aligned to
         .               /// `align`.
         .               ///
         .               /// If it is not possible to align the pointer, the implementation returns
         .               /// `usize::MAX`. It is permissible for the implementation to *always*
         .               /// return `usize::MAX`. Only your algorithm's performance can depend
         .               /// on getting a usable offset here, not its correctness.
-- line 908 ----------------------------------------
-- line 983 ----------------------------------------
         .               /// use std::ptr;
         .               ///
         .               /// let slice: *const [i8] = ptr::slice_from_raw_parts(ptr::null(), 3);
         .               /// assert_eq!(slice.len(), 3);
         .               /// ```
         .               #[inline]
         .               #[unstable(feature = "slice_ptr_len", issue = "71146")]
         .               #[rustc_const_unstable(feature = "const_slice_ptr_len", issue = "71146")]
    22,455 ( 0.00%)      pub const fn len(self) -> usize {
    14,970 ( 0.00%)          metadata(self)
    14,970 ( 0.00%)      }
         .           
         .               /// Returns a raw pointer to the slice's buffer.
         .               ///
         .               /// This is equivalent to casting `self` to `*const T`, but more type-safe.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```rust
-- line 1001 ----------------------------------------
-- line 1003 ----------------------------------------
         .               /// use std::ptr;
         .               ///
         .               /// let slice: *const [i8] = ptr::slice_from_raw_parts(ptr::null(), 3);
         .               /// assert_eq!(slice.as_ptr(), 0 as *const i8);
         .               /// ```
         .               #[inline]
         .               #[unstable(feature = "slice_ptr_get", issue = "74265")]
         .               #[rustc_const_unstable(feature = "slice_ptr_get", issue = "74265")]
 1,471,732 ( 0.02%)      pub const fn as_ptr(self) -> *const T {
         .                   self as *const T
   735,866 ( 0.01%)      }
         .           
         .               /// Returns a raw pointer to an element or subslice, without doing bounds
         .               /// checking.
         .               ///
         .               /// Calling this method with an out-of-bounds index or when `self` is not dereferenceable
         .               /// is *[undefined behavior]* even if the resulting pointer is not used.
         .               ///
         .               /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html
-- line 1021 ----------------------------------------

 2,823,343 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/const_ptr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 416 ----------------------------------------
         .               /// ```
         .               /// # #![allow(unused_mut)]
         .               /// let mut vec: Vec<i32> = Vec::new();
         .               /// ```
         .               #[inline]
         .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[must_use]
    23,859 ( 0.00%)      pub const fn new() -> Self {
 7,807,944 ( 0.09%)          Vec { buf: RawVec::NEW, len: 0 }
    24,465 ( 0.00%)      }
         .           
         .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
         .               ///
         .               /// The vector will be able to hold exactly `capacity` elements without
         .               /// reallocating. If `capacity` is 0, the vector will not allocate.
         .               ///
         .               /// It is important to note that although the returned vector has the
         .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 461 ----------------------------------------
         .               /// vec.push(11);
         .               /// assert_eq!(vec.len(), 11);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[must_use]
    13,352 ( 0.00%)      pub fn with_capacity(capacity: usize) -> Self {
     3,338 ( 0.00%)          Self::with_capacity_in(capacity, Global)
     6,676 ( 0.00%)      }
         .           
         .               /// Creates a `Vec<T>` directly from the raw components of another vector.
         .               ///
         .               /// # Safety
         .               ///
         .               /// This is highly unsafe, due to the number of invariants that aren't
         .               /// checked:
         .               ///
-- line 479 ----------------------------------------
-- line 529 ----------------------------------------
         .               ///
         .               ///     // Put everything back together into a Vec
         .               ///     let rebuilt = Vec::from_raw_parts(p, len, cap);
         .               ///     assert_eq!(rebuilt, [4, 5, 6]);
         .               /// }
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
        90 ( 0.00%)      pub unsafe fn from_raw_parts(ptr: *mut T, length: usize, capacity: usize) -> Self {
        15 ( 0.00%)          unsafe { Self::from_raw_parts_in(ptr, length, capacity, Global) }
        30 ( 0.00%)      }
         .           }
         .           
         .           impl<T, A: Allocator> Vec<T, A> {
         .               /// Constructs a new, empty `Vec<T, A>`.
         .               ///
         .               /// The vector will not allocate until elements are pushed onto it.
         .               ///
         .               /// # Examples
-- line 547 ----------------------------------------
-- line 600 ----------------------------------------
         .               /// // ...but this may make the vector reallocate
         .               /// vec.push(11);
         .               /// assert_eq!(vec.len(), 11);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[unstable(feature = "allocator_api", issue = "32838")]
    91,357 ( 0.00%)      pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
 2,504,206 ( 0.03%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
    26,102 ( 0.00%)      }
         .           
         .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
         .               ///
         .               /// # Safety
         .               ///
         .               /// This is highly unsafe, due to the number of invariants that aren't
         .               /// checked:
         .               ///
-- line 618 ----------------------------------------
-- line 676 ----------------------------------------
         .               ///
         .               ///     // Put everything back together into a Vec
         .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
         .               ///     assert_eq!(rebuilt, [4, 5, 6]);
         .               /// }
         .               /// ```
         .               #[inline]
         .               #[unstable(feature = "allocator_api", issue = "32838")]
       273 ( 0.00%)      pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
   292,683 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
        42 ( 0.00%)      }
         .           
         .               /// Decomposes a `Vec<T>` into its raw components.
         .               ///
         .               /// Returns the raw pointer to the underlying data, the length of
         .               /// the vector (in elements), and the allocated capacity of the
         .               /// data (in elements). These are the same arguments in the same
         .               /// order as the arguments to [`from_raw_parts`].
         .               ///
-- line 694 ----------------------------------------
-- line 777 ----------------------------------------
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let vec: Vec<i32> = Vec::with_capacity(10);
         .               /// assert_eq!(vec.capacity(), 10);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
    25,164 ( 0.00%)      pub fn capacity(&self) -> usize {
   670,489 ( 0.01%)          self.buf.capacity()
    12,582 ( 0.00%)      }
         .           
         .               /// Reserves capacity for at least `additional` more elements to be inserted
         .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
         .               /// frequent reallocations. After calling `reserve`, capacity will be
         .               /// greater than or equal to `self.len() + additional`. Does nothing if
         .               /// capacity is already sufficient.
         .               ///
         .               /// # Panics
-- line 795 ----------------------------------------
-- line 800 ----------------------------------------
         .               ///
         .               /// ```
         .               /// let mut vec = vec![1];
         .               /// vec.reserve(10);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
    20,750 ( 0.00%)      pub fn reserve(&mut self, additional: usize) {
   998,915 ( 0.01%)          self.buf.reserve(self.len, additional);
     8,300 ( 0.00%)      }
         .           
         .               /// Reserves the minimum capacity for exactly `additional` more elements to
         .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
         .               /// capacity will be greater than or equal to `self.len() + additional`.
         .               /// Does nothing if the capacity is already sufficient.
         .               ///
         .               /// Note that the allocator may give the collection more space than it
         .               /// requests. Therefore, capacity can not be relied upon to be precisely
-- line 818 ----------------------------------------
-- line 829 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1];
         .               /// vec.reserve_exact(10);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn reserve_exact(&mut self, additional: usize) {
    21,456 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
         .               }
         .           
         .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
         .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
         .               /// frequent reallocations. After calling `try_reserve`, capacity will be
         .               /// greater than or equal to `self.len() + additional`. Does nothing if
         .               /// capacity is already sufficient.
         .               ///
-- line 845 ----------------------------------------
-- line 926 ----------------------------------------
         .               /// let mut vec = Vec::with_capacity(10);
         .               /// vec.extend([1, 2, 3]);
         .               /// assert_eq!(vec.capacity(), 10);
         .               /// vec.shrink_to_fit();
         .               /// assert!(vec.capacity() >= 3);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
       306 ( 0.00%)      pub fn shrink_to_fit(&mut self) {
         .                   // The capacity is never less than the length, and there's nothing to do when
         .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
         .                   // by only calling it with a greater capacity.
    71,113 ( 0.00%)          if self.capacity() > self.len {
    46,958 ( 0.00%)              self.buf.shrink_to_fit(self.len);
         .                   }
       204 ( 0.00%)      }
         .           
         .               /// Shrinks the capacity of the vector with a lower bound.
         .               ///
         .               /// The capacity will remain at least as large as both the length
         .               /// and the supplied value.
         .               ///
         .               /// If the current capacity is less than the lower limit, this is a no-op.
         .               ///
-- line 949 ----------------------------------------
-- line 987 ----------------------------------------
         .               /// vec.extend([1, 2, 3]);
         .               ///
         .               /// assert_eq!(vec.capacity(), 10);
         .               /// let slice = vec.into_boxed_slice();
         .               /// assert_eq!(slice.into_vec().capacity(), 3);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
       204 ( 0.00%)      pub fn into_boxed_slice(mut self) -> Box<[T], A> {
         .                   unsafe {
       612 ( 0.00%)              self.shrink_to_fit();
    20,556 ( 0.00%)              let me = ManuallyDrop::new(self);
     1,020 ( 0.00%)              let buf = ptr::read(&me.buf);
       510 ( 0.00%)              let len = me.len();
     1,326 ( 0.00%)              buf.into_box(len).assume_init()
       102 ( 0.00%)          }
       204 ( 0.00%)      }
         .           
         .               /// Shortens the vector, keeping the first `len` elements and dropping
         .               /// the rest.
         .               ///
         .               /// If `len` is greater than the vector's current length, this has no
         .               /// effect.
         .               ///
         .               /// The [`drain`] method can emulate `truncate`, but causes the excess
-- line 1011 ----------------------------------------
-- line 1040 ----------------------------------------
         .               /// let mut vec = vec![1, 2, 3];
         .               /// vec.truncate(0);
         .               /// assert_eq!(vec, []);
         .               /// ```
         .               ///
         .               /// [`clear`]: Vec::clear
         .               /// [`drain`]: Vec::drain
         .               #[stable(feature = "rust1", since = "1.0.0")]
   518,243 ( 0.01%)      pub fn truncate(&mut self, len: usize) {
         .                   // This is safe because:
         .                   //
         .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
         .                   //   case avoids creating an invalid slice, and
         .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
         .                   //   such that no value will be dropped twice in case `drop_in_place`
         .                   //   were to panic once (if it panics twice, the program aborts).
         .                   unsafe {
         .                       // Note: It's intentional that this is `>` and not `>=`.
         .                       //       Changing it to `>=` has negative performance
         .                       //       implications in some cases. See #78884 for more.
   441,653 ( 0.00%)              if len > self.len {
         .                           return;
         .                       }
         .                       let remaining_len = self.len - len;
         .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
   490,945 ( 0.01%)              self.len = len;
    11,658 ( 0.00%)              ptr::drop_in_place(s);
         .                   }
   621,872 ( 0.01%)      }
         .           
         .               /// Extracts a slice containing the entire vector.
         .               ///
         .               /// Equivalent to `&s[..]`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 1076 ----------------------------------------
-- line 1123 ----------------------------------------
         .               ///         assert_eq!(*x_ptr.add(i), 1 << i);
         .               ///     }
         .               /// }
         .               /// ```
         .               ///
         .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
         .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
         .               #[inline]
   130,948 ( 0.00%)      pub fn as_ptr(&self) -> *const T {
         .                   // We shadow the slice method of the same name to avoid going through
         .                   // `deref`, which creates an intermediate reference.
11,664,473 ( 0.13%)          let ptr = self.buf.ptr();
         .                   unsafe {
    65,474 ( 0.00%)              assume(!ptr.is_null());
         .                   }
         .                   ptr
   130,948 ( 0.00%)      }
         .           
         .               /// Returns an unsafe mutable pointer to the vector's buffer.
         .               ///
         .               /// The caller must ensure that the vector outlives the pointer this
         .               /// function returns, or else it will end up pointing to garbage.
         .               /// Modifying the vector may cause its buffer to be reallocated,
         .               /// which would also make any pointers to it invalid.
         .               ///
-- line 1147 ----------------------------------------
-- line 1159 ----------------------------------------
         .               ///         *x_ptr.add(i) = i as i32;
         .               ///     }
         .               ///     x.set_len(size);
         .               /// }
         .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
         .               /// ```
         .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
         .               #[inline]
   815,704 ( 0.01%)      pub fn as_mut_ptr(&mut self) -> *mut T {
         .                   // We shadow the slice method of the same name to avoid going through
         .                   // `deref_mut`, which creates an intermediate reference.
 9,515,372 ( 0.11%)          let ptr = self.buf.ptr();
         .                   unsafe {
   407,852 ( 0.00%)              assume(!ptr.is_null());
         .                   }
         .                   ptr
   815,704 ( 0.01%)      }
         .           
         .               /// Returns a reference to the underlying allocator.
         .               #[unstable(feature = "allocator_api", issue = "32838")]
         .               #[inline]
    10,608 ( 0.00%)      pub fn allocator(&self) -> &A {
    10,608 ( 0.00%)          self.buf.allocator()
    10,608 ( 0.00%)      }
         .           
         .               /// Forces the length of the vector to `new_len`.
         .               ///
         .               /// This is a low-level operation that maintains none of the normal
         .               /// invariants of the type. Normally changing the length of a vector
         .               /// is done using one of the safe operations instead, such as
         .               /// [`truncate`], [`resize`], [`extend`], or [`clear`].
         .               ///
-- line 1190 ----------------------------------------
-- line 1256 ----------------------------------------
         .               ///     vec.set_len(0);
         .               /// }
         .               /// ```
         .               ///
         .               /// Normally, here, one would use [`clear`] instead to correctly drop
         .               /// the contents and thus not leak memory.
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
    93,903 ( 0.00%)      pub unsafe fn set_len(&mut self, new_len: usize) {
         .                   debug_assert!(new_len <= self.capacity());
         .           
 1,591,021 ( 0.02%)          self.len = new_len;
    96,592 ( 0.00%)      }
         .           
         .               /// Removes an element from the vector and returns it.
         .               ///
         .               /// The removed element is replaced by the last element of the vector.
         .               ///
         .               /// This does not preserve ordering, but is *O*(1).
         .               /// If you need to preserve the element order, use [`remove`] instead.
         .               ///
-- line 1276 ----------------------------------------
-- line 1329 ----------------------------------------
         .               /// let mut vec = vec![1, 2, 3];
         .               /// vec.insert(1, 4);
         .               /// assert_eq!(vec, [1, 4, 2, 3]);
         .               /// vec.insert(4, 5);
         .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
    13,678 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
         .                   #[cold]
         .                   #[inline(never)]
         .                   fn assert_failed(index: usize, len: usize) -> ! {
         .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
         .                   }
         .           
     2,404 ( 0.00%)          let len = self.len();
     8,288 ( 0.00%)          if index > len {
         .                       assert_failed(index, len);
         .                   }
         .           
         .                   // space for the new element
    12,638 ( 0.00%)          if len == self.buf.capacity() {
         .                       self.reserve(1);
         .                   }
         .           
         .                   unsafe {
         .                       // infallible
         .                       // The spot to put the new value
         .                       {
         .                           let p = self.as_mut_ptr().add(index);
         .                           // Shift everything over to make space. (Duplicating the
         .                           // `index`th element into two consecutive places.)
    17,313 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
         .                           // Write it in, overwriting the first copy of the `index`th
         .                           // element.
         .                           ptr::write(p, element);
         .                       }
    12,442 ( 0.00%)              self.set_len(len + 1);
         .                   }
    11,724 ( 0.00%)      }
         .           
         .               /// Removes and returns the element at position `index` within the vector,
         .               /// shifting all elements after it to the left.
         .               ///
         .               /// Note: Because this shifts over the remaining elements, it has a
         .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
         .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
         .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1387 ----------------------------------------
         .               ///
         .               /// ```
         .               /// let mut v = vec![1, 2, 3];
         .               /// assert_eq!(v.remove(1), 2);
         .               /// assert_eq!(v, [1, 3]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[track_caller]
    30,702 ( 0.00%)      pub fn remove(&mut self, index: usize) -> T {
         .                   #[cold]
         .                   #[inline(never)]
         .                   #[track_caller]
         .                   fn assert_failed(index: usize, len: usize) -> ! {
         .                       panic!("removal index (is {}) should be < len (is {})", index, len);
         .                   }
         .           
    15,694 ( 0.00%)          let len = self.len();
    23,367 ( 0.00%)          if index >= len {
         .                       assert_failed(index, len);
         .                   }
         .                   unsafe {
         .                       // infallible
         .                       let ret;
         .                       {
         .                           // the place we are taking from.
    12,110 ( 0.00%)                  let ptr = self.as_mut_ptr().add(index);
         .                           // copy it out, unsafely having a copy of the value on
         .                           // the stack and in the vector at the same time.
    58,336 ( 0.00%)                  ret = ptr::read(ptr);
         .           
         .                           // Shift everything down to fill in that spot.
    46,053 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
         .                       }
    25,788 ( 0.00%)              self.set_len(len - 1);
     2,422 ( 0.00%)              ret
         .                   }
    31,794 ( 0.00%)      }
         .           
         .               /// Retains only the elements specified by the predicate.
         .               ///
         .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
         .               /// This method operates in place, visiting each element exactly once in the
         .               /// original order, and preserves the order of the retained elements.
         .               ///
         .               /// # Examples
-- line 1431 ----------------------------------------
-- line 1442 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1, 2, 3, 4, 5];
         .               /// let keep = [false, true, true, false, true];
         .               /// let mut iter = keep.iter();
         .               /// vec.retain(|_| *iter.next().unwrap());
         .               /// assert_eq!(vec, [2, 3, 5]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
   874,794 ( 0.01%)      pub fn retain<F>(&mut self, mut f: F)
         .               where
         .                   F: FnMut(&T) -> bool,
         .               {
    38,067 ( 0.00%)          self.retain_mut(|elem| f(elem));
   852,264 ( 0.01%)      }
         .           
         .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
         .               ///
         .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
         .               /// This method operates in place, visiting each element exactly once in the
         .               /// original order, and preserves the order of the retained elements.
         .               ///
         .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
         .               /// });
         .               /// assert_eq!(vec, [2, 3, 4]);
         .               /// ```
         .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
         .               pub fn retain_mut<F>(&mut self, mut f: F)
         .               where
         .                   F: FnMut(&mut T) -> bool,
         .               {
   111,139 ( 0.00%)          let original_len = self.len();
         .                   // Avoid double drop if the drop guard is not executed,
         .                   // since we may make some holes during the process.
         .                   unsafe { self.set_len(0) };
         .           
         .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
         .                   //      |<-              processed len   ->| ^- next to check
         .                   //                  |<-  deleted cnt     ->|
         .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
         .                       v: &'a mut Vec<T, A>,
         .                       processed_len: usize,
         .                       deleted_cnt: usize,
         .                       original_len: usize,
         .                   }
         .           
         .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
         .                       fn drop(&mut self) {
   102,982 ( 0.00%)                  if self.deleted_cnt > 0 {
         .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
         .                               unsafe {
         .                                   ptr::copy(
         .                                       self.v.as_ptr().add(self.processed_len),
    84,157 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
         .                                       self.original_len - self.processed_len,
         .                                   );
         .                               }
         .                           }
         .                           // SAFETY: After filling holes, all items are in contiguous memory.
         .                           unsafe {
         2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
         .                           }
         .                       }
         .                   }
         .           
         .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
         .           
         .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
         .                       original_len: usize,
         .                       f: &mut F,
         .                       g: &mut BackshiftOnDrop<'_, T, A>,
         .                   ) where
         .                       F: FnMut(&mut T) -> bool,
         .                   {
 1,488,096 ( 0.02%)              while g.processed_len != original_len {
         .                           // SAFETY: Unchecked element must be valid.
         .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
   423,543 ( 0.00%)                  if !f(cur) {
         .                               // Advance early to avoid double drop if `drop_in_place` panicked.
    94,082 ( 0.00%)                      g.processed_len += 1;
    54,592 ( 0.00%)                      g.deleted_cnt += 1;
         .                               // SAFETY: We never touch this element again after dropped.
     9,609 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
         .                               // We already advanced the counter.
         .                               if DELETED {
         .                                   continue;
         .                               } else {
         .                                   break;
         .                               }
         .                           }
         .                           if DELETED {
         .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
         .                               // We use copy for move, and never touch this element again.
         .                               unsafe {
    72,444 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
         .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
         .                               }
         .                           }
    70,512 ( 0.00%)                  g.processed_len += 1;
         .                       }
         .                   }
         .           
         .                   // Stage 1: Nothing was deleted.
         .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
         .           
         .                   // Stage 2: Some elements were deleted.
         .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
         .               ///
         .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
         .               ///
         .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
         .               /// ```
         .               #[stable(feature = "dedup_by", since = "1.16.0")]
    61,600 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
         .               where
         .                   F: FnMut(&mut T, &mut T) -> bool,
         .               {
    11,837 ( 0.00%)          let len = self.len();
    28,922 ( 0.00%)          if len <= 1 {
         .                       return;
         .                   }
         .           
         .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
         .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
         .                       /* Offset of the element we want to check if it is duplicate */
         .                       read: usize,
         .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
         .                   let ptr = gap.vec.as_mut_ptr();
         .           
         .                   /* Drop items while going through Vec, it should be more efficient than
         .                    * doing slice partition_dedup + truncate */
         .           
         .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
         .                    * are always in-bounds and read_ptr never aliases prev_ptr */
         .                   unsafe {
    30,053 ( 0.00%)              while gap.read < len {
         .                           let read_ptr = ptr.add(gap.read);
         .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
         .           
     2,646 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
         .                               // Increase `gap.read` now since the drop may panic.
         .                               gap.read += 1;
         .                               /* We have found duplicate, drop it in-place */
         .                               ptr::drop_in_place(read_ptr);
         .                           } else {
         .                               let write_ptr = ptr.add(gap.write);
         .           
         .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
         .                                * have to use `copy` or conditional `copy_nonoverlapping`.
         .                                * Looks like the first option is faster. */
         .                               ptr::copy(read_ptr, write_ptr, 1);
         .           
         .                               /* We have filled that place, so go further */
    17,063 ( 0.00%)                      gap.write += 1;
         .                               gap.read += 1;
         .                           }
         .                       }
         .           
         .                       /* Technically we could let `gap` clean up with its Drop, but
         .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
         .                        * the codegen, so we just do it manually */
         .                       gap.vec.set_len(gap.write);
         .                       mem::forget(gap);
         .                   }
    70,400 ( 0.00%)      }
         .           
         .               /// Appends an element to the back of a collection.
         .               ///
         .               /// # Panics
         .               ///
         .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
         .               ///
         .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1, 2];
         .               /// vec.push(3);
         .               /// assert_eq!(vec, [1, 2, 3]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
 1,899,518 ( 0.02%)      pub fn push(&mut self, value: T) {
         .                   // This will panic or abort if we would allocate > isize::MAX bytes
         .                   // or if the length increment would overflow for zero-sized types.
13,854,874 ( 0.15%)          if self.len == self.buf.capacity() {
 1,029,503 ( 0.01%)              self.buf.reserve_for_push(self.len);
         .                   }
         .                   unsafe {
 3,592,904 ( 0.04%)              let end = self.as_mut_ptr().add(self.len);
 1,763,918 ( 0.02%)              ptr::write(end, value);
18,369,545 ( 0.20%)              self.len += 1;
         .                   }
   638,100 ( 0.01%)      }
         .           
         .               /// Removes the last element from a vector and returns it, or [`None`] if it
         .               /// is empty.
         .               ///
         .               /// If you'd like to pop the first element, consider using
         .               /// [`VecDeque::pop_front`] instead.
         .               ///
         .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1747 ----------------------------------------
         .               ///
         .               /// ```
         .               /// let mut vec = vec![1, 2, 3];
         .               /// assert_eq!(vec.pop(), Some(3));
         .               /// assert_eq!(vec, [1, 2]);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
    10,480 ( 0.00%)      pub fn pop(&mut self) -> Option<T> {
 3,166,297 ( 0.04%)          if self.len == 0 {
        27 ( 0.00%)              None
         .                   } else {
         .                       unsafe {
 2,228,137 ( 0.02%)                  self.len -= 1;
   572,682 ( 0.01%)                  Some(ptr::read(self.as_ptr().add(self.len())))
         .                       }
         .                   }
     4,192 ( 0.00%)      }
         .           
         .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
         .               ///
         .               /// # Panics
         .               ///
         .               /// Panics if the number of elements in the vector overflows a `usize`.
         .               ///
         .               /// # Examples
-- line 1772 ----------------------------------------
-- line 1776 ----------------------------------------
         .               /// let mut vec2 = vec![4, 5, 6];
         .               /// vec.append(&mut vec2);
         .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
         .               /// assert_eq!(vec2, []);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "append", since = "1.4.0")]
     1,995 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
         .                   unsafe {
         .                       self.append_elements(other.as_slice() as _);
         .                       other.set_len(0);
         .                   }
     1,710 ( 0.00%)      }
         .           
         .               /// Appends elements to `Self` from other buffer.
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
    24,010 ( 0.00%)      unsafe fn append_elements(&mut self, other: *const [T]) {
     2,401 ( 0.00%)          let count = unsafe { (*other).len() };
     2,401 ( 0.00%)          self.reserve(count);
   157,871 ( 0.00%)          let len = self.len();
     7,763 ( 0.00%)          unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
 1,002,150 ( 0.01%)          self.len += count;
     4,802 ( 0.00%)      }
         .           
         .               /// Creates a draining iterator that removes the specified range in the vector
         .               /// and yields the removed items.
         .               ///
         .               /// When the iterator **is** dropped, all elements in the range are removed
         .               /// from the vector, even if the iterator was not fully consumed. If the
         .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
         .               /// unspecified how many elements are removed.
-- line 1808 ----------------------------------------
-- line 1820 ----------------------------------------
         .               /// assert_eq!(v, &[1]);
         .               /// assert_eq!(u, &[2, 3]);
         .               ///
         .               /// // A full range clears the vector
         .               /// v.drain(..);
         .               /// assert_eq!(v, &[]);
         .               /// ```
         .               #[stable(feature = "drain", since = "1.6.0")]
    68,726 ( 0.00%)      pub fn drain<R>(&mut self, range: R) -> Drain<'_, T, A>
         .               where
         .                   R: RangeBounds<usize>,
         .               {
         .                   // Memory safety
         .                   //
         .                   // When the Drain is first created, it shortens the length of
         .                   // the source vector to make sure no uninitialized or moved-from elements
         .                   // are accessible at all if the Drain's destructor never gets to run.
         .                   //
         .                   // Drain will ptr::read out the values to remove.
         .                   // When finished, remaining tail of the vec is copied back to cover
         .                   // the hole, and the vector length is restored to the new length.
         .                   //
   131,004 ( 0.00%)          let len = self.len();
   147,270 ( 0.00%)          let Range { start, end } = slice::range(range, ..len);
         .           
         .                   unsafe {
         .                       // set self.vec length's to start, to be safe in case Drain is leaked
    29,454 ( 0.00%)              self.set_len(start);
         .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
         .                       // whole Drain iterator (like &mut T).
   161,839 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
    66,624 ( 0.00%)              Drain {
         .                           tail_start: end,
    52,292 ( 0.00%)                  tail_len: len - end,
    49,090 ( 0.00%)                  iter: range_slice.iter(),
    39,272 ( 0.00%)                  vec: NonNull::from(self),
         .                       }
         .                   }
    19,636 ( 0.00%)      }
         .           
         .               /// Clears the vector, removing all values.
         .               ///
         .               /// Note that this method has no effect on the allocated capacity
         .               /// of the vector.
         .               ///
         .               /// # Examples
         .               ///
-- line 1866 ----------------------------------------
-- line 1869 ----------------------------------------
         .               ///
         .               /// v.clear();
         .               ///
         .               /// assert!(v.is_empty());
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn clear(&mut self) {
   925,260 ( 0.01%)          self.truncate(0)
         .               }
         .           
         .               /// Returns the number of elements in the vector, also referred to
         .               /// as its 'length'.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let a = vec![1, 2, 3];
         .               /// assert_eq!(a.len(), 3);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
 1,042,028 ( 0.01%)      pub fn len(&self) -> usize {
   521,014 ( 0.01%)          self.len
 1,042,028 ( 0.01%)      }
         .           
         .               /// Returns `true` if the vector contains no elements.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let mut v = Vec::new();
         .               /// assert!(v.is_empty());
         .               ///
         .               /// v.push(1);
         .               /// assert!(!v.is_empty());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
    28,350 ( 0.00%)      pub fn is_empty(&self) -> bool {
 1,158,544 ( 0.01%)          self.len() == 0
    56,700 ( 0.00%)      }
         .           
         .               /// Splits the collection into two at the given index.
         .               ///
         .               /// Returns a newly allocated vector containing the elements in the range
         .               /// `[at, len)`. After the call, the original vector will be left containing
         .               /// the elements `[0, at)` with its previous capacity unchanged.
         .               ///
         .               /// # Panics
-- line 1917 ----------------------------------------
-- line 1935 ----------------------------------------
         .                   A: Clone,
         .               {
         .                   #[cold]
         .                   #[inline(never)]
         .                   fn assert_failed(at: usize, len: usize) -> ! {
         .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
         .                   }
         .           
     4,291 ( 0.00%)          if at > self.len() {
         .                       assert_failed(at, self.len());
         .                   }
         .           
     3,287 ( 0.00%)          if at == 0 {
         .                       // the new vector can take over the original buffer and avoid the copy
         .                       return mem::replace(
         .                           self,
         .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
         .                       );
         .                   }
         .           
         .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
         .               ///
         .               /// let mut vec = vec![];
         .               /// let mut p = 1;
         .               /// vec.resize_with(4, || { p *= 2; p });
         .               /// assert_eq!(vec, [2, 4, 8, 16]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
    87,245 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
         .               where
         .                   F: FnMut() -> T,
         .               {
    11,873 ( 0.00%)          let len = self.len();
    23,746 ( 0.00%)          if new_len > len {
    85,363 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
         .                   } else {
         .                       self.truncate(new_len);
         .                   }
    75,372 ( 0.00%)      }
         .           
         .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
         .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
         .               /// `'a`. If the type has only static references, or none at all, then this
         .               /// may be chosen to be `'static`.
         .               ///
         .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
         .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2064 ----------------------------------------
         .               /// unsafe {
         .               ///     v.set_len(3);
         .               /// }
         .               ///
         .               /// assert_eq!(&v, &[0, 1, 2]);
         .               /// ```
         .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
         .               #[inline]
    16,110 ( 0.00%)      pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
         .                   // Note:
         .                   // This method is not implemented in terms of `split_at_spare_mut`,
         .                   // to prevent invalidation of pointers to the buffer.
         .                   unsafe {
    21,480 ( 0.00%)              slice::from_raw_parts_mut(
    37,596 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
    26,979 ( 0.00%)                  self.buf.capacity() - self.len,
         .                       )
         .                   }
    10,740 ( 0.00%)      }
         .           
         .               /// Returns vector content as a slice of `T`, along with the remaining spare
         .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
         .               ///
         .               /// The returned spare capacity slice can be used to fill the vector with data
         .               /// (e.g. by reading from a file) before marking the data as initialized using
         .               /// the [`set_len`] method.
         .               ///
-- line 2090 ----------------------------------------
-- line 2189 ----------------------------------------
         .               /// assert_eq!(vec, ["hello", "world", "world"]);
         .               ///
         .               /// let mut vec = vec![1, 2, 3, 4];
         .               /// vec.resize(2, 0);
         .               /// assert_eq!(vec, [1, 2]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "vec_resize", since = "1.5.0")]
    79,560 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
     7,956 ( 0.00%)          let len = self.len();
         .           
    23,868 ( 0.00%)          if new_len > len {
    17,382 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
         .                   } else {
         .                       self.truncate(new_len);
         .                   }
    15,252 ( 0.00%)      }
         .           
         .               /// Clones and appends all elements in a slice to the `Vec`.
         .               ///
         .               /// Iterates over the slice `other`, clones each element, and then appends
         .               /// it to this `Vec`. The `other` slice is traversed in-order.
         .               ///
         .               /// Note that this function is same as [`extend`] except that it is
         .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2220 ----------------------------------------
         .               /// let mut vec = vec![1];
         .               /// vec.extend_from_slice(&[2, 3, 4]);
         .               /// assert_eq!(vec, [1, 2, 3, 4]);
         .               /// ```
         .               ///
         .               /// [`extend`]: Vec::extend
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "vec_extend_from_slice", since = "1.6.0")]
    26,411 ( 0.00%)      pub fn extend_from_slice(&mut self, other: &[T]) {
     9,604 ( 0.00%)          self.spec_extend(other.iter())
     4,802 ( 0.00%)      }
         .           
         .               /// Copies elements from `src` range to the end of the vector.
         .               ///
         .               /// # Panics
         .               ///
         .               /// Panics if the starting point is greater than the end point or if
         .               /// the end point is greater than the length of the vector.
         .               ///
-- line 2238 ----------------------------------------
-- line 2271 ----------------------------------------
         .           trait ExtendWith<T> {
         .               fn next(&mut self) -> T;
         .               fn last(self) -> T;
         .           }
         .           
         .           struct ExtendElement<T>(T);
         .           impl<T: Clone> ExtendWith<T> for ExtendElement<T> {
         .               fn next(&mut self) -> T {
     8,355 ( 0.00%)          self.0.clone()
         .               }
         .               fn last(self) -> T {
         .                   self.0
         .               }
         .           }
         .           
         .           struct ExtendFunc<F>(F);
         .           impl<T, F: FnMut() -> T> ExtendWith<T> for ExtendFunc<F> {
-- line 2287 ----------------------------------------
-- line 2291 ----------------------------------------
         .               fn last(mut self) -> T {
         .                   (self.0)()
         .               }
         .           }
         .           
         .           impl<T, A: Allocator> Vec<T, A> {
         .               #[cfg(not(no_global_oom_handling))]
         .               /// Extend the vector by `n` values, using the given generator.
   683,472 ( 0.01%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
         .                   self.reserve(n);
         .           
         .                   unsafe {
    17,186 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
         .                       // Use SetLenOnDrop to work around bug where compiler
         .                       // might not realize the store through `ptr` through self.set_len()
         .                       // don't alias.
         .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
         .           
         .                       // Write all elements except the last one
         .                       for _ in 1..n {
         .                           ptr::write(ptr, value.next());
         .                           ptr = ptr.offset(1);
         .                           // Increment the length in every step in case next() panics
         .                           local_len.increment_len(1);
         .                       }
         .           
   685,353 ( 0.01%)              if n > 0 {
         .                           // We can write the last element directly without cloning needlessly
         .                           ptr::write(ptr, value.last());
         .                           local_len.increment_len(1);
         .                       }
         .           
         .                       // len set by scope guard
         .                   }
   542,629 ( 0.01%)      }
         .           }
         .           
         .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
         .               /// Removes consecutive repeated elements in the vector according to the
         .               /// [`PartialEq`] trait implementation.
         .               ///
         .               /// If the vector is sorted, this removes all duplicates.
         .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
         .               ///
         .               /// vec.dedup();
         .               ///
         .               /// assert_eq!(vec, [1, 2, 3, 2]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               pub fn dedup(&mut self) {
     8,801 ( 0.00%)          self.dedup_by(|a, b| a == b)
         .               }
         .           }
         .           
         .           ////////////////////////////////////////////////////////////////////////////////
         .           // Internal methods and functions
         .           ////////////////////////////////////////////////////////////////////////////////
         .           
         .           #[doc(hidden)]
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
   146,852 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
   795,747 ( 0.01%)      <T as SpecFromElem>::from_elem(elem, n, Global)
   167,643 ( 0.00%)  }
         .           
         .           #[doc(hidden)]
         .           #[cfg(not(no_global_oom_handling))]
         .           #[unstable(feature = "allocator_api", issue = "32838")]
         .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
         .               <T as SpecFromElem>::from_elem(elem, n, alloc)
         .           }
         .           
-- line 2367 ----------------------------------------
-- line 2423 ----------------------------------------
         .           ////////////////////////////////////////////////////////////////////////////////
         .           // Common trait implementations for Vec
         .           ////////////////////////////////////////////////////////////////////////////////
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
         .               type Target = [T];
         .           
   190,134 ( 0.00%)      fn deref(&self) -> &[T] {
18,120,891 ( 0.20%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
   126,819 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
     4,962 ( 0.00%)      fn deref_mut(&mut self) -> &mut [T] {
 4,534,937 ( 0.05%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
     3,308 ( 0.00%)      }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           trait SpecCloneFrom {
         .               fn clone_from(this: &mut Self, other: &Self);
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
-- line 2448 ----------------------------------------
-- line 2468 ----------------------------------------
         .                   this.extend_from_slice(other);
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
         .               #[cfg(not(test))]
   688,542 ( 0.01%)      fn clone(&self) -> Self {
    18,895 ( 0.00%)          let alloc = self.allocator().clone();
    34,013 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
   818,610 ( 0.01%)      }
         .           
         .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
         .               // required for this method definition, is not available. Instead use the
         .               // `slice::to_vec`  function which is only available with cfg(test)
         .               // NB see the slice::hack module in slice.rs for more information
         .               #[cfg(test)]
         .               fn clone(&self) -> Self {
         .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2517 ----------------------------------------
         .           #[rustc_on_unimplemented(
         .               message = "vector indices are of type `usize` or ranges of `usize`",
         .               label = "vector indices are of type `usize` or ranges of `usize`"
         .           )]
         .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
         .               type Output = I::Output;
         .           
         .               #[inline]
        55 ( 0.00%)      fn index(&self, index: I) -> &Self::Output {
   509,268 ( 0.01%)          Index::index(&**self, index)
        22 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_on_unimplemented(
         .               message = "vector indices are of type `usize` or ranges of `usize`",
         .               label = "vector indices are of type `usize` or ranges of `usize`"
         .           )]
         .           impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {
         .               #[inline]
         .               fn index_mut(&mut self, index: I) -> &mut Self::Output {
       124 ( 0.00%)          IndexMut::index_mut(&mut **self, index)
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T> FromIterator<T> for Vec<T> {
         .               #[inline]
     4,845 ( 0.00%)      fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
 3,714,980 ( 0.04%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
     3,214 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
         .               type Item = T;
         .               type IntoIter = IntoIter<T, A>;
         .           
         .               /// Creates a consuming iterator, that is, one that moves each value out of
-- line 2556 ----------------------------------------
-- line 2562 ----------------------------------------
         .               /// ```
         .               /// let v = vec!["a".to_string(), "b".to_string()];
         .               /// for s in v.into_iter() {
         .               ///     // s has type String, not &String
         .               ///     println!("{}", s);
         .               /// }
         .               /// ```
         .               #[inline]
     4,575 ( 0.00%)      fn into_iter(self) -> IntoIter<T, A> {
         .                   unsafe {
 1,478,027 ( 0.02%)              let mut me = ManuallyDrop::new(self);
     3,050 ( 0.00%)              let alloc = ptr::read(me.allocator());
     7,625 ( 0.00%)              let begin = me.as_mut_ptr();
     4,575 ( 0.00%)              let end = if mem::size_of::<T>() == 0 {
         .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
         .                       } else {
     7,625 ( 0.00%)                  begin.add(me.len()) as *const T
         .                       };
     1,525 ( 0.00%)              let cap = me.buf.capacity();
   505,979 ( 0.01%)              IntoIter {
     6,100 ( 0.00%)                  buf: NonNull::new_unchecked(begin),
         .                           phantom: PhantomData,
         .                           cap,
         .                           alloc,
         .                           ptr: begin,
     1,525 ( 0.00%)                  end,
         .                       }
         .                   }
     3,050 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<'a, T, A: Allocator> IntoIterator for &'a Vec<T, A> {
         .               type Item = &'a T;
         .               type IntoIter = slice::Iter<'a, T>;
         .           
       282 ( 0.00%)      fn into_iter(self) -> slice::Iter<'a, T> {
       915 ( 0.00%)          self.iter()
       282 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
         .               type Item = &'a mut T;
         .               type IntoIter = slice::IterMut<'a, T>;
         .           
         .               fn into_iter(self) -> slice::IterMut<'a, T> {
     1,354 ( 0.00%)          self.iter_mut()
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
         .               #[inline]
     4,688 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
 1,772,782 ( 0.02%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
     4,688 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn extend_one(&mut self, item: T) {
       632 ( 0.00%)          self.push(item);
         .               }
         .           
         .               #[inline]
         .               fn extend_reserve(&mut self, additional: usize) {
         .                   self.reserve(additional);
         .               }
         .           }
         .           
         .           impl<T, A: Allocator> Vec<T, A> {
         .               // leaf method to which various SpecFrom/SpecExtend implementations delegate when
         .               // they have no further optimizations to apply
         .               #[cfg(not(no_global_oom_handling))]
     6,392 ( 0.00%)      fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
         .                   // This is the case for a general iterator.
         .                   //
         .                   // This function should be the moral equivalent of:
         .                   //
         .                   //      for item in iterator {
         .                   //          self.push(item);
         .                   //      }
   397,458 ( 0.00%)          while let Some(element) = iterator.next() {
   105,104 ( 0.00%)              let len = self.len();
   848,258 ( 0.01%)              if len == self.capacity() {
     7,723 ( 0.00%)                  let (lower, _) = iterator.size_hint();
     1,846 ( 0.00%)                  self.reserve(lower.saturating_add(1));
         .                       }
         .                       unsafe {
    49,314 ( 0.00%)                  ptr::write(self.as_mut_ptr().add(len), element);
         .                           // Since next() executes user code which can panic we have to bump the length
         .                           // after each step.
         .                           // NB can't overflow since we would have had to alloc the address space
   635,278 ( 0.01%)                  self.set_len(len + 1);
         .                       }
     6,159 ( 0.00%)          }
    12,550 ( 0.00%)      }
         .           
         .               /// Creates a splicing iterator that replaces the specified range in the vector
         .               /// with the given `replace_with` iterator and yields the removed items.
         .               /// `replace_with` does not need to be the same length as `range`.
         .               ///
         .               /// `range` is removed even if the iterator is not consumed until the end.
         .               ///
         .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2693 ----------------------------------------
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "vec_splice", since = "1.21.0")]
         .               pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, A>
         .               where
         .                   R: RangeBounds<usize>,
         .                   I: IntoIterator<Item = T>,
         .               {
    22,831 ( 0.00%)          Splice { drain: self.drain(range), replace_with: replace_with.into_iter() }
         .               }
         .           
         .               /// Creates an iterator which uses a closure to determine if an element should be removed.
         .               ///
         .               /// If the closure returns true, then the element is removed and yielded.
         .               /// If the closure returns false, the element will remain in the vector and will not be yielded
         .               /// by the iterator.
         .               ///
-- line 2709 ----------------------------------------
-- line 2745 ----------------------------------------
         .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
         .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
         .               /// ```
         .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
         .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
         .               where
         .                   F: FnMut(&mut T) -> bool,
         .               {
     5,077 ( 0.00%)          let old_len = self.len();
         .           
         .                   // Guard against us getting leaked (leak amplification)
         .                   unsafe {
         .                       self.set_len(0);
         .                   }
         .           
     9,504 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
         .               }
         .           }
         .           
         .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
         .           ///
         .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
         .           /// append the entire slice at once.
         .           ///
         .           /// [`copy_from_slice`]: slice::copy_from_slice
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "extend_ref", since = "1.2.0")]
         .           impl<'a, T: Copy + 'a, A: Allocator + 'a> Extend<&'a T> for Vec<T, A> {
    11,984 ( 0.00%)      fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {
         .                   self.spec_extend(iter.into_iter())
     8,988 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn extend_one(&mut self, &item: &'a T) {
         .                   self.push(item);
         .               }
         .           
         .               #[inline]
         .               fn extend_reserve(&mut self, additional: usize) {
-- line 2783 ----------------------------------------
-- line 2796 ----------------------------------------
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: Eq, A: Allocator> Eq for Vec<T, A> {}
         .           
         .           /// Implements ordering of vectors, [lexicographically](core::cmp::Ord#lexicographical-comparison).
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: Ord, A: Allocator> Ord for Vec<T, A> {
         .               #[inline]
    17,264 ( 0.00%)      fn cmp(&self, other: &Self) -> Ordering {
    34,528 ( 0.00%)          Ord::cmp(&**self, &**other)
     8,632 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
 2,217,206 ( 0.02%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // use drop for [T]
         .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
         .                       // could avoid questions of validity in certain cases
 1,248,463 ( 0.01%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
         .                   }
         .                   // RawVec handles deallocation
 2,532,782 ( 0.03%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
         .           impl<T> const Default for Vec<T> {
         .               /// Creates an empty `Vec<T>`.
         .               fn default() -> Vec<T> {
         .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
         .               /// newly-allocated buffer with exactly the right capacity.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
         .               /// ```
         .               fn from(v: Vec<T, A>) -> Self {
         4 ( 0.00%)          v.into_boxed_slice()
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl From<&str> for Vec<u8> {
         .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
         .               ///
-- line 2992 ----------------------------------------

 8,442,768 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/util.rs
--------------------------------------------------------------------------------
Ir                 

-- line 27 ----------------------------------------
        .                   match *self {
        .                       UnexpectedEof => write!(f, "unexpected end of stream"),
        .                       Utf8(ref e) => write!(f, "UTF-8 decoding error: {}", e),
        .                       Io(ref e) => write!(f, "I/O error: {}", e)
        .                   }
        .               }
        .           }
        .           
1,947,554 ( 0.02%)  pub fn next_char_from<R: Read>(source: &mut R) -> Result<Option<char>, CharReadError> {
        .               const MAX_CODEPOINT_LEN: usize = 4;
        .           
  834,666 ( 0.01%)      let mut bytes = source.bytes();
1,112,888 ( 0.01%)      let mut buf = [0u8; MAX_CODEPOINT_LEN];
  278,222 ( 0.00%)      let mut pos = 0;
        .           
        .               loop {
3,895,276 ( 0.04%)          let next = match bytes.next() {
1,112,936 ( 0.01%)              Some(Ok(b)) => b,
        .                       Some(Err(e)) => return Err(e.into()),
        .                       None if pos == 0 => return Ok(None),
        .                       None => return Err(CharReadError::UnexpectedEof)
2,782,340 ( 0.03%)          };
1,947,638 ( 0.02%)          buf[pos] = next;
2,225,872 ( 0.02%)          pos += 1;
        .           
3,895,300 ( 0.04%)          match str::from_utf8(&buf[..pos]) {
3,616,886 ( 0.04%)              Ok(s) => return Ok(s.chars().next()),  // always Some(..)
       24 ( 0.00%)              Err(_) if pos < MAX_CODEPOINT_LEN => {},
        .                       Err(e) => return Err(e.into())
        .                   }
        .               }
  556,444 ( 0.01%)  }
        .           
        .           #[cfg(test)]
        .           mod tests {
        .               #[test]
        .               fn test_next_char_from() {
        .                   use std::io;
        .                   use std::error::Error;
        .           
-- line 66 ----------------------------------------

2,225,836 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/util.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                  

-- line 57 ----------------------------------------
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
     2,404 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
     1,420 ( 0.00%)              from_str_radix(src, radix)
     3,606 ( 0.00%)          }
         .           
         .                   /// Returns the number of ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[doc(alias = "popcount")]
         .                   #[doc(alias = "popcnt")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn count_ones(self) -> u32 {
   538,950 ( 0.01%)              intrinsics::ctpop(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of zeros in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
         .                   /// assert_eq!(n.leading_zeros(), 2);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn leading_zeros(self) -> u32 {
 1,057,928 ( 0.01%)              intrinsics::ctlz(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of trailing zeros in the binary representation
         .                   /// of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
         .                   /// assert_eq!(n.trailing_zeros(), 3);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn trailing_zeros(self) -> u32 {
   969,050 ( 0.01%)              intrinsics::cttz(self) as u32
         .                   }
         .           
         .                   /// Returns the number of leading ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn rotate_left(self, n: u32) -> Self {
31,992,214 ( 0.36%)              intrinsics::rotate_left(self, n as $SelfT)
         .                   }
         .           
         .                   /// Shifts the bits to the right by a specified amount, `n`,
         .                   /// wrapping the truncated bits to the beginning of the resulting
         .                   /// integer.
         .                   ///
         .                   /// Please note this isn't the same operation as the `>>` shifting operator!
         .                   ///
-- line 220 ----------------------------------------
-- line 429 ----------------------------------------
         .                   )]
         .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
   210,040 ( 0.00%)          pub const fn checked_add(self, rhs: Self) -> Option<Self> {
   168,089 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
   420,080 ( 0.00%)              if unlikely!(b) {None} else {Some(a)}
   168,032 ( 0.00%)          }
         .           
         .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
         .                   /// cannot occur.
         .                   ///
         .                   /// # Safety
         .                   ///
         .                   /// This results in undefined behavior when
         .                   #[doc = concat!("`self + rhs > ", stringify!($SelfT), "::MAX` or `self + rhs < ", stringify!($SelfT), "::MIN`,")]
-- line 448 ----------------------------------------
-- line 456 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_add`.
 2,212,401 ( 0.02%)              unsafe { intrinsics::unchecked_add(self, rhs) }
         .                   }
         .           
         .                   /// Checked addition with a signed integer. Computes `self + rhs`,
         .                   /// returning `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_sub`.
   159,677 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
         .                   }
         .           
         .                   /// Checked integer multiplication. Computes `self * rhs`, returning
         .                   /// `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 544 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".checked_mul(1), Some(5));")]
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.checked_mul(2), None);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
   293,382 ( 0.00%)          pub const fn checked_mul(self, rhs: Self) -> Option<Self> {
   195,588 ( 0.00%)              let (a, b) = self.overflowing_mul(rhs);
   488,970 ( 0.01%)              if unlikely!(b) {None} else {Some(a)}
   195,588 ( 0.00%)          }
         .           
         .                   /// Unchecked integer multiplication. Computes `self * rhs`, assuming overflow
         .                   /// cannot occur.
         .                   ///
         .                   /// # Safety
         .                   ///
         .                   /// This results in undefined behavior when
         .                   #[doc = concat!("`self * rhs > ", stringify!($SelfT), "::MAX` or `self * rhs < ", stringify!($SelfT), "::MIN`,")]
-- line 563 ----------------------------------------
-- line 596 ----------------------------------------
         .                                 without modifying the original"]
         .                   #[inline]
         .                   pub const fn checked_div(self, rhs: Self) -> Option<Self> {
         .                       if unlikely!(rhs == 0) {
         .                           None
         .                       } else {
         .                           // SAFETY: div by zero has been checked above and unsigned types have no other
         .                           // failure modes for division
     2,936 ( 0.00%)                  Some(unsafe { intrinsics::unchecked_div(self, rhs) })
         .                       }
         .                   }
         .           
         .                   /// Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning `None`
         .                   /// if `rhs == 0`.
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 612 ----------------------------------------
-- line 1035 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_add(self, rhs: Self) -> Self {
   560,162 ( 0.01%)              intrinsics::saturating_add(self, rhs)
     1,598 ( 0.00%)          }
         .           
         .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 1052 ----------------------------------------
-- line 1084 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
    65,937 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
         .                   }
         .           
         .                   /// Saturating integer multiplication. Computes `self * rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1104 ----------------------------------------
         .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX).saturating_mul(10), ", stringify!($SelfT),"::MAX);")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   pub const fn saturating_mul(self, rhs: Self) -> Self {
         2 ( 0.00%)              match self.checked_mul(rhs) {
         .                           Some(x) => x,
         .                           None => Self::MAX,
         .                       }
         .                   }
         .           
         .                   /// Saturating integer division. Computes `self / rhs`, saturating at the
         .                   /// numeric bounds instead of overflowing.
         .                   ///
-- line 1120 ----------------------------------------
-- line 1175 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
16,162,912 ( 0.18%)              intrinsics::wrapping_add(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) addition with a signed integer. Computes
         .                   /// `self + rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
 5,156,880 ( 0.06%)              intrinsics::wrapping_sub(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) multiplication. Computes `self *
         .                   /// rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
         .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
16,113,274 ( 0.18%)              intrinsics::wrapping_mul(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) division. Computes `self / rhs`.
         .                   /// Wrapped division on unsigned types is just normal division.
         .                   /// There's no way wrapping could ever happen.
         .                   /// This function exists, so that all operations
         .                   /// are accounted for in the wrapping operations.
         .                   ///
-- line 1256 ----------------------------------------
-- line 1397 ----------------------------------------
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_shl(self, rhs: u32) -> Self {
         .                       // SAFETY: the masking by the bitsize of the type ensures that we do not shift
         .                       // out of bounds
         .                       unsafe {
         8 ( 0.00%)                  intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)
         .                       }
         .                   }
         .           
         .                   /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,
         .                   /// where `mask` removes any high-order bits of `rhs` that
         .                   /// would cause the shift to exceed the bitwidth of the type.
         .                   ///
         .                   /// Note that this is *not* the same as a rotate-right; the
-- line 1413 ----------------------------------------
-- line 1491 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_add(2), (7, false));")]
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
       406 ( 0.00%)          pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
 2,404,798 ( 0.03%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
    84,016 ( 0.00%)              (a as Self, b)
   168,844 ( 0.00%)          }
         .           
         .                   /// Calculates `self + rhs + carry` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
         .                   /// additional bit of overflow. This allows for chaining together multiple additions
         .                   /// to create "big integers" which represent larger values.
         .                   ///
         .                   #[doc = concat!("This can be thought of as a ", stringify!($BITS), "-bit \"full adder\", in the electronics sense.")]
-- line 1510 ----------------------------------------
-- line 1587 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_sub(2), (3, false));")]
         .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
       321 ( 0.00%)          pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
   615,796 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
       642 ( 0.00%)          }
         .           
         .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
         .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
         .                   /// to create "big integers" which represent larger values.
         .                   ///
         .                   /// # Examples
-- line 1606 ----------------------------------------
-- line 1674 ----------------------------------------
         .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                     without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
 4,116,535 ( 0.05%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
    97,794 ( 0.00%)              (a as Self, b)
   195,588 ( 0.00%)          }
         .           
         .                   /// Calculates the divisor when `self` is divided by `rhs`.
         .                   ///
         .                   /// Returns a tuple of the divisor along with a boolean indicating
         .                   /// whether an arithmetic overflow would occur. Note that for unsigned
         .                   /// integers overflow never occurs, so the second value is always
         .                   /// `false`.
         .                   ///
-- line 1692 ----------------------------------------
-- line 2132 ----------------------------------------
         .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
         .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
         .                   /// ```
         .                   #[must_use]
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
         .                   #[inline(always)]
         .                   pub const fn is_power_of_two(self) -> bool {
       264 ( 0.00%)              self.count_ones() == 1
         .                   }
         .           
         .                   // Returns one less than next power of two.
         .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
         .                   //
         .                   // 8u8.one_less_than_next_power_of_two() == 7
         .                   // 6u8.one_less_than_next_power_of_two() == 7
         .                   //
         .                   // This method cannot overflow, as in the `next_power_of_two`
         .                   // overflow cases it instead ends up returning the maximum value
         .                   // of the type, and can return 0 for 0.
         .                   #[inline]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         6 ( 0.00%)          const fn one_less_than_next_power_of_two(self) -> Self {
    50,026 ( 0.00%)              if self <= 1 { return 0; }
         .           
    61,307 ( 0.00%)              let p = self - 1;
         .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
         .                       // That means the shift is always in-bounds, and some processors
         .                       // (such as intel pre-haswell) have more efficient ctlz
         .                       // intrinsics when the argument is non-zero.
   183,695 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    61,289 ( 0.00%)              <$SelfT>::MAX >> z
         8 ( 0.00%)          }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `self`.
         .                   ///
         .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
         .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
         .                   /// release mode (the only situation in which method can return 0).
         .                   ///
         .                   /// # Examples
-- line 2172 ----------------------------------------
-- line 2178 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(3", stringify!($SelfT), ".next_power_of_two(), 4);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   #[rustc_inherit_overflow_checks]
         4 ( 0.00%)          pub const fn next_power_of_two(self) -> Self {
    72,466 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
         4 ( 0.00%)          }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `n`. If
         .                   /// the next power of two is greater than the type's maximum value,
         .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 2196 ----------------------------------------
-- line 2264 ----------------------------------------
         .                   #[doc = concat!("let bytes = ", $swap_op, stringify!($SelfT), ".to_le_bytes();")]
         .                   #[doc = concat!("assert_eq!(bytes, ", $le_bytes, ");")]
         .                   /// ```
         .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
         .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
        25 ( 0.00%)          pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {
        20 ( 0.00%)              self.to_le().to_ne_bytes()
        15 ( 0.00%)          }
         .           
         .                   /// Return the memory representation of this integer as a byte array in
         .                   /// native byte order.
         .                   ///
         .                   /// As the target platform's native endianness is used, portable code
         .                   /// should use [`to_be_bytes`] or [`to_le_bytes`], as appropriate,
         .                   /// instead.
         .                   ///
-- line 2282 ----------------------------------------
-- line 2300 ----------------------------------------
         .                   /// ```
         .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
         .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   // SAFETY: const sound because integers are plain old datatypes so we can always
         .                   // transmute them to arrays of bytes
         .                   #[inline]
        18 ( 0.00%)          pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {
         .                       // SAFETY: integers are plain old datatypes so we can always transmute them to
         .                       // arrays of bytes
         9 ( 0.00%)              unsafe { mem::transmute(self) }
        27 ( 0.00%)          }
         .           
         .                   /// Create a native endian integer value from its representation
         .                   /// as a byte array in big endian.
         .                   ///
         .                   #[doc = $from_xe_bytes_doc]
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 2320 ----------------------------------------
-- line 2360 ----------------------------------------
         .                   ///     *input = rest;
         .                   #[doc = concat!("    ", stringify!($SelfT), "::from_le_bytes(int_bytes.try_into().unwrap())")]
         .                   /// }
         .                   /// ```
         .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
         .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
         .                   #[must_use]
         .                   #[inline]
        20 ( 0.00%)          pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {
        25 ( 0.00%)              Self::from_le(Self::from_ne_bytes(bytes))
        10 ( 0.00%)          }
         .           
         .                   /// Create a native endian integer value from its memory representation
         .                   /// as a byte array in native endianness.
         .                   ///
         .                   /// As the target platform's native endianness is used, portable code
         .                   /// likely wants to use [`from_be_bytes`] or [`from_le_bytes`], as
         .                   /// appropriate instead.
         .                   ///
-- line 2378 ----------------------------------------
-- line 2402 ----------------------------------------
         .                   /// }
         .                   /// ```
         .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
         .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
         .                   #[must_use]
         .                   // SAFETY: const sound because integers are plain old datatypes so we can always
         .                   // transmute to them
         .                   #[inline]
        20 ( 0.00%)          pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {
         .                       // SAFETY: integers are plain old datatypes so we can always transmute to them
        30 ( 0.00%)              unsafe { mem::transmute(bytes) }
        10 ( 0.00%)          }
         .           
         .                   /// New code should prefer to use
         .                   #[doc = concat!("[`", stringify!($SelfT), "::MIN", "`] instead.")]
         .                   ///
         .                   /// Returns the smallest value that can be represented by this integer type.
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_promotable]
         .                   #[inline(always)]
-- line 2421 ----------------------------------------

   687,170 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir                  

-- line 186 ----------------------------------------
         .           /// // use the values stored in map
         .           /// ```
         .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
         .               pub(crate) hash_builder: S,
         .               pub(crate) table: RawTable<(K, V), A>,
         .           }
         .           
         .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
       448 ( 0.00%)      fn clone(&self) -> Self {
     9,912 ( 0.00%)          HashMap {
         .                       hash_builder: self.hash_builder.clone(),
     2,031 ( 0.00%)              table: self.table.clone(),
         .                   }
       504 ( 0.00%)      }
         .           
         .               fn clone_from(&mut self, source: &Self) {
         .                   self.table.clone_from(&source.table);
         .           
         .                   // Update hash_builder only if we successfully cloned all elements.
         .                   self.hash_builder.clone_from(&source.hash_builder);
         .               }
         .           }
         .           
         .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
        14 ( 0.00%)  pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash,
         .               S: BuildHasher,
         .           {
   274,823 ( 0.00%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
        21 ( 0.00%)  }
         .           
         .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
        40 ( 0.00%)  fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: ?Sized + Eq,
         .           {
   858,251 ( 0.01%)      move |x| k.eq(x.0.borrow())
        60 ( 0.00%)  }
         .           
         .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: ?Sized + Eq,
         .           {
   822,319 ( 0.01%)      move |x| k.eq(x.borrow())
         .           }
         .           
         .           #[cfg(not(feature = "nightly"))]
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
         .               use core::hash::Hasher;
         .               let mut state = hash_builder.build_hasher();
         .               val.hash(&mut state);
         .               state.finish()
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           #[cfg_attr(feature = "inline-more", inline)]
        41 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash + ?Sized,
         .               S: BuildHasher,
         .           {
     1,689 ( 0.00%)      hash_builder.hash_one(val)
        30 ( 0.00%)  }
         .           
         .           #[cfg(not(feature = "nightly"))]
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
         .           where
         .               K: Hash,
         .               S: BuildHasher,
         .           {
-- line 274 ----------------------------------------
-- line 275 ----------------------------------------
         .               use core::hash::Hasher;
         .               let mut state = hash_builder.build_hasher();
         .               val.hash(&mut state);
         .               state.finish()
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           #[cfg_attr(feature = "inline-more", inline)]
        21 ( 0.00%)  pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
         .           where
         .               K: Hash,
         .               S: BuildHasher,
         .           {
   359,102 ( 0.00%)      hash_builder.hash_one(val)
        14 ( 0.00%)  }
         .           
         .           #[cfg(feature = "ahash")]
         .           impl<K, V> HashMap<K, V, DefaultHashBuilder> {
         .               /// Creates an empty `HashMap`.
         .               ///
         .               /// The hash map is initially created with a capacity of 0, so it will not allocate until it
         .               /// is first inserted into.
         .               ///
-- line 297 ----------------------------------------
-- line 366 ----------------------------------------
         .               ///
         .               /// let s = DefaultHashBuilder::default();
         .               /// let mut map = HashMap::with_hasher(s);
         .               /// map.insert(1, 2);
         .               /// ```
         .               ///
         .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
         .               #[cfg_attr(feature = "inline-more", inline)]
        70 ( 0.00%)      pub const fn with_hasher(hash_builder: S) -> Self {
   451,442 ( 0.01%)          Self {
         .                       hash_builder,
        22 ( 0.00%)              table: RawTable::new(),
         .                   }
        18 ( 0.00%)      }
         .           
         .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
         .               /// to hash the keys.
         .               ///
         .               /// The hash map will be able to hold at least `capacity` elements without
         .               /// reallocating. If `capacity` is 0, the hash map will not allocate.
         .               ///
         .               /// Warning: `hash_builder` is normally randomly generated, and
-- line 387 ----------------------------------------
-- line 437 ----------------------------------------
         .               /// use hashbrown::hash_map::DefaultHashBuilder;
         .               ///
         .               /// let s = DefaultHashBuilder::default();
         .               /// let mut map = HashMap::with_hasher(s);
         .               /// map.insert(1, 2);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
        97 ( 0.00%)          Self {
         .                       hash_builder,
         .                       table: RawTable::new_in(alloc),
         .                   }
         .               }
         .           
         .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
         .               /// to hash the keys. It will be allocated with the given allocator.
         .               ///
-- line 453 ----------------------------------------
-- line 527 ----------------------------------------
         .               /// map.insert("c", 3);
         .               ///
         .               /// for key in map.keys() {
         .               ///     println!("{}", key);
         .               /// }
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn keys(&self) -> Keys<'_, K, V> {
         6 ( 0.00%)          Keys { inner: self.iter() }
         .               }
         .           
         .               /// An iterator visiting all values in arbitrary order.
         .               /// The iterator element type is `&'a V`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 543 ----------------------------------------
-- line 663 ----------------------------------------
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// assert_eq!(a.len(), 0);
         .               /// a.insert(1, "a");
         .               /// assert_eq!(a.len(), 1);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn len(&self) -> usize {
    42,035 ( 0.00%)          self.table.len()
         .               }
         .           
         .               /// Returns `true` if the map contains no elements.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// assert!(a.is_empty());
         .               /// a.insert(1, "a");
         .               /// assert!(!a.is_empty());
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn is_empty(&self) -> bool {
   176,609 ( 0.00%)          self.len() == 0
         .               }
         .           
         .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
         .               /// allocated memory for reuse.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// a.insert(1, "a");
         .               /// a.clear();
         .               /// assert!(a.is_empty());
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         6 ( 0.00%)      pub fn clear(&mut self) {
         .                   self.table.clear();
         6 ( 0.00%)      }
         .           
         .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
         .               /// The map cannot be used after calling this.
         .               /// The iterator element type is `K`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
         .               /// }
         .               ///
         .               /// assert_eq!(letters[&'s'], 2);
         .               /// assert_eq!(letters[&'t'], 3);
         .               /// assert_eq!(letters[&'u'], 1);
         .               /// assert_eq!(letters.get(&'y'), None);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
     1,312 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
         .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
         .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
       300 ( 0.00%)              Entry::Occupied(OccupiedEntry {
         .                           hash,
         .                           key: Some(key),
         .                           elem,
         .                           table: self,
         .                       })
         .                   } else {
     1,340 ( 0.00%)              Entry::Vacant(VacantEntry {
         .                           hash,
         .                           key,
         .                           table: self,
         .                       })
         .                   }
     1,640 ( 0.00%)      }
         .           
         .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
         .               ///
-- line 995 ----------------------------------------
-- line 1041 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// assert_eq!(map.get(&1), Some(&"a"));
         .               /// assert_eq!(map.get(&2), None);
         .               /// ```
         .               #[inline]
        21 ( 0.00%)      pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
 1,823,276 ( 0.02%)          match self.get_inner(k) {
        28 ( 0.00%)              Some(&(_, ref v)) => Some(v),
         .                       None => None,
         .                   }
        21 ( 0.00%)      }
         .           
         .               /// Returns the key-value pair corresponding to the supplied key.
         .               ///
         .               /// The supplied key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
         .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1067 ----------------------------------------
-- line 1086 ----------------------------------------
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match self.get_inner(k) {
         .                       Some(&(ref key, ref value)) => Some((key, value)),
         .                       None => None,
         .                   }
         .               }
         .           
         .               #[inline]
        65 ( 0.00%)      fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
 2,223,005 ( 0.02%)          if self.table.is_empty() {
         .                       None
         .                   } else {
        53 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
        78 ( 0.00%)              self.table.get(hash, equivalent_key(k))
         .                   }
        39 ( 0.00%)      }
         .           
         .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
         .               ///
         .               /// The supplied key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
         .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1113 ----------------------------------------
-- line 1155 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// assert_eq!(map.contains_key(&1), true);
         .               /// assert_eq!(map.contains_key(&2), false);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
   686,885 ( 0.01%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
        30 ( 0.00%)          self.get_inner(k).is_some()
   903,160 ( 0.01%)      }
         .           
         .               /// Returns a mutable reference to the value corresponding to the key.
         .               ///
         .               /// The key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
         .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// if let Some(x) = map.get_mut(&1) {
         .               ///     *x = "b";
         .               /// }
         .               /// assert_eq!(map[&1], "b");
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
       964 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
     7,224 ( 0.00%)          match self.get_inner_mut(k) {
         .                       Some(&mut (_, ref mut v)) => Some(v),
         .                       None => None,
         .                   }
     1,928 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
     2,408 ( 0.00%)          if self.table.is_empty() {
         .                       None
         .                   } else {
         .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
     2,888 ( 0.00%)              self.table.get_mut(hash, equivalent_key(k))
         .                   }
         .               }
         .           
         .               /// Attempts to get mutable references to `N` values in the map at once.
         .               ///
         .               /// Returns an array of length `N` with the results of each query. For soundness, at most one
         .               /// mutable reference will be returned to any value. `None` will be returned if any of the
         .               /// keys are duplicates or missing.
-- line 1223 ----------------------------------------
-- line 1495 ----------------------------------------
         .               /// assert_eq!(map.insert(37, "a"), None);
         .               /// assert_eq!(map.is_empty(), false);
         .               ///
         .               /// map.insert(37, "b");
         .               /// assert_eq!(map.insert(37, "c"), Some("b"));
         .               /// assert_eq!(map[&37], "c");
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
 6,388,517 ( 0.07%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
        70 ( 0.00%)          let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
     7,167 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
         .                       Some(mem::replace(item, v))
         .                   } else {
 2,781,411 ( 0.03%)              self.table
 2,549,697 ( 0.03%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
   308,462 ( 0.00%)              None
         .                   }
 5,977,801 ( 0.07%)      }
         .           
         .               /// Insert a key-value pair into the map without checking
         .               /// if the key already exists in the map.
         .               ///
         .               /// Returns a reference to the key and value just inserted.
         .               ///
         .               /// This operation is safe if a key does not exist in the map.
         .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// assert_eq!(map.remove(&1), Some("a"));
         .               /// assert_eq!(map.remove(&1), None);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
   181,424 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
 1,434,425 ( 0.02%)          match self.remove_entry(k) {
    75,970 ( 0.00%)              Some((_, v)) => Some(v),
   140,447 ( 0.00%)              None => None,
         .                   }
   399,019 ( 0.00%)      }
         .           
         .               /// Removes a key from the map, returning the stored key and value if the
         .               /// key was previously in the map.
         .               ///
         .               /// The key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
   485,046 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
         .               }
         .           }
         .           
         .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
         .               /// Creates a raw entry builder for the HashMap.
         .               ///
         .               /// Raw entries provide the lowest level of control for searching and
         .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2069 ----------------------------------------
         .           where
         .               F: FnMut(&K, &mut V) -> bool,
         .               A: Allocator + Clone,
         .           {
         .               type Item = (K, V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<Self::Item> {
        42 ( 0.00%)          self.inner.next(&mut self.f)
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   (0, self.inner.iter.size_hint().1)
         .               }
         .           }
         .           
-- line 2085 ----------------------------------------
-- line 2095 ----------------------------------------
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub(super) fn next<F>(&mut self, f: &mut F) -> Option<(K, V)>
         .               where
         .                   F: FnMut(&K, &mut V) -> bool,
         .               {
         .                   unsafe {
         .                       for item in &mut self.iter {
         .                           let &mut (ref key, ref mut value) = item.as_mut();
       168 ( 0.00%)                  if f(key, value) {
        14 ( 0.00%)                      return Some(self.table.remove(item));
         .                           }
         .                       }
         .                   }
         .                   None
         .               }
         .           }
         .           
         .           /// A mutable iterator over the values of a `HashMap`.
-- line 2112 ----------------------------------------
-- line 2209 ----------------------------------------
         .               /// Creates a `RawEntryMut` from the given key and its hash.
         .               #[inline]
         .               #[allow(clippy::wrong_self_convention)]
         .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Eq,
         .               {
 3,962,466 ( 0.04%)          self.from_hash(hash, equivalent(k))
         .               }
         .           }
         .           
         .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
         .               /// Creates a `RawEntryMut` from the given hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
10,572,512 ( 0.12%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   for<'b> F: FnMut(&'b K) -> bool,
         .               {
         .                   self.search(hash, is_match)
11,271,477 ( 0.13%)      }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   for<'b> F: FnMut(&'b K) -> bool,
         .               {
 1,236,964 ( 0.01%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
 6,595,247 ( 0.07%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
         .                           elem,
         .                           table: &mut self.map.table,
         .                           hash_builder: &self.map.hash_builder,
         .                       }),
   574,686 ( 0.01%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
         .                           table: &mut self.map.table,
         .                           hash_builder: &self.map.hash_builder,
         .                       }),
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
         .               {
         .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
         .                   self.from_key_hashed_nocheck(hash, k)
         .               }
         .           
         .               /// Access an entry by a key and its hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
 3,248,908 ( 0.04%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Eq,
         .               {
 3,613,771 ( 0.04%)          self.from_hash(hash, equivalent(k))
 5,875,851 ( 0.07%)      }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
         .               where
         .                   F: FnMut(&K) -> bool,
         .               {
 5,315,457 ( 0.06%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
         .                       Some(&(ref key, ref value)) => Some((key, value)),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Access an entry by hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
         .               /// and returns a mutable reference to it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::shadow_unrelated)]
         .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
         .               where
         .                   K: Hash,
         .                   S: BuildHasher,
         .               {
   947,929 ( 0.01%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
         .                       hash,
         .                       (key, value),
         .                       make_hasher::<K, _, V, S>(self.hash_builder),
         .                   );
         .                   (k, v)
         .               }
         .           
         .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
         .               /// map.insert("a", 1);
         .               /// map.insert("b", 2);
         .               /// map.insert("c", 3);
         .               ///
         .               /// // Not possible with .iter()
         .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
     4,015 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
    87,724 ( 0.00%)          IntoIter {
    45,914 ( 0.00%)              inner: self.table.into_iter(),
         .                   }
    12,045 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
         .               type Item = (&'a K, &'a V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
   367,605 ( 0.00%)          match self.inner.next() {
         .                       Some(x) => unsafe {
         .                           let r = x.as_ref();
     2,760 ( 0.00%)                  Some((&r.0, &r.1))
         .                       },
         .                       None => None,
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
       226 ( 0.00%)          self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn len(&self) -> usize {
         .                   self.inner.len()
         .               }
         .           }
-- line 3013 ----------------------------------------
-- line 3018 ----------------------------------------
         .               type Item = (&'a K, &'a mut V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(&'a K, &'a mut V)> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match self.inner.next() {
         .                       Some(x) => unsafe {
         .                           let r = x.as_mut();
         2 ( 0.00%)                  Some((&r.0, &mut r.1))
         .                       },
         .                       None => None,
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
-- line 3034 ----------------------------------------
-- line 3051 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
         .               type Item = (K, V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(K, V)> {
     7,352 ( 0.00%)          self.inner.next()
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
         .                   f.debug_list().entries(self.iter()).finish()
         .               }
         .           }
         .           
         .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
         .               type Item = &'a K;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
       126 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match self.inner.next() {
         .                       Some((k, _)) => Some(k),
         .                       None => None,
         .                   }
       252 ( 0.00%)      }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 3819 ----------------------------------------
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn insert(self, value: V) -> &'a mut V
         .               where
         .                   K: Hash,
         .                   S: BuildHasher,
         .               {
         .                   let table = &mut self.table.table;
       108 ( 0.00%)          let entry = table.insert_entry(
         .                       self.hash,
         .                       (self.key, value),
         .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
         .                   );
         .                   &mut entry.1
         .               }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
         .           /// keys with new values returned from the iterator.
         .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
         .           where
         .               K: Eq + Hash,
         .               S: BuildHasher,
         .               A: Allocator + Clone,
         .           {
         .               #[cfg_attr(feature = "inline-more", inline)]
    84,695 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
         .                   // Keys may be already present or show multiple times in the iterator.
         .                   // Reserve the entire hint lower bound if the map is empty.
         .                   // Otherwise reserve half the hint (rounded up), so the map
         .                   // will only resize twice in the worst case.
    65,035 ( 0.00%)          let iter = iter.into_iter();
    50,586 ( 0.00%)          let reserve = if self.is_empty() {
         .                       iter.size_hint().0
         .                   } else {
     5,177 ( 0.00%)              (iter.size_hint().0 + 1) / 2
         .                   };
         .                   self.reserve(reserve);
         .                   iter.for_each(move |(k, v)| {
   176,843 ( 0.00%)              self.insert(k, v);
         .                   });
    57,609 ( 0.00%)      }
         .           
         .               #[inline]
         .               #[cfg(feature = "nightly")]
         .               fn extend_one(&mut self, (k, v): (K, V)) {
         .                   self.insert(k, v);
         .               }
         .           
         .               #[inline]
-- line 4588 ----------------------------------------

 4,526,694 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/non_null.rs
--------------------------------------------------------------------------------
Ir                 

-- line 186 ----------------------------------------
        .               /// use std::ptr::NonNull;
        .               ///
        .               /// // NEVER DO THAT!!! This is undefined behavior. ⚠️
        .               /// let ptr = unsafe { NonNull::<u32>::new_unchecked(std::ptr::null_mut()) };
        .               /// ```
        .               #[stable(feature = "nonnull", since = "1.25.0")]
        .               #[rustc_const_stable(feature = "const_nonnull_new_unchecked", since = "1.25.0")]
        .               #[inline]
2,108,994 ( 0.02%)      pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
        .                   // SAFETY: the caller must guarantee that `ptr` is non-null.
6,806,045 ( 0.08%)          unsafe { NonNull { pointer: ptr as _ } }
3,138,994 ( 0.04%)      }
        .           
        .               /// Creates a new `NonNull` if `ptr` is non-null.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::ptr::NonNull;
        .               ///
-- line 205 ----------------------------------------
-- line 207 ----------------------------------------
        .               /// let ptr = NonNull::<u32>::new(&mut x as *mut _).expect("ptr is null!");
        .               ///
        .               /// if let Some(ptr) = NonNull::<u32>::new(std::ptr::null_mut()) {
        .               ///     unreachable!();
        .               /// }
        .               /// ```
        .               #[stable(feature = "nonnull", since = "1.25.0")]
        .               #[inline]
  144,738 ( 0.00%)      pub fn new(ptr: *mut T) -> Option<Self> {
  241,230 ( 0.00%)          if !ptr.is_null() {
        .                       // SAFETY: The pointer is already checked and is not null
  144,738 ( 0.00%)              Some(unsafe { Self::new_unchecked(ptr) })
        .                   } else {
        .                       None
        .                   }
  144,738 ( 0.00%)      }
        .           
        .               /// Performs the same functionality as [`std::ptr::from_raw_parts`], except that a
        .               /// `NonNull` pointer is returned, as opposed to a raw `*const` pointer.
        .               ///
        .               /// See the documentation of [`std::ptr::from_raw_parts`] for more details.
        .               ///
        .               /// [`std::ptr::from_raw_parts`]: crate::ptr::from_raw_parts
        .               #[unstable(feature = "ptr_metadata", issue = "81513")]
-- line 230 ----------------------------------------
-- line 268 ----------------------------------------
        .               /// unsafe { *ptr.as_ptr() += 2; }
        .               /// let x_value = unsafe { *ptr.as_ptr() };
        .               /// assert_eq!(x_value, 2);
        .               /// ```
        .               #[stable(feature = "nonnull", since = "1.25.0")]
        .               #[rustc_const_stable(feature = "const_nonnull_as_ptr", since = "1.32.0")]
        .               #[must_use]
        .               #[inline]
8,172,209 ( 0.09%)      pub const fn as_ptr(self) -> *mut T {
        .                   self.pointer as *mut T
5,382,814 ( 0.06%)      }
        .           
        .               /// Returns a shared reference to the value. If the value may be uninitialized, [`as_uninit_ref`]
        .               /// must be used instead.
        .               ///
        .               /// For the mutable counterpart see [`as_mut`].
        .               ///
        .               /// [`as_uninit_ref`]: NonNull::as_uninit_ref
        .               /// [`as_mut`]: NonNull::as_mut
-- line 286 ----------------------------------------
-- line 316 ----------------------------------------
        .               /// println!("{}", ref_x);
        .               /// ```
        .               ///
        .               /// [the module documentation]: crate::ptr#safety
        .               #[stable(feature = "nonnull", since = "1.25.0")]
        .               #[rustc_const_unstable(feature = "const_ptr_as_ref", issue = "91822")]
        .               #[must_use]
        .               #[inline]
    1,230 ( 0.00%)      pub const unsafe fn as_ref<'a>(&self) -> &'a T {
        .                   // SAFETY: the caller must guarantee that `self` meets all the
        .                   // requirements for a reference.
    1,845 ( 0.00%)          unsafe { &*self.as_ptr() }
    1,230 ( 0.00%)      }
        .           
        .               /// Returns a unique reference to the value. If the value may be uninitialized, [`as_uninit_mut`]
        .               /// must be used instead.
        .               ///
        .               /// For the shared counterpart see [`as_ref`].
        .               ///
        .               /// [`as_uninit_mut`]: NonNull::as_uninit_mut
        .               /// [`as_ref`]: NonNull::as_ref
-- line 336 ----------------------------------------
-- line 391 ----------------------------------------
        .               /// let casted_ptr = ptr.cast::<i8>();
        .               /// let raw_ptr: *mut i8 = casted_ptr.as_ptr();
        .               /// ```
        .               #[stable(feature = "nonnull_cast", since = "1.27.0")]
        .               #[rustc_const_stable(feature = "const_nonnull_cast", since = "1.36.0")]
        .               #[must_use = "this returns the result of the operation, \
        .                             without modifying the original"]
        .               #[inline]
  149,476 ( 0.00%)      pub const fn cast<U>(self) -> NonNull<U> {
        .                   // SAFETY: `self` is a `NonNull` pointer which is necessarily non-null
  201,422 ( 0.00%)          unsafe { NonNull::new_unchecked(self.as_ptr() as *mut U) }
  100,656 ( 0.00%)      }
        .           }
        .           
        .           impl<T> NonNull<[T]> {
        .               /// Creates a non-null raw slice from a thin pointer and a length.
        .               ///
        .               /// The `len` argument is the number of **elements**, not the number of bytes.
        .               ///
        .               /// This function is safe, but dereferencing the return value is unsafe.
-- line 410 ----------------------------------------
-- line 425 ----------------------------------------
        .               /// ```
        .               ///
        .               /// (Note that this example artificially demonstrates a use of this method,
        .               /// but `let slice = NonNull::from(&x[..]);` would be a better way to write code like this.)
        .               #[unstable(feature = "nonnull_slice_from_raw_parts", issue = "71941")]
        .               #[rustc_const_unstable(feature = "const_nonnull_slice_from_raw_parts", issue = "71941")]
        .               #[must_use]
        .               #[inline]
  195,976 ( 0.00%)      pub const fn slice_from_raw_parts(data: NonNull<T>, len: usize) -> Self {
        .                   // SAFETY: `data` is a `NonNull` pointer which is necessarily non-null
  391,952 ( 0.00%)          unsafe { Self::new_unchecked(super::slice_from_raw_parts_mut(data.as_ptr(), len)) }
   97,988 ( 0.00%)      }
        .           
        .               /// Returns the length of a non-null raw slice.
        .               ///
        .               /// The returned value is the number of **elements**, not the number of bytes.
        .               ///
        .               /// This function is safe, even when the non-null raw slice cannot be dereferenced to a slice
        .               /// because the pointer does not have a valid address.
        .               ///
-- line 444 ----------------------------------------
-- line 469 ----------------------------------------
        .               ///
        .               /// let slice: NonNull<[i8]> = NonNull::slice_from_raw_parts(NonNull::dangling(), 3);
        .               /// assert_eq!(slice.as_non_null_ptr(), NonNull::new(1 as *mut i8).unwrap());
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[unstable(feature = "slice_ptr_get", issue = "74265")]
        .               #[rustc_const_unstable(feature = "slice_ptr_get", issue = "74265")]
      522 ( 0.00%)      pub const fn as_non_null_ptr(self) -> NonNull<T> {
        .                   // SAFETY: We know `self` is non-null.
      870 ( 0.00%)          unsafe { NonNull::new_unchecked(self.as_ptr().as_mut_ptr()) }
      348 ( 0.00%)      }
        .           
        .               /// Returns a raw pointer to the slice's buffer.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```rust
        .               /// #![feature(slice_ptr_get, nonnull_slice_from_raw_parts)]
        .               /// use std::ptr::NonNull;
-- line 488 ----------------------------------------
-- line 489 ----------------------------------------
        .               ///
        .               /// let slice: NonNull<[i8]> = NonNull::slice_from_raw_parts(NonNull::dangling(), 3);
        .               /// assert_eq!(slice.as_mut_ptr(), 1 as *mut i8);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[unstable(feature = "slice_ptr_get", issue = "74265")]
        .               #[rustc_const_unstable(feature = "slice_ptr_get", issue = "74265")]
      510 ( 0.00%)      pub const fn as_mut_ptr(self) -> *mut T {
      680 ( 0.00%)          self.as_non_null_ptr().as_ptr()
      340 ( 0.00%)      }
        .           
        .               /// Returns a shared reference to a slice of possibly uninitialized values. In contrast to
        .               /// [`as_ref`], this does not require that the value has to be initialized.
        .               ///
        .               /// For the mutable counterpart see [`as_uninit_slice_mut`].
        .               ///
        .               /// [`as_ref`]: NonNull::as_ref
        .               /// [`as_uninit_slice_mut`]: NonNull::as_uninit_slice_mut
-- line 507 ----------------------------------------
-- line 705 ----------------------------------------
        .                   self.as_ptr().hash(state)
        .               }
        .           }
        .           
        .           #[unstable(feature = "ptr_internals", issue = "none")]
        .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
        .           impl<T: ?Sized> const From<Unique<T>> for NonNull<T> {
        .               #[inline]
  123,060 ( 0.00%)      fn from(unique: Unique<T>) -> Self {
        .                   // SAFETY: A Unique pointer cannot be null, so the conditions for
        .                   // new_unchecked() are respected.
  246,120 ( 0.00%)          unsafe { NonNull::new_unchecked(unique.as_ptr()) }
  123,060 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "nonnull", since = "1.25.0")]
        .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
        .           impl<T: ?Sized> const From<&mut T> for NonNull<T> {
        .               #[inline]
   31,302 ( 0.00%)      fn from(reference: &mut T) -> Self {
        .                   // SAFETY: A mutable reference cannot be null.
   61,837 ( 0.00%)          unsafe { NonNull { pointer: reference as *mut T } }
   46,953 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "nonnull", since = "1.25.0")]
        .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
        .           impl<T: ?Sized> const From<&T> for NonNull<T> {
        .               #[inline]
        .               fn from(reference: &T) -> Self {
        .                   // SAFETY: A reference cannot be null, so the conditions for
-- line 735 ----------------------------------------

  860,683 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/non_null.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/io/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 330 ----------------------------------------
        .           //    the function only *appends* bytes to the buffer. We'll get undefined
        .           //    behavior if existing bytes are overwritten to have non-UTF-8 data.
        .           pub(crate) unsafe fn append_to_string<F>(buf: &mut String, f: F) -> Result<usize>
        .           where
        .               F: FnOnce(&mut Vec<u8>) -> Result<usize>,
        .           {
        .               let mut g = Guard { len: buf.len(), buf: buf.as_mut_vec() };
        .               let ret = f(g.buf);
       12 ( 0.00%)      if str::from_utf8(&g.buf[g.len..]).is_err() {
        .                   ret.and_then(|_| {
        .                       Err(Error::new_const(ErrorKind::InvalidData, &"stream did not contain valid UTF-8"))
        .                   })
        .               } else {
        .                   g.len = g.buf.len();
       36 ( 0.00%)          ret
        .               }
        .           }
        .           
        .           // This uses an adaptive system to extend the vector when it fills. We want to
        .           // avoid paying to allocate and zero a huge chunk of memory if the reader only
        .           // has 4 bytes while still making large reads if the reader does have a ton
        .           // of data to return. Simply tacking on an extra DEFAULT_BUF_SIZE space every
        .           // time is 4,500 times (!) slower than a default reservation size of 32 if the
        .           // reader has a very small amount of data to return.
      110 ( 0.00%)  pub(crate) fn default_read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize> {
       60 ( 0.00%)      let start_len = buf.len();
        .               let start_cap = buf.capacity();
        .           
        .               let mut initialized = 0; // Extra initialized bytes from previous loop iteration
        .               loop {
       81 ( 0.00%)          if buf.len() == buf.capacity() {
        .                       buf.reserve(32); // buf is full, need more space
        .                   }
        .           
        .                   let mut read_buf = ReadBuf::uninit(buf.spare_capacity_mut());
        .           
        .                   // SAFETY: These bytes were initialized but not filled in the previous loop
        .                   unsafe {
        .                       read_buf.assume_init(initialized);
        .                   }
        .           
      182 ( 0.00%)          match r.read_buf(&mut read_buf) {
        .                       Ok(()) => {}
        .                       Err(e) if e.kind() == ErrorKind::Interrupted => continue,
        .                       Err(e) => return Err(e),
        .                   }
        .           
       75 ( 0.00%)          if read_buf.filled_len() == 0 {
       25 ( 0.00%)              return Ok(buf.len() - start_len);
        .                   }
        .           
        .                   // store how much was initialized but not filled
       60 ( 0.00%)          initialized = read_buf.initialized_len() - read_buf.filled_len();
       40 ( 0.00%)          let new_len = read_buf.filled_len() + buf.len();
        .           
        .                   // SAFETY: ReadBuf's invariants mean this much memory is init
        .                   unsafe {
        .                       buf.set_len(new_len);
        .                   }
        .           
      108 ( 0.00%)          if buf.len() == buf.capacity() && buf.capacity() == start_cap {
        .                       // The buffer might be an exact fit. Let's read into a probe buffer
        .                       // and see if it returns `Ok(0)`. If so, we've avoided an
        .                       // unnecessary doubling of the capacity. But if not, append the
        .                       // probe buffer to the primary buffer and let its capacity grow.
       26 ( 0.00%)              let mut probe = [0u8; 32];
        .           
        .                       loop {
       60 ( 0.00%)                  match r.read(&mut probe) {
       24 ( 0.00%)                      Ok(0) => return Ok(buf.len() - start_len),
        .                               Ok(n) => {
        .                                   buf.extend_from_slice(&probe[..n]);
        .                                   break;
        .                               }
        .                               Err(ref e) if e.kind() == ErrorKind::Interrupted => continue,
        .                               Err(e) => return Err(e),
        .                           }
        .                       }
        .                   }
        .               }
       88 ( 0.00%)  }
        .           
       42 ( 0.00%)  pub(crate) fn default_read_to_string<R: Read + ?Sized>(
        .               r: &mut R,
        .               buf: &mut String,
        .           ) -> Result<usize> {
        .               // Note that we do *not* call `r.read_to_end()` here. We are passing
        .               // `&mut Vec<u8>` (the raw contents of `buf`) into the `read_to_end`
        .               // method to fill it up. An arbitrary implementation could overwrite the
        .               // entire contents of the vector, not just append to it (which is what
        .               // we are expecting).
        .               //
        .               // To prevent extraneously checking the UTF-8-ness of the entire buffer
        .               // we pass it to our hardcoded `default_read_to_end` implementation which
        .               // we know is guaranteed to only read data into the end of the buffer.
        6 ( 0.00%)      unsafe { append_to_string(buf, |b| default_read_to_end(r, b)) }
       42 ( 0.00%)  }
        .           
        .           pub(crate) fn default_read_vectored<F>(read: F, bufs: &mut [IoSliceMut<'_>]) -> Result<usize>
        .           where
        .               F: FnOnce(&mut [u8]) -> Result<usize>,
        .           {
        .               let buf = bufs.iter_mut().find(|b| !b.is_empty()).map_or(&mut [][..], |b| &mut **b);
        .               read(buf)
        .           }
-- line 434 ----------------------------------------
-- line 455 ----------------------------------------
        .               }
        .               if !buf.is_empty() {
        .                   Err(Error::new_const(ErrorKind::UnexpectedEof, &"failed to fill whole buffer"))
        .               } else {
        .                   Ok(())
        .               }
        .           }
        .           
      112 ( 0.00%)  pub(crate) fn default_read_buf<F>(read: F, buf: &mut ReadBuf<'_>) -> Result<()>
        .           where
        .               F: FnOnce(&mut [u8]) -> Result<usize>,
        .           {
        .               let n = read(buf.initialize_unfilled())?;
        .               buf.add_filled(n);
        .               Ok(())
      192 ( 0.00%)  }
        .           
        .           /// The `Read` trait allows for reading bytes from a source.
        .           ///
        .           /// Implementors of the `Read` trait are called 'readers'.
        .           ///
        .           /// Readers are defined by one required method, [`read()`]. Each call to [`read()`]
        .           /// will attempt to pull bytes from this source into a provided buffer. A
        .           /// number of other methods are implemented in terms of [`read()`], giving
-- line 478 ----------------------------------------
-- line 694 ----------------------------------------
        .               /// ```
        .               ///
        .               /// (See also the [`std::fs::read`] convenience function for reading from a
        .               /// file.)
        .               ///
        .               /// [`std::fs::read`]: crate::fs::read
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               fn read_to_end(&mut self, buf: &mut Vec<u8>) -> Result<usize> {
        4 ( 0.00%)          default_read_to_end(self, buf)
        .               }
        .           
        .               /// Read all bytes until EOF in this source, appending them to `buf`.
        .               ///
        .               /// If successful, this function returns the number of bytes which were read
        .               /// and appended to `buf`.
        .               ///
        .               /// # Errors
-- line 710 ----------------------------------------
-- line 803 ----------------------------------------
        .               /// Pull some bytes from this source into the specified buffer.
        .               ///
        .               /// This is equivalent to the [`read`](Read::read) method, except that it is passed a [`ReadBuf`] rather than `[u8]` to allow use
        .               /// with uninitialized buffers. The new data will be appended to any existing contents of `buf`.
        .               ///
        .               /// The default implementation delegates to `read`.
        .               #[unstable(feature = "read_buf", issue = "78485")]
        .               fn read_buf(&mut self, buf: &mut ReadBuf<'_>) -> Result<()> {
      112 ( 0.00%)          default_read_buf(|b| self.read(b), buf)
        .               }
        .           
        .               /// Read the exact number of bytes required to fill `buf`.
        .               ///
        .               /// This is equivalent to the [`read_exact`](Read::read_exact) method, except that it is passed a [`ReadBuf`] rather than `[u8]` to
        .               /// allow use with uninitialized buffers.
        .               #[unstable(feature = "read_buf", issue = "78485")]
        .               fn read_buf_exact(&mut self, buf: &mut ReadBuf<'_>) -> Result<()> {
-- line 819 ----------------------------------------
-- line 901 ----------------------------------------
        .               ///
        .               ///     for byte in f.bytes() {
        .               ///         println!("{}", byte.unwrap());
        .               ///     }
        .               ///     Ok(())
        .               /// }
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
  556,444 ( 0.01%)      fn bytes(self) -> Bytes<Self>
        .               where
        .                   Self: Sized,
        .               {
  278,222 ( 0.00%)          Bytes { inner: self }
  834,666 ( 0.01%)      }
        .           
        .               /// Creates an adapter which will chain this stream with another.
        .               ///
        .               /// The returned `Read` instance will first read all bytes from this object
        .               /// until EOF is encountered. Afterwards the output is equivalent to the
        .               /// output of `next`.
        .               ///
        .               /// # Examples
-- line 922 ----------------------------------------
-- line 1503 ----------------------------------------
        .               /// fn main() -> std::io::Result<()> {
        .               ///     let mut buffer = File::create("foo.txt")?;
        .               ///
        .               ///     buffer.write_all(b"some bytes")?;
        .               ///     Ok(())
        .               /// }
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
       16 ( 0.00%)      fn write_all(&mut self, mut buf: &[u8]) -> Result<()> {
        4 ( 0.00%)          while !buf.is_empty() {
        .                       match self.write(buf) {
        .                           Ok(0) => {
        .                               return Err(Error::new_const(
        .                                   ErrorKind::WriteZero,
        .                                   &"failed to write whole buffer",
        .                               ));
        .                           }
        .                           Ok(n) => buf = &buf[n..],
        .                           Err(ref e) if e.kind() == ErrorKind::Interrupted => {}
        .                           Err(e) => return Err(e),
        .                       }
        .                   }
        .                   Ok(())
       24 ( 0.00%)      }
        .           
        .               /// Attempts to write multiple buffers into this writer.
        .               ///
        .               /// This method will continuously call [`write_vectored`] until there is no
        .               /// more data to be written or an error of non-[`ErrorKind::Interrupted`]
        .               /// kind is returned. This method will not return until all buffers have
        .               /// been successfully written or such an error occurs. The first error that
        .               /// is not of [`ErrorKind::Interrupted`] kind generated from this method
-- line 1534 ----------------------------------------
-- line 1624 ----------------------------------------
        .               ///     // this call
        .               ///     write!(buffer, "{:.*}", 2, 1.234567)?;
        .               ///     // turns into this:
        .               ///     buffer.write_fmt(format_args!("{:.*}", 2, 1.234567))?;
        .               ///     Ok(())
        .               /// }
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        9 ( 0.00%)      fn write_fmt(&mut self, fmt: fmt::Arguments<'_>) -> Result<()> {
        .                   // Create a shim which translates a Write to a fmt::Write and saves
        .                   // off I/O errors. instead of discarding them
        .                   struct Adapter<'a, T: ?Sized + 'a> {
        .                       inner: &'a mut T,
        .                       error: Result<()>,
        .                   }
        .           
        .                   impl<T: Write + ?Sized> fmt::Write for Adapter<'_, T> {
      410 ( 0.00%)              fn write_str(&mut self, s: &str) -> fmt::Result {
       74 ( 0.00%)                  match self.inner.write_all(s.as_bytes()) {
        .                               Ok(()) => Ok(()),
        .                               Err(e) => {
        .                                   self.error = Err(e);
        .                                   Err(fmt::Error)
        .                               }
        .                           }
      538 ( 0.00%)              }
        .                   }
        .           
       27 ( 0.00%)          let mut output = Adapter { inner: self, error: Ok(()) };
      119 ( 0.00%)          match fmt::write(&mut output, fmt) {
        .                       Ok(()) => Ok(()),
        .                       Err(..) => {
        .                           // check if the error came from the underlying `Write` or not
        .                           if output.error.is_err() {
        .                               output.error
        .                           } else {
        .                               Err(Error::new_const(ErrorKind::Uncategorized, &"formatter error"))
        .                           }
        .                       }
        .                   }
       27 ( 0.00%)      }
        .           
        .               /// Creates a "by reference" adapter for this instance of `Write`.
        .               ///
        .               /// The returned adapter also implements `Write` and will simply borrow this
        .               /// current writer.
        .               ///
        .               /// # Examples
        .               ///
-- line 1672 ----------------------------------------
-- line 2658 ----------------------------------------
        .           pub struct Bytes<R> {
        .               inner: R,
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<R: Read> Iterator for Bytes<R> {
        .               type Item = Result<u8>;
        .           
1,391,170 ( 0.02%)      fn next(&mut self) -> Option<Result<u8>> {
  278,234 ( 0.00%)          let mut byte = 0;
        .                   loop {
3,338,808 ( 0.04%)              return match self.inner.read(slice::from_mut(&mut byte)) {
        .                           Ok(0) => None,
2,782,340 ( 0.03%)                  Ok(..) => Some(Ok(byte)),
        .                           Err(ref e) if e.kind() == ErrorKind::Interrupted => continue,
        .                           Err(e) => Some(Err(e)),
        .                       };
        .                   }
  556,468 ( 0.01%)      }
        .           
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   SizeHint::size_hint(&self.inner)
        .               }
        .           }
        .           
        .           trait SizeHint {
        .               fn lower_bound(&self) -> usize;
-- line 2684 ----------------------------------------

1,113,045 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/io/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs
--------------------------------------------------------------------------------
Ir                  

-- line 28 ----------------------------------------
         .               /// ```
         .               /// let mut s = [1, 2, 3];
         .               /// let ptr: *mut u32 = s.as_mut_ptr();
         .               /// assert!(!ptr.is_null());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_is_null", issue = "74939")]
         .               #[inline]
 4,241,916 ( 0.05%)      pub const fn is_null(self) -> bool {
         .                   // Compare via a cast to a thin pointer, so fat pointers are only
         .                   // considering their "data" part for null-ness.
 4,241,916 ( 0.05%)          (self as *mut u8).guaranteed_eq(null_mut())
 4,241,916 ( 0.05%)      }
         .           
         .               /// Casts to a pointer of another type.
         .               #[stable(feature = "ptr_cast", since = "1.38.0")]
         .               #[rustc_const_stable(feature = "const_ptr_cast", since = "1.38.0")]
         .               #[inline(always)]
         .               pub const fn cast<U>(self) -> *mut U {
         .                   self as _
         .               }
-- line 48 ----------------------------------------
-- line 299 ----------------------------------------
         .               #[inline(always)]
         .               pub const unsafe fn offset(self, count: isize) -> *mut T
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the caller must uphold the safety contract for `offset`.
         .                   // The obtained pointer is valid for writes since the caller must
         .                   // guarantee that it points to the same allocated object as `self`.
40,583,186 ( 0.45%)          unsafe { intrinsics::offset(self, count) as *mut T }
         .               }
         .           
         .               /// Calculates the offset from a pointer using wrapping arithmetic.
         .               /// `count` is in units of T; e.g., a `count` of 3 represents a pointer
         .               /// offset of `3 * size_of::<T>()` bytes.
         .               ///
         .               /// # Safety
         .               ///
-- line 315 ----------------------------------------
-- line 360 ----------------------------------------
         .               #[must_use = "returns a new pointer rather than modifying its argument"]
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline(always)]
         .               pub const fn wrapping_offset(self, count: isize) -> *mut T
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the `arith_offset` intrinsic has no prerequisites to be called.
       842 ( 0.00%)          unsafe { intrinsics::arith_offset(self, count) as *mut T }
         .               }
         .           
         .               /// Returns `None` if the pointer is null, or else returns a unique reference to
         .               /// the value wrapped in `Some`. If the value may be uninitialized, [`as_uninit_mut`]
         .               /// must be used instead.
         .               ///
         .               /// For the shared counterpart see [`as_ref`].
         .               ///
-- line 376 ----------------------------------------
-- line 492 ----------------------------------------
         .               /// affect the outcome, but just the performance.
         .               /// The consequences of using this method to make runtime and compile-time code behave
         .               /// differently have not been explored. This method should not be used to introduce such
         .               /// differences, and it should also not be stabilized before we have a better understanding
         .               /// of this issue.
         .               #[unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
         .               #[rustc_const_unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
         .               #[inline]
 3,181,437 ( 0.04%)      pub const fn guaranteed_eq(self, other: *mut T) -> bool
         .               where
         .                   T: Sized,
         .               {
 6,380,721 ( 0.07%)          intrinsics::ptr_guaranteed_eq(self as *const _, other as *const _)
 4,241,916 ( 0.05%)      }
         .           
         .               /// Returns whether two pointers are guaranteed to be unequal.
         .               ///
         .               /// At runtime this function behaves like `self != other`.
         .               /// However, in some contexts (e.g., compile-time evaluation),
         .               /// it is not always possible to determine the inequality of two pointers, so this function may
         .               /// spuriously return `false` for pointers that later actually turn out to be unequal.
         .               /// But when it returns `true`, the pointers are guaranteed to be unequal.
-- line 513 ----------------------------------------
-- line 683 ----------------------------------------
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline(always)]
         .               pub const unsafe fn add(self, count: usize) -> Self
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the caller must uphold the safety contract for `offset`.
         .                   unsafe { self.offset(count as isize) }
    13,486 ( 0.00%)      }
         .           
         .               /// Calculates the offset from a pointer (convenience for
         .               /// `.offset((count as isize).wrapping_neg())`).
         .               ///
         .               /// `count` is in units of T; e.g., a `count` of 3 represents a pointer
         .               /// offset of `3 * size_of::<T>()` bytes.
         .               ///
         .               /// # Safety
-- line 699 ----------------------------------------
-- line 741 ----------------------------------------
         .               ///     println!("{}", *end.sub(1) as char);
         .               ///     println!("{}", *end.sub(2) as char);
         .               /// }
         .               /// ```
         .               #[stable(feature = "pointer_methods", since = "1.26.0")]
         .               #[must_use = "returns a new pointer rather than modifying its argument"]
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline]
       490 ( 0.00%)      pub const unsafe fn sub(self, count: usize) -> Self
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the caller must uphold the safety contract for `offset`.
         .                   unsafe { self.offset((count as isize).wrapping_neg()) }
       140 ( 0.00%)      }
         .           
         .               /// Calculates the offset from a pointer using wrapping arithmetic.
         .               /// (convenience for `.wrapping_offset(count as isize)`)
         .               ///
         .               /// `count` is in units of T; e.g., a `count` of 3 represents a pointer
         .               /// offset of `3 * size_of::<T>()` bytes.
         .               ///
         .               /// # Safety
-- line 763 ----------------------------------------
-- line 1055 ----------------------------------------
         .               ///
         .               /// See [`ptr::drop_in_place`] for safety concerns and examples.
         .               ///
         .               /// [`ptr::drop_in_place`]: crate::ptr::drop_in_place()
         .               #[stable(feature = "pointer_methods", since = "1.26.0")]
         .               #[inline(always)]
         .               pub unsafe fn drop_in_place(self) {
         .                   // SAFETY: the caller must uphold the safety contract for `drop_in_place`.
     7,802 ( 0.00%)          unsafe { drop_in_place(self) }
         .               }
         .           
         .               /// Overwrites a memory location with the given value without reading or
         .               /// dropping the old value.
         .               ///
         .               /// See [`ptr::write`] for safety concerns and examples.
         .               ///
         .               /// [`ptr::write`]: crate::ptr::write()
-- line 1071 ----------------------------------------
-- line 1072 ----------------------------------------
         .               #[stable(feature = "pointer_methods", since = "1.26.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_write", issue = "86302")]
         .               #[inline(always)]
         .               pub const unsafe fn write(self, val: T)
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the caller must uphold the safety contract for `write`.
     4,367 ( 0.00%)          unsafe { write(self, val) }
         7 ( 0.00%)      }
         .           
         .               /// Invokes memset on the specified pointer, setting `count * size_of::<T>()`
         .               /// bytes of memory starting at `self` to `val`.
         .               ///
         .               /// See [`ptr::write_bytes`] for safety concerns and examples.
         .               ///
         .               /// [`ptr::write_bytes`]: crate::ptr::write_bytes()
         .               #[stable(feature = "pointer_methods", since = "1.26.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_write", issue = "86302")]
         .               #[inline(always)]
         .               pub const unsafe fn write_bytes(self, val: u8, count: usize)
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the caller must uphold the safety contract for `write_bytes`.
        16 ( 0.00%)          unsafe { write_bytes(self, val, count) }
         4 ( 0.00%)      }
         .           
         .               /// Performs a volatile write of a memory location with the given value without
         .               /// reading or dropping the old value.
         .               ///
         .               /// Volatile operations are intended to act on I/O memory, and are guaranteed
         .               /// to not be elided or reordered by the compiler across other volatile
         .               /// operations.
         .               ///
-- line 1106 ----------------------------------------
-- line 1416 ----------------------------------------
         .               }
         .           }
         .           
         .           // Equality for pointers
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: ?Sized> PartialEq for *mut T {
         .               #[inline(always)]
         .               fn eq(&self, other: &*mut T) -> bool {
    77,368 ( 0.00%)          *self == *other
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: ?Sized> Eq for *mut T {}
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: ?Sized> Ord for *mut T {
-- line 1432 ----------------------------------------

 3,087,533 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/server.rs
--------------------------------------------------------------------------------
Ir                 

-- line 28 ----------------------------------------
        .                   (type SourceFile: 'static + Clone;);
        .               (type MultiSpan) =>
        .                   (type MultiSpan: 'static;);
        .               (type Diagnostic) =>
        .                   (type Diagnostic: 'static;);
        .               (type Span) =>
        .                   (type Span: 'static + Copy + Eq + Hash;);
        .               (fn drop(&mut self, $arg:ident: $arg_ty:ty)) =>
    9,261 ( 0.00%)          (fn drop(&mut self, $arg: $arg_ty) { mem::drop($arg) });
        .               (fn clone(&mut self, $arg:ident: $arg_ty:ty) -> $ret_ty:ty) =>
    3,773 ( 0.00%)          (fn clone(&mut self, $arg: $arg_ty) -> $ret_ty { $arg.clone() });
        .               ($($item:tt)*) => ($($item)*;)
        .           }
        .           
        .           macro_rules! declare_server_traits {
        .               ($($name:ident {
        .                   $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)?;)*
        .               }),* $(,)?) => {
        .                   pub trait Types {
-- line 46 ----------------------------------------
-- line 63 ----------------------------------------
        .               ($($name:ident {
        .                   $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)?;)*
        .               }),* $(,)?) => {
        .                   impl<S: Types> Types for MarkedTypes<S> {
        .                       $(type $name = Marked<S::$name, client::$name>;)*
        .                   }
        .           
        .                   $(impl<S: $name> $name for MarkedTypes<S> {
    1,032 ( 0.00%)              $(fn $method(&mut self, $($arg: $arg_ty),*) $(-> $ret_ty)? {
1,389,302 ( 0.02%)                  <_>::mark($name::$method(&mut self.0, $($arg.unmark()),*))
    1,032 ( 0.00%)              })*
        .                   })*
        .               }
        .           }
        .           with_api!(Self, self_, define_mark_types_impls);
        .           
        .           struct Dispatcher<S: Types> {
        .               handle_store: HandleStore<S>,
        .               server: S,
-- line 81 ----------------------------------------
-- line 89 ----------------------------------------
        .                   pub trait DispatcherTrait {
        .                       // HACK(eddyb) these are here to allow `Self::$name` to work below.
        .                       $(type $name;)*
        .                       fn dispatch(&mut self, b: Buffer<u8>) -> Buffer<u8>;
        .                   }
        .           
        .                   impl<S: Server> DispatcherTrait for Dispatcher<MarkedTypes<S>> {
        .                       $(type $name = <MarkedTypes<S> as Types>::$name;)*
3,384,830 ( 0.04%)              fn dispatch(&mut self, mut b: Buffer<u8>) -> Buffer<u8> {
        .                           let Dispatcher { handle_store, server } = self;
        .           
1,015,449 ( 0.01%)                  let mut reader = &b[..];
2,369,381 ( 0.03%)                  match api_tags::Method::decode(&mut reader, &mut ()) {
1,625,703 ( 0.02%)                      $(api_tags::Method::$name(m) => match m {
        .                                   $(api_tags::$name::$method => {
        .                                       let mut call_method = || {
1,125,338 ( 0.01%)                                  reverse_decode!(reader, handle_store; $($arg: $arg_ty),*);
      516 ( 0.00%)                                  $name::$method(server, $($arg),*)
        .                                       };
        .                                       // HACK(eddyb) don't use `panic::catch_unwind` in a panic.
        .                                       // If client and server happen to use the same `libstd`,
        .                                       // `catch_unwind` asserts that the panic counter was 0,
        .                                       // even when the closure passed to it didn't panic.
        .                                       let r = if thread::panicking() {
        .                                           Ok(call_method())
        .                                       } else {
1,497,386 ( 0.02%)                                  panic::catch_unwind(panic::AssertUnwindSafe(call_method))
        .                                               .map_err(PanicMessage::from)
        .                                       };
        .           
        .                                       b.clear();
3,715,955 ( 0.04%)                              r.encode(&mut b, handle_store);
        .                                   })*
        .                               }),*
        .                           }
2,030,898 ( 0.02%)                  b
3,046,347 ( 0.03%)              }
        .                   }
        .               }
        .           }
        .           with_api!(Self, self_, define_dispatcher_impl);
        .           
        .           pub trait ExecutionStrategy {
        .               fn run_bridge_and_client<D: Copy + Send + 'static>(
        .                   &self,
-- line 133 ----------------------------------------
-- line 145 ----------------------------------------
        .               fn run_bridge_and_client<D: Copy + Send + 'static>(
        .                   &self,
        .                   dispatcher: &mut impl DispatcherTrait,
        .                   input: Buffer<u8>,
        .                   run_client: extern "C" fn(Bridge<'_>, D) -> Buffer<u8>,
        .                   client_data: D,
        .                   force_show_panics: bool,
        .               ) -> Buffer<u8> {
3,046,352 ( 0.03%)          let mut dispatch = |b| dispatcher.dispatch(b);
        .           
       50 ( 0.00%)          run_client(
       55 ( 0.00%)              Bridge { cached_buffer: input, dispatch: (&mut dispatch).into(), force_show_panics },
        .                       client_data,
        .                   )
        .               }
        .           }
        .           
        .           // NOTE(eddyb) Two implementations are provided, the second one is a bit
        .           // faster but neither is anywhere near as fast as same-thread execution.
        .           
-- line 164 ----------------------------------------
-- line 263 ----------------------------------------
        .                       *state.lock().unwrap() = State::Res(b);
        .                       join_handle.thread().unpark();
        .                   }
        .           
        .                   join_handle.join().unwrap()
        .               }
        .           }
        .           
       65 ( 0.00%)  fn run_server<
        .               S: Server,
        .               I: Encode<HandleStore<MarkedTypes<S>>>,
        .               O: for<'a, 's> DecodeMut<'a, 's, HandleStore<MarkedTypes<S>>>,
        .               D: Copy + Send + 'static,
        .           >(
        .               strategy: &impl ExecutionStrategy,
        .               handle_counters: &'static client::HandleCounters,
        .               server: S,
        .               input: I,
        .               run_client: extern "C" fn(Bridge<'_>, D) -> Buffer<u8>,
        .               client_data: D,
        .               force_show_panics: bool,
        .           ) -> Result<O, PanicMessage> {
        .               let mut dispatcher =
       85 ( 0.00%)          Dispatcher { handle_store: HandleStore::new(handle_counters), server: MarkedTypes(server) };
        .           
        .               let mut b = Buffer::new();
       15 ( 0.00%)      input.encode(&mut b, &mut dispatcher.handle_store);
        .           
       30 ( 0.00%)      b = strategy.run_bridge_and_client(
        .                   &mut dispatcher,
        .                   b,
        .                   run_client,
        .                   client_data,
        .                   force_show_panics,
        .               );
        .           
       25 ( 0.00%)      Result::decode(&mut &b[..], &mut dispatcher.handle_store)
       50 ( 0.00%)  }
        .           
        .           impl client::Client<fn(crate::TokenStream) -> crate::TokenStream> {
        .               pub fn run<S: Server>(
        .                   &self,
        .                   strategy: &impl ExecutionStrategy,
        .                   server: S,
        .                   input: S::TokenStream,
        .                   force_show_panics: bool,
        .               ) -> Result<S::TokenStream, PanicMessage> {
       10 ( 0.00%)          let client::Client { get_handle_counters, run, f } = *self;
       55 ( 0.00%)          run_server(
        .                       strategy,
        5 ( 0.00%)              get_handle_counters(),
       50 ( 0.00%)              server,
        .                       <MarkedTypes<S> as Types>::TokenStream::mark(input),
        .                       run,
        .                       f,
        .                       force_show_panics,
        .                   )
        .                   .map(<MarkedTypes<S> as Types>::TokenStream::unmark)
        .               }
        .           }
-- line 322 ----------------------------------------

  761,391 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/server.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs
--------------------------------------------------------------------------------
Ir                  

-- line 504 ----------------------------------------
         .           use crate::panicking::{panic, panic_str};
         .           use crate::pin::Pin;
         .           use crate::{
         .               convert, hint, mem,
         .               ops::{self, ControlFlow, Deref, DerefMut},
         .           };
         .           
         .           /// The `Option` type. See [the module level documentation](self) for more.
 5,614,511 ( 0.06%)  #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]
         .           #[rustc_diagnostic_item = "Option"]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           pub enum Option<T> {
         .               /// No value.
         .               #[lang = "None"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               None,
         .               /// Some value of type `T`.
         .               #[lang = "Some"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
    20,875 ( 0.00%)      Some(#[stable(feature = "rust1", since = "1.0.0")] T),
         .           }
         .           
         .           /////////////////////////////////////////////////////////////////////////////
         .           // Type implementation
         .           /////////////////////////////////////////////////////////////////////////////
         .           
         .           impl<T> Option<T> {
         .               /////////////////////////////////////////////////////////////////////////
-- line 531 ----------------------------------------
-- line 542 ----------------------------------------
         .               ///
         .               /// let x: Option<u32> = None;
         .               /// assert_eq!(x.is_some(), false);
         .               /// ```
         .               #[must_use = "if you intended to assert that this has a value, consider `.unwrap()` instead"]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
    17,262 ( 0.00%)      pub const fn is_some(&self) -> bool {
 5,140,992 ( 0.06%)          matches!(*self, Some(_))
    43,155 ( 0.00%)      }
         .           
         .               /// Returns `true` if the option is a [`Some`] wrapping a value matching the predicate.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(is_some_with)]
         .               ///
-- line 560 ----------------------------------------
-- line 585 ----------------------------------------
         .               /// let x: Option<u32> = None;
         .               /// assert_eq!(x.is_none(), true);
         .               /// ```
         .               #[must_use = "if you intended to assert that this doesn't have a value, consider \
         .                             `.and_then(|_| panic!(\"`Option` had a value when expected `None`\"))` instead"]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
     9,076 ( 0.00%)      pub const fn is_none(&self) -> bool {
    13,614 ( 0.00%)          !self.is_some()
    18,152 ( 0.00%)      }
         .           
         .               /////////////////////////////////////////////////////////////////////////
         .               // Adapter for working with references
         .               /////////////////////////////////////////////////////////////////////////
         .           
         .               /// Converts from `&Option<T>` to `Option<&T>`.
         .               ///
         .               /// # Examples
-- line 603 ----------------------------------------
-- line 615 ----------------------------------------
         .               /// // First, cast `Option<String>` to `Option<&String>` with `as_ref`,
         .               /// // then consume *that* with `map`, leaving `text` on the stack.
         .               /// let text_length: Option<usize> = text.as_ref().map(|s| s.len());
         .               /// println!("still can print text: {:?}", text);
         .               /// ```
         .               #[inline]
         .               #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
         .               #[stable(feature = "rust1", since = "1.0.0")]
    69,579 ( 0.00%)      pub const fn as_ref(&self) -> Option<&T> {
10,071,157 ( 0.11%)          match *self {
     5,227 ( 0.00%)              Some(ref x) => Some(x),
    41,182 ( 0.00%)              None => None,
         .                   }
    69,579 ( 0.00%)      }
         .           
         .               /// Converts from `&mut Option<T>` to `Option<&mut T>`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let mut x = Some(2);
         .               /// match x.as_mut() {
-- line 636 ----------------------------------------
-- line 637 ----------------------------------------
         .               ///     Some(v) => *v = 42,
         .               ///     None => {},
         .               /// }
         .               /// assert_eq!(x, Some(42));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
    13,944 ( 0.00%)      pub const fn as_mut(&mut self) -> Option<&mut T> {
 3,608,217 ( 0.04%)          match *self {
     8,729 ( 0.00%)              Some(ref mut x) => Some(x),
       574 ( 0.00%)              None => None,
         .                   }
    13,944 ( 0.00%)      }
         .           
         .               /// Converts from <code>[Pin]<[&]Option\<T>></code> to <code>Option<[Pin]<[&]T>></code>.
         .               ///
         .               /// [&]: reference "shared reference"
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "pin", since = "1.33.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
-- line 658 ----------------------------------------
-- line 704 ----------------------------------------
         .               /// ```should_panic
         .               /// let x: Option<&str> = None;
         .               /// x.expect("fruits are healthy"); // panics with `fruits are healthy`
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
    12,728 ( 0.00%)      pub const fn expect(self, msg: &str) -> T {
 2,517,580 ( 0.03%)          match self {
 1,447,174 ( 0.02%)              Some(val) => val,
         .                       None => expect_failed(msg),
         .                   }
     3,182 ( 0.00%)      }
         .           
         .               /// Returns the contained [`Some`] value, consuming the `self` value.
         .               ///
         .               /// Because this function may panic, its use is generally discouraged.
         .               /// Instead, prefer to use pattern matching and handle the [`None`]
         .               /// case explicitly, or call [`unwrap_or`], [`unwrap_or_else`], or
         .               /// [`unwrap_or_default`].
         .               ///
-- line 725 ----------------------------------------
-- line 741 ----------------------------------------
         .               /// ```should_panic
         .               /// let x: Option<&str> = None;
         .               /// assert_eq!(x.unwrap(), "air"); // fails
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
   108,124 ( 0.00%)      pub const fn unwrap(self) -> T {
 6,510,063 ( 0.07%)          match self {
 1,180,456 ( 0.01%)              Some(val) => val,
         .                       None => panic("called `Option::unwrap()` on a `None` value"),
         .                   }
    50,580 ( 0.00%)      }
         .           
         .               /// Returns the contained [`Some`] value or a provided default.
         .               ///
         .               /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing
         .               /// the result of a function call, it is recommended to use [`unwrap_or_else`],
         .               /// which is lazily evaluated.
         .               ///
         .               /// [`unwrap_or_else`]: Option::unwrap_or_else
-- line 762 ----------------------------------------
-- line 765 ----------------------------------------
         .               ///
         .               /// ```
         .               /// assert_eq!(Some("car").unwrap_or("bike"), "car");
         .               /// assert_eq!(None.unwrap_or("bike"), "bike");
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
    17,697 ( 0.00%)      pub const fn unwrap_or(self, default: T) -> T
         .               where
         .                   T: ~const Drop,
         .               {
 2,039,406 ( 0.02%)          match self {
     2,230 ( 0.00%)              Some(x) => x,
    17,691 ( 0.00%)              None => default,
         .                   }
    62,490 ( 0.00%)      }
         .           
         .               /// Returns the contained [`Some`] value or computes it from a closure.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let k = 10;
         .               /// assert_eq!(Some(4).unwrap_or_else(|| 2 * k), 4);
         .               /// assert_eq!(None.unwrap_or_else(|| 2 * k), 20);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
     7,246 ( 0.00%)      pub const fn unwrap_or_else<F>(self, f: F) -> T
         .               where
         .                   F: ~const FnOnce() -> T,
         .                   F: ~const Drop,
         .               {
 2,072,165 ( 0.02%)          match self {
   170,457 ( 0.00%)              Some(x) => x,
    31,869 ( 0.00%)              None => f(),
         .                   }
    15,704 ( 0.00%)      }
         .           
         .               /// Returns the contained [`Some`] value or a default.
         .               ///
         .               /// Consumes the `self` argument then, if [`Some`], returns the contained
         .               /// value, otherwise if [`None`], returns the [default value] for that
         .               /// type.
         .               ///
         .               /// # Examples
-- line 812 ----------------------------------------
-- line 831 ----------------------------------------
         .               /// [`FromStr`]: crate::str::FromStr
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn unwrap_or_default(self) -> T
         .               where
         .                   T: ~const Default,
         .               {
    26,507 ( 0.00%)          match self {
    27,439 ( 0.00%)              Some(x) => x,
         .                       None => Default::default(),
         .                   }
     4,754 ( 0.00%)      }
         .           
         .               /// Returns the contained [`Some`] value, consuming the `self` value,
         .               /// without checking that the value is not [`None`].
         .               ///
         .               /// # Safety
         .               ///
         .               /// Calling this method on [`None`] is *[undefined behavior]*.
         .               ///
-- line 851 ----------------------------------------
-- line 861 ----------------------------------------
         .               /// ```no_run
         .               /// let x: Option<&str> = None;
         .               /// assert_eq!(unsafe { x.unwrap_unchecked() }, "air"); // Undefined behavior!
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "option_result_unwrap_unchecked", since = "1.58.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
     8,708 ( 0.00%)      pub const unsafe fn unwrap_unchecked(self) -> T {
     8,708 ( 0.00%)          debug_assert!(self.is_some());
    30,478 ( 0.00%)          match self {
    13,062 ( 0.00%)              Some(val) => val,
         .                       // SAFETY: the safety contract must be upheld by the caller.
         .                       None => unsafe { hint::unreachable_unchecked() },
         .                   }
     8,708 ( 0.00%)      }
         .           
         .               /////////////////////////////////////////////////////////////////////////
         .               // Transforming contained values
         .               /////////////////////////////////////////////////////////////////////////
         .           
         .               /// Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.
         .               ///
         .               /// # Examples
-- line 884 ----------------------------------------
-- line 892 ----------------------------------------
         .               /// // `Option::map` takes self *by value*, consuming `maybe_some_string`
         .               /// let maybe_some_len = maybe_some_string.map(|s| s.len());
         .               ///
         .               /// assert_eq!(maybe_some_len, Some(13));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
 1,332,693 ( 0.01%)      pub const fn map<U, F>(self, f: F) -> Option<U>
         .               where
         .                   F: ~const FnOnce(T) -> U,
         .                   F: ~const Drop,
         .               {
 8,445,881 ( 0.09%)          match self {
 8,259,515 ( 0.09%)              Some(x) => Some(f(x)),
   288,117 ( 0.00%)              None => None,
         .                   }
 2,501,166 ( 0.03%)      }
         .           
         .               /// Calls the provided closure with a reference to the contained value (if [`Some`]).
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(result_option_inspect)]
         .               ///
-- line 917 ----------------------------------------
-- line 954 ----------------------------------------
         .               /// assert_eq!(x.map_or(42, |v| v.len()), 3);
         .               ///
         .               /// let x: Option<&str> = None;
         .               /// assert_eq!(x.map_or(42, |v| v.len()), 42);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
     8,324 ( 0.00%)      pub const fn map_or<U, F>(self, default: U, f: F) -> U
         .               where
         .                   F: ~const FnOnce(T) -> U,
         .                   F: ~const Drop,
         .                   U: ~const Drop,
         .               {
 1,414,815 ( 0.02%)          match self {
    89,788 ( 0.00%)              Some(t) => f(t),
    38,470 ( 0.00%)              None => default,
         .                   }
    13,298 ( 0.00%)      }
         .           
         .               /// Computes a default function result (if none), or
         .               /// applies a different function to the contained value (if any).
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let k = 21;
-- line 980 ----------------------------------------
-- line 990 ----------------------------------------
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn map_or_else<U, D, F>(self, default: D, f: F) -> U
         .               where
         .                   D: ~const FnOnce() -> U,
         .                   D: ~const Drop,
         .                   F: ~const FnOnce(T) -> U,
         .                   F: ~const Drop,
         .               {
   113,671 ( 0.00%)          match self {
    37,488 ( 0.00%)              Some(t) => f(t),
         .                       None => default(),
         .                   }
         .               }
         .           
         .               /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to
         .               /// [`Ok(v)`] and [`None`] to [`Err(err)`].
         .               ///
         .               /// Arguments passed to `ok_or` are eagerly evaluated; if you are passing the
-- line 1007 ----------------------------------------
-- line 1020 ----------------------------------------
         .               /// assert_eq!(x.ok_or(0), Ok("foo"));
         .               ///
         .               /// let x: Option<&str> = None;
         .               /// assert_eq!(x.ok_or(0), Err(0));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
   579,719 ( 0.01%)      pub const fn ok_or<E>(self, err: E) -> Result<T, E>
         .               where
         .                   E: ~const Drop,
         .               {
 1,855,469 ( 0.02%)          match self {
   535,218 ( 0.01%)              Some(v) => Ok(v),
     9,569 ( 0.00%)              None => Err(err),
         .                   }
   824,575 ( 0.01%)      }
         .           
         .               /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to
         .               /// [`Ok(v)`] and [`None`] to [`Err(err())`].
         .               ///
         .               /// [`Ok(v)`]: Ok
         .               /// [`Err(err())`]: Err
         .               /// [`Some(v)`]: Some
         .               ///
-- line 1044 ----------------------------------------
-- line 1049 ----------------------------------------
         .               /// assert_eq!(x.ok_or_else(|| 0), Ok("foo"));
         .               ///
         .               /// let x: Option<&str> = None;
         .               /// assert_eq!(x.ok_or_else(|| 0), Err(0));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
     4,112 ( 0.00%)      pub const fn ok_or_else<E, F>(self, err: F) -> Result<T, E>
         .               where
         .                   F: ~const FnOnce() -> E,
         .                   F: ~const Drop,
         .               {
   130,647 ( 0.00%)          match self {
   129,393 ( 0.00%)              Some(v) => Ok(v),
    41,179 ( 0.00%)              None => Err(err()),
         .                   }
     5,105 ( 0.00%)      }
         .           
         .               /// Converts from `Option<T>` (or `&Option<T>`) to `Option<&T::Target>`.
         .               ///
         .               /// Leaves the original Option in-place, creating a new one with a reference
         .               /// to the original one, additionally coercing the contents via [`Deref`].
         .               ///
         .               /// # Examples
         .               ///
-- line 1074 ----------------------------------------
-- line 1080 ----------------------------------------
         .               /// assert_eq!(x.as_deref(), None);
         .               /// ```
         .               #[stable(feature = "option_deref", since = "1.40.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn as_deref(&self) -> Option<&T::Target>
         .               where
         .                   T: ~const Deref,
         .               {
    40,052 ( 0.00%)          match self.as_ref() {
         .                       Some(t) => Some(t.deref()),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Converts from `Option<T>` (or `&mut Option<T>`) to `Option<&mut T::Target>`.
         .               ///
         .               /// Leaves the original `Option` in-place, creating a new one containing a mutable reference to
-- line 1096 ----------------------------------------
-- line 1213 ----------------------------------------
         .               /// assert_eq!(Some(2).and_then(sq).and_then(sq), Some(16));
         .               /// assert_eq!(Some(2).and_then(sq).and_then(nope), None);
         .               /// assert_eq!(Some(2).and_then(nope).and_then(sq), None);
         .               /// assert_eq!(None.and_then(sq).and_then(sq), None);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
    15,323 ( 0.00%)      pub const fn and_then<U, F>(self, f: F) -> Option<U>
         .               where
         .                   F: ~const FnOnce(T) -> Option<U>,
         .                   F: ~const Drop,
         .               {
   321,760 ( 0.00%)          match self {
    64,210 ( 0.00%)              Some(x) => f(x),
       226 ( 0.00%)              None => None,
         .                   }
    88,196 ( 0.00%)      }
         .           
         .               /// Returns [`None`] if the option is [`None`], otherwise calls `predicate`
         .               /// with the wrapped value and returns:
         .               ///
         .               /// - [`Some(t)`] if `predicate` returns `true` (where `t` is the wrapped
         .               ///   value), and
         .               /// - [`None`] if `predicate` returns `false`.
         .               ///
-- line 1238 ----------------------------------------
-- line 1257 ----------------------------------------
         .               #[stable(feature = "option_filter", since = "1.27.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn filter<P>(self, predicate: P) -> Self
         .               where
         .                   T: ~const Drop,
         .                   P: ~const FnOnce(&T) -> bool,
         .                   P: ~const Drop,
         .               {
    15,307 ( 0.00%)          if let Some(x) = self {
    13,772 ( 0.00%)              if predicate(&x) {
     1,846 ( 0.00%)                  return Some(x);
         .                       }
         .                   }
         .                   None
       558 ( 0.00%)      }
         .           
         .               /// Returns the option if it contains a value, otherwise returns `optb`.
         .               ///
         .               /// Arguments passed to `or` are eagerly evaluated; if you are passing the
         .               /// result of a function call, it is recommended to use [`or_else`], which is
         .               /// lazily evaluated.
         .               ///
         .               /// [`or_else`]: Option::or_else
-- line 1279 ----------------------------------------
-- line 1295 ----------------------------------------
         .               ///
         .               /// let x: Option<u32> = None;
         .               /// let y = None;
         .               /// assert_eq!(x.or(y), None);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
    19,607 ( 0.00%)      pub const fn or(self, optb: Option<T>) -> Option<T>
         .               where
         .                   T: ~const Drop,
         .               {
    34,435 ( 0.00%)          match self {
    14,637 ( 0.00%)              Some(x) => Some(x),
    11,209 ( 0.00%)              None => optb,
         .                   }
    14,020 ( 0.00%)      }
         .           
         .               /// Returns the option if it contains a value, otherwise calls `f` and
         .               /// returns the result.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// fn nobody() -> Option<&'static str> { None }
-- line 1319 ----------------------------------------
-- line 1321 ----------------------------------------
         .               ///
         .               /// assert_eq!(Some("barbarians").or_else(vikings), Some("barbarians"));
         .               /// assert_eq!(None.or_else(vikings), Some("vikings"));
         .               /// assert_eq!(None.or_else(nobody), None);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
     2,510 ( 0.00%)      pub const fn or_else<F>(self, f: F) -> Option<T>
         .               where
         .                   F: ~const FnOnce() -> Option<T>,
         .                   F: ~const Drop,
         .               {
    83,642 ( 0.00%)          match self {
    37,865 ( 0.00%)              Some(x) => Some(x),
     1,650 ( 0.00%)              None => f(),
         .                   }
     2,265 ( 0.00%)      }
         .           
         .               /// Returns [`Some`] if exactly one of `self`, `optb` is [`Some`], otherwise returns [`None`].
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = Some(2);
         .               /// let y: Option<u32> = None;
-- line 1346 ----------------------------------------
-- line 1431 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "option_entry", since = "1.20.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn get_or_insert(&mut self, value: T) -> &mut T
         .               where
         .                   T: ~const Drop,
         .               {
   119,940 ( 0.00%)          if let None = *self {
   279,860 ( 0.00%)              *self = Some(value);
         .                   }
         .           
         .                   // SAFETY: a `None` variant for `self` would have been replaced by a `Some`
         .                   // variant in the code above.
         .                   unsafe { self.as_mut().unwrap_unchecked() }
         .               }
         .           
         .               /// Inserts the default value into the option if it is [`None`], then
-- line 1448 ----------------------------------------
-- line 1494 ----------------------------------------
         .               ///     *y = 7;
         .               /// }
         .               ///
         .               /// assert_eq!(x, Some(7));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "option_entry", since = "1.20.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
    13,040 ( 0.00%)      pub const fn get_or_insert_with<F>(&mut self, f: F) -> &mut T
         .               where
         .                   F: ~const FnOnce() -> T,
         .                   F: ~const Drop,
         .               {
 1,038,654 ( 0.01%)          if let None = *self {
         .                       // the compiler isn't smart enough to know that we are not dropping a `T`
         .                       // here and wants us to ensure `T` can be dropped at compile time.
    26,273 ( 0.00%)              mem::forget(mem::replace(self, Some(f())))
         .                   }
         .           
         .                   // SAFETY: a `None` variant for `self` would have been replaced by a `Some`
         .                   // variant in the code above.
    47,718 ( 0.00%)          unsafe { self.as_mut().unwrap_unchecked() }
    21,710 ( 0.00%)      }
         .           
         .               /////////////////////////////////////////////////////////////////////////
         .               // Misc
         .               /////////////////////////////////////////////////////////////////////////
         .           
         .               /// Takes the value out of the option, leaving a [`None`] in its place.
         .               ///
         .               /// # Examples
-- line 1524 ----------------------------------------
-- line 1532 ----------------------------------------
         .               /// let mut x: Option<u32> = None;
         .               /// let y = x.take();
         .               /// assert_eq!(x, None);
         .               /// assert_eq!(y, None);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
   563,668 ( 0.01%)      pub const fn take(&mut self) -> Option<T> {
         .                   // FIXME replace `mem::replace` by `mem::take` when the latter is const ready
   559,942 ( 0.01%)          mem::replace(self, None)
   339,870 ( 0.00%)      }
         .           
         .               /// Replaces the actual value in the option by the value given in parameter,
         .               /// returning the old value if present,
         .               /// leaving a [`Some`] in its place without deinitializing either one.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 1551 ----------------------------------------
-- line 1558 ----------------------------------------
         .               /// let old = x.replace(3);
         .               /// assert_eq!(x, Some(3));
         .               /// assert_eq!(old, None);
         .               /// ```
         .               #[inline]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
         .               #[stable(feature = "option_replace", since = "1.31.0")]
         .               pub const fn replace(&mut self, value: T) -> Option<T> {
     5,584 ( 0.00%)          mem::replace(self, Some(value))
         .               }
         .           
         .               /// Returns `true` if the option is a [`Some`] value containing the given value.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(option_result_contains)]
-- line 1574 ----------------------------------------
-- line 1712 ----------------------------------------
         .               #[stable(feature = "copied", since = "1.35.0")]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
         .               pub const fn copied(self) -> Option<T>
         .               where
         .                   T: Copy,
         .               {
         .                   // FIXME: this implementation, which sidesteps using `Option::map` since it's not const
         .                   // ready yet, should be reverted when possible to avoid code repetition
    82,826 ( 0.00%)          match self {
 1,075,744 ( 0.01%)              Some(&v) => Some(v),
     6,239 ( 0.00%)              None => None,
         .                   }
        20 ( 0.00%)      }
         .           
         .               /// Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the
         .               /// option.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = 12;
-- line 1732 ----------------------------------------
-- line 1733 ----------------------------------------
         .               /// let opt_x = Some(&x);
         .               /// assert_eq!(opt_x, Some(&12));
         .               /// let cloned = opt_x.cloned();
         .               /// assert_eq!(cloned, Some(12));
         .               /// ```
         .               #[must_use = "`self` will be dropped if the result is not used"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_cloned", issue = "91582")]
    54,692 ( 0.00%)      pub const fn cloned(self) -> Option<T>
         .               where
         .                   T: ~const Clone,
         .               {
   355,640 ( 0.00%)          match self {
 1,006,778 ( 0.01%)              Some(t) => Some(t.clone()),
    34,994 ( 0.00%)              None => None,
         .                   }
   126,393 ( 0.00%)      }
         .           }
         .           
         .           impl<T> Option<&mut T> {
         .               /// Maps an `Option<&mut T>` to an `Option<T>` by copying the contents of the
         .               /// option.
         .               ///
         .               /// # Examples
         .               ///
-- line 1757 ----------------------------------------
-- line 1842 ----------------------------------------
         .           
         .           /////////////////////////////////////////////////////////////////////////////
         .           // Trait implementations
         .           /////////////////////////////////////////////////////////////////////////////
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: Clone> Clone for Option<T> {
         .               #[inline]
    68,380 ( 0.00%)      fn clone(&self) -> Self {
 4,668,946 ( 0.05%)          match self {
    91,564 ( 0.00%)              Some(x) => Some(x.clone()),
    38,555 ( 0.00%)              None => None,
         .                   }
 1,500,991 ( 0.02%)      }
         .           
         .               #[inline]
         .               fn clone_from(&mut self, source: &Self) {
         .                   match (self, source) {
         .                       (Some(to), Some(from)) => to.clone_from(from),
         .                       (to, from) => *to = from.clone(),
         .                   }
         .               }
-- line 1863 ----------------------------------------
-- line 1870 ----------------------------------------
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let opt: Option<u32> = Option::default();
         .               /// assert!(opt.is_none());
         .               /// ```
         .               #[inline]
        87 ( 0.00%)      fn default() -> Option<T> {
        87 ( 0.00%)          None
       261 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T> IntoIterator for Option<T> {
         .               type Item = T;
         .               type IntoIter = IntoIter<T>;
         .           
         .               /// Returns a consuming iterator over the possibly contained value.
-- line 1888 ----------------------------------------
-- line 1894 ----------------------------------------
         .               /// let v: Vec<&str> = x.into_iter().collect();
         .               /// assert_eq!(v, ["string"]);
         .               ///
         .               /// let x = None;
         .               /// let v: Vec<&str> = x.into_iter().collect();
         .               /// assert!(v.is_empty());
         .               /// ```
         .               #[inline]
   234,479 ( 0.00%)      fn into_iter(self) -> IntoIter<T> {
   800,121 ( 0.01%)          IntoIter { inner: Item { opt: self } }
   160,980 ( 0.00%)      }
         .           }
         .           
         .           #[stable(since = "1.4.0", feature = "option_iter")]
         .           impl<'a, T> IntoIterator for &'a Option<T> {
         .               type Item = &'a T;
         .               type IntoIter = Iter<'a, T>;
         .           
         .               fn into_iter(self) -> Iter<'a, T> {
-- line 1912 ----------------------------------------
-- line 2000 ----------------------------------------
         .           struct Item<A> {
         .               opt: Option<A>,
         .           }
         .           
         .           impl<A> Iterator for Item<A> {
         .               type Item = A;
         .           
         .               #[inline]
   533,212 ( 0.01%)      fn next(&mut self) -> Option<A> {
   229,686 ( 0.00%)          self.opt.take()
   321,690 ( 0.00%)      }
         .           
         .               #[inline]
        56 ( 0.00%)      fn size_hint(&self) -> (usize, Option<usize>) {
    86,063 ( 0.00%)          match self.opt {
         .                       Some(_) => (1, Some(1)),
       112 ( 0.00%)              None => (0, Some(0)),
         .                   }
        28 ( 0.00%)      }
         .           }
         .           
         .           impl<A> DoubleEndedIterator for Item<A> {
         .               #[inline]
         .               fn next_back(&mut self) -> Option<A> {
         .                   self.opt.take()
         .               }
         .           }
-- line 2026 ----------------------------------------
-- line 2131 ----------------------------------------
         .               inner: Item<A>,
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<A> Iterator for IntoIter<A> {
         .               type Item = A;
         .           
         .               #[inline]
   533,212 ( 0.01%)      fn next(&mut self) -> Option<A> {
   229,686 ( 0.00%)          self.inner.next()
   321,690 ( 0.00%)      }
         .               #[inline]
        56 ( 0.00%)      fn size_hint(&self) -> (usize, Option<usize>) {
        99 ( 0.00%)          self.inner.size_hint()
        28 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<A> DoubleEndedIterator for IntoIter<A> {
         .               #[inline]
         .               fn next_back(&mut self) -> Option<A> {
         .                   self.inner.next_back()
         .               }
-- line 2153 ----------------------------------------
-- line 2239 ----------------------------------------
         .           
         .           #[unstable(feature = "try_trait_v2", issue = "84277")]
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T> const ops::Try for Option<T> {
         .               type Output = T;
         .               type Residual = Option<convert::Infallible>;
         .           
         .               #[inline]
     3,182 ( 0.00%)      fn from_output(output: Self::Output) -> Self {
     3,182 ( 0.00%)          Some(output)
    13,344 ( 0.00%)      }
         .           
         .               #[inline]
   802,713 ( 0.01%)      fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
 4,027,642 ( 0.04%)          match self {
 1,352,193 ( 0.02%)              Some(v) => ControlFlow::Continue(v),
    34,080 ( 0.00%)              None => ControlFlow::Break(None),
         .                   }
 1,182,766 ( 0.01%)      }
         .           }
         .           
         .           #[unstable(feature = "try_trait_v2", issue = "84277")]
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T> const ops::FromResidual for Option<T> {
         .               #[inline]
    18,916 ( 0.00%)      fn from_residual(residual: Option<convert::Infallible>) -> Self {
         .                   match residual {
   155,350 ( 0.00%)              None => None,
         .                   }
    56,883 ( 0.00%)      }
         .           }
         .           
         .           #[unstable(feature = "try_trait_v2_residual", issue = "91285")]
         .           impl<T> ops::Residual<T> for Option<convert::Infallible> {
         .               type TryType = Option<T>;
         .           }
         .           
         .           impl<T> Option<Option<T>> {
-- line 2276 ----------------------------------------
-- line 2297 ----------------------------------------
         .               /// let x: Option<Option<Option<u32>>> = Some(Some(Some(6)));
         .               /// assert_eq!(Some(Some(6)), x.flatten());
         .               /// assert_eq!(Some(6), x.flatten().flatten());
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "option_flattening", since = "1.40.0")]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
         .               pub const fn flatten(self) -> Option<T> {
       298 ( 0.00%)          match self {
     1,639 ( 0.00%)              Some(inner) => inner,
         .                       None => None,
         .                   }
         .               }
         .           }

 9,247,930 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir                 

-- line 118 ----------------------------------------
        .               stability: InternedSet<'tcx, attr::Stability>,
        .           
        .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
        .               const_stability: InternedSet<'tcx, attr::ConstStability>,
        .           }
        .           
        .           impl<'tcx> CtxtInterners<'tcx> {
        .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
       17 ( 0.00%)          CtxtInterners {
        .                       arena,
        .                       type_: Default::default(),
        .                       type_list: Default::default(),
        .                       substs: Default::default(),
        .                       region: Default::default(),
        .                       poly_existential_predicates: Default::default(),
        .                       canonical_var_infos: Default::default(),
        .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
        .                       stability: Default::default(),
        .                       const_stability: Default::default(),
        .                   }
        .               }
        .           
        .               /// Interns a type.
        .               #[allow(rustc::usage_of_ty_tykind)]
        .               #[inline(never)]
4,599,072 ( 0.05%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
        .                   self.type_
2,874,420 ( 0.03%)              .intern(kind, |kind| {
  115,166 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
        .           
        .                           let ty_struct = TyS {
  230,332 ( 0.00%)                      kind,
        .                               flags: flags.flags,
        .                               outer_exclusive_binder: flags.outer_exclusive_binder,
        .                           };
        .           
        .                           Interned(self.arena.alloc(ty_struct))
        .                       })
        .                       .0
5,173,956 ( 0.06%)      }
        .           
        .               #[inline(never)]
1,437,984 ( 0.02%)      fn intern_predicate(
        .                   &self,
        .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
        .               ) -> &'tcx PredicateInner<'tcx> {
        .                   self.predicate
1,258,236 ( 0.01%)              .intern(kind, |kind| {
  241,866 ( 0.00%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
        .           
        .                           let predicate_struct = PredicateInner {
        .                               kind,
        .                               flags: flags.flags,
        .                               outer_exclusive_binder: flags.outer_exclusive_binder,
        .                           };
        .           
        .                           Interned(self.arena.alloc(predicate_struct))
        .                       })
        .                       .0
1,617,732 ( 0.02%)      }
        .           }
        .           
        .           pub struct CommonTypes<'tcx> {
        .               pub unit: Ty<'tcx>,
        .               pub bool: Ty<'tcx>,
        .               pub char: Ty<'tcx>,
        .               pub isize: Ty<'tcx>,
        .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
        .           /// safely used as a key in the maps of a TypeckResults. For that to be
        .           /// the case, the HirId must have the same `owner` as all the other IDs in
        .           /// this table (signified by `hir_owner`). Otherwise the HirId
        .           /// would be in a different frame of reference and using its `local_id`
        .           /// would result in lookup errors, or worse, in silently wrong data being
        .           /// stored/returned.
        .           #[inline]
        .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
  623,291 ( 0.01%)      if hir_id.owner != hir_owner {
        .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
        .               }
        .           }
        .           
        .           #[cold]
        .           #[inline(never)]
        .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
        .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
        .           }
        .           
        .           impl<'a, V> LocalTableInContext<'a, V> {
        .               pub fn contains_key(&self, id: hir::HirId) -> bool {
        .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.data.contains_key(&id.local_id)
        .               }
        .           
  466,028 ( 0.01%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
   93,188 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
   93,188 ( 0.00%)          self.data.get(&id.local_id)
  373,668 ( 0.00%)      }
        .           
        .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
        .                   self.data.iter()
        .               }
        .           }
        .           
        .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
        .               type Output = V;
        .           
    4,968 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
        .                   self.get(key).expect("LocalTableInContext: key not found")
    3,312 ( 0.00%)      }
        .           }
        .           
        .           pub struct LocalTableInContextMut<'a, V> {
        .               hir_owner: LocalDefId,
        .               data: &'a mut ItemLocalMap<V>,
        .           }
        .           
        .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
        .               pub treat_byte_string_as_slice: ItemLocalSet,
        .           
        .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
        .               /// on closure size.
        .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
        .           }
        .           
        .           impl<'tcx> TypeckResults<'tcx> {
   26,130 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
  309,205 ( 0.00%)          TypeckResults {
        .                       hir_owner,
        .                       type_dependent_defs: Default::default(),
        .                       field_indices: Default::default(),
        .                       user_provided_types: Default::default(),
        .                       user_provided_sigs: Default::default(),
        .                       node_types: Default::default(),
        .                       node_substs: Default::default(),
        .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
        .                       tainted_by_errors: None,
        .                       concrete_opaque_types: Default::default(),
        .                       closure_min_captures: Default::default(),
        .                       closure_fake_reads: Default::default(),
        .                       generator_interior_types: ty::Binder::dummy(Default::default()),
        .                       treat_byte_string_as_slice: Default::default(),
        .                       closure_size_eval: Default::default(),
        .                   }
   26,130 ( 0.00%)      }
        .           
        .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
  100,422 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
   66,948 ( 0.00%)          match *qpath {
  159,702 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
        .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
        .                           .type_dependent_def(id)
   41,142 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
        .                   }
  167,370 ( 0.00%)      }
        .           
    1,299 ( 0.00%)      pub fn type_dependent_defs(
        .                   &self,
        .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
    6,991 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
    1,299 ( 0.00%)      }
        .           
   10,738 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
   20,951 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
   21,476 ( 0.00%)      }
        .           
   13,424 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
        .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
   13,424 ( 0.00%)      }
        .           
   39,632 ( 0.00%)      pub fn type_dependent_defs_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
   39,632 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
   39,632 ( 0.00%)      }
        .           
        .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
   12,094 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
    1,747 ( 0.00%)      }
        .           
        .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
   22,542 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
   11,271 ( 0.00%)      }
        .           
        .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
   18,568 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    9,284 ( 0.00%)      }
        .           
        .               pub fn user_provided_types_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
    4,784 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
    2,392 ( 0.00%)      }
        .           
        .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
   88,380 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
   44,190 ( 0.00%)      }
        .           
        .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
  154,266 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
   77,133 ( 0.00%)      }
        .           
  658,698 ( 0.01%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
  109,783 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
        .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
        .                   })
  548,915 ( 0.01%)      }
        .           
  140,997 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
  140,997 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_types.get(&id.local_id).cloned()
  281,994 ( 0.00%)      }
        .           
        .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
   16,840 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
    8,420 ( 0.00%)      }
        .           
   46,491 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
   46,491 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
   92,982 ( 0.00%)      }
        .           
   32,408 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
   32,408 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_substs.get(&id.local_id).cloned()
   64,816 ( 0.00%)      }
        .           
        .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
        .               // doesn't provide type parameter substitutions.
        .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
   12,660 ( 0.00%)          self.node_type(pat.hir_id)
        .               }
        .           
        .               // Returns the type of an expression as a monotype.
        .               //
        .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
        .               // some cases, we insert `Adjustment` annotations such as auto-deref or
        .               // auto-ref.  The type returned by this function does not consider such
        .               // adjustments.  See `expr_ty_adjusted()` instead.
        .               //
        .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
        .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
        .               // instead of "fn(ty) -> T with T = isize".
        .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
  125,791 ( 0.00%)          self.node_type(expr.hir_id)
        .               }
        .           
        .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
  118,167 ( 0.00%)          self.node_type_opt(expr.hir_id)
        .               }
        .           
        .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   60,412 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
   30,206 ( 0.00%)      }
        .           
        .               pub fn adjustments_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   91,166 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
   45,583 ( 0.00%)      }
        .           
   53,380 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
  106,760 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
        .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
  106,760 ( 0.00%)      }
        .           
        .               /// Returns the type of `expr`, considering any `Adjustment`
        .               /// entry recorded for that expression.
    6,280 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
    1,256 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
    1,884 ( 0.00%)      }
        .           
    1,590 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
      318 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
    1,044 ( 0.00%)      }
        .           
    5,692 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
        .                   // Only paths and method calls/overloaded operators have
        .                   // entries in type_dependent_defs, ignore the former here.
   11,384 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
        .                       return false;
        .                   }
        .           
   12,656 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
   11,384 ( 0.00%)      }
        .           
   24,432 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
        .                   self.pat_binding_modes().get(id).copied().or_else(|| {
        .                       s.delay_span_bug(sp, "missing binding mode");
        .                       None
        .                   })
   32,576 ( 0.00%)      }
        .           
        .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
   20,714 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
    6,285 ( 0.00%)      }
        .           
        .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
   10,940 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
    5,470 ( 0.00%)      }
        .           
        .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
   31,234 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
   15,617 ( 0.00%)      }
        .           
        .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
   10,098 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
    5,049 ( 0.00%)      }
        .           
        .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
        .               /// by the closure.
    6,708 ( 0.00%)      pub fn closure_min_captures_flattened(
        .                   &self,
        .                   closure_def_id: DefId,
        .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
        .                   self.closure_min_captures
        .                       .get(&closure_def_id)
        .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
        .                       .into_iter()
        .                       .flatten()
    8,385 ( 0.00%)      }
        .           
        .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
    2,572 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
    1,286 ( 0.00%)      }
        .           
        .               pub fn closure_kind_origins_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
        .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
        .               }
        .           
        .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
    5,884 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
    2,942 ( 0.00%)      }
        .           
        .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
    3,312 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
    1,656 ( 0.00%)      }
        .           
        .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    2,572 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
    1,286 ( 0.00%)      }
        .           
        .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
        .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
        .               }
        .           
    2,550 ( 0.00%)      pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
      850 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
        .                   self.coercion_casts.contains(&hir_id.local_id)
    1,700 ( 0.00%)      }
        .           
        .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
        .                   self.coercion_casts.insert(id);
        .               }
        .           
        .               pub fn coercion_casts(&self) -> &ItemLocalSet {
    1,286 ( 0.00%)          &self.coercion_casts
    1,286 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
        .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
        .                   let ty::TypeckResults {
        .                       hir_owner,
        .                       ref type_dependent_defs,
        .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
        .                   const START_INDEX = 0,
        .               }
        .           }
        .           
        .           /// Mapping of type annotation indices to canonical user type annotations.
        .           pub type CanonicalUserTypeAnnotations<'tcx> =
        .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
        .           
    2,298 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
        .           pub struct CanonicalUserTypeAnnotation<'tcx> {
        .               pub user_ty: CanonicalUserType<'tcx>,
        .               pub span: Span,
    1,206 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
        .           }
        .           
        .           /// Canonicalized user type annotation.
        .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
        .           
        .           impl<'tcx> CanonicalUserType<'tcx> {
        .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
        .               /// i.e., each thing is mapped to a canonical variable with the same index.
    2,859 ( 0.00%)      pub fn is_identity(&self) -> bool {
    5,718 ( 0.00%)          match self.value {
        .                       UserType::Ty(_) => false,
        .                       UserType::TypeOf(_, user_substs) => {
    2,859 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
        .                               return false;
        .                           }
        .           
        .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
        .                               match kind.unpack() {
    5,660 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
        .                                       ty::Bound(debruijn, b) => {
        .                                           // We only allow a `ty::INNERMOST` index in substitutions.
    2,787 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
        .                                           cvar == b.var
        .                                       }
        .                                       _ => false,
        .                                   },
        .           
      154 ( 0.00%)                          GenericArgKind::Lifetime(r) => match r {
        .                                       ty::ReLateBound(debruijn, br) => {
        .                                           // We only allow a `ty::INNERMOST` index in substitutions.
        .                                           assert_eq!(*debruijn, ty::INNERMOST);
        .                                           cvar == br.var
        .                                       }
        .                                       _ => false,
        .                                   },
        .           
-- line 867 ----------------------------------------
-- line 872 ----------------------------------------
        .                                           cvar == b
        .                                       }
        .                                       _ => false,
        .                                   },
        .                               }
        .                           })
        .                       }
        .                   }
    5,718 ( 0.00%)      }
        .           }
        .           
        .           /// A user-given type annotation attached to a constant. These arise
        .           /// from constants that are named via paths, like `Foo::<A>::new` and
        .           /// so forth.
    7,236 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
   40,559 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
        .           pub enum UserType<'tcx> {
        .               Ty(Ty<'tcx>),
        .           
        .               /// The canonical type is the result of `type_of(def_id)` with the
        .               /// given substitutions applied.
        .               TypeOf(DefId, UserSubsts<'tcx>),
        .           }
        .           
        .           impl<'tcx> CommonTypes<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
      111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
        .           
        .                   CommonTypes {
        .                       unit: mk(Tuple(List::empty())),
        .                       bool: mk(Bool),
        .                       char: mk(Char),
        .                       never: mk(Never),
        .                       isize: mk(Int(ty::IntTy::Isize)),
        .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
        .           
        .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> CommonLifetimes<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
       67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
        .           
        .                   CommonLifetimes {
        5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
        5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
        5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> CommonConsts<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
        6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
        .           
        .                   CommonConsts {
        .                       unit: mk_const(ty::Const {
        .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
        .                           ty: types.unit,
        .                       }),
        .                   }
        .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
        .           
        .               /// Stores memory for globals (statics/consts).
        .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
        .           
        .               output_filenames: Arc<OutputFilenames>,
        .           }
        .           
        .           impl<'tcx> TyCtxt<'tcx> {
   64,540 ( 0.00%)      pub fn typeck_opt_const_arg(
        .                   self,
        .                   def: ty::WithOptConstParam<LocalDefId>,
        .               ) -> &'tcx TypeckResults<'tcx> {
   25,816 ( 0.00%)          if let Some(param_did) = def.const_param_did {
        .                       self.typeck_const_arg((def.did, param_did))
        .                   } else {
        .                       self.typeck(def.did)
        .                   }
   51,632 ( 0.00%)      }
        .           
    4,089 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
    1,363 ( 0.00%)          self.arena.alloc(Steal::new(thir))
    5,452 ( 0.00%)      }
        .           
   27,260 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
    5,452 ( 0.00%)          self.arena.alloc(Steal::new(mir))
   38,164 ( 0.00%)      }
        .           
    5,452 ( 0.00%)      pub fn alloc_steal_promoted(
        .                   self,
        .                   promoted: IndexVec<Promoted, Body<'tcx>>,
        .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
    1,363 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
    6,815 ( 0.00%)      }
        .           
    2,268 ( 0.00%)      pub fn alloc_adt_def(
        .                   self,
        .                   did: DefId,
        .                   kind: AdtKind,
        .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
        .                   repr: ReprOptions,
        .               ) -> &'tcx ty::AdtDef {
    4,032 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
    1,008 ( 0.00%)      }
        .           
        .               /// Allocates a read-only byte or string literal for `mir::interpret`.
      875 ( 0.00%)      pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
        .                   // Create an allocation that just contains these bytes.
      175 ( 0.00%)          let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
    2,275 ( 0.00%)          let alloc = self.intern_const_alloc(alloc);
        .                   self.create_memory_alloc(alloc)
      875 ( 0.00%)      }
        .           
        .               /// Returns a range of the start/end indices specified with the
        .               /// `rustc_layout_scalar_valid_range` attribute.
        .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
   29,120 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
   14,560 ( 0.00%)          let attrs = self.get_attrs(def_id);
   61,880 ( 0.00%)          let get = |name| {
   14,560 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
        .                           Some(attr) => attr,
        .                           None => return Bound::Unbounded,
        .                       };
        .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
      528 ( 0.00%)              if let Some(
        .                           &[
        .                               ast::NestedMetaItem::Literal(ast::Lit {
      264 ( 0.00%)                          kind: ast::LitKind::Int(a, _), ..
        .                               }),
        .                           ],
      132 ( 0.00%)              ) = attr.meta_item_list().as_deref()
        .                       {
        .                           Bound::Included(a)
        .                       } else {
        .                           self.sess
        .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
        .                           Bound::Unbounded
        .                       }
   72,800 ( 0.00%)          };
   21,840 ( 0.00%)          (
   21,840 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
   10,920 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
        .                   )
   29,120 ( 0.00%)      }
        .           
        .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
        .                   value.lift_to_tcx(self)
        .               }
        .           
        .               /// Creates a type context and call the closure with a `TyCtxt` reference
        .               /// to the context. The closure enforces that the type context and any interned
        .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
        .               /// reference to the context, to allow formatting values that need it.
       23 ( 0.00%)      pub fn create_global_ctxt(
        .                   s: &'tcx Session,
        .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
        .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
        .                   resolutions: ty::ResolverOutputs,
        .                   krate: &'tcx hir::Crate<'tcx>,
        .                   dep_graph: DepGraph,
        .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
        .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
        .                   query_kinds: &'tcx [DepKindStruct],
        .                   crate_name: &str,
        .                   output_filenames: OutputFilenames,
        .               ) -> GlobalCtxt<'tcx> {
        1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
        .                       s.fatal(&err);
        .                   });
        .                   let interners = CtxtInterners::new(arena);
        .                   let common_types = CommonTypes::new(&interners);
        .                   let common_lifetimes = CommonLifetimes::new(&interners);
        .                   let common_consts = CommonConsts::new(&interners, &common_types);
        .           
      127 ( 0.00%)          GlobalCtxt {
        .                       sess: s,
        6 ( 0.00%)              lint_store,
        .                       arena,
        2 ( 0.00%)              interners,
        5 ( 0.00%)              dep_graph,
        4 ( 0.00%)              untracked_resolutions: resolutions,
        2 ( 0.00%)              prof: s.prof.clone(),
        .                       types: common_types,
        .                       lifetimes: common_lifetimes,
        .                       consts: common_consts,
        .                       untracked_crate: krate,
        .                       on_disk_cache,
        .                       queries,
        .                       query_caches: query::QueryCaches::default(),
        .                       query_kinds,
        .                       ty_rcache: Default::default(),
        .                       pred_rcache: Default::default(),
        .                       selection_cache: Default::default(),
        .                       evaluation_cache: Default::default(),
        1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
        .                       data_layout,
        .                       alloc_map: Lock::new(interpret::AllocMap::new()),
        .                       output_filenames: Arc::new(output_filenames),
        .                   }
        9 ( 0.00%)      }
        .           
        .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
        .                   &self.query_kinds[k as usize]
        .               }
        .           
        .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
        .               #[track_caller]
        .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   ty: Ty<'tcx>,
        .                   span: S,
        .                   msg: &str,
        .               ) -> &'tcx Const<'tcx> {
        .                   self.sess.delay_span_bug(span, msg);
        .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
        .               }
        .           
   44,646 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
    6,378 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
   47,457 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
   51,024 ( 0.00%)      }
        .           
        .               /// Obtain all lang items of this crate and all dependencies (recursively)
1,456,392 ( 0.02%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
        .                   self.get_lang_items(())
1,872,504 ( 0.02%)      }
        .           
        .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
        .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
      721 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
        .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
      824 ( 0.00%)      }
        .           
        .               /// Obtain the diagnostic item's name
   57,911 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
        .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
   66,184 ( 0.00%)      }
        .           
        .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
   30,695 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
        .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
   35,080 ( 0.00%)      }
        .           
   19,145 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
        .                   self.stability_index(())
   24,615 ( 0.00%)      }
        .           
  682,605 ( 0.01%)      pub fn features(self) -> &'tcx rustc_feature::Features {
        .                   self.features_query(())
  780,120 ( 0.01%)      }
        .           
   36,288 ( 0.00%)      pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
        .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
  269,454 ( 0.00%)          if let Some(id) = id.as_local() {
        .                       self.untracked_resolutions.definitions.def_key(id)
        .                   } else {
  286,790 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
        .                   }
   22,080 ( 0.00%)      }
        .           
        .               /// Converts a `DefId` into its fully expanded `DefPath` (every
        .               /// `DefId` is really just an interned `DefPath`).
        .               ///
        .               /// Note that if `id` is not local to this crate, the result will
        .               ///  be a non-local `DefPath`.
      144 ( 0.00%)      pub fn def_path(self, id: DefId) -> rustc_hir::definitions::DefPath {
        .                   // Accessing the DefPath is ok, since it is part of DefPathHash.
      216 ( 0.00%)          if let Some(id) = id.as_local() {
       81 ( 0.00%)              self.untracked_resolutions.definitions.def_path(id)
        .                   } else {
      225 ( 0.00%)              self.untracked_resolutions.cstore.def_path(id)
        .                   }
      216 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
        .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
   12,516 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
        .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
        .                   } else {
    3,974 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
        .                   if crate_num == LOCAL_CRATE {
        .                       self.sess.local_stable_crate_id()
        .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
        .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
        .                       self.def_path(def_id).to_string_no_crate_verbose()
        .                   )
        .               }
        .           
        .               /// Note that this is *untracked* and should only be used within the query
        .               /// system if the result is otherwise tracked through queries
        .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
   90,264 ( 0.00%)          &*self.untracked_resolutions.cstore
   45,132 ( 0.00%)      }
        .           
        .               /// Note that this is *untracked* and should only be used within the query
        .               /// system if the result is otherwise tracked through queries
        .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
        .                   &self.untracked_resolutions.definitions
        .               }
        .           
        .               #[inline(always)]
        .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
    5,913 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
   24,101 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
        .               }
        .           
        .               #[inline(always)]
        .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
        .                   let resolutions = &self.gcx.untracked_resolutions;
        .                   StableHashingContext::ignore_spans(
        .                       self.sess,
        .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
        .               /// If `true`, we should use the MIR-based borrowck, but also
        .               /// fall back on the AST borrowck if the MIR-based one errors.
        .               pub fn migrate_borrowck(self) -> bool {
        .                   self.borrowck_mode().migrate()
        .               }
        .           
        .               /// What mode(s) of borrowck should we run? AST? MIR? both?
        .               /// (Also considers the `#![feature(nll)]` setting.)
    2,572 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
        .                   // Here are the main constraints we need to deal with:
        .                   //
        .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
        .                   //    synonymous with no `-Z borrowck=...` flag at all.
        .                   //
        .                   // 2. We want to allow developers on the Nightly channel
        .                   //    to opt back into the "hard error" mode for NLL,
        .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
        .                   //   errors. (To simplify the code here, it now even overrides
        .                   //   a user's attempt to specify `-Z borrowck=compare`, which
        .                   //   we arguably do not need anymore and should remove.)
        .                   //
        .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
        .                   //
        .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
        .           
    3,858 ( 0.00%)          if self.features().nll {
        .                       return BorrowckMode::Mir;
        .                   }
        .           
    1,286 ( 0.00%)          self.sess.opts.borrowck_mode
    5,144 ( 0.00%)      }
        .           
        .               /// If `true`, we should use lazy normalization for constants, otherwise
        .               /// we still evaluate them eagerly.
        .               #[inline]
        .               pub fn lazy_normalization(self) -> bool {
    1,306 ( 0.00%)          let features = self.features();
        .                   // Note: We only use lazy normalization for generic const expressions.
      834 ( 0.00%)          features.generic_const_exprs
        .               }
        .           
        .               #[inline]
        .               pub fn local_crate_exports_generics(self) -> bool {
        .                   debug_assert!(self.sess.opts.share_generics());
        .           
    1,877 ( 0.00%)          self.sess.crate_types().iter().any(|crate_type| {
    3,133 ( 0.00%)              match crate_type {
        .                           CrateType::Executable
        .                           | CrateType::Staticlib
        .                           | CrateType::ProcMacro
        .                           | CrateType::Cdylib => false,
        .           
        .                           // FIXME rust-lang/rust#64319, rust-lang/rust#64872:
        .                           // We want to block export of generics from dylibs,
        .                           // but we must fix rust-lang/rust#65890 before we can
-- line 1450 ----------------------------------------
-- line 1540 ----------------------------------------
        .                       // FIXME(#42706) -- in some cases, we could do better here.
        .                       return true;
        .                   }
        .                   false
        .               }
        .           
        .               /// Determines whether identifiers in the assembly have strict naming rules.
        .               /// Currently, only NVPTX* targets need it.
    6,166 ( 0.00%)      pub fn has_strict_asm_symbol_naming(self) -> bool {
    6,166 ( 0.00%)          self.sess.target.arch.contains("nvptx")
   12,332 ( 0.00%)      }
        .           
        .               /// Returns `&'static core::panic::Location<'static>`.
    1,608 ( 0.00%)      pub fn caller_location_ty(self) -> Ty<'tcx> {
        .                   self.mk_imm_ref(
      268 ( 0.00%)              self.lifetimes.re_static,
        .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
      536 ( 0.00%)                  .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
        .                   )
    1,608 ( 0.00%)      }
        .           
        .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
    6,732 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
    4,896 ( 0.00%)          match self.def_kind(def_id) {
        .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
        .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
        .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
        .                       },
   11,016 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
        .                   }
    5,508 ( 0.00%)      }
        .           
   29,589 ( 0.00%)      pub fn type_length_limit(self) -> Limit {
        .                   self.limits(()).type_length_limit
   33,816 ( 0.00%)      }
        .           
  476,280 ( 0.01%)      pub fn recursion_limit(self) -> Limit {
        .                   self.limits(()).recursion_limit
  544,320 ( 0.01%)      }
        .           
  132,643 ( 0.00%)      pub fn move_size_limit(self) -> Limit {
        .                   self.limits(()).move_size_limit
  151,592 ( 0.00%)      }
        .           
   10,878 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
        .                   self.limits(()).const_eval_limit
   12,432 ( 0.00%)      }
        .           
        .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
        .                   iter::once(LOCAL_CRATE)
        .                       .chain(self.crates(()).iter().copied())
        .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
        .               }
        .           }
        .           
-- line 1594 ----------------------------------------
-- line 1614 ----------------------------------------
        .               fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted>;
        .           }
        .           
        .           macro_rules! nop_lift {
        .               ($set:ident; $ty:ty => $lifted:ty) => {
        .                   impl<'a, 'tcx> Lift<'tcx> for $ty {
        .                       type Lifted = $lifted;
        .                       fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {
    5,964 ( 0.00%)                  if tcx.interners.$set.contains_pointer_to(&Interned(self)) {
        .                               Some(unsafe { mem::transmute(self) })
        .                           } else {
        .                               None
        .                           }
        .                       }
        .                   }
        .               };
        .           }
-- line 1630 ----------------------------------------
-- line 1684 ----------------------------------------
        .               /// This is the implicit state of rustc. It contains the current
        .               /// `TyCtxt` and query. It is updated when creating a local interner or
        .               /// executing a new query. Whenever there's a `TyCtxt` value available
        .               /// you should also have access to an `ImplicitCtxt` through the functions
        .               /// in this module.
        .               #[derive(Clone)]
        .               pub struct ImplicitCtxt<'a, 'tcx> {
        .                   /// The current `TyCtxt`.
        2 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
        .           
        .                   /// The current query job, if any. This is updated by `JobOwner::start` in
        .                   /// `ty::query::plumbing` when executing a query.
        .                   pub query: Option<query::QueryJobId<DepKind>>,
        .           
        .                   /// Where to store diagnostics for the current query job, if any.
        .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
        .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
        .                   pub layout_depth: usize,
        .           
        .                   /// The current dep graph task. This is used to add dependencies to queries
        .                   /// when executing them.
        .                   pub task_deps: TaskDepsRef<'a>,
        .               }
        .           
        .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
        5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
        .                       let tcx = TyCtxt { gcx };
       25 ( 0.00%)              ImplicitCtxt {
        .                           tcx,
        .                           query: None,
        .                           diagnostics: None,
        .                           layout_depth: 0,
        .                           task_deps: TaskDepsRef::Ignore,
        .                       }
        5 ( 0.00%)          }
        .               }
        .           
        .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
        .               /// to `value` during the call to `f`. It is restored to its previous value after.
        .               /// This is used to set the pointer to the new `ImplicitCtxt`.
        .               #[cfg(parallel_compiler)]
        .               #[inline]
        .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
        .           
        .               /// Sets TLV to `value` during the call to `f`.
        .               /// It is restored to its previous value after.
        .               /// This is used to set the pointer to the new `ImplicitCtxt`.
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
        .                   let old = get_tlv();
  184,582 ( 0.00%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
        .                   TLV.with(|tlv| tlv.set(value));
        .                   f()
        .               }
        .           
        .               /// Gets the pointer to the current `ImplicitCtxt`.
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
        .               }
        .           
        .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
        .               #[inline]
        .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
        .               where
        .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
        .               {
        1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
        .               }
        .           
        .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
        .               #[inline]
        .               pub fn with_context_opt<F, R>(f: F) -> R
        .               where
        .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
        .               {
        .                   let context = get_tlv();
  770,115 ( 0.01%)          if context == 0 {
        .                       f(None)
        .                   } else {
        .                       // We could get an `ImplicitCtxt` pointer from another thread.
        .                       // Ensure that `ImplicitCtxt` is `Sync`.
        .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
        .           
        .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
        .                   }
-- line 1789 ----------------------------------------
-- line 1791 ----------------------------------------
        .           
        .               /// Allows access to the current `ImplicitCtxt`.
        .               /// Panics if there is no `ImplicitCtxt` available.
        .               #[inline]
        .               pub fn with_context<F, R>(f: F) -> R
        .               where
        .                   F: for<'a, 'tcx> FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
        .               {
    2,075 ( 0.00%)          with_context_opt(|opt_context| f(opt_context.expect("no ImplicitCtxt stored in tls")))
        .               }
        .           
        .               /// Allows access to the current `ImplicitCtxt` whose tcx field is the same as the tcx argument
        .               /// passed in. This means the closure is given an `ImplicitCtxt` with the same `'tcx` lifetime
        .               /// as the `TyCtxt` passed in.
        .               /// This will panic if you pass it a `TyCtxt` which is different from the current
        .               /// `ImplicitCtxt`'s `tcx` field.
        .               #[inline]
        .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
        .               where
        .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
        .               {
        .                   with_context(|context| unsafe {
  370,935 ( 0.00%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
        .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
  367,688 ( 0.00%)              f(context)
        .                   })
        .               }
        .           
        .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
        .               /// Panics if there is no `ImplicitCtxt` available.
        .               #[inline]
        .               pub fn with<F, R>(f: F) -> R
        .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
        .               fn into_pointer(&self) -> *const () {
        .                   self.0 as *const _ as *const ()
        .               }
        .           }
        .           
        .           #[allow(rustc::usage_of_ty_tykind)]
        .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
        .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
  528,534 ( 0.01%)          &self.0.kind()
        .               }
        .           }
        .           
        .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
        .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
        .           
        .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  350,016 ( 0.00%)          self.0.kind().hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
  144,295 ( 0.00%)          &self.0.kind
        .               }
        .           }
        .           
        .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
        .           
        .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   57,340 ( 0.00%)          self.0.kind.hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
        .               fn borrow<'a>(&'a self) -> &'a [T] {
  479,018 ( 0.01%)          &self.0[..]
        .               }
        .           }
        .           
        .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
        .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
        .           
        .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   74,438 ( 0.00%)          self.0[..].hash(s)
        .               }
        .           }
        .           
        .           macro_rules! direct_interners {
        .               ($($name:ident: $method:ident($ty:ty),)+) => {
        .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
        .                       fn borrow<'a>(&'a self) -> &'a $ty {
  168,220 ( 0.00%)                  &self.0
        .                       }
        .                   }
        .           
        .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
        .                       fn eq(&self, other: &Self) -> bool {
        .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
        .                           // equals `x == y`.
        .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
        .                   }
        .           
        .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
        .           
        .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
        .                       fn hash<H: Hasher>(&self, s: &mut H) {
        .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
        .                           // x.hash(s)`.
   50,592 ( 0.00%)                  self.0.hash(s)
        .                       }
        .                   }
        .           
        .                   impl<'tcx> TyCtxt<'tcx> {
1,439,000 ( 0.02%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
  752,472 ( 0.01%)                  self.interners.$name.intern(v, |v| {
   12,047 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
        .                           }).0
1,608,165 ( 0.02%)              }
        .                   })+
        .               }
        .           }
        .           
        .           direct_interners! {
        .               region: mk_region(RegionKind),
        .               const_: mk_const(Const<'tcx>),
        .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
        .               adt_def: intern_adt_def(AdtDef),
        .               stability: intern_stability(attr::Stability),
        .               const_stability: intern_const_stability(attr::ConstStability),
        .           }
        .           
        .           macro_rules! slice_interners {
        .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
        .                   impl<'tcx> TyCtxt<'tcx> {
5,281,958 ( 0.06%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
        .                           self.interners.$field.intern_ref(v, || {
        .                               Interned(List::from_arena(&*self.arena, v))
        .                           }).0
4,715,604 ( 0.05%)              })+
        .                   }
        .               );
        .           }
        .           
        .           slice_interners!(
        .               type_list: _intern_type_list(Ty<'tcx>),
        .               substs: _intern_substs(GenericArg<'tcx>),
        .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2129 ----------------------------------------
        .               /// unsafe.
        .               pub fn safe_to_unsafe_fn_ty(self, sig: PolyFnSig<'tcx>) -> Ty<'tcx> {
        .                   assert_eq!(sig.unsafety(), hir::Unsafety::Normal);
        .                   self.mk_fn_ptr(sig.map_bound(|sig| ty::FnSig { unsafety: hir::Unsafety::Unsafe, ..sig }))
        .               }
        .           
        .               /// Given the def_id of a Trait `trait_def_id` and the name of an associated item `assoc_name`
        .               /// returns true if the `trait_def_id` defines an associated item of name `assoc_name`.
       96 ( 0.00%)      pub fn trait_may_define_assoc_type(self, trait_def_id: DefId, assoc_name: Ident) -> bool {
        .                   self.super_traits_of(trait_def_id).any(|trait_did| {
        .                       self.associated_items(trait_did)
        .                           .find_by_name_and_kind(self, assoc_name, ty::AssocKind::Type, trait_did)
        .                           .is_some()
        .                   })
       72 ( 0.00%)      }
        .           
        .               /// Computes the def-ids of the transitive supertraits of `trait_def_id`. This (intentionally)
        .               /// does not compute the full elaborated super-predicates but just the set of def-ids. It is used
        .               /// to identify which traits may define a given associated type to help avoid cycle errors.
        .               /// Returns a `DefId` iterator.
        .               fn super_traits_of(self, trait_def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {
        .                   let mut set = FxHashSet::default();
       16 ( 0.00%)          let mut stack = vec![trait_def_id];
        .           
        .                   set.insert(trait_def_id);
        .           
       72 ( 0.00%)          iter::from_fn(move || -> Option<DefId> {
       16 ( 0.00%)              let trait_did = stack.pop()?;
        8 ( 0.00%)              let generic_predicates = self.super_predicates_of(trait_did);
        .           
        .                       for (predicate, _) in generic_predicates.predicates {
        9 ( 0.00%)                  if let ty::PredicateKind::Trait(data) = predicate.kind().skip_binder() {
        6 ( 0.00%)                      if set.insert(data.def_id()) {
        .                                   stack.push(data.def_id());
        .                               }
        .                           }
        .                       }
        .           
        .                       Some(trait_did)
        .                   })
        .               }
-- line 2169 ----------------------------------------
-- line 2188 ----------------------------------------
        .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
        .                   })
        .               }
        .           
        .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
        .               /// `*r == kind`.
        .               #[inline]
        .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
  135,072 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
        .               }
        .           
        .               #[allow(rustc::usage_of_ty_tykind)]
        .               #[inline]
        .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
4,000,233 ( 0.04%)          self.interners.intern_ty(st)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
1,949,261 ( 0.02%)          let inner = self.interners.intern_predicate(binder);
        .                   Predicate { inner }
        .               }
        .           
        .               #[inline]
1,565,504 ( 0.02%)      pub fn reuse_or_mk_predicate(
        .                   self,
        .                   pred: Predicate<'tcx>,
        .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
        .               ) -> Predicate<'tcx> {
  108,791 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
1,565,504 ( 0.02%)      }
        .           
        .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
      257 ( 0.00%)          match tm {
        .                       IntTy::Isize => self.types.isize,
        .                       IntTy::I8 => self.types.i8,
        .                       IntTy::I16 => self.types.i16,
        .                       IntTy::I32 => self.types.i32,
        .                       IntTy::I64 => self.types.i64,
        .                       IntTy::I128 => self.types.i128,
        .                   }
      257 ( 0.00%)      }
        .           
        .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
    1,954 ( 0.00%)          match tm {
        .                       UintTy::Usize => self.types.usize,
        .                       UintTy::U8 => self.types.u8,
        .                       UintTy::U16 => self.types.u16,
        .                       UintTy::U32 => self.types.u32,
        .                       UintTy::U64 => self.types.u64,
        .                       UintTy::U128 => self.types.u128,
        .                   }
    1,954 ( 0.00%)      }
        .           
        .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
       65 ( 0.00%)          match tm {
        .                       FloatTy::F32 => self.types.f32,
        .                       FloatTy::F64 => self.types.f64,
        .                   }
       65 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_static_str(self) -> Ty<'tcx> {
    1,652 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   // Take a copy of substs so that we own the vectors inside.
        .                   self.mk_ty(Adt(def, substs))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_foreign(self, def_id: DefId) -> Ty<'tcx> {
        .                   self.mk_ty(Foreign(def_id))
        .               }
        .           
    1,896 ( 0.00%)      fn mk_generic_adt(self, wrapper_def_id: DefId, ty_param: Ty<'tcx>) -> Ty<'tcx> {
        .                   let adt_def = self.adt_def(wrapper_def_id);
        .                   let substs =
    3,555 ( 0.00%)              InternalSubsts::for_item(self, wrapper_def_id, |param, substs| match param.kind {
        .                           GenericParamDefKind::Lifetime | GenericParamDefKind::Const { .. } => bug!(),
      237 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
      948 ( 0.00%)                      if param.index == 0 {
        .                                   ty_param.into()
        .                               } else {
      237 ( 0.00%)                          assert!(has_default);
      711 ( 0.00%)                          self.type_of(param.def_id).subst(self, substs).into()
        .                               }
        .                           }
        .                       });
      237 ( 0.00%)          self.mk_ty(Adt(adt_def, substs))
    1,896 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_box(self, ty: Ty<'tcx>) -> Ty<'tcx> {
    1,185 ( 0.00%)          let def_id = self.require_lang_item(LangItem::OwnedBox, None);
    2,236 ( 0.00%)          self.mk_generic_adt(def_id, ty)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_lang_item(self, ty: Ty<'tcx>, item: LangItem) -> Option<Ty<'tcx>> {
        .                   let def_id = self.lang_items().require(item).ok()?;
        .                   Some(self.mk_generic_adt(def_id, ty))
        .               }
        .           
-- line 2293 ----------------------------------------
-- line 2329 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
        .               }
        .           
        .               #[inline]
   18,612 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
        .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
   19,376 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(Slice(ty))
        .               }
        .           
        .               #[inline]
        .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
    1,356 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
    2,121 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
        .               }
        .           
        .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
   18,136 ( 0.00%)          iter.intern_with(|ts| {
    6,513 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
   30,106 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
   16,317 ( 0.00%)          })
        .               }
        .           
        .               #[inline]
        .               pub fn mk_unit(self) -> Ty<'tcx> {
    3,527 ( 0.00%)          self.types.unit
        .               }
        .           
        .               #[inline]
        .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
       16 ( 0.00%)          if self.features().never_type_fallback { self.types.never } else { self.types.unit }
        .               }
        .           
        .               #[inline]
        .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(FnDef(def_id, substs))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
    2,138 ( 0.00%)          self.mk_ty(FnPtr(fty))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_dynamic(
        .                   self,
        .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
        .                   reg: ty::Region<'tcx>,
        .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
        .                   self.mk_ty_infer(TyVar(v))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
       30 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
        .               }
        .           
        .               #[inline]
        .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
        .                   self.mk_ty_infer(IntVar(v))
        .               }
        .           
        .               #[inline]
-- line 2428 ----------------------------------------
-- line 2445 ----------------------------------------
        .                   self.mk_ty(Param(ParamTy { index, name }))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
        .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
        .               }
        .           
   15,365 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
   10,865 ( 0.00%)          match param.kind {
        .                       GenericParamDefKind::Lifetime => {
      330 ( 0.00%)                  self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
        .                       }
    4,280 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
        .                       GenericParamDefKind::Const { .. } => {
        .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
        .                       }
        .                   }
   15,365 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(Opaque(def_id, substs))
        .               }
        .           
    4,067 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
    4,067 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
    8,134 ( 0.00%)      }
        .           
      261 ( 0.00%)      pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
      783 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Deref)
      522 ( 0.00%)      }
        .           
    1,647 ( 0.00%)      pub fn mk_place_downcast(
        .                   self,
        .                   place: Place<'tcx>,
        .                   adt_def: &'tcx AdtDef,
        .                   variant_index: VariantIdx,
        .               ) -> Place<'tcx> {
    1,647 ( 0.00%)          self.mk_place_elem(
        .                       place,
    3,294 ( 0.00%)              PlaceElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index),
        .                   )
    3,294 ( 0.00%)      }
        .           
        .               pub fn mk_place_downcast_unnamed(
        .                   self,
        .                   place: Place<'tcx>,
        .                   variant_index: VariantIdx,
        .               ) -> Place<'tcx> {
        .                   self.mk_place_elem(place, PlaceElem::Downcast(None, variant_index))
        .               }
-- line 2496 ----------------------------------------
-- line 2497 ----------------------------------------
        .           
        .               pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
        .                   self.mk_place_elem(place, PlaceElem::Index(index))
        .               }
        .           
        .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
        .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
        .               /// flight.
   55,656 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
        .                   let mut projection = place.projection.to_vec();
        .                   projection.push(elem);
        .           
        .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
   61,840 ( 0.00%)      }
        .           
   33,544 ( 0.00%)      pub fn intern_poly_existential_predicates(
        .                   self,
        .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
        .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
    4,841 ( 0.00%)          assert!(!eps.is_empty());
        .                   assert!(
        .                       eps.array_windows()
    3,675 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
        .                               != Ordering::Greater)
        .                   );
   19,364 ( 0.00%)          self._intern_poly_existential_predicates(eps)
   38,336 ( 0.00%)      }
        .           
        .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
        .                   // FIXME consider asking the input slice to be sorted to avoid
        .                   // re-interning permutations, in which case that would be asserted
        .                   // here.
   17,757 ( 0.00%)          if preds.is_empty() {
        .                       // The macro-generated method below asserts we don't intern an empty slice.
        .                       List::empty()
        .                   } else {
    4,228 ( 0.00%)              self._intern_predicates(preds)
        .                   }
   27,328 ( 0.00%)      }
        .           
        .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
   89,417 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
    7,390 ( 0.00%)      }
        .           
        .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
  866,036 ( 0.01%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
   94,610 ( 0.00%)      }
        .           
        .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
        .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
        .               }
        .           
        .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
   38,793 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
   17,746 ( 0.00%)      }
        .           
        .               pub fn intern_canonical_var_infos(
        .                   self,
        .                   ts: &[CanonicalVarInfo<'tcx>],
        .               ) -> CanonicalVarInfos<'tcx> {
   48,670 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
    6,952 ( 0.00%)      }
        .           
        .               pub fn intern_bound_variable_kinds(
        .                   self,
        .                   ts: &[ty::BoundVariableKind],
        .               ) -> &'tcx List<ty::BoundVariableKind> {
   19,536 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
   30,002 ( 0.00%)      }
        .           
        .               pub fn mk_fn_sig<I>(
        .                   self,
        .                   inputs: I,
        .                   output: I::Item,
        .                   c_variadic: bool,
        .                   unsafety: hir::Unsafety,
        .                   abi: abi::Abi,
        .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
        .               where
        .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
        .               {
        .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
    5,985 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
    1,352 ( 0.00%)              c_variadic,
    1,711 ( 0.00%)              unsafety,
    1,986 ( 0.00%)              abi,
      750 ( 0.00%)          })
        .               }
        .           
        .               pub fn mk_poly_existential_predicates<
        .                   I: InternAs<
        .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
        .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
        .                   >,
        .               >(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
   18,397 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
        .               }
        .           
        .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
       16 ( 0.00%)          iter.intern_with(|xs| self.intern_predicates(xs))
        .               }
        .           
        .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
   45,166 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
        .               }
        .           
      105 ( 0.00%)      pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
  639,678 ( 0.01%)          iter.intern_with(|xs| self.intern_substs(xs))
      140 ( 0.00%)      }
        .           
        .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
   55,118 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
        .               }
        .           
   49,412 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
        .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
   98,824 ( 0.00%)      }
        .           
        .               pub fn mk_bound_variable_kinds<
        .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
        .               >(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
   96,871 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
        .               }
        .           
        .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
        .               /// It stops at `bound` and just returns it if reached.
  360,332 ( 0.00%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
  360,332 ( 0.00%)          let hir = self.hir();
        .                   loop {
  714,525 ( 0.01%)              if id == bound {
        .                           return bound;
        .                       }
        .           
  945,599 ( 0.01%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
        .                           return id;
        .                       }
        .                       let next = hir.get_parent_node(id);
  560,097 ( 0.01%)              if next == id {
        .                           bug!("lint traversal reached the root of the crate");
        .                       }
        .                       id = next;
        .                   }
  514,760 ( 0.01%)      }
        .           
   21,312 ( 0.00%)      pub fn lint_level_at_node(
        .                   self,
        .                   lint: &'static Lint,
        .                   mut id: hir::HirId,
        .               ) -> (Level, LintLevelSource) {
        .                   let sets = self.lint_levels(());
        .                   loop {
  107,937 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
        .                           return pair;
        .                       }
    7,849 ( 0.00%)              let next = self.hir().get_parent_node(id);
   23,547 ( 0.00%)              if next == id {
        .                           bug!("lint traversal reached the root of the crate");
        .                       }
        .                       id = next;
        .                   }
   21,312 ( 0.00%)      }
        .           
    3,892 ( 0.00%)      pub fn struct_span_lint_hir(
        .                   self,
        .                   lint: &'static Lint,
        .                   hir_id: HirId,
        .                   span: impl Into<MultiSpan>,
        .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
        .               ) {
    7,284 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
    3,180 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
    2,224 ( 0.00%)      }
        .           
        .               pub fn struct_lint_node(
        .                   self,
        .                   lint: &'static Lint,
        .                   id: HirId,
        .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
        .               ) {
        .                   let (level, src) = self.lint_level_at_node(lint, id);
        .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
        .               }
        .           
   16,632 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
    4,752 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
        .                   let candidates = map.get(&id.local_id)?;
    4,752 ( 0.00%)          Some(&*candidates)
   19,008 ( 0.00%)      }
        .           
   32,886 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
        .                   debug!(?id, "named_region");
        .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
   42,282 ( 0.00%)      }
        .           
      108 ( 0.00%)      pub fn is_late_bound(self, id: HirId) -> bool {
        .                   self.is_late_bound_map(id.owner)
        6 ( 0.00%)              .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
       96 ( 0.00%)      }
        .           
   26,635 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
        .                   self.object_lifetime_defaults_map(id.owner)
   34,245 ( 0.00%)      }
        .           
   15,561 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
        .                   self.mk_bound_variable_kinds(
        .                       self.late_bound_vars_map(id.owner)
        .                           .and_then(|map| map.get(&id.local_id).cloned())
        .                           .unwrap_or_else(|| {
        .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
        .                           })
        .                           .iter(),
        .                   )
   15,561 ( 0.00%)      }
        .           
        .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
        .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
        .               }
        .           
        .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
        .               /// feature gates
      300 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
       30 ( 0.00%)          if self.is_const_fn_raw(def_id) {
       25 ( 0.00%)              match self.lookup_const_stability(def_id) {
        .                           Some(stability) if stability.level.is_unstable() => {
        .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
        .                               // corresponding feature gate.
        .                               self.features()
        .                                   .declared_lib_features
        .                                   .iter()
        .                                   .any(|&(sym, _)| sym == stability.feature)
        .                           }
-- line 2742 ----------------------------------------
-- line 2743 ----------------------------------------
        .                           // functions without const stability are either stable user written
        .                           // const fn or the user is using feature gates and we thus don't
        .                           // care what they do
        .                           _ => true,
        .                       }
        .                   } else {
        .                       false
        .                   }
      270 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TyCtxtAt<'tcx> {
        .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
        .               #[track_caller]
        .               pub fn ty_error(self) -> Ty<'tcx> {
        .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
        .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
        .           }
        .           
        .           impl<I, T, R, E> InternAs<[T], R> for I
        .           where
        .               E: InternIteratorElement<T, R>,
        .               I: Iterator<Item = E>,
        .           {
        .               type Output = E::Output;
  206,536 ( 0.00%)      fn intern_with<F>(self, f: F) -> Self::Output
        .               where
        .                   F: FnOnce(&[T]) -> R,
        .               {
2,169,106 ( 0.02%)          E::intern_with(self, f)
  184,149 ( 0.00%)      }
        .           }
        .           
        .           pub trait InternIteratorElement<T, R>: Sized {
        .               type Output;
        .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
        .           }
        .           
        .           impl<T, R> InternIteratorElement<T, R> for T {
        .               type Output = R;
  391,939 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
        .                   mut iter: I,
        .                   f: F,
        .               ) -> Self::Output {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
        .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
        .                   // `assert`.
  453,808 ( 0.01%)          match iter.size_hint() {
        .                       (0, Some(0)) => {
       33 ( 0.00%)                  assert!(iter.next().is_none());
        .                           f(&[])
        .                       }
        .                       (1, Some(1)) => {
        .                           let t0 = iter.next().unwrap();
       36 ( 0.00%)                  assert!(iter.next().is_none());
   59,539 ( 0.00%)                  f(&[t0])
        .                       }
        .                       (2, Some(2)) => {
        .                           let t0 = iter.next().unwrap();
        .                           let t1 = iter.next().unwrap();
      436 ( 0.00%)                  assert!(iter.next().is_none());
   52,865 ( 0.00%)                  f(&[t0, t1])
        .                       }
    3,672 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
        .                   }
  342,389 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
        .           where
        .               T: Clone + 'a,
        .           {
        .               type Output = R;
   11,141 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
        .                   // This code isn't hot.
      300 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
    9,184 ( 0.00%)      }
        .           }
        .           
        .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
        .               type Output = Result<R, E>;
  719,417 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
        .                   mut iter: I,
        .                   f: F,
        .               ) -> Self::Output {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
        .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
        .                   // `assert`, unless a failure happens first, in which case the result
        .                   // will be an error anyway.
  517,244 ( 0.01%)          Ok(match iter.size_hint() {
        .                       (0, Some(0)) => {
        .                           assert!(iter.next().is_none());
        .                           f(&[])
        .                       }
        .                       (1, Some(1)) => {
   12,918 ( 0.00%)                  let t0 = iter.next().unwrap()?;
        .                           assert!(iter.next().is_none());
   53,966 ( 0.00%)                  f(&[t0])
        .                       }
        .                       (2, Some(2)) => {
      794 ( 0.00%)                  let t0 = iter.next().unwrap()?;
      794 ( 0.00%)                  let t1 = iter.next().unwrap()?;
    1,191 ( 0.00%)                  assert!(iter.next().is_none());
   47,854 ( 0.00%)                  f(&[t0, t1])
        .                       }
    3,798 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
        .                   })
  803,462 ( 0.01%)      }
        .           }
        .           
        .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
        .           // won't work for us.
        .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
  370,935 ( 0.00%)      t as *const () == u as *const ()
        .           }
        .           
        .           pub fn provide(providers: &mut ty::query::Providers) {
        2 ( 0.00%)      providers.in_scope_traits_map =
        .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
        3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
        2 ( 0.00%)      providers.module_reexports =
        .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
        2 ( 0.00%)      providers.crate_name = |tcx, id| {
        1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
        1 ( 0.00%)          tcx.crate_name
        .               };
        2 ( 0.00%)      providers.maybe_unused_trait_import =
        .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
        2 ( 0.00%)      providers.maybe_unused_extern_crates =
        .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
        2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
        .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
        .               };
        .           
      236 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
        2 ( 0.00%)      providers.lookup_const_stability =
      225 ( 0.00%)          |tcx, id| tcx.stability().local_const_stability(id.expect_local());
        2 ( 0.00%)      providers.lookup_deprecation_entry =
   21,464 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
        2 ( 0.00%)      providers.extern_mod_stmt_cnum =
        .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
        3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
        3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
        2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
        1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
        7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
        .               };
        2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
        1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
        7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
        .               };
        2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
        1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
        .                   // We want to check if the panic handler was defined in this crate
        3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
        .               };
        .           }

2,320,161 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/reader/lexer.rs
--------------------------------------------------------------------------------
Ir                 

-- line 9 ----------------------------------------
        .           use std::borrow::Cow;
        .           
        .           use common::{Position, TextPosition, is_whitespace_char, is_name_char};
        .           use reader::Error;
        .           use util;
        .           
        .           /// `Token` represents a single lexeme of an XML document. These lexemes
        .           /// are used to perform actual parsing.
  104,948 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           pub enum Token {
        .               /// `<?`
        .               ProcessingInstructionStart,
        .               /// `?>`
        .               ProcessingInstructionEnd,
        .               /// `<!DOCTYPE
        .               DoctypeStart,
        .               /// `<`
-- line 25 ----------------------------------------
-- line 80 ----------------------------------------
        .                           Token::DoubleQuote                => "\"",
        .                           _                          => unreachable!()
        .                       })
        .                   }
        .               }
        .           }
        .           
        .           impl Token {
  544,428 ( 0.01%)      pub fn as_static_str(&self) -> Option<&'static str> {
  725,904 ( 0.01%)          match *self {
        .                       Token::OpeningTagStart            => Some("<"),
        .                       Token::ProcessingInstructionStart => Some("<?"),
        .                       Token::DoctypeStart               => Some("<!DOCTYPE"),
        .                       Token::ClosingTagStart            => Some("</"),
        .                       Token::CommentStart               => Some("<!--"),
        .                       Token::CDataStart                 => Some("<![CDATA["),
        .                       Token::TagEnd                     => Some(">"),
        .                       Token::EmptyTagEnd                => Some("/>"),
        .                       Token::ProcessingInstructionEnd   => Some("?>"),
        .                       Token::CommentEnd                 => Some("-->"),
        .                       Token::CDataEnd                   => Some("]]>"),
        .                       Token::ReferenceStart             => Some("&"),
       48 ( 0.00%)              Token::ReferenceEnd               => Some(";"),
        .                       Token::EqualsSign                 => Some("="),
      576 ( 0.00%)              Token::SingleQuote                => Some("'"),
      488 ( 0.00%)              Token::DoubleQuote                => Some("\""),
        .                       Token::Chunk(s)                   => Some(s),
  362,388 ( 0.00%)              _                                 => None
        .                   }
  725,904 ( 0.01%)      }
        .           
        .               // using String.push_str(token.to_string()) is simply way too slow
  907,380 ( 0.01%)      pub fn push_to_string(&self, target: &mut String) {
1,452,372 ( 0.02%)          match self.as_static_str() {
    1,410 ( 0.00%)              Some(s) => { target.push_str(s); }
        .                       None => {
  914,458 ( 0.01%)                  match *self {
  905,970 ( 0.01%)                      Token::Character(c) | Token::Whitespace(c) => target.push(c),
        .                               _ => unreachable!()
        .                           }
        .                       }
        .                   }
  362,952 ( 0.00%)      }
        .           
        .               /// Returns `true` if this token contains data that can be interpreted
        .               /// as a part of the text. Surprisingly, this also means '>' and '=' and '"' and "'" and '-->'.
        .               #[inline]
  539,128 ( 0.01%)      pub fn contains_char_data(&self) -> bool {
3,251,984 ( 0.04%)          match *self {
        .                       Token::Whitespace(_) | Token::Chunk(_) | Token::Character(_) | Token::CommentEnd |
        .                       Token::TagEnd | Token::EqualsSign | Token::DoubleQuote | Token::SingleQuote | Token::CDataEnd | 
  265,260 ( 0.00%)              Token::ProcessingInstructionEnd | Token::EmptyTagEnd => true,
    8,608 ( 0.00%)              _ => false
        .                   }
1,347,820 ( 0.02%)      }
        .           
        .               /// Returns `true` if this token corresponds to a white space character.
        .               #[inline]
        .               pub fn is_whitespace(&self) -> bool {
        .                   match *self {
        .                       Token::Whitespace(_) => true,
        .                       _ => false
        .                   }
-- line 142 ----------------------------------------
-- line 225 ----------------------------------------
        .               inside_comment: bool,
        .               inside_token: bool,
        .               eof_handled: bool
        .           }
        .           
        .           impl Position for Lexer {
        .               #[inline]
        .               /// Returns the position of the last token produced by the lexer
   14,532 ( 0.00%)      fn position(&self) -> TextPosition { self.pos }
        .           }
        .           
        .           impl Lexer {
        .               /// Returns a new lexer with default state.
        6 ( 0.00%)      pub fn new() -> Lexer {
       40 ( 0.00%)          Lexer {
        6 ( 0.00%)              pos: TextPosition::new(),
        6 ( 0.00%)              head_pos: TextPosition::new(),
        6 ( 0.00%)              char_queue: VecDeque::with_capacity(4),  // TODO: check size
        2 ( 0.00%)              st: State::Normal,
        .                       skip_errors: false,
        .                       inside_comment: false,
        .                       inside_token: false,
        .                       eof_handled: false
        .                   }
        4 ( 0.00%)      }
        .           
        .               /// Enables error handling so `next_token` will return `Some(Err(..))`
        .               /// upon invalid lexeme.
        .               #[inline]
        .               pub fn enable_errors(&mut self) { self.skip_errors = false; }
        .           
        .               /// Disables error handling so `next_token` will return `Some(Chunk(..))`
        .               /// upon invalid lexeme with this lexeme content.
        .               #[inline]
        .               pub fn disable_errors(&mut self) { self.skip_errors = true; }
        .           
        .               /// Enables special handling of some lexemes which should be done when we're parsing comment
        .               /// internals.
        .               #[inline]
      200 ( 0.00%)      pub fn inside_comment(&mut self) { self.inside_comment = true; }
        .           
        .               /// Disables the effect of `inside_comment()` method.
        .               #[inline]
      200 ( 0.00%)      pub fn outside_comment(&mut self) { self.inside_comment = false; }
        .           
        .               /// Reset the eof handled flag of the lexer.
        .               #[inline]
        .               pub fn reset_eof_handled(&mut self) { self.eof_handled = false; }
        .           
        .               /// Tries to read the next token from the buffer.
        .               ///
        .               /// It is possible to pass different instaces of `BufReader` each time
        .               /// this method is called, but the resulting behavior is undefined in this case.
        .               ///
        .               /// Return value:
        .               /// * `Err(reason) where reason: reader::Error` - when an error occurs;
        .               /// * `Ok(None)` - upon end of stream is reached;
        .               /// * `Ok(Some(token)) where token: Token` - in case a complete-token has been read from the stream.
1,936,074 ( 0.02%)      pub fn next_token<B: Read>(&mut self, b: &mut B) -> Result {
        .                   // Already reached end of buffer
  553,164 ( 0.01%)          if self.eof_handled {
        .                       return Ok(None);
        .                   }
        .           
1,382,910 ( 0.02%)          if !self.inside_token {
1,106,328 ( 0.01%)              self.pos = self.head_pos;
  276,582 ( 0.00%)              self.inside_token = true;
        .                   }
        .           
        .                   // Check if we have saved a char or two for ourselves
3,323,776 ( 0.04%)          while let Some(c) = self.char_queue.pop_front() {
   50,316 ( 0.00%)              match try!(self.read_next_token(c)) {
   14,376 ( 0.00%)                  Some(t) => {
    2,396 ( 0.00%)                      self.inside_token = false;
   45,524 ( 0.00%)                      return Ok(Some(t));
        .                           }
        .                           None => {}  // continue
        .                       }
        .                   }
        .           
    4,036 ( 0.00%)          loop {
        .                       // TODO: this should handle multiple encodings
4,173,330 ( 0.05%)              let c = match try!(util::next_char_from(b)) {
  834,666 ( 0.01%)                  Some(c) => c,   // got next char
        .                           None => break,  // nothing to read left
        .                       };
        .           
5,556,368 ( 0.06%)              match try!(self.read_next_token(c)) {
1,645,116 ( 0.02%)                  Some(t) => {
  274,186 ( 0.00%)                      self.inside_token = false;
5,209,534 ( 0.06%)                      return Ok(Some(t));
        .                           }
        .                           None => {
        .                               // continue
        .                           }
        .                       }
        .                   }
        .           
        .                   // Handle end of stream
-- line 323 ----------------------------------------
-- line 337 ----------------------------------------
        .                           Ok(Some(Token::Character('-'))),
        .                       State::CDataClosing(ClosingSubstate::First) =>
        .                           Ok(Some(Token::Character(']'))),
        .                       State::CDataClosing(ClosingSubstate::Second) =>
        .                           Ok(Some(Token::Chunk("]]"))),
        .                       State::Normal =>
        .                           Ok(None)
        .                   }
  553,164 ( 0.01%)      }
        .           
        .               #[inline]
        .               fn error<M: Into<Cow<'static, str>>>(&self, msg: M) -> Error {
        .                   (self, msg).into()
        .               }
        .           
        .               #[inline]
2,244,944 ( 0.03%)      fn read_next_token(&mut self, c: char) -> Result {
  280,618 ( 0.00%)          let res = self.dispatch_char(c);
1,686,104 ( 0.02%)          if self.char_queue.is_empty() {
  556,444 ( 0.01%)              if c == '\n' {
   24,144 ( 0.00%)                  self.head_pos.new_line();
        .                       } else {
1,360,930 ( 0.02%)                  self.head_pos.advance(1);
        .                       }
        .                   }
        .                   res
  561,236 ( 0.01%)      }
        .           
1,964,326 ( 0.02%)      fn dispatch_char(&mut self, c: char) -> Result {
  561,236 ( 0.01%)          match self.st {
  276,582 ( 0.00%)              State::Normal                         => self.normal(c),
    4,280 ( 0.00%)              State::TagStarted                     => self.tag_opened(c),
       80 ( 0.00%)              State::CommentOrCDataOrDoctypeStarted => self.comment_or_cdata_or_doctype_started(c),
       80 ( 0.00%)              State::CommentStarted                 => self.comment_started(c),
        .                       State::CDataStarted(s)                => self.cdata_started(c, s),
        .                       State::DoctypeStarted(s)              => self.doctype_started(c, s),
        .                       State::DoctypeFinishing(d)            => self.doctype_finishing(c, d),
        4 ( 0.00%)              State::ProcessingInstructionClosing   => self.processing_instruction_closing(c),
    1,592 ( 0.00%)              State::EmptyTagClosing                => self.empty_element_closing(c),
    6,960 ( 0.00%)              State::CommentClosing(s)              => self.comment_closing(c, s),
    1,184 ( 0.00%)              State::CDataClosing(s)                => self.cdata_closing(c, s)
        .                   }
  561,236 ( 0.01%)      }
        .           
        .               #[inline]
   20,180 ( 0.00%)      fn move_to(&mut self, st: State) -> Result {
    8,072 ( 0.00%)          self.st = st;
   32,288 ( 0.00%)          Ok(None)
    8,072 ( 0.00%)      }
        .           
        .               #[inline]
   19,580 ( 0.00%)      fn move_to_with(&mut self, st: State, token: Token) -> Result {
    7,832 ( 0.00%)          self.st = st;
   74,404 ( 0.00%)          Ok(Some(token))
    7,832 ( 0.00%)      }
        .           
        .               #[inline]
   45,524 ( 0.00%)      fn move_to_with_unread(&mut self, st: State, cs: &[char], token: Token) -> Result {
   16,772 ( 0.00%)          self.char_queue.extend(cs.iter().cloned());
   23,960 ( 0.00%)          self.move_to_with(st, token)
    4,792 ( 0.00%)      }
        .           
        .               fn handle_error(&mut self, chunk: &'static str, c: char) -> Result {
        .                   self.char_queue.push_back(c);
        .                   if self.skip_errors || (self.inside_comment && chunk != "--") {  // FIXME: looks hacky
        .                       self.move_to_with(State::Normal, Token::Chunk(chunk))
        .                   } else {
        .                       Err(self.error(format!("Unexpected token '{}' before '{}'", chunk, c)))
        .                   }
        .               }
        .           
        .               /// Encountered a char
2,212,656 ( 0.02%)      fn normal(&mut self, c: char) -> Result {
1,382,910 ( 0.02%)          match c {
   12,840 ( 0.00%)              '<'                        => self.move_to(State::TagStarted),
   19,860 ( 0.00%)              '>'                        => Ok(Some(Token::TagEnd)),
    4,776 ( 0.00%)              '/'                        => self.move_to(State::EmptyTagClosing),
   49,050 ( 0.00%)              '='                        => Ok(Some(Token::EqualsSign)),
   99,930 ( 0.00%)              '"'                        => Ok(Some(Token::DoubleQuote)),
    2,190 ( 0.00%)              '\''                       => Ok(Some(Token::SingleQuote)),
       12 ( 0.00%)              '?'                        => self.move_to(State::ProcessingInstructionClosing),
    5,810 ( 0.00%)              '-'                        => self.move_to(State::CommentClosing(ClosingSubstate::First)),
    1,036 ( 0.00%)              ']'                        => self.move_to(State::CDataClosing(ClosingSubstate::First)),
        .                       '&'                        => Ok(Some(Token::ReferenceStart)),
      240 ( 0.00%)              ';'                        => Ok(Some(Token::ReferenceEnd)),
2,302,964 ( 0.03%)              _ if is_whitespace_char(c) => Ok(Some(Token::Whitespace(c))),
3,339,424 ( 0.04%)              _                          => Ok(Some(Token::Character(c)))
        .                   }
  553,164 ( 0.01%)      }
        .           
        .               /// Encountered '<'
   14,980 ( 0.00%)      fn tag_opened(&mut self, c: char) -> Result {
   16,330 ( 0.00%)          match c {
       16 ( 0.00%)              '?'                        => self.move_to_with(State::Normal, Token::ProcessingInstructionStart),
    5,296 ( 0.00%)              '/'                        => self.move_to_with(State::Normal, Token::ClosingTagStart),
      240 ( 0.00%)              '!'                        => self.move_to(State::CommentOrCDataOrDoctypeStarted),
    8,616 ( 0.00%)              _ if is_whitespace_char(c) => self.move_to_with_unread(State::Normal, &[c], Token::OpeningTagStart),
   24,412 ( 0.00%)              _ if is_name_char(c)       => self.move_to_with_unread(State::Normal, &[c], Token::OpeningTagStart),
        .                       _                          => self.handle_error("<", c)
        .                   }
    4,280 ( 0.00%)      }
        .           
        .               /// Encountered '<!'
      280 ( 0.00%)      fn comment_or_cdata_or_doctype_started(&mut self, c: char) -> Result {
       80 ( 0.00%)          match c {
      240 ( 0.00%)              '-' => self.move_to(State::CommentStarted),
        .                       '[' => self.move_to(State::CDataStarted(CDataStartedSubstate::E)),
        .                       'D' => self.move_to(State::DoctypeStarted(DoctypeStartedSubstate::D)),
        .                       _   => self.handle_error("<!", c)
        .                   }
       80 ( 0.00%)      }
        .           
        .               /// Encountered '<!-'
      280 ( 0.00%)      fn comment_started(&mut self, c: char) -> Result {
       80 ( 0.00%)          match c {
      320 ( 0.00%)              '-' => self.move_to_with(State::Normal, Token::CommentStart),
        .                       _   => self.handle_error("<!-", c)
        .                   }
       80 ( 0.00%)      }
        .           
        .               /// Encountered '<!['
        .               fn cdata_started(&mut self, c: char, s: CDataStartedSubstate) -> Result {
        .                   use self::CDataStartedSubstate::{E, C, CD, CDA, CDAT, CDATA};
        .                   dispatch_on_enum_state!(self, s, c, State::CDataStarted,
        .                       E     ; 'C' ; C     ; "<![",
        .                       C     ; 'D' ; CD    ; "<![C",
        .                       CD    ; 'A' ; CDA   ; "<![CD",
-- line 463 ----------------------------------------
-- line 486 ----------------------------------------
        .                       '<' => self.move_to(State::DoctypeFinishing(d + 1)),
        .                       '>' if d == 1 => self.move_to_with(State::Normal, Token::TagEnd),
        .                       '>' => self.move_to(State::DoctypeFinishing(d - 1)),
        .                       _ => Ok(None),
        .                   }
        .               }
        .           
        .               /// Encountered '?'
       14 ( 0.00%)      fn processing_instruction_closing(&mut self, c: char) -> Result {
        4 ( 0.00%)          match c {
       16 ( 0.00%)              '>' => self.move_to_with(State::Normal, Token::ProcessingInstructionEnd),
        .                       _   => self.move_to_with_unread(State::Normal, &[c], Token::Character('?')),
        .                   }
        4 ( 0.00%)      }
        .           
        .               /// Encountered '/'
    5,572 ( 0.00%)      fn empty_element_closing(&mut self, c: char) -> Result {
    1,592 ( 0.00%)          match c {
    6,192 ( 0.00%)              '>' => self.move_to_with(State::Normal, Token::EmptyTagEnd),
      264 ( 0.00%)              _   => self.move_to_with_unread(State::Normal, &[c], Token::Character('/')),
        .                   }
    1,592 ( 0.00%)      }
        .           
        .               /// Encountered '-'
    8,700 ( 0.00%)      fn comment_closing(&mut self, c: char, s: ClosingSubstate) -> Result {
    2,690 ( 0.00%)          match s {
    2,450 ( 0.00%)              ClosingSubstate::First => match c {
      280 ( 0.00%)                  '-' => self.move_to(State::CommentClosing(ClosingSubstate::Second)),
   10,270 ( 0.00%)                  _   => self.move_to_with_unread(State::Normal, &[c], Token::Character('-'))
        .                       },
       80 ( 0.00%)              ClosingSubstate::Second => match c {
      320 ( 0.00%)                  '>'                      => self.move_to_with(State::Normal, Token::CommentEnd),
        .                           // double dash not followed by a greater-than is a hard error inside comment
        .                           _ if self.inside_comment => self.handle_error("--", c),
        .                           // nothing else except comment closing starts with a double dash, and comment
        .                           // closing can never be after another dash, and also we're outside of a comment,
        .                           // therefore it is safe to push only the last read character to the list of unread
        .                           // characters and pass the double dash directly to the output
        .                           _                        => self.move_to_with_unread(State::Normal, &[c], Token::Chunk("--"))
        .                       }
        .                   }
    1,740 ( 0.00%)      }
        .           
        .               /// Encountered ']'
    1,480 ( 0.00%)      fn cdata_closing(&mut self, c: char, s: ClosingSubstate) -> Result {
      444 ( 0.00%)          match s {
      444 ( 0.00%)              ClosingSubstate::First => match c {
        .                           ']' => self.move_to(State::CDataClosing(ClosingSubstate::Second)),
    1,924 ( 0.00%)                  _   => self.move_to_with_unread(State::Normal, &[c], Token::Character(']'))
        .                       },
        .                       ClosingSubstate::Second => match c {
        .                           '>' => self.move_to_with(State::Normal, Token::CDataEnd),
        .                           _   => self.move_to_with_unread(State::Normal, &[']', c], Token::Character(']'))
        .                       }
        .                   }
      296 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(test)]
        .           mod tests {
        .               use common::{Position};
        .               use std::io::{BufReader, Cursor};
        .           
        .               use super::{Lexer, Token};
-- line 549 ----------------------------------------

9,697,026 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/reader/lexer.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/unescape.rs
--------------------------------------------------------------------------------
Ir                 

-- line 73 ----------------------------------------
        .                       EscapeError::UnskippedWhitespaceWarning | EscapeError::MultipleSkippedLinesWarning
        .                   )
        .               }
        .           }
        .           
        .           /// Takes a contents of a literal (without quotes) and produces a
        .           /// sequence of escaped characters or errors.
        .           /// Values are returned through invoking of the provided callback.
   20,898 ( 0.00%)  pub fn unescape_literal<F>(literal_text: &str, mode: Mode, callback: &mut F)
        .           where
        .               F: FnMut(Range<usize>, Result<char, EscapeError>),
        .           {
        .               match mode {
        .                   Mode::Char | Mode::Byte => {
        .                       let mut chars = literal_text.chars();
        .                       let result = unescape_char_or_byte(&mut chars, mode);
        .                       // The Chars iterator moved forward.
-- line 89 ----------------------------------------
-- line 91 ----------------------------------------
        .                   }
        .                   Mode::Str | Mode::ByteStr => unescape_str_or_byte_str(literal_text, mode, callback),
        .                   // NOTE: Raw strings do not perform any explicit character escaping, here we
        .                   // only translate CRLF to LF and produce errors on bare CR.
        .                   Mode::RawStr | Mode::RawByteStr => {
        .                       unescape_raw_str_or_byte_str(literal_text, mode, callback)
        .                   }
        .               }
    9,288 ( 0.00%)  }
        .           
        .           /// Takes a contents of a byte, byte string or raw byte string (without quotes)
        .           /// and produces a sequence of bytes or errors.
        .           /// Values are returned through invoking of the provided callback.
    2,926 ( 0.00%)  pub fn unescape_byte_literal<F>(literal_text: &str, mode: Mode, callback: &mut F)
        .           where
        .               F: FnMut(Range<usize>, Result<u8, EscapeError>),
        .           {
    1,064 ( 0.00%)      assert!(mode.is_bytes());
        .               unescape_literal(literal_text, mode, &mut |range, result| {
        .                   callback(range, result.map(byte_from_char));
        .               })
    2,128 ( 0.00%)  }
        .           
        .           /// Takes a contents of a char literal (without quotes), and returns an
        .           /// unescaped char or an error
        .           pub fn unescape_char(literal_text: &str) -> Result<char, (usize, EscapeError)> {
        .               let mut chars = literal_text.chars();
        .               unescape_char_or_byte(&mut chars, Mode::Char)
        .                   .map_err(|err| (literal_text.len() - chars.as_str().len(), err))
        .           }
-- line 120 ----------------------------------------
-- line 136 ----------------------------------------
        .               Byte,
        .               ByteStr,
        .               RawStr,
        .               RawByteStr,
        .           }
        .           
        .           impl Mode {
        .               pub fn in_single_quotes(self) -> bool {
    2,854 ( 0.00%)          match self {
        .                       Mode::Char | Mode::Byte => true,
        .                       Mode::Str | Mode::ByteStr | Mode::RawStr | Mode::RawByteStr => false,
        .                   }
        .               }
        .           
    2,854 ( 0.00%)      pub fn in_double_quotes(self) -> bool {
        .                   !self.in_single_quotes()
    1,427 ( 0.00%)      }
        .           
   12,748 ( 0.00%)      pub fn is_bytes(self) -> bool {
   12,748 ( 0.00%)          match self {
        .                       Mode::Byte | Mode::ByteStr | Mode::RawByteStr => true,
        .                       Mode::Char | Mode::Str | Mode::RawStr => false,
        .                   }
    6,374 ( 0.00%)      }
        .           }
        .           
4,843,660 ( 0.05%)  fn scan_escape(first_char: char, chars: &mut Chars<'_>, mode: Mode) -> Result<char, EscapeError> {
2,286,984 ( 0.03%)      if first_char != '\\' {
        .                   // Previous character was not a slash, and we don't expect it to be
        .                   // an escape-only character.
        .                   return match first_char {
        .                       '\t' | '\n' => Err(EscapeError::EscapeOnlyChar),
        .                       '\r' => Err(EscapeError::BareCarriageReturn),
        .                       '\'' if mode.in_single_quotes() => Err(EscapeError::EscapeOnlyChar),
        .                       '"' if mode.in_double_quotes() => Err(EscapeError::EscapeOnlyChar),
        .                       _ => {
  472,220 ( 0.01%)                  if mode.is_bytes() && !first_char.is_ascii() {
        .                               // Byte literal can't be a non-ascii character.
        .                               return Err(EscapeError::NonAsciiCharInByte);
        .                           }
        .                           Ok(first_char)
        .                       }
        .                   };
        .               }
        .           
        .               // Previous character is '\\', try to unescape it.
        .           
   36,438 ( 0.00%)      let second_char = chars.next().ok_or(EscapeError::LoneSlash)?;
        .           
        .               let res = match second_char {
        .                   '"' => '"',
        .                   'n' => '\n',
        .                   'r' => '\r',
        .                   't' => '\t',
        .                   '\\' => '\\',
        .                   '\'' => '\'',
        .                   '0' => '\0',
        .           
        .                   'x' => {
        .                       // Parse hexadecimal character code.
        .           
    1,330 ( 0.00%)              let hi = chars.next().ok_or(EscapeError::TooShortHexEscape)?;
        .                       let hi = hi.to_digit(16).ok_or(EscapeError::InvalidCharInHexEscape)?;
        .           
      798 ( 0.00%)              let lo = chars.next().ok_or(EscapeError::TooShortHexEscape)?;
        .                       let lo = lo.to_digit(16).ok_or(EscapeError::InvalidCharInHexEscape)?;
        .           
    1,862 ( 0.00%)              let value = hi * 16 + lo;
        .           
        .                       // For a byte literal verify that it is within ASCII range.
      266 ( 0.00%)              if !mode.is_bytes() && !is_ascii(value) {
        .                           return Err(EscapeError::OutOfRangeHexEscape);
        .                       }
        .                       let value = value as u8;
        .           
        .                       value as char
        .                   }
        .           
        .                   'u' => {
-- line 214 ----------------------------------------
-- line 263 ----------------------------------------
        .                                   value = value * 16 + digit;
        .                               }
        .                           };
        .                       }
        .                   }
        .                   _ => return Err(EscapeError::InvalidEscape),
        .               };
        .               Ok(res)
5,812,392 ( 0.06%)  }
        .           
        .           fn unescape_char_or_byte(chars: &mut Chars<'_>, mode: Mode) -> Result<char, EscapeError> {
        .               let first_char = chars.next().ok_or(EscapeError::ZeroChars)?;
        .               let res = scan_escape(first_char, chars, mode)?;
        .               if chars.next().is_some() {
        .                   return Err(EscapeError::MoreThanOneChar);
        .               }
        .               Ok(res)
-- line 279 ----------------------------------------
-- line 280 ----------------------------------------
        .           }
        .           
        .           /// Takes a contents of a string literal (without quotes) and produces a
        .           /// sequence of escaped characters or errors.
        .           fn unescape_str_or_byte_str<F>(src: &str, mode: Mode, callback: &mut F)
        .           where
        .               F: FnMut(Range<usize>, Result<char, EscapeError>),
        .           {
    4,926 ( 0.00%)      assert!(mode.in_double_quotes());
        .               let initial_len = src.len();
    1,305 ( 0.00%)      let mut chars = src.chars();
        .               while let Some(first_char) = chars.next() {
2,421,835 ( 0.03%)          let start = initial_len - chars.as_str().len() - first_char.len_utf8();
        .           
2,857,614 ( 0.03%)          let unescaped_char = match first_char {
        .                       '\\' => {
        .                           let second_char = chars.clone().next();
   24,294 ( 0.00%)                  match second_char {
        .                               Some('\n') => {
        .                                   // Rust language specification requires us to skip whitespaces
        .                                   // if unescaped '\' character is followed by '\n'.
        .                                   // For details see [Rust language reference]
        .                                   // (https://doc.rust-lang.org/reference/tokens.html#string-literals).
        .                                   skip_ascii_whitespace(&mut chars, start, callback);
        .                                   continue;
        .                               }
   12,146 ( 0.00%)                      _ => scan_escape(first_char, &mut chars, mode),
        .                           }
        .                       }
        .                       '\n' => Ok('\n'),
        .                       '\t' => Ok('\t'),
        .                       _ => scan_escape(first_char, &mut chars, mode),
        .                   };
  969,517 ( 0.01%)          let end = initial_len - chars.as_str().len();
1,460,948 ( 0.02%)          callback(start..end, unescaped_char);
        .               }
        .           
        .               fn skip_ascii_whitespace<F>(chars: &mut Chars<'_>, start: usize, callback: &mut F)
        .               where
        .                   F: FnMut(Range<usize>, Result<char, EscapeError>),
        .               {
        .                   let tail = chars.as_str();
        .                   let first_non_space = tail
        .                       .bytes()
       47 ( 0.00%)              .position(|b| b != b' ' && b != b'\t' && b != b'\n' && b != b'\r')
        .                       .unwrap_or(tail.len());
        2 ( 0.00%)          if tail[1..first_non_space].contains('\n') {
        .                       // The +1 accounts for the escaping slash.
        .                       let end = start + first_non_space + 1;
        .                       callback(start..end, Err(EscapeError::MultipleSkippedLinesWarning));
        .                   }
        .                   let tail = &tail[first_non_space..];
        .                   if let Some(c) = tail.chars().nth(0) {
        .                       // For error reporting, we would like the span to contain the character that was not
        .                       // skipped.  The +1 is necessary to account for the leading \ that started the escape.
        6 ( 0.00%)              let end = start + first_non_space + c.len_utf8() + 1;
        .                       if c.is_whitespace() {
        .                           callback(start..end, Err(EscapeError::UnskippedWhitespaceWarning));
        .                       }
        .                   }
        3 ( 0.00%)          *chars = tail.chars();
        .               }
        .           }
        .           
        .           /// Takes a contents of a string literal (without quotes) and produces a
        .           /// sequence of characters or errors.
        .           /// NOTE: Raw strings do not perform any explicit character escaping, here we
        .           /// only translate CRLF to LF and produce errors on bare CR.
        .           fn unescape_raw_str_or_byte_str<F>(literal_text: &str, mode: Mode, callback: &mut F)
        .           where
        .               F: FnMut(Range<usize>, Result<char, EscapeError>),
        .           {
    1,198 ( 0.00%)      assert!(mode.in_double_quotes());
        .               let initial_len = literal_text.len();
        .           
        .               let mut chars = literal_text.chars();
        .               while let Some(curr) = chars.next() {
   30,540 ( 0.00%)          let start = initial_len - chars.as_str().len() - curr.len_utf8();
        .           
   12,216 ( 0.00%)          let result = match curr {
        .                       '\r' => Err(EscapeError::BareCarriageReturnInRawString),
   18,324 ( 0.00%)              c if mode.is_bytes() && !c.is_ascii() => Err(EscapeError::NonAsciiCharInByteString),
        .                       c => Ok(c),
        .                   };
        .                   let end = initial_len - chars.as_str().len();
        .           
   67,188 ( 0.00%)          callback(start..end, result);
        .               }
        .           }
        .           
        .           fn byte_from_char(c: char) -> u8 {
        .               let res = c as u32;
    3,560 ( 0.00%)      assert!(res <= u8::MAX as u32, "guaranteed because of Mode::ByteStr");
        .               res as u8
    3,560 ( 0.00%)  }
        .           
        .           fn is_ascii(x: u32) -> bool {
      266 ( 0.00%)      x <= 0x7F
        .           }

4,823,825 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/unescape.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir                  

-- line 21 ----------------------------------------
         .           use rustc_target::spec::abi;
         .           use std::borrow::Cow;
         .           use std::cmp::Ordering;
         .           use std::marker::PhantomData;
         .           use std::ops::Range;
         .           use ty::util::IntTypeExt;
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         6 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
         .           pub struct TypeAndMut<'tcx> {
    18,749 ( 0.00%)      pub ty: Ty<'tcx>,
    93,745 ( 0.00%)      pub mutbl: hir::Mutability,
         .           }
         .           
         .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
         .           #[derive(HashStable)]
         .           /// A "free" region `fr` can be interpreted as "some region
         .           /// at least as big as the scope `fr.scope`".
         .           pub struct FreeRegion {
    82,840 ( 0.00%)      pub scope: DefId,
   131,458 ( 0.00%)      pub bound_region: BoundRegionKind,
         .           }
         .           
   601,726 ( 0.01%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
        80 ( 0.00%)  #[derive(HashStable)]
         .           pub enum BoundRegionKind {
         .               /// An anonymous region parameter for a given fn (&T)
    21,530 ( 0.00%)      BrAnon(u32),
         .           
         .               /// Named region parameters for functions (a in &'a T)
         .               ///
         .               /// The `DefId` is needed to distinguish free regions in
         .               /// the event of shadowing.
       602 ( 0.00%)      BrNamed(DefId, Symbol),
         .           
         .               /// Anonymous region for the implicit env pointer parameter
         .               /// to a closure
         .               BrEnv,
         .           }
         .           
     1,290 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
         .           #[derive(HashStable)]
         .           pub struct BoundRegion {
   124,271 ( 0.00%)      pub var: BoundVar,
    95,053 ( 0.00%)      pub kind: BoundRegionKind,
         .           }
         .           
         .           impl BoundRegionKind {
         .               pub fn is_named(&self) -> bool {
         .                   match *self {
         .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
         .                       _ => false,
         .                   }
         .               }
         .           }
         .           
         .           /// Defines the kinds of types.
         .           ///
         .           /// N.B., if you change this, you'll probably want to change the corresponding
         .           /// AST structure in `rustc_ast/src/ast.rs` as well.
17,741,818 ( 0.20%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
   209,991 ( 0.00%)  #[derive(HashStable)]
         .           #[rustc_diagnostic_item = "TyKind"]
         .           pub enum TyKind<'tcx> {
         .               /// The primitive boolean type. Written as `bool`.
         .               Bool,
         .           
         .               /// The primitive character type; holds a Unicode scalar value
         .               /// (a non-surrogate code point). Written as `char`.
         .               Char,
-- line 90 ----------------------------------------
-- line 99 ----------------------------------------
         .               Float(ty::FloatTy),
         .           
         .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
         .               ///
         .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
         .               /// That is, even after substitution it is possible that there are type
         .               /// variables. This happens when the `Adt` corresponds to an ADT
         .               /// definition and not a concrete use of it.
 2,351,045 ( 0.03%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
         .           
         .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
         .               Foreign(DefId),
         .           
         .               /// The pointee of a string slice. Written as `str`.
         .               Str,
         .           
         .               /// An array with the given length. Written as `[T; n]`.
   131,927 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
         .           
         .               /// The pointee of an array slice. Written as `[T]`.
         .               Slice(Ty<'tcx>),
         .           
         .               /// A raw pointer. Written as `*mut T` or `*const T`
         .               RawPtr(TypeAndMut<'tcx>),
         .           
         .               /// A reference; a pointer with an associated lifetime. Written as
         .               /// `&'a mut T` or `&'a T`.
 1,899,960 ( 0.02%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
         .           
         .               /// The anonymous type of a function declaration/definition. Each
         .               /// function has a unique type, which is output (for a function
         .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
         .               ///
         .               /// For example the type of `bar` here:
         .               ///
         .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
         .               ///
         .               /// ```rust
         .               /// fn foo() -> i32 { 1 }
         .               /// let bar: fn() -> i32 = foo;
         .               /// ```
         .               FnPtr(PolyFnSig<'tcx>),
         .           
         .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
   160,015 ( 0.00%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
         .           
         .               /// The anonymous type of a closure. Used to represent the type of
         .               /// `|a| a`.
         .               Closure(DefId, SubstsRef<'tcx>),
         .           
         .               /// The anonymous type of a generator. Used to represent the type of
         .               /// `|a| yield a`.
         .               Generator(DefId, SubstsRef<'tcx>, hir::Movability),
-- line 159 ----------------------------------------
-- line 180 ----------------------------------------
         .               /// The substitutions are for the generics of the function in question.
         .               /// After typeck, the concrete type can be found in the `types` map.
         .               Opaque(DefId, SubstsRef<'tcx>),
         .           
         .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
         .               Param(ParamTy),
         .           
         .               /// Bound type variable, used only when preparing a trait query.
     6,875 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
         .           
         .               /// A placeholder type - universally quantified higher-ranked type.
         .               Placeholder(ty::PlaceholderType),
         .           
         .               /// A type variable used during type checking.
         .               Infer(InferTy),
         .           
         .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 330 ----------------------------------------
         .               pub closure_kind_ty: T,
         .               pub closure_sig_as_fn_ptr_ty: T,
         .               pub tupled_upvars_ty: T,
         .           }
         .           
         .           impl<'tcx> ClosureSubsts<'tcx> {
         .               /// Construct `ClosureSubsts` from `ClosureSubstsParts`, containing `Substs`
         .               /// for the closure parent, alongside additional closure-specific components.
        77 ( 0.00%)      pub fn new(
         .                   tcx: TyCtxt<'tcx>,
         .                   parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,
         .               ) -> ClosureSubsts<'tcx> {
         .                   ClosureSubsts {
         .                       substs: tcx.mk_substs(
       154 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
       308 ( 0.00%)                      [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]
         .                                   .iter()
         .                                   .map(|&ty| ty.into()),
         .                           ),
         .                       ),
         .                   }
       154 ( 0.00%)      }
         .           
         .               /// Divides the closure substs into their respective components.
         .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
     1,058 ( 0.00%)      fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
         .                   match self.substs[..] {
    10,650 ( 0.00%)              [
     2,884 ( 0.00%)                  ref parent_substs @ ..,
     2,746 ( 0.00%)                  closure_kind_ty,
     1,587 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
     2,052 ( 0.00%)                  tupled_upvars_ty,
     4,232 ( 0.00%)              ] => ClosureSubstsParts {
         .                           parent_substs,
         .                           closure_kind_ty,
         .                           closure_sig_as_fn_ptr_ty,
         .                           tupled_upvars_ty,
         .                       },
         .                       _ => bug!("closure substs missing synthetics"),
         .                   }
     3,174 ( 0.00%)      }
         .           
         .               /// Returns `true` only if enough of the synthetic types are known to
         .               /// allow using all of the methods on `ClosureSubsts` without panicking.
         .               ///
         .               /// Used primarily by `ty::print::pretty` to be able to handle closure
         .               /// types that haven't had their synthetic types substituted in.
         2 ( 0.00%)      pub fn is_valid(self) -> bool {
         4 ( 0.00%)          self.substs.len() >= 3
         4 ( 0.00%)              && matches!(self.split().tupled_upvars_ty.expect_ty().kind(), Tuple(_))
         4 ( 0.00%)      }
         .           
         .               /// Returns the substitutions of the closure's parent.
         .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
         .                   self.split().parent_substs
         .               }
         .           
         .               /// Returns an iterator over the list of types of captured paths by the closure.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
       366 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       833 ( 0.00%)          match self.tupled_upvars_ty().kind() {
         .                       TyKind::Error(_) => None,
       352 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
       244 ( 0.00%)      }
         .           
         .               /// Returns the tuple type representing the upvars for this closure.
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
     4,621 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
         .               }
         .           
         .               /// Returns the closure kind for this closure; may return a type
         .               /// variable during inference. To get the closure kind during
         .               /// inference, use `infcx.closure_kind(substs)`.
       560 ( 0.00%)      pub fn kind_ty(self) -> Ty<'tcx> {
         .                   self.split().closure_kind_ty.expect_ty()
     1,120 ( 0.00%)      }
         .           
         .               /// Returns the `fn` pointer type representing the closure signature for this
         .               /// closure.
         .               // FIXME(eddyb) this should be unnecessary, as the shallowly resolved
         .               // type is known at the time of the creation of `ClosureSubsts`,
         .               // see `rustc_typeck::check::closure`.
         .               pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {
         .                   self.split().closure_sig_as_fn_ptr_ty.expect_ty()
         .               }
         .           
         .               /// Returns the closure kind for this closure; only usable outside
         .               /// of an inference context, because in that context we know that
         .               /// there are no type variables.
         .               ///
         .               /// If you have an inference context, use `infcx.closure_kind()`.
         3 ( 0.00%)      pub fn kind(self) -> ty::ClosureKind {
        32 ( 0.00%)          self.kind_ty().to_opt_closure_kind().unwrap()
         6 ( 0.00%)      }
         .           
         .               /// Extracts the signature from the closure.
       674 ( 0.00%)      pub fn sig(self) -> ty::PolyFnSig<'tcx> {
         .                   let ty = self.sig_as_fn_ptr_ty();
     1,348 ( 0.00%)          match ty.kind() {
     2,696 ( 0.00%)              ty::FnPtr(sig) => *sig,
         .                       _ => bug!("closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}", ty.kind()),
         .                   }
     2,022 ( 0.00%)      }
         .           }
         .           
         .           /// Similar to `ClosureSubsts`; see the above documentation for more.
         .           #[derive(Copy, Clone, Debug, TypeFoldable)]
         .           pub struct GeneratorSubsts<'tcx> {
         .               pub substs: SubstsRef<'tcx>,
         .           }
         .           
-- line 448 ----------------------------------------
-- line 676 ----------------------------------------
         .           }
         .           
         .           impl<'tcx> UpvarSubsts<'tcx> {
         .               /// Returns an iterator over the list of types of captured paths by the closure/generator.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
         .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       160 ( 0.00%)          let tupled_tys = match self {
       237 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
         .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
         .                   };
         .           
       394 ( 0.00%)          match tupled_tys.kind() {
         .                       TyKind::Error(_) => None,
       317 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
         .               }
         .           
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
       314 ( 0.00%)          match self {
       317 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
         .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
         .                   }
         .               }
         .           }
         .           
         .           /// An inline const is modeled like
         .           ///
         .           ///     const InlineConst<'l0...'li, T0...Tj, R>: R;
-- line 710 ----------------------------------------
-- line 760 ----------------------------------------
         .               }
         .           
         .               /// Returns the type of this inline const.
         .               pub fn ty(self) -> Ty<'tcx> {
         .                   self.split().ty.expect_ty()
         .               }
         .           }
         .           
   140,919 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
   129,542 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub enum ExistentialPredicate<'tcx> {
         .               /// E.g., `Iterator`.
         .               Trait(ExistentialTraitRef<'tcx>),
         .               /// E.g., `Iterator::Item = T`.
         .               Projection(ExistentialProjection<'tcx>),
         .               /// E.g., `Send`.
     1,132 ( 0.00%)      AutoTrait(DefId),
         .           }
         .           
         .           impl<'tcx> ExistentialPredicate<'tcx> {
         .               /// Compares via an ordering that will not change if modules are reordered or other changes are
         .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
     6,365 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
         .                   use self::ExistentialPredicate::*;
     9,472 ( 0.00%)          match (*self, *other) {
         .                       (Trait(_), Trait(_)) => Ordering::Equal,
         .                       (Projection(ref a), Projection(ref b)) => {
         .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
         .                       }
         .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
         .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
         .                       }
         .                       (Trait(_), _) => Ordering::Less,
         .                       (Projection(_), Trait(_)) => Ordering::Greater,
         .                       (Projection(_), _) => Ordering::Less,
         .                       (AutoTrait(_), _) => Ordering::Greater,
         .                   }
     7,638 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
    12,933 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
         .                   use crate::ty::ToPredicate;
     7,393 ( 0.00%)          match self.skip_binder() {
         .                       ExistentialPredicate::Trait(tr) => {
         .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
         .                       }
         .                       ExistentialPredicate::Projection(p) => {
         4 ( 0.00%)                  self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
         .                       }
         .                       ExistentialPredicate::AutoTrait(did) => {
       144 ( 0.00%)                  let trait_ref = self.rebind(ty::TraitRef {
         .                               def_id: did,
         .                               substs: tcx.mk_substs_trait(self_ty, &[]),
         .                           });
         .                           trait_ref.without_const().to_predicate(tcx)
         .                       }
         .                   }
    11,496 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
         .               /// Returns the "principal `DefId`" of this set of existential predicates.
         .               ///
         .               /// A Rust trait object type consists (in addition to a lifetime bound)
         .               /// of a set of trait bounds, which are separated into any number
         .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 839 ----------------------------------------
         .               /// are the set `{Sync}`.
         .               ///
         .               /// It is also possible to have a "trivial" trait object that
         .               /// consists only of auto traits, with no principal - for example,
         .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
         .               /// is `{Send, Sync}`, while there is no principal. These trait objects
         .               /// have a "trivial" vtable consisting of just the size, alignment,
         .               /// and destructor.
     1,075 ( 0.00%)      pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
     8,393 ( 0.00%)          self[0]
     5,156 ( 0.00%)              .map_bound(|this| match this {
         .                           ExistentialPredicate::Trait(tr) => Some(tr),
         .                           _ => None,
     4,300 ( 0.00%)              })
         .                       .transpose()
     3,225 ( 0.00%)      }
         .           
     1,327 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
         .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
     2,654 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn projection_bounds<'a>(
         .                   &'a self,
         .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
         .                   self.iter().filter_map(|predicate| {
        96 ( 0.00%)              predicate
     1,472 ( 0.00%)                  .map_bound(|pred| match pred {
        18 ( 0.00%)                      ExistentialPredicate::Projection(projection) => Some(projection),
         .                               _ => None,
         .                           })
         .                           .transpose()
         .                   })
         .               }
         .           
         .               #[inline]
         .               pub fn auto_traits<'a>(&'a self) -> impl Iterator<Item = DefId> + 'a {
        44 ( 0.00%)          self.iter().filter_map(|predicate| match predicate.skip_binder() {
         .                       ExistentialPredicate::AutoTrait(did) => Some(did),
         .                       _ => None,
         .                   })
         .               }
         .           }
         .           
         .           /// A complete reference to a trait. These take numerous guises in syntax,
         .           /// but perhaps the most recognizable form is in a where-clause:
-- line 884 ----------------------------------------
-- line 886 ----------------------------------------
         .           ///     T: Foo<U>
         .           ///
         .           /// This would be represented by a trait-reference where the `DefId` is the
         .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
         .           /// and `U` as parameter 1.
         .           ///
         .           /// Trait references also appear in object types like `Foo<U>`, but in
         .           /// that case the `Self` parameter is absent from the substitutions.
    41,511 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
 1,214,936 ( 0.01%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct TraitRef<'tcx> {
     1,817 ( 0.00%)      pub def_id: DefId,
   907,196 ( 0.01%)      pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           impl<'tcx> TraitRef<'tcx> {
     3,067 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
         .                   TraitRef { def_id, substs }
    12,268 ( 0.00%)      }
         .           
         .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
         .               /// are the parameters defined on trait.
     9,072 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
     4,032 ( 0.00%)          ty::Binder::dummy(TraitRef {
         .                       def_id,
     6,048 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
         .                   })
     8,064 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn self_ty(&self) -> Ty<'tcx> {
         .                   self.substs.type_at(0)
         .               }
         .           
     4,720 ( 0.00%)      pub fn from_method(
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_id: DefId,
         .                   substs: SubstsRef<'tcx>,
         .               ) -> ty::TraitRef<'tcx> {
         .                   let defs = tcx.generics_of(trait_id);
         .           
       590 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
     6,490 ( 0.00%)      }
         .           }
         .           
         .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
         .           
         .           impl<'tcx> PolyTraitRef<'tcx> {
         .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
         .                   self.map_bound_ref(|tr| tr.self_ty())
         .               }
         .           
         .               pub fn def_id(&self) -> DefId {
     7,122 ( 0.00%)          self.skip_binder().def_id
     2,374 ( 0.00%)      }
         .           
     2,775 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
     5,550 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
         .                       trait_ref,
         .                       constness: ty::BoundConstness::NotConst,
         .                       polarity: ty::ImplPolarity::Positive,
         .                   })
     2,775 ( 0.00%)      }
         .           }
         .           
         .           /// An existential reference to a trait, where `Self` is erased.
         .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
         .           ///
         .           ///     exists T. T: Trait<'a, 'b, X, Y>
         .           ///
         .           /// The substitutions don't include the erased `Self`, only trait
         .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
       269 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    61,414 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ExistentialTraitRef<'tcx> {
     9,734 ( 0.00%)      pub def_id: DefId,
    76,282 ( 0.00%)      pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           impl<'tcx> ExistentialTraitRef<'tcx> {
     1,148 ( 0.00%)      pub fn erase_self_ty(
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_ref: ty::TraitRef<'tcx>,
         .               ) -> ty::ExistentialTraitRef<'tcx> {
         .                   // Assert there is a Self.
         .                   trait_ref.substs.type_at(0);
         .           
         .                   ty::ExistentialTraitRef {
         .                       def_id: trait_ref.def_id,
         .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
         .                   }
     1,148 ( 0.00%)      }
         .           
         .               /// Object types don't have a self type specified. Therefore, when
         .               /// we convert the principal trait-ref into a normal trait-ref,
         .               /// you must give *some* self type. A common choice is `mk_err()`
         .               /// or some placeholder type.
        56 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
         .                   // otherwise the escaping vars would be captured by the binder
         .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
         .           
        28 ( 0.00%)          ty::TraitRef { def_id: self.def_id, substs: tcx.mk_substs_trait(self_ty, self.substs) }
       140 ( 0.00%)      }
         .           }
         .           
         .           pub type PolyExistentialTraitRef<'tcx> = Binder<'tcx, ExistentialTraitRef<'tcx>>;
         .           
         .           impl<'tcx> PolyExistentialTraitRef<'tcx> {
         .               pub fn def_id(&self) -> DefId {
         .                   self.skip_binder().def_id
         .               }
         .           
         .               /// Object types don't have a self type specified. Therefore, when
         .               /// we convert the principal trait-ref into a normal trait-ref,
         .               /// you must give *some* self type. A common choice is `mk_err()`
         .               /// or some placeholder type.
     1,641 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
     1,913 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
     2,188 ( 0.00%)      }
         .           }
         .           
    73,576 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
       185 ( 0.00%)  #[derive(HashStable)]
         .           pub enum BoundVariableKind {
         .               Ty(BoundTyKind),
         .               Region(BoundRegionKind),
         .               Const,
         .           }
         .           
         .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
         .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
         .           /// (which would be represented by the type `PolyTraitRef ==
         .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
         .           /// erase, or otherwise "discharge" these bound vars, we change the
         .           /// type from `Binder<'tcx, T>` to just `T` (see
         .           /// e.g., `liberate_late_bound_regions`).
         .           ///
         .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
   163,731 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
   633,669 ( 0.01%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
         .           
         .           impl<'tcx, T> Binder<'tcx, T>
         .           where
         .               T: TypeFoldable<'tcx>,
         .           {
         .               /// Wraps `value` in a binder, asserting that `value` does not
         .               /// contain any bound vars that would be bound by the
         .               /// binder. This is commonly used to 'inject' a value T into a
         .               /// different binding level.
    50,530 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
   219,777 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
   498,808 ( 0.01%)          Binder(value, ty::List::empty())
    50,185 ( 0.00%)      }
         .           
         .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(vars);
         .                       value.visit_with(&mut validator);
         .                   }
    43,161 ( 0.00%)          Binder(value, vars)
         .               }
         .           }
         .           
         .           impl<'tcx, T> Binder<'tcx, T> {
         .               /// Skips the binder and returns the "bound" value. This is a
         .               /// risky thing to do because it's easy to get confused about
         .               /// De Bruijn indices and the like. It is usually better to
         .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
         .               /// accounting.
         .               ///
         .               /// Some examples where `skip_binder` is reasonable:
         .               ///
         .               /// - extracting the `DefId` from a PolyTraitRef;
         .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
         .               ///   a type parameter `X`, since the type `X` does not reference any regions
         .               pub fn skip_binder(self) -> T {
 1,614,315 ( 0.02%)          self.0
         .               }
         .           
         .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
     7,811 ( 0.00%)          self.1
         .               }
         .           
         .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
     4,437 ( 0.00%)          Binder(&self.0, self.1)
         .               }
         .           
         .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(&T) -> U,
         .               {
         .                   let value = f(&self.0);
         .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
         .           
         .               pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(&T) -> U,
         .               {
         .                   self.as_ref().map_bound(f)
         .               }
         .           
     1,968 ( 0.00%)      pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(T) -> U,
         .               {
    45,060 ( 0.00%)          let value = f(self.0);
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.1);
         .                       value.visit_with(&mut validator);
         .                   }
   417,010 ( 0.00%)          Binder(value, self.1)
     1,964 ( 0.00%)      }
         .           
         .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
         .               where
         .                   F: FnOnce(T) -> Result<U, E>,
         .               {
         .                   let value = f(self.0)?;
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.1);
         .                       value.visit_with(&mut validator);
         .                   }
    16,964 ( 0.00%)          Ok(Binder(value, self.1))
         .               }
         .           
         .               /// Wraps a `value` in a binder, using the same bound variables as the
         .               /// current `Binder`. This should not be used if the new value *changes*
         .               /// the bound variables. Note: the (old or new) value itself does not
         .               /// necessarily need to *name* all the bound variables.
         .               ///
         .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
         .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
         .               where
         .                   U: TypeFoldable<'tcx>,
         .               {
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
         .                       value.visit_with(&mut validator);
         .                   }
    31,139 ( 0.00%)          Binder(value, self.1)
         .               }
         .           
         .               /// Unwraps and returns the value within, but only if it contains
         .               /// no bound vars at all. (In other words, if this binder --
         .               /// and indeed any enclosing binder -- doesn't bind anything at
         .               /// all.) Otherwise, returns `None`.
         .               ///
         .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
         .               /// binder, but permits late-bound vars bound by enclosing
         .               /// binders, but that would require adjusting the debruijn
         .               /// indices, and given the shallow binding structure we often use,
         .               /// would not be that useful.)
         .               pub fn no_bound_vars(self) -> Option<T>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
   262,007 ( 0.00%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
       970 ( 0.00%)      }
         .           
         .               /// Splits the contents into two things that share the same binder
         .               /// level as the original, returning two distinct binders.
         .               ///
         .               /// `f` should consider bound regions at depth 1 to be free, and
         .               /// anything it produces with bound regions at depth 1 will be
         .               /// bound in the resulting return values.
         .               pub fn split<U, V, F>(self, f: F) -> (Binder<'tcx, U>, Binder<'tcx, V>)
-- line 1160 ----------------------------------------
-- line 1170 ----------------------------------------
         .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
         .                   let bound_vars = self.1;
         .                   self.0.map(|v| Binder(v, bound_vars))
         .               }
         .           }
         .           
         .           /// Represents the projection of an associated type. In explicit UFCS
         .           /// form this would be written `<T as Trait<..>>::N`.
     1,429 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
    44,922 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ProjectionTy<'tcx> {
         .               /// The parameters of the associated item.
    27,637 ( 0.00%)      pub substs: SubstsRef<'tcx>,
         .           
         .               /// The `DefId` of the `TraitItem` for the associated type `N`.
         .               ///
         .               /// Note that this is not the `DefId` of the `TraitRef` containing this
         .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
    30,557 ( 0.00%)      pub item_def_id: DefId,
         .           }
         .           
         .           impl<'tcx> ProjectionTy<'tcx> {
    17,745 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
     5,070 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
    20,280 ( 0.00%)      }
         .           
         .               /// Extracts the underlying trait reference and own substs from this projection.
         .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
         .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
     7,245 ( 0.00%)      pub fn trait_ref_and_own_substs(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
     3,105 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
         .                   let trait_generics = tcx.generics_of(def_id);
     5,175 ( 0.00%)          (
         .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
         .                       &self.substs[trait_generics.count()..],
         .                   )
     9,315 ( 0.00%)      }
         .           
         .               /// Extracts the underlying trait reference from this projection.
         .               /// For example, if this is a projection of `<T as Iterator>::Item`,
         .               /// then this function would return a `T: Iterator` trait reference.
         .               ///
         .               /// WARNING: This will drop the substs for generic associated types
         .               /// consider calling [Self::trait_ref_and_own_substs] to get those
         .               /// as well.
    22,140 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
     2,460 ( 0.00%)          let def_id = self.trait_def_id(tcx);
     2,460 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
    27,060 ( 0.00%)      }
         .           
     4,789 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
    14,367 ( 0.00%)          self.substs.type_at(0)
     9,578 ( 0.00%)      }
         .           }
         .           
         .           #[derive(Copy, Clone, Debug, TypeFoldable)]
         .           pub struct GenSig<'tcx> {
         .               pub resume_ty: Ty<'tcx>,
         .               pub yield_ty: Ty<'tcx>,
         .               pub return_ty: Ty<'tcx>,
         .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
         .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
         .           
         .           /// Signature of a function type, which we have arbitrarily
         .           /// decided to use to refer to the input/output types.
         .           ///
         .           /// - `inputs`: is the list of arguments and their modes.
         .           /// - `output`: is the return type.
         .           /// - `c_variadic`: indicates whether this is a C-variadic function.
    88,948 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    49,389 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct FnSig<'tcx> {
     4,715 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
    45,578 ( 0.00%)      pub c_variadic: bool,
     8,540 ( 0.00%)      pub unsafety: hir::Unsafety,
    47,585 ( 0.00%)      pub abi: abi::Abi,
         .           }
         .           
         .           impl<'tcx> FnSig<'tcx> {
    43,131 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
   186,045 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
    86,262 ( 0.00%)      }
         .           
    25,215 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
   192,214 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
    50,430 ( 0.00%)      }
         .           
         .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
         .               // method.
         .               fn fake() -> FnSig<'tcx> {
         .                   FnSig {
         .                       inputs_and_output: List::empty(),
         .                       c_variadic: false,
         .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
         .               }
         .           }
         .           
         .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
         .           
         .           impl<'tcx> PolyFnSig<'tcx> {
         .               #[inline]
         .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
    11,339 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
         .               }
         .               #[inline]
         .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
    22,518 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
         .               }
         .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
         .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
       828 ( 0.00%)      }
         .               #[inline]
         .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
    14,155 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
         .               }
         .               pub fn c_variadic(&self) -> bool {
     1,652 ( 0.00%)          self.skip_binder().c_variadic
       826 ( 0.00%)      }
         .               pub fn unsafety(&self) -> hir::Unsafety {
     6,142 ( 0.00%)          self.skip_binder().unsafety
     3,071 ( 0.00%)      }
         .               pub fn abi(&self) -> abi::Abi {
    52,776 ( 0.00%)          self.skip_binder().abi
    13,194 ( 0.00%)      }
         .           }
         .           
         .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
         .           
        44 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
       420 ( 0.00%)  #[derive(HashStable)]
         .           pub struct ParamTy {
        96 ( 0.00%)      pub index: u32,
         .               pub name: Symbol,
         .           }
         .           
         .           impl<'tcx> ParamTy {
       172 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
         .                   ParamTy { index, name }
        86 ( 0.00%)      }
         .           
         .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
        26 ( 0.00%)          ParamTy::new(def.index, def.name)
        13 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
         .                   tcx.mk_ty_param(self.index, self.name)
         .               }
         .           }
         .           
         .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
         .           #[derive(HashStable)]
         .           pub struct ParamConst {
       112 ( 0.00%)      pub index: u32,
       112 ( 0.00%)      pub name: Symbol,
         .           }
         .           
         .           impl ParamConst {
         .               pub fn new(index: u32, name: Symbol) -> ParamConst {
         .                   ParamConst { index, name }
         .               }
         .           
         .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
         .           /// the inference variable is supposed to satisfy the relation
         .           /// *for every value of the placeholder region*. To ensure that doesn't
         .           /// happen, you can use `leak_check`. This is more clearly explained
         .           /// by the [rustc dev guide].
         .           ///
         .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
         .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
         .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
 6,382,073 ( 0.07%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
     2,402 ( 0.00%)  pub enum RegionKind {
         .               /// Region bound in a type or fn declaration which will be
         .               /// substituted 'early' -- that is, at the same time when type
         .               /// parameters are substituted.
         .               ReEarlyBound(EarlyBoundRegion),
         .           
         .               /// Region bound in a function scope, which will be substituted when the
         .               /// function is called.
   189,100 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
         .           
         .               /// When checking a function body, the types of all arguments and so forth
         .               /// that refer to bound region parameters are modified to refer to free
         .               /// region parameters.
         .               ReFree(FreeRegion),
         .           
         .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
         .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
         .               /// regions visible from `U`, but not less than regions not visible
         .               /// from `U`.
         .               ReEmpty(ty::UniverseIndex),
         .           
         .               /// Erased region, used by trait selection, in MIR and during codegen.
         .               ReErased,
         .           }
         .           
    19,848 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
         .           pub struct EarlyBoundRegion {
       698 ( 0.00%)      pub def_id: DefId,
    16,481 ( 0.00%)      pub index: u32,
     5,769 ( 0.00%)      pub name: Symbol,
         .           }
         .           
         .           /// A **`const`** **v**ariable **ID**.
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
         .           pub struct ConstVid<'tcx> {
     3,056 ( 0.00%)      pub index: u32,
         5 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
         .           }
         .           
         .           rustc_index::newtype_index! {
         .               /// A **region** (lifetime) **v**ariable **ID**.
         .               pub struct RegionVid {
         .                   DEBUG_FORMAT = custom,
         .               }
         .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
         .           rustc_index::newtype_index! {
         .               pub struct BoundVar { .. }
         .           }
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub struct BoundTy {
         .               pub var: BoundVar,
     6,875 ( 0.00%)      pub kind: BoundTyKind,
         .           }
         .           
   116,953 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub enum BoundTyKind {
         .               Anon,
         .               Param(Symbol),
         .           }
         .           
         .           impl From<BoundVar> for BoundTy {
         .               fn from(var: BoundVar) -> Self {
         .                   BoundTy { var, kind: BoundTyKind::Anon }
         .               }
         .           }
         .           
         .           /// A `ProjectionPredicate` for an `ExistentialTraitRef`.
        26 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
     1,268 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ExistentialProjection<'tcx> {
       360 ( 0.00%)      pub item_def_id: DefId,
     1,660 ( 0.00%)      pub substs: SubstsRef<'tcx>,
       415 ( 0.00%)      pub term: Term<'tcx>,
         .           }
         .           
         .           pub type PolyExistentialProjection<'tcx> = Binder<'tcx, ExistentialProjection<'tcx>>;
         .           
         .           impl<'tcx> ExistentialProjection<'tcx> {
         .               /// Extracts the underlying existential trait reference from this projection.
         .               /// For example, if this is a projection of `exists T. <T as Iterator>::Item == X`,
         .               /// then this function would return an `exists T. T: Iterator` existential trait
         .               /// reference.
       161 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::ExistentialTraitRef<'tcx> {
        69 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
        46 ( 0.00%)          let subst_count = tcx.generics_of(def_id).count() - 1;
        23 ( 0.00%)          let substs = tcx.intern_substs(&self.substs[..subst_count]);
         .                   ty::ExistentialTraitRef { def_id, substs }
       207 ( 0.00%)      }
         .           
         .               pub fn with_self_ty(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   self_ty: Ty<'tcx>,
         .               ) -> ty::ProjectionPredicate<'tcx> {
         .                   // otherwise the escaping regions would be captured by the binders
         .                   debug_assert!(!self_ty.has_escaping_bound_vars());
-- line 1566 ----------------------------------------
-- line 1569 ----------------------------------------
         .                       projection_ty: ty::ProjectionTy {
         .                           item_def_id: self.item_def_id,
         .                           substs: tcx.mk_substs_trait(self_ty, self.substs),
         .                       },
         .                       term: self.term,
         .                   }
         .               }
         .           
        10 ( 0.00%)      pub fn erase_self_ty(
         .                   tcx: TyCtxt<'tcx>,
         .                   projection_predicate: ty::ProjectionPredicate<'tcx>,
         .               ) -> Self {
         .                   // Assert there is a Self.
         6 ( 0.00%)          projection_predicate.projection_ty.substs.type_at(0);
         .           
         8 ( 0.00%)          Self {
         4 ( 0.00%)              item_def_id: projection_predicate.projection_ty.item_def_id,
         .                       substs: tcx.intern_substs(&projection_predicate.projection_ty.substs[1..]),
         2 ( 0.00%)              term: projection_predicate.term,
         .                   }
        14 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> PolyExistentialProjection<'tcx> {
        40 ( 0.00%)      pub fn with_self_ty(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   self_ty: Ty<'tcx>,
         .               ) -> ty::PolyProjectionPredicate<'tcx> {
        40 ( 0.00%)          self.map_bound(|p| p.with_self_ty(tcx, self_ty))
        48 ( 0.00%)      }
         .           
         .               pub fn item_def_id(&self) -> DefId {
        16 ( 0.00%)          self.skip_binder().item_def_id
         8 ( 0.00%)      }
         .           }
         .           
         .           /// Region utilities
         .           impl RegionKind {
         .               /// Is this region named by the user?
         .               pub fn has_name(&self) -> bool {
         .                   match *self {
         .                       RegionKind::ReEarlyBound(ebr) => ebr.has_name(),
-- line 1611 ----------------------------------------
-- line 1616 ----------------------------------------
         .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
         .                       RegionKind::ReEmpty(_) => false,
         .                       RegionKind::ReErased => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_late_bound(&self) -> bool {
     9,619 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_placeholder(&self) -> bool {
         1 ( 0.00%)          matches!(*self, ty::RePlaceholder(..))
         .               }
         .           
         .               #[inline]
         .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
   200,477 ( 0.00%)          match *self {
         .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               pub fn type_flags(&self) -> TypeFlags {
         .                   let mut flags = TypeFlags::empty();
         .           
   290,244 ( 0.00%)          match *self {
         .                       ty::ReVar(..) => {
         .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
         .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
         .                           flags = flags | TypeFlags::HAS_RE_INFER;
         .                       }
         .                       ty::RePlaceholder(..) => {
         .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
         .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
         .                       ty::ReErased => {
         .                           flags = flags | TypeFlags::HAS_RE_ERASED;
         .                       }
         .                   }
         .           
         .                   debug!("type_flags({:?}) = {:?}", self, flags);
         .           
         .                   flags
    15,340 ( 0.00%)      }
         .           
         .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
         .               /// For example, consider the regions in this snippet of code:
         .               ///
         .               /// ```
         .               /// impl<'a> Foo {
         .               ///      ^^ -- early bound, declared on an impl
         .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
         .           
         .               #[inline(always)]
         .               pub fn flags(&self) -> TypeFlags {
         .                   self.flags
         .               }
         .           
         .               #[inline]
         .               pub fn is_unit(&self) -> bool {
     5,016 ( 0.00%)          match self.kind() {
       707 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_never(&self) -> bool {
    84,636 ( 0.00%)          matches!(self.kind(), Never)
         .               }
         .           
         .               #[inline]
         .               pub fn is_primitive(&self) -> bool {
         .                   self.kind().is_primitive()
         .               }
         .           
         .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn is_ref(&self) -> bool {
         .                   matches!(self.kind(), Ref(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_ty_var(&self) -> bool {
   106,568 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
    65,522 ( 0.00%)          match self.kind() {
    10,105 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_ty_infer(&self) -> bool {
       231 ( 0.00%)          matches!(self.kind(), Infer(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_phantom_data(&self) -> bool {
         .                   if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
         .               }
         .           
         .               #[inline]
         .               pub fn is_bool(&self) -> bool {
       534 ( 0.00%)          *self.kind() == Bool
         .               }
         .           
         .               /// Returns `true` if this type is a `str`.
         .               #[inline]
         .               pub fn is_str(&self) -> bool {
         .                   *self.kind() == Str
         .               }
         .           
         .               #[inline]
         .               pub fn is_param(&self, index: u32) -> bool {
       161 ( 0.00%)          match self.kind() {
         .                       ty::Param(ref data) => data.index == index,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_slice(&self) -> bool {
         .                   match self.kind() {
         .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_array(&self) -> bool {
       427 ( 0.00%)          matches!(self.kind(), Array(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_simd(&self) -> bool {
         .                   match self.kind() {
         .                       Adt(def, _) => def.repr.simd(),
         .                       _ => false,
         .                   }
         .               }
         .           
       866 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
     1,732 ( 0.00%)          match self.kind() {
         .                       Array(ty, _) | Slice(ty) => ty,
         .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
         .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
         .                   }
       866 ( 0.00%)      }
         .           
         .               pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
         .                   match self.kind() {
         .                       Adt(def, substs) => {
         .                           assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
         .                           let variant = def.non_enum_variant();
         .                           let f0_ty = variant.fields[0].ty(tcx, substs);
         .           
-- line 1824 ----------------------------------------
-- line 1838 ----------------------------------------
         .                           }
         .                       }
         .                       _ => bug!("`simd_size_and_type` called on invalid type"),
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_region_ptr(&self) -> bool {
       788 ( 0.00%)          matches!(self.kind(), Ref(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_mutable_ptr(&self) -> bool {
         .                   matches!(
         .                       self.kind(),
         .                       RawPtr(TypeAndMut { mutbl: hir::Mutability::Mut, .. })
         .                           | Ref(_, _, hir::Mutability::Mut)
-- line 1854 ----------------------------------------
-- line 1861 ----------------------------------------
         .                   match self.kind() {
         .                       Ref(_, _, mutability) => Some(*mutability),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_unsafe_ptr(&self) -> bool {
    11,010 ( 0.00%)          matches!(self.kind(), RawPtr(_))
         .               }
         .           
         .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
         .               #[inline]
         .               pub fn is_any_ptr(&self) -> bool {
       658 ( 0.00%)          self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
         .               }
         .           
         .               #[inline]
         .               pub fn is_box(&self) -> bool {
   104,582 ( 0.00%)          match self.kind() {
    24,837 ( 0.00%)              Adt(def, _) => def.is_box(),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               /// Panics if called on any type other than `Box<T>`.
     7,740 ( 0.00%)      pub fn boxed_ty(&self) -> Ty<'tcx> {
     7,740 ( 0.00%)          match self.kind() {
    19,350 ( 0.00%)              Adt(def, substs) if def.is_box() => substs.type_at(0),
         .                       _ => bug!("`boxed_ty` is called on non-box type {:?}", self),
         .                   }
     7,740 ( 0.00%)      }
         .           
         .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
         .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
         .               /// contents are abstract to rustc.)
         .               #[inline]
         .               pub fn is_scalar(&self) -> bool {
     1,492 ( 0.00%)          matches!(
     3,358 ( 0.00%)              self.kind(),
         .                       Bool | Char
         .                           | Int(_)
         .                           | Float(_)
         .                           | Uint(_)
         .                           | FnDef(..)
         .                           | FnPtr(_)
         .                           | RawPtr(_)
         .                           | Infer(IntVar(_) | FloatVar(_))
         .                   )
         .               }
         .           
         .               /// Returns `true` if this type is a floating point type.
         .               #[inline]
         .               pub fn is_floating_point(&self) -> bool {
     1,578 ( 0.00%)          matches!(self.kind(), Float(_) | Infer(FloatVar(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_trait(&self) -> bool {
     1,173 ( 0.00%)          matches!(self.kind(), Dynamic(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_enum(&self) -> bool {
     2,950 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
         .               }
         .           
         .               #[inline]
         .               pub fn is_union(&self) -> bool {
    14,170 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
         .               }
         .           
         .               #[inline]
         .               pub fn is_closure(&self) -> bool {
     2,474 ( 0.00%)          matches!(self.kind(), Closure(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_generator(&self) -> bool {
     5,421 ( 0.00%)          matches!(self.kind(), Generator(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_integral(&self) -> bool {
    15,021 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fresh_ty(&self) -> bool {
         .                   matches!(self.kind(), Infer(FreshTy(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fresh(&self) -> bool {
     4,850 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_char(&self) -> bool {
         .                   matches!(self.kind(), Char)
         .               }
         .           
         .               #[inline]
         .               pub fn is_numeric(&self) -> bool {
         .                   self.is_integral() || self.is_floating_point()
         .               }
         .           
         .               #[inline]
         .               pub fn is_signed(&self) -> bool {
       468 ( 0.00%)          matches!(self.kind(), Int(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_ptr_sized_integral(&self) -> bool {
     3,297 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
         .               }
         .           
         .               #[inline]
         .               pub fn has_concrete_skeleton(&self) -> bool {
         .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
         .               }
         .           
         .               /// Returns the type and mutability of `*ty`.
         .               ///
         .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
         .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
    27,598 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
   190,282 ( 0.00%)          match self.kind() {
    12,120 ( 0.00%)              Adt(def, _) if def.is_box() => {
     9,729 ( 0.00%)                  Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
         .                       }
    83,846 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
     8,952 ( 0.00%)              RawPtr(mt) if explicit => Some(*mt),
         .                       _ => None,
         .                   }
    55,196 ( 0.00%)      }
         .           
         .               /// Returns the type of `ty[i]`.
         .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
     6,600 ( 0.00%)          match self.kind() {
         .                       Array(ty, _) | Slice(ty) => Some(ty),
         .                       _ => None,
         .                   }
       273 ( 0.00%)      }
         .           
   169,920 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
    84,960 ( 0.00%)          match self.kind() {
    63,675 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
        75 ( 0.00%)              FnPtr(f) => *f,
         .                       Error(_) => {
         .                           // ignore errors (#54954)
         .                           ty::Binder::dummy(FnSig::fake())
         .                       }
         .                       Closure(..) => bug!(
         .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
         .                       ),
         .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
         .                   }
   191,160 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn is_fn(&self) -> bool {
     6,840 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fn_ptr(&self) -> bool {
         .                   matches!(self.kind(), FnPtr(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_impl_trait(&self) -> bool {
         .                   matches!(self.kind(), Opaque(..))
         .               }
         .           
         .               #[inline]
         .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
    12,297 ( 0.00%)          match self.kind() {
         .                       Adt(adt, _) => Some(adt),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               /// Iterates over tuple fields.
         .               /// Panics when called on anything but a tuple.
       415 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
     2,820 ( 0.00%)          match self.kind() {
     1,867 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
         .                       _ => bug!("tuple_fields called on non-tuple"),
         .                   }
       830 ( 0.00%)      }
         .           
         .               /// Get the `i`-th element of a tuple.
         .               /// Panics when called on anything but a tuple.
         9 ( 0.00%)      pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
        18 ( 0.00%)          match self.kind() {
        18 ( 0.00%)              Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
         .                       _ => bug!("tuple_fields called on non-tuple"),
         .                   }
        18 ( 0.00%)      }
         .           
         .               /// If the type contains variants, returns the valid range of variant indices.
         .               //
         .               // FIXME: This requires the optimized MIR in the case of generators.
         .               #[inline]
         .               pub fn variant_range(&self, tcx: TyCtxt<'tcx>) -> Option<Range<VariantIdx>> {
         .                   match self.kind() {
         .                       TyKind::Adt(adt, _) => Some(adt.variant_range()),
-- line 2068 ----------------------------------------
-- line 2073 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// If the type contains variants, returns the variant for `variant_index`.
         .               /// Panics if `variant_index` is out of range.
         .               //
         .               // FIXME: This requires the optimized MIR in the case of generators.
         .               #[inline]
    22,100 ( 0.00%)      pub fn discriminant_for_variant(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   variant_index: VariantIdx,
         .               ) -> Option<Discr<'tcx>> {
    22,595 ( 0.00%)          match self.kind() {
     8,912 ( 0.00%)              TyKind::Adt(adt, _) if adt.variants.is_empty() => {
         .                           // This can actually happen during CTFE, see
         .                           // https://github.com/rust-lang/rust/issues/89765.
         .                           None
         .                       }
     4,456 ( 0.00%)              TyKind::Adt(adt, _) if adt.is_enum() => {
         .                           Some(adt.discriminant_for_variant(tcx, variant_index))
         .                       }
         .                       TyKind::Generator(def_id, substs, _) => {
         .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
         .                       }
         .                       _ => None,
         .                   }
    17,680 ( 0.00%)      }
         .           
         .               /// Returns the type of the discriminant of this type.
    30,670 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
    15,335 ( 0.00%)          match self.kind() {
    24,536 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
         .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
         .           
         .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
         .                           let assoc_items = tcx.associated_item_def_ids(
         .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
         .                           );
         .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
         .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
         .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
         .           
         .                       ty::Bound(..)
         .                       | ty::Placeholder(_)
         .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
         .                       }
         .                   }
    24,536 ( 0.00%)      }
         .           
         .               /// Returns the type of metadata for (potentially fat) pointers to this type.
        36 ( 0.00%)      pub fn ptr_metadata_ty(
         .                   &'tcx self,
         .                   tcx: TyCtxt<'tcx>,
         .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
         .               ) -> Ty<'tcx> {
        36 ( 0.00%)          let tail = tcx.struct_tail_with_normalize(self, normalize);
        20 ( 0.00%)          match tail.kind() {
         .                       // Sized types
         .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
         .                       | ty::Uint(_)
         .                       | ty::Int(_)
         .                       | ty::Bool
         .                       | ty::Float(_)
         .                       | ty::FnDef(..)
         .                       | ty::FnPtr(_)
-- line 2160 ----------------------------------------
-- line 2170 ----------------------------------------
         .                       | ty::Foreign(..)
         .                       // If returned by `struct_tail_without_normalization` this is a unit struct
         .                       // without any fields, or not a struct, and therefore is Sized.
         .                       | ty::Adt(..)
         .                       // If returned by `struct_tail_without_normalization` this is the empty tuple,
         .                       // a.k.a. unit type, which is Sized
         .                       | ty::Tuple(..) => tcx.types.unit,
         .           
         8 ( 0.00%)              ty::Str | ty::Slice(_) => tcx.types.usize,
         .                       ty::Dynamic(..) => {
         .                           let dyn_metadata = tcx.lang_items().dyn_metadata().unwrap();
         .                           tcx.type_of(dyn_metadata).subst(tcx, &[tail.into()])
         .                       },
         .           
         .                       ty::Projection(_)
         .                       | ty::Param(_)
         .                       | ty::Opaque(..)
         .                       | ty::Infer(ty::TyVar(_))
         .                       | ty::Bound(..)
         .                       | ty::Placeholder(..)
         .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`ptr_metadata_ty` applied to unexpected type: {:?}", tail)
         .                       }
         .                   }
        32 ( 0.00%)      }
         .           
         .               /// When we create a closure, we record its kind (i.e., what trait
         .               /// it implements) into its `ClosureSubsts` using a type
         .               /// parameter. This is kind of a phantom type, except that the
         .               /// most convenient thing for us to are the integral types. This
         .               /// function converts such a special type into the closure
         .               /// kind. To go the other way, use
         .               /// `tcx.closure_kind_ty(closure_kind)`.
         .               ///
         .               /// Note that during type checking, we use an inference variable
         .               /// to represent the closure kind, because it has not yet been
         .               /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)
         .               /// is complete, that type variable will be unified.
     1,546 ( 0.00%)      pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {
     3,092 ( 0.00%)          match self.kind() {
     2,980 ( 0.00%)              Int(int_ty) => match int_ty {
         .                           ty::IntTy::I8 => Some(ty::ClosureKind::Fn),
         .                           ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),
         .                           ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),
         .                           _ => bug!("cannot convert type `{:?}` to a closure kind", self),
         .                       },
         .           
         .                       // "Bound" types appear in canonical queries when the
         .                       // closure type is not yet known
         .                       Bound(..) | Infer(_) => None,
         .           
         .                       Error(_) => Some(ty::ClosureKind::Fn),
         .           
         .                       _ => bug!("cannot convert type `{:?}` to a closure kind", self),
         .                   }
     1,546 ( 0.00%)      }
         .           
         .               /// Fast path helper for testing if a type is `Sized`.
         .               ///
         .               /// Returning true means the type is known to be sized. Returning
         .               /// `false` means nothing -- could be sized, might not be.
         .               ///
         .               /// Note that we could never rely on the fact that a type such as `[_]` is
         .               /// trivially `!Sized` because we could be in a type environment with a
         .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
         .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
         .               /// this method doesn't return `Option<bool>`.
   454,581 ( 0.01%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
   303,054 ( 0.00%)          match self.kind() {
         .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
         .                       | ty::Uint(_)
         .                       | ty::Int(_)
         .                       | ty::Bool
         .                       | ty::Float(_)
         .                       | ty::FnDef(..)
         .                       | ty::FnPtr(_)
         .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
         .                       | ty::GeneratorWitness(..)
         .                       | ty::Array(..)
         .                       | ty::Closure(..)
         .                       | ty::Never
         .                       | ty::Error(_) => true,
         .           
         .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
         .           
     4,880 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
         .           
    47,193 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
         .           
         .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
         .           
         .                       ty::Infer(ty::TyVar(_)) => false,
         .           
         .                       ty::Bound(..)
         .                       | ty::Placeholder(..)
         .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
         .                       }
         .                   }
   454,581 ( 0.01%)      }
         .           }
         .           
         .           /// Extra information about why we ended up with a particular variance.
         .           /// This is only used to add more information to error messages, and
         .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
         .           /// may lead to confusing notes in error messages, it will never cause
         .           /// a miscompilation or unsoundness.
         .           ///
         .           /// When in doubt, use `VarianceDiagInfo::default()`
     1,056 ( 0.00%)  #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]
         .           pub enum VarianceDiagInfo<'tcx> {
         .               /// No additional information - this is the default.
         .               /// We will not add any additional information to error messages.
         .               #[default]
         .               None,
         .               /// We switched our variance because a generic argument occurs inside
         .               /// the invariant generic argument of another type.
         .               Invariant {
-- line 2290 ----------------------------------------
-- line 2295 ----------------------------------------
         .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
         .                   param_index: u32,
         .               },
         .           }
         .           
         .           impl<'tcx> VarianceDiagInfo<'tcx> {
         .               /// Mirrors `Variance::xform` - used to 'combine' the existing
         .               /// and new `VarianceDiagInfo`s when our variance changes.
    86,236 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
         .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
   129,354 ( 0.00%)          match self {
         .                       VarianceDiagInfo::None => other,
         .                       VarianceDiagInfo::Invariant { .. } => self,
         .                   }
    43,118 ( 0.00%)      }
         .           }

24,183,326 ( 0.27%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/reader/parser/outside_tag.rs
--------------------------------------------------------------------------------
Ir                 

-- line 4 ----------------------------------------
        .           use reader::lexer::Token;
        .           
        .           use super::{
        .               Result, PullParser, State, ClosingTagSubstate, OpeningTagSubstate,
        .               ProcessingInstructionSubstate, DEFAULT_VERSION, DEFAULT_ENCODING, DEFAULT_STANDALONE
        .           };
        .           
        .           impl PullParser {
1,074,756 ( 0.01%)      pub fn outside_tag(&mut self, t: Token) -> Option<Result> {
1,637,264 ( 0.02%)          match t {
        .                       Token::ReferenceStart =>
        .                           self.into_state_continue(State::InsideReference(Box::new(State::OutsideTag))),
        .           
  221,728 ( 0.00%)              Token::Whitespace(_) if self.depth() == 0 && self.config.ignore_root_level_whitespace => None,  // skip whitespace outside of the root element
        .           
  366,974 ( 0.00%)              Token::Whitespace(_) if self.config.trim_whitespace && !self.buf_has_data() => None,
        .           
   96,312 ( 0.00%)              Token::Whitespace(c) => {
  192,624 ( 0.00%)                  if !self.buf_has_data() {
        .                               self.push_pos();
        .                           }
   64,208 ( 0.00%)                  self.append_char_continue(c)
        .                       }
        .           
1,206,582 ( 0.01%)              _ if t.contains_char_data() && self.depth() == 0 =>
        .                           Some(self_error!(self; "Unexpected characters outside the root element: {}", t)),
        .           
  676,062 ( 0.01%)              _ if t.contains_char_data() => {  // Non-whitespace char data
  663,150 ( 0.01%)                  if !self.buf_has_data() {
      644 ( 0.00%)                      self.push_pos();
        .                           }
  132,630 ( 0.00%)                  self.inside_whitespace = false;
  397,890 ( 0.00%)                  t.push_to_string(&mut self.buf);
  265,260 ( 0.00%)                  None
        .                       }
        .           
        .                       Token::ReferenceEnd => { // Semi-colon in a text outside an entity
       12 ( 0.00%)                  self.inside_whitespace = false;
       36 ( 0.00%)                  Token::ReferenceEnd.push_to_string(&mut self.buf);
       24 ( 0.00%)                  None
        .                       }
        .           
      160 ( 0.00%)              Token::CommentStart if self.config.coalesce_characters && self.config.ignore_comments => {
        .                           // We need to switch the lexer into a comment mode inside comments
       80 ( 0.00%)                  self.lexer.inside_comment();
      200 ( 0.00%)                  self.into_state_continue(State::InsideComment)
        .                       }
        .           
        .                       Token::CDataStart if self.config.coalesce_characters && self.config.cdata_to_characters => {
        .                           if !self.buf_has_data() {
        .                               self.push_pos();
        .                           }
        .                           // We need to disable lexing errors inside CDATA
        .                           self.lexer.disable_errors();
        .                           self.into_state_continue(State::InsideCData)
        .                       }
        .           
        .                       _ => {
        .                           // Encountered some markup event, flush the buffer as characters
        .                           // or a whitespace
   14,378 ( 0.00%)                  let mut next_event = if self.buf_has_data() {
      966 ( 0.00%)                      let buf = self.take_buf();
    1,932 ( 0.00%)                      if self.inside_whitespace && self.config.trim_whitespace {
        .                                   None
    2,254 ( 0.00%)                      } else if self.inside_whitespace && !self.config.whitespace_to_characters {
        .                                   Some(Ok(XmlEvent::Whitespace(buf)))
      966 ( 0.00%)                      } else if self.config.trim_whitespace {
    9,982 ( 0.00%)                          Some(Ok(XmlEvent::Characters(buf.trim_matches(is_whitespace_char).into())))
        .                               } else {
        .                                   Some(Ok(XmlEvent::Characters(buf)))
        .                               }
    5,488 ( 0.00%)                  } else { None };
    2,100 ( 0.00%)                  self.inside_whitespace = true;  // Reset inside_whitespace flag
    4,200 ( 0.00%)                  self.push_pos();
    8,400 ( 0.00%)                  match t {
        .                               Token::ProcessingInstructionStart =>
       34 ( 0.00%)                          self.into_state(State::InsideProcessingInstruction(ProcessingInstructionSubstate::PIInsideName), next_event),
        .           
        .                               Token::DoctypeStart if !self.encountered_element => {
        .                                   // We don't have a doctype event so skip this position
        .                                   // FIXME: update when we have a doctype event
        .                                   self.next_pos();
        .                                   self.lexer.disable_errors();
        .                                   self.into_state(State::InsideDoctype, next_event)
        .                               }
        .           
        .                               Token::OpeningTagStart => {
        .                                   // If declaration was not parsed and we have encountered an element,
        .                                   // emit this declaration as the next event.
    7,180 ( 0.00%)                          if !self.parsed_declaration {
        .                                       self.parsed_declaration = true;
        .                                       let sd_event = XmlEvent::StartDocument {
        .                                           version: DEFAULT_VERSION,
        .                                           encoding: DEFAULT_ENCODING.into(),
        .                                           standalone: DEFAULT_STANDALONE
        .                                       };
        .                                       // next_event is always none here because we're outside of
        .                                       // the root element
        .                                       next_event = Some(Ok(sd_event));
        .                                       self.push_pos();
        .                                   }
    1,436 ( 0.00%)                          self.encountered_element = true;
    4,308 ( 0.00%)                          self.nst.push_empty();
   24,412 ( 0.00%)                          self.into_state(State::InsideOpeningTag(OpeningTagSubstate::InsideName), next_event)
        .                               }
        .           
    3,310 ( 0.00%)                      Token::ClosingTagStart if self.depth() > 0 =>
   11,254 ( 0.00%)                          self.into_state(State::InsideClosingTag(ClosingTagSubstate::CTInsideName), next_event),
        .           
        .                               Token::CommentStart => {
        .                                   // We need to switch the lexer into a comment mode inside comments
        .                                   self.lexer.inside_comment();
        .                                   self.into_state(State::InsideComment, next_event)
        .                               }
        .           
        .                               Token::CDataStart => {
        .                                   // We need to disable lexing errors inside CDATA
        .                                   self.lexer.disable_errors();
        .                                   self.into_state(State::InsideCData, next_event)
        .                               }
        .           
        .                               _ => Some(self_error!(self; "Unexpected token: {}", t))
        .                           }
   10,500 ( 0.00%)              }
        .                   }
  358,252 ( 0.00%)      }
        .           }

2,240,942 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/reader/parser/outside_tag.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/reader/parser/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .           use reader::config::ParserConfig;
        .           use reader::lexer::{Lexer, Token};
        .           
        .           macro_rules! gen_takes(
        .               ($($field:ident -> $method:ident, $t:ty, $def:expr);+) => (
        .                   $(
        .                   impl MarkupData {
        .                       #[inline]
   27,216 ( 0.00%)              fn $method(&mut self) -> $t {
   21,858 ( 0.00%)                  mem::replace(&mut self.$field, $def)
   13,612 ( 0.00%)              }
        .                   }
        .                   )+
        .               )
        .           );
        .           
        .           gen_takes!(
        .               name         -> take_name, String, String::new();
        .               ref_data     -> take_ref_data, String, String::new();
        .           
        2 ( 0.00%)      version      -> take_version, Option<common::XmlVersion>, None;
        2 ( 0.00%)      encoding     -> take_encoding, Option<String>, None;
        2 ( 0.00%)      standalone   -> take_standalone, Option<bool>, None;
        .           
    2,098 ( 0.00%)      element_name -> take_element_name, Option<OwnedName>, None;
        .           
    3,266 ( 0.00%)      attr_name    -> take_attr_name, Option<OwnedName>, None;
    2,872 ( 0.00%)      attributes   -> take_attributes, Vec<OwnedAttribute>, vec!()
        .           );
        .           
        .           macro_rules! self_error(
        .               ($this:ident; $msg:expr) => ($this.error($msg));
        .               ($this:ident; $fmt:expr, $($arg:expr),+) => ($this.error(format!($fmt, $($arg),+)))
        .           );
        .           
        .           mod outside_tag;
-- line 52 ----------------------------------------
-- line 84 ----------------------------------------
        .               parsed_declaration: bool,
        .               inside_whitespace: bool,
        .               read_prefix_separator: bool,
        .               pop_namespace: bool
        .           }
        .           
        .           impl PullParser {
        .               /// Returns a new parser using the given config.
        6 ( 0.00%)      pub fn new(config: ParserConfig) -> PullParser {
      116 ( 0.00%)          PullParser {
       18 ( 0.00%)              config: config,
        4 ( 0.00%)              lexer: Lexer::new(),
        4 ( 0.00%)              st: State::OutsideTag,
        4 ( 0.00%)              buf: String::new(),
        4 ( 0.00%)              nst: NamespaceStack::default(),
        .           
       84 ( 0.00%)              data: MarkupData {
        4 ( 0.00%)                  name: String::new(),
        2 ( 0.00%)                  version: None,
        2 ( 0.00%)                  encoding: None,
        4 ( 0.00%)                  standalone: None,
        4 ( 0.00%)                  ref_data: String::new(),
        2 ( 0.00%)                  element_name: None,
        2 ( 0.00%)                  quote: None,
        2 ( 0.00%)                  attr_name: None,
        8 ( 0.00%)                  attributes: Vec::new()
        .                       },
        2 ( 0.00%)              final_result: None,
        2 ( 0.00%)              next_event: None,
        8 ( 0.00%)              est: Vec::new(),
       28 ( 0.00%)              pos: vec![TextPosition::new()],
        .           
        .                       encountered_element: false,
        .                       parsed_declaration: false,
        .                       inside_whitespace: true,
        .                       read_prefix_separator: false,
        .                       pop_namespace: false
        .                   }
        4 ( 0.00%)      }
        .           
        .               /// Checks if this parser ignores the end of stream errors.
        .               pub fn is_ignoring_end_of_stream(&self) -> bool { self.config.ignore_end_of_stream }
        .           }
        .           
        .           impl Position for PullParser {
        .               /// Returns the position of the last event produced by the parser
        .               #[inline]
        .               fn position(&self) -> TextPosition {
        .                   self.pos[0]
        .               }
        .           }
        .           
3,421,626 ( 0.04%)  #[derive(Clone, PartialEq)]
        .           pub enum State {
        .               OutsideTag,
  539,880 ( 0.01%)      InsideOpeningTag(OpeningTagSubstate),
   37,752 ( 0.00%)      InsideClosingTag(ClosingTagSubstate),
       48 ( 0.00%)      InsideProcessingInstruction(ProcessingInstructionSubstate),
        .               InsideComment,
        .               InsideCData,
      372 ( 0.00%)      InsideDeclaration(DeclarationSubstate),
        .               InsideDoctype,
        .               InsideReference(Box<State>)
        .           }
        .           
  934,430 ( 0.01%)  #[derive(Clone, PartialEq)]
        .           pub enum OpeningTagSubstate {
        .               InsideName,
        .           
        .               InsideTag,
        .           
        .               InsideAttributeName,
        .               AfterAttributeName,
        .           
        .               InsideAttributeValue,
        .           }
        .           
   88,088 ( 0.00%)  #[derive(Clone, PartialEq)]
        .           pub enum ClosingTagSubstate {
        .               CTInsideName,
        .               CTAfterName
        .           }
        .           
      112 ( 0.00%)  #[derive(Clone, PartialEq)]
        .           pub enum ProcessingInstructionSubstate {
        .               PIInsideName,
        .               PIInsideData
        .           }
        .           
      682 ( 0.00%)  #[derive(Clone, PartialEq)]
        .           pub enum DeclarationSubstate {
        .               BeforeVersion,
        .               InsideVersion,
        .               AfterVersion,
        .           
        .               InsideVersionValue,
        .               AfterVersionValue,
        .           
-- line 181 ----------------------------------------
-- line 187 ----------------------------------------
        .               BeforeStandaloneDecl,
        .               InsideStandaloneDecl,
        .               AfterStandaloneDecl,
        .           
        .               InsideStandaloneDeclValue,
        .               AfterStandaloneDeclValue
        .           }
        .           
   69,602 ( 0.00%)  #[derive(PartialEq)]
        .           enum QualifiedNameTarget {
        .               AttributeNameTarget,
        .               OpeningTagNameTarget,
        .               ClosingTagNameTarget
        .           }
        .           
        .           #[derive(Copy, Clone, PartialEq, Eq)]
        .           enum QuoteToken {
        .               SingleQuoteToken,
        .               DoubleQuoteToken
        .           }
        .           
        .           impl QuoteToken {
    6,540 ( 0.00%)      fn from_token(t: &Token) -> QuoteToken {
   26,160 ( 0.00%)          match *t {
        .                       Token::SingleQuote => QuoteToken::SingleQuoteToken,
    6,540 ( 0.00%)              Token::DoubleQuote => QuoteToken::DoubleQuoteToken,
        .                       _ => panic!("Unexpected token: {}", t)
        .                   }
   16,350 ( 0.00%)      }
        .           
   19,680 ( 0.00%)      fn as_token(self) -> Token {
   16,400 ( 0.00%)          match self {
        .                       QuoteToken::SingleQuoteToken => Token::SingleQuote,
    3,280 ( 0.00%)              QuoteToken::DoubleQuoteToken => Token::DoubleQuote
        .                   }
    6,560 ( 0.00%)      }
        .           }
        .           
        .           struct MarkupData {
        .               name: String,     // used for processing instruction name
        .               ref_data: String,  // used for reference content
        .           
        .               version: Option<common::XmlVersion>,  // used for XML declaration version
        .               encoding: Option<String>,  // used for XML declaration encoding
-- line 230 ----------------------------------------
-- line 237 ----------------------------------------
        .               attributes: Vec<OwnedAttribute>   // used to hold all accumulated attributes
        .           }
        .           
        .           impl PullParser {
        .               /// Returns next event read from the given buffer.
        .               ///
        .               /// This method should be always called with the same buffer. If you call it
        .               /// providing different buffers each time, the result will be undefined.
   22,372 ( 0.00%)      pub fn next<R: Read>(&mut self, r: &mut R) -> Result {
   31,960 ( 0.00%)          if let Some(ref ev) = self.final_result {
        .                       return ev.clone();
        .                   }
        .           
   39,026 ( 0.00%)          if let Some(ev) = self.next_event.take() {
    2,322 ( 0.00%)              return ev;
    4,844 ( 0.00%)          }
        .           
    4,844 ( 0.00%)          if self.pop_namespace {
    1,434 ( 0.00%)              self.pop_namespace = false;
    8,604 ( 0.00%)              self.nst.pop();
        .                   }
        .           
  274,160 ( 0.00%)          loop {
        .                       // While lexer gives us Ok(maybe_token) -- we loop.
        .                       // Upon having a complete XML-event -- we return from the whole function.
1,936,074 ( 0.02%)              match self.lexer.next_token(r) {
1,106,328 ( 0.01%)                  Ok(maybe_token) =>
1,936,074 ( 0.02%)                      match maybe_token {
        .                                   None => break,
1,659,492 ( 0.02%)                          Some(token) =>
4,170,528 ( 0.05%)                              match self.dispatch_token(token) {
        .                                           None => {} // continue
        .                                           Some(Ok(XmlEvent::EndDocument)) =>
        .                                               return {
        .                                                   self.next_pos();
        .                                                   self.set_final_result(Ok(XmlEvent::EndDocument))
        .                                               },
   41,174 ( 0.00%)                                  Some(Ok(xml_event)) =>
        .                                               return {
    4,844 ( 0.00%)                                          self.next_pos();
   26,642 ( 0.00%)                                          Ok(xml_event)
        .                                               },
        .                                           Some(Err(xml_error)) =>
        .                                               return {
        .                                                   self.next_pos();
        .                                                   self.set_final_result(Err(xml_error))
        .                                               },
  305,646 ( 0.00%)                              }
        .                               },
        .                           Err(lexer_error) =>
        .                               return self.set_final_result(Err(lexer_error)),
        .                       }
        .                   }
        .           
        .                   // Handle end of stream
        .                   // Forward pos to the lexer head
-- line 292 ----------------------------------------
-- line 304 ----------------------------------------
        .                           self.final_result = None;
        .                           self.lexer.reset_eof_handled();
        .                           return self_error!(self; "Unexpected end of stream: still inside the root element");
        .                       } else {
        .                           self_error!(self; "Unexpected end of stream: still inside the root element")
        .                       }
        .                   };
        .                   self.set_final_result(ev)
    6,392 ( 0.00%)      }
        .           
        .               // This function is to be called when a terminal event is reached.
        .               // The function sets up the `self.final_result` into `Some(result)` and return `result`.
        .               fn set_final_result(&mut self, result: Result) -> Result {
        .                   self.final_result = Some(result.clone());
        .                   result
        .               }
        .           
        .               #[inline]
        .               fn error<M: Into<Cow<'static, str>>>(&self, msg: M) -> Result {
        .                   Err((&self.lexer, msg).into())
        .               }
        .           
        .               #[inline]
    7,266 ( 0.00%)      fn next_pos(&mut self) {
   12,110 ( 0.00%)          if self.pos.len() > 1 {
   12,110 ( 0.00%)              self.pos.remove(0);
        .                   } else {
        .                       self.pos[0] = self.lexer.position();
        .                   }
    4,844 ( 0.00%)      }
        .           
        .               #[inline]
    4,844 ( 0.00%)      fn push_pos(&mut self) {
   19,376 ( 0.00%)          self.pos.push(self.lexer.position());
    4,844 ( 0.00%)      }
        .           
2,212,656 ( 0.02%)      fn dispatch_token(&mut self, t: Token) -> Option<Result> {
2,765,820 ( 0.03%)          match self.st.clone() {
1,612,134 ( 0.02%)              State::OutsideTag                     => self.outside_tag(t),
      120 ( 0.00%)              State::InsideProcessingInstruction(s) => self.inside_processing_instruction(t, s),
      744 ( 0.00%)              State::InsideDeclaration(s)           => self.inside_declaration(t, s),
        .                       State::InsideDoctype                  => self.inside_doctype(t),
1,079,760 ( 0.01%)              State::InsideOpeningTag(s)            => self.inside_opening_tag(t, s),
   94,380 ( 0.00%)              State::InsideClosingTag(s)            => self.inside_closing_tag_name(t, s),
   10,026 ( 0.00%)              State::InsideComment                  => self.inside_comment(t),
        .                       State::InsideCData                    => self.inside_cdata(t),
        .                       State::InsideReference(s)             => self.inside_reference(t, *s)
        .                   }
  553,164 ( 0.01%)      }
        .           
        .               #[inline]
  355,272 ( 0.00%)      fn depth(&self) -> usize {
  532,908 ( 0.01%)          self.est.len()
  355,272 ( 0.00%)      }
        .           
        .               #[inline]
  532,488 ( 0.01%)      fn buf_has_data(&self) -> bool {
1,331,220 ( 0.01%)          self.buf.len() > 0
1,064,976 ( 0.01%)      }
        .           
        .               #[inline]
   35,848 ( 0.00%)      fn take_buf(&mut self) -> String {
   53,772 ( 0.00%)          mem::replace(&mut self.buf, String::new())
   17,924 ( 0.00%)      }
        .           
        .               #[inline]
  667,590 ( 0.01%)      fn append_char_continue(&mut self, c: char) -> Option<Result> {
  121,380 ( 0.00%)          self.buf.push(c);
   60,690 ( 0.00%)          None
  121,380 ( 0.00%)      }
        .           
        .               #[inline]
  186,312 ( 0.00%)      fn into_state(&mut self, st: State, ev: Option<Result>) -> Option<Result> {
  155,260 ( 0.00%)          self.st = st;
   46,578 ( 0.00%)          ev
   31,052 ( 0.00%)      }
        .           
        .               #[inline]
   90,608 ( 0.00%)      fn into_state_continue(&mut self, st: State) -> Option<Result> {
   79,282 ( 0.00%)          self.into_state(st, None)
   22,652 ( 0.00%)      }
        .           
        .               #[inline]
   25,200 ( 0.00%)      fn into_state_emit(&mut self, st: State, ev: Result) -> Option<Result> {
   42,000 ( 0.00%)          self.into_state(st, Some(ev))
    4,200 ( 0.00%)      }
        .           
        .               /// Dispatches tokens in order to process qualified name. If qualified name cannot be parsed,
        .               /// an error is returned.
        .               ///
        .               /// # Parameters
        .               /// * `t`       --- next token;
        .               /// * `on_name` --- a callback which is executed when whitespace is encountered.
  339,480 ( 0.00%)      fn read_qualified_name<F>(&mut self, t: Token, target: QualifiedNameTarget, on_name: F) -> Option<Result>
        .                 where F: Fn(&mut PullParser, Token, OwnedName) -> Option<Result> {
        .                   // We can get here for the first time only when self.data.name contains zero or one character,
        .                   // but first character cannot be a colon anyway
  203,688 ( 0.00%)          if self.buf.len() <= 1 {
    7,470 ( 0.00%)              self.read_prefix_separator = false;
        .                   }
        .           
   87,628 ( 0.00%)          let invoke_callback = |this: &mut PullParser, t| {
   10,736 ( 0.00%)              let name = this.take_buf();
   69,784 ( 0.00%)              match name.parse() {
  246,928 ( 0.00%)                  Ok(name) => on_name(this, t, name),
        .                           Err(_) => Some(self_error!(this; "Qualified name is invalid: {}", name))
        .                       }
   26,840 ( 0.00%)          };
        .           
  255,480 ( 0.00%)          match t {
        .                       // There can be only one colon, and not as the first character
        .                       Token::Character(':') if self.buf_has_data() && !self.read_prefix_separator => {
        .                           self.buf.push(':');
        .                           self.read_prefix_separator = true;
        .                           None
        .                       }
        .           
  718,704 ( 0.01%)              Token::Character(c) if c != ':' && (!self.buf_has_data() && is_name_start_char(c) ||
  317,736 ( 0.00%)                                            self.buf_has_data() && is_name_char(c)) =>
   85,740 ( 0.00%)                  self.append_char_continue(c),
        .           
   71,940 ( 0.00%)              Token::EqualsSign if target == QualifiedNameTarget::AttributeNameTarget => invoke_callback(self, t),
        .           
        .                       Token::EmptyTagEnd if target == QualifiedNameTarget::OpeningTagNameTarget => invoke_callback(self, t),
        .           
    8,626 ( 0.00%)              Token::TagEnd if target == QualifiedNameTarget::OpeningTagNameTarget ||
   13,270 ( 0.00%)                        target == QualifiedNameTarget::ClosingTagNameTarget => invoke_callback(self, t),
        .           
   21,510 ( 0.00%)              Token::Whitespace(_) => invoke_callback(self, t),
        .           
        .                       _ => Some(self_error!(self; "Unexpected token inside qualified name: {}", t))
        .                   }
  101,844 ( 0.00%)      }
        .           
        .               /// Dispatches tokens in order to process attribute value.
        .               ///
        .               /// # Parameters
        .               /// * `t`        --- next token;
        .               /// * `on_value` --- a callback which is called when terminating quote is encountered.
  332,244 ( 0.00%)      fn read_attribute_value<F>(&mut self, t: Token, on_value: F) -> Option<Result>
        .                 where F: Fn(&mut PullParser, String) -> Option<Result> {
  276,870 ( 0.00%)          match t {
   33,952 ( 0.00%)              Token::Whitespace(_) if self.data.quote.is_none() => None,  // skip leading whitespace
        .           
   49,140 ( 0.00%)              Token::DoubleQuote | Token::SingleQuote => match self.data.quote {
        .                           None => {  // Entered attribute value
   22,890 ( 0.00%)                      self.data.quote = Some(QuoteToken::from_token(&t));
    6,540 ( 0.00%)                      None
        .                           }
   45,910 ( 0.00%)                  Some(q) if q.as_token() == t => {
   13,080 ( 0.00%)                      self.data.quote = None;
    6,540 ( 0.00%)                      let value = self.take_buf();
   49,050 ( 0.00%)                      on_value(self, value)
        .                           }
        .                           _ => {
       30 ( 0.00%)                      t.push_to_string(&mut self.buf);
       20 ( 0.00%)                      None
        .                           }
        .                       },
        .           
        .                       Token::ReferenceStart => {
        .                           let st = Box::new(self.st.clone());
        .                           self.into_state_continue(State::InsideReference(st))
        .                       }
        .           
        .                       Token::OpeningTagStart =>
        .                           Some(self_error!(self; "Unexpected token inside attribute value: <")),
        .           
        .                       // Every character except " and ' and < is okay
        .                       _  => {
  146,472 ( 0.00%)                  t.push_to_string(&mut self.buf);
   97,648 ( 0.00%)                  None
        .                       }
        .                   }
  166,122 ( 0.00%)      }
        .           
   12,924 ( 0.00%)      fn emit_start_element(&mut self, emit_end_element: bool) -> Option<Result> {
   17,232 ( 0.00%)          let mut name = self.data.take_element_name().unwrap();
    7,180 ( 0.00%)          let mut attributes = self.data.take_attributes();
        .           
        .                   // check whether the name prefix is bound and fix its namespace
   35,900 ( 0.00%)          match self.nst.get(name.borrow().prefix_repr()) {
   33,028 ( 0.00%)              Some("") => name.namespace = None,  // default namespace
        .                       Some(ns) => name.namespace = Some(ns.into()),
        .                       None => return Some(self_error!(self; "Element {} prefix is unbound", name))
        .                   }
        .           
        .                   // check and fix accumulated attributes prefixes
   93,900 ( 0.00%)          for attr in attributes.iter_mut() {
   19,596 ( 0.00%)              if let Some(ref pfx) = attr.name.prefix {
        .                           let new_ns = match self.nst.get(pfx) {
        .                               Some("") => None,  // default namespace
        .                               Some(ns) => Some(ns.into()),
        .                               None => return Some(self_error!(self; "Attribute {} prefix is unbound", attr.name))
        .                           };
        .                           attr.name.namespace = new_ns;
        .                       }
        .                   }
        .           
    4,308 ( 0.00%)          if emit_end_element {
    2,322 ( 0.00%)              self.pop_namespace = true;
   32,508 ( 0.00%)              self.next_event = Some(Ok(XmlEvent::EndElement {
    1,548 ( 0.00%)                  name: name.clone()
        .                       }));
        .                   } else {
    7,282 ( 0.00%)              self.est.push(name.clone());
        .                   }
    7,180 ( 0.00%)          let namespace = self.nst.squash();
   60,312 ( 0.00%)          self.into_state_emit(State::OutsideTag, Ok(XmlEvent::StartElement {
   17,232 ( 0.00%)              name: name,
    7,180 ( 0.00%)              attributes: attributes,
    5,744 ( 0.00%)              namespace: namespace
        .                   }))
    7,180 ( 0.00%)      }
        .           
    3,310 ( 0.00%)      fn emit_end_element(&mut self) -> Option<Result> {
    7,282 ( 0.00%)          let mut name = self.data.take_element_name().unwrap();
        .           
        .                   // check whether the name prefix is bound and fix its namespace
   16,550 ( 0.00%)          match self.nst.get(name.borrow().prefix_repr()) {
   15,226 ( 0.00%)              Some("") => name.namespace = None,  // default namespace
        .                       Some(ns) => name.namespace = Some(ns.into()),
        .                       None => return Some(self_error!(self; "Element {} prefix is unbound", name))
        .                   }
        .           
    7,282 ( 0.00%)          let op_name = self.est.pop().unwrap();
        .           
    3,310 ( 0.00%)          if name == op_name {
      662 ( 0.00%)              self.pop_namespace = true;
   31,114 ( 0.00%)              self.into_state_emit(State::OutsideTag, Ok(XmlEvent::EndElement { name: name }))
        .                   } else {
        .                       Some(self_error!(self; "Unexpected closing tag: {}, expected {}", name, op_name))
        .                   }
   11,916 ( 0.00%)      }
        .           
        .           }
        .           
        .           #[cfg(test)]
        .           mod tests {
        .               use std::io::BufReader;
        .           
        .               use common::{Position, TextPosition};
-- line 545 ----------------------------------------

7,244,952 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/reader/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 108 ----------------------------------------
        .                   suppress_errors: bool,
        .               },
        .           }
        .           
        .           impl RegionckMode {
        .               /// Indicates that the MIR borrowck will repeat these region
        .               /// checks, so we should ignore errors if NLL is (unconditionally)
        .               /// enabled.
    1,286 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
        .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
        .                   // this always `true` and then proceed to eliminate the dead code.
    1,286 ( 0.00%)          match tcx.borrowck_mode() {
        .                       // If we're on Migrate mode, report AST region errors
        .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
        .           
        .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
        .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
        .                   }
    2,572 ( 0.00%)      }
        .           }
        .           
        .           /// This type contains all the things within `InferCtxt` that sit within a
        .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
        .           /// operations are hot enough that we want only one call to `borrow_mut` per
        .           /// call to `start_snapshot` and `rollback_to`.
        .           pub struct InferCtxtInner<'tcx> {
        .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
        .               /// type instantiations (`ty::Infer`) to the actual opaque
        .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
        .               /// opaque type inference variables to their corresponding
        .               /// opaque type.
        .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
        .           }
        .           
        .           impl<'tcx> InferCtxtInner<'tcx> {
  144,115 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
  979,982 ( 0.01%)          InferCtxtInner {
        .                       projection_cache: Default::default(),
        .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
        .                       undo_log: InferCtxtUndoLogs::default(),
        .                       const_unification_storage: ut::UnificationTableStorage::new(),
        .                       int_unification_storage: ut::UnificationTableStorage::new(),
        .                       float_unification_storage: ut::UnificationTableStorage::new(),
   86,469 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
        .                       region_obligations: vec![],
        .                       opaque_types: Default::default(),
        .                       opaque_types_vars: Default::default(),
        .                   }
  172,938 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
        .                   &self.region_obligations
        .               }
        .           
        .               #[inline]
        .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
    7,092 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
  880,882 ( 0.01%)          self.type_variable_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn int_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::IntVid,
        .                       &mut ut::UnificationStorage<ty::IntVid>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
    2,180 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn float_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::FloatVid,
        .                       &mut ut::UnificationStorage<ty::FloatVid>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
      419 ( 0.00%)          self.float_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn const_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::ConstVid<'tcx>,
        .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
    4,107 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
  141,289 ( 0.00%)          self.region_constraint_storage
        .                       .as_mut()
        .                       .expect("region constraints already solved")
  167,392 ( 0.00%)              .with_log(&mut self.undo_log)
        .               }
        .           }
        .           
        .           pub struct InferCtxt<'a, 'tcx> {
        .               pub tcx: TyCtxt<'tcx>,
        .           
        .               /// The `DefId` of the item in whose context we are performing inference or typeck.
        .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
        .               /// item we are type-checking, and just consider those names as
        .               /// part of the root universe. So this would only get incremented
        .               /// when we enter into a higher-ranked (`for<..>`) type or trait
        .               /// bound.
        .               universe: Cell<ty::UniverseIndex>,
        .           }
        .           
        .           /// See the `error_reporting` module for more details.
  246,200 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
        .           pub enum ValuePairs<'tcx> {
        .               Types(ExpectedFound<Ty<'tcx>>),
        .               Regions(ExpectedFound<ty::Region<'tcx>>),
        .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
        .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
        .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
        .           }
        .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
        .           pub struct TypeTrace<'tcx> {
        .               cause: ObligationCause<'tcx>,
        .               values: ValuePairs<'tcx>,
        .           }
        .           
        .           /// The origin of a `r1 <= r2` constraint.
        .           ///
        .           /// See `error_reporting` module for more details
  234,192 ( 0.00%)  #[derive(Clone, Debug)]
        .           pub enum SubregionOrigin<'tcx> {
        .               /// Arose from a subtyping relation
   11,906 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
        .           
        .               /// When casting `&'a T` to an `&'b Trait` object,
        .               /// relating `'a` to `'b`
        .               RelateObjectBound(Span),
        .           
        .               /// Some type parameter was instantiated with the given type,
        .               /// and that type must outlive some region.
    3,460 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
        .           
        .               /// The given region parameter was instantiated with a region
        .               /// that must outlive some other region.
        .               RelateRegionParamBound(Span),
        .           
        .               /// Creating a pointer `b` to contents of another reference
        .               Reborrow(Span),
        .           
        .               /// Creating a pointer `b` to contents of an upvar
        .               ReborrowUpvar(Span, ty::UpvarId),
        .           
        .               /// Data with type `Ty<'tcx>` was borrowed
    2,990 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
        .           
        .               /// (&'a &'b T) where a >= b
    2,516 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
        .           
        .               /// Comparing the signature and requirements of an impl method against
        .               /// the containing trait.
       22 ( 0.00%)      CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
        .           
        .               /// Comparing the signature and requirements of an impl associated type
        .               /// against the containing trait
        .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
        .           }
        .           
        .           // `SubregionOrigin` is used a lot. Make sure it doesn't unintentionally get bigger.
        .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
-- line 430 ----------------------------------------
-- line 554 ----------------------------------------
        .               defining_use_anchor: Option<LocalDefId>,
        .           }
        .           
        .           pub trait TyCtxtInferExt<'tcx> {
        .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
        .           }
        .           
        .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
   28,823 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
   86,469 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
   28,823 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> InferCtxtBuilder<'tcx> {
        .               /// Used only by `rustc_typeck` during body type-checking/inference,
        .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
        .               /// Will also change the scope for opaque type defining use checks to the given owner.
   27,621 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
   33,759 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
   15,345 ( 0.00%)          self.with_opaque_type_inference(table_owner)
   21,483 ( 0.00%)      }
        .           
        .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
        .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
        .               ///
        .               /// It is only meant to be called in two places, for typeck
        .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
        .               /// in mir borrowck.
    2,726 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
    1,363 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
    8,864 ( 0.00%)          self
    4,089 ( 0.00%)      }
        .           
        .               /// Given a canonical value `C` as a starting point, create an
        .               /// inference context that contains each of the bound values
        .               /// within instantiated as a fresh variable. The `f` closure is
        .               /// invoked with the new infcx, along with the instantiated value
        .               /// `V` and a substitution `S`. This substitution `S` maps from
        .               /// the bound values in `C` to their instantiated values in `V`
        .               /// (in other words, `S(C) = V`).
   39,674 ( 0.00%)      pub fn enter_with_canonical<T, R>(
        .                   &mut self,
        .                   span: Span,
        .                   canonical: &Canonical<'tcx, T>,
        .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
        .               ) -> R
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   self.enter(|infcx| {
   50,270 ( 0.00%)              let (value, subst) =
    4,008 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
   74,441 ( 0.00%)              f(infcx, value, subst)
        .                   })
   43,060 ( 0.00%)      }
        .           
  179,549 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
   81,271 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
        .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
1,217,915 ( 0.01%)          f(InferCtxt {
        .                       tcx,
        .                       defining_use_anchor,
        .                       in_progress_typeck_results,
   28,823 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
        .                       lexical_region_resolutions: RefCell::new(None),
        .                       selection_cache: Default::default(),
        .                       evaluation_cache: Default::default(),
        .                       reported_trait_errors: Default::default(),
        .                       reported_closure_mismatch: Default::default(),
        .                       tainted_by_errors_flag: Cell::new(false),
   28,823 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
        .                       in_snapshot: Cell::new(false),
        .                       skip_leak_check: Cell::new(false),
        .                       universe: Cell::new(ty::UniverseIndex::ROOT),
        .                   })
  191,651 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx, T> InferOk<'tcx, T> {
        .               pub fn unit(self) -> InferOk<'tcx, ()> {
        .                   InferOk { value: (), obligations: self.obligations }
        .               }
        .           
        .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
        .               pub fn into_value_registering_obligations(
        .                   self,
        .                   infcx: &InferCtxt<'_, 'tcx>,
        .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
        .               ) -> T {
      725 ( 0.00%)          let InferOk { value, obligations } = self;
    2,672 ( 0.00%)          for obligation in obligations {
        .                       fulfill_cx.register_predicate_obligation(infcx, obligation);
        .                   }
        .                   value
        .               }
        .           }
        .           
        .           impl<'tcx> InferOk<'tcx, ()> {
   27,957 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
  111,828 ( 0.00%)          self.obligations
   27,957 ( 0.00%)      }
        .           }
        .           
        .           #[must_use = "once you start a snapshot, you should always consume it"]
        .           pub struct CombinedSnapshot<'a, 'tcx> {
        .               undo_snapshot: Snapshot<'tcx>,
        .               region_constraints_snapshot: RegionSnapshot,
        .               universe: ty::UniverseIndex,
        .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
        .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
        .                   debug!("canonical consts: {:?}", &canonical.value);
        .           
        .                   self.tcx.try_unify_abstract_consts(canonical.value)
        .               }
        .           
        .               pub fn is_in_snapshot(&self) -> bool {
        .                   self.in_snapshot.get()
   44,564 ( 0.00%)      }
        .           
  300,552 ( 0.00%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
  338,121 ( 0.00%)          t.fold_with(&mut self.freshener())
  338,121 ( 0.00%)      }
        .           
        .               /// Returns the origin of the type variable identified by `vid`, or `None`
        .               /// if this is not a type variable.
        .               ///
        .               /// No attempt is made to resolve `ty`.
      218 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
      436 ( 0.00%)          match *ty.kind() {
      109 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
      436 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
        .                       }
        .                       _ => None,
        .                   }
      436 ( 0.00%)      }
        .           
   37,569 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
        .                   freshen::TypeFreshener::new(self, false)
   37,569 ( 0.00%)      }
        .           
        .               /// Like `freshener`, but does not replace `'static` regions.
  162,081 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
        .                   freshen::TypeFreshener::new(self, true)
  162,081 ( 0.00%)      }
        .           
    5,368 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
    2,684 ( 0.00%)          let mut inner = self.inner.borrow_mut();
    2,684 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
        .                       .type_variables()
        .                       .unsolved_variables()
        .                       .into_iter()
      216 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
        .                       .collect();
        .                   vars.extend(
        .                       (0..inner.int_unification_table().len())
        .                           .map(|i| ty::IntVid { index: i as u32 })
      330 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
        .                           .map(|v| self.tcx.mk_int_var(v)),
        .                   );
        .                   vars.extend(
        .                       (0..inner.float_unification_table().len())
        .                           .map(|i| ty::FloatVid { index: i as u32 })
       48 ( 0.00%)                  .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
        .                           .map(|v| self.tcx.mk_float_var(v)),
        .                   );
        .                   vars
    9,394 ( 0.00%)      }
        .           
   75,375 ( 0.00%)      fn combine_fields(
        .                   &'a self,
        .                   trace: TypeTrace<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .               ) -> CombineFields<'a, 'tcx> {
  302,492 ( 0.00%)          CombineFields {
        .                       infcx: self,
  756,230 ( 0.01%)              trace,
        .                       cause: None,
        .                       param_env,
        .                       obligations: PredicateObligations::new(),
        .                   }
   75,375 ( 0.00%)      }
        .           
        .               /// Clear the "currently in a snapshot" flag, invoke the closure,
        .               /// then restore the flag to its original value. This flag is a
        .               /// debugging measure designed to detect cases where we start a
        .               /// snapshot, create type variables, and register obligations
        .               /// which may involve those type variables in the fulfillment cx,
        .               /// potentially leaving "dangling type variables" behind.
        .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 760 ----------------------------------------
        .               /// before we return, this is not a problem, as there won't be any
        .               /// escaping obligations in the main cx. In those cases, you can
        .               /// use this function.
        .               pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
        .               where
        .                   F: FnOnce(&Self) -> R,
        .               {
        .                   let flag = self.in_snapshot.replace(false);
   22,650 ( 0.00%)          let result = func(self);
        .                   self.in_snapshot.set(flag);
        .                   result
        .               }
        .           
  402,374 ( 0.00%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
        .                   debug!("start_snapshot()");
        .           
        .                   let in_snapshot = self.in_snapshot.replace(true);
        .           
        .                   let mut inner = self.inner.borrow_mut();
        .           
1,207,122 ( 0.01%)          CombinedSnapshot {
        .                       undo_snapshot: inner.undo_log.start_snapshot(),
        .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
        .                       universe: self.universe(),
        .                       was_in_snapshot: in_snapshot,
        .                       // Borrow typeck results "in progress" (i.e., during typeck)
        .                       // to ban writes from within a snapshot to them.
  201,187 ( 0.00%)              _in_progress_typeck_results: self
        .                           .in_progress_typeck_results
        .                           .map(|typeck_results| typeck_results.borrow()),
        .                   }
  804,748 ( 0.01%)      }
        .           
  572,682 ( 0.01%)      #[instrument(skip(self, snapshot), level = "debug")]
        .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
        .                   let CombinedSnapshot {
   52,062 ( 0.00%)              undo_snapshot,
   52,062 ( 0.00%)              region_constraints_snapshot,
   52,062 ( 0.00%)              universe,
   52,062 ( 0.00%)              was_in_snapshot,
  104,124 ( 0.00%)              _in_progress_typeck_results,
        .                   } = snapshot;
        .           
        .                   self.in_snapshot.set(was_in_snapshot);
        .                   self.universe.set(universe);
        .           
        .                   let mut inner = self.inner.borrow_mut();
   52,062 ( 0.00%)          inner.rollback_to(undo_snapshot);
        .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
        .               }
        .           
2,236,875 ( 0.02%)      #[instrument(skip(self, snapshot), level = "debug")]
        .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
        .                   let CombinedSnapshot {
  149,125 ( 0.00%)              undo_snapshot,
        .                       region_constraints_snapshot: _,
        .                       universe: _,
  149,125 ( 0.00%)              was_in_snapshot,
  298,250 ( 0.00%)              _in_progress_typeck_results,
        .                   } = snapshot;
        .           
        .                   self.in_snapshot.set(was_in_snapshot);
        .           
        .                   self.inner.borrow_mut().commit(undo_snapshot);
        .               }
        .           
        .               /// Executes `f` and commit the bindings.
   90,531 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
  111,474 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
   10,134 ( 0.00%)          let snapshot = self.start_snapshot();
   33,749 ( 0.00%)          let r = f(&snapshot);
   70,938 ( 0.00%)          self.commit_from(snapshot);
   60,837 ( 0.00%)          r
        .               }
        .           
        .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
  838,972 ( 0.01%)      #[instrument(skip(self, f), level = "debug")]
1,036,195 ( 0.01%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
        .               {
  176,443 ( 0.00%)          let snapshot = self.start_snapshot();
  479,395 ( 0.01%)          let r = f(&snapshot);
        .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
  185,377 ( 0.00%)          match r {
        .                       Ok(_) => {
  988,587 ( 0.01%)                  self.commit_from(snapshot);
        .                       }
        .                       Err(_) => {
  207,481 ( 0.00%)                  self.rollback_to("commit_if_ok -- error", snapshot);
        .                       }
        .                   }
1,005,503 ( 0.01%)          r
        .               }
        .           
        .               /// Execute `f` then unroll any bindings it creates.
  207,528 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
  241,836 ( 0.00%)      pub fn probe<R, F>(&self, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
   57,625 ( 0.00%)          let snapshot = self.start_snapshot();
   93,619 ( 0.00%)          let r = f(&snapshot);
  280,852 ( 0.00%)          self.rollback_to("probe", snapshot);
   79,229 ( 0.00%)          r
        .               }
        .           
        .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
      459 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
      612 ( 0.00%)      pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
      102 ( 0.00%)          let snapshot = self.start_snapshot();
       51 ( 0.00%)          let was_skip_leak_check = self.skip_leak_check.get();
      102 ( 0.00%)          if should_skip {
        .                       self.skip_leak_check.set(true);
        .                   }
      204 ( 0.00%)          let r = f(&snapshot);
      459 ( 0.00%)          self.rollback_to("probe", snapshot);
        .                   self.skip_leak_check.set(was_skip_leak_check);
      612 ( 0.00%)          r
        .               }
        .           
        .               /// Scan the constraints produced since `snapshot` began and returns:
        .               ///
        .               /// - `None` -- if none of them involve "region outlives" constraints
        .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
        .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
   16,482 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
        .                   &self,
        .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
        .               ) -> Option<bool> {
   32,964 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .unwrap_region_constraints()
        .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
   24,723 ( 0.00%)      }
        .           
        .               pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
        .                   self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
        .               }
        .           
      192 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
        .               where
        .                   T: at::ToTrace<'tcx>,
        .               {
        .                   let origin = &ObligationCause::dummy();
        .                   self.probe(|_| {
        .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
        .                           // Ignore obligations, since we are unrolling
        .                           // everything anyway.
        .                       })
        .                   })
      144 ( 0.00%)      }
        .           
   13,728 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
        .               where
        .                   T: at::ToTrace<'tcx>,
        .               {
        .                   let origin = &ObligationCause::dummy();
        .                   self.probe(|_| {
        .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
        .                           // Ignore obligations, since we are unrolling
        .                           // everything anyway.
        .                       })
        .                   })
   10,296 ( 0.00%)      }
        .           
  134,340 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               pub fn sub_regions(
        .                   &self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   a: ty::Region<'tcx>,
        .                   b: ty::Region<'tcx>,
        .               ) {
  120,906 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
        .               }
        .           
        .               /// Require that the region `r` be equal to one of the regions in
        .               /// the set `regions`.
        .               #[instrument(skip(self), level = "debug")]
        .               pub fn member_constraint(
        .                   &self,
        .                   opaque_type_def_id: DefId,
-- line 947 ----------------------------------------
-- line 969 ----------------------------------------
        .               /// to `subtype_predicate` -- that is, "coercing" `a` to `b` winds up
        .               /// actually requiring `a <: b`. This is of course a valid coercion,
        .               /// but it's not as flexible as `FnCtxt::coerce` would be.
        .               ///
        .               /// (We may refactor this in the future, but there are a number of
        .               /// practical obstacles. Among other things, `FnCtxt::coerce` presently
        .               /// records adjustments that are required on the HIR in order to perform
        .               /// the coercion, and we don't currently have a way to manage that.)
       30 ( 0.00%)      pub fn coerce_predicate(
        .                   &self,
        .                   cause: &ObligationCause<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   predicate: ty::PolyCoercePredicate<'tcx>,
        .               ) -> Option<InferResult<'tcx, ()>> {
       20 ( 0.00%)          let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
        .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
        .                       a: p.a,
        .                       b: p.b,
        .                   });
       50 ( 0.00%)          self.subtype_predicate(cause, param_env, subtype_predicate)
       40 ( 0.00%)      }
        .           
   10,812 ( 0.00%)      pub fn subtype_predicate(
        .                   &self,
        .                   cause: &ObligationCause<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   predicate: ty::PolySubtypePredicate<'tcx>,
        .               ) -> Option<InferResult<'tcx, ()>> {
        .                   // Check for two unresolved inference variables, in which case we can
        .                   // make no progress. This is partly a micro-optimization, but it's
        .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
        .                   // earlier that they are sub-unified).
        .                   //
        .                   // Note that we can just skip the binders here because
        .                   // type variables can't (at present, at
        .                   // least) capture any of the things bound by this binder.
        .                   //
        .                   // Note that this sub here is not just for diagnostics - it has semantic
        .                   // effects as well.
      901 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
      901 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
    6,350 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
    1,408 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
        .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
    1,408 ( 0.00%)                  return None;
        .                       }
        .                       _ => {}
        .                   }
        .           
        .                   Some(self.commit_if_ok(|_snapshot| {
      197 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
        .                           self.replace_bound_vars_with_placeholders(predicate);
        .           
      394 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
        .           
        .                       Ok(ok.unit())
        .                   }))
    8,109 ( 0.00%)      }
        .           
   44,964 ( 0.00%)      pub fn region_outlives_predicate(
        .                   &self,
        .                   cause: &traits::ObligationCause<'tcx>,
        .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
        .               ) -> UnitResult<'tcx> {
        .                   self.commit_if_ok(|_snapshot| {
        .                       let ty::OutlivesPredicate(r_a, r_b) =
        .                           self.replace_bound_vars_with_placeholders(predicate);
        .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
        .                           RelateRegionParamBound(cause.span)
        .                       });
   37,470 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
        .                       Ok(())
        .                   })
   29,976 ( 0.00%)      }
        .           
        .               /// Number of type variables created so far.
       56 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
        .                   self.inner.borrow_mut().type_variables().num_vars()
      112 ( 0.00%)      }
        .           
   40,982 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
  204,910 ( 0.00%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
   61,473 ( 0.00%)      }
        .           
   37,642 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
  141,767 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
   56,463 ( 0.00%)      }
        .           
    2,608 ( 0.00%)      pub fn next_ty_var_in_universe(
        .                   &self,
        .                   origin: TypeVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> Ty<'tcx> {
   14,344 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
    1,304 ( 0.00%)          self.tcx.mk_ty_var(vid)
    3,912 ( 0.00%)      }
        .           
        .               pub fn next_const_var(
        .                   &self,
        .                   ty: Ty<'tcx>,
        .                   origin: ConstVariableOrigin,
        .               ) -> &'tcx ty::Const<'tcx> {
        .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
        .               }
-- line 1074 ----------------------------------------
-- line 1090 ----------------------------------------
        .               pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
        .                   self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
        .                       origin,
        .                       val: ConstVariableValue::Unknown { universe: self.universe() },
        .                   })
        .               }
        .           
        .               fn next_int_var_id(&self) -> IntVid {
      830 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
        .               }
        .           
      498 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
        .                   self.tcx.mk_int_var(self.next_int_var_id())
      664 ( 0.00%)      }
        .           
        .               fn next_float_var_id(&self) -> FloatVid {
       80 ( 0.00%)          self.inner.borrow_mut().float_unification_table().new_key(None)
        .               }
        .           
       48 ( 0.00%)      pub fn next_float_var(&self) -> Ty<'tcx> {
        .                   self.tcx.mk_float_var(self.next_float_var_id())
       64 ( 0.00%)      }
        .           
        .               /// Creates a fresh region variable with the next available index.
        .               /// The variable will be created in the maximum universe created
        .               /// thus far, allowing it to name any region created thus far.
   18,322 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
  372,317 ( 0.00%)          self.next_region_var_in_universe(origin, self.universe())
   36,644 ( 0.00%)      }
        .           
        .               /// Creates a fresh region variable with the next available index
        .               /// in the given universe; typically, you can use
        .               /// `next_region_var` and just use the maximal universe.
  145,768 ( 0.00%)      pub fn next_region_var_in_universe(
        .                   &self,
        .                   origin: RegionVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> ty::Region<'tcx> {
        .                   let region_var =
  947,492 ( 0.01%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
  364,420 ( 0.00%)          self.tcx.mk_region(ty::ReVar(region_var))
  218,652 ( 0.00%)      }
        .           
        .               /// Return the universe that the region `r` was created in.  For
        .               /// most regions (e.g., `'static`, named regions from the user,
        .               /// etc) this is the root universe U0. For inference variables or
        .               /// placeholders, however, it will return the universe which which
        .               /// they are associated.
   18,850 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
        .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
   28,275 ( 0.00%)      }
        .           
        .               /// Number of region variables created so far.
   11,058 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
        .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
   16,587 ( 0.00%)      }
        .           
        .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
   34,108 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
        .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
   68,216 ( 0.00%)      }
        .           
        .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
      380 ( 0.00%)      pub fn next_nll_region_var_in_universe(
        .                   &self,
        .                   origin: NllRegionVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> ty::Region<'tcx> {
    2,744 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
      760 ( 0.00%)      }
        .           
  230,096 ( 0.00%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
  129,162 ( 0.00%)          match param.kind {
        .                       GenericParamDefKind::Lifetime => {
        .                           // Create a region inference variable for the given
        .                           // region parameter definition.
    7,324 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
        .                       }
        .                       GenericParamDefKind::Type { .. } => {
        .                           // Create a type inference variable for the given
        .                           // type parameter definition. The substitutions are
        .                           // for actual parameters that may be referred to by
        .                           // the default of this type parameter, if it exists.
        .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
        .                           // used in a path such as `Foo::<T, U>::new()` will
        .                           // use an inference variable for `C` with `[T, U]`
        .                           // as the substitutions for the default, `(T, U)`.
   85,732 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
        .                               self.universe(),
  107,165 ( 0.00%)                      TypeVariableOrigin {
        .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
   21,433 ( 0.00%)                              param.name,
   21,433 ( 0.00%)                              Some(param.def_id),
        .                                   ),
        .                                   span,
        .                               },
        .                           );
        .           
   21,433 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
        .                       }
        .                       GenericParamDefKind::Const { .. } => {
        .                           let origin = ConstVariableOrigin {
        .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
        .                                   param.name,
        .                                   param.def_id,
        .                               ),
        .                               span,
        .                           };
        .                           let const_var_id =
       55 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
        .                                   origin,
        .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
        .                               });
        5 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
        .                       }
        .                   }
       40 ( 0.00%)      }
        .           
        .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
        .               /// type/region parameter to a fresh inference variable.
   43,446 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
  214,387 ( 0.00%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
   28,964 ( 0.00%)      }
        .           
        .               /// Returns `true` if errors have been reported since this infcx was
        .               /// created. This is sometimes used as a heuristic to skip
        .               /// reporting errors that often occur as a result of earlier
        .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
        .               /// inference variables, regionck errors).
    2,790 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
        .                   debug!(
        .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
        .                        tainted_by_errors_flag={})",
        .                       self.tcx.sess.err_count(),
        .                       self.err_count_on_creation,
        .                       self.tainted_by_errors_flag.get()
        .                   );
        .           
   78,765 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
        .                       return true; // errors reported since this infcx was made
        .                   }
        .                   self.tainted_by_errors_flag.get()
    4,185 ( 0.00%)      }
        .           
        .               /// Set the "tainted by errors" flag to true. We call this when we
        .               /// observe an error from a prior pass.
        .               pub fn set_tainted_by_errors(&self) {
        .                   debug!("set_tainted_by_errors()");
        .                   self.tainted_by_errors_flag.set(true)
        .               }
        .           
        .               /// Process the region constraints and return any any errors that
        .               /// result. After this, no more unification operations should be
        .               /// done -- or the compiler will panic -- but it is legal to use
        .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   80,500 ( 0.00%)      pub fn resolve_regions(
        .                   &self,
        .                   region_context: DefId,
        .                   outlives_env: &OutlivesEnvironment<'tcx>,
        .                   mode: RegionckMode,
        .               ) -> Vec<RegionResolutionError<'tcx>> {
  218,500 ( 0.00%)          let (var_infos, data) = {
        .                       let mut inner = self.inner.borrow_mut();
        .                       let inner = &mut *inner;
   11,500 ( 0.00%)              assert!(
   34,500 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
        .                           "region_obligations not empty: {:#?}",
        .                           inner.region_obligations
        .                       );
        .                       inner
        .                           .region_constraint_storage
        .                           .take()
        .                           .expect("regions already resolved")
        .                           .with_log(&mut inner.undo_log)
        .                           .into_infos_and_data()
   11,500 ( 0.00%)          };
        .           
        .                   let region_rels =
   11,500 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
        .           
  103,500 ( 0.00%)          let (lexical_region_resolutions, errors) =
  276,000 ( 0.00%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
        .           
   46,000 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
   11,500 ( 0.00%)          assert!(old_value.is_none());
        .           
        .                   errors
  103,500 ( 0.00%)      }
        .           
        .               /// Process the region constraints and report any errors that
        .               /// result. After this, no more unification operations should be
        .               /// done -- or the compiler will panic -- but it is legal to use
        .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
  115,000 ( 0.00%)      pub fn resolve_regions_and_report_errors(
        .                   &self,
        .                   region_context: DefId,
        .                   outlives_env: &OutlivesEnvironment<'tcx>,
        .                   mode: RegionckMode,
        .               ) {
   23,000 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
        .           
   34,500 ( 0.00%)          if !self.is_tainted_by_errors() {
        .                       // As a heuristic, just skip reporting region errors
        .                       // altogether if other errors have been reported while
        .                       // this infcx was in use.  This is totally hokey but
        .                       // otherwise we have a hard time separating legit region
        .                       // errors from silly ones.
   23,000 ( 0.00%)              self.report_region_errors(&errors);
        .                   }
   57,500 ( 0.00%)      }
        .           
        .               /// Obtains (and clears) the current set of region
        .               /// constraints. The inference context is still usable: further
        .               /// unifications will simply add new constraints.
        .               ///
        .               /// This method is not meant to be used with normal lexical region
        .               /// resolution. Rather, it is used in the NLL mode as a kind of
        .               /// interim hack: basically we run normal type-check and generate
-- line 1307 ----------------------------------------
-- line 1319 ----------------------------------------
        .               }
        .           
        .               /// Gives temporary access to the region constraint data.
        .               pub fn with_region_constraints<R>(
        .                   &self,
        .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
        .               ) -> R {
        .                   let mut inner = self.inner.borrow_mut();
   14,820 ( 0.00%)          op(inner.unwrap_region_constraints().data())
        .               }
        .           
        .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
        .                   let mut inner = self.inner.borrow_mut();
        .                   let inner = &mut *inner;
        .                   inner
        .                       .region_constraint_storage
        .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
        .                       .var_origin(vid)
        .               }
        .           
        .               /// Takes ownership of the list of variable regions. This implies
        .               /// that all the region constraints have already been taken, and
        .               /// hence that `resolve_regions_and_report_errors` can never be
        .               /// called. This is used only during NLL processing to "hand off" ownership
        .               /// of the set of region variables into the NLL region context.
    6,815 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
        .                   let mut inner = self.inner.borrow_mut();
   25,897 ( 0.00%)          let (var_infos, data) = inner
        .                       .region_constraint_storage
        .                       .take()
        .                       .expect("regions already resolved")
        .                       .with_log(&mut inner.undo_log)
    1,363 ( 0.00%)              .into_infos_and_data();
    1,363 ( 0.00%)          assert!(data.is_empty());
        .                   var_infos
   10,904 ( 0.00%)      }
        .           
        .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
        .                   self.resolve_vars_if_possible(t).to_string()
        .               }
        .           
        .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
        .               /// universe index of `TyVar(vid)`.
   16,548 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
        .                   use self::type_variable::TypeVariableValue;
        .           
   49,644 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
        .                       TypeVariableValue::Known { value } => Ok(value),
        .                       TypeVariableValue::Unknown { universe } => Err(universe),
        .                   }
   57,918 ( 0.00%)      }
        .           
        .               /// Resolve any type variables found in `value` -- but only one
        .               /// level.  So, if the variable `?X` is bound to some type
        .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
        .               /// itself be bound to a type).
        .               ///
        .               /// Useful when you only need to inspect the outermost level of
        .               /// the type and don't care about nested types (or perhaps you
        .               /// will be resolving them as well, e.g. in a loop).
        .               pub fn shallow_resolve<T>(&self, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  357,000 ( 0.00%)          value.fold_with(&mut ShallowResolver { infcx: self })
        .               }
        .           
   18,526 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
        .                   self.inner.borrow_mut().type_variables().root_var(var)
   27,789 ( 0.00%)      }
        .           
        .               /// Where possible, replaces type/const variables in
        .               /// `value` with their final value. Note that region variables
        .               /// are unaffected. If a type/const variable has not been unified, it
        .               /// is left as is. This is an idempotent operation that does
        .               /// not affect inference state in any way and so you can do it
        .               /// at will.
    1,360 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  323,107 ( 0.00%)          if !value.needs_infer() {
  262,749 ( 0.00%)              return value; // Avoid duplicated subst-folding.
        .                   }
  302,047 ( 0.00%)          let mut r = resolve::OpportunisticVarResolver::new(self);
  382,933 ( 0.00%)          value.fold_with(&mut r)
    1,343 ( 0.00%)      }
        .           
        .               /// Returns the first unresolved variable contained in `T`. In the
        .               /// process of visiting `T`, this will resolve (where possible)
        .               /// type variables in `T`, but it never constructs the final,
        .               /// resolved type, so it's more efficient than
        .               /// `resolve_vars_if_possible()`.
        .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
        .               where
-- line 1415 ----------------------------------------
-- line 1490 ----------------------------------------
        .                   expected: &'tcx ty::Const<'tcx>,
        .                   actual: &'tcx ty::Const<'tcx>,
        .                   err: TypeError<'tcx>,
        .               ) -> DiagnosticBuilder<'tcx> {
        .                   let trace = TypeTrace::consts(cause, true, expected, actual);
        .                   self.report_and_explain_type_error(trace, &err)
        .               }
        .           
   29,736 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
        .                   &self,
        .                   span: Span,
        .                   lbrct: LateBoundRegionConversionTime,
        .                   value: ty::Binder<'tcx, T>,
        .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   let fld_r =
  172,697 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
        .                   let fld_t = |_| {
        .                       self.next_ty_var(TypeVariableOrigin {
        .                           kind: TypeVariableOriginKind::MiscVariable,
        .                           span,
        .                       })
        .                   };
        .                   let fld_c = |_, ty| {
        .                       self.next_const_var(
        .                           ty,
        .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
        .                       )
        .                   };
  199,846 ( 0.00%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
   19,824 ( 0.00%)      }
        .           
        .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
    3,472 ( 0.00%)      pub fn verify_generic_bound(
        .                   &self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   kind: GenericKind<'tcx>,
        .                   a: ty::Region<'tcx>,
        .                   bound: VerifyBound<'tcx>,
        .               ) {
        .                   debug!("verify_generic_bound({:?}, {:?} <: {:?})", kind, a, bound);
        .           
    1,302 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .unwrap_region_constraints()
    7,378 ( 0.00%)              .verify_generic_bound(origin, kind, a, bound);
    3,038 ( 0.00%)      }
        .           
        .               /// Obtains the latest type of the given closure; this may be a
        .               /// closure in the current function, in which case its
        .               /// `ClosureKind` may not yet be known.
    1,116 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
    2,232 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
        .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
    1,674 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
        .               }
        .           
        .               /// Clears the selection, evaluation, and projection caches. This is useful when
        .               /// repeatedly attempting to select an `Obligation` while changing only
        .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
        .               pub fn clear_caches(&self) {
        .                   self.selection_cache.clear();
        .                   self.evaluation_cache.clear();
        .                   self.inner.borrow_mut().projection_cache().clear();
        .               }
        .           
        .               pub fn universe(&self) -> ty::UniverseIndex {
  588,896 ( 0.01%)          self.universe.get()
  212,321 ( 0.00%)      }
        .           
        .               /// Creates and return a fresh universe that extends all previous
        .               /// universes. Updates `self.universe` to that new universe.
      270 ( 0.00%)      pub fn create_next_universe(&self) -> ty::UniverseIndex {
      418 ( 0.00%)          let u = self.universe.get().next_universe();
        .                   self.universe.set(u);
        .                   u
      270 ( 0.00%)      }
        .           
        .               /// Resolves and evaluates a constant.
        .               ///
        .               /// The constant can be located on a trait like `<A as B>::C`, in which case the given
        .               /// substitutions and environment are used to resolve the constant. Alternatively if the
        .               /// constant has generic parameters in scope the substitutions are used to evaluate the value of
        .               /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count
        .               /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still
        .               /// too generic for the constant to be evaluated then `Err(ErrorHandled::TooGeneric)` is
        .               /// returned.
        .               ///
        .               /// This handles inferences variables within both `param_env` and `substs` by
        .               /// performing the operation on their respective canonical forms.
    2,093 ( 0.00%)      pub fn const_eval_resolve(
        .                   &self,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   unevaluated: ty::Unevaluated<'tcx>,
        .                   span: Option<Span>,
        .               ) -> EvalToConstValueResult<'tcx> {
      161 ( 0.00%)          let substs = self.resolve_vars_if_possible(unevaluated.substs);
        .           
        .                   // Postpone the evaluation of constants whose substs depend on inference
        .                   // variables
        .                   if substs.has_infer_types_or_consts() {
        .                       return Err(ErrorHandled::TooGeneric);
        .                   }
        .           
      161 ( 0.00%)          let param_env_erased = self.tcx.erase_regions(param_env);
        .                   let substs_erased = self.tcx.erase_regions(substs);
        .           
        .                   let unevaluated = ty::Unevaluated {
        .                       def: unevaluated.def,
        .                       substs: substs_erased,
      322 ( 0.00%)              promoted: unevaluated.promoted,
        .                   };
        .           
        .                   // The return value is the evaluated value which doesn't contain any reference to inference
        .                   // variables, thus we don't need to substitute back the original values.
    1,932 ( 0.00%)          self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
    1,449 ( 0.00%)      }
        .           
        .               /// If `typ` is a type variable of some kind, resolve it one level
        .               /// (but do not resolve types found in the result). If `typ` is
        .               /// not a type variable, just return it unmodified.
        .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
3,541,320 ( 0.04%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
1,806,599 ( 0.02%)          match *typ.kind() {
        .                       ty::Infer(ty::TyVar(v)) => {
        .                           // Not entirely obvious: if `typ` is a type variable,
        .                           // it can be resolved to an int/float variable, which
        .                           // can then be recursively resolved, hence the
        .                           // recursion. Note though that we prevent type
        .                           // variables from unifying to other type variables
        .                           // directly (though they may be embedded
        .                           // structurally), and we prevent cycles in any case,
        .                           // so this recursion should always be of very limited
        .                           // depth.
        .                           //
        .                           // Note: if these two lines are combined into one we get
        .                           // dynamic borrow errors on `self.inner`.
  914,332 ( 0.01%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
        .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
        .                       }
        .           
    2,956 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
        .                           .inner
        .                           .borrow_mut()
        .                           .int_unification_table()
        .                           .probe_value(v)
    1,542 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
        .                           .unwrap_or(typ),
        .           
      900 ( 0.00%)              ty::Infer(ty::FloatVar(v)) => self
        .                           .inner
        .                           .borrow_mut()
        .                           .float_unification_table()
        .                           .probe_value(v)
      448 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
        .                           .unwrap_or(typ),
        .           
        .                       _ => typ,
        .                   }
3,983,985 ( 0.04%)      }
        .           
        .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
        .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
        .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
        .               ///
        .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
        .               /// inlined, despite being large, because it has only two call sites that
        .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
        .               #[inline(always)]
        .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
        .                   match infer_var {
        .                       TyOrConstInferVar::Ty(v) => {
        .                           use self::type_variable::TypeVariableValue;
        .           
        .                           // If `inlined_probe` returns a `Known` value, it never equals
        .                           // `ty::Infer(ty::TyVar(v))`.
1,381,670 ( 0.02%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
        .                               TypeVariableValue::Unknown { .. } => false,
        .                               TypeVariableValue::Known { .. } => true,
        .                           }
        .                       }
        .           
        .                       TyOrConstInferVar::TyInt(v) => {
        .                           // If `inlined_probe_value` returns a value it's always a
        .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
        .                           // `ty::Infer(_)`.
       78 ( 0.00%)                  self.inner.borrow_mut().int_unification_table().inlined_probe_value(v).is_some()
        .                       }
        .           
        .                       TyOrConstInferVar::TyFloat(v) => {
        .                           // If `probe_value` returns a value it's always a
        .                           // `ty::Float(_)`, which never matches a `ty::Infer(_)`.
        .                           //
        .                           // Not `inlined_probe_value(v)` because this call site is colder.
        .                           self.inner.borrow_mut().float_unification_table().probe_value(v).is_some()
-- line 1688 ----------------------------------------
-- line 1716 ----------------------------------------
        .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
        .               Const(ConstVid<'tcx>),
        .           }
        .           
        .           impl<'tcx> TyOrConstInferVar<'tcx> {
        .               /// Tries to extract an inference variable from a type or a constant, returns `None`
        .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
        .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
   11,317 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
        .                   match arg.unpack() {
        .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
        .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
        .                       GenericArgKind::Lifetime(_) => None,
        .                   }
   11,317 ( 0.00%)      }
        .           
        .               /// Tries to extract an inference variable from a type, returns `None`
        .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
    1,404 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
  114,481 ( 0.00%)          match *ty.kind() {
   25,434 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
        8 ( 0.00%)              ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
        .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
        .                       _ => None,
        .                   }
    1,404 ( 0.00%)      }
        .           
        .               /// Tries to extract an inference variable from a constant, returns `None`
        .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
        .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
        .                   match ct.val {
        .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
        .                       _ => None,
        .                   }
-- line 1749 ----------------------------------------
-- line 1755 ----------------------------------------
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
        .                   self.infcx.tcx
        .               }
        .           
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
  681,874 ( 0.01%)          self.infcx.shallow_resolve_ty(ty)
        .               }
        .           
    1,928 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
      974 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
       25 ( 0.00%)              self.infcx
        .                           .inner
        .                           .borrow_mut()
        .                           .const_unification_table()
       15 ( 0.00%)                  .probe_value(*vid)
        .                           .val
        .                           .known()
        .                           .unwrap_or(ct)
        .                   } else {
        .                       ct
        .                   }
    2,410 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeTrace<'tcx> {
        .               pub fn span(&self) -> Span {
       22 ( 0.00%)          self.cause.span
        .               }
        .           
        .               pub fn types(
        .                   cause: &ObligationCause<'tcx>,
        .                   a_is_expected: bool,
        .                   a: Ty<'tcx>,
        .                   b: Ty<'tcx>,
        .               ) -> TypeTrace<'tcx> {
-- line 1792 ----------------------------------------
-- line 1800 ----------------------------------------
        .                   b: &'tcx ty::Const<'tcx>,
        .               ) -> TypeTrace<'tcx> {
        .                   TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }
        .               }
        .           }
        .           
        .           impl<'tcx> SubregionOrigin<'tcx> {
        .               pub fn span(&self) -> Span {
       55 ( 0.00%)          match *self {
       11 ( 0.00%)              Subtype(ref a) => a.span(),
        .                       RelateObjectBound(a) => a,
        .                       RelateParamBound(a, ..) => a,
        .                       RelateRegionParamBound(a) => a,
        .                       Reborrow(a) => a,
        .                       ReborrowUpvar(a, _) => a,
        .                       DataBorrowed(_, a) => a,
        .                       ReferenceOutlivesReferent(_, a) => a,
        .                       CompareImplMethodObligation { span, .. } => span,
-- line 1817 ----------------------------------------
-- line 1818 ----------------------------------------
        .                       CompareImplTypeObligation { span, .. } => span,
        .                   }
        .               }
        .           
        .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
        .               where
        .                   F: FnOnce() -> Self,
        .               {
   46,593 ( 0.00%)          match *cause.code() {
    5,377 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
   26,885 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
        .                       }
        .           
        .                       traits::ObligationCauseCode::CompareImplMethodObligation {
       44 ( 0.00%)                  impl_item_def_id,
       44 ( 0.00%)                  trait_item_def_id,
        .                       } => SubregionOrigin::CompareImplMethodObligation {
       66 ( 0.00%)                  span: cause.span,
        .                           impl_item_def_id,
        .                           trait_item_def_id,
        .                       },
        .           
        .                       traits::ObligationCauseCode::CompareImplTypeObligation {
        .                           impl_item_def_id,
        .                           trait_item_def_id,
        .                       } => SubregionOrigin::CompareImplTypeObligation {
-- line 1843 ----------------------------------------

3,279,403 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../elf/dl-tls.c
  ./elf/dl-lookup.c
  ./malloc/malloc.c
  ./stdlib/msort.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
1,601,771,928 (17.86%)  events annotated

