--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name num_derive --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no -C debuginfo=2 -C metadata=77baa95e9d6e307e -C extra-filename=-77baa95e9d6e307e --out-dir /usr/home/liquid/tmp/.tmpxID4q6/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmpxID4q6/target/debug/deps --extern proc_macro2=/usr/home/liquid/tmp/.tmpxID4q6/target/debug/deps/libproc_macro2-9ea6a84c35e9561f.rlib --extern quote=/usr/home/liquid/tmp/.tmpxID4q6/target/debug/deps/libquote-cd8d7b2b48dc8cf8.rlib --extern syn=/usr/home/liquid/tmp/.tmpxID4q6/target/debug/deps/libsyn-70854e3a7f31bf52.rlib --extern proc_macro -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-num-derive-0.3.3-Debug-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
6,219,562,645 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                    file:function
--------------------------------------------------------------------------------
189,504,262 ( 3.05%)  ???:llvm::SelectionDAG::Combine(llvm::CombineLevel, llvm::AAResults*, llvm::CodeGenOpt::Level)
185,234,058 ( 2.98%)  ./malloc/malloc.c:_int_free
144,220,329 ( 2.32%)  ./malloc/malloc.c:_int_malloc
117,420,329 ( 1.89%)  ./malloc/malloc.c:malloc
 88,603,622 ( 1.42%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
 78,380,622 ( 1.26%)  ???:llvm::FPPassManager::runOnFunction(llvm::Function&)
 68,658,063 ( 1.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/macro_parser.rs:rustc_expand::mbe::macro_parser::parse_tt
 66,686,995 ( 1.07%)  ???:llvm::SelectionDAGISel::SelectCodeCommon(llvm::SDNode*, unsigned char const*, unsigned int)
 57,839,203 ( 0.93%)  ./malloc/malloc.c:free
 50,398,386 ( 0.81%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::TokenCursor>::next
 50,109,318 ( 0.81%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump
 48,418,222 ( 0.78%)  ???:llvm::ScheduleDAGSDNodes::BuildSchedUnits()
 46,705,776 ( 0.75%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs:rustc_expand::mbe::macro_parser::parse_tt
 39,803,461 ( 0.64%)  ???:(anonymous namespace)::Verifier::visitInstruction(llvm::Instruction&)
 39,406,346 ( 0.63%)  ???:llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const
 39,179,800 ( 0.63%)  ???:llvm::MachineInstr::addOperand(llvm::MachineFunction&, llvm::MachineOperand const&)
 37,434,204 ( 0.60%)  ???:llvm::TargetLoweringBase::getTypeConversion(llvm::LLVMContext&, llvm::EVT) const
 37,223,969 ( 0.60%)  ???:(anonymous namespace)::Verifier::visitMDNode(llvm::MDNode const&, (anonymous namespace)::Verifier::AreDebugLocsAllowed)
 35,945,365 ( 0.58%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
 35,108,848 ( 0.56%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs:<rustc_ast::tokenstream::Cursor>::next_with_spacing
 34,954,413 ( 0.56%)  ???:llvm::raw_svector_ostream::write_impl(char const*, unsigned long)
 34,571,550 ( 0.56%)  ???:(anonymous namespace)::RegAllocFast::allocateBasicBlock(llvm::MachineBasicBlock&)
 33,069,471 ( 0.53%)  ???:llvm::InstrEmitter::EmitMachineNode(llvm::SDNode*, bool, bool, llvm::DenseMap<llvm::SDValue, llvm::Register, llvm::DenseMapInfo<llvm::SDValue>, llvm::detail::DenseMapPair<llvm::SDValue, llvm::Register> >&)
 30,417,561 ( 0.49%)  ???:llvm::SelectionDAG::MorphNodeTo(llvm::SDNode*, unsigned int, llvm::SDVTList, llvm::ArrayRef<llvm::SDValue>)
 27,034,478 ( 0.43%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::Token as core::clone::Clone>::clone
 26,301,781 ( 0.42%)  ???:(anonymous namespace)::SelectionDAGLegalize::LegalizeOp(llvm::SDNode*) [clone .llvm.8386621111310650999]
 26,081,155 ( 0.42%)  ???:llvm::DAGTypeLegalizer::run()
 25,531,905 ( 0.41%)  ???:llvm::MCExpr::evaluateAsRelocatableImpl(llvm::MCValue&, llvm::MCAssembler const*, llvm::MCAsmLayout const*, llvm::MCFixup const*, llvm::DenseMap<llvm::MCSection const*, unsigned long, llvm::DenseMapInfo<llvm::MCSection const*>, llvm::detail::DenseMapPair<llvm::MCSection const*, unsigned long> > const*, bool) const
 24,559,627 ( 0.39%)  ???:llvm::MCAsmLayout::getSymbolOffset(llvm::MCSymbol const&) const
 24,066,789 ( 0.39%)  ???:llvm::SelectionDAG::Legalize()
 22,779,650 ( 0.37%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump_with
 22,251,133 ( 0.36%)  ???:llvm::SelectionDAG::getConstant(llvm::ConstantInt const&, llvm::SDLoc const&, llvm::EVT, bool, bool)
 22,231,880 ( 0.36%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::Token>::ident
 20,732,775 ( 0.33%)  ./malloc/malloc.c:malloc_consolidate
 20,275,775 ( 0.33%)  ???:(anonymous namespace)::ScheduleDAGRRList::Schedule() [clone .llvm.6953762222372402862]
 19,936,401 ( 0.32%)  ???:(anonymous namespace)::VarLocBasedLDV::process(llvm::MachineInstr&, (anonymous namespace)::VarLocBasedLDV::OpenRangesSet&, (anonymous namespace)::VarLocBasedLDV::VarLocMap&, llvm::SmallVector<(anonymous namespace)::VarLocBasedLDV::TransferDebugPair, 4u>&)
 18,288,951 ( 0.29%)  ???:(anonymous namespace)::DAGCombiner::combine(llvm::SDNode*)
 16,574,024 ( 0.27%)  ./malloc/malloc.c:unlink_chunk.constprop.0
 16,566,974 ( 0.27%)  ???:(anonymous namespace)::TwoAddressInstructionPass::runOnMachineFunction(llvm::MachineFunction&)
 16,365,454 ( 0.26%)  ???:llvm::FoldingSetNodeID::AddInteger(unsigned int)
 16,226,318 ( 0.26%)  ???:llvm::PMDataManager::verifyPreservedAnalysis(llvm::Pass*)
 15,656,382 ( 0.25%)  ???:llvm::FoldingSetBase::FindNodeOrInsertPos(llvm::FoldingSetNodeID const&, void*&, llvm::FoldingSetBase::FoldingSetInfo const&)
 15,594,331 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::source_map::SourceMap>::lookup_source_file_idx
 15,427,967 ( 0.25%)  ???:llvm::MetadataTracking::track(void*, llvm::Metadata&, llvm::PointerUnion<llvm::MetadataAsValue*, llvm::Metadata*>)
 15,410,354 ( 0.25%)  ???:llvm::MCObjectStreamer::emitBytes(llvm::StringRef)
 15,053,350 ( 0.24%)  ???:(anonymous namespace)::Verifier::visitCallBase(llvm::CallBase&)
 15,013,235 ( 0.24%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs:<smallvec::SmallVec<[rustc_expand::mbe::macro_parser::MatcherPosHandle; 1]> as core::ops::drop::Drop>::drop
 14,938,108 ( 0.24%)  ???:llvm::ScheduleDAGSDNodes::AddSchedEdges()
 14,804,728 ( 0.24%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
 14,578,976 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<alloc::vec::Vec<rustc_parse::parser::TokenType>>::truncate
 14,494,648 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser as alloc::borrow::ToOwned>::to_owned
 14,330,573 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/transcribe.rs:rustc_expand::mbe::transcribe::transcribe
 14,137,497 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/nonterminal.rs:<rustc_parse::parser::Parser>::parse_nonterminal
 13,971,385 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::TokenKind as core::cmp::PartialEq>::eq
 13,884,801 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 13,862,365 ( 0.22%)  ???:llvm::SelectionDAG::AssignTopologicalOrder()
 13,835,394 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::TokenCursor>::next_desugared
 13,509,661 ( 0.22%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
 13,432,673 ( 0.22%)  ???:llvm::SelectionDAG::getRegister(unsigned int, llvm::EVT)
 13,405,541 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
 13,319,765 ( 0.21%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs:<hashbrown::map::HashMap<(rustc_span::hygiene::SyntaxContext, rustc_span::hygiene::ExpnId, rustc_span::hygiene::Transparency), rustc_span::hygiene::SyntaxContext, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
 12,902,255 ( 0.21%)  ???:(anonymous namespace)::X86MCCodeEmitter::emitPrefixImpl(unsigned int&, llvm::MCInst const&, llvm::MCSubtargetInfo const&, llvm::raw_ostream&) const
 12,763,855 ( 0.21%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 12,522,496 ( 0.20%)  ???:llvm::SmallSet<llvm::Register, 32u, std::less<llvm::Register> >::insert(llvm::Register const&)
 12,254,339 ( 0.20%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_sse2_unaligned_erms
 12,189,035 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:rustc_expand::mbe::macro_parser::parse_tt
 11,945,159 ( 0.19%)  ???:(anonymous namespace)::Verifier::verifyFunctionAttrs(llvm::FunctionType*, llvm::AttributeList, llvm::Value const*, bool)
 11,771,900 ( 0.19%)  ???:llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)
 11,323,864 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/fulfill.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
 10,989,244 ( 0.18%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::CalculateFromScratch(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::BatchUpdateInfo*)
 10,922,551 ( 0.18%)  ???:(anonymous namespace)::VectorLegalizer::LegalizeOp(llvm::SDValue) [clone .llvm.3993696295502019106]
 10,767,577 ( 0.17%)  ???:llvm::ScheduleDAGSDNodes::EmitSchedule(llvm::MachineInstrBundleIterator<llvm::MachineInstr, false>&)
 10,378,614 ( 0.17%)  ???:llvm::TargetRegisterInfo::shouldRealignStack(llvm::MachineFunction const&) const
 10,307,302 ( 0.17%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
 10,251,216 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe.rs:rustc_expand::mbe::macro_parser::parse_tt
 10,194,664 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/macro_parser.rs:rustc_expand::mbe::macro_parser::count_names::{closure#0}
 10,135,603 ( 0.16%)  ???:llvm::calculateDbgEntityHistory(llvm::MachineFunction const*, llvm::TargetRegisterInfo const*, llvm::DbgValueHistoryMap&, llvm::DbgLabelInstrMap&)
 10,087,940 ( 0.16%)  ???:(anonymous namespace)::VarLocBasedLDV::ExtendRanges(llvm::MachineFunction&, llvm::TargetPassConfig*) [clone .llvm.4451506318407214204]
  9,982,662 ( 0.16%)  ???:llvm::FoldingSet<llvm::SDNode>::NodeEquals(llvm::FoldingSetBase const*, llvm::FoldingSetBase::Node*, llvm::FoldingSetNodeID const&, unsigned int, llvm::FoldingSetNodeID&)
  9,885,145 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:core::ptr::drop_in_place::<rustc_expand::mbe::macro_parser::MatcherPos>
  9,826,421 ( 0.16%)  ???:(anonymous namespace)::ELFObjectWriter::recordRelocation(llvm::MCAssembler&, llvm::MCAsmLayout const&, llvm::MCFragment const*, llvm::MCFixup const&, llvm::MCValue, unsigned long&) [clone .llvm.14145361893594770252]
  9,671,772 ( 0.16%)  ???:llvm::MCContext::getOrCreateSymbol(llvm::Twine const&)
  9,600,006 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/bit_set.rs:rustc_borrowck::path_utils::each_borrow_involving_path::<<rustc_borrowck::MirBorrowckCtxt>::check_access_for_conflict::{closure#0}, either::Either<core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_borrowck::dataflow::BorrowIndex>>, rustc_index::bit_set::BitIter<rustc_borrowck::dataflow::BorrowIndex>>, rustc_borrowck::MirBorrowckCtxt>
  9,582,751 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
  9,572,282 ( 0.15%)  ???:llvm::SelectionDAG::getNode(unsigned int, llvm::SDLoc const&, llvm::SDVTList, llvm::ArrayRef<llvm::SDValue>)
  9,450,561 ( 0.15%)  ???:(anonymous namespace)::PEI::runOnMachineFunction(llvm::MachineFunction&)
  9,351,055 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_middle::hir::map::Map>::attrs
  9,314,028 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
  9,240,096 ( 0.15%)  ???:llvm::MCAsmLayout::getFragmentOffset(llvm::MCFragment const*) const
  9,197,422 ( 0.15%)  ???:(anonymous namespace)::Verifier::verify(llvm::Function const&) [clone .llvm.4153962086227604281]
  9,143,211 ( 0.15%)  ???:llvm::SelectionDAG::clear()
  9,127,340 ( 0.15%)  ???:llvm::MDNode::MDNode(llvm::LLVMContext&, unsigned int, llvm::Metadata::StorageType, llvm::ArrayRef<llvm::Metadata*>, llvm::ArrayRef<llvm::Metadata*>)
  8,970,057 ( 0.14%)  ./malloc/malloc.c:realloc
  8,878,227 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/hygiene.rs:<rustc_span::hygiene::HygieneData>::apply_mark
  8,835,496 ( 0.14%)  ???:llvm::SmallPtrSetImplBase::insert_imp_big(void const*)
  8,792,060 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/rc.rs:<alloc::rc::Rc<smallvec::SmallVec<[rustc_expand::mbe::macro_parser::NamedMatch; 4]>>>::make_mut
  8,785,980 ( 0.14%)  ./stdlib/msort.c:msort_with_tmp.part.0
  8,670,367 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, rustc_infer::infer::region_constraints::Constraint, rustc_infer::infer::SubregionOrigin, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<rustc_infer::infer::region_constraints::Constraint>
  8,637,104 ( 0.14%)  ???:(anonymous namespace)::X86MCInstLower::Lower(llvm::MachineInstr const*, llvm::MCInst&) const
  8,597,723 ( 0.14%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::runSemiNCA(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, unsigned int)
  8,589,693 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/rc.rs:<alloc::rc::Rc<alloc::vec::Vec<(rustc_ast::tokenstream::TokenTree, rustc_ast::tokenstream::Spacing)>> as core::ops::drop::Drop>::drop
  8,552,328 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs:<smallvec::SmallVec<[rustc_expand::mbe::macro_parser::NamedMatch; 4]> as core::iter::traits::collect::Extend<rustc_expand::mbe::macro_parser::NamedMatch>>::extend::<core::iter::adapters::cloned::Cloned<core::slice::iter::Iter<rustc_expand::mbe::macro_parser::NamedMatch>>>
  8,513,417 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
  8,504,367 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs:rustc_mir_dataflow::drop_flag_effects::on_all_children_bits::is_terminal_path
  8,361,658 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/bit_set.rs:<rustc_index::bit_set::BitSet<rustc_borrowck::dataflow::BorrowIndex>>::union::<rustc_index::bit_set::BitSet<rustc_borrowck::dataflow::BorrowIndex>>
  8,200,674 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_parse::parser::Parser>::bump_with
  7,830,096 ( 0.13%)  ???:(anonymous namespace)::X86MCCodeEmitter::encodeInstruction(llvm::MCInst const&, llvm::raw_ostream&, llvm::SmallVectorImpl<llvm::MCFixup>&, llvm::MCSubtargetInfo const&) const
  7,692,587 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/lossy.rs:<core::str::lossy::Utf8LossyChunksIter as core::iter::traits::iterator::Iterator>::next
  7,664,832 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::find_parent_node
  7,610,370 ( 0.12%)  ???:llvm::DwarfDebug::beginInstruction(llvm::MachineInstr const*)
  7,490,885 ( 0.12%)  ???:llvm::MDString::get(llvm::LLVMContext&, llvm::StringRef)
  7,466,980 ( 0.12%)  ???:llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&)
  7,366,251 ( 0.12%)  ???:llvm::DataLayout::getAlignment(llvm::Type*, bool) const
  7,346,750 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/hygiene.rs:<rustc_span::hygiene::HygieneData>::apply_mark_internal
  7,265,565 ( 0.12%)  ???:llvm::SelectionDAG::getConstant(unsigned long, llvm::SDLoc const&, llvm::EVT, bool, bool)
  7,261,008 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/rc.rs:core::ptr::drop_in_place::<rustc_expand::mbe::macro_parser::MatcherPos>
  7,204,019 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::parse_token_tree
  7,179,586 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
  7,163,304 ( 0.12%)  ???:char* llvm::hashing::detail::hash_combine_recursive_helper::combine_data<llvm::Metadata*>(unsigned long&, char*, char*, llvm::Metadata*)
  7,128,594 ( 0.11%)  ???:llvm::hashing::detail::hash_combine_recursive_helper::combine(unsigned long, char*, char*)
  7,111,163 ( 0.11%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms
  6,992,516 ( 0.11%)  ???:llvm::MCAssembler::layout(llvm::MCAsmLayout&)
  6,964,146 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::Token>::lifetime
  6,833,937 ( 0.11%)  ???:llvm::TargetLoweringBase::ArgListEntry::setAttributes(llvm::CallBase const*, unsigned int)
  6,805,169 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::check
  6,728,879 ( 0.11%)  ???:(anonymous namespace)::RegAllocFast::markRegUsedInInstr(unsigned short)
  6,706,982 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, rustc_infer::infer::region_constraints::Constraint, rustc_infer::infer::SubregionOrigin, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<rustc_infer::infer::region_constraints::Constraint>
  6,620,787 ( 0.11%)  ???:(anonymous namespace)::CFIInstrInserter::runOnMachineFunction(llvm::MachineFunction&)
  6,595,783 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs:<smallvec::SmallVec<[rustc_expand::mbe::macro_parser::NamedMatch; 4]> as core::ops::drop::Drop>::drop
  6,567,202 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs:<smallvec::SmallVec<[rustc_expand::mbe::macro_parser::NamedMatch; 4]>>::try_reserve
  6,512,880 ( 0.10%)  ???:llvm::TargetRegisterInfo::checkAllSuperRegsMarked(llvm::BitVector const&, llvm::ArrayRef<unsigned short>) const
  6,483,697 ( 0.10%)  ???:llvm::SelectionDAGISel::DoInstructionSelection()
  6,475,767 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
  6,423,962 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::HashMap<(rustc_span::hygiene::SyntaxContext, rustc_span::hygiene::ExpnId, rustc_span::hygiene::Transparency), rustc_span::hygiene::SyntaxContext, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
  6,407,506 ( 0.10%)  ???:llvm::coro::declaresIntrinsics(llvm::Module const&, std::initializer_list<llvm::StringRef>)
  6,372,944 ( 0.10%)  ???:llvm::X86TargetMachine::getTargetTransformInfo(llvm::Function const&)
  6,344,101 ( 0.10%)  ./malloc/malloc.c:_int_realloc
  6,262,816 ( 0.10%)  ???:llvm::raw_ostream::write(char const*, unsigned long)
  6,254,752 ( 0.10%)  ???:llvm::X86TargetLowering::LowerCall(llvm::TargetLowering::CallLoweringInfo&, llvm::SmallVectorImpl<llvm::SDValue>&) const
  6,247,849 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::TokenKind as core::clone::Clone>::clone

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                  

-- line 57 ----------------------------------------
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
       122 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
        61 ( 0.00%)              from_str_radix(src, radix)
       183 ( 0.00%)          }
         .           
         .                   /// Returns the number of ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[doc(alias = "popcount")]
         .                   #[doc(alias = "popcnt")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn count_ones(self) -> u32 {
   106,080 ( 0.00%)              intrinsics::ctpop(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of zeros in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
         .                   /// assert_eq!(n.leading_zeros(), 2);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn leading_zeros(self) -> u32 {
   383,702 ( 0.01%)              intrinsics::ctlz(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of trailing zeros in the binary representation
         .                   /// of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
         .                   /// assert_eq!(n.trailing_zeros(), 3);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn trailing_zeros(self) -> u32 {
   577,950 ( 0.01%)              intrinsics::cttz(self) as u32
         .                   }
         .           
         .                   /// Returns the number of leading ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn rotate_left(self, n: u32) -> Self {
17,834,462 ( 0.29%)              intrinsics::rotate_left(self, n as $SelfT)
         .                   }
         .           
         .                   /// Shifts the bits to the right by a specified amount, `n`,
         .                   /// wrapping the truncated bits to the beginning of the resulting
         .                   /// integer.
         .                   ///
         .                   /// Please note this isn't the same operation as the `>>` shifting operator!
         .                   ///
-- line 220 ----------------------------------------
-- line 430 ----------------------------------------
         .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   pub const fn checked_add(self, rhs: Self) -> Option<Self> {
         4 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
         .                       if unlikely!(b) {None} else {Some(a)}
         .                   }
         .           
         .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
         .                   /// cannot occur.
         .                   ///
         .                   /// # Safety
         .                   ///
-- line 446 ----------------------------------------
-- line 456 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_add`.
 1,669,639 ( 0.03%)              unsafe { intrinsics::unchecked_add(self, rhs) }
         .                   }
         .           
         .                   /// Checked addition with a signed integer. Computes `self + rhs`,
         .                   /// returning `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_sub`.
    22,830 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
         .                   }
         .           
         .                   /// Checked integer multiplication. Computes `self * rhs`, returning
         .                   /// `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 596 ----------------------------------------
         .                                 without modifying the original"]
         .                   #[inline]
         .                   pub const fn checked_div(self, rhs: Self) -> Option<Self> {
         .                       if unlikely!(rhs == 0) {
         .                           None
         .                       } else {
         .                           // SAFETY: div by zero has been checked above and unsigned types have no other
         .                           // failure modes for division
     2,336 ( 0.00%)                  Some(unsafe { intrinsics::unchecked_div(self, rhs) })
         .                       }
         .                   }
         .           
         .                   /// Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning `None`
         .                   /// if `rhs == 0`.
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 612 ----------------------------------------
-- line 1035 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_add(self, rhs: Self) -> Self {
   223,858 ( 0.00%)              intrinsics::saturating_add(self, rhs)
         .                   }
         .           
         .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
     5,645 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
         .                   }
         .           
         .                   /// Saturating integer multiplication. Computes `self * rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
11,064,052 ( 0.18%)              intrinsics::wrapping_add(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) addition with a signed integer. Computes
         .                   /// `self + rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
 2,439,114 ( 0.04%)              intrinsics::wrapping_sub(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) multiplication. Computes `self *
         .                   /// rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
         .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
10,054,720 ( 0.16%)              intrinsics::wrapping_mul(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) division. Computes `self / rhs`.
         .                   /// Wrapped division on unsigned types is just normal division.
         .                   /// There's no way wrapping could ever happen.
         .                   /// This function exists, so that all operations
         .                   /// are accounted for in the wrapping operations.
         .                   ///
-- line 1256 ----------------------------------------
-- line 1397 ----------------------------------------
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_shl(self, rhs: u32) -> Self {
         .                       // SAFETY: the masking by the bitsize of the type ensures that we do not shift
         .                       // out of bounds
         .                       unsafe {
        23 ( 0.00%)                  intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)
         .                       }
         .                   }
         .           
         .                   /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,
         .                   /// where `mask` removes any high-order bits of `rhs` that
         .                   /// would cause the shift to exceed the bitwidth of the type.
         .                   ///
         .                   /// Note that this is *not* the same as a rotate-right; the
-- line 1413 ----------------------------------------
-- line 1491 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_add(2), (7, false));")]
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         4 ( 0.00%)          pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
   917,943 ( 0.01%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
         8 ( 0.00%)          }
         .           
         .                   /// Calculates `self + rhs + carry` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
         .                   /// additional bit of overflow. This allows for chaining together multiple additions
         .                   /// to create "big integers" which represent larger values.
         .                   ///
         .                   #[doc = concat!("This can be thought of as a ", stringify!($BITS), "-bit \"full adder\", in the electronics sense.")]
-- line 1510 ----------------------------------------
-- line 1587 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_sub(2), (3, false));")]
         .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         1 ( 0.00%)          pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
   873,592 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
         2 ( 0.00%)          }
         .           
         .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
         .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
         .                   /// to create "big integers" which represent larger values.
         .                   ///
         .                   /// # Examples
-- line 1606 ----------------------------------------
-- line 1674 ----------------------------------------
         .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                     without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
 3,311,442 ( 0.05%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
         .                   }
         .           
         .                   /// Calculates the divisor when `self` is divided by `rhs`.
         .                   ///
         .                   /// Returns a tuple of the divisor along with a boolean indicating
         .                   /// whether an arithmetic overflow would occur. Note that for unsigned
         .                   /// integers overflow never occurs, so the second value is always
-- line 1690 ----------------------------------------
-- line 1838 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(0x1", stringify!($SelfT), ".overflowing_shl(132), (0x10, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_shl(self, rhs: u32) -> (Self, bool) {
         3 ( 0.00%)              (self.wrapping_shl(rhs), (rhs > ($BITS - 1)))
         .                   }
         .           
         .                   /// Shifts self right by `rhs` bits.
         .                   ///
         .                   /// Returns a tuple of the shifted version of self along with a boolean
         .                   /// indicating whether the shift value was larger than or equal to the
         .                   /// number of bits. If the shift value is too large, then value is
         .                   /// masked (N-1) where N is the number of bits, and this value is then
-- line 1854 ----------------------------------------
-- line 2132 ----------------------------------------
         .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
         .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
         .                   /// ```
         .                   #[must_use]
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
         .                   #[inline(always)]
         .                   pub const fn is_power_of_two(self) -> bool {
       168 ( 0.00%)              self.count_ones() == 1
         .                   }
         .           
         .                   // Returns one less than next power of two.
         .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
         .                   //
         .                   // 8u8.one_less_than_next_power_of_two() == 7
         .                   // 6u8.one_less_than_next_power_of_two() == 7
         .                   //
         .                   // This method cannot overflow, as in the `next_power_of_two`
         .                   // overflow cases it instead ends up returning the maximum value
         .                   // of the type, and can return 0 for 0.
         .                   #[inline]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   const fn one_less_than_next_power_of_two(self) -> Self {
    68,018 ( 0.00%)              if self <= 1 { return 0; }
         .           
    44,316 ( 0.00%)              let p = self - 1;
         .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
         .                       // That means the shift is always in-bounds, and some processors
         .                       // (such as intel pre-haswell) have more efficient ctlz
         .                       // intrinsics when the argument is non-zero.
   128,085 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    49,107 ( 0.00%)              <$SelfT>::MAX >> z
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `self`.
         .                   ///
         .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
         .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
         .                   /// release mode (the only situation in which method can return 0).
         .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   #[rustc_inherit_overflow_checks]
         .                   pub const fn next_power_of_two(self) -> Self {
    20,578 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `n`. If
         .                   /// the next power of two is greater than the type's maximum value,
         .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 2195 ----------------------------------------

   571,417 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 23 ----------------------------------------
        .           use std::collections::BTreeMap;
        .           use std::ops::Range;
        .           use std::{cmp, fmt, mem};
        .           
        .           mod leak_check;
        .           
        .           pub use rustc_middle::infer::MemberConstraint;
        .           
   37,477 ( 0.00%)  #[derive(Default)]
        .           pub struct RegionConstraintStorage<'tcx> {
        .               /// For each `RegionVid`, the corresponding `RegionVariableOrigin`.
        .               var_infos: IndexVec<RegionVid, RegionVariableInfo>,
        .           
        .               data: RegionConstraintData<'tcx>,
        .           
        .               /// For a given pair of regions (R1, R2), maps to a region R3 that
        .               /// is designated as their LUB (edges R1 <= R3 and R2 <= R3
-- line 39 ----------------------------------------
-- line 64 ----------------------------------------
        .               storage: &'a mut RegionConstraintStorage<'tcx>,
        .               undo_log: &'a mut InferCtxtUndoLogs<'tcx>,
        .           }
        .           
        .           impl<'tcx> std::ops::Deref for RegionConstraintCollector<'_, 'tcx> {
        .               type Target = RegionConstraintStorage<'tcx>;
        .               #[inline]
        .               fn deref(&self) -> &RegionConstraintStorage<'tcx> {
      896 ( 0.00%)          self.storage
        .               }
        .           }
        .           
        .           impl<'tcx> std::ops::DerefMut for RegionConstraintCollector<'_, 'tcx> {
        .               #[inline]
        .               fn deref_mut(&mut self) -> &mut RegionConstraintStorage<'tcx> {
   53,101 ( 0.00%)          self.storage
        .               }
        .           }
        .           
        .           pub type VarInfos = IndexVec<RegionVid, RegionVariableInfo>;
        .           
        .           /// The full set of region constraints gathered up by the collector.
        .           /// Describes constraints between the region variables and other
        .           /// regions, as well as other conditions that must be verified, or
        .           /// assumptions that can be made.
   20,000 ( 0.00%)  #[derive(Debug, Default, Clone)]
        .           pub struct RegionConstraintData<'tcx> {
        .               /// Constraints of the form `A <= B`, where either `A` or `B` can
        .               /// be a region variable (or neither, as it happens).
        .               pub constraints: BTreeMap<Constraint<'tcx>, SubregionOrigin<'tcx>>,
        .           
        .               /// Constraints of the form `R0 member of [R1, ..., Rn]`, meaning that
        .               /// `R0` must be equal to one of the regions `R1..Rn`. These occur
        .               /// with `impl Trait` quite frequently.
-- line 97 ----------------------------------------
-- line 122 ----------------------------------------
        .               /// This hashmap is used to avoid that naive scenario. Basically
        .               /// we record the fact that `'a <= 'b` is implied by the fn
        .               /// signature, and then ignore the constraint when solving
        .               /// equations. This is a bit of a hack but seems to work.
        .               pub givens: FxHashSet<(Region<'tcx>, ty::RegionVid)>,
        .           }
        .           
        .           /// Represents a constraint that influences the inference process.
5,191,340 ( 0.08%)  #[derive(Clone, Copy, PartialEq, Eq, Debug, PartialOrd, Ord)]
        .           pub enum Constraint<'tcx> {
        .               /// A region variable is a subregion of another.
1,473,306 ( 0.02%)      VarSubVar(RegionVid, RegionVid),
        .           
        .               /// A concrete region is a subregion of region variable.
    6,485 ( 0.00%)      RegSubVar(Region<'tcx>, RegionVid),
        .           
        .               /// A region variable is a subregion of a concrete region. This does not
        .               /// directly affect inference, but instead is checked after
        .               /// inference is complete.
    3,547 ( 0.00%)      VarSubReg(RegionVid, Region<'tcx>),
        .           
        .               /// A constraint where neither side is a variable. This does not
        .               /// directly affect inference, but instead is checked after
        .               /// inference is complete.
      160 ( 0.00%)      RegSubReg(Region<'tcx>, Region<'tcx>),
        .           }
        .           
        .           impl Constraint<'_> {
        .               pub fn involves_placeholders(&self) -> bool {
      800 ( 0.00%)          match self {
        .                       Constraint::VarSubVar(_, _) => false,
        .                       Constraint::VarSubReg(_, r) | Constraint::RegSubVar(r, _) => r.is_placeholder(),
        .                       Constraint::RegSubReg(r, s) => r.is_placeholder() || s.is_placeholder(),
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug, Clone)]
-- line 159 ----------------------------------------
-- line 304 ----------------------------------------
        .               pub universe: ty::UniverseIndex,
        .           }
        .           
        .           pub struct RegionSnapshot {
        .               any_unifications: bool,
        .           }
        .           
        .           impl<'tcx> RegionConstraintStorage<'tcx> {
    6,814 ( 0.00%)      pub fn new() -> Self {
        .                   Self::default()
    6,814 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub(crate) fn with_log<'a>(
        .                   &'a mut self,
        .                   undo_log: &'a mut InferCtxtUndoLogs<'tcx>,
        .               ) -> RegionConstraintCollector<'a, 'tcx> {
        .                   RegionConstraintCollector { storage: self, undo_log }
        .               }
        .           
        .               fn rollback_undo_entry(&mut self, undo_entry: UndoLog<'tcx>) {
  195,280 ( 0.00%)          match undo_entry {
        .                       AddVar(vid) => {
        .                           self.var_infos.pop().unwrap();
   62,352 ( 0.00%)                  assert_eq!(self.var_infos.len(), vid.index() as usize);
        .                       }
   23,468 ( 0.00%)              AddConstraint(ref constraint) => {
   93,872 ( 0.00%)                  self.data.constraints.remove(constraint);
        .                       }
        .                       AddVerify(index) => {
        .                           self.data.verifys.pop();
        .                           assert_eq!(self.data.verifys.len(), index);
        .                       }
        .                       AddGiven(sub, sup) => {
        .                           self.data.givens.remove(&(sub, sup));
        .                       }
-- line 339 ----------------------------------------
-- line 348 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> RegionConstraintCollector<'_, 'tcx> {
        .               pub fn num_region_vars(&self) -> usize {
        .                   self.var_infos.len()
        .               }
        .           
        .               pub fn region_constraint_data(&self) -> &RegionConstraintData<'tcx> {
      253 ( 0.00%)          &self.data
      253 ( 0.00%)      }
        .           
        .               /// Once all the constraints have been gathered, extract out the final data.
        .               ///
        .               /// Not legal during a snapshot.
        .               pub fn into_infos_and_data(self) -> (VarInfos, RegionConstraintData<'tcx>) {
    1,593 ( 0.00%)          assert!(!UndoLogs::<super::UndoLog<'_>>::in_snapshot(&self.undo_log));
        .                   (mem::take(&mut self.storage.var_infos), mem::take(&mut self.storage.data))
        .               }
        .           
        .               /// Takes (and clears) the current set of constraints. Note that
        .               /// the set of variables remains intact, but all relationships
        .               /// between them are reset. This is used during NLL checking to
        .               /// grab the set of constraints that arose from a particular
        .               /// operation.
-- line 371 ----------------------------------------
-- line 418 ----------------------------------------
        .           
        .               pub fn start_snapshot(&mut self) -> RegionSnapshot {
        .                   debug!("RegionConstraintCollector: start_snapshot");
        .                   RegionSnapshot { any_unifications: self.any_unifications }
        .               }
        .           
        .               pub fn rollback_to(&mut self, snapshot: RegionSnapshot) {
        .                   debug!("RegionConstraintCollector: rollback_to({:?})", snapshot);
   12,224 ( 0.00%)          self.any_unifications = snapshot.any_unifications;
        .               }
        .           
  318,606 ( 0.01%)      pub fn new_region_var(
        .                   &mut self,
        .                   universe: ty::UniverseIndex,
        .                   origin: RegionVariableOrigin,
        .               ) -> RegionVid {
   53,101 ( 0.00%)          let vid = self.var_infos.push(RegionVariableInfo { origin, universe });
        .           
  159,303 ( 0.00%)          let u_vid = self.unification_table().new_key(UnifiedRegion(None));
   53,101 ( 0.00%)          assert_eq!(vid, u_vid.vid);
        .                   self.undo_log.push(AddVar(vid));
        .                   debug!("created new region variable {:?} in {:?} with origin {:?}", vid, universe, origin);
        .                   vid
  424,808 ( 0.01%)      }
        .           
        .               /// Returns the universe for the given variable.
        .               pub fn var_universe(&self, vid: RegionVid) -> ty::UniverseIndex {
    2,512 ( 0.00%)          self.var_infos[vid].universe
        .               }
        .           
        .               /// Returns the origin for the given variable.
        .               pub fn var_origin(&self, vid: RegionVid) -> RegionVariableOrigin {
        .                   self.var_infos[vid].origin
        .               }
        .           
        .               fn add_constraint(&mut self, constraint: Constraint<'tcx>, origin: SubregionOrigin<'tcx>) {
        .                   // cannot add constraints once regions are resolved
        .                   debug!("RegionConstraintCollector: add_constraint({:?})", constraint);
        .           
        .                   // never overwrite an existing (constraint, origin) - only insert one if it isn't
        .                   // present in the map yet. This prevents origins from outside the snapshot being
        .                   // replaced with "less informative" origins e.g., during calls to `can_eq`
        .                   let undo_log = &mut self.undo_log;
  316,869 ( 0.01%)          self.storage.data.constraints.entry(constraint).or_insert_with(|| {
  172,584 ( 0.00%)              undo_log.push(AddConstraint(constraint));
  115,056 ( 0.00%)              origin
        .                   });
        .               }
        .           
        .               fn add_verify(&mut self, verify: Verify<'tcx>) {
        .                   // cannot add verifys once regions are resolved
        .                   debug!("RegionConstraintCollector: add_verify({:?})", verify);
        .           
        .                   // skip no-op cases known to be satisfied
-- line 471 ----------------------------------------
-- line 484 ----------------------------------------
        .                   // cannot add givens once regions are resolved
        .                   if self.data.givens.insert((sub, sup)) {
        .                       debug!("add_given({:?} <= {:?})", sub, sup);
        .           
        .                       self.undo_log.push(AddGiven(sub, sup));
        .                   }
        .               }
        .           
  101,530 ( 0.00%)      pub fn make_eqregion(
        .                   &mut self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   sub: Region<'tcx>,
        .                   sup: Region<'tcx>,
        .               ) {
   50,765 ( 0.00%)          if sub != sup {
        .                       // Eventually, it would be nice to add direct support for
        .                       // equating regions.
   80,240 ( 0.00%)              self.make_subregion(origin.clone(), sub, sup);
   90,270 ( 0.00%)              self.make_subregion(origin, sup, sub);
        .           
   50,152 ( 0.00%)              match (sub, sup) {
   28,512 ( 0.00%)                  (&ty::ReVar(sub), &ty::ReVar(sup)) => {
        .                               debug!("make_eqregion: unifying {:?} with {:?}", sub, sup);
   47,520 ( 0.00%)                      self.unification_table().union(sub, sup);
        .                               self.any_unifications = true;
        .                           }
        .                           (&ty::ReVar(vid), value) | (value, &ty::ReVar(vid)) => {
        .                               debug!("make_eqregion: unifying {:?} with {:?}", vid, value);
    2,096 ( 0.00%)                      self.unification_table().union_value(vid, UnifiedRegion(Some(value)));
        .                               self.any_unifications = true;
        .                           }
        .                           (_, _) => {}
        .                       }
        .                   }
   70,210 ( 0.00%)      }
        .           
        .               pub fn member_constraint(
        .                   &mut self,
        .                   opaque_type_def_id: DefId,
        .                   definition_span: Span,
        .                   hidden_ty: Ty<'tcx>,
        .                   member_region: ty::Region<'tcx>,
        .                   choice_regions: &Lrc<Vec<ty::Region<'tcx>>>,
-- line 526 ----------------------------------------
-- line 535 ----------------------------------------
        .                       opaque_type_def_id,
        .                       definition_span,
        .                       hidden_ty,
        .                       member_region,
        .                       choice_regions: choice_regions.clone(),
        .                   });
        .               }
        .           
  424,088 ( 0.01%)      #[instrument(skip(self, origin), level = "debug")]
        .               pub fn make_subregion(
        .                   &mut self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   sub: Region<'tcx>,
        .                   sup: Region<'tcx>,
        .               ) {
        .                   // cannot add constraints once regions are resolved
        .                   debug!("origin = {:#?}", origin);
        .           
  299,128 ( 0.00%)          match (sub, sup) {
        .                       (&ReLateBound(..), _) | (_, &ReLateBound(..)) => {
        .                           span_bug!(origin.span(), "cannot relate bound region: {:?} <= {:?}", sub, sup);
        .                       }
        .                       (_, &ReStatic) => {
        .                           // all regions are subregions of static, so we can ignore this
        .                       }
   27,843 ( 0.00%)              (&ReVar(sub_id), &ReVar(sup_id)) => {
  194,901 ( 0.00%)                  self.add_constraint(Constraint::VarSubVar(sub_id, sup_id), origin);
        .                       }
        .                       (_, &ReVar(sup_id)) => {
    4,102 ( 0.00%)                  self.add_constraint(Constraint::RegSubVar(sub, sup_id), origin);
        .                       }
      562 ( 0.00%)              (&ReVar(sub_id), _) => {
    3,934 ( 0.00%)                  self.add_constraint(Constraint::VarSubReg(sub_id, sup), origin);
        .                       }
        .                       _ => {
      231 ( 0.00%)                  self.add_constraint(Constraint::RegSubReg(sub, sup), origin);
        .                       }
        .                   }
        .               }
        .           
        .               pub fn verify_generic_bound(
        .                   &mut self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   kind: GenericKind<'tcx>,
-- line 578 ----------------------------------------
-- line 599 ----------------------------------------
        .                       _ if a == b => {
        .                           a // LUB(a,a) = a
        .                       }
        .           
        .                       _ => self.combine_vars(tcx, Lub, a, b, origin),
        .                   }
        .               }
        .           
       24 ( 0.00%)      pub fn glb_regions(
        .                   &mut self,
        .                   tcx: TyCtxt<'tcx>,
        .                   origin: SubregionOrigin<'tcx>,
        .                   a: Region<'tcx>,
        .                   b: Region<'tcx>,
        .               ) -> Region<'tcx> {
        .                   // cannot add constraints once regions are resolved
        .                   debug!("RegionConstraintCollector: glb_regions({:?}, {:?})", a, b);
       12 ( 0.00%)          match (a, b) {
        .                       (&ReStatic, r) | (r, &ReStatic) => {
        .                           r // static lives longer than everything else
        .                       }
        .           
        6 ( 0.00%)              _ if a == b => {
        .                           a // GLB(a,a) = a
        .                       }
        .           
       36 ( 0.00%)              _ => self.combine_vars(tcx, Glb, a, b, origin),
        .                   }
       24 ( 0.00%)      }
        .           
        .               /// Resolves the passed RegionVid to the root RegionVid in the unification table
        .               pub fn opportunistic_resolve_var(&mut self, rid: ty::RegionVid) -> ty::RegionVid {
   12,608 ( 0.00%)          self.unification_table().find(rid).vid
        .               }
        .           
        .               /// If the Region is a `ReVar`, then resolves it either to the root value in
        .               /// the unification table, if it exists, or to the root `ReVar` in the table.
        .               /// If the Region is not a `ReVar`, just returns the Region itself.
        .               pub fn opportunistic_resolve_region(
        .                   &mut self,
        .                   tcx: TyCtxt<'tcx>,
-- line 639 ----------------------------------------
-- line 647 ----------------------------------------
        .                               tcx.reuse_or_mk_region(region, ty::ReVar(root))
        .                           })
        .                       }
        .                       _ => region,
        .                   }
        .               }
        .           
        .               fn combine_map(&mut self, t: CombineMapType) -> &mut CombineMap<'tcx> {
       24 ( 0.00%)          match t {
        .                       Glb => &mut self.glbs,
        .                       Lub => &mut self.lubs,
        .                   }
        .               }
        .           
       36 ( 0.00%)      fn combine_vars(
        .                   &mut self,
        .                   tcx: TyCtxt<'tcx>,
        .                   t: CombineMapType,
        .                   a: Region<'tcx>,
        .                   b: Region<'tcx>,
        .                   origin: SubregionOrigin<'tcx>,
        .               ) -> Region<'tcx> {
        .                   let vars = TwoRegions { a, b };
        .                   if let Some(&c) = self.combine_map(t).get(&vars) {
        .                       return tcx.mk_region(ReVar(c));
        .                   }
        .                   let a_universe = self.universe(a);
        .                   let b_universe = self.universe(b);
        .                   let c_universe = cmp::max(a_universe, b_universe);
       15 ( 0.00%)          let c = self.new_region_var(c_universe, MiscVariable(origin.span()));
        .                   self.combine_map(t).insert(vars, c);
        3 ( 0.00%)          self.undo_log.push(AddCombination(t, vars));
       15 ( 0.00%)          let new_r = tcx.mk_region(ReVar(c));
       24 ( 0.00%)          for old_r in [a, b] {
        6 ( 0.00%)              match t {
       51 ( 0.00%)                  Glb => self.make_subregion(origin.clone(), new_r, old_r),
        .                           Lub => self.make_subregion(origin.clone(), old_r, new_r),
        .                       }
        .                   }
        .                   debug!("combine_vars() c={:?}", c);
        .                   new_r
       27 ( 0.00%)      }
        .           
        .               pub fn universe(&self, region: Region<'tcx>) -> ty::UniverseIndex {
    2,004 ( 0.00%)          match *region {
        .                       ty::ReStatic | ty::ReErased | ty::ReFree(..) | ty::ReEarlyBound(..) => {
        .                           ty::UniverseIndex::ROOT
        .                       }
        .                       ty::ReEmpty(ui) => ui,
        .                       ty::RePlaceholder(placeholder) => placeholder.universe,
      300 ( 0.00%)              ty::ReVar(vid) => self.var_universe(vid),
        .                       ty::ReLateBound(..) => bug!("universe(): encountered bound region {:?}", region),
        .                   }
        .               }
        .           
    3,175 ( 0.00%)      pub fn vars_since_snapshot(
        .                   &self,
        .                   value_count: usize,
        .               ) -> (Range<RegionVid>, Vec<RegionVariableOrigin>) {
        .                   let range = RegionVid::from(value_count)..RegionVid::from(self.unification_table.len());
    3,810 ( 0.00%)          (
        .                       range.clone(),
        .                       (range.start.index()..range.end.index())
        .                           .map(|index| self.var_infos[ty::RegionVid::from(index)].origin)
        .                           .collect(),
        .                   )
    3,810 ( 0.00%)      }
        .           
        .               /// See `InferCtxt::region_constraints_added_in_snapshot`.
    3,150 ( 0.00%)      pub fn region_constraints_added_in_snapshot(&self, mark: &Snapshot<'tcx>) -> Option<bool> {
    1,050 ( 0.00%)          self.undo_log
        .                       .region_constraints_in_snapshot(mark)
    1,076 ( 0.00%)              .map(|&elt| match elt {
      332 ( 0.00%)                  AddConstraint(constraint) => Some(constraint.involves_placeholders()),
        .                           _ => None,
        .                       })
        .                       .max()
        .                       .unwrap_or(None)
    4,200 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn unification_table(&mut self) -> super::UnificationTable<'_, 'tcx, RegionVidKey<'tcx>> {
  132,562 ( 0.00%)          ut::UnificationTable::with_log(&mut self.storage.unification_table, self.undo_log)
        .               }
        .           }
        .           
        .           impl fmt::Debug for RegionSnapshot {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(f, "RegionSnapshot")
        .               }
        .           }
-- line 737 ----------------------------------------
-- line 796 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> RegionConstraintData<'tcx> {
        .               /// Returns `true` if this region constraint data contains no constraints, and `false`
        .               /// otherwise.
        .               pub fn is_empty(&self) -> bool {
        .                   let RegionConstraintData { constraints, member_constraints, verifys, givens } = self;
       57 ( 0.00%)          constraints.is_empty()
        .                       && member_constraints.is_empty()
        .                       && verifys.is_empty()
        .                       && givens.is_empty()
        .               }
        .           }
        .           
        .           impl<'tcx> Rollback<UndoLog<'tcx>> for RegionConstraintStorage<'tcx> {
  195,280 ( 0.00%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
  156,224 ( 0.00%)          self.rollback_undo_entry(undo)
  195,280 ( 0.00%)      }
        .           }

1,152,550 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs
--------------------------------------------------------------------------------
Ir                  

-- line 12 ----------------------------------------
         .           use rustc_data_structures::sync::Lrc;
         .           use rustc_macros::HashStable_Generic;
         .           use rustc_span::symbol::{kw, sym};
         .           use rustc_span::symbol::{Ident, Symbol};
         .           use rustc_span::{self, edition::Edition, Span, DUMMY_SP};
         .           use std::borrow::Cow;
         .           use std::{fmt, mem};
         .           
    18,200 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub enum CommentKind {
         .               Line,
         .               Block,
         .           }
         .           
       411 ( 0.00%)  #[derive(Clone, PartialEq, Encodable, Decodable, Hash, Debug, Copy)]
         .           #[derive(HashStable_Generic)]
         .           pub enum BinOpToken {
         .               Plus,
         .               Minus,
         .               Star,
         .               Slash,
         .               Percent,
         .               Caret,
         .               And,
         .               Or,
         .               Shl,
         .               Shr,
         .           }
         .           
         .           /// A delimiter token.
   190,511 ( 0.00%)  #[derive(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Debug, Copy)]
         .           #[derive(HashStable_Generic)]
         .           pub enum DelimToken {
         .               /// A round parenthesis (i.e., `(` or `)`).
         .               Paren,
         .               /// A square bracket (i.e., `[` or `]`).
         .               Bracket,
         .               /// A curly brace (i.e., `{` or `}`).
         .               Brace,
         .               /// An empty delimiter.
         .               NoDelim,
         .           }
         .           
     3,721 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub enum LitKind {
         .               Bool, // AST only, must never appear in a `Token`
         .               Byte,
         .               Char,
         .               Integer,
         .               Float,
         .               Str,
         .               StrRaw(u16), // raw string delimited by `n` hash symbols
         .               ByteStr,
         .               ByteStrRaw(u16), // raw byte string delimited by `n` hash symbols
         .               Err,
         .           }
         .           
         .           /// A literal token.
    69,802 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub struct Lit {
         4 ( 0.00%)      pub kind: LitKind,
         4 ( 0.00%)      pub symbol: Symbol,
         4 ( 0.00%)      pub suffix: Option<Symbol>,
         .           }
         .           
         .           impl fmt::Display for Lit {
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   let Lit { kind, symbol, suffix } = *self;
         .                   match kind {
         .                       Byte => write!(f, "b'{}'", symbol)?,
         .                       Char => write!(f, "'{}'", symbol)?,
-- line 82 ----------------------------------------
-- line 130 ----------------------------------------
         .               crate fn may_have_suffix(self) -> bool {
         .                   matches!(self, Integer | Float | Err)
         .               }
         .           }
         .           
         .           impl Lit {
         .               pub fn new(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> Lit {
         .                   Lit { kind, symbol, suffix }
     8,846 ( 0.00%)      }
         .           }
         .           
        36 ( 0.00%)  pub fn ident_can_begin_expr(name: Symbol, span: Span, is_raw: bool) -> bool {
        63 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
         .           
        18 ( 0.00%)      !ident_token.is_reserved_ident()
         .                   || ident_token.is_path_segment_keyword()
         .                   || [
         .                       kw::Async,
         .                       kw::Do,
         .                       kw::Box,
         .                       kw::Break,
         .                       kw::Const,
         .                       kw::Continue,
-- line 152 ----------------------------------------
-- line 161 ----------------------------------------
         .                       kw::True,
         .                       kw::Try,
         .                       kw::Unsafe,
         .                       kw::While,
         .                       kw::Yield,
         .                       kw::Static,
         .                   ]
         .                   .contains(&name)
        45 ( 0.00%)  }
         .           
         .           fn ident_can_begin_type(name: Symbol, span: Span, is_raw: bool) -> bool {
        66 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
         .           
        26 ( 0.00%)      !ident_token.is_reserved_ident()
         .                   || ident_token.is_path_segment_keyword()
         .                   || [kw::Underscore, kw::For, kw::Impl, kw::Fn, kw::Unsafe, kw::Extern, kw::Typeof, kw::Dyn]
         .                       .contains(&name)
         .           }
         .           
39,146,067 ( 0.63%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub enum TokenKind {
         .               /* Expression-operator symbols. */
         .               Eq,
         .               Lt,
         .               Le,
         .               EqEq,
         .               Ne,
         .               Ge,
         .               Gt,
         .               AndAnd,
         .               OrOr,
         .               Not,
         .               Tilde,
   121,329 ( 0.00%)      BinOp(BinOpToken),
    47,640 ( 0.00%)      BinOpEq(BinOpToken),
         .           
         .               /* Structural symbols */
         .               At,
         .               Dot,
         .               DotDot,
         .               DotDotDot,
         .               DotDotEq,
         .               Comma,
-- line 203 ----------------------------------------
-- line 208 ----------------------------------------
         .               LArrow,
         .               FatArrow,
         .               Pound,
         .               Dollar,
         .               Question,
         .               /// Used by proc macros for representing lifetimes, not generated by lexer right now.
         .               SingleQuote,
         .               /// An opening delimiter (e.g., `{`).
   116,847 ( 0.00%)      OpenDelim(DelimToken),
         .               /// A closing delimiter (e.g., `}`).
    40,545 ( 0.00%)      CloseDelim(DelimToken),
         .           
         .               /* Literals */
    91,515 ( 0.00%)      Literal(Lit),
         .           
         .               /// Identifier token.
         .               /// Do not forget about `NtIdent` when you want to match on identifiers.
         .               /// It's recommended to use `Token::(ident,uninterpolate,uninterpolated_span)` to
         .               /// treat regular and interpolated identifiers in the same way.
   546,607 ( 0.01%)      Ident(Symbol, /* is_raw */ bool),
         .               /// Lifetime identifier token.
         .               /// Do not forget about `NtLifetime` when you want to match on lifetime identifiers.
         .               /// It's recommended to use `Token::(lifetime,uninterpolate,uninterpolated_span)` to
         .               /// treat regular and interpolated lifetime identifiers in the same way.
         .               Lifetime(Symbol),
         .           
   146,355 ( 0.00%)      Interpolated(Lrc<Nonterminal>),
         .           
         .               /// A doc comment token.
         .               /// `Symbol` is the doc comment's data excluding its "quotes" (`///`, `/**`, etc)
         .               /// similarly to symbols in string literal tokens.
       588 ( 0.00%)      DocComment(CommentKind, ast::AttrStyle, Symbol),
         .           
         .               Eof,
         .           }
         .           
         .           // `TokenKind` is used a lot. Make sure it doesn't unintentionally get bigger.
         .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
         .           rustc_data_structures::static_assert_size!(TokenKind, 16);
         .           
 5,360,135 ( 0.09%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub struct Token {
   358,776 ( 0.01%)      pub kind: TokenKind,
         .               pub span: Span,
         .           }
         .           
         .           impl TokenKind {
         .               pub fn lit(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> TokenKind {
         .                   Literal(Lit::new(kind, symbol, suffix))
         .               }
         .           
         .               // An approximation to proc-macro-style single-character operators used by rustc parser.
         .               // If the operator token can be broken into two tokens, the first of which is single-character,
         .               // then this function performs that operation, otherwise it returns `None`.
     6,313 ( 0.00%)      pub fn break_two_token_op(&self) -> Option<(TokenKind, TokenKind)> {
    25,252 ( 0.00%)          Some(match *self {
         .                       Le => (Lt, Eq),
         .                       EqEq => (Eq, Eq),
         .                       Ne => (Not, Eq),
         .                       Ge => (Gt, Eq),
         .                       AndAnd => (BinOp(And), BinOp(And)),
         .                       OrOr => (BinOp(Or), BinOp(Or)),
         .                       BinOp(Shl) => (Lt, Lt),
         .                       BinOp(Shr) => (Gt, Gt),
-- line 271 ----------------------------------------
-- line 280 ----------------------------------------
         .                       BinOpEq(Shl) => (Lt, Le),
         .                       BinOpEq(Shr) => (Gt, Ge),
         .                       DotDot => (Dot, Dot),
         .                       DotDotDot => (Dot, DotDot),
         .                       ModSep => (Colon, Colon),
         .                       RArrow => (BinOp(Minus), Gt),
         .                       LArrow => (Lt, BinOp(Minus)),
         .                       FatArrow => (Eq, Gt),
     6,313 ( 0.00%)              _ => return None,
         .                   })
     6,313 ( 0.00%)      }
         .           
         .               /// Returns tokens that are likely to be typed accidentally instead of the current token.
         .               /// Enables better error recovery when the wrong token is found.
         .               pub fn similar_tokens(&self) -> Option<Vec<TokenKind>> {
         .                   match *self {
         .                       Comma => Some(vec![Dot, Lt, Semi]),
         .                       Semi => Some(vec![Colon, Comma]),
         .                       FatArrow => Some(vec![Eq, RArrow]),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               pub fn should_end_const_arg(&self) -> bool {
        44 ( 0.00%)          matches!(self, Gt | Ge | BinOp(Shr) | BinOpEq(Shr))
        11 ( 0.00%)      }
         .           }
         .           
         .           impl Token {
   112,445 ( 0.00%)      pub fn new(kind: TokenKind, span: Span) -> Self {
   557,588 ( 0.01%)          Token { kind, span }
   112,445 ( 0.00%)      }
         .           
         .               /// Some token that will be thrown away later.
    73,391 ( 0.00%)      pub fn dummy() -> Self {
         .                   Token::new(TokenKind::Question, DUMMY_SP)
    73,391 ( 0.00%)      }
         .           
         .               /// Recovers a `Token` from an `Ident`. This creates a raw identifier if necessary.
         .               pub fn from_ast_ident(ident: Ident) -> Self {
         8 ( 0.00%)          Token::new(Ident(ident.name, ident.is_raw_guess()), ident.span)
         .               }
         .           
         .               /// Return this token by value and leave a dummy token in its place.
     4,539 ( 0.00%)      pub fn take(&mut self) -> Self {
         .                   mem::replace(self, Token::dummy())
     4,539 ( 0.00%)      }
         .           
         .               /// For interpolated tokens, returns a span of the fragment to which the interpolated
         .               /// token refers. For all other tokens this is just a regular span.
         .               /// It is particularly important to use this for identifiers and lifetimes
         .               /// for which spans affect name resolution and edition checks.
         .               /// Note that keywords are also identifiers, so they should use this
         .               /// if they keep spans or perform edition checks.
         .               pub fn uninterpolated_span(&self) -> Span {
       202 ( 0.00%)          match &self.kind {
         .                       Interpolated(nt) => nt.span(),
       101 ( 0.00%)              _ => self.span,
         .                   }
       101 ( 0.00%)      }
         .           
         .               pub fn is_op(&self) -> bool {
    13,617 ( 0.00%)          !matches!(
     4,539 ( 0.00%)              self.kind,
         .                       OpenDelim(..)
         .                           | CloseDelim(..)
         .                           | Literal(..)
         .                           | DocComment(..)
         .                           | Ident(..)
         .                           | Lifetime(..)
         .                           | Interpolated(..)
         .                           | Eof
         .                   )
     4,539 ( 0.00%)      }
         .           
         .               pub fn is_like_plus(&self) -> bool {
       465 ( 0.00%)          matches!(self.kind, BinOp(Plus) | BinOpEq(Plus))
        93 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token can appear at the start of an expression.
        23 ( 0.00%)      pub fn can_begin_expr(&self) -> bool {
       115 ( 0.00%)          match self.uninterpolate().kind {
        81 ( 0.00%)              Ident(name, is_raw)              =>
        27 ( 0.00%)                  ident_can_begin_expr(name, self.span, is_raw), // value name or keyword
         .                       OpenDelim(..)                     | // tuple, array or block
         .                       Literal(..)                       | // literal
         .                       Not                               | // operator not
         .                       BinOp(Minus)                      | // unary minus
         .                       BinOp(Star)                       | // dereference
         .                       BinOp(Or) | OrOr                  | // closure
         .                       BinOp(And)                        | // reference
         .                       AndAnd                            | // double reference
-- line 371 ----------------------------------------
-- line 376 ----------------------------------------
         .                       Lifetime(..)                      | // labeled loop
         .                       Pound                             => true, // expression attributes
         .                       Interpolated(ref nt) => matches!(**nt, NtLiteral(..) |
         .                           NtExpr(..)    |
         .                           NtBlock(..)   |
         .                           NtPath(..)),
         .                       _ => false,
         .                   }
        46 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token can appear at the start of a type.
        80 ( 0.00%)      pub fn can_begin_type(&self) -> bool {
       104 ( 0.00%)          match self.uninterpolate().kind {
        99 ( 0.00%)              Ident(name, is_raw)        =>
        11 ( 0.00%)                  ident_can_begin_type(name, self.span, is_raw), // type name or keyword
         .                       OpenDelim(Paren)            | // tuple
         .                       OpenDelim(Bracket)          | // array
         .                       Not                         | // never
         .                       BinOp(Star)                 | // raw pointer
         .                       BinOp(And)                  | // reference
         .                       AndAnd                      | // double reference
         .                       Question                    | // maybe bound in trait object
         .                       Lifetime(..)                | // lifetime bound in trait object
         .                       Lt | BinOp(Shl)             | // associated path
         .                       ModSep                      => true, // global path
        88 ( 0.00%)              Interpolated(ref nt) => matches!(**nt, NtTy(..) | NtPath(..)),
         .                       _ => false,
         .                   }
       120 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token can appear at the start of a const param.
         .               pub fn can_begin_const_arg(&self) -> bool {
        55 ( 0.00%)          match self.kind {
         .                       OpenDelim(Brace) => true,
        64 ( 0.00%)              Interpolated(ref nt) => matches!(**nt, NtExpr(..) | NtBlock(..) | NtLiteral(..)),
         3 ( 0.00%)              _ => self.can_begin_literal_maybe_minus(),
         .                   }
         8 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token can appear at the start of a generic bound.
         .               pub fn can_begin_bound(&self) -> bool {
         .                   self.is_path_start()
         .                       || self.is_lifetime()
         .                       || self.is_keyword(kw::For)
         .                       || self == &Question
         .                       || self == &OpenDelim(Paren)
-- line 421 ----------------------------------------
-- line 427 ----------------------------------------
         .               }
         .           
         .               /// Returns `true` if the token is any literal, a minus (which can prefix a literal,
         .               /// for example a '-42', or one of the boolean idents).
         .               ///
         .               /// In other words, would this token be a valid start of `parse_literal_maybe_minus`?
         .               ///
         .               /// Keep this in sync with and `Lit::from_token`, excluding unary negation.
         4 ( 0.00%)      pub fn can_begin_literal_maybe_minus(&self) -> bool {
        40 ( 0.00%)          match self.uninterpolate().kind {
         .                       Literal(..) | BinOp(Minus) => true,
        16 ( 0.00%)              Ident(name, false) if name.is_bool_lit() => true,
         .                       Interpolated(ref nt) => match &**nt {
         .                           NtLiteral(_) => true,
         .                           NtExpr(e) => match &e.kind {
         .                               ast::ExprKind::Lit(_) => true,
         .                               ast::ExprKind::Unary(ast::UnOp::Neg, e) => {
         .                                   matches!(&e.kind, ast::ExprKind::Lit(_))
         .                               }
         .                               _ => false,
         .                           },
         .                           _ => false,
         .                       },
         .                       _ => false,
         .                   }
         8 ( 0.00%)      }
         .           
         .               // A convenience function for matching on identifiers during parsing.
         .               // Turns interpolated identifier (`$i: ident`) or lifetime (`$l: lifetime`) token
         .               // into the regular identifier or lifetime token it refers to,
         .               // otherwise returns the original token.
    10,914 ( 0.00%)      pub fn uninterpolate(&self) -> Cow<'_, Token> {
 2,838,592 ( 0.05%)          match &self.kind {
 1,608,246 ( 0.03%)              Interpolated(nt) => match **nt {
   538,188 ( 0.01%)                  NtIdent(ident, is_raw) => {
 1,347,107 ( 0.02%)                      Cow::Owned(Token::new(Ident(ident.name, is_raw), ident.span))
         .                           }
         .                           NtLifetime(ident) => Cow::Owned(Token::new(Lifetime(ident.name), ident.span)),
         .                           _ => Cow::Borrowed(self),
         .                       },
         .                       _ => Cow::Borrowed(self),
         .                   }
    10,914 ( 0.00%)      }
         .           
         .               /// Returns an identifier if this token is an identifier.
   734,986 ( 0.01%)      pub fn ident(&self) -> Option<(Ident, /* is_raw */ bool)> {
         .                   let token = self.uninterpolate();
 1,865,881 ( 0.03%)          match token.kind {
 7,920,886 ( 0.13%)              Ident(name, is_raw) => Some((Ident::new(name, token.span), is_raw)),
         .                       _ => None,
         .                   }
 4,540,176 ( 0.07%)      }
         .           
         .               /// Returns a lifetime identifier if this token is a lifetime.
   386,897 ( 0.01%)      pub fn lifetime(&self) -> Option<Ident> {
         .                   let token = self.uninterpolate();
   780,444 ( 0.01%)          match token.kind {
         .                       Lifetime(name) => Some(Ident::new(name, token.span)),
         .                       _ => None,
         .                   }
 2,708,279 ( 0.04%)      }
         .           
         .               /// Returns `true` if the token is an identifier.
         .               pub fn is_ident(&self) -> bool {
         .                   self.ident().is_some()
     5,163 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is a lifetime.
     3,325 ( 0.00%)      pub fn is_lifetime(&self) -> bool {
         .                   self.lifetime().is_some()
     6,650 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is an identifier whose name is the given
         .               /// string slice.
     6,278 ( 0.00%)      pub fn is_ident_named(&self, name: Symbol) -> bool {
         .                   self.ident().map_or(false, |(ident, _)| ident.name == name)
    12,556 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is an interpolated path.
         .               fn is_path(&self) -> bool {
    79,632 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
     6,544 ( 0.00%)              if let NtPath(..) = **nt {
         .                           return true;
         .                       }
         .                   }
         .                   false
         .               }
         .           
         .               /// Would `maybe_whole_expr` in `parser.rs` return `Ok(..)`?
         .               /// That is, is this a pre-parsed expression dropped into the token stream
-- line 516 ----------------------------------------
-- line 522 ----------------------------------------
         .                       }
         .                   }
         .           
         .                   false
         .               }
         .           
         .               // Is the token an interpolated block (`$b:block`)?
         .               pub fn is_whole_block(&self) -> bool {
     1,050 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
         .                       if let NtBlock(..) = **nt {
         .                           return true;
         .                       }
         .                   }
         .                   false
       525 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is either the `mut` or `const` keyword.
         .               pub fn is_mutability(&self) -> bool {
         .                   self.is_keyword(kw::Mut) || self.is_keyword(kw::Const)
         .               }
         .           
    27,000 ( 0.00%)      pub fn is_qpath_start(&self) -> bool {
    66,816 ( 0.00%)          self == &Lt || self == &BinOp(Shl)
         .               }
         .           
    79,632 ( 0.00%)      pub fn is_path_start(&self) -> bool {
   122,692 ( 0.00%)          self == &ModSep
         .                       || self.is_qpath_start()
         .                       || self.is_path()
         .                       || self.is_path_segment_keyword()
     2,121 ( 0.00%)              || self.is_ident() && !self.is_reserved_ident()
    99,540 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is a given keyword, `kw`.
   158,757 ( 0.00%)      pub fn is_keyword(&self, kw: Symbol) -> bool {
         .                   self.is_non_raw_ident_where(|id| id.name == kw)
   317,514 ( 0.01%)      }
         .           
       643 ( 0.00%)      pub fn is_path_segment_keyword(&self) -> bool {
         .                   self.is_non_raw_ident_where(Ident::is_path_segment_keyword)
         .               }
         .           
         .               // Returns true for reserved identifiers used internally for elided lifetimes,
         .               // unnamed method parameters, crate root module, error recovery etc.
        38 ( 0.00%)      pub fn is_special_ident(&self) -> bool {
         .                   self.is_non_raw_ident_where(Ident::is_special)
         .               }
         .           
         .               /// Returns `true` if the token is a keyword used in the language.
        38 ( 0.00%)      pub fn is_used_keyword(&self) -> bool {
         .                   self.is_non_raw_ident_where(Ident::is_used_keyword)
         .               }
         .           
         .               /// Returns `true` if the token is a keyword reserved for possible future use.
        38 ( 0.00%)      pub fn is_unused_keyword(&self) -> bool {
         .                   self.is_non_raw_ident_where(Ident::is_unused_keyword)
         .               }
         .           
         .               /// Returns `true` if the token is either a special identifier or a keyword.
         .               pub fn is_reserved_ident(&self) -> bool {
         .                   self.is_non_raw_ident_where(Ident::is_reserved)
         .               }
         .           
         .               /// Returns `true` if the token is the identifier `true` or `false`.
       643 ( 0.00%)      pub fn is_bool_lit(&self) -> bool {
     1,286 ( 0.00%)          self.is_non_raw_ident_where(|id| id.name.is_bool_lit())
         .               }
         .           
         .               pub fn is_numeric_lit(&self) -> bool {
         .                   matches!(
         .                       self.kind,
         .                       Literal(Lit { kind: LitKind::Integer, .. }) | Literal(Lit { kind: LitKind::Float, .. })
         .                   )
         .               }
         .           
         .               /// Returns `true` if the token is a non-raw identifier for which `pred` holds.
         .               pub fn is_non_raw_ident_where(&self, pred: impl FnOnce(Ident) -> bool) -> bool {
 1,149,790 ( 0.02%)          match self.ident() {
     5,379 ( 0.00%)              Some((id, false)) => pred(id),
         .                       _ => false,
         .                   }
         .               }
         .           
    13,250 ( 0.00%)      pub fn glue(&self, joint: &Token) -> Option<Token> {
     6,625 ( 0.00%)          let kind = match self.kind {
        94 ( 0.00%)              Eq => match joint.kind {
         .                           Eq => EqEq,
         .                           Gt => FatArrow,
         .                           _ => return None,
         .                       },
       294 ( 0.00%)              Lt => match joint.kind {
         .                           Eq => Le,
         .                           Lt => BinOp(Shl),
         .                           Le => BinOpEq(Shl),
         .                           BinOp(Minus) => LArrow,
         .                           _ => return None,
         .                       },
       679 ( 0.00%)              Gt => match joint.kind {
         .                           Eq => Ge,
         .                           Gt => BinOp(Shr),
         .                           Ge => BinOpEq(Shr),
         .                           _ => return None,
         .                       },
         .                       Not => match joint.kind {
         .                           Eq => Ne,
         .                           _ => return None,
         .                       },
       678 ( 0.00%)              BinOp(op) => match joint.kind {
         .                           Eq => BinOpEq(op),
         .                           BinOp(And) if op == And => AndAnd,
         .                           BinOp(Or) if op == Or => OrOr,
       113 ( 0.00%)                  Gt if op == Minus => RArrow,
         .                           _ => return None,
         .                       },
         .                       Dot => match joint.kind {
         .                           Dot => DotDot,
         .                           DotDot => DotDotDot,
         .                           _ => return None,
         .                       },
         .                       DotDot => match joint.kind {
         .                           Dot => DotDotDot,
         .                           Eq => DotDotEq,
         .                           _ => return None,
         .                       },
       570 ( 0.00%)              Colon => match joint.kind {
         .                           Colon => ModSep,
         .                           _ => return None,
         .                       },
         .                       SingleQuote => match joint.kind {
         .                           Ident(name, false) => Lifetime(Symbol::intern(&format!("'{}", name))),
         .                           _ => return None,
         .                       },
         .           
         .                       Le | EqEq | Ne | Ge | AndAnd | OrOr | Tilde | BinOpEq(..) | At | DotDotDot
         .                       | DotDotEq | Comma | Semi | ModSep | RArrow | LArrow | FatArrow | Pound | Dollar
         .                       | Question | OpenDelim(..) | CloseDelim(..) | Literal(..) | Ident(..)
         .                       | Lifetime(..) | Interpolated(..) | DocComment(..) | Eof => return None,
         .                   };
         .           
     5,434 ( 0.00%)          Some(Token::new(kind, self.span.to(joint.span)))
    11,925 ( 0.00%)      }
         .           }
         .           
         .           impl PartialEq<TokenKind> for Token {
         .               fn eq(&self, rhs: &TokenKind) -> bool {
 1,142,347 ( 0.02%)          self.kind == *rhs
         .               }
         .           }
         .           
         .           #[derive(Clone, Encodable, Decodable)]
         .           /// For interpolation during macro expansion.
         .           pub enum Nonterminal {
         .               NtItem(P<ast::Item>),
         .               NtBlock(P<ast::Block>),
-- line 675 ----------------------------------------
-- line 711 ----------------------------------------
         .               Path,
         .               Vis,
         .               TT,
         .           }
         .           
         .           impl NonterminalKind {
         .               /// The `edition` closure is used to get the edition for the given symbol. Doing
         .               /// `span.edition()` is expensive, so we do it lazily.
       756 ( 0.00%)      pub fn from_symbol(
         .                   symbol: Symbol,
         .                   edition: impl FnOnce() -> Edition,
         .               ) -> Option<NonterminalKind> {
     1,874 ( 0.00%)          Some(match symbol {
         .                       sym::item => NonterminalKind::Item,
         .                       sym::block => NonterminalKind::Block,
         .                       sym::stmt => NonterminalKind::Stmt,
         .                       sym::pat => match edition() {
         .                           Edition::Edition2015 | Edition::Edition2018 => {
         .                               NonterminalKind::PatParam { inferred: true }
         .                           }
         .                           Edition::Edition2021 => NonterminalKind::PatWithOr,
-- line 731 ----------------------------------------
-- line 737 ----------------------------------------
         .                       sym::lifetime => NonterminalKind::Lifetime,
         .                       sym::literal => NonterminalKind::Literal,
         .                       sym::meta => NonterminalKind::Meta,
         .                       sym::path => NonterminalKind::Path,
         .                       sym::vis => NonterminalKind::Vis,
         .                       sym::tt => NonterminalKind::TT,
         .                       _ => return None,
         .                   })
       756 ( 0.00%)      }
         .               fn symbol(self) -> Symbol {
         .                   match self {
         .                       NonterminalKind::Item => sym::item,
         .                       NonterminalKind::Block => sym::block,
         .                       NonterminalKind::Stmt => sym::stmt,
         .                       NonterminalKind::PatParam { inferred: false } => sym::pat_param,
         .                       NonterminalKind::PatParam { inferred: true } | NonterminalKind::PatWithOr => sym::pat,
         .                       NonterminalKind::Expr => sym::expr,
-- line 753 ----------------------------------------

13,435,876 ( 0.22%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 141 ----------------------------------------
         .               /// ```
         .               /// let a = [1, 2, 3];
         .               /// assert!(!a.is_empty());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
         .               #[inline]
         .               pub const fn is_empty(&self) -> bool {
   823,588 ( 0.01%)          self.len() == 0
         .               }
         .           
         .               /// Returns the first element of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
         .               ///
         .               /// let w: &[i32] = &[];
         .               /// assert_eq!(None, w.first());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn first(&self) -> Option<&T> {
       792 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
         .               }
         .           
         .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
         .               ///     *first = 5;
         .               /// }
         .               /// assert_eq!(x, &[5, 1, 2]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
         .               #[inline]
         .               pub const fn first_mut(&mut self) -> Option<&mut T> {
       136 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
         .               }
         .           
         .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 237 ----------------------------------------
         .               ///     assert_eq!(last, &2);
         .               ///     assert_eq!(elements, &[0, 1]);
         .               /// }
         .               /// ```
         .               #[stable(feature = "slice_splits", since = "1.5.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
    14,229 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
         .               }
         .           
         .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
         .               ///
         .               /// let w: &[i32] = &[];
         .               /// assert_eq!(None, w.last());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn last(&self) -> Option<&T> {
   400,525 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
         .               }
         .           
         .               /// Returns a mutable pointer to the last item in the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
         .               ///     *last = 10;
         .               /// }
         .               /// assert_eq!(x, &[0, 1, 10]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
         .               #[inline]
         .               pub const fn last_mut(&mut self) -> Option<&mut T> {
 1,712,838 ( 0.03%)          if let [.., last] = self { Some(last) } else { None }
         .               }
         .           
         .               /// Returns a reference to an element or subslice depending on the type of
         .               /// index.
         .               ///
         .               /// - If given a position, returns a reference to the element at that
         .               ///   position or `None` if out of bounds.
         .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 448 ----------------------------------------
         .               /// }
         .               /// ```
         .               ///
         .               /// [`as_mut_ptr`]: slice::as_mut_ptr
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
         .               #[inline]
         .               pub const fn as_ptr(&self) -> *const T {
   959,606 ( 0.02%)          self as *const [T] as *const T
         .               }
         .           
         .               /// Returns an unsafe mutable pointer to the slice's buffer.
         .               ///
         .               /// The caller must ensure that the slice outlives the pointer this
         .               /// function returns, or else it will end up pointing to garbage.
         .               ///
         .               /// Modifying the container referenced by this slice may cause its buffer
-- line 464 ----------------------------------------
-- line 476 ----------------------------------------
         .               ///     }
         .               /// }
         .               /// assert_eq!(x, &[3, 4, 6]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline]
         .               pub const fn as_mut_ptr(&mut self) -> *mut T {
         3 ( 0.00%)          self as *mut [T] as *mut T
         .               }
         .           
         .               /// Returns the two raw pointers spanning the slice.
         .               ///
         .               /// The returned range is half-open, which means that the end pointer
         .               /// points *one past* the last element of the slice. This way, an empty
         .               /// slice is represented by two equal pointers, and the difference between
         .               /// the two pointers represents the size of the slice.
-- line 492 ----------------------------------------
-- line 582 ----------------------------------------
         .               /// v.swap(2, 4);
         .               /// assert!(v == ["a", "b", "e", "d", "c"]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
         .               #[inline]
         .               #[track_caller]
         .               pub const fn swap(&mut self, a: usize, b: usize) {
    67,888 ( 0.00%)          let _ = &self[a];
   172,878 ( 0.00%)          let _ = &self[b];
         .           
         .                   // SAFETY: we just checked that both `a` and `b` are in bounds
         .                   unsafe { self.swap_unchecked(a, b) }
         .               }
         .           
         .               /// Swaps two elements in the slice, without doing bounds checking.
         .               ///
         .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 677 ----------------------------------------
         .           
         .                       // Because this function is first compiled in isolation,
         .                       // this check tells LLVM that the indexing below is
         .                       // in-bounds.  Then after inlining -- once the actual
         .                       // lengths of the slices are known -- it's removed.
         .                       let (a, b) = (&mut a[..n], &mut b[..n]);
         .           
         .                       for i in 0..n {
     5,519 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
         .                       }
         .                   }
         .               }
         .           
         .               /// Returns an iterator over the slice.
         .               ///
         .               /// # Examples
         .               ///
-- line 693 ----------------------------------------
-- line 1499 ----------------------------------------
         .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
         .               ///     assert_eq!(right, []);
         .               /// }
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
         .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
       330 ( 0.00%)          assert!(mid <= self.len());
         .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
         .                   // fulfills the requirements of `from_raw_parts_mut`.
         .                   unsafe { self.split_at_unchecked(mid) }
         .               }
         .           
         .               /// Divides one mutable slice into two at an index.
         .               ///
         .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
         .               /// left[1] = 2;
         .               /// right[1] = 4;
         .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
         .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
    86,366 ( 0.00%)          assert!(mid <= self.len());
         .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
         .                   // fulfills the requirements of `from_raw_parts_mut`.
         .                   unsafe { self.split_at_mut_unchecked(mid) }
         .               }
         .           
         .               /// Divides one slice into two at an index, without doing bounds checking.
         .               ///
         .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
         .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
         .                   let len = self.len();
         .                   let ptr = self.as_mut_ptr();
         .           
         .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
         .                   //
         .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
         .                   // is fine.
     1,236 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
         .               }
         .           
         .               /// Divides one slice into an array and a remainder slice at an index.
         .               ///
         .               /// The array will contain all indices from `[0, N)` (excluding
         .               /// the index `N` itself) and the slice will contain all
         .               /// indices from `[N, len)` (excluding the index `len` itself).
         .               ///
-- line 1644 ----------------------------------------
-- line 2113 ----------------------------------------
         .               /// assert!(!v.iter().any(|e| e == "hi"));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               pub fn contains(&self, x: &T) -> bool
         .               where
         .                   T: PartialEq,
         .               {
     2,492 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
         .               }
         .           
         .               /// Returns `true` if `needle` is a prefix of the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2142 ----------------------------------------
         .               /// assert!(v.starts_with(&[]));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn starts_with(&self, needle: &[T]) -> bool
         .               where
         .                   T: PartialEq,
         .               {
         .                   let n = needle.len();
     6,206 ( 0.00%)          self.len() >= n && needle == &self[..n]
         .               }
         .           
         .               /// Returns `true` if `needle` is a suffix of the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
-- line 2158 ----------------------------------------
-- line 2171 ----------------------------------------
         .               /// assert!(v.ends_with(&[]));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn ends_with(&self, needle: &[T]) -> bool
         .               where
         .                   T: PartialEq,
         .               {
         .                   let (m, n) = (self.len(), needle.len());
    28,853 ( 0.00%)          m >= n && needle == &self[m - n..]
         .               }
         .           
         .               /// Returns a subslice with the prefix removed.
         .               ///
         .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
         .               /// If `prefix` is empty, simply returns the original slice.
         .               ///
         .               /// If the slice does not start with `prefix`, returns `None`.
-- line 2187 ----------------------------------------
-- line 2293 ----------------------------------------
         .               /// s.insert(idx, num);
         .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
         .               where
         .                   T: Ord,
         .               {
         3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
         .               }
         .           
         .               /// Binary searches this sorted slice with a comparator function.
         .               ///
         .               /// The comparator function should implement an order consistent
         .               /// with the sort order of the underlying slice, returning an
         .               /// order code that indicates whether its argument is `Less`,
         .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
         .               #[inline]
         .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
         .               where
         .                   F: FnMut(&'a T) -> Ordering,
         .               {
         .                   let mut size = self.len();
         .                   let mut left = 0;
         .                   let mut right = size;
 8,509,978 ( 0.14%)          while left < right {
11,974,836 ( 0.19%)              let mid = left + size / 2;
         .           
         .                       // SAFETY: the call is made safe by the following invariants:
         .                       // - `mid >= 0`
         .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
 1,154,063 ( 0.02%)              let cmp = f(unsafe { self.get_unchecked(mid) });
         .           
         .                       // The reason why we use if/else control flow rather than match
         .                       // is because match reorders comparison operations, which is perf sensitive.
         .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
 3,224,152 ( 0.05%)              if cmp == Less {
 6,093,024 ( 0.10%)                  left = mid + 1;
 1,520,312 ( 0.02%)              } else if cmp == Greater {
         .                           right = mid;
         .                       } else {
         .                           // SAFETY: same as the `get_unchecked` above
         .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
         .                           return Ok(mid);
         .                       }
         .           
 9,910,467 ( 0.16%)              size = right - left;
         .                   }
         .                   Err(left)
         .               }
         .           
         .               /// Binary searches this sorted slice with a key extraction function.
         .               ///
         .               /// Assumes that the slice is sorted by the key, for instance with
         .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3203 ----------------------------------------
         .                   #[track_caller]
         .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
         .                       panic!(
         .                           "source slice length ({}) does not match destination slice length ({})",
         .                           src_len, dst_len,
         .                       );
         .                   }
         .           
   151,006 ( 0.00%)          if self.len() != src.len() {
         .                       len_mismatch_fail(self.len(), src.len());
         .                   }
         .           
         .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
         .                   // checked to have the same length. The slices cannot overlap because
         .                   // mutable references are exclusive.
         .                   unsafe {
         .                       ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
-- line 3219 ----------------------------------------
-- line 3380 ----------------------------------------
         .                       }
         .                       a << k
         .                   }
         .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
         .                   let ts: usize = mem::size_of::<U>() / gcd;
         .                   let us: usize = mem::size_of::<T>() / gcd;
         .           
         .                   // Armed with this knowledge, we can find how many `U`s we can fit!
         1 ( 0.00%)          let us_len = self.len() / ts * us;
         .                   // And how many `T`s will be in the trailing slice!
     1,482 ( 0.00%)          let ts_len = self.len() % ts;
         .                   (us_len, ts_len)
         .               }
         .           
         .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
         .               /// maintained.
         .               ///
         .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
         .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
         .                       return (self, &[], &[]);
         .                   }
         .           
         .                   // First, find at what point do we split between the first and 2nd slice. Easy with
         .                   // ptr.align_offset.
         .                   let ptr = self.as_ptr();
         .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
         .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
     1,482 ( 0.00%)          if offset > self.len() {
         .                       (self, &[], &[])
         .                   } else {
         .                       let (left, rest) = self.split_at(offset);
         .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
         .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
         .                       // since the caller guarantees that we can transmute `T` to `U` safely.
         .                       unsafe {
         .                           (
         .                               left,
         .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
     1,483 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
         .                           )
         .                       }
         .                   }
         .               }
         .           
         .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
         .               /// maintained.
         .               ///
-- line 3456 ----------------------------------------

 7,887,362 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/rc.rs
--------------------------------------------------------------------------------
Ir                 

-- line 357 ----------------------------------------
        .               ///
        .               /// ```
        .               /// use std::rc::Rc;
        .               ///
        .               /// let five = Rc::new(5);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
   42,126 ( 0.00%)      pub fn new(value: T) -> Rc<T> {
        .                   // There is an implicit weak pointer owned by all the strong
        .                   // pointers, which ensures that the weak destructor never frees
        .                   // the allocation while the strong destructor is running, even
        .                   // if the weak pointer is stored inside the strong one.
        .                   unsafe {
        .                       Self::from_inner(
3,522,053 ( 0.06%)                  Box::leak(box RcBox { strong: Cell::new(1), weak: Cell::new(1), value }).into(),
        .                       )
        .                   }
   42,126 ( 0.00%)      }
        .           
        .               /// Constructs a new `Rc<T>` using a closure `data_fn` that has access to a
        .               /// weak reference to the constructing `Rc<T>`.
        .               ///
        .               /// Generally, a structure circularly referencing itself, either directly or
        .               /// indirectly, should not hold a strong reference to prevent a memory leak.
        .               /// In `data_fn`, initialization of `T` can make use of the weak reference
        .               /// by cloning and storing it inside `T` for use at a later time.
-- line 383 ----------------------------------------
-- line 637 ----------------------------------------
        .               ///
        .               /// let x = Rc::new(4);
        .               /// let _y = Rc::clone(&x);
        .               /// assert_eq!(*Rc::try_unwrap(x).unwrap_err(), 4);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rc_unique", since = "1.4.0")]
        .               pub fn try_unwrap(this: Self) -> Result<T, Self> {
        2 ( 0.00%)          if Rc::strong_count(&this) == 1 {
        .                       unsafe {
        .                           let val = ptr::read(&*this); // copy the contained object
        .           
        .                           // Indicate to Weaks that they can't be promoted by decrementing
        .                           // the strong count, and then remove the implicit "strong weak"
        .                           // pointer while also handling drop logic by just crafting a
        .                           // fake Weak.
        .                           this.inner().dec_strong();
-- line 653 ----------------------------------------
-- line 931 ----------------------------------------
        .               /// let five = Rc::new(5);
        .               /// let _weak_five = Rc::downgrade(&five);
        .               ///
        .               /// assert_eq!(1, Rc::weak_count(&five));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rc_counts", since = "1.15.0")]
        .               pub fn weak_count(this: &Self) -> usize {
  551,727 ( 0.01%)          this.inner().weak() - 1
        .               }
        .           
        .               /// Gets the number of strong (`Rc`) pointers to this allocation.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::rc::Rc;
-- line 947 ----------------------------------------
-- line 1023 ----------------------------------------
        .               pub unsafe fn decrement_strong_count(ptr: *const T) {
        .                   unsafe { mem::drop(Rc::from_raw(ptr)) };
        .               }
        .           
        .               /// Returns `true` if there are no other `Rc` or [`Weak`] pointers to
        .               /// this allocation.
        .               #[inline]
        .               fn is_unique(this: &Self) -> bool {
    1,752 ( 0.00%)          Rc::weak_count(this) == 0 && Rc::strong_count(this) == 1
        .               }
        .           
        .               /// Returns a mutable reference into the given `Rc`, if there are
        .               /// no other `Rc` or [`Weak`] pointers to the same allocation.
        .               ///
        .               /// Returns [`None`] otherwise, because it is not safe to
        .               /// mutate a shared value.
        .               ///
-- line 1039 ----------------------------------------
-- line 1053 ----------------------------------------
        .               /// assert_eq!(*x, 4);
        .               ///
        .               /// let _y = Rc::clone(&x);
        .               /// assert!(Rc::get_mut(&mut x).is_none());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rc_unique", since = "1.4.0")]
        .               pub fn get_mut(this: &mut Self) -> Option<&mut T> {
      584 ( 0.00%)          if Rc::is_unique(this) { unsafe { Some(Rc::get_mut_unchecked(this)) } } else { None }
        .               }
        .           
        .               /// Returns a mutable reference into the given `Rc`,
        .               /// without any check.
        .               ///
        .               /// See also [`get_mut`], which is safe and does appropriate checks.
        .               ///
        .               /// [`get_mut`]: Rc::get_mut
-- line 1069 ----------------------------------------
-- line 1088 ----------------------------------------
        .               /// }
        .               /// assert_eq!(*x, "foo");
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "get_mut_unchecked", issue = "63292")]
        .               pub unsafe fn get_mut_unchecked(this: &mut Self) -> &mut T {
        .                   // We are careful to *not* create a reference covering the "count" fields, as
        .                   // this would conflict with accesses to the reference counts (e.g. by `Weak`).
  675,990 ( 0.01%)          unsafe { &mut (*this.ptr.as_ptr()).value }
        .               }
        .           
        .               #[inline]
        .               #[stable(feature = "ptr_eq", since = "1.17.0")]
        .               /// Returns `true` if the two `Rc`s point to the same allocation
        .               /// (in a vein similar to [`ptr::eq`]).
        .               ///
        .               /// # Examples
-- line 1104 ----------------------------------------
-- line 1109 ----------------------------------------
        .               /// let five = Rc::new(5);
        .               /// let same_five = Rc::clone(&five);
        .               /// let other_five = Rc::new(5);
        .               ///
        .               /// assert!(Rc::ptr_eq(&five, &same_five));
        .               /// assert!(!Rc::ptr_eq(&five, &other_five));
        .               /// ```
        .               pub fn ptr_eq(this: &Self, other: &Self) -> bool {
    2,384 ( 0.00%)          this.ptr.as_ptr() == other.ptr.as_ptr()
        .               }
        .           }
        .           
        .           impl<T: Clone> Rc<T> {
        .               /// Makes a mutable reference into the given `Rc`.
        .               ///
        .               /// If there are other `Rc` pointers to the same allocation, then `make_mut` will
        .               /// [`clone`] the inner value to a new allocation to ensure unique ownership.  This is also
-- line 1125 ----------------------------------------
-- line 1167 ----------------------------------------
        .               /// *Rc::make_mut(&mut data) += 1;
        .               ///
        .               /// assert!(76 == *data);
        .               /// assert!(weak.upgrade().is_none());
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rc_unique", since = "1.4.0")]
1,984,477 ( 0.03%)      pub fn make_mut(this: &mut Self) -> &mut T {
1,190,679 ( 0.02%)          if Rc::strong_count(this) != 1 {
        .                       // Gotta clone the data, there are other Rcs.
        .                       // Pre-allocate memory to allow writing the cloned value directly.
  213,570 ( 0.00%)              let mut rc = Self::new_uninit();
        .                       unsafe {
        .                           let data = Rc::get_mut_unchecked(&mut rc);
        .                           (**this).write_clone_into_raw(data.as_mut_ptr());
  427,140 ( 0.01%)                  *this = rc.assume_init();
        .                       }
  366,650 ( 0.01%)          } else if Rc::weak_count(this) != 0 {
        .                       // Can just steal the data, all that's left is Weaks
        .                       let mut rc = Self::new_uninit();
        .                       unsafe {
        .                           let data = Rc::get_mut_unchecked(&mut rc);
        .                           data.as_mut_ptr().copy_from_nonoverlapping(&**this, 1);
        .           
        .                           this.inner().dec_strong();
        .                           // Remove implicit strong-weak ref (no need to craft a fake
-- line 1193 ----------------------------------------
-- line 1196 ----------------------------------------
        .                           ptr::write(this, rc.assume_init());
        .                       }
        .                   }
        .                   // This unsafety is ok because we're guaranteed that the pointer
        .                   // returned is the *only* pointer that will ever be returned to T. Our
        .                   // reference count is guaranteed to be 1 at this point, and we required
        .                   // the `Rc<T>` itself to be `mut`, so we're returning the only possible
        .                   // reference to the allocation.
  396,894 ( 0.01%)          unsafe { &mut this.ptr.as_mut().value }
2,381,370 ( 0.04%)      }
        .           }
        .           
        .           impl Rc<dyn Any> {
        .               #[inline]
        .               #[stable(feature = "rc_downcast", since = "1.29.0")]
        .               /// Attempt to downcast the `Rc<dyn Any>` to a concrete type.
        .               ///
        .               /// # Examples
-- line 1213 ----------------------------------------
-- line 1344 ----------------------------------------
        .                       )
        .                   }
        .               }
        .           
        .               /// Copy elements from slice into newly allocated Rc<\[T\]>
        .               ///
        .               /// Unsafe because the caller must either take ownership or bind `T: Copy`
        .               #[cfg(not(no_global_oom_handling))]
      638 ( 0.00%)      unsafe fn copy_from_slice(v: &[T]) -> Rc<[T]> {
        .                   unsafe {
        .                       let ptr = Self::allocate_for_slice(v.len());
      119 ( 0.00%)              ptr::copy_nonoverlapping(v.as_ptr(), &mut (*ptr).value as *mut [T] as *mut T, v.len());
        .                       Self::from_ptr(ptr)
        .                   }
      838 ( 0.00%)      }
        .           
        .               /// Constructs an `Rc<[T]>` from an iterator known to be of a certain size.
        .               ///
        .               /// Behavior is undefined should the size be wrong.
        .               #[cfg(not(no_global_oom_handling))]
        .               unsafe fn from_iter_exact(iter: impl iter::Iterator<Item = T>, len: usize) -> Rc<[T]> {
        .                   // Panic guard while cloning T elements.
        .                   // In the event of a panic, elements that have been written
-- line 1366 ----------------------------------------
-- line 1419 ----------------------------------------
        .                   unsafe { Self::from_iter_exact(v.iter().cloned(), v.len()) }
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           impl<T: Copy> RcFromSlice<T> for Rc<[T]> {
        .               #[inline]
        .               fn from_slice(v: &[T]) -> Self {
       17 ( 0.00%)          unsafe { Rc::copy_from_slice(v) }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: ?Sized> Deref for Rc<T> {
        .               type Target = T;
        .           
        .               #[inline(always)]
        .               fn deref(&self) -> &T {
  738,792 ( 0.01%)          &self.inner().value
        .               }
        .           }
        .           
        .           #[unstable(feature = "receiver_trait", issue = "none")]
        .           impl<T: ?Sized> Receiver for Rc<T> {}
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T: ?Sized> Drop for Rc<T> {
-- line 1445 ----------------------------------------
-- line 1463 ----------------------------------------
        .               /// }
        .               ///
        .               /// let foo  = Rc::new(Foo);
        .               /// let foo2 = Rc::clone(&foo);
        .               ///
        .               /// drop(foo);    // Doesn't print anything
        .               /// drop(foo2);   // Prints "dropped!"
        .               /// ```
4,251,786 ( 0.07%)      fn drop(&mut self) {
        .                   unsafe {
2,245,230 ( 0.04%)              self.inner().dec_strong();
5,197,148 ( 0.08%)              if self.inner().strong() == 0 {
        .                           // destroy the contained object
  320,990 ( 0.01%)                  ptr::drop_in_place(Self::get_mut_unchecked(self));
        .           
        .                           // remove the implicit "strong weak" pointer now that we've
        .                           // destroyed the contents.
        1 ( 0.00%)                  self.inner().dec_weak();
        .           
1,451,963 ( 0.02%)                  if self.inner().weak() == 0 {
      101 ( 0.00%)                      Global.deallocate(self.ptr.cast(), Layout::for_value(self.ptr.as_ref()));
        .                           }
        .                       }
        .                   }
4,699,514 ( 0.08%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: ?Sized> Clone for Rc<T> {
        .               /// Makes a clone of the `Rc` pointer.
        .               ///
        .               /// This creates another pointer to the same allocation, increasing the
        .               /// strong reference count.
-- line 1495 ----------------------------------------
-- line 1562 ----------------------------------------
        .           /// cost to pay off more easily. It's also more likely to have two `Rc` clones, that point to
        .           /// the same value, than two `&T`s.
        .           ///
        .           /// We can only do this when `T: Eq` as a `PartialEq` might be deliberately irreflexive.
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: ?Sized + MarkerEq> RcEqIdent<T> for Rc<T> {
        .               #[inline]
        .               fn eq(&self, other: &Rc<T>) -> bool {
    2,543 ( 0.00%)          Rc::ptr_eq(self, other) || **self == **other
        .               }
        .           
        .               #[inline]
        .               fn ne(&self, other: &Rc<T>) -> bool {
        .                   !Rc::ptr_eq(self, other) && **self != **other
        .               }
        .           }
        .           
-- line 1578 ----------------------------------------
-- line 1879 ----------------------------------------
        .               /// # use std::rc::Rc;
        .               /// let original: Box<Vec<i32>> = Box::new(vec![1, 2, 3]);
        .               /// let shared: Rc<Vec<i32>> = Rc::from(original);
        .               /// assert_eq!(vec![1, 2, 3], *shared);
        .               /// ```
        .               #[inline]
        .               fn from(mut v: Vec<T>) -> Rc<[T]> {
        .                   unsafe {
      198 ( 0.00%)              let rc = Rc::copy_from_slice(&v);
        .           
        .                       // Allow the Vec to free its memory, but not destroy its contents
        .                       v.set_len(0);
        .           
        .                       rc
        .                   }
        .               }
        .           }
-- line 1895 ----------------------------------------
-- line 2080 ----------------------------------------
        .               #[must_use]
        .               pub fn new() -> Weak<T> {
        .                   Weak { ptr: NonNull::new(usize::MAX as *mut RcBox<T>).expect("MAX is not 0") }
        .               }
        .           }
        .           
        .           pub(crate) fn is_dangling<T: ?Sized>(ptr: *mut T) -> bool {
        .               let address = ptr as *mut () as usize;
      141 ( 0.00%)      address == usize::MAX
        .           }
        .           
        .           /// Helper type to allow accessing the reference counts without
        .           /// making any assertions about the data field.
        .           struct WeakInner<'a> {
        .               weak: &'a Cell<usize>,
        .               strong: &'a Cell<usize>,
        .           }
-- line 2096 ----------------------------------------
-- line 2299 ----------------------------------------
        .                       })
        .                       .unwrap_or(0)
        .               }
        .           
        .               /// Returns `None` when the pointer is dangling and there is no allocated `RcBox`,
        .               /// (i.e., when this `Weak` was created by `Weak::new`).
        .               #[inline]
        .               fn inner(&self) -> Option<WeakInner<'_>> {
        1 ( 0.00%)          if is_dangling(self.ptr.as_ptr()) {
        .                       None
        .                   } else {
        .                       // We are careful to *not* create a reference covering the "data" field, as
        .                       // the field may be mutated concurrently (for example, if the last `Rc`
        .                       // is dropped, the data field will be dropped in-place).
        .                       Some(unsafe {
        .                           let ptr = self.ptr.as_ptr();
        .                           WeakInner { strong: &(*ptr).strong, weak: &(*ptr).weak }
-- line 2315 ----------------------------------------
-- line 2391 ----------------------------------------
        .               /// assert!(other_weak_foo.upgrade().is_none());
        .               /// ```
        .               fn drop(&mut self) {
        .                   let inner = if let Some(inner) = self.inner() { inner } else { return };
        .           
        .                   inner.dec_weak();
        .                   // the weak count starts at 1, and will only go to zero if all
        .                   // the strong pointers have disappeared.
        2 ( 0.00%)          if inner.weak() == 0 {
        .                       unsafe {
        .                           Global.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()));
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           #[stable(feature = "rc_weak", since = "1.4.0")]
-- line 2407 ----------------------------------------
-- line 2469 ----------------------------------------
        .           
        .               #[inline]
        .               fn strong(&self) -> usize {
        .                   self.strong_ref().get()
        .               }
        .           
        .               #[inline]
        .               fn inc_strong(&self) {
1,841,975 ( 0.03%)          let strong = self.strong();
        .           
        .                   // We want to abort on overflow instead of dropping the value.
        .                   // The reference count will never be zero when this is called;
        .                   // nevertheless, we insert an abort here to hint LLVM at
        .                   // an otherwise missed optimization.
5,698,726 ( 0.09%)          if strong == 0 || strong == usize::MAX {
        .                       abort();
        .                   }
   23,663 ( 0.00%)          self.strong_ref().set(strong + 1);
        .               }
        .           
        .               #[inline]
        .               fn dec_strong(&self) {
8,538,177 ( 0.14%)          self.strong_ref().set(self.strong() - 1);
        .               }
        .           
        .               #[inline]
        .               fn weak(&self) -> usize {
        .                   self.weak_ref().get()
        .               }
        .           
        .               #[inline]
-- line 2499 ----------------------------------------
-- line 2507 ----------------------------------------
        .                   if weak == 0 || weak == usize::MAX {
        .                       abort();
        .                   }
        .                   self.weak_ref().set(weak + 1);
        .               }
        .           
        .               #[inline]
        .               fn dec_weak(&self) {
2,179,473 ( 0.04%)          self.weak_ref().set(self.weak() - 1);
        .               }
        .           }
        .           
        .           impl<T: ?Sized> RcInnerPtr for RcBox<T> {
        .               #[inline(always)]
        .               fn weak_ref(&self) -> &Cell<usize> {
        .                   &self.weak
        .               }
-- line 2523 ----------------------------------------

2,605,932 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/rc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/macro_parser.rs
--------------------------------------------------------------------------------
Ir                  

-- line 90 ----------------------------------------
         .           use std::collections::hash_map::Entry::{Occupied, Vacant};
         .           use std::mem;
         .           use std::ops::{Deref, DerefMut};
         .           
         .           // To avoid costly uniqueness checks, we require that `MatchSeq` always has a nonempty body.
         .           
         .           /// Either a sequence of token trees or a single one. This is used as the representation of the
         .           /// sequence of tokens that make up a matcher.
   654,419 ( 0.01%)  #[derive(Clone)]
         .           enum TokenTreeOrTokenTreeSlice<'tt> {
        24 ( 0.00%)      Tt(TokenTree),
   161,626 ( 0.00%)      TtSeq(&'tt [TokenTree]),
         .           }
         .           
         .           impl<'tt> TokenTreeOrTokenTreeSlice<'tt> {
         .               /// Returns the number of constituent top-level token trees of `self` (top-level in that it
         .               /// will not recursively descend into subtrees).
         .               fn len(&self) -> usize {
 3,330,058 ( 0.05%)          match *self {
   740,892 ( 0.01%)              TtSeq(ref v) => v.len(),
         .                       Tt(ref tt) => tt.len(),
         .                   }
         .               }
         .           
         .               /// The `index`-th token tree of `self`.
         .               fn get_tt(&self, index: usize) -> TokenTree {
   722,294 ( 0.01%)          match *self {
 2,307,584 ( 0.04%)              TtSeq(ref v) => v[index].clone(),
   811,040 ( 0.01%)              Tt(ref tt) => tt.get_tt(index),
         .                   }
         .               }
         .           }
         .           
         .           /// An unzipping of `TokenTree`s... see the `stack` field of `MatcherPos`.
         .           ///
         .           /// This is used by `inner_parse_loop` to keep track of delimited submatchers that we have
         .           /// descended into.
   102,538 ( 0.00%)  #[derive(Clone)]
         .           struct MatcherTtFrame<'tt> {
         .               /// The "parent" matcher that we are descending into.
         .               elts: TokenTreeOrTokenTreeSlice<'tt>,
         .               /// The position of the "dot" in `elts` at the time we descended.
    51,269 ( 0.00%)      idx: usize,
         .           }
         .           
         .           type NamedMatchVec = SmallVec<[NamedMatch; 4]>;
         .           
         .           /// Represents a single "position" (aka "matcher position", aka "item"), as
         .           /// described in the module documentation.
         .           ///
         .           /// Here:
-- line 140 ----------------------------------------
-- line 147 ----------------------------------------
         .           ///   position refers to.
         .           ///
         .           /// It is important to distinguish these two lifetimes because we have a
         .           /// `SmallVec<TokenTreeOrTokenTreeSlice<'tt>>` below, and the destructor of
         .           /// that is considered to possibly access the data from its elements (it lacks
         .           /// a `#[may_dangle]` attribute). As a result, the compiler needs to know that
         .           /// all the elements in that `SmallVec` strictly outlive the root stack slot
         .           /// lifetime. By separating `'tt` from `'root`, we can show that.
 2,777,888 ( 0.04%)  #[derive(Clone)]
         .           struct MatcherPos<'root, 'tt> {
         .               /// The token or sequence of tokens that make up the matcher
         .               top_elts: TokenTreeOrTokenTreeSlice<'tt>,
         .           
         .               /// The position of the "dot" in this matcher
    59,104 ( 0.00%)      idx: usize,
         .           
         .               /// For each named metavar in the matcher, we keep track of token trees matched against the
         .               /// metavar by the black box parser. In particular, there may be more than one match per
         .               /// metavar if we are in a repetition (each repetition matches each of the variables).
         .               /// Moreover, matchers and repetitions can be nested; the `matches` field is shared (hence the
         .               /// `Rc`) among all "nested" matchers. `match_lo`, `match_cur`, and `match_hi` keep track of
         .               /// the current position of the `self` matcher position in the shared `matches` list.
         .               ///
         .               /// Also, note that while we are descending into a sequence, matchers are given their own
         .               /// `matches` vector. Only once we reach the end of a full repetition of the sequence do we add
         .               /// all bound matches from the submatcher into the shared top-level `matches` vector. If `sep`
         .               /// and `up` are `Some`, then `matches` is _not_ the shared top-level list. Instead, if one
         .               /// wants the shared `matches`, one should use `up.matches`.
   236,416 ( 0.00%)      matches: Box<[Lrc<NamedMatchVec>]>,
         .               /// The position in `matches` corresponding to the first metavar in this matcher's sequence of
         .               /// token trees. In other words, the first metavar in the first token of `top_elts` corresponds
         .               /// to `matches[match_lo]`.
    59,104 ( 0.00%)      match_lo: usize,
         .               /// The position in `matches` corresponding to the metavar we are currently trying to match
         .               /// against the source token stream. `match_lo <= match_cur <= match_hi`.
         .               match_cur: usize,
         .               /// Similar to `match_lo` except `match_hi` is the position in `matches` of the _last_ metavar
         .               /// in this matcher.
    59,104 ( 0.00%)      match_hi: usize,
         .           
         .               // The following fields are used if we are matching a repetition. If we aren't, they should be
         .               // `None`.
         .               /// The KleeneOp of this sequence if we are in a repetition.
    59,104 ( 0.00%)      seq_op: Option<mbe::KleeneOp>,
         .           
         .               /// The separator if we are in a repetition.
         .               sep: Option<Token>,
         .           
         .               /// The "parent" matcher position if we are in a repetition. That is, the matcher position just
         .               /// before we enter the sequence.
   118,208 ( 0.00%)      up: Option<MatcherPosHandle<'root, 'tt>>,
         .           
         .               /// Specifically used to "unzip" token trees. By "unzip", we mean to unwrap the delimiters from
         .               /// a delimited token tree (e.g., something wrapped in `(` `)`) or to get the contents of a doc
         .               /// comment...
         .               ///
         .               /// When matching against matchers with nested delimited submatchers (e.g., `pat ( pat ( .. )
         .               /// pat ) pat`), we need to keep track of the matchers we are descending into. This stack does
         .               /// that where the bottom of the stack is the outermost matcher.
         .               /// Also, throughout the comments, this "descent" is often referred to as "unzipping"...
         .               stack: SmallVec<[MatcherTtFrame<'tt>; 1]>,
         .           }
         .           
         .           impl<'root, 'tt> MatcherPos<'root, 'tt> {
         .               /// Adds `m` as a named match for the `idx`-th metavar.
         .               fn push_match(&mut self, idx: usize, m: NamedMatch) {
 1,360,388 ( 0.02%)          let matches = Lrc::make_mut(&mut self.matches[idx]);
         .                   matches.push(m);
         .               }
         .           }
         .           
         .           // Lots of MatcherPos instances are created at runtime. Allocating them on the
         .           // heap is slow. Furthermore, using SmallVec<MatcherPos> to allocate them all
         .           // on the stack is also slow, because MatcherPos is quite a large type and
         .           // instances get moved around a lot between vectors, which requires lots of
-- line 221 ----------------------------------------
-- line 226 ----------------------------------------
         .           // and this type is used to encapsulate both cases.
         .           enum MatcherPosHandle<'root, 'tt> {
         .               Ref(&'root mut MatcherPos<'root, 'tt>),
         .               Box(Box<MatcherPos<'root, 'tt>>),
         .           }
         .           
         .           impl<'root, 'tt> Clone for MatcherPosHandle<'root, 'tt> {
         .               // This always produces a new Box.
   236,416 ( 0.00%)      fn clone(&self) -> Self {
   118,208 ( 0.00%)          MatcherPosHandle::Box(match *self {
    54,429 ( 0.00%)              MatcherPosHandle::Ref(ref r) => Box::new((**r).clone()),
         .                       MatcherPosHandle::Box(ref b) => b.clone(),
         .                   })
   354,624 ( 0.01%)      }
         .           }
         .           
         .           impl<'root, 'tt> Deref for MatcherPosHandle<'root, 'tt> {
         .               type Target = MatcherPos<'root, 'tt>;
         .               fn deref(&self) -> &Self::Target {
         .                   match *self {
         .                       MatcherPosHandle::Ref(ref r) => r,
         .                       MatcherPosHandle::Box(ref b) => b,
-- line 247 ----------------------------------------
-- line 272 ----------------------------------------
         .           
         .           /// A `ParseResult` where the `Success` variant contains a mapping of
         .           /// `MacroRulesNormalizedIdent`s to `NamedMatch`es. This represents the mapping
         .           /// of metavars to the token trees they bind to.
         .           crate type NamedParseResult = ParseResult<FxHashMap<MacroRulesNormalizedIdent, NamedMatch>>;
         .           
         .           /// Count how many metavars are named in the given matcher `ms`.
         .           pub(super) fn count_names(ms: &[TokenTree]) -> usize {
 2,272,008 ( 0.04%)      ms.iter().fold(0, |count, elt| {
 1,136,004 ( 0.02%)          count
 3,408,012 ( 0.05%)              + match *elt {
    76,128 ( 0.00%)                  TokenTree::Sequence(_, ref seq) => seq.num_captures,
    71,949 ( 0.00%)                  TokenTree::Delimited(_, ref delim) => count_names(&delim.tts),
         .                           TokenTree::MetaVar(..) => 0,
         .                           TokenTree::MetaVarDecl(..) => 1,
         .                           TokenTree::Token(..) => 0,
         .                       }
 2,840,010 ( 0.05%)      })
         .           }
         .           
         .           /// `len` `Vec`s (initially shared and empty) that will store matches of metavars.
         .           fn create_matches(len: usize) -> Box<[Lrc<NamedMatchVec>]> {
   378,952 ( 0.01%)      if len == 0 {
         .                   vec![]
         .               } else {
         .                   let empty_matches = Lrc::new(SmallVec::new());
         .                   vec![empty_matches; len]
         .               }
         .               .into_boxed_slice()
         .           }
         .           
         .           /// Generates the top-level matcher position in which the "dot" is before the first token of the
         .           /// matcher `ms`.
         .           fn initial_matcher_pos<'root, 'tt>(ms: &'tt [TokenTree]) -> MatcherPos<'root, 'tt> {
         .               let match_idx_hi = count_names(ms);
         .               let matches = create_matches(match_idx_hi);
 1,850,565 ( 0.03%)      MatcherPos {
         .                   // Start with the top level matcher given to us
         .                   top_elts: TtSeq(ms), // "elts" is an abbr. for "elements"
         .                   // The "dot" is before the first token of the matcher
         .                   idx: 0,
         .           
         .                   // Initialize `matches` to a bunch of empty `Vec`s -- one for each metavar in `top_elts`.
         .                   // `match_lo` for `top_elts` is 0 and `match_hi` is `matches.len()`. `match_cur` is 0 since
         .                   // we haven't actually matched anything yet.
-- line 316 ----------------------------------------
-- line 340 ----------------------------------------
         .           /// particular token tree.
         .           ///
         .           /// The width of each `MatchedSeq` in the `NamedMatch`, and the identity of
         .           /// the `MatchedNonterminal`s, will depend on the token tree it was applied
         .           /// to: each `MatchedSeq` corresponds to a single `TTSeq` in the originating
         .           /// token tree. The depth of the `NamedMatch` structure will therefore depend
         .           /// only on the nesting depth of `ast::TTSeq`s in the originating
         .           /// token tree it was derived from.
     3,176 ( 0.00%)  #[derive(Debug, Clone)]
         .           crate enum NamedMatch {
         .               MatchedSeq(Lrc<NamedMatchVec>),
         .               MatchedNonterminal(Lrc<Nonterminal>),
         .           }
         .           
         .           /// Takes a sequence of token trees `ms` representing a matcher which successfully matched input
         .           /// and an iterator of items that matched input and produces a `NamedParseResult`.
         .           fn nameize<I: Iterator<Item = NamedMatch>>(
-- line 356 ----------------------------------------
-- line 357 ----------------------------------------
         .               sess: &ParseSess,
         .               ms: &[TokenTree],
         .               mut res: I,
         .           ) -> NamedParseResult {
         .               // Recursively descend into each type of matcher (e.g., sequences, delimited, metavars) and make
         .               // sure that each metavar has _exactly one_ binding. If a metavar does not have exactly one
         .               // binding, then there is an error. If it does, then we insert the binding into the
         .               // `NamedParseResult`.
   813,142 ( 0.01%)      fn n_rec<I: Iterator<Item = NamedMatch>>(
         .                   sess: &ParseSess,
         .                   m: &TokenTree,
         .                   res: &mut I,
         .                   ret_val: &mut FxHashMap<MacroRulesNormalizedIdent, NamedMatch>,
         .               ) -> Result<(), (rustc_span::Span, String)> {
   483,194 ( 0.01%)          match *m {
         .                       TokenTree::Sequence(_, ref seq) => {
     5,123 ( 0.00%)                  for next_m in &seq.tts {
    30,954 ( 0.00%)                      n_rec(sess, next_m, res.by_ref(), ret_val)?
         .                           }
         .                       }
         .                       TokenTree::Delimited(_, ref delim) => {
     7,330 ( 0.00%)                  for next_m in &delim.tts {
    43,980 ( 0.00%)                      n_rec(sess, next_m, res.by_ref(), ret_val)?;
         .                           }
         .                       }
         .                       TokenTree::MetaVarDecl(span, _, None) => {
         .                           if sess.missing_fragment_specifiers.borrow_mut().remove(&span).is_some() {
         .                               return Err((span, "missing fragment specifier".to_string()));
         .                           }
         .                       }
   340,752 ( 0.01%)              TokenTree::MetaVarDecl(sp, bind_name, _) => match ret_val
   227,168 ( 0.00%)                  .entry(MacroRulesNormalizedIdent::new(bind_name))
         .                       {
         .                           Vacant(spot) => {
         .                               spot.insert(res.next().unwrap());
         .                           }
         .                           Occupied(..) => return Err((sp, format!("duplicated bind name: {}", bind_name))),
         .                       },
         .                       TokenTree::MetaVar(..) | TokenTree::Token(..) => (),
         .                   }
         .           
    73,922 ( 0.00%)          Ok(())
   591,376 ( 0.01%)      }
         .           
         .               let mut ret_val = FxHashMap::default();
         .               for m in ms {
   544,119 ( 0.01%)          match n_rec(sess, m, res.by_ref(), &mut ret_val) {
         .                       Ok(_) => {}
         .                       Err((sp, msg)) => return Error(sp, msg),
         .                   }
         .               }
         .           
    94,986 ( 0.00%)      Success(ret_val)
         .           }
         .           
         .           /// Performs a token equality check, ignoring syntax context (that is, an unhygienic comparison)
         .           fn token_name_eq(t1: &Token, t2: &Token) -> bool {
   967,402 ( 0.02%)      if let (Some((ident1, is_raw1)), Some((ident2, is_raw2))) = (t1.ident(), t2.ident()) {
        27 ( 0.00%)          ident1.name == ident2.name && is_raw1 == is_raw2
 1,353,989 ( 0.02%)      } else if let (Some(ident1), Some(ident2)) = (t1.lifetime(), t2.lifetime()) {
         .                   ident1.name == ident2.name
         .               } else {
   580,192 ( 0.01%)          t1.kind == t2.kind
         .               }
         .           }
         .           
         .           /// Process the matcher positions of `cur_items` until it is empty. In the process, this will
         .           /// produce more items in `next_items`, `eof_items`, and `bb_items`.
         .           ///
         .           /// For more info about the how this happens, see the module-level doc comments and the inline
         .           /// comments of this function.
-- line 427 ----------------------------------------
-- line 443 ----------------------------------------
         .               sess: &ParseSess,
         .               cur_items: &mut SmallVec<[MatcherPosHandle<'root, 'tt>; 1]>,
         .               next_items: &mut Vec<MatcherPosHandle<'root, 'tt>>,
         .               eof_items: &mut SmallVec<[MatcherPosHandle<'root, 'tt>; 1]>,
         .               bb_items: &mut SmallVec<[MatcherPosHandle<'root, 'tt>; 1]>,
         .               token: &Token,
         .           ) -> ParseResult<()> {
         .               // Pop items from `cur_items` until it is empty.
 2,338,224 ( 0.04%)      while let Some(mut item) = cur_items.pop() {
         .                   // When unzipped trees end, remove them. This corresponds to backtracking out of a
         .                   // delimited submatcher into which we already descended. In backtracking out again, we need
         .                   // to advance the "dot" past the delimiters in the outer matcher.
 7,191,314 ( 0.12%)          while item.idx >= item.top_elts.len() {
    16,530 ( 0.00%)              match item.stack.pop() {
         .                           Some(MatcherTtFrame { elts, idx }) => {
    74,385 ( 0.00%)                      item.top_elts = elts;
    33,060 ( 0.00%)                      item.idx = idx + 1;
         .                           }
         .                           None => break,
         .                       }
         .                   }
         .           
         .                   // Get the current position of the "dot" (`idx`) in `item` and the number of token trees in
         .                   // the matcher (`len`).
         .                   let idx = item.idx;
         .                   let len = item.top_elts.len();
         .           
         .                   // If `idx >= len`, then we are at or past the end of the matcher of `item`.
 1,575,779 ( 0.03%)          if idx >= len {
         .                       // We are repeating iff there is a parent. If the matcher is inside of a repetition,
         .                       // then we could be at the end of a sequence or at the beginning of the next
         .                       // repetition.
    71,775 ( 0.00%)              if item.up.is_some() {
         .                           // At this point, regardless of whether there is a separator, we should add all
         .                           // matches from the complete repetition of the sequence to the shared, top-level
         .                           // `matches` list (actually, `up.matches`, which could itself not be the top-level,
         .                           // but anyway...). Moreover, we add another item to `cur_items` in which the "dot"
         .                           // is at the end of the `up` matcher. This ensures that the "dot" in the `up`
         .                           // matcher is also advanced sufficiently.
         .                           //
         .                           // NOTE: removing the condition `idx == len` allows trailing separators.
   107,996 ( 0.00%)                  if idx == len {
         .                               // Get the `up` matcher
         .                               let mut new_pos = item.up.clone().unwrap();
         .           
         .                               // Add matches from this repetition to the `matches` of `up`
   107,820 ( 0.00%)                      for idx in item.match_lo..item.match_hi {
   269,535 ( 0.00%)                          let sub = item.matches[idx].clone();
   161,721 ( 0.00%)                          new_pos.push_match(idx, MatchedSeq(sub));
         .                               }
         .           
         .                               // Move the "dot" past the repetition in `up`
   107,728 ( 0.00%)                      new_pos.match_cur = item.match_hi;
   323,460 ( 0.01%)                      new_pos.idx += 1;
         .                               cur_items.push(new_pos);
         .                           }
         .           
         .                           // Check if we need a separator.
    53,910 ( 0.00%)                  if idx == len && item.sep.is_some() {
         .                               // We have a separator, and it is the current token. We can advance past the
         .                               // separator token.
       178 ( 0.00%)                      if item.sep.as_ref().map_or(false, |sep| token_name_eq(token, sep)) {
       616 ( 0.00%)                          item.idx += 1;
         .                                   next_items.push(item);
         .                               }
         .                           }
         .                           // We don't need a separator. Move the "dot" back to the beginning of the matcher
         .                           // and try to match again UNLESS we are only allowed to have _one_ repetition.
    53,909 ( 0.00%)                  else if item.seq_op != Some(mbe::KleeneOp::ZeroOrOne) {
   107,810 ( 0.00%)                      item.match_cur = item.match_lo;
   215,620 ( 0.00%)                      item.idx = 0;
         .                               cur_items.push(item);
         .                           }
         .                       }
         .                       // If we are not in a repetition, then being at the end of a matcher means that we have
         .                       // reached the potential end of the input.
         .                       else {
         .                           eof_items.push(item);
         .                       }
         .                   }
         .                   // We are in the middle of a matcher.
         .                   else {
         .                       // Look at what token in the matcher we are trying to match the current token (`token`)
         .                       // against. Depending on that, we may generate new items.
 2,302,861 ( 0.04%)              match item.top_elts.get_tt(idx) {
         .                           // Need to descend into a sequence
    24,948 ( 0.00%)                  TokenTree::Sequence(sp, seq) => {
         .                               // Examine the case where there are 0 matches of this sequence. We are
         .                               // implicitly disallowing OneOrMore from having 0 matches here. Thus, that will
         .                               // result in a "no rules expected token" error by virtue of this matcher not
         .                               // working.
    10,432 ( 0.00%)                      if seq.kleene.op == mbe::KleeneOp::ZeroOrMore
         .                                   || seq.kleene.op == mbe::KleeneOp::ZeroOrOne
         .                               {
    10,388 ( 0.00%)                          let mut new_item = item.clone();
    20,776 ( 0.00%)                          new_item.match_cur += seq.num_captures;
    25,970 ( 0.00%)                          new_item.idx += 1;
    31,164 ( 0.00%)                          for idx in item.match_cur..item.match_cur + seq.num_captures {
    15,297 ( 0.00%)                              new_item.push_match(idx, MatchedSeq(Lrc::new(smallvec![])));
         .                                   }
         .                                   cur_items.push(new_item);
         .                               }
         .           
     5,216 ( 0.00%)                      let matches = create_matches(item.matches.len());
    62,592 ( 0.00%)                      cur_items.push(MatcherPosHandle::Box(Box::new(MatcherPos {
     5,216 ( 0.00%)                          stack: smallvec![],
         .                                   sep: seq.separator.clone(),
     5,216 ( 0.00%)                          seq_op: Some(seq.kleene.op),
         .                                   idx: 0,
    26,080 ( 0.00%)                          matches,
    10,432 ( 0.00%)                          match_lo: item.match_cur,
         .                                   match_cur: item.match_cur,
    10,432 ( 0.00%)                          match_hi: item.match_cur + seq.num_captures,
         .                                   up: Some(item),
    36,512 ( 0.00%)                          top_elts: Tt(TokenTree::Sequence(sp, seq)),
         .                               })));
         .                           }
         .           
         .                           // We need to match a metavar (but the identifier is invalid)... this is an error
         .                           TokenTree::MetaVarDecl(span, _, None) => {
         .                               if sess.missing_fragment_specifiers.borrow_mut().remove(&span).is_some() {
         .                                   return Error(span, "missing fragment specifier".to_string());
         .                               }
-- line 565 ----------------------------------------
-- line 568 ----------------------------------------
         .                           // We need to match a metavar with a valid ident... call out to the black-box
         .                           // parser by adding an item to `bb_items`.
         .                           TokenTree::MetaVarDecl(_, _, Some(kind)) => {
         .                               // Built-in nonterminals never start with these tokens, so we can eliminate
         .                               // them from consideration.
         .                               //
         .                               // We use the span of the metavariable declaration to determine any
         .                               // edition-specific matching behavior for non-terminals.
 1,432,955 ( 0.02%)                      if Parser::nonterminal_may_begin_with(kind, token) {
         .                                   bb_items.push(item);
         .                               }
         .                           }
         .           
         .                           // We need to descend into a delimited submatcher or a doc comment. To do this, we
         .                           // push the current matcher onto a stack and push a new item containing the
         .                           // submatcher onto `cur_items`.
         .                           //
         .                           // At the beginning of the loop, if we reach the end of the delimited submatcher,
         .                           // we pop the stack to backtrack out of the descent.
   138,135 ( 0.00%)                  seq @ (TokenTree::Delimited(..)
         .                           | TokenTree::Token(Token { kind: DocComment(..), .. })) => {
         .                               let lower_elts = mem::replace(&mut item.top_elts, Tt(seq));
    27,627 ( 0.00%)                      let idx = item.idx;
   193,389 ( 0.00%)                      item.stack.push(MatcherTtFrame { elts: lower_elts, idx });
   110,508 ( 0.00%)                      item.idx = 0;
         .                               cur_items.push(item);
         .                           }
         .           
         .                           // We just matched a normal token. We can just advance the parser.
   557,446 ( 0.01%)                  TokenTree::Token(t) if token_name_eq(&t, token) => {
   239,078 ( 0.00%)                      item.idx += 1;
         .                               next_items.push(item);
         .                           }
         .           
         .                           // There was another token that was not `token`... This means we can't add any
         .                           // rules. NOTE that this is not necessarily an error unless _all_ items in
         .                           // `cur_items` end up doing this. There may still be some other matchers that do
         .                           // end up working out.
         .                           TokenTree::Token(..) | TokenTree::MetaVar(..) => {}
         .                       }
 2,619,117 ( 0.04%)          }
   970,308 ( 0.02%)      }
         .           
         .               // Yay a successful parse (so far)!
         .               Success(())
         .           }
         .           
         .           /// Use the given sequence of token trees (`ms`) as a matcher. Match the token
         .           /// stream from the given `parser` against it and return the match.
 1,233,710 ( 0.02%)  pub(super) fn parse_tt(
         .               parser: &mut Cow<'_, Parser<'_>>,
         .               ms: &[TokenTree],
         .               macro_name: Ident,
         .           ) -> NamedParseResult {
         .               // A queue of possible matcher positions. We initialize it with the matcher position in which
         .               // the "dot" is before the first token of the first token tree in `ms`. `inner_parse_loop` then
         .               // processes all of these possible matcher positions and produces possible next positions into
         .               // `next_items`. After some post-processing, the contents of `next_items` replenish `cur_items`
         .               // and we start over again.
         .               //
         .               // This MatcherPos instance is allocated on the stack. All others -- and
         .               // there are frequently *no* others! -- are allocated on the heap.
         .               let mut initial = initial_matcher_pos(ms);
   616,855 ( 0.01%)      let mut cur_items = smallvec![MatcherPosHandle::Ref(&mut initial)];
         .               let mut next_items = Vec::new();
         .           
         .               loop {
         .                   // Matcher positions black-box parsed by parser.rs (`parser`)
         .                   let mut bb_items = SmallVec::new();
         .           
         .                   // Matcher positions that would be valid if the macro invocation was over now
         .                   let mut eof_items = SmallVec::new();
   438,616 ( 0.01%)          assert!(next_items.is_empty());
         .           
         .                   // Process `cur_items` until either we have finished the input or we need to get some
         .                   // parsing from the black-box parser done. The result is that `next_items` will contain a
         .                   // bunch of possible next matcher positions in `next_items`.
         .                   match inner_parse_loop(
         .                       parser.sess,
         .                       &mut cur_items,
         .                       &mut next_items,
-- line 648 ----------------------------------------
-- line 652 ----------------------------------------
         .                   ) {
         .                       Success(_) => {}
         .                       Failure(token, msg) => return Failure(token, msg),
         .                       Error(sp, msg) => return Error(sp, msg),
         .                       ErrorReported => return ErrorReported,
         .                   }
         .           
         .                   // inner parse loop handled all cur_items, so it's empty
   438,616 ( 0.01%)          assert!(cur_items.is_empty());
         .           
         .                   // We need to do some post processing after the `inner_parser_loop`.
         .                   //
         .                   // Error messages here could be improved with links to original rules.
         .           
         .                   // If we reached the EOF, check that there is EXACTLY ONE possible matcher. Otherwise,
         .                   // either the parse is ambiguous (which should never happen) or there is a syntax error.
 2,193,080 ( 0.04%)          if parser.token == token::Eof {
    42,216 ( 0.00%)              if eof_items.len() == 1 {
         .                           let matches =
    77,900 ( 0.00%)                      eof_items[0].matches.iter_mut().map(|dv| Lrc::make_mut(dv).pop().unwrap());
    31,662 ( 0.00%)                  return nameize(parser.sess, ms, matches);
         .                       } else if eof_items.len() > 1 {
         .                           return Error(
         .                               parser.token.span,
         .                               "ambiguity: multiple successful parses".to_string(),
         .                           );
         .                       } else {
         .                           return Failure(
         .                               Token::new(
-- line 680 ----------------------------------------
-- line 687 ----------------------------------------
         .                               ),
         .                               "missing tokens in macro arguments",
         .                           );
         .                       }
         .                   }
         .                   // Performance hack: eof_items may share matchers via Rc with other things that we want
         .                   // to modify. Dropping eof_items now may drop these refcounts to 1, preventing an
         .                   // unnecessary implicit clone later in Rc::make_mut.
 1,712,248 ( 0.03%)          drop(eof_items);
         .           
         .                   // If there are no possible next positions AND we aren't waiting for the black-box parser,
         .                   // then there is a syntax error.
 1,431,157 ( 0.02%)          if bb_items.is_empty() && next_items.is_empty() {
 1,466,621 ( 0.02%)              return Failure(parser.token.clone(), "no rules expected this token in macro call");
         .                   }
         .                   // Another possibility is that we need to call out to parse some rust nonterminal
         .                   // (black-box) parser. However, if there is not EXACTLY ONE of these, something is wrong.
 1,124,364 ( 0.02%)          else if (!bb_items.is_empty() && !next_items.is_empty()) || bb_items.len() > 1 {
         .                       let nts = bb_items
         .                           .iter()
         .                           .map(|item| match item.top_elts.get_tt(item.idx) {
         .                               TokenTree::MetaVarDecl(_, bind, Some(kind)) => format!("{} ('{}')", kind, bind),
         .                               _ => panic!(),
         .                           })
         .                           .collect::<Vec<String>>()
         .                           .join(" or ");
-- line 712 ----------------------------------------
-- line 721 ----------------------------------------
         .                                   n => format!("built-in NTs {} or {} other options.", nts, n),
         .                               }
         .                           ),
         .                       );
         .                   }
         .                   // Dump all possible `next_items` into `cur_items` for the next iteration.
         .                   else if !next_items.is_empty() {
         .                       // Now process the next token
   102,462 ( 0.00%)              cur_items.extend(next_items.drain(..));
    34,154 ( 0.00%)              parser.to_mut().bump();
         .                   }
         .                   // Finally, we have the case where we need to call the black-box parser to get some
         .                   // nonterminal.
         .                   else {
         .                       assert_eq!(bb_items.len(), 1);
         .           
   562,182 ( 0.01%)              let mut item = bb_items.pop().unwrap();
 1,576,047 ( 0.03%)              if let TokenTree::MetaVarDecl(span, _, Some(kind)) = item.top_elts.get_tt(item.idx) {
   281,091 ( 0.00%)                  let match_cur = item.match_cur;
         .                           // We use the span of the metavariable declaration to determine any
         .                           // edition-specific matching behavior for non-terminals.
 1,809,382 ( 0.03%)                  let nt = match parser.to_mut().parse_nonterminal(kind) {
         .                               Err(mut err) => {
         .                                   err.span_label(
         .                                       span,
         .                                       format!("while parsing argument for this `{}` macro fragment", kind),
         .                                   )
         .                                   .emit();
         .                                   return ErrorReported;
         .                               }
 1,686,546 ( 0.03%)                      Ok(nt) => nt,
         .                           };
 1,124,364 ( 0.02%)                  item.push_match(match_cur, MatchedNonterminal(Lrc::new(nt)));
 1,124,364 ( 0.02%)                  item.idx += 1;
 1,686,546 ( 0.03%)                  item.match_cur += 1;
         .                       } else {
         .                           unreachable!()
         .                       }
         .                       cur_items.push(item);
         .                   }
         .           
   630,490 ( 0.01%)          assert!(!cur_items.is_empty());
         .               }
 1,110,339 ( 0.02%)  }

10,195,613 ( 0.16%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/macro_parser.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 180 ----------------------------------------
         .           /// assert_eq!(v, &[0.into()]);
         .           ///
         .           /// // Ensure that the last item was dropped.
         .           /// assert!(weak.upgrade().is_none());
         .           /// ```
         .           #[stable(feature = "drop_in_place", since = "1.8.0")]
         .           #[lang = "drop_in_place"]
         .           #[allow(unconditional_recursion)]
57,489,860 ( 0.92%)  pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
         .               // Code here does not matter - this is replaced by the
         .               // real drop glue by the compiler.
         .           
         .               // SAFETY: see comment above
         .               unsafe { drop_in_place(to_drop) }
         .           }
         .           
         .           /// Creates a null raw pointer.
-- line 196 ----------------------------------------
-- line 367 ----------------------------------------
         .           
         .               // Perform the swap
         .               // SAFETY: the caller must guarantee that `x` and `y` are
         .               // valid for writes and properly aligned. `tmp` cannot be
         .               // overlapping either `x` or `y` because `tmp` was just allocated
         .               // on the stack as a separate allocated object.
         .               unsafe {
         .                   copy_nonoverlapping(x, tmp.as_mut_ptr(), 1);
       232 ( 0.00%)          copy(y, x, 1); // `x` and `y` may overlap
         .                   copy_nonoverlapping(tmp.as_ptr(), y, 1);
         .               }
         .           }
         .           
         .           /// Swaps `count * size_of::<T>()` bytes between the two regions of memory
         .           /// beginning at `x` and `y`. The two regions must *not* overlap.
         .           ///
         .           /// # Safety
-- line 383 ----------------------------------------
-- line 448 ----------------------------------------
         .                       return;
         .                   }
         .               }
         .           
         .               // Direct swapping, for the cases not going through the block optimization.
         .               // SAFETY: the caller must guarantee that `x` and `y` are valid
         .               // for writes, properly aligned, and non-overlapping.
         .               unsafe {
     1,038 ( 0.00%)          let z = read(x);
       102 ( 0.00%)          copy_nonoverlapping(y, x, 1);
         .                   write(y, z);
         .               }
         .           }
         .           
         .           #[inline]
         .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
         .           const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
         .               // The approach here is to utilize simd to swap x & y efficiently. Testing reveals
-- line 465 ----------------------------------------
-- line 693 ----------------------------------------
         .               let mut tmp = MaybeUninit::<T>::uninit();
         .               // SAFETY: the caller must guarantee that `src` is valid for reads.
         .               // `src` cannot overlap `tmp` because `tmp` was just allocated on
         .               // the stack as a separate allocated object.
         .               //
         .               // Also, since we just wrote a valid value into `tmp`, it is guaranteed
         .               // to be properly initialized.
         .               unsafe {
 5,282,951 ( 0.08%)          copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
 8,955,547 ( 0.14%)          tmp.assume_init()
         .               }
         .           }
         .           
         .           /// Reads the value from `src` without moving it. This leaves the
         .           /// memory in `src` unchanged.
         .           ///
         .           /// Unlike [`read`], `read_unaligned` works with unaligned pointers.
         .           ///
-- line 710 ----------------------------------------
-- line 884 ----------------------------------------
         .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
         .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
         .               }
         .           
         .               // SAFETY: the caller must guarantee that `dst` is valid for writes.
         .               // `dst` cannot overlap `src` because the caller has mutable access
         .               // to `dst` while `src` is owned by this function.
         .               unsafe {
51,525,679 ( 0.83%)          copy_nonoverlapping(&src as *const T, dst, 1);
         .                   intrinsics::forget(src);
         .               }
         .           }
         .           
         .           /// Overwrites a memory location with the given value without reading or
         .           /// dropping the old value.
         .           ///
         .           /// Unlike [`write()`], the pointer may be unaligned.
-- line 900 ----------------------------------------
-- line 1206 ----------------------------------------
         .               if stride == 1 {
         .                   // `stride == 1` case can be computed more simply through `-p (mod a)`, but doing so
         .                   // inhibits LLVM's ability to select instructions like `lea`. Instead we compute
         .                   //
         .                   //    round_up_to_next_alignment(p, a) - p
         .                   //
         .                   // which distributes operations around the load-bearing, but pessimizing `and` sufficiently
         .                   // for LLVM to be able to utilize the various optimizations it knows about.
       741 ( 0.00%)          return wrapping_sub(
     2,086 ( 0.00%)              wrapping_add(p as usize, a_minus_one) & wrapping_sub(0, a),
         .                       p as usize,
         .                   );
         .               }
         .           
         .               let pmoda = p as usize & a_minus_one;
         .               if pmoda == 0 {
         .                   // Already aligned. Yay!
         .                   return 0;
-- line 1223 ----------------------------------------
-- line 1348 ----------------------------------------
         .           /// assert!(std::ptr::eq(
         .           ///     &wrapper as &dyn Trait as *const dyn Trait as *const u8,
         .           ///     &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,
         .           /// ));
         .           /// ```
         .           #[stable(feature = "ptr_eq", since = "1.17.0")]
         .           #[inline]
         .           pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
   933,511 ( 0.02%)      a == b
         .           }
         .           
         .           /// Hash a raw pointer.
         .           ///
         .           /// This can be used to hash a `&T` reference (which coerces to `*const T` implicitly)
         .           /// by its address rather than the value it points to
         .           /// (which is what the `Hash for &T` implementation does).
         .           ///
-- line 1364 ----------------------------------------

 8,129,803 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs
--------------------------------------------------------------------------------
Ir                 

-- line 32 ----------------------------------------
        .           ///
        .           /// If the syntax extension is an MBE macro, it will attempt to match its
        .           /// LHS token tree against the provided token tree, and if it finds a
        .           /// match, will transcribe the RHS token tree, splicing in any captured
        .           /// `macro_parser::matched_nonterminals` into the `SubstNt`s it finds.
        .           ///
        .           /// The RHS of an MBE macro is the only place `SubstNt`s are substituted.
        .           /// Nothing special happens to misnamed or misplaced `SubstNt`s.
8,292,778 ( 0.13%)  #[derive(Debug, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
        .           pub enum TokenTree {
        .               /// A single token.
3,252,220 ( 0.05%)      Token(Token),
        .               /// A delimited sequence of token trees.
  254,070 ( 0.00%)      Delimited(DelimSpan, DelimToken, TokenStream),
        .           }
        .           
        .           #[derive(Copy, Clone)]
        .           pub enum CanSynthesizeMissingTokens {
        .               Yes,
        .               No,
        .           }
        .           
-- line 53 ----------------------------------------
-- line 71 ----------------------------------------
        .                           delim == delim2 && tts.eq_unspanned(&tts2)
        .                       }
        .                       _ => false,
        .                   }
        .               }
        .           
        .               /// Retrieves the `TokenTree`'s span.
        .               pub fn span(&self) -> Span {
   81,152 ( 0.00%)          match self {
   33,980 ( 0.00%)              TokenTree::Token(token) => token.span,
   26,856 ( 0.00%)              TokenTree::Delimited(sp, ..) => sp.entire(),
        .                   }
   33,883 ( 0.00%)      }
        .           
        .               /// Modify the `TokenTree`'s span in-place.
        .               pub fn set_span(&mut self, span: Span) {
   81,152 ( 0.00%)          match self {
   33,883 ( 0.00%)              TokenTree::Token(token) => token.span = span,
   13,386 ( 0.00%)              TokenTree::Delimited(dspan, ..) => *dspan = DelimSpan::from_single(span),
        .                   }
   40,576 ( 0.00%)      }
        .           
   13,905 ( 0.00%)      pub fn token(kind: TokenKind, span: Span) -> TokenTree {
  845,416 ( 0.01%)          TokenTree::Token(Token::new(kind, span))
   13,905 ( 0.00%)      }
        .           
        .               /// Returns the opening delimiter as a token tree.
  107,683 ( 0.00%)      pub fn open_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
  323,049 ( 0.01%)          TokenTree::token(token::OpenDelim(delim), span.open)
  107,683 ( 0.00%)      }
        .           
        .               /// Returns the closing delimiter as a token tree.
   89,766 ( 0.00%)      pub fn close_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
  269,298 ( 0.00%)          TokenTree::token(token::CloseDelim(delim), span.close)
   89,766 ( 0.00%)      }
        .           
      609 ( 0.00%)      pub fn uninterpolate(self) -> TokenTree {
      406 ( 0.00%)          match self {
    1,827 ( 0.00%)              TokenTree::Token(token) => TokenTree::Token(token.uninterpolate().into_owned()),
        .                       tt => tt,
        .                   }
      812 ( 0.00%)      }
        .           }
        .           
        .           impl<CTX> HashStable<CTX> for TokenStream
        .           where
        .               CTX: crate::HashStableContext,
        .           {
      477 ( 0.00%)      fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
    2,543 ( 0.00%)          for sub_tt in self.trees() {
        .                       sub_tt.hash_stable(hcx, hasher);
        .                   }
      424 ( 0.00%)      }
        .           }
        .           
        .           pub trait CreateTokenStream: sync::Send + sync::Sync {
        .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream;
        .           }
        .           
        .           impl CreateTokenStream for AttrAnnotatedTokenStream {
        .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream {
-- line 131 ----------------------------------------
-- line 135 ----------------------------------------
        .           
        .           /// A lazy version of [`TokenStream`], which defers creation
        .           /// of an actual `TokenStream` until it is needed.
        .           /// `Box` is here only to reduce the structure size.
        .           #[derive(Clone)]
        .           pub struct LazyTokenStream(Lrc<Box<dyn CreateTokenStream>>);
        .           
        .           impl LazyTokenStream {
       32 ( 0.00%)      pub fn new(inner: impl CreateTokenStream + 'static) -> LazyTokenStream {
        .                   LazyTokenStream(Lrc::new(Box::new(inner)))
       32 ( 0.00%)      }
        .           
        .               pub fn create_token_stream(&self) -> AttrAnnotatedTokenStream {
        8 ( 0.00%)          self.0.create_token_stream()
        .               }
        .           }
        .           
        .           impl fmt::Debug for LazyTokenStream {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(f, "LazyTokenStream({:?})", self.create_token_stream())
        .               }
        .           }
-- line 156 ----------------------------------------
-- line 188 ----------------------------------------
        .               Delimited(DelimSpan, DelimToken, AttrAnnotatedTokenStream),
        .               /// Stores the attributes for an attribute target,
        .               /// along with the tokens for that attribute target.
        .               /// See `AttributesData` for more information
        .               Attributes(AttributesData),
        .           }
        .           
        .           impl AttrAnnotatedTokenStream {
   61,160 ( 0.00%)      pub fn new(tokens: Vec<(AttrAnnotatedTokenTree, Spacing)>) -> AttrAnnotatedTokenStream {
        .                   AttrAnnotatedTokenStream(Lrc::new(tokens))
   61,160 ( 0.00%)      }
        .           
        .               /// Converts this `AttrAnnotatedTokenStream` to a plain `TokenStream
        .               /// During conversion, `AttrAnnotatedTokenTree::Attributes` get 'flattened'
        .               /// back to a `TokenStream` of the form `outer_attr attr_target`.
        .               /// If there are inner attributes, they are inserted into the proper
        .               /// place in the attribute target tokens.
        2 ( 0.00%)      pub fn to_tokenstream(&self) -> TokenStream {
        2 ( 0.00%)          let trees: Vec<_> = self
        .                       .0
        .                       .iter()
        6 ( 0.00%)              .flat_map(|tree| match &tree.0 {
        4 ( 0.00%)                  AttrAnnotatedTokenTree::Token(inner) => {
       10 ( 0.00%)                      smallvec![(TokenTree::Token(inner.clone()), tree.1)].into_iter()
        .                           }
        .                           AttrAnnotatedTokenTree::Delimited(span, delim, stream) => smallvec![(
        .                               TokenTree::Delimited(*span, *delim, stream.to_tokenstream()),
        .                               tree.1,
        .                           )]
        .                           .into_iter(),
        .                           AttrAnnotatedTokenTree::Attributes(data) => {
        .                               let mut outer_attrs = Vec::new();
-- line 219 ----------------------------------------
-- line 279 ----------------------------------------
        .                                   flat.extend(attr.tokens().to_tokenstream().0.clone().iter().cloned());
        .                               }
        .                               flat.extend(target_tokens);
        .                               flat.into_iter()
        .                           }
        .                       })
        .                       .collect();
        .                   TokenStream::new(trees)
        4 ( 0.00%)      }
        .           }
        .           
        .           /// Stores the tokens for an attribute target, along
        .           /// with its attributes.
        .           ///
        .           /// This is constructed during parsing when we need to capture
        .           /// tokens.
        .           ///
-- line 295 ----------------------------------------
-- line 316 ----------------------------------------
        .           pub struct TokenStream(pub(crate) Lrc<Vec<TreeAndSpacing>>);
        .           
        .           pub type TreeAndSpacing = (TokenTree, Spacing);
        .           
        .           // `TokenStream` is used a lot. Make sure it doesn't unintentionally get bigger.
        .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
        .           rustc_data_structures::static_assert_size!(TokenStream, 8);
        .           
  978,741 ( 0.02%)  #[derive(Clone, Copy, Debug, PartialEq, Encodable, Decodable)]
        .           pub enum Spacing {
        .               Alone,
        .               Joint,
        .           }
        .           
        .           impl TokenStream {
        .               /// Given a `TokenStream` with a `Stream` of only two arguments, return a new `TokenStream`
        .               /// separating the two arguments with a comma for diagnostic suggestions.
-- line 332 ----------------------------------------
-- line 371 ----------------------------------------
        .           impl From<(AttrAnnotatedTokenTree, Spacing)> for AttrAnnotatedTokenStream {
        .               fn from((tree, spacing): (AttrAnnotatedTokenTree, Spacing)) -> AttrAnnotatedTokenStream {
        .                   AttrAnnotatedTokenStream::new(vec![(tree, spacing)])
        .               }
        .           }
        .           
        .           impl From<TokenTree> for TokenStream {
        .               fn from(tree: TokenTree) -> TokenStream {
      910 ( 0.00%)          TokenStream::new(vec![(tree, Spacing::Alone)])
        .               }
        .           }
        .           
        .           impl From<TokenTree> for TreeAndSpacing {
        .               fn from(tree: TokenTree) -> TreeAndSpacing {
  424,812 ( 0.01%)          (tree, Spacing::Alone)
        .               }
        .           }
        .           
        .           impl iter::FromIterator<TokenTree> for TokenStream {
        .               fn from_iter<I: IntoIterator<Item = TokenTree>>(iter: I) -> Self {
        .                   TokenStream::new(iter.into_iter().map(Into::into).collect::<Vec<TreeAndSpacing>>())
        .               }
        .           }
-- line 393 ----------------------------------------
-- line 401 ----------------------------------------
        .           }
        .           
        .           impl TokenStream {
        .               pub fn new(streams: Vec<TreeAndSpacing>) -> TokenStream {
        .                   TokenStream(Lrc::new(streams))
        .               }
        .           
        .               pub fn is_empty(&self) -> bool {
      733 ( 0.00%)          self.0.is_empty()
      733 ( 0.00%)      }
        .           
        .               pub fn len(&self) -> usize {
1,064,066 ( 0.02%)          self.0.len()
   10,540 ( 0.00%)      }
        .           
        .               pub fn from_streams(mut streams: SmallVec<[TokenStream; 2]>) -> TokenStream {
        .                   match streams.len() {
        .                       0 => TokenStream::default(),
        .                       1 => streams.pop().unwrap(),
        .                       _ => {
        .                           // We are going to extend the first stream in `streams` with
        .                           // the elements from the subsequent streams. This requires
-- line 422 ----------------------------------------
-- line 448 ----------------------------------------
        .           
        .                           // Create the final `TokenStream`.
        .                           TokenStream(first_stream_lrc)
        .                       }
        .                   }
        .               }
        .           
        .               pub fn trees(&self) -> Cursor {
    1,890 ( 0.00%)          self.clone().into_trees()
    3,780 ( 0.00%)      }
        .           
  129,367 ( 0.00%)      pub fn into_trees(self) -> Cursor {
        .                   Cursor::new(self)
  258,734 ( 0.00%)      }
        .           
        .               /// Compares two `TokenStream`s, checking equality without regarding span information.
        .               pub fn eq_unspanned(&self, other: &TokenStream) -> bool {
        .                   let mut t1 = self.trees();
        .                   let mut t2 = other.trees();
        .                   for (t1, t2) in iter::zip(&mut t1, &mut t2) {
        .                       if !t1.eq_unspanned(&t2) {
        .                           return false;
        .                       }
        .                   }
        .                   t1.next().is_none() && t2.next().is_none()
        .               }
        .           
        .               pub fn map_enumerated<F: FnMut(usize, &TokenTree) -> TokenTree>(self, mut f: F) -> TokenStream {
   10,024 ( 0.00%)          TokenStream(Lrc::new(
        .                       self.0
        .                           .iter()
        .                           .enumerate()
  243,456 ( 0.00%)                  .map(|(i, (tree, is_joint))| (f(i, tree), *is_joint))
        .                           .collect(),
        .                   ))
        .               }
        .           }
        .           
        .           // 99.5%+ of the time we have 1 or 2 elements in this vector.
        .           #[derive(Clone)]
        .           pub struct TokenStreamBuilder(SmallVec<[TokenStream; 2]>);
-- line 488 ----------------------------------------
-- line 572 ----------------------------------------
        .           pub struct Cursor {
        .               pub stream: TokenStream,
        .               index: usize,
        .           }
        .           
        .           impl Iterator for Cursor {
        .               type Item = TokenTree;
        .           
   29,904 ( 0.00%)      fn next(&mut self) -> Option<TokenTree> {
   49,432 ( 0.00%)          self.next_with_spacing().map(|(tree, _)| tree)
   39,872 ( 0.00%)      }
        .           }
        .           
        .           impl Cursor {
        .               fn new(stream: TokenStream) -> Self {
        .                   Cursor { stream, index: 0 }
        .               }
        .           
5,165,090 ( 0.08%)      pub fn next_with_spacing(&mut self) -> Option<TreeAndSpacing> {
3,128,958 ( 0.05%)          if self.index < self.stream.len() {
1,678,808 ( 0.03%)              self.index += 1;
5,823,195 ( 0.09%)              Some(self.stream.0[self.index - 1].clone())
        .                   } else {
  402,266 ( 0.01%)              None
        .                   }
6,198,108 ( 0.10%)      }
        .           
        .               pub fn index(&self) -> usize {
        .                   self.index
        .               }
        .           
        .               pub fn append(&mut self, new_stream: TokenStream) {
        .                   if new_stream.is_empty() {
        .                       return;
        .                   }
        .                   let index = self.index;
        .                   let stream = mem::take(&mut self.stream);
        .                   *self = TokenStream::from_streams(smallvec![stream, new_stream]).into_trees();
        .                   self.index = index;
        .               }
        .           
   46,183 ( 0.00%)      pub fn look_ahead(&self, n: usize) -> Option<&TokenTree> {
   92,366 ( 0.00%)          self.stream.0[self.index..].get(n).map(|(tree, _)| tree)
   92,366 ( 0.00%)      }
        .           }
        .           
  536,411 ( 0.01%)  #[derive(Debug, Copy, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
        .           pub struct DelimSpan {
        .               pub open: Span,
        .               pub close: Span,
        .           }
        .           
        .           impl DelimSpan {
        8 ( 0.00%)      pub fn from_single(sp: Span) -> Self {
        .                   DelimSpan { open: sp, close: sp }
       16 ( 0.00%)      }
        .           
    1,466 ( 0.00%)      pub fn from_pair(open: Span, close: Span) -> Self {
        .                   DelimSpan { open, close }
      733 ( 0.00%)      }
        .           
        .               pub fn dummy() -> Self {
        .                   Self::from_single(DUMMY_SP)
   85,044 ( 0.00%)      }
        .           
  290,512 ( 0.00%)      pub fn entire(self) -> Span {
        .                   self.open.with_hi(self.close.hi())
  217,884 ( 0.00%)      }
        .           }

  129,664 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/nonterminal.rs
--------------------------------------------------------------------------------
Ir                 

-- line 8 ----------------------------------------
        .           use crate::parser::pat::{RecoverColon, RecoverComma};
        .           use crate::parser::{FollowedByType, ForceCollect, Parser, PathStyle};
        .           
        .           impl<'a> Parser<'a> {
        .               /// Checks whether a non-terminal may begin with a particular token.
        .               ///
        .               /// Returning `false` is a *stability guarantee* that such a matcher will *never* begin with that
        .               /// token. Be conservative (return true) if not sure.
  573,182 ( 0.01%)      pub fn nonterminal_may_begin_with(kind: NonterminalKind, token: &Token) -> bool {
        .                   /// Checks whether the non-terminal may contain a single (non-keyword) identifier.
        .                   fn may_be_ident(nt: &token::Nonterminal) -> bool {
        .                       match *nt {
        .                           token::NtItem(_) | token::NtBlock(_) | token::NtVis(_) | token::NtLifetime(_) => {
        .                               false
        .                           }
        .                           _ => true,
        .                       }
        .                   }
        .           
2,865,910 ( 0.05%)          match kind {
        .                       NonterminalKind::Expr => {
       60 ( 0.00%)                  token.can_begin_expr()
        .                           // This exception is here for backwards compatibility.
       30 ( 0.00%)                  && !token.is_keyword(kw::Let)
        .                           // This exception is here for backwards compatibility.
       40 ( 0.00%)                  && !token.is_keyword(kw::Const)
        .                       }
        .                       NonterminalKind::Ty => token.can_begin_type(),
        .                       NonterminalKind::Ident => get_macro_ident(token).is_some(),
        .                       NonterminalKind::Literal => token.can_begin_literal_maybe_minus(),
        .                       NonterminalKind::Vis => match token.kind {
        .                           // The follow-set of :vis + "priv" keyword + interpolated
        .                           token::Comma | token::Ident(..) | token::Interpolated(..) => true,
        .                           _ => token.can_begin_type(),
-- line 41 ----------------------------------------
-- line 77 ----------------------------------------
        .                           token::Lt |                         // path (UFCS constant)
        .                           token::BinOp(token::Shl) => true,   // path (double UFCS)
        .                           // leading vert `|` or-pattern
        .                           token::BinOp(token::Or) =>  matches!(kind, NonterminalKind::PatWithOr {..}),
        .                           token::Interpolated(ref nt) => may_be_ident(nt),
        .                           _ => false,
        .                       }
        .                       }
      425 ( 0.00%)              NonterminalKind::Lifetime => match token.kind {
        .                           token::Lifetime(_) => true,
        .                           token::Interpolated(ref nt) => {
        .                               matches!(**nt, token::NtLifetime(_) | token::NtTT(_))
        .                           }
        .                           _ => false,
        .                       },
        .                       NonterminalKind::TT | NonterminalKind::Item | NonterminalKind::Stmt => {
  324,322 ( 0.01%)                  !matches!(token.kind, token::CloseDelim(_))
        .                       }
        .                   }
  573,166 ( 0.01%)      }
        .           
        .               /// Parse a non-terminal (e.g. MBE `:pat` or `:ident`).
2,529,819 ( 0.04%)      pub fn parse_nonterminal(&mut self, kind: NonterminalKind) -> PResult<'a, Nonterminal> {
        .                   // Any `Nonterminal` which stores its tokens (currently `NtItem` and `NtExpr`)
        .                   // needs to have them force-captured here.
        .                   // A `macro_rules!` invocation may pass a captured item/expr to a proc-macro,
        .                   // which requires having captured tokens available. Since we cannot determine
        .                   // in advance whether or not a proc-macro will be (transitively) invoked,
        .                   // we always capture tokens for any `Nonterminal` which needs them.
3,092,001 ( 0.05%)          let mut nt = match kind {
        .                       NonterminalKind::Item => match self.parse_item(ForceCollect::Yes)? {
        .                           Some(item) => token::NtItem(item),
        .                           None => {
        .                               return Err(self.struct_span_err(self.token.span, "expected an item keyword"));
        .                           }
        .                       },
        .                       NonterminalKind::Block => {
        .                           // While a block *expression* may have attributes (e.g. `#[my_attr] { ... }`),
-- line 114 ----------------------------------------
-- line 126 ----------------------------------------
        .                               NonterminalKind::PatParam { .. } => this.parse_pat_no_top_alt(None),
        .                               NonterminalKind::PatWithOr { .. } => {
        .                                   this.parse_pat_allow_top_alt(None, RecoverComma::No, RecoverColon::No)
        .                               }
        .                               _ => unreachable!(),
        .                           })?)
        .                       }
        .           
       40 ( 0.00%)              NonterminalKind::Expr => token::NtExpr(self.parse_expr_force_collect()?),
        .                       NonterminalKind::Literal => {
        .                           // The `:literal` matcher does not support attributes
        .                           token::NtLiteral(
        .                               self.collect_tokens_no_attrs(|this| this.parse_literal_maybe_minus())?,
        .                           )
        .                       }
        .           
        .                       NonterminalKind::Ty => {
       16 ( 0.00%)                  token::NtTy(self.collect_tokens_no_attrs(|this| this.parse_ty())?)
        .                       }
        .                       // this could be handled like a token, since it is one
        .                       NonterminalKind::Ident
  744,192 ( 0.01%)                  if let Some((ident, is_raw)) = get_macro_ident(&self.token) =>
        .                       {
  248,064 ( 0.00%)                  self.bump();
  868,224 ( 0.01%)                  token::NtIdent(ident, is_raw)
        .                       }
        .                       NonterminalKind::Ident => {
        .                           let token_str = pprust::token_to_string(&self.token);
        .                           let msg = &format!("expected ident, found {}", &token_str);
        .                           return Err(self.struct_span_err(self.token.span, msg));
        .                       }
        .                       NonterminalKind::Path => token::NtPath(
        .                           self.collect_tokens_no_attrs(|this| this.parse_path(PathStyle::Type))?,
        .                       ),
        .                       NonterminalKind::Meta => token::NtMeta(P(self.parse_attr_item(true)?)),
  785,205 ( 0.01%)              NonterminalKind::TT => token::NtTT(self.parse_token_tree()),
        .                       NonterminalKind::Vis => token::NtVis(
        .                           self.collect_tokens_no_attrs(|this| this.parse_visibility(FollowedByType::Yes))?,
        .                       ),
        .                       NonterminalKind::Lifetime => {
        .                           if self.check_lifetime() {
        .                               token::NtLifetime(self.expect_lifetime().ident)
        .                           } else {
        .                               let token_str = pprust::token_to_string(&self.token);
        .                               let msg = &format!("expected a lifetime, found `{}`", &token_str);
        .                               return Err(self.struct_span_err(self.token.span, msg));
        .                           }
        .                       }
        .                   };
        .           
        .                   // If tokens are supported at all, they should be collected.
  843,309 ( 0.01%)          if matches!(nt.tokens_mut(), Some(None)) {
        .                       panic!(
        .                           "Missing tokens for nt {:?} at {:?}: {:?}",
        .                           nt,
        .                           nt.span(),
        .                           pprust::nonterminal_to_string(&nt)
        .                       );
        .                   }
        .           
1,967,637 ( 0.03%)          Ok(nt)
2,529,819 ( 0.04%)      }
        .           }
        .           
        .           /// The token is an identifier, but not `_`.
        .           /// We prohibit passing `_` to macros expecting `ident` for now.
        .           fn get_macro_ident(token: &Token) -> Option<(Ident, bool)> {
  496,718 ( 0.01%)      token.ident().filter(|(ident, _)| ident.name != kw::Underscore)
        .           }

  281,216 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/nonterminal.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 417 ----------------------------------------
         .               /// # #![allow(unused_mut)]
         .               /// let mut vec: Vec<i32> = Vec::new();
         .               /// ```
         .               #[inline]
         .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[must_use]
         .               pub const fn new() -> Self {
 3,741,589 ( 0.06%)          Vec { buf: RawVec::NEW, len: 0 }
       134 ( 0.00%)      }
         .           
         .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
         .               ///
         .               /// The vector will be able to hold exactly `capacity` elements without
         .               /// reallocating. If `capacity` is 0, the vector will not allocate.
         .               ///
         .               /// It is important to note that although the returned vector has the
         .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 601 ----------------------------------------
         .               /// vec.push(11);
         .               /// assert_eq!(vec.len(), 11);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[unstable(feature = "allocator_api", issue = "32838")]
         .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
 3,587,598 ( 0.06%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
         .               }
         .           
         .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
         .               ///
         .               /// # Safety
         .               ///
         .               /// This is highly unsafe, due to the number of invariants that aren't
         .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
         .               ///     // Put everything back together into a Vec
         .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
         .               ///     assert_eq!(rebuilt, [4, 5, 6]);
         .               /// }
         .               /// ```
         .               #[inline]
         .               #[unstable(feature = "allocator_api", issue = "32838")]
         .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
   133,284 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
         .               }
         .           
         .               /// Decomposes a `Vec<T>` into its raw components.
         .               ///
         .               /// Returns the raw pointer to the underlying data, the length of
         .               /// the vector (in elements), and the allocated capacity of the
         .               /// data (in elements). These are the same arguments in the same
         .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
         .               ///
         .               /// ```
         .               /// let vec: Vec<i32> = Vec::with_capacity(10);
         .               /// assert_eq!(vec.capacity(), 10);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn capacity(&self) -> usize {
    83,890 ( 0.00%)          self.buf.capacity()
         .               }
         .           
         .               /// Reserves capacity for at least `additional` more elements to be inserted
         .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
         .               /// frequent reallocations. After calling `reserve`, capacity will be
         .               /// greater than or equal to `self.len() + additional`. Does nothing if
         .               /// capacity is already sufficient.
         .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1];
         .               /// vec.reserve(10);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn reserve(&mut self, additional: usize) {
   523,582 ( 0.01%)          self.buf.reserve(self.len, additional);
         .               }
         .           
         .               /// Reserves the minimum capacity for exactly `additional` more elements to
         .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
         .               /// capacity will be greater than or equal to `self.len() + additional`.
         .               /// Does nothing if the capacity is already sufficient.
         .               ///
         .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1];
         .               /// vec.reserve_exact(10);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn reserve_exact(&mut self, additional: usize) {
     4,362 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
         .               }
         .           
         .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
         .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
         .               /// frequent reallocations. After calling `try_reserve`, capacity will be
         .               /// greater than or equal to `self.len() + additional`. Does nothing if
         .               /// capacity is already sufficient.
         .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
         .               /// assert!(vec.capacity() >= 3);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn shrink_to_fit(&mut self) {
         .                   // The capacity is never less than the length, and there's nothing to do when
         .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
         .                   // by only calling it with a greater capacity.
   524,904 ( 0.01%)          if self.capacity() > self.len {
     1,648 ( 0.00%)              self.buf.shrink_to_fit(self.len);
         .                   }
         .               }
         .           
         .               /// Shrinks the capacity of the vector with a lower bound.
         .               ///
         .               /// The capacity will remain at least as large as both the length
         .               /// and the supplied value.
         .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
         .               /// let slice = vec.into_boxed_slice();
         .               /// assert_eq!(slice.into_vec().capacity(), 3);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
         .                   unsafe {
         .                       self.shrink_to_fit();
   195,037 ( 0.00%)              let me = ManuallyDrop::new(self);
         .                       let buf = ptr::read(&me.buf);
         .                       let len = me.len();
         .                       buf.into_box(len).assume_init()
         .                   }
         .               }
         .           
         .               /// Shortens the vector, keeping the first `len` elements and dropping
         .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
         .               /// let mut vec = vec![1, 2, 3];
         .               /// vec.truncate(0);
         .               /// assert_eq!(vec, []);
         .               /// ```
         .               ///
         .               /// [`clear`]: Vec::clear
         .               /// [`drain`]: Vec::drain
         .               #[stable(feature = "rust1", since = "1.0.0")]
 4,559,509 ( 0.07%)      pub fn truncate(&mut self, len: usize) {
         .                   // This is safe because:
         .                   //
         .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
         .                   //   case avoids creating an invalid slice, and
         .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
         .                   //   such that no value will be dropped twice in case `drop_in_place`
         .                   //   were to panic once (if it panics twice, the program aborts).
         .                   unsafe {
         .                       // Note: It's intentional that this is `>` and not `>=`.
         .                       //       Changing it to `>=` has negative performance
         .                       //       implications in some cases. See #78884 for more.
 2,765,995 ( 0.04%)              if len > self.len {
         .                           return;
         .                       }
         .                       let remaining_len = self.len - len;
         .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
 1,081,334 ( 0.02%)              self.len = len;
     3,937 ( 0.00%)              ptr::drop_in_place(s);
         .                   }
 5,471,390 ( 0.09%)      }
         .           
         .               /// Extracts a slice containing the entire vector.
         .               ///
         .               /// Equivalent to `&s[..]`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
         .               /// ```
         .               ///
         .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
         .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
         .               #[inline]
         .               pub fn as_ptr(&self) -> *const T {
         .                   // We shadow the slice method of the same name to avoid going through
         .                   // `deref`, which creates an intermediate reference.
11,034,139 ( 0.18%)          let ptr = self.buf.ptr();
         .                   unsafe {
         .                       assume(!ptr.is_null());
         .                   }
         .                   ptr
         .               }
         .           
         .               /// Returns an unsafe mutable pointer to the vector's buffer.
         .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
         .               /// }
         .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
         .               /// ```
         .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
         .               #[inline]
         .               pub fn as_mut_ptr(&mut self) -> *mut T {
         .                   // We shadow the slice method of the same name to avoid going through
         .                   // `deref_mut`, which creates an intermediate reference.
 6,814,611 ( 0.11%)          let ptr = self.buf.ptr();
         .                   unsafe {
         .                       assume(!ptr.is_null());
         .                   }
         .                   ptr
         .               }
         .           
         .               /// Returns a reference to the underlying allocator.
         .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
         .               ///
         .               /// Normally, here, one would use [`clear`] instead to correctly drop
         .               /// the contents and thus not leak memory.
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub unsafe fn set_len(&mut self, new_len: usize) {
         .                   debug_assert!(new_len <= self.capacity());
         .           
 1,327,471 ( 0.02%)          self.len = new_len;
    20,990 ( 0.00%)      }
         .           
         .               /// Removes an element from the vector and returns it.
         .               ///
         .               /// The removed element is replaced by the last element of the vector.
         .               ///
         .               /// This does not preserve ordering, but is *O*(1).
         .               /// If you need to preserve the element order, use [`remove`] instead.
         .               ///
-- line 1276 ----------------------------------------
-- line 1305 ----------------------------------------
         .                       assert_failed(index, len);
         .                   }
         .                   unsafe {
         .                       // We replace self[index] with the last element. Note that if the
         .                       // bounds check above succeeds there must be a last element (which
         .                       // can be self[index] itself).
         .                       let value = ptr::read(self.as_ptr().add(index));
         .                       let base_ptr = self.as_mut_ptr();
         2 ( 0.00%)              ptr::copy(base_ptr.add(len - 1), base_ptr.add(index), 1);
         .                       self.set_len(len - 1);
         .                       value
         .                   }
         .               }
         .           
         .               /// Inserts an element at position `index` within the vector, shifting all
         .               /// elements after it to the right.
         .               ///
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
         .               /// let mut vec = vec![1, 2, 3];
         .               /// vec.insert(1, 4);
         .               /// assert_eq!(vec, [1, 4, 2, 3]);
         .               /// vec.insert(4, 5);
         .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
       826 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
         .                   #[cold]
         .                   #[inline(never)]
         .                   fn assert_failed(index: usize, len: usize) -> ! {
         .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
         .                   }
         .           
       118 ( 0.00%)          let len = self.len();
    17,898 ( 0.00%)          if index > len {
         .                       assert_failed(index, len);
         .                   }
         .           
         .                   // space for the new element
    18,368 ( 0.00%)          if len == self.buf.capacity() {
         .                       self.reserve(1);
         .                   }
         .           
         .                   unsafe {
         .                       // infallible
         .                       // The spot to put the new value
         .                       {
         .                           let p = self.as_mut_ptr().add(index);
         .                           // Shift everything over to make space. (Duplicating the
         .                           // `index`th element into two consecutive places.)
    27,552 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
         .                           // Write it in, overwriting the first copy of the `index`th
         .                           // element.
         .                           ptr::write(p, element);
         .                       }
    18,368 ( 0.00%)              self.set_len(len + 1);
         .                   }
       708 ( 0.00%)      }
         .           
         .               /// Removes and returns the element at position `index` within the vector,
         .               /// shifting all elements after it to the left.
         .               ///
         .               /// Note: Because this shifts over the remaining elements, it has a
         .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
         .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
         .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1395 ----------------------------------------
         .               pub fn remove(&mut self, index: usize) -> T {
         .                   #[cold]
         .                   #[inline(never)]
         .                   #[track_caller]
         .                   fn assert_failed(index: usize, len: usize) -> ! {
         .                       panic!("removal index (is {}) should be < len (is {})", index, len);
         .                   }
         .           
       491 ( 0.00%)          let len = self.len();
     1,962 ( 0.00%)          if index >= len {
         .                       assert_failed(index, len);
         .                   }
         .                   unsafe {
         .                       // infallible
         .                       let ret;
         .                       {
         .                           // the place we are taking from.
         .                           let ptr = self.as_mut_ptr().add(index);
         .                           // copy it out, unsafely having a copy of the value on
         .                           // the stack and in the vector at the same time.
        32 ( 0.00%)                  ret = ptr::read(ptr);
         .           
         .                           // Shift everything down to fill in that spot.
     1,048 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
         .                       }
       491 ( 0.00%)              self.set_len(len - 1);
         .                       ret
         .                   }
         .               }
         .           
         .               /// Retains only the elements specified by the predicate.
         .               ///
         .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
         .               /// This method operates in place, visiting each element exactly once in the
-- line 1428 ----------------------------------------
-- line 1442 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1, 2, 3, 4, 5];
         .               /// let keep = [false, true, true, false, true];
         .               /// let mut iter = keep.iter();
         .               /// vec.retain(|_| *iter.next().unwrap());
         .               /// assert_eq!(vec, [2, 3, 5]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
   432,279 ( 0.01%)      pub fn retain<F>(&mut self, mut f: F)
         .               where
         .                   F: FnMut(&T) -> bool,
         .               {
    10,391 ( 0.00%)          self.retain_mut(|elem| f(elem));
   421,536 ( 0.01%)      }
         .           
         .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
         .               ///
         .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
         .               /// This method operates in place, visiting each element exactly once in the
         .               /// original order, and preserves the order of the retained elements.
         .               ///
         .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
         .               /// });
         .               /// assert_eq!(vec, [2, 3, 4]);
         .               /// ```
         .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
         .               pub fn retain_mut<F>(&mut self, mut f: F)
         .               where
         .                   F: FnMut(&mut T) -> bool,
         .               {
    52,846 ( 0.00%)          let original_len = self.len();
         .                   // Avoid double drop if the drop guard is not executed,
         .                   // since we may make some holes during the process.
         .                   unsafe { self.set_len(0) };
         .           
         .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
         .                   //      |<-              processed len   ->| ^- next to check
         .                   //                  |<-  deleted cnt     ->|
         .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
         .                       v: &'a mut Vec<T, A>,
         .                       processed_len: usize,
         .                       deleted_cnt: usize,
         .                       original_len: usize,
         .                   }
         .           
         .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
         .                       fn drop(&mut self) {
    35,642 ( 0.00%)                  if self.deleted_cnt > 0 {
         .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
         .                               unsafe {
         .                                   ptr::copy(
         .                                       self.v.as_ptr().add(self.processed_len),
    30,204 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
         .                                       self.original_len - self.processed_len,
         .                                   );
         .                               }
         .                           }
         .                           // SAFETY: After filling holes, all items are in contiguous memory.
         .                           unsafe {
         2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
         .                           }
         .                       }
         .                   }
         .           
         .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
         .           
         .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
         .                       original_len: usize,
         .                       f: &mut F,
         .                       g: &mut BackshiftOnDrop<'_, T, A>,
         .                   ) where
         .                       F: FnMut(&mut T) -> bool,
         .                   {
 1,050,069 ( 0.02%)              while g.processed_len != original_len {
         .                           // SAFETY: Unchecked element must be valid.
         .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
   328,842 ( 0.01%)                  if !f(cur) {
         .                               // Advance early to avoid double drop if `drop_in_place` panicked.
    82,472 ( 0.00%)                      g.processed_len += 1;
    49,212 ( 0.00%)                      g.deleted_cnt += 1;
         .                               // SAFETY: We never touch this element again after dropped.
       283 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
         .                               // We already advanced the counter.
         .                               if DELETED {
         .                                   continue;
         .                               } else {
         .                                   break;
         .                               }
         .                           }
         .                           if DELETED {
         .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
         .                               // We use copy for move, and never touch this element again.
         .                               unsafe {
    45,414 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
         .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
         .                               }
         .                           }
    44,824 ( 0.00%)                  g.processed_len += 1;
         .                       }
         .                   }
         .           
         .                   // Stage 1: Nothing was deleted.
         .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
         .           
         .                   // Stage 2: Some elements were deleted.
         .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
         .               ///
         .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
         .               ///
         .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
         .               /// ```
         .               #[stable(feature = "dedup_by", since = "1.16.0")]
       287 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
         .               where
         .                   F: FnMut(&mut T, &mut T) -> bool,
         .               {
     3,665 ( 0.00%)          let len = self.len();
     7,410 ( 0.00%)          if len <= 1 {
         .                       return;
         .                   }
         .           
         .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
         .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
         .                       /* Offset of the element we want to check if it is duplicate */
         .                       read: usize,
         .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
         .                   let ptr = gap.vec.as_mut_ptr();
         .           
         .                   /* Drop items while going through Vec, it should be more efficient than
         .                    * doing slice partition_dedup + truncate */
         .           
         .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
         .                    * are always in-bounds and read_ptr never aliases prev_ptr */
         .                   unsafe {
    28,644 ( 0.00%)              while gap.read < len {
         .                           let read_ptr = ptr.add(gap.read);
         .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
         .           
         8 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
         .                               // Increase `gap.read` now since the drop may panic.
         .                               gap.read += 1;
         .                               /* We have found duplicate, drop it in-place */
         .                               ptr::drop_in_place(read_ptr);
         .                           } else {
         .                               let write_ptr = ptr.add(gap.write);
         .           
         .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
         .                                * have to use `copy` or conditional `copy_nonoverlapping`.
         .                                * Looks like the first option is faster. */
         .                               ptr::copy(read_ptr, write_ptr, 1);
         .           
         .                               /* We have filled that place, so go further */
    17,276 ( 0.00%)                      gap.write += 1;
         .                               gap.read += 1;
         .                           }
         .                       }
         .           
         .                       /* Technically we could let `gap` clean up with its Drop, but
         .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
         .                        * the codegen, so we just do it manually */
         .                       gap.vec.set_len(gap.write);
         .                       mem::forget(gap);
         .                   }
       328 ( 0.00%)      }
         .           
         .               /// Appends an element to the back of a collection.
         .               ///
         .               /// # Panics
         .               ///
         .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
         .               ///
         .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1, 2];
         .               /// vec.push(3);
         .               /// assert_eq!(vec, [1, 2, 3]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
        90 ( 0.00%)      pub fn push(&mut self, value: T) {
         .                   // This will panic or abort if we would allocate > isize::MAX bytes
         .                   // or if the length increment would overflow for zero-sized types.
 7,318,024 ( 0.12%)          if self.len == self.buf.capacity() {
   580,688 ( 0.01%)              self.buf.reserve_for_push(self.len);
         .                   }
         .                   unsafe {
   312,253 ( 0.01%)              let end = self.as_mut_ptr().add(self.len);
         .                       ptr::write(end, value);
 9,853,568 ( 0.16%)              self.len += 1;
         .                   }
        72 ( 0.00%)      }
         .           
         .               /// Removes the last element from a vector and returns it, or [`None`] if it
         .               /// is empty.
         .               ///
         .               /// If you'd like to pop the first element, consider using
         .               /// [`VecDeque::pop_front`] instead.
         .               ///
         .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1, 2, 3];
         .               /// assert_eq!(vec.pop(), Some(3));
         .               /// assert_eq!(vec, [1, 2]);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn pop(&mut self) -> Option<T> {
 2,378,959 ( 0.04%)          if self.len == 0 {
        17 ( 0.00%)              None
         .                   } else {
         .                       unsafe {
 1,730,126 ( 0.03%)                  self.len -= 1;
   360,483 ( 0.01%)                  Some(ptr::read(self.as_ptr().add(self.len())))
         .                       }
         .                   }
         .               }
         .           
         .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
         .               ///
         .               /// # Panics
         .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
         .               /// let mut vec2 = vec![4, 5, 6];
         .               /// vec.append(&mut vec2);
         .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
         .               /// assert_eq!(vec2, []);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "append", since = "1.4.0")]
        28 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
         .                   unsafe {
         .                       self.append_elements(other.as_slice() as _);
         .                       other.set_len(0);
         .                   }
        24 ( 0.00%)      }
         .           
         .               /// Appends elements to `Self` from other buffer.
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               unsafe fn append_elements(&mut self, other: *const [T]) {
         .                   let count = unsafe { (*other).len() };
         .                   self.reserve(count);
   141,548 ( 0.00%)          let len = self.len();
        28 ( 0.00%)          unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
   716,624 ( 0.01%)          self.len += count;
         .               }
         .           
         .               /// Creates a draining iterator that removes the specified range in the vector
         .               /// and yields the removed items.
         .               ///
         .               /// When the iterator **is** dropped, all elements in the range are removed
         .               /// from the vector, even if the iterator was not fully consumed. If the
         .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
         .                   // When the Drain is first created, it shortens the length of
         .                   // the source vector to make sure no uninitialized or moved-from elements
         .                   // are accessible at all if the Drain's destructor never gets to run.
         .                   //
         .                   // Drain will ptr::read out the values to remove.
         .                   // When finished, remaining tail of the vec is copied back to cover
         .                   // the hole, and the vector length is restored to the new length.
         .                   //
    47,725 ( 0.00%)          let len = self.len();
         .                   let Range { start, end } = slice::range(range, ..len);
         .           
         .                   unsafe {
         .                       // set self.vec length's to start, to be safe in case Drain is leaked
         .                       self.set_len(start);
         .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
         .                       // whole Drain iterator (like &mut T).
       122 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
   205,391 ( 0.00%)              Drain {
         .                           tail_start: end,
       118 ( 0.00%)                  tail_len: len - end,
         .                           iter: range_slice.iter(),
         .                           vec: NonNull::from(self),
         .                       }
         .                   }
         .               }
         .           
         .               /// Clears the vector, removing all values.
         .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
         .               ///
         .               /// v.clear();
         .               ///
         .               /// assert!(v.is_empty());
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn clear(&mut self) {
 8,202,288 ( 0.13%)          self.truncate(0)
         .               }
         .           
         .               /// Returns the number of elements in the vector, also referred to
         .               /// as its 'length'.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
         .               /// let mut v = Vec::new();
         .               /// assert!(v.is_empty());
         .               ///
         .               /// v.push(1);
         .               /// assert!(!v.is_empty());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn is_empty(&self) -> bool {
 1,060,719 ( 0.02%)          self.len() == 0
         .               }
         .           
         .               /// Splits the collection into two at the given index.
         .               ///
         .               /// Returns a newly allocated vector containing the elements in the range
         .               /// `[at, len)`. After the call, the original vector will be left containing
         .               /// the elements `[0, at)` with its previous capacity unchanged.
         .               ///
-- line 1916 ----------------------------------------
-- line 1935 ----------------------------------------
         .                   A: Clone,
         .               {
         .                   #[cold]
         .                   #[inline(never)]
         .                   fn assert_failed(at: usize, len: usize) -> ! {
         .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
         .                   }
         .           
        50 ( 0.00%)          if at > self.len() {
         .                       assert_failed(at, self.len());
         .                   }
         .           
        46 ( 0.00%)          if at == 0 {
         .                       // the new vector can take over the original buffer and avoid the copy
         .                       return mem::replace(
         .                           self,
         .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
         .                       );
         .                   }
         .           
         .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
         .               ///
         .               /// let mut vec = vec![];
         .               /// let mut p = 1;
         .               /// vec.resize_with(4, || { p *= 2; p });
         .               /// assert_eq!(vec, [2, 4, 8, 16]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
    43,258 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
         .               where
         .                   F: FnMut() -> T,
         .               {
     6,144 ( 0.00%)          let len = self.len();
    12,288 ( 0.00%)          if new_len > len {
    14,781 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
         .                   } else {
         .                       self.truncate(new_len);
         .                   }
    37,114 ( 0.00%)      }
         .           
         .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
         .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
         .               /// `'a`. If the type has only static references, or none at all, then this
         .               /// may be chosen to be `'static`.
         .               ///
         .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
         .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
         .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
         .               #[inline]
         .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
         .                   // Note:
         .                   // This method is not implemented in terms of `split_at_spare_mut`,
         .                   // to prevent invalidation of pointers to the buffer.
         .                   unsafe {
         .                       slice::from_raw_parts_mut(
         4 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
        32 ( 0.00%)                  self.buf.capacity() - self.len,
         .                       )
         .                   }
         .               }
         .           
         .               /// Returns vector content as a slice of `T`, along with the remaining spare
         .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
         .               ///
         .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2189 ----------------------------------------
         .               /// assert_eq!(vec, ["hello", "world", "world"]);
         .               ///
         .               /// let mut vec = vec![1, 2, 3, 4];
         .               /// vec.resize(2, 0);
         .               /// assert_eq!(vec, [1, 2]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "vec_resize", since = "1.5.0")]
    44,230 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
     4,423 ( 0.00%)          let len = self.len();
         .           
    13,269 ( 0.00%)          if new_len > len {
       624 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
         .                   } else {
         .                       self.truncate(new_len);
         .                   }
     4,455 ( 0.00%)      }
         .           
         .               /// Clones and appends all elements in a slice to the `Vec`.
         .               ///
         .               /// Iterates over the slice `other`, clones each element, and then appends
         .               /// it to this `Vec`. The `other` slice is traversed in-order.
         .               ///
         .               /// Note that this function is same as [`extend`] except that it is
         .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2271 ----------------------------------------
         .           trait ExtendWith<T> {
         .               fn next(&mut self) -> T;
         .               fn last(self) -> T;
         .           }
         .           
         .           struct ExtendElement<T>(T);
         .           impl<T: Clone> ExtendWith<T> for ExtendElement<T> {
         .               fn next(&mut self) -> T {
        32 ( 0.00%)          self.0.clone()
         .               }
         .               fn last(self) -> T {
         .                   self.0
         .               }
         .           }
         .           
         .           struct ExtendFunc<F>(F);
         .           impl<T, F: FnMut() -> T> ExtendWith<T> for ExtendFunc<F> {
-- line 2287 ----------------------------------------
-- line 2291 ----------------------------------------
         .               fn last(mut self) -> T {
         .                   (self.0)()
         .               }
         .           }
         .           
         .           impl<T, A: Allocator> Vec<T, A> {
         .               #[cfg(not(no_global_oom_handling))]
         .               /// Extend the vector by `n` values, using the given generator.
 1,384,637 ( 0.02%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
         .                   self.reserve(n);
         .           
         .                   unsafe {
       518 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
         .                       // Use SetLenOnDrop to work around bug where compiler
         .                       // might not realize the store through `ptr` through self.set_len()
         .                       // don't alias.
         .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
         .           
         .                       // Write all elements except the last one
         .                       for _ in 1..n {
         .                           ptr::write(ptr, value.next());
         .                           ptr = ptr.offset(1);
         .                           // Increment the length in every step in case next() panics
         .                           local_len.increment_len(1);
         .                       }
         .           
   393,103 ( 0.01%)              if n > 0 {
         .                           // We can write the last element directly without cloning needlessly
         .                           ptr::write(ptr, value.last());
         .                           local_len.increment_len(1);
         .                       }
         .           
         .                       // len set by scope guard
         .                   }
   953,987 ( 0.02%)      }
         .           }
         .           
         .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
         .               /// Removes consecutive repeated elements in the vector according to the
         .               /// [`PartialEq`] trait implementation.
         .               ///
         .               /// If the vector is sorted, this removes all duplicates.
         .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
         .               ///
         .               /// vec.dedup();
         .               ///
         .               /// assert_eq!(vec, [1, 2, 3, 2]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               pub fn dedup(&mut self) {
        42 ( 0.00%)          self.dedup_by(|a, b| a == b)
         .               }
         .           }
         .           
         .           ////////////////////////////////////////////////////////////////////////////////
         .           // Internal methods and functions
         .           ////////////////////////////////////////////////////////////////////////////////
         .           
         .           #[doc(hidden)]
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
    51,373 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
   664,376 ( 0.01%)      <T as SpecFromElem>::from_elem(elem, n, Global)
    57,269 ( 0.00%)  }
         .           
         .           #[doc(hidden)]
         .           #[cfg(not(no_global_oom_handling))]
         .           #[unstable(feature = "allocator_api", issue = "32838")]
         .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
         .               <T as SpecFromElem>::from_elem(elem, n, alloc)
         .           }
         .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
         .           // Common trait implementations for Vec
         .           ////////////////////////////////////////////////////////////////////////////////
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
         .               type Target = [T];
         .           
         .               fn deref(&self) -> &[T] {
15,977,227 ( 0.26%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
        19 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
         .               fn deref_mut(&mut self) -> &mut [T] {
 4,448,528 ( 0.07%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           trait SpecCloneFrom {
         .               fn clone_from(this: &mut Self, other: &Self);
         .           }
         .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
         .                   this.extend_from_slice(other);
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
         .               #[cfg(not(test))]
 3,866,533 ( 0.06%)      fn clone(&self) -> Self {
         .                   let alloc = self.allocator().clone();
         2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
 4,649,752 ( 0.07%)      }
         .           
         .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
         .               // required for this method definition, is not available. Instead use the
         .               // `slice::to_vec`  function which is only available with cfg(test)
         .               // NB see the slice::hack module in slice.rs for more information
         .               #[cfg(test)]
         .               fn clone(&self) -> Self {
         .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
         .               message = "vector indices are of type `usize` or ranges of `usize`",
         .               label = "vector indices are of type `usize` or ranges of `usize`"
         .           )]
         .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
         .               type Output = I::Output;
         .           
         .               #[inline]
         .               fn index(&self, index: I) -> &Self::Output {
   397,152 ( 0.01%)          Index::index(&**self, index)
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_on_unimplemented(
         .               message = "vector indices are of type `usize` or ranges of `usize`",
         .               label = "vector indices are of type `usize` or ranges of `usize`"
         .           )]
         .           impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {
         .               #[inline]
         .               fn index_mut(&mut self, index: I) -> &mut Self::Output {
       752 ( 0.00%)          IndexMut::index_mut(&mut **self, index)
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T> FromIterator<T> for Vec<T> {
         .               #[inline]
         .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
 1,247,697 ( 0.02%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
         .               type Item = T;
         .               type IntoIter = IntoIter<T, A>;
         .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
         .               /// for s in v.into_iter() {
         .               ///     // s has type String, not &String
         .               ///     println!("{}", s);
         .               /// }
         .               /// ```
         .               #[inline]
         .               fn into_iter(self) -> IntoIter<T, A> {
         .                   unsafe {
   724,804 ( 0.01%)              let mut me = ManuallyDrop::new(self);
         .                       let alloc = ptr::read(me.allocator());
         .                       let begin = me.as_mut_ptr();
         .                       let end = if mem::size_of::<T>() == 0 {
         .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
         .                       } else {
         .                           begin.add(me.len()) as *const T
         .                       };
         .                       let cap = me.buf.capacity();
   231,617 ( 0.00%)              IntoIter {
         .                           buf: NonNull::new_unchecked(begin),
         .                           phantom: PhantomData,
         .                           cap,
         .                           alloc,
         .                           ptr: begin,
         .                           end,
         .                       }
         .                   }
-- line 2589 ----------------------------------------
-- line 2591 ----------------------------------------
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<'a, T, A: Allocator> IntoIterator for &'a Vec<T, A> {
         .               type Item = &'a T;
         .               type IntoIter = slice::Iter<'a, T>;
         .           
         .               fn into_iter(self) -> slice::Iter<'a, T> {
        34 ( 0.00%)          self.iter()
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
         .               type Item = &'a mut T;
         .               type IntoIter = slice::IterMut<'a, T>;
         .           
         .               fn into_iter(self) -> slice::IterMut<'a, T> {
     1,194 ( 0.00%)          self.iter_mut()
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
         .               #[inline]
     1,072 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
   732,721 ( 0.01%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
     1,072 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn extend_one(&mut self, item: T) {
         .                   self.push(item);
         .               }
         .           
         .               #[inline]
         .               fn extend_reserve(&mut self, additional: usize) {
-- line 2627 ----------------------------------------
-- line 2636 ----------------------------------------
         .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
         .                   // This is the case for a general iterator.
         .                   //
         .                   // This function should be the moral equivalent of:
         .                   //
         .                   //      for item in iterator {
         .                   //          self.push(item);
         .                   //      }
    29,469 ( 0.00%)          while let Some(element) = iterator.next() {
    57,780 ( 0.00%)              let len = self.len();
   479,541 ( 0.01%)              if len == self.capacity() {
       639 ( 0.00%)                  let (lower, _) = iterator.size_hint();
         .                           self.reserve(lower.saturating_add(1));
         .                       }
         .                       unsafe {
         .                           ptr::write(self.as_mut_ptr().add(len), element);
         .                           // Since next() executes user code which can panic we have to bump the length
         .                           // after each step.
         .                           // NB can't overflow since we would have had to alloc the address space
   339,599 ( 0.01%)                  self.set_len(len + 1);
         .                       }
         .                   }
     1,029 ( 0.00%)      }
         .           
         .               /// Creates a splicing iterator that replaces the specified range in the vector
         .               /// with the given `replace_with` iterator and yields the removed items.
         .               /// `replace_with` does not need to be the same length as `range`.
         .               ///
         .               /// `range` is removed even if the iterator is not consumed until the end.
         .               ///
         .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2693 ----------------------------------------
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "vec_splice", since = "1.21.0")]
         .               pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, A>
         .               where
         .                   R: RangeBounds<usize>,
         .                   I: IntoIterator<Item = T>,
         .               {
       556 ( 0.00%)          Splice { drain: self.drain(range), replace_with: replace_with.into_iter() }
         .               }
         .           
         .               /// Creates an iterator which uses a closure to determine if an element should be removed.
         .               ///
         .               /// If the closure returns true, then the element is removed and yielded.
         .               /// If the closure returns false, the element will remain in the vector and will not be yielded
         .               /// by the iterator.
         .               ///
-- line 2709 ----------------------------------------
-- line 2745 ----------------------------------------
         .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
         .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
         .               /// ```
         .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
         .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
         .               where
         .                   F: FnMut(&mut T) -> bool,
         .               {
       965 ( 0.00%)          let old_len = self.len();
         .           
         .                   // Guard against us getting leaked (leak amplification)
         .                   unsafe {
         .                       self.set_len(0);
         .                   }
         .           
     1,576 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
         .               }
         .           }
         .           
         .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
         .           ///
         .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
         .           /// append the entire slice at once.
         .           ///
         .           /// [`copy_from_slice`]: slice::copy_from_slice
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "extend_ref", since = "1.2.0")]
         .           impl<'a, T: Copy + 'a, A: Allocator + 'a> Extend<&'a T> for Vec<T, A> {
     8,424 ( 0.00%)      fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {
         .                   self.spec_extend(iter.into_iter())
     6,318 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn extend_one(&mut self, &item: &'a T) {
         .                   self.push(item);
         .               }
         .           
         .               #[inline]
         .               fn extend_reserve(&mut self, additional: usize) {
-- line 2783 ----------------------------------------
-- line 2803 ----------------------------------------
         .               #[inline]
         .               fn cmp(&self, other: &Self) -> Ordering {
         .                   Ord::cmp(&**self, &**other)
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
 2,970,847 ( 0.05%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // use drop for [T]
         .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
         .                       // could avoid questions of validity in certain cases
 1,036,568 ( 0.02%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
         .                   }
         .                   // RawVec handles deallocation
 3,476,716 ( 0.06%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
         .           impl<T> const Default for Vec<T> {
         .               /// Creates an empty `Vec<T>`.
         .               fn default() -> Vec<T> {
         .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
         .               /// newly-allocated buffer with exactly the right capacity.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
         .               /// ```
         .               fn from(v: Vec<T, A>) -> Self {
         4 ( 0.00%)          v.into_boxed_slice()
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl From<&str> for Vec<u8> {
         .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
         .               ///
-- line 2992 ----------------------------------------

 3,889,350 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 121 ----------------------------------------
        .           #[derive(Debug)]
        .           pub enum ProcessResult<O, E> {
        .               Unchanged,
        .               Changed(Vec<O>),
        .               Error(E),
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
   22,916 ( 0.00%)  struct ObligationTreeId(usize);
        .           
        .           type ObligationTreeIdGenerator =
        .               std::iter::Map<std::ops::RangeFrom<usize>, fn(usize) -> ObligationTreeId>;
        .           
        .           pub struct ObligationForest<O: ForestObligation> {
        .               /// The list of obligations. In between calls to `process_obligations`,
        .               /// this list only contains nodes in the `Pending` or `Waiting` state.
        .               ///
-- line 137 ----------------------------------------
-- line 181 ----------------------------------------
        .               has_parent: bool,
        .           
        .               /// Identifier of the obligation tree to which this node belongs.
        .               obligation_tree_id: ObligationTreeId,
        .           }
        .           
        .           impl<O> Node<O> {
        .               fn new(parent: Option<usize>, obligation: O, obligation_tree_id: ObligationTreeId) -> Node<O> {
  265,792 ( 0.00%)          Node {
        .                       obligation,
        .                       state: Cell::new(NodeState::Pending),
   32,074 ( 0.00%)              dependents: if let Some(parent_index) = parent { vec![parent_index] } else { vec![] },
        .                       has_parent: parent.is_some(),
        .                       obligation_tree_id,
        .                   }
        .               }
        .           }
        .           
        .           /// The state of one node in some tree within the forest. This represents the
        .           /// current state of processing for the obligation (of type `O`) associated
-- line 200 ----------------------------------------
-- line 223 ----------------------------------------
        .           ///  |     compress()
        .           ///  v
        .           /// (Removed)
        .           /// ```
        .           /// The `Error` state can be introduced in several places, via `error_at()`.
        .           ///
        .           /// Outside of `ObligationForest` methods, nodes should be either `Pending` or
        .           /// `Waiting`.
1,828,651 ( 0.03%)  #[derive(Debug, Copy, Clone, PartialEq, Eq)]
        .           enum NodeState {
        .               /// This obligation has not yet been selected successfully. Cannot have
        .               /// subobligations.
        .               Pending,
        .           
        .               /// This obligation was selected successfully, but may or may not have
        .               /// subobligations.
        .               Success,
-- line 239 ----------------------------------------
-- line 279 ----------------------------------------
        .               pub stalled: bool,
        .           }
        .           
        .           impl<O, E> OutcomeTrait for Outcome<O, E> {
        .               type Error = Error<O, E>;
        .               type Obligation = O;
        .           
        .               fn new() -> Self {
   25,452 ( 0.00%)          Self { stalled: true, errors: vec![] }
        .               }
        .           
        .               fn mark_not_stalled(&mut self) {
   16,608 ( 0.00%)          self.stalled = false;
        .               }
        .           
        .               fn is_stalled(&self) -> bool {
    9,500 ( 0.00%)          self.stalled
        .               }
        .           
        .               fn record_completed(&mut self, _outcome: &Self::Obligation) {
        .                   // do nothing
        .               }
        .           
        .               fn record_error(&mut self, error: Self::Error) {
       48 ( 0.00%)          self.errors.push(error)
        .               }
        .           }
        .           
        .           #[derive(Debug, PartialEq, Eq)]
        .           pub struct Error<O, E> {
        .               pub error: E,
        .               pub backtrace: Vec<O>,
        .           }
        .           
        .           impl<O: ForestObligation> ObligationForest<O> {
    2,726 ( 0.00%)      pub fn new() -> ObligationForest<O> {
   32,712 ( 0.00%)          ObligationForest {
        .                       nodes: vec![],
        .                       done_cache: Default::default(),
        .                       active_cache: Default::default(),
        .                       reused_node_vec: vec![],
        .                       obligation_tree_id_generator: (0..).map(ObligationTreeId),
        .                       error_cache: Default::default(),
        .                   }
    2,726 ( 0.00%)      }
        .           
        .               /// Returns the total number of nodes in the forest that have not
        .               /// yet been fully resolved.
        .               pub fn len(&self) -> usize {
        .                   self.nodes.len()
        .               }
        .           
        .               /// Registers an obligation.
        .               pub fn register_obligation(&mut self, obligation: O) {
        .                   // Ignore errors here - there is no guarantee of success.
  277,056 ( 0.00%)          let _ = self.register_obligation_at(obligation, None);
        .               }
        .           
        .               // Returns Err(()) if we already know this obligation failed.
  298,804 ( 0.00%)      fn register_obligation_at(&mut self, obligation: O, parent: Option<usize>) -> Result<(), ()> {
   54,328 ( 0.00%)          let cache_key = obligation.as_cache_key();
   54,328 ( 0.00%)          if self.done_cache.contains(&cache_key) {
        .                       debug!("register_obligation_at: ignoring already done obligation: {:?}", obligation);
        .                       return Ok(());
        .                   }
        .           
  118,032 ( 0.00%)          match self.active_cache.entry(cache_key) {
        .                       Entry::Occupied(o) => {
    6,120 ( 0.00%)                  let node = &mut self.nodes[*o.get()];
    6,120 ( 0.00%)                  if let Some(parent_index) = parent {
        .                               // If the node is already in `active_cache`, it has already
        .                               // had its chance to be marked with a parent. So if it's
        .                               // not already present, just dump `parent` into the
        .                               // dependents as a non-parent.
    1,455 ( 0.00%)                      if !node.dependents.contains(&parent_index) {
        .                                   node.dependents.push(parent_index);
        .                               }
        .                           }
    9,180 ( 0.00%)                  if let NodeState::Error = node.state.get() { Err(()) } else { Ok(()) }
        .                       }
   49,836 ( 0.00%)              Entry::Vacant(v) => {
   99,672 ( 0.00%)                  let obligation_tree_id = match parent {
   10,308 ( 0.00%)                      Some(parent_index) => self.nodes[parent_index].obligation_tree_id,
        .                               None => self.obligation_tree_id_generator.next().unwrap(),
        .                           };
        .           
        .                           let already_failed = parent.is_some()
        .                               && self
        .                                   .error_cache
        .                                   .get(&obligation_tree_id)
        .                                   .map_or(false, |errors| errors.contains(v.key()));
        .           
        .                           if already_failed {
        .                               Err(())
        .                           } else {
   16,612 ( 0.00%)                      let new_index = self.nodes.len();
        .                               v.insert(new_index);
        .                               self.nodes.push(Node::new(parent, obligation, obligation_tree_id));
        .                               Ok(())
        .                           }
        .                       }
        .                   }
  244,476 ( 0.00%)      }
        .           
        .               /// Converts all remaining obligations to the given error.
   15,701 ( 0.00%)      pub fn to_errors<E: Clone>(&mut self, error: E) -> Vec<Error<O, E>> {
        .                   let errors = self
        .                       .nodes
        .                       .iter()
        .                       .enumerate()
        .                       .filter(|(_index, node)| node.state.get() == NodeState::Pending)
        .                       .map(|(index, _node)| Error { error: error.clone(), backtrace: self.error_at(index) })
        .                       .collect();
        .           
    4,486 ( 0.00%)          self.compress(|_| assert!(false));
        .                   errors
   13,458 ( 0.00%)      }
        .           
        .               /// Returns the set of obligations that are in a pending state.
        .               pub fn map_pending_obligations<P, F>(&self, f: F) -> Vec<P>
        .               where
        .                   F: Fn(&O) -> P,
        .               {
        5 ( 0.00%)          self.nodes
        .                       .iter()
        .                       .filter(|node| node.state.get() == NodeState::Pending)
        .                       .map(|node| f(&node.obligation))
        .                       .collect()
        .               }
        .           
       21 ( 0.00%)      fn insert_into_error_cache(&mut self, index: usize) {
        .                   let node = &self.nodes[index];
        3 ( 0.00%)          self.error_cache
        9 ( 0.00%)              .entry(node.obligation_tree_id)
        .                       .or_default()
        .                       .insert(node.obligation.as_cache_key());
       24 ( 0.00%)      }
        .           
        .               /// Performs a pass through the obligation list. This must
        .               /// be called in a loop until `outcome.stalled` is false.
        .               ///
        .               /// This _cannot_ be unrolled (presently, at least).
        .               #[inline(never)]
  114,534 ( 0.00%)      pub fn process_obligations<P, OUT>(&mut self, processor: &mut P) -> OUT
        .               where
        .                   P: ObligationProcessor<Obligation = O>,
        .                   OUT: OutcomeTrait<Obligation = O, Error = Error<O, P::Error>>,
        .               {
        .                   let mut outcome = OUT::new();
        .           
        .                   // Note that the loop body can append new nodes, and those new nodes
        .                   // will then be processed by subsequent iterations of the loop.
        .                   //
        .                   // We can't use an iterator for the loop because `self.nodes` is
        .                   // appended to and the borrow checker would complain. We also can't use
        .                   // `for index in 0..self.nodes.len() { ... }` because the range would
        .                   // be computed with the initial length, and we would miss the appended
        .                   // nodes. Therefore we use a `while` loop.
        .                   let mut index = 0;
  832,477 ( 0.01%)          while let Some(node) = self.nodes.get_mut(index) {
        .                       // `processor.process_obligation` can modify the predicate within
        .                       // `node.obligation`, and that predicate is the key used for
        .                       // `self.active_cache`. This means that `self.active_cache` can get
        .                       // out of sync with `nodes`. It's not very common, but it does
        .                       // happen, and code in `compress` has to allow for it.
1,639,502 ( 0.03%)              if node.state.get() != NodeState::Pending {
    5,560 ( 0.00%)                  index += 1;
        .                           continue;
        .                       }
        .           
   87,177 ( 0.00%)              match processor.process_obligation(&mut node.obligation) {
        .                           ProcessResult::Unchanged => {
        .                               // No change in state.
        .                           }
   66,420 ( 0.00%)                  ProcessResult::Changed(children) => {
        .                               // We are not (yet) stalled.
        .                               outcome.mark_not_stalled();
        .                               node.state.set(NodeState::Success);
        .           
   78,124 ( 0.00%)                      for child in children {
   99,484 ( 0.00%)                          let st = self.register_obligation_at(child, Some(index));
   11,704 ( 0.00%)                          if let Err(()) = st {
        .                                       // Error already reported - propagate it
        .                                       // to our node.
        .                                       self.error_at(index);
        .                                   }
        .                               }
        .                           }
        .                           ProcessResult::Error(err) => {
        .                               outcome.mark_not_stalled();
       99 ( 0.00%)                      outcome.record_error(Error { error: err, backtrace: self.error_at(index) });
        .                           }
        .                       }
1,628,382 ( 0.03%)              index += 1;
        .                   }
        .           
        .                   // There's no need to perform marking, cycle processing and compression when nothing
        .                   // changed.
    9,500 ( 0.00%)          if !outcome.is_stalled() {
        .                       self.mark_successes();
        .                       self.process_cycles(processor);
    7,892 ( 0.00%)              self.compress(|obl| outcome.record_completed(obl));
        .                   }
        .           
        .                   outcome
  114,534 ( 0.00%)      }
        .           
        .               /// Returns a vector of obligations for `p` and all of its
        .               /// ancestors, putting them into the error state in the process.
       21 ( 0.00%)      fn error_at(&self, mut index: usize) -> Vec<O> {
        .                   let mut error_stack: Vec<usize> = vec![];
        .                   let mut trace = vec![];
        .           
        .                   loop {
        .                       let node = &self.nodes[index];
        3 ( 0.00%)              node.state.set(NodeState::Error);
        .                       trace.push(node.obligation.clone());
        6 ( 0.00%)              if node.has_parent {
        .                           // The first dependent is the parent, which is treated
        .                           // specially.
        .                           error_stack.extend(node.dependents.iter().skip(1));
        .                           index = node.dependents[0];
        .                       } else {
        .                           // No parent; treat all dependents non-specially.
        .                           error_stack.extend(node.dependents.iter());
        .                           break;
-- line 504 ----------------------------------------
-- line 509 ----------------------------------------
        .                       let node = &self.nodes[index];
        .                       if node.state.get() != NodeState::Error {
        .                           node.state.set(NodeState::Error);
        .                           error_stack.extend(node.dependents.iter());
        .                       }
        .                   }
        .           
        .                   trace
       24 ( 0.00%)      }
        .           
        .               /// Mark all `Waiting` nodes as `Success`, except those that depend on a
        .               /// pending node.
        .               fn mark_successes(&self) {
        .                   // Convert all `Waiting` nodes to `Success`.
        .                   for node in &self.nodes {
  376,448 ( 0.01%)              if node.state.get() == NodeState::Waiting {
        .                           node.state.set(NodeState::Success);
        .                       }
        .                   }
        .           
        .                   // Convert `Success` nodes that depend on a pending node back to
        .                   // `Waiting`.
        .                   for node in &self.nodes {
  327,905 ( 0.01%)              if node.state.get() == NodeState::Pending {
        .                           // This call site is hot.
        .                           self.inlined_mark_dependents_as_waiting(node);
        .                       }
        .                   }
        .               }
        .           
        .               // This always-inlined function is for the hot call site.
        .               #[inline(always)]
        .               fn inlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
    3,189 ( 0.00%)          for &index in node.dependents.iter() {
        .                       let node = &self.nodes[index];
    3,189 ( 0.00%)              let state = node.state.get();
    3,189 ( 0.00%)              if state == NodeState::Success {
        .                           // This call site is cold.
    6,279 ( 0.00%)                  self.uninlined_mark_dependents_as_waiting(node);
        .                       } else {
        .                           debug_assert!(state == NodeState::Waiting || state == NodeState::Error)
        .                       }
        .                   }
        .               }
        .           
        .               // This never-inlined function is for the cold call site.
        .               #[inline(never)]
   14,651 ( 0.00%)      fn uninlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
        .                   // Mark node Waiting in the cold uninlined code instead of the hot inlined
        .                   node.state.set(NodeState::Waiting);
        .                   self.inlined_mark_dependents_as_waiting(node)
   16,744 ( 0.00%)      }
        .           
        .               /// Report cycles between all `Success` nodes, and convert all `Success`
        .               /// nodes to `Done`. This must be called after `mark_successes`.
        .               fn process_cycles<P>(&mut self, processor: &mut P)
        .               where
        .                   P: ObligationProcessor<Obligation = O>,
        .               {
    3,946 ( 0.00%)          let mut stack = std::mem::take(&mut self.reused_node_vec);
        .                   for (index, node) in self.nodes.iter().enumerate() {
        .                       // For some benchmarks this state test is extremely hot. It's a win
        .                       // to handle the no-op cases immediately to avoid the cost of the
        .                       // function call.
  327,905 ( 0.01%)              if node.state.get() == NodeState::Success {
   81,170 ( 0.00%)                  self.find_cycles_from_node(&mut stack, processor, index);
        .                       }
        .                   }
        .           
        .                   debug_assert!(stack.is_empty());
   31,568 ( 0.00%)          self.reused_node_vec = stack;
        .               }
        .           
  196,686 ( 0.00%)      fn find_cycles_from_node<P>(&self, stack: &mut Vec<usize>, processor: &mut P, index: usize)
        .               where
        .                   P: ObligationProcessor<Obligation = O>,
        .               {
        .                   let node = &self.nodes[index];
   43,708 ( 0.00%)          if node.state.get() == NodeState::Success {
      742 ( 0.00%)              match stack.iter().rposition(|&n| n == index) {
        .                           None => {
        .                               stack.push(index);
    5,620 ( 0.00%)                      for &dep_index in node.dependents.iter() {
   22,480 ( 0.00%)                          self.find_cycles_from_node(stack, processor, dep_index);
        .                               }
        .                               stack.pop();
        .                               node.state.set(NodeState::Done);
        .                           }
        .                           Some(rpos) => {
        .                               // Cycle detected.
        .                               processor.process_backedge(
        .                                   stack[rpos..].iter().map(|&i| &self.nodes[i].obligation),
        .                                   PhantomData,
        .                               );
        .                           }
        .                       }
        .                   }
  174,832 ( 0.00%)      }
        .           
        .               /// Compresses the vector, removing all popped nodes. This adjusts the
        .               /// indices and hence invalidates any outstanding indices. `process_cycles`
        .               /// must be run beforehand to remove any cycles on `Success` nodes.
        .               #[inline(never)]
   47,269 ( 0.00%)      fn compress(&mut self, mut outcome_cb: impl FnMut(&O)) {
    6,189 ( 0.00%)          let orig_nodes_len = self.nodes.len();
        .                   let mut node_rewrites: Vec<_> = std::mem::take(&mut self.reused_node_vec);
        .                   debug_assert!(node_rewrites.is_empty());
        .                   node_rewrites.extend(0..orig_nodes_len);
        .                   let mut dead_nodes = 0;
        .           
        .                   // Move removable nodes to the end, preserving the order of the
        .                   // remaining nodes.
        .                   //
        .                   // LOOP INVARIANT:
        .                   //     self.nodes[0..index - dead_nodes] are the first remaining nodes
        .                   //     self.nodes[index - dead_nodes..index] are all dead
        .                   //     self.nodes[index..] are unchanged
        .                   for index in 0..orig_nodes_len {
        .                       let node = &self.nodes[index];
1,655,309 ( 0.03%)              match node.state.get() {
        .                           NodeState::Pending | NodeState::Waiting => {
  622,594 ( 0.01%)                      if dead_nodes > 0 {
  149,316 ( 0.00%)                          self.nodes.swap(index, index - dead_nodes);
  248,860 ( 0.00%)                          node_rewrites[index] -= dead_nodes;
        .                               }
        .                           }
        .                           NodeState::Done => {
        .                               // This lookup can fail because the contents of
        .                               // `self.active_cache` are not guaranteed to match those of
        .                               // `self.nodes`. See the comment in `process_obligation`
        .                               // for more details.
   64,937 ( 0.00%)                      if let Some((predicate, _)) =
   49,815 ( 0.00%)                          self.active_cache.remove_entry(&node.obligation.as_cache_key())
        .                               {
        .                                   self.done_cache.insert(predicate);
        .                               } else {
        .                                   self.done_cache.insert(node.obligation.as_cache_key().clone());
        .                               }
        .                               // Extract the success stories.
        .                               outcome_cb(&node.obligation);
   33,210 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
   33,210 ( 0.00%)                      dead_nodes += 1;
        .                           }
        .                           NodeState::Error => {
        .                               // We *intentionally* remove the node from the cache at this point. Otherwise
        .                               // tests must come up with a different type on every type error they
        .                               // check against.
        9 ( 0.00%)                      self.active_cache.remove(&node.obligation.as_cache_key());
        6 ( 0.00%)                      self.insert_into_error_cache(index);
        6 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
        6 ( 0.00%)                      dead_nodes += 1;
        .                           }
        .                           NodeState::Success => unreachable!(),
        .                       }
        .                   }
        .           
        .                   if dead_nodes > 0 {
        .                       // Remove the dead nodes and rewrite indices.
    7,874 ( 0.00%)              self.nodes.truncate(orig_nodes_len - dead_nodes);
    3,937 ( 0.00%)              self.apply_rewrites(&node_rewrites);
        .                   }
        .           
        .                   node_rewrites.truncate(0);
   24,756 ( 0.00%)          self.reused_node_vec = node_rewrites;
   49,512 ( 0.00%)      }
        .           
        .               #[inline(never)]
   35,433 ( 0.00%)      fn apply_rewrites(&mut self, node_rewrites: &[usize]) {
        .                   let orig_nodes_len = node_rewrites.len();
        .           
        .                   for node in &mut self.nodes {
        .                       let mut i = 0;
  314,346 ( 0.01%)              while let Some(dependent) = node.dependents.get_mut(i) {
   12,592 ( 0.00%)                  let new_index = node_rewrites[*dependent];
    6,296 ( 0.00%)                  if new_index >= orig_nodes_len {
        .                               node.dependents.swap_remove(i);
        .                               if i == 0 && node.has_parent {
        .                                   // We just removed the parent.
        .                                   node.has_parent = false;
        .                               }
        .                           } else {
    3,148 ( 0.00%)                      *dependent = new_index;
    6,296 ( 0.00%)                      i += 1;
        .                           }
        .                       }
        .                   }
        .           
        .                   // This updating of `self.active_cache` is necessary because the
        .                   // removal of nodes within `compress` can fail. See above.
        .                   self.active_cache.retain(|_predicate, index| {
1,250,724 ( 0.02%)              let new_index = node_rewrites[*index];
  625,362 ( 0.01%)              if new_index >= orig_nodes_len {
        .                           false
        .                       } else {
  311,198 ( 0.01%)                  *index = new_index;
        .                           true
        .                       }
        .                   });
   31,496 ( 0.00%)      }
        .           }

2,052,440 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/fulfill.rs
--------------------------------------------------------------------------------
Ir                 

-- line 33 ----------------------------------------
        .           
        .           impl<'tcx> ForestObligation for PendingPredicateObligation<'tcx> {
        .               /// Note that we include both the `ParamEnv` and the `Predicate`,
        .               /// as the `ParamEnv` can influence whether fulfillment succeeds
        .               /// or fails.
        .               type CacheKey = ty::ParamEnvAnd<'tcx, ty::Predicate<'tcx>>;
        .           
        .               fn as_cache_key(&self) -> Self::CacheKey {
  135,774 ( 0.00%)          self.obligation.param_env.and(self.obligation.predicate)
        .               }
        .           }
        .           
        .           /// The fulfillment context is used to drive trait resolution. It
        .           /// consists of a list of obligations that must be (eventually)
        .           /// satisfied. The job is to track which are satisfied, which yielded
        .           /// errors, and which are still pending. At any point, users can call
        .           /// `select_where_possible`, and the fulfillment context will try to do
-- line 49 ----------------------------------------
-- line 79 ----------------------------------------
        .               // outside of any snapshot, so any use of it inside a snapshot
        .               // will lead to trouble and therefore is checked against, but
        .               // other fulfillment contexts sometimes do live inside of
        .               // a snapshot (they don't *straddle* a snapshot, so there
        .               // is no trouble there).
        .               usable_in_snapshot: bool,
        .           }
        .           
       30 ( 0.00%)  #[derive(Clone, Debug)]
        .           pub struct PendingPredicateObligation<'tcx> {
        .               pub obligation: PredicateObligation<'tcx>,
        .               // This is far more often read than modified, meaning that we
        .               // should mostly optimize for reading speed, while modifying is not as relevant.
        .               //
        .               // For whatever reason using a boxed slice is slower than using a `Vec` here.
        .               pub stalled_on: Vec<TyOrConstInferVar<'tcx>>,
        .           }
        .           
        .           // `PendingPredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger.
        .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
        .           static_assert_size!(PendingPredicateObligation<'_>, 72);
        .           
        .           impl<'a, 'tcx> FulfillmentContext<'tcx> {
        .               /// Creates a new fulfillment context.
       99 ( 0.00%)      pub fn new() -> FulfillmentContext<'tcx> {
    2,169 ( 0.00%)          FulfillmentContext {
    1,183 ( 0.00%)              predicates: ObligationForest::new(),
        .                       relationships: FxHashMap::default(),
        .                       register_region_obligations: true,
        .                       usable_in_snapshot: false,
        .                   }
       99 ( 0.00%)      }
        .           
        .               pub fn new_in_snapshot() -> FulfillmentContext<'tcx> {
       15 ( 0.00%)          FulfillmentContext {
        5 ( 0.00%)              predicates: ObligationForest::new(),
        .                       relationships: FxHashMap::default(),
        .                       register_region_obligations: true,
        .                       usable_in_snapshot: true,
        .                   }
        .               }
        .           
        .               pub fn new_ignoring_regions() -> FulfillmentContext<'tcx> {
    6,152 ( 0.00%)          FulfillmentContext {
    1,538 ( 0.00%)              predicates: ObligationForest::new(),
        .                       relationships: FxHashMap::default(),
        .                       register_region_obligations: false,
        .                       usable_in_snapshot: false,
        .                   }
        .               }
        .           
        .               /// Attempts to select obligations using `selcx`.
        .               fn select(&mut self, selcx: &mut SelectionContext<'a, 'tcx>) -> Vec<FulfillmentError<'tcx>> {
   17,560 ( 0.00%)          let span = debug_span!("select", obligation_forest_size = ?self.predicates.len());
        .                   let _enter = span.enter();
        .           
        .                   let mut errors = Vec::new();
        .           
        .                   loop {
        .                       debug!("select: starting another iteration");
        .           
        .                       // Process pending obligations.
        .                       let outcome: Outcome<_, _> =
   89,082 ( 0.00%)                  self.predicates.process_obligations(&mut FulfillProcessor {
        .                               selcx,
   12,726 ( 0.00%)                      register_region_obligations: self.register_region_obligations,
        .                           });
        .                       debug!("select: outcome={:#?}", outcome);
        .           
        .                       // FIXME: if we kept the original cache key, we could mark projection
        .                       // obligations as complete for the projection cache here.
        .           
        .                       errors.extend(outcome.errors.into_iter().map(to_fulfillment_error));
        .           
        .                       // If nothing new was added, no need to keep looping.
   25,452 ( 0.00%)              if outcome.stalled {
        .                           break;
        .                       }
        .                   }
        .           
        .                   debug!(
        .                       "select({} predicates remaining, {} errors) done",
        .                       self.predicates.len(),
        .                       errors.len()
-- line 162 ----------------------------------------
-- line 169 ----------------------------------------
        .           impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {
        .               /// "Normalize" a projection type `<SomeType as SomeTrait>::X` by
        .               /// creating a fresh type variable `$0` as well as a projection
        .               /// predicate `<SomeType as SomeTrait>::X == $0`. When the
        .               /// inference engine runs, it will attempt to find an impl of
        .               /// `SomeTrait` or a where-clause that lets us unify `$0` with
        .               /// something concrete. If this fails, we'll unify `$0` with
        .               /// `projection_ty` again.
      110 ( 0.00%)      #[tracing::instrument(level = "debug", skip(self, infcx, param_env, cause))]
        .               fn normalize_projection_type(
        .                   &mut self,
        .                   infcx: &InferCtxt<'_, 'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   projection_ty: ty::ProjectionTy<'tcx>,
        .                   cause: ObligationCause<'tcx>,
        .               ) -> Ty<'tcx> {
        .                   debug_assert!(!projection_ty.has_escaping_bound_vars());
        .           
        .                   // FIXME(#20304) -- cache
        .           
        .                   let mut selcx = SelectionContext::new(infcx);
        .                   let mut obligations = vec![];
       45 ( 0.00%)          let normalized_ty = project::normalize_projection_type(
        .                       &mut selcx,
        .                       param_env,
        .                       projection_ty,
       25 ( 0.00%)              cause,
        .                       0,
        .                       &mut obligations,
        .                   );
        .                   self.register_predicate_obligations(infcx, obligations);
        .           
        .                   debug!(?normalized_ty);
        .           
        .                   normalized_ty
        .               }
        .           
  127,872 ( 0.00%)      fn register_predicate_obligation(
        .                   &mut self,
        .                   infcx: &InferCtxt<'_, 'tcx>,
        .                   obligation: PredicateObligation<'tcx>,
        .               ) {
        .                   // this helps to reduce duplicate errors, as well as making
        .                   // debug output much nicer to read and so on.
   63,936 ( 0.00%)          let obligation = infcx.resolve_vars_if_possible(obligation);
        .           
        .                   debug!(?obligation, "register_predicate_obligation");
        .           
  127,872 ( 0.00%)          assert!(!infcx.is_in_snapshot() || self.usable_in_snapshot);
        .           
   63,936 ( 0.00%)          super::relationships::update(self, infcx, &obligation);
        .           
        .                   self.predicates
        .                       .register_obligation(PendingPredicateObligation { obligation, stalled_on: vec![] });
  106,560 ( 0.00%)      }
        .           
   17,960 ( 0.00%)      fn select_all_or_error(&mut self, infcx: &InferCtxt<'_, 'tcx>) -> Vec<FulfillmentError<'tcx>> {
        .                   {
    2,245 ( 0.00%)              let errors = self.select_where_possible(infcx);
    2,245 ( 0.00%)              if !errors.is_empty() {
       10 ( 0.00%)                  return errors;
        .                       }
        .                   }
        .           
   11,215 ( 0.00%)          self.predicates.to_errors(CodeAmbiguity).into_iter().map(to_fulfillment_error).collect()
   15,715 ( 0.00%)      }
        .           
   87,800 ( 0.00%)      fn select_where_possible(
        .                   &mut self,
        .                   infcx: &InferCtxt<'_, 'tcx>,
        .               ) -> Vec<FulfillmentError<'tcx>> {
        .                   let mut selcx = SelectionContext::new(infcx);
        .                   self.select(&mut selcx)
   79,020 ( 0.00%)      }
        .           
       42 ( 0.00%)      fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>> {
        .                   self.predicates.map_pending_obligations(|o| o.obligation.clone())
       56 ( 0.00%)      }
        .           
        .               fn relationships(&mut self) -> &mut FxHashMap<ty::TyVid, ty::FoundRelationships> {
       10 ( 0.00%)          &mut self.relationships
       10 ( 0.00%)      }
        .           }
        .           
        .           struct FulfillProcessor<'a, 'b, 'tcx> {
        .               selcx: &'a mut SelectionContext<'b, 'tcx>,
        .               register_region_obligations: bool,
        .           }
        .           
        .           fn mk_pending(os: Vec<PredicateObligation<'_>>) -> Vec<PendingPredicateObligation<'_>> {
-- line 258 ----------------------------------------
-- line 275 ----------------------------------------
        .               #[inline(always)]
        .               fn process_obligation(
        .                   &mut self,
        .                   pending_obligation: &mut Self::Obligation,
        .               ) -> ProcessResult<Self::Obligation, Self::Error> {
        .                   // If we were stalled on some unresolved variables, first check whether
        .                   // any of them have been resolved; if not, don't bother doing more work
        .                   // yet.
4,835,310 ( 0.08%)          let change = match pending_obligation.stalled_on.len() {
        .                       // Match arms are in order of frequency, which matters because this
        .                       // code is so hot. 1 and 0 dominate; 2+ is fairly rare.
        .                       1 => {
2,392,737 ( 0.04%)                  let infer_var = pending_obligation.stalled_on[0];
  797,579 ( 0.01%)                  self.selcx.infcx().ty_or_const_infer_var_changed(infer_var)
        .                       }
        .                       0 => {
        .                           // In this case we haven't changed, but wish to make a change.
        .                           true
        .                       }
        .                       _ => {
        .                           // This `for` loop was once a call to `all()`, but this lower-level
        .                           // form was a perf win. See #64545 for details.
-- line 296 ----------------------------------------
-- line 309 ----------------------------------------
        .                       debug!(
        .                           "process_predicate: pending obligation {:?} still stalled on {:?}",
        .                           self.selcx.infcx().resolve_vars_if_possible(pending_obligation.obligation.clone()),
        .                           pending_obligation.stalled_on
        .                       );
        .                       return ProcessResult::Unchanged;
        .                   }
        .           
   53,961 ( 0.00%)          self.progress_changed_obligations(pending_obligation)
        .               }
        .           
        .               fn process_backedge<'c, I>(
        .                   &mut self,
        .                   cycle: I,
        .                   _marker: PhantomData<&'c PendingPredicateObligation<'tcx>>,
        .               ) where
        .                   I: Clone + Iterator<Item = &'c PendingPredicateObligation<'tcx>>,
-- line 325 ----------------------------------------
-- line 333 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {
        .               // The code calling this method is extremely hot and only rarely
        .               // actually uses this, so move this part of the code
        .               // out of that loop.
        .               #[inline(never)]
  179,870 ( 0.00%)      fn progress_changed_obligations(
        .                   &mut self,
        .                   pending_obligation: &mut PendingPredicateObligation<'tcx>,
        .               ) -> ProcessResult<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>> {
        .                   pending_obligation.stalled_on.truncate(0);
        .           
        .                   let obligation = &mut pending_obligation.obligation;
        .           
   53,961 ( 0.00%)          if obligation.predicate.has_infer_types_or_consts() {
    3,555 ( 0.00%)              obligation.predicate =
   10,665 ( 0.00%)                  self.selcx.infcx().resolve_vars_if_possible(obligation.predicate);
        .                   }
        .           
        .                   debug!(?obligation, ?obligation.cause, "process_obligation");
        .           
        .                   let infcx = self.selcx.infcx();
        .           
   28,864 ( 0.00%)          let binder = obligation.predicate.kind();
  125,909 ( 0.00%)          match binder.no_bound_vars() {
       66 ( 0.00%)              None => match binder.skip_binder() {
        .                           // Evaluation will discard candidates using the leak check.
        .                           // This means we need to pass it the bound version of our
        .                           // predicate.
        .                           ty::PredicateKind::Trait(trait_ref) => {
        .                               let trait_obligation = obligation.with(binder.rebind(trait_ref));
        .           
       16 ( 0.00%)                      self.process_trait_obligation(
        .                                   obligation,
       48 ( 0.00%)                          trait_obligation,
        .                                   &mut pending_obligation.stalled_on,
        .                               )
        .                           }
        .                           ty::PredicateKind::Projection(data) => {
        .                               let project_obligation = obligation.with(binder.rebind(data));
        .           
        8 ( 0.00%)                      self.process_projection_obligation(
        .                                   obligation,
       24 ( 0.00%)                          project_obligation,
        .                                   &mut pending_obligation.stalled_on,
        .                               )
        .                           }
        .                           ty::PredicateKind::RegionOutlives(_)
        .                           | ty::PredicateKind::TypeOutlives(_)
        .                           | ty::PredicateKind::WellFormed(_)
        .                           | ty::PredicateKind::ObjectSafe(_)
        .                           | ty::PredicateKind::ClosureKind(..)
-- line 386 ----------------------------------------
-- line 397 ----------------------------------------
        .                           ty::PredicateKind::TypeWellFormedFromEnv(..) => {
        .                               bug!("TypeWellFormedFromEnv is only used for Chalk")
        .                           }
        .                       },
        .                       Some(pred) => match pred {
        .                           ty::PredicateKind::Trait(data) => {
        .                               let trait_obligation = obligation.with(Binder::dummy(data));
        .           
   36,960 ( 0.00%)                      self.process_trait_obligation(
        .                                   obligation,
  162,624 ( 0.00%)                          trait_obligation,
        .                                   &mut pending_obligation.stalled_on,
        .                               )
        .                           }
        .           
        .                           ty::PredicateKind::RegionOutlives(data) => {
      324 ( 0.00%)                      match infcx.region_outlives_predicate(&obligation.cause, Binder::dummy(data)) {
      216 ( 0.00%)                          Ok(()) => ProcessResult::Changed(vec![]),
        .                                   Err(_) => ProcessResult::Error(CodeSelectionError(Unimplemented)),
        .                               }
        .                           }
        .           
        .                           ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(t_a, r_b)) => {
    9,610 ( 0.00%)                      if self.register_region_obligations {
   24,025 ( 0.00%)                          self.selcx.infcx().register_region_obligation_with_cause(
        .                                       t_a,
        .                                       r_b,
        .                                       &obligation.cause,
        .                                   );
        .                               }
        .                               ProcessResult::Changed(vec![])
        .                           }
        .           
        .                           ty::PredicateKind::Projection(ref data) => {
        .                               let project_obligation = obligation.with(Binder::dummy(*data));
        .           
      250 ( 0.00%)                      self.process_projection_obligation(
        .                                   obligation,
      750 ( 0.00%)                          project_obligation,
        .                                   &mut pending_obligation.stalled_on,
        .                               )
        .                           }
        .           
        .                           ty::PredicateKind::ObjectSafe(trait_def_id) => {
        .                               if !self.selcx.tcx().is_object_safe(trait_def_id) {
        .                                   ProcessResult::Error(CodeSelectionError(Unimplemented))
        .                               } else {
        .                                   ProcessResult::Changed(vec![])
        .                               }
        .                           }
        .           
        .                           ty::PredicateKind::ClosureKind(_, closure_substs, kind) => {
      243 ( 0.00%)                      match self.selcx.infcx().closure_kind(closure_substs) {
        .                                   Some(closure_kind) => {
      486 ( 0.00%)                              if closure_kind.extends(kind) {
        .                                           ProcessResult::Changed(vec![])
        .                                       } else {
        .                                           ProcessResult::Error(CodeSelectionError(Unimplemented))
        .                                       }
        .                                   }
        .                                   None => ProcessResult::Unchanged,
        .                               }
        .                           }
        .           
        .                           ty::PredicateKind::WellFormed(arg) => {
   39,151 ( 0.00%)                      match wf::obligations(
        .                                   self.selcx.infcx(),
   11,186 ( 0.00%)                          obligation.param_env,
   11,186 ( 0.00%)                          obligation.cause.body_id,
   16,779 ( 0.00%)                          obligation.recursion_depth + 1,
        .                                   arg,
        .                                   obligation.cause.span,
        .                               ) {
        .                                   None => {
    1,472 ( 0.00%)                              pending_obligation.stalled_on =
    2,576 ( 0.00%)                                  vec![TyOrConstInferVar::maybe_from_generic_arg(arg).unwrap()];
      736 ( 0.00%)                              ProcessResult::Unchanged
        .                                   }
   15,675 ( 0.00%)                          Some(os) => ProcessResult::Changed(mk_pending(os)),
        .                               }
        .                           }
        .           
        .                           ty::PredicateKind::Subtype(subtype) => {
       48 ( 0.00%)                      match self.selcx.infcx().subtype_predicate(
        .                                   &obligation.cause,
        .                                   obligation.param_env,
        .                                   Binder::dummy(subtype),
        .                               ) {
        .                                   None => {
        .                                       // None means that both are unresolved.
       20 ( 0.00%)                              pending_obligation.stalled_on = vec![
        4 ( 0.00%)                                  TyOrConstInferVar::maybe_from_ty(subtype.a).unwrap(),
        8 ( 0.00%)                                  TyOrConstInferVar::maybe_from_ty(subtype.b).unwrap(),
        .                                       ];
        .                                       ProcessResult::Unchanged
        .                                   }
        .                                   Some(Ok(ok)) => ProcessResult::Changed(mk_pending(ok.obligations)),
        .                                   Some(Err(err)) => {
        .                                       let expected_found =
        .                                           ExpectedFound::new(subtype.a_is_expected, subtype.a, subtype.b);
        .                                       ProcessResult::Error(FulfillmentErrorCode::CodeSubtypeError(
-- line 497 ----------------------------------------
-- line 639 ----------------------------------------
        .                                   }
        .                               }
        .                           }
        .                           ty::PredicateKind::TypeWellFormedFromEnv(..) => {
        .                               bug!("TypeWellFormedFromEnv is only used for Chalk")
        .                           }
        .                       },
        .                   }
  161,883 ( 0.00%)      }
        .           
  140,524 ( 0.00%)      #[instrument(level = "debug", skip(self, obligation, stalled_on))]
        .               fn process_trait_obligation(
        .                   &mut self,
        .                   obligation: &PredicateObligation<'tcx>,
        .                   trait_obligation: TraitObligation<'tcx>,
        .                   stalled_on: &mut Vec<TyOrConstInferVar<'tcx>>,
        .               ) -> ProcessResult<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>> {
    7,396 ( 0.00%)          let infcx = self.selcx.infcx();
   22,188 ( 0.00%)          if obligation.predicate.is_global() {
        .                       // no type variables present, can use evaluation for better caching.
        .                       // FIXME: consider caching errors too.
    3,028 ( 0.00%)              if infcx.predicate_must_hold_considering_regions(obligation) {
        .                           debug!(
        .                               "selecting trait at depth {} evaluated to holds",
        .                               obligation.recursion_depth
        .                           );
    2,774 ( 0.00%)                  return ProcessResult::Changed(vec![]);
        .                       }
        .                   }
        .           
   42,057 ( 0.00%)          match self.selcx.select(&trait_obligation) {
        .                       Ok(Some(impl_source)) => {
        .                           debug!("selecting trait at depth {} yielded Ok(Some)", obligation.recursion_depth);
   90,090 ( 0.00%)                  ProcessResult::Changed(mk_pending(impl_source.nested_obligations()))
        .                       }
        .                       Ok(None) => {
        .                           debug!("selecting trait at depth {} yielded Ok(None)", obligation.recursion_depth);
        .           
        .                           // This is a bit subtle: for the most part, the
        .                           // only reason we can fail to make progress on
        .                           // trait selection is because we don't have enough
        .                           // information about the types in the trait.
        .                           stalled_on.clear();
        .                           stalled_on.extend(substs_infer_vars(
        .                               self.selcx,
    1,001 ( 0.00%)                      trait_obligation.predicate.map_bound(|pred| pred.trait_ref.substs),
        .                           ));
        .           
        .                           debug!(
        .                               "process_predicate: pending obligation {:?} now stalled on {:?}",
        .                               infcx.resolve_vars_if_possible(obligation.clone()),
        .                               stalled_on
        .                           );
        .           
    1,001 ( 0.00%)                  ProcessResult::Unchanged
        .                       }
        .                       Err(selection_err) => {
        .                           debug!("selecting trait at depth {} yielded Err", obligation.recursion_depth);
        .           
       42 ( 0.00%)                  ProcessResult::Error(CodeSelectionError(selection_err))
        .                       }
        .                   }
        .               }
        .           
      572 ( 0.00%)      fn process_projection_obligation(
        .                   &mut self,
        .                   obligation: &PredicateObligation<'tcx>,
        .                   project_obligation: PolyProjectionObligation<'tcx>,
        .                   stalled_on: &mut Vec<TyOrConstInferVar<'tcx>>,
        .               ) -> ProcessResult<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>> {
       52 ( 0.00%)          let tcx = self.selcx.tcx();
        .           
      156 ( 0.00%)          if obligation.predicate.is_global() {
        .                       // no type variables present, can use evaluation for better caching.
        .                       // FIXME: consider caching errors too.
       12 ( 0.00%)              if self.selcx.infcx().predicate_must_hold_considering_regions(obligation) {
        .                           if let Some(key) = ProjectionCacheKey::from_poly_projection_predicate(
        .                               &mut self.selcx,
        .                               project_obligation.predicate,
        .                           ) {
        .                               // If `predicate_must_hold_considering_regions` succeeds, then we've
        .                               // evaluated all sub-obligations. We can therefore mark the 'root'
        .                               // obligation as complete, and skip evaluating sub-obligations.
        .                               self.selcx
-- line 722 ----------------------------------------
-- line 727 ----------------------------------------
        .                                   .complete(key, EvaluationResult::EvaluatedToOk);
        .                           }
        .                           return ProcessResult::Changed(vec![]);
        .                       } else {
        .                           tracing::debug!("Does NOT hold: {:?}", obligation);
        .                       }
        .                   }
        .           
      364 ( 0.00%)          match project::poly_project_and_unify_type(self.selcx, &project_obligation) {
        .                       Ok(Ok(Some(os))) => ProcessResult::Changed(mk_pending(os)),
        .                       Ok(Ok(None)) => {
        .                           stalled_on.clear();
        .                           stalled_on.extend(substs_infer_vars(
        .                               self.selcx,
        6 ( 0.00%)                      project_obligation.predicate.map_bound(|pred| pred.projection_ty.substs),
        .                           ));
        6 ( 0.00%)                  ProcessResult::Unchanged
        .                       }
        .                       // Let the caller handle the recursion
        .                       Ok(Err(project::InProgress)) => ProcessResult::Changed(mk_pending(vec![
        .                           project_obligation.with(project_obligation.predicate.to_predicate(tcx)),
        .                       ])),
        .                       Err(e) => ProcessResult::Error(CodeProjectionError(e)),
        .                   }
      416 ( 0.00%)      }
        .           }
        .           
        .           /// Returns the set of inference variables contained in `substs`.
        .           fn substs_infer_vars<'a, 'tcx>(
        .               selcx: &mut SelectionContext<'a, 'tcx>,
        .               substs: ty::Binder<'tcx, SubstsRef<'tcx>>,
        .           ) -> impl Iterator<Item = TyOrConstInferVar<'tcx>> {
        .               selcx
        .                   .infcx()
        .                   .resolve_vars_if_possible(substs)
        .                   .skip_binder() // ok because this check doesn't care about regions
        .                   .iter()
        .                   .filter(|arg| arg.has_infer_types_or_consts())
        .                   .flat_map(|arg| {
    5,035 ( 0.00%)              let mut walker = arg.walk();
    9,063 ( 0.00%)              while let Some(c) = walker.next() {
    1,007 ( 0.00%)                  if !c.has_infer_types_or_consts() {
        .                               walker.visited.remove(&c);
        .                               walker.skip_current_subtree();
        .                           }
        .                       }
        .                       walker.visited.into_iter()
        .                   })
        .                   .filter_map(TyOrConstInferVar::maybe_from_generic_arg)
        .           }
        .           
        .           fn to_fulfillment_error<'tcx>(
        .               error: Error<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>>,
        .           ) -> FulfillmentError<'tcx> {
        .               let mut iter = error.backtrace.into_iter();
        3 ( 0.00%)      let obligation = iter.next().unwrap().obligation;
        .               // The root obligation is the last item in the backtrace - if there's only
        .               // one item, then it's the same as the main obligation
        .               let root_obligation = iter.next_back().map_or_else(|| obligation.clone(), |e| e.obligation);
       90 ( 0.00%)      FulfillmentError::new(obligation, error.error, root_obligation)
        .           }

3,406,683 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/fulfill.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/lossy.rs
--------------------------------------------------------------------------------
Ir                 

-- line 8 ----------------------------------------
        .           /// Lossy UTF-8 string.
        .           #[unstable(feature = "str_internals", issue = "none")]
        .           pub struct Utf8Lossy {
        .               bytes: [u8],
        .           }
        .           
        .           impl Utf8Lossy {
        .               #[must_use]
   81,390 ( 0.00%)      pub fn from_bytes(bytes: &[u8]) -> &Utf8Lossy {
        .                   // SAFETY: Both use the same memory layout, and UTF-8 correctness isn't required.
        .                   unsafe { mem::transmute(bytes) }
   40,695 ( 0.00%)      }
        .           
   81,386 ( 0.00%)      pub fn chunks(&self) -> Utf8LossyChunksIter<'_> {
        .                   Utf8LossyChunksIter { source: &self.bytes }
   40,693 ( 0.00%)      }
        .           }
        .           
        .           /// Iterator over lossy UTF-8 string
        .           #[must_use = "iterators are lazy and do nothing unless consumed"]
        .           #[unstable(feature = "str_internals", issue = "none")]
        .           #[allow(missing_debug_implementations)]
        .           pub struct Utf8LossyChunksIter<'a> {
        .               source: &'a [u8],
-- line 31 ----------------------------------------
-- line 40 ----------------------------------------
        .               /// Single broken char, empty if none.
        .               /// Empty iff iterator item is last.
        .               pub broken: &'a [u8],
        .           }
        .           
        .           impl<'a> Iterator for Utf8LossyChunksIter<'a> {
        .               type Item = Utf8LossyChunk<'a>;
        .           
  122,085 ( 0.00%)      fn next(&mut self) -> Option<Utf8LossyChunk<'a>> {
   81,390 ( 0.00%)          if self.source.is_empty() {
        8 ( 0.00%)              return None;
        .                   }
        .           
        .                   const TAG_CONT_U8: u8 = 128;
        .                   fn safe_get(xs: &[u8], i: usize) -> u8 {
        .                       *xs.get(i).unwrap_or(&0)
        .                   }
        .           
        .                   let mut i = 0;
        .                   let mut valid_up_to = 0;
1,942,110 ( 0.03%)          while i < self.source.len() {
        .                       // SAFETY: `i < self.source.len()` per previous line.
        .                       // For some reason the following are both significantly slower:
        .                       // while let Some(&byte) = self.source.get(i) {
        .                       // while let Some(byte) = self.source.get(i).copied() {
  971,055 ( 0.02%)              let byte = unsafe { *self.source.get_unchecked(i) };
  971,055 ( 0.02%)              i += 1;
        .           
1,942,110 ( 0.03%)              if byte < 128 {
        .                           // This could be a `1 => ...` case in the match below, but for
        .                           // the common case of all-ASCII inputs, we bypass loading the
        .                           // sizeable UTF8_CHAR_WIDTH table into cache.
        .                       } else {
        .                           let w = utf8_char_width(byte);
        .           
        .                           match w {
        .                               2 => {
-- line 76 ----------------------------------------
-- line 121 ----------------------------------------
        .                   // via `i += 1` and in between every single one of those increments, `i`
        .                   // is compared against `self.source.len()`. That happens either
        .                   // literally by `i < self.source.len()` in the while-loop's condition,
        .                   // or indirectly by `safe_get(self.source, i) & 192 != TAG_CONT_U8`. The
        .                   // loop is terminated as soon as the latest `i += 1` has made `i` no
        .                   // longer less than `self.source.len()`, which means it'll be at most
        .                   // equal to `self.source.len()`.
        .                   let (inspected, remaining) = unsafe { self.source.split_at_unchecked(i) };
   81,374 ( 0.00%)          self.source = remaining;
        .           
        .                   // SAFETY: `valid_up_to <= i` because it is only ever assigned via
        .                   // `valid_up_to = i` and `i` only increases.
        .                   let (valid, broken) = unsafe { inspected.split_at_unchecked(valid_up_to) };
        .           
  203,435 ( 0.00%)          Some(Utf8LossyChunk {
        .                       // SAFETY: All bytes up to `valid_up_to` are valid UTF-8.
        .                       valid: unsafe { from_utf8_unchecked(valid) },
        .                       broken,
        .                   })
  203,475 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Display for Utf8Lossy {
       16 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   // If we're the empty string then our iterator won't actually yield
        .                   // anything, so perform the formatting manually
        2 ( 0.00%)          if self.bytes.is_empty() {
        .                       return "".fmt(f);
        .                   }
        .           
       22 ( 0.00%)          for Utf8LossyChunk { valid, broken } in self.chunks() {
        .                       // If we successfully decoded the whole chunk as a valid string then
        .                       // we can return a direct formatting of the string which will also
        .                       // respect various formatting flags if possible.
        4 ( 0.00%)              if valid.len() == self.bytes.len() {
        2 ( 0.00%)                  assert!(broken.is_empty());
        .                           return valid.fmt(f);
        .                       }
        .           
        .                       f.write_str(valid)?;
        .                       if !broken.is_empty() {
        .                           f.write_char(char::REPLACEMENT_CHARACTER)?;
        .                       }
        .                   }
        .                   Ok(())
       18 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for Utf8Lossy {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   f.write_char('"')?;
        .           
        .                   for Utf8LossyChunk { valid, broken } in self.chunks() {
        .                       // Valid part.
-- line 174 ----------------------------------------

1,174,496 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/lossy.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .           use rustc_span::hygiene::MacroKind;
        .           use rustc_span::source_map::Spanned;
        .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
        .           use rustc_span::Span;
        .           use rustc_target::spec::abi::Abi;
        .           use std::collections::VecDeque;
        .           
        .           fn fn_decl<'hir>(node: Node<'hir>) -> Option<&'hir FnDecl<'hir>> {
      190 ( 0.00%)      match node {
        .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
        .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
        .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(&sig.decl),
        .                   Node::Expr(Expr { kind: ExprKind::Closure(_, fn_decl, ..), .. })
        .                   | Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(fn_decl, ..), .. }) => {
        .                       Some(fn_decl)
        .                   }
        .                   _ => None,
        .               }
        .           }
        .           
        .           pub fn fn_sig<'hir>(node: Node<'hir>) -> Option<&'hir FnSig<'hir>> {
       24 ( 0.00%)      match &node {
        .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
        .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
        .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(sig),
        .                   _ => None,
        .               }
        .           }
        .           
        .           pub fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {
    3,212 ( 0.00%)      match node {
        .                   Node::Item(Item {
        .                       kind: ItemKind::Const(_, body) | ItemKind::Static(.., body) | ItemKind::Fn(.., body),
        .                       ..
        .                   })
        .                   | Node::TraitItem(TraitItem {
        .                       kind:
        .                           TraitItemKind::Const(_, Some(body)) | TraitItemKind::Fn(_, TraitFn::Provided(body)),
        .                       ..
        .                   })
        .                   | Node::ImplItem(ImplItem {
        .                       kind: ImplItemKind::Const(_, body) | ImplItemKind::Fn(_, body),
        .                       ..
        .                   })
      508 ( 0.00%)          | Node::Expr(Expr { kind: ExprKind::Closure(.., body, _, _), .. }) => Some(*body),
        .           
        .                   Node::AnonConst(constant) => Some(constant.body),
        .           
        .                   _ => None,
        .               }
        .           }
        .           
        .           fn is_body_owner<'hir>(node: Node<'hir>, hir_id: HirId) -> bool {
-- line 69 ----------------------------------------
-- line 83 ----------------------------------------
        .           pub struct ParentHirIterator<'hir> {
        .               current_id: HirId,
        .               map: Map<'hir>,
        .           }
        .           
        .           impl<'hir> Iterator for ParentHirIterator<'hir> {
        .               type Item = (HirId, Node<'hir>);
        .           
       63 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
        9 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
        .                       return None;
        .                   }
        .                   loop {
        .                       // There are nodes that do not have entries, so we need to skip them.
        .                       let parent_id = self.map.get_parent_node(self.current_id);
        .           
       27 ( 0.00%)              if parent_id == self.current_id {
        .                           self.current_id = CRATE_HIR_ID;
        .                           return None;
        .                       }
        .           
       18 ( 0.00%)              self.current_id = parent_id;
       72 ( 0.00%)              if let Some(node) = self.map.find(parent_id) {
       36 ( 0.00%)                  return Some((parent_id, node));
        .                       }
        .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
        .                   }
       81 ( 0.00%)      }
        .           }
        .           
        .           /// An iterator that walks up the ancestor tree of a given `HirId`.
        .           /// Constructed using `tcx.hir().parent_owner_iter(hir_id)`.
        .           pub struct ParentOwnerIterator<'hir> {
        .               current_id: HirId,
        .               map: Map<'hir>,
        .           }
        .           
        .           impl<'hir> Iterator for ParentOwnerIterator<'hir> {
        .               type Item = (LocalDefId, OwnerNode<'hir>);
        .           
    1,314 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
      438 ( 0.00%)          if self.current_id.local_id.index() != 0 {
       78 ( 0.00%)              self.current_id.local_id = ItemLocalId::new(0);
      312 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
        .                           return Some((self.current_id.owner, node.node));
        .                       }
        .                   }
       68 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
       44 ( 0.00%)              return None;
        .                   }
        .                   loop {
        .                       // There are nodes that do not have entries, so we need to skip them.
        .                       let parent_id = self.map.def_key(self.current_id.owner).parent;
        .           
        .                       let parent_id = parent_id.map_or(CRATE_HIR_ID.owner, |local_def_index| {
        .                           let def_id = LocalDefId { local_def_index };
        .                           self.map.local_def_id_to_hir_id(def_id).owner
        .                       });
       92 ( 0.00%)              self.current_id = HirId::make_owner(parent_id);
        .           
        .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
       92 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
        .                           return Some((self.current_id.owner, node.node));
        .                       }
        .                   }
    1,168 ( 0.00%)      }
        .           }
        .           
        .           impl<'hir> Map<'hir> {
      196 ( 0.00%)      pub fn krate(&self) -> &'hir Crate<'hir> {
       28 ( 0.00%)          self.tcx.hir_crate(())
      224 ( 0.00%)      }
        .           
        7 ( 0.00%)      pub fn root_module(&self) -> &'hir Mod<'hir> {
        1 ( 0.00%)          match self.tcx.hir_owner(CRATE_DEF_ID).map(|o| o.node) {
        .                       Some(OwnerNode::Crate(item)) => item,
        .                       _ => bug!(),
        .                   }
        8 ( 0.00%)      }
        .           
        .               pub fn items(&self) -> impl Iterator<Item = &'hir Item<'hir>> + 'hir {
        .                   let krate = self.krate();
        .                   krate.owners.iter().filter_map(|owner| match owner.as_ref()?.node() {
        .                       OwnerNode::Item(item) => Some(item),
        .                       _ => None,
        .                   })
        .               }
        .           
        8 ( 0.00%)      pub fn def_key(&self, def_id: LocalDefId) -> DefKey {
        .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
        8 ( 0.00%)          self.tcx.untracked_resolutions.definitions.def_key(def_id)
       16 ( 0.00%)      }
        .           
        .               pub fn def_path_from_hir_id(&self, id: HirId) -> Option<DefPath> {
        .                   self.opt_local_def_id(id).map(|def_id| self.def_path(def_id))
        .               }
        .           
        .               pub fn def_path(&self, def_id: LocalDefId) -> DefPath {
        .                   // Accessing the DefPath is ok, since it is part of DefPathHash.
        .                   self.tcx.untracked_resolutions.definitions.def_path(def_id)
-- line 182 ----------------------------------------
-- line 184 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn def_path_hash(self, def_id: LocalDefId) -> DefPathHash {
        .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
        .                   self.tcx.untracked_resolutions.definitions.def_path_hash(def_id)
        .               }
        .           
        .               #[inline]
    2,424 ( 0.00%)      pub fn local_def_id(&self, hir_id: HirId) -> LocalDefId {
      903 ( 0.00%)          self.opt_local_def_id(hir_id).unwrap_or_else(|| {
        .                       bug!(
        .                           "local_def_id: no entry for `{:?}`, which has a map of `{:?}`",
        .                           hir_id,
        .                           self.find(hir_id)
        .                       )
        .                   })
    1,818 ( 0.00%)      }
        .           
        .               #[inline]
    2,408 ( 0.00%)      pub fn opt_local_def_id(&self, hir_id: HirId) -> Option<LocalDefId> {
      543 ( 0.00%)          if hir_id.local_id == ItemLocalId::new(0) {
        .                       Some(hir_id.owner)
        .                   } else {
      136 ( 0.00%)              self.tcx
        .                           .hir_owner_nodes(hir_id.owner)?
        .                           .local_id_to_def_id
        .                           .get(&hir_id.local_id)
        .                           .copied()
        .                   }
    2,709 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn local_def_id_to_hir_id(&self, def_id: LocalDefId) -> HirId {
        .                   // FIXME(#85914) is this access safe for incr. comp.?
      198 ( 0.00%)          self.tcx.untracked_resolutions.definitions.local_def_id_to_hir_id(def_id)
        .               }
        .           
        .               pub fn iter_local_def_id(&self) -> impl Iterator<Item = LocalDefId> + '_ {
        .                   // Create a dependency to the crate to be sure we reexcute this when the amount of
        .                   // definitions change.
        .                   self.tcx.ensure().hir_crate(());
        .                   self.tcx.untracked_resolutions.definitions.iter_local_def_id()
        .               }
        .           
      308 ( 0.00%)      pub fn opt_def_kind(&self, local_def_id: LocalDefId) -> Option<DefKind> {
        .                   let hir_id = self.local_def_id_to_hir_id(local_def_id);
      572 ( 0.00%)          let def_kind = match self.find(hir_id)? {
      144 ( 0.00%)              Node::Item(item) => match item.kind {
        .                           ItemKind::Static(..) => DefKind::Static,
        .                           ItemKind::Const(..) => DefKind::Const,
        .                           ItemKind::Fn(..) => DefKind::Fn,
        .                           ItemKind::Macro(..) => DefKind::Macro(MacroKind::Bang),
        .                           ItemKind::Mod(..) => DefKind::Mod,
        .                           ItemKind::OpaqueTy(..) => DefKind::OpaqueTy,
        .                           ItemKind::TyAlias(..) => DefKind::TyAlias,
        .                           ItemKind::Enum(..) => DefKind::Enum,
-- line 239 ----------------------------------------
-- line 252 ----------------------------------------
        .                           ForeignItemKind::Static(..) => DefKind::Static,
        .                           ForeignItemKind::Type => DefKind::ForeignTy,
        .                       },
        .                       Node::TraitItem(item) => match item.kind {
        .                           TraitItemKind::Const(..) => DefKind::AssocConst,
        .                           TraitItemKind::Fn(..) => DefKind::AssocFn,
        .                           TraitItemKind::Type(..) => DefKind::AssocTy,
        .                       },
        3 ( 0.00%)              Node::ImplItem(item) => match item.kind {
        .                           ImplItemKind::Const(..) => DefKind::AssocConst,
        .                           ImplItemKind::Fn(..) => DefKind::AssocFn,
        .                           ImplItemKind::TyAlias(..) => DefKind::AssocTy,
        .                       },
        .                       Node::Variant(_) => DefKind::Variant,
        .                       Node::Ctor(variant_data) => {
        .                           // FIXME(eddyb) is this even possible, if we have a `Node::Ctor`?
        .                           assert_ne!(variant_data.ctor_hir_id(), None);
-- line 268 ----------------------------------------
-- line 279 ----------------------------------------
        .                               Some(Node::Expr(&Expr {
        .                                   kind: ExprKind::ConstBlock(ref anon_const), ..
        .                               })) if anon_const.hir_id == hir_id => true,
        .                               _ => false,
        .                           };
        .                           if inline { DefKind::InlineConst } else { DefKind::AnonConst }
        .                       }
        .                       Node::Field(_) => DefKind::Field,
       10 ( 0.00%)              Node::Expr(expr) => match expr.kind {
        .                           ExprKind::Closure(.., None) => DefKind::Closure,
        .                           ExprKind::Closure(.., Some(_)) => DefKind::Generator,
        .                           _ => bug!("def_kind: unsupported node: {}", self.node_to_string(hir_id)),
        .                       },
        .                       Node::GenericParam(param) => match param.kind {
        .                           GenericParamKind::Lifetime { .. } => DefKind::LifetimeParam,
        .                           GenericParamKind::Type { .. } => DefKind::TyParam,
        .                           GenericParamKind::Const { .. } => DefKind::ConstParam,
-- line 295 ----------------------------------------
-- line 304 ----------------------------------------
        .                       | Node::Binding(_)
        .                       | Node::Local(_)
        .                       | Node::Param(_)
        .                       | Node::Arm(_)
        .                       | Node::Lifetime(_)
        .                       | Node::Visibility(_)
        .                       | Node::Block(_) => return None,
        .                   };
      176 ( 0.00%)          Some(def_kind)
      440 ( 0.00%)      }
        .           
        .               pub fn def_kind(&self, local_def_id: LocalDefId) -> DefKind {
        .                   self.opt_def_kind(local_def_id)
        .                       .unwrap_or_else(|| bug!("def_kind: unsupported node: {:?}", local_def_id))
        .               }
        .           
2,452,912 ( 0.04%)      pub fn find_parent_node(&self, id: HirId) -> Option<HirId> {
  306,614 ( 0.00%)          if id.local_id == ItemLocalId::from_u32(0) {
        .                       Some(self.tcx.hir_owner_parent(id.owner))
        .                   } else {
  613,080 ( 0.01%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
  306,540 ( 0.00%)              let node = owner.nodes[id.local_id].as_ref()?;
  919,620 ( 0.01%)              let hir_id = HirId { owner: id.owner, local_id: node.parent };
        .                       Some(hir_id)
        .                   }
2,452,912 ( 0.04%)      }
        .           
      691 ( 0.00%)      pub fn get_parent_node(&self, hir_id: HirId) -> HirId {
1,834,071 ( 0.03%)          self.find_parent_node(hir_id).unwrap()
    1,382 ( 0.00%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
  163,344 ( 0.00%)      pub fn find(&self, id: HirId) -> Option<Node<'hir>> {
   20,418 ( 0.00%)          if id.local_id == ItemLocalId::from_u32(0) {
        .                       let owner = self.tcx.hir_owner(id.owner)?;
    1,523 ( 0.00%)              Some(owner.node.into())
        .                   } else {
   37,790 ( 0.00%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
   18,895 ( 0.00%)              let node = owner.nodes[id.local_id].as_ref()?;
   56,685 ( 0.00%)              Some(node.node)
        .                   }
  163,344 ( 0.00%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
        .               #[inline]
        .               pub fn find_by_def_id(&self, id: LocalDefId) -> Option<Node<'hir>> {
      360 ( 0.00%)          self.find(self.local_def_id_to_hir_id(id))
        .               }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
    4,812 ( 0.00%)      pub fn get(&self, id: HirId) -> Node<'hir> {
    6,890 ( 0.00%)          self.find(id).unwrap_or_else(|| bug!("couldn't find hir id {} in the HIR map", id))
    3,208 ( 0.00%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
        .               #[inline]
        .               pub fn get_by_def_id(&self, id: LocalDefId) -> Node<'hir> {
        .                   self.find_by_def_id(id).unwrap_or_else(|| bug!("couldn't find {:?} in the HIR map", id))
        .               }
        .           
       64 ( 0.00%)      pub fn get_if_local(&self, id: DefId) -> Option<Node<'hir>> {
       32 ( 0.00%)          id.as_local().and_then(|id| self.find(self.local_def_id_to_hir_id(id)))
       64 ( 0.00%)      }
        .           
        .               pub fn get_generics(&self, id: LocalDefId) -> Option<&'hir Generics<'hir>> {
        .                   let node = self.tcx.hir_owner(id)?;
        .                   match node.node {
        .                       OwnerNode::ImplItem(impl_item) => Some(&impl_item.generics),
        .                       OwnerNode::TraitItem(trait_item) => Some(&trait_item.generics),
        .                       OwnerNode::Item(Item {
        .                           kind:
-- line 374 ----------------------------------------
-- line 381 ----------------------------------------
        .                               | ItemKind::TraitAlias(generics, _)
        .                               | ItemKind::Impl(Impl { generics, .. }),
        .                           ..
        .                       }) => Some(generics),
        .                       _ => None,
        .                   }
        .               }
        .           
    6,244 ( 0.00%)      pub fn item(&self, id: ItemId) -> &'hir Item<'hir> {
    1,784 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_item()
    7,136 ( 0.00%)      }
        .           
        .               pub fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
        .                   self.tcx.hir_owner(id.def_id).unwrap().node.expect_trait_item()
        .               }
        .           
      567 ( 0.00%)      pub fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
      162 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_impl_item()
      648 ( 0.00%)      }
        .           
        .               pub fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
        .                   self.tcx.hir_owner(id.def_id).unwrap().node.expect_foreign_item()
        .               }
        .           
    3,983 ( 0.00%)      pub fn body(&self, id: BodyId) -> &'hir Body<'hir> {
    1,138 ( 0.00%)          self.tcx.hir_owner_nodes(id.hir_id.owner).unwrap().bodies[&id.hir_id.local_id]
    4,552 ( 0.00%)      }
        .           
      114 ( 0.00%)      pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnDecl<'hir>> {
      114 ( 0.00%)          if let Some(node) = self.find(hir_id) {
        .                       fn_decl(node)
        .                   } else {
        .                       bug!("no node for hir_id `{}`", hir_id)
        .                   }
       76 ( 0.00%)      }
        .           
        9 ( 0.00%)      pub fn fn_sig_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnSig<'hir>> {
        9 ( 0.00%)          if let Some(node) = self.find(hir_id) {
        .                       fn_sig(node)
        .                   } else {
        .                       bug!("no node for hir_id `{}`", hir_id)
        .                   }
        9 ( 0.00%)      }
        .           
        .               pub fn enclosing_body_owner(&self, hir_id: HirId) -> HirId {
        .                   for (parent, _) in self.parent_iter(hir_id) {
        .                       if let Some(body) = self.maybe_body_owned_by(parent) {
        .                           return self.body_owner(body);
        .                       }
        .                   }
        .           
        .                   bug!("no `enclosing_body_owner` for hir_id `{}`", hir_id);
        .               }
        .           
        .               /// Returns the `HirId` that corresponds to the definition of
        .               /// which this is the body of, i.e., a `fn`, `const` or `static`
        .               /// item (possibly associated), a closure, or a `hir::AnonConst`.
    3,024 ( 0.00%)      pub fn body_owner(&self, BodyId { hir_id }: BodyId) -> HirId {
        .                   let parent = self.get_parent_node(hir_id);
    2,268 ( 0.00%)          assert!(self.find(parent).map_or(false, |n| is_body_owner(n, hir_id)));
        .                   parent
    3,024 ( 0.00%)      }
        .           
      950 ( 0.00%)      pub fn body_owner_def_id(&self, id: BodyId) -> LocalDefId {
    1,505 ( 0.00%)          self.local_def_id(self.body_owner(id))
      950 ( 0.00%)      }
        .           
        .               /// Given a `HirId`, returns the `BodyId` associated with it,
        .               /// if the node is a body owner, otherwise returns `None`.
      120 ( 0.00%)      pub fn maybe_body_owned_by(&self, hir_id: HirId) -> Option<BodyId> {
      398 ( 0.00%)          self.find(hir_id).map(associated_body).flatten()
      360 ( 0.00%)      }
        .           
        .               /// Given a body owner's id, returns the `BodyId` associated with it.
      342 ( 0.00%)      pub fn body_owned_by(&self, id: HirId) -> BodyId {
        .                   self.maybe_body_owned_by(id).unwrap_or_else(|| {
        .                       span_bug!(
        .                           self.span(id),
        .                           "body_owned_by: {} has no associated body",
        .                           self.node_to_string(id)
        .                       );
        .                   })
      266 ( 0.00%)      }
        .           
        .               pub fn body_param_names(&self, id: BodyId) -> impl Iterator<Item = Ident> + 'hir {
        .                   self.body(id).params.iter().map(|arg| match arg.pat.kind {
        .                       PatKind::Binding(_, _, ident, _) => ident,
        .                       _ => Ident::empty(),
        .                   })
        .               }
        .           
        .               /// Returns the `BodyOwnerKind` of this `LocalDefId`.
        .               ///
        .               /// Panics if `LocalDefId` does not have an associated body.
      678 ( 0.00%)      pub fn body_owner_kind(&self, id: HirId) -> BodyOwnerKind {
    1,982 ( 0.00%)          match self.get(id) {
        .                       Node::Item(&Item { kind: ItemKind::Const(..), .. })
        .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Const(..), .. })
        .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Const(..), .. })
        .                       | Node::AnonConst(_) => BodyOwnerKind::Const,
        .                       Node::Ctor(..)
        .                       | Node::Item(&Item { kind: ItemKind::Fn(..), .. })
        .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Fn(..), .. })
        .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Fn(..), .. }) => BodyOwnerKind::Fn,
       12 ( 0.00%)              Node::Item(&Item { kind: ItemKind::Static(_, m, _), .. }) => BodyOwnerKind::Static(m),
        .                       Node::Expr(&Expr { kind: ExprKind::Closure(..), .. }) => BodyOwnerKind::Closure,
        .                       node => bug!("{:#?} is not a body node", node),
        .                   }
      678 ( 0.00%)      }
        .           
        .               /// Returns the `ConstContext` of the body associated with this `LocalDefId`.
        .               ///
        .               /// Panics if `LocalDefId` does not have an associated body.
        .               ///
        .               /// This should only be used for determining the context of a body, a return
        .               /// value of `Some` does not always suggest that the owner of the body is `const`,
        .               /// just that it has to be checked as if it were.
      912 ( 0.00%)      pub fn body_const_context(&self, did: LocalDefId) -> Option<ConstContext> {
        .                   let hir_id = self.local_def_id_to_hir_id(did);
    1,368 ( 0.00%)          let ccx = match self.body_owner_kind(hir_id) {
        .                       BodyOwnerKind::Const => ConstContext::Const,
       18 ( 0.00%)              BodyOwnerKind::Static(mt) => ConstContext::Static(mt),
        .           
       84 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_constructor(did.to_def_id()) => return None,
       84 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_const_fn_raw(did.to_def_id()) => ConstContext::ConstFn,
        .                       BodyOwnerKind::Fn
      168 ( 0.00%)                  if self.tcx.has_attr(did.to_def_id(), sym::default_method_body_is_const) =>
        .                       {
        .                           ConstContext::ConstFn
        .                       }
        .                       BodyOwnerKind::Fn | BodyOwnerKind::Closure => return None,
        .                   };
        .           
        .                   Some(ccx)
    1,026 ( 0.00%)      }
        .           
        .               /// Returns an iterator of the `DefId`s for all body-owners in this
        .               /// crate. If you would prefer to iterate over the bodies
        .               /// themselves, you can do `self.hir().krate().body_ids.iter()`.
       21 ( 0.00%)      pub fn body_owners(self) -> impl Iterator<Item = LocalDefId> + 'hir {
        3 ( 0.00%)          self.krate()
        .                       .owners
        .                       .iter_enumerated()
        .                       .flat_map(move |(owner, owner_info)| {
      171 ( 0.00%)                  let bodies = &owner_info.as_ref()?.nodes.bodies;
        .                           Some(bodies.iter().map(move |&(local_id, _)| {
        2 ( 0.00%)                      let hir_id = HirId { owner, local_id };
        .                               let body_id = BodyId { hir_id };
      184 ( 0.00%)                      self.body_owner_def_id(body_id)
        .                           }))
        .                       })
        .                       .flatten()
       15 ( 0.00%)      }
        .           
       10 ( 0.00%)      pub fn par_body_owners<F: Fn(LocalDefId) + Sync + Send>(self, f: F) {
        .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
        .                   #[cfg(parallel_compiler)]
        .                   use rustc_rayon::iter::IndexedParallelIterator;
        .           
        3 ( 0.00%)          par_iter(&self.krate().owners.raw).enumerate().for_each(|(owner, owner_info)| {
        .                       let owner = LocalDefId::new(owner);
      342 ( 0.00%)              if let Some(owner_info) = owner_info {
        .                           par_iter(owner_info.nodes.bodies.range(..)).for_each(|(local_id, _)| {
        .                               let hir_id = HirId { owner, local_id: *local_id };
        .                               let body_id = BodyId { hir_id };
      171 ( 0.00%)                      f(self.body_owner_def_id(body_id))
        .                           })
        .                       }
        .                   });
        8 ( 0.00%)      }
        .           
        .               pub fn ty_param_owner(&self, id: HirId) -> LocalDefId {
        .                   match self.get(id) {
        .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
        .                           id.expect_owner()
        .                       }
        .                       Node::GenericParam(_) => self.get_parent_item(id),
        .                       _ => bug!("ty_param_owner: {} not a type parameter", self.node_to_string(id)),
-- line 558 ----------------------------------------
-- line 564 ----------------------------------------
        .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
        .                           kw::SelfUpper
        .                       }
        .                       Node::GenericParam(param) => param.name.ident().name,
        .                       _ => bug!("ty_param_name: {} not a type parameter", self.node_to_string(id)),
        .                   }
        .               }
        .           
      549 ( 0.00%)      pub fn trait_impls(&self, trait_did: DefId) -> &'hir [LocalDefId] {
       61 ( 0.00%)          self.tcx.all_local_trait_impls(()).get(&trait_did).map_or(&[], |xs| &xs[..])
      549 ( 0.00%)      }
        .           
        .               /// Gets the attributes on the crate. This is preferable to
        .               /// invoking `krate.attrs` because it registers a tighter
        .               /// dep-graph access.
        .               pub fn krate_attrs(&self) -> &'hir [ast::Attribute] {
       74 ( 0.00%)          self.attrs(CRATE_HIR_ID)
        .               }
        .           
      112 ( 0.00%)      pub fn get_module(&self, module: LocalDefId) -> (&'hir Mod<'hir>, Span, HirId) {
        .                   let hir_id = HirId::make_owner(module);
       80 ( 0.00%)          match self.tcx.hir_owner(module).map(|o| o.node) {
       12 ( 0.00%)              Some(OwnerNode::Item(&Item { span, kind: ItemKind::Mod(ref m), .. })) => {
        .                           (m, span, hir_id)
        .                       }
       30 ( 0.00%)              Some(OwnerNode::Crate(item)) => (item, item.inner, hir_id),
        .                       node => panic!("not a module: {:?}", node),
        .                   }
      144 ( 0.00%)      }
        .           
        .               /// Walks the contents of a crate. See also `Crate::visit_all_items`.
       11 ( 0.00%)      pub fn walk_toplevel_module(self, visitor: &mut impl Visitor<'hir>) {
       25 ( 0.00%)          let (top_mod, span, hir_id) = self.get_module(CRATE_DEF_ID);
        .                   visitor.visit_mod(top_mod, span, hir_id);
        8 ( 0.00%)      }
        .           
        .               /// Walks the attributes in a crate.
       20 ( 0.00%)      pub fn walk_attributes(self, visitor: &mut impl Visitor<'hir>) {
        2 ( 0.00%)          let krate = self.krate();
        .                   for (owner, info) in krate.owners.iter_enumerated() {
      228 ( 0.00%)              if let Some(info) = info {
        .                           for (local_id, attrs) in info.attrs.map.iter() {
        .                               let id = HirId { owner, local_id: *local_id };
        .                               for a in *attrs {
    1,025 ( 0.00%)                          visitor.visit_attribute(id, a)
        .                               }
        .                           }
        .                       }
        .                   }
       16 ( 0.00%)      }
        .           
        .               /// Visits all items in the crate in some deterministic (but
        .               /// unspecified) order. If you just need to process every item,
        .               /// but don't care about nesting, this method is the best choice.
        .               ///
        .               /// If you do care about nesting -- usually because your algorithm
        .               /// follows lexical scoping rules -- then you want a different
        .               /// approach. You should override `visit_nested_item` in your
        .               /// visitor and then call `intravisit::walk_crate` instead.
      120 ( 0.00%)      pub fn visit_all_item_likes<V>(&self, visitor: &mut V)
        .               where
        .                   V: itemlikevisit::ItemLikeVisitor<'hir>,
        .               {
       18 ( 0.00%)          let krate = self.krate();
       71 ( 0.00%)          for owner in krate.owners.iter().filter_map(Option::as_ref) {
      960 ( 0.00%)              match owner.node() {
    1,548 ( 0.00%)                  OwnerNode::Item(item) => visitor.visit_item(item),
        .                           OwnerNode::ForeignItem(item) => visitor.visit_foreign_item(item),
        9 ( 0.00%)                  OwnerNode::ImplItem(item) => visitor.visit_impl_item(item),
        .                           OwnerNode::TraitItem(item) => visitor.visit_trait_item(item),
        .                           OwnerNode::Crate(_) => {}
        .                       }
        .                   }
      120 ( 0.00%)      }
        .           
        .               /// A parallel version of `visit_all_item_likes`.
        .               pub fn par_visit_all_item_likes<V>(&self, visitor: &V)
        .               where
        .                   V: itemlikevisit::ParItemLikeVisitor<'hir> + Sync + Send,
        .               {
        1 ( 0.00%)          let krate = self.krate();
        2 ( 0.00%)          par_for_each_in(&krate.owners.raw, |owner| match owner.as_ref().map(OwnerInfo::node) {
       36 ( 0.00%)              Some(OwnerNode::Item(item)) => visitor.visit_item(item),
        .                       Some(OwnerNode::ForeignItem(item)) => visitor.visit_foreign_item(item),
        3 ( 0.00%)              Some(OwnerNode::ImplItem(item)) => visitor.visit_impl_item(item),
        .                       Some(OwnerNode::TraitItem(item)) => visitor.visit_trait_item(item),
        .                       Some(OwnerNode::Crate(_)) | None => {}
        .                   })
        .               }
        .           
      258 ( 0.00%)      pub fn visit_item_likes_in_module<V>(&self, module: LocalDefId, visitor: &mut V)
        .               where
        .                   V: ItemLikeVisitor<'hir>,
        .               {
       33 ( 0.00%)          let module = self.tcx.hir_module_items(module);
        .           
       36 ( 0.00%)          for id in module.items.iter() {
    1,620 ( 0.00%)              visitor.visit_item(self.item(*id));
        .                   }
        .           
       36 ( 0.00%)          for id in module.trait_items.iter() {
        .                       visitor.visit_trait_item(self.trait_item(*id));
        .                   }
        .           
       36 ( 0.00%)          for id in module.impl_items.iter() {
      117 ( 0.00%)              visitor.visit_impl_item(self.impl_item(*id));
        .                   }
        .           
       36 ( 0.00%)          for id in module.foreign_items.iter() {
        .                       visitor.visit_foreign_item(self.foreign_item(*id));
        .                   }
      264 ( 0.00%)      }
        .           
       46 ( 0.00%)      pub fn for_each_module(&self, f: impl Fn(LocalDefId)) {
        .                   let mut queue = VecDeque::new();
        .                   queue.push_back(CRATE_DEF_ID);
        .           
       24 ( 0.00%)          while let Some(id) = queue.pop_front() {
        .                       f(id);
        9 ( 0.00%)              let items = self.tcx.hir_module_items(id);
       96 ( 0.00%)              queue.extend(items.submodules.iter().copied())
        .                   }
       40 ( 0.00%)      }
        .           
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId)) {
        4 ( 0.00%)          self.for_each_module(f)
        .               }
        .           
        .               #[cfg(parallel_compiler)]
        .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId) + Sync) {
        .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
        .                   par_iter_submodules(self.tcx, CRATE_DEF_ID, &f);
        .           
        .                   fn par_iter_submodules<F>(tcx: TyCtxt<'_>, module: LocalDefId, f: &F)
-- line 699 ----------------------------------------
-- line 703 ----------------------------------------
        .                       (*f)(module);
        .                       let items = tcx.hir_module_items(module);
        .                       par_iter(&items.submodules[..]).for_each(|&sm| par_iter_submodules(tcx, sm, f));
        .                   }
        .               }
        .           
        .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
        .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
        9 ( 0.00%)      pub fn parent_iter(self, current_id: HirId) -> ParentHirIterator<'hir> {
        .                   ParentHirIterator { current_id, map: self }
       36 ( 0.00%)      }
        .           
        .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
        .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
        .               pub fn parent_owner_iter(self, current_id: HirId) -> ParentOwnerIterator<'hir> {
        .                   ParentOwnerIterator { current_id, map: self }
      382 ( 0.00%)      }
        .           
        .               /// Checks if the node is left-hand side of an assignment.
        .               pub fn is_lhs(&self, id: HirId) -> bool {
        .                   match self.find(self.get_parent_node(id)) {
        .                       Some(Node::Expr(expr)) => match expr.kind {
        .                           ExprKind::Assign(lhs, _rhs, _span) => lhs.hir_id == id,
        .                           _ => false,
        .                       },
-- line 727 ----------------------------------------
-- line 792 ----------------------------------------
        .                   }
        .                   None
        .               }
        .           
        .               /// Retrieves the `HirId` for `id`'s parent item, or `id` itself if no
        .               /// parent item is in this map. The "parent item" is the closest parent node
        .               /// in the HIR which is recorded by the map and is an item, either an item
        .               /// in a module, trait, or impl.
       98 ( 0.00%)      pub fn get_parent_item(&self, hir_id: HirId) -> LocalDefId {
      882 ( 0.00%)          if let Some((def_id, _node)) = self.parent_owner_iter(hir_id).next() {
        .                       def_id
        .                   } else {
        .                       CRATE_DEF_ID
        .                   }
      196 ( 0.00%)      }
        .           
        .               /// Returns the `HirId` of `id`'s nearest module parent, or `id` itself if no
        .               /// module parent is in this map.
        .               pub(super) fn get_module_parent_node(&self, hir_id: HirId) -> LocalDefId {
      332 ( 0.00%)          for (def_id, node) in self.parent_owner_iter(hir_id) {
       60 ( 0.00%)              if let OwnerNode::Item(&Item { kind: ItemKind::Mod(_), .. }) = node {
        .                           return def_id;
        .                       }
        .                   }
        .                   CRATE_DEF_ID
        .               }
        .           
        .               /// When on an if expression, a match arm tail expression or a match arm, give back
        .               /// the enclosing `if` or `match` expression.
-- line 820 ----------------------------------------
-- line 885 ----------------------------------------
        .                       }
        .                   }
        .                   bug!(
        .                       "expected foreign mod or inlined parent, found {}",
        .                       self.node_to_string(HirId::make_owner(parent))
        .                   )
        .               }
        .           
      532 ( 0.00%)      pub fn expect_item(&self, id: LocalDefId) -> &'hir Item<'hir> {
      228 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::Item(item), .. }) => item,
        .                       _ => bug!("expected item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
      608 ( 0.00%)      }
        .           
       21 ( 0.00%)      pub fn expect_impl_item(&self, id: LocalDefId) -> &'hir ImplItem<'hir> {
        9 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::ImplItem(item), .. }) => item,
        .                       _ => bug!("expected impl item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
       24 ( 0.00%)      }
        .           
        .               pub fn expect_trait_item(&self, id: LocalDefId) -> &'hir TraitItem<'hir> {
        .                   match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::TraitItem(item), .. }) => item,
        .                       _ => bug!("expected trait item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
        .               }
        .           
-- line 913 ----------------------------------------
-- line 929 ----------------------------------------
        .           
        .               pub fn expect_expr(&self, id: HirId) -> &'hir Expr<'hir> {
        .                   match self.find(id) {
        .                       Some(Node::Expr(expr)) => expr,
        .                       _ => bug!("expected expr, found {}", self.node_to_string(id)),
        .                   }
        .               }
        .           
      126 ( 0.00%)      pub fn opt_name(&self, id: HirId) -> Option<Symbol> {
       54 ( 0.00%)          Some(match self.get(id) {
       16 ( 0.00%)              Node::Item(i) => i.ident.name,
        .                       Node::ForeignItem(fi) => fi.ident.name,
        .                       Node::ImplItem(ii) => ii.ident.name,
        .                       Node::TraitItem(ti) => ti.ident.name,
        .                       Node::Variant(v) => v.ident.name,
        .                       Node::Field(f) => f.ident.name,
        .                       Node::Lifetime(lt) => lt.name.ident().name,
        .                       Node::GenericParam(param) => param.name.ident().name,
       12 ( 0.00%)              Node::Binding(&Pat { kind: PatKind::Binding(_, _, l, _), .. }) => l.name,
        .                       Node::Ctor(..) => self.name(HirId::make_owner(self.get_parent_item(id))),
        .                       _ => return None,
        .                   })
       70 ( 0.00%)      }
        .           
       88 ( 0.00%)      pub fn name(&self, id: HirId) -> Symbol {
       48 ( 0.00%)          match self.opt_name(id) {
        .                       Some(name) => name,
        .                       None => bug!("no name for {}", self.node_to_string(id)),
        .                   }
       66 ( 0.00%)      }
        .           
        .               /// Given a node ID, gets a list of attributes associated with the AST
        .               /// corresponding to the node-ID.
2,687,454 ( 0.04%)      pub fn attrs(&self, id: HirId) -> &'hir [ast::Attribute] {
  383,922 ( 0.01%)          self.tcx.hir_attrs(id.owner).get(id.local_id)
3,071,376 ( 0.05%)      }
        .           
        .               /// Gets the span of the definition of the specified HIR node.
        .               /// This is used by `tcx.get_span`
      705 ( 0.00%)      pub fn span(&self, hir_id: HirId) -> Span {
   62,723 ( 0.00%)          self.opt_span(hir_id)
        .                       .unwrap_or_else(|| bug!("hir::map::Map::span: id not in map: {:?}", hir_id))
      705 ( 0.00%)      }
        .           
  111,328 ( 0.00%)      pub fn opt_span(&self, hir_id: HirId) -> Option<Span> {
  111,328 ( 0.00%)          let span = match self.find(hir_id)? {
        .                       Node::Param(param) => param.span,
      172 ( 0.00%)              Node::Item(item) => match &item.kind {
        .                           ItemKind::Fn(sig, _, _) => sig.span,
       68 ( 0.00%)                  _ => item.span,
        .                       },
        .                       Node::ForeignItem(foreign_item) => foreign_item.span,
        .                       Node::TraitItem(trait_item) => match &trait_item.kind {
        .                           TraitItemKind::Fn(sig, _) => sig.span,
        .                           _ => trait_item.span,
        .                       },
       24 ( 0.00%)              Node::ImplItem(impl_item) => match &impl_item.kind {
       24 ( 0.00%)                  ImplItemKind::Fn(sig, _) => sig.span,
        .                           _ => impl_item.span,
        .                       },
        .                       Node::Variant(variant) => variant.span,
        4 ( 0.00%)              Node::Field(field) => field.span,
        .                       Node::AnonConst(constant) => self.body(constant.body).value.span,
        .                       Node::Expr(expr) => expr.span,
        .                       Node::Stmt(stmt) => stmt.span,
        .                       Node::PathSegment(seg) => seg.ident.span,
        .                       Node::Ty(ty) => ty.span,
        .                       Node::TraitRef(tr) => tr.path.span,
        .                       Node::Binding(pat) => pat.span,
        .                       Node::Pat(pat) => pat.span,
-- line 998 ----------------------------------------
-- line 1007 ----------------------------------------
        .                       Node::GenericParam(param) => param.span,
        .                       Node::Visibility(&Spanned {
        .                           node: VisibilityKind::Restricted { ref path, .. },
        .                           ..
        .                       }) => path.span,
        .                       Node::Infer(i) => i.span,
        .                       Node::Visibility(v) => bug!("unexpected Visibility {:?}", v),
        .                       Node::Local(local) => local.span,
        4 ( 0.00%)              Node::Crate(item) => item.inner,
        .                   };
        .                   Some(span)
  159,040 ( 0.00%)      }
        .           
        .               /// Like `hir.span()`, but includes the body of function items
        .               /// (instead of just the function header)
        .               pub fn span_with_body(&self, hir_id: HirId) -> Span {
        .                   match self.find(hir_id) {
        .                       Some(Node::TraitItem(item)) => item.span,
        .                       Some(Node::ImplItem(impl_item)) => impl_item.span,
        .                       Some(Node::Item(item)) => item.span,
        .                       Some(_) => self.span(hir_id),
        .                       _ => bug!("hir::map::Map::span_with_body: id not in map: {:?}", hir_id),
        .                   }
        .               }
        .           
        2 ( 0.00%)      pub fn span_if_local(&self, id: DefId) -> Option<Span> {
       88 ( 0.00%)          id.as_local().and_then(|id| self.opt_span(self.local_def_id_to_hir_id(id)))
        3 ( 0.00%)      }
        .           
        .               pub fn res_span(&self, res: Res) -> Option<Span> {
        .                   match res {
        .                       Res::Err => None,
        .                       Res::Local(id) => Some(self.span(id)),
        .                       res => self.span_if_local(res.opt_def_id()?),
        .                   }
        .               }
-- line 1042 ----------------------------------------
-- line 1062 ----------------------------------------
        .           }
        .           
        .           impl<'hir> intravisit::Map<'hir> for Map<'hir> {
        .               fn find(&self, hir_id: HirId) -> Option<Node<'hir>> {
        .                   self.find(hir_id)
        .               }
        .           
        .               fn body(&self, id: BodyId) -> &'hir Body<'hir> {
      319 ( 0.00%)          self.body(id)
        .               }
        .           
        .               fn item(&self, id: ItemId) -> &'hir Item<'hir> {
      422 ( 0.00%)          self.item(id)
        .               }
        .           
        .               fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
        .                   self.trait_item(id)
        .               }
        .           
        .               fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
       39 ( 0.00%)          self.impl_item(id)
        .               }
        .           
        .               fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
        .                   self.foreign_item(id)
        .               }
        .           }
        .           
        7 ( 0.00%)  pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {
        .               debug_assert_eq!(crate_num, LOCAL_CRATE);
        .               let krate = tcx.hir_crate(());
        3 ( 0.00%)      let hir_body_hash = krate.hir_hash;
        .           
        .               let upstream_crates = upstream_crates(tcx);
        .           
        .               // We hash the final, remapped names of all local source files so we
        .               // don't have to include the path prefix remapping commandline args.
        .               // If we included the full mapping in the SVH, we could only have
        .               // reproducible builds by compiling from the same directory. So we just
        .               // hash the result of the mapping instead of the mapping itself.
        2 ( 0.00%)      let mut source_file_names: Vec<_> = tcx
        .                   .sess
        .                   .source_map()
        .                   .files()
        .                   .iter()
        .                   .filter(|source_file| source_file.cnum == LOCAL_CRATE)
        5 ( 0.00%)          .map(|source_file| source_file.name_hash)
        .                   .collect();
        .           
        .               source_file_names.sort_unstable();
        .           
        .               let mut hcx = tcx.create_stable_hashing_context();
        .               let mut stable_hasher = StableHasher::new();
        .               hir_body_hash.hash_stable(&mut hcx, &mut stable_hasher);
        .               upstream_crates.hash_stable(&mut hcx, &mut stable_hasher);
        .               source_file_names.hash_stable(&mut hcx, &mut stable_hasher);
        3 ( 0.00%)      if tcx.sess.opts.debugging_opts.incremental_relative_spans {
        .                   let definitions = &tcx.untracked_resolutions.definitions;
        .                   let mut owner_spans: Vec<_> = krate
        .                       .owners
        .                       .iter_enumerated()
        .                       .filter_map(|(def_id, info)| {
        .                           let _ = info.as_ref()?;
        .                           let def_path_hash = definitions.def_path_hash(def_id);
        .                           let span = definitions.def_span(def_id);
        .                           debug_assert_eq!(span.parent(), None);
        .                           Some((def_path_hash, span))
        .                       })
        .                       .collect();
        .                   owner_spans.sort_unstable_by_key(|bn| bn.0);
        .                   owner_spans.hash_stable(&mut hcx, &mut stable_hasher);
        .               }
        3 ( 0.00%)      tcx.sess.opts.dep_tracking_hash(true).hash_stable(&mut hcx, &mut stable_hasher);
        2 ( 0.00%)      tcx.sess.local_stable_crate_id().hash_stable(&mut hcx, &mut stable_hasher);
        .           
        .               let crate_hash: Fingerprint = stable_hasher.finish();
        1 ( 0.00%)      Svh::new(crate_hash.to_smaller_hash())
        9 ( 0.00%)  }
        .           
        .           fn upstream_crates(tcx: TyCtxt<'_>) -> Vec<(StableCrateId, Svh)> {
        .               let mut upstream_crates: Vec<_> = tcx
        .                   .crates(())
        .                   .iter()
        .                   .map(|&cnum| {
      120 ( 0.00%)              let stable_crate_id = tcx.resolutions(()).cstore.stable_crate_id(cnum);
       24 ( 0.00%)              let hash = tcx.crate_hash(cnum);
        .                       (stable_crate_id, hash)
        .                   })
        .                   .collect();
        .               upstream_crates.sort_unstable_by_key(|&(stable_crate_id, _)| stable_crate_id);
        .               upstream_crates
        .           }
        .           
        .           fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {
-- line 1155 ----------------------------------------
-- line 1238 ----------------------------------------
        .                   Some(Node::Lifetime(_)) => node_str("lifetime"),
        .                   Some(Node::GenericParam(ref param)) => format!("generic_param {:?}{}", param, id_str),
        .                   Some(Node::Visibility(ref vis)) => format!("visibility {:?}{}", vis, id_str),
        .                   Some(Node::Crate(..)) => String::from("root_crate"),
        .                   None => format!("unknown node{}", id_str),
        .               }
        .           }
        .           
       27 ( 0.00%)  pub(super) fn hir_module_items(tcx: TyCtxt<'_>, module_id: LocalDefId) -> ModuleItems {
       18 ( 0.00%)      let mut collector = ModuleCollector {
        .                   tcx,
        .                   submodules: Vec::default(),
        .                   items: Vec::default(),
        .                   trait_items: Vec::default(),
        .                   impl_items: Vec::default(),
        .                   foreign_items: Vec::default(),
        .               };
        .           
       15 ( 0.00%)      let (hir_mod, span, hir_id) = tcx.hir().get_module(module_id);
        .               collector.visit_mod(hir_mod, span, hir_id);
        .           
       48 ( 0.00%)      let ModuleCollector { submodules, items, trait_items, impl_items, foreign_items, .. } =
        .                   collector;
       33 ( 0.00%)      return ModuleItems {
       12 ( 0.00%)          submodules: submodules.into_boxed_slice(),
       12 ( 0.00%)          items: items.into_boxed_slice(),
       12 ( 0.00%)          trait_items: trait_items.into_boxed_slice(),
       12 ( 0.00%)          impl_items: impl_items.into_boxed_slice(),
       12 ( 0.00%)          foreign_items: foreign_items.into_boxed_slice(),
        .               };
        .           
        .               struct ModuleCollector<'tcx> {
        .                   tcx: TyCtxt<'tcx>,
        .                   submodules: Vec<LocalDefId>,
        .                   items: Vec<ItemId>,
        .                   trait_items: Vec<TraitItemId>,
        .                   impl_items: Vec<ImplItemId>,
        .                   foreign_items: Vec<ForeignItemId>,
        .               }
        .           
        .               impl<'hir> Visitor<'hir> for ModuleCollector<'hir> {
        .                   type NestedFilter = nested_filter::All;
        .           
        .                   fn nested_visit_map(&mut self) -> Self::Map {
       56 ( 0.00%)              self.tcx.hir()
        .                   }
        .           
      180 ( 0.00%)          fn visit_item(&mut self, item: &'hir Item<'hir>) {
      108 ( 0.00%)              self.items.push(item.item_id());
       72 ( 0.00%)              if let ItemKind::Mod(..) = item.kind {
        .                           // If this declares another module, do not recurse inside it.
        2 ( 0.00%)                  self.submodules.push(item.def_id);
        .                       } else {
      204 ( 0.00%)                  intravisit::walk_item(self, item)
        .                       }
        8 ( 0.00%)          }
        .           
        .                   fn visit_trait_item(&mut self, item: &'hir TraitItem<'hir>) {
        .                       self.trait_items.push(item.trait_item_id());
        .                       intravisit::walk_trait_item(self, item)
        .                   }
        .           
        .                   fn visit_impl_item(&mut self, item: &'hir ImplItem<'hir>) {
        9 ( 0.00%)              self.impl_items.push(item.impl_item_id());
        9 ( 0.00%)              intravisit::walk_impl_item(self, item)
        .                   }
        .           
        .                   fn visit_foreign_item(&mut self, item: &'hir ForeignItem<'hir>) {
        .                       self.foreign_items.push(item.foreign_item_id());
        .                       intravisit::walk_foreign_item(self, item)
        .                   }
        .               }
       24 ( 0.00%)  }

  703,217 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 111 ----------------------------------------
         .           const EMPTY: u8 = 0b1111_1111;
         .           
         .           /// Control byte value for a deleted bucket.
         .           const DELETED: u8 = 0b1000_0000;
         .           
         .           /// Checks whether a control byte represents a full bucket (top bit is clear).
         .           #[inline]
         .           fn is_full(ctrl: u8) -> bool {
 2,548,286 ( 0.04%)      ctrl & 0x80 == 0
         .           }
         .           
         .           /// Checks whether a control byte represents a special value (top bit is set).
         .           #[inline]
         .           fn is_special(ctrl: u8) -> bool {
         .               ctrl & 0x80 != 0
         .           }
         .           
         .           /// Checks whether a special control value is EMPTY (just check 1 bit).
         .           #[inline]
         .           fn special_is_empty(ctrl: u8) -> bool {
         .               debug_assert!(is_special(ctrl));
   166,151 ( 0.00%)      ctrl & 0x01 != 0
         .           }
         .           
         .           /// Primary hash function, used to select the initial bucket to probe from.
         .           #[inline]
         .           #[allow(clippy::cast_possible_truncation)]
         .           fn h1(hash: u64) -> usize {
         .               // On 32-bit platforms we simply ignore the higher hash bits.
         .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
         .           /// Secondary hash function, saved in the low 7 bits of the control byte.
         .           #[inline]
         .           #[allow(clippy::cast_possible_truncation)]
         .           fn h2(hash: u64) -> u8 {
         .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
         .               // value, some hash functions (such as FxHash) produce a usize result
         .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
         .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
41,991,613 ( 0.68%)      let top7 = hash >> (hash_len * 8 - 7);
         .               (top7 & 0x7f) as u8 // truncation
         .           }
         .           
         .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
         .           /// table size is a power of two) to visit every group of elements exactly once.
         .           ///
         .           /// A triangular probe has us jump by 1 more group every time. So first we
         .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
         .               #[inline]
         .               fn move_next(&mut self, bucket_mask: usize) {
         .                   // We should have found an empty bucket by now and ended the probe.
         .                   debug_assert!(
         .                       self.stride <= bucket_mask,
         .                       "Went past end of probe sequence"
         .                   );
         .           
   322,724 ( 0.01%)          self.stride += Group::WIDTH;
   322,724 ( 0.01%)          self.pos += self.stride;
   277,734 ( 0.00%)          self.pos &= bucket_mask;
         .               }
         .           }
         .           
         .           /// Returns the number of buckets needed to hold the given number of items,
         .           /// taking the maximum load factor into account.
         .           ///
         .           /// Returns `None` if an overflow occurs.
         .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
         .           #[cfg_attr(target_os = "emscripten", inline(never))]
         .           #[cfg_attr(not(target_os = "emscripten"), inline)]
         .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
         .               debug_assert_ne!(cap, 0);
         .           
         .               // For small tables we require at least 1 empty bucket so that lookups are
         .               // guaranteed to terminate if an element doesn't exist in the table.
    93,210 ( 0.00%)      if cap < 8 {
         .                   // We don't bother with a table size of 2 buckets since that can only
         .                   // hold a single element. Instead we skip directly to a 4 bucket table
         .                   // which can hold 3 elements.
   190,680 ( 0.00%)          return Some(if cap < 4 { 4 } else { 8 });
         .               }
         .           
         .               // Otherwise require 1/8 buckets to be empty (87.5% load)
         .               //
         .               // Be careful when modifying this, calculate_layout relies on the
         .               // overflow check here.
    50,814 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
         .           
         .               // Any overflows will have been caught by the checked_mul. Also, any
         .               // rounding errors from the division above will be cleaned up by
         .               // next_power_of_two (which can't overflow because of the previous division).
         .               Some(adjusted_cap.next_power_of_two())
         .           }
         .           
         .           /// Returns the maximum effective capacity for the given bucket mask, taking
         .           /// the maximum load factor into account.
         .           #[inline]
         .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
   268,991 ( 0.00%)      if bucket_mask < 8 {
         .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
         .                   // Keep in mind that the bucket mask is one less than the bucket count.
         .                   bucket_mask
         .               } else {
         .                   // For larger tables we reserve 12.5% of the slots as empty.
   123,602 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
         .               }
         .           }
         .           
         .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
         .           /// while keeping the rest of `calculate_layout_for` independent of `T`
         .           #[derive(Copy, Clone)]
         .           struct TableLayout {
         .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
         .           
         .               #[inline]
         .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   let TableLayout { size, ctrl_align } = self;
         .                   // Manual layout calculation since Layout methods are not yet stable.
         .                   let ctrl_offset =
   204,383 ( 0.00%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
   260,478 ( 0.00%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
         .           
         .                   Some((
         .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
         .                       ctrl_offset,
         .                   ))
         .               }
         .           }
         .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub unsafe fn drop(&self) {
         .                   self.as_ptr().drop_in_place();
         .               }
         .               #[inline]
         .               pub unsafe fn read(&self) -> T {
        78 ( 0.00%)          self.as_ptr().read()
         .               }
         .               #[inline]
         .               pub unsafe fn write(&self, val: T) {
         .                   self.as_ptr().write(val);
         .               }
         .               #[inline]
         .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
         .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
         .               /// Creates a new empty hash table without allocating any memory, using the
         .               /// given allocator.
         .               ///
         .               /// In effect this returns a table with exactly 1 bucket. However we can
         .               /// leave the data pointer dangling since that bucket is never written to
         .               /// due to our load factor forcing us to always have at least 1 free bucket.
         .               #[inline]
         .               pub fn new_in(alloc: A) -> Self {
   400,152 ( 0.01%)          Self {
         .                       table: RawTableInner::new_in(alloc),
         .                       marker: PhantomData,
         .                   }
         .               }
         .           
         .               /// Allocates a new hash table with the given number of buckets.
         .               ///
         .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
         .               unsafe fn new_uninitialized(
         .                   alloc: A,
         .                   buckets: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   Ok(Self {
        35 ( 0.00%)              table: RawTableInner::new_uninitialized(
         .                           alloc,
         .                           TableLayout::new::<T>(),
         .                           buckets,
         .                           fallibility,
         .                       )?,
         .                       marker: PhantomData,
         .                   })
         .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
         .               /// Attempts to allocate a new hash table with at least enough capacity
         .               /// for inserting the given number of elements without reallocating.
         .               fn fallible_with_capacity(
         .                   alloc: A,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   Ok(Self {
     5,911 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
         .                           alloc,
         .                           TableLayout::new::<T>(),
         .                           capacity,
         .                           fallibility,
         .                       )?,
         .                       marker: PhantomData,
         .                   })
         .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
         .                   debug_assert_ne!(self.table.bucket_mask, 0);
         .                   debug_assert!(index < self.buckets());
         .                   Bucket::from_base_index(self.data_end(), index)
         .               }
         .           
         .               /// Erases an element from the table without dropping it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    16,608 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    16,608 ( 0.00%)          let index = self.bucket_index(item);
         .                   self.table.erase(index);
    33,216 ( 0.00%)      }
         .           
         .               /// Erases an element from the table, dropping it in place.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::needless_pass_by_value)]
         .               #[allow(deprecated)]
         .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
         .                   // Erase the element from the table first since drop might panic.
     2,966 ( 0.00%)          self.erase_no_drop(&item);
         .                   item.drop();
         .               }
         .           
         .               /// Finds and erases an element from the table, dropping it in place.
         .               /// Returns true if an element was found.
         .               #[cfg(feature = "raw")]
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// Removes an element from the table, returning it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::needless_pass_by_value)]
         .               #[allow(deprecated)]
         .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    30,250 ( 0.00%)          self.erase_no_drop(&item);
    10,006 ( 0.00%)          item.read()
         .               }
         .           
         .               /// Finds and removes an element from the table, returning it.
         .               #[cfg_attr(feature = "inline-more", inline)]
   674,880 ( 0.01%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
       840 ( 0.00%)          match self.find(hash, eq) {
     4,330 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
   203,872 ( 0.00%)              None => None,
         .                   }
   978,703 ( 0.02%)      }
         .           
         .               /// Marks all table buckets as empty without dropping their contents.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn clear_no_drop(&mut self) {
         .                   self.table.clear_no_drop();
         .               }
         .           
         .               /// Removes all elements from the table without freeing the backing memory.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn clear(&mut self) {
         .                   // Ensure that the table is reset even if one of the drops panic
         .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
         .                   unsafe {
         1 ( 0.00%)              self_.drop_elements();
         .                   }
         .               }
         .           
         7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
    22,802 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
         .                       for item in self.iter() {
         .                           item.drop();
         .                       }
         .                   }
         8 ( 0.00%)      }
         .           
         .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
         .                   // Calculate the minimal number of elements that we need to reserve
         .                   // space for.
         .                   let min_size = usize::max(self.table.items, min_size);
         .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Ensures that at least `additional` items can be inserted into the table
         .               /// without reallocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
   401,276 ( 0.01%)          if additional > self.table.growth_left {
         .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
   188,532 ( 0.00%)              if self
         .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
         .                           .is_err()
         .                       {
         .                           unsafe { hint::unreachable_unchecked() }
         .                       }
         .                   }
         .               }
         .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
         .                   } else {
         .                       Ok(())
         .                   }
         .               }
         .           
         .               /// Out-of-line slow path for `reserve` and `try_reserve`.
         .               #[cold]
         .               #[inline(never)]
   376,775 ( 0.01%)      fn reserve_rehash(
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: impl Fn(&T) -> u64,
         .                   fallibility: Fallibility,
         .               ) -> Result<(), TryReserveError> {
         .                   unsafe {
         .                       self.table.reserve_rehash_inner(
         .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
         .                           TableLayout::new::<T>(),
         .                           if mem::needs_drop::<T>() {
         .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
         .                           } else {
         .                               None
         .                           },
         .                       )
         .                   }
   231,344 ( 0.00%)      }
         .           
         .               /// Allocates a new table of a different size and moves the contents of the
         .               /// current table into it.
         .               fn resize(
         .                   &mut self,
         .                   capacity: usize,
         .                   hasher: impl Fn(&T) -> u64,
         .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
         .                       )
         .                   }
         .               }
         .           
         .               /// Inserts a new element into the table, and returns its raw bucket.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
 2,877,606 ( 0.05%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
         .                   unsafe {
         .                       let mut index = self.table.find_insert_slot(hash);
         .           
         .                       // We can avoid growing the table once we have reached our load
         .                       // factor if we are replacing a tombstone. This works since the
         .                       // number of EMPTY slots does not change in this case.
     1,103 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
 2,283,519 ( 0.04%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
         .                           self.reserve(1, hasher);
         .                           index = self.table.find_insert_slot(hash);
         .                       }
         .           
         .                       self.table.record_item_insert_at(index, old_ctrl, hash);
         .           
         .                       let bucket = self.bucket(index);
         2 ( 0.00%)              bucket.write(value);
         .                       bucket
         .                   }
 2,133,882 ( 0.03%)      }
         .           
         .               /// Attempts to insert a new element without growing the table and return its raw bucket.
         .               ///
         .               /// Returns an `Err` containing the given element if inserting it would require growing the
         .               /// table.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Inserts a new element into the table, and returns a mutable reference to it.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
 1,120,016 ( 0.02%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
     2,120 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
   840,012 ( 0.01%)      }
         .           
         .               /// Inserts a new element into the table, without growing the table.
         .               ///
         .               /// There must be enough space in the table to insert the new element.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
     9,802 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
   447,682 ( 0.01%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
    61,219 ( 0.00%)          let bucket = self.table.bucket(index);
         .           
         .                   // If we are replacing a DELETED entry then we don't need to update
         .                   // the load counter.
   890,448 ( 0.01%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
         .           
         .                   bucket.write(value);
   779,204 ( 0.01%)          self.table.items += 1;
         .                   bucket
    19,595 ( 0.00%)      }
         .           
         .               /// Temporary removes a bucket, applying the given function to the removed
         .               /// element and optionally put back the returned value in the same bucket.
         .               ///
         .               /// Returns `true` if the bucket still contains an element
         .               ///
         .               /// This does not check if the given bucket is actually occupied.
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
         .                       true
         .                   } else {
         .                       false
         .                   }
         .               }
         .           
         .               /// Searches for an element in the table.
         .               #[inline]
    21,983 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
     7,487 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
   106,794 ( 0.00%)              eq(self.bucket(index).as_ref())
     4,861 ( 0.00%)          });
         .           
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match result {
     1,313 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
         .                       None => None,
         .                   }
    25,112 ( 0.00%)      }
         .           
         .               /// Gets a reference to an element in the table.
         .               #[inline]
         .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
   218,323 ( 0.00%)          match self.find(hash, eq) {
         .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Gets a mutable reference to an element in the table.
         .               #[inline]
     4,109 ( 0.00%)      pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
    11,669 ( 0.00%)          match self.find(hash, eq) {
         .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
         .                       None => None,
         .                   }
     4,696 ( 0.00%)      }
         .           
         .               /// Attempts to get mutable references to `N` entries in the table at once.
         .               ///
         .               /// Returns an array of length `N` with the results of each query.
         .               ///
         .               /// At most one mutable reference will be returned to any entry. `None` will be returned if any
         .               /// of the hashes are duplicates. `None` will be returned if the hash is not found.
         .               ///
-- line 859 ----------------------------------------
-- line 920 ----------------------------------------
         .               #[inline]
         .               pub fn len(&self) -> usize {
         .                   self.table.items
         .               }
         .           
         .               /// Returns `true` if the table contains no elements.
         .               #[inline]
         .               pub fn is_empty(&self) -> bool {
 1,498,647 ( 0.02%)          self.len() == 0
         .               }
         .           
         .               /// Returns the number of buckets in the table.
         .               #[inline]
         .               pub fn buckets(&self) -> usize {
         .                   self.table.bucket_mask + 1
         .               }
         .           
-- line 936 ----------------------------------------
-- line 938 ----------------------------------------
         .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
         .               /// Because we cannot make the `next` method unsafe on the `RawIter`
         .               /// struct, we have to make the `iter` method unsafe.
         .               #[inline]
         .               pub unsafe fn iter(&self) -> RawIter<T> {
         .                   let data = Bucket::from_base_index(self.data_end(), 0);
         .                   RawIter {
         .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
   142,148 ( 0.00%)              items: self.table.items,
         .                   }
         .               }
         .           
         .               /// Returns an iterator over occupied buckets that could match a given hash.
         .               ///
         .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
         .               /// return items that have a hash value different than the one provided. You
         .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
         .               /// Iteration starts at the provided iterator's current location.
         .               ///
         .               /// It is up to the caller to ensure that the iterator is valid for this
         .               /// `RawTable` and covers all items that remain in the table.
         .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
         .                   debug_assert_eq!(iter.len(), self.len());
         .           
         .                   let alloc = self.table.alloc.clone();
       844 ( 0.00%)          let allocation = self.into_allocation();
       633 ( 0.00%)          RawIntoIter {
     1,055 ( 0.00%)              iter,
         .                       allocation,
         .                       marker: PhantomData,
         .                       alloc,
         .                   }
         .               }
         .           
         .               /// Converts the table into a raw allocation. The contents of the table
         .               /// should be dropped using a `RawIter` before freeing the allocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
       262 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
         .                       None
         .                   } else {
         .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
         .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
         .                           Some(lco) => lco,
         .                           None => unsafe { hint::unreachable_unchecked() },
         .                       };
         .                       Some((
       113 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
         .                           layout,
         .                       ))
         .                   };
         .                   mem::forget(self);
         .                   alloc
         .               }
         .           }
         .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           impl<A> RawTableInner<A> {
         .               #[inline]
         .               const fn new_in(alloc: A) -> Self {
   836,294 ( 0.01%)          Self {
         .                       // Be careful to cast the entire slice to a raw pointer.
         .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
         .                       bucket_mask: 0,
         .                       items: 0,
         .                       growth_left: 0,
         .                       alloc,
         .                   }
         .               }
         .           }
         .           
         .           impl<A: Allocator + Clone> RawTableInner<A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
   330,811 ( 0.01%)      unsafe fn new_uninitialized(
         .                   alloc: A,
         .                   table_layout: TableLayout,
         .                   buckets: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
         .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
         .                   // such allocations will never succeed anyways.
         .                   //
         .                   // This mirrors what Vec does in the standard library.
         .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
         .                       return Err(fallibility.capacity_overflow());
         .                   }
         .           
    90,054 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
         .                       Ok(block) => block.cast(),
         .                       Err(_) => return Err(fallibility.alloc_err(layout)),
         .                   };
         .           
         .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
   216,786 ( 0.00%)          Ok(Self {
         .                       ctrl,
    82,743 ( 0.00%)              bucket_mask: buckets - 1,
         .                       items: 0,
         .                       growth_left: bucket_mask_to_capacity(buckets - 1),
         .                       alloc,
         .                   })
   244,628 ( 0.00%)      }
         .           
         .               #[inline]
    15,517 ( 0.00%)      fn fallible_with_capacity(
         .                   alloc: A,
         .                   table_layout: TableLayout,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
     3,892 ( 0.00%)          if capacity == 0 {
     5,390 ( 0.00%)              Ok(Self::new_in(alloc))
         .                   } else {
         .                       unsafe {
         .                           let buckets =
         .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
         .           
   157,428 ( 0.00%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
         .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
         .           
     5,188 ( 0.00%)                  Ok(result)
         .                       }
         .                   }
    15,517 ( 0.00%)      }
         .           
         .               /// Searches for an empty or deleted bucket which is suitable for inserting
         .               /// a new element and sets the hash for that slot.
         .               ///
         .               /// There must be at least 1 empty bucket in the table.
         .               #[inline]
   156,357 ( 0.00%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
         .                   let index = self.find_insert_slot(hash);
   156,357 ( 0.00%)          let old_ctrl = *self.ctrl(index);
         .                   self.set_ctrl_h2(index, hash);
         .                   (index, old_ctrl)
   312,714 ( 0.01%)      }
         .           
         .               /// Searches for an empty or deleted bucket which is suitable for inserting
         .               /// a new element.
         .               ///
         .               /// There must be at least 1 empty bucket in the table.
         .               #[inline]
         .               fn find_insert_slot(&self, hash: u64) -> usize {
         .                   let mut probe_seq = self.probe_seq(hash);
         .                   loop {
         .                       unsafe {
         .                           let group = Group::load(self.ctrl(probe_seq.pos));
 1,617,352 ( 0.03%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
 4,766,916 ( 0.08%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
         .           
         .                               // In tables smaller than the group width, trailing control
         .                               // bytes outside the range of the table are filled with
         .                               // EMPTY entries. These will unfortunately trigger a
         .                               // match, but once masked may point to a full bucket that
         .                               // is already occupied. We detect this situation here and
         .                               // perform a second scan starting at the beginning of the
         .                               // table. This second scan is guaranteed to find an empty
         .                               // slot (due to the load factor) before hitting the trailing
         .                               // control bytes (containing EMPTY).
 2,145,427 ( 0.03%)                      if unlikely(is_full(*self.ctrl(result))) {
         .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
         .                                   debug_assert_ne!(probe_seq.pos, 0);
         .                                   return Group::load_aligned(self.ctrl(0))
         .                                       .match_empty_or_deleted()
         .                                       .lowest_set_bit_nonzero();
         .                               }
         .           
         .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
         .           
         .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
         .               /// code generated, but it is eliminated by LLVM optimizations.
         .               #[inline]
         .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
         .                   let h2_hash = h2(hash);
         .                   let mut probe_seq = self.probe_seq(hash);
         .           
    58,072 ( 0.00%)          loop {
         .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
         .           
 5,309,232 ( 0.09%)              for bit in group.match_byte(h2_hash) {
10,343,318 ( 0.17%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
         .           
 6,662,113 ( 0.11%)                  if likely(eq(index)) {
         .                               return Some(index);
         .                           }
         .                       }
         .           
 1,662,044 ( 0.03%)              if likely(group.match_empty().any_bit_set()) {
         .                           return None;
         .                       }
         .           
         .                       probe_seq.move_next(self.bucket_mask);
         .                   }
         .               }
         .           
         .               #[allow(clippy::mut_mut)]
-- line 1198 ----------------------------------------
-- line 1225 ----------------------------------------
         .                   Bucket::from_base_index(self.data_end(), index)
         .               }
         .           
         .               #[inline]
         .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
         .                   debug_assert_ne!(self.bucket_mask, 0);
         .                   debug_assert!(index < self.buckets());
         .                   let base: *mut u8 = self.data_end().as_ptr();
 6,573,728 ( 0.11%)          base.sub((index + 1) * size_of)
         .               }
         .           
         .               #[inline]
         .               unsafe fn data_end<T>(&self) -> NonNull<T> {
         .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
         .               }
         .           
         .               /// Returns an iterator-like object for a probe sequence on the table.
         .               ///
         .               /// This iterator never terminates, but is guaranteed to visit each bucket
         .               /// group exactly once. The loop using `probe_seq` must terminate upon
         .               /// reaching a group containing an empty bucket.
         .               #[inline]
         .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
         .                   ProbeSeq {
32,038,100 ( 0.52%)              pos: h1(hash) & self.bucket_mask,
         .                       stride: 0,
         .                   }
         .               }
         .           
         .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
         .               /// in the table, otherwise returns error
         .               #[cfg(feature = "raw")]
         .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
         .                   } else {
         .                       self.record_item_insert_at(index, old_ctrl, hash);
         .                       Ok(index)
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
 2,861,420 ( 0.05%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
         .                   self.set_ctrl_h2(index, hash);
 2,283,508 ( 0.04%)          self.items += 1;
         .               }
         .           
         .               #[inline]
         .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
         .                   let probe_seq_pos = self.probe_seq(hash).pos;
         .                   let probe_index =
         .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
         .                   probe_index(i) == probe_index(new_i)
-- line 1281 ----------------------------------------
-- line 1312 ----------------------------------------
         .                   // replicate the buckets at the end of the trailing group. For example
         .                   // with 2 buckets and a group size of 4, the control bytes will look
         .                   // like this:
         .                   //
         .                   //     Real    |             Replicated
         .                   // ---------------------------------------------
         .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
         .                   // ---------------------------------------------
 4,677,648 ( 0.08%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
         .           
 1,558,744 ( 0.03%)          *self.ctrl(index) = ctrl;
 1,558,845 ( 0.03%)          *self.ctrl(index2) = ctrl;
         .               }
         .           
         .               /// Returns a pointer to a control byte.
         .               #[inline]
         .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
         .                   debug_assert!(index < self.num_ctrl_bytes());
         .                   self.ctrl.as_ptr().add(index)
         .               }
         .           
         .               #[inline]
         .               fn buckets(&self) -> usize {
   367,858 ( 0.01%)          self.bucket_mask + 1
         .               }
         .           
         .               #[inline]
         .               fn num_ctrl_bytes(&self) -> usize {
   328,513 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
         .               }
         .           
         .               #[inline]
         .               fn is_empty_singleton(&self) -> bool {
 1,832,986 ( 0.03%)          self.bucket_mask == 0
         .               }
         .           
         .               #[allow(clippy::mut_mut)]
         .               #[inline]
         .               unsafe fn prepare_resize(
         .                   &self,
         .                   table_layout: TableLayout,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
         .                   debug_assert!(self.items <= capacity);
         .           
         .                   // Allocate and initialize the new table.
     1,392 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
         .                       self.alloc.clone(),
         .                       table_layout,
         .                       capacity,
         .                       fallibility,
         .                   )?;
   118,000 ( 0.00%)          new_table.growth_left -= self.items;
         .                   new_table.items = self.items;
         .           
         .                   // The hash function may panic, in which case we simply free the new
         .                   // table without dropping any elements that may have been copied into
         .                   // it.
         .                   //
         .                   // This guard is also used to free the old table on success, see
         .                   // the comment at the bottom of this function.
         .                   Ok(guard(new_table, move |self_| {
    46,204 ( 0.00%)              if !self_.is_empty_singleton() {
         .                           self_.free_buckets(table_layout);
         .                       }
         .                   }))
         .               }
         .           
         .               /// Reserves or rehashes to make room for `additional` more elements.
         .               ///
         .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
         .                   fallibility: Fallibility,
         .                   layout: TableLayout,
         .                   drop: Option<fn(*mut u8)>,
         .               ) -> Result<(), TryReserveError> {
         .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
    92,409 ( 0.00%)          let new_items = match self.items.checked_add(additional) {
         .                       Some(new_items) => new_items,
         .                       None => return Err(fallibility.capacity_overflow()),
         .                   };
    92,408 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
   189,440 ( 0.00%)          if new_items <= full_capacity / 2 {
         .                       // Rehash in-place without re-allocating if we have plenty of spare
         .                       // capacity that is locked up due to DELETED entries.
         .                       self.rehash_in_place(hasher, layout.size, drop);
         .                       Ok(())
         .                   } else {
         .                       // Otherwise, conservatively resize to at least the next size up
         .                       // to avoid churning deletes into frequent rehashes.
         .                       self.resize_inner(
    46,204 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
         .                           hasher,
         .                           fallibility,
         .                           layout,
         .                       )
         .                   }
         .               }
         .           
         .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
         .               #[inline(always)]
         .               unsafe fn resize_inner(
         .                   &mut self,
         .                   capacity: usize,
         .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
         .                   fallibility: Fallibility,
         .                   layout: TableLayout,
         .               ) -> Result<(), TryReserveError> {
     3,441 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
         .           
         .                   // Copy all elements to the new table.
         .                   for i in 0..self.buckets() {
   973,698 ( 0.02%)              if !is_full(*self.ctrl(i)) {
         .                           continue;
         .                       }
         .           
         .                       // This may panic.
         .                       let hash = hasher(self, i);
         .           
         .                       // We can use a simpler version of insert() here since:
         .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
         .                   }
         .           
         .                   // We successfully copied all elements without panicking. Now replace
         .                   // self with the new table. The old table will have its memory freed but
         .                   // the items will not be dropped (since they have been moved into the
         .                   // new table).
         .                   mem::swap(self, &mut new_table);
         .           
    46,204 ( 0.00%)          Ok(())
         .               }
         .           
         .               /// Rehashes the contents of the table in place (i.e. without changing the
         .               /// allocation).
         .               ///
         .               /// If `hasher` panics then some the table's contents may be lost.
         .               ///
         .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1554 ----------------------------------------
         .               #[inline]
         .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
         .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
         .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
         .                       Some(lco) => lco,
         .                       None => hint::unreachable_unchecked(),
         .                   };
         .                   self.alloc.deallocate(
    28,402 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
         .                       layout,
         .                   );
         .               }
         .           
         .               /// Marks all table buckets as empty without dropping their contents.
         .               #[inline]
         .               fn clear_no_drop(&mut self) {
    38,596 ( 0.00%)          if !self.is_empty_singleton() {
         .                       unsafe {
         .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
         .                       }
         .                   }
    52,259 ( 0.00%)          self.items = 0;
    38,646 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
         .               }
         .           
         .               #[inline]
         .               unsafe fn erase(&mut self, index: usize) {
         .                   debug_assert!(is_full(*self.ctrl(index)));
    92,134 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
         .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
         .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
         .           
         .                   // If we are inside a continuous block of Group::WIDTH full or deleted
         .                   // cells then a probe window may have seen a full block when trying to
         .                   // insert. We therefore need to keep that block non-empty so that
         .                   // lookups will continue searching to the next probe window.
         .                   //
         .                   // Note that in this context `leading_zeros` refers to the bytes at the
         .                   // end of a group, while `trailing_zeros` refers to the bytes at the
         .                   // beginning of a group.
   368,536 ( 0.01%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
         .                       DELETED
         .                   } else {
   425,520 ( 0.01%)              self.growth_left += 1;
         .                       EMPTY
         .                   };
         .                   self.set_ctrl(index, ctrl);
   368,536 ( 0.01%)          self.items -= 1;
         .               }
         .           }
         .           
         .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
 1,067,096 ( 0.02%)      fn clone(&self) -> Self {
   133,397 ( 0.00%)          if self.table.is_empty_singleton() {
         .                       Self::new_in(self.table.alloc.clone())
         .                   } else {
         .                       unsafe {
         .                           let mut new_table = ManuallyDrop::new(
         .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
         .                               match Self::new_uninitialized(
         .                                   self.table.alloc.clone(),
         .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
         .                               // We need to free the memory allocated for the new table.
         .                               new_table.free_buckets();
         .                           });
         .           
         .                           // Return the newly created table.
         .                           ManuallyDrop::into_inner(new_table)
         .                       }
         .                   }
 1,200,483 ( 0.02%)      }
         .           
         .               fn clone_from(&mut self, source: &Self) {
         .                   if source.table.is_empty_singleton() {
         .                       *self = Self::new_in(self.table.alloc.clone());
         .                   } else {
         .                       unsafe {
         .                           // First, drop all our elements without clearing the control bytes.
         .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
         .                       .table
         .                       .ctrl(0)
         .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
         .                   source
         .                       .data_start()
         .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
         .           
         .                   self.table.items = source.table.items;
        14 ( 0.00%)          self.table.growth_left = source.table.growth_left;
         .               }
         .           }
         .           
         .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
         .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
         .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
         .               fn default() -> Self {
         .                   Self::new_in(Default::default())
         .               }
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
 2,273,382 ( 0.04%)      fn drop(&mut self) {
   673,518 ( 0.01%)          if !self.table.is_empty_singleton() {
         .                       unsafe {
         .                           self.drop_elements();
         .                           self.free_buckets();
         .                       }
         .                   }
 2,516,926 ( 0.04%)      }
         .           }
         .           #[cfg(not(feature = "nightly"))]
         .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn drop(&mut self) {
         .                   if !self.table.is_empty_singleton() {
         .                       unsafe {
         .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
         .               type Item = T;
         .               type IntoIter = RawIntoIter<T, A>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
       844 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
         .                   unsafe {
         .                       let iter = self.iter();
         .                       self.into_iter_from(iter)
         .                   }
     1,055 ( 0.00%)      }
         .           }
         .           
         .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
         .           /// not track an item count.
         .           pub(crate) struct RawIterRange<T> {
         .               // Mask of full buckets in the current group. Bits are cleared from this
         .               // mask as each element is processed.
         .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
         .           
         .           impl<T> Iterator for RawIterRange<T> {
         .               type Item = Bucket<T>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<Bucket<T>> {
         .                   unsafe {
         .                       loop {
   419,299 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    63,344 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    79,681 ( 0.00%)                      return Some(self.data.next_n(index));
         .                           }
         .           
   434,775 ( 0.01%)                  if self.next_ctrl >= self.end {
         .                               return None;
         .                           }
         .           
         .                           // We might read past self.end up to the next group boundary,
         .                           // but this is fine because it only occurs on tables smaller
         .                           // than the group size where the trailing control bytes are all
         .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
         .                           // to the group size (since tables are power-of-two sized).
    15,428 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
     8,205 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
    16,713 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
         .                       }
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   // We don't have an item count, so just guess based on the range size.
         .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
         .                           }
         .                       } else {
         .                           // We must have already iterated past the removed item.
         .                       }
         .                   }
         .               }
         .           
         .               unsafe fn drop_elements(&mut self) {
    31,946 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
         .                       for item in self {
         .                           item.drop();
         .                       }
         .                   }
         .               }
         .           }
         .           
         .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<T> Iterator for RawIter<T> {
         .               type Item = Bucket<T>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
    53,617 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
   130,794 ( 0.00%)          if let Some(b) = self.iter.next() {
 1,073,552 ( 0.02%)              self.items -= 1;
         .                       Some(b)
         .                   } else {
         .                       // We don't check against items == 0 here to allow the
         .                       // compiler to optimize away the item count entirely if the
         .                       // iterator length is never queried.
         .                       debug_assert_eq!(self.items, 0);
         .                       None
         .                   }
   107,234 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   (self.items, Some(self.items))
         .               }
         .           }
         .           
         .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
       668 ( 0.00%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements
         .                       self.iter.drop_elements();
         .           
         .                       // Free the table
     1,194 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
         .                           self.alloc.deallocate(ptr, layout);
         .                       }
         .                   }
       204 ( 0.00%)      }
         .           }
         .           #[cfg(not(feature = "nightly"))]
         .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements
         .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
         .               type Item = T;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
       565 ( 0.00%)      fn next(&mut self) -> Option<T> {
         3 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
     1,673 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         2 ( 0.00%)          self.iter.size_hint()
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
         .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
         .           
         .           /// Iterator which consumes elements without freeing the table storage.
         .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
         .           where
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
    84,296 ( 0.00%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements. Note that this may panic.
         .                       self.iter.drop_elements();
         .           
         .                       // Reset the contents of the table now that all elements have been
         .                       // dropped.
         .                       self.table.clear_no_drop();
         .           
         .                       // Move the now empty table back to its original location.
    10,537 ( 0.00%)              self.orig_table
         .                           .as_ptr()
         .                           .copy_from_nonoverlapping(&*self.table, 1);
         .                   }
    84,296 ( 0.00%)      }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
         .               type Item = T;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<T> {
         .                   unsafe {
-- line 2289 ----------------------------------------

16,067,715 ( 0.26%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs
--------------------------------------------------------------------------------
Ir                 

-- line 26 ----------------------------------------
        .               /// }
        .               ///
        .               /// assert_eq!(letters[&'s'], 2);
        .               /// assert_eq!(letters[&'t'], 3);
        .               /// assert_eq!(letters[&'u'], 1);
        .               /// assert_eq!(letters.get(&'y'), None);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
9,944,962 ( 0.16%)      pub fn rustc_entry(&mut self, key: K) -> RustcEntry<'_, K, V, A> {
        .                   let hash = make_insert_hash(&self.hash_builder, &key);
      221 ( 0.00%)          if let Some(elem) = self.table.find(hash, |q| q.0.eq(&key)) {
1,306,126 ( 0.02%)              RustcEntry::Occupied(RustcOccupiedEntry {
2,684,041 ( 0.04%)                  key: Some(key),
        .                           elem,
        .                           table: &mut self.table,
        .                       })
        .                   } else {
        .                       // Ideally we would put this in VacantEntry::insert, but Entry is not
        .                       // generic over the BuildHasher and adding a generic parameter would be
        .                       // a breaking change.
        .                       self.reserve(1);
        .           
  477,130 ( 0.01%)              RustcEntry::Vacant(RustcVacantEntry {
        .                           hash,
  484,054 ( 0.01%)                  key,
        .                           table: &mut self.table,
        .                       })
        .                   }
6,182,696 ( 0.10%)      }
        .           }
        .           
        .           /// A view into a single entry in a map, which may either be vacant or occupied.
        .           ///
        .           /// This `enum` is constructed from the [`entry`] method on [`HashMap`].
        .           ///
        .           /// [`HashMap`]: struct.HashMap.html
        .           /// [`entry`]: struct.HashMap.html#method.rustc_entry
-- line 62 ----------------------------------------
-- line 405 ----------------------------------------
        .               /// if let RustcEntry::Occupied(o) = map.rustc_entry("poneyland") {
        .               ///     *o.into_mut() += 10;
        .               /// }
        .               ///
        .               /// assert_eq!(map["poneyland"], 22);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn into_mut(self) -> &'a mut V {
  126,194 ( 0.00%)          unsafe { &mut self.elem.as_mut().1 }
        .               }
        .           
        .               /// Sets the value of the entry, and returns the entry's old value.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
-- line 421 ----------------------------------------
-- line 568 ----------------------------------------
        .               /// let mut map: HashMap<&str, u32> = HashMap::new();
        .               ///
        .               /// if let RustcEntry::Vacant(o) = map.rustc_entry("poneyland") {
        .               ///     o.insert(37);
        .               /// }
        .               /// assert_eq!(map["poneyland"], 37);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
   54,893 ( 0.00%)      pub fn insert(self, value: V) -> &'a mut V {
        .                   unsafe {
  536,472 ( 0.01%)              let bucket = self.table.insert_no_grow(self.hash, (self.key, value));
   17,516 ( 0.00%)              &mut bucket.as_mut().1
        .                   }
   71,273 ( 0.00%)      }
        .           
        .               /// Sets the value of the entry with the RustcVacantEntry's key,
        .               /// and returns a RustcOccupiedEntry.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
-- line 589 ----------------------------------------

1,772,358 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/hygiene.rs
--------------------------------------------------------------------------------
Ir                 

-- line 40 ----------------------------------------
        .           use rustc_macros::HashStable_Generic;
        .           use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};
        .           use std::fmt;
        .           use std::hash::Hash;
        .           use tracing::*;
        .           
        .           /// A `SyntaxContext` represents a chain of pairs `(ExpnId, Transparency)` named "marks".
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
2,110,911 ( 0.03%)  pub struct SyntaxContext(u32);
        .           
   15,592 ( 0.00%)  #[derive(Debug, Encodable, Decodable, Clone)]
        .           pub struct SyntaxContextData {
        1 ( 0.00%)      outer_expn: ExpnId,
        3 ( 0.00%)      outer_transparency: Transparency,
        .               parent: SyntaxContext,
        .               /// This context, but with all transparent and semi-transparent expansions filtered away.
        .               opaque: SyntaxContext,
        .               /// This context, but with all transparent expansions filtered away.
        .               opaque_and_semitransparent: SyntaxContext,
        .               /// Name of the crate to which `$crate` with this context would resolve.
        .               dollar_crate_name: Symbol,
        .           }
-- line 61 ----------------------------------------
-- line 65 ----------------------------------------
        .               pub struct ExpnIndex {
        .                   ENCODABLE = custom
        .               }
        .           }
        .           
        .           /// A unique ID associated with a macro invocation and expansion.
        .           #[derive(Clone, Copy, PartialEq, Eq, Hash)]
        .           pub struct ExpnId {
    2,676 ( 0.00%)      pub krate: CrateNum,
  465,901 ( 0.01%)      pub local_id: ExpnIndex,
        .           }
        .           
        .           impl fmt::Debug for ExpnId {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   // Generate crate_::{{expn_}}.
        .                   write!(f, "{:?}::{{{{expn{}}}}}", self.krate, self.local_id.private)
        .               }
        .           }
-- line 82 ----------------------------------------
-- line 106 ----------------------------------------
        .                   // or ensure that this method is always invoked with the same
        .                   // `NodeIdHashingMode`
        .                   //
        .                   // Note that we require that `hash_spans` be set according to the global
        .                   // `-Z incremental-ignore-spans` option. Normally, this option is disabled,
        .                   // which will cause us to require that this method always be called with `Span` hashing
        .                   // enabled.
        .                   HashingControls { hash_spans, node_id_hashing_mode: _ }
  191,396 ( 0.00%)              if hash_spans == !ctx.debug_opts_incremental_ignore_spans() => {}
        .                   other => panic!("Attempted hashing of {msg} with non-default HashingControls: {:?}", other),
        .               }
        .           }
        .           
        .           /// A unique hash value associated to an expansion.
        .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, Encodable, Decodable, HashStable_Generic)]
   14,332 ( 0.00%)  pub struct ExpnHash(Fingerprint);
        .           
        .           impl ExpnHash {
        .               /// Returns the [StableCrateId] identifying the crate this [ExpnHash]
        .               /// originates from.
        .               #[inline]
        .               pub fn stable_crate_id(self) -> StableCrateId {
        .                   StableCrateId(self.0.as_value().0)
        .               }
-- line 129 ----------------------------------------
-- line 138 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_root(self) -> bool {
        .                   self.0 == Fingerprint::ZERO
        .               }
        .           
        .               /// Builds a new [ExpnHash] with the given [StableCrateId] and
        .               /// `local_hash`, where `local_hash` must be unique within its crate.
   23,558 ( 0.00%)      fn new(stable_crate_id: StableCrateId, local_hash: u64) -> ExpnHash {
        .                   ExpnHash(Fingerprint::new(stable_crate_id.0, local_hash))
   11,779 ( 0.00%)      }
        .           }
        .           
        .           /// A property of a macro expansion that determines how identifiers
        .           /// produced by that expansion are resolved.
2,958,079 ( 0.05%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Hash, Debug, Encodable, Decodable)]
        .           #[derive(HashStable_Generic)]
        .           pub enum Transparency {
        .               /// Identifier produced by a transparent expansion is always resolved at call-site.
        .               /// Call-site spans in procedural macros, hygiene opt-out in `macro` should use this.
        .               Transparent,
        .               /// Identifier produced by a semi-transparent expansion may be resolved
        .               /// either at call-site or at definition-site.
        .               /// If it's a local variable, label or `$crate` then it's resolved at def-site.
-- line 161 ----------------------------------------
-- line 169 ----------------------------------------
        .           }
        .           
        .           impl LocalExpnId {
        .               /// The ID of the theoretical expansion that generates freshly parsed, unexpanded AST.
        .               pub const ROOT: LocalExpnId = LocalExpnId::from_u32(0);
        .           
        .               pub fn from_raw(idx: ExpnIndex) -> LocalExpnId {
        .                   LocalExpnId::from_u32(idx.as_u32())
  167,864 ( 0.00%)      }
        .           
        .               pub fn as_raw(self) -> ExpnIndex {
        .                   ExpnIndex::from_u32(self.as_u32())
  397,254 ( 0.01%)      }
        .           
        .               pub fn fresh_empty() -> LocalExpnId {
        .                   HygieneData::with(|data| {
        .                       let expn_id = data.local_expn_data.push(None);
        .                       let _eid = data.local_expn_hashes.push(ExpnHash(Fingerprint::ZERO));
        .                       debug_assert_eq!(expn_id, _eid);
        .                       expn_id
        .                   })
        .               }
        .           
        .               pub fn fresh(mut expn_data: ExpnData, ctx: impl HashStableContext) -> LocalExpnId {
        .                   debug_assert_eq!(expn_data.parent.krate, LOCAL_CRATE);
      163 ( 0.00%)          let expn_hash = update_disambiguator(&mut expn_data, ctx);
        .                   HygieneData::with(|data| {
      210 ( 0.00%)              let expn_id = data.local_expn_data.push(Some(expn_data));
        .                       let _eid = data.local_expn_hashes.push(expn_hash);
        .                       debug_assert_eq!(expn_id, _eid);
       42 ( 0.00%)              let _old_id = data.expn_hash_to_expn_id.insert(expn_hash, expn_id.to_expn_id());
        .                       debug_assert!(_old_id.is_none());
        .                       expn_id
        .                   })
        .               }
        .           
        .               #[inline]
        .               pub fn expn_hash(self) -> ExpnHash {
        .                   HygieneData::with(|data| data.local_expn_hash(self))
        .               }
        .           
        .               #[inline]
        .               pub fn expn_data(self) -> ExpnData {
    2,439 ( 0.00%)          HygieneData::with(|data| data.local_expn_data(self).clone())
        .               }
        .           
        .               #[inline]
        .               pub fn to_expn_id(self) -> ExpnId {
  384,306 ( 0.01%)          ExpnId { krate: LOCAL_CRATE, local_id: self.as_raw() }
        .               }
        .           
        .               #[inline]
        .               pub fn set_expn_data(self, mut expn_data: ExpnData, ctx: impl HashStableContext) {
        .                   debug_assert_eq!(expn_data.parent.krate, LOCAL_CRATE);
  188,128 ( 0.00%)          let expn_hash = update_disambiguator(&mut expn_data, ctx);
        .                   HygieneData::with(|data| {
   23,516 ( 0.00%)              let old_expn_data = &mut data.local_expn_data[self];
   23,516 ( 0.00%)              assert!(old_expn_data.is_none(), "expansion data is reset for an expansion ID");
  117,580 ( 0.00%)              *old_expn_data = Some(expn_data);
        .                       debug_assert_eq!(data.local_expn_hashes[self].0, Fingerprint::ZERO);
   47,032 ( 0.00%)              data.local_expn_hashes[self] = expn_hash;
   35,274 ( 0.00%)              let _old_id = data.expn_hash_to_expn_id.insert(expn_hash, self.to_expn_id());
        .                       debug_assert!(_old_id.is_none());
        .                   });
        .               }
        .           
        .               #[inline]
        .               pub fn is_descendant_of(self, ancestor: LocalExpnId) -> bool {
        .                   self.to_expn_id().is_descendant_of(ancestor.to_expn_id())
        .               }
-- line 238 ----------------------------------------
-- line 259 ----------------------------------------
        .               }
        .           }
        .           
        .           impl ExpnId {
        .               /// The ID of the theoretical expansion that generates freshly parsed, unexpanded AST.
        .               /// Invariant: we do not create any ExpnId with local_id == 0 and krate != 0.
        .               pub const fn root() -> ExpnId {
        .                   ExpnId { krate: LOCAL_CRATE, local_id: ExpnIndex::from_u32(0) }
  267,204 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn expn_hash(self) -> ExpnHash {
        .                   HygieneData::with(|data| data.expn_hash(self))
        .               }
        .           
        .               #[inline]
        .               pub fn from_hash(hash: ExpnHash) -> Option<ExpnId> {
        .                   HygieneData::with(|data| data.expn_hash_to_expn_id.get(&hash).copied())
        .               }
        .           
        .               #[inline]
        .               pub fn as_local(self) -> Option<LocalExpnId> {
  216,682 ( 0.00%)          if self.krate == LOCAL_CRATE { Some(LocalExpnId::from_raw(self.local_id)) } else { None }
        .               }
        .           
        .               #[inline]
        .               #[track_caller]
        .               pub fn expect_local(self) -> LocalExpnId {
        .                   self.as_local().unwrap()
        .               }
        .           
        .               #[inline]
        .               pub fn expn_data(self) -> ExpnData {
   33,869 ( 0.00%)          HygieneData::with(|data| data.expn_data(self).clone())
        .               }
        .           
        .               #[inline]
        .               pub fn is_descendant_of(self, ancestor: ExpnId) -> bool {
        .                   // a few "fast path" cases to avoid locking HygieneData
        .                   if ancestor == ExpnId::root() || ancestor == self {
        .                       return true;
        .                   }
-- line 300 ----------------------------------------
-- line 301 ----------------------------------------
        .                   if ancestor.krate != self.krate {
        .                       return false;
        .                   }
        .                   HygieneData::with(|data| data.is_descendant_of(self, ancestor))
        .               }
        .           
        .               /// `expn_id.outer_expn_is_descendant_of(ctxt)` is equivalent to but faster than
        .               /// `expn_id.is_descendant_of(ctxt.outer_expn())`.
   56,168 ( 0.00%)      pub fn outer_expn_is_descendant_of(self, ctxt: SyntaxContext) -> bool {
        .                   HygieneData::with(|data| data.is_descendant_of(self, data.outer_expn(ctxt)))
   28,084 ( 0.00%)      }
        .           
        .               /// Returns span for the macro which originally caused this expansion to happen.
        .               ///
        .               /// Stops backtracing at include! boundary.
      462 ( 0.00%)      pub fn expansion_cause(mut self) -> Option<Span> {
        .                   let mut last_macro = None;
        .                   loop {
        .                       let expn_data = self.expn_data();
        .                       // Stop going up the backtrace once include! is encountered
      329 ( 0.00%)              if expn_data.is_root()
        .                           || expn_data.kind == ExpnKind::Macro(MacroKind::Bang, sym::include)
        .                       {
        .                           break;
        .                       }
      147 ( 0.00%)              self = expn_data.call_site.ctxt().outer_expn();
        .                       last_macro = Some(expn_data.call_site);
        .                   }
        .                   last_macro
      770 ( 0.00%)      }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct HygieneData {
        .               /// Each expansion should have an associated expansion data, but sometimes there's a delay
        .               /// between creation of an expansion ID and obtaining its data (e.g. macros are collected
        .               /// first and then resolved later), so we use an `Option` here.
        .               local_expn_data: IndexVec<LocalExpnId, Option<ExpnData>>,
-- line 338 ----------------------------------------
-- line 348 ----------------------------------------
        .               /// This is used by `update_disambiguator` to keep track of which `ExpnData`s
        .               /// would have collisions without a disambiguator.
        .               /// The keys of this map are always computed with `ExpnData.disambiguator`
        .               /// set to 0.
        .               expn_data_disambiguators: FxHashMap<u64, u32>,
        .           }
        .           
        .           impl HygieneData {
       10 ( 0.00%)      crate fn new(edition: Edition) -> Self {
        .                   let root_data = ExpnData::default(
        .                       ExpnKind::Root,
        .                       DUMMY_SP,
        .                       edition,
        .                       Some(CRATE_DEF_ID.to_def_id()),
        .                       None,
        .                   );
        .           
       50 ( 0.00%)          HygieneData {
        .                       local_expn_data: IndexVec::from_elem_n(Some(root_data), 1),
        .                       local_expn_hashes: IndexVec::from_elem_n(ExpnHash(Fingerprint::ZERO), 1),
        .                       foreign_expn_data: FxHashMap::default(),
        .                       foreign_expn_hashes: FxHashMap::default(),
        .                       expn_hash_to_expn_id: std::iter::once((ExpnHash(Fingerprint::ZERO), ExpnId::root()))
        .                           .collect(),
        8 ( 0.00%)              syntax_context_data: vec![SyntaxContextData {
        .                           outer_expn: ExpnId::root(),
        .                           outer_transparency: Transparency::Opaque,
        .                           parent: SyntaxContext(0),
        .                           opaque: SyntaxContext(0),
        .                           opaque_and_semitransparent: SyntaxContext(0),
        .                           dollar_crate_name: kw::DollarCrate,
        .                       }],
        .                       syntax_context_map: FxHashMap::default(),
        .                       expn_data_disambiguators: FxHashMap::default(),
        .                   }
       10 ( 0.00%)      }
        .           
      121 ( 0.00%)      pub fn with<T, F: FnOnce(&mut HygieneData) -> T>(f: F) -> T {
  924,585 ( 0.01%)          with_session_globals(|session_globals| f(&mut *session_globals.hygiene_data.borrow_mut()))
      126 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn local_expn_hash(&self, expn_id: LocalExpnId) -> ExpnHash {
        .                   self.local_expn_hashes[expn_id]
        .               }
        .           
        .               #[inline]
        .               fn expn_hash(&self, expn_id: ExpnId) -> ExpnHash {
        .                   match expn_id.as_local() {
        .                       Some(expn_id) => self.local_expn_hashes[expn_id],
        .                       None => self.foreign_expn_hashes[&expn_id],
        .                   }
        .               }
        .           
    4,858 ( 0.00%)      fn local_expn_data(&self, expn_id: LocalExpnId) -> &ExpnData {
        .                   self.local_expn_data[expn_id].as_ref().expect("no expansion data for an expansion ID")
    4,858 ( 0.00%)      }
        .           
  516,065 ( 0.01%)      fn expn_data(&self, expn_id: ExpnId) -> &ExpnData {
1,548,195 ( 0.02%)          if let Some(expn_id) = expn_id.as_local() {
        .                       self.local_expn_data[expn_id].as_ref().expect("no expansion data for an expansion ID")
        .                   } else {
        .                       &self.foreign_expn_data[&expn_id]
        .                   }
1,032,130 ( 0.02%)      }
        .           
        .               fn is_descendant_of(&self, mut expn_id: ExpnId, ancestor: ExpnId) -> bool {
        .                   // a couple "fast path" cases to avoid traversing parents in the loop below
   49,200 ( 0.00%)          if ancestor == ExpnId::root() {
        .                       return true;
        .                   }
       78 ( 0.00%)          if expn_id.krate != ancestor.krate {
        .                       return false;
        .                   }
        .                   loop {
       70 ( 0.00%)              if expn_id == ancestor {
        .                           return true;
        .                       }
       70 ( 0.00%)              if expn_id == ExpnId::root() {
        .                           return false;
        .                       }
        .                       expn_id = self.expn_data(expn_id).parent;
        .                   }
       23 ( 0.00%)      }
        .           
   17,614 ( 0.00%)      fn normalize_to_macros_2_0(&self, ctxt: SyntaxContext) -> SyntaxContext {
1,225,715 ( 0.02%)          self.syntax_context_data[ctxt.0 as usize].opaque
   17,614 ( 0.00%)      }
        .           
   76,600 ( 0.00%)      fn normalize_to_macro_rules(&self, ctxt: SyntaxContext) -> SyntaxContext {
  817,190 ( 0.01%)          self.syntax_context_data[ctxt.0 as usize].opaque_and_semitransparent
   76,600 ( 0.00%)      }
        .           
   50,274 ( 0.00%)      fn outer_expn(&self, ctxt: SyntaxContext) -> ExpnId {
2,112,467 ( 0.03%)          self.syntax_context_data[ctxt.0 as usize].outer_expn
   50,274 ( 0.00%)      }
        .           
  132,680 ( 0.00%)      fn outer_mark(&self, ctxt: SyntaxContext) -> (ExpnId, Transparency) {
  100,003 ( 0.00%)          let data = &self.syntax_context_data[ctxt.0 as usize];
  400,268 ( 0.01%)          (data.outer_expn, data.outer_transparency)
  232,683 ( 0.00%)      }
        .           
        .               fn parent_ctxt(&self, ctxt: SyntaxContext) -> SyntaxContext {
   33,796 ( 0.00%)          self.syntax_context_data[ctxt.0 as usize].parent
        .               }
        .           
        .               fn remove_mark(&self, ctxt: &mut SyntaxContext) -> (ExpnId, Transparency) {
       23 ( 0.00%)          let outer_mark = self.outer_mark(*ctxt);
      188 ( 0.00%)          *ctxt = self.parent_ctxt(*ctxt);
        .                   outer_mark
        .               }
        .           
  269,448 ( 0.00%)      fn marks(&self, mut ctxt: SyntaxContext) -> Vec<(ExpnId, Transparency)> {
        .                   let mut marks = Vec::new();
   67,344 ( 0.00%)          while ctxt != SyntaxContext::root() {
        .                       debug!("marks: getting parent of {:?}", ctxt);
        .                       marks.push(self.outer_mark(ctxt));
        .                       ctxt = self.parent_ctxt(ctxt);
        .                   }
        .                   marks.reverse();
        .                   marks
  303,129 ( 0.00%)      }
        .           
  861,454 ( 0.01%)      fn walk_chain(&self, mut span: Span, to: SyntaxContext) -> Span {
        .                   debug!("walk_chain({:?}, {:?})", span, to);
        .                   debug!("walk_chain: span ctxt = {:?}", span.ctxt());
  576,106 ( 0.01%)          while span.from_expansion() && span.ctxt() != to {
        .                       let outer_expn = self.outer_expn(span.ctxt());
        .                       debug!("walk_chain({:?}): outer_expn={:?}", span, outer_expn);
  535,342 ( 0.01%)              let expn_data = self.expn_data(outer_expn);
        .                       debug!("walk_chain({:?}): expn_data={:?}", span, expn_data);
  535,342 ( 0.01%)              span = expn_data.call_site;
        .                   }
        .                   span
  183,438 ( 0.00%)      }
        .           
  350,640 ( 0.01%)      fn adjust(&self, ctxt: &mut SyntaxContext, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut scope = None;
  105,192 ( 0.00%)          while !self.is_descendant_of(expn_id, self.outer_expn(*ctxt)) {
        .                       scope = Some(self.remove_mark(ctxt).0);
        .                   }
        .                   scope
  350,640 ( 0.01%)      }
        .           
1,570,617 ( 0.03%)      fn apply_mark(
        .                   &mut self,
        .                   ctxt: SyntaxContext,
        .                   expn_id: ExpnId,
        .                   transparency: Transparency,
        .               ) -> SyntaxContext {
  349,026 ( 0.01%)          assert_ne!(expn_id, ExpnId::root());
  174,513 ( 0.00%)          if transparency == Transparency::Opaque {
    7,788 ( 0.00%)              return self.apply_mark_internal(ctxt, expn_id, transparency);
        .                   }
        .           
1,212,505 ( 0.02%)          let call_site_ctxt = self.expn_data(expn_id).call_site.ctxt();
  173,215 ( 0.00%)          let mut call_site_ctxt = if transparency == Transparency::SemiTransparent {
        .                       self.normalize_to_macros_2_0(call_site_ctxt)
        .                   } else {
        .                       self.normalize_to_macro_rules(call_site_ctxt)
        .                   };
        .           
  173,215 ( 0.00%)          if call_site_ctxt == SyntaxContext::root() {
  519,615 ( 0.01%)              return self.apply_mark_internal(ctxt, expn_id, transparency);
        .                   }
        .           
        .                   // Otherwise, `expn_id` is a macros 1.0 definition and the call site is in a
        .                   // macros 2.0 expansion, i.e., a macros 1.0 invocation is in a macros 2.0 definition.
        .                   //
        .                   // In this case, the tokens from the macros 1.0 definition inherit the hygiene
        .                   // at their invocation. That is, we pretend that the macros 1.0 definition
        .                   // was defined at its invocation (i.e., inside the macros 2.0 definition)
        .                   // so that the macros 2.0 definition remains hygienic.
        .                   //
        .                   // See the example at `test/ui/hygiene/legacy_interaction.rs`.
       90 ( 0.00%)          for (expn_id, transparency) in self.marks(ctxt) {
        .                       call_site_ctxt = self.apply_mark_internal(call_site_ctxt, expn_id, transparency);
        .                   }
       40 ( 0.00%)          self.apply_mark_internal(call_site_ctxt, expn_id, transparency)
        .               }
        .           
1,396,104 ( 0.02%)      fn apply_mark_internal(
        .                   &mut self,
        .                   ctxt: SyntaxContext,
        .                   expn_id: ExpnId,
        .                   transparency: Transparency,
        .               ) -> SyntaxContext {
        .                   let syntax_context_data = &mut self.syntax_context_data;
1,047,078 ( 0.02%)          let mut opaque = syntax_context_data[ctxt.0 as usize].opaque;
        .                   let mut opaque_and_semitransparent =
  174,513 ( 0.00%)              syntax_context_data[ctxt.0 as usize].opaque_and_semitransparent;
        .           
  174,513 ( 0.00%)          if transparency >= Transparency::Opaque {
        .                       let parent = opaque;
   12,980 ( 0.00%)              opaque = *self
        .                           .syntax_context_map
        .                           .entry((parent, expn_id, transparency))
        .                           .or_insert_with(|| {
    1,224 ( 0.00%)                      let new_opaque = SyntaxContext(syntax_context_data.len() as u32);
        .                               syntax_context_data.push(SyntaxContextData {
        .                                   outer_expn: expn_id,
        .                                   outer_transparency: transparency,
        .                                   parent,
        .                                   opaque: new_opaque,
        .                                   opaque_and_semitransparent: new_opaque,
        .                                   dollar_crate_name: kw::DollarCrate,
        .                               });
        .                               new_opaque
        .                           });
        .                   }
        .           
  173,241 ( 0.00%)          if transparency >= Transparency::SemiTransparent {
        .                       let parent = opaque_and_semitransparent;
  523,461 ( 0.01%)              opaque_and_semitransparent = *self
        .                           .syntax_context_map
        .                           .entry((parent, expn_id, transparency))
        .                           .or_insert_with(|| {
        .                               let new_opaque_and_semitransparent =
    7,191 ( 0.00%)                          SyntaxContext(syntax_context_data.len() as u32);
        .                               syntax_context_data.push(SyntaxContextData {
        .                                   outer_expn: expn_id,
        .                                   outer_transparency: transparency,
        .                                   parent,
        .                                   opaque,
        .                                   opaque_and_semitransparent: new_opaque_and_semitransparent,
        .                                   dollar_crate_name: kw::DollarCrate,
        .                               });
        .                               new_opaque_and_semitransparent
        .                           });
        .                   }
        .           
        .                   let parent = ctxt;
  349,026 ( 0.01%)          *self.syntax_context_map.entry((parent, expn_id, transparency)).or_insert_with(|| {
        .                       let new_opaque_and_semitransparent_and_transparent =
       52 ( 0.00%)                  SyntaxContext(syntax_context_data.len() as u32);
        .                       syntax_context_data.push(SyntaxContextData {
        .                           outer_expn: expn_id,
        .                           outer_transparency: transparency,
        .                           parent,
        .                           opaque,
        .                           opaque_and_semitransparent,
        .                           dollar_crate_name: kw::DollarCrate,
        .                       });
        .                       new_opaque_and_semitransparent_and_transparent
        .                   })
1,396,104 ( 0.02%)      }
        .           }
        .           
        .           pub fn clear_syntax_context_map() {
        5 ( 0.00%)      HygieneData::with(|data| data.syntax_context_map = FxHashMap::default());
        .           }
        .           
   61,146 ( 0.00%)  pub fn walk_chain(span: Span, to: SyntaxContext) -> Span {
   40,764 ( 0.00%)      HygieneData::with(|data| data.walk_chain(span, to))
   40,764 ( 0.00%)  }
        .           
   70,590 ( 0.00%)  pub fn update_dollar_crate_names(mut get_name: impl FnMut(SyntaxContext) -> Symbol) {
        .               // The new contexts that need updating are at the end of the list and have `$crate` as a name.
        .               let (len, to_update) = HygieneData::with(|data| {
        .                   (
   11,765 ( 0.00%)              data.syntax_context_data.len(),
        .                       data.syntax_context_data
        .                           .iter()
        .                           .rev()
        .                           .take_while(|scdata| scdata.dollar_crate_name == kw::DollarCrate)
        .                           .count(),
        .                   )
        .               });
        .               // The callback must be called from outside of the `HygieneData` lock,
        .               // since it will try to acquire it too.
   35,295 ( 0.00%)      let range_to_update = len - to_update..len;
        .               let names: Vec<_> =
        .                   range_to_update.clone().map(|idx| get_name(SyntaxContext::from_u32(idx as u32))).collect();
        .               HygieneData::with(|data| {
   23,530 ( 0.00%)          range_to_update.zip(names).for_each(|(idx, name)| {
    8,613 ( 0.00%)              data.syntax_context_data[idx].dollar_crate_name = name;
        .                   })
        .               })
   70,590 ( 0.00%)  }
        .           
        .           pub fn debug_hygiene_data(verbose: bool) -> String {
        .               HygieneData::with(|data| {
        .                   if verbose {
        .                       format!("{:#?}", data)
        .                   } else {
        .                       let mut s = String::from("");
        .                       s.push_str("Expansions:");
-- line 634 ----------------------------------------
-- line 674 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               crate fn from_u32(raw: u32) -> SyntaxContext {
        .                   SyntaxContext(raw)
        .               }
        .           
        .               /// Extend a syntax context with a given expansion and transparency.
1,039,134 ( 0.02%)      crate fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> SyntaxContext {
  348,988 ( 0.01%)          HygieneData::with(|data| data.apply_mark(self, expn_id, transparency))
  346,378 ( 0.01%)      }
        .           
        .               /// Pulls a single mark off of the syntax context. This effectively moves the
        .               /// context up one macro definition level. That is, if we have a nested macro
        .               /// definition as follows:
        .               ///
        .               /// ```rust
        .               /// macro_rules! f {
        .               ///    macro_rules! g {
-- line 692 ----------------------------------------
-- line 694 ----------------------------------------
        .               ///    }
        .               /// }
        .               /// ```
        .               ///
        .               /// and we have a SyntaxContext that is referring to something declared by an invocation
        .               /// of g (call it g1), calling remove_mark will result in the SyntaxContext for the
        .               /// invocation of f that created g1.
        .               /// Returns the mark that was removed.
       23 ( 0.00%)      pub fn remove_mark(&mut self) -> ExpnId {
        .                   HygieneData::with(|data| data.remove_mark(self).0)
        .               }
        .           
  134,684 ( 0.00%)      pub fn marks(self) -> Vec<(ExpnId, Transparency)> {
   67,342 ( 0.00%)          HygieneData::with(|data| data.marks(self))
  134,684 ( 0.00%)      }
        .           
        .               /// Adjust this context for resolution in a scope created by the given expansion.
        .               /// For example, consider the following three resolutions of `f`:
        .               ///
        .               /// ```rust
        .               /// mod foo { pub fn f() {} } // `f`'s `SyntaxContext` is empty.
        .               /// m!(f);
        .               /// macro m($f:ident) {
-- line 716 ----------------------------------------
-- line 726 ----------------------------------------
        .               ///     //| and it resolves to `::bar::f`.
        .               ///     bar::$f(); // `f`'s `SyntaxContext` is empty.
        .               ///     //^ Since `mod bar` is not outside this expansion, `adjust` does not change `$f`,
        .               ///     //| and it resolves to `::bar::$f`.
        .               /// }
        .               /// ```
        .               /// This returns the expansion whose definition scope we use to privacy check the resolution,
        .               /// or `None` if we privacy check as usual (i.e., not w.r.t. a macro definition scope).
   15,704 ( 0.00%)      pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
    7,852 ( 0.00%)          HygieneData::with(|data| data.adjust(self, expn_id))
    7,852 ( 0.00%)      }
        .           
        .               /// Like `SyntaxContext::adjust`, but also normalizes `self` to macros 2.0.
  121,748 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   HygieneData::with(|data| {
   60,874 ( 0.00%)              *self = data.normalize_to_macros_2_0(*self);
   91,311 ( 0.00%)              data.adjust(self, expn_id)
        .                   })
   60,874 ( 0.00%)      }
        .           
        .               /// Adjust this context for resolution in a scope created by the given expansion
        .               /// via a glob import with the given `SyntaxContext`.
        .               /// For example:
        .               ///
        .               /// ```rust
        .               /// m!(f);
        .               /// macro m($i:ident) {
-- line 752 ----------------------------------------
-- line 787 ----------------------------------------
        .           
        .               /// Undo `glob_adjust` if possible:
        .               ///
        .               /// ```rust
        .               /// if let Some(privacy_checking_scope) = self.reverse_glob_adjust(expansion, glob_ctxt) {
        .               ///     assert!(self.glob_adjust(expansion, glob_ctxt) == Some(privacy_checking_scope));
        .               /// }
        .               /// ```
      156 ( 0.00%)      pub fn reverse_glob_adjust(
        .                   &mut self,
        .                   expn_id: ExpnId,
        .                   glob_span: Span,
        .               ) -> Option<Option<ExpnId>> {
        .                   HygieneData::with(|data| {
      273 ( 0.00%)              if data.adjust(self, expn_id).is_some() {
        .                           return None;
        .                       }
        .           
      117 ( 0.00%)              let mut glob_ctxt = data.normalize_to_macros_2_0(glob_span.ctxt());
        .                       let mut marks = Vec::new();
        .                       while !data.is_descendant_of(expn_id, data.outer_expn(glob_ctxt)) {
        .                           marks.push(data.remove_mark(&mut glob_ctxt));
        .                       }
        .           
        .                       let scope = marks.last().map(|mark| mark.0);
        .                       while let Some((expn_id, transparency)) = marks.pop() {
        .                           *self = data.apply_mark(*self, expn_id, transparency);
        .                       }
        .                       Some(scope)
        .                   })
       78 ( 0.00%)      }
        .           
    3,972 ( 0.00%)      pub fn hygienic_eq(self, other: SyntaxContext, expn_id: ExpnId) -> bool {
        .                   HygieneData::with(|data| {
      662 ( 0.00%)              let mut self_normalized = data.normalize_to_macros_2_0(self);
    3,310 ( 0.00%)              data.adjust(&mut self_normalized, expn_id);
      662 ( 0.00%)              self_normalized == data.normalize_to_macros_2_0(other)
        .                   })
    1,324 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macros_2_0(self) -> SyntaxContext {
    8,807 ( 0.00%)          HygieneData::with(|data| data.normalize_to_macros_2_0(self))
        .               }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> SyntaxContext {
   38,300 ( 0.00%)          HygieneData::with(|data| data.normalize_to_macro_rules(self))
        .               }
        .           
        .               #[inline]
        .               pub fn outer_expn(self) -> ExpnId {
      154 ( 0.00%)          HygieneData::with(|data| data.outer_expn(self))
        .               }
        .           
        .               /// `ctxt.outer_expn_data()` is equivalent to but faster than
        .               /// `ctxt.outer_expn().expn_data()`.
        .               #[inline]
        .               pub fn outer_expn_data(self) -> ExpnData {
  139,762 ( 0.00%)          HygieneData::with(|data| data.expn_data(data.outer_expn(self)).clone())
        .               }
        .           
        .               #[inline]
        .               pub fn outer_mark(self) -> (ExpnId, Transparency) {
  115,092 ( 0.00%)          HygieneData::with(|data| data.outer_mark(self))
        .               }
        .           
        .               pub fn dollar_crate_name(self) -> Symbol {
        .                   HygieneData::with(|data| data.syntax_context_data[self.0 as usize].dollar_crate_name)
        .               }
        .           
    8,086 ( 0.00%)      pub fn edition(self) -> Edition {
   27,081 ( 0.00%)          HygieneData::with(|data| data.expn_data(data.outer_expn(self)).edition)
    8,086 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SyntaxContext {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(f, "#{}", self.0)
        .               }
        .           }
        .           
-- line 868 ----------------------------------------
-- line 877 ----------------------------------------
        .               }
        .           
        .               pub fn fresh_expansion_with_transparency(
        .                   self,
        .                   expn_data: ExpnData,
        .                   transparency: Transparency,
        .                   ctx: impl HashStableContext,
        .               ) -> Span {
      304 ( 0.00%)          let expn_id = LocalExpnId::fresh(expn_data, ctx).to_expn_id();
        .                   HygieneData::with(|data| {
      114 ( 0.00%)              self.with_ctxt(data.apply_mark(SyntaxContext::root(), expn_id, transparency))
        .                   })
        .               }
        .           
        .               /// Reuses the span but adds information like the kind of the desugaring and features that are
        .               /// allowed inside this span.
      209 ( 0.00%)      pub fn mark_with_reason(
        .                   self,
        .                   allow_internal_unstable: Option<Lrc<[Symbol]>>,
        .                   reason: DesugaringKind,
        .                   edition: Edition,
        .                   ctx: impl HashStableContext,
        .               ) -> Span {
      304 ( 0.00%)          let expn_data = ExpnData {
       38 ( 0.00%)              allow_internal_unstable,
      171 ( 0.00%)              ..ExpnData::default(ExpnKind::Desugaring(reason), self, edition, None, None)
        .                   };
        .                   self.fresh_expansion(expn_data, ctx)
      152 ( 0.00%)      }
        .           }
        .           
        .           /// A subset of properties from both macro definition and macro call available through global data.
        .           /// Avoid using this if you have access to the original definition or call structures.
1,323,652 ( 0.02%)  #[derive(Clone, Debug, Encodable, Decodable, HashStable_Generic)]
        .           pub struct ExpnData {
        .               // --- The part unique to each expansion.
        .               /// The kind of this expansion - macro or compiler desugaring.
        .               pub kind: ExpnKind,
        .               /// The expansion that produced this expansion.
  137,162 ( 0.00%)      pub parent: ExpnId,
        .               /// The location of the actual macro invocation or syntax sugar , e.g.
        .               /// `let x = foo!();` or `if let Some(y) = x {}`
        .               ///
        .               /// This may recursively refer to other macro invocations, e.g., if
        .               /// `foo!()` invoked `bar!()` internally, and there was an
        .               /// expression inside `bar!`; the call_site of the expression in
        .               /// the expansion would point to the `bar!` invocation; that
        .               /// call_site span would have its own ExpnData, with the call_site
-- line 924 ----------------------------------------
-- line 929 ----------------------------------------
        .               /// that have identical `ExpnData`s. This violates the contract of `HashStable`
        .               /// - the two `ExpnId`s are not equal, but their `Fingerprint`s are equal
        .               /// (since the numerical `ExpnId` value is not considered by the `HashStable`
        .               /// implementation).
        .               ///
        .               /// The `disambiguator` field is set by `update_disambiguator` when two distinct
        .               /// `ExpnId`s would end up with the same `Fingerprint`. Since `ExpnData` includes
        .               /// a `krate` field, this value only needs to be unique within a single crate.
   68,581 ( 0.00%)      disambiguator: u32,
        .           
        .               // --- The part specific to the macro/desugaring definition.
        .               // --- It may be reasonable to share this part between expansions with the same definition,
        .               // --- but such sharing is known to bring some minor inconveniences without also bringing
        .               // --- noticeable perf improvements (PR #62898).
        .               /// The span of the macro definition (possibly dummy).
        .               /// This span serves only informational purpose and is not used for resolution.
        .               pub def_site: Span,
        .               /// List of `#[unstable]`/feature-gated features that the macro is allowed to use
        .               /// internally without forcing the whole crate to opt-in
        .               /// to them.
    1,270 ( 0.00%)      pub allow_internal_unstable: Option<Lrc<[Symbol]>>,
        .               /// Whether the macro is allowed to use `unsafe` internally
        .               /// even if the user crate has `#![forbid(unsafe_code)]`.
        .               pub allow_internal_unsafe: bool,
        .               /// Enables the macro helper hack (`ident!(...)` -> `$crate::ident!(...)`)
        .               /// for a given macro.
        .               pub local_inner_macros: bool,
        .               /// Edition of the crate in which the macro is defined.
   68,581 ( 0.00%)      pub edition: Edition,
        .               /// The `DefId` of the macro being invoked,
        .               /// if this `ExpnData` corresponds to a macro invocation
   68,581 ( 0.00%)      pub macro_def_id: Option<DefId>,
        .               /// The normal module (`mod`) in which the expanded macro was defined.
        .               pub parent_module: Option<DefId>,
        .           }
        .           
        .           impl !PartialEq for ExpnData {}
        .           impl !Hash for ExpnData {}
        .           
        .           impl ExpnData {
  152,854 ( 0.00%)      pub fn new(
        .                   kind: ExpnKind,
        .                   parent: ExpnId,
        .                   call_site: Span,
        .                   def_site: Span,
        .                   allow_internal_unstable: Option<Lrc<[Symbol]>>,
        .                   allow_internal_unsafe: bool,
        .                   local_inner_macros: bool,
        .                   edition: Edition,
        .                   macro_def_id: Option<DefId>,
        .                   parent_module: Option<DefId>,
        .               ) -> ExpnData {
  164,612 ( 0.00%)          ExpnData {
        .                       kind,
        .                       parent,
        .                       call_site,
        .                       def_site,
        .                       allow_internal_unstable,
        .                       allow_internal_unsafe,
        .                       local_inner_macros,
        .                       edition,
        .                       macro_def_id,
        .                       parent_module,
        .                       disambiguator: 0,
        .                   }
   58,790 ( 0.00%)      }
        .           
        .               /// Constructs expansion data with default properties.
       57 ( 0.00%)      pub fn default(
        .                   kind: ExpnKind,
        .                   call_site: Span,
        .                   edition: Edition,
        .                   macro_def_id: Option<DefId>,
        .                   parent_module: Option<DefId>,
        .               ) -> ExpnData {
      228 ( 0.00%)          ExpnData {
        .                       kind,
        .                       parent: ExpnId::root(),
        .                       call_site,
        .                       def_site: DUMMY_SP,
        .                       allow_internal_unstable: None,
        .                       allow_internal_unsafe: false,
        .                       local_inner_macros: false,
        .                       edition,
        .                       macro_def_id,
        .                       parent_module,
        .                       disambiguator: 0,
        .                   }
       19 ( 0.00%)      }
        .           
       12 ( 0.00%)      pub fn allow_unstable(
        .                   kind: ExpnKind,
        .                   call_site: Span,
        .                   edition: Edition,
        .                   allow_internal_unstable: Lrc<[Symbol]>,
        .                   macro_def_id: Option<DefId>,
        .                   parent_module: Option<DefId>,
        .               ) -> ExpnData {
       26 ( 0.00%)          ExpnData {
        .                       allow_internal_unstable: Some(allow_internal_unstable),
        .                       ..ExpnData::default(kind, call_site, edition, macro_def_id, parent_module)
        .                   }
        4 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn is_root(&self) -> bool {
      178 ( 0.00%)          matches!(self.kind, ExpnKind::Root)
        .               }
        .           
        .               #[inline]
  158,211 ( 0.00%)      fn hash_expn(&self, ctx: &mut impl HashStableContext) -> u64 {
        .                   let mut hasher = StableHasher::new();
        .                   self.hash_stable(ctx, &mut hasher);
        .                   hasher.finish()
  140,632 ( 0.00%)      }
        .           }
        .           
        .           /// Expansion kind.
1,033,439 ( 0.02%)  #[derive(Clone, Debug, PartialEq, Encodable, Decodable, HashStable_Generic)]
        .           pub enum ExpnKind {
        .               /// No expansion, aka root expansion. Only `ExpnId::root()` has this kind.
        .               Root,
        .               /// Expansion produced by a macro.
   68,064 ( 0.00%)      Macro(MacroKind, Symbol),
        .               /// Transform done by the compiler on the AST.
      653 ( 0.00%)      AstPass(AstPass),
        .               /// Desugaring done by the compiler during HIR lowering.
      166 ( 0.00%)      Desugaring(DesugaringKind),
        .               /// MIR inlining
        .               Inlined,
        .           }
        .           
        .           impl ExpnKind {
        .               pub fn descr(&self) -> String {
        .                   match *self {
        .                       ExpnKind::Root => kw::PathRoot.to_string(),
-- line 1064 ----------------------------------------
-- line 1070 ----------------------------------------
        .                       ExpnKind::AstPass(kind) => kind.descr().to_string(),
        .                       ExpnKind::Desugaring(kind) => format!("desugaring of {}", kind.descr()),
        .                       ExpnKind::Inlined => "inlined source".to_string(),
        .                   }
        .               }
        .           }
        .           
        .           /// The kind of macro invocation or definition.
  117,661 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Debug)]
        4 ( 0.00%)  #[derive(HashStable_Generic)]
        .           pub enum MacroKind {
        .               /// A bang macro `foo!()`.
        .               Bang,
        .               /// An attribute macro `#[foo]`.
        .               Attr,
        .               /// A derive macro `#[derive(Foo)]`
        .               Derive,
        .           }
        .           
        .           impl MacroKind {
        .               pub fn descr(self) -> &'static str {
        2 ( 0.00%)          match self {
        .                       MacroKind::Bang => "macro",
        .                       MacroKind::Attr => "attribute macro",
        .                       MacroKind::Derive => "derive macro",
        .                   }
        1 ( 0.00%)      }
        .           
        .               pub fn descr_expected(self) -> &'static str {
        .                   match self {
        .                       MacroKind::Attr => "attribute",
        .                       _ => self.descr(),
        .                   }
        .               }
        .           
        .               pub fn article(self) -> &'static str {
        3 ( 0.00%)          match self {
        .                       MacroKind::Attr => "an",
        .                       _ => "a",
        .                   }
        1 ( 0.00%)      }
        .           }
        .           
        .           /// The kind of AST transform.
        .           #[derive(Clone, Copy, Debug, PartialEq, Encodable, Decodable, HashStable_Generic)]
        .           pub enum AstPass {
        .               StdImports,
        .               TestHarness,
        .               ProcMacroHarness,
-- line 1118 ----------------------------------------
-- line 1124 ----------------------------------------
        .                       AstPass::StdImports => "standard library imports",
        .                       AstPass::TestHarness => "test harness",
        .                       AstPass::ProcMacroHarness => "proc macro harness",
        .                   }
        .               }
        .           }
        .           
        .           /// The kind of compiler desugaring.
      288 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Debug, Encodable, Decodable, HashStable_Generic)]
        .           pub enum DesugaringKind {
        .               /// We desugar `if c { i } else { e }` to `match $ExprKind::Use(c) { true => i, _ => e }`.
        .               /// However, we do not want to blame `c` for unreachability but rather say that `i`
        .               /// is unreachable. This desugaring kind allows us to avoid blaming `c`.
        .               /// This also applies to `while` loops.
        .               CondTemporary,
        .               QuestionMark,
        .               TryBlock,
-- line 1140 ----------------------------------------
-- line 1161 ----------------------------------------
        .                       DesugaringKind::OpaqueTy => "`impl Trait`",
        .                       DesugaringKind::ForLoop => "`for` loop",
        .                       DesugaringKind::LetElse => "`let...else`",
        .                       DesugaringKind::WhileLoop => "`while` loop",
        .                   }
        .               }
        .           }
        .           
        7 ( 0.00%)  #[derive(Default)]
        .           pub struct HygieneEncodeContext {
        .               /// All `SyntaxContexts` for which we have written `SyntaxContextData` into crate metadata.
        .               /// This is `None` after we finish encoding `SyntaxContexts`, to ensure
        .               /// that we don't accidentally try to encode any more `SyntaxContexts`
        .               serialized_ctxts: Lock<FxHashSet<SyntaxContext>>,
        .               /// The `SyntaxContexts` that we have serialized (e.g. as a result of encoding `Spans`)
        .               /// in the most recent 'round' of serializnig. Serializing `SyntaxContextData`
        .               /// may cause us to serialize more `SyntaxContext`s, so serialize in a loop
-- line 1177 ----------------------------------------
-- line 1180 ----------------------------------------
        .           
        .               serialized_expns: Lock<FxHashSet<ExpnId>>,
        .           
        .               latest_expns: Lock<FxHashSet<ExpnId>>,
        .           }
        .           
        .           impl HygieneEncodeContext {
        .               /// Record the fact that we need to serialize the corresponding `ExpnData`.
       15 ( 0.00%)      pub fn schedule_expn_data_for_encoding(&self, expn: ExpnId) {
        6 ( 0.00%)          if !self.serialized_expns.lock().contains(&expn) {
        4 ( 0.00%)              self.latest_expns.lock().insert(expn);
        .                   }
       12 ( 0.00%)      }
        .           
        8 ( 0.00%)      pub fn encode<T, R>(
        .                   &self,
        .                   encoder: &mut T,
        .                   mut encode_ctxt: impl FnMut(&mut T, u32, &SyntaxContextData) -> Result<(), R>,
        .                   mut encode_expn: impl FnMut(&mut T, ExpnId, &ExpnData, ExpnHash) -> Result<(), R>,
        .               ) -> Result<(), R> {
        .                   // When we serialize a `SyntaxContextData`, we may end up serializing
        .                   // a `SyntaxContext` that we haven't seen before
        3 ( 0.00%)          while !self.latest_ctxts.lock().is_empty() || !self.latest_expns.lock().is_empty() {
        .                       debug!(
        .                           "encode_hygiene: Serializing a round of {:?} SyntaxContextDatas: {:?}",
        .                           self.latest_ctxts.lock().len(),
        .                           self.latest_ctxts
        .                       );
        .           
        .                       // Consume the current round of SyntaxContexts.
        .                       // Drop the lock() temporary early
        .                       let latest_ctxts = { std::mem::take(&mut *self.latest_ctxts.lock()) };
        .           
        .                       // It's fine to iterate over a HashMap, because the serialization
        .                       // of the table that we insert data into doesn't depend on insertion
        .                       // order
        .                       for_all_ctxts_in(latest_ctxts.into_iter(), |index, ctxt, data| {
        2 ( 0.00%)                  if self.serialized_ctxts.lock().insert(ctxt) {
        .                               encode_ctxt(encoder, index, data)?;
        .                           }
        .                           Ok(())
        .                       })?;
        .           
        .                       let latest_expns = { std::mem::take(&mut *self.latest_expns.lock()) };
        .           
        .                       for_all_expns_in(latest_expns.into_iter(), |expn, data, hash| {
        4 ( 0.00%)                  if self.serialized_expns.lock().insert(expn) {
        .                               encode_expn(encoder, expn, data, hash)?;
        .                           }
        .                           Ok(())
        .                       })?;
        .                   }
        .                   debug!("encode_hygiene: Done serializing SyntaxContextData");
        .                   Ok(())
        8 ( 0.00%)      }
        .           }
        .           
        .           #[derive(Default)]
        .           /// Additional information used to assist in decoding hygiene data
        .           pub struct HygieneDecodeContext {
        .               // Maps serialized `SyntaxContext` ids to a `SyntaxContext` in the current
        .               // global `HygieneData`. When we deserialize a `SyntaxContext`, we need to create
        .               // a new id in the global `HygieneData`. This map tracks the ID we end up picking,
-- line 1242 ----------------------------------------
-- line 1257 ----------------------------------------
        .           
        .                   let _old_id = hygiene_data.expn_hash_to_expn_id.insert(hash, expn_id);
        .                   debug_assert!(_old_id.is_none());
        .                   expn_id
        .               })
        .           }
        .           
        .           /// Register an expansion which has been decoded from the metadata of a foreign crate.
    1,905 ( 0.00%)  pub fn register_expn_id(
        .               krate: CrateNum,
        .               local_id: ExpnIndex,
        .               data: ExpnData,
        .               hash: ExpnHash,
        .           ) -> ExpnId {
        .               debug_assert!(data.parent == ExpnId::root() || krate == data.parent.krate);
    1,905 ( 0.00%)      let expn_id = ExpnId { krate, local_id };
        .               HygieneData::with(|hygiene_data| {
    1,905 ( 0.00%)          let _old_data = hygiene_data.foreign_expn_data.insert(expn_id, data);
        .                   debug_assert!(_old_data.is_none());
    3,175 ( 0.00%)          let _old_hash = hygiene_data.foreign_expn_hashes.insert(expn_id, hash);
        .                   debug_assert!(_old_hash.is_none());
    2,540 ( 0.00%)          let _old_id = hygiene_data.expn_hash_to_expn_id.insert(hash, expn_id);
        .                   debug_assert!(_old_id.is_none());
        .               });
        .               expn_id
    2,540 ( 0.00%)  }
        .           
        .           /// Decode an expansion from the metadata of a foreign crate.
        .           pub fn decode_expn_id(
        .               krate: CrateNum,
        .               index: u32,
        .               decode_data: impl FnOnce(ExpnId) -> (ExpnData, ExpnHash),
        .           ) -> ExpnId {
    3,294 ( 0.00%)      if index == 0 {
        .                   debug!("decode_expn_id: deserialized root");
    1,168 ( 0.00%)          return ExpnId::root();
        .               }
        .           
        .               let index = ExpnIndex::from_u32(index);
        .           
        .               // This function is used to decode metadata, so it cannot decode information about LOCAL_CRATE.
        .               debug_assert_ne!(krate, LOCAL_CRATE);
    2,126 ( 0.00%)      let expn_id = ExpnId { krate, local_id: index };
        .           
        .               // Fast path if the expansion has already been decoded.
    2,126 ( 0.00%)      if HygieneData::with(|hygiene_data| hygiene_data.foreign_expn_data.contains_key(&expn_id)) {
    1,284 ( 0.00%)          return expn_id;
        .               }
        .           
        .               // Don't decode the data inside `HygieneData::with`, since we need to recursively decode
        .               // other ExpnIds
    4,445 ( 0.00%)      let (expn_data, hash) = decode_data(expn_id);
        .           
    5,715 ( 0.00%)      register_expn_id(krate, index, expn_data, hash)
        .           }
        .           
        .           // Decodes `SyntaxContext`, using the provided `HygieneDecodeContext`
        .           // to track which `SyntaxContext`s we have already decoded.
        .           // The provided closure will be invoked to deserialize a `SyntaxContextData`
        .           // if we haven't already seen the id of the `SyntaxContext` we are deserializing.
        .           pub fn decode_syntax_context<D: Decoder, F: FnOnce(&mut D, u32) -> SyntaxContextData>(
        .               d: &mut D,
        .               context: &HygieneDecodeContext,
        .               decode_data: F,
        .           ) -> SyntaxContext {
   48,038 ( 0.00%)      let raw_id: u32 = Decodable::decode(d);
   96,076 ( 0.00%)      if raw_id == 0 {
        .                   debug!("decode_syntax_context: deserialized root");
        .                   // The root is special
        .                   return SyntaxContext::root();
        .               }
        .           
        .               let outer_ctxts = &context.remapped_ctxts;
        .           
        .               // Ensure that the lock() temporary is dropped early
        .               {
   21,037 ( 0.00%)          if let Some(ctxt) = outer_ctxts.lock().get(raw_id as usize).copied().flatten() {
        .                       return ctxt;
        .                   }
        .               }
        .           
        .               // Allocate and store SyntaxContext id *before* calling the decoder function,
        .               // as the SyntaxContextData may reference itself.
      577 ( 0.00%)      let new_ctxt = HygieneData::with(|hygiene_data| {
      577 ( 0.00%)          let new_ctxt = SyntaxContext(hygiene_data.syntax_context_data.len() as u32);
        .                   // Push a dummy SyntaxContextData to ensure that nobody else can get the
        .                   // same ID as us. This will be overwritten after call `decode_Data`
        .                   hygiene_data.syntax_context_data.push(SyntaxContextData {
      577 ( 0.00%)              outer_expn: ExpnId::root(),
        .                       outer_transparency: Transparency::Transparent,
        .                       parent: SyntaxContext::root(),
        .                       opaque: SyntaxContext::root(),
        .                       opaque_and_semitransparent: SyntaxContext::root(),
        .                       dollar_crate_name: kw::Empty,
        .                   });
        .                   let mut ctxts = outer_ctxts.lock();
        .                   let new_len = raw_id as usize + 1;
    1,731 ( 0.00%)          if ctxts.len() < new_len {
        .                       ctxts.resize(new_len, None);
        .                   }
    1,154 ( 0.00%)          ctxts[raw_id as usize] = Some(new_ctxt);
        .                   drop(ctxts);
        .                   new_ctxt
        .               });
        .           
        .               // Don't try to decode data while holding the lock, since we need to
        .               // be able to recursively decode a SyntaxContext
    1,154 ( 0.00%)      let mut ctxt_data = decode_data(d, raw_id);
        .               // Reset `dollar_crate_name` so that it will be updated by `update_dollar_crate_names`
        .               // We don't care what the encoding crate set this to - we want to resolve it
        .               // from the perspective of the current compilation session
    1,154 ( 0.00%)      ctxt_data.dollar_crate_name = kw::DollarCrate;
        .           
        .               // Overwrite the dummy data with our decoded SyntaxContextData
        .               HygieneData::with(|hygiene_data| {
        .                   let dummy = std::mem::replace(
      577 ( 0.00%)              &mut hygiene_data.syntax_context_data[new_ctxt.as_u32() as usize],
        .                       ctxt_data,
        .                   );
        .                   // Make sure nothing weird happening while `decode_data` was running
      577 ( 0.00%)          assert_eq!(dummy.dollar_crate_name, kw::Empty);
        .               });
        .           
    1,154 ( 0.00%)      new_ctxt
        .           }
        .           
        .           fn for_all_ctxts_in<E, F: FnMut(u32, SyntaxContext, &SyntaxContextData) -> Result<(), E>>(
        .               ctxts: impl Iterator<Item = SyntaxContext>,
        .               mut f: F,
        .           ) -> Result<(), E> {
        .               let all_data: Vec<_> = HygieneData::with(|data| {
        3 ( 0.00%)          ctxts.map(|ctxt| (ctxt, data.syntax_context_data[ctxt.0 as usize].clone())).collect()
        .               });
        9 ( 0.00%)      for (ctxt, data) in all_data.into_iter() {
        .                   f(ctxt.0, ctxt, &data)?;
        .               }
        .               Ok(())
        .           }
        .           
        .           fn for_all_expns_in<E>(
        .               expns: impl Iterator<Item = ExpnId>,
        .               mut f: impl FnMut(ExpnId, &ExpnData, ExpnHash) -> Result<(), E>,
        .           ) -> Result<(), E> {
        .               let all_data: Vec<_> = HygieneData::with(|data| {
       18 ( 0.00%)          expns.map(|expn| (expn, data.expn_data(expn).clone(), data.expn_hash(expn))).collect()
        .               });
       20 ( 0.00%)      for (expn, data, hash) in all_data.into_iter() {
        .                   f(expn, &data, hash)?;
        .               }
        .               Ok(())
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for LocalExpnId {
        .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
        .                   self.to_expn_id().encode(e)
-- line 1411 ----------------------------------------
-- line 1430 ----------------------------------------
        .               }
        .           }
        .           
        .           pub fn raw_encode_syntax_context<E: Encoder>(
        .               ctxt: SyntaxContext,
        .               context: &HygieneEncodeContext,
        .               e: &mut E,
        .           ) -> Result<(), E::Error> {
      588 ( 0.00%)      if !context.serialized_ctxts.lock().contains(&ctxt) {
      289 ( 0.00%)          context.latest_ctxts.lock().insert(ctxt);
        .               }
        .               ctxt.0.encode(e)
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for SyntaxContext {
        .               default fn encode(&self, _: &mut E) -> Result<(), E::Error> {
        .                   panic!("cannot encode `SyntaxContext` with `{}`", std::any::type_name::<E>());
        .               }
-- line 1447 ----------------------------------------
-- line 1457 ----------------------------------------
        .           /// such that the `Fingerprint` of the `ExpnData` does not collide with
        .           /// any other `ExpnIds`.
        .           ///
        .           /// This method is called only when an `ExpnData` is first associated
        .           /// with an `ExpnId` (when the `ExpnId` is initially constructed, or via
        .           /// `set_expn_data`). It is *not* called for foreign `ExpnId`s deserialized
        .           /// from another crate's metadata - since `ExpnHash` includes the stable crate id,
        .           /// collisions are only possible between `ExpnId`s within the same crate.
  105,840 ( 0.00%)  fn update_disambiguator(expn_data: &mut ExpnData, mut ctx: impl HashStableContext) -> ExpnHash {
        .               // This disambiguator should not have been set yet.
   23,558 ( 0.00%)      assert_eq!(
        .                   expn_data.disambiguator, 0,
        .                   "Already set disambiguator for ExpnData: {:?}",
        .                   expn_data
        .               );
   23,558 ( 0.00%)      assert_default_hashing_controls(&ctx, "ExpnData (disambiguator)");
   58,876 ( 0.00%)      let mut expn_hash = expn_data.hash_expn(&mut ctx);
        .           
        .               let disambiguator = HygieneData::with(|data| {
        .                   // If this is the first ExpnData with a given hash, then keep our
        .                   // disambiguator at 0 (the default u32 value)
        .                   let disambig = data.expn_data_disambiguators.entry(expn_hash).or_default();
   11,779 ( 0.00%)          let disambiguator = *disambig;
   47,116 ( 0.00%)          *disambig += 1;
        .                   disambiguator
        .               });
        .           
   23,558 ( 0.00%)      if disambiguator != 0 {
        .                   debug!("Set disambiguator for expn_data={:?} expn_hash={:?}", expn_data, expn_hash);
        .           
    5,800 ( 0.00%)          expn_data.disambiguator = disambiguator;
   17,400 ( 0.00%)          expn_hash = expn_data.hash_expn(&mut ctx);
        .           
        .                   // Verify that the new disambiguator makes the hash unique
        .                   #[cfg(debug_assertions)]
        .                   HygieneData::with(|data| {
        .                       assert_eq!(
        .                           data.expn_data_disambiguators.get(&expn_hash),
        .                           None,
        .                           "Hash collision after disambiguator update!",
        .                       );
        .                   });
        .               }
        .           
   23,558 ( 0.00%)      ExpnHash::new(ctx.def_path_hash(LOCAL_CRATE.as_def_id()).stable_crate_id(), expn_hash)
  105,840 ( 0.00%)  }
        .           
        .           impl<CTX: HashStableContext> HashStable<CTX> for SyntaxContext {
  616,416 ( 0.01%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_EXPANSION: u8 = 0;
        .                   const TAG_NO_EXPANSION: u8 = 1;
        .           
  172,348 ( 0.00%)          if *self == SyntaxContext::root() {
        .                       TAG_NO_EXPANSION.hash_stable(ctx, hasher);
        .                   } else {
        .                       TAG_EXPANSION.hash_stable(ctx, hasher);
   35,176 ( 0.00%)              let (expn_id, transparency) = self.outer_mark();
  203,032 ( 0.00%)              expn_id.hash_stable(ctx, hasher);
        .                       transparency.hash_stable(ctx, hasher);
        .                   }
  567,584 ( 0.01%)      }
        .           }
        .           
        .           impl<CTX: HashStableContext> HashStable<CTX> for ExpnId {
  246,169 ( 0.00%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   assert_default_hashing_controls(ctx, "ExpnId");
  335,676 ( 0.01%)          let hash = if *self == ExpnId::root() {
        .                       // Avoid fetching TLS storage for a trivial often-used value.
        .                       Fingerprint::ZERO
        .                   } else {
        .                       self.expn_hash().0
        .                   };
        .           
        .                   hash.hash_stable(ctx, hasher);
  175,835 ( 0.00%)      }
        .           }

5,789,093 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/hygiene.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe.rs
--------------------------------------------------------------------------------
Ir                  

-- line 23 ----------------------------------------
         .           struct Delimited {
         .               delim: token::DelimToken,
         .               tts: Vec<TokenTree>,
         .           }
         .           
         .           impl Delimited {
         .               /// Returns a `self::TokenTree` with a `Span` corresponding to the opening delimiter.
         .               fn open_tt(&self, span: DelimSpan) -> TokenTree {
    83,021 ( 0.00%)          TokenTree::token(token::OpenDelim(self.delim), span.open)
         .               }
         .           
         .               /// Returns a `self::TokenTree` with a `Span` corresponding to the closing delimiter.
         .               fn close_tt(&self, span: DelimSpan) -> TokenTree {
   221,908 ( 0.00%)          TokenTree::token(token::CloseDelim(self.delim), span.close)
         .               }
         .           }
         .           
         .           #[derive(Clone, PartialEq, Encodable, Decodable, Debug)]
         .           struct SequenceRepetition {
         .               /// The sequence of token trees
         .               tts: Vec<TokenTree>,
         .               /// The optional separator
         .               separator: Option<Token>,
         .               /// Whether the sequence can be repeated zero (*), or one or more times (+)
         .               kleene: KleeneToken,
         .               /// The number of `Match`s that appear in the sequence (and subsequences)
         .               num_captures: usize,
         .           }
         .           
       101 ( 0.00%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, Copy)]
         .           struct KleeneToken {
         .               span: Span,
         .               op: KleeneOp,
         .           }
         .           
         .           impl KleeneToken {
         .               fn new(op: KleeneOp, span: Span) -> KleeneToken {
         .                   KleeneToken { span, op }
         .               }
         .           }
         .           
         .           /// A Kleene-style [repetition operator](https://en.wikipedia.org/wiki/Kleene_star)
         .           /// for token sequences.
        71 ( 0.00%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, Copy)]
         .           enum KleeneOp {
         .               /// Kleene star (`*`) for zero or more repetitions
         .               ZeroOrMore,
         .               /// Kleene plus (`+`) for one or more repetitions
         .               OneOrMore,
         .               /// Kleene optional (`?`) for zero or one repetitions
         .               ZeroOrOne,
         .           }
         .           
         .           /// Similar to `tokenstream::TokenTree`, except that `$i`, `$i:ident`, and `$(...)`
         .           /// are "first-class" token trees. Useful for parsing macros.
10,434,534 ( 0.17%)  #[derive(Debug, Clone, PartialEq, Encodable, Decodable)]
         .           enum TokenTree {
   401,255 ( 0.01%)      Token(Token),
   108,241 ( 0.00%)      Delimited(DelimSpan, Lrc<Delimited>),
         .               /// A kleene-style repetition sequence
    10,813 ( 0.00%)      Sequence(DelimSpan, Lrc<SequenceRepetition>),
         .               /// e.g., `$var`
         .               MetaVar(Span, Ident),
         .               /// e.g., `$var:expr`. This is only used in the left hand side of MBE macros.
   567,938 ( 0.01%)      MetaVarDecl(Span, Ident /* name to bind */, Option<NonterminalKind>),
         .           }
         .           
         .           impl TokenTree {
         .               /// Return the number of tokens in the tree.
         .               fn len(&self) -> usize {
 1,729,237 ( 0.03%)          match *self {
   629,673 ( 0.01%)              TokenTree::Delimited(_, ref delimed) => match delimed.delim {
         .                           token::NoDelim => delimed.tts.len(),
   419,782 ( 0.01%)                  _ => delimed.tts.len() + 2,
         .                       },
   566,485 ( 0.01%)              TokenTree::Sequence(_, ref seq) => seq.tts.len(),
         .                       _ => 0,
         .                   }
         .               }
         .           
         .               /// Returns `true` if the given token tree is delimited.
         .               fn is_delimited(&self) -> bool {
         .                   matches!(*self, TokenTree::Delimited(..))
         .               }
-- line 106 ----------------------------------------
-- line 109 ----------------------------------------
         .               fn is_token(&self, expected_kind: &TokenKind) -> bool {
         .                   match self {
         .                       TokenTree::Token(Token { kind: actual_kind, .. }) => actual_kind == expected_kind,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               /// Gets the `index`-th sub-token-tree. This only makes sense for delimited trees and sequences.
   650,928 ( 0.01%)      fn get_tt(&self, index: usize) -> TokenTree {
   877,340 ( 0.01%)          match (self, index) {
   311,310 ( 0.01%)              (&TokenTree::Delimited(_, ref delimed), _) if delimed.delim == token::NoDelim => {
         .                           delimed.tts[index].clone()
         .                       }
         .                       (&TokenTree::Delimited(span, ref delimed), _) => {
   207,540 ( 0.00%)                  if index == 0 {
         .                               return delimed.open_tt(span);
         .                           }
   456,858 ( 0.01%)                  if index == delimed.tts.len() + 1 {
         .                               return delimed.close_tt(span);
         .                           }
    20,701 ( 0.00%)                  delimed.tts[index - 1].clone()
         .                       }
   113,206 ( 0.00%)              (&TokenTree::Sequence(_, ref seq), _) => seq.tts[index].clone(),
         .                       _ => panic!("Cannot expand a token tree"),
         .                   }
   867,904 ( 0.01%)      }
         .           
         .               /// Retrieves the `TokenTree`'s span.
         .               fn span(&self) -> Span {
   250,893 ( 0.00%)          match *self {
         .                       TokenTree::Token(Token { span, .. })
         .                       | TokenTree::MetaVar(span, _)
         .                       | TokenTree::MetaVarDecl(span, _, _) => span,
    24,946 ( 0.00%)              TokenTree::Delimited(span, _) | TokenTree::Sequence(span, _) => span.entire(),
         .                   }
         .               }
         .           
         .               fn token(kind: TokenKind, span: Span) -> TokenTree {
     1,898 ( 0.00%)          TokenTree::Token(Token::new(kind, span))
         .               }
         .           }

 1,566,693 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/transcribe.rs
--------------------------------------------------------------------------------
Ir                 

-- line 16 ----------------------------------------
        .           use std::mem;
        .           
        .           // A Marker adds the given mark to the syntax context.
        .           struct Marker(LocalExpnId, Transparency);
        .           
        .           impl MutVisitor for Marker {
        .               const VISIT_TOKENS: bool = true;
        .           
1,558,701 ( 0.03%)      fn visit_span(&mut self, span: &mut Span) {
1,039,134 ( 0.02%)          *span = span.apply_mark(self.0.to_expn_id(), self.1)
1,385,512 ( 0.02%)      }
        .           }
        .           
        .           /// An iterator over the token trees in a delimited token tree (`{ ... }`) or a sequence (`$(...)`).
        .           enum Frame {
        .               Delimited { forest: Lrc<mbe::Delimited>, idx: usize, span: DelimSpan },
        .               Sequence { forest: Lrc<mbe::SequenceRepetition>, idx: usize, sep: Option<Token> },
        .           }
        .           
        .           impl Frame {
        .               /// Construct a new frame around the delimited set of tokens.
        .               fn new(tts: Vec<mbe::TokenTree>) -> Frame {
        .                   let forest = Lrc::new(mbe::Delimited { delim: token::NoDelim, tts });
   57,528 ( 0.00%)          Frame::Delimited { forest, idx: 0, span: DelimSpan::dummy() }
        .               }
        .           }
        .           
        .           impl Iterator for Frame {
        .               type Item = mbe::TokenTree;
        .           
        .               fn next(&mut self) -> Option<mbe::TokenTree> {
1,188,476 ( 0.02%)          match *self {
  388,866 ( 0.01%)              Frame::Delimited { ref forest, ref mut idx, .. } => {
  583,299 ( 0.01%)                  *idx += 1;
        .                           forest.tts.get(*idx - 1).cloned()
        .                       }
  308,058 ( 0.00%)              Frame::Sequence { ref forest, ref mut idx, .. } => {
  308,058 ( 0.00%)                  *idx += 1;
        .                           forest.tts.get(*idx - 1).cloned()
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           /// This can do Macro-By-Example transcription.
        .           /// - `interp` is a map of meta-variables to the tokens (non-terminals) they matched in the
-- line 61 ----------------------------------------
-- line 72 ----------------------------------------
        .           /// foo!(bar);
        .           /// ```
        .           ///
        .           /// `interp` would contain `$id => bar` and `src` would contain `println!("{}", stringify!($id));`.
        .           ///
        .           /// `transcribe` would return a `TokenStream` containing `println!("{}", stringify!(bar));`.
        .           ///
        .           /// Along the way, we do some additional error checking.
  105,360 ( 0.00%)  pub(super) fn transcribe<'a>(
        .               cx: &ExtCtxt<'a>,
        .               interp: &FxHashMap<MacroRulesNormalizedIdent, NamedMatch>,
        .               src: Vec<mbe::TokenTree>,
        .               transparency: Transparency,
        .           ) -> PResult<'a, TokenStream> {
        .               // Nothing for us to transcribe...
   10,536 ( 0.00%)      if src.is_empty() {
        .                   return Ok(TokenStream::default());
        .               }
        .           
        .               // We descend into the RHS (`src`), expanding things as we go. This stack contains the things
        .               // we have yet to expand/are still expanding. We start the stack off with the whole RHS.
   57,528 ( 0.00%)      let mut stack: SmallVec<[Frame; 1]> = smallvec![Frame::new(src)];
        .           
        .               // As we descend in the RHS, we will need to be able to match nested sequences of matchers.
        .               // `repeats` keeps track of where we are in matching at each level, with the last element being
        .               // the most deeply nested sequence. This is used as a stack.
        .               let mut repeats = Vec::new();
        .           
        .               // `result` contains resulting token stream from the TokenTree we just finished processing. At
        .               // the end, this will contain the full result of transcription, but at arbitrary points during
-- line 101 ----------------------------------------
-- line 105 ----------------------------------------
        .               // `result_stack` and clear `results`. We will then produce the results of transcribing the
        .               // TokenTree into `results`. Then, as we unwind back out of the `TokenTree`, we will pop the
        .               // `result_stack` and append `results` too it to produce the new `results` up to that point.
        .               //
        .               // Thus, if we try to pop the `result_stack` and it is empty, we have reached the top-level
        .               // again, and we are done transcribing.
        .               let mut result: Vec<TreeAndSpacing> = Vec::new();
        .               let mut result_stack = Vec::new();
   28,764 ( 0.00%)      let mut marker = Marker(cx.current_expansion.id, transparency);
        .           
        .               loop {
        .                   // Look at the last frame on the stack.
        .                   // If it still has a TokenTree we have not looked at yet, use that tree.
1,871,271 ( 0.03%)          let Some(tree) = stack.last_mut().unwrap().next() else {
        .                       // This else-case never produces a value for `tree` (it `continue`s or `return`s).
        .           
        .                       // Otherwise, if we have just reached the end of a sequence and we can keep repeating,
        .                       // go back to the beginning of the sequence.
  261,624 ( 0.00%)              if let Frame::Sequence { idx, sep, .. } = stack.last_mut().unwrap() {
        .                           let (repeat_idx, repeat_len) = repeats.last_mut().unwrap();
  142,252 ( 0.00%)                  *repeat_idx += 1;
   35,563 ( 0.00%)                  if repeat_idx < repeat_len {
   30,515 ( 0.00%)                      *idx = 0;
   61,030 ( 0.00%)                      if let Some(sep) = sep {
        .                                   result.push(TokenTree::Token(sep.clone()).into());
        .                               }
        .                               continue;
        .                           }
        .                       }
        .           
        .                       // We are done with the top of the stack. Pop it. Depending on what it was, we do
        .                       // different things. Note that the outermost item must be the delimited, wrapped RHS
        .                       // that was passed in originally to `transcribe`.
   69,782 ( 0.00%)              match stack.pop().unwrap() {
        .                           // Done with a sequence. Pop from repeats.
        .                           Frame::Sequence { .. } => {
        .                               repeats.pop();
        .                           }
        .           
        .                           // We are done processing a Delimited. If this is the top-level delimited, we are
        .                           // done. Otherwise, we unwind the result_stack to append what we have produced to
        .                           // any previous results.
  119,372 ( 0.00%)                  Frame::Delimited { forest, span, .. } => {
   29,843 ( 0.00%)                      if result_stack.is_empty() {
        .                                   // No results left to compute! We are back at the top-level.
   43,146 ( 0.00%)                          return Ok(TokenStream::new(result));
        .                               }
        .           
        .                               // Step back into the parent Delimited.
  294,476 ( 0.00%)                      let tree = TokenTree::Delimited(span, forest.delim, TokenStream::new(result));
   67,956 ( 0.00%)                      result = result_stack.pop().unwrap();
        .                               result.push(tree.into());
        .                           }
   59,686 ( 0.00%)              }
        .                       continue;
        .                   };
        .           
        .                   // At this point, we know we are in the middle of a TokenTree (the last one on `stack`).
        .                   // `tree` contains the next `TokenTree` to be processed.
1,390,278 ( 0.02%)          match tree {
        .                       // We are descending into a sequence. We first make sure that the matchers in the RHS
        .                       // and the matches in `interp` have the same shape. Otherwise, either the caller or the
        .                       // macro writer has made a mistake.
   20,340 ( 0.00%)              seq @ mbe::TokenTree::Sequence(..) => {
   35,595 ( 0.00%)                  match lockstep_iter_size(&seq, interp, &repeats) {
        .                               LockstepIterSize::Unconstrained => {
        .                                   return Err(cx.struct_span_err(
        .                                       seq.span(), /* blame macro writer */
        .                                       "attempted to repeat an expression containing no syntax variables \
        .                                        matched as repeating at this depth",
        .                                   ));
        .                               }
        .           
-- line 177 ----------------------------------------
-- line 181 ----------------------------------------
        .                                   // sequence, but they come from different sequence matchers and repeat
        .                                   // different amounts.
        .                                   return Err(cx.struct_span_err(seq.span(), &msg));
        .                               }
        .           
        .                               LockstepIterSize::Constraint(len, _) => {
        .                                   // We do this to avoid an extra clone above. We know that this is a
        .                                   // sequence already.
   35,595 ( 0.00%)                          let mbe::TokenTree::Sequence(sp, seq) = seq else {
        .                                       unreachable!()
        .                                   };
        .           
        .                                   // Is the repetition empty?
   10,170 ( 0.00%)                          if len == 0 {
       37 ( 0.00%)                              if seq.kleene.op == mbe::KleeneOp::OneOrMore {
        .                                           // FIXME: this really ought to be caught at macro definition
        .                                           // time... It happens when the Kleene operator in the matcher and
        .                                           // the body for the same meta-variable do not match.
        .                                           return Err(cx.struct_span_err(
        .                                               sp.entire(),
        .                                               "this must repeat at least once",
        .                                           ));
        .                                       }
-- line 203 ----------------------------------------
-- line 204 ----------------------------------------
        .                                   } else {
        .                                       // 0 is the initial counter (we have done 0 repretitions so far). `len`
        .                                       // is the total number of repetitions we should generate.
        .                                       repeats.push((0, len));
        .           
        .                                       // The first time we encounter the sequence we push it to the stack. It
        .                                       // then gets reused (see the beginning of the loop) until we are done
        .                                       // repeating.
   45,432 ( 0.00%)                              stack.push(Frame::Sequence {
        .                                           idx: 0,
        .                                           sep: seq.separator.clone(),
        .                                           forest: seq,
        .                                       });
        .                                   }
        .                               }
        .                           }
        .                       }
        .           
        .                       // Replace the meta-var with the matched token tree from the invocation.
  539,976 ( 0.01%)              mbe::TokenTree::MetaVar(mut sp, mut orignal_ident) => {
        .                           // Find the matched nonterminal from the macro invocation, and use it to replace
        .                           // the meta-var.
  359,984 ( 0.01%)                  let ident = MacroRulesNormalizedIdent::new(orignal_ident);
  539,976 ( 0.01%)                  if let Some(cur_matched) = lookup_cur_matched(ident, interp, &repeats) {
  269,988 ( 0.00%)                      if let MatchedNonterminal(nt) = cur_matched {
  269,988 ( 0.00%)                          let token = if let NtTT(tt) = &**nt {
        .                                       // `tt`s are emitted into the output stream directly as "raw tokens",
        .                                       // without wrapping them into groups.
        .                                       tt.clone()
        .                                   } else {
        .                                       // Other variables are emitted into the output stream as groups with
        .                                       // `Delimiter::None` to maintain parsing priorities.
        .                                       // `Interpolated` is currenty used for such groups in rustc parser.
   41,715 ( 0.00%)                              marker.visit_span(&mut sp);
   83,430 ( 0.00%)                              TokenTree::token(token::Interpolated(nt.clone()), sp)
        .                                   };
        .                                   result.push(token.into());
        .                               } else {
        .                                   // We were unable to descend far enough. This is an error.
        .                                   return Err(cx.struct_span_err(
        .                                       sp, /* blame the macro writer */
        .                                       &format!("variable '{}' is still repeating at this depth", ident),
        .                                   ));
-- line 246 ----------------------------------------
-- line 255 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       // If we are entering a new delimiter, we push its contents to the `stack` to be
        .                       // processed, and we push all of the currently produced results to the `result_stack`.
        .                       // We will produce all of the results of the inside of the `Delimited` and then we will
        .                       // jump back out of the Delimited, pop the result_stack and add the new results back to
        .                       // the previous results (from outside the Delimited).
  135,912 ( 0.00%)              mbe::TokenTree::Delimited(mut span, delimited) => {
        .                           mut_visit::visit_delim_span(&mut span, &mut marker);
  135,912 ( 0.00%)                  stack.push(Frame::Delimited { forest: delimited, idx: 0, span });
        .                           result_stack.push(mem::take(&mut result));
        .                       }
        .           
        .                       // Nothing much to do here. Just push the token to the result, being careful to
        .                       // preserve syntax context.
        .                       mbe::TokenTree::Token(token) => {
  683,880 ( 0.01%)                  let mut tt = TokenTree::Token(token);
  341,940 ( 0.01%)                  mut_visit::visit_tt(&mut tt, &mut marker);
        .                           result.push(tt.into());
        .                       }
        .           
        .                       // There should be no meta-var declarations in the invocation of a macro.
        .                       mbe::TokenTree::MetaVarDecl(..) => panic!("unexpected `TokenTree::MetaVarDecl"),
        .                   }
        .               }
  119,742 ( 0.00%)  }
        .           
        .           /// Lookup the meta-var named `ident` and return the matched token tree from the invocation using
        .           /// the set of matches `interpolations`.
        .           ///
        .           /// See the definition of `repeats` in the `transcribe` function. `repeats` is used to descend
        .           /// into the right place in nested matchers. If we attempt to descend too far, the macro writer has
        .           /// made a mistake, and we return `None`.
  887,697 ( 0.01%)  fn lookup_cur_matched<'a>(
        .               ident: MacroRulesNormalizedIdent,
        .               interpolations: &'a FxHashMap<MacroRulesNormalizedIdent, NamedMatch>,
        .               repeats: &[(usize, usize)],
        .           ) -> Option<&'a NamedMatch> {
        .               interpolations.get(&ident).map(|matched| {
        .                   let mut matched = matched;
        .                   for &(idx, _) in repeats {
  477,906 ( 0.01%)              match matched {
        .                           MatchedNonterminal(_) => break,
   73,315 ( 0.00%)                  MatchedSeq(ref ads) => matched = ads.get(idx).unwrap(),
        .                       }
        .                   }
        .           
        .                   matched
        .               })
  887,697 ( 0.01%)  }
        .           
        .           /// An accumulator over a TokenTree to be used with `fold`. During transcription, we need to make
        .           /// sure that the size of each sequence and all of its nested sequences are the same as the sizes
        .           /// of all the matched (nested) sequences in the macro invocation. If they don't match, somebody
        .           /// has made a mistake (either the macro writer or caller).
        .           #[derive(Clone)]
        .           enum LockstepIterSize {
        .               /// No constraints on length of matcher. This is true for any TokenTree variants except a
-- line 313 ----------------------------------------
-- line 322 ----------------------------------------
        .               Contradiction(String),
        .           }
        .           
        .           impl LockstepIterSize {
        .               /// Find incompatibilities in matcher/invocation sizes.
        .               /// - `Unconstrained` is compatible with everything.
        .               /// - `Contradiction` is incompatible with everything.
        .               /// - `Constraint(len)` is only compatible with other constraints of the same length.
  109,989 ( 0.00%)      fn with(self, other: LockstepIterSize) -> LockstepIterSize {
   43,751 ( 0.00%)          match self {
        .                       LockstepIterSize::Unconstrained => other,
        .                       LockstepIterSize::Contradiction(_) => self,
   30,872 ( 0.00%)              LockstepIterSize::Constraint(l_len, ref l_id) => match other {
        .                           LockstepIterSize::Unconstrained => self,
        .                           LockstepIterSize::Contradiction(_) => other,
    9,096 ( 0.00%)                  LockstepIterSize::Constraint(r_len, _) if l_len == r_len => self,
        .                           LockstepIterSize::Constraint(r_len, r_id) => {
        .                               let msg = format!(
        .                                   "meta-variable `{}` repeats {} time{}, but `{}` repeats {} time{}",
        .                                   l_id,
        .                                   l_len,
        .                                   pluralize!(l_len),
        .                                   r_id,
        .                                   r_len,
        .                                   pluralize!(r_len),
        .                               );
        .                               LockstepIterSize::Contradiction(msg)
        .                           }
        .                       },
        .                   }
   92,635 ( 0.00%)      }
        .           }
        .           
        .           /// Given a `tree`, make sure that all sequences have the same length as the matches for the
        .           /// appropriate meta-vars in `interpolations`.
        .           ///
        .           /// Note that if `repeats` does not match the exact correct depth of a meta-var,
        .           /// `lookup_cur_matched` will return `None`, which is why this still works even in the presence of
        .           /// multiple nested matcher sequences.
  173,060 ( 0.00%)  fn lockstep_iter_size(
        .               tree: &mbe::TokenTree,
        .               interpolations: &FxHashMap<MacroRulesNormalizedIdent, NamedMatch>,
        .               repeats: &[(usize, usize)],
        .           ) -> LockstepIterSize {
        .               use mbe::TokenTree;
  121,142 ( 0.00%)      match *tree {
        .                   TokenTree::Delimited(_, ref delimed) => {
    1,016 ( 0.00%)              delimed.tts.iter().fold(LockstepIterSize::Unconstrained, |size, tt| {
   64,568 ( 0.00%)                  size.with(lockstep_iter_size(tt, interpolations, repeats))
        .                       })
        .                   }
        .                   TokenTree::Sequence(_, ref seq) => {
    5,085 ( 0.00%)              seq.tts.iter().fold(LockstepIterSize::Unconstrained, |size, tt| {
  124,810 ( 0.00%)                  size.with(lockstep_iter_size(tt, interpolations, repeats))
        .                       })
        .                   }
        .                   TokenTree::MetaVar(_, name) | TokenTree::MetaVarDecl(_, name, _) => {
   17,274 ( 0.00%)              let name = MacroRulesNormalizedIdent::new(name);
   77,733 ( 0.00%)              match lookup_cur_matched(name, interpolations, repeats) {
   17,274 ( 0.00%)                  Some(matched) => match matched {
        .                               MatchedNonterminal(_) => LockstepIterSize::Unconstrained,
   48,702 ( 0.00%)                      MatchedSeq(ref ads) => LockstepIterSize::Constraint(ads.len(), name),
        .                           },
        .                           _ => LockstepIterSize::Unconstrained,
        .                       }
        .                   }
        .                   TokenTree::Token(..) => LockstepIterSize::Unconstrained,
        .               }
  138,448 ( 0.00%)  }

3,239,270 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/transcribe.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs
--------------------------------------------------------------------------------
Ir                 

-- line 40 ----------------------------------------
        .           
        .           impl<BorrowType: marker::BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {
        .               /// Looks up a given key in a (sub)tree headed by the node, recursively.
        .               /// Returns a `Found` with the handle of the matching KV, if any. Otherwise,
        .               /// returns a `GoDown` with the handle of the leaf edge where the key belongs.
        .               ///
        .               /// The result is meaningful only if the tree is ordered by key, like the tree
        .               /// in a `BTreeMap` is.
1,289,602 ( 0.02%)      pub fn search_tree<Q: ?Sized>(
        .                   mut self,
        .                   key: &Q,
        .               ) -> SearchResult<BorrowType, K, V, marker::LeafOrInternal, marker::Leaf>
        .               where
        .                   Q: Ord,
        .                   K: Borrow<Q>,
        .               {
        .                   loop {
        .                       self = match self.search_node(key) {
        .                           Found(handle) => return Found(handle),
   35,923 ( 0.00%)                  GoDown(handle) => match handle.force() {
        .                               Leaf(leaf) => return GoDown(leaf),
        .                               Internal(internal) => internal.descend(),
        .                           },
        .                       }
        .                   }
  646,327 ( 0.01%)      }
        .           
        .               /// Descends to the nearest node where the edge matching the lower bound
        .               /// of the range is different from the edge matching the upper bound, i.e.,
        .               /// the nearest node that has at least one key contained in the range.
        .               ///
        .               /// If found, returns an `Ok` with that node, the strictly ascending pair of
        .               /// edge indices in the node delimiting the range, and the corresponding
        .               /// pair of bounds for continuing the search in the child nodes, in case
-- line 73 ----------------------------------------
-- line 202 ----------------------------------------
        .               unsafe fn find_key_index<Q: ?Sized>(&self, key: &Q, start_index: usize) -> IndexResult
        .               where
        .                   Q: Ord,
        .                   K: Borrow<Q>,
        .               {
        .                   let node = self.reborrow();
        .                   let keys = node.keys();
        .                   debug_assert!(start_index <= keys.len());
1,182,244 ( 0.02%)          for (offset, k) in unsafe { keys.get_unchecked(start_index..) }.iter().enumerate() {
4,888,094 ( 0.08%)              match key.cmp(k.borrow()) {
        .                           Ordering::Greater => {}
        .                           Ordering::Equal => return IndexResult::KV(start_index + offset),
        .                           Ordering::Less => return IndexResult::Edge(start_index + offset),
        .                       }
        .                   }
        .                   IndexResult::Edge(keys.len())
        .               }
        .           
-- line 219 ----------------------------------------

2,169,665 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs
--------------------------------------------------------------------------------
Ir                 

-- line 10 ----------------------------------------
        .           pub fn move_path_children_matching<'tcx, F>(
        .               move_data: &MoveData<'tcx>,
        .               path: MovePathIndex,
        .               mut cond: F,
        .           ) -> Option<MovePathIndex>
        .           where
        .               F: FnMut(mir::PlaceElem<'tcx>) -> bool,
        .           {
      178 ( 0.00%)      let mut next_child = move_data.move_paths[path].first_child;
      496 ( 0.00%)      while let Some(child_index) = next_child {
        .                   let move_path_children = &move_data.move_paths[child_index];
      404 ( 0.00%)          if let Some(&elem) = move_path_children.place.projection.last() {
      673 ( 0.00%)              if cond(elem) {
        .                           return Some(child_index);
        .                       }
        .                   }
        .                   next_child = move_path_children.next_sibling;
        .               }
        .           
        .               None
        .           }
-- line 30 ----------------------------------------
-- line 48 ----------------------------------------
        .           //
        .           // FIXME: we have to do something for moving slice patterns.
        .           fn place_contents_drop_state_cannot_differ<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               place: mir::Place<'tcx>,
        .           ) -> bool {
        .               let ty = place.ty(body, tcx).ty;
1,344,404 ( 0.02%)      match ty.kind() {
        .                   ty::Array(..) => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} => false",
        .                           place, ty
        .                       );
        .                       false
        .                   }
        .                   ty::Slice(..) | ty::Ref(..) | ty::RawPtr(..) => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} refd => true",
        .                           place, ty
        .                       );
        .                       true
        .                   }
  619,830 ( 0.01%)          ty::Adt(def, _) if (def.has_dtor(tcx) && !def.is_box()) || def.is_union() => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} Drop => true",
        .                           place, ty
        .                       );
        .                       true
        .                   }
        .                   _ => false,
        .               }
-- line 79 ----------------------------------------
-- line 83 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               lookup_result: LookupResult,
        .               each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
   44,476 ( 0.00%)      match lookup_result {
        .                   LookupResult::Parent(..) => {
        .                       // access to untracked value - do not touch children
        .                   }
        .                   LookupResult::Exact(e) => on_all_children_bits(tcx, body, move_data, e, each_child),
        .               }
        .           }
        .           
        .           pub fn on_all_children_bits<'tcx, F>(
-- line 99 ----------------------------------------
-- line 100 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               move_path_index: MovePathIndex,
        .               mut each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
2,241,832 ( 0.04%)      fn is_terminal_path<'tcx>(
        .                   tcx: TyCtxt<'tcx>,
        .                   body: &Body<'tcx>,
        .                   move_data: &MoveData<'tcx>,
        .                   path: MovePathIndex,
        .               ) -> bool {
  560,458 ( 0.01%)          place_contents_drop_state_cannot_differ(tcx, body, move_data.move_paths[path].place)
2,241,832 ( 0.04%)      }
        .           
2,695,499 ( 0.04%)      fn on_all_children_bits<'tcx, F>(
        .                   tcx: TyCtxt<'tcx>,
        .                   body: &Body<'tcx>,
        .                   move_data: &MoveData<'tcx>,
        .                   move_path_index: MovePathIndex,
        .                   each_child: &mut F,
        .               ) where
        .                   F: FnMut(MovePathIndex),
        .               {
   74,998 ( 0.00%)          each_child(move_path_index);
        .           
1,963,481 ( 0.03%)          if is_terminal_path(tcx, body, move_data, move_path_index) {
        .                       return;
        .                   }
        .           
  111,679 ( 0.00%)          let mut next_child_index = move_data.move_paths[move_path_index].first_child;
  232,156 ( 0.00%)          while let Some(child_index) = next_child_index {
   13,362 ( 0.00%)              on_all_children_bits(tcx, body, move_data, child_index, each_child);
    2,227 ( 0.00%)              next_child_index = move_data.move_paths[child_index].next_sibling;
        .                   }
2,173,186 ( 0.03%)      }
1,659,181 ( 0.03%)      on_all_children_bits(tcx, body, move_data, move_path_index, &mut each_child);
        .           }
        .           
        .           pub fn on_all_drop_children_bits<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               path: MovePathIndex,
        .               mut each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
   36,398 ( 0.00%)      on_all_children_bits(tcx, body, &ctxt.move_data, path, |child| {
   18,332 ( 0.00%)          let place = &ctxt.move_data.move_paths[path].place;
    4,583 ( 0.00%)          let ty = place.ty(body, tcx).ty;
        .                   debug!("on_all_drop_children_bits({:?}, {:?} : {:?})", path, place, ty);
        .           
      664 ( 0.00%)          let erased_ty = tcx.erase_regions(ty);
   28,159 ( 0.00%)          if erased_ty.needs_drop(tcx, ctxt.param_env) {
    4,583 ( 0.00%)              each_child(child);
        .                   } else {
        .                       debug!("on_all_drop_children_bits - skipping")
        .                   }
        .               })
        .           }
        .           
    1,543 ( 0.00%)  pub fn drop_flag_effects_for_function_entry<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex, DropFlagState),
        .           {
        .               let move_data = &ctxt.move_data;
      138 ( 0.00%)      for arg in body.args_iter() {
      288 ( 0.00%)          let place = mir::Place::from(arg);
      432 ( 0.00%)          let lookup_result = move_data.rev_lookup.find(place.as_ref());
        .                   on_lookup_result_bits(tcx, body, move_data, lookup_result, |mpi| {
      144 ( 0.00%)              callback(mpi, DropFlagState::Present)
        .                   });
        .               }
    1,104 ( 0.00%)  }
        .           
3,285,126 ( 0.05%)  pub fn drop_flag_effects_for_location<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               loc: Location,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex, DropFlagState),
        .           {
        .               let move_data = &ctxt.move_data;
        .               debug!("drop_flag_effects_for_location({:?})", loc);
        .           
        .               // first, move out of the RHS
  132,384 ( 0.00%)      for mi in &move_data.loc_map[loc] {
  650,158 ( 0.01%)          let path = mi.move_path_index(move_data);
        .                   debug!("moving out of path {:?}", move_data.move_paths[path]);
        .           
  169,102 ( 0.00%)          on_all_children_bits(tcx, body, move_data, path, |mpi| callback(mpi, DropFlagState::Absent))
        .               }
        .           
        .               debug!("drop_flag_effects: assignment for location({:?})", loc);
        .           
   74,998 ( 0.00%)      for_location_inits(tcx, body, move_data, loc, |mpi| callback(mpi, DropFlagState::Present));
2,567,088 ( 0.04%)  }
        .           
        .           pub fn for_location_inits<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               loc: Location,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
  132,384 ( 0.00%)      for ii in &move_data.init_loc_map[loc] {
  401,316 ( 0.01%)          let init = move_data.inits[*ii];
  251,374 ( 0.00%)          match init.kind {
        .                       InitKind::Deep => {
        .                           let path = init.path;
        .           
        .                           on_all_children_bits(tcx, body, move_data, path, &mut callback)
        .                       }
        .                       InitKind::Shallow => {
        .                           let mpi = init.path;
        .                           callback(mpi);
-- line 226 ----------------------------------------
-- line 230 ----------------------------------------
        .               }
        .           }
        .           
        .           /// Calls `handle_inactive_variant` for each descendant move path of `enum_place` that contains a
        .           /// `Downcast` to a variant besides the `active_variant`.
        .           ///
        .           /// NOTE: If there are no move paths corresponding to an inactive variant,
        .           /// `handle_inactive_variant` will not be called for that variant.
    1,956 ( 0.00%)  pub(crate) fn on_all_inactive_variants<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &mir::Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               enum_place: mir::Place<'tcx>,
        .               active_variant: VariantIdx,
        .               mut handle_inactive_variant: impl FnMut(MovePathIndex),
        .           ) {
      815 ( 0.00%)      let enum_mpi = match move_data.rev_lookup.find(enum_place.as_ref()) {
        .                   LookupResult::Exact(mpi) => mpi,
        .                   LookupResult::Parent(_) => return,
        .               };
        .           
        .               let enum_path = &move_data.move_paths[enum_mpi];
      783 ( 0.00%)      for (variant_mpi, variant_path) in enum_path.children(&move_data.move_paths) {
        .                   // Because of the way we build the `MoveData` tree, each child should have exactly one more
        .                   // projection than `enum_place`. This additional projection must be a downcast since the
        .                   // base is an enum.
      157 ( 0.00%)          let (downcast, base_proj) = variant_path.place.projection.split_last().unwrap();
      628 ( 0.00%)          assert_eq!(enum_place.projection.len(), base_proj.len());
        .           
      471 ( 0.00%)          let variant_idx = match *downcast {
        .                       mir::ProjectionElem::Downcast(_, idx) => idx,
        .                       _ => unreachable!(),
        .                   };
        .           
      157 ( 0.00%)          if variant_idx != active_variant {
        .                       on_all_children_bits(tcx, body, move_data, variant_mpi, |mpi| {
      128 ( 0.00%)                  handle_inactive_variant(mpi)
        .                       });
        .                   }
        .               }
    1,304 ( 0.00%)  }

1,813,952 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 91 ----------------------------------------
        .           // maximum of number bytes needed to fill an 8-byte-sized element on which
        .           // SipHash operates. Note that for variable-sized copies which are known to be
        .           // less than 8 bytes, this function will perform more work than necessary unless
        .           // the compiler is able to optimize the extra work away.
        .           #[inline]
        .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
        .               debug_assert!(count <= 8);
        .           
   36,403 ( 0.00%)      if count == 8 {
        .                   ptr::copy_nonoverlapping(src, dst, 8);
        .                   return;
        .               }
        .           
        .               let mut i = 0;
   44,704 ( 0.00%)      if i + 3 < count {
        .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
        .                   i += 4;
        .               }
        .           
   93,716 ( 0.00%)      if i + 1 < count {
        .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
   15,486 ( 0.00%)          i += 2
        .               }
        .           
   44,704 ( 0.00%)      if i < count {
   19,499 ( 0.00%)          *dst.add(i) = *src.add(i);
        .                   i += 1;
        .               }
        .           
        .               debug_assert_eq!(i, count);
        .           }
        .           
        .           // # Implementation
        .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
        .           
        .                   hasher
        .               }
        .           
        .               // A specialized write function for values with size <= 8.
        .               #[inline]
        .               fn short_write<T>(&mut self, x: T) {
        .                   let size = mem::size_of::<T>();
  864,982 ( 0.01%)          let nbuf = self.nbuf;
        .                   debug_assert!(size <= 8);
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
        .           
6,166,391 ( 0.10%)          if nbuf + size < BUFFER_SIZE {
        .                       unsafe {
        .                           // The memcpy call is optimized away because the size is known.
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
        .                       }
        .           
2,040,475 ( 0.03%)              self.nbuf = nbuf + size;
        .           
        .                       return;
        .                   }
        .           
  303,017 ( 0.00%)          unsafe { self.short_write_process_buffer(x) }
        .               }
        .           
        .               // A specialized write function for values with size <= 8 that should only
        .               // be called when the write would cause the buffer to fill.
        .               //
        .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
        .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
        .               // overflow) if it wasn't already.
        .               #[inline(never)]
   93,922 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
        .                   let size = mem::size_of::<T>();
   93,922 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(size <= 8);
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
        .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
        .           
        .                   // Copy first part of input into end of buffer, possibly into spill
        .                   // element. The memcpy call is optimized away because the size is known.
        .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
        .           
        .                   // Process buffer.
        .                   for i in 0..BUFFER_CAPACITY {
  939,220 ( 0.02%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
  751,376 ( 0.01%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
  845,298 ( 0.01%)              self.state.v0 ^= elem;
        .                   }
        .           
        .                   // Copy remaining input into start of buffer by copying size - 1
        .                   // elements from spill (at most size - 1 bytes could have overflowed
        .                   // into the spill). The memcpy call is optimized away because the size
        .                   // is known. And the whole copy is optimized away for size == 1.
        .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
        .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
        .           
        .                   // This function should only be called when the write fills the buffer.
        .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
        .                   // is statically known, so the branch is optimized away.
  452,338 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
  375,688 ( 0.01%)          self.processed += BUFFER_SIZE;
  187,844 ( 0.00%)      }
        .           
        .               // A write function for byte slices.
        .               #[inline]
        .               fn slice_write(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
    9,545 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .           
  231,280 ( 0.00%)          if nbuf + length < BUFFER_SIZE {
        .                       unsafe {
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .           
   87,134 ( 0.00%)                  if length <= 8 {
        .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
        .                           } else {
        .                               // This memcpy is *not* optimized away.
        .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
        .                           }
        .                       }
        .           
   43,704 ( 0.00%)              self.nbuf = nbuf + length;
        .           
        .                       return;
        .                   }
        .           
   21,830 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
        .               }
        .           
        .               // A write function for byte slices that should only be called when the
        .               // write would cause the buffer to fill.
        .               //
        .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
        .               // and `msg` must contain enough bytes to initialize the rest of the element
        .               // containing the byte offset `self.nbuf`.
        .               #[inline(never)]
   13,380 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
    2,676 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
        .           
        .                   // Always copy first part of input into current element of buffer.
        .                   // This function should only be called when the write fills the buffer,
        .                   // so we know that there is enough input to fill the current element.
    8,028 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
    2,676 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
        .           
        .                   let src = msg.as_ptr();
        .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
        .           
        .                   // Process buffer.
        .           
        .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
        .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
        .                   // We know that is true, because last step ensured we have a full
        .                   // element in the buffer.
    5,352 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
        .           
        .                   for i in 0..last {
   20,905 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
   23,581 ( 0.00%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
   41,810 ( 0.00%)              self.state.v0 ^= elem;
        .                   }
        .           
        .                   // Process the remaining element-sized chunks of input.
        .                   let mut processed = needed_in_elem;
    5,352 ( 0.00%)          let input_left = length - processed;
    1,707 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
        .                   let extra_bytes_left = input_left % ELEM_SIZE;
        .           
        .                   for _ in 0..elems_left {
      835 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
      835 ( 0.00%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
      835 ( 0.00%)              self.state.v0 ^= elem;
    1,670 ( 0.00%)              processed += ELEM_SIZE;
        .                   }
        .           
        .                   // Copy remaining input into start of buffer.
        .                   let src = msg.as_ptr().add(processed);
        .                   let dst = self.buf.as_mut_ptr() as *mut u8;
        .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
        .           
    2,676 ( 0.00%)          self.nbuf = extra_bytes_left;
   13,380 ( 0.00%)          self.processed += nbuf + processed;
   16,056 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn finish128(mut self) -> (u64, u64) {
        .                   debug_assert!(self.nbuf < BUFFER_SIZE);
        .           
        .                   // Process full elements in buffer.
   78,567 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
        .           
        .                   // Since we're consuming self, avoid updating members for a potential
        .                   // performance gain.
  104,756 ( 0.00%)          let mut state = self.state;
        .           
        .                   for i in 0..last {
  145,008 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
  145,008 ( 0.00%)              state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut state);
  145,008 ( 0.00%)              state.v0 ^= elem;
        .                   }
        .           
        .                   // Get remaining partial element.
   52,378 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
        .                       unsafe {
        .                           // Ensure element is initialized by writing zero bytes. At most
        .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
        .                           // to write this many because we have the spill and we maintain
        .                           // `self.nbuf` such that this write will start before the spill.
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
        .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
   19,615 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
        .                       }
        .                   } else {
        .                       0
        .                   };
        .           
        .                   // Finalize the hash.
   71,309 ( 0.00%)          let length = self.processed + self.nbuf;
   50,998 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
        .           
   25,499 ( 0.00%)          state.v3 ^= b;
        .                   Sip24Rounds::c_rounds(&mut state);
   25,499 ( 0.00%)          state.v0 ^= b;
        .           
   25,499 ( 0.00%)          state.v2 ^= 0xee;
        .                   Sip24Rounds::d_rounds(&mut state);
   65,528 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
        .           
   14,528 ( 0.00%)          state.v1 ^= 0xdd;
        .                   Sip24Rounds::d_rounds(&mut state);
   14,528 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
        .           
        .                   (_0, _1)
        .               }
        .           }
        .           
        .           impl Hasher for SipHasher128 {
        .               #[inline]
        .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
        .           }
        .           
        .           #[derive(Debug, Clone, Default)]
        .           struct Sip24Rounds;
        .           
        .           impl Sip24Rounds {
        .               #[inline]
        .               fn c_rounds(state: &mut State) {
3,876,442 ( 0.06%)          compress!(state);
4,118,973 ( 0.07%)          compress!(state);
        .               }
        .           
        .               #[inline]
        .               fn d_rounds(state: &mut State) {
  131,052 ( 0.00%)          compress!(state);
  131,052 ( 0.00%)          compress!(state);
  131,052 ( 0.00%)          compress!(state);
  105,554 ( 0.00%)          compress!(state);
        .               }
        .           }

  633,677 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 108 ----------------------------------------
        .                   suppress_errors: bool,
        .               },
        .           }
        .           
        .           impl RegionckMode {
        .               /// Indicates that the MIR borrowck will repeat these region
        .               /// checks, so we should ignore errors if NLL is (unconditionally)
        .               /// enabled.
       17 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
        .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
        .                   // this always `true` and then proceed to eliminate the dead code.
       17 ( 0.00%)          match tcx.borrowck_mode() {
        .                       // If we're on Migrate mode, report AST region errors
        .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
        .           
        .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
        .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
        .                   }
       34 ( 0.00%)      }
        .           }
        .           
        .           /// This type contains all the things within `InferCtxt` that sit within a
        .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
        .           /// operations are hot enough that we want only one call to `borrow_mut` per
        .           /// call to `start_snapshot` and `rollback_to`.
        .           pub struct InferCtxtInner<'tcx> {
        .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
        .               /// type instantiations (`ty::Infer`) to the actual opaque
        .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
        .               /// opaque type inference variables to their corresponding
        .               /// opaque type.
        .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
        .           }
        .           
        .           impl<'tcx> InferCtxtInner<'tcx> {
   17,035 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
  115,838 ( 0.00%)          InferCtxtInner {
        .                       projection_cache: Default::default(),
        .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
        .                       undo_log: InferCtxtUndoLogs::default(),
        .                       const_unification_storage: ut::UnificationTableStorage::new(),
        .                       int_unification_storage: ut::UnificationTableStorage::new(),
        .                       float_unification_storage: ut::UnificationTableStorage::new(),
   10,221 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
        .                       region_obligations: vec![],
        .                       opaque_types: Default::default(),
        .                       opaque_types_vars: Default::default(),
        .                   }
   20,442 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
        .                   &self.region_obligations
        .               }
        .           
        .               #[inline]
        .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
      643 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
1,033,224 ( 0.02%)          self.type_variable_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn int_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::IntVid,
        .                       &mut ut::UnificationStorage<ty::IntVid>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
       22 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn float_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::FloatVid,
-- line 258 ----------------------------------------
-- line 268 ----------------------------------------
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::ConstVid<'tcx>,
        .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
      651 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
   76,483 ( 0.00%)          self.region_constraint_storage
        .                       .as_mut()
        .                       .expect("region constraints already solved")
   82,152 ( 0.00%)              .with_log(&mut self.undo_log)
        .               }
        .           }
        .           
        .           pub struct InferCtxt<'a, 'tcx> {
        .               pub tcx: TyCtxt<'tcx>,
        .           
        .               /// The `DefId` of the item in whose context we are performing inference or typeck.
        .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
        .               /// item we are type-checking, and just consider those names as
        .               /// part of the root universe. So this would only get incremented
        .               /// when we enter into a higher-ranked (`for<..>`) type or trait
        .               /// bound.
        .               universe: Cell<ty::UniverseIndex>,
        .           }
        .           
        .           /// See the `error_reporting` module for more details.
  123,240 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
        .           pub enum ValuePairs<'tcx> {
        .               Types(ExpectedFound<Ty<'tcx>>),
        .               Regions(ExpectedFound<ty::Region<'tcx>>),
        .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
        .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
        .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
        .           }
        .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
        .           pub struct TypeTrace<'tcx> {
        .               cause: ObligationCause<'tcx>,
        .               values: ValuePairs<'tcx>,
        .           }
        .           
        .           /// The origin of a `r1 <= r2` constraint.
        .           ///
        .           /// See `error_reporting` module for more details
  153,741 ( 0.00%)  #[derive(Clone, Debug)]
        .           pub enum SubregionOrigin<'tcx> {
        .               /// Arose from a subtyping relation
   10,036 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
        .           
        .               /// When casting `&'a T` to an `&'b Trait` object,
        .               /// relating `'a` to `'b`
        .               RelateObjectBound(Span),
        .           
        .               /// Some type parameter was instantiated with the given type,
        .               /// and that type must outlive some region.
      135 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
        .           
        .               /// The given region parameter was instantiated with a region
        .               /// that must outlive some other region.
        .               RelateRegionParamBound(Span),
        .           
        .               /// Creating a pointer `b` to contents of another reference
        .               Reborrow(Span),
        .           
        .               /// Creating a pointer `b` to contents of an upvar
        .               ReborrowUpvar(Span, ty::UpvarId),
        .           
        .               /// Data with type `Ty<'tcx>` was borrowed
      256 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
        .           
        .               /// (&'a &'b T) where a >= b
      120 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
        .           
        .               /// Comparing the signature and requirements of an impl method against
        .               /// the containing trait.
        .               CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
        .           
        .               /// Comparing the signature and requirements of an impl associated type
        .               /// against the containing trait
        .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
-- line 426 ----------------------------------------
-- line 554 ----------------------------------------
        .               defining_use_anchor: Option<LocalDefId>,
        .           }
        .           
        .           pub trait TyCtxtInferExt<'tcx> {
        .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
        .           }
        .           
        .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
    3,407 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
   10,221 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
    3,407 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> InferCtxtBuilder<'tcx> {
        .               /// Used only by `rustc_typeck` during body type-checking/inference,
        .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
        .               /// Will also change the scope for opaque type defining use checks to the given owner.
      333 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
      407 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
      185 ( 0.00%)          self.with_opaque_type_inference(table_owner)
      259 ( 0.00%)      }
        .           
        .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
        .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
        .               ///
        .               /// It is only meant to be called in two places, for typeck
        .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
        .               /// in mir borrowck.
       38 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
       19 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
      112 ( 0.00%)          self
       57 ( 0.00%)      }
        .           
        .               /// Given a canonical value `C` as a starting point, create an
        .               /// inference context that contains each of the bound values
        .               /// within instantiated as a fresh variable. The `f` closure is
        .               /// invoked with the new infcx, along with the instantiated value
        .               /// `V` and a substitution `S`. This substitution `S` maps from
        .               /// the bound values in `C` to their instantiated values in `V`
        .               /// (in other words, `S(C) = V`).
    4,978 ( 0.00%)      pub fn enter_with_canonical<T, R>(
        .                   &mut self,
        .                   span: Span,
        .                   canonical: &Canonical<'tcx, T>,
        .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
        .               ) -> R
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   self.enter(|infcx| {
    4,874 ( 0.00%)              let (value, subst) =
      136 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
    7,759 ( 0.00%)              f(infcx, value, subst)
        .                   })
    5,460 ( 0.00%)      }
        .           
   22,926 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
    8,764 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
        .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
  150,311 ( 0.00%)          f(InferCtxt {
        .                       tcx,
        .                       defining_use_anchor,
        .                       in_progress_typeck_results,
    3,407 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
        .                       lexical_region_resolutions: RefCell::new(None),
        .                       selection_cache: Default::default(),
        .                       evaluation_cache: Default::default(),
        .                       reported_trait_errors: Default::default(),
        .                       reported_closure_mismatch: Default::default(),
        .                       tainted_by_errors_flag: Cell::new(false),
    3,407 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
        .                       in_snapshot: Cell::new(false),
        .                       skip_leak_check: Cell::new(false),
        .                       universe: Cell::new(ty::UniverseIndex::ROOT),
        .                   })
   23,711 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx, T> InferOk<'tcx, T> {
        .               pub fn unit(self) -> InferOk<'tcx, ()> {
        .                   InferOk { value: (), obligations: self.obligations }
        .               }
        .           
        .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
        .               pub fn into_value_registering_obligations(
        .                   self,
        .                   infcx: &InferCtxt<'_, 'tcx>,
        .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
        .               ) -> T {
       35 ( 0.00%)          let InferOk { value, obligations } = self;
      144 ( 0.00%)          for obligation in obligations {
        .                       fulfill_cx.register_predicate_obligation(infcx, obligation);
        .                   }
        .                   value
        .               }
        .           }
        .           
        .           impl<'tcx> InferOk<'tcx, ()> {
    3,294 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
   13,176 ( 0.00%)          self.obligations
    3,294 ( 0.00%)      }
        .           }
        .           
        .           #[must_use = "once you start a snapshot, you should always consume it"]
        .           pub struct CombinedSnapshot<'a, 'tcx> {
        .               undo_snapshot: Snapshot<'tcx>,
        .               region_constraints_snapshot: RegionSnapshot,
        .               universe: ty::UniverseIndex,
        .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
        .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
        .                   debug!("canonical consts: {:?}", &canonical.value);
        .           
        .                   self.tcx.try_unify_abstract_consts(canonical.value)
        .               }
        .           
        .               pub fn is_in_snapshot(&self) -> bool {
        .                   self.in_snapshot.get()
   21,312 ( 0.00%)      }
        .           
  142,184 ( 0.00%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
  159,957 ( 0.00%)          t.fold_with(&mut self.freshener())
  159,957 ( 0.00%)      }
        .           
        .               /// Returns the origin of the type variable identified by `vid`, or `None`
        .               /// if this is not a type variable.
        .               ///
        .               /// No attempt is made to resolve `ty`.
       28 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
       56 ( 0.00%)          match *ty.kind() {
       14 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
       56 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
        .                       }
        .                       _ => None,
        .                   }
       56 ( 0.00%)      }
        .           
   17,773 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
        .                   freshen::TypeFreshener::new(self, false)
   17,773 ( 0.00%)      }
        .           
        .               /// Like `freshener`, but does not replace `'static` regions.
   50,566 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
        .                   freshen::TypeFreshener::new(self, true)
   50,566 ( 0.00%)      }
        .           
      108 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
       54 ( 0.00%)          let mut inner = self.inner.borrow_mut();
       54 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
        .                       .type_variables()
        .                       .unsolved_variables()
        .                       .into_iter()
       26 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
        .                       .collect();
        .                   vars.extend(
        .                       (0..inner.int_unification_table().len())
        .                           .map(|i| ty::IntVid { index: i as u32 })
        4 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
        .                           .map(|v| self.tcx.mk_int_var(v)),
        .                   );
        .                   vars.extend(
        .                       (0..inner.float_unification_table().len())
        .                           .map(|i| ty::FloatVid { index: i as u32 })
        .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
        .                           .map(|v| self.tcx.mk_float_var(v)),
        .                   );
        .                   vars
      189 ( 0.00%)      }
        .           
   27,802 ( 0.00%)      fn combine_fields(
        .                   &'a self,
        .                   trace: TypeTrace<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .               ) -> CombineFields<'a, 'tcx> {
  111,216 ( 0.00%)          CombineFields {
        .                       infcx: self,
  278,040 ( 0.00%)              trace,
        .                       cause: None,
        .                       param_env,
        .                       obligations: PredicateObligations::new(),
        .                   }
   27,802 ( 0.00%)      }
        .           
        .               /// Clear the "currently in a snapshot" flag, invoke the closure,
        .               /// then restore the flag to its original value. This flag is a
        .               /// debugging measure designed to detect cases where we start a
        .               /// snapshot, create type variables, and register obligations
        .               /// which may involve those type variables in the fulfillment cx,
        .               /// potentially leaving "dangling type variables" behind.
        .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 755 ----------------------------------------
        .               /// better than grovelling through megabytes of `RUSTC_LOG` output.
        .               ///
        .               /// HOWEVER, in some cases the flag is unhelpful. In particular, we
        .               /// sometimes create a "mini-fulfilment-cx" in which we enroll
        .               /// obligations. As long as this fulfillment cx is fully drained
        .               /// before we return, this is not a problem, as there won't be any
        .               /// escaping obligations in the main cx. In those cases, you can
        .               /// use this function.
       16 ( 0.00%)      pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
        .               where
        .                   F: FnOnce(&Self) -> R,
        .               {
        .                   let flag = self.in_snapshot.replace(false);
    3,816 ( 0.00%)          let result = func(self);
        .                   self.in_snapshot.set(flag);
        .                   result
       18 ( 0.00%)      }
        .           
  137,890 ( 0.00%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
        .                   debug!("start_snapshot()");
        .           
        .                   let in_snapshot = self.in_snapshot.replace(true);
        .           
        .                   let mut inner = self.inner.borrow_mut();
        .           
  413,670 ( 0.01%)          CombinedSnapshot {
        .                       undo_snapshot: inner.undo_log.start_snapshot(),
        .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
        .                       universe: self.universe(),
        .                       was_in_snapshot: in_snapshot,
        .                       // Borrow typeck results "in progress" (i.e., during typeck)
        .                       // to ban writes from within a snapshot to them.
   68,945 ( 0.00%)              _in_progress_typeck_results: self
        .                           .in_progress_typeck_results
        .                           .map(|typeck_results| typeck_results.borrow()),
        .                   }
  275,780 ( 0.00%)      }
        .           
  134,464 ( 0.00%)      #[instrument(skip(self, snapshot), level = "debug")]
        .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
        .                   let CombinedSnapshot {
   12,224 ( 0.00%)              undo_snapshot,
   12,224 ( 0.00%)              region_constraints_snapshot,
   12,224 ( 0.00%)              universe,
   12,224 ( 0.00%)              was_in_snapshot,
   24,448 ( 0.00%)              _in_progress_typeck_results,
        .                   } = snapshot;
        .           
        .                   self.in_snapshot.set(was_in_snapshot);
        .                   self.universe.set(universe);
        .           
        .                   let mut inner = self.inner.borrow_mut();
   12,224 ( 0.00%)          inner.rollback_to(undo_snapshot);
        .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
        .               }
        .           
  850,815 ( 0.01%)      #[instrument(skip(self, snapshot), level = "debug")]
        .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
        .                   let CombinedSnapshot {
   56,721 ( 0.00%)              undo_snapshot,
        .                       region_constraints_snapshot: _,
        .                       universe: _,
   56,721 ( 0.00%)              was_in_snapshot,
  113,442 ( 0.00%)              _in_progress_typeck_results,
        .                   } = snapshot;
        .           
        .                   self.in_snapshot.set(was_in_snapshot);
        .           
        .                   self.inner.borrow_mut().commit(undo_snapshot);
        .               }
        .           
        .               /// Executes `f` and commit the bindings.
   48,331 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
   59,202 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
    5,382 ( 0.00%)          let snapshot = self.start_snapshot();
   16,723 ( 0.00%)          let r = f(&snapshot);
   37,674 ( 0.00%)          self.commit_from(snapshot);
   32,153 ( 0.00%)          r
        .               }
        .           
        .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
  297,571 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
  368,361 ( 0.01%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
        .               {
   65,519 ( 0.00%)          let snapshot = self.start_snapshot();
  170,159 ( 0.00%)          let r = f(&snapshot);
        .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
   81,614 ( 0.00%)          match r {
        .                       Ok(_) => {
  360,755 ( 0.01%)                  self.commit_from(snapshot);
        .                       }
        .                       Err(_) => {
   71,211 ( 0.00%)                  self.rollback_to("commit_if_ok -- error", snapshot);
        .                       }
        .                   }
  407,730 ( 0.01%)          r
        .               }
        .           
        .               /// Execute `f` then unroll any bindings it creates.
   36,289 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
   42,455 ( 0.00%)      pub fn probe<R, F>(&self, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
    8,985 ( 0.00%)          let snapshot = self.start_snapshot();
   17,130 ( 0.00%)          let r = f(&snapshot);
   45,948 ( 0.00%)          self.rollback_to("probe", snapshot);
   14,578 ( 0.00%)          r
        .               }
        .           
        .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
        .               #[instrument(skip(self, f), level = "debug")]
        .               pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
-- line 875 ----------------------------------------
-- line 884 ----------------------------------------
        .                   r
        .               }
        .           
        .               /// Scan the constraints produced since `snapshot` began and returns:
        .               ///
        .               /// - `None` -- if none of them involve "region outlives" constraints
        .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
        .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
    2,100 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
        .                   &self,
        .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
        .               ) -> Option<bool> {
    4,200 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .unwrap_region_constraints()
        .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
    3,150 ( 0.00%)      }
        .           
        .               pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
        .                   self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
        .               }
        .           
      120 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
        .               where
        .                   T: at::ToTrace<'tcx>,
        .               {
        .                   let origin = &ObligationCause::dummy();
        .                   self.probe(|_| {
        .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
        .                           // Ignore obligations, since we are unrolling
        .                           // everything anyway.
        .                       })
        .                   })
       90 ( 0.00%)      }
        .           
       48 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
        .               where
        .                   T: at::ToTrace<'tcx>,
        .               {
        .                   let origin = &ObligationCause::dummy();
        .                   self.probe(|_| {
        .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
        .                           // Ignore obligations, since we are unrolling
        .                           // everything anyway.
        .                       })
        .                   })
       36 ( 0.00%)      }
        .           
   49,920 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               pub fn sub_regions(
        .                   &self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   a: ty::Region<'tcx>,
        .                   b: ty::Region<'tcx>,
        .               ) {
   44,928 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
        .               }
        .           
        .               /// Require that the region `r` be equal to one of the regions in
        .               /// the set `regions`.
        .               #[instrument(skip(self), level = "debug")]
        .               pub fn member_constraint(
        .                   &self,
        .                   opaque_type_def_id: DefId,
-- line 947 ----------------------------------------
-- line 983 ----------------------------------------
        .                   let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
        .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
        .                       a: p.a,
        .                       b: p.b,
        .                   });
        .                   self.subtype_predicate(cause, param_env, subtype_predicate)
        .               }
        .           
       72 ( 0.00%)      pub fn subtype_predicate(
        .                   &self,
        .                   cause: &ObligationCause<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   predicate: ty::PolySubtypePredicate<'tcx>,
        .               ) -> Option<InferResult<'tcx, ()>> {
        .                   // Check for two unresolved inference variables, in which case we can
        .                   // make no progress. This is partly a micro-optimization, but it's
        .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
        .                   // earlier that they are sub-unified).
        .                   //
        .                   // Note that we can just skip the binders here because
        .                   // type variables can't (at present, at
        .                   // least) capture any of the things bound by this binder.
        .                   //
        .                   // Note that this sub here is not just for diagnostics - it has semantic
        .                   // effects as well.
        6 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
        6 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
       36 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
        8 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
        .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
        8 ( 0.00%)                  return None;
        .                       }
        .                       _ => {}
        .                   }
        .           
        .                   Some(self.commit_if_ok(|_snapshot| {
        2 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
        .                           self.replace_bound_vars_with_placeholders(predicate);
        .           
        4 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
        .           
        .                       Ok(ok.unit())
        .                   }))
       54 ( 0.00%)      }
        .           
      648 ( 0.00%)      pub fn region_outlives_predicate(
        .                   &self,
        .                   cause: &traits::ObligationCause<'tcx>,
        .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
        .               ) -> UnitResult<'tcx> {
        .                   self.commit_if_ok(|_snapshot| {
        .                       let ty::OutlivesPredicate(r_a, r_b) =
        .                           self.replace_bound_vars_with_placeholders(predicate);
        .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
        .                           RelateRegionParamBound(cause.span)
        .                       });
      540 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
        .                       Ok(())
        .                   })
      432 ( 0.00%)      }
        .           
        .               /// Number of type variables created so far.
       10 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
        .                   self.inner.borrow_mut().type_variables().num_vars()
       20 ( 0.00%)      }
        .           
   15,118 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
   75,590 ( 0.00%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
   22,677 ( 0.00%)      }
        .           
   15,090 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
   52,899 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
   22,635 ( 0.00%)      }
        .           
       98 ( 0.00%)      pub fn next_ty_var_in_universe(
        .                   &self,
        .                   origin: TypeVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> Ty<'tcx> {
      539 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
       49 ( 0.00%)          self.tcx.mk_ty_var(vid)
      147 ( 0.00%)      }
        .           
        .               pub fn next_const_var(
        .                   &self,
        .                   ty: Ty<'tcx>,
        .                   origin: ConstVariableOrigin,
        .               ) -> &'tcx ty::Const<'tcx> {
        .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
        .               }
-- line 1074 ----------------------------------------
-- line 1090 ----------------------------------------
        .               pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
        .                   self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
        .                       origin,
        .                       val: ConstVariableValue::Unknown { universe: self.universe() },
        .                   })
        .               }
        .           
        .               fn next_int_var_id(&self) -> IntVid {
        5 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
        .               }
        .           
        3 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
        .                   self.tcx.mk_int_var(self.next_int_var_id())
        4 ( 0.00%)      }
        .           
        .               fn next_float_var_id(&self) -> FloatVid {
        .                   self.inner.borrow_mut().float_unification_table().new_key(None)
        .               }
        .           
        .               pub fn next_float_var(&self) -> Ty<'tcx> {
        .                   self.tcx.mk_float_var(self.next_float_var_id())
        .               }
        .           
        .               /// Creates a fresh region variable with the next available index.
        .               /// The variable will be created in the maximum universe created
        .               /// thus far, allowing it to name any region created thus far.
   21,757 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
  302,329 ( 0.00%)          self.next_region_var_in_universe(origin, self.universe())
   43,514 ( 0.00%)      }
        .           
        .               /// Creates a fresh region variable with the next available index
        .               /// in the given universe; typically, you can use
        .               /// `next_region_var` and just use the maximal universe.
  106,196 ( 0.00%)      pub fn next_region_var_in_universe(
        .                   &self,
        .                   origin: RegionVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> ty::Region<'tcx> {
        .                   let region_var =
  690,274 ( 0.01%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
  265,490 ( 0.00%)          self.tcx.mk_region(ty::ReVar(region_var))
  159,294 ( 0.00%)      }
        .           
        .               /// Return the universe that the region `r` was created in.  For
        .               /// most regions (e.g., `'static`, named regions from the user,
        .               /// etc) this is the root universe U0. For inference variables or
        .               /// placeholders, however, it will return the universe which which
        .               /// they are associated.
      638 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
        .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
      957 ( 0.00%)      }
        .           
        .               /// Number of region variables created so far.
      156 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
        .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
      234 ( 0.00%)      }
        .           
        .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
   19,250 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
        .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
   38,500 ( 0.00%)      }
        .           
        .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
       86 ( 0.00%)      pub fn next_nll_region_var_in_universe(
        .                   &self,
        .                   origin: NllRegionVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> ty::Region<'tcx> {
      662 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
      172 ( 0.00%)      }
        .           
  141,056 ( 0.00%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
   74,722 ( 0.00%)          match param.kind {
        .                       GenericParamDefKind::Lifetime => {
        .                           // Create a region inference variable for the given
        .                           // region parameter definition.
    6,719 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
        .                       }
        .                       GenericParamDefKind::Type { .. } => {
        .                           // Create a type inference variable for the given
        .                           // type parameter definition. The substitutions are
        .                           // for actual parameters that may be referred to by
        .                           // the default of this type parameter, if it exists.
        .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
        .                           // used in a path such as `Foo::<T, U>::new()` will
        .                           // use an inference variable for `C` with `[T, U]`
        .                           // as the substitutions for the default, `(T, U)`.
   43,636 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
        .                               self.universe(),
   54,545 ( 0.00%)                      TypeVariableOrigin {
        .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
   10,909 ( 0.00%)                              param.name,
   10,909 ( 0.00%)                              Some(param.def_id),
        .                                   ),
        .                                   span,
        .                               },
        .                           );
        .           
   10,909 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
        .                       }
        .                       GenericParamDefKind::Const { .. } => {
        .                           let origin = ConstVariableOrigin {
        .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
        .                                   param.name,
        .                                   param.def_id,
        .                               ),
        .                               span,
        .                           };
        .                           let const_var_id =
       44 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
        .                                   origin,
        .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
        .                               });
        4 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
        .                       }
        .                   }
       32 ( 0.00%)      }
        .           
        .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
        .               /// type/region parameter to a fresh inference variable.
   17,310 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
  120,765 ( 0.00%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
   11,540 ( 0.00%)      }
        .           
        .               /// Returns `true` if errors have been reported since this infcx was
        .               /// created. This is sometimes used as a heuristic to skip
        .               /// reporting errors that often occur as a result of earlier
        .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
        .               /// inference variables, regionck errors).
       62 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
        .                   debug!(
        .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
        .                        tainted_by_errors_flag={})",
        .                       self.tcx.sess.err_count(),
        .                       self.err_count_on_creation,
        .                       self.tainted_by_errors_flag.get()
        .                   );
        .           
    9,661 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
        .                       return true; // errors reported since this infcx was made
        .                   }
        .                   self.tainted_by_errors_flag.get()
       93 ( 0.00%)      }
        .           
        .               /// Set the "tainted by errors" flag to true. We call this when we
        .               /// observe an error from a prior pass.
        .               pub fn set_tainted_by_errors(&self) {
        .                   debug!("set_tainted_by_errors()");
        .                   self.tainted_by_errors_flag.set(true)
        .               }
        .           
        .               /// Process the region constraints and return any any errors that
        .               /// result. After this, no more unification operations should be
        .               /// done -- or the compiler will panic -- but it is legal to use
        .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   11,018 ( 0.00%)      pub fn resolve_regions(
        .                   &self,
        .                   region_context: DefId,
        .                   outlives_env: &OutlivesEnvironment<'tcx>,
        .                   mode: RegionckMode,
        .               ) -> Vec<RegionResolutionError<'tcx>> {
   29,906 ( 0.00%)          let (var_infos, data) = {
        .                       let mut inner = self.inner.borrow_mut();
        .                       let inner = &mut *inner;
    1,574 ( 0.00%)              assert!(
    4,722 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
        .                           "region_obligations not empty: {:#?}",
        .                           inner.region_obligations
        .                       );
        .                       inner
        .                           .region_constraint_storage
        .                           .take()
        .                           .expect("regions already resolved")
        .                           .with_log(&mut inner.undo_log)
        .                           .into_infos_and_data()
    1,574 ( 0.00%)          };
        .           
        .                   let region_rels =
    1,574 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
        .           
   14,166 ( 0.00%)          let (lexical_region_resolutions, errors) =
   37,776 ( 0.00%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
        .           
    6,296 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
    1,574 ( 0.00%)          assert!(old_value.is_none());
        .           
        .                   errors
   14,166 ( 0.00%)      }
        .           
        .               /// Process the region constraints and report any errors that
        .               /// result. After this, no more unification operations should be
        .               /// done -- or the compiler will panic -- but it is legal to use
        .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   15,740 ( 0.00%)      pub fn resolve_regions_and_report_errors(
        .                   &self,
        .                   region_context: DefId,
        .                   outlives_env: &OutlivesEnvironment<'tcx>,
        .                   mode: RegionckMode,
        .               ) {
    3,148 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
        .           
    4,722 ( 0.00%)          if !self.is_tainted_by_errors() {
        .                       // As a heuristic, just skip reporting region errors
        .                       // altogether if other errors have been reported while
        .                       // this infcx was in use.  This is totally hokey but
        .                       // otherwise we have a hard time separating legit region
        .                       // errors from silly ones.
    3,148 ( 0.00%)              self.report_region_errors(&errors);
        .                   }
    7,870 ( 0.00%)      }
        .           
        .               /// Obtains (and clears) the current set of region
        .               /// constraints. The inference context is still usable: further
        .               /// unifications will simply add new constraints.
        .               ///
        .               /// This method is not meant to be used with normal lexical region
        .               /// resolution. Rather, it is used in the NLL mode as a kind of
        .               /// interim hack: basically we run normal type-check and generate
-- line 1307 ----------------------------------------
-- line 1319 ----------------------------------------
        .               }
        .           
        .               /// Gives temporary access to the region constraint data.
        .               pub fn with_region_constraints<R>(
        .                   &self,
        .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
        .               ) -> R {
        .                   let mut inner = self.inner.borrow_mut();
    1,012 ( 0.00%)          op(inner.unwrap_region_constraints().data())
        .               }
        .           
        .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
        .                   let mut inner = self.inner.borrow_mut();
        .                   let inner = &mut *inner;
        .                   inner
        .                       .region_constraint_storage
        .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
        .                       .var_origin(vid)
        .               }
        .           
        .               /// Takes ownership of the list of variable regions. This implies
        .               /// that all the region constraints have already been taken, and
        .               /// hence that `resolve_regions_and_report_errors` can never be
        .               /// called. This is used only during NLL processing to "hand off" ownership
        .               /// of the set of region variables into the NLL region context.
       95 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
        .                   let mut inner = self.inner.borrow_mut();
      361 ( 0.00%)          let (var_infos, data) = inner
        .                       .region_constraint_storage
        .                       .take()
        .                       .expect("regions already resolved")
        .                       .with_log(&mut inner.undo_log)
       19 ( 0.00%)              .into_infos_and_data();
       19 ( 0.00%)          assert!(data.is_empty());
        .                   var_infos
      152 ( 0.00%)      }
        .           
        .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
        .                   self.resolve_vars_if_possible(t).to_string()
        .               }
        .           
        .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
        .               /// universe index of `TyVar(vid)`.
    1,074 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
        .                   use self::type_variable::TypeVariableValue;
        .           
    3,222 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
        .                       TypeVariableValue::Known { value } => Ok(value),
        .                       TypeVariableValue::Unknown { universe } => Err(universe),
        .                   }
    3,759 ( 0.00%)      }
        .           
        .               /// Resolve any type variables found in `value` -- but only one
        .               /// level.  So, if the variable `?X` is bound to some type
        .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
        .               /// itself be bound to a type).
        .               ///
        .               /// Useful when you only need to inspect the outermost level of
        .               /// the type and don't care about nested types (or perhaps you
        .               /// will be resolving them as well, e.g. in a loop).
        .               pub fn shallow_resolve<T>(&self, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  182,120 ( 0.00%)          value.fold_with(&mut ShallowResolver { infcx: self })
        .               }
        .           
    2,408 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
        .                   self.inner.borrow_mut().type_variables().root_var(var)
    3,612 ( 0.00%)      }
        .           
        .               /// Where possible, replaces type/const variables in
        .               /// `value` with their final value. Note that region variables
        .               /// are unaffected. If a type/const variable has not been unified, it
        .               /// is left as is. This is an idempotent operation that does
        .               /// not affect inference state in any way and so you can do it
        .               /// at will.
       48 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  144,648 ( 0.00%)          if !value.needs_infer() {
  126,727 ( 0.00%)              return value; // Avoid duplicated subst-folding.
        .                   }
  135,902 ( 0.00%)          let mut r = resolve::OpportunisticVarResolver::new(self);
  141,701 ( 0.00%)          value.fold_with(&mut r)
       60 ( 0.00%)      }
        .           
        .               /// Returns the first unresolved variable contained in `T`. In the
        .               /// process of visiting `T`, this will resolve (where possible)
        .               /// type variables in `T`, but it never constructs the final,
        .               /// resolved type, so it's more efficient than
        .               /// `resolve_vars_if_possible()`.
        .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
        .               where
-- line 1415 ----------------------------------------
-- line 1490 ----------------------------------------
        .                   expected: &'tcx ty::Const<'tcx>,
        .                   actual: &'tcx ty::Const<'tcx>,
        .                   err: TypeError<'tcx>,
        .               ) -> DiagnosticBuilder<'tcx> {
        .                   let trace = TypeTrace::consts(cause, true, expected, actual);
        .                   self.report_and_explain_type_error(trace, &err)
        .               }
        .           
   32,193 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
        .                   &self,
        .                   span: Span,
        .                   lbrct: LateBoundRegionConversionTime,
        .                   value: ty::Binder<'tcx, T>,
        .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   let fld_r =
  235,042 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
        .                   let fld_t = |_| {
        .                       self.next_ty_var(TypeVariableOrigin {
        .                           kind: TypeVariableOriginKind::MiscVariable,
        .                           span,
        .                       })
        .                   };
        .                   let fld_c = |_, ty| {
        .                       self.next_const_var(
        .                           ty,
        .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
        .                       )
        .                   };
  150,626 ( 0.00%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
   21,462 ( 0.00%)      }
        .           
        .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
        .               pub fn verify_generic_bound(
        .                   &self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   kind: GenericKind<'tcx>,
        .                   a: ty::Region<'tcx>,
        .                   bound: VerifyBound<'tcx>,
-- line 1530 ----------------------------------------
-- line 1535 ----------------------------------------
        .                       .borrow_mut()
        .                       .unwrap_region_constraints()
        .                       .verify_generic_bound(origin, kind, a, bound);
        .               }
        .           
        .               /// Obtains the latest type of the given closure; this may be a
        .               /// closure in the current function, in which case its
        .               /// `ClosureKind` may not yet be known.
      306 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
      612 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
        .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
      459 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
        .               }
        .           
        .               /// Clears the selection, evaluation, and projection caches. This is useful when
        .               /// repeatedly attempting to select an `Obligation` while changing only
        .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
        .               pub fn clear_caches(&self) {
        .                   self.selection_cache.clear();
        .                   self.evaluation_cache.clear();
        .                   self.inner.borrow_mut().projection_cache().clear();
        .               }
        .           
        .               pub fn universe(&self) -> ty::UniverseIndex {
  299,780 ( 0.00%)          self.universe.get()
  115,603 ( 0.00%)      }
        .           
        .               /// Creates and return a fresh universe that extends all previous
        .               /// universes. Updates `self.universe` to that new universe.
       88 ( 0.00%)      pub fn create_next_universe(&self) -> ty::UniverseIndex {
      150 ( 0.00%)          let u = self.universe.get().next_universe();
        .                   self.universe.set(u);
        .                   u
       88 ( 0.00%)      }
        .           
        .               /// Resolves and evaluates a constant.
        .               ///
        .               /// The constant can be located on a trait like `<A as B>::C`, in which case the given
        .               /// substitutions and environment are used to resolve the constant. Alternatively if the
        .               /// constant has generic parameters in scope the substitutions are used to evaluate the value of
        .               /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count
        .               /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still
-- line 1576 ----------------------------------------
-- line 1606 ----------------------------------------
        .                   // variables, thus we don't need to substitute back the original values.
        .                   self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
        .               }
        .           
        .               /// If `typ` is a type variable of some kind, resolve it one level
        .               /// (but do not resolve types found in the result). If `typ` is
        .               /// not a type variable, just return it unmodified.
        .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
1,206,200 ( 0.02%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
  505,224 ( 0.01%)          match *typ.kind() {
        .                       ty::Infer(ty::TyVar(v)) => {
        .                           // Not entirely obvious: if `typ` is a type variable,
        .                           // it can be resolved to an int/float variable, which
        .                           // can then be recursively resolved, hence the
        .                           // recursion. Note though that we prevent type
        .                           // variables from unifying to other type variables
        .                           // directly (though they may be embedded
        .                           // structurally), and we prevent cycles in any case,
        .                           // so this recursion should always be of very limited
        .                           // depth.
        .                           //
        .                           // Note: if these two lines are combined into one we get
        .                           // dynamic borrow errors on `self.inner`.
  190,900 ( 0.00%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
        .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
        .                       }
        .           
       32 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
        .                           .inner
        .                           .borrow_mut()
        .                           .int_unification_table()
        .                           .probe_value(v)
        9 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
        .                           .unwrap_or(typ),
        .           
        .                       ty::Infer(ty::FloatVar(v)) => self
        .                           .inner
        .                           .borrow_mut()
        .                           .float_unification_table()
        .                           .probe_value(v)
        .                           .map(|v| v.to_type(self.tcx))
        .                           .unwrap_or(typ),
        .           
        .                       _ => typ,
        .                   }
1,356,975 ( 0.02%)      }
        .           
        .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
        .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
        .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
        .               ///
        .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
        .               /// inlined, despite being large, because it has only two call sites that
        .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
        .               #[inline(always)]
        .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
        .                   match infer_var {
        .                       TyOrConstInferVar::Ty(v) => {
        .                           use self::type_variable::TypeVariableValue;
        .           
        .                           // If `inlined_probe` returns a `Known` value, it never equals
        .                           // `ty::Infer(ty::TyVar(v))`.
3,989,270 ( 0.06%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
        .                               TypeVariableValue::Unknown { .. } => false,
        .                               TypeVariableValue::Known { .. } => true,
        .                           }
        .                       }
        .           
        .                       TyOrConstInferVar::TyInt(v) => {
        .                           // If `inlined_probe_value` returns a value it's always a
        .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
-- line 1678 ----------------------------------------
-- line 1716 ----------------------------------------
        .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
        .               Const(ConstVid<'tcx>),
        .           }
        .           
        .           impl<'tcx> TyOrConstInferVar<'tcx> {
        .               /// Tries to extract an inference variable from a type or a constant, returns `None`
        .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
        .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
    1,375 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
        .                   match arg.unpack() {
        .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
        .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
        .                       GenericArgKind::Lifetime(_) => None,
        .                   }
    1,375 ( 0.00%)      }
        .           
        .               /// Tries to extract an inference variable from a type, returns `None`
        .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
        8 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
   12,447 ( 0.00%)          match *ty.kind() {
    2,766 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
        .                       ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
        .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
        .                       _ => None,
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Tries to extract an inference variable from a constant, returns `None`
        .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
        .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
        .                   match ct.val {
        .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
        .                       _ => None,
        .                   }
-- line 1749 ----------------------------------------
-- line 1755 ----------------------------------------
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
        .                   self.infcx.tcx
        .               }
        .           
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
  249,527 ( 0.00%)          self.infcx.shallow_resolve_ty(ty)
        .               }
        .           
      292 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
      154 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
       20 ( 0.00%)              self.infcx
        .                           .inner
        .                           .borrow_mut()
        .                           .const_unification_table()
       12 ( 0.00%)                  .probe_value(*vid)
        .                           .val
        .                           .known()
        .                           .unwrap_or(ct)
        .                   } else {
        .                       ct
        .                   }
      365 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeTrace<'tcx> {
        .               pub fn span(&self) -> Span {
        6 ( 0.00%)          self.cause.span
        .               }
        .           
        .               pub fn types(
        .                   cause: &ObligationCause<'tcx>,
        .                   a_is_expected: bool,
        .                   a: Ty<'tcx>,
        .                   b: Ty<'tcx>,
        .               ) -> TypeTrace<'tcx> {
-- line 1792 ----------------------------------------
-- line 1800 ----------------------------------------
        .                   b: &'tcx ty::Const<'tcx>,
        .               ) -> TypeTrace<'tcx> {
        .                   TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }
        .               }
        .           }
        .           
        .           impl<'tcx> SubregionOrigin<'tcx> {
        .               pub fn span(&self) -> Span {
       15 ( 0.00%)          match *self {
        3 ( 0.00%)              Subtype(ref a) => a.span(),
        .                       RelateObjectBound(a) => a,
        .                       RelateParamBound(a, ..) => a,
        .                       RelateRegionParamBound(a) => a,
        .                       Reborrow(a) => a,
        .                       ReborrowUpvar(a, _) => a,
        .                       DataBorrowed(_, a) => a,
        .                       ReferenceOutlivesReferent(_, a) => a,
        .                       CompareImplMethodObligation { span, .. } => span,
-- line 1817 ----------------------------------------
-- line 1818 ----------------------------------------
        .                       CompareImplTypeObligation { span, .. } => span,
        .                   }
        .               }
        .           
        .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
        .               where
        .                   F: FnOnce() -> Self,
        .               {
   14,901 ( 0.00%)          match *cause.code() {
    4,778 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
   23,890 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
        .                       }
        .           
        .                       traits::ObligationCauseCode::CompareImplMethodObligation {
        .                           impl_item_def_id,
        .                           trait_item_def_id,
        .                       } => SubregionOrigin::CompareImplMethodObligation {
        .                           span: cause.span,
        .                           impl_item_def_id,
-- line 1836 ----------------------------------------

2,977,123 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs
--------------------------------------------------------------------------------
Ir                  

-- line 293 ----------------------------------------
         .           
         .           #[allow(deprecated)]
         .           impl From<LayoutErr> for CollectionAllocErr {
         .               fn from(_: LayoutErr) -> Self {
         .                   CollectionAllocErr::CapacityOverflow
         .               }
         .           }
         .           
     2,957 ( 0.00%)  fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
 1,083,287 ( 0.02%)      match result {
         .                   Ok(x) => x,
         .                   Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
         .                   Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
         .               }
     5,914 ( 0.00%)  }
         .           
         .           /// FIXME: use `Layout::array` when we require a Rust version where it’s stable
         .           /// https://github.com/rust-lang/rust/issues/55724
         .           fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {
         .               let size = mem::size_of::<T>()
         .                   .checked_mul(n)
         .                   .ok_or(CollectionAllocErr::CapacityOverflow)?;
         .               let align = mem::align_of::<T>();
-- line 315 ----------------------------------------
-- line 422 ----------------------------------------
         .           #[cfg(feature = "union")]
         .           impl<A: Array> SmallVecData<A> {
         .               #[inline]
         .               unsafe fn inline(&self) -> *const A::Item {
         .                   self.inline.as_ptr() as *const A::Item
         .               }
         .               #[inline]
         .               unsafe fn inline_mut(&mut self) -> *mut A::Item {
    86,488 ( 0.00%)          self.inline.as_mut_ptr() as *mut A::Item
         .               }
         .               #[inline]
         .               fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
         .                   SmallVecData {
         .                       inline: core::mem::ManuallyDrop::new(inline),
         .                   }
         .               }
         .               #[inline]
         .               unsafe fn into_inline(self) -> MaybeUninit<A> {
         .                   core::mem::ManuallyDrop::into_inner(self.inline)
         .               }
         .               #[inline]
         .               unsafe fn heap(&self) -> (*mut A::Item, usize) {
   250,001 ( 0.00%)          self.heap
         .               }
         .               #[inline]
         .               unsafe fn heap_mut(&mut self) -> &mut (*mut A::Item, usize) {
         .                   &mut self.heap
         .               }
         .               #[inline]
         .               fn from_heap(ptr: *mut A::Item, len: usize) -> SmallVecData<A> {
         .                   SmallVecData { heap: (ptr, len) }
-- line 452 ----------------------------------------
-- line 557 ----------------------------------------
         .               #[inline]
         .               pub fn new() -> SmallVec<A> {
         .                   // Try to detect invalid custom implementations of `Array`. Hopefully,
         .                   // this check should be optimized away entirely for valid ones.
         .                   assert!(
         .                       mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
         .                           && mem::align_of::<A>() >= mem::align_of::<A::Item>()
         .                   );
 1,968,632 ( 0.03%)          SmallVec {
         .                       capacity: 0,
         .                       data: SmallVecData::from_inline(MaybeUninit::uninit()),
         .                   }
         .               }
         .           
         .               /// Construct an empty vector with enough capacity pre-allocated to store at least `n`
         .               /// elements.
         .               ///
-- line 573 ----------------------------------------
-- line 597 ----------------------------------------
         .               ///
         .               /// let vec = vec![1, 2, 3, 4, 5];
         .               /// let small_vec: SmallVec<[_; 3]> = SmallVec::from_vec(vec);
         .               ///
         .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
         .               /// ```
         .               #[inline]
         .               pub fn from_vec(mut vec: Vec<A::Item>) -> SmallVec<A> {
       734 ( 0.00%)          if vec.capacity() <= Self::inline_capacity() {
         .                       unsafe {
         .                           let mut data = SmallVecData::<A>::from_inline(MaybeUninit::uninit());
         .                           let len = vec.len();
         .                           vec.set_len(0);
         .                           ptr::copy_nonoverlapping(vec.as_ptr(), data.inline_mut(), len);
         .           
         .                           SmallVec {
         .                               capacity: len,
         .                               data,
         .                           }
         .                       }
         .                   } else {
         .                       let (ptr, cap, len) = (vec.as_mut_ptr(), vec.capacity(), vec.len());
         .                       mem::forget(vec);
         .           
     1,182 ( 0.00%)              SmallVec {
         .                           capacity: cap,
         .                           data: SmallVecData::from_heap(ptr, len),
         .                       }
         .                   }
         .               }
         .           
         .               /// Constructs a new `SmallVec` on the stack from an `A` without
         .               /// copying elements.
-- line 629 ----------------------------------------
-- line 635 ----------------------------------------
         .               /// let small_vec: SmallVec<_> = SmallVec::from_buf(buf);
         .               ///
         .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
         .               /// ```
         .               #[inline]
         .               pub fn from_buf(buf: A) -> SmallVec<A> {
         .                   SmallVec {
         .                       capacity: A::size(),
     4,578 ( 0.00%)              data: SmallVecData::from_inline(MaybeUninit::new(buf)),
         .                   }
         .               }
         .           
         .               /// Constructs a new `SmallVec` on the stack from an `A` without
         .               /// copying elements. Also sets the length, which must be less or
         .               /// equal to the size of `buf`.
         .               ///
         .               /// ```rust
-- line 651 ----------------------------------------
-- line 653 ----------------------------------------
         .               ///
         .               /// let buf = [1, 2, 3, 4, 5, 0, 0, 0];
         .               /// let small_vec: SmallVec<_> = SmallVec::from_buf_and_len(buf, 5);
         .               ///
         .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
         .               /// ```
         .               #[inline]
         .               pub fn from_buf_and_len(buf: A, len: usize) -> SmallVec<A> {
    17,290 ( 0.00%)          assert!(len <= A::size());
    51,870 ( 0.00%)          unsafe { SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), len) }
         .               }
         .           
         .               /// Constructs a new `SmallVec` on the stack from an `A` without
         .               /// copying elements. Also sets the length. The user is responsible
         .               /// for ensuring that `len <= A::size()`.
         .               ///
         .               /// ```rust
         .               /// use smallvec::SmallVec;
-- line 670 ----------------------------------------
-- line 674 ----------------------------------------
         .               /// let small_vec: SmallVec<_> = unsafe {
         .               ///     SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), 5)
         .               /// };
         .               ///
         .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
         .               /// ```
         .               #[inline]
         .               pub unsafe fn from_buf_and_len_unchecked(buf: MaybeUninit<A>, len: usize) -> SmallVec<A> {
     8,645 ( 0.00%)          SmallVec {
         .                       capacity: len,
         .                       data: SmallVecData::from_inline(buf),
         .                   }
         .               }
         .           
         .               /// Sets the length of a vector.
         .               ///
         .               /// This will explicitly set the size of the vector, without actually
         .               /// modifying its buffers, so it is up to the caller to ensure that the
         .               /// vector is actually the specified size.
         .               pub unsafe fn set_len(&mut self, new_len: usize) {
         .                   let (_, len_ptr, _) = self.triple_mut();
   147,151 ( 0.00%)          *len_ptr = new_len;
         .               }
         .           
         .               /// The maximum number of elements this vector can hold inline
         .               #[inline]
         .               fn inline_capacity() -> usize {
         .                   if mem::size_of::<A::Item>() > 0 {
         .                       A::size()
         .                   } else {
-- line 703 ----------------------------------------
-- line 725 ----------------------------------------
         .               #[inline]
         .               pub fn len(&self) -> usize {
         .                   self.triple().1
         .               }
         .           
         .               /// Returns `true` if the vector is empty
         .               #[inline]
         .               pub fn is_empty(&self) -> bool {
 1,247,302 ( 0.02%)          self.len() == 0
         .               }
         .           
         .               /// The number of items the vector can hold without reallocating
         .               #[inline]
         .               pub fn capacity(&self) -> usize {
         .                   self.triple().2
         .               }
         .           
         .               /// Returns a tuple with (data ptr, len, capacity)
         .               /// Useful to get all SmallVec properties with a single check of the current storage variant.
         .               #[inline]
         .               fn triple(&self) -> (*const A::Item, usize, usize) {
         .                   unsafe {
 7,590,564 ( 0.12%)              if self.spilled() {
         .                           let (ptr, len) = self.data.heap();
         .                           (ptr, len, self.capacity)
         .                       } else {
         .                           (self.data.inline(), self.capacity, Self::inline_capacity())
         .                       }
         .                   }
         .               }
         .           
         .               /// Returns a tuple with (data ptr, len ptr, capacity)
         .               #[inline]
         .               fn triple_mut(&mut self) -> (*mut A::Item, &mut usize, usize) {
         .                   unsafe {
29,902,016 ( 0.48%)              if self.spilled() {
    42,739 ( 0.00%)                  let &mut (ptr, ref mut len_ptr) = self.data.heap_mut();
         .                           (ptr, len_ptr, self.capacity)
         .                       } else {
         .                           (
         .                               self.data.inline_mut(),
         .                               &mut self.capacity,
         .                               Self::inline_capacity(),
         .                           )
         .                       }
         .                   }
         .               }
         .           
         .               /// Returns `true` if the data has spilled into a separate heap-allocated buffer.
         .               #[inline]
         .               pub fn spilled(&self) -> bool {
21,839,019 ( 0.35%)          self.capacity > Self::inline_capacity()
         .               }
         .           
         .               /// Creates a draining iterator that removes the specified range in the vector
         .               /// and yields the removed items.
         .               ///
         .               /// Note 1: The element range is removed even if the iterator is only
         .               /// partially consumed or not consumed at all.
         .               ///
-- line 784 ----------------------------------------
-- line 821 ----------------------------------------
         .                           iter: range_slice.iter(),
         .                           vec: NonNull::from(self),
         .                       }
         .                   }
         .               }
         .           
         .               /// Append an item to the vector.
         .               #[inline]
   110,400 ( 0.00%)      pub fn push(&mut self, value: A::Item) {
         .                   unsafe {
         .                       let (mut ptr, mut len, cap) = self.triple_mut();
 4,576,881 ( 0.07%)              if *len == cap {
     2,320 ( 0.00%)                  self.reserve(1);
    33,595 ( 0.00%)                  let &mut (heap_ptr, ref mut heap_len) = self.data.heap_mut();
         .                           ptr = heap_ptr;
         .                           len = heap_len;
         .                       }
    54,388 ( 0.00%)              ptr::write(ptr.add(*len), value);
 5,893,649 ( 0.09%)              *len += 1;
         .                   }
    88,320 ( 0.00%)      }
         .           
         .               /// Remove an item from the end of the vector and return it, or None if empty.
         .               #[inline]
         .               pub fn pop(&mut self) -> Option<A::Item> {
         .                   unsafe {
         .                       let (ptr, len_ptr, _) = self.triple_mut();
 2,781,428 ( 0.04%)              if *len_ptr == 0 {
     3,345 ( 0.00%)                  return None;
         .                       }
   760,046 ( 0.01%)              let last_index = *len_ptr - 1;
 1,041,137 ( 0.02%)              *len_ptr = last_index;
    58,022 ( 0.00%)              Some(ptr::read(ptr.add(last_index)))
         .                   }
     9,990 ( 0.00%)      }
         .           
         .               /// Moves all the elements of `other` into `self`, leaving `other` empty.
         .               ///
         .               /// # Example
         .               ///
         .               /// ```
         .               /// # use smallvec::{SmallVec, smallvec};
         .               /// let mut v0: SmallVec<[u8; 16]> = smallvec![1, 2, 3];
-- line 863 ----------------------------------------
-- line 879 ----------------------------------------
         .               /// or if the capacity computation overflows `usize`.
         .               pub fn grow(&mut self, new_cap: usize) {
         .                   infallible(self.try_grow(new_cap))
         .               }
         .           
         .               /// Re-allocate to set the capacity to `max(new_cap, inline_size())`.
         .               ///
         .               /// Panics if `new_cap` is less than the vector's length
       764 ( 0.00%)      pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
         .                   unsafe {
        12 ( 0.00%)              let (ptr, &mut len, cap) = self.triple_mut();
         .                       let unspilled = !self.spilled();
    68,016 ( 0.00%)              assert!(new_cap >= len);
    68,016 ( 0.00%)              if new_cap <= self.inline_size() {
         .                           if unspilled {
         .                               return Ok(());
         .                           }
         .                           self.data = SmallVecData::from_inline(MaybeUninit::uninit());
         .                           ptr::copy_nonoverlapping(ptr, self.data.inline_mut(), len);
         .                           self.capacity = len;
         .                           deallocate(ptr, cap);
    68,016 ( 0.00%)              } else if new_cap != cap {
    61,643 ( 0.00%)                  let layout = layout_array::<A::Item>(new_cap)?;
         .                           debug_assert!(layout.size() > 0);
         .                           let new_alloc;
    34,008 ( 0.00%)                  if unspilled {
         .                               new_alloc = NonNull::new(alloc::alloc::alloc(layout))
         .                                   .ok_or(CollectionAllocErr::AllocErr { layout })?
         .                                   .cast()
         .                                   .as_ptr();
         .                               ptr::copy_nonoverlapping(ptr, new_alloc, len);
         .                           } else {
         .                               // This should never fail since the same succeeded
         .                               // when previously allocating `ptr`.
    20,529 ( 0.00%)                      let old_layout = layout_array::<A::Item>(cap)?;
         .           
         .                               let new_ptr = alloc::alloc::realloc(ptr as *mut u8, old_layout, layout.size());
         .                               new_alloc = NonNull::new(new_ptr)
         .                                   .ok_or(CollectionAllocErr::AllocErr { layout })?
         .                                   .cast()
         .                                   .as_ptr();
         .                           }
    68,016 ( 0.00%)                  self.data = SmallVecData::from_heap(new_alloc, len);
    98,979 ( 0.00%)                  self.capacity = new_cap;
         .                       }
         .                       Ok(())
         .                   }
       776 ( 0.00%)      }
         .           
         .               /// Reserve capacity for `additional` more elements to be inserted.
         .               ///
         .               /// May reserve more space to avoid frequent reallocations.
         .               ///
         .               /// Panics if the capacity computation overflows `usize`.
         .               #[inline]
   173,713 ( 0.00%)      pub fn reserve(&mut self, additional: usize) {
 1,152,251 ( 0.02%)          infallible(self.try_reserve(additional))
   198,080 ( 0.00%)      }
         .           
         .               /// Reserve capacity for `additional` more elements to be inserted.
         .               ///
         .               /// May reserve more space to avoid frequent reallocations.
 4,481,346 ( 0.07%)      pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
         .                   // prefer triple_mut() even if triple() would work
         .                   // so that the optimizer removes duplicated calls to it
         .                   // from callers like insert()
     9,300 ( 0.00%)          let (_, &mut len, cap) = self.triple_mut();
 3,169,144 ( 0.05%)          if cap - len >= additional {
         .                       return Ok(());
         .                   }
         .                   let new_cap = len
         .                       .checked_add(additional)
         .                       .and_then(usize::checked_next_power_of_two)
         .                       .ok_or(CollectionAllocErr::CapacityOverflow)?;
       189 ( 0.00%)          self.try_grow(new_cap)
 4,874,449 ( 0.08%)      }
         .           
         .               /// Reserve the minimum capacity for `additional` more elements to be inserted.
         .               ///
         .               /// Panics if the new capacity overflows `usize`.
         .               pub fn reserve_exact(&mut self, additional: usize) {
         .                   infallible(self.try_reserve_exact(additional))
         .               }
         .           
         .               /// Reserve the minimum capacity for `additional` more elements to be inserted.
         .               pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
         .                   let (_, &mut len, cap) = self.triple_mut();
    50,547 ( 0.00%)          if cap - len >= additional {
         .                       return Ok(());
         .                   }
         .                   let new_cap = len
         .                       .checked_add(additional)
         .                       .ok_or(CollectionAllocErr::CapacityOverflow)?;
         3 ( 0.00%)          self.try_grow(new_cap)
         3 ( 0.00%)      }
         .           
         .               /// Shrink the capacity of the vector as much as possible.
         .               ///
         .               /// When possible, this will move data from an external heap buffer to the vector's inline
         .               /// storage.
         .               pub fn shrink_to_fit(&mut self) {
         .                   if !self.spilled() {
         .                       return;
-- line 981 ----------------------------------------
-- line 999 ----------------------------------------
         .               /// If `len` is greater than or equal to the vector's current length, this has no
         .               /// effect.
         .               ///
         .               /// This does not re-allocate.  If you want the vector's capacity to shrink, call
         .               /// `shrink_to_fit` after truncating.
         .               pub fn truncate(&mut self, len: usize) {
         .                   unsafe {
         .                       let (ptr, len_ptr, _) = self.triple_mut();
    73,396 ( 0.00%)              while len < *len_ptr {
         .                           let last_index = *len_ptr - 1;
         .                           *len_ptr = last_index;
         .                           ptr::drop_in_place(ptr.add(last_index));
         .                       }
         .                   }
         .               }
         .           
         .               /// Extracts a slice containing the entire vector.
-- line 1015 ----------------------------------------
-- line 1047 ----------------------------------------
         .           
         .               /// Remove and return the element at position `index`, shifting all elements after it to the
         .               /// left.
         .               ///
         .               /// Panics if `index` is out of bounds.
         .               pub fn remove(&mut self, index: usize) -> A::Item {
         .                   unsafe {
         .                       let (mut ptr, len_ptr, _) = self.triple_mut();
    12,230 ( 0.00%)              let len = *len_ptr;
    36,792 ( 0.00%)              assert!(index < len);
    49,236 ( 0.00%)              *len_ptr = len - 1;
         .                       ptr = ptr.add(index);
         .                       let item = ptr::read(ptr);
    24,528 ( 0.00%)              ptr::copy(ptr.add(1), ptr, len - index - 1);
         .                       item
         .                   }
         .               }
         .           
         .               /// Insert an element at position `index`, shifting all elements after it to the right.
         .               ///
         .               /// Panics if `index` is out of bounds.
    47,705 ( 0.00%)      pub fn insert(&mut self, index: usize, element: A::Item) {
         .                   self.reserve(1);
         .           
         .                   unsafe {
         .                       let (mut ptr, len_ptr, _) = self.triple_mut();
    18,713 ( 0.00%)              let len = *len_ptr;
    37,426 ( 0.00%)              assert!(index <= len);
    74,852 ( 0.00%)              *len_ptr = len + 1;
         .                       ptr = ptr.add(index);
    37,426 ( 0.00%)              ptr::copy(ptr, ptr.add(1), len - index);
         .                       ptr::write(ptr, element);
         .                   }
    30,360 ( 0.00%)      }
         .           
         .               /// Insert multiple elements at position `index`, shifting all following elements toward the
         .               /// back.
         .               pub fn insert_many<I: IntoIterator<Item = A::Item>>(&mut self, index: usize, iterable: I) {
         .                   let mut iter = iterable.into_iter();
         .                   if index == self.len() {
         .                       return self.extend(iter);
         .                   }
-- line 1088 ----------------------------------------
-- line 1201 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// Retains only the elements specified by the predicate.
         .               ///
         .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
         .               /// This method operates in place and preserves the order of the retained
         .               /// elements.
   162,540 ( 0.00%)      pub fn retain<F: FnMut(&mut A::Item) -> bool>(&mut self, mut f: F) {
         .                   let mut del = 0;
         .                   let len = self.len();
         .                   for i in 0..len {
     6,852 ( 0.00%)              if !f(&mut self[i]) {
         .                           del += 1;
     2,244 ( 0.00%)              } else if del > 0 {
         .                           self.swap(i - del, i);
         .                       }
         .                   }
    36,120 ( 0.00%)          self.truncate(len - del);
   144,480 ( 0.00%)      }
         .           
         .               /// Removes consecutive duplicate elements.
         .               pub fn dedup(&mut self)
         .               where
         .                   A::Item: PartialEq<A::Item>,
         .               {
         .                   self.dedup_by(|a, b| a == b);
         .               }
-- line 1228 ----------------------------------------
-- line 1418 ----------------------------------------
         .                           capacity: len,
         .                           data: SmallVecData::from_inline(unsafe {
         .                               let mut data: MaybeUninit<A> = MaybeUninit::uninit();
         .                               ptr::copy_nonoverlapping(
         .                                   slice.as_ptr(),
         .                                   data.as_mut_ptr() as *mut A::Item,
         .                                   len,
         .                               );
       620 ( 0.00%)                      data
         .                           }),
         .                       }
         .                   } else {
         .                       let mut b = slice.to_vec();
         .                       let (ptr, cap) = (b.as_mut_ptr(), b.capacity());
         .                       mem::forget(b);
         .                       SmallVec {
         .                           capacity: cap,
-- line 1434 ----------------------------------------
-- line 1436 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Copy elements from a slice into the vector at position `index`, shifting any following
         .               /// elements toward the back.
         .               ///
         .               /// For slices of `Copy` types, this is more efficient than `insert`.
   134,035 ( 0.00%)      pub fn insert_from_slice(&mut self, index: usize, slice: &[A::Item]) {
         .                   self.reserve(slice.len());
         .           
         .                   let len = self.len();
    42,768 ( 0.00%)          assert!(index <= len);
         .           
         .                   unsafe {
         .                       let slice_ptr = slice.as_ptr();
         .                       let ptr = self.as_mut_ptr().add(index);
         .                       ptr::copy(ptr, ptr.add(slice.len()), len - index);
         .                       ptr::copy_nonoverlapping(slice_ptr, ptr, slice.len());
    28,512 ( 0.00%)              self.set_len(len + slice.len());
         .                   }
   114,048 ( 0.00%)      }
         .           
         .               /// Copy elements from a slice and append them to the vector.
         .               ///
         .               /// For slices of `Copy` types, this is more efficient than `extend`.
         .               #[inline]
         .               pub fn extend_from_slice(&mut self, slice: &[A::Item]) {
         .                   let len = self.len();
    32,180 ( 0.00%)          self.insert_from_slice(len, slice);
         .               }
         .           }
         .           
         .           impl<A: Array> SmallVec<A>
         .           where
         .               A::Item: Clone,
         .           {
         .               /// Resizes the vector so that its length is equal to `len`.
-- line 1473 ----------------------------------------
-- line 1489 ----------------------------------------
         .               /// Creates a `SmallVec` with `n` copies of `elem`.
         .               /// ```
         .               /// use smallvec::SmallVec;
         .               ///
         .               /// let v = SmallVec::<[char; 128]>::from_elem('d', 2);
         .               /// assert_eq!(v, SmallVec::from_buf(['d', 'd']));
         .               /// ```
         .               pub fn from_elem(elem: A::Item, n: usize) -> Self {
     2,700 ( 0.00%)          if n > Self::inline_capacity() {
         .                       vec![elem; n].into()
         .                   } else {
         .                       let mut v = SmallVec::<A>::new();
         .                       unsafe {
         .                           let (ptr, len_ptr, _) = v.triple_mut();
         .                           let mut local_len = SetLenOnDrop::new(len_ptr);
         .           
         .                           for i in 0..n {
         .                               ::core::ptr::write(ptr.add(i), elem.clone());
         .                               local_len.increment_len(1);
         .                           }
         .                       }
     3,969 ( 0.00%)              v
         .                   }
         .               }
         .           }
         .           
         .           impl<A: Array> ops::Deref for SmallVec<A> {
         .               type Target = [A::Item];
         .               #[inline]
         .               fn deref(&self) -> &[A::Item] {
-- line 1518 ----------------------------------------
-- line 1522 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<A: Array> ops::DerefMut for SmallVec<A> {
         .               #[inline]
         .               fn deref_mut(&mut self) -> &mut [A::Item] {
         .                   unsafe {
   256,827 ( 0.00%)              let (ptr, &mut len, _) = self.triple_mut();
         .                       slice::from_raw_parts_mut(ptr, len)
         .                   }
         .               }
         .           }
         .           
         .           impl<A: Array> AsRef<[A::Item]> for SmallVec<A> {
         .               #[inline]
         .               fn as_ref(&self) -> &[A::Item] {
-- line 1538 ----------------------------------------
-- line 1716 ----------------------------------------
         .                   SmallVec::extend_from_slice(self, other)
         .               }
         .           }
         .           
         .           impl<A: Array> FromIterator<A::Item> for SmallVec<A> {
         .               #[inline]
         .               fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
         .                   let mut v = SmallVec::new();
   979,549 ( 0.02%)          v.extend(iterable);
         .                   v
         .               }
         .           }
         .           
         .           impl<A: Array> Extend<A::Item> for SmallVec<A> {
 5,539,678 ( 0.09%)      fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
   338,333 ( 0.01%)          let mut iter = iterable.into_iter();
         .                   let (lower_size_bound, _) = iter.size_hint();
    25,484 ( 0.00%)          self.reserve(lower_size_bound);
         .           
         .                   unsafe {
         .                       let (ptr, len_ptr, cap) = self.triple_mut();
         .                       let mut len = SetLenOnDrop::new(len_ptr);
 1,857,629 ( 0.03%)              while len.get() < cap {
   464,849 ( 0.01%)                  if let Some(out) = iter.next() {
         .                               ptr::write(ptr.add(len.get()), out);
         .                               len.increment_len(1);
         .                           } else {
         .                               return;
         .                           }
         .                       }
         .                   }
         .           
   251,916 ( 0.00%)          for elem in iter {
     2,120 ( 0.00%)              self.push(elem);
         .                   }
 4,606,376 ( 0.07%)      }
         .           }
         .           
         .           impl<A: Array> fmt::Debug for SmallVec<A>
         .           where
         .               A::Item: fmt::Debug,
         .           {
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   f.debug_list().entries(self.iter()).finish()
-- line 1759 ----------------------------------------
-- line 1764 ----------------------------------------
         .               #[inline]
         .               fn default() -> SmallVec<A> {
         .                   SmallVec::new()
         .               }
         .           }
         .           
         .           #[cfg(feature = "may_dangle")]
         .           unsafe impl<#[may_dangle] A: Array> Drop for SmallVec<A> {
10,968,193 ( 0.18%)      fn drop(&mut self) {
         .                   unsafe {
 4,445,276 ( 0.07%)              if self.spilled() {
         .                           let (ptr, len) = self.data.heap();
         .                           Vec::from_raw_parts(ptr, len, self.capacity);
         .                       } else {
         .                           ptr::drop_in_place(&mut self[..]);
         .                       }
         .                   }
11,095,822 ( 0.18%)      }
         .           }
         .           
         .           #[cfg(not(feature = "may_dangle"))]
         .           impl<A: Array> Drop for SmallVec<A> {
         .               fn drop(&mut self) {
         .                   unsafe {
         .                       if self.spilled() {
         .                           let (ptr, len) = self.data.heap();
-- line 1789 ----------------------------------------
-- line 1888 ----------------------------------------
         .               A::Item: Clone,
         .           {
         .               fn clone(&self) -> IntoIter<A> {
         .                   SmallVec::from(self.as_slice()).into_iter()
         .               }
         .           }
         .           
         .           impl<A: Array> Drop for IntoIter<A> {
       268 ( 0.00%)      fn drop(&mut self) {
    18,727 ( 0.00%)          for _ in self {}
       272 ( 0.00%)      }
         .           }
         .           
         .           impl<A: Array> Iterator for IntoIter<A> {
         .               type Item = A::Item;
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<A::Item> {
   550,268 ( 0.01%)          if self.current == self.end {
         6 ( 0.00%)              None
         .                   } else {
         .                       unsafe {
         .                           let current = self.current;
   326,489 ( 0.01%)                  self.current += 1;
     1,160 ( 0.00%)                  Some(ptr::read(self.data.as_ptr().add(current)))
         .                       }
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
    25,062 ( 0.00%)          let size = self.end - self.current;
         .                   (size, Some(size))
         .               }
         .           }
         .           
         .           impl<A: Array> DoubleEndedIterator for IntoIter<A> {
         .               #[inline]
         .               fn next_back(&mut self) -> Option<A::Item> {
         .                   if self.current == self.end {
-- line 1927 ----------------------------------------
-- line 1955 ----------------------------------------
         .           impl<A: Array> IntoIterator for SmallVec<A> {
         .               type IntoIter = IntoIter<A>;
         .               type Item = A::Item;
         .               fn into_iter(mut self) -> Self::IntoIter {
         .                   unsafe {
         .                       // Set SmallVec len to zero as `IntoIter` drop handles dropping of the elements
         .                       let len = self.len();
         .                       self.set_len(0);
    37,444 ( 0.00%)              IntoIter {
   317,573 ( 0.01%)                  data: self,
         .                           current: 0,
         .                           end: len,
         .                       }
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, A: Array> IntoIterator for &'a SmallVec<A> {
-- line 1972 ----------------------------------------
-- line 2000 ----------------------------------------
         .               len: &'a mut usize,
         .               local_len: usize,
         .           }
         .           
         .           impl<'a> SetLenOnDrop<'a> {
         .               #[inline]
         .               fn new(len: &'a mut usize) -> Self {
         .                   SetLenOnDrop {
   579,647 ( 0.01%)              local_len: *len,
         .                       len,
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn get(&self) -> usize {
         .                   self.local_len
         .               }
         .           
         .               #[inline]
         .               fn increment_len(&mut self, increment: usize) {
   130,575 ( 0.00%)          self.local_len += increment;
         .               }
         .           }
         .           
         .           impl<'a> Drop for SetLenOnDrop<'a> {
         .               #[inline]
         .               fn drop(&mut self) {
   669,897 ( 0.01%)          *self.len = self.local_len;
         .               }
         .           }
         .           
         .           #[cfg(feature = "const_new")]
         .           impl<T, const N: usize> SmallVec<[T; N]> {
         .               /// Construct an empty vector.
         .               ///
         .               /// This is a `const` version of [`SmallVec::new`] that is enabled by the feature `const_new`, with the limitation that it only works for arrays.
-- line 2035 ----------------------------------------

11,034,529 ( 0.18%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir                 

-- line 27 ----------------------------------------
        .           impl CacheEntry {
        .               #[inline]
        .               fn update(
        .                   &mut self,
        .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
        .                   pos: BytePos,
        .                   time_stamp: usize,
        .               ) {
   32,175 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
   53,069 ( 0.00%)              self.file = file;
   62,809 ( 0.00%)              self.file_index = file_idx;
        .                   }
        .           
    7,822 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
        .                   let line_bounds = self.file.line_bounds(line_index);
   92,896 ( 0.00%)          self.line_number = line_index + 1;
  153,702 ( 0.00%)          self.line = line_bounds;
        .                   self.touch(time_stamp);
        .               }
        .           
        .               #[inline]
        .               fn touch(&mut self, time_stamp: usize) {
  140,667 ( 0.00%)          self.time_stamp = time_stamp;
        .               }
        .           }
        .           
        .           #[derive(Clone)]
        .           pub struct CachingSourceMapView<'sm> {
        .               source_map: &'sm SourceMap,
        .               line_cache: [CacheEntry; 3],
        .               time_stamp: usize,
        .           }
        .           
        .           impl<'sm> CachingSourceMapView<'sm> {
   23,644 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
        .                   let files = source_map.files();
   11,822 ( 0.00%)          let first_file = files[0].clone();
        .                   let entry = CacheEntry {
        .                       time_stamp: 0,
        .                       line_number: 0,
        .                       line: BytePos(0)..BytePos(0),
        .                       file: first_file,
        .                       file_index: 0,
        .                   };
        .           
   59,110 ( 0.00%)          CachingSourceMapView {
        .                       source_map,
   82,754 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
        .                       time_stamp: 0,
        .                   }
   47,288 ( 0.00%)      }
        .           
        .               pub fn byte_pos_to_line_and_col(
        .                   &mut self,
        .                   pos: BytePos,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
        .                   self.time_stamp += 1;
        .           
        .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
        .                   };
        .           
        .                   let cache_entry = &mut self.line_cache[oldest];
        .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
        .           
        .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
        .               }
        .           
  604,352 ( 0.01%)      pub fn span_data_to_lines_and_cols(
        .                   &mut self,
        .                   span_data: &SpanData,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
  345,344 ( 0.01%)          self.time_stamp += 1;
        .           
        .                   // Check if lo and hi are in the cached lines.
   86,336 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
   86,336 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
        .           
  111,778 ( 0.00%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
        .                       // Cache hit for span lo and hi. Check if they belong to the same file.
        .                       let result = {
  108,662 ( 0.00%)                  let lo = &self.line_cache[lo_cache_idx as usize];
        .                           let hi = &self.line_cache[hi_cache_idx as usize];
        .           
  325,986 ( 0.01%)                  if lo.file_index != hi.file_index {
        .                               return None;
        .                           }
        .           
        .                           (
  108,662 ( 0.00%)                      lo.file.clone(),
        .                               lo.line_number,
        .                               span_data.lo - lo.line.start,
   54,331 ( 0.00%)                      hi.line_number,
        .                               span_data.hi - hi.line.start,
        .                           )
        .                       };
        .           
   54,331 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
   54,331 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
        .           
  217,324 ( 0.00%)              return Some(result);
        .                   }
        .           
        .                   // No cache hit or cache hit for only one of span lo and hi.
   60,894 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
        .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
        .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
        .                   } else {
        .                       self.oldest_cache_entry_index()
        .                   };
        .           
        .                   // If the entry doesn't point to the correct file, get the new file and index.
        .                   // Return early if the file containing beginning of span doesn't contain end of span.
  254,616 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
  120,915 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
  145,098 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
        .                           return None;
        .                       }
        .           
   96,732 ( 0.00%)              Some(new_file_and_idx)
        .                   } else {
        .                       let file = &self.line_cache[oldest].file;
   23,466 ( 0.00%)              if !file_contains(&file, span_data.hi) {
        .                           return None;
        .                       }
        .           
   23,466 ( 0.00%)              None
        .                   };
        .           
        .                   // Update the cache entries.
  160,025 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, -1) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
        .           
   91,086 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
        .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
        .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
        .                               let hi = &mut self.line_cache[next_oldest];
        .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
        .                               (oldest, next_oldest)
        .                           } else {
        .                               (oldest, oldest)
        .                           }
        .                       }
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, _) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
    3,116 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
    4,674 ( 0.00%)                  hi.touch(self.time_stamp);
        .                           (oldest, hi_cache_idx as usize)
        .                       }
        .                       // Oldest cache entry is for span_data.hi line.
        .                       (_, -1) => {
        .                           let hi = &mut self.line_cache[oldest];
       85 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
      170 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
      340 ( 0.00%)                  lo.touch(self.time_stamp);
        .                           (lo_cache_idx as usize, oldest)
        .                       }
        .                       _ => {
        .                           panic!();
        .                       }
        .                   };
        .           
        .                   let lo = &self.line_cache[lo_idx];
        .                   let hi = &self.line_cache[hi_idx];
        .           
        .                   // Span lo and hi may equal line end when last line doesn't
        .                   // end in newline, hence the inclusive upper bounds below.
   64,010 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
   32,005 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
   64,010 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
   32,005 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
  160,025 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
   96,015 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
   96,015 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
        .           
   96,015 ( 0.00%)          Some((
   32,005 ( 0.00%)              lo.file.clone(),
        .                       lo.line_number,
        .                       span_data.lo - lo.line.start,
   32,005 ( 0.00%)              hi.line_number,
        .                       span_data.hi - hi.line.start,
        .                   ))
  777,024 ( 0.01%)      }
        .           
        .               fn cache_entry_index(&self, pos: BytePos) -> isize {
        .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
1,153,231 ( 0.02%)              if cache_entry.line.contains(&pos) {
        .                           return idx as isize;
        .                       }
        .                   }
        .           
        .                   -1
        .               }
        .           
        .               fn oldest_cache_entry_index(&self) -> usize {
        .                   let mut oldest = 0;
        .           
        .                   for idx in 1..self.line_cache.len() {
  182,172 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
        .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
        .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
        .           
        .                   for idx in 0..self.line_cache.len() {
   85,026 ( 0.00%)              if idx != avoid_idx
   62,926 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
        .                       {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
  120,915 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
   24,183 ( 0.00%)          if !self.source_map.files().is_empty() {
   48,366 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
        .                       let file = &self.source_map.files()[file_idx];
        .           
  193,464 ( 0.00%)              if file_contains(file, pos) {
        .                           return Some((file.clone(), file_idx));
        .                       }
        .                   }
        .           
        .                   None
  120,915 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
        .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
        .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
        .               // purposes of converting a byte position to a line and column number, we can't come up with a
        .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

1,911,698 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 36 ----------------------------------------
         .           use rustc_session::parse::ParseSess;
         .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
         .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
         .           use tracing::debug;
         .           
         .           use std::ops::Range;
         .           use std::{cmp, mem, slice};
         .           
    34,378 ( 0.00%)  bitflags::bitflags! {
         .               struct Restrictions: u8 {
         .                   const STMT_EXPR         = 1 << 0;
         .                   const NO_STRUCT_LITERAL = 1 << 1;
         .                   const CONST_EXPR        = 1 << 2;
         .               }
         .           }
         .           
         .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
         .                               $self.bump();
         .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
         .                           }
         .                       }
         .                   }
         .               };
         .           }
         .           
 7,480,244 ( 0.12%)  #[derive(Clone)]
         .           pub struct Parser<'a> {
   277,292 ( 0.00%)      pub sess: &'a ParseSess,
         .               /// The current token.
   266,744 ( 0.00%)      pub token: Token,
         .               /// The spacing for the current token
   133,384 ( 0.00%)      pub token_spacing: Spacing,
         .               /// The previous token.
   400,116 ( 0.01%)      pub prev_token: Token,
   133,396 ( 0.00%)      pub capture_cfg: bool,
   266,804 ( 0.00%)      restrictions: Restrictions,
   266,768 ( 0.00%)      expected_tokens: Vec<TokenType>,
         .               // Important: This must only be advanced from `next_tok`
         .               // to ensure that `token_cursor.num_next_calls` is updated properly
         .               token_cursor: TokenCursor,
   266,768 ( 0.00%)      desugar_doc_comments: bool,
         .               /// This field is used to keep track of how many left angle brackets we have seen. This is
         .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
         .               /// appropriately.
         .               ///
         .               /// See the comments in the `parse_path_segment` function for more details.
   266,768 ( 0.00%)      unmatched_angle_bracket_count: u32,
   400,152 ( 0.01%)      max_angle_bracket_count: u32,
         .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
         .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
         .               /// error.
   133,384 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
         .               last_unexpected_token_span: Option<Span>,
         .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
         .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
         .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
         .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
         .               subparser_name: Option<&'static str>,
         .               capture_state: CaptureState,
         .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
         .           /// the first macro inner attribute to invoke a proc-macro).
         .           /// When create a `TokenStream`, the inner attributes get inserted
         .           /// into the proper place in the token stream.
         .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
         .           
         .           /// Controls how we capture tokens. Capturing can be expensive,
         .           /// so we try to avoid performing capturing in cases where
         .           /// we will never need an `AttrAnnotatedTokenStream`
   133,384 ( 0.00%)  #[derive(Copy, Clone)]
         .           pub enum Capturing {
         .               /// We aren't performing any capturing - this is the default mode.
         .               No,
         .               /// We are capturing tokens
         .               Yes,
         .           }
         .           
   544,072 ( 0.01%)  #[derive(Clone)]
         .           struct CaptureState {
   533,536 ( 0.01%)      capturing: Capturing,
   133,384 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
         .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
         .           }
         .           
         .           impl<'a> Drop for Parser<'a> {
         .               fn drop(&mut self) {
   463,544 ( 0.01%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
         .               }
         .           }
         .           
 2,355,641 ( 0.04%)  #[derive(Clone)]
         .           struct TokenCursor {
         .               frame: TokenCursorFrame,
   550,207 ( 0.01%)      stack: Vec<TokenCursorFrame>,
         .               desugar_doc_comments: bool,
         .               // Counts the number of calls to `next` or `next_desugared`,
         .               // depending on whether `desugar_doc_comments` is set.
   178,713 ( 0.00%)      num_next_calls: usize,
         .               // During parsing, we may sometimes need to 'unglue' a
         .               // glued token into two component tokens
         .               // (e.g. '>>' into '>' and '>), so that the parser
         .               // can consume them one at a time. This process
         .               // bypasses the normal capturing mechanism
         .               // (e.g. `num_next_calls` will not be incremented),
         .               // since the 'unglued' tokens due not exist in
         .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
         .               // in `Option<Vec<u8>>` requires us to unglue
         .               // the trailing `>>` token. The `break_last_token`
         .               // field is used to track this token - it gets
         .               // appended to the captured stream when
         .               // we evaluate a `LazyTokenStream`
         .               break_last_token: bool,
         .           }
         .           
 1,072,359 ( 0.02%)  #[derive(Clone)]
         .           struct TokenCursorFrame {
   181,076 ( 0.00%)      delim: token::DelimToken,
         .               span: DelimSpan,
         .               open_delim: bool,
   362,152 ( 0.01%)      tree_cursor: tokenstream::Cursor,
         .               close_delim: bool,
         .           }
         .           
         .           impl TokenCursorFrame {
         .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
   105,605 ( 0.00%)          TokenCursorFrame {
         .                       delim,
         .                       span,
         .                       open_delim: false,
   149,925 ( 0.00%)              tree_cursor: tts.into_trees(),
         .                       close_delim: false,
         .                   }
         .               }
         .           }
         .           
         .           impl TokenCursor {
11,308,008 ( 0.18%)      fn next(&mut self) -> (Token, Spacing) {
         .                   loop {
 5,429,617 ( 0.09%)              let (tree, spacing) = if !self.frame.open_delim {
   107,683 ( 0.00%)                  self.frame.open_delim = true;
   538,415 ( 0.01%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
10,980,475 ( 0.18%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
         .                           tree
   401,350 ( 0.01%)              } else if !self.frame.close_delim {
    89,766 ( 0.00%)                  self.frame.close_delim = true;
   448,830 ( 0.01%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
   179,532 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
 1,166,958 ( 0.02%)                  self.frame = frame;
         .                           continue;
         .                       } else {
   380,574 ( 0.01%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
         .                       };
         .           
 2,100,034 ( 0.03%)              match tree {
         .                           TokenTree::Token(token) => {
 7,538,672 ( 0.12%)                      return (token, spacing);
         .                           }
         .                           TokenTree::Delimited(sp, delim, tts) => {
         .                               let frame = TokenCursorFrame::new(sp, delim, tts);
         .                               self.stack.push(mem::replace(&mut self.frame, frame));
         .                           }
         .                       }
         .                   }
 7,538,672 ( 0.12%)      }
         .           
 5,124,220 ( 0.08%)      fn next_desugared(&mut self) -> (Token, Spacing) {
 1,537,266 ( 0.02%)          let (data, attr_style, sp) = match self.next() {
         .                       (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
         .                           (data, attr_style, span)
         .                       }
 2,562,110 ( 0.04%)              tok => return tok,
         .                   };
         .           
         .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
         .                   // required to wrap the text.
         .                   let mut num_of_hashes = 0;
         .                   let mut count = 0;
         .                   for ch in data.as_str().chars() {
         .                       count = match ch {
-- line 298 ----------------------------------------
-- line 332 ----------------------------------------
         .                                   .iter()
         .                                   .cloned()
         .                                   .collect::<TokenStream>()
         .                           },
         .                       ),
         .                   ));
         .           
         .                   self.next()
 4,611,798 ( 0.07%)      }
         .           }
         .           
       660 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
         .           enum TokenType {
       528 ( 0.00%)      Token(TokenKind),
         .               Keyword(Symbol),
         .               Operator,
         .               Lifetime,
         .               Ident,
         .               Path,
         .               Type,
         .               Const,
         .           }
-- line 353 ----------------------------------------
-- line 378 ----------------------------------------
         .               /// The separator token.
         .               sep: Option<TokenKind>,
         .               /// `true` if a trailing separator is allowed.
         .               trailing_sep_allowed: bool,
         .           }
         .           
         .           impl SeqSep {
         .               fn trailing_allowed(t: TokenKind) -> SeqSep {
         6 ( 0.00%)          SeqSep { sep: Some(t), trailing_sep_allowed: true }
         .               }
         .           
         .               fn none() -> SeqSep {
         .                   SeqSep { sep: None, trailing_sep_allowed: false }
         .               }
         .           }
         .           
         .           pub enum FollowedByType {
         .               Yes,
         .               No,
         .           }
         .           
         .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
        76 ( 0.00%)      Some(match token.kind {
       152 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
       152 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
       152 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
         .                   token::DocComment(..) => "doc comment",
         .                   _ => return None,
         .               })
         .           }
         .           
       266 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
        76 ( 0.00%)      let token_str = pprust::token_to_string(token);
         .               match token_descr_opt(token) {
         .                   Some(prefix) => format!("{} `{}`", prefix, token_str),
       266 ( 0.00%)          _ => format!("`{}`", token_str),
         .               }
       190 ( 0.00%)  }
         .           
         .           impl<'a> Parser<'a> {
   295,694 ( 0.00%)      pub fn new(
         .                   sess: &'a ParseSess,
         .                   tokens: TokenStream,
         .                   desugar_doc_comments: bool,
         .                   subparser_name: Option<&'static str>,
         .               ) -> Self {
    21,121 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
    42,242 ( 0.00%)          start_frame.open_delim = true;
         .                   start_frame.close_delim = true;
         .           
   654,751 ( 0.01%)          let mut parser = Parser {
         .                       sess,
    21,121 ( 0.00%)              token: Token::dummy(),
         .                       token_spacing: Spacing::Alone,
    21,121 ( 0.00%)              prev_token: Token::dummy(),
         .                       capture_cfg: false,
         .                       restrictions: Restrictions::empty(),
         .                       expected_tokens: Vec::new(),
         .                       token_cursor: TokenCursor {
   126,726 ( 0.00%)                  frame: start_frame,
         .                           stack: Vec::new(),
         .                           num_next_calls: 0,
         .                           desugar_doc_comments,
         .                           break_last_token: false,
         .                       },
         .                       desugar_doc_comments,
         .                       unmatched_angle_bracket_count: 0,
         .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
         .                           capturing: Capturing::No,
         .                           replace_ranges: Vec::new(),
         .                           inner_attr_ranges: Default::default(),
         .                       },
         .                       current_closure: None,
         .                   };
         .           
         .                   // Make parser point to the first token.
    42,242 ( 0.00%)          parser.bump();
         .           
         .                   parser
   190,089 ( 0.00%)      }
         .           
         .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
         .                   loop {
 5,467,116 ( 0.09%)              let (mut next, spacing) = if self.desugar_doc_comments {
 2,049,688 ( 0.03%)                  self.token_cursor.next_desugared()
         .                       } else {
 1,196,292 ( 0.02%)                  self.token_cursor.next()
         .                       };
 3,644,744 ( 0.06%)              self.token_cursor.num_next_calls += 1;
         .                       // We've retrieved an token from the underlying
         .                       // cursor, so we no longer need to worry about
         .                       // an unglued token. See `break_and_eat` for more details
   911,186 ( 0.01%)              self.token_cursor.break_last_token = false;
 3,644,744 ( 0.06%)              if next.span.is_dummy() {
         .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
    84,524 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
         .                       }
 3,020,755 ( 0.05%)              if matches!(
 1,822,372 ( 0.03%)                  next.kind,
         .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
         .                       ) {
         .                           continue;
         .                       }
 3,644,744 ( 0.06%)              return (next, spacing);
         .                   }
         .               }
         .           
         .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
         .                   match self.expect_one_of(&[], &[]) {
         .                       Err(e) => Err(e),
         .                       // We can get `Ok(true)` from `recover_closing_delimiter`
         .                       // which is called in `expected_one_of_not_found`.
         .                       Ok(_) => FatalError.raise(),
         .                   }
         .               }
         .           
         .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
    61,578 ( 0.00%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
     6,842 ( 0.00%)          if self.expected_tokens.is_empty() {
       126 ( 0.00%)              if self.token == *t {
       105 ( 0.00%)                  self.bump();
         .                           Ok(false)
         .                       } else {
         .                           self.unexpected_try_recover(t)
         .                       }
         .                   } else {
    81,852 ( 0.00%)              self.expect_one_of(slice::from_ref(t), &[])
         .                   }
   102,630 ( 0.00%)      }
         .           
         .               /// Expect next token to be edible or inedible token.  If edible,
         .               /// then consume it; if inedible, then return without consuming
         .               /// anything.  Signal a fatal error if next token is unexpected.
   124,212 ( 0.00%)      pub fn expect_one_of(
         .                   &mut self,
         .                   edible: &[TokenKind],
         .                   inedible: &[TokenKind],
         .               ) -> PResult<'a, bool /* recovered */> {
    20,702 ( 0.00%)          if edible.contains(&self.token.kind) {
    20,538 ( 0.00%)              self.bump();
         .                       Ok(false)
         .                   } else if inedible.contains(&self.token.kind) {
         .                       // leave it in the input
         .                       Ok(false)
         .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
         .                       FatalError.raise();
         .                   } else {
         .                       self.expected_one_of_not_found(edible, inedible)
         .                   }
   155,265 ( 0.00%)      }
         .           
         .               // Public for rustfmt usage.
         .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
   103,476 ( 0.00%)          self.parse_ident_common(true)
         .               }
         .           
         .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
    77,172 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
         .                       TokenKind::DocComment(..) => {
         .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
         .                       }
         .                       _ => self.expected_ident_found(),
         .                   })
         .               }
         .           
   180,054 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
    25,722 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
   154,332 ( 0.00%)          if !is_raw && ident.is_reserved() {
         .                       let mut err = self.expected_ident_found();
         .                       if recover {
         .                           err.emit();
         .                       } else {
         .                           return Err(err);
         .                       }
         .                   }
   102,888 ( 0.00%)          self.bump();
         .                   Ok(ident)
   257,220 ( 0.00%)      }
         .           
         .               /// Checks if the next token is `tok`, and returns `true` if so.
         .               ///
         .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
         .               /// encountered.
 2,126,047 ( 0.03%)      fn check(&mut self, tok: &TokenKind) -> bool {
   920,573 ( 0.01%)          let is_present = self.token == *tok;
   625,976 ( 0.01%)          if !is_present {
 1,029,139 ( 0.02%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
         .                   }
         .                   is_present
 2,126,047 ( 0.03%)      }
         .           
         .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
        96 ( 0.00%)      pub fn eat(&mut self, tok: &TokenKind) -> bool {
   430,497 ( 0.01%)          let is_present = self.check(tok);
   288,665 ( 0.00%)          if is_present {
   102,764 ( 0.00%)              self.bump()
         .                   }
         .                   is_present
       120 ( 0.00%)      }
         .           
         .               /// If the next token is the given keyword, returns `true` without eating it.
         .               /// An expectation is also added for diagnostics purposes.
     2,400 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
    17,616 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
   173,840 ( 0.00%)          self.token.is_keyword(kw)
         .               }
         .           
         .               /// If the next token is the given keyword, eats it and returns `true`.
         .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
         .               // Public for rustfmt usage.
    21,055 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
    20,440 ( 0.00%)          if self.check_keyword(kw) {
     8,327 ( 0.00%)              self.bump();
         .                       true
         .                   } else {
         .                       false
         .                   }
    21,055 ( 0.00%)      }
         .           
         .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
       208 ( 0.00%)          if self.token.is_keyword(kw) {
        52 ( 0.00%)              self.bump();
         .                       true
         .                   } else {
         .                       false
         .                   }
         .               }
         .           
         .               /// If the given word is not a keyword, signals an error.
         .               /// If the next token is not the given word, signals an error.
         .               /// Otherwise, eats it.
        30 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
         .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
        24 ( 0.00%)      }
         .           
         .               /// Is the given keyword `kw` followed by a non-reserved identifier?
   433,496 ( 0.01%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
   216,748 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
   487,683 ( 0.01%)      }
         .           
    42,408 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
    41,228 ( 0.00%)          if ok {
         .                       true
         .                   } else {
       464 ( 0.00%)              self.expected_tokens.push(typ);
         .                       false
         .                   }
    42,408 ( 0.00%)      }
         .           
         .               fn check_ident(&mut self) -> bool {
     5,787 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
         .               }
         .           
    25,328 ( 0.00%)      fn check_path(&mut self) -> bool {
    64,502 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
    31,660 ( 0.00%)      }
         .           
         .               fn check_type(&mut self) -> bool {
        88 ( 0.00%)          self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
         .               }
         .           
         .               fn check_const_arg(&mut self) -> bool {
        88 ( 0.00%)          self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
         .               }
         .           
     5,976 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
     3,320 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
         .                       && self.look_ahead(dist + 1, |t| match t.kind {
         .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
         .                           token::OpenDelim(DelimToken::Brace) => true,
         .                           _ => false,
         .                       })
     5,976 ( 0.00%)      }
         .           
         .               /// Checks to see if the next token is either `+` or `+=`.
         .               /// Otherwise returns `false`.
         .               fn check_plus(&mut self) -> bool {
       164 ( 0.00%)          self.check_or_expected(
        82 ( 0.00%)              self.token.is_like_plus(),
        82 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
         .                   )
         .               }
         .           
         .               /// Eats the expected token if it's present possibly breaking
         .               /// compound tokens like multi-character operators in process.
         .               /// Returns `true` if the token was eaten.
   115,704 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
    67,494 ( 0.00%)          if self.token.kind == expected {
     6,658 ( 0.00%)              self.bump();
         .                       return true;
         .                   }
    31,565 ( 0.00%)          match self.token.kind.break_two_token_op() {
         .                       Some((first, second)) if first == expected => {
         .                           let first_span = self.sess.source_map().start_point(self.token.span);
         .                           let second_span = self.token.span.with_lo(first_span.hi());
         .                           self.token = Token::new(first, first_span);
         .                           // Keep track of this token - if we end token capturing now,
         .                           // we'll want to append this token to the captured stream.
         .                           //
         .                           // If we consume any additional tokens, then this token
-- line 682 ----------------------------------------
-- line 684 ----------------------------------------
         .                           // and `next_tok` will set this field to `None`
         .                           self.token_cursor.break_last_token = true;
         .                           // Use the spacing of the glued token as the spacing
         .                           // of the unglued second token.
         .                           self.bump_with((Token::new(second, second_span), self.token_spacing));
         .                           true
         .                       }
         .                       _ => {
    18,939 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
         .                           false
         .                       }
         .                   }
   112,030 ( 0.00%)      }
         .           
         .               /// Eats `+` possibly breaking tokens like `+=` in process.
         .               fn eat_plus(&mut self) -> bool {
         .                   self.break_and_eat(token::BinOp(token::Plus))
         .               }
         .           
         .               /// Eats `&` possibly breaking tokens like `&&` in process.
         .               /// Signals an error if `&` is not eaten.
         .               fn expect_and(&mut self) -> PResult<'a, ()> {
    19,830 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
         .               }
         .           
         .               /// Eats `|` possibly breaking tokens like `||` in process.
         .               /// Signals an error if `|` was not eaten.
         .               fn expect_or(&mut self) -> PResult<'a, ()> {
        12 ( 0.00%)          if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
         .               }
         .           
         .               /// Eats `<` possibly breaking tokens like `<<` in process.
       160 ( 0.00%)      fn eat_lt(&mut self) -> bool {
    18,998 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
    12,659 ( 0.00%)          if ate {
         .                       // See doc comment for `unmatched_angle_bracket_count`.
        44 ( 0.00%)              self.unmatched_angle_bracket_count += 1;
        44 ( 0.00%)              self.max_angle_bracket_count += 1;
         .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
         .                   }
         .                   ate
       160 ( 0.00%)      }
         .           
         .               /// Eats `<` possibly breaking tokens like `<<` in process.
         .               /// Signals an error if `<` was not eaten.
         .               fn expect_lt(&mut self) -> PResult<'a, ()> {
         .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
         .               }
         .           
         .               /// Eats `>` possibly breaking tokens like `>>` in process.
         .               /// Signals an error if `>` was not eaten.
         .               fn expect_gt(&mut self) -> PResult<'a, ()> {
        66 ( 0.00%)          if self.break_and_eat(token::Gt) {
         .                       // See doc comment for `unmatched_angle_bracket_count`.
        33 ( 0.00%)              if self.unmatched_angle_bracket_count > 0 {
        22 ( 0.00%)                  self.unmatched_angle_bracket_count -= 1;
         .                           debug!("expect_gt: (decrement) count={:?}", self.unmatched_angle_bracket_count);
         .                       }
         .                       Ok(())
         .                   } else {
         .                       self.unexpected()
         .                   }
         .               }
         .           
         .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
         .                   kets.iter().any(|k| match expect {
    18,942 ( 0.00%)              TokenExpectType::Expect => self.check(k),
        30 ( 0.00%)              TokenExpectType::NoExpect => self.token == **k,
         .                   })
         .               }
         .           
         .               fn parse_seq_to_before_tokens<T>(
         .                   &mut self,
         .                   kets: &[&TokenKind],
         .                   sep: SeqSep,
         .                   expect: TokenExpectType,
-- line 759 ----------------------------------------
-- line 761 ----------------------------------------
         .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
         .                   let mut first = true;
         .                   let mut recovered = false;
         .                   let mut trailing = false;
         .                   let mut v = vec![];
         .                   let unclosed_delims = !self.unclosed_delims.is_empty();
         .           
         .                   while !self.expect_any_with_type(kets, expect) {
    36,995 ( 0.00%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
         .                           break;
         .                       }
    24,632 ( 0.00%)              if let Some(ref t) = sep.sep {
    24,408 ( 0.00%)                  if first {
         .                               first = false;
         .                           } else {
    21,525 ( 0.00%)                      match self.expect(t) {
         .                                   Ok(false) => {
         .                                       self.current_closure.take();
         .                                   }
         .                                   Ok(true) => {
         .                                       self.current_closure.take();
         .                                       recovered = true;
         .                                       break;
         .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
         .                                               e.cancel();
         .                                               break;
         .                                           }
         .                                       }
         .                                   }
         .                               }
         .                           }
         .                       }
    12,354 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
         .                           trailing = true;
         .                           break;
         .                       }
         .           
     5,728 ( 0.00%)              let t = f(self)?;
       237 ( 0.00%)              v.push(t);
         .                   }
         .           
    14,692 ( 0.00%)          Ok((v, trailing, recovered))
         .               }
         .           
         .               fn recover_missing_braces_around_closure_body(
         .                   &mut self,
         .                   closure_spans: ClosureSpans,
         .                   mut expect_err: DiagnosticBuilder<'_>,
         .               ) -> PResult<'a, ()> {
         .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
         .               /// `f` must consume tokens until reaching the next separator or
         .               /// closing bracket.
         .               fn parse_seq_to_before_end<T>(
         .                   &mut self,
         .                   ket: &TokenKind,
         .                   sep: SeqSep,
         .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
         .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
    14,675 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
         .               }
         .           
         .               /// Parses a sequence, including the closing delimiter. The function
         .               /// `f` must consume tokens until reaching the next separator or
         .               /// closing bracket.
    36,060 ( 0.00%)      fn parse_seq_to_end<T>(
         .                   &mut self,
         .                   ket: &TokenKind,
         .                   sep: SeqSep,
         .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
         .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
    10,950 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
     3,734 ( 0.00%)          if !recovered {
         .                       self.eat(ket);
         .                   }
    32,680 ( 0.00%)          Ok((val, trailing))
    28,848 ( 0.00%)      }
         .           
         .               /// Parses a sequence, including the closing delimiter. The function
         .               /// `f` must consume tokens until reaching the next separator or
         .               /// closing bracket.
         .               fn parse_unspanned_seq<T>(
         .                   &mut self,
         .                   bra: &TokenKind,
         .                   ket: &TokenKind,
         .                   sep: SeqSep,
         .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
         .               ) -> PResult<'a, (Vec<T>, bool)> {
    10,930 ( 0.00%)          self.expect(bra)?;
    28,848 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
         .               }
         .           
         .               fn parse_delim_comma_seq<T>(
         .                   &mut self,
         .                   delim: DelimToken,
         .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
         .               ) -> PResult<'a, (Vec<T>, bool)> {
         .                   self.parse_unspanned_seq(
     3,669 ( 0.00%)              &token::OpenDelim(delim),
     3,732 ( 0.00%)              &token::CloseDelim(delim),
         .                       SeqSep::trailing_allowed(token::Comma),
         .                       f,
         .                   )
         .               }
         .           
         .               fn parse_paren_comma_seq<T>(
         .                   &mut self,
         .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
         .               ) -> PResult<'a, (Vec<T>, bool)> {
         .                   self.parse_delim_comma_seq(token::Paren, f)
         .               }
         .           
         .               /// Advance the parser by one token using provided token as the next one.
11,845,418 ( 0.19%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
         .                   // Bumping after EOF is a bad sign, usually an infinite loop.
 5,467,116 ( 0.09%)          if self.prev_token.kind == TokenKind::Eof {
         .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
         .                       self.span_bug(self.token.span, msg);
         .                   }
         .           
         .                   // Update the current and previous tokens.
 3,644,744 ( 0.06%)          self.prev_token = mem::replace(&mut self.token, next_token);
   911,186 ( 0.01%)          self.token_spacing = next_spacing;
         .           
         .                   // Diagnostics.
   911,186 ( 0.01%)          self.expected_tokens.clear();
         .               }
         .           
         .               /// Advance the parser by one token.
 7,289,488 ( 0.12%)      pub fn bump(&mut self) {
 3,644,744 ( 0.06%)          let next_token = self.next_tok(self.token.span);
 5,467,116 ( 0.09%)          self.bump_with(next_token);
 7,289,488 ( 0.12%)      }
         .           
         .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
         .               /// When `dist == 0` then the current token is looked at.
        64 ( 0.00%)      pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
     1,406 ( 0.00%)          if dist == 0 {
       684 ( 0.00%)              return looker(&self.token);
         .                   }
         .           
    49,842 ( 0.00%)          let frame = &self.token_cursor.frame;
    53,957 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
         .                       let all_normal = (0..dist).all(|i| {
    66,532 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
    89,731 ( 0.00%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
         .                       });
         .                       if all_normal {
   110,511 ( 0.00%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
    41,774 ( 0.00%)                      Some(tree) => match tree {
    20,823 ( 0.00%)                          TokenTree::Token(token) => looker(token),
         .                                   TokenTree::Delimited(dspan, delim, _) => {
       664 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
         .                                   }
         .                               },
    13,534 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
         .                           };
         .                       }
         .                   }
         .           
         .                   let mut cursor = self.token_cursor.clone();
         .                   let mut i = 0;
    31,159 ( 0.00%)          let mut token = Token::dummy();
        96 ( 0.00%)          while i < dist {
   218,074 ( 0.00%)              token = cursor.next().0;
    93,480 ( 0.00%)              if matches!(
    62,300 ( 0.00%)                  token.kind,
         .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
         .                       ) {
         .                           continue;
         .                       }
        40 ( 0.00%)              i += 1;
         .                   }
    15,497 ( 0.00%)          return looker(&token);
        72 ( 0.00%)      }
         .           
         .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
     6,156 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
     1,422 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
     6,156 ( 0.00%)      }
         .           
         .               /// Parses asyncness: `async` or nothing.
         .               fn parse_asyncness(&mut self) -> Async {
         .                   if self.eat_keyword(kw::Async) {
         .                       let span = self.prev_token.uninterpolated_span();
         .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
         .                   } else {
         .                       Async::No
         .                   }
         .               }
         .           
         .               /// Parses unsafety: `unsafe` or nothing.
        38 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
         .                   if self.eat_keyword(kw::Unsafe) {
         .                       Unsafe::Yes(self.prev_token.uninterpolated_span())
         .                   } else {
         .                       Unsafe::No
         .                   }
       152 ( 0.00%)      }
         .           
         .               /// Parses constness: `const` or nothing.
       576 ( 0.00%)      fn parse_constness(&mut self) -> Const {
         .                   // Avoid const blocks to be parsed as const items
       168 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
         .                       && self.eat_keyword(kw::Const)
         .                   {
         5 ( 0.00%)              Const::Yes(self.prev_token.uninterpolated_span())
         .                   } else {
         .                       Const::No
         .                   }
     1,008 ( 0.00%)      }
         .           
         .               /// Parses inline const expressions.
         .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
         .                   if pat {
         .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
         .                   } else {
         .                       self.sess.gated_spans.gate(sym::inline_const, span);
         .                   }
-- line 1104 ----------------------------------------
-- line 1108 ----------------------------------------
         .                       id: DUMMY_NODE_ID,
         .                       value: self.mk_expr(blk.span, ExprKind::Block(blk, None), AttrVec::new()),
         .                   };
         .                   let blk_span = anon_const.value.span;
         .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
         .               }
         .           
         .               /// Parses mutability (`mut` or nothing).
        20 ( 0.00%)      fn parse_mutability(&mut self) -> Mutability {
         .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
     6,640 ( 0.00%)      }
         .           
         .               /// Possibly parses mutability (`const` or `mut`).
         .               fn parse_const_or_mut(&mut self) -> Option<Mutability> {
         .                   if self.eat_keyword(kw::Mut) {
         .                       Some(Mutability::Mut)
         .                   } else if self.eat_keyword(kw::Const) {
         .                       Some(Mutability::Not)
         .                   } else {
         .                       None
         .                   }
         .               }
         .           
         .               fn parse_field_name(&mut self) -> PResult<'a, Ident> {
         8 ( 0.00%)          if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) = self.token.kind
         .                   {
         .                       self.expect_no_suffix(self.token.span, "a tuple index", suffix);
         .                       self.bump();
         .                       Ok(Ident::new(symbol, self.prev_token.span))
         .                   } else {
        12 ( 0.00%)              self.parse_ident_common(true)
         .                   }
         .               }
         .           
         .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
    25,250 ( 0.00%)          self.parse_mac_args_common(true).map(P)
         .               }
         .           
         .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
        45 ( 0.00%)          self.parse_mac_args_common(false)
         .               }
         .           
   105,912 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
    94,144 ( 0.00%)          Ok(
    58,912 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
        54 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
        54 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
         .                       {
    47,064 ( 0.00%)                  match self.parse_token_tree() {
    58,830 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
         .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
         .                               {
    23,532 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
         .                               }
         .                               _ => unreachable!(),
         .                           }
         4 ( 0.00%)              } else if !delimited_only {
         .                           if self.eat(&token::Eq) {
         2 ( 0.00%)                      let eq_span = self.prev_token.span;
         .           
         .                               // Collect tokens because they are used during lowering to HIR.
         2 ( 0.00%)                      let expr = self.parse_expr_force_collect()?;
         2 ( 0.00%)                      let span = expr.span;
         .           
        10 ( 0.00%)                      let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
        18 ( 0.00%)                      MacArgs::Eq(eq_span, Token::new(token_kind, span))
         .                           } else {
         .                               MacArgs::Empty
         .                           }
         .                       } else {
         .                           return self.unexpected();
         .                       },
         .                   )
    82,376 ( 0.00%)      }
         .           
         .               fn parse_or_use_outer_attributes(
         .                   &mut self,
         .                   already_parsed_attrs: Option<AttrWrapper>,
         .               ) -> PResult<'a, AttrWrapper> {
    30,564 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
         .                       Ok(attrs)
         .                   } else {
    20,200 ( 0.00%)              self.parse_outer_attributes()
         .                   }
         .               }
         .           
         .               /// Parses a single token tree from the input.
 1,350,456 ( 0.02%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
 1,062,349 ( 0.02%)          match self.token.kind {
         .                       token::OpenDelim(..) => {
         .                           let depth = self.token_cursor.stack.len();
         .           
         .                           // We keep advancing the token cursor until we hit
         .                           // the matching `CloseDelim` token.
 1,273,978 ( 0.02%)                  while !(depth == self.token_cursor.stack.len()
         .                               && matches!(self.token.kind, token::CloseDelim(_)))
         .                           {
         .                               // Advance one token at a time, so `TokenCursor::next()`
         .                               // can capture these tokens if necessary.
   915,338 ( 0.01%)                      self.bump();
         .                           }
         .                           // We are still inside the frame corresponding
         .                           // to the delimited stream we captured, so grab
         .                           // the tokens from this frame.
         .                           let frame = &self.token_cursor.frame;
    59,650 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
    59,650 ( 0.00%)                  let span = frame.span;
    29,825 ( 0.00%)                  let delim = frame.delim;
         .                           // Consume close delimiter
    59,650 ( 0.00%)                  self.bump();
   149,125 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
         .                       }
         .                       token::CloseDelim(_) | token::Eof => unreachable!(),
         .                       _ => {
   277,964 ( 0.00%)                  self.bump();
   694,910 ( 0.01%)                  TokenTree::Token(self.prev_token.clone())
         .                       }
         .                   }
 1,181,649 ( 0.02%)      }
         .           
         .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
         .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
         .                   let mut tts = Vec::new();
         .                   while self.token != token::Eof {
         .                       tts.push(self.parse_token_tree());
         .                   }
         .                   Ok(tts)
-- line 1234 ----------------------------------------
-- line 1244 ----------------------------------------
         .                   }
         .                   TokenStream::new(result)
         .               }
         .           
         .               /// Evaluates the closure with restrictions in place.
         .               ///
         .               /// Afters the closure is evaluated, restrictions are reset.
         .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
    13,826 ( 0.00%)          let old = self.restrictions;
    17,371 ( 0.00%)          self.restrictions = res;
         .                   let res = f(self);
    13,964 ( 0.00%)          self.restrictions = old;
         .                   res
         .               }
         .           
   108,632 ( 0.00%)      fn is_crate_vis(&self) -> bool {
    67,895 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
   122,211 ( 0.00%)      }
         .           
         .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
         .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
         .               /// If the following element can't be a tuple (i.e., it's a function definition), then
         .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
         .               /// so emit a proper diagnostic.
         .               // Public for rustfmt usage.
       790 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
       158 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
         .           
        79 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
       316 ( 0.00%)          if self.is_crate_vis() {
         .                       self.bump(); // `crate`
         .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
         .                       return Ok(Visibility {
         .                           span: self.prev_token.span,
         .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
         .                           tokens: None,
         .                       });
         .                   }
         .           
         .                   if !self.eat_keyword(kw::Pub) {
         .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
         .                       // keyword to grab a span from for inherited visibility; an empty span at the
         .                       // beginning of the current token would seem to be the "Schelling span".
        71 ( 0.00%)              return Ok(Visibility {
       213 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
         .                           kind: VisibilityKind::Inherited,
         .                           tokens: None,
         .                       });
         .                   }
         8 ( 0.00%)          let lo = self.prev_token.span;
         .           
        40 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
         .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
         .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
         .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
         .                       // by the following tokens.
         .                       if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
         .                       // account for `pub(crate::foo)`
         .                       {
         .                           // Parse `pub(crate)`.
-- line 1303 ----------------------------------------
-- line 1338 ----------------------------------------
         .                       } else if let FollowedByType::No = fbt {
         .                           // Provide this diagnostic if a type cannot follow;
         .                           // in particular, if this is not a tuple struct.
         .                           self.recover_incorrect_vis_restriction()?;
         .                           // Emit diagnostic, but continue with public visibility.
         .                       }
         .                   }
         .           
        24 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
       711 ( 0.00%)      }
         .           
         .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
         .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
         .                   self.bump(); // `(`
         .                   let path = self.parse_path(PathStyle::Mod)?;
         .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
         .           
         .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
         .                       )
         .                       .emit();
         .           
         .                   Ok(())
         .               }
         .           
         .               /// Parses `extern string_literal?`.
         .               fn parse_extern(&mut self) -> Extern {
        14 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
         .               }
         .           
         .               /// Parses a string literal as an ABI spec.
         .               fn parse_abi(&mut self) -> Option<StrLit> {
         .                   match self.parse_str_lit() {
         .                       Ok(str_lit) => Some(str_lit),
         .                       Err(Some(lit)) => match lit.kind {
         .                           ast::LitKind::Err(_) => None,
-- line 1386 ----------------------------------------
-- line 1395 ----------------------------------------
         .                                   .emit();
         .                               None
         .                           }
         .                       },
         .                       Err(None) => None,
         .                   }
         .               }
         .           
       120 ( 0.00%)      pub fn collect_tokens_no_attrs<R: AstLike>(
         .                   &mut self,
         .                   f: impl FnOnce(&mut Self) -> PResult<'a, R>,
         .               ) -> PResult<'a, R> {
         .                   // The only reason to call `collect_tokens_no_attrs` is if you want tokens, so use
         .                   // `ForceCollect::Yes`
         .                   self.collect_tokens_trailing_token(
         .                       AttrWrapper::empty(),
         .                       ForceCollect::Yes,
        20 ( 0.00%)              |this, _attrs| Ok((f(this)?, TrailingToken::None)),
         .                   )
       120 ( 0.00%)      }
         .           
         .               /// `::{` or `::*`
   316,096 ( 0.01%)      fn is_import_coupler(&mut self) -> bool {
   158,048 ( 0.00%)          self.check(&token::ModSep)
         .                       && self.look_ahead(1, |t| {
   190,210 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
         .                       })
   318,330 ( 0.01%)      }
         .           
         .               pub fn clear_expected_tokens(&mut self) {
         .                   self.expected_tokens.clear();
         .               }
         .           }
         .           
         .           crate fn make_unclosed_delims_error(
         .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
         .                   err.span_label(sp, "closing delimiter possibly meant for this");
         .               }
         .               if let Some(sp) = unmatched.unclosed_span {
         .                   err.span_label(sp, "unclosed delimiter");
         .               }
         .               Some(err)
         .           }
         .           
 1,236,040 ( 0.02%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
   618,020 ( 0.01%)      *sess.reached_eof.borrow_mut() |=
         .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
   618,020 ( 0.01%)      for unmatched in unclosed_delims.drain(..) {
         .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
         .                       e.emit();
         .                   }
         .               }
 1,236,040 ( 0.02%)  }
         .           
         .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
         .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
         .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
         .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
         .           /// `AttrAnnotatedTokenTree::Delimited` tokens
         .           #[derive(Debug, Clone)]
         .           pub enum FlatToken {
-- line 1474 ----------------------------------------

 4,653,110 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir                 

-- line 5 ----------------------------------------
        .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
        .           unsafe impl GlobalAlloc for System {
        .               #[inline]
        .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
        .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
        .                   // So only rely on MIN_ALIGN if size >= align.
        .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
        .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
7,660,304 ( 0.12%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
5,745,225 ( 0.09%)              libc::malloc(layout.size()) as *mut u8
        .                   } else {
        .                       #[cfg(target_os = "macos")]
        .                       {
        .                           if layout.align() > (1 << 31) {
        .                               return ptr::null_mut();
        .                           }
        .                       }
        .                       aligned_malloc(&layout)
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
        .                   // See the comment above in `alloc` for why this check looks the way it does.
   30,472 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
   45,708 ( 0.00%)              libc::calloc(layout.size(), 1) as *mut u8
        .                   } else {
        .                       let ptr = self.alloc(layout);
        .                       if !ptr.is_null() {
        .                           ptr::write_bytes(ptr, 0, layout.size());
        .                       }
        .                       ptr
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
1,922,683 ( 0.03%)          libc::free(ptr as *mut libc::c_void)
        .               }
        .           
        .               #[inline]
        .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
  354,904 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
  709,808 ( 0.01%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
        .                   } else {
        .                       realloc_fallback(self, ptr, layout, new_size)
        .                   }
        .               }
        .           }
        .           
        .           cfg_if::cfg_if! {
        .               if #[cfg(any(
-- line 56 ----------------------------------------
-- line 84 ----------------------------------------
        .               } else if #[cfg(target_os = "wasi")] {
        .                   #[inline]
        .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
        .                       libc::aligned_alloc(layout.align(), layout.size()) as *mut u8
        .                   }
        .               } else {
        .                   #[inline]
        .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
        2 ( 0.00%)              let mut out = ptr::null_mut();
        .                       // posix_memalign requires that the alignment be a multiple of `sizeof(void*)`.
        .                       // Since these are all powers of 2, we can just use max.
        .                       let align = layout.align().max(crate::mem::size_of::<usize>());
        4 ( 0.00%)              let ret = libc::posix_memalign(&mut out, align, layout.size());
        4 ( 0.00%)              if ret != 0 { ptr::null_mut() } else { out as *mut u8 }
        .                   }
        .               }
        .           }

        2 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/bit_set.rs
--------------------------------------------------------------------------------
Ir                 

-- line 44 ----------------------------------------
        .               }
        .               Some((start, end))
        .           }
        .           
        .           macro_rules! bit_relations_inherent_impls {
        .               () => {
        .                   /// Sets `self = self | other` and returns `true` if `self` changed
        .                   /// (i.e., if new bits were added).
  367,312 ( 0.01%)          pub fn union<Rhs>(&mut self, other: &Rhs) -> bool
        .                   where
        .                       Self: BitRelations<Rhs>,
        .                   {
        .                       <Self as BitRelations<Rhs>>::union(self, other)
  290,381 ( 0.00%)          }
        .           
        .                   /// Sets `self = self - other` and returns `true` if `self` changed.
        .                   /// (i.e., if any bits were removed).
   74,485 ( 0.00%)          pub fn subtract<Rhs>(&mut self, other: &Rhs) -> bool
        .                   where
        .                       Self: BitRelations<Rhs>,
        .                   {
        .                       <Self as BitRelations<Rhs>>::subtract(self, other)
   74,485 ( 0.00%)          }
        .           
        .                   /// Sets `self = self & other` and return `true` if `self` changed.
        .                   /// (i.e., if any bits were removed).
        .                   pub fn intersect<Rhs>(&mut self, other: &Rhs) -> bool
        .                   where
        .                       Self: BitRelations<Rhs>,
        .                   {
        .                       <Self as BitRelations<Rhs>>::intersect(self, other)
-- line 74 ----------------------------------------
-- line 92 ----------------------------------------
        .               domain_size: usize,
        .               words: Vec<Word>,
        .               marker: PhantomData<T>,
        .           }
        .           
        .           impl<T> BitSet<T> {
        .               /// Gets the domain size.
        .               pub fn domain_size(&self) -> usize {
       39 ( 0.00%)          self.domain_size
        .               }
        .           }
        .           
        .           impl<T: Idx> BitSet<T> {
        .               /// Creates a new, empty bitset with a given `domain_size`.
        .               #[inline]
        .               pub fn new_empty(domain_size: usize) -> BitSet<T> {
        .                   let num_words = num_words(domain_size);
   19,631 ( 0.00%)          BitSet { domain_size, words: vec![0; num_words], marker: PhantomData }
        .               }
        .           
        .               /// Creates a new, filled bitset with a given `domain_size`.
        .               #[inline]
        .               pub fn new_filled(domain_size: usize) -> BitSet<T> {
        .                   let num_words = num_words(domain_size);
      680 ( 0.00%)          let mut result = BitSet { domain_size, words: vec![!0; num_words], marker: PhantomData };
        .                   result.clear_excess_bits();
        .                   result
        .               }
        .           
        .               /// Clear all elements.
        .               #[inline]
        .               pub fn clear(&mut self) {
        .                   for word in &mut self.words {
   12,594 ( 0.00%)              *word = 0;
        .                   }
        .               }
        .           
        .               /// Clear excess bits in the final word.
        .               fn clear_excess_bits(&mut self) {
       44 ( 0.00%)          let num_bits_in_final_word = self.domain_size % WORD_BITS;
      360 ( 0.00%)          if num_bits_in_final_word > 0 {
      316 ( 0.00%)              let mask = (1 << num_bits_in_final_word) - 1;
      676 ( 0.00%)              let final_word_idx = self.words.len() - 1;
      180 ( 0.00%)              self.words[final_word_idx] &= mask;
        .                   }
        .               }
        .           
        .               /// Count the number of set bits in the set.
        .               pub fn count(&self) -> usize {
        .                   self.words.iter().map(|e| e.count_ones() as usize).sum()
        .               }
        .           
        .               /// Returns `true` if `self` contains `elem`.
        .               #[inline]
        .               pub fn contains(&self, elem: T) -> bool {
  388,005 ( 0.01%)          assert!(elem.index() < self.domain_size);
        .                   let (word_index, mask) = word_index_and_mask(elem);
  496,162 ( 0.01%)          (self.words[word_index] & mask) != 0
        .               }
        .           
        .               /// Is `self` is a (non-strict) superset of `other`?
        .               #[inline]
        .               pub fn superset(&self, other: &BitSet<T>) -> bool {
        .                   assert_eq!(self.domain_size, other.domain_size);
        .                   self.words.iter().zip(&other.words).all(|(a, b)| (a & b) == *b)
        .               }
-- line 157 ----------------------------------------
-- line 160 ----------------------------------------
        .               #[inline]
        .               pub fn is_empty(&self) -> bool {
        .                   self.words.iter().all(|a| *a == 0)
        .               }
        .           
        .               /// Insert `elem`. Returns whether the set has changed.
        .               #[inline]
        .               pub fn insert(&mut self, elem: T) -> bool {
1,443,535 ( 0.02%)          assert!(elem.index() < self.domain_size);
        .                   let (word_index, mask) = word_index_and_mask(elem);
        .                   let word_ref = &mut self.words[word_index];
  527,329 ( 0.01%)          let word = *word_ref;
1,054,658 ( 0.02%)          let new_word = word | mask;
  714,452 ( 0.01%)          *word_ref = new_word;
  571,329 ( 0.01%)          new_word != word
        .               }
        .           
        .               #[inline]
        .               pub fn insert_range(&mut self, elems: impl RangeBounds<T>) {
        .                   let Some((start, end)) = inclusive_start_end(elems, self.domain_size) else {
        .                       return;
        .                   };
        .           
-- line 182 ----------------------------------------
-- line 199 ----------------------------------------
        .                   } else {
        .                       self.words[start_word_index] |= end_mask | (end_mask - start_mask);
        .                   }
        .               }
        .           
        .               /// Sets all bits to true.
        .               pub fn insert_all(&mut self) {
        .                   for word in &mut self.words {
       88 ( 0.00%)              *word = !0;
        .                   }
        .                   self.clear_excess_bits();
        .               }
        .           
        .               /// Returns `true` if the set has changed.
        .               #[inline]
        .               pub fn remove(&mut self, elem: T) -> bool {
  542,809 ( 0.01%)          assert!(elem.index() < self.domain_size);
        .                   let (word_index, mask) = word_index_and_mask(elem);
        .                   let word_ref = &mut self.words[word_index];
   35,311 ( 0.00%)          let word = *word_ref;
  519,400 ( 0.01%)          let new_word = word & !mask;
  259,046 ( 0.00%)          *word_ref = new_word;
   70,622 ( 0.00%)          new_word != word
        .               }
        .           
        .               /// Gets a slice of the underlying words.
        .               pub fn words(&self) -> &[Word] {
        .                   &self.words
        .               }
        .           
        .               /// Iterates over the indices of set bits in a sorted order.
-- line 229 ----------------------------------------
-- line 308 ----------------------------------------
        .               }
        .           
        .               bit_relations_inherent_impls! {}
        .           }
        .           
        .           // dense REL dense
        .           impl<T: Idx> BitRelations<BitSet<T>> for BitSet<T> {
        .               fn union(&mut self, other: &BitSet<T>) -> bool {
  230,793 ( 0.00%)          assert_eq!(self.domain_size, other.domain_size);
2,477,240 ( 0.04%)          bitwise(&mut self.words, &other.words, |a, b| a | b)
        .               }
        .           
        .               fn subtract(&mut self, other: &BitSet<T>) -> bool {
        .                   assert_eq!(self.domain_size, other.domain_size);
    6,322 ( 0.00%)          bitwise(&mut self.words, &other.words, |a, b| a & !b)
        .               }
        .           
        .               fn intersect(&mut self, other: &BitSet<T>) -> bool {
        .                   assert_eq!(self.domain_size, other.domain_size);
        .                   bitwise(&mut self.words, &other.words, |a, b| a & b)
        .               }
        .           }
        .           
        .           // Applies a function to mutate a bitset, and returns true if any
        .           // of the applications return true
        .           fn sequential_update<T: Idx>(
        .               mut self_update: impl FnMut(T) -> bool,
        .               it: impl Iterator<Item = T>,
        .           ) -> bool {
        .               let mut changed = false;
   64,154 ( 0.00%)      for elem in it {
  192,462 ( 0.00%)          changed |= self_update(elem);
        .               }
        .               changed
   59,180 ( 0.00%)  }
        .           
        .           // Optimization of intersection for SparseBitSet that's generic
        .           // over the RHS
        .           fn sparse_intersect<T: Idx>(
        .               set: &mut SparseBitSet<T>,
        .               other_contains: impl Fn(&T) -> bool,
        .           ) -> bool {
        .               let size = set.elems.len();
-- line 350 ----------------------------------------
-- line 413 ----------------------------------------
        .                       HybridBitSet::Dense(dense) => dense.intersect(other),
        .                   }
        .               }
        .           }
        .           
        .           // dense REL hybrid
        .           impl<T: Idx> BitRelations<HybridBitSet<T>> for BitSet<T> {
        .               fn union(&mut self, other: &HybridBitSet<T>) -> bool {
   59,588 ( 0.00%)          assert_eq!(self.domain_size, other.domain_size());
   29,794 ( 0.00%)          match other {
        .                       HybridBitSet::Sparse(sparse) => {
        .                           sequential_update(|elem| self.insert(elem), sparse.iter().cloned())
        .                       }
        .                       HybridBitSet::Dense(dense) => self.union(dense),
        .                   }
        .               }
        .           
        .               fn subtract(&mut self, other: &HybridBitSet<T>) -> bool {
   59,588 ( 0.00%)          assert_eq!(self.domain_size, other.domain_size());
   29,794 ( 0.00%)          match other {
        .                       HybridBitSet::Sparse(sparse) => {
        .                           sequential_update(|elem| self.remove(elem), sparse.iter().cloned())
        .                       }
        .                       HybridBitSet::Dense(dense) => self.subtract(dense),
        .                   }
        .               }
        .           
        .               fn intersect(&mut self, other: &HybridBitSet<T>) -> bool {
-- line 440 ----------------------------------------
-- line 455 ----------------------------------------
        .                       HybridBitSet::Dense(dense) => self.intersect(dense),
        .                   }
        .               }
        .           }
        .           
        .           // hybrid REL hybrid
        .           impl<T: Idx> BitRelations<HybridBitSet<T>> for HybridBitSet<T> {
        .               fn union(&mut self, other: &HybridBitSet<T>) -> bool {
      228 ( 0.00%)          assert_eq!(self.domain_size(), other.domain_size());
       76 ( 0.00%)          match self {
        .                       HybridBitSet::Sparse(_) => {
       76 ( 0.00%)                  match other {
        .                               HybridBitSet::Sparse(other_sparse) => {
        .                                   // Both sets are sparse. Add the elements in
        .                                   // `other_sparse` to `self` one at a time. This
        .                                   // may or may not cause `self` to be densified.
        .                                   let mut changed = false;
        .                                   for elem in other_sparse.iter() {
      228 ( 0.00%)                              changed |= self.insert(*elem);
        .                                   }
        .                                   changed
        .                               }
        .           
        .                               HybridBitSet::Dense(other_dense) => self.union(other_dense),
        .                           }
        .                       }
        .           
-- line 481 ----------------------------------------
-- line 508 ----------------------------------------
        .                           HybridBitSet::Dense(other_dense) => self_dense.intersect(other_dense),
        .                       },
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Clone for BitSet<T> {
        .               fn clone(&self) -> Self {
       40 ( 0.00%)          BitSet { domain_size: self.domain_size, words: self.words.clone(), marker: PhantomData }
        .               }
        .           
  362,502 ( 0.01%)      fn clone_from(&mut self, from: &Self) {
  223,636 ( 0.00%)          if self.domain_size != from.domain_size {
        .                       self.words.resize(from.domain_size, 0);
        .                       self.domain_size = from.domain_size;
        .                   }
        .           
        .                   self.words.copy_from_slice(&from.words);
        .               }
        .           }
        .           
-- line 528 ----------------------------------------
-- line 599 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, T: Idx> Iterator for BitIter<'a, T> {
        .               type Item = T;
        .               fn next(&mut self) -> Option<T> {
        .                   loop {
5,762,795 ( 0.09%)              if self.word != 0 {
        .                           // Get the position of the next set bit in the current word,
        .                           // then clear the bit.
        .                           let bit_pos = self.word.trailing_zeros() as usize;
        .                           let bit = 1 << bit_pos;
        .                           self.word ^= bit;
  794,232 ( 0.01%)                  return Some(T::new(bit_pos + self.offset));
        .                       }
        .           
        .                       // Move onto the next word. `wrapping_add()` is needed to handle
        .                       // the degenerate initial value given to `offset` in `new()`.
        .                       let word = self.iter.next()?;
2,561,834 ( 0.04%)              self.word = *word;
        .                       self.offset = self.offset.wrapping_add(WORD_BITS);
        .                   }
        .               }
        .           }
        .           
        .           #[inline]
        .           fn bitwise<Op>(out_vec: &mut [Word], in_vec: &[Word], op: Op) -> bool
        .           where
        .               Op: Fn(Word, Word) -> Word,
        .           {
  308,540 ( 0.00%)      assert_eq!(out_vec.len(), in_vec.len());
        .               let mut changed = 0;
  154,000 ( 0.00%)      for (out_elem, in_elem) in iter::zip(out_vec, in_vec) {
2,524,218 ( 0.04%)          let old_val = *out_elem;
2,412,430 ( 0.04%)          let new_val = op(old_val, *in_elem);
2,480,230 ( 0.04%)          *out_elem = new_val;
        .                   // This is essentially equivalent to a != with changed being a bool, but
        .                   // in practice this code gets auto-vectorized by the compiler for most
        .                   // operators. Using != here causes us to generate quite poor code as the
        .                   // compiler tries to go back to a boolean on each loop iteration.
5,048,698 ( 0.08%)          changed |= old_val ^ new_val;
        .               }
        .               changed != 0
        .           }
        .           
        .           const SPARSE_MAX: usize = 8;
        .           
        .           /// A fixed-size bitset type with a sparse representation and a maximum of
        .           /// `SPARSE_MAX` elements. The elements are stored as a sorted `ArrayVec` with
        .           /// no duplicates.
        .           ///
        .           /// This type is used by `HybridBitSet`; do not use directly.
        .           #[derive(Clone, Debug)]
        .           pub struct SparseBitSet<T> {
   27,626 ( 0.00%)      domain_size: usize,
        .               elems: ArrayVec<T, SPARSE_MAX>,
        .           }
        .           
        .           impl<T: Idx> SparseBitSet<T> {
        .               fn new_empty(domain_size: usize) -> Self {
        .                   SparseBitSet { domain_size, elems: ArrayVec::new() }
        .               }
        .           
        .               fn len(&self) -> usize {
  197,894 ( 0.00%)          self.elems.len()
        .               }
        .           
        .               fn is_empty(&self) -> bool {
        .                   self.elems.len() == 0
        .               }
        .           
        .               fn contains(&self, elem: T) -> bool {
      564 ( 0.00%)          assert!(elem.index() < self.domain_size);
        .                   self.elems.contains(&elem)
        .               }
        .           
        .               fn insert(&mut self, elem: T) -> bool {
  197,518 ( 0.00%)          assert!(elem.index() < self.domain_size);
  120,662 ( 0.00%)          let changed = if let Some(i) = self.elems.iter().position(|&e| e.index() >= elem.index()) {
   48,516 ( 0.00%)              if self.elems[i] == elem {
        .                           // `elem` is already in the set.
        .                           false
        .                       } else {
        .                           // `elem` is smaller than one or more existing elements.
        .                           self.elems.insert(i, elem);
        .                           true
        .                       }
        .                   } else {
        .                       // `elem` is larger than all existing elements.
        .                       self.elems.push(elem);
        .                       true
        .                   };
  197,518 ( 0.00%)          assert!(self.len() <= SPARSE_MAX);
        .                   changed
        .               }
        .           
        .               fn remove(&mut self, elem: T) -> bool {
  146,196 ( 0.00%)          assert!(elem.index() < self.domain_size);
        .                   if let Some(i) = self.elems.iter().position(|&e| e == elem) {
   30,698 ( 0.00%)              self.elems.remove(i);
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               fn to_dense(&self) -> BitSet<T> {
        .                   let mut dense = BitSet::new_empty(self.domain_size);
        .                   for elem in self.elems.iter() {
    1,504 ( 0.00%)              dense.insert(*elem);
        .                   }
        .                   dense
        .               }
        .           
        .               fn iter(&self) -> slice::Iter<'_, T> {
   43,188 ( 0.00%)          self.elems.iter()
        .               }
        .           
        .               bit_relations_inherent_impls! {}
        .           }
        .           
        .           impl<T: Idx + Ord> SparseBitSet<T> {
        .               fn last_set_in(&self, range: impl RangeBounds<T>) -> Option<T> {
        .                   let mut last_leq = None;
-- line 723 ----------------------------------------
-- line 738 ----------------------------------------
        .           /// number of elements, but a large `domain_size`, and are cleared frequently.
        .           ///
        .           /// `T` is an index type, typically a newtyped `usize` wrapper, but it can also
        .           /// just be `usize`.
        .           ///
        .           /// All operations that involve an element will panic if the element is equal
        .           /// to or greater than the domain size. All operations that involve two bitsets
        .           /// will panic if the bitsets have differing domain sizes.
  254,354 ( 0.00%)  #[derive(Clone)]
        .           pub enum HybridBitSet<T> {
        .               Sparse(SparseBitSet<T>),
        .               Dense(BitSet<T>),
        .           }
        .           
        .           impl<T: Idx> fmt::Debug for HybridBitSet<T> {
        .               fn fmt(&self, w: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   match self {
-- line 754 ----------------------------------------
-- line 755 ----------------------------------------
        .                       Self::Sparse(b) => b.fmt(w),
        .                       Self::Dense(b) => b.fmt(w),
        .                   }
        .               }
        .           }
        .           
        .           impl<T: Idx> HybridBitSet<T> {
        .               pub fn new_empty(domain_size: usize) -> Self {
       56 ( 0.00%)          HybridBitSet::Sparse(SparseBitSet::new_empty(domain_size))
        .               }
        .           
        .               pub fn domain_size(&self) -> usize {
        .                   match self {
        .                       HybridBitSet::Sparse(sparse) => sparse.domain_size,
        .                       HybridBitSet::Dense(dense) => dense.domain_size,
        .                   }
        .               }
        .           
        .               pub fn clear(&mut self) {
        .                   let domain_size = self.domain_size();
   18,428 ( 0.00%)          *self = HybridBitSet::new_empty(domain_size);
        .               }
        .           
        .               pub fn contains(&self, elem: T) -> bool {
        .                   match self {
        .                       HybridBitSet::Sparse(sparse) => sparse.contains(elem),
        .                       HybridBitSet::Dense(dense) => dense.contains(elem),
        .                   }
        .               }
-- line 783 ----------------------------------------
-- line 799 ----------------------------------------
        .                       HybridBitSet::Sparse(sparse) => sparse.is_empty(),
        .                       HybridBitSet::Dense(dense) => dense.is_empty(),
        .                   }
        .               }
        .           
        .               /// Returns the previous element present in the bitset from `elem`,
        .               /// inclusively of elem. That is, will return `Some(elem)` if elem is in the
        .               /// bitset.
   43,188 ( 0.00%)      pub fn last_set_in(&self, range: impl RangeBounds<T>) -> Option<T>
        .               where
        .                   T: Ord,
        .               {
   43,188 ( 0.00%)          match self {
        .                       HybridBitSet::Sparse(sparse) => sparse.last_set_in(range),
        .                       HybridBitSet::Dense(dense) => dense.last_set_in(range),
        .                   }
   64,782 ( 0.00%)      }
        .           
  908,091 ( 0.01%)      pub fn insert(&mut self, elem: T) -> bool {
        .                   // No need to check `elem` against `self.domain_size` here because all
        .                   // the match cases check it, one way or another.
  201,798 ( 0.00%)          match self {
  197,894 ( 0.00%)              HybridBitSet::Sparse(sparse) if sparse.len() < SPARSE_MAX => {
        .                           // The set is sparse and has space for `elem`.
        .                           sparse.insert(elem)
        .                       }
        .                       HybridBitSet::Sparse(sparse) if sparse.contains(elem) => {
        .                           // The set is sparse and does not have space for `elem`, but
        .                           // that doesn't matter because `elem` is already present.
        .                           false
        .                       }
        .                       HybridBitSet::Sparse(sparse) => {
        .                           // The set is sparse and full. Convert to a dense set.
        .                           let mut dense = sparse.to_dense();
        .                           let changed = dense.insert(elem);
      188 ( 0.00%)                  assert!(changed);
    1,128 ( 0.00%)                  *self = HybridBitSet::Dense(dense);
        .                           changed
        .                       }
        .                       HybridBitSet::Dense(dense) => dense.insert(elem),
        .                   }
  807,192 ( 0.01%)      }
        .           
        .               pub fn insert_range(&mut self, elems: impl RangeBounds<T>) {
        .                   // No need to check `elem` against `self.domain_size` here because all
        .                   // the match cases check it, one way or another.
        .                   let start = match elems.start_bound().cloned() {
        .                       Bound::Included(start) => start.index(),
        .                       Bound::Excluded(start) => start.index() + 1,
        .                       Bound::Unbounded => 0,
-- line 848 ----------------------------------------
-- line 879 ----------------------------------------
        .                   match self {
        .                       HybridBitSet::Sparse(_) => {
        .                           *self = HybridBitSet::Dense(BitSet::new_filled(domain_size));
        .                       }
        .                       HybridBitSet::Dense(dense) => dense.insert_all(),
        .                   }
        .               }
        .           
   71,095 ( 0.00%)      pub fn remove(&mut self, elem: T) -> bool {
        .                   // Note: we currently don't bother going from Dense back to Sparse.
  146,208 ( 0.00%)          match self {
        .                       HybridBitSet::Sparse(sparse) => sparse.remove(elem),
        .                       HybridBitSet::Dense(dense) => dense.remove(elem),
        .                   }
  142,190 ( 0.00%)      }
        .           
        .               /// Converts to a dense set, consuming itself in the process.
        .               pub fn to_dense(self) -> BitSet<T> {
        .                   match self {
        .                       HybridBitSet::Sparse(sparse) => sparse.to_dense(),
        .                       HybridBitSet::Dense(dense) => dense,
        .                   }
        .               }
        .           
        .               pub fn iter(&self) -> HybridIter<'_, T> {
      450 ( 0.00%)          match self {
      285 ( 0.00%)              HybridBitSet::Sparse(sparse) => HybridIter::Sparse(sparse.iter()),
        .                       HybridBitSet::Dense(dense) => HybridIter::Dense(dense.iter()),
        .                   }
        .               }
        .           
        .               bit_relations_inherent_impls! {}
        .           }
        .           
        .           pub enum HybridIter<'a, T: Idx> {
-- line 913 ----------------------------------------
-- line 935 ----------------------------------------
        .           /// to or greater than the domain size.
        .           #[derive(Clone, Debug, PartialEq)]
        .           pub struct GrowableBitSet<T: Idx> {
        .               bit_set: BitSet<T>,
        .           }
        .           
        .           impl<T: Idx> GrowableBitSet<T> {
        .               /// Ensure that the set can hold at least `min_domain_size` elements.
    6,475 ( 0.00%)      pub fn ensure(&mut self, min_domain_size: usize) {
    1,850 ( 0.00%)          if self.bit_set.domain_size < min_domain_size {
        2 ( 0.00%)              self.bit_set.domain_size = min_domain_size;
        .                   }
        .           
        .                   let min_num_words = num_words(min_domain_size);
    3,700 ( 0.00%)          if self.bit_set.words.len() < min_num_words {
        .                       self.bit_set.words.resize(min_num_words, 0)
        .                   }
    5,550 ( 0.00%)      }
        .           
        .               pub fn new_empty() -> GrowableBitSet<T> {
   17,796 ( 0.00%)          GrowableBitSet { bit_set: BitSet::new_empty(0) }
        .               }
        .           
        .               pub fn with_capacity(capacity: usize) -> GrowableBitSet<T> {
        8 ( 0.00%)          GrowableBitSet { bit_set: BitSet::new_empty(capacity) }
        .               }
        .           
        .               /// Returns `true` if the set has changed.
        .               #[inline]
        .               pub fn insert(&mut self, elem: T) -> bool {
    2,052 ( 0.00%)          self.ensure(elem.index() + 1);
        .                   self.bit_set.insert(elem)
        .               }
        .           
        .               /// Returns `true` if the set has changed.
        .               #[inline]
        .               pub fn remove(&mut self, elem: T) -> bool {
        .                   self.ensure(elem.index() + 1);
        .                   self.bit_set.remove(elem)
-- line 973 ----------------------------------------
-- line 976 ----------------------------------------
        .               #[inline]
        .               pub fn is_empty(&self) -> bool {
        .                   self.bit_set.is_empty()
        .               }
        .           
        .               #[inline]
        .               pub fn contains(&self, elem: T) -> bool {
        .                   let (word_index, mask) = word_index_and_mask(elem);
    1,678 ( 0.00%)          self.bit_set.words.get(word_index).map_or(false, |word| (word & mask) != 0)
        .               }
        .           }
        .           
        .           /// A fixed-size 2D bit matrix type with a dense representation.
        .           ///
        .           /// `R` and `C` are index types used to identify rows and columns respectively;
        .           /// typically newtyped `usize` wrappers, but they can also just be `usize`.
        .           ///
-- line 992 ----------------------------------------
-- line 1001 ----------------------------------------
        .           }
        .           
        .           impl<R: Idx, C: Idx> BitMatrix<R, C> {
        .               /// Creates a new `rows x columns` matrix, initially empty.
        .               pub fn new(num_rows: usize, num_columns: usize) -> BitMatrix<R, C> {
        .                   // For every element, we need one bit for every other
        .                   // element. Round up to an even number of words.
        .                   let words_per_row = num_words(num_columns);
      152 ( 0.00%)          BitMatrix {
        .                       num_rows,
        .                       num_columns,
      114 ( 0.00%)              words: vec![0; num_rows * words_per_row],
        .                       marker: PhantomData,
        .                   }
        .               }
        .           
        .               /// Creates a new matrix, with `row` used as the value for every row.
        .               pub fn from_row_n(row: &BitSet<C>, num_rows: usize) -> BitMatrix<R, C> {
        .                   let num_columns = row.domain_size();
        .                   let words_per_row = num_words(num_columns);
-- line 1020 ----------------------------------------
-- line 1029 ----------------------------------------
        .           
        .               pub fn rows(&self) -> impl Iterator<Item = R> {
        .                   (0..self.num_rows).map(R::new)
        .               }
        .           
        .               /// The range of bits for a given row.
        .               fn range(&self, row: R) -> (usize, usize) {
        .                   let words_per_row = num_words(self.num_columns);
    2,221 ( 0.00%)          let start = row.index() * words_per_row;
    1,884 ( 0.00%)          (start, start + words_per_row)
        .               }
        .           
        .               /// Sets the cell at `(row, column)` to true. Put another way, insert
        .               /// `column` to the bitset for `row`.
        .               ///
        .               /// Returns `true` if this changed the matrix.
        .               pub fn insert(&mut self, row: R, column: C) -> bool {
    1,210 ( 0.00%)          assert!(row.index() < self.num_rows && column.index() < self.num_columns);
        .                   let (start, _) = self.range(row);
        .                   let (word_index, mask) = word_index_and_mask(column);
        .                   let words = &mut self.words[..];
    1,210 ( 0.00%)          let word = words[start + word_index];
      484 ( 0.00%)          let new_word = word | mask;
      242 ( 0.00%)          words[start + word_index] = new_word;
      484 ( 0.00%)          word != new_word
        .               }
        .           
        .               /// Do the bits from `row` contain `column`? Put another way, is
        .               /// the matrix cell at `(row, column)` true?  Put yet another way,
        .               /// if the matrix represents (transitive) reachability, can
        .               /// `row` reach `column`?
       95 ( 0.00%)      pub fn contains(&self, row: R, column: C) -> bool {
      475 ( 0.00%)          assert!(row.index() < self.num_rows && column.index() < self.num_columns);
        .                   let (start, _) = self.range(row);
        .                   let (word_index, mask) = word_index_and_mask(column);
      475 ( 0.00%)          (self.words[start + word_index] & mask) != 0
      190 ( 0.00%)      }
        .           
        .               /// Returns those indices that are true in rows `a` and `b`. This
        .               /// is an *O*(*n*) operation where *n* is the number of elements
        .               /// (somewhat independent from the actual size of the
        .               /// intersection, in particular).
        .               pub fn intersect_rows(&self, row1: R, row2: R) -> Vec<C> {
        .                   assert!(row1.index() < self.num_rows && row2.index() < self.num_rows);
        .                   let (row1_start, row1_end) = self.range(row1);
-- line 1073 ----------------------------------------
-- line 1090 ----------------------------------------
        .           
        .               /// Adds the bits from row `read` to the bits from row `write`, and
        .               /// returns `true` if anything changed.
        .               ///
        .               /// This is used when computing transitive reachability because if
        .               /// you have an edge `write -> read`, because in that case
        .               /// `write` can reach everything that `read` can (and
        .               /// potentially more).
      242 ( 0.00%)      pub fn union_rows(&mut self, read: R, write: R) -> bool {
    1,210 ( 0.00%)          assert!(read.index() < self.num_rows && write.index() < self.num_rows);
      242 ( 0.00%)          let (read_start, read_end) = self.range(read);
        .                   let (write_start, write_end) = self.range(write);
        .                   let words = &mut self.words[..];
        .                   let mut changed = false;
        .                   for (read_index, write_index) in iter::zip(read_start..read_end, write_start..write_end) {
    1,210 ( 0.00%)              let word = words[write_index];
      726 ( 0.00%)              let new_word = word | words[read_index];
      242 ( 0.00%)              words[write_index] = new_word;
    1,210 ( 0.00%)              changed |= word != new_word;
        .                   }
        .                   changed
      726 ( 0.00%)      }
        .           
        .               /// Adds the bits from `with` to the bits from row `write`, and
        .               /// returns `true` if anything changed.
        .               pub fn union_row_with(&mut self, with: &BitSet<C>, write: R) -> bool {
        .                   assert!(write.index() < self.num_rows);
        .                   assert_eq!(with.domain_size(), self.num_columns);
        .                   let (write_start, write_end) = self.range(write);
        .                   let mut changed = false;
-- line 1119 ----------------------------------------
-- line 1209 ----------------------------------------
        .               /// Creates a new empty sparse bit matrix with no rows or columns.
        .               pub fn new(num_columns: usize) -> Self {
        .                   Self { num_columns, rows: IndexVec::new() }
        .               }
        .           
        .               fn ensure_row(&mut self, row: R) -> &mut HybridBitSet<C> {
        .                   // Instantiate any missing rows up to and including row `row` with an empty HybridBitSet.
        .                   // Then replace row `row` with a full HybridBitSet if necessary.
      347 ( 0.00%)          self.rows.get_or_insert_with(row, || HybridBitSet::new_empty(self.num_columns))
        .               }
        .           
        .               /// Sets the cell at `(row, column)` to true. Put another way, insert
        .               /// `column` to the bitset for `row`.
        .               ///
        .               /// Returns `true` if this changed the matrix.
        .               pub fn insert(&mut self, row: R, column: C) -> bool {
    1,038 ( 0.00%)          self.ensure_row(row).insert(column)
        .               }
        .           
        .               /// Sets the cell at `(row, column)` to false. Put another way, delete
        .               /// `column` from the bitset for `row`. Has no effect if `row` does not
        .               /// exist.
        .               ///
        .               /// Returns `true` if this changed the matrix.
        .               pub fn remove(&mut self, row: R, column: C) -> bool {
-- line 1233 ----------------------------------------
-- line 1255 ----------------------------------------
        .           
        .               /// Adds the bits from row `read` to the bits from row `write`, and
        .               /// returns `true` if anything changed.
        .               ///
        .               /// This is used when computing transitive reachability because if
        .               /// you have an edge `write -> read`, because in that case
        .               /// `write` can reach everything that `read` can (and
        .               /// potentially more).
  591,962 ( 0.01%)      pub fn union_rows(&mut self, read: R, write: R) -> bool {
   84,566 ( 0.00%)          if read == write || self.row(read).is_none() {
        .                       return false;
        .                   }
        .           
        .                   self.ensure_row(write);
      418 ( 0.00%)          if let (Some(read_row), Some(write_row)) = self.rows.pick2_mut(read, write) {
        .                       write_row.union(read_row)
        .                   } else {
        .                       unreachable!()
        .                   }
  761,094 ( 0.01%)      }
        .           
        .               /// Insert all bits in the given row.
        .               pub fn insert_all_into_row(&mut self, row: R) {
        .                   self.ensure_row(row).insert_all();
        .               }
        .           
        .               pub fn rows(&self) -> impl Iterator<Item = R> {
        .                   self.rows.indices()
-- line 1282 ----------------------------------------
-- line 1284 ----------------------------------------
        .           
        .               /// Iterates through all the columns set to true in a given row of
        .               /// the matrix.
        .               pub fn iter<'a>(&'a self, row: R) -> impl Iterator<Item = C> + 'a {
        .                   self.row(row).into_iter().flat_map(|r| r.iter())
        .               }
        .           
        .               pub fn row(&self, row: R) -> Option<&HybridBitSet<C>> {
  202,755 ( 0.00%)          if let Some(Some(row)) = self.rows.get(row) { Some(row) } else { None }
        .               }
        .           
        .               /// Interescts `row` with `set`. `set` can be either `BitSet` or
        .               /// `HybridBitSet`. Has no effect if `row` does not exist.
        .               ///
        .               /// Returns true if the row was changed.
        .               pub fn intersect_row<Set>(&mut self, row: R, set: &Set) -> bool
        .               where
-- line 1300 ----------------------------------------
-- line 1329 ----------------------------------------
        .                   HybridBitSet<C>: BitRelations<Set>,
        .               {
        .                   self.ensure_row(row).union(set)
        .               }
        .           }
        .           
        .           #[inline]
        .           fn num_words<T: Idx>(domain_size: T) -> usize {
   40,345 ( 0.00%)      (domain_size.index() + WORD_BITS - 1) / WORD_BITS
        .           }
        .           
        .           #[inline]
        .           fn word_index_and_mask<T: Idx>(elem: T) -> (usize, Word) {
        .               let elem = elem.index();
2,197,691 ( 0.04%)      let word_index = elem / WORD_BITS;
  394,700 ( 0.01%)      let mask = 1 << (elem % WORD_BITS);
        .               (word_index, mask)
        .           }
        .           
        .           #[inline]
        .           fn max_bit(word: Word) -> usize {
        .               WORD_BITS - 1 - word.leading_zeros() as usize
        .           }
        .           
-- line 1352 ----------------------------------------

2,210,649 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/bit_set.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/dl-lookup.c
  ./malloc/malloc.c
  ./stdlib/msort.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
1,386,483,629 (22.29%)  events annotated

