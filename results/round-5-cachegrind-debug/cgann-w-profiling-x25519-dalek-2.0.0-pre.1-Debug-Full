--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name x25519_dalek --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --cfg feature="default" --cfg feature="std" --cfg feature="u64_backend" -C metadata=663f29bfb50fe643 -C extra-filename=-663f29bfb50fe643 --out-dir /usr/home/liquid/tmp/.tmpR8WNgs/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmpR8WNgs/target/debug/deps --extern curve25519_dalek=/usr/home/liquid/tmp/.tmpR8WNgs/target/debug/deps/libcurve25519_dalek-d8a457d071e79612.rmeta --extern rand_core=/usr/home/liquid/tmp/.tmpR8WNgs/target/debug/deps/librand_core-7d24cf3355f0e1fc.rmeta --extern zeroize=/usr/home/liquid/tmp/.tmpR8WNgs/target/debug/deps/libzeroize-ac01707e371e713f.rmeta -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-x25519-dalek-2.0.0-pre.1-Debug-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
319,658,288 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   file:function
--------------------------------------------------------------------------------
21,006,928 ( 6.57%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
15,251,433 ( 4.77%)  ./elf/dl-lookup.c:do_lookup_x
10,188,974 ( 3.19%)  ./malloc/malloc.c:_int_malloc
 9,578,213 ( 3.00%)  ./malloc/malloc.c:_int_free
 6,032,116 ( 1.89%)  ./malloc/malloc.c:malloc
 5,213,765 ( 1.63%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
 4,275,420 ( 1.34%)  ???:llvm::FPPassManager::runOnFunction(llvm::Function&)
 3,696,007 ( 1.16%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
 3,029,479 ( 0.95%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,765,036 ( 0.86%)  ./malloc/malloc.c:free
 2,706,964 ( 0.85%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,535,144 ( 0.79%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,459,034 ( 0.77%)  ./elf/do-rel.h:_dl_relocate_object
 1,847,020 ( 0.58%)  ./malloc/malloc.c:malloc_consolidate
 1,846,152 ( 0.58%)  ???:SetImpliedBits(llvm::FeatureBitset&, llvm::FeatureBitset const&, llvm::ArrayRef<llvm::SubtargetFeatureKV>)
 1,555,878 ( 0.49%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
 1,510,467 ( 0.47%)  ./elf/dl-lookup.c:check_match
 1,479,253 ( 0.46%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
 1,328,385 ( 0.42%)  ???:llvm::PassRegistry::enumerateWith(llvm::PassRegistrationListener*)
 1,172,173 ( 0.37%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
 1,167,667 ( 0.37%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
 1,164,245 ( 0.36%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
 1,115,155 ( 0.35%)  ???:llvm::X86TargetLowering::X86TargetLowering(llvm::X86TargetMachine const&, llvm::X86Subtarget const&)
 1,111,998 ( 0.35%)  ./malloc/malloc.c:unlink_chunk.constprop.0
 1,095,624 ( 0.34%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
 1,061,091 ( 0.33%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
 1,012,095 ( 0.32%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>)>>::remove_entry::<hashbrown::map::equivalent_key<rustc_span::def_id::DefId, rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>>::{closure#0}>
   992,525 ( 0.31%)  ???:llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const
   954,050 ( 0.30%)  ???:llvm::TargetLoweringBase::computeRegisterProperties(llvm::TargetRegisterInfo const*)
   879,945 ( 0.28%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_middle::ty::ParamEnvAnd<&rustc_middle::ty::TyS>, (core::result::Result<rustc_target::abi::TyAndLayout<&rustc_middle::ty::TyS>, rustc_middle::ty::layout::LayoutError>, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_middle::ty::ParamEnvAnd<&rustc_middle::ty::TyS>>
   866,305 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   859,983 ( 0.27%)  ???:llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)
   854,991 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   809,428 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
   792,960 ( 0.25%)  ???:llvm::PMDataManager::verifyPreservedAnalysis(llvm::Pass*)
   782,626 ( 0.24%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   777,133 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   741,048 ( 0.23%)  ./malloc/malloc.c:calloc
   719,673 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/layout.rs:<&rustc_middle::ty::TyS as rustc_target::abi::TyAbiInterface<_>>::ty_and_layout_field::field_ty_or_layout::<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>
   716,039 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/layout.rs:<&rustc_middle::ty::TyS as rustc_target::abi::TyAbiInterface<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>>::ty_and_layout_field
   679,699 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   656,131 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/intern.rs:<rustc_const_eval::interpret::intern::InternVisitor<rustc_const_eval::const_eval::machine::CompileTimeInterpreter> as rustc_const_eval::interpret::visitor::ValueVisitor<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::visit_value
   632,465 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
   631,713 ( 0.20%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs:<&str as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   626,587 ( 0.20%)  ./string/../sysdeps/x86_64/strcmp.S:strcmp
   612,011 ( 0.19%)  ./malloc/malloc.c:realloc
   606,171 ( 0.19%)  ???:llvm::raw_svector_ostream::write_impl(char const*, unsigned long)
   535,815 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs:<hashbrown::map::HashMap<rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
   516,271 ( 0.16%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core.rs:<indexmap::map::core::Entry<rustc_middle::ty::fast_reject::SimplifiedTypeGen<rustc_span::def_id::DefId>, alloc::vec::Vec<rustc_span::def_id::DefId>>>::or_default
   501,466 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/place.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::force_allocation_maybe_sized
   473,920 ( 0.15%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTableInner<alloc::alloc::Global>>::prepare_insert_slot
   462,369 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/codec.rs:<&rustc_middle::ty::TyS as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   456,723 ( 0.14%)  ???:llvm::MachineInstr::addOperand(llvm::MachineFunction&, llvm::MachineOperand const&)
   446,336 ( 0.14%)  ???:(anonymous namespace)::Verifier::visitMDNode(llvm::MDNode const&, (anonymous namespace)::Verifier::AreDebugLocsAllowed)
   436,770 ( 0.14%)  ???:(anonymous namespace)::GetCFGOnlyPasses::passEnumerate(llvm::PassInfo const*) [clone .llvm.764396836974782617]
   432,693 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/tuple.rs:core::slice::sort::recurse::<rustc_span::def_id::DefId, <[rustc_span::def_id::DefId]>::sort_unstable_by_key<(i64, usize), rustc_trait_selection::traits::specialize::specialization_graph_provider::{closure#0}>::{closure#0}>
   430,773 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::DefId, (&rustc_middle::ty::TyS, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::DefId>
   428,663 ( 0.13%)  ./malloc/malloc.c:_int_realloc
   421,204 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs:<indexmap::map::core::Entry<rustc_middle::ty::fast_reject::SimplifiedTypeGen<rustc_span::def_id::DefId>, alloc::vec::Vec<rustc_span::def_id::DefId>>>::or_default
   412,527 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
   411,202 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   409,101 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
   405,118 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_middle::ty::codec::TyDecoder>::cached_ty_for_shorthand::<<&rustc_middle::ty::TyS as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode::{closure#0}>
   398,944 ( 0.12%)  ???:llvm::X86_MC::initLLVMToSEHAndCVRegMapping(llvm::MCRegisterInfo*)
   397,056 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs:<rustc_const_eval::interpret::intern::InternVisitor<rustc_const_eval::const_eval::machine::CompileTimeInterpreter> as rustc_const_eval::interpret::visitor::ValueVisitor<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::walk_aggregate::<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<u64>, <rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::mplace_array_fields::{closure#0}>, <rustc_const_eval::interpret::intern::InternVisitor<rustc_const_eval::const_eval::machine::CompileTimeInterpreter> as rustc_const_eval::interpret::visitor::ValueVisitor<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::walk_value::{closure#1}>>
   394,050 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   392,795 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_middle::ty::codec::TyDecoder>::cached_ty_for_shorthand::<<&rustc_middle::ty::TyS as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode::{closure#0}>
   390,272 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs:<rustc_span::symbol::Symbol>::intern
   386,194 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   386,194 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   386,194 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   382,455 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   377,611 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/place.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::copy_op_no_validate
   377,116 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/visitor.rs:<rustc_const_eval::interpret::validity::ValidityVisitor<rustc_const_eval::const_eval::machine::CompileTimeInterpreter> as rustc_const_eval::interpret::visitor::ValueVisitor<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::walk_value
   376,326 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
   375,745 ( 0.12%)  ???:(anonymous namespace)::RegAllocFast::allocateBasicBlock(llvm::MachineBasicBlock&)
   374,560 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs:<rustc_hash::FxHasher as core::hash::Hasher>::write
   373,934 ( 0.12%)  ???:multikeySort(llvm::MutableArrayRef<std::pair<llvm::CachedHashStringRef, unsigned long>*>, int)
   373,478 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/sort.rs:core::slice::sort::recurse::<rustc_span::def_id::DefId, <[rustc_span::def_id::DefId]>::sort_unstable_by_key<(i64, usize), rustc_trait_selection::traits::specialize::specialization_graph_provider::{closure#0}>::{closure#0}>
   372,768 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/server.rs:<proc_macro::bridge::server::Dispatcher<proc_macro::bridge::server::MarkedTypes<rustc_expand::proc_macro_server::Rustc>> as proc_macro::bridge::server::DispatcherTrait>::dispatch
   370,980 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_query_system/src/query/plumbing.rs:rustc_query_system::query::plumbing::try_execute_query::<rustc_query_impl::plumbing::QueryCtxt, rustc_query_system::query::caches::DefaultCache<rustc_span::def_id::DefId, core::option::Option<rustc_middle::ty::sty::TraitRef>>>
   369,832 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   368,003 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs:<hashbrown::raw::inner::RawTable<usize>>::reserve_rehash::<indexmap::map::core::get_hash<rustc_middle::ty::fast_reject::SimplifiedTypeGen<rustc_span::def_id::DefId>, alloc::vec::Vec<rustc_span::def_id::DefId>>::{closure#0}>
   365,189 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<rustc_span::symbol::Symbol>::intern
   362,617 ( 0.11%)  ???:llvm::SelectionDAG::Combine(llvm::CombineLevel, llvm::AAResults*, llvm::CodeGenOpt::Level)
   356,857 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(&str, rustc_span::symbol::Symbol)>>::insert::<hashbrown::map::make_hasher<&str, &str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   355,409 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u64
   355,248 ( 0.11%)  ???:llvm::TargetRegisterInfo::checkAllSuperRegsMarked(llvm::BitVector const&, llvm::ArrayRef<unsigned short>) const
   354,955 ( 0.11%)  ???:llvm::MCObjectStreamer::emitBytes(llvm::StringRef)
   354,883 ( 0.11%)  ???:llvm::MCExpr::evaluateAsRelocatableImpl(llvm::MCValue&, llvm::MCAssembler const*, llvm::MCAsmLayout const*, llvm::MCFixup const*, llvm::DenseMap<llvm::MCSection const*, unsigned long, llvm::DenseMapInfo<llvm::MCSection const*>, llvm::detail::DenseMapPair<llvm::MCSection const*, unsigned long> > const*, bool) const
   353,615 ( 0.11%)  ???:(anonymous namespace)::Verifier::verifyFunctionAttrs(llvm::FunctionType*, llvm::AttributeList, llvm::Value const*, bool)
   352,316 ( 0.11%)  ???:llvm::coro::declaresIntrinsics(llvm::Module const&, std::initializer_list<llvm::StringRef>)
   351,012 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/validity.rs:<rustc_const_eval::interpret::validity::ValidityVisitor<rustc_const_eval::const_eval::machine::CompileTimeInterpreter> as rustc_const_eval::interpret::visitor::ValueVisitor<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::visit_value
   349,554 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_query_system/src/query/plumbing.rs:rustc_query_system::query::plumbing::try_execute_query::<rustc_query_impl::plumbing::QueryCtxt, rustc_query_system::query::caches::DefaultCache<rustc_span::def_id::DefId, core::option::Option<rustc_span::def_id::DefId>>>
   349,500 ( 0.11%)  ???:llvm::PMDataManager::removeNotPreservedAnalysis(llvm::Pass*)
   348,142 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/operand.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::eval_operand
   347,442 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode::{closure#0}> as rustc_middle::ty::context::InternAs<[rustc_middle::ty::subst::GenericArg], &rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::intern_with::<<rustc_middle::ty::context::TyCtxt>::mk_substs<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode::{closure#0}>>::{closure#0}>
   347,094 ( 0.11%)  ./elf/../elf/dl-tls.c:_dl_update_slotinfo
   340,210 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_middle::ty::consts::int::ScalarInt as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   336,962 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::def_id::DefId, rustc_span::def_id::DefId)>>::insert::<hashbrown::map::make_hasher<rustc_span::def_id::DefId, rustc_span::def_id::DefId, rustc_span::def_id::DefId, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   332,726 ( 0.10%)  ???:llvm::ConstantDataSequential::getImpl(llvm::StringRef, llvm::Type*)
   330,883 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/operand.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::try_read_immediate
   330,185 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_query_system/src/query/plumbing.rs:rustc_query_system::query::plumbing::get_query::<rustc_query_impl::queries::impl_trait_ref, rustc_query_impl::plumbing::QueryCtxt>
   329,647 ( 0.10%)  ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:__strlen_avx2
   328,056 ( 0.10%)  ???:(anonymous namespace)::Verifier::visitInstruction(llvm::Instruction&)
   327,320 ( 0.10%)  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:__strncmp_avx2
   326,397 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/place.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::place_field
   323,532 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs:<std::collections::hash::map::DefaultHasher as core::hash::Hasher>::write
   322,576 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   321,072 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/validity.rs:<rustc_const_eval::interpret::validity::ValidityVisitor<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::aggregate_field_path_elem
   320,320 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           
        .           pub type EncodeResult = Result<(), !>;
        .           
        .           pub struct Encoder {
        .               pub data: Vec<u8>,
        .           }
        .           
        .           impl Encoder {
        1 ( 0.00%)      pub fn new(data: Vec<u8>) -> Encoder {
        4 ( 0.00%)          Encoder { data }
        1 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn into_inner(self) -> Vec<u8> {
        4 ( 0.00%)          self.data
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn position(&self) -> usize {
    1,976 ( 0.00%)          self.data.len()
        .               }
        .           }
        .           
        .           macro_rules! write_leb128 {
        .               ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{
        .                   const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);
        .                   let old_len = $enc.data.len();
        .           
-- line 40 ----------------------------------------
-- line 67 ----------------------------------------
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> EncodeResult {
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn emit_usize(&mut self, v: usize) -> EncodeResult {
   53,006 ( 0.02%)          write_leb128!(self, v, usize, write_usize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u128(&mut self, v: u128) -> EncodeResult {
      525 ( 0.00%)          write_leb128!(self, v, u128, write_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u64(&mut self, v: u64) -> EncodeResult {
      378 ( 0.00%)          write_leb128!(self, v, u64, write_u64_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u32(&mut self, v: u32) -> EncodeResult {
   41,736 ( 0.01%)          write_leb128!(self, v, u32, write_u32_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u16(&mut self, v: u16) -> EncodeResult {
        .                   self.data.extend_from_slice(&v.to_le_bytes());
        .                   Ok(())
        .               }
        .           
-- line 98 ----------------------------------------
-- line 131 ----------------------------------------
        .               #[inline]
        .               fn emit_i8(&mut self, v: i8) -> EncodeResult {
        .                   let as_u8: u8 = unsafe { std::mem::transmute(v) };
        .                   self.emit_u8(as_u8)
        .               }
        .           
        .               #[inline]
        .               fn emit_bool(&mut self, v: bool) -> EncodeResult {
      623 ( 0.00%)          self.emit_u8(if v { 1 } else { 0 })
        .               }
        .           
        .               #[inline]
        .               fn emit_f64(&mut self, v: f64) -> EncodeResult {
        .                   let as_u64: u64 = v.to_bits();
        .                   self.emit_u64(as_u64)
        .               }
        .           
-- line 147 ----------------------------------------
-- line 549 ----------------------------------------
        .               #[inline]
        .               pub fn advance(&mut self, bytes: usize) {
        .                   self.position += bytes;
        .               }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {
        .                   let start = self.position;
       32 ( 0.00%)          self.position += bytes;
       32 ( 0.00%)          &self.data[start..self.position]
        .               }
        .           }
        .           
        .           macro_rules! read_leb128 {
        .               ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};
        .           }
        .           
        .           impl<'a> serialize::Decoder for Decoder<'a> {
        .               #[inline]
        .               fn read_unit(&mut self) -> () {
        .                   ()
        .               }
        .           
        .               #[inline]
        .               fn read_u128(&mut self) -> u128 {
    4,581 ( 0.00%)          read_leb128!(self, read_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_u64(&mut self) -> u64 {
    3,406 ( 0.00%)          read_leb128!(self, read_u64_leb128)
        .               }
        .           
        .               #[inline]
   32,967 ( 0.01%)      fn read_u32(&mut self) -> u32 {
  182,032 ( 0.06%)          read_leb128!(self, read_u32_leb128)
   65,934 ( 0.02%)      }
        .           
        .               #[inline]
        .               fn read_u16(&mut self) -> u16 {
  569,737 ( 0.18%)          let bytes = [self.data[self.position], self.data[self.position + 1]];
   81,391 ( 0.03%)          let value = u16::from_le_bytes(bytes);
  162,804 ( 0.05%)          self.position += 2;
        .                   value
        .               }
        .           
        .               #[inline]
        .               fn read_u8(&mut self) -> u8 {
2,053,058 ( 0.64%)          let value = self.data[self.position];
  400,841 ( 0.13%)          self.position += 1;
        .                   value
        .               }
        .           
        .               #[inline]
  271,502 ( 0.08%)      fn read_usize(&mut self) -> usize {
  271,502 ( 0.08%)          read_leb128!(self, read_usize_leb128)
  543,004 ( 0.17%)      }
        .           
        .               #[inline]
        .               fn read_i128(&mut self) -> i128 {
        .                   read_leb128!(self, read_i128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_i64(&mut self) -> i64 {
-- line 613 ----------------------------------------
-- line 637 ----------------------------------------
        .               #[inline]
        .               fn read_isize(&mut self) -> isize {
        .                   read_leb128!(self, read_isize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_bool(&mut self) -> bool {
        .                   let value = self.read_u8();
    8,185 ( 0.00%)          value != 0
        .               }
        .           
        .               #[inline]
        .               fn read_f64(&mut self) -> f64 {
        .                   let bits = self.read_u64();
        .                   f64::from_bits(bits)
        .               }
        .           
-- line 653 ----------------------------------------
-- line 660 ----------------------------------------
        .               #[inline]
        .               fn read_char(&mut self) -> char {
        .                   let bits = self.read_u32();
        .                   std::char::from_u32(bits).unwrap()
        .               }
        .           
        .               #[inline]
        .               fn read_str(&mut self) -> Cow<'_, str> {
   32,536 ( 0.01%)          let len = self.read_usize();
  151,536 ( 0.05%)          let sentinel = self.data[self.position + len];
   37,884 ( 0.01%)          assert!(sentinel == STR_SENTINEL);
        .                   let s = unsafe {
        .                       std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])
        .                   };
   94,710 ( 0.03%)          self.position += len + 1;
   40,770 ( 0.01%)          Cow::Borrowed(s)
        .               }
        .           
        .               #[inline]
        .               fn read_raw_bytes_into(&mut self, s: &mut [u8]) {
      172 ( 0.00%)          let start = self.position;
      793 ( 0.00%)          self.position += s.len();
      172 ( 0.00%)          s.copy_from_slice(&self.data[start..self.position]);
        .               }
        .           }
        .           
        .           // Specializations for contiguous byte sequences follow. The default implementations for slices
        .           // encode and decode each element individually. This isn't necessary for `u8` slices when using
        .           // opaque encoders and decoders, because each `u8` is unchanged by encoding and decoding.
        .           // Therefore, we can use more efficient implementations that process the entire sequence at once.
        .           
-- line 690 ----------------------------------------

  580,581 ( 0.18%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir               

-- line 23 ----------------------------------------
      .           use std::cmp::Ordering;
      .           use std::marker::PhantomData;
      .           use std::ops::Range;
      .           use ty::util::IntTypeExt;
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable, TypeFoldable, Lift)]
      .           pub struct TypeAndMut<'tcx> {
     13 ( 0.00%)      pub ty: Ty<'tcx>,
     65 ( 0.00%)      pub mutbl: hir::Mutability,
      .           }
      .           
      .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
      .           #[derive(HashStable)]
      .           /// A "free" region `fr` can be interpreted as "some region
      .           /// at least as big as the scope `fr.scope`".
      .           pub struct FreeRegion {
    658 ( 0.00%)      pub scope: DefId,
  1,818 ( 0.00%)      pub bound_region: BoundRegionKind,
      .           }
      .           
  9,400 ( 0.00%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
     23 ( 0.00%)  #[derive(HashStable)]
      .           pub enum BoundRegionKind {
      .               /// An anonymous region parameter for a given fn (&T)
    550 ( 0.00%)      BrAnon(u32),
      .           
      .               /// Named region parameters for functions (a in &'a T)
      .               ///
      .               /// The `DefId` is needed to distinguish free regions in
      .               /// the event of shadowing.
     18 ( 0.00%)      BrNamed(DefId, Symbol),
      .           
      .               /// Anonymous region for the implicit env pointer parameter
      .               /// to a closure
      .               BrEnv,
      .           }
      .           
     72 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
      .           #[derive(HashStable)]
      .           pub struct BoundRegion {
  1,549 ( 0.00%)      pub var: BoundVar,
  1,307 ( 0.00%)      pub kind: BoundRegionKind,
      .           }
      .           
      .           impl BoundRegionKind {
      .               pub fn is_named(&self) -> bool {
      .                   match *self {
      .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
      .                       _ => false,
      .                   }
      .               }
      .           }
      .           
      .           /// Defines the kinds of types.
      .           ///
      .           /// N.B., if you change this, you'll probably want to change the corresponding
      .           /// AST structure in `rustc_ast/src/ast.rs` as well.
628,449 ( 0.20%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
  5,584 ( 0.00%)  #[derive(HashStable)]
      .           #[rustc_diagnostic_item = "TyKind"]
      .           pub enum TyKind<'tcx> {
      .               /// The primitive boolean type. Written as `bool`.
      .               Bool,
      .           
      .               /// The primitive character type; holds a Unicode scalar value
      .               /// (a non-surrogate code point). Written as `char`.
      .               Char,
-- line 90 ----------------------------------------
-- line 99 ----------------------------------------
      .               Float(ty::FloatTy),
      .           
      .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
      .               ///
      .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
      .               /// That is, even after substitution it is possible that there are type
      .               /// variables. This happens when the `Adt` corresponds to an ADT
      .               /// definition and not a concrete use of it.
 18,738 ( 0.01%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
      .           
      .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
      .               Foreign(DefId),
      .           
      .               /// The pointee of a string slice. Written as `str`.
      .               Str,
      .           
      .               /// An array with the given length. Written as `[T; n]`.
  3,072 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
      .           
      .               /// The pointee of an array slice. Written as `[T]`.
      .               Slice(Ty<'tcx>),
      .           
      .               /// A raw pointer. Written as `*mut T` or `*const T`
      .               RawPtr(TypeAndMut<'tcx>),
      .           
      .               /// A reference; a pointer with an associated lifetime. Written as
      .               /// `&'a mut T` or `&'a T`.
 31,023 ( 0.01%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
      .           
      .               /// The anonymous type of a function declaration/definition. Each
      .               /// function has a unique type, which is output (for a function
      .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
      .               ///
      .               /// For example the type of `bar` here:
      .               ///
      .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
      .               ///
      .               /// ```rust
      .               /// fn foo() -> i32 { 1 }
      .               /// let bar: fn() -> i32 = foo;
      .               /// ```
      .               FnPtr(PolyFnSig<'tcx>),
      .           
      .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
    430 ( 0.00%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
      .           
      .               /// The anonymous type of a closure. Used to represent the type of
      .               /// `|a| a`.
      .               Closure(DefId, SubstsRef<'tcx>),
      .           
      .               /// The anonymous type of a generator. Used to represent the type of
      .               /// `|a| yield a`.
      .               Generator(DefId, SubstsRef<'tcx>, hir::Movability),
-- line 159 ----------------------------------------
-- line 180 ----------------------------------------
      .               /// The substitutions are for the generics of the function in question.
      .               /// After typeck, the concrete type can be found in the `types` map.
      .               Opaque(DefId, SubstsRef<'tcx>),
      .           
      .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
      .               Param(ParamTy),
      .           
      .               /// Bound type variable, used only when preparing a trait query.
     12 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
      .           
      .               /// A placeholder type - universally quantified higher-ranked type.
      .               Placeholder(ty::PlaceholderType),
      .           
      .               /// A type variable used during type checking.
      .               Infer(InferTy),
      .           
      .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 349 ----------------------------------------
      .                       ),
      .                   }
      .               }
      .           
      .               /// Divides the closure substs into their respective components.
      .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
      .               fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
      .                   match self.substs[..] {
    192 ( 0.00%)              [
     64 ( 0.00%)                  ref parent_substs @ ..,
     32 ( 0.00%)                  closure_kind_ty,
     32 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
     32 ( 0.00%)                  tupled_upvars_ty,
      .                       ] => ClosureSubstsParts {
      .                           parent_substs,
      .                           closure_kind_ty,
      .                           closure_sig_as_fn_ptr_ty,
      .                           tupled_upvars_ty,
      .                       },
      .                       _ => bug!("closure substs missing synthetics"),
      .                   }
-- line 369 ----------------------------------------
-- line 760 ----------------------------------------
      .               }
      .           
      .               /// Returns the type of this inline const.
      .               pub fn ty(self) -> Ty<'tcx> {
      .                   self.split().ty.expect_ty()
      .               }
      .           }
      .           
  1,019 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
    350 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub enum ExistentialPredicate<'tcx> {
      .               /// E.g., `Iterator`.
      .               Trait(ExistentialTraitRef<'tcx>),
      .               /// E.g., `Iterator::Item = T`.
      .               Projection(ExistentialProjection<'tcx>),
      .               /// E.g., `Send`.
     42 ( 0.00%)      AutoTrait(DefId),
      .           }
      .           
      .           impl<'tcx> ExistentialPredicate<'tcx> {
      .               /// Compares via an ordering that will not change if modules are reordered or other changes are
      .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
    130 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
      .                   use self::ExistentialPredicate::*;
    148 ( 0.00%)          match (*self, *other) {
      .                       (Trait(_), Trait(_)) => Ordering::Equal,
      .                       (Projection(ref a), Projection(ref b)) => {
      .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
      .                       }
      .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
      .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
      .                       }
      .                       (Trait(_), _) => Ordering::Less,
      .                       (Projection(_), Trait(_)) => Ordering::Greater,
      .                       (Projection(_), _) => Ordering::Less,
      .                       (AutoTrait(_), _) => Ordering::Greater,
      .                   }
    156 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
     36 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
      .                   use crate::ty::ToPredicate;
     20 ( 0.00%)          match self.skip_binder() {
      .                       ExistentialPredicate::Trait(tr) => {
      .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
      .                       }
      .                       ExistentialPredicate::Projection(p) => {
      .                           self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
      .                       }
      .                       ExistentialPredicate::AutoTrait(did) => {
      .                           let trait_ref = self.rebind(ty::TraitRef {
      .                               def_id: did,
      .                               substs: tcx.mk_substs_trait(self_ty, &[]),
      .                           });
      .                           trait_ref.without_const().to_predicate(tcx)
      .                       }
      .                   }
     32 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
      .               /// Returns the "principal `DefId`" of this set of existential predicates.
      .               ///
      .               /// A Rust trait object type consists (in addition to a lifetime bound)
      .               /// of a set of trait bounds, which are separated into any number
      .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 839 ----------------------------------------
      .               /// are the set `{Sync}`.
      .               ///
      .               /// It is also possible to have a "trivial" trait object that
      .               /// consists only of auto traits, with no principal - for example,
      .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
      .               /// is `{Send, Sync}`, while there is no principal. These trait objects
      .               /// have a "trivial" vtable consisting of just the size, alignment,
      .               /// and destructor.
      4 ( 0.00%)      pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
     34 ( 0.00%)          self[0]
     22 ( 0.00%)              .map_bound(|this| match this {
      .                           ExistentialPredicate::Trait(tr) => Some(tr),
      .                           _ => None,
     16 ( 0.00%)              })
      .                       .transpose()
     12 ( 0.00%)      }
      .           
      4 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
      .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
      8 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn projection_bounds<'a>(
      .                   &'a self,
      .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
      .                   self.iter().filter_map(|predicate| {
      .                       predicate
      8 ( 0.00%)                  .map_bound(|pred| match pred {
      .                               ExistentialPredicate::Projection(projection) => Some(projection),
      .                               _ => None,
      .                           })
      .                           .transpose()
      .                   })
      .               }
      .           
      .               #[inline]
-- line 874 ----------------------------------------
-- line 886 ----------------------------------------
      .           ///     T: Foo<U>
      .           ///
      .           /// This would be represented by a trait-reference where the `DefId` is the
      .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
      .           /// and `U` as parameter 1.
      .           ///
      .           /// Trait references also appear in object types like `Foo<U>`, but in
      .           /// that case the `Self` parameter is absent from the substitutions.
 20,596 ( 0.01%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
 12,817 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct TraitRef<'tcx> {
     95 ( 0.00%)      pub def_id: DefId,
  9,030 ( 0.00%)      pub substs: SubstsRef<'tcx>,
      .           }
      .           
      .           impl<'tcx> TraitRef<'tcx> {
     81 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
      .                   TraitRef { def_id, substs }
    324 ( 0.00%)      }
      .           
      .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
      .               /// are the parameters defined on trait.
    225 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
    100 ( 0.00%)          ty::Binder::dummy(TraitRef {
      .                       def_id,
    150 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
      .                   })
    200 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn self_ty(&self) -> Ty<'tcx> {
      .                   self.substs.type_at(0)
      .               }
      .           
    224 ( 0.00%)      pub fn from_method(
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_id: DefId,
      .                   substs: SubstsRef<'tcx>,
      .               ) -> ty::TraitRef<'tcx> {
      .                   let defs = tcx.generics_of(trait_id);
      .           
     28 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
    308 ( 0.00%)      }
      .           }
      .           
      .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
      .           
      .           impl<'tcx> PolyTraitRef<'tcx> {
      .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
      .                   self.map_bound_ref(|tr| tr.self_ty())
      .               }
      .           
      .               pub fn def_id(&self) -> DefId {
     36 ( 0.00%)          self.skip_binder().def_id
     12 ( 0.00%)      }
      .           
     51 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
    102 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
      .                       trait_ref,
      .                       constness: ty::BoundConstness::NotConst,
      .                       polarity: ty::ImplPolarity::Positive,
      .                   })
     51 ( 0.00%)      }
      .           }
      .           
      .           /// An existential reference to a trait, where `Self` is erased.
      .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
      .           ///
      .           ///     exists T. T: Trait<'a, 'b, X, Y>
      .           ///
      .           /// The substitutions don't include the erased `Self`, only trait
      .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
     88 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    175 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct ExistentialTraitRef<'tcx> {
     52 ( 0.00%)      pub def_id: DefId,
    254 ( 0.00%)      pub substs: SubstsRef<'tcx>,
      .           }
      .           
      .           impl<'tcx> ExistentialTraitRef<'tcx> {
     12 ( 0.00%)      pub fn erase_self_ty(
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_ref: ty::TraitRef<'tcx>,
      .               ) -> ty::ExistentialTraitRef<'tcx> {
      .                   // Assert there is a Self.
      .                   trait_ref.substs.type_at(0);
      .           
      .                   ty::ExistentialTraitRef {
      .                       def_id: trait_ref.def_id,
      .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
      .                   }
     12 ( 0.00%)      }
      .           
      .               /// Object types don't have a self type specified. Therefore, when
      .               /// we convert the principal trait-ref into a normal trait-ref,
      .               /// you must give *some* self type. A common choice is `mk_err()`
      .               /// or some placeholder type.
      .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
      .                   // otherwise the escaping vars would be captured by the binder
      .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
-- line 985 ----------------------------------------
-- line 994 ----------------------------------------
      .               pub fn def_id(&self) -> DefId {
      .                   self.skip_binder().def_id
      .               }
      .           
      .               /// Object types don't have a self type specified. Therefore, when
      .               /// we convert the principal trait-ref into a normal trait-ref,
      .               /// you must give *some* self type. A common choice is `mk_err()`
      .               /// or some placeholder type.
      6 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
     10 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
      8 ( 0.00%)      }
      .           }
      .           
  3,019 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
     60 ( 0.00%)  #[derive(HashStable)]
      .           pub enum BoundVariableKind {
      .               Ty(BoundTyKind),
      .               Region(BoundRegionKind),
      .               Const,
      .           }
      .           
      .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
      .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
      .           /// (which would be represented by the type `PolyTraitRef ==
      .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
      .           /// erase, or otherwise "discharge" these bound vars, we change the
      .           /// type from `Binder<'tcx, T>` to just `T` (see
      .           /// e.g., `liberate_late_bound_regions`).
      .           ///
      .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
    620 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
  7,398 ( 0.00%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
      .           
      .           impl<'tcx, T> Binder<'tcx, T>
      .           where
      .               T: TypeFoldable<'tcx>,
      .           {
      .               /// Wraps `value` in a binder, asserting that `value` does not
      .               /// contain any bound vars that would be bound by the
      .               /// binder. This is commonly used to 'inject' a value T into a
      .               /// different binding level.
    700 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
  2,448 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
  6,243 ( 0.00%)          Binder(value, ty::List::empty())
    698 ( 0.00%)      }
      .           
      .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(vars);
      .                       value.visit_with(&mut validator);
      .                   }
  1,456 ( 0.00%)          Binder(value, vars)
      .               }
      .           }
      .           
      .           impl<'tcx, T> Binder<'tcx, T> {
      .               /// Skips the binder and returns the "bound" value. This is a
      .               /// risky thing to do because it's easy to get confused about
      .               /// De Bruijn indices and the like. It is usually better to
      .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
      .               /// accounting.
      .               ///
      .               /// Some examples where `skip_binder` is reasonable:
      .               ///
      .               /// - extracting the `DefId` from a PolyTraitRef;
      .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
      .               ///   a type parameter `X`, since the type `X` does not reference any regions
      .               pub fn skip_binder(self) -> T {
 24,526 ( 0.01%)          self.0
      .               }
      .           
      .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
     13 ( 0.00%)          self.1
      .               }
      .           
      .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
     77 ( 0.00%)          Binder(&self.0, self.1)
      .               }
      .           
      .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
      .               where
      .                   F: FnOnce(&T) -> U,
      .               {
      .                   let value = f(&self.0);
      .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1089 ----------------------------------------
      .               {
      .                   self.as_ref().map_bound(f)
      .               }
      .           
      .               pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
      .               where
      .                   F: FnOnce(T) -> U,
      .               {
  1,277 ( 0.00%)          let value = f(self.0);
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(self.1);
      .                       value.visit_with(&mut validator);
      .                   }
  6,242 ( 0.00%)          Binder(value, self.1)
      .               }
      .           
      .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
      .               where
      .                   F: FnOnce(T) -> Result<U, E>,
      .               {
      .                   let value = f(self.0)?;
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(self.1);
      .                       value.visit_with(&mut validator);
      .                   }
    110 ( 0.00%)          Ok(Binder(value, self.1))
      .               }
      .           
      .               /// Wraps a `value` in a binder, using the same bound variables as the
      .               /// current `Binder`. This should not be used if the new value *changes*
      .               /// the bound variables. Note: the (old or new) value itself does not
      .               /// necessarily need to *name* all the bound variables.
      .               ///
      .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
      .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
      .               where
      .                   U: TypeFoldable<'tcx>,
      .               {
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
      .                       value.visit_with(&mut validator);
      .                   }
     78 ( 0.00%)          Binder(value, self.1)
      .               }
      .           
      .               /// Unwraps and returns the value within, but only if it contains
      .               /// no bound vars at all. (In other words, if this binder --
      .               /// and indeed any enclosing binder -- doesn't bind anything at
      .               /// all.) Otherwise, returns `None`.
      .               ///
      .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
      .               /// binder, but permits late-bound vars bound by enclosing
      .               /// binders, but that would require adjusting the debruijn
      .               /// indices, and given the shallow binding structure we often use,
      .               /// would not be that useful.)
      .               pub fn no_bound_vars(self) -> Option<T>
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
  3,369 ( 0.00%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
      .               }
      .           
      .               /// Splits the contents into two things that share the same binder
      .               /// level as the original, returning two distinct binders.
      .               ///
      .               /// `f` should consider bound regions at depth 1 to be free, and
      .               /// anything it produces with bound regions at depth 1 will be
      .               /// bound in the resulting return values.
-- line 1159 ----------------------------------------
-- line 1170 ----------------------------------------
      .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
      .                   let bound_vars = self.1;
      .                   self.0.map(|v| Binder(v, bound_vars))
      .               }
      .           }
      .           
      .           /// Represents the projection of an associated type. In explicit UFCS
      .           /// form this would be written `<T as Trait<..>>::N`.
     24 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
    430 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct ProjectionTy<'tcx> {
      .               /// The parameters of the associated item.
    244 ( 0.00%)      pub substs: SubstsRef<'tcx>,
      .           
      .               /// The `DefId` of the `TraitItem` for the associated type `N`.
      .               ///
      .               /// Note that this is not the `DefId` of the `TraitRef` containing this
      .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
    213 ( 0.00%)      pub item_def_id: DefId,
      .           }
      .           
      .           impl<'tcx> ProjectionTy<'tcx> {
    168 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
     48 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
    192 ( 0.00%)      }
      .           
      .               /// Extracts the underlying trait reference and own substs from this projection.
      .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
      .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
      .               pub fn trait_ref_and_own_substs(
      .                   &self,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
-- line 1202 ----------------------------------------
-- line 1210 ----------------------------------------
      .           
      .               /// Extracts the underlying trait reference from this projection.
      .               /// For example, if this is a projection of `<T as Iterator>::Item`,
      .               /// then this function would return a `T: Iterator` trait reference.
      .               ///
      .               /// WARNING: This will drop the substs for generic associated types
      .               /// consider calling [Self::trait_ref_and_own_substs] to get those
      .               /// as well.
    216 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
     24 ( 0.00%)          let def_id = self.trait_def_id(tcx);
     24 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
    264 ( 0.00%)      }
      .           
     48 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
    144 ( 0.00%)          self.substs.type_at(0)
     96 ( 0.00%)      }
      .           }
      .           
      .           #[derive(Copy, Clone, Debug, TypeFoldable)]
      .           pub struct GenSig<'tcx> {
      .               pub resume_ty: Ty<'tcx>,
      .               pub yield_ty: Ty<'tcx>,
      .               pub return_ty: Ty<'tcx>,
      .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
      .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
      .           
      .           /// Signature of a function type, which we have arbitrarily
      .           /// decided to use to refer to the input/output types.
      .           ///
      .           /// - `inputs`: is the list of arguments and their modes.
      .           /// - `output`: is the return type.
      .           /// - `c_variadic`: indicates whether this is a C-variadic function.
  2,767 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    837 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct FnSig<'tcx> {
     27 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
    725 ( 0.00%)      pub c_variadic: bool,
     93 ( 0.00%)      pub unsafety: hir::Unsafety,
  1,249 ( 0.00%)      pub abi: abi::Abi,
      .           }
      .           
      .           impl<'tcx> FnSig<'tcx> {
    730 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
  4,384 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
  1,460 ( 0.00%)      }
      .           
    492 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
  4,116 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
    984 ( 0.00%)      }
      .           
      .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
      .               // method.
      .               fn fake() -> FnSig<'tcx> {
      .                   FnSig {
      .                       inputs_and_output: List::empty(),
      .                       c_variadic: false,
      .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
      .               }
      .           }
      .           
      .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
      .           
      .           impl<'tcx> PolyFnSig<'tcx> {
      .               #[inline]
      .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
    180 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
      .               }
      .               #[inline]
      .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
    198 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
      .               }
      .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
      .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
     31 ( 0.00%)      }
      .               #[inline]
      .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
    207 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
      .               }
      .               pub fn c_variadic(&self) -> bool {
     62 ( 0.00%)          self.skip_binder().c_variadic
     31 ( 0.00%)      }
      .               pub fn unsafety(&self) -> hir::Unsafety {
     72 ( 0.00%)          self.skip_binder().unsafety
     36 ( 0.00%)      }
      .               pub fn abi(&self) -> abi::Abi {
    912 ( 0.00%)          self.skip_binder().abi
    228 ( 0.00%)      }
      .           }
      .           
      .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
      .           
      8 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
     10 ( 0.00%)  #[derive(HashStable)]
      .           pub struct ParamTy {
     12 ( 0.00%)      pub index: u32,
      .               pub name: Symbol,
      .           }
      .           
      .           impl<'tcx> ParamTy {
      6 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
      .                   ParamTy { index, name }
      3 ( 0.00%)      }
      .           
      .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
      .                   ParamTy::new(def.index, def.name)
      .               }
      .           
      .               #[inline]
      .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
      .                   tcx.mk_ty_param(self.index, self.name)
      .               }
      .           }
      .           
      .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
      .           #[derive(HashStable)]
      .           pub struct ParamConst {
    100 ( 0.00%)      pub index: u32,
    100 ( 0.00%)      pub name: Symbol,
      .           }
      .           
      .           impl ParamConst {
      .               pub fn new(index: u32, name: Symbol) -> ParamConst {
      .                   ParamConst { index, name }
      .               }
      .           
      .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
      .           /// the inference variable is supposed to satisfy the relation
      .           /// *for every value of the placeholder region*. To ensure that doesn't
      .           /// happen, you can use `leak_check`. This is more clearly explained
      .           /// by the [rustc dev guide].
      .           ///
      .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
      .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
      .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
132,950 ( 0.04%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
    386 ( 0.00%)  pub enum RegionKind {
      .               /// Region bound in a type or fn declaration which will be
      .               /// substituted 'early' -- that is, at the same time when type
      .               /// parameters are substituted.
      .               ReEarlyBound(EarlyBoundRegion),
      .           
      .               /// Region bound in a function scope, which will be substituted when the
      .               /// function is called.
  2,614 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
      .           
      .               /// When checking a function body, the types of all arguments and so forth
      .               /// that refer to bound region parameters are modified to refer to free
      .               /// region parameters.
      .               ReFree(FreeRegion),
      .           
      .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
      .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
      .               /// regions visible from `U`, but not less than regions not visible
      .               /// from `U`.
      .               ReEmpty(ty::UniverseIndex),
      .           
      .               /// Erased region, used by trait selection, in MIR and during codegen.
      .               ReErased,
      .           }
      .           
 11,096 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
      .           pub struct EarlyBoundRegion {
    462 ( 0.00%)      pub def_id: DefId,
  5,175 ( 0.00%)      pub index: u32,
  3,416 ( 0.00%)      pub name: Symbol,
      .           }
      .           
      .           /// A **`const`** **v**ariable **ID**.
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
      .           pub struct ConstVid<'tcx> {
    108 ( 0.00%)      pub index: u32,
     80 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
      .           }
      .           
      .           rustc_index::newtype_index! {
      .               /// A **region** (lifetime) **v**ariable **ID**.
      .               pub struct RegionVid {
      .                   DEBUG_FORMAT = custom,
      .               }
      .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
      .           rustc_index::newtype_index! {
      .               pub struct BoundVar { .. }
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable)]
      .           pub struct BoundTy {
      .               pub var: BoundVar,
     12 ( 0.00%)      pub kind: BoundTyKind,
      .           }
      .           
    222 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable)]
      .           pub enum BoundTyKind {
      .               Anon,
      .               Param(Symbol),
      .           }
      .           
      .           impl From<BoundVar> for BoundTy {
      .               fn from(var: BoundVar) -> Self {
-- line 1532 ----------------------------------------
-- line 1616 ----------------------------------------
      .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
      .                       RegionKind::ReEmpty(_) => false,
      .                       RegionKind::ReErased => false,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_late_bound(&self) -> bool {
     27 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_placeholder(&self) -> bool {
      .                   matches!(*self, ty::RePlaceholder(..))
      .               }
      .           
      .               #[inline]
      .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
  1,672 ( 0.00%)          match *self {
      .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               pub fn type_flags(&self) -> TypeFlags {
      .                   let mut flags = TypeFlags::empty();
      .           
 10,749 ( 0.00%)          match *self {
      .                       ty::ReVar(..) => {
      .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
      .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
      .                           flags = flags | TypeFlags::HAS_RE_INFER;
      .                       }
      .                       ty::RePlaceholder(..) => {
      .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
      .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
      .                       ty::ReErased => {
      .                           flags = flags | TypeFlags::HAS_RE_ERASED;
      .                       }
      .                   }
      .           
      .                   debug!("type_flags({:?}) = {:?}", self, flags);
      .           
      .                   flags
    178 ( 0.00%)      }
      .           
      .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
      .               /// For example, consider the regions in this snippet of code:
      .               ///
      .               /// ```
      .               /// impl<'a> Foo {
      .               ///      ^^ -- early bound, declared on an impl
      .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
      .           
      .               #[inline(always)]
      .               pub fn flags(&self) -> TypeFlags {
      .                   self.flags
      .               }
      .           
      .               #[inline]
      .               pub fn is_unit(&self) -> bool {
    154 ( 0.00%)          match self.kind() {
     53 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
      .                       _ => false,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_never(&self) -> bool {
    960 ( 0.00%)          matches!(self.kind(), Never)
      .               }
      .           
      .               #[inline]
      .               pub fn is_primitive(&self) -> bool {
      .                   self.kind().is_primitive()
      .               }
      .           
      .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn is_ref(&self) -> bool {
      .                   matches!(self.kind(), Ref(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_ty_var(&self) -> bool {
  1,486 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
      .               }
      .           
      .               #[inline]
      .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
    816 ( 0.00%)          match self.kind() {
     84 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_ty_infer(&self) -> bool {
      .                   matches!(self.kind(), Infer(_))
      .               }
-- line 1763 ----------------------------------------
-- line 1775 ----------------------------------------
      .               /// Returns `true` if this type is a `str`.
      .               #[inline]
      .               pub fn is_str(&self) -> bool {
      .                   *self.kind() == Str
      .               }
      .           
      .               #[inline]
      .               pub fn is_param(&self, index: u32) -> bool {
      1 ( 0.00%)          match self.kind() {
      .                       ty::Param(ref data) => data.index == index,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_slice(&self) -> bool {
      .                   match self.kind() {
      .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
      .                       _ => false,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_array(&self) -> bool {
      8 ( 0.00%)          matches!(self.kind(), Array(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_simd(&self) -> bool {
      .                   match self.kind() {
      .                       Adt(def, _) => def.repr.simd(),
      .                       _ => false,
      .                   }
      .               }
      .           
      2 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
      4 ( 0.00%)          match self.kind() {
      .                       Array(ty, _) | Slice(ty) => ty,
      .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
      .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
      .                   }
      2 ( 0.00%)      }
      .           
      .               pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
      .                   match self.kind() {
      .                       Adt(def, substs) => {
      .                           assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
      .                           let variant = def.non_enum_variant();
      .                           let f0_ty = variant.fields[0].ty(tcx, substs);
      .           
-- line 1824 ----------------------------------------
-- line 1861 ----------------------------------------
      .                   match self.kind() {
      .                       Ref(_, _, mutability) => Some(*mutability),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_unsafe_ptr(&self) -> bool {
    186 ( 0.00%)          matches!(self.kind(), RawPtr(_))
      .               }
      .           
      .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
      .               #[inline]
      .               pub fn is_any_ptr(&self) -> bool {
      .                   self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
      .               }
      .           
      .               #[inline]
      .               pub fn is_box(&self) -> bool {
    884 ( 0.00%)          match self.kind() {
    141 ( 0.00%)              Adt(def, _) => def.is_box(),
      .                       _ => false,
      .                   }
      .               }
      .           
      .               /// Panics if called on any type other than `Box<T>`.
      .               pub fn boxed_ty(&self) -> Ty<'tcx> {
      .                   match self.kind() {
      .                       Adt(def, substs) if def.is_box() => substs.type_at(0),
-- line 1889 ----------------------------------------
-- line 1891 ----------------------------------------
      .                   }
      .               }
      .           
      .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
      .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
      .               /// contents are abstract to rustc.)
      .               #[inline]
      .               pub fn is_scalar(&self) -> bool {
     16 ( 0.00%)          matches!(
     34 ( 0.00%)              self.kind(),
      .                       Bool | Char
      .                           | Int(_)
      .                           | Float(_)
      .                           | Uint(_)
      .                           | FnDef(..)
      .                           | FnPtr(_)
      .                           | RawPtr(_)
      .                           | Infer(IntVar(_) | FloatVar(_))
      .                   )
      .               }
      .           
      .               /// Returns `true` if this type is a floating point type.
      .               #[inline]
      .               pub fn is_floating_point(&self) -> bool {
     25 ( 0.00%)          matches!(self.kind(), Float(_) | Infer(FloatVar(_)))
      .               }
      .           
      .               #[inline]
      .               pub fn is_trait(&self) -> bool {
      3 ( 0.00%)          matches!(self.kind(), Dynamic(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_enum(&self) -> bool {
      .                   matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
      .               }
      .           
      .               #[inline]
      .               pub fn is_union(&self) -> bool {
    163 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
      .               }
      .           
      .               #[inline]
      .               pub fn is_closure(&self) -> bool {
     48 ( 0.00%)          matches!(self.kind(), Closure(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_generator(&self) -> bool {
    134 ( 0.00%)          matches!(self.kind(), Generator(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_integral(&self) -> bool {
    118 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_fresh_ty(&self) -> bool {
      .                   matches!(self.kind(), Infer(FreshTy(_)))
      .               }
      .           
      .               #[inline]
      .               pub fn is_fresh(&self) -> bool {
    173 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
      .               }
      .           
      .               #[inline]
      .               pub fn is_char(&self) -> bool {
      .                   matches!(self.kind(), Char)
      .               }
      .           
      .               #[inline]
      .               pub fn is_numeric(&self) -> bool {
      .                   self.is_integral() || self.is_floating_point()
      .               }
      .           
      .               #[inline]
      .               pub fn is_signed(&self) -> bool {
      3 ( 0.00%)          matches!(self.kind(), Int(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_ptr_sized_integral(&self) -> bool {
      .                   matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
      .               }
      .           
      .               #[inline]
-- line 1978 ----------------------------------------
-- line 1979 ----------------------------------------
      .               pub fn has_concrete_skeleton(&self) -> bool {
      .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
      .               }
      .           
      .               /// Returns the type and mutability of `*ty`.
      .               ///
      .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
      .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
  7,706 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
 53,660 ( 0.02%)          match self.kind() {
  8,472 ( 0.00%)              Adt(def, _) if def.is_box() => {
      .                           Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
      .                       }
    998 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
     10 ( 0.00%)              RawPtr(mt) if explicit => Some(*mt),
      .                       _ => None,
      .                   }
 15,412 ( 0.00%)      }
      .           
      .               /// Returns the type of `ty[i]`.
      .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
    108 ( 0.00%)          match self.kind() {
      .                       Array(ty, _) | Slice(ty) => Some(ty),
      .                       _ => None,
      .                   }
      9 ( 0.00%)      }
      .           
  2,448 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
  1,224 ( 0.00%)          match self.kind() {
    918 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
      .                       FnPtr(f) => *f,
      .                       Error(_) => {
      .                           // ignore errors (#54954)
      .                           ty::Binder::dummy(FnSig::fake())
      .                       }
      .                       Closure(..) => bug!(
      .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
      .                       ),
      .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
      .                   }
  2,754 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn is_fn(&self) -> bool {
    171 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_fn_ptr(&self) -> bool {
      .                   matches!(self.kind(), FnPtr(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_impl_trait(&self) -> bool {
      .                   matches!(self.kind(), Opaque(..))
      .               }
      .           
      .               #[inline]
      .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
 16,242 ( 0.01%)          match self.kind() {
      .                       Adt(adt, _) => Some(adt),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               /// Iterates over tuple fields.
      .               /// Panics when called on anything but a tuple.
      2 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
     52 ( 0.00%)          match self.kind() {
     30 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
      .                       _ => bug!("tuple_fields called on non-tuple"),
      .                   }
      4 ( 0.00%)      }
      .           
      .               /// Get the `i`-th element of a tuple.
      .               /// Panics when called on anything but a tuple.
      .               pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
      .                   match self.kind() {
      .                       Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
      .                       _ => bug!("tuple_fields called on non-tuple"),
      .                   }
-- line 2059 ----------------------------------------
-- line 2078 ----------------------------------------
      .               //
      .               // FIXME: This requires the optimized MIR in the case of generators.
      .               #[inline]
      .               pub fn discriminant_for_variant(
      .                   &self,
      .                   tcx: TyCtxt<'tcx>,
      .                   variant_index: VariantIdx,
      .               ) -> Option<Discr<'tcx>> {
     12 ( 0.00%)          match self.kind() {
      8 ( 0.00%)              TyKind::Adt(adt, _) if adt.variants.is_empty() => {
      .                           // This can actually happen during CTFE, see
      .                           // https://github.com/rust-lang/rust/issues/89765.
      .                           None
      .                       }
      4 ( 0.00%)              TyKind::Adt(adt, _) if adt.is_enum() => {
      .                           Some(adt.discriminant_for_variant(tcx, variant_index))
      .                       }
      .                       TyKind::Generator(def_id, substs, _) => {
      .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
      .                       }
      .                       _ => None,
      .                   }
      .               }
-- line 2100 ----------------------------------------
-- line 2229 ----------------------------------------
      .               /// Returning true means the type is known to be sized. Returning
      .               /// `false` means nothing -- could be sized, might not be.
      .               ///
      .               /// Note that we could never rely on the fact that a type such as `[_]` is
      .               /// trivially `!Sized` because we could be in a type environment with a
      .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
      .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
      .               /// this method doesn't return `Option<bool>`.
  3,465 ( 0.00%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
  2,310 ( 0.00%)          match self.kind() {
      .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
      .                       | ty::Uint(_)
      .                       | ty::Int(_)
      .                       | ty::Bool
      .                       | ty::Float(_)
      .                       | ty::FnDef(..)
      .                       | ty::FnPtr(_)
      .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
      .                       | ty::GeneratorWitness(..)
      .                       | ty::Array(..)
      .                       | ty::Closure(..)
      .                       | ty::Never
      .                       | ty::Error(_) => true,
      .           
      .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
      .           
     28 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
      .           
    357 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
      .           
      .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
      .           
      .                       ty::Infer(ty::TyVar(_)) => false,
      .           
      .                       ty::Bound(..)
      .                       | ty::Placeholder(..)
      .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
      .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
      .                       }
      .                   }
  3,465 ( 0.00%)      }
      .           }
      .           
      .           /// Extra information about why we ended up with a particular variance.
      .           /// This is only used to add more information to error messages, and
      .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
      .           /// may lead to confusing notes in error messages, it will never cause
      .           /// a miscompilation or unsoundness.
      .           ///
-- line 2280 ----------------------------------------
-- line 2295 ----------------------------------------
      .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
      .                   param_index: u32,
      .               },
      .           }
      .           
      .           impl<'tcx> VarianceDiagInfo<'tcx> {
      .               /// Mirrors `Variance::xform` - used to 'combine' the existing
      .               /// and new `VarianceDiagInfo`s when our variance changes.
    616 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
      .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
    924 ( 0.00%)          match self {
      .                       VarianceDiagInfo::None => other,
      .                       VarianceDiagInfo::Invariant { .. } => self,
      .                   }
    308 ( 0.00%)      }
      .           }

653,394 ( 0.20%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs
--------------------------------------------------------------------------------
Ir               

-- line 26 ----------------------------------------
      .               /// }
      .               ///
      .               /// assert_eq!(letters[&'s'], 2);
      .               /// assert_eq!(letters[&'t'], 3);
      .               /// assert_eq!(letters[&'u'], 1);
      .               /// assert_eq!(letters.get(&'y'), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
523,720 ( 0.16%)      pub fn rustc_entry(&mut self, key: K) -> RustcEntry<'_, K, V, A> {
      .                   let hash = make_insert_hash(&self.hash_builder, &key);
  2,367 ( 0.00%)          if let Some(elem) = self.table.find(hash, |q| q.0.eq(&key)) {
 75,106 ( 0.02%)              RustcEntry::Occupied(RustcOccupiedEntry {
  4,287 ( 0.00%)                  key: Some(key),
      .                           elem,
      .                           table: &mut self.table,
      .                       })
      .                   } else {
      .                       // Ideally we would put this in VacantEntry::insert, but Entry is not
      .                       // generic over the BuildHasher and adding a generic parameter would be
      .                       // a breaking change.
      .                       self.reserve(1);
      .           
119,736 ( 0.04%)              RustcEntry::Vacant(RustcVacantEntry {
      .                           hash,
 11,220 ( 0.00%)                  key,
      .                           table: &mut self.table,
      .                       })
      .                   }
422,610 ( 0.13%)      }
      .           }
      .           
      .           /// A view into a single entry in a map, which may either be vacant or occupied.
      .           ///
      .           /// This `enum` is constructed from the [`entry`] method on [`HashMap`].
      .           ///
      .           /// [`HashMap`]: struct.HashMap.html
      .           /// [`entry`]: struct.HashMap.html#method.rustc_entry
-- line 62 ----------------------------------------
-- line 405 ----------------------------------------
      .               /// if let RustcEntry::Occupied(o) = map.rustc_entry("poneyland") {
      .               ///     *o.into_mut() += 10;
      .               /// }
      .               ///
      .               /// assert_eq!(map["poneyland"], 22);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn into_mut(self) -> &'a mut V {
  1,484 ( 0.00%)          unsafe { &mut self.elem.as_mut().1 }
      .               }
      .           
      .               /// Sets the value of the entry, and returns the entry's old value.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 421 ----------------------------------------
-- line 568 ----------------------------------------
      .               /// let mut map: HashMap<&str, u32> = HashMap::new();
      .               ///
      .               /// if let RustcEntry::Vacant(o) = map.rustc_entry("poneyland") {
      .               ///     o.insert(37);
      .               /// }
      .               /// assert_eq!(map["poneyland"], 37);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
    738 ( 0.00%)      pub fn insert(self, value: V) -> &'a mut V {
      .                   unsafe {
  5,945 ( 0.00%)              let bucket = self.table.insert_no_grow(self.hash, (self.key, value));
    501 ( 0.00%)              &mut bucket.as_mut().1
      .                   }
    964 ( 0.00%)      }
      .           
      .               /// Sets the value of the entry with the RustcVacantEntry's key,
      .               /// and returns a RustcOccupiedEntry.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 589 ----------------------------------------

117,106 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs
--------------------------------------------------------------------------------
Ir               

-- line 176 ----------------------------------------
      .               }
      .               fn sess(self) -> Option<&'tcx Session> {
      .                   None
      .               }
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   None
      .               }
      .           
  5,178 ( 0.00%)      fn decoder(self, pos: usize) -> DecodeContext<'a, 'tcx> {
  1,726 ( 0.00%)          let tcx = self.tcx();
303,930 ( 0.10%)          DecodeContext {
 30,848 ( 0.01%)              opaque: opaque::Decoder::new(self.blob(), pos),
  1,726 ( 0.00%)              cdata: self.cdata(),
      .                       blob: self.blob(),
 17,128 ( 0.01%)              sess: self.sess().or(tcx.map(|tcx| tcx.sess)),
      .                       tcx,
      .                       last_source_file_index: 0,
      .                       lazy_state: LazyState::NoNode,
      .                       alloc_decoding_session: self
      .                           .cdata()
 28,190 ( 0.01%)                  .map(|cdata| cdata.cdata.alloc_decoding_state.new_decoding_session()),
      .                   }
  5,178 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Metadata<'a, 'tcx> for &'a MetadataBlob {
      .               #[inline]
      .               fn blob(self) -> &'a MetadataBlob {
      .                   self
      .               }
      .           }
-- line 206 ----------------------------------------
-- line 255 ----------------------------------------
      .               }
      .               #[inline]
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   Some(self.1)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<T> {
 76,328 ( 0.02%)      fn decode<M: Metadata<'a, 'tcx>>(self, metadata: M) -> T {
 32,445 ( 0.01%)          let mut dcx = metadata.decoder(self.position.get());
 85,687 ( 0.03%)          dcx.lazy_state = LazyState::NodeStart(self.position);
 17,443 ( 0.01%)          T::decode(&mut dcx)
 97,207 ( 0.03%)      }
      .           }
      .           
      .           impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<[T]> {
      .               fn decode<M: Metadata<'a, 'tcx>>(
      .                   self,
      .                   metadata: M,
      .               ) -> impl ExactSizeIterator<Item = T> + Captures<'a> + Captures<'tcx> + 'x {
    238 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
     68 ( 0.00%)          dcx.lazy_state = LazyState::NodeStart(self.position);
 19,989 ( 0.01%)          (0..self.meta).map(move |_| T::decode(&mut dcx))
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> DecodeContext<'a, 'tcx> {
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   debug_assert!(self.tcx.is_some(), "missing TyCtxt in DecodeContext");
      .                   self.tcx.unwrap()
-- line 285 ----------------------------------------
-- line 292 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn cdata(&self) -> CrateMetadataRef<'a> {
      .                   debug_assert!(self.cdata.is_some(), "missing CrateMetadata in DecodeContext");
      .                   self.cdata.unwrap()
      .               }
      .           
      .               fn map_encoded_cnum_to_current(&self, cnum: CrateNum) -> CrateNum {
115,492 ( 0.04%)          if cnum == LOCAL_CRATE { self.cdata().cnum } else { self.cdata().cnum_map[cnum] }
      .               }
      .           
 47,309 ( 0.01%)      fn read_lazy_with_meta<T: ?Sized + LazyMeta>(&mut self, meta: T::Meta) -> Lazy<T> {
      .                   let distance = self.read_usize();
 46,569 ( 0.01%)          let position = match self.lazy_state {
      .                       LazyState::NoNode => bug!("read_lazy_with_meta: outside of a metadata node"),
  7,878 ( 0.00%)              LazyState::NodeStart(start) => {
      .                           let start = start.get();
 15,756 ( 0.00%)                  assert!(distance <= start);
      .                           start - distance
      .                       }
 13,761 ( 0.00%)              LazyState::Previous(last_pos) => last_pos.get() + distance,
      .                   };
 24,930 ( 0.01%)          self.lazy_state = LazyState::Previous(NonZeroUsize::new(position).unwrap());
      .                   Lazy::from_position_and_meta(NonZeroUsize::new(position).unwrap(), meta)
 47,309 ( 0.01%)      }
      .           
      .               #[inline]
      .               pub fn read_raw_bytes(&mut self, len: usize) -> &'a [u8] {
      .                   self.opaque.read_raw_bytes(len)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {
-- line 324 ----------------------------------------
-- line 326 ----------------------------------------
      .           
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   self.tcx.expect("missing TyCtxt in DecodeContext")
      .               }
      .           
      .               #[inline]
      .               fn peek_byte(&self) -> u8 {
133,400 ( 0.04%)          self.opaque.data[self.opaque.position()]
      .               }
      .           
      .               #[inline]
      .               fn position(&self) -> usize {
      .                   self.opaque.position()
      .               }
      .           
116,270 ( 0.04%)      fn cached_ty_for_shorthand<F>(&mut self, shorthand: usize, or_insert_with: F) -> Ty<'tcx>
      .               where
      .                   F: FnOnce(&mut Self) -> Ty<'tcx>,
      .               {
 16,610 ( 0.01%)          let tcx = self.tcx();
      .           
 16,610 ( 0.01%)          let key = ty::CReaderCacheKey { cnum: Some(self.cdata().cnum), pos: shorthand };
      .           
 53,484 ( 0.02%)          if let Some(&ty) = tcx.ty_rcache.borrow().get(&key) {
      .                       return ty;
      .                   }
      .           
  3,239 ( 0.00%)          let ty = or_insert_with(self);
      .                   tcx.ty_rcache.borrow_mut().insert(key, ty);
      .                   ty
149,490 ( 0.05%)      }
      .           
      .               fn with_position<F, R>(&mut self, pos: usize, f: F) -> R
      .               where
      .                   F: FnOnce(&mut Self) -> R,
      .               {
      .                   let new_opaque = opaque::Decoder::new(self.opaque.data, pos);
      .                   let old_opaque = mem::replace(&mut self.opaque, new_opaque);
      .                   let old_state = mem::replace(&mut self.lazy_state, LazyState::NoNode);
      .                   let r = f(self);
 16,405 ( 0.01%)          self.opaque = old_opaque;
  3,281 ( 0.00%)          self.lazy_state = old_state;
      .                   r
      .               }
      .           
      .               fn decode_alloc_id(&mut self) -> rustc_middle::mir::interpret::AllocId {
      .                   if let Some(alloc_decoding_session) = self.alloc_decoding_session {
      .                       alloc_decoding_session.decode_alloc_id(self)
      .                   } else {
      .                       bug!("Attempting to decode interpret::AllocId without CrateMetadata")
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for CrateNum {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> CrateNum {
 61,968 ( 0.02%)          let cnum = CrateNum::from_u32(d.read_u32());
      .                   d.map_encoded_cnum_to_current(cnum)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for DefIndex {
    119 ( 0.00%)      fn decode(d: &mut DecodeContext<'a, 'tcx>) -> DefIndex {
106,954 ( 0.03%)          DefIndex::from_u32(d.read_u32())
    238 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnIndex {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> ExpnIndex {
      .                   ExpnIndex::from_u32(d.read_u32())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {
 64,392 ( 0.02%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> SyntaxContext {
 16,098 ( 0.01%)          let cdata = decoder.cdata();
 16,098 ( 0.01%)          let sess = decoder.sess.unwrap();
 32,196 ( 0.01%)          let cname = cdata.root.name;
      .                   rustc_span::hygiene::decode_syntax_context(decoder, &cdata.hygiene_context, |_, id| {
      .                       debug!("SpecializedDecoder<SyntaxContext>: decoding {}", id);
    104 ( 0.00%)              cdata
      .                           .root
      .                           .syntax_contexts
      .                           .get(cdata, id)
      .                           .unwrap_or_else(|| panic!("Missing SyntaxContext {:?} for crate {:?}", id, cname))
      .                           .decode((cdata, sess))
      .                   })
 80,490 ( 0.03%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnId {
  2,184 ( 0.00%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> ExpnId {
    312 ( 0.00%)          let local_cdata = decoder.cdata();
    312 ( 0.00%)          let sess = decoder.sess.unwrap();
      .           
      .                   let cnum = CrateNum::decode(decoder);
      .                   let index = u32::decode(decoder);
      .           
      .                   let expn_id = rustc_span::hygiene::decode_expn_id(cnum, index, |expn_id| {
      .                       let ExpnId { krate: cnum, local_id: index } = expn_id;
      .                       // Lookup local `ExpnData`s in our own crate data. Foreign `ExpnData`s
      .                       // are stored in the owning crate, to avoid duplication.
      .                       debug_assert_ne!(cnum, LOCAL_CRATE);
     35 ( 0.00%)              let crate_data = if cnum == local_cdata.cnum {
      .                           local_cdata
      .                       } else {
      .                           local_cdata.cstore.get_crate_data(cnum)
      .                       };
    175 ( 0.00%)              let expn_data = crate_data
      .                           .root
      .                           .expn_data
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
    175 ( 0.00%)              let expn_hash = crate_data
      .                           .root
      .                           .expn_hashes
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
    350 ( 0.00%)              (expn_data, expn_hash)
      .                   });
      .                   expn_id
  2,496 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Span {
128,160 ( 0.04%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Span {
 16,020 ( 0.01%)          let ctxt = SyntaxContext::decode(decoder);
      .                   let tag = u8::decode(decoder);
      .           
 32,040 ( 0.01%)          if tag == TAG_PARTIAL_SPAN {
      .                       return DUMMY_SP.with_ctxt(ctxt);
      .                   }
      .           
      .                   debug_assert!(tag == TAG_VALID_SPAN_LOCAL || tag == TAG_VALID_SPAN_FOREIGN);
      .           
      .                   let lo = BytePos::decode(decoder);
      .                   let len = BytePos::decode(decoder);
      .                   let hi = lo + len;
      .           
 48,030 ( 0.02%)          let Some(sess) = decoder.sess else {
      .                       bug!("Cannot decode Span without Session.")
      .                   };
      .           
      .                   // There are two possibilities here:
      .                   // 1. This is a 'local span', which is located inside a `SourceFile`
      .                   // that came from this crate. In this case, we use the source map data
      .                   // encoded in this crate. This branch should be taken nearly all of the time.
      .                   // 2. This is a 'foreign span', which is located inside a `SourceFile`
-- line 476 ----------------------------------------
-- line 492 ----------------------------------------
      .                   // a transitive dependency.
      .                   //
      .                   // When we encode a foreign span, we adjust its 'lo' and 'high' values
      .                   // to be based on the *foreign* crate (e.g. crate C), not the crate
      .                   // we are writing metadata for (e.g. crate B). This allows us to
      .                   // treat the 'local' and 'foreign' cases almost identically during deserialization:
      .                   // we can call `imported_source_files` for the proper crate, and binary search
      .                   // through the returned slice using our span.
 33,486 ( 0.01%)          let imported_source_files = if tag == TAG_VALID_SPAN_LOCAL {
      .                       decoder.cdata().imported_source_files(sess)
      .                   } else {
      .                       // When we encode a proc-macro crate, all `Span`s should be encoded
      .                       // with `TAG_VALID_SPAN_LOCAL`
      7 ( 0.00%)              if decoder.cdata().root.is_proc_macro_crate() {
      .                           // Decode `CrateNum` as u32 - using `CrateNum::decode` will ICE
      .                           // since we don't have `cnum_map` populated.
      .                           let cnum = u32::decode(decoder);
      .                           panic!(
      .                               "Decoding of crate {:?} tried to access proc-macro dep {:?}",
      .                               decoder.cdata().root.name,
      .                               cnum
      .                           );
-- line 513 ----------------------------------------
-- line 518 ----------------------------------------
      .                           "SpecializedDecoder<Span>::specialized_decode: loading source files from cnum {:?}",
      .                           cnum
      .                       );
      .           
      .                       // Decoding 'foreign' spans should be rare enough that it's
      .                       // not worth it to maintain a per-CrateNum cache for `last_source_file_index`.
      .                       // We just set it to 0, to ensure that we don't try to access something out
      .                       // of bounds for our initial 'guess'
     14 ( 0.00%)              decoder.last_source_file_index = 0;
      .           
      7 ( 0.00%)              let foreign_data = decoder.cdata().cstore.get_crate_data(cnum);
      .                       foreign_data.imported_source_files(sess)
      .                   };
      .           
      .                   let source_file = {
      .                       // Optimize for the case that most spans within a translated item
      .                       // originate from the same source_file.
 48,030 ( 0.02%)              let last_source_file = &imported_source_files[decoder.last_source_file_index];
      .           
 63,920 ( 0.02%)              if lo >= last_source_file.original_start_pos && lo <= last_source_file.original_end_pos
      .                       {
      .                           last_source_file
      .                       } else {
      .                           let index = imported_source_files
      .                               .binary_search_by_key(&lo, |source_file| source_file.original_start_pos)
  2,930 ( 0.00%)                      .unwrap_or_else(|index| index - 1);
      .           
      .                           // Don't try to cache the index for foreign spans,
      .                           // as this would require a map from CrateNums to indices
  1,466 ( 0.00%)                  if tag == TAG_VALID_SPAN_LOCAL {
  1,459 ( 0.00%)                      decoder.last_source_file_index = index;
      .                           }
  2,932 ( 0.00%)                  &imported_source_files[index]
      .                       }
      .                   };
      .           
      .                   // Make sure our binary search above is correct.
      .                   debug_assert!(
      .                       lo >= source_file.original_start_pos && lo <= source_file.original_end_pos,
      .                       "Bad binary search: lo={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       lo,
-- line 558 ----------------------------------------
-- line 565 ----------------------------------------
      .                       hi >= source_file.original_start_pos && hi <= source_file.original_end_pos,
      .                       "Bad binary search: hi={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       hi,
      .                       source_file.original_start_pos,
      .                       source_file.original_end_pos
      .                   );
      .           
      .                   let lo =
 64,040 ( 0.02%)              (lo + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .                   let hi =
      .                       (hi + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .           
      .                   // Do not try to decode parent for foreign spans.
      .                   Span::new(lo, hi, ctxt, None)
144,180 ( 0.05%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for &'tcx [thir::abstract_const::Node<'tcx>] {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
-- line 587 ----------------------------------------
-- line 590 ----------------------------------------
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<T>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
 15,206 ( 0.00%)          decoder.read_lazy_with_meta(())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<[T]>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
 13,483 ( 0.00%)          if len == 0 { Lazy::empty() } else { decoder.read_lazy_with_meta(len) }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, I: Idx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<Table<I, T>>
      .           where
      .               Option<T>: FixedSizeEncoding,
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
 16,393 ( 0.01%)          decoder.read_lazy_with_meta(len)
      .               }
      .           }
      .           
      .           implement_ty_decoder!(DecodeContext<'a, 'tcx>);
      .           
      .           impl<'tcx> MetadataBlob {
      .               crate fn new(metadata_ref: MetadataRef) -> MetadataBlob {
      .                   MetadataBlob(Lrc::new(metadata_ref))
-- line 626 ----------------------------------------
-- line 630 ----------------------------------------
      .                   self.blob().starts_with(METADATA_HEADER)
      .               }
      .           
      .               crate fn get_rustc_version(&self) -> String {
      .                   Lazy::<String>::from_position(NonZeroUsize::new(METADATA_HEADER.len() + 4).unwrap())
      .                       .decode(self)
      .               }
      .           
    291 ( 0.00%)      crate fn get_root(&self) -> CrateRoot<'tcx> {
     97 ( 0.00%)          let slice = &self.blob()[..];
      .                   let offset = METADATA_HEADER.len();
    485 ( 0.00%)          let pos = (((slice[offset + 0] as u32) << 24)
    194 ( 0.00%)              | ((slice[offset + 1] as u32) << 16)
    388 ( 0.00%)              | ((slice[offset + 2] as u32) << 8)
    291 ( 0.00%)              | ((slice[offset + 3] as u32) << 0)) as usize;
      .                   Lazy::<CrateRoot<'tcx>>::from_position(NonZeroUsize::new(pos).unwrap()).decode(self)
    485 ( 0.00%)      }
      .           
      .               crate fn list_crate_metadata(&self, out: &mut dyn io::Write) -> io::Result<()> {
      .                   let root = self.get_root();
      .                   writeln!(out, "Crate info:")?;
      .                   writeln!(out, "name {}{}", root.name, root.extra_filename)?;
      .                   writeln!(out, "hash {} stable_crate_id {:?}", root.hash, root.stable_crate_id)?;
      .                   writeln!(out, "proc_macro {:?}", root.proc_macro_data.is_some())?;
      .                   writeln!(out, "=External Dependencies=")?;
-- line 654 ----------------------------------------
-- line 666 ----------------------------------------
      .                   }
      .                   write!(out, "\n")?;
      .                   Ok(())
      .               }
      .           }
      .           
      .           impl CrateRoot<'_> {
      .               crate fn is_proc_macro_crate(&self) -> bool {
     63 ( 0.00%)          self.proc_macro_data.is_some()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
      8 ( 0.00%)          self.name
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
     32 ( 0.00%)          self.hash
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
     67 ( 0.00%)          self.stable_crate_id
      .               }
      .           
      .               crate fn triple(&self) -> &TargetTriple {
      .                   &self.triple
      .               }
      .           
      .               crate fn decode_crate_deps<'a>(
      .                   &self,
      .                   metadata: &'a MetadataBlob,
      .               ) -> impl ExactSizeIterator<Item = CrateDep> + Captures<'a> {
     62 ( 0.00%)          self.crate_deps.decode(metadata)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> CrateMetadataRef<'a> {
      7 ( 0.00%)      fn raw_proc_macro(self, id: DefIndex) -> &'a ProcMacro {
      .                   // DefIndex's in root.proc_macro_data have a one-to-one correspondence
      .                   // with items in 'raw_proc_macros'.
      2 ( 0.00%)          let pos = self
      .                       .root
      .                       .proc_macro_data
      .                       .as_ref()
      .                       .unwrap()
      .                       .macros
      .                       .decode(self)
      .                       .position(|i| i == id)
      .                       .unwrap();
      4 ( 0.00%)          &self.raw_proc_macros.unwrap()[pos]
      9 ( 0.00%)      }
      .           
 11,814 ( 0.00%)      fn opt_item_ident(self, item_index: DefIndex, sess: &Session) -> Option<Ident> {
  8,782 ( 0.00%)          let name = self.def_key(item_index).disambiguated_data.data.get_opt_name()?;
  4,529 ( 0.00%)          let span = match self.root.tables.ident_span.get(self, item_index) {
      .                       Some(lazy_span) => lazy_span.decode((self, sess)),
      .                       None => {
      .                           // FIXME: this weird case of a name with no span is specific to `extern crate`
      .                           // items, which are supposed to be treated like `use` items and only be encoded
      .                           // to metadata as `Export`s, return `None` because that's what all the callers
      .                           // expect in this case.
    135 ( 0.00%)                  assert_eq!(self.def_kind(item_index), DefKind::ExternCrate);
      .                           return None;
      .                       }
      .                   };
      .                   Some(Ident::new(name, span))
 15,112 ( 0.00%)      }
      .           
     92 ( 0.00%)      fn item_ident(self, item_index: DefIndex, sess: &Session) -> Ident {
  1,006 ( 0.00%)          self.opt_item_ident(item_index, sess).expect("no encoded ident for item")
    184 ( 0.00%)      }
      .           
      .               fn maybe_kind(self, item_id: DefIndex) -> Option<EntryKind> {
 15,216 ( 0.00%)          self.root.tables.kind.get(self, item_id).map(|k| k.decode(self))
      .               }
      .           
 60,864 ( 0.02%)      fn kind(self, item_id: DefIndex) -> EntryKind {
      .                   self.maybe_kind(item_id).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
 45,648 ( 0.01%)      }
      .           
  5,145 ( 0.00%)      fn def_kind(self, item_id: DefIndex) -> DefKind {
  3,870 ( 0.00%)          self.root.tables.def_kind.get(self, item_id).map(|k| k.decode(self)).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::def_kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
  2,940 ( 0.00%)      }
      .           
    828 ( 0.00%)      fn get_span(self, index: DefIndex, sess: &Session) -> Span {
  2,464 ( 0.00%)          self.root
      .                       .tables
      .                       .span
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing span for {:?}", index))
      .                       .decode((self, sess))
    460 ( 0.00%)      }
      .           
      .               fn load_proc_macro(self, id: DefIndex, sess: &Session) -> SyntaxExtension {
     16 ( 0.00%)          let (name, kind, helper_attrs) = match *self.raw_proc_macro(id) {
     10 ( 0.00%)              ProcMacro::CustomDerive { trait_name, attributes, client } => {
      .                           let helper_attrs =
      .                               attributes.iter().cloned().map(Symbol::intern).collect::<Vec<_>>();
      .                           (
      .                               trait_name,
      .                               SyntaxExtensionKind::Derive(Box::new(ProcMacroDerive { client })),
      6 ( 0.00%)                      helper_attrs,
      .                           )
      .                       }
      .                       ProcMacro::Attr { name, client } => {
      .                           (name, SyntaxExtensionKind::Attr(Box::new(AttrProcMacro { client })), Vec::new())
      .                       }
      .                       ProcMacro::Bang { name, client } => {
      .                           (name, SyntaxExtensionKind::Bang(Box::new(BangProcMacro { client })), Vec::new())
      .                       }
      .                   };
      .           
      5 ( 0.00%)          let attrs: Vec<_> = self.get_item_attrs(id, sess).collect();
     12 ( 0.00%)          SyntaxExtension::new(
      .                       sess,
      5 ( 0.00%)              kind,
      .                       self.get_span(id, sess),
      4 ( 0.00%)              helper_attrs,
      3 ( 0.00%)              self.root.edition,
      1 ( 0.00%)              Symbol::intern(name),
      .                       &attrs,
      .                   )
      .               }
      .           
    377 ( 0.00%)      fn get_trait_def(self, item_id: DefIndex, sess: &Session) -> ty::TraitDef {
    116 ( 0.00%)          match self.kind(item_id) {
     29 ( 0.00%)              EntryKind::Trait(data) => {
    174 ( 0.00%)                  let data = data.decode((self, sess));
    464 ( 0.00%)                  ty::TraitDef::new(
      .                               self.local_def_id(item_id),
     58 ( 0.00%)                      data.unsafety,
     58 ( 0.00%)                      data.paren_sugar,
     58 ( 0.00%)                      data.has_auto_impl,
     58 ( 0.00%)                      data.is_marker,
     29 ( 0.00%)                      data.skip_array_during_method_dispatch,
     29 ( 0.00%)                      data.specialization_kind,
    116 ( 0.00%)                      self.def_path_hash(item_id),
     29 ( 0.00%)                      data.must_implement_one_of,
      .                           )
      .                       }
      .                       EntryKind::TraitAlias => ty::TraitDef::new(
      .                           self.local_def_id(item_id),
      .                           hir::Unsafety::Normal,
      .                           false,
      .                           false,
      .                           false,
      .                           false,
      .                           ty::trait_def::TraitSpecializationKind::None,
      .                           self.def_path_hash(item_id),
      .                           None,
      .                       ),
      .                       _ => bug!("def-index does not refer to trait or trait alias"),
      .                   }
    261 ( 0.00%)      }
      .           
    126 ( 0.00%)      fn get_variant(
      .                   self,
      .                   kind: &EntryKind,
      .                   index: DefIndex,
      .                   parent_did: DefId,
      .                   sess: &Session,
      .               ) -> ty::VariantDef {
     56 ( 0.00%)          let data = match kind {
      .                       EntryKind::Variant(data) | EntryKind::Struct(data, _) | EntryKind::Union(data, _) => {
     70 ( 0.00%)                  data.decode(self)
      .                       }
      .                       _ => bug!(),
      .                   };
      .           
     52 ( 0.00%)          let adt_kind = match kind {
      .                       EntryKind::Variant(_) => ty::AdtKind::Enum,
      .                       EntryKind::Struct(..) => ty::AdtKind::Struct,
      .                       EntryKind::Union(..) => ty::AdtKind::Union,
      .                       _ => bug!(),
      .                   };
      .           
      .                   let variant_did =
      .                       if adt_kind == ty::AdtKind::Enum { Some(self.local_def_id(index)) } else { None };
     28 ( 0.00%)          let ctor_did = data.ctor.map(|index| self.local_def_id(index));
      .           
    308 ( 0.00%)          ty::VariantDef::new(
      .                       self.item_ident(index, sess).name,
      .                       variant_did,
      .                       ctor_did,
     56 ( 0.00%)              data.discr,
     84 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, index)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
      .                           .map(|index| ty::FieldDef {
     28 ( 0.00%)                      did: self.local_def_id(index),
     56 ( 0.00%)                      name: self.item_ident(index, sess).name,
     56 ( 0.00%)                      vis: self.get_visibility(index),
      .                           })
      .                           .collect(),
      .                       data.ctor_kind,
      .                       adt_kind,
      .                       parent_did,
      .                       false,
     14 ( 0.00%)              data.is_non_exhaustive,
      .                   )
    126 ( 0.00%)      }
      .           
    210 ( 0.00%)      fn get_adt_def(self, item_id: DefIndex, tcx: TyCtxt<'tcx>) -> &'tcx ty::AdtDef {
     56 ( 0.00%)          let kind = self.kind(item_id);
     28 ( 0.00%)          let did = self.local_def_id(item_id);
      .           
     66 ( 0.00%)          let (adt_kind, repr) = match kind {
      .                       EntryKind::Enum(repr) => (ty::AdtKind::Enum, repr),
      .                       EntryKind::Struct(_, repr) => (ty::AdtKind::Struct, repr),
      .                       EntryKind::Union(_, repr) => (ty::AdtKind::Union, repr),
      .                       _ => bug!("get_adt_def called on a non-ADT {:?}", did),
      .                   };
      .           
      .                   let variants = if let ty::AdtKind::Enum = adt_kind {
     10 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, item_id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
     34 ( 0.00%)                  .map(|index| self.get_variant(&self.kind(index), index, did, tcx.sess))
      .                           .collect()
      .                   } else {
     96 ( 0.00%)              std::iter::once(self.get_variant(&kind, item_id, did, tcx.sess)).collect()
      .                   };
      .           
    206 ( 0.00%)          tcx.alloc_adt_def(did, adt_kind, variants, repr)
     98 ( 0.00%)      }
      .           
      .               fn get_explicit_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
    845 ( 0.00%)          self.root.tables.explicit_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_inferred_outlives(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
    845 ( 0.00%)          self.root
      .                       .tables
      .                       .inferred_outlives
      .                       .get(self, item_id)
      8 ( 0.00%)              .map(|predicates| tcx.arena.alloc_from_iter(predicates.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_super_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
     95 ( 0.00%)          self.root.tables.super_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_explicit_item_bounds(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
      .                   self.root
-- line 945 ----------------------------------------
-- line 946 ----------------------------------------
      .                       .tables
      .                       .explicit_item_bounds
      .                       .get(self, item_id)
      .                       .map(|bounds| tcx.arena.alloc_from_iter(bounds.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_generics(self, item_id: DefIndex, sess: &Session) -> ty::Generics {
  1,582 ( 0.00%)          self.root.tables.generics.get(self, item_id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_type(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
  7,205 ( 0.00%)          self.root
      .                       .tables
      .                       .ty
      .                       .get(self, id)
      .                       .unwrap_or_else(|| panic!("Not a type: {:?}", id))
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_stability(self, id: DefIndex) -> Option<attr::Stability> {
    160 ( 0.00%)          self.root.tables.stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_const_stability(self, id: DefIndex) -> Option<attr::ConstStability> {
      .                   self.root.tables.const_stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_deprecation(self, id: DefIndex) -> Option<attr::Deprecation> {
    205 ( 0.00%)          self.root.tables.deprecation.get(self, id).map(|depr| depr.decode(self))
      .               }
      .           
    162 ( 0.00%)      fn get_visibility(self, id: DefIndex) -> ty::Visibility {
  1,891 ( 0.00%)          self.root.tables.visibility.get(self, id).unwrap().decode(self)
    108 ( 0.00%)      }
      .           
      .               fn get_impl_data(self, id: DefIndex) -> ImplData {
 41,292 ( 0.01%)          match self.kind(id) {
 34,410 ( 0.01%)              EntryKind::Impl(data) => data.decode(self),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_parent_impl(self, id: DefIndex) -> Option<DefId> {
 20,418 ( 0.01%)          self.get_impl_data(id).parent_impl
      .               }
      .           
      .               fn get_impl_polarity(self, id: DefIndex) -> ty::ImplPolarity {
     63 ( 0.00%)          self.get_impl_data(id).polarity
      .               }
      .           
      .               fn get_impl_defaultness(self, id: DefIndex) -> hir::Defaultness {
     13 ( 0.00%)          self.get_impl_data(id).defaultness
      .               }
      .           
      .               fn get_impl_constness(self, id: DefIndex) -> hir::Constness {
      .                   self.get_impl_data(id).constness
      .               }
      .           
      .               fn get_trait_item_def_id(self, id: DefIndex) -> Option<DefId> {
    755 ( 0.00%)          self.root.tables.trait_item_def_id.get(self, id).map(|d| d.decode(self))
      .               }
      .           
      .               fn get_coerce_unsized_info(self, id: DefIndex) -> Option<ty::adjustment::CoerceUnsizedInfo> {
      .                   self.get_impl_data(id).coerce_unsized_info
      .               }
      .           
      .               fn get_impl_trait(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Option<ty::TraitRef<'tcx>> {
 82,091 ( 0.03%)          self.root.tables.impl_trait_ref.get(self, id).map(|tr| tr.decode((self, tcx)))
      .               }
      .           
      .               fn get_expn_that_defined(self, id: DefIndex, sess: &Session) -> ExpnId {
  1,255 ( 0.00%)          self.root.tables.expn_that_defined.get(self, id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_const_param_default(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> rustc_middle::ty::Const<'tcx> {
      .                   self.root.tables.const_defaults.get(self, id).unwrap().decode((self, tcx))
-- line 1026 ----------------------------------------
-- line 1028 ----------------------------------------
      .           
      .               /// Iterates over all the stability attributes in the given crate.
      .               fn get_lib_features(self, tcx: TyCtxt<'tcx>) -> &'tcx [(Symbol, Option<Symbol>)] {
      .                   tcx.arena.alloc_from_iter(self.root.lib_features.decode(self))
      .               }
      .           
      .               /// Iterates over the language items in the given crate.
      .               fn get_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, usize)] {
     96 ( 0.00%)          tcx.arena.alloc_from_iter(
     64 ( 0.00%)              self.root
      .                           .lang_items
      .                           .decode(self)
    564 ( 0.00%)                  .map(|(def_index, index)| (self.local_def_id(def_index), index)),
      .                   )
      .               }
      .           
      .               /// Iterates over the diagnostic items in the given crate.
      .               fn get_diagnostic_items(self) -> DiagnosticItems {
      .                   let mut id_to_name = FxHashMap::default();
     64 ( 0.00%)          let name_to_id = self
      .                       .root
      .                       .diagnostic_items
      .                       .decode(self)
      .                       .map(|(name, def_index)| {
    130 ( 0.00%)                  let id = self.local_def_id(def_index);
    130 ( 0.00%)                  id_to_name.insert(id, name);
      .                           (name, id)
      .                       })
      .                       .collect();
    288 ( 0.00%)          DiagnosticItems { id_to_name, name_to_id }
      .               }
      .           
      .               /// Iterates over all named children of the given module,
      .               /// including both proper items and reexports.
      .               /// Module here is understood in name resolution sense - it can be a `mod` item,
      .               /// or a crate root, or an enum, or a trait.
      .               fn for_each_module_child(
      .                   self,
      .                   id: DefIndex,
      .                   mut callback: impl FnMut(ModChild),
      .                   sess: &Session,
      .               ) {
    192 ( 0.00%)          if let Some(data) = &self.root.proc_macro_data {
      .                       // If we are loading as a proc macro, we want to return
      .                       // the view of this crate as a proc macro crate.
      .                       if id == CRATE_DEF_INDEX {
      .                           for def_index in data.macros.decode(self) {
      .                               let raw_macro = self.raw_proc_macro(def_index);
      .                               let res = Res::Def(
      .                                   DefKind::Macro(macro_kind(raw_macro)),
      .                                   self.local_def_id(def_index),
-- line 1078 ----------------------------------------
-- line 1085 ----------------------------------------
      .                                   span: ident.span,
      .                               });
      .                           }
      .                       }
      .                       return;
      .                   }
      .           
      .                   // Iterate over all children.
    384 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    768 ( 0.00%)              for child_index in children.decode((self, sess)) {
  4,860 ( 0.00%)                  if let Some(ident) = self.opt_item_ident(child_index, sess) {
  1,047 ( 0.00%)                      let kind = self.def_kind(child_index);
    698 ( 0.00%)                      if matches!(kind, DefKind::Macro(..)) {
      .                                   // FIXME: Macros are currently encoded twice, once as items and once as
      .                                   // reexports. We ignore the items here and only use the reexports.
      .                                   continue;
      .                               }
      .                               let def_id = self.local_def_id(child_index);
      .                               let res = Res::Def(kind, def_id);
      .                               let vis = self.get_visibility(child_index);
      .                               let span = self.get_span(child_index, sess);
      .           
      .                               callback(ModChild { ident, res, vis, span });
      .           
      .                               // For non-re-export structs and variants add their constructors to children.
      .                               // Re-export lists automatically contain constructors when necessary.
  1,332 ( 0.00%)                      match kind {
      .                                   DefKind::Struct => {
     17 ( 0.00%)                              if let Some((ctor_def_id, ctor_kind)) =
      .                                           self.get_ctor_def_id_and_kind(child_index)
      .                                       {
      .                                           let ctor_res =
      .                                               Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);
      .                                           let vis = self.get_visibility(ctor_def_id.index);
      .                                           callback(ModChild { ident, res: ctor_res, vis, span });
      .                                       }
      .                                   }
-- line 1121 ----------------------------------------
-- line 1144 ----------------------------------------
      .                                       callback(ModChild { ident, res: ctor_res, vis, span });
      .                                   }
      .                                   _ => {}
      .                               }
      .                           }
      .                       }
      .                   }
      .           
    492 ( 0.00%)          match self.kind(id) {
     36 ( 0.00%)              EntryKind::Mod(exports) => {
    802 ( 0.00%)                  for exp in exports.decode((self, sess)) {
      .                               callback(exp);
      .                           }
      .                       }
      .                       EntryKind::Enum(..) | EntryKind::Trait(..) => {}
      .                       _ => bug!("`for_each_module_child` is called on a non-module: {:?}", self.def_kind(id)),
      .                   }
      .               }
      .           
      .               fn is_ctfe_mir_available(self, id: DefIndex) -> bool {
     76 ( 0.00%)          self.root.tables.mir_for_ctfe.get(self, id).is_some()
      .               }
      .           
      .               fn is_item_mir_available(self, id: DefIndex) -> bool {
     16 ( 0.00%)          self.root.tables.mir.get(self, id).is_some()
      .               }
      .           
      .               fn module_expansion(self, id: DefIndex, sess: &Session) -> ExpnId {
  1,645 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::Mod(_) | EntryKind::Enum(_) | EntryKind::Trait(_) => {
      .                           self.get_expn_that_defined(id, sess)
      .                       }
      .                       _ => panic!("Expected module, found {:?}", self.local_def_id(id)),
      .                   }
      .               }
      .           
      .               fn get_optimized_mir(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
     15 ( 0.00%)          self.root
      .                       .tables
      .                       .mir
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_optimized_mir: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_mir_for_ctfe(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
     95 ( 0.00%)          self.root
      .                       .tables
      .                       .mir_for_ctfe
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_mir_for_ctfe: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
-- line 1200 ----------------------------------------
-- line 1227 ----------------------------------------
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_promoted_mir: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn mir_const_qualif(self, id: DefIndex) -> mir::ConstQualifs {
      8 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::AnonConst(qualif, _)
      .                       | EntryKind::Const(qualif, _)
      .                       | EntryKind::AssocConst(
      .                           AssocContainer::ImplDefault
      .                           | AssocContainer::ImplFinal
      .                           | AssocContainer::TraitWithDefault,
      .                           qualif,
      .                           _,
      .                       ) => qualif,
      .                       _ => bug!("mir_const_qualif: unexpected kind"),
      .                   }
      .               }
      .           
      .               fn get_fn_has_self_parameter(self, id: DefIndex) -> bool {
    580 ( 0.00%)          match self.kind(id) {
    464 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).has_self,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn get_associated_item_def_ids(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [DefId] {
    336 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    144 ( 0.00%)              tcx.arena.alloc_from_iter(
     48 ( 0.00%)                  children.decode((self, tcx.sess)).map(|child_index| self.local_def_id(child_index)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
      .               }
      .           
  1,464 ( 0.00%)      fn get_associated_item(self, id: DefIndex, sess: &Session) -> ty::AssocItem {
    854 ( 0.00%)          let def_key = self.def_key(id);
      .                   let parent = self.local_def_id(def_key.parent.unwrap());
      .                   let ident = self.item_ident(id, sess);
      .           
    876 ( 0.00%)          let (kind, container, has_self) = match self.kind(id) {
      .                       EntryKind::AssocConst(container, _, _) => (ty::AssocKind::Const, container, false),
    111 ( 0.00%)              EntryKind::AssocFn(data) => {
      .                           let data = data.decode(self);
    777 ( 0.00%)                  (ty::AssocKind::Fn, data.container, data.has_self)
      .                       }
     22 ( 0.00%)              EntryKind::AssocType(container) => (ty::AssocKind::Type, container, false),
      .                       _ => bug!("cannot get associated-item of `{:?}`", def_key),
      .                   };
      .           
  2,196 ( 0.00%)          ty::AssocItem {
      .                       name: ident.name,
      .                       kind,
      .                       vis: self.get_visibility(id),
      .                       defaultness: container.defaultness(),
      .                       def_id: self.local_def_id(id),
      .                       trait_item_def_id: self.get_trait_item_def_id(id),
      .                       container: container.with_def_id(parent),
      .                       fn_has_self_parameter: has_self,
      .                   }
  1,098 ( 0.00%)      }
      .           
      .               fn get_item_variances(self, id: DefIndex) -> impl Iterator<Item = ty::Variance> + 'a {
     50 ( 0.00%)          self.root.tables.variances.get(self, id).unwrap_or_else(Lazy::empty).decode(self)
      .               }
      .           
      .               fn get_ctor_def_id_and_kind(self, node_id: DefIndex) -> Option<(DefId, CtorKind)> {
    601 ( 0.00%)          match self.kind(node_id) {
      .                       EntryKind::Struct(data, _) | EntryKind::Variant(data) => {
    260 ( 0.00%)                  let vdata = data.decode(self);
    237 ( 0.00%)                  vdata.ctor.map(|index| (self.local_def_id(index), vdata.ctor_kind))
      .                       }
      .                       _ => None,
      .                   }
    320 ( 0.00%)      }
      .           
    108 ( 0.00%)      fn get_item_attrs(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = ast::Attribute> + 'a {
    381 ( 0.00%)          self.root
      .                       .tables
      .                       .attributes
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           // Structure and variant constructors don't have any attributes encoded for them,
      .                           // but we assume that someone passing a constructor ID actually wants to look at
      .                           // the attributes on the corresponding struct or variant.
      .                           let def_key = self.def_key(id);
-- line 1320 ----------------------------------------
-- line 1322 ----------------------------------------
      .                           let parent_id = def_key.parent.expect("no parent for a constructor");
      .                           self.root
      .                               .tables
      .                               .attributes
      .                               .get(self, parent_id)
      .                               .expect("no encoded attributes for a structure or variant")
      .                       })
      .                       .decode((self, sess))
     81 ( 0.00%)      }
      .           
      .               fn get_struct_field_names(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = Spanned<Symbol>> + 'a {
    325 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
    920 ( 0.00%)              .map(move |index| respan(self.get_span(index, sess), self.item_ident(index, sess).name))
      .               }
      .           
      .               fn get_struct_field_visibilities(self, id: DefIndex) -> impl Iterator<Item = Visibility> + 'a {
    160 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
     54 ( 0.00%)              .map(move |field_index| self.get_visibility(field_index))
      .               }
      .           
      .               fn get_inherent_implementations_for_type(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> &'tcx [DefId] {
     20 ( 0.00%)          tcx.arena.alloc_from_iter(
     25 ( 0.00%)              self.root
      .                           .tables
      .                           .inherent_impls
      .                           .get(self, id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
    128 ( 0.00%)                  .map(|index| self.local_def_id(index)),
      .                   )
      .               }
      .           
      .               fn get_traits(self) -> impl Iterator<Item = DefId> + 'a {
      .                   self.root.traits.decode(self).map(move |index| self.local_def_id(index))
      .               }
      .           
      .               fn get_trait_impls(self) -> impl Iterator<Item = (DefId, DefId, Option<SimplifiedType>)> + 'a {
-- line 1376 ----------------------------------------
-- line 1380 ----------------------------------------
      .                           index: *trait_index,
      .                       };
      .                       impls.decode(self).map(move |(impl_index, simplified_self_ty)| {
      .                           (trait_def_id, self.local_def_id(impl_index), simplified_self_ty)
      .                       })
      .                   })
      .               }
      .           
  8,352 ( 0.00%)      fn get_implementations_of_trait(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_def_id: DefId,
      .               ) -> &'tcx [(DefId, Option<SimplifiedType>)] {
    928 ( 0.00%)          if self.trait_impls.is_empty() {
      .                       return &[];
      .                   }
      .           
      .                   // Do a reverse lookup beforehand to avoid touching the crate_num
      .                   // hash map in the loop below.
  1,208 ( 0.00%)          let key = match self.reverse_translate_def_id(trait_def_id) {
      .                       Some(def_id) => (def_id.krate.as_u32(), def_id.index),
      .                       None => return &[],
      .                   };
      .           
      .                   if let Some(impls) = self.trait_impls.get(&key) {
    844 ( 0.00%)              tcx.arena.alloc_from_iter(
    422 ( 0.00%)                  impls
      .                               .decode(self)
  7,281 ( 0.00%)                      .map(|(idx, simplified_self_ty)| (self.local_def_id(idx), simplified_self_ty)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
  7,424 ( 0.00%)      }
      .           
      .               fn get_trait_of_item(self, id: DefIndex) -> Option<DefId> {
    116 ( 0.00%)          let def_key = self.def_key(id);
    145 ( 0.00%)          match def_key.disambiguated_data.data {
      .                       DefPathData::TypeNs(..) | DefPathData::ValueNs(..) => (),
      .                       // Not an associated item
      .                       _ => return None,
      .                   }
    252 ( 0.00%)          def_key.parent.and_then(|parent_index| match self.kind(parent_index) {
      .                       EntryKind::Trait(_) | EntryKind::TraitAlias => Some(self.local_def_id(parent_index)),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               fn get_native_libraries(self, sess: &'a Session) -> impl Iterator<Item = NativeLib> + 'a {
     64 ( 0.00%)          self.root.native_libraries.decode((self, sess))
      .               }
      .           
      .               fn get_proc_macro_quoted_span(self, index: usize, sess: &Session) -> Span {
      .                   self.root
      .                       .tables
      .                       .proc_macro_quoted_spans
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing proc macro quoted span: {:?}", index))
-- line 1437 ----------------------------------------
-- line 1450 ----------------------------------------
      .                       self.root.dylib_dependency_formats.decode(self).enumerate().flat_map(|(i, link)| {
      .                           let cnum = CrateNum::new(i + 1);
      .                           link.map(|link| (self.cnum_map[cnum], link))
      .                       }),
      .                   )
      .               }
      .           
      .               fn get_missing_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [lang_items::LangItem] {
    160 ( 0.00%)          tcx.arena.alloc_from_iter(self.root.lang_items_missing.decode(self))
      .               }
      .           
      .               fn get_fn_param_names(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [Ident] {
      .                   let param_names = match self.kind(id) {
      .                       EntryKind::Fn(data) | EntryKind::ForeignFn(data) => data.decode(self).param_names,
      .                       EntryKind::AssocFn(data) => data.decode(self).fn_data.param_names,
      .                       _ => Lazy::empty(),
      .                   };
      .                   tcx.arena.alloc_from_iter(param_names.decode((self, tcx)))
      .               }
      .           
      .               fn exported_symbols(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ExportedSymbol<'tcx>, SymbolExportLevel)] {
    192 ( 0.00%)          tcx.arena.alloc_from_iter(self.root.exported_symbols.decode((self, tcx)))
      .               }
      .           
      .               fn get_rendered_const(self, id: DefIndex) -> String {
      .                   match self.kind(id) {
      .                       EntryKind::AnonConst(_, data)
      .                       | EntryKind::Const(_, data)
      .                       | EntryKind::AssocConst(_, _, data) => data.decode(self).0,
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_macro(self, id: DefIndex, sess: &Session) -> MacroDef {
     48 ( 0.00%)          match self.kind(id) {
      8 ( 0.00%)              EntryKind::MacroDef(macro_def) => macro_def.decode((self, sess)),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               // This replicates some of the logic of the crate-local `is_const_fn_raw` query, because we
      .               // don't serialize constness for tuple variant and tuple struct constructors.
      .               fn is_const_fn_raw(self, id: DefIndex) -> bool {
     27 ( 0.00%)          let constness = match self.kind(id) {
      6 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).fn_data.constness,
      .                       EntryKind::Fn(data) => data.decode(self).constness,
      .                       EntryKind::ForeignFn(data) => data.decode(self).constness,
      .                       EntryKind::Variant(..) | EntryKind::Struct(..) => hir::Constness::Const,
      .                       _ => hir::Constness::NotConst,
      .                   };
      .                   constness == hir::Constness::Const
      .               }
      .           
-- line 1505 ----------------------------------------
-- line 1508 ----------------------------------------
      .                       EntryKind::Fn(data) => data.decode(self).asyncness,
      .                       EntryKind::AssocFn(data) => data.decode(self).fn_data.asyncness,
      .                       EntryKind::ForeignFn(data) => data.decode(self).asyncness,
      .                       _ => bug!("asyncness: expected function kind"),
      .                   }
      .               }
      .           
      .               fn is_foreign_item(self, id: DefIndex) -> bool {
    220 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::ForeignImmStatic | EntryKind::ForeignMutStatic | EntryKind::ForeignFn(_) => {
      .                           true
      .                       }
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn static_mutability(self, id: DefIndex) -> Option<hir::Mutability> {
    209 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::ImmStatic | EntryKind::ForeignImmStatic => Some(hir::Mutability::Not),
      .                       EntryKind::MutStatic | EntryKind::ForeignMutStatic => Some(hir::Mutability::Mut),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn generator_kind(self, id: DefIndex) -> Option<hir::GeneratorKind> {
      .                   match self.kind(id) {
      .                       EntryKind::Generator(data) => Some(data),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn fn_sig(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {
    205 ( 0.00%)          self.root.tables.fn_sig.get(self, id).unwrap().decode((self, tcx))
      .               }
      .           
      .               #[inline]
 15,596 ( 0.00%)      fn def_key(self, index: DefIndex) -> DefKey {
  4,466 ( 0.00%)          *self
      .                       .def_key_cache
      .                       .lock()
      .                       .entry(index)
  5,530 ( 0.00%)              .or_insert_with(|| self.root.tables.def_keys.get(self, index).unwrap().decode(self))
 17,824 ( 0.01%)      }
      .           
      .               // Returns the path leading to the thing with this `id`.
      .               fn def_path(self, id: DefIndex) -> DefPath {
      .                   debug!("def_path(cnum={:?}, id={:?})", self.cnum, id);
     12 ( 0.00%)          DefPath::make(self.cnum, id, |parent| self.def_key(parent))
      .               }
      .           
      .               fn def_path_hash_unlocked(
      .                   self,
      .                   index: DefIndex,
      .                   def_path_hashes: &mut FxHashMap<DefIndex, DefPathHash>,
      .               ) -> DefPathHash {
  1,190 ( 0.00%)          *def_path_hashes.entry(index).or_insert_with(|| {
    860 ( 0.00%)              self.root.tables.def_path_hashes.get(self, index).unwrap().decode(self)
      .                   })
      .               }
      .           
      .               #[inline]
  4,165 ( 0.00%)      fn def_path_hash(self, index: DefIndex) -> DefPathHash {
      .                   let mut def_path_hashes = self.def_path_hash_cache.lock();
      .                   self.def_path_hash_unlocked(index, &mut def_path_hashes)
  4,760 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn def_path_hash_to_def_index(self, hash: DefPathHash) -> DefIndex {
      .                   self.def_path_hash_map.def_path_hash_to_def_index(&hash)
      .               }
      .           
      .               fn expn_hash_to_expn_id(self, sess: &Session, index_guess: u32, hash: ExpnHash) -> ExpnId {
      .                   debug_assert_eq!(ExpnId::from_hash(hash), None);
-- line 1580 ----------------------------------------
-- line 1635 ----------------------------------------
      .               /// Proc macro crates don't currently export spans, so this function does not have
      .               /// to work for them.
      .               fn imported_source_files(self, sess: &Session) -> &'a [ImportedSourceFile] {
      .                   // Translate the virtual `/rustc/$hash` prefix back to a real directory
      .                   // that should hold actual sources, where possible.
      .                   //
      .                   // NOTE: if you update this, you might need to also update bootstrap's code for generating
      .                   // the `rust-src` component in `Src::run` in `src/bootstrap/dist.rs`.
 32,020 ( 0.01%)          let virtual_rust_source_base_dir = option_env!("CFG_VIRTUAL_RUST_SOURCE_BASE_DIR")
      .                       .map(Path::new)
      .                       .filter(|_| {
      .                           // Only spend time on further checks if we have what to translate *to*.
      .                           sess.opts.real_rust_source_base_dir.is_some()
      .                       })
      .                       .filter(|virtual_dir| {
      .                           // Don't translate away `/rustc/$hash` if we're still remapping to it,
      .                           // since that means we're still building `std`/`rustc` that need it,
      .                           // and we don't want the real path to leak into codegen/debuginfo.
      .                           !sess.opts.remap_path_prefix.iter().any(|(_from, to)| to == virtual_dir)
      .                       });
 32,020 ( 0.01%)          let try_to_translate_virtual_to_real = |name: &mut rustc_span::FileName| {
      .                       debug!(
      .                           "try_to_translate_virtual_to_real(name={:?}): \
      .                            virtual_rust_source_base_dir={:?}, real_rust_source_base_dir={:?}",
      .                           name, virtual_rust_source_base_dir, sess.opts.real_rust_source_base_dir,
      .                       );
      .           
  3,005 ( 0.00%)              if let Some(virtual_dir) = virtual_rust_source_base_dir {
      .                           if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                               if let rustc_span::FileName::Real(old_name) = name {
      .                                   if let rustc_span::RealFileName::Remapped { local_path: _, virtual_name } =
      .                                       old_name
      .                                   {
      .                                       if let Ok(rest) = virtual_name.strip_prefix(virtual_dir) {
      .                                           let virtual_name = virtual_name.clone();
      .           
-- line 1670 ----------------------------------------
-- line 1709 ----------------------------------------
      .                                           *old_name = new_name;
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   };
      .           
 32,013 ( 0.01%)          self.cdata.source_map_import_info.get_or_init(|| {
     48 ( 0.00%)              let external_source_map = self.root.source_map.decode(self);
      .           
      .                       external_source_map
      .                           .map(|source_file_to_import| {
      .                               // We can't reuse an existing SourceFile, so allocate a new one
      .                               // containing the information we need.
      .                               let rustc_span::SourceFile {
 12,621 ( 0.00%)                          mut name,
  3,606 ( 0.00%)                          src_hash,
    601 ( 0.00%)                          start_pos,
  1,202 ( 0.00%)                          end_pos,
  3,005 ( 0.00%)                          mut lines,
  3,005 ( 0.00%)                          mut multibyte_chars,
  3,606 ( 0.00%)                          mut non_narrow_chars,
  3,005 ( 0.00%)                          mut normalized_pos,
  3,606 ( 0.00%)                          name_hash,
      .                                   ..
      .                               } = source_file_to_import;
      .           
      .                               // If this file is under $sysroot/lib/rustlib/src/ but has not been remapped
      .                               // during rust bootstrapping by `remap-debuginfo = true`, and the user
      .                               // wish to simulate that behaviour by -Z simulate-remapped-rust-src-base,
      .                               // then we change `name` to a similar state as if the rust was bootstrapped
      .                               // with `remap-debuginfo = true`.
      .                               // This is useful for testing so that tests about the effects of
      .                               // `try_to_translate_virtual_to_real` don't have to worry about how the
      .                               // compiler is bootstrapped.
  1,202 ( 0.00%)                      if let Some(virtual_dir) =
      .                                   &sess.opts.debugging_opts.simulate_remapped_rust_src_base
      .                               {
      .                                   if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                                       if let rustc_span::FileName::Real(ref mut old_name) = name {
      .                                           if let rustc_span::RealFileName::LocalPath(local) = old_name {
      .                                               if let Ok(rest) = local.strip_prefix(real_dir) {
      .                                                   *old_name = rustc_span::RealFileName::Remapped {
      .                                                       local_path: None,
-- line 1753 ----------------------------------------
-- line 1767 ----------------------------------------
      .                               let source_length = (end_pos - start_pos).to_usize();
      .           
      .                               // Translate line-start positions and multibyte character
      .                               // position into frame of reference local to file.
      .                               // `SourceMap::new_imported_source_file()` will then translate those
      .                               // coordinates to their new global frame of reference when the
      .                               // offset of the SourceFile is known.
      .                               for pos in &mut lines {
772,388 ( 0.24%)                          *pos = *pos - start_pos;
      .                               }
      .                               for mbc in &mut multibyte_chars {
  1,740 ( 0.00%)                          mbc.pos = mbc.pos - start_pos;
      .                               }
      .                               for swc in &mut non_narrow_chars {
    930 ( 0.00%)                          *swc = *swc - start_pos;
      .                               }
      .                               for np in &mut normalized_pos {
      .                                   np.pos = np.pos - start_pos;
      .                               }
      .           
 10,818 ( 0.00%)                      let local_version = sess.source_map().new_imported_source_file(
  7,813 ( 0.00%)                          name,
  4,207 ( 0.00%)                          src_hash,
      .                                   name_hash,
      .                                   source_length,
  1,202 ( 0.00%)                          self.cnum,
  3,005 ( 0.00%)                          lines,
  3,606 ( 0.00%)                          multibyte_chars,
  3,005 ( 0.00%)                          non_narrow_chars,
  2,404 ( 0.00%)                          normalized_pos,
      .                                   start_pos,
      .                                   end_pos,
      .                               );
      .                               debug!(
      .                                   "CrateMetaData::imported_source_files alloc \
      .                                    source_file {:?} original (start_pos {:?} end_pos {:?}) \
      .                                    translated (start_pos {:?} end_pos {:?})",
      .                                   local_version.name,
-- line 1804 ----------------------------------------
-- line 1808 ----------------------------------------
      .                                   local_version.end_pos
      .                               );
      .           
      .                               ImportedSourceFile {
      .                                   original_start_pos: start_pos,
      .                                   original_end_pos: end_pos,
      .                                   translated_source_file: local_version,
      .                               }
  1,803 ( 0.00%)                  })
      .                           .collect()
      .                   })
      .               }
      .           }
      .           
      .           impl CrateMetadata {
    384 ( 0.00%)      crate fn new(
      .                   sess: &Session,
      .                   blob: MetadataBlob,
      .                   root: CrateRoot<'static>,
      .                   raw_proc_macros: Option<&'static [ProcMacro]>,
      .                   cnum: CrateNum,
      .                   cnum_map: CrateNumMap,
      .                   dep_kind: CrateDepKind,
      .                   source: CrateSource,
      .                   private_dep: bool,
      .                   host_hash: Option<Svh>,
      .               ) -> CrateMetadata {
     96 ( 0.00%)          let trait_impls = root
      .                       .impls
      .                       .decode((&blob, sess))
      .                       .map(|trait_impls| (trait_impls.trait_id, trait_impls.impls))
      .                       .collect();
      .                   let alloc_decoding_state =
     96 ( 0.00%)              AllocDecodingState::new(root.interpret_alloc_index.decode(&blob).collect());
      .                   let dependencies = Lock::new(cnum_map.iter().cloned().collect());
      .           
      .                   // Pre-decode the DefPathHash->DefIndex table. This is a cheap operation
      .                   // that does not copy any data. It just does some data verification.
     32 ( 0.00%)          let def_path_hash_map = root.def_path_hash_map.decode(&blob);
      .           
    736 ( 0.00%)          CrateMetadata {
     32 ( 0.00%)              blob,
     96 ( 0.00%)              root,
    128 ( 0.00%)              trait_impls,
      .                       raw_proc_macros,
      .                       source_map_import_info: OnceCell::new(),
    128 ( 0.00%)              def_path_hash_map,
      .                       expn_hash_map: Default::default(),
    224 ( 0.00%)              alloc_decoding_state,
      .                       cnum,
    128 ( 0.00%)              cnum_map,
    160 ( 0.00%)              dependencies,
      .                       dep_kind: Lock::new(dep_kind),
    384 ( 0.00%)              source,
      .                       private_dep,
      .                       host_hash,
      .                       extern_crate: Lock::new(None),
      .                       hygiene_context: Default::default(),
      .                       def_key_cache: Default::default(),
      .                       def_path_hash_cache: Default::default(),
      .                   }
    288 ( 0.00%)      }
      .           
      .               crate fn dependencies(&self) -> LockGuard<'_, Vec<CrateNum>> {
      .                   self.dependencies.borrow()
      .               }
      .           
      .               crate fn add_dependency(&self, cnum: CrateNum) {
      .                   self.dependencies.borrow_mut().push(cnum);
      .               }
      .           
      .               crate fn update_extern_crate(&self, new_extern_crate: ExternCrate) -> bool {
      .                   let mut extern_crate = self.extern_crate.borrow_mut();
      .                   let update = Some(new_extern_crate.rank()) > extern_crate.as_ref().map(ExternCrate::rank);
      .                   if update {
    165 ( 0.00%)              *extern_crate = Some(new_extern_crate);
      .                   }
      .                   update
      .               }
      .           
      .               crate fn source(&self) -> &CrateSource {
     24 ( 0.00%)          &self.source
      .               }
      .           
      .               crate fn dep_kind(&self) -> CrateDepKind {
      .                   *self.dep_kind.lock()
      .               }
      .           
      .               crate fn update_dep_kind(&self, f: impl FnOnce(CrateDepKind) -> CrateDepKind) {
    184 ( 0.00%)          self.dep_kind.with_lock(|dep_kind| *dep_kind = f(*dep_kind))
      .               }
      .           
      .               crate fn panic_strategy(&self) -> PanicStrategy {
      .                   self.root.panic_strategy
      .               }
      .           
      .               crate fn needs_panic_runtime(&self) -> bool {
      .                   self.root.needs_panic_runtime
-- line 1905 ----------------------------------------
-- line 1909 ----------------------------------------
      .                   self.root.panic_runtime
      .               }
      .           
      .               crate fn is_profiler_runtime(&self) -> bool {
      .                   self.root.profiler_runtime
      .               }
      .           
      .               crate fn needs_allocator(&self) -> bool {
      6 ( 0.00%)          self.root.needs_allocator
      .               }
      .           
      .               crate fn has_global_allocator(&self) -> bool {
      .                   self.root.has_global_allocator
      .               }
      .           
      .               crate fn has_default_lib_allocator(&self) -> bool {
      .                   self.root.has_default_lib_allocator
      .               }
      .           
      .               crate fn is_proc_macro_crate(&self) -> bool {
      .                   self.root.is_proc_macro_crate()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
    180 ( 0.00%)          self.root.name
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
      .                   self.root.stable_crate_id
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
      .                   self.root.hash
      .               }
      .           
      .               fn num_def_ids(&self) -> usize {
      .                   self.root.tables.def_keys.size()
      .               }
      .           
      .               fn local_def_id(&self, index: DefIndex) -> DefId {
  9,898 ( 0.00%)          DefId { krate: self.cnum, index }
      .               }
      .           
      .               // Translate a DefId from the current compilation environment to a DefId
      .               // for an external crate.
      .               fn reverse_translate_def_id(&self, did: DefId) -> Option<DefId> {
      .                   for (local, &global) in self.cnum_map.iter_enumerated() {
  4,462 ( 0.00%)              if global == did.krate {
      .                           return Some(DefId { krate: local, index: did.index });
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .           }
      .           
-- line 1964 ----------------------------------------

389,878 ( 0.12%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs
--------------------------------------------------------------------------------
Ir                 

-- line 222 ----------------------------------------
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               fn eq(&self, other: &Rhs) -> bool;
        .           
        .               /// This method tests for `!=`.
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
      651 ( 0.00%)      fn ne(&self, other: &Rhs) -> bool {
    3,069 ( 0.00%)          !self.eq(other)
      868 ( 0.00%)      }
        .           }
        .           
        .           /// Derive macro generating an impl of the trait `PartialEq`.
        .           #[rustc_builtin_macro]
        .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
        .           #[allow_internal_unstable(core_intrinsics, structural_match)]
        .           pub macro PartialEq($item:item) {
        .               /* compiler built-in */
-- line 240 ----------------------------------------
-- line 328 ----------------------------------------
        .           /// assert_eq!(Ordering::Less, result);
        .           ///
        .           /// let result = 1.cmp(&1);
        .           /// assert_eq!(Ordering::Equal, result);
        .           ///
        .           /// let result = 2.cmp(&1);
        .           /// assert_eq!(Ordering::Greater, result);
        .           /// ```
      510 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Debug, Hash)]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[repr(i8)]
        .           pub enum Ordering {
        .               /// An ordering where a compared value is less than another.
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               Less = -1,
        .               /// An ordering where a compared value is equal to another.
        .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 344 ----------------------------------------
-- line 569 ----------------------------------------
        .               /// let result = x.0.cmp(&y.0).then_with(|| x.1.cmp(&y.1)).then_with(|| x.2.cmp(&y.2));
        .               ///
        .               /// assert_eq!(result, Ordering::Less);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "ordering_chaining", since = "1.17.0")]
        .               pub fn then_with<F: FnOnce() -> Ordering>(self, f: F) -> Ordering {
    1,007 ( 0.00%)          match self {
        .                       Equal => f(),
        .                       _ => self,
        .                   }
        .               }
        .           }
        .           
        .           /// A helper struct for reverse ordering.
        .           ///
-- line 585 ----------------------------------------
-- line 788 ----------------------------------------
        .               ///
        .               /// ```
        .               /// assert_eq!(2, 1.max(2));
        .               /// assert_eq!(2, 2.max(2));
        .               /// ```
        .               #[stable(feature = "ord_max_min", since = "1.21.0")]
        .               #[inline]
        .               #[must_use]
    4,830 ( 0.00%)      fn max(self, other: Self) -> Self
        .               where
        .                   Self: Sized,
        .               {
    6,050 ( 0.00%)          max_by(self, other, Ord::cmp)
    3,220 ( 0.00%)      }
        .           
        .               /// Compares and returns the minimum of two values.
        .               ///
        .               /// Returns the first argument if the comparison determines them to be equal.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 809 ----------------------------------------
-- line 812 ----------------------------------------
        .               /// ```
        .               #[stable(feature = "ord_max_min", since = "1.21.0")]
        .               #[inline]
        .               #[must_use]
        .               fn min(self, other: Self) -> Self
        .               where
        .                   Self: Sized,
        .               {
      154 ( 0.00%)          min_by(self, other, Ord::cmp)
        .               }
        .           
        .               /// Restrict a value to a certain interval.
        .               ///
        .               /// Returns `max` if `self` is greater than `max`, and `min` if `self` is
        .               /// less than `min`. Otherwise this returns `self`.
        .               ///
        .               /// # Panics
-- line 828 ----------------------------------------
-- line 1097 ----------------------------------------
        .               /// let result = 2.0 < 1.0;
        .               /// assert_eq!(result, false);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
        .               fn lt(&self, other: &Rhs) -> bool {
    4,235 ( 0.00%)          matches!(self.partial_cmp(other), Some(Less))
        .               }
        .           
        .               /// This method tests less than or equal to (for `self` and `other`) and is used by the `<=`
        .               /// operator.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1113 ----------------------------------------
-- line 1121 ----------------------------------------
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
        .               fn le(&self, other: &Rhs) -> bool {
        .                   // Pattern `Some(Less | Eq)` optimizes worse than negating `None | Some(Greater)`.
        .                   // FIXME: The root cause was fixed upstream in LLVM with:
        .                   // https://github.com/llvm/llvm-project/commit/9bad7de9a3fb844f1ca2965f35d0c2a3d1e11775
        .                   // Revert this workaround once support for LLVM 12 gets dropped.
   41,374 ( 0.01%)          !matches!(self.partial_cmp(other), None | Some(Greater))
        .               }
        .           
        .               /// This method tests greater than (for `self` and `other`) and is used by the `>` operator.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let result = 1.0 > 2.0;
-- line 1137 ----------------------------------------
-- line 1140 ----------------------------------------
        .               /// let result = 2.0 > 2.0;
        .               /// assert_eq!(result, false);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
        .               fn gt(&self, other: &Rhs) -> bool {
   50,566 ( 0.02%)          matches!(self.partial_cmp(other), Some(Greater))
        .               }
        .           
        .               /// This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`
        .               /// operator.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1156 ----------------------------------------
-- line 1160 ----------------------------------------
        .               /// let result = 2.0 >= 2.0;
        .               /// assert_eq!(result, true);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
        .               fn ge(&self, other: &Rhs) -> bool {
       49 ( 0.00%)          matches!(self.partial_cmp(other), Some(Greater | Equal))
        .               }
        .           }
        .           
        .           /// Derive macro generating an impl of the trait `PartialOrd`.
        .           #[rustc_builtin_macro]
        .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
        .           #[allow_internal_unstable(core_intrinsics)]
        .           pub macro PartialOrd($item:item) {
-- line 1176 ----------------------------------------
-- line 1210 ----------------------------------------
        .           ///
        .           /// assert_eq!(cmp::min_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 1);
        .           /// assert_eq!(cmp::min_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
        .           pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
   60,926 ( 0.02%)      match compare(&v1, &v2) {
        .                   Ordering::Less | Ordering::Equal => v1,
        .                   Ordering::Greater => v2,
        .               }
        .           }
        .           
        .           /// Returns the element that gives the minimum value from the specified function.
        .           ///
        .           /// Returns the first argument if the comparison determines them to be equal.
-- line 1226 ----------------------------------------
-- line 1253 ----------------------------------------
        .           ///
        .           /// assert_eq!(2, cmp::max(1, 2));
        .           /// assert_eq!(2, cmp::max(2, 2));
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[cfg_attr(not(test), rustc_diagnostic_item = "cmp_max")]
    4,830 ( 0.00%)  pub fn max<T: Ord>(v1: T, v2: T) -> T {
    3,220 ( 0.00%)      v1.max(v2)
    3,220 ( 0.00%)  }
        .           
        .           /// Returns the maximum of two values with respect to the specified comparison function.
        .           ///
        .           /// Returns the second argument if the comparison determines them to be equal.
        .           ///
        .           /// # Examples
        .           ///
        .           /// ```
-- line 1271 ----------------------------------------
-- line 1272 ----------------------------------------
        .           /// use std::cmp;
        .           ///
        .           /// assert_eq!(cmp::max_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
        .           /// assert_eq!(cmp::max_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 2);
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
    4,830 ( 0.00%)  pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
   85,041 ( 0.03%)      match compare(&v1, &v2) {
    3,549 ( 0.00%)          Ordering::Less | Ordering::Equal => v2,
    2,217 ( 0.00%)          Ordering::Greater => v1,
        .               }
   13,619 ( 0.00%)  }
        .           
        .           /// Returns the element that gives the maximum value from the specified function.
        .           ///
        .           /// Returns the second argument if the comparison determines them to be equal.
        .           ///
        .           /// # Examples
        .           ///
        .           /// ```
-- line 1293 ----------------------------------------
-- line 1308 ----------------------------------------
        .               use crate::cmp::Ordering::{self, Equal, Greater, Less};
        .               use crate::hint::unreachable_unchecked;
        .           
        .               macro_rules! partial_eq_impl {
        .                   ($($t:ty)*) => ($(
        .                       #[stable(feature = "rust1", since = "1.0.0")]
        .                       impl PartialEq for $t {
        .                           #[inline]
    9,532 ( 0.00%)                  fn eq(&self, other: &$t) -> bool { (*self) == (*other) }
        .                           #[inline]
   69,879 ( 0.02%)                  fn ne(&self, other: &$t) -> bool { (*self) != (*other) }
        .                       }
        .                   )*)
        .               }
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl PartialEq for () {
        .                   #[inline]
        .                   fn eq(&self, _other: &()) -> bool {
-- line 1326 ----------------------------------------
-- line 1392 ----------------------------------------
        .                   ($($t:ty)*) => ($(
        .                       #[stable(feature = "rust1", since = "1.0.0")]
        .                       impl PartialOrd for $t {
        .                           #[inline]
        .                           fn partial_cmp(&self, other: &$t) -> Option<Ordering> {
        .                               Some(self.cmp(other))
        .                           }
        .                           #[inline]
1,135,430 ( 0.36%)                  fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
        .                           #[inline]
    2,290 ( 0.00%)                  fn le(&self, other: &$t) -> bool { (*self) <= (*other) }
        .                           #[inline]
        .                           fn ge(&self, other: &$t) -> bool { (*self) >= (*other) }
        .                           #[inline]
        .                           fn gt(&self, other: &$t) -> bool { (*self) > (*other) }
        .                       }
        .           
        .                       #[stable(feature = "rust1", since = "1.0.0")]
        .                       impl Ord for $t {
        .                           #[inline]
    8,050 ( 0.00%)                  fn cmp(&self, other: &$t) -> Ordering {
        .                               // The order here is important to generate more optimal assembly.
        .                               // See <https://github.com/rust-lang/rust/issues/63758> for more info.
  311,491 ( 0.10%)                      if *self < *other { Less }
    3,695 ( 0.00%)                      else if *self == *other { Equal }
      739 ( 0.00%)                      else { Greater }
    4,830 ( 0.00%)                  }
        .                       }
        .                   )*)
        .               }
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl Ord for () {
        .                   #[inline]
        .                   fn cmp(&self, _other: &()) -> Ordering {
-- line 1426 ----------------------------------------
-- line 1430 ----------------------------------------
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl Ord for bool {
        .                   #[inline]
        .                   fn cmp(&self, other: &bool) -> Ordering {
        .                       // Casting to i8's and converting the difference to an Ordering generates
        .                       // more optimal assembly.
        .                       // See <https://github.com/rust-lang/rust/issues/66780> for more info.
    1,198 ( 0.00%)              match (*self as i8) - (*other as i8) {
        .                           -1 => Less,
        .                           0 => Equal,
        .                           1 => Greater,
        .                           // SAFETY: bool as i8 returns 0 or 1, so the difference can't be anything else
        .                           _ => unsafe { unreachable_unchecked() },
        .                       }
        .                   }
        .               }
-- line 1446 ----------------------------------------
-- line 1474 ----------------------------------------
        .               // & pointers
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized, B: ?Sized> PartialEq<&B> for &A
        .               where
        .                   A: PartialEq<B>,
        .               {
        .                   #[inline]
   19,310 ( 0.01%)          fn eq(&self, other: &&B) -> bool {
   55,378 ( 0.02%)              PartialEq::eq(*self, *other)
   19,034 ( 0.01%)          }
        .                   #[inline]
       15 ( 0.00%)          fn ne(&self, other: &&B) -> bool {
       96 ( 0.00%)              PartialEq::ne(*self, *other)
    1,153 ( 0.00%)          }
        .               }
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized, B: ?Sized> PartialOrd<&B> for &A
        .               where
        .                   A: PartialOrd<B>,
        .               {
        .                   #[inline]
        .                   fn partial_cmp(&self, other: &&B) -> Option<Ordering> {
-- line 1496 ----------------------------------------
-- line 1516 ----------------------------------------
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized> Ord for &A
        .               where
        .                   A: Ord,
        .               {
        .                   #[inline]
        .                   fn cmp(&self, other: &Self) -> Ordering {
        .                       Ord::cmp(*self, *other)
      301 ( 0.00%)          }
        .               }
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized> Eq for &A where A: Eq {}
        .           
        .               // &mut pointers
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized, B: ?Sized> PartialEq<&mut B> for &mut A
-- line 1532 ----------------------------------------

  304,636 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/server.rs
--------------------------------------------------------------------------------
Ir              

-- line 28 ----------------------------------------
     .                   (type SourceFile: 'static + Clone;);
     .               (type MultiSpan) =>
     .                   (type MultiSpan: 'static;);
     .               (type Diagnostic) =>
     .                   (type Diagnostic: 'static;);
     .               (type Span) =>
     .                   (type Span: 'static + Copy + Eq + Hash;);
     .               (fn drop(&mut self, $arg:ident: $arg_ty:ty)) =>
 2,958 ( 0.00%)          (fn drop(&mut self, $arg: $arg_ty) { mem::drop($arg) });
     .               (fn clone(&mut self, $arg:ident: $arg_ty:ty) -> $ret_ty:ty) =>
   153 ( 0.00%)          (fn clone(&mut self, $arg: $arg_ty) -> $ret_ty { $arg.clone() });
     .               ($($item:tt)*) => ($($item)*;)
     .           }
     .           
     .           macro_rules! declare_server_traits {
     .               ($($name:ident {
     .                   $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)?;)*
     .               }),* $(,)?) => {
     .                   pub trait Types {
-- line 46 ----------------------------------------
-- line 64 ----------------------------------------
     .                   $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)?;)*
     .               }),* $(,)?) => {
     .                   impl<S: Types> Types for MarkedTypes<S> {
     .                       $(type $name = Marked<S::$name, client::$name>;)*
     .                   }
     .           
     .                   $(impl<S: $name> $name for MarkedTypes<S> {
     .                       $(fn $method(&mut self, $($arg: $arg_ty),*) $(-> $ret_ty)? {
19,036 ( 0.01%)                  <_>::mark($name::$method(&mut self.0, $($arg.unmark()),*))
     .                       })*
     .                   })*
     .               }
     .           }
     .           with_api!(Self, self_, define_mark_types_impls);
     .           
     .           struct Dispatcher<S: Types> {
     .               handle_store: HandleStore<S>,
-- line 80 ----------------------------------------
-- line 89 ----------------------------------------
     .                   pub trait DispatcherTrait {
     .                       // HACK(eddyb) these are here to allow `Self::$name` to work below.
     .                       $(type $name;)*
     .                       fn dispatch(&mut self, b: Buffer<u8>) -> Buffer<u8>;
     .                   }
     .           
     .                   impl<S: Server> DispatcherTrait for Dispatcher<MarkedTypes<S>> {
     .                       $(type $name = <MarkedTypes<S> as Types>::$name;)*
64,770 ( 0.02%)              fn dispatch(&mut self, mut b: Buffer<u8>) -> Buffer<u8> {
     .                           let Dispatcher { handle_store, server } = self;
     .           
19,431 ( 0.01%)                  let mut reader = &b[..];
45,339 ( 0.01%)                  match api_tags::Method::decode(&mut reader, &mut ()) {
30,877 ( 0.01%)                      $(api_tags::Method::$name(m) => match m {
     .                                   $(api_tags::$name::$method => {
     .                                       let mut call_method = || {
15,964 ( 0.00%)                                  reverse_decode!(reader, handle_store; $($arg: $arg_ty),*);
     .                                           $name::$method(server, $($arg),*)
     .                                       };
     .                                       // HACK(eddyb) don't use `panic::catch_unwind` in a panic.
     .                                       // If client and server happen to use the same `libstd`,
     .                                       // `catch_unwind` asserts that the panic counter was 0,
     .                                       // even when the closure passed to it didn't panic.
     .                                       let r = if thread::panicking() {
     .                                           Ok(call_method())
     .                                       } else {
28,229 ( 0.01%)                                  panic::catch_unwind(panic::AssertUnwindSafe(call_method))
     .                                               .map_err(PanicMessage::from)
     .                                       };
     .           
     .                                       b.clear();
71,684 ( 0.02%)                              r.encode(&mut b, handle_store);
     .                                   })*
     .                               }),*
     .                           }
38,862 ( 0.01%)                  b
58,293 ( 0.02%)              }
     .                   }
     .               }
     .           }
     .           with_api!(Self, self_, define_dispatcher_impl);
     .           
     .           pub trait ExecutionStrategy {
     .               fn run_bridge_and_client<D: Copy + Send + 'static>(
     .                   &self,
-- line 133 ----------------------------------------
-- line 145 ----------------------------------------
     .               fn run_bridge_and_client<D: Copy + Send + 'static>(
     .                   &self,
     .                   dispatcher: &mut impl DispatcherTrait,
     .                   input: Buffer<u8>,
     .                   run_client: extern "C" fn(Bridge<'_>, D) -> Buffer<u8>,
     .                   client_data: D,
     .                   force_show_panics: bool,
     .               ) -> Buffer<u8> {
58,297 ( 0.02%)          let mut dispatch = |b| dispatcher.dispatch(b);
     .           
    40 ( 0.00%)          run_client(
    44 ( 0.00%)              Bridge { cached_buffer: input, dispatch: (&mut dispatch).into(), force_show_panics },
     .                       client_data,
     .                   )
     .               }
     .           }
     .           
     .           // NOTE(eddyb) Two implementations are provided, the second one is a bit
     .           // faster but neither is anywhere near as fast as same-thread execution.
     .           
-- line 164 ----------------------------------------
-- line 263 ----------------------------------------
     .                       *state.lock().unwrap() = State::Res(b);
     .                       join_handle.thread().unpark();
     .                   }
     .           
     .                   join_handle.join().unwrap()
     .               }
     .           }
     .           
    52 ( 0.00%)  fn run_server<
     .               S: Server,
     .               I: Encode<HandleStore<MarkedTypes<S>>>,
     .               O: for<'a, 's> DecodeMut<'a, 's, HandleStore<MarkedTypes<S>>>,
     .               D: Copy + Send + 'static,
     .           >(
     .               strategy: &impl ExecutionStrategy,
     .               handle_counters: &'static client::HandleCounters,
     .               server: S,
     .               input: I,
     .               run_client: extern "C" fn(Bridge<'_>, D) -> Buffer<u8>,
     .               client_data: D,
     .               force_show_panics: bool,
     .           ) -> Result<O, PanicMessage> {
     .               let mut dispatcher =
    68 ( 0.00%)          Dispatcher { handle_store: HandleStore::new(handle_counters), server: MarkedTypes(server) };
     .           
     .               let mut b = Buffer::new();
    12 ( 0.00%)      input.encode(&mut b, &mut dispatcher.handle_store);
     .           
    24 ( 0.00%)      b = strategy.run_bridge_and_client(
     .                   &mut dispatcher,
     .                   b,
     .                   run_client,
     .                   client_data,
     .                   force_show_panics,
     .               );
     .           
    20 ( 0.00%)      Result::decode(&mut &b[..], &mut dispatcher.handle_store)
    40 ( 0.00%)  }
     .           
     .           impl client::Client<fn(crate::TokenStream) -> crate::TokenStream> {
     .               pub fn run<S: Server>(
     .                   &self,
     .                   strategy: &impl ExecutionStrategy,
     .                   server: S,
     .                   input: S::TokenStream,
     .                   force_show_panics: bool,
     .               ) -> Result<S::TokenStream, PanicMessage> {
     8 ( 0.00%)          let client::Client { get_handle_counters, run, f } = *self;
    44 ( 0.00%)          run_server(
     .                       strategy,
     4 ( 0.00%)              get_handle_counters(),
    40 ( 0.00%)              server,
     .                       <MarkedTypes<S> as Types>::TokenStream::mark(input),
     .                       run,
     .                       f,
     .                       force_show_panics,
     .                   )
     .                   .map(<MarkedTypes<S> as Types>::TokenStream::unmark)
     .               }
     .           }
-- line 322 ----------------------------------------

16,051 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/server.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs
--------------------------------------------------------------------------------
Ir               

-- line 72 ----------------------------------------
      .                   fn deref(&self) -> &Self::Target {
      .                       &self.0
      .                   }
      .               }
      .           
      .               impl<T> !DerefMut for MonotonicVec<T> {}
      .           }
      .           
  1,267 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, Copy, HashStable_Generic)]
      .           pub struct Spanned<T> {
      2 ( 0.00%)      pub node: T,
      .               pub span: Span,
      .           }
      .           
      .           pub fn respan<T>(sp: Span, t: T) -> Spanned<T> {
  1,398 ( 0.00%)      Spanned { node: t, span: sp }
    480 ( 0.00%)  }
      .           
      .           pub fn dummy_spanned<T>(t: T) -> Spanned<T> {
     19 ( 0.00%)      respan(DUMMY_SP, t)
      .           }
      .           
      .           // _____________________________________________________________________________
      .           // SourceFile, MultiByteChar, FileName, FileLines
      .           //
      .           
      .           /// An abstraction over the fs operations used by the Parser.
      .           pub trait FileLoader {
-- line 99 ----------------------------------------
-- line 103 ----------------------------------------
      .               /// Read the contents of a UTF-8 file into memory.
      .               fn read_file(&self, path: &Path) -> io::Result<String>;
      .           }
      .           
      .           /// A FileLoader that uses std::fs to load real files.
      .           pub struct RealFileLoader;
      .           
      .           impl FileLoader for RealFileLoader {
     16 ( 0.00%)      fn file_exists(&self, path: &Path) -> bool {
      .                   path.exists()
     16 ( 0.00%)      }
      .           
      4 ( 0.00%)      fn read_file(&self, path: &Path) -> io::Result<String> {
      .                   fs::read_to_string(path)
      6 ( 0.00%)      }
      .           }
      .           
      .           /// This is a [SourceFile] identifier that is used to correlate source files between
      .           /// subsequent compilation sessions (which is something we need to do during
      .           /// incremental compilation).
      .           ///
      .           /// The [StableSourceFileId] also contains the CrateNum of the crate the source
      .           /// file was originally parsed for. This way we get two separate entries in
-- line 125 ----------------------------------------
-- line 128 ----------------------------------------
      .           /// at the point where we discover that there's a local use of the file in
      .           /// addition to the upstream one, we might already have made decisions based on
      .           /// the assumption that it's an upstream file. Treating the two files as
      .           /// different has no real downsides.
      .           #[derive(Copy, Clone, PartialEq, Eq, Hash, Encodable, Decodable, Debug)]
      .           pub struct StableSourceFileId {
      .               // A hash of the source file's FileName. This is hash so that it's size
      .               // is more predictable than if we included the actual FileName value.
     54 ( 0.00%)      pub file_name_hash: u64,
      .           
      .               // The CrateNum of the crate this source file was originally parsed for.
      .               // We cannot include this information in the hash because at the time
      .               // of hashing we don't have the context to map from the CrateNum's numeric
      .               // value to a StableCrateId.
      .               pub cnum: CrateNum,
      .           }
      .           
      .           // FIXME: we need a more globally consistent approach to the problem solved by
      .           // StableSourceFileId, perhaps built atop source_file.name_hash.
      .           impl StableSourceFileId {
      .               pub fn new(source_file: &SourceFile) -> StableSourceFileId {
  1,202 ( 0.00%)          StableSourceFileId::new_from_name(&source_file.name, source_file.cnum)
      .               }
      .           
  3,030 ( 0.00%)      fn new_from_name(name: &FileName, cnum: CrateNum) -> StableSourceFileId {
      .                   let mut hasher = StableHasher::new();
    606 ( 0.00%)          name.hash(&mut hasher);
      .                   StableSourceFileId { file_name_hash: hasher.finish(), cnum }
  3,636 ( 0.00%)      }
      .           }
      .           
      .           // _____________________________________________________________________________
      .           // SourceMap
      .           //
      .           
      .           #[derive(Default)]
      .           pub(super) struct SourceMapFiles {
-- line 164 ----------------------------------------
-- line 176 ----------------------------------------
      .               // `--remap-path-prefix` to all `SourceFile`s allocated within this `SourceMap`.
      .               path_mapping: FilePathMapping,
      .           
      .               /// The algorithm used for hashing the contents of each source file.
      .               hash_kind: SourceFileHashAlgorithm,
      .           }
      .           
      .           impl SourceMap {
      3 ( 0.00%)      pub fn new(path_mapping: FilePathMapping) -> SourceMap {
      .                   Self::with_file_loader_and_hash_kind(
      .                       Box::new(RealFileLoader),
     12 ( 0.00%)              path_mapping,
      .                       SourceFileHashAlgorithm::Md5,
      .                   )
      3 ( 0.00%)      }
      .           
      1 ( 0.00%)      pub fn with_file_loader_and_hash_kind(
      .                   file_loader: Box<dyn FileLoader + Sync + Send>,
      .                   path_mapping: FilePathMapping,
      .                   hash_kind: SourceFileHashAlgorithm,
      .               ) -> SourceMap {
     23 ( 0.00%)          SourceMap {
      .                       used_address_space: AtomicU32::new(0),
      .                       files: Default::default(),
      .                       file_loader,
      4 ( 0.00%)              path_mapping,
      .                       hash_kind,
      .                   }
      1 ( 0.00%)      }
      .           
      .               pub fn path_mapping(&self) -> &FilePathMapping {
     14 ( 0.00%)          &self.path_mapping
     14 ( 0.00%)      }
      .           
      .               pub fn file_exists(&self, path: &Path) -> bool {
     20 ( 0.00%)          self.file_loader.file_exists(path)
      .               }
      .           
     22 ( 0.00%)      pub fn load_file(&self, path: &Path) -> io::Result<Lrc<SourceFile>> {
      8 ( 0.00%)          let src = self.file_loader.read_file(path)?;
      .                   let filename = path.to_owned().into();
     36 ( 0.00%)          Ok(self.new_source_file(filename, src))
     18 ( 0.00%)      }
      .           
      .               /// Loads source file as a binary blob.
      .               ///
      .               /// Unlike `load_file`, guarantees that no normalization like BOM-removal
      .               /// takes place.
      .               pub fn load_binary_file(&self, path: &Path) -> io::Result<Vec<u8>> {
      .                   // Ideally, this should use `self.file_loader`, but it can't
      .                   // deal with binary files yet.
-- line 226 ----------------------------------------
-- line 233 ----------------------------------------
      .                   // empty string.
      .                   let text = std::str::from_utf8(&bytes).unwrap_or("").to_string();
      .                   self.new_source_file(path.to_owned().into(), text);
      .                   Ok(bytes)
      .               }
      .           
      .               // By returning a `MonotonicVec`, we ensure that consumers cannot invalidate
      .               // any existing indices pointing into `files`.
     60 ( 0.00%)      pub fn files(&self) -> MappedReadGuard<'_, monotonic::MonotonicVec<Lrc<SourceFile>>> {
      .                   ReadGuard::map(self.files.borrow(), |files| &files.source_files)
    180 ( 0.00%)      }
      .           
     20 ( 0.00%)      pub fn source_file_by_stable_id(
      .                   &self,
      .                   stable_id: StableSourceFileId,
      .               ) -> Option<Lrc<SourceFile>> {
      .                   self.files.borrow().stable_id_to_source_file.get(&stable_id).cloned()
     25 ( 0.00%)      }
      .           
      .               fn allocate_address_space(&self, size: usize) -> Result<usize, OffsetOverflowError> {
    606 ( 0.00%)          let size = u32::try_from(size).map_err(|_| OffsetOverflowError)?;
      .           
      .                   loop {
    606 ( 0.00%)              let current = self.used_address_space.load(Ordering::Relaxed);
  1,818 ( 0.00%)              let next = current
      .                           .checked_add(size)
      .                           // Add one so there is some space between files. This lets us distinguish
      .                           // positions in the `SourceMap`, even in the presence of zero-length files.
      .                           .and_then(|next| next.checked_add(1))
      .                           .ok_or(OffsetOverflowError)?;
      .           
      .                       if self
      .                           .used_address_space
-- line 265 ----------------------------------------
-- line 269 ----------------------------------------
      .                           return Ok(usize::try_from(current).unwrap());
      .                       }
      .                   }
      .               }
      .           
      .               /// Creates a new `SourceFile`.
      .               /// If a file already exists in the `SourceMap` with the same ID, that file is returned
      .               /// unmodified.
     40 ( 0.00%)      pub fn new_source_file(&self, filename: FileName, src: String) -> Lrc<SourceFile> {
     60 ( 0.00%)          self.try_new_source_file(filename, src).unwrap_or_else(|OffsetOverflowError| {
      .                       eprintln!("fatal error: rustc does not support files larger than 4GB");
      .                       crate::fatal_error::FatalError.raise()
      .                   })
     45 ( 0.00%)      }
      .           
      .               fn try_new_source_file(
      .                   &self,
      .                   filename: FileName,
      .                   src: String,
      .               ) -> Result<Lrc<SourceFile>, OffsetOverflowError> {
      .                   // Note that filename may not be a valid path, eg it may be `<anon>` etc,
      .                   // but this is okay because the directory determined by `path.pop()` will
      .                   // be empty, so the working directory will be used.
     65 ( 0.00%)          let (filename, _) = self.path_mapping.map_filename_prefix(&filename);
      .           
     10 ( 0.00%)          let file_id = StableSourceFileId::new_from_name(&filename, LOCAL_CRATE);
      .           
     30 ( 0.00%)          let lrc_sf = match self.source_file_by_stable_id(file_id) {
      .                       Some(lrc_sf) => lrc_sf,
      .                       None => {
      .                           let start_pos = self.allocate_address_space(src.len())?;
      .           
     30 ( 0.00%)                  let source_file = Lrc::new(SourceFile::new(
     45 ( 0.00%)                      filename,
     15 ( 0.00%)                      src,
      .                               Pos::from_usize(start_pos),
      .                               self.hash_kind,
      .                           ));
      .           
      .                           // Let's make sure the file_id we generated above actually matches
      .                           // the ID we generate for the SourceFile we just created.
      .                           debug_assert_eq!(StableSourceFileId::new(&source_file), file_id);
      .           
-- line 311 ----------------------------------------
-- line 319 ----------------------------------------
      .                   };
      .                   Ok(lrc_sf)
      .               }
      .           
      .               /// Allocates a new `SourceFile` representing a source file from an external
      .               /// crate. The source code of such an "imported `SourceFile`" is not available,
      .               /// but we still know enough to generate accurate debuginfo location
      .               /// information for things inlined from other crates.
  4,808 ( 0.00%)      pub fn new_imported_source_file(
      .                   &self,
      .                   filename: FileName,
      .                   src_hash: SourceFileHash,
      .                   name_hash: u128,
      .                   source_len: usize,
      .                   cnum: CrateNum,
      .                   mut file_local_lines: Vec<BytePos>,
      .                   mut file_local_multibyte_chars: Vec<MultiByteChar>,
-- line 335 ----------------------------------------
-- line 341 ----------------------------------------
      .                   let start_pos = self
      .                       .allocate_address_space(source_len)
      .                       .expect("not enough address space for imported source file");
      .           
      .                   let end_pos = Pos::from_usize(start_pos + source_len);
      .                   let start_pos = Pos::from_usize(start_pos);
      .           
      .                   for pos in &mut file_local_lines {
386,194 ( 0.12%)              *pos = *pos + start_pos;
      .                   }
      .           
      .                   for mbc in &mut file_local_multibyte_chars {
    870 ( 0.00%)              mbc.pos = mbc.pos + start_pos;
      .                   }
      .           
      .                   for swc in &mut file_local_non_narrow_chars {
    620 ( 0.00%)              *swc = *swc + start_pos;
      .                   }
      .           
      .                   for nc in &mut file_local_normalized_pos {
      .                       nc.pos = nc.pos + start_pos;
      .                   }
      .           
  1,803 ( 0.00%)          let source_file = Lrc::new(SourceFile {
  4,808 ( 0.00%)              name: filename,
      .                       src: None,
      .                       src_hash,
      .                       external_src: Lock::new(ExternalSource::Foreign {
      .                           kind: ExternalSourceKind::AbsentOk,
      .                           original_start_pos,
      .                           original_end_pos,
      .                       }),
      .                       start_pos,
-- line 373 ----------------------------------------
-- line 383 ----------------------------------------
      .                   let mut files = self.files.borrow_mut();
      .           
      .                   files.source_files.push(source_file.clone());
      .                   files
      .                       .stable_id_to_source_file
      .                       .insert(StableSourceFileId::new(&source_file), source_file.clone());
      .           
      .                   source_file
  5,409 ( 0.00%)      }
      .           
      .               // If there is a doctest offset, applies it to the line.
      .               pub fn doctest_offset_line(&self, file: &FileName, orig: usize) -> usize {
      .                   match file {
      .                       FileName::DocTest(_, offset) => {
      .                           if *offset < 0 {
      .                               orig - (-(*offset)) as usize
      .                           } else {
-- line 399 ----------------------------------------
-- line 400 ----------------------------------------
      .                               orig + *offset as usize
      .                           }
      .                       }
      .                       _ => orig,
      .                   }
      .               }
      .           
      .               /// Return the SourceFile that contains the given `BytePos`
    789 ( 0.00%)      pub fn lookup_source_file(&self, pos: BytePos) -> Lrc<SourceFile> {
    263 ( 0.00%)          let idx = self.lookup_source_file_idx(pos);
    263 ( 0.00%)          (*self.files.borrow().source_files)[idx].clone()
    789 ( 0.00%)      }
      .           
      .               /// Looks up source information about a `BytePos`.
      .               pub fn lookup_char_pos(&self, pos: BytePos) -> Loc {
      5 ( 0.00%)          let sf = self.lookup_source_file(pos);
      6 ( 0.00%)          let (line, col, col_display) = sf.lookup_file_pos_with_col_display(pos);
      3 ( 0.00%)          Loc { file: sf, line, col, col_display }
      .               }
      .           
      .               // If the corresponding `SourceFile` is empty, does not return a line number.
  1,572 ( 0.00%)      pub fn lookup_line(&self, pos: BytePos) -> Result<SourceFileAndLine, Lrc<SourceFile>> {
  1,310 ( 0.00%)          let f = self.lookup_source_file(pos);
      .           
    246 ( 0.00%)          match f.lookup_line(pos) {
    786 ( 0.00%)              Some(line) => Ok(SourceFileAndLine { sf: f, line }),
    262 ( 0.00%)              None => Err(f),
      .                   }
  1,572 ( 0.00%)      }
      .           
      .               fn span_to_string(&self, sp: Span, filename_display_pref: FileNameDisplayPreference) -> String {
      .                   if self.files.borrow().source_files.is_empty() || sp.is_dummy() {
      .                       return "no-location".to_string();
      .                   }
      .           
      .                   let lo = self.lookup_char_pos(sp.lo());
      .                   let hi = self.lookup_char_pos(sp.hi());
-- line 436 ----------------------------------------
-- line 451 ----------------------------------------
      .           
      .               /// Format the span location to be printed in diagnostics. Must not be emitted
      .               /// to build artifacts as this may leak local file paths. Use span_to_embeddable_string
      .               /// for string suitable for embedding.
      .               pub fn span_to_diagnostic_string(&self, sp: Span) -> String {
      .                   self.span_to_string(sp, self.path_mapping.filename_display_for_diagnostics)
      .               }
      .           
     11 ( 0.00%)      pub fn span_to_filename(&self, sp: Span) -> FileName {
      3 ( 0.00%)          self.lookup_char_pos(sp.lo()).file.name.clone()
      8 ( 0.00%)      }
      .           
      .               pub fn filename_for_diagnostics<'a>(&self, filename: &'a FileName) -> FileNameDisplay<'a> {
      .                   filename.display(self.path_mapping.filename_display_for_diagnostics)
      .               }
      .           
    110 ( 0.00%)      pub fn is_multiline(&self, sp: Span) -> bool {
     40 ( 0.00%)          let lo = self.lookup_source_file_idx(sp.lo());
     40 ( 0.00%)          let hi = self.lookup_source_file_idx(sp.hi());
     20 ( 0.00%)          if lo != hi {
      .                       return true;
      .                   }
     20 ( 0.00%)          let f = (*self.files.borrow().source_files)[lo].clone();
      .                   f.lookup_line(sp.lo()) != f.lookup_line(sp.hi())
     90 ( 0.00%)      }
      .           
      .               #[instrument(skip(self), level = "trace")]
      .               pub fn is_valid_span(&self, sp: Span) -> Result<(Loc, Loc), SpanLinesError> {
      .                   let lo = self.lookup_char_pos(sp.lo());
      .                   trace!(?lo);
      .                   let hi = self.lookup_char_pos(sp.hi());
      .                   trace!(?hi);
      .                   if lo.file.start_pos != hi.file.start_pos {
-- line 483 ----------------------------------------
-- line 533 ----------------------------------------
      .           
      .               /// Extracts the source surrounding the given `Span` using the `extract_source` function. The
      .               /// extract function takes three arguments: a string slice containing the source, an index in
      .               /// the slice for the beginning of the span and an index in the slice for the end of the span.
      .               fn span_to_source<F, T>(&self, sp: Span, extract_source: F) -> Result<T, SpanSnippetError>
      .               where
      .                   F: Fn(&str, usize, usize) -> Result<T, SpanSnippetError>,
      .               {
    280 ( 0.00%)          let local_begin = self.lookup_byte_offset(sp.lo());
    280 ( 0.00%)          let local_end = self.lookup_byte_offset(sp.hi());
      .           
     80 ( 0.00%)          if local_begin.sf.start_pos != local_end.sf.start_pos {
      .                       Err(SpanSnippetError::DistinctSources(DistinctSources {
      .                           begin: (local_begin.sf.name.clone(), local_begin.sf.start_pos),
      .                           end: (local_end.sf.name.clone(), local_end.sf.start_pos),
      .                       }))
      .                   } else {
      .                       self.ensure_source_file_source_present(local_begin.sf.clone());
      .           
      .                       let start_index = local_begin.pos.to_usize();
      .                       let end_index = local_end.pos.to_usize();
     40 ( 0.00%)              let source_len = (local_begin.sf.end_pos - local_begin.sf.start_pos).to_usize();
      .           
    160 ( 0.00%)              if start_index > end_index || end_index > source_len {
      .                           return Err(SpanSnippetError::MalformedForSourcemap(MalformedSourceMapPositions {
      .                               name: local_begin.sf.name.clone(),
      .                               source_len,
      .                               begin_pos: local_begin.pos,
      .                               end_pos: local_end.pos,
      .                           }));
      .                       }
      .           
    120 ( 0.00%)              if let Some(ref src) = local_begin.sf.src {
      .                           extract_source(src, start_index, end_index)
      .                       } else if let Some(src) = local_begin.sf.external_src.borrow().get_source() {
      .                           extract_source(src, start_index, end_index)
      .                       } else {
      .                           Err(SpanSnippetError::SourceNotAvailable { filename: local_begin.sf.name.clone() })
      .                       }
      .                   }
      .               }
-- line 573 ----------------------------------------
-- line 579 ----------------------------------------
      .               pub fn is_local_span(&self, sp: Span) -> bool {
      .                   let local_begin = self.lookup_byte_offset(sp.lo());
      .                   let local_end = self.lookup_byte_offset(sp.hi());
      .                   // This might be a weird span that covers multiple files
      .                   local_begin.sf.src.is_some() && local_end.sf.src.is_some()
      .               }
      .           
      .               /// Returns the source snippet as `String` corresponding to the given `Span`.
    480 ( 0.00%)      pub fn span_to_snippet(&self, sp: Span) -> Result<String, SpanSnippetError> {
      .                   self.span_to_source(sp, |src, start_index, end_index| {
      .                       src.get(start_index..end_index)
      .                           .map(|s| s.to_string())
      .                           .ok_or(SpanSnippetError::IllFormedSpan(sp))
      .                   })
    360 ( 0.00%)      }
      .           
      .               pub fn span_to_margin(&self, sp: Span) -> Option<usize> {
      .                   Some(self.indentation_before(sp)?.len())
      .               }
      .           
      .               pub fn indentation_before(&self, sp: Span) -> Option<String> {
      .                   self.span_to_source(sp, |src, start_index, _| {
      .                       let before = &src[..start_index];
-- line 601 ----------------------------------------
-- line 679 ----------------------------------------
      .                       }
      .                   }
      .           
      .                   sp
      .               }
      .           
      .               /// Given a `Span`, tries to get a shorter span ending before the first occurrence of `char`
      .               /// `c`.
    440 ( 0.00%)      pub fn span_until_char(&self, sp: Span, c: char) -> Span {
    160 ( 0.00%)          match self.span_to_snippet(sp) {
    160 ( 0.00%)              Ok(snippet) => {
      .                           let snippet = snippet.split(c).next().unwrap_or("").trim_end();
     80 ( 0.00%)                  if !snippet.is_empty() && !snippet.contains('\n') {
    200 ( 0.00%)                      sp.with_hi(BytePos(sp.lo().0 + snippet.len() as u32))
      .                           } else {
      .                               sp
      .                           }
      .                       }
      .                       _ => sp,
      .                   }
    360 ( 0.00%)      }
      .           
      .               /// Given a `Span`, tries to get a shorter span ending just after the first occurrence of `char`
      .               /// `c`.
      .               pub fn span_through_char(&self, sp: Span, c: char) -> Span {
      .                   if let Ok(snippet) = self.span_to_snippet(sp) {
      .                       if let Some(offset) = snippet.find(c) {
      .                           return sp.with_hi(BytePos(sp.lo().0 + (offset + c.len_utf8()) as u32));
      .                       }
-- line 707 ----------------------------------------
-- line 750 ----------------------------------------
      .               /// Given a `Span`, return a span ending in the closest `{`. This is useful when you have a
      .               /// `Span` enclosing a whole item but we need to point at only the head (usually the first
      .               /// line) of that item.
      .               ///
      .               /// *Only suitable for diagnostics.*
      .               pub fn guess_head_span(&self, sp: Span) -> Span {
      .                   // FIXME: extend the AST items to have a head span, or replace callers with pointing at
      .                   // the item's ident when appropriate.
     80 ( 0.00%)          self.span_until_char(sp, '{')
      .               }
      .           
      .               /// Returns a new span representing just the first character of the given span.
      .               pub fn start_point(&self, sp: Span) -> Span {
      .                   let width = {
      .                       let sp = sp.data();
      .                       let local_begin = self.lookup_byte_offset(sp.lo);
      .                       let start_index = local_begin.pos.to_usize();
-- line 766 ----------------------------------------
-- line 782 ----------------------------------------
      .                           },
      .                       }
      .                   };
      .           
      .                   sp.with_hi(BytePos(sp.lo().0 + width as u32))
      .               }
      .           
      .               /// Returns a new span representing just the last character of this span.
  1,320 ( 0.00%)      pub fn end_point(&self, sp: Span) -> Span {
      .                   let pos = sp.hi().0;
      .           
    440 ( 0.00%)          let width = self.find_width_of_character_at_span(sp, false);
      .                   let corrected_end_position = pos.checked_sub(width).unwrap_or(pos);
      .           
      .                   let end_point = BytePos(cmp::max(corrected_end_position, sp.lo().0));
  1,100 ( 0.00%)          sp.with_lo(end_point)
      .               }
      .           
      .               /// Returns a new span representing the next character after the end-point of this span.
    363 ( 0.00%)      pub fn next_point(&self, sp: Span) -> Span {
     33 ( 0.00%)          if sp.is_dummy() {
      .                       return sp;
      .                   }
      .                   let start_of_next_point = sp.hi().0;
      .           
    132 ( 0.00%)          let width = self.find_width_of_character_at_span(sp.shrink_to_hi(), true);
      .                   // If the width is 1, then the next span should point to the same `lo` and `hi`. However,
      .                   // in the case of a multibyte character, where the width != 1, the next span should
      .                   // span multiple bytes to include the whole character.
      .                   let end_of_next_point =
     66 ( 0.00%)              start_of_next_point.checked_add(width - 1).unwrap_or(start_of_next_point);
      .           
     66 ( 0.00%)          let end_of_next_point = BytePos(cmp::max(sp.lo().0 + 1, end_of_next_point));
      .                   Span::new(BytePos(start_of_next_point), end_of_next_point, sp.ctxt(), None)
    297 ( 0.00%)      }
      .           
      .               /// Finds the width of the character, either before or after the end of provided span,
      .               /// depending on the `forwards` parameter.
  1,716 ( 0.00%)      fn find_width_of_character_at_span(&self, sp: Span, forwards: bool) -> u32 {
      .                   let sp = sp.data();
    143 ( 0.00%)          if sp.lo == sp.hi {
      .                       debug!("find_width_of_character_at_span: early return empty span");
      .                       return 1;
      .                   }
      .           
    770 ( 0.00%)          let local_begin = self.lookup_byte_offset(sp.lo);
    990 ( 0.00%)          let local_end = self.lookup_byte_offset(sp.hi);
      .                   debug!(
      .                       "find_width_of_character_at_span: local_begin=`{:?}`, local_end=`{:?}`",
      .                       local_begin, local_end
      .                   );
      .           
    220 ( 0.00%)          if local_begin.sf.start_pos != local_end.sf.start_pos {
      .                       debug!("find_width_of_character_at_span: begin and end are in different files");
      .                       return 1;
      .                   }
      .           
      .                   let start_index = local_begin.pos.to_usize();
      .                   let end_index = local_end.pos.to_usize();
      .                   debug!(
      .                       "find_width_of_character_at_span: start_index=`{:?}`, end_index=`{:?}`",
      .                       start_index, end_index
      .                   );
      .           
      .                   // Disregard indexes that are at the start or end of their spans, they can't fit bigger
      .                   // characters.
    440 ( 0.00%)          if (!forwards && end_index == usize::MIN) || (forwards && start_index == usize::MAX) {
      .                       debug!("find_width_of_character_at_span: start or end of span, cannot be multibyte");
      .                       return 1;
      .                   }
      .           
    110 ( 0.00%)          let source_len = (local_begin.sf.end_pos - local_begin.sf.start_pos).to_usize();
      .                   debug!("find_width_of_character_at_span: source_len=`{:?}`", source_len);
      .                   // Ensure indexes are also not malformed.
    440 ( 0.00%)          if start_index > end_index || end_index > source_len {
      .                       debug!("find_width_of_character_at_span: source indexes are malformed");
      .                       return 1;
      .                   }
      .           
      .                   let src = local_begin.sf.external_src.borrow();
      .           
      .                   // We need to extend the snippet to the end of the src rather than to end_index so when
      .                   // searching forwards for boundaries we've got somewhere to search.
    330 ( 0.00%)          let snippet = if let Some(ref src) = local_begin.sf.src {
      .                       &src[start_index..]
      .                   } else if let Some(src) = src.get_source() {
      .                       &src[start_index..]
      .                   } else {
      .                       return 1;
      .                   };
      .                   debug!("find_width_of_character_at_span: snippet=`{:?}`", snippet);
      .           
    660 ( 0.00%)          let mut target = if forwards { end_index + 1 } else { end_index - 1 };
      .                   debug!("find_width_of_character_at_span: initial target=`{:?}`", target);
      .           
    440 ( 0.00%)          while !snippet.is_char_boundary(target - start_index) && target < source_len {
      .                       target = if forwards {
      .                           target + 1
      .                       } else {
      .                           match target.checked_sub(1) {
      .                               Some(target) => target,
      .                               None => {
      .                                   break;
      .                               }
      .                           }
      .                       };
      .                       debug!("find_width_of_character_at_span: target=`{:?}`", target);
      .                   }
      .                   debug!("find_width_of_character_at_span: final target=`{:?}`", target);
      .           
    440 ( 0.00%)          if forwards { (target - end_index) as u32 } else { (end_index - target) as u32 }
  1,287 ( 0.00%)      }
      .           
      .               pub fn get_source_file(&self, filename: &FileName) -> Option<Lrc<SourceFile>> {
      .                   // Remap filename before lookup
      .                   let filename = self.path_mapping().map_filename_prefix(filename).0;
      .                   for sf in self.files.borrow().source_files.iter() {
      .                       if filename == sf.name {
      .                           return Some(sf.clone());
      .                       }
      .                   }
      .                   None
      .               }
      .           
      .               /// For a global `BytePos`, computes the local offset within the containing `SourceFile`.
  1,500 ( 0.00%)      pub fn lookup_byte_offset(&self, bpos: BytePos) -> SourceFileAndBytePos {
    300 ( 0.00%)          let idx = self.lookup_source_file_idx(bpos);
    600 ( 0.00%)          let sf = (*self.files.borrow().source_files)[idx].clone();
      .                   let offset = bpos - sf.start_pos;
      .                   SourceFileAndBytePos { sf, pos: offset }
  1,500 ( 0.00%)      }
      .           
      .               // Returns the index of the `SourceFile` (in `self.files`) that contains `pos`.
      .               // This index is guaranteed to be valid for the lifetime of this `SourceMap`,
      .               // since `source_files` is a `MonotonicVec`
  2,604 ( 0.00%)      pub fn lookup_source_file_idx(&self, pos: BytePos) -> usize {
      .                   self.files
      .                       .borrow()
      .                       .source_files
      .                       .binary_search_by_key(&pos, |key| key.start_pos)
  1,736 ( 0.00%)              .unwrap_or_else(|p| p - 1)
  3,472 ( 0.00%)      }
      .           
      .               pub fn count_lines(&self) -> usize {
      .                   self.files().iter().fold(0, |a, f| a + f.count_lines())
      .               }
      .           
      .               pub fn generate_fn_name_span(&self, span: Span) -> Option<Span> {
      .                   let prev_span = self.span_extend_to_prev_str(span, "fn", true);
      .                   if let Ok(snippet) = self.span_to_snippet(prev_span) {
-- line 931 ----------------------------------------
-- line 1010 ----------------------------------------
      .           
      .                           return Some((sugg_span, new_snippet));
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .               pub fn ensure_source_file_source_present(&self, source_file: Lrc<SourceFile>) -> bool {
    280 ( 0.00%)          source_file.add_external_src(|| {
      .                       match source_file.name {
      .                           FileName::Real(ref name) if let Some(local_path) = name.local_path() => {
      .                               self.file_loader.read_file(local_path).ok()
      .                           }
      .                           _ => None,
      .                       }
      .                   })
      .               }
-- line 1026 ----------------------------------------
-- line 1053 ----------------------------------------
      .                   let span = span.shrink_to_hi().with_hi(BytePos(span.hi().0.checked_add(1)?));
      .                   if self.span_to_snippet(span).as_deref() != Ok(";") {
      .                       return None;
      .                   }
      .                   Some(span)
      .               }
      .           }
      .           
     48 ( 0.00%)  #[derive(Clone)]
      .           pub struct FilePathMapping {
     24 ( 0.00%)      mapping: Vec<(PathBuf, PathBuf)>,
     12 ( 0.00%)      filename_display_for_diagnostics: FileNameDisplayPreference,
      .           }
      .           
      .           impl FilePathMapping {
      3 ( 0.00%)      pub fn empty() -> FilePathMapping {
      .                   FilePathMapping::new(Vec::new())
      3 ( 0.00%)      }
      .           
      3 ( 0.00%)      pub fn new(mapping: Vec<(PathBuf, PathBuf)>) -> FilePathMapping {
      .                   let filename_display_for_diagnostics = if mapping.is_empty() {
      .                       FileNameDisplayPreference::Local
      .                   } else {
      .                       FileNameDisplayPreference::Remapped
      .                   };
      .           
     24 ( 0.00%)          FilePathMapping { mapping, filename_display_for_diagnostics }
      3 ( 0.00%)      }
      .           
      .               /// Applies any path prefix substitution as defined by the mapping.
      .               /// The return value is the remapped path and a boolean indicating whether
      .               /// the path was affected by the mapping.
    153 ( 0.00%)      pub fn map_prefix(&self, path: PathBuf) -> (PathBuf, bool) {
      .                   // NOTE: We are iterating over the mapping entries from last to first
      .                   //       because entries specified later on the command line should
      .                   //       take precedence.
      .                   for &(ref from, ref to) in self.mapping.iter().rev() {
      .                       if let Ok(rest) = path.strip_prefix(from) {
      .                           return (to.join(rest), true);
      .                       }
      .                   }
      .           
     85 ( 0.00%)          (path, false)
    153 ( 0.00%)      }
      .           
     40 ( 0.00%)      fn map_filename_prefix(&self, file: &FileName) -> (FileName, bool) {
     10 ( 0.00%)          match file {
      4 ( 0.00%)              FileName::Real(realfile) if let RealFileName::LocalPath(local_path) = realfile => {
     28 ( 0.00%)                  let (mapped_path, mapped) = self.map_prefix(local_path.to_path_buf());
      2 ( 0.00%)                  let realfile = if mapped {
      .                               RealFileName::Remapped {
      .                                   local_path: Some(local_path.clone()),
      .                                   virtual_name: mapped_path,
      .                               }
      .                           } else {
      .                               realfile.clone()
      .                           };
     20 ( 0.00%)                  (FileName::Real(realfile), mapped)
      8 ( 0.00%)              }
      .                       FileName::Real(_) => unreachable!("attempted to remap an already remapped filename"),
     33 ( 0.00%)              other => (other.clone(), false),
      .                   }
     24 ( 0.00%)      }
      .           }

  6,341 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 111 ----------------------------------------
        .           const EMPTY: u8 = 0b1111_1111;
        .           
        .           /// Control byte value for a deleted bucket.
        .           const DELETED: u8 = 0b1000_0000;
        .           
        .           /// Checks whether a control byte represents a full bucket (top bit is clear).
        .           #[inline]
        .           fn is_full(ctrl: u8) -> bool {
  311,073 ( 0.10%)      ctrl & 0x80 == 0
        .           }
        .           
        .           /// Checks whether a control byte represents a special value (top bit is set).
        .           #[inline]
        .           fn is_special(ctrl: u8) -> bool {
        .               ctrl & 0x80 != 0
        .           }
        .           
        .           /// Checks whether a special control value is EMPTY (just check 1 bit).
        .           #[inline]
        .           fn special_is_empty(ctrl: u8) -> bool {
        .               debug_assert!(is_special(ctrl));
   27,844 ( 0.01%)      ctrl & 0x01 != 0
        .           }
        .           
        .           /// Primary hash function, used to select the initial bucket to probe from.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h1(hash: u64) -> usize {
        .               // On 32-bit platforms we simply ignore the higher hash bits.
        .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
        .           /// Secondary hash function, saved in the low 7 bits of the control byte.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h2(hash: u64) -> u8 {
        .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
        .               // value, some hash functions (such as FxHash) produce a usize result
        .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
        .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
2,996,417 ( 0.94%)      let top7 = hash >> (hash_len * 8 - 7);
        .               (top7 & 0x7f) as u8 // truncation
        .           }
        .           
        .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
        .           /// table size is a power of two) to visit every group of elements exactly once.
        .           ///
        .           /// A triangular probe has us jump by 1 more group every time. So first we
        .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
        .               #[inline]
        .               fn move_next(&mut self, bucket_mask: usize) {
        .                   // We should have found an empty bucket by now and ended the probe.
        .                   debug_assert!(
        .                       self.stride <= bucket_mask,
        .                       "Went past end of probe sequence"
        .                   );
        .           
   37,244 ( 0.01%)          self.stride += Group::WIDTH;
   37,244 ( 0.01%)          self.pos += self.stride;
   30,619 ( 0.01%)          self.pos &= bucket_mask;
        .               }
        .           }
        .           
        .           /// Returns the number of buckets needed to hold the given number of items,
        .           /// taking the maximum load factor into account.
        .           ///
        .           /// Returns `None` if an overflow occurs.
        .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
        .           #[cfg_attr(target_os = "emscripten", inline(never))]
        .           #[cfg_attr(not(target_os = "emscripten"), inline)]
        .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
        .               debug_assert_ne!(cap, 0);
        .           
        .               // For small tables we require at least 1 empty bucket so that lookups are
        .               // guaranteed to terminate if an element doesn't exist in the table.
   12,364 ( 0.00%)      if cap < 8 {
        .                   // We don't bother with a table size of 2 buckets since that can only
        .                   // hold a single element. Instead we skip directly to a 4 bucket table
        .                   // which can hold 3 elements.
   24,880 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
        .               }
        .           
        .               // Otherwise require 1/8 buckets to be empty (87.5% load)
        .               //
        .               // Be careful when modifying this, calculate_layout relies on the
        .               // overflow check here.
    7,236 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
        .           
        .               // Any overflows will have been caught by the checked_mul. Also, any
        .               // rounding errors from the division above will be cleaned up by
        .               // next_power_of_two (which can't overflow because of the previous division).
        .               Some(adjusted_cap.next_power_of_two())
        .           }
        .           
        .           /// Returns the maximum effective capacity for the given bucket mask, taking
        .           /// the maximum load factor into account.
        .           #[inline]
        .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
   32,790 ( 0.01%)      if bucket_mask < 8 {
        .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
        .                   // Keep in mind that the bucket mask is one less than the bucket count.
        .                   bucket_mask
        .               } else {
        .                   // For larger tables we reserve 12.5% of the slots as empty.
    9,366 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
        .               }
        .           }
        .           
        .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
        .           /// while keeping the rest of `calculate_layout_for` independent of `T`
        .           #[derive(Copy, Clone)]
        .           struct TableLayout {
        .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
        .           
        .               #[inline]
        .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   let TableLayout { size, ctrl_align } = self;
        .                   // Manual layout calculation since Layout methods are not yet stable.
        .                   let ctrl_offset =
   24,615 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
   33,499 ( 0.01%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
        .           
        .                   Some((
        .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
        .                       ctrl_offset,
        .                   ))
        .               }
        .           }
        .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
        .                   }
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub unsafe fn drop(&self) {
        .                   self.as_ptr().drop_in_place();
        .               }
        .               #[inline]
        .               pub unsafe fn read(&self) -> T {
       26 ( 0.00%)          self.as_ptr().read()
        .               }
        .               #[inline]
        .               pub unsafe fn write(&self, val: T) {
        .                   self.as_ptr().write(val);
        .               }
        .               #[inline]
        .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
        .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 421 ----------------------------------------
        .           impl<T, A: Allocator + Clone> RawTable<T, A> {
        .               /// Creates a new empty hash table without allocating any memory, using the
        .               /// given allocator.
        .               ///
        .               /// In effect this returns a table with exactly 1 bucket. However we can
        .               /// leave the data pointer dangling since that bucket is never written to
        .               /// due to our load factor forcing us to always have at least 1 free bucket.
        .               #[inline]
       21 ( 0.00%)      pub fn new_in(alloc: A) -> Self {
       80 ( 0.00%)          Self {
       14 ( 0.00%)              table: RawTableInner::new_in(alloc),
        .                       marker: PhantomData,
        .                   }
       14 ( 0.00%)      }
        .           
        .               /// Allocates a new hash table with the given number of buckets.
        .               ///
        .               /// The control bytes are left uninitialized.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   Ok(Self {
       10 ( 0.00%)              table: RawTableInner::new_uninitialized(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           buckets,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
        .               /// Attempts to allocate a new hash table with at least enough capacity
        .               /// for inserting the given number of elements without reallocating.
        .               fn fallible_with_capacity(
        .                   alloc: A,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   Ok(Self {
    1,468 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           capacity,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
        .                   debug_assert_ne!(self.table.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               /// Erases an element from the table without dropping it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
      732 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
      732 ( 0.00%)          let index = self.bucket_index(item);
        .                   self.table.erase(index);
    1,464 ( 0.00%)      }
        .           
        .               /// Erases an element from the table, dropping it in place.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
        .                   // Erase the element from the table first since drop might panic.
      240 ( 0.00%)          self.erase_no_drop(&item);
        .                   item.drop();
        .               }
        .           
        .               /// Finds and erases an element from the table, dropping it in place.
        .               /// Returns true if an element was found.
        .               #[cfg(feature = "raw")]
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    1,224 ( 0.00%)          self.erase_no_drop(&item);
       20 ( 0.00%)          item.read()
        .               }
        .           
        .               /// Finds and removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
   88,235 ( 0.03%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
      142 ( 0.00%)          match self.find(hash, eq) {
      300 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
    5,988 ( 0.00%)              None => None,
        .                   }
  143,591 ( 0.04%)      }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear_no_drop(&mut self) {
        .                   self.table.clear_no_drop();
        .               }
        .           
        .               /// Removes all elements from the table without freeing the backing memory.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear(&mut self) {
        .                   // Ensure that the table is reset even if one of the drops panic
        .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
        .                   unsafe {
        1 ( 0.00%)              self_.drop_elements();
        .                   }
        .               }
        .           
        7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
    1,332 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
        .                       for item in self.iter() {
        .                           item.drop();
        .                       }
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
        .                   // Calculate the minimal number of elements that we need to reserve
        .                   // space for.
        .                   let min_size = usize::max(self.table.items, min_size);
        .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Ensures that at least `additional` items can be inserted into the table
        .               /// without reallocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
   60,064 ( 0.02%)          if additional > self.table.growth_left {
        .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
   20,787 ( 0.01%)              if self
        .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
        .                           .is_err()
        .                       {
        .                           unsafe { hint::unreachable_unchecked() }
        .                       }
        .                   }
        .               }
        .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
        .                   } else {
        .                       Ok(())
        .                   }
        .               }
        .           
        .               /// Out-of-line slow path for `reserve` and `try_reserve`.
        .               #[cold]
        .               #[inline(never)]
   48,478 ( 0.02%)      fn reserve_rehash(
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
        .               ) -> Result<(), TryReserveError> {
        .                   unsafe {
        .                       self.table.reserve_rehash_inner(
        .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
        .                           TableLayout::new::<T>(),
        .                           if mem::needs_drop::<T>() {
        .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
        .                           } else {
        .                               None
        .                           },
        .                       )
        .                   }
   32,440 ( 0.01%)      }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
        .               /// current table into it.
        .               fn resize(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
        .                       )
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns its raw bucket.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
  495,118 ( 0.15%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
        .                   unsafe {
        .                       let mut index = self.table.find_insert_slot(hash);
        .           
        .                       // We can avoid growing the table once we have reached our load
        .                       // factor if we are replacing a tombstone. This works since the
        .                       // number of EMPTY slots does not change in this case.
      481 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
  311,085 ( 0.10%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
        .                           self.reserve(1, hasher);
        .                           index = self.table.find_insert_slot(hash);
        .                       }
        .           
        .                       self.table.record_item_insert_at(index, old_ctrl, hash);
        .           
        .                       let bucket = self.bucket(index);
        2 ( 0.00%)              bucket.write(value);
        .                       bucket
        .                   }
  364,399 ( 0.11%)      }
        .           
        .               /// Attempts to insert a new element without growing the table and return its raw bucket.
        .               ///
        .               /// Returns an `Err` containing the given element if inserting it would require growing the
        .               /// table.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns a mutable reference to it.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
  136,112 ( 0.04%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
       12 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
  102,084 ( 0.03%)      }
        .           
        .               /// Inserts a new element into the table, without growing the table.
        .               ///
        .               /// There must be enough space in the table to insert the new element.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
       50 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
   84,114 ( 0.03%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
      393 ( 0.00%)          let bucket = self.table.bucket(index);
        .           
        .                   // If we are replacing a DELETED entry then we don't need to update
        .                   // the load counter.
  167,242 ( 0.05%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
        .           
        .                   bucket.write(value);
  136,357 ( 0.04%)          self.table.items += 1;
        .                   bucket
       74 ( 0.00%)      }
        .           
        .               /// Temporary removes a bucket, applying the given function to the removed
        .               /// element and optionally put back the returned value in the same bucket.
        .               ///
        .               /// Returns `true` if the bucket still contains an element
        .               ///
        .               /// This does not check if the given bucket is actually occupied.
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// Searches for an element in the table.
        .               #[inline]
      998 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
      798 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    1,461 ( 0.00%)              eq(self.bucket(index).as_ref())
      363 ( 0.00%)          });
        .           
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match result {
       97 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
        .                       None => None,
        .                   }
    1,104 ( 0.00%)      }
        .           
        .               /// Gets a reference to an element in the table.
        .               #[inline]
        .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
      728 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Gets a mutable reference to an element in the table.
        .               #[inline]
      154 ( 0.00%)      pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
      548 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
        .                       None => None,
        .                   }
      176 ( 0.00%)      }
        .           
        .               /// Attempts to get mutable references to `N` entries in the table at once.
        .               ///
        .               /// Returns an array of length `N` with the results of each query.
        .               ///
        .               /// At most one mutable reference will be returned to any entry. `None` will be returned if any
        .               /// of the hashes are duplicates. `None` will be returned if the hash is not found.
        .               ///
-- line 859 ----------------------------------------
-- line 920 ----------------------------------------
        .               #[inline]
        .               pub fn len(&self) -> usize {
        .                   self.table.items
        .               }
        .           
        .               /// Returns `true` if the table contains no elements.
        .               #[inline]
        .               pub fn is_empty(&self) -> bool {
   83,495 ( 0.03%)          self.len() == 0
        .               }
        .           
        .               /// Returns the number of buckets in the table.
        .               #[inline]
        .               pub fn buckets(&self) -> usize {
        .                   self.table.bucket_mask + 1
        .               }
        .           
-- line 936 ----------------------------------------
-- line 938 ----------------------------------------
        .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
        .               /// Because we cannot make the `next` method unsafe on the `RawIter`
        .               /// struct, we have to make the `iter` method unsafe.
        .               #[inline]
        .               pub unsafe fn iter(&self) -> RawIter<T> {
        .                   let data = Bucket::from_base_index(self.data_end(), 0);
        .                   RawIter {
        .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
    7,586 ( 0.00%)              items: self.table.items,
        .                   }
        .               }
        .           
        .               /// Returns an iterator over occupied buckets that could match a given hash.
        .               ///
        .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
        .               /// return items that have a hash value different than the one provided. You
        .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
        .               /// Iteration starts at the provided iterator's current location.
        .               ///
        .               /// It is up to the caller to ensure that the iterator is valid for this
        .               /// `RawTable` and covers all items that remain in the table.
        .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
        .                   debug_assert_eq!(iter.len(), self.len());
        .           
        .                   let alloc = self.table.alloc.clone();
    1,436 ( 0.00%)          let allocation = self.into_allocation();
    1,077 ( 0.00%)          RawIntoIter {
    1,795 ( 0.00%)              iter,
        .                       allocation,
        .                       marker: PhantomData,
        .                       alloc,
        .                   }
        .               }
        .           
        .               /// Converts the table into a raw allocation. The contents of the table
        .               /// should be dropped using a `RawIter` before freeing the allocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
      509 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
        .                       None
        .                   } else {
        .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
        .                           Some(lco) => lco,
        .                           None => unsafe { hint::unreachable_unchecked() },
        .                       };
        .                       Some((
      156 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
        .                           layout,
        .                       ))
        .                   };
        .                   mem::forget(self);
        .                   alloc
        .               }
        .           }
        .           
-- line 1033 ----------------------------------------
-- line 1041 ----------------------------------------
        .           where
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<A> RawTableInner<A> {
        .               #[inline]
       21 ( 0.00%)      const fn new_in(alloc: A) -> Self {
   49,720 ( 0.02%)          Self {
        .                       // Be careful to cast the entire slice to a raw pointer.
       49 ( 0.00%)              ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
        .                       bucket_mask: 0,
        .                       items: 0,
        .                       growth_left: 0,
        .                       alloc,
        .                   }
       14 ( 0.00%)      }
        .           }
        .           
        .           impl<A: Allocator + Clone> RawTableInner<A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
   37,620 ( 0.01%)      unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
        .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
        .                   // such allocations will never succeed anyways.
        .                   //
        .                   // This mirrors what Vec does in the standard library.
        .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
        .                       return Err(fallibility.capacity_overflow());
        .                   }
        .           
   10,972 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
        .                       Ok(block) => block.cast(),
        .                       Err(_) => return Err(fallibility.alloc_err(layout)),
        .                   };
        .           
        .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
   22,158 ( 0.01%)          Ok(Self {
        .                       ctrl,
    9,877 ( 0.00%)              bucket_mask: buckets - 1,
        .                       items: 0,
        .                       growth_left: bucket_mask_to_capacity(buckets - 1),
        .                       alloc,
        .                   })
   27,542 ( 0.01%)      }
        .           
        .               #[inline]
    6,024 ( 0.00%)      fn fallible_with_capacity(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
    1,548 ( 0.00%)          if capacity == 0 {
      709 ( 0.00%)              Ok(Self::new_in(alloc))
        .                   } else {
        .                       unsafe {
        .                           let buckets =
        .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
        .           
   17,440 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
        .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
        .           
    3,726 ( 0.00%)                  Ok(result)
        .                       }
        .                   }
    6,024 ( 0.00%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element and sets the hash for that slot.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
   27,816 ( 0.01%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
        .                   let index = self.find_insert_slot(hash);
   27,816 ( 0.01%)          let old_ctrl = *self.ctrl(index);
        .                   self.set_ctrl_h2(index, hash);
        .                   (index, old_ctrl)
   55,632 ( 0.02%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
        .               fn find_insert_slot(&self, hash: u64) -> usize {
        .                   let mut probe_seq = self.probe_seq(hash);
        .                   loop {
        .                       unsafe {
        .                           let group = Group::load(self.ctrl(probe_seq.pos));
  208,203 ( 0.07%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
  605,096 ( 0.19%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
        .           
        .                               // In tables smaller than the group width, trailing control
        .                               // bytes outside the range of the table are filled with
        .                               // EMPTY entries. These will unfortunately trigger a
        .                               // match, but once masked may point to a full bucket that
        .                               // is already occupied. We detect this situation here and
        .                               // perform a second scan starting at the beginning of the
        .                               // table. This second scan is guaranteed to find an empty
        .                               // slot (due to the load factor) before hitting the trailing
        .                               // control bytes (containing EMPTY).
  279,458 ( 0.09%)                      if unlikely(is_full(*self.ctrl(result))) {
        .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
        .                                   debug_assert_ne!(probe_seq.pos, 0);
        .                                   return Group::load_aligned(self.ctrl(0))
        .                                       .match_empty_or_deleted()
        .                                       .lowest_set_bit_nonzero();
        .                               }
        .           
        .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
        .           
        .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
        .               /// code generated, but it is eliminated by LLVM optimizations.
        .               #[inline]
        .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
        .                   let h2_hash = h2(hash);
        .                   let mut probe_seq = self.probe_seq(hash);
        .           
    3,372 ( 0.00%)          loop {
        .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
        .           
  421,096 ( 0.13%)              for bit in group.match_byte(h2_hash) {
  740,612 ( 0.23%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
        .           
  659,091 ( 0.21%)                  if likely(eq(index)) {
        .                               return Some(index);
        .                           }
        .                       }
        .           
  164,556 ( 0.05%)              if likely(group.match_empty().any_bit_set()) {
        .                           return None;
        .                       }
        .           
        .                       probe_seq.move_next(self.bucket_mask);
        .                   }
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
-- line 1198 ----------------------------------------
-- line 1225 ----------------------------------------
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               #[inline]
        .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
        .                   debug_assert_ne!(self.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   let base: *mut u8 = self.data_end().as_ptr();
  734,344 ( 0.23%)          base.sub((index + 1) * size_of)
        .               }
        .           
        .               #[inline]
        .               unsafe fn data_end<T>(&self) -> NonNull<T> {
        .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
        .               }
        .           
        .               /// Returns an iterator-like object for a probe sequence on the table.
        .               ///
        .               /// This iterator never terminates, but is guaranteed to visit each bucket
        .               /// group exactly once. The loop using `probe_seq` must terminate upon
        .               /// reaching a group containing an empty bucket.
        .               #[inline]
        .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
        .                   ProbeSeq {
2,889,515 ( 0.90%)              pos: h1(hash) & self.bucket_mask,
        .                       stride: 0,
        .                   }
        .               }
        .           
        .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
        .               /// in the table, otherwise returns error
        .               #[cfg(feature = "raw")]
        .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
        .                   } else {
        .                       self.record_item_insert_at(index, old_ctrl, hash);
        .                       Ok(index)
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
  388,924 ( 0.12%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
        .                   self.set_ctrl_h2(index, hash);
  311,080 ( 0.10%)          self.items += 1;
        .               }
        .           
        .               #[inline]
        .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
        .                   let probe_seq_pos = self.probe_seq(hash).pos;
        .                   let probe_index =
        .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
        .                   probe_index(i) == probe_index(new_i)
-- line 1281 ----------------------------------------
-- line 1312 ----------------------------------------
        .                   // replicate the buckets at the end of the trailing group. For example
        .                   // with 2 buckets and a group size of 4, the control bytes will look
        .                   // like this:
        .                   //
        .                   //     Real    |             Replicated
        .                   // ---------------------------------------------
        .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
        .                   // ---------------------------------------------
  592,303 ( 0.19%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
        .           
  197,407 ( 0.06%)          *self.ctrl(index) = ctrl;
  197,410 ( 0.06%)          *self.ctrl(index2) = ctrl;
        .               }
        .           
        .               /// Returns a pointer to a control byte.
        .               #[inline]
        .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
        .                   debug_assert!(index < self.num_ctrl_bytes());
        .                   self.ctrl.as_ptr().add(index)
        .               }
        .           
        .               #[inline]
        .               fn buckets(&self) -> usize {
   26,004 ( 0.01%)          self.bucket_mask + 1
        .               }
        .           
        .               #[inline]
        .               fn num_ctrl_bytes(&self) -> usize {
   19,981 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
        .               }
        .           
        .               #[inline]
       14 ( 0.00%)      fn is_empty_singleton(&self) -> bool {
   98,559 ( 0.03%)          self.bucket_mask == 0
       28 ( 0.00%)      }
        .           
        .               #[allow(clippy::mut_mut)]
        .               #[inline]
        .               unsafe fn prepare_resize(
        .                   &self,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
        .                   debug_assert!(self.items <= capacity);
        .           
        .                   // Allocate and initialize the new table.
    1,179 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
        .                       self.alloc.clone(),
        .                       table_layout,
        .                       capacity,
        .                       fallibility,
        .                   )?;
   12,847 ( 0.00%)          new_table.growth_left -= self.items;
        .                   new_table.items = self.items;
        .           
        .                   // The hash function may panic, in which case we simply free the new
        .                   // table without dropping any elements that may have been copied into
        .                   // it.
        .                   //
        .                   // This guard is also used to free the old table on success, see
        .                   // the comment at the bottom of this function.
        .                   Ok(guard(new_table, move |self_| {
    5,954 ( 0.00%)              if !self_.is_empty_singleton() {
        .                           self_.free_buckets(table_layout);
        .                       }
        .                   }))
        .               }
        .           
        .               /// Reserves or rehashes to make room for `additional` more elements.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .                   drop: Option<fn(*mut u8)>,
        .               ) -> Result<(), TryReserveError> {
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
   11,910 ( 0.00%)          let new_items = match self.items.checked_add(additional) {
        .                       Some(new_items) => new_items,
        .                       None => return Err(fallibility.capacity_overflow()),
        .                   };
   11,908 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
   24,851 ( 0.01%)          if new_items <= full_capacity / 2 {
        .                       // Rehash in-place without re-allocating if we have plenty of spare
        .                       // capacity that is locked up due to DELETED entries.
        .                       self.rehash_in_place(hasher, layout.size, drop);
        .                       Ok(())
        .                   } else {
        .                       // Otherwise, conservatively resize to at least the next size up
        .                       // to avoid churning deletes into frequent rehashes.
        .                       self.resize_inner(
    5,954 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
        .                           hasher,
        .                           fallibility,
        .                           layout,
        .                       )
        .                   }
        .               }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
        .               #[inline(always)]
        .               unsafe fn resize_inner(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .               ) -> Result<(), TryReserveError> {
    2,919 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
        .           
        .                   // Copy all elements to the new table.
        .                   for i in 0..self.buckets() {
  109,385 ( 0.03%)              if !is_full(*self.ctrl(i)) {
        .                           continue;
        .                       }
        .           
        .                       // This may panic.
        .                       let hash = hasher(self, i);
        .           
        .                       // We can use a simpler version of insert() here since:
        .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
        .                   }
        .           
        .                   // We successfully copied all elements without panicking. Now replace
        .                   // self with the new table. The old table will have its memory freed but
        .                   // the items will not be dropped (since they have been moved into the
        .                   // new table).
        .                   mem::swap(self, &mut new_table);
        .           
    5,954 ( 0.00%)          Ok(())
        .               }
        .           
        .               /// Rehashes the contents of the table in place (i.e. without changing the
        .               /// allocation).
        .               ///
        .               /// If `hasher` panics then some the table's contents may be lost.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1554 ----------------------------------------
        .               #[inline]
        .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
        .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
        .                       Some(lco) => lco,
        .                       None => hint::unreachable_unchecked(),
        .                   };
        .                   self.alloc.deallocate(
    3,851 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
        .                       layout,
        .                   );
        .               }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[inline]
        .               fn clear_no_drop(&mut self) {
      449 ( 0.00%)          if !self.is_empty_singleton() {
        .                       unsafe {
        .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
        .                       }
        .                   }
      690 ( 0.00%)          self.items = 0;
      450 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
        .               }
        .           
        .               #[inline]
        .               unsafe fn erase(&mut self, index: usize) {
        .                   debug_assert!(is_full(*self.ctrl(index)));
   26,598 ( 0.01%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
        .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
        .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
        .           
        .                   // If we are inside a continuous block of Group::WIDTH full or deleted
        .                   // cells then a probe window may have seen a full block when trying to
        .                   // insert. We therefore need to keep that block non-empty so that
        .                   // lookups will continue searching to the next probe window.
        .                   //
        .                   // Note that in this context `leading_zeros` refers to the bytes at the
        .                   // end of a group, while `trailing_zeros` refers to the bytes at the
        .                   // beginning of a group.
  106,392 ( 0.03%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
        .                       DELETED
        .                   } else {
  132,905 ( 0.04%)              self.growth_left += 1;
        .                       EMPTY
        .                   };
        .                   self.set_ctrl(index, ctrl);
  106,392 ( 0.03%)          self.items -= 1;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
       80 ( 0.00%)      fn clone(&self) -> Self {
       10 ( 0.00%)          if self.table.is_empty_singleton() {
        .                       Self::new_in(self.table.alloc.clone())
        .                   } else {
        .                       unsafe {
        .                           let mut new_table = ManuallyDrop::new(
        .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
        .                               match Self::new_uninitialized(
        .                                   self.table.alloc.clone(),
        .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
        .                               // We need to free the memory allocated for the new table.
        .                               new_table.free_buckets();
        .                           });
        .           
        .                           // Return the newly created table.
        .                           ManuallyDrop::into_inner(new_table)
        .                       }
        .                   }
       90 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   if source.table.is_empty_singleton() {
        .                       *self = Self::new_in(self.table.alloc.clone());
        .                   } else {
        .                       unsafe {
        .                           // First, drop all our elements without clearing the control bytes.
        .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
        .                       .table
        .                       .ctrl(0)
        .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
        .                   source
        .                       .data_start()
        .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
        .           
        .                   self.table.items = source.table.items;
        4 ( 0.00%)          self.table.growth_left = source.table.growth_left;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
        .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
        .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
        .               fn default() -> Self {
        .                   Self::new_in(Default::default())
        .               }
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
   59,562 ( 0.02%)      fn drop(&mut self) {
   41,996 ( 0.01%)          if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
        .                           self.free_buckets();
        .                       }
        .                   }
   63,438 ( 0.02%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
        .               type Item = T;
        .               type IntoIter = RawIntoIter<T, A>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
    1,436 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
        .                   unsafe {
        .                       let iter = self.iter();
        .                       self.into_iter_from(iter)
        .                   }
    1,795 ( 0.00%)      }
        .           }
        .           
        .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
        .           /// not track an item count.
        .           pub(crate) struct RawIterRange<T> {
        .               // Mask of full buckets in the current group. Bits are cleared from this
        .               // mask as each element is processed.
        .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
        .           
        .           impl<T> Iterator for RawIterRange<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<Bucket<T>> {
        .                   unsafe {
        .                       loop {
   15,479 ( 0.00%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    1,761 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    3,005 ( 0.00%)                      return Some(self.data.next_n(index));
        .                           }
        .           
   14,494 ( 0.00%)                  if self.next_ctrl >= self.end {
        .                               return None;
        .                           }
        .           
        .                           // We might read past self.end up to the next group boundary,
        .                           // but this is fine because it only occurs on tables smaller
        .                           // than the group size where the trailing control bytes are all
        .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
        .                           // to the group size (since tables are power-of-two sized).
      357 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
      148 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
      716 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
        .                       }
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   // We don't have an item count, so just guess based on the range size.
        .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
        .                           }
        .                       } else {
        .                           // We must have already iterated past the removed item.
        .                       }
        .                   }
        .               }
        .           
        .               unsafe fn drop_elements(&mut self) {
      462 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
        .                       for item in self {
        .                           item.drop();
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Iterator for RawIter<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
    2,324 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
    5,322 ( 0.00%)          if let Some(b) = self.iter.next() {
   16,795 ( 0.01%)              self.items -= 1;
        .                       Some(b)
        .                   } else {
        .                       // We don't check against items == 0 here to allow the
        .                       // compiler to optimize away the item count entirely if the
        .                       // iterator length is never queried.
        .                       debug_assert_eq!(self.items, 0);
        .                       None
        .                   }
    4,648 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   (self.items, Some(self.items))
        .               }
        .           }
        .           
        .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
      946 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
        .           
        .                       // Free the table
    2,363 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
        .                           self.alloc.deallocate(ptr, layout);
        .                       }
        .                   }
      236 ( 0.00%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
      113 ( 0.00%)      fn next(&mut self) -> Option<T> {
       39 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
      255 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        3 ( 0.00%)          self.iter.size_hint()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
        .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
        .           
        .           /// Iterator which consumes elements without freeing the table storage.
        .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
        .           where
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        8 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements. Note that this may panic.
        .                       self.iter.drop_elements();
        .           
        .                       // Reset the contents of the table now that all elements have been
        .                       // dropped.
        .                       self.table.clear_no_drop();
        .           
        .                       // Move the now empty table back to its original location.
        1 ( 0.00%)              self.orig_table
        .                           .as_ptr()
        .                           .copy_from_nonoverlapping(&*self.table, 1);
        .                   }
        8 ( 0.00%)      }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<T> {
        .                   unsafe {
-- line 2289 ----------------------------------------

1,563,001 ( 0.49%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir               

-- line 5 ----------------------------------------
      .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
      .           unsafe impl GlobalAlloc for System {
      .               #[inline]
      .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
      .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
      .                   // So only rely on MIN_ALIGN if size >= align.
      .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
      .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
361,406 ( 0.11%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
271,053 ( 0.08%)              libc::malloc(layout.size()) as *mut u8
      .                   } else {
      .                       #[cfg(target_os = "macos")]
      .                       {
      .                           if layout.align() > (1 << 31) {
      .                               return ptr::null_mut();
      .                           }
      .                       }
      .                       aligned_malloc(&layout)
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
      .                   // See the comment above in `alloc` for why this check looks the way it does.
 25,844 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
 38,766 ( 0.01%)              libc::calloc(layout.size(), 1) as *mut u8
      .                   } else {
      .                       let ptr = self.alloc(layout);
      .                       if !ptr.is_null() {
      .                           ptr::write_bytes(ptr, 0, layout.size());
      .                       }
      .                       ptr
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
 96,801 ( 0.03%)          libc::free(ptr as *mut libc::c_void)
      .               }
      .           
      .               #[inline]
      .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
 23,096 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
 46,192 ( 0.01%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
      .                   } else {
      .                       realloc_fallback(self, ptr, layout, new_size)
      .                   }
      .               }
      .           }
      .           
      .           cfg_if::cfg_if! {
      .               if #[cfg(any(
-- line 56 ----------------------------------------
-- line 84 ----------------------------------------
      .               } else if #[cfg(target_os = "wasi")] {
      .                   #[inline]
      .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
      .                       libc::aligned_alloc(layout.align(), layout.size()) as *mut u8
      .                   }
      .               } else {
      .                   #[inline]
      .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
      1 ( 0.00%)              let mut out = ptr::null_mut();
      .                       // posix_memalign requires that the alignment be a multiple of `sizeof(void*)`.
      .                       // Since these are all powers of 2, we can just use max.
      .                       let align = layout.align().max(crate::mem::size_of::<usize>());
      2 ( 0.00%)              let ret = libc::posix_memalign(&mut out, align, layout.size());
      2 ( 0.00%)              if ret != 0 { ptr::null_mut() } else { out as *mut u8 }
      .                   }
      .               }
      .           }

      1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 70 ----------------------------------------
        .           
        .                   impl<'a, T> $name<'a, T> {
        .                       // Helper function for creating a slice from the iterator.
        .                       #[inline(always)]
        .                       fn make_slice(&self) -> &'a [T] {
        .                           // SAFETY: the iterator was created from a slice with pointer
        .                           // `self.ptr` and length `len!(self)`. This guarantees that all
        .                           // the prerequisites for `from_raw_parts` are fulfilled.
    7,497 ( 0.00%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
        .                       }
        .           
        .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
        .                       // returning the old start.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
        .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
   29,262 ( 0.01%)                      let old = self.ptr.as_ptr();
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
   81,579 ( 0.03%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
    4,877 ( 0.00%)                      old
        .                           }
    9,754 ( 0.00%)              }
        .           
        .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
        .                       // returning the new end.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
        .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
        .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
      176 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
       32 ( 0.00%)                      self.end
        .                           }
       32 ( 0.00%)              }
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<T> ExactSizeIterator for $name<'_, T> {
        .                       #[inline(always)]
        .                       fn len(&self) -> usize {
   31,219 ( 0.01%)                  len!(self)
      270 ( 0.00%)              }
        .           
        .                       #[inline(always)]
        .                       fn is_empty(&self) -> bool {
        .                           is_empty!(self)
        .                       }
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<'a, T> Iterator for $name<'a, T> {
        .                       type Item = $elem;
        .           
        .                       #[inline]
   15,945 ( 0.00%)              fn next(&mut self) -> Option<$elem> {
        .                           // could be implemented with slices, but this avoids bounds checks
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer
        .                           // must be non-null, and slices over non-ZSTs must also have a
        .                           // non-null end pointer. The call to `next_unchecked!` is safe
        .                           // since we check if the iterator is empty first.
        .                           unsafe {
   30,769 ( 0.01%)                      assume(!self.ptr.as_ptr().is_null());
   26,575 ( 0.01%)                      if mem::size_of::<T>() != 0 {
   13,837 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
4,065,176 ( 1.27%)                      if is_empty!(self) {
      438 ( 0.00%)                          None
        .                               } else {
    9,754 ( 0.00%)                          Some(next_unchecked!(self))
        .                               }
        .                           }
   15,945 ( 0.00%)              }
        .           
        .                       #[inline]
        .                       fn size_hint(&self) -> (usize, Option<usize>) {
   37,759 ( 0.01%)                  let exact = len!(self);
        .                           (exact, Some(exact))
        .                       }
        .           
        .                       #[inline]
        .                       fn count(self) -> usize {
        .                           len!(self)
        .                       }
        .           
        .                       #[inline]
        .                       fn nth(&mut self, n: usize) -> Option<$elem> {
      503 ( 0.00%)                  if n >= len!(self) {
        .                               // This iterator is now empty.
        .                               if mem::size_of::<T>() == 0 {
        .                                   // We have to do it this way as `ptr` may never be 0, but `end`
        .                                   // could be (due to wrapping).
        .                                   self.end = self.ptr.as_ptr();
        .                               } else {
        .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
        .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
        .                       // faster to compile.
        .                       #[inline]
        .                       fn for_each<F>(mut self, mut f: F)
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item),
        .                       {
        .                           while let Some(x) = self.next() {
      231 ( 0.00%)                      f(x);
        .                           }
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn all<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
       87 ( 0.00%)                  while let Some(x) = self.next() {
    4,148 ( 0.00%)                      if !f(x) {
        .                                   return false;
        .                               }
        .                           }
        .                           true
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        8 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
   13,577 ( 0.00%)                  while let Some(x) = self.next() {
   76,315 ( 0.02%)                      if f(x) {
        .                                   return true;
        .                               }
        .                           }
        .                           false
        8 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
        .                       where
        .                           Self: Sized,
        .                           P: FnMut(&Self::Item) -> bool,
        .                       {
    1,591 ( 0.00%)                  while let Some(x) = self.next() {
   14,182 ( 0.00%)                      if predicate(&x) {
        .                                   return Some(x);
        .                               }
        .                           }
        .                           None
    5,072 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
      336 ( 0.00%)              fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> Option<B>,
        .                       {
    2,450 ( 0.00%)                  while let Some(x) = self.next() {
    7,557 ( 0.00%)                      if let Some(y) = f(x) {
      617 ( 0.00%)                          return Some(y);
        .                               }
        .                           }
       12 ( 0.00%)                  None
      592 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       #[rustc_inherit_overflow_checks]
        .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           Self: Sized,
        .                           P: FnMut(Self::Item) -> bool,
        .                       {
        .                           let n = len!(self);
        .                           let mut i = 0;
        .                           while let Some(x) = self.next() {
   11,132 ( 0.00%)                      if predicate(x) {
        .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
        .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                               i += 1;
        .                           }
        .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           P: FnMut(Self::Item) -> bool,
        .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
        .                       {
        .                           let n = len!(self);
        .                           let mut i = n;
    4,704 ( 0.00%)                  while let Some(x) = self.next_back() {
   68,601 ( 0.02%)                      i -= 1;
   58,376 ( 0.02%)                      if predicate(x) {
        .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
        .                                   // and is only decreasing.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                           }
        .                           None
        .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
        .                           // the returned references is guaranteed to refer to an element
        .                           // of the slice and thus guaranteed to be valid.
        .                           //
        .                           // Also note that the caller also guarantees that we're never
        .                           // called with the same index again, and that no other methods
        .                           // that will access this subslice are called, so it is valid
        .                           // for the returned reference to be mutable in the case of
        .                           // `IterMut`
    2,256 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
        .                       }
        .           
        .                       $($extra)*
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
        .                       #[inline]
       48 ( 0.00%)              fn next_back(&mut self) -> Option<$elem> {
        .                           // could be implemented with slices, but this avoids bounds checks
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
        .                           // and slices over non-ZSTs must also have a non-null end pointer.
        .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
        .                           // empty first.
        .                           unsafe {
      128 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
       80 ( 0.00%)                      if mem::size_of::<T>() != 0 {
      128 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
   64,133 ( 0.02%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
       32 ( 0.00%)                          Some(next_back_unchecked!(self))
        .                               }
        .                           }
       48 ( 0.00%)              }
        .           
        .                       #[inline]
        .                       fn nth_back(&mut self, n: usize) -> Option<$elem> {
        .                           if n >= len!(self) {
        .                               // This iterator is now empty.
        .                               self.end = self.ptr.as_ptr();
        .                               return None;
        .                           }
-- line 375 ----------------------------------------

  391,260 ( 0.12%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/visitor.rs
--------------------------------------------------------------------------------
Ir               

-- line 52 ----------------------------------------
      .                   &self,
      .                   _ecx: &InterpCx<'mir, 'tcx, M>,
      .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
      .                   Ok(*self)
      .               }
      .           
      .               #[inline(always)]
      .               fn from_mem_place(mplace: MPlaceTy<'tcx, M::PointerTag>) -> Self {
 10,368 ( 0.00%)          mplace.into()
      .               }
      .           
      .               #[inline(always)]
      .               fn project_downcast(
      .                   &self,
      .                   ecx: &InterpCx<'mir, 'tcx, M>,
      .                   variant: VariantIdx,
      .               ) -> InterpResult<'tcx, Self> {
-- line 68 ----------------------------------------
-- line 70 ----------------------------------------
      .               }
      .           
      .               #[inline(always)]
      .               fn project_field(
      .                   &self,
      .                   ecx: &InterpCx<'mir, 'tcx, M>,
      .                   field: usize,
      .               ) -> InterpResult<'tcx, Self> {
 18,828 ( 0.01%)          ecx.operand_field(self, field)
      .               }
      .           }
      .           
      .           impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> Value<'mir, 'tcx, M>
      .               for MPlaceTy<'tcx, M::PointerTag>
      .           {
      .               #[inline(always)]
      .               fn layout(&self) -> TyAndLayout<'tcx> {
-- line 86 ----------------------------------------
-- line 87 ----------------------------------------
      .                   self.layout
      .               }
      .           
      .               #[inline(always)]
      .               fn to_op(
      .                   &self,
      .                   _ecx: &InterpCx<'mir, 'tcx, M>,
      .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
  9,615 ( 0.00%)          Ok((*self).into())
      .               }
      .           
      .               #[inline(always)]
      .               fn from_mem_place(mplace: MPlaceTy<'tcx, M::PointerTag>) -> Self {
      .                   mplace
      .               }
      .           
      .               #[inline(always)]
-- line 103 ----------------------------------------
-- line 170 ----------------------------------------
      .                       /// we are descending through.
      .                       #[inline(always)]
      .                       fn visit_field(
      .                           &mut self,
      .                           _old_val: &Self::V,
      .                           _field: usize,
      .                           new_val: &Self::V,
      .                       ) -> InterpResult<'tcx> {
 62,184 ( 0.02%)                  self.visit_value(new_val)
      .                       }
      .                       /// Called when recursing into an enum variant.
      .                       /// This gives the visitor the chance to track the stack of nested fields that
      .                       /// we are descending through.
      .                       #[inline(always)]
      .                       fn visit_variant(
      .                           &mut self,
      .                           _old_val: &Self::V,
      .                           _variant: VariantIdx,
      .                           new_val: &Self::V,
      .                       ) -> InterpResult<'tcx> {
      .                           self.visit_value(new_val)
      .                       }
      .           
      .                       // Default recursors. Not meant to be overloaded.
 56,259 ( 0.02%)              fn walk_aggregate(
      .                           &mut self,
      .                           v: &Self::V,
      .                           fields: impl Iterator<Item=InterpResult<'tcx, Self::V>>,
      .                       ) -> InterpResult<'tcx> {
      .                           // Now iterate over it.
 73,236 ( 0.02%)                  for (idx, field_val) in fields.enumerate() {
341,308 ( 0.11%)                      self.visit_field(v, idx, &field_val?)?;
      .                           }
      .                           Ok(())
 63,692 ( 0.02%)              }
 66,960 ( 0.02%)              fn walk_value(&mut self, v: &Self::V) -> InterpResult<'tcx>
      .                       {
      .                           trace!("walk_value: type: {}", v.layout().ty);
      .           
      .                           // Special treatment for special types, where the (static) layout is not sufficient.
 98,307 ( 0.03%)                  match *v.layout().ty.kind() {
      .                               // If it is a trait object, switch to the real type that was used to create it.
      .                               ty::Dynamic(..) => {
      .                                   // immediate trait objects are not a thing
      .                                   let op = v.to_op(self.ecx())?;
      .                                   let dest = op.assert_mem_place();
      .                                   let inner = self.ecx().unpack_dyn_trait(&dest)?.1;
      .                                   trace!("walk_value: dyn object layout: {:#?}", inner.layout);
      .                                   // recurse with the inner type
-- line 218 ----------------------------------------
-- line 220 ----------------------------------------
      .                               },
      .                               // Slices do not need special handling here: they have `Array` field
      .                               // placement with length 0, so we enter the `Array` case below which
      .                               // indirectly uses the metadata to determine the actual length.
      .                               _ => {},
      .                           };
      .           
      .                           // Visit the fields of this value.
120,627 ( 0.04%)                  match v.layout().fields {
      .                               FieldsShape::Primitive => {},
      .                               FieldsShape::Union(fields) => {
      .                                   self.visit_union(v, fields)?;
      .                               },
      .                               FieldsShape::Arbitrary { ref offsets, .. } => {
      .                                   // FIXME: We collect in a vec because otherwise there are lifetime
      .                                   // errors: Projecting to a field needs access to `ecx`.
      .                                   let fields: Vec<InterpResult<'tcx, Self::V>> =
  8,470 ( 0.00%)                              (0..offsets.len()).map(|i| {
 12,552 ( 0.00%)                                  v.project_field(self.ecx(), i)
      .                                       })
      .                                       .collect();
      .                                   self.visit_aggregate(v, fields.into_iter())?;
      .                               },
      .                               FieldsShape::Array { .. } => {
      .                                   // Let's get an mplace first.
 19,230 ( 0.01%)                          let op = v.to_op(self.ecx())?;
      .                                   let mplace = op.assert_mem_place();
      .                                   // Now we can go over all the fields.
      .                                   // This uses the *run-time length*, i.e., if we are a slice,
      .                                   // the dynamic info from the metadata is used.
 19,230 ( 0.01%)                          let iter = self.ecx().mplace_array_fields(&mplace)?
      .                                       .map(|f| f.and_then(|f| {
      .                                           Ok(Value::from_mem_place(f))
      .                                       }));
      .                                   self.visit_aggregate(v, iter)?;
      .                               }
      .                           }
      .           
 90,867 ( 0.03%)                  match v.layout().variants {
      .                               // If this is a multi-variant layout, find the right variant and proceed
      .                               // with *its* fields.
      .                               Variants::Multiple { .. } => {
      .                                   let op = v.to_op(self.ecx())?;
      .                                   let idx = self.read_discriminant(&op)?;
      .                                   let inner = v.project_downcast(self.ecx(), idx)?;
      .                                   trace!("walk_value: variant layout: {:#?}", inner.layout());
      .                                   // recurse with the inner type
      .                                   self.visit_variant(v, idx, &inner)
      .                               }
      .                               // For single-variant layouts, we already did anything there is to do.
      .                               Variants::Single { .. } => Ok(())
      .                           }
 66,960 ( 0.02%)              }
      .                   }
      .               }
      .           }
      .           
      .           make_value_visitor!(ValueVisitor,);
      .           make_value_visitor!(MutValueVisitor, mut);

 36,015 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/visitor.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs
--------------------------------------------------------------------------------
Ir               

-- line 15 ----------------------------------------
      .           use std::str;
      .           
      .           use crate::{with_session_globals, Edition, Span, DUMMY_SP};
      .           
      .           #[cfg(test)]
      .           mod tests;
      .           
      .           // The proc macro code for this is in `compiler/rustc_macros/src/symbols.rs`.
      8 ( 0.00%)  symbols! {
      .               // After modifying this list adjust `is_special`, `is_used_keyword`/`is_unused_keyword`,
      .               // this should be rarely necessary though if the keywords are kept in alphabetic order.
      .               Keywords {
      .                   // Special reserved identifiers used internally for elided lifetimes,
      .                   // unnamed method parameters, crate root module, error recovery etc.
      .                   Empty:              "",
      .                   PathRoot:           "{{root}}",
      .                   DollarCrate:        "$crate",
-- line 31 ----------------------------------------
-- line 1498 ----------------------------------------
      .                   write_str,
      .                   writeln_macro,
      .                   x87_reg,
      .                   xer,
      .                   xmm_reg,
      .                   ymm_reg,
      .                   zmm_reg,
      .               }
     10 ( 0.00%)  }
      .           
  4,866 ( 0.00%)  #[derive(Copy, Clone, Eq, HashStable_Generic, Encodable, Decodable)]
      .           pub struct Ident {
      .               pub name: Symbol,
      .               pub span: Span,
      .           }
      .           
      .           impl Ident {
      .               #[inline]
      .               /// Constructs a new identifier from a symbol and a span.
      .               pub const fn new(name: Symbol, span: Span) -> Ident {
      .                   Ident { name, span }
 21,385 ( 0.01%)      }
      .           
      .               /// Constructs a new identifier with a dummy span.
      .               #[inline]
      .               pub const fn with_dummy_span(name: Symbol) -> Ident {
      .                   Ident::new(name, DUMMY_SP)
      .               }
      .           
      .               #[inline]
      .               pub fn empty() -> Ident {
      .                   Ident::with_dummy_span(kw::Empty)
      .               }
      .           
      .               /// Maps a string to an identifier with a dummy span.
      5 ( 0.00%)      pub fn from_str(string: &str) -> Ident {
      5 ( 0.00%)          Ident::with_dummy_span(Symbol::intern(string))
     20 ( 0.00%)      }
      .           
      .               /// Maps a string and a span to an identifier.
     14 ( 0.00%)      pub fn from_str_and_span(string: &str, span: Span) -> Ident {
      7 ( 0.00%)          Ident::new(Symbol::intern(string), span)
     14 ( 0.00%)      }
      .           
      .               /// Replaces `lo` and `hi` with those from `span`, but keep hygiene context.
  1,032 ( 0.00%)      pub fn with_span_pos(self, span: Span) -> Ident {
      .                   Ident::new(self.name, span.with_ctxt(self.span.ctxt()))
    645 ( 0.00%)      }
      .           
     48 ( 0.00%)      pub fn without_first_quote(self) -> Ident {
     48 ( 0.00%)          Ident::new(Symbol::intern(self.as_str().trim_start_matches('\'')), self.span)
     30 ( 0.00%)      }
      .           
      .               /// "Normalize" ident for use in comparisons using "item hygiene".
      .               /// Identifiers with same string value become same if they came from the same macro 2.0 macro
      .               /// (e.g., `macro` item, but not `macro_rules` item) and stay different if they came from
      .               /// different macro 2.0 macros.
      .               /// Technically, this operation strips all non-opaque marks from ident's syntactic context.
 13,662 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Ident {
      .                   Ident::new(self.name, self.span.normalize_to_macros_2_0())
 10,626 ( 0.00%)      }
      .           
      .               /// "Normalize" ident for use in comparisons using "local variable hygiene".
      .               /// Identifiers with same string value become same if they came from the same non-transparent
      .               /// macro (e.g., `macro` or `macro_rules!` items) and stay different if they came from different
      .               /// non-transparent macros.
      .               /// Technically, this operation strips all transparent marks from ident's syntactic context.
    828 ( 0.00%)      pub fn normalize_to_macro_rules(self) -> Ident {
      .                   Ident::new(self.name, self.span.normalize_to_macro_rules())
    644 ( 0.00%)      }
      .           
      .               /// Access the underlying string. This is a slowish operation because it
      .               /// requires locking the symbol interner.
      .               ///
      .               /// Note that the lifetime of the return value is a lie. See
      .               /// `Symbol::as_str()` for details.
      .               pub fn as_str(&self) -> &str {
     34 ( 0.00%)          self.name.as_str()
      .               }
      .           }
      .           
      .           impl PartialEq for Ident {
  2,355 ( 0.00%)      fn eq(&self, rhs: &Self) -> bool {
  5,788 ( 0.00%)          self.name == rhs.name && self.span.ctxt() == rhs.span.ctxt()
  3,140 ( 0.00%)      }
      .           }
      .           
      .           impl Hash for Ident {
      .               fn hash<H: Hasher>(&self, state: &mut H) {
      3 ( 0.00%)          self.name.hash(state);
  1,002 ( 0.00%)          self.span.ctxt().hash(state);
      .               }
      .           }
      .           
      .           impl fmt::Debug for Ident {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Display::fmt(self, f)?;
      .                   fmt::Debug::fmt(&self.span.ctxt(), f)
      .               }
      .           }
      .           
      .           /// This implementation is supposed to be used in error messages, so it's expected to be identical
      .           /// to printing the original identifier token written in source code (`token_to_string`),
      .           /// except that AST identifiers don't keep the rawness flag, so we have to guess it.
      .           impl fmt::Display for Ident {
     20 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     25 ( 0.00%)          fmt::Display::fmt(&IdentPrinter::new(self.name, self.is_raw_guess(), None), f)
     20 ( 0.00%)      }
      .           }
      .           
      .           /// This is the most general way to print identifiers.
      .           /// AST pretty-printer is used as a fallback for turning AST structures into token streams for
      .           /// proc macros. Additionally, proc macros may stringify their input and expect it survive the
      .           /// stringification (especially true for proc macro derives written between Rust 1.15 and 1.30).
      .           /// So we need to somehow pretty-print `$crate` in a way preserving at least some of its
      .           /// hygiene data, most importantly name of the crate it refers to.
-- line 1613 ----------------------------------------
-- line 1622 ----------------------------------------
      .               is_raw: bool,
      .               /// Span used for retrieving the crate name to which `$crate` refers to,
      .               /// if this field is `None` then the `$crate` conversion doesn't happen.
      .               convert_dollar_crate: Option<Span>,
      .           }
      .           
      .           impl IdentPrinter {
      .               /// The most general `IdentPrinter` constructor. Do not use this.
    296 ( 0.00%)      pub fn new(symbol: Symbol, is_raw: bool, convert_dollar_crate: Option<Span>) -> IdentPrinter {
  1,597 ( 0.00%)          IdentPrinter { symbol, is_raw, convert_dollar_crate }
    296 ( 0.00%)      }
      .           
      .               /// This implementation is supposed to be used when printing identifiers
      .               /// as a part of pretty-printing for larger AST pieces.
      .               /// Do not use this either.
    194 ( 0.00%)      pub fn for_ast_ident(ident: Ident, is_raw: bool) -> IdentPrinter {
    194 ( 0.00%)          IdentPrinter::new(ident.name, is_raw, Some(ident.span))
     97 ( 0.00%)      }
      .           }
      .           
      .           impl fmt::Display for IdentPrinter {
  1,990 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    796 ( 0.00%)          if self.is_raw {
      .                       f.write_str("r#")?;
    398 ( 0.00%)          } else if self.symbol == kw::DollarCrate {
      .                       if let Some(span) = self.convert_dollar_crate {
      .                           let converted = span.ctxt().dollar_crate_name();
      .                           if !converted.is_path_segment_keyword() {
      .                               f.write_str("::")?;
      .                           }
      .                           return fmt::Display::fmt(&converted, f);
      .                       }
      .                   }
-- line 1654 ----------------------------------------
-- line 1656 ----------------------------------------
      .               }
      .           }
      .           
      .           /// An newtype around `Ident` that calls [Ident::normalize_to_macro_rules] on
      .           /// construction.
      .           // FIXME(matthewj, petrochenkov) Use this more often, add a similar
      .           // `ModernIdent` struct and use that as well.
      .           #[derive(Copy, Clone, Eq, PartialEq, Hash)]
     80 ( 0.00%)  pub struct MacroRulesNormalizedIdent(Ident);
      .           
      .           impl MacroRulesNormalizedIdent {
      .               pub fn new(ident: Ident) -> Self {
     40 ( 0.00%)          Self(ident.normalize_to_macro_rules())
      .               }
      .           }
      .           
      .           impl fmt::Debug for MacroRulesNormalizedIdent {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Debug::fmt(&self.0, f)
      .               }
      .           }
-- line 1676 ----------------------------------------
-- line 1685 ----------------------------------------
      .           ///
      .           /// Internally, a `Symbol` is implemented as an index, and all operations
      .           /// (including hashing, equality, and ordering) operate on that index. The use
      .           /// of `rustc_index::newtype_index!` means that `Option<Symbol>` only takes up 4 bytes,
      .           /// because `rustc_index::newtype_index!` reserves the last 256 values for tagging purposes.
      .           ///
      .           /// Note that `Symbol` cannot directly be a `rustc_index::newtype_index!` because it
      .           /// implements `fmt::Debug`, `Encodable`, and `Decodable` in special ways.
  2,315 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
  7,728 ( 0.00%)  pub struct Symbol(SymbolIndex);
      .           
      .           rustc_index::newtype_index! {
      .               struct SymbolIndex { .. }
      .           }
      .           
      .           impl Symbol {
      .               const fn new(n: u32) -> Self {
      .                   Symbol(SymbolIndex::from_u32(n))
     84 ( 0.00%)      }
      .           
      .               /// Maps a string to its interned representation.
173,421 ( 0.05%)      pub fn intern(string: &str) -> Self {
      .                   with_session_globals(|session_globals| session_globals.symbol_interner.intern(string))
173,421 ( 0.05%)      }
      .           
      .               /// Access the underlying string. This is a slowish operation because it
      .               /// requires locking the symbol interner.
      .               ///
      .               /// Note that the lifetime of the return value is a lie. It's not the same
      .               /// as `&self`, but actually tied to the lifetime of the underlying
      .               /// interner. Interners are long-lived, and there are very few of them, and
      .               /// this function is typically used for short-lived things, so in practice
      .               /// it works out ok.
 14,733 ( 0.00%)      pub fn as_str(&self) -> &str {
  4,911 ( 0.00%)          with_session_globals(|session_globals| unsafe {
      .                       std::mem::transmute::<&str, &str>(session_globals.symbol_interner.get(*self))
      .                   })
 19,644 ( 0.01%)      }
      .           
      .               pub fn as_u32(self) -> u32 {
      .                   self.0.as_u32()
      .               }
      .           
      .               pub fn is_empty(self) -> bool {
      .                   self == kw::Empty
      .               }
-- line 1730 ----------------------------------------
-- line 1740 ----------------------------------------
      .           
      .           impl fmt::Debug for Symbol {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Debug::fmt(self.as_str(), f)
      .               }
      .           }
      .           
      .           impl fmt::Display for Symbol {
    664 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  5,574 ( 0.00%)          fmt::Display::fmt(self.as_str(), f)
      .               }
      .           }
      .           
      .           impl<S: Encoder> Encodable<S> for Symbol {
      .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
  5,124 ( 0.00%)          s.emit_str(self.as_str())
      .               }
      .           }
      .           
      .           impl<D: Decoder> Decodable<D> for Symbol {
      .               #[inline]
  4,292 ( 0.00%)      fn decode(d: &mut D) -> Symbol {
 52,512 ( 0.02%)          Symbol::intern(&d.read_str())
      .               }
      .           }
      .           
      .           impl<CTX> HashStable<CTX> for Symbol {
      .               #[inline]
    198 ( 0.00%)      fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
  1,740 ( 0.00%)          self.as_str().hash_stable(hcx, hasher);
    186 ( 0.00%)      }
      .           }
      .           
      .           impl<CTX> ToStableHashKey<CTX> for Symbol {
      .               type KeyType = String;
      .               #[inline]
      .               fn to_stable_hash_key(&self, _: &CTX) -> String {
      .                   self.as_str().to_string()
      .               }
-- line 1778 ----------------------------------------
-- line 1785 ----------------------------------------
      .           //
      .           // The `FxHashMap`+`Vec` pair could be replaced by `FxIndexSet`, but #75278
      .           // found that to regress performance up to 2% in some cases. This might be
      .           // revisited after further improvements to `indexmap`.
      .           //
      .           // This type is private to prevent accidentally constructing more than one
      .           // `Interner` on the same thread, which makes it easy to mixup `Symbol`s
      .           // between `Interner`s.
      2 ( 0.00%)  #[derive(Default)]
      .           struct InternerInner {
      .               arena: DroplessArena,
      .               names: FxHashMap<&'static str, Symbol>,
      .               strings: Vec<&'static str>,
      .           }
      .           
      .           impl Interner {
      .               fn prefill(init: &[&'static str]) -> Self {
     30 ( 0.00%)          Interner(Lock::new(InternerInner {
      .                       strings: init.into(),
      .                       names: init.iter().copied().zip((0..).map(Symbol::new)).collect(),
      .                       ..Default::default()
      .                   }))
      .               }
      .           
      .               #[inline]
      .               fn intern(&self, string: &str) -> Symbol {
      .                   let mut inner = self.0.lock();
 28,762 ( 0.01%)          if let Some(&name) = inner.names.get(string) {
      .                       return name;
      .                   }
      .           
  4,888 ( 0.00%)          let name = Symbol::new(inner.strings.len() as u32);
      .           
      .                   // SAFETY: we convert from `&str` to `&[u8]`, clone it into the arena,
      .                   // and immediately convert the clone back to `&[u8], all because there
      .                   // is no `inner.arena.alloc_str()` method. This is clearly safe.
      .                   let string: &str =
      .                       unsafe { str::from_utf8_unchecked(inner.arena.alloc_slice(string.as_bytes())) };
      .           
      .                   // SAFETY: we can extend the arena allocation to `'static` because we
-- line 1824 ----------------------------------------
-- line 1831 ----------------------------------------
      .                   // #91445 for details.
      .                   inner.names.insert(string, name);
      .                   name
      .               }
      .           
      .               // Get the symbol as a string. `Symbol::as_str()` should be used in
      .               // preference to this function.
      .               fn get(&self, symbol: Symbol) -> &str {
 14,733 ( 0.00%)          self.0.lock().strings[symbol.0.as_usize()]
      .               }
      .           }
      .           
      .           // This module has a very short name because it's used a lot.
      .           /// This module contains all the defined keyword `Symbol`s.
      .           ///
      .           /// Given that `kw` is imported, use them like `kw::keyword_name`.
      .           /// For example `kw::Loop` or `kw::Break`.
-- line 1847 ----------------------------------------
-- line 1863 ----------------------------------------
      .           
      .               // Used from a macro in `librustc_feature/accepted.rs`
      .               pub use super::kw::MacroRules as macro_rules;
      .           
      .               /// Get the symbol for an integer.
      .               ///
      .               /// The first few non-negative integers each have a static symbol and therefore
      .               /// are fast.
    226 ( 0.00%)      pub fn integer<N: TryInto<usize> + Copy + ToString>(n: N) -> Symbol {
    196 ( 0.00%)          if let Result::Ok(idx) = n.try_into() {
     20 ( 0.00%)              if idx < 10 {
    168 ( 0.00%)                  return Symbol::new(super::SYMBOL_DIGITS_BASE + idx as u32);
      .                       }
      .                   }
     17 ( 0.00%)          Symbol::intern(&n.to_string())
     68 ( 0.00%)      }
      .           }
      .           
      .           impl Symbol {
      .               fn is_special(self) -> bool {
      .                   self <= kw::Underscore
      .               }
      .           
      .               fn is_used_keyword_always(self) -> bool {
    126 ( 0.00%)          self >= kw::As && self <= kw::While
      .               }
      .           
      .               fn is_used_keyword_conditional(self, edition: impl FnOnce() -> Edition) -> bool {
  2,172 ( 0.00%)          (self >= kw::Async && self <= kw::Dyn) && edition() >= Edition::Edition2018
      .               }
      .           
      .               fn is_unused_keyword_always(self) -> bool {
    126 ( 0.00%)          self >= kw::Abstract && self <= kw::Yield
      .               }
      .           
      .               fn is_unused_keyword_conditional(self, edition: impl FnOnce() -> Edition) -> bool {
     42 ( 0.00%)          self == kw::Try && edition() >= Edition::Edition2018
      .               }
      .           
      .               pub fn is_reserved(self, edition: impl Copy + FnOnce() -> Edition) -> bool {
  3,505 ( 0.00%)          self.is_special()
      .                       || self.is_used_keyword_always()
      .                       || self.is_unused_keyword_always()
      .                       || self.is_used_keyword_conditional(edition)
      .                       || self.is_unused_keyword_conditional(edition)
      .               }
      .           
      .               /// A keyword or reserved identifier that can be used as a path segment.
      .               pub fn is_path_segment_keyword(self) -> bool {
  8,498 ( 0.00%)          self == kw::Super
      .                       || self == kw::SelfLower
      .                       || self == kw::SelfUpper
      .                       || self == kw::Crate
      .                       || self == kw::PathRoot
      .                       || self == kw::DollarCrate
      .               }
      .           
      .               /// Returns `true` if the symbol is `true` or `false`.
      .               pub fn is_bool_lit(self) -> bool {
    478 ( 0.00%)          self == kw::True || self == kw::False
    478 ( 0.00%)      }
      .           
      .               /// Returns `true` if this symbol can be a raw identifier.
      .               pub fn can_be_raw(self) -> bool {
    400 ( 0.00%)          self != kw::Empty && self != kw::Underscore && !self.is_path_segment_keyword()
      .               }
      .           }
      .           
      .           impl Ident {
      .               // Returns `true` for reserved identifiers used internally for elided lifetimes,
      .               // unnamed method parameters, crate root module, error recovery etc.
      .               pub fn is_special(self) -> bool {
      .                   self.name.is_special()
     42 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is a keyword used in the language.
     42 ( 0.00%)      pub fn is_used_keyword(self) -> bool {
      .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
     42 ( 0.00%)          self.name.is_used_keyword_always()
      .                       || self.name.is_used_keyword_conditional(|| self.span.edition())
     84 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is a keyword reserved for possible future use.
     42 ( 0.00%)      pub fn is_unused_keyword(self) -> bool {
      .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
     42 ( 0.00%)          self.name.is_unused_keyword_always()
      .                       || self.name.is_unused_keyword_conditional(|| self.span.edition())
     84 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is either a special identifier or a keyword.
    543 ( 0.00%)      pub fn is_reserved(self) -> bool {
      .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
      .                   self.name.is_reserved(|| self.span.edition())
  1,086 ( 0.00%)      }
      .           
      .               /// A keyword or reserved identifier that can be used as a path segment.
      .               pub fn is_path_segment_keyword(self) -> bool {
      .                   self.name.is_path_segment_keyword()
  1,214 ( 0.00%)      }
      .           
      .               /// We see this identifier in a normal identifier position, like variable name or a type.
      .               /// How was it written originally? Did it use the raw form? Let's try to guess.
    174 ( 0.00%)      pub fn is_raw_guess(self) -> bool {
      .                   self.name.can_be_raw() && self.is_reserved()
    348 ( 0.00%)      }
      .           }

 28,491 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/sort.rs
--------------------------------------------------------------------------------
Ir              

-- line 69 ----------------------------------------
     .                           hole.dest = v.add(i);
     .                       }
     .                       // `hole` gets dropped and thus copies `tmp` into the remaining hole in `v`.
     .                   }
     .               }
     .           }
     .           
     .           /// Shifts the last element to the left until it encounters a smaller or equal element.
   622 ( 0.00%)  fn shift_tail<T, F>(v: &mut [T], is_less: &mut F)
     .           where
     .               F: FnMut(&T, &T) -> bool,
     .           {
     .               let len = v.len();
     .               // SAFETY: The unsafe operations below involves indexing without a bound check (by offsetting a
     .               // pointer) and copying memory (`ptr::copy_nonoverlapping`).
     .               //
     .               // a. Indexing:
-- line 85 ----------------------------------------
-- line 91 ----------------------------------------
     .               //  2. They cannot overlap because we obtain pointers to difference indices of the slice.
     .               //     Namely, `i` and `i+1`.
     .               //  3. If the slice is properly aligned, the elements are properly aligned.
     .               //     It is the caller's responsibility to make sure the slice is properly aligned.
     .               //
     .               // See comments below for further detail.
     .               unsafe {
     .                   // If the last two elements are out-of-order...
24,307 ( 0.01%)          if len >= 2 && is_less(v.get_unchecked(len - 1), v.get_unchecked(len - 2)) {
     .                       // Read the last element into a stack-allocated variable. If a following comparison
     .                       // operation panics, `hole` will get dropped and automatically write the element back
     .                       // into the slice.
     .                       let tmp = mem::ManuallyDrop::new(ptr::read(v.get_unchecked(len - 1)));
     .                       let v = v.as_mut_ptr();
     .                       let mut hole = CopyOnDrop { src: &*tmp, dest: v.add(len - 2) };
     .                       ptr::copy_nonoverlapping(v.add(len - 2), v.add(len - 1), 1);
     .           
     .                       for i in (0..len - 2).rev() {
74,784 ( 0.02%)                  if !is_less(&*tmp, &*v.add(i)) {
     .                               break;
     .                           }
     .           
     .                           // Move `i`-th element one place to the right, thus shifting the hole to the left.
     .                           ptr::copy_nonoverlapping(v.add(i), v.add(i + 1), 1);
     .                           hole.dest = v.add(i);
     .                       }
     .                       // `hole` gets dropped and thus copies `tmp` into the remaining hole in `v`.
     .                   }
     .               }
   728 ( 0.00%)  }
     .           
     .           /// Partially sorts a slice by shifting several out-of-order elements around.
     .           ///
     .           /// Returns `true` if the slice is sorted at the end. This function is *O*(*n*) worst-case.
     .           #[cold]
   216 ( 0.00%)  fn partial_insertion_sort<T, F>(v: &mut [T], is_less: &mut F) -> bool
     .           where
     .               F: FnMut(&T, &T) -> bool,
     .           {
     .               // Maximum number of adjacent out-of-order pairs that will get shifted.
     .               const MAX_STEPS: usize = 5;
     .               // If the slice is shorter than this, don't shift any elements.
     .               const SHORTEST_SHIFTING: usize = 50;
     .           
-- line 134 ----------------------------------------
-- line 135 ----------------------------------------
     .               let len = v.len();
     .               let mut i = 1;
     .           
     .               for _ in 0..MAX_STEPS {
     .                   // SAFETY: We already explicitly did the bound checking with `i < len`.
     .                   // All our subsequent indexing is only in the range `0 <= index < len`
     .                   unsafe {
     .                       // Find the next pair of adjacent out-of-order elements.
   328 ( 0.00%)              while i < len && !is_less(v.get_unchecked(i), v.get_unchecked(i - 1)) {
    11 ( 0.00%)                  i += 1;
     .                       }
     .                   }
     .           
     .                   // Are we done?
    72 ( 0.00%)          if i == len {
     .                       return true;
     .                   }
     .           
     .                   // Don't shift elements on short arrays, that has a performance cost.
     .                   if len < SHORTEST_SHIFTING {
     .                       return false;
     .                   }
     .           
-- line 157 ----------------------------------------
-- line 161 ----------------------------------------
     .                   // Shift the smaller element to the left.
     .                   shift_tail(&mut v[..i], is_less);
     .                   // Shift the greater element to the right.
     .                   shift_head(&mut v[i..], is_less);
     .               }
     .           
     .               // Didn't manage to sort the slice in the limited number of steps.
     .               false
   192 ( 0.00%)  }
     .           
     .           /// Sorts a slice using insertion sort, which is *O*(*n*^2) worst-case.
     .           fn insertion_sort<T, F>(v: &mut [T], is_less: &mut F)
     .           where
     .               F: FnMut(&T, &T) -> bool,
     .           {
     .               for i in 1..v.len() {
   299 ( 0.00%)          shift_tail(&mut v[..i + 1], is_less);
     .               }
     .           }
     .           
     .           /// Sorts `v` using heapsort, which guarantees *O*(*n* \* log(*n*)) worst-case.
     .           #[cold]
     .           #[unstable(feature = "sort_internals", reason = "internal to sort module", issue = "none")]
     .           pub fn heapsort<T, F>(v: &mut [T], mut is_less: F)
     .           where
-- line 185 ----------------------------------------
-- line 264 ----------------------------------------
     .               let mut offsets_r = [MaybeUninit::<u8>::uninit(); BLOCK];
     .           
     .               // FIXME: When we get VLAs, try creating one array of length `min(v.len(), 2 * BLOCK)` rather
     .               // than two fixed-size arrays of length `BLOCK`. VLAs might be more cache-efficient.
     .           
     .               // Returns the number of elements between pointers `l` (inclusive) and `r` (exclusive).
     .               fn width<T>(l: *mut T, r: *mut T) -> usize {
     .                   assert!(mem::size_of::<T>() > 0);
 7,408 ( 0.00%)          (r as usize - l as usize) / mem::size_of::<T>()
     .               }
     .           
     .               loop {
     .                   // We are done with partitioning block-by-block when `l` and `r` get very close. Then we do
     .                   // some patch-up work in order to partition the remaining elements in between.
 1,662 ( 0.00%)          let is_done = width(l, r) <= 2 * BLOCK;
     .           
   557 ( 0.00%)          if is_done {
     .                       // Number of remaining elements (still not compared to the pivot).
     .                       let mut rem = width(l, r);
 2,095 ( 0.00%)              if start_l < end_l || start_r < end_r {
    30 ( 0.00%)                  rem -= BLOCK;
     .                       }
     .           
     .                       // Adjust block sizes so that the left and right block don't overlap, but get perfectly
     .                       // aligned to cover the whole remaining gap.
    30 ( 0.00%)              if start_l < end_l {
     .                           block_r = rem;
     .                       } else if start_r < end_r {
     .                           block_l = rem;
     .                       } else {
     .                           // There were the same number of elements to switch on both blocks during the last
     .                           // iteration, so there are no remaining elements on either block. Cover the remaining
     .                           // items with roughly equally-sized blocks.
 1,011 ( 0.00%)                  block_l = rem / 2;
 1,010 ( 0.00%)                  block_r = rem - block_l;
     .                       }
     .                       debug_assert!(block_l <= BLOCK && block_r <= BLOCK);
     .                       debug_assert!(width(l, r) == block_l + block_r);
     .                   }
     .           
 1,662 ( 0.00%)          if start_l == end_l {
     .                       // Trace `block_l` elements from the left side.
     .                       start_l = MaybeUninit::slice_as_mut_ptr(&mut offsets_l);
     .                       end_l = start_l;
     .                       let mut elem = l;
     .           
     .                       for i in 0..block_l {
     .                           // SAFETY: The unsafety operations below involve the usage of the `offset`.
     .                           //         According to the conditions required by the function, we satisfy them because:
-- line 312 ----------------------------------------
-- line 315 ----------------------------------------
     .                           //            Casting a `bool` will never overflow `isize`.
     .                           //         3. We have guaranteed that `block_l` will be `<= BLOCK`.
     .                           //            Plus, `end_l` was initially set to the begin pointer of `offsets_` which was declared on the stack.
     .                           //            Thus, we know that even in the worst case (all invocations of `is_less` returns false) we will only be at most 1 byte pass the end.
     .                           //        Another unsafety operation here is dereferencing `elem`.
     .                           //        However, `elem` was initially the begin pointer to the slice which is always valid.
     .                           unsafe {
     .                               // Branchless comparison.
16,798 ( 0.01%)                      *end_l = i as u8;
16,417 ( 0.01%)                      end_l = end_l.offset(!is_less(&*elem, pivot) as isize);
     .                               elem = elem.offset(1);
     .                           }
     .                       }
     .                   }
     .           
 1,115 ( 0.00%)          if start_r == end_r {
     .                       // Trace `block_r` elements from the right side.
     .                       start_r = MaybeUninit::slice_as_mut_ptr(&mut offsets_r);
     .                       end_r = start_r;
     .                       let mut elem = r;
     .           
     .                       for i in 0..block_r {
     .                           // SAFETY: The unsafety operations below involve the usage of the `offset`.
     .                           //         According to the conditions required by the function, we satisfy them because:
-- line 338 ----------------------------------------
-- line 343 ----------------------------------------
     .                           //            Plus, `end_r` was initially set to the begin pointer of `offsets_` which was declared on the stack.
     .                           //            Thus, we know that even in the worst case (all invocations of `is_less` returns true) we will only be at most 1 byte pass the end.
     .                           //        Another unsafety operation here is dereferencing `elem`.
     .                           //        However, `elem` was initially `1 * sizeof(T)` past the end and we decrement it by `1 * sizeof(T)` before accessing it.
     .                           //        Plus, `block_r` was asserted to be less than `BLOCK` and `elem` will therefore at most be pointing to the beginning of the slice.
     .                           unsafe {
     .                               // Branchless comparison.
     .                               elem = elem.offset(-1);
16,718 ( 0.01%)                      *end_r = i as u8;
16,583 ( 0.01%)                      end_r = end_r.offset(is_less(&*elem, pivot) as isize);
     .                           }
     .                       }
     .                   }
     .           
     .                   // Number of out-of-order elements to swap between the left and right side.
     .                   let count = cmp::min(width(start_l, end_l), width(start_r, end_r));
     .           
 1,114 ( 0.00%)          if count > 0 {
     .                       macro_rules! left {
     .                           () => {
     .                               l.offset(*start_l as isize)
     .                           };
     .                       }
     .                       macro_rules! right {
     .                           () => {
     .                               r.offset(-(*start_r as isize) - 1)
-- line 368 ----------------------------------------
-- line 384 ----------------------------------------
     .                       // The calls to `start_l.offset` are valid because there are at most `count-1` of them,
     .                       // plus the final one at the end of the unsafe block, where `count` is the minimum number
     .                       // of collected offsets in `offsets_l` and `offsets_r`, so there is no risk of there not
     .                       // being enough elements. The same reasoning applies to the calls to `start_r.offset`.
     .                       //
     .                       // The calls to `copy_nonoverlapping` are safe because `left!` and `right!` are guaranteed
     .                       // not to overlap, and are valid because of the reasoning above.
     .                       unsafe {
   553 ( 0.00%)                  let tmp = ptr::read(left!());
 1,666 ( 0.00%)                  ptr::copy_nonoverlapping(right!(), left!(), 1);
     .           
     .                           for _ in 1..count {
     .                               start_l = start_l.offset(1);
14,237 ( 0.00%)                      ptr::copy_nonoverlapping(left!(), right!(), 1);
     .                               start_r = start_r.offset(1);
17,270 ( 0.01%)                      ptr::copy_nonoverlapping(right!(), left!(), 1);
     .                           }
     .           
     .                           ptr::copy_nonoverlapping(&tmp, right!(), 1);
     .                           mem::forget(tmp);
     .                           start_l = start_l.offset(1);
     .                           start_r = start_r.offset(1);
     .                       }
     .                   }
     .           
 1,671 ( 0.00%)          if start_l == end_l {
     .                       // All out-of-order elements in the left block were moved. Move to the next block.
     .           
     .                       // block-width-guarantee
     .                       // SAFETY: if `!is_done` then the slice width is guaranteed to be at least `2*BLOCK` wide. There
     .                       // are at most `BLOCK` elements in `offsets_l` because of its size, so the `offset` operation is
     .                       // safe. Otherwise, the debug assertions in the `is_done` case guarantee that
     .                       // `width(l, r) == block_l + block_r`, namely, that the block sizes have been adjusted to account
     .                       // for the smaller number of remaining elements.
     .                       l = unsafe { l.offset(block_l as isize) };
     .                   }
     .           
 1,662 ( 0.00%)          if start_r == end_r {
     .                       // All out-of-order elements in the right block were moved. Move to the previous block.
     .           
     .                       // SAFETY: Same argument as [block-width-guarantee]. Either this is a full block `2*BLOCK`-wide,
     .                       // or `block_r` has been adjusted for the last handful of elements.
   888 ( 0.00%)              r = unsafe { r.offset(-(block_r as isize)) };
     .                   }
     .           
   557 ( 0.00%)          if is_done {
     .                       break;
     .                   }
     .               }
     .           
     .               // All that remains now is at most one block (either the left or the right) with out-of-order
     .               // elements that need to be moved. Such remaining elements can be simply shifted to the end
     .               // within their block.
     .           
 1,040 ( 0.00%)      if start_l < end_l {
     .                   // The left block remains.
     .                   // Move its remaining out-of-order elements to the far right.
     .                   debug_assert_eq!(width(l, r), block_l);
 3,679 ( 0.00%)          while start_l < end_l {
     .                       // remaining-elements-safety
     .                       // SAFETY: while the loop condition holds there are still elements in `offsets_l`, so it
     .                       // is safe to point `end_l` to the previous element.
     .                       //
     .                       // The `ptr::swap` is safe if both its arguments are valid for reads and writes:
     .                       //  - Per the debug assert above, the distance between `l` and `r` is `block_l`
     .                       //    elements, so there can be at most `block_l` remaining offsets between `start_l`
     .                       //    and `end_l`. This means `r` will be moved at most `block_l` steps back, which
     .                       //    makes the `r.offset` calls valid (at that point `l == r`).
     .                       //  - `offsets_l` contains valid offsets into `v` collected during the partitioning of
     .                       //    the last block, so the `l.offset` calls are valid.
     .                       unsafe {
     .                           end_l = end_l.offset(-1);
 1,699 ( 0.00%)                  ptr::swap(l.offset(*end_l as isize), r.offset(-1));
     .                           r = r.offset(-1);
     .                       }
     .                   }
     .                   width(v.as_mut_ptr(), r)
   572 ( 0.00%)      } else if start_r < end_r {
     .                   // The right block remains.
     .                   // Move its remaining out-of-order elements to the far left.
     .                   debug_assert_eq!(width(l, r), block_r);
 4,689 ( 0.00%)          while start_r < end_r {
     .                       // SAFETY: See the reasoning in [remaining-elements-safety].
     .                       unsafe {
     .                           end_r = end_r.offset(-1);
 4,254 ( 0.00%)                  ptr::swap(l, r.offset(-(*end_r as isize) - 1));
     .                           l = l.offset(1);
     .                       }
     .                   }
     .                   width(v.as_mut_ptr(), l)
     .               } else {
     .                   // Nothing else to do, we're done.
     .                   width(v.as_mut_ptr(), l)
     .               }
-- line 477 ----------------------------------------
-- line 507 ----------------------------------------
     .                   let mut r = v.len();
     .           
     .                   // SAFETY: The unsafety below involves indexing an array.
     .                   // For the first one: We already do the bounds checking here with `l < r`.
     .                   // For the second one: We initially have `l == 0` and `r == v.len()` and we checked that `l < r` at every indexing operation.
     .                   //                     From here we know that `r` must be at least `r == l` which was shown to be valid from the first one.
     .                   unsafe {
     .                       // Find the first element greater than or equal to the pivot.
17,229 ( 0.01%)              while l < r && is_less(v.get_unchecked(l), pivot) {
 4,050 ( 0.00%)                  l += 1;
     .                       }
     .           
     .                       // Find the last element smaller that the pivot.
26,500 ( 0.01%)              while l < r && !is_less(v.get_unchecked(r - 1), pivot) {
     .                           r -= 1;
     .                       }
     .                   }
     .           
 3,638 ( 0.00%)          (l + partition_in_blocks(&mut v[l..r], pivot, is_less), l >= r)
     .           
     .                   // `_pivot_guard` goes out of scope and writes the pivot (which is a stack-allocated
     .                   // variable) back into the slice where it originally was. This step is critical in ensuring
     .                   // safety!
     .               };
     .           
     .               // Place the pivot between the two partitions.
     .               v.swap(0, mid);
-- line 533 ----------------------------------------
-- line 592 ----------------------------------------
     .           
     .               // `_pivot_guard` goes out of scope and writes the pivot (which is a stack-allocated variable)
     .               // back into the slice where it originally was. This step is critical in ensuring safety!
     .           }
     .           
     .           /// Scatters some elements around in an attempt to break patterns that might cause imbalanced
     .           /// partitions in quicksort.
     .           #[cold]
    17 ( 0.00%)  fn break_patterns<T>(v: &mut [T]) {
     .               let len = v.len();
     .               if len >= 8 {
     .                   // Pseudorandom number generator from the "Xorshift RNGs" paper by George Marsaglia.
     .                   let mut random = len as u32;
     .                   let mut gen_u32 = || {
   306 ( 0.00%)              random ^= random << 13;
   306 ( 0.00%)              random ^= random >> 17;
   306 ( 0.00%)              random ^= random << 5;
     .                       random
     .                   };
     .                   let mut gen_usize = || {
     .                       if usize::BITS <= 32 {
     .                           gen_u32() as usize
     .                       } else {
   102 ( 0.00%)                  (((gen_u32() as u64) << 32) | (gen_u32() as u64)) as usize
     .                       }
     .                   };
     .           
     .                   // Take random numbers modulo this number.
     .                   // The number fits into `usize` because `len` is not greater than `isize::MAX`.
     .                   let modulus = len.next_power_of_two();
     .           
     .                   // Some pivot candidates will be in the nearby of this index. Let's randomize them.
    51 ( 0.00%)          let pos = len / 4 * 2;
     .           
     .                   for i in 0..3 {
     .                       // Generate a random number modulo `len`. However, in order to avoid costly operations
     .                       // we first take it modulo a power of two, and then decrease by `len` until it fits
     .                       // into the range `[0, len - 1]`.
   102 ( 0.00%)              let mut other = gen_usize() & (modulus - 1);
     .           
     .                       // `other` is guaranteed to be less than `2 * len`.
   136 ( 0.00%)              if other >= len {
     .                           other -= len;
     .                       }
     .           
    17 ( 0.00%)              v.swap(pos - 1 + i, other);
     .                   }
     .               }
    34 ( 0.00%)  }
     .           
     .           /// Chooses a pivot in `v` and returns the index and `true` if the slice is likely already sorted.
     .           ///
     .           /// Elements in `v` might be reordered in the process.
     .           fn choose_pivot<T, F>(v: &mut [T], is_less: &mut F) -> (usize, bool)
     .           where
     .               F: FnMut(&T, &T) -> bool,
     .           {
-- line 648 ----------------------------------------
-- line 650 ----------------------------------------
     .               // Shorter slices use the simple median-of-three method.
     .               const SHORTEST_MEDIAN_OF_MEDIANS: usize = 50;
     .               // Maximum number of swaps that can be performed in this function.
     .               const MAX_SWAPS: usize = 4 * 3;
     .           
     .               let len = v.len();
     .           
     .               // Three indices near which we are going to choose a pivot.
 1,049 ( 0.00%)      let mut a = len / 4 * 1;
   529 ( 0.00%)      let mut b = len / 4 * 2;
   529 ( 0.00%)      let mut c = len / 4 * 3;
     .           
     .               // Counts the total number of swaps we are about to perform while sorting indices.
    18 ( 0.00%)      let mut swaps = 0;
     .           
     .               if len >= 8 {
     .                   // Swaps indices so that `v[a] <= v[b]`.
     .                   // SAFETY: `len >= 8` so there are at least two elements in the neighborhoods of
     .                   // `a`, `b` and `c`. This means the three calls to `sort_adjacent` result in
     .                   // corresponding calls to `sort3` with valid 3-item neighborhoods around each
     .                   // pointer, which in turn means the calls to `sort2` are done with valid
     .                   // references. Thus the `v.get_unchecked` calls are safe, as is the `ptr::swap`
     .                   // call.
    47 ( 0.00%)          let mut sort2 = |a: &mut usize, b: &mut usize| unsafe {
15,838 ( 0.00%)              if is_less(v.get_unchecked(*b), v.get_unchecked(*a)) {
     .                           ptr::swap(a, b);
 3,094 ( 0.00%)                  swaps += 1;
     .                       }
     .                   };
     .           
     .                   // Swaps indices so that `v[a] <= v[b] <= v[c]`.
    88 ( 0.00%)          let mut sort3 = |a: &mut usize, b: &mut usize, c: &mut usize| {
    14 ( 0.00%)              sort2(a, b);
     .                       sort2(b, c);
     .                       sort2(a, b);
    80 ( 0.00%)          };
     .           
 1,042 ( 0.00%)          if len >= SHORTEST_MEDIAN_OF_MEDIANS {
     .                       // Finds the median of `v[a - 1], v[a], v[a + 1]` and stores the index into `a`.
     .                       let mut sort_adjacent = |a: &mut usize| {
     .                           let tmp = *a;
 1,035 ( 0.00%)                  sort3(&mut (tmp - 1), a, &mut (tmp + 1));
     .                       };
     .           
     .                       // Find medians in the neighborhoods of `a`, `b`, and `c`.
     .                       sort_adjacent(&mut a);
     .                       sort_adjacent(&mut b);
     .                       sort_adjacent(&mut c);
     .                   }
     .           
     .                   // Find the median among `a`, `b`, and `c`.
    35 ( 0.00%)          sort3(&mut a, &mut b, &mut c);
     .               }
     .           
   319 ( 0.00%)      if swaps < MAX_SWAPS {
 1,053 ( 0.00%)          (b, swaps == 0)
     .               } else {
     .                   // The maximum number of swaps was performed. Chances are the slice is descending or mostly
     .                   // descending, so reversing will probably help sort it faster.
     .                   v.reverse();
     .                   (len - 1 - b, true)
     .               }
     .           }
     .           
     .           /// Sorts `v` recursively.
     .           ///
     .           /// If the slice had a predecessor in the original array, it is specified as `pred`.
     .           ///
     .           /// `limit` is the number of allowed imbalanced partitions before switching to `heapsort`. If zero,
     .           /// this function will immediately switch to heapsort.
 7,418 ( 0.00%)  fn recurse<'a, T, F>(mut v: &'a mut [T], is_less: &mut F, mut pred: Option<&'a T>, mut limit: u32)
     .           where
     .               F: FnMut(&T, &T) -> bool,
     .           {
     .               // Slices of up to this length get sorted using insertion sort.
     .               const MAX_INSERTION: usize = 20;
     .           
     .               // True if the last partitioning was reasonably balanced.
     .               let mut was_balanced = true;
     .               // True if the last partitioning didn't shuffle elements (the slice was already partitioned).
     .               let mut was_partitioned = true;
     .           
     .               loop {
     .                   let len = v.len();
     .           
     .                   // Very short slices get sorted using insertion sort.
 2,591 ( 0.00%)          if len <= MAX_INSERTION {
     .                       insertion_sort(v, is_less);
     .                       return;
     .                   }
     .           
     .                   // If too many bad pivot choices were made, simply fall back to heapsort in order to
     .                   // guarantee `O(n * log(n))` worst-case.
 1,040 ( 0.00%)          if limit == 0 {
     .                       heapsort(v, is_less);
     .                       return;
     .                   }
     .           
     .                   // If the last partitioning was imbalanced, try breaking patterns in the slice by shuffling
     .                   // some elements around. Hopefully we'll choose a better pivot this time.
 1,040 ( 0.00%)          if !was_balanced {
   102 ( 0.00%)              break_patterns(v);
    34 ( 0.00%)              limit -= 1;
     .                   }
     .           
     .                   // Choose a pivot and try guessing whether the slice is already sorted.
 1,040 ( 0.00%)          let (pivot, likely_sorted) = choose_pivot(v, is_less);
     .           
     .                   // If the last partitioning was decently balanced and didn't shuffle elements, and if pivot
     .                   // selection predicts the slice is likely already sorted...
 1,064 ( 0.00%)          if was_balanced && was_partitioned && likely_sorted {
     .                       // Try identifying several out-of-order elements and shifting them to correct
     .                       // positions. If the slice ends up being completely sorted, we're done.
   192 ( 0.00%)              if partial_insertion_sort(v, is_less) {
     .                           return;
     .                       }
     .                   }
     .           
     .                   // If the chosen pivot is equal to the predecessor, then it's the smallest element in the
     .                   // slice. Partition the slice into elements equal to and elements greater than the pivot.
     .                   // This case is usually hit when the slice contains many duplicate elements.
   520 ( 0.00%)          if let Some(p) = pred {
 2,708 ( 0.00%)              if !is_less(p, &v[pivot]) {
     .                           let mid = partition_equal(v, pivot, is_less);
     .           
     .                           // Continue sorting elements greater than the pivot.
     .                           v = &mut { v }[mid..];
     .                           continue;
     .                       }
     .                   }
     .           
     .                   // Partition the slice.
     .                   let (mid, was_p) = partition(v, pivot, is_less);
 3,640 ( 0.00%)          was_balanced = cmp::min(mid, len - mid) >= len / 8;
     .                   was_partitioned = was_p;
     .           
     .                   // Split the slice into `left`, `pivot`, and `right`.
     .                   let (left, right) = { v }.split_at_mut(mid);
     .                   let (pivot, right) = right.split_at_mut(1);
     .                   let pivot = &pivot[0];
     .           
     .                   // Recurse into the shorter side only in order to minimize the total number of recursive
     .                   // calls and consume less stack space. Then just continue with the longer side (this is
     .                   // akin to tail recursion).
 1,040 ( 0.00%)          if left.len() < right.len() {
 2,367 ( 0.00%)              recurse(left, is_less, pred, limit);
     .                       v = right;
     .                       pred = Some(pivot);
     .                   } else {
 1,542 ( 0.00%)              recurse(right, is_less, Some(pivot), limit);
     .                       v = left;
     .                   }
     .               }
 5,424 ( 0.00%)  }
     .           
     .           /// Sorts `v` using pattern-defeating quicksort, which is *O*(*n* \* log(*n*)) worst-case.
     .           pub fn quicksort<T, F>(v: &mut [T], mut is_less: F)
     .           where
     .               F: FnMut(&T, &T) -> bool,
     .           {
     .               // Sorting has no meaningful behavior on zero-sized types.
     .               if mem::size_of::<T>() == 0 {
     .                   return;
     .               }
     .           
     .               // Limit the number of imbalanced partitions to `floor(log2(len)) + 1`.
   332 ( 0.00%)      let limit = usize::BITS - v.len().leading_zeros();
     .           
   566 ( 0.00%)      recurse(v, &mut is_less, None, limit);
     .           }
     .           
     .           fn partition_at_index_loop<'a, T, F>(
     .               mut v: &'a mut [T],
     .               mut index: usize,
     .               is_less: &mut F,
     .               mut pred: Option<&'a T>,
     .           ) where
-- line 826 ----------------------------------------

36,045 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/sort.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 416 ----------------------------------------
        .               /// ```
        .               /// # #![allow(unused_mut)]
        .               /// let mut vec: Vec<i32> = Vec::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
    1,046 ( 0.00%)      pub const fn new() -> Self {
  230,717 ( 0.07%)          Vec { buf: RawVec::NEW, len: 0 }
    1,065 ( 0.00%)      }
        .           
        .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
        .               ///
        .               /// The vector will be able to hold exactly `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the vector will not allocate.
        .               ///
        .               /// It is important to note that although the returned vector has the
        .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 461 ----------------------------------------
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
       56 ( 0.00%)      pub fn with_capacity(capacity: usize) -> Self {
       14 ( 0.00%)          Self::with_capacity_in(capacity, Global)
       28 ( 0.00%)      }
        .           
        .               /// Creates a `Vec<T>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
        .               ///
-- line 479 ----------------------------------------
-- line 529 ----------------------------------------
        .               ///
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts(p, len, cap);
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
       72 ( 0.00%)      pub unsafe fn from_raw_parts(ptr: *mut T, length: usize, capacity: usize) -> Self {
       12 ( 0.00%)          unsafe { Self::from_raw_parts_in(ptr, length, capacity, Global) }
       24 ( 0.00%)      }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               /// Constructs a new, empty `Vec<T, A>`.
        .               ///
        .               /// The vector will not allocate until elements are pushed onto it.
        .               ///
        .               /// # Examples
-- line 547 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// // ...but this may make the vector reallocate
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
    1,687 ( 0.00%)      pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
  130,421 ( 0.04%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
      482 ( 0.00%)      }
        .           
        .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
        .               ///
-- line 618 ----------------------------------------
-- line 676 ----------------------------------------
        .               ///
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
      364 ( 0.00%)      pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
    6,425 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
       56 ( 0.00%)      }
        .           
        .               /// Decomposes a `Vec<T>` into its raw components.
        .               ///
        .               /// Returns the raw pointer to the underlying data, the length of
        .               /// the vector (in elements), and the allocated capacity of the
        .               /// data (in elements). These are the same arguments in the same
        .               /// order as the arguments to [`from_raw_parts`].
        .               ///
-- line 694 ----------------------------------------
-- line 777 ----------------------------------------
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let vec: Vec<i32> = Vec::with_capacity(10);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    1,216 ( 0.00%)      pub fn capacity(&self) -> usize {
   27,668 ( 0.01%)          self.buf.capacity()
      608 ( 0.00%)      }
        .           
        .               /// Reserves capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
        .               /// # Panics
-- line 795 ----------------------------------------
-- line 800 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      715 ( 0.00%)      pub fn reserve(&mut self, additional: usize) {
   20,005 ( 0.01%)          self.buf.reserve(self.len, additional);
      286 ( 0.00%)      }
        .           
        .               /// Reserves the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
        .               /// requests. Therefore, capacity can not be relied upon to be precisely
-- line 818 ----------------------------------------
-- line 829 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve_exact(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve_exact(&mut self, additional: usize) {
    1,340 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
        .               }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `try_reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 845 ----------------------------------------
-- line 926 ----------------------------------------
        .               /// let mut vec = Vec::with_capacity(10);
        .               /// vec.extend([1, 2, 3]);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// vec.shrink_to_fit();
        .               /// assert!(vec.capacity() >= 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      840 ( 0.00%)      pub fn shrink_to_fit(&mut self) {
        .                   // The capacity is never less than the length, and there's nothing to do when
        .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
        .                   // by only calling it with a greater capacity.
    3,382 ( 0.00%)          if self.capacity() > self.len {
    2,270 ( 0.00%)              self.buf.shrink_to_fit(self.len);
        .                   }
      560 ( 0.00%)      }
        .           
        .               /// Shrinks the capacity of the vector with a lower bound.
        .               ///
        .               /// The capacity will remain at least as large as both the length
        .               /// and the supplied value.
        .               ///
        .               /// If the current capacity is less than the lower limit, this is a no-op.
        .               ///
-- line 949 ----------------------------------------
-- line 987 ----------------------------------------
        .               /// vec.extend([1, 2, 3]);
        .               ///
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// let slice = vec.into_boxed_slice();
        .               /// assert_eq!(slice.into_vec().capacity(), 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      560 ( 0.00%)      pub fn into_boxed_slice(mut self) -> Box<[T], A> {
        .                   unsafe {
    1,680 ( 0.00%)              self.shrink_to_fit();
    2,272 ( 0.00%)              let me = ManuallyDrop::new(self);
    2,800 ( 0.00%)              let buf = ptr::read(&me.buf);
    1,400 ( 0.00%)              let len = me.len();
    3,640 ( 0.00%)              buf.into_box(len).assume_init()
      280 ( 0.00%)          }
      560 ( 0.00%)      }
        .           
        .               /// Shortens the vector, keeping the first `len` elements and dropping
        .               /// the rest.
        .               ///
        .               /// If `len` is greater than the vector's current length, this has no
        .               /// effect.
        .               ///
        .               /// The [`drain`] method can emulate `truncate`, but causes the excess
-- line 1011 ----------------------------------------
-- line 1040 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.truncate(0);
        .               /// assert_eq!(vec, []);
        .               /// ```
        .               ///
        .               /// [`clear`]: Vec::clear
        .               /// [`drain`]: Vec::drain
        .               #[stable(feature = "rust1", since = "1.0.0")]
   12,132 ( 0.00%)      pub fn truncate(&mut self, len: usize) {
        .                   // This is safe because:
        .                   //
        .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
        .                   //   case avoids creating an invalid slice, and
        .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
        .                   //   such that no value will be dropped twice in case `drop_in_place`
        .                   //   were to panic once (if it panics twice, the program aborts).
        .                   unsafe {
        .                       // Note: It's intentional that this is `>` and not `>=`.
        .                       //       Changing it to `>=` has negative performance
        .                       //       implications in some cases. See #78884 for more.
   24,993 ( 0.01%)              if len > self.len {
        .                           return;
        .                       }
        .                       let remaining_len = self.len - len;
        .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
   23,835 ( 0.01%)              self.len = len;
      251 ( 0.00%)              ptr::drop_in_place(s);
        .                   }
   14,552 ( 0.00%)      }
        .           
        .               /// Extracts a slice containing the entire vector.
        .               ///
        .               /// Equivalent to `&s[..]`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1076 ----------------------------------------
-- line 1123 ----------------------------------------
        .               ///         assert_eq!(*x_ptr.add(i), 1 << i);
        .               ///     }
        .               /// }
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
    2,048 ( 0.00%)      pub fn as_ptr(&self) -> *const T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref`, which creates an intermediate reference.
  268,337 ( 0.08%)          let ptr = self.buf.ptr();
        .                   unsafe {
    1,024 ( 0.00%)              assume(!ptr.is_null());
        .                   }
        .                   ptr
    2,048 ( 0.00%)      }
        .           
        .               /// Returns an unsafe mutable pointer to the vector's buffer.
        .               ///
        .               /// The caller must ensure that the vector outlives the pointer this
        .               /// function returns, or else it will end up pointing to garbage.
        .               /// Modifying the vector may cause its buffer to be reallocated,
        .               /// which would also make any pointers to it invalid.
        .               ///
-- line 1147 ----------------------------------------
-- line 1159 ----------------------------------------
        .               ///         *x_ptr.add(i) = i as i32;
        .               ///     }
        .               ///     x.set_len(size);
        .               /// }
        .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
   13,256 ( 0.00%)      pub fn as_mut_ptr(&mut self) -> *mut T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref_mut`, which creates an intermediate reference.
  588,453 ( 0.18%)          let ptr = self.buf.ptr();
        .                   unsafe {
    6,628 ( 0.00%)              assume(!ptr.is_null());
        .                   }
        .                   ptr
   13,256 ( 0.00%)      }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               #[inline]
      736 ( 0.00%)      pub fn allocator(&self) -> &A {
      736 ( 0.00%)          self.buf.allocator()
      736 ( 0.00%)      }
        .           
        .               /// Forces the length of the vector to `new_len`.
        .               ///
        .               /// This is a low-level operation that maintains none of the normal
        .               /// invariants of the type. Normally changing the length of a vector
        .               /// is done using one of the safe operations instead, such as
        .               /// [`truncate`], [`resize`], [`extend`], or [`clear`].
        .               ///
-- line 1190 ----------------------------------------
-- line 1256 ----------------------------------------
        .               ///     vec.set_len(0);
        .               /// }
        .               /// ```
        .               ///
        .               /// Normally, here, one would use [`clear`] instead to correctly drop
        .               /// the contents and thus not leak memory.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    1,122 ( 0.00%)      pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   debug_assert!(new_len <= self.capacity());
        .           
   45,968 ( 0.01%)          self.len = new_len;
    1,044 ( 0.00%)      }
        .           
        .               /// Removes an element from the vector and returns it.
        .               ///
        .               /// The removed element is replaced by the last element of the vector.
        .               ///
        .               /// This does not preserve ordering, but is *O*(1).
        .               /// If you need to preserve the element order, use [`remove`] instead.
        .               ///
-- line 1276 ----------------------------------------
-- line 1329 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.insert(1, 4);
        .               /// assert_eq!(vec, [1, 4, 2, 3]);
        .               /// vec.insert(4, 5);
        .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      231 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
        .                   }
        .           
       45 ( 0.00%)          let len = self.len();
      110 ( 0.00%)          if index > len {
        .                       assert_failed(index, len);
        .                   }
        .           
        .                   // space for the new element
      232 ( 0.00%)          if len == self.buf.capacity() {
        .                       self.reserve(1);
        .                   }
        .           
        .                   unsafe {
        .                       // infallible
        .                       // The spot to put the new value
        .                       {
        .                           let p = self.as_mut_ptr().add(index);
        .                           // Shift everything over to make space. (Duplicating the
        .                           // `index`th element into two consecutive places.)
      312 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
        .                           // Write it in, overwriting the first copy of the `index`th
        .                           // element.
        .                           ptr::write(p, element);
        .                       }
      232 ( 0.00%)              self.set_len(len + 1);
        .                   }
      198 ( 0.00%)      }
        .           
        .               /// Removes and returns the element at position `index` within the vector,
        .               /// shifting all elements after it to the left.
        .               ///
        .               /// Note: Because this shifts over the remaining elements, it has a
        .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
        .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
        .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1387 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let mut v = vec![1, 2, 3];
        .               /// assert_eq!(v.remove(1), 2);
        .               /// assert_eq!(v, [1, 3]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[track_caller]
       48 ( 0.00%)      pub fn remove(&mut self, index: usize) -> T {
        .                   #[cold]
        .                   #[inline(never)]
        .                   #[track_caller]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("removal index (is {}) should be < len (is {})", index, len);
        .                   }
        .           
       48 ( 0.00%)          let len = self.len();
      157 ( 0.00%)          if index >= len {
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // infallible
        .                       let ret;
        .                       {
        .                           // the place we are taking from.
        .                           let ptr = self.as_mut_ptr().add(index);
        .                           // copy it out, unsafely having a copy of the value on
        .                           // the stack and in the vector at the same time.
      400 ( 0.00%)                  ret = ptr::read(ptr);
        .           
        .                           // Shift everything down to fill in that spot.
      100 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
        .                       }
       48 ( 0.00%)              self.set_len(len - 1);
        .                       ret
        .                   }
       80 ( 0.00%)      }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1431 ----------------------------------------
-- line 1442 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3, 4, 5];
        .               /// let keep = [false, true, true, false, true];
        .               /// let mut iter = keep.iter();
        .               /// vec.retain(|_| *iter.next().unwrap());
        .               /// assert_eq!(vec, [2, 3, 5]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
   12,882 ( 0.00%)      pub fn retain<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&T) -> bool,
        .               {
      480 ( 0.00%)          self.retain_mut(|elem| f(elem));
   12,624 ( 0.00%)      }
        .           
        .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1470 ----------------------------------------
        .               ///     false
        .               /// } else {
        .               ///     *x += 1;
        .               ///     true
        .               /// });
        .               /// assert_eq!(vec, [2, 3, 4]);
        .               /// ```
        .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
       32 ( 0.00%)      pub fn retain_mut<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
    1,637 ( 0.00%)          let original_len = self.len();
        .                   // Avoid double drop if the drop guard is not executed,
        .                   // since we may make some holes during the process.
       40 ( 0.00%)          unsafe { self.set_len(0) };
        .           
        .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
        .                   //      |<-              processed len   ->| ^- next to check
        .                   //                  |<-  deleted cnt     ->|
        .                   //      |<-              original_len                          ->|
        .                   // Kept: Elements which predicate returns true on.
        .                   // Hole: Moved or dropped element slot.
        .                   // Unchecked: Unchecked valid elements.
-- line 1493 ----------------------------------------
-- line 1498 ----------------------------------------
        .                   struct BackshiftOnDrop<'a, T, A: Allocator> {
        .                       v: &'a mut Vec<T, A>,
        .                       processed_len: usize,
        .                       deleted_cnt: usize,
        .                       original_len: usize,
        .                   }
        .           
        .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
       24 ( 0.00%)              fn drop(&mut self) {
    1,741 ( 0.00%)                  if self.deleted_cnt > 0 {
        .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
        .                               unsafe {
        .                                   ptr::copy(
        .                                       self.v.as_ptr().add(self.processed_len),
    1,048 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
        .                                       self.original_len - self.processed_len,
        .                                   );
        .                               }
        .                           }
        .                           // SAFETY: After filling holes, all items are in contiguous memory.
        .                           unsafe {
       90 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
        .                           }
       16 ( 0.00%)              }
        .                   }
        .           
       56 ( 0.00%)          let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
        .           
      160 ( 0.00%)          fn process_loop<F, T, A: Allocator, const DELETED: bool>(
        .                       original_len: usize,
        .                       f: &mut F,
        .                       g: &mut BackshiftOnDrop<'_, T, A>,
        .                   ) where
        .                       F: FnMut(&mut T) -> bool,
        .                   {
   15,069 ( 0.00%)              while g.processed_len != original_len {
        .                           // SAFETY: Unchecked element must be valid.
       72 ( 0.00%)                  let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
    3,555 ( 0.00%)                  if !f(cur) {
        .                               // Advance early to avoid double drop if `drop_in_place` panicked.
      640 ( 0.00%)                      g.processed_len += 1;
      302 ( 0.00%)                      g.deleted_cnt += 1;
        .                               // SAFETY: We never touch this element again after dropped.
        8 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
        .                               // We already advanced the counter.
        .                               if DELETED {
        .                                   continue;
        .                               } else {
        .                                   break;
        .                               }
        .                           }
       32 ( 0.00%)                  if DELETED {
        .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
        .                               // We use copy for move, and never touch this element again.
        .                               unsafe {
      648 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
        .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
        .                               }
        .                           }
      691 ( 0.00%)                  g.processed_len += 1;
        .                       }
       32 ( 0.00%)          }
        .           
        .                   // Stage 1: Nothing was deleted.
       16 ( 0.00%)          process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
        .           
        .                   // Stage 2: Some elements were deleted.
       16 ( 0.00%)          process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
        .           
        .                   // All item are processed. This can be optimized to `set_len` by LLVM.
       64 ( 0.00%)          drop(g);
       32 ( 0.00%)      }
        .           
        .               /// Removes all but the first of consecutive elements in the vector that resolve to the same
        .               /// key.
        .               ///
        .               /// If the vector is sorted, this removes all duplicates.
        .               ///
        .               /// # Examples
        .               ///
-- line 1577 ----------------------------------------
-- line 1606 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
        .               ///
        .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
        .               ///
        .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
        .               /// ```
        .               #[stable(feature = "dedup_by", since = "1.16.0")]
      105 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
        .               where
        .                   F: FnMut(&mut T, &mut T) -> bool,
        .               {
       51 ( 0.00%)          let len = self.len();
      286 ( 0.00%)          if len <= 1 {
        .                       return;
        .                   }
        .           
        .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
        .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
        .                       /* Offset of the element we want to check if it is duplicate */
        .                       read: usize,
        .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
        .                   let ptr = gap.vec.as_mut_ptr();
        .           
        .                   /* Drop items while going through Vec, it should be more efficient than
        .                    * doing slice partition_dedup + truncate */
        .           
        .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
        .                    * are always in-bounds and read_ptr never aliases prev_ptr */
        .                   unsafe {
      300 ( 0.00%)              while gap.read < len {
        .                           let read_ptr = ptr.add(gap.read);
        .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
        .           
       68 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
        .                               // Increase `gap.read` now since the drop may panic.
        .                               gap.read += 1;
        .                               /* We have found duplicate, drop it in-place */
        .                               ptr::drop_in_place(read_ptr);
        .                           } else {
        .                               let write_ptr = ptr.add(gap.write);
        .           
        .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
        .                                * have to use `copy` or conditional `copy_nonoverlapping`.
        .                                * Looks like the first option is faster. */
        .                               ptr::copy(read_ptr, write_ptr, 1);
        .           
        .                               /* We have filled that place, so go further */
      164 ( 0.00%)                      gap.write += 1;
        .                               gap.read += 1;
        .                           }
        .                       }
        .           
        .                       /* Technically we could let `gap` clean up with its Drop, but
        .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
        .                        * the codegen, so we just do it manually */
        .                       gap.vec.set_len(gap.write);
        .                       mem::forget(gap);
        .                   }
      120 ( 0.00%)      }
        .           
        .               /// Appends an element to the back of a collection.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
        .               ///
        .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2];
        .               /// vec.push(3);
        .               /// assert_eq!(vec, [1, 2, 3]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
   27,944 ( 0.01%)      pub fn push(&mut self, value: T) {
        .                   // This will panic or abort if we would allocate > isize::MAX bytes
        .                   // or if the length increment would overflow for zero-sized types.
1,494,561 ( 0.47%)          if self.len == self.buf.capacity() {
   55,776 ( 0.02%)              self.buf.reserve_for_push(self.len);
        .                   }
        .                   unsafe {
   71,192 ( 0.02%)              let end = self.as_mut_ptr().add(self.len);
   31,202 ( 0.01%)              ptr::write(end, value);
1,577,171 ( 0.49%)              self.len += 1;
        .                   }
    9,916 ( 0.00%)      }
        .           
        .               /// Removes the last element from a vector and returns it, or [`None`] if it
        .               /// is empty.
        .               ///
        .               /// If you'd like to pop the first element, consider using
        .               /// [`VecDeque::pop_front`] instead.
        .               ///
        .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3];
        .               /// assert_eq!(vec.pop(), Some(3));
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop(&mut self) -> Option<T> {
   49,620 ( 0.02%)          if self.len == 0 {
        4 ( 0.00%)              None
        .                   } else {
        .                       unsafe {
   37,611 ( 0.01%)                  self.len -= 1;
    5,126 ( 0.00%)                  Some(ptr::read(self.as_ptr().add(self.len())))
        .                       }
        .                   }
        .               }
        .           
        .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
        .               ///
        .               /// # Panics
        .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
        .               /// let mut vec2 = vec![4, 5, 6];
        .               /// vec.append(&mut vec2);
        .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
        .               /// assert_eq!(vec2, []);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "append", since = "1.4.0")]
      126 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
        .                   unsafe {
        .                       self.append_elements(other.as_slice() as _);
        .                       other.set_len(0);
        .                   }
      108 ( 0.00%)      }
        .           
        .               /// Appends elements to `Self` from other buffer.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
    1,370 ( 0.00%)      unsafe fn append_elements(&mut self, other: *const [T]) {
      137 ( 0.00%)          let count = unsafe { (*other).len() };
      137 ( 0.00%)          self.reserve(count);
    4,919 ( 0.00%)          let len = self.len();
      415 ( 0.00%)          unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
   28,260 ( 0.01%)          self.len += count;
      274 ( 0.00%)      }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// When the iterator **is** dropped, all elements in the range are removed
        .               /// from the vector, even if the iterator was not fully consumed. If the
        .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
        .               /// unspecified how many elements are removed.
-- line 1808 ----------------------------------------
-- line 1820 ----------------------------------------
        .               /// assert_eq!(v, &[1]);
        .               /// assert_eq!(u, &[2, 3]);
        .               ///
        .               /// // A full range clears the vector
        .               /// v.drain(..);
        .               /// assert_eq!(v, &[]);
        .               /// ```
        .               #[stable(feature = "drain", since = "1.6.0")]
      889 ( 0.00%)      pub fn drain<R>(&mut self, range: R) -> Drain<'_, T, A>
        .               where
        .                   R: RangeBounds<usize>,
        .               {
        .                   // Memory safety
        .                   //
        .                   // When the Drain is first created, it shortens the length of
        .                   // the source vector to make sure no uninitialized or moved-from elements
        .                   // are accessible at all if the Drain's destructor never gets to run.
        .                   //
        .                   // Drain will ptr::read out the values to remove.
        .                   // When finished, remaining tail of the vec is copied back to cover
        .                   // the hole, and the vector length is restored to the new length.
        .                   //
    2,044 ( 0.00%)          let len = self.len();
    1,905 ( 0.00%)          let Range { start, end } = slice::range(range, ..len);
        .           
        .                   unsafe {
        .                       // set self.vec length's to start, to be safe in case Drain is leaked
      381 ( 0.00%)              self.set_len(start);
        .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
        .                       // whole Drain iterator (like &mut T).
    2,085 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
      814 ( 0.00%)              Drain {
        .                           tail_start: end,
      687 ( 0.00%)                  tail_len: len - end,
      635 ( 0.00%)                  iter: range_slice.iter(),
      508 ( 0.00%)                  vec: NonNull::from(self),
        .                       }
        .                   }
      254 ( 0.00%)      }
        .           
        .               /// Clears the vector, removing all values.
        .               ///
        .               /// Note that this method has no effect on the allocated capacity
        .               /// of the vector.
        .               ///
        .               /// # Examples
        .               ///
-- line 1866 ----------------------------------------
-- line 1869 ----------------------------------------
        .               ///
        .               /// v.clear();
        .               ///
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn clear(&mut self) {
   21,144 ( 0.01%)          self.truncate(0)
        .               }
        .           
        .               /// Returns the number of elements in the vector, also referred to
        .               /// as its 'length'.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let a = vec![1, 2, 3];
        .               /// assert_eq!(a.len(), 3);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    2,722 ( 0.00%)      pub fn len(&self) -> usize {
    1,361 ( 0.00%)          self.len
    2,722 ( 0.00%)      }
        .           
        .               /// Returns `true` if the vector contains no elements.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let mut v = Vec::new();
        .               /// assert!(v.is_empty());
        .               ///
        .               /// v.push(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
      792 ( 0.00%)      pub fn is_empty(&self) -> bool {
   21,885 ( 0.01%)          self.len() == 0
    1,584 ( 0.00%)      }
        .           
        .               /// Splits the collection into two at the given index.
        .               ///
        .               /// Returns a newly allocated vector containing the elements in the range
        .               /// `[at, len)`. After the call, the original vector will be left containing
        .               /// the elements `[0, at)` with its previous capacity unchanged.
        .               ///
        .               /// # Panics
-- line 1917 ----------------------------------------
-- line 1935 ----------------------------------------
        .                   A: Clone,
        .               {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(at: usize, len: usize) -> ! {
        .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
        .                   }
        .           
      193 ( 0.00%)          if at > self.len() {
        .                       assert_failed(at, self.len());
        .                   }
        .           
      143 ( 0.00%)          if at == 0 {
        .                       // the new vector can take over the original buffer and avoid the copy
        .                       return mem::replace(
        .                           self,
        .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
        .                       );
        .                   }
        .           
        .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
        .               ///
        .               /// let mut vec = vec![];
        .               /// let mut p = 1;
        .               /// vec.resize_with(4, || { p *= 2; p });
        .               /// assert_eq!(vec, [2, 4, 8, 16]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
    1,687 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
        .               where
        .                   F: FnMut() -> T,
        .               {
      225 ( 0.00%)          let len = self.len();
      450 ( 0.00%)          if new_len > len {
    1,392 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
    1,462 ( 0.00%)      }
        .           
        .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
        .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
        .               /// `'a`. If the type has only static references, or none at all, then this
        .               /// may be chosen to be `'static`.
        .               ///
        .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
        .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2064 ----------------------------------------
        .               /// unsafe {
        .               ///     v.set_len(3);
        .               /// }
        .               ///
        .               /// assert_eq!(&v, &[0, 1, 2]);
        .               /// ```
        .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
        .               #[inline]
      483 ( 0.00%)      pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
        .                   // Note:
        .                   // This method is not implemented in terms of `split_at_spare_mut`,
        .                   // to prevent invalidation of pointers to the buffer.
        .                   unsafe {
      644 ( 0.00%)              slice::from_raw_parts_mut(
    1,131 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
      854 ( 0.00%)                  self.buf.capacity() - self.len,
        .                       )
        .                   }
      322 ( 0.00%)      }
        .           
        .               /// Returns vector content as a slice of `T`, along with the remaining spare
        .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
        .               ///
        .               /// The returned spare capacity slice can be used to fill the vector with data
        .               /// (e.g. by reading from a file) before marking the data as initialized using
        .               /// the [`set_len`] method.
        .               ///
-- line 2090 ----------------------------------------
-- line 2189 ----------------------------------------
        .               /// assert_eq!(vec, ["hello", "world", "world"]);
        .               ///
        .               /// let mut vec = vec![1, 2, 3, 4];
        .               /// vec.resize(2, 0);
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize", since = "1.5.0")]
    1,060 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
      106 ( 0.00%)          let len = self.len();
        .           
      318 ( 0.00%)          if new_len > len {
      429 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
      106 ( 0.00%)      }
        .           
        .               /// Clones and appends all elements in a slice to the `Vec`.
        .               ///
        .               /// Iterates over the slice `other`, clones each element, and then appends
        .               /// it to this `Vec`. The `other` slice is traversed in-order.
        .               ///
        .               /// Note that this function is same as [`extend`] except that it is
        .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2220 ----------------------------------------
        .               /// let mut vec = vec![1];
        .               /// vec.extend_from_slice(&[2, 3, 4]);
        .               /// assert_eq!(vec, [1, 2, 3, 4]);
        .               /// ```
        .               ///
        .               /// [`extend`]: Vec::extend
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_extend_from_slice", since = "1.6.0")]
    1,507 ( 0.00%)      pub fn extend_from_slice(&mut self, other: &[T]) {
      548 ( 0.00%)          self.spec_extend(other.iter())
      274 ( 0.00%)      }
        .           
        .               /// Copies elements from `src` range to the end of the vector.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the starting point is greater than the end point or if
        .               /// the end point is greater than the length of the vector.
        .               ///
-- line 2238 ----------------------------------------
-- line 2291 ----------------------------------------
        .               fn last(mut self) -> T {
        .                   (self.0)()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               #[cfg(not(no_global_oom_handling))]
        .               /// Extend the vector by `n` values, using the given generator.
   15,433 ( 0.00%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
        .                   self.reserve(n);
        .           
        .                   unsafe {
      649 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
        .                       // Use SetLenOnDrop to work around bug where compiler
        .                       // might not realize the store through `ptr` through self.set_len()
        .                       // don't alias.
        .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
        .           
        .                       // Write all elements except the last one
        .                       for _ in 1..n {
        .                           ptr::write(ptr, value.next());
        .                           ptr = ptr.offset(1);
        .                           // Increment the length in every step in case next() panics
        .                           local_len.increment_len(1);
        .                       }
        .           
   18,767 ( 0.01%)              if n > 0 {
        .                           // We can write the last element directly without cloning needlessly
        .                           ptr::write(ptr, value.last());
        .                           local_len.increment_len(1);
        .                       }
        .           
        .                       // len set by scope guard
        .                   }
   12,241 ( 0.00%)      }
        .           }
        .           
        .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
        .               /// Removes consecutive repeated elements in the vector according to the
        .               /// [`PartialEq`] trait implementation.
        .               ///
        .               /// If the vector is sorted, this removes all duplicates.
        .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
        .               ///
        .               /// vec.dedup();
        .               ///
        .               /// assert_eq!(vec, [1, 2, 3, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn dedup(&mut self) {
       16 ( 0.00%)          self.dedup_by(|a, b| a == b)
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Internal methods and functions
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
    3,824 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
   18,577 ( 0.01%)      <T as SpecFromElem>::from_elem(elem, n, Global)
    3,967 ( 0.00%)  }
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[unstable(feature = "allocator_api", issue = "32838")]
        .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
        .               <T as SpecFromElem>::from_elem(elem, n, alloc)
        .           }
        .           
-- line 2367 ----------------------------------------
-- line 2423 ----------------------------------------
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Common trait implementations for Vec
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
        .               type Target = [T];
        .           
    3,072 ( 0.00%)      fn deref(&self) -> &[T] {
  441,886 ( 0.14%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
    2,048 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
       36 ( 0.00%)      fn deref_mut(&mut self) -> &mut [T] {
   86,024 ( 0.03%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
       24 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           trait SpecCloneFrom {
        .               fn clone_from(this: &mut Self, other: &Self);
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
-- line 2448 ----------------------------------------
-- line 2468 ----------------------------------------
        .                   this.extend_from_slice(other);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
        .               #[cfg(not(test))]
   16,657 ( 0.01%)      fn clone(&self) -> Self {
      805 ( 0.00%)          let alloc = self.allocator().clone();
    1,451 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
   19,687 ( 0.01%)      }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Instead use the
        .               // `slice::to_vec`  function which is only available with cfg(test)
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
        .               type Output = I::Output;
        .           
        .               #[inline]
        .               fn index(&self, index: I) -> &Self::Output {
    4,401 ( 0.00%)          Index::index(&**self, index)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
-- line 2534 ----------------------------------------
-- line 2538 ----------------------------------------
        .                   IndexMut::index_mut(&mut **self, index)
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> FromIterator<T> for Vec<T> {
        .               #[inline]
       12 ( 0.00%)      fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
  153,842 ( 0.05%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
        8 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
        .               type Item = T;
        .               type IntoIter = IntoIter<T, A>;
        .           
        .               /// Creates a consuming iterator, that is, one that moves each value out of
-- line 2556 ----------------------------------------
-- line 2562 ----------------------------------------
        .               /// ```
        .               /// let v = vec!["a".to_string(), "b".to_string()];
        .               /// for s in v.into_iter() {
        .               ///     // s has type String, not &String
        .               ///     println!("{}", s);
        .               /// }
        .               /// ```
        .               #[inline]
      621 ( 0.00%)      fn into_iter(self) -> IntoIter<T, A> {
        .                   unsafe {
   57,205 ( 0.02%)              let mut me = ManuallyDrop::new(self);
      414 ( 0.00%)              let alloc = ptr::read(me.allocator());
    1,035 ( 0.00%)              let begin = me.as_mut_ptr();
      621 ( 0.00%)              let end = if mem::size_of::<T>() == 0 {
        .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
        .                       } else {
    1,029 ( 0.00%)                  begin.add(me.len()) as *const T
        .                       };
      207 ( 0.00%)              let cap = me.buf.capacity();
   46,308 ( 0.01%)              IntoIter {
      828 ( 0.00%)                  buf: NonNull::new_unchecked(begin),
        .                           phantom: PhantomData,
        .                           cap,
        .                           alloc,
        .                           ptr: begin,
      207 ( 0.00%)                  end,
        .                       }
        .                   }
      414 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a Vec<T, A> {
        .               type Item = &'a T;
        .               type IntoIter = slice::Iter<'a, T>;
        .           
       66 ( 0.00%)      fn into_iter(self) -> slice::Iter<'a, T> {
      198 ( 0.00%)          self.iter()
       66 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
        .               type Item = &'a mut T;
        .               type IntoIter = slice::IterMut<'a, T>;
        .           
       24 ( 0.00%)      fn into_iter(self) -> slice::IterMut<'a, T> {
    1,274 ( 0.00%)          self.iter_mut()
       24 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
        .               #[inline]
       42 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
   30,207 ( 0.01%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
       36 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, item: T) {
        .                   self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
-- line 2627 ----------------------------------------
-- line 2628 ----------------------------------------
        .                   self.reserve(additional);
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               // leaf method to which various SpecFrom/SpecExtend implementations delegate when
        .               // they have no further optimizations to apply
        .               #[cfg(not(no_global_oom_handling))]
       16 ( 0.00%)      fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
        .                   // This is the case for a general iterator.
        .                   //
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iterator {
        .                   //          self.push(item);
        .                   //      }
   19,790 ( 0.01%)          while let Some(element) = iterator.next() {
      787 ( 0.00%)              let len = self.len();
   21,246 ( 0.01%)              if len == self.capacity() {
      364 ( 0.00%)                  let (lower, _) = iterator.size_hint();
        .                           self.reserve(lower.saturating_add(1));
        .                       }
        .                       unsafe {
        .                           ptr::write(self.as_mut_ptr().add(len), element);
        .                           // Since next() executes user code which can panic we have to bump the length
        .                           // after each step.
        .                           // NB can't overflow since we would have had to alloc the address space
   20,128 ( 0.01%)                  self.set_len(len + 1);
        .                       }
        .                   }
      162 ( 0.00%)      }
        .           
        .               /// Creates a splicing iterator that replaces the specified range in the vector
        .               /// with the given `replace_with` iterator and yields the removed items.
        .               /// `replace_with` does not need to be the same length as `range`.
        .               ///
        .               /// `range` is removed even if the iterator is not consumed until the end.
        .               ///
        .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2693 ----------------------------------------
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "vec_splice", since = "1.21.0")]
        .               pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, A>
        .               where
        .                   R: RangeBounds<usize>,
        .                   I: IntoIterator<Item = T>,
        .               {
      117 ( 0.00%)          Splice { drain: self.drain(range), replace_with: replace_with.into_iter() }
        .               }
        .           
        .               /// Creates an iterator which uses a closure to determine if an element should be removed.
        .               ///
        .               /// If the closure returns true, then the element is removed and yielded.
        .               /// If the closure returns false, the element will remain in the vector and will not be yielded
        .               /// by the iterator.
        .               ///
-- line 2709 ----------------------------------------
-- line 2745 ----------------------------------------
        .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
        .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
        .               /// ```
        .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
        .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
      228 ( 0.00%)          let old_len = self.len();
        .           
        .                   // Guard against us getting leaked (leak amplification)
        .                   unsafe {
        .                       self.set_len(0);
        .                   }
        .           
      144 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
        .               }
        .           }
        .           
        .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
        .           ///
        .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
        .           /// append the entire slice at once.
        .           ///
        .           /// [`copy_from_slice`]: slice::copy_from_slice
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "extend_ref", since = "1.2.0")]
        .           impl<'a, T: Copy + 'a, A: Allocator + 'a> Extend<&'a T> for Vec<T, A> {
      224 ( 0.00%)      fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {
        .                   self.spec_extend(iter.into_iter())
      168 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, &item: &'a T) {
        .                   self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
-- line 2783 ----------------------------------------
-- line 2803 ----------------------------------------
        .               #[inline]
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   Ord::cmp(&**self, &**other)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
   54,622 ( 0.02%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // use drop for [T]
        .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
        .                       // could avoid questions of validity in certain cases
   33,253 ( 0.01%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
        .                   }
        .                   // RawVec handles deallocation
   62,560 ( 0.02%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
        .           impl<T> const Default for Vec<T> {
        .               /// Creates an empty `Vec<T>`.
        .               fn default() -> Vec<T> {
        .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
        .               /// newly-allocated buffer with exactly the right capacity.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
        .               /// ```
        .               fn from(v: Vec<T, A>) -> Self {
        4 ( 0.00%)          v.into_boxed_slice()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl From<&str> for Vec<u8> {
        .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
        .               ///
-- line 2992 ----------------------------------------

  244,940 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/codec.rs
--------------------------------------------------------------------------------
Ir               

-- line 70 ----------------------------------------
      .           ///
      .           /// `Decodable` can still be implemented in cases where `Decodable` is required
      .           /// by a trait bound.
      .           pub trait RefDecodable<'tcx, D: TyDecoder<'tcx>> {
      .               fn decode(d: &mut D) -> &'tcx Self;
      .           }
      .           
      .           /// Encode the given value or a previously cached shorthand.
  2,802 ( 0.00%)  pub fn encode_with_shorthand<'tcx, E, T, M>(
      .               encoder: &mut E,
      .               value: &T,
      .               cache: M,
      .           ) -> Result<(), E::Error>
      .           where
      .               E: TyEncoder<'tcx>,
      .               M: for<'b> Fn(&'b mut E) -> &'b mut FxHashMap<T, usize>,
      .               T: EncodableWithShorthand<'tcx, E>,
-- line 86 ----------------------------------------
-- line 90 ----------------------------------------
      .               let existing_shorthand = cache(encoder).get(value).copied();
      .               if let Some(shorthand) = existing_shorthand {
      .                   return encoder.emit_usize(shorthand);
      .               }
      .           
      .               let variant = value.variant();
      .           
      .               let start = encoder.position();
    279 ( 0.00%)      variant.encode(encoder)?;
    186 ( 0.00%)      let len = encoder.position() - start;
      .           
      .               // The shorthand encoding uses the same usize as the
      .               // discriminant, with an offset so they can't conflict.
      .               let discriminant = intrinsics::discriminant_value(variant);
      .               assert!(SHORTHAND_OFFSET > discriminant as usize);
      .           
    186 ( 0.00%)      let shorthand = start + SHORTHAND_OFFSET;
      .           
      .               // Get the number of bits that leb128 could fit
      .               // in the same space as the fully encoded type.
    186 ( 0.00%)      let leb128_bits = len * 7;
      .           
      .               // Check that the shorthand is a not longer than the
      .               // full encoding itself, i.e., it's an obvious win.
    651 ( 0.00%)      if leb128_bits >= 64 || (shorthand as u64) < (1 << leb128_bits) {
      .                   cache(encoder).insert(*value, shorthand);
      .               }
      .           
      .               Ok(())
  2,296 ( 0.00%)  }
      .           
      .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for Ty<'tcx> {
      .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
  1,529 ( 0.00%)          encode_with_shorthand(e, self, TyEncoder::type_shorthands)
      .               }
      .           }
      .           
      .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for ty::Binder<'tcx, ty::PredicateKind<'tcx>> {
      .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
      .                   self.bound_vars().encode(e)?;
     24 ( 0.00%)          encode_with_shorthand(e, &self.skip_binder(), TyEncoder::predicate_shorthands)
      .               }
      .           }
      .           
      .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for ty::Predicate<'tcx> {
      .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
      .                   self.kind().encode(e)
      .               }
      .           }
-- line 138 ----------------------------------------
-- line 141 ----------------------------------------
      .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
      .                   e.encode_alloc_id(self)
      .               }
      .           }
      .           
      .           macro_rules! encodable_via_deref {
      .               ($($t:ty),+) => {
      .                   $(impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for $t {
    220 ( 0.00%)              fn encode(&self, e: &mut E) -> Result<(), E::Error> {
     44 ( 0.00%)                  (**self).encode(e)
    200 ( 0.00%)              }
      .                   })*
      .               }
      .           }
      .           
      .           encodable_via_deref! {
      .               &'tcx ty::TypeckResults<'tcx>,
      .               ty::Region<'tcx>,
      .               &'tcx mir::Body<'tcx>,
-- line 159 ----------------------------------------
-- line 176 ----------------------------------------
      .               where
      .                   F: FnOnce(&mut Self) -> Ty<'tcx>;
      .           
      .               fn with_position<F, R>(&mut self, pos: usize, f: F) -> R
      .               where
      .                   F: FnOnce(&mut Self) -> R;
      .           
      .               fn positioned_at_shorthand(&self) -> bool {
 26,680 ( 0.01%)          (self.peek_byte() & (SHORTHAND_OFFSET as u8)) != 0
      .               }
      .           
      .               fn decode_alloc_id(&mut self) -> AllocId;
      .           }
      .           
      .           #[inline]
      .           fn decode_arena_allocable<'tcx, D, T: ArenaAllocatable<'tcx> + Decodable<D>>(
      .               decoder: &mut D,
      .           ) -> &'tcx T
      .           where
      .               D: TyDecoder<'tcx>,
      .           {
  5,794 ( 0.00%)      decoder.tcx().arena.alloc(Decodable::decode(decoder))
      .           }
      .           
      .           #[inline]
      .           fn decode_arena_allocable_slice<'tcx, D, T: ArenaAllocatable<'tcx> + Decodable<D>>(
      .               decoder: &mut D,
      .           ) -> &'tcx [T]
      .           where
      .               D: TyDecoder<'tcx>,
      .           {
      .               decoder.tcx().arena.alloc_from_iter(<Vec<T> as Decodable<D>>::decode(decoder))
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for Ty<'tcx> {
      .               #[allow(rustc::usage_of_ty_tykind)]
106,492 ( 0.03%)      fn decode(decoder: &mut D) -> Ty<'tcx> {
      .                   // Handle shorthands first, if we have a usize > 0x80.
 26,623 ( 0.01%)          if decoder.positioned_at_shorthand() {
      .                       let pos = decoder.read_usize();
 33,220 ( 0.01%)              assert!(pos >= SHORTHAND_OFFSET);
 49,830 ( 0.02%)              let shorthand = pos - SHORTHAND_OFFSET;
      .           
 49,830 ( 0.02%)              decoder.cached_ty_for_shorthand(shorthand, |decoder| {
      .                           decoder.with_position(shorthand, Ty::decode)
      .                       })
      .                   } else {
 10,013 ( 0.00%)              let tcx = decoder.tcx();
 20,026 ( 0.01%)              tcx.mk_ty(ty::TyKind::decode(decoder))
      .                   }
106,492 ( 0.03%)      }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for ty::Binder<'tcx, ty::PredicateKind<'tcx>> {
    342 ( 0.00%)      fn decode(decoder: &mut D) -> ty::Binder<'tcx, ty::PredicateKind<'tcx>> {
      .                   let bound_vars = Decodable::decode(decoder);
      .                   // Handle shorthands first, if we have a usize > 0x80.
      .                   ty::Binder::bind_with_vars(
     57 ( 0.00%)              if decoder.positioned_at_shorthand() {
      .                           let pos = decoder.read_usize();
     84 ( 0.00%)                  assert!(pos >= SHORTHAND_OFFSET);
     42 ( 0.00%)                  let shorthand = pos - SHORTHAND_OFFSET;
      .           
      .                           decoder.with_position(shorthand, ty::PredicateKind::decode)
      .                       } else {
     45 ( 0.00%)                  ty::PredicateKind::decode(decoder)
      .                       },
      .                       bound_vars,
      .                   )
    342 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for ty::Predicate<'tcx> {
      .               fn decode(decoder: &mut D) -> ty::Predicate<'tcx> {
    171 ( 0.00%)          let predicate_kind = Decodable::decode(decoder);
     57 ( 0.00%)          decoder.tcx().mk_predicate(predicate_kind)
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for SubstsRef<'tcx> {
      .               fn decode(decoder: &mut D) -> Self {
      .                   let len = decoder.read_usize();
 10,750 ( 0.00%)          let tcx = decoder.tcx();
      .                   tcx.mk_substs(
 25,226 ( 0.01%)              (0..len).map::<ty::subst::GenericArg<'tcx>, _>(|_| Decodable::decode(decoder)),
      .                   )
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for mir::Place<'tcx> {
      .               fn decode(decoder: &mut D) -> Self {
      .                   let local: mir::Local = Decodable::decode(decoder);
      .                   let len = decoder.read_usize();
  4,278 ( 0.00%)          let projection = decoder.tcx().mk_place_elems(
  3,146 ( 0.00%)              (0..len).map::<mir::PlaceElem<'tcx>, _>(|_| Decodable::decode(decoder)),
      .                   );
      .                   mir::Place { local, projection }
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for ty::Region<'tcx> {
 14,532 ( 0.00%)      fn decode(decoder: &mut D) -> Self {
  6,228 ( 0.00%)          decoder.tcx().mk_region(Decodable::decode(decoder))
 16,608 ( 0.01%)      }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for CanonicalVarInfos<'tcx> {
      .               fn decode(decoder: &mut D) -> Self {
      .                   let len = decoder.read_usize();
      .                   let interned: Vec<CanonicalVarInfo<'tcx>> =
      .                       (0..len).map(|_| Decodable::decode(decoder)).collect();
      .                   decoder.tcx().intern_canonical_var_infos(interned.as_slice())
-- line 287 ----------------------------------------
-- line 290 ----------------------------------------
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for AllocId {
      .               fn decode(decoder: &mut D) -> Self {
      .                   decoder.decode_alloc_id()
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for ty::SymbolName<'tcx> {
     24 ( 0.00%)      fn decode(decoder: &mut D) -> Self {
     20 ( 0.00%)          ty::SymbolName::new(decoder.tcx(), &decoder.read_str())
     36 ( 0.00%)      }
      .           }
      .           
      .           macro_rules! impl_decodable_via_ref {
      .               ($($t:ty),+) => {
      .                   $(impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for $t {
      .                       fn decode(decoder: &mut D) -> Self {
      .                           RefDecodable::decode(decoder)
      .                       }
      .                   })*
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for ty::List<Ty<'tcx>> {
      .               fn decode(decoder: &mut D) -> &'tcx Self {
      .                   let len = decoder.read_usize();
    993 ( 0.00%)          decoder.tcx().mk_type_list((0..len).map::<Ty<'tcx>, _>(|_| Decodable::decode(decoder)))
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D>
      .               for ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>
      .           {
      .               fn decode(decoder: &mut D) -> &'tcx Self {
      .                   let len = decoder.read_usize();
     22 ( 0.00%)          decoder.tcx().mk_poly_existential_predicates(
    151 ( 0.00%)              (0..len).map::<ty::Binder<'tcx, _>, _>(|_| Decodable::decode(decoder)),
      .                   )
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for ty::Const<'tcx> {
      .               fn decode(decoder: &mut D) -> &'tcx Self {
 20,108 ( 0.01%)          decoder.tcx().mk_const(Decodable::decode(decoder))
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for [ty::ValTree<'tcx>] {
      .               fn decode(decoder: &mut D) -> &'tcx Self {
      .                   decoder.tcx().arena.alloc_from_iter(
      .                       (0..decoder.read_usize()).map(|_| Decodable::decode(decoder)).collect::<Vec<_>>(),
      .                   )
-- line 341 ----------------------------------------
-- line 344 ----------------------------------------
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for Allocation {
      .               fn decode(decoder: &mut D) -> &'tcx Self {
      .                   decoder.tcx().intern_const_alloc(Decodable::decode(decoder))
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for [(ty::Predicate<'tcx>, Span)] {
  1,316 ( 0.00%)      fn decode(decoder: &mut D) -> &'tcx Self {
    376 ( 0.00%)          decoder.tcx().arena.alloc_from_iter(
      .                       (0..decoder.read_usize()).map(|_| Decodable::decode(decoder)).collect::<Vec<_>>(),
      .                   )
  1,880 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for [thir::abstract_const::Node<'tcx>] {
      .               fn decode(decoder: &mut D) -> &'tcx Self {
      .                   decoder.tcx().arena.alloc_from_iter(
      .                       (0..decoder.read_usize()).map(|_| Decodable::decode(decoder)).collect::<Vec<_>>(),
      .                   )
      .               }
-- line 364 ----------------------------------------
-- line 370 ----------------------------------------
      .                       (0..decoder.read_usize()).map(|_| Decodable::decode(decoder)).collect::<Vec<_>>(),
      .                   )
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for ty::List<ty::BoundVariableKind> {
      .               fn decode(decoder: &mut D) -> &'tcx Self {
      .                   let len = decoder.read_usize();
    240 ( 0.00%)          decoder.tcx().mk_bound_variable_kinds(
    162 ( 0.00%)              (0..len).map::<ty::BoundVariableKind, _>(|_| Decodable::decode(decoder)),
      .                   )
      .               }
      .           }
      .           
      .           impl_decodable_via_ref! {
      .               &'tcx ty::TypeckResults<'tcx>,
      .               &'tcx ty::List<Ty<'tcx>>,
      .               &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,
-- line 387 ----------------------------------------
-- line 394 ----------------------------------------
      .               &'tcx ty::AdtDef
      .           }
      .           
      .           #[macro_export]
      .           macro_rules! __impl_decoder_methods {
      .               ($($name:ident -> $ty:ty;)*) => {
      .                   $(
      .                       #[inline]
220,421 ( 0.07%)              fn $name(&mut self) -> $ty {
518,089 ( 0.16%)                  self.opaque.$name()
359,302 ( 0.11%)              }
      .                   )*
      .               }
      .           }
      .           
      .           macro_rules! impl_arena_allocatable_decoder {
      .               ([]$args:tt) => {};
      .               ([decode $(, $attrs:ident)*]
      .                [$name:ident: $ty:ty]) => {
-- line 412 ----------------------------------------
-- line 483 ----------------------------------------
      .               }
      .           }
      .           
      .           macro_rules! impl_binder_encode_decode {
      .               ($($t:ty),+ $(,)?) => {
      .                   $(
      .                       impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for ty::Binder<'tcx, $t> {
      .                           fn encode(&self, e: &mut E) -> Result<(), E::Error> {
     36 ( 0.00%)                      self.bound_vars().encode(e)?;
      .                               self.as_ref().skip_binder().encode(e)
      .                           }
      .                       }
      .                       impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for ty::Binder<'tcx, $t> {
    801 ( 0.00%)                  fn decode(decoder: &mut D) -> Self {
      .                               let bound_vars = Decodable::decode(decoder);
      .                               ty::Binder::bind_with_vars(Decodable::decode(decoder), bound_vars)
    801 ( 0.00%)                  }
      .                       }
      .                   )*
      .               }
      .           }
      .           
      .           impl_binder_encode_decode! {
      .               &'tcx ty::List<Ty<'tcx>>,
      .               ty::FnSig<'tcx>,
-- line 507 ----------------------------------------

 12,066 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/codec.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/operand.rs
--------------------------------------------------------------------------------
Ir               

-- line 54 ----------------------------------------
      .               pub fn from_pointer(p: Pointer<Tag>, cx: &impl HasDataLayout) -> Self {
      .                   Immediate::Scalar(ScalarMaybeUninit::from_pointer(p, cx))
      .               }
      .           
      .               pub fn from_maybe_pointer(p: Pointer<Option<Tag>>, cx: &impl HasDataLayout) -> Self {
      .                   Immediate::Scalar(ScalarMaybeUninit::from_maybe_pointer(p, cx))
      .               }
      .           
      8 ( 0.00%)      pub fn new_slice(val: Scalar<Tag>, len: u64, cx: &impl HasDataLayout) -> Self {
     18 ( 0.00%)          Immediate::ScalarPair(val.into(), Scalar::from_machine_usize(len, cx).into())
     12 ( 0.00%)      }
      .           
      .               pub fn new_dyn_trait(
      .                   val: Scalar<Tag>,
      .                   vtable: Pointer<Option<Tag>>,
      .                   cx: &impl HasDataLayout,
      .               ) -> Self {
      .                   Immediate::ScalarPair(val.into(), ScalarMaybeUninit::from_maybe_pointer(vtable, cx))
      .               }
      .           
      .               #[inline]
      .               pub fn to_scalar_or_uninit(self) -> ScalarMaybeUninit<Tag> {
     88 ( 0.00%)          match self {
    116 ( 0.00%)              Immediate::Scalar(val) => val,
      .                       Immediate::ScalarPair(..) => bug!("Got a scalar pair where a scalar was expected"),
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn to_scalar(self) -> InterpResult<'tcx, Scalar<Tag>> {
      .                   self.to_scalar_or_uninit().check_init()
      .               }
-- line 85 ----------------------------------------
-- line 159 ----------------------------------------
      .               fn deref(&self) -> &Immediate<Tag> {
      .                   &self.imm
      .               }
      .           }
      .           
      .           /// An `Operand` is the result of computing a `mir::Operand`. It can be immediate,
      .           /// or still in memory. The latter is an optimization, to delay reading that chunk of
      .           /// memory and to avoid having to store arbitrary-sized data here.
     34 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, HashStable, Hash, Debug)]
      .           pub enum Operand<Tag: Provenance = AllocId> {
      .               Immediate(Immediate<Tag>),
      .               Indirect(MemPlace<Tag>),
      .           }
      .           
      .           #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]
      .           pub struct OpTy<'tcx, Tag: Provenance = AllocId> {
      .               op: Operand<Tag>, // Keep this private; it helps enforce invariants.
-- line 175 ----------------------------------------
-- line 185 ----------------------------------------
      .               fn deref(&self) -> &Operand<Tag> {
      .                   &self.op
      .               }
      .           }
      .           
      .           impl<'tcx, Tag: Provenance> From<MPlaceTy<'tcx, Tag>> for OpTy<'tcx, Tag> {
      .               #[inline(always)]
      .               fn from(mplace: MPlaceTy<'tcx, Tag>) -> Self {
    248 ( 0.00%)          OpTy { op: Operand::Indirect(*mplace), layout: mplace.layout }
      .               }
      .           }
      .           
      .           impl<'tcx, Tag: Provenance> From<&'_ MPlaceTy<'tcx, Tag>> for OpTy<'tcx, Tag> {
      .               #[inline(always)]
      .               fn from(mplace: &MPlaceTy<'tcx, Tag>) -> Self {
      .                   OpTy { op: Operand::Indirect(**mplace), layout: mplace.layout }
      .               }
-- line 201 ----------------------------------------
-- line 248 ----------------------------------------
      .           
      .           impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {
      .               /// Try reading an immediate in memory; this is interesting particularly for `ScalarPair`.
      .               /// Returns `None` if the layout does not permit loading this as a value.
      .               fn try_read_immediate_from_mplace(
      .                   &self,
      .                   mplace: &MPlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, Option<ImmTy<'tcx, M::PointerTag>>> {
  5,674 ( 0.00%)          if mplace.layout.is_unsized() {
      .                       // Don't touch unsized
      .                       return Ok(None);
      .                   }
      .           
  5,760 ( 0.00%)          let alloc = match self.get_alloc(mplace)? {
  9,530 ( 0.00%)              Some(ptr) => ptr,
      .                       None => {
      .                           return Ok(Some(ImmTy {
      .                               // zero-sized type
    126 ( 0.00%)                      imm: Scalar::ZST.into(),
      .                               layout: mplace.layout,
      .                           }));
      .                       }
      .                   };
      .           
 15,248 ( 0.00%)          match mplace.layout.abi {
      .                       Abi::Scalar(..) => {
     43 ( 0.00%)                  let scalar = alloc.read_scalar(alloc_range(Size::ZERO, mplace.layout.size))?;
      .                           Ok(Some(ImmTy { imm: scalar.into(), layout: mplace.layout }))
      .                       }
      .                       Abi::ScalarPair(a, b) => {
      .                           // We checked `ptr_align` above, so all fields will have the alignment they need.
      .                           // We would anyway check against `ptr_align.restrict_for_offset(b_offset)`,
      .                           // which `ptr.offset(b_offset)` cannot possibly fail to satisfy.
      .                           let (a, b) = (a.value, b.value);
      .                           let (a_size, b_size) = (a.size(self), b.size(self));
-- line 282 ----------------------------------------
-- line 291 ----------------------------------------
      .               }
      .           
      .               /// Try returning an immediate for the operand.
      .               /// If the layout does not permit loading this as an immediate, return where in memory
      .               /// we can find the data.
      .               /// Note that for a given layout, this operation will either always fail or always
      .               /// succeed!  Whether it succeeds depends on whether the layout can be represented
      .               /// in an `Immediate`, not on which data is stored there currently.
 52,992 ( 0.02%)      pub fn try_read_immediate(
      .                   &self,
      .                   src: &OpTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, Result<ImmTy<'tcx, M::PointerTag>, MPlaceTy<'tcx, M::PointerTag>>> {
105,984 ( 0.03%)          Ok(match src.try_as_mplace() {
      .                       Ok(ref mplace) => {
  3,840 ( 0.00%)                  if let Some(val) = self.try_read_immediate_from_mplace(mplace)? {
      .                               Ok(val)
      .                           } else {
      .                               Err(*mplace)
      .                           }
      .                       }
 39,680 ( 0.01%)              Err(val) => Ok(val),
      .                   })
 52,992 ( 0.02%)      }
      .           
      .               /// Read an immediate from a place, asserting that that is possible with the given layout.
      .               #[inline(always)]
      .               pub fn read_immediate(
      .                   &self,
      .                   op: &OpTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, ImmTy<'tcx, M::PointerTag>> {
    286 ( 0.00%)          if let Ok(imm) = self.try_read_immediate(op)? {
    584 ( 0.00%)              Ok(imm)
      .                   } else {
      .                       span_bug!(self.cur_span(), "primitive read failed for type: {:?}", op.layout.ty);
      .                   }
      .               }
      .           
      .               /// Read a scalar from a place
    319 ( 0.00%)      pub fn read_scalar(
      .                   &self,
      .                   op: &OpTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, ScalarMaybeUninit<M::PointerTag>> {
     29 ( 0.00%)          Ok(self.read_immediate(op)?.to_scalar_or_uninit())
    261 ( 0.00%)      }
      .           
      .               /// Read a pointer from a place.
      .               pub fn read_pointer(
      .                   &self,
      .                   op: &OpTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, Pointer<Option<M::PointerTag>>> {
      .                   Ok(self.scalar_to_ptr(self.read_scalar(op)?.check_init()?))
      .               }
-- line 342 ----------------------------------------
-- line 345 ----------------------------------------
      .               pub fn read_str(&self, mplace: &MPlaceTy<'tcx, M::PointerTag>) -> InterpResult<'tcx, &str> {
      .                   let len = mplace.len(self)?;
      .                   let bytes = self.memory.read_bytes(mplace.ptr, Size::from_bytes(len))?;
      .                   let str = std::str::from_utf8(bytes).map_err(|err| err_ub!(InvalidStr(err)))?;
      .                   Ok(str)
      .               }
      .           
      .               /// Projection functions
 62,760 ( 0.02%)      pub fn operand_field(
      .                   &self,
      .                   op: &OpTy<'tcx, M::PointerTag>,
      .                   field: usize,
      .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
      .                   let base = match op.try_as_mplace() {
      .                       Ok(ref mplace) => {
      .                           // We can reuse the mplace field computation logic for indirect operands.
      .                           let field = self.mplace_field(mplace, field)?;
 69,036 ( 0.02%)                  return Ok(field.into());
      .                       }
      .                       Err(value) => value,
      .                   };
      .           
      .                   let field_layout = op.layout.field(self, field);
      .                   if field_layout.is_zst() {
      .                       let immediate = Scalar::ZST.into();
      .                       return Ok(OpTy { op: Operand::Immediate(immediate), layout: field_layout });
-- line 370 ----------------------------------------
-- line 381 ----------------------------------------
      .                       Immediate::Scalar(val) => span_bug!(
      .                           self.cur_span(),
      .                           "field access on non aggregate {:#?}, {:#?}",
      .                           val,
      .                           op.layout
      .                       ),
      .                   };
      .                   Ok(OpTy { op: Operand::Immediate(immediate), layout: field_layout })
 56,484 ( 0.02%)      }
      .           
      .               pub fn operand_index(
      .                   &self,
      .                   op: &OpTy<'tcx, M::PointerTag>,
      .                   index: u64,
      .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
      .                   if let Ok(index) = usize::try_from(index) {
      .                       // We can just treat this as a field.
-- line 397 ----------------------------------------
-- line 413 ----------------------------------------
      .                       Ok(ref mplace) => self.mplace_downcast(mplace, variant)?.into(),
      .                       Err(..) => {
      .                           let layout = op.layout.for_variant(self, variant);
      .                           OpTy { layout, ..*op }
      .                       }
      .                   })
      .               }
      .           
     12 ( 0.00%)      pub fn operand_projection(
      .                   &self,
      .                   base: &OpTy<'tcx, M::PointerTag>,
      .                   proj_elem: mir::PlaceElem<'tcx>,
      .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
      .                   use rustc_middle::mir::ProjectionElem::*;
     48 ( 0.00%)          Ok(match proj_elem {
      .                       Field(field, _) => self.operand_field(base, field.index())?,
      .                       Downcast(_, variant) => self.operand_downcast(base, variant)?,
      .                       Deref => self.deref_operand(base)?.into(),
      .                       Subslice { .. } | ConstantIndex { .. } | Index(_) => {
      .                           // The rest should only occur as mplace, we do not use Immediates for types
      .                           // allowing such operations.  This matches place_projection forcing an allocation.
      .                           let mplace = base.assert_mem_place();
     24 ( 0.00%)                  self.mplace_projection(&mplace, proj_elem)?.into()
      .                       }
      .                   })
     12 ( 0.00%)      }
      .           
      .               /// Converts a repr(simd) operand into an operand where `place_index` accesses the SIMD elements.
      .               /// Also returns the number of elements.
      .               pub fn operand_to_simd(
      .                   &self,
      .                   base: &OpTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, (MPlaceTy<'tcx, M::PointerTag>, u64)> {
      .                   // Basically we just transmute this place into an array following simd_size_and_type.
-- line 446 ----------------------------------------
-- line 449 ----------------------------------------
      .                   self.mplace_to_simd(&base.assert_mem_place())
      .               }
      .           
      .               /// Read from a local. Will not actually access the local if reading from a ZST.
      .               /// Will not access memory, instead an indirect `Operand` is returned.
      .               ///
      .               /// This is public because it is used by [priroda](https://github.com/oli-obk/priroda) to get an
      .               /// OpTy from a local
 17,934 ( 0.01%)      pub fn access_local(
      .                   &self,
      .                   frame: &super::Frame<'mir, 'tcx, M::PointerTag, M::FrameExtra>,
      .                   local: mir::Local,
      .                   layout: Option<TyAndLayout<'tcx>>,
      .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
      .                   let layout = self.layout_of_local(frame, local, layout)?;
  1,893 ( 0.00%)          let op = if layout.is_zst() {
      .                       // Do not read from ZST, they might not be initialized
     35 ( 0.00%)              Operand::Immediate(Scalar::ZST.into())
      .                   } else {
    258 ( 0.00%)              M::access_local(&self, frame, local)?
      .                   };
 25,034 ( 0.01%)          Ok(OpTy { op, layout })
 15,808 ( 0.00%)      }
      .           
      .               /// Every place can be read from, so we can turn them into an operand.
      .               /// This will definitely return `Indirect` if the place is a `Ptr`, i.e., this
      .               /// will never actually read from memory.
      .               #[inline(always)]
      .               pub fn place_to_op(
      .                   &self,
      .                   place: &PlaceTy<'tcx, M::PointerTag>,
-- line 479 ----------------------------------------
-- line 484 ----------------------------------------
      .                           *self.access_local(&self.stack()[frame], local, None)?
      .                       }
      .                   };
      .                   Ok(OpTy { op, layout: place.layout })
      .               }
      .           
      .               // Evaluate a place with the goal of reading from it.  This lets us sometimes
      .               // avoid allocations.
 15,496 ( 0.00%)      pub fn eval_place_to_op(
      .                   &self,
      .                   place: mir::Place<'tcx>,
      .                   layout: Option<TyAndLayout<'tcx>>,
      .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
      .                   // Do not use the layout passed in as argument if the base we are looking at
      .                   // here is not the entire place.
  1,937 ( 0.00%)          let layout = if place.projection.is_empty() { layout } else { None };
      .           
  5,811 ( 0.00%)          let base_op = self.access_local(self.frame(), place.local, layout)?;
      .           
      .                   let op = place
      .                       .projection
      .                       .iter()
     27 ( 0.00%)              .try_fold(base_op, |op, elem| self.operand_projection(&op, elem))?;
      .           
      .                   trace!("eval_place_to_op: got {:?}", *op);
      .                   // Sanity-check the type we ended up with.
      .                   debug_assert!(mir_assign_valid_types(
      .                       *self.tcx,
      .                       self.param_env,
      .                       self.layout_of(self.subst_from_current_frame_and_normalize_erasing_regions(
      .                           place.ty(&self.frame().body.local_decls, *self.tcx).ty
      .                       )?)?,
      .                       op.layout,
      .                   ));
  5,679 ( 0.00%)          Ok(op)
 17,433 ( 0.01%)      }
      .           
      .               /// Evaluate the operand, returning a place where you can then find the data.
      .               /// If you already know the layout, you can save two table lookups
      .               /// by passing it in here.
      .               #[inline]
 51,864 ( 0.02%)      pub fn eval_operand(
      .                   &self,
      .                   mir_op: &mir::Operand<'tcx>,
      .                   layout: Option<TyAndLayout<'tcx>>,
      .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
      .                   use rustc_middle::mir::Operand::*;
 11,688 ( 0.00%)          let op = match *mir_op {
      .                       // FIXME: do some more logic on `move` to invalidate the old location
  9,578 ( 0.00%)              Copy(place) | Move(place) => self.eval_place_to_op(place, layout)?,
      .           
      .                       Constant(ref constant) => {
      .                           let val =
 58,774 ( 0.02%)                      self.subst_from_current_frame_and_normalize_erasing_regions(constant.literal)?;
      .                           // This can still fail:
      .                           // * During ConstProp, with `TooGeneric` or since the `requried_consts` were not all
      .                           //   checked yet.
      .                           // * During CTFE, since promoteds in `const`/`static` initializer bodies can fail.
      .           
     63 ( 0.00%)                  self.mir_const_to_op(&val, layout)?
      .                       }
      .                   };
      .                   trace!("{:?}: {:?}", mir_op, *op);
 75,190 ( 0.02%)          Ok(op)
 34,578 ( 0.01%)      }
      .           
      .               /// Evaluate a bunch of operands at once
      .               pub(super) fn eval_operands(
      .                   &self,
      .                   ops: &[mir::Operand<'tcx>],
      .               ) -> InterpResult<'tcx, Vec<OpTy<'tcx, M::PointerTag>>> {
      .                   ops.iter().map(|op| self.eval_operand(op, None)).collect()
      .               }
      .           
      .               // Used when the miri-engine runs into a constant and for extracting information from constants
      .               // in patterns via the `const_eval` module
      .               /// The `val` and `layout` are assumed to already be in our interpreter
      .               /// "universe" (param_env).
 46,812 ( 0.01%)      pub fn const_to_op(
      .                   &self,
      .                   val: &ty::Const<'tcx>,
      .                   layout: Option<TyAndLayout<'tcx>>,
      .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
 19,840 ( 0.01%)          match val.val {
      .                       ty::ConstKind::Param(_) | ty::ConstKind::Bound(..) => throw_inval!(TooGeneric),
      .                       ty::ConstKind::Error(_) => throw_inval!(AlreadyReported(ErrorReported)),
      8 ( 0.00%)              ty::ConstKind::Unevaluated(uv) => {
      .                           let instance = self.resolve(uv.def, uv.substs)?;
     22 ( 0.00%)                  Ok(self.eval_to_allocation(GlobalId { instance, promoted: uv.promoted })?.into())
      .                       }
      .                       ty::ConstKind::Infer(..) | ty::ConstKind::Placeholder(..) => {
      .                           span_bug!(self.cur_span(), "const_to_op: Unexpected ConstKind {:?}", val)
      .                       }
 39,400 ( 0.01%)              ty::ConstKind::Value(val_val) => self.const_val_to_op(val_val, val.ty, layout),
      .                   }
 35,109 ( 0.01%)      }
      .           
    737 ( 0.00%)      pub fn mir_const_to_op(
      .                   &self,
      .                   val: &mir::ConstantKind<'tcx>,
      .                   layout: Option<TyAndLayout<'tcx>>,
      .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
  7,936 ( 0.00%)          match val {
 15,738 ( 0.00%)              mir::ConstantKind::Ty(ct) => self.const_to_op(ct, layout),
      .                       mir::ConstantKind::Val(val, ty) => self.const_val_to_op(*val, ty, layout),
      .                   }
    603 ( 0.00%)      }
      .           
 39,660 ( 0.01%)      crate fn const_val_to_op(
      .                   &self,
      .                   val_val: ConstValue<'tcx>,
      .                   ty: Ty<'tcx>,
      .                   layout: Option<TyAndLayout<'tcx>>,
      .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
      .                   // Other cases need layout.
      .                   let tag_scalar = |scalar| -> InterpResult<'tcx, _> {
 23,760 ( 0.01%)              Ok(match scalar {
      .                           Scalar::Ptr(ptr, size) => Scalar::Ptr(self.global_base_pointer(ptr)?, size),
 11,874 ( 0.00%)                  Scalar::Int(int) => Scalar::Int(int),
      .                       })
      .                   };
 11,781 ( 0.00%)          let layout = from_known_layout(self.tcx, self.param_env, layout, || self.layout_of(ty))?;
 11,910 ( 0.00%)          let op = match val_val {
      8 ( 0.00%)              ConstValue::ByRef { alloc, offset } => {
      8 ( 0.00%)                  let id = self.tcx.create_memory_alloc(alloc);
      .                           // We rely on mutability being set correctly in that allocation to prevent writes
      .                           // where none should happen.
      .                           let ptr = self.global_base_pointer(Pointer::new(id, offset))?;
     16 ( 0.00%)                  Operand::Indirect(MemPlace::from_ptr(ptr.into(), layout.align.abi))
      .                       }
 35,703 ( 0.01%)              ConstValue::Scalar(x) => Operand::Immediate(tag_scalar(x)?.into()),
      6 ( 0.00%)              ConstValue::Slice { data, start, end } => {
      .                           // We rely on mutability being set correctly in `data` to prevent writes
      .                           // where none should happen.
      .                           let ptr = Pointer::new(
      6 ( 0.00%)                      self.tcx.create_memory_alloc(data),
      .                               Size::from_bytes(start), // offset: `start`
      .                           );
     46 ( 0.00%)                  Operand::Immediate(Immediate::new_slice(
      .                               Scalar::from_pointer(self.global_base_pointer(ptr)?, &*self.tcx),
      .                               u64::try_from(end.checked_sub(start).unwrap()).unwrap(), // len: `end - start`
      .                               self,
      .                           ))
      .                       }
      .                   };
 83,286 ( 0.03%)          Ok(OpTy { op, layout })
 31,728 ( 0.01%)      }
      .           
      .               /// Read discriminant, return the runtime value as well as the variant index.
      .               /// Can also legally be called on non-enums (e.g. through the discriminant_value intrinsic)!
      .               pub fn read_discriminant(
      .                   &self,
      .                   op: &OpTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, (Scalar<M::PointerTag>, VariantIdx)> {
      .                   trace!("read_discriminant_value {:#?}", op.layout);
-- line 638 ----------------------------------------

145,871 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/operand.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/validity.rs
--------------------------------------------------------------------------------
Ir               

-- line 132 ----------------------------------------
      .           /// State for tracking recursive validation of references
      .           pub struct RefTracking<T, PATH = ()> {
      .               pub seen: FxHashSet<T>,
      .               pub todo: Vec<(T, PATH)>,
      .           }
      .           
      .           impl<T: Copy + Eq + Hash + std::fmt::Debug, PATH: Default> RefTracking<T, PATH> {
      .               pub fn empty() -> Self {
    128 ( 0.00%)          RefTracking { seen: FxHashSet::default(), todo: vec![] }
      .               }
    145 ( 0.00%)      pub fn new(op: T) -> Self {
      .                   let mut ref_tracking_for_consts =
    464 ( 0.00%)              RefTracking { seen: FxHashSet::default(), todo: vec![(op, PATH::default())] };
      .                   ref_tracking_for_consts.seen.insert(op);
      .                   ref_tracking_for_consts
    145 ( 0.00%)      }
      .           
      .               pub fn track(&mut self, op: T, path: impl FnOnce() -> PATH) {
     66 ( 0.00%)          if self.seen.insert(op) {
      .                       trace!("Recursing below ptr {:#?}", op);
      .                       let path = path();
      .                       // Remember to come back to this later.
     22 ( 0.00%)              self.todo.push((op, path));
      .                   }
      .               }
      .           }
      .           
      .           /// Format a path
      .           fn write_path(out: &mut String, path: &[PathElem]) {
      .               use self::PathElem::*;
      .           
-- line 162 ----------------------------------------
-- line 208 ----------------------------------------
      .               path: Vec<PathElem>,
      .               ref_tracking: Option<&'rt mut RefTracking<MPlaceTy<'tcx, M::PointerTag>, Vec<PathElem>>>,
      .               /// `None` indicates this is not validating for CTFE (but for runtime).
      .               ctfe_mode: Option<CtfeValidationMode>,
      .               ecx: &'rt InterpCx<'mir, 'tcx, M>,
      .           }
      .           
      .           impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M> {
 89,136 ( 0.03%)      fn aggregate_field_path_elem(&mut self, layout: TyAndLayout<'tcx>, field: usize) -> PathElem {
      .                   // First, check if we are projecting to a variant.
 22,284 ( 0.01%)          match layout.variants {
      .                       Variants::Multiple { tag_field, .. } => {
      .                           if tag_field == field {
      .                               return match layout.ty.kind() {
      .                                   ty::Adt(def, ..) if def.is_enum() => PathElem::EnumTag,
      .                                   ty::Generator(..) => PathElem::GeneratorTag,
      .                                   _ => bug!("non-variant type {:?}", layout.ty),
      .                               };
      .                           }
      .                       }
      .                       Variants::Single { .. } => {}
      .                   }
      .           
      .                   // Now we know we are projecting to a field, so figure out which one.
 29,712 ( 0.01%)          match layout.ty.kind() {
      .                       // generators and closures.
      .                       ty::Closure(def_id, _) | ty::Generator(def_id, _, _) => {
      .                           let mut name = None;
      .                           // FIXME this should be more descriptive i.e. CapturePlace instead of CapturedVar
      .                           // https://github.com/rust-lang/project-rfc-2229/issues/46
      .                           if let Some(local_def_id) = def_id.as_local() {
      .                               let tables = self.ecx.tcx.typeck(local_def_id);
      .                               if let Some(captured_place) =
-- line 240 ----------------------------------------
-- line 257 ----------------------------------------
      .                               sym::integer(field)
      .                           }))
      .                       }
      .           
      .                       // tuples
      .                       ty::Tuple(_) => PathElem::TupleElem(field),
      .           
      .                       // enums
 12,552 ( 0.00%)              ty::Adt(def, ..) if def.is_enum() => {
      .                           // we might be projecting *to* a variant, or to a field *in* a variant.
      .                           match layout.variants {
      .                               Variants::Single { index } => {
      .                                   // Inside a variant
      .                                   PathElem::Field(def.variants[index].fields[field].name)
      .                               }
      .                               Variants::Multiple { .. } => bug!("we handled variants above"),
      .                           }
      .                       }
      .           
      .                       // other ADTs
  6,276 ( 0.00%)              ty::Adt(def, _) => PathElem::Field(def.non_enum_variant().fields[field].name),
      .           
      .                       // arrays/slices
      .                       ty::Array(..) | ty::Slice(..) => PathElem::ArrayElem(field),
      .           
      .                       // dyn traits
      .                       ty::Dynamic(..) => PathElem::DynDowncast,
      .           
      .                       // nothing else has an aggregate layout
      .                       _ => bug!("aggregate_field_path_elem: got non-aggregate type {:?}", layout.ty),
      .                   }
 96,564 ( 0.03%)      }
      .           
      .               fn with_elem<R>(
      .                   &mut self,
      .                   elem: PathElem,
      .                   f: impl FnOnce(&mut Self) -> InterpResult<'tcx, R>,
      .               ) -> InterpResult<'tcx, R> {
      .                   // Remember the old state
 14,856 ( 0.00%)          let path_len = self.path.len();
      .                   // Record new element
      .                   self.path.push(elem);
      .                   // Perform operation
 14,856 ( 0.00%)          let r = f(self)?;
      .                   // Undo changes
      .                   self.path.truncate(path_len);
      .                   // Done
      .                   Ok(r)
      .               }
      .           
      .               fn check_wide_ptr_meta(
      .                   &mut self,
-- line 308 ----------------------------------------
-- line 365 ----------------------------------------
      .                       }
      .                       _ => bug!("Unexpected unsized type tail: {:?}", tail),
      .                   }
      .           
      .                   Ok(())
      .               }
      .           
      .               /// Check a reference or `Box`.
     22 ( 0.00%)      fn check_safe_pointer(
      .                   &mut self,
      .                   value: &OpTy<'tcx, M::PointerTag>,
      .                   kind: &str,
      .               ) -> InterpResult<'tcx> {
      6 ( 0.00%)          let value = try_validation!(
      4 ( 0.00%)              self.ecx.read_immediate(value),
      .                       self.path,
      .                       err_unsup!(ReadPointerAsBytes) => { "part of a pointer" } expected { "a proper pointer or integer value" },
      .                   );
      .                   // Handle wide pointers.
      .                   // Check metadata early, for better diagnostics
     20 ( 0.00%)          let place = try_validation!(
      6 ( 0.00%)              self.ecx.ref_to_mplace(&value),
      .                       self.path,
      .                       err_ub!(InvalidUninitBytes(None)) => { "uninitialized {}", kind },
      .                   );
      6 ( 0.00%)          if place.layout.is_unsized() {
      .                       self.check_wide_ptr_meta(place.meta, place.layout)?;
      .                   }
      .                   // Make sure this is dereferenceable and all.
      4 ( 0.00%)          let size_and_align = try_validation!(
      2 ( 0.00%)              self.ecx.size_and_align_of_mplace(&place),
      .                       self.path,
      .                       err_ub!(InvalidMeta(msg)) => { "invalid {} metadata: {}", kind, msg },
      .                   );
      .                   let (size, align) = size_and_align
      .                       // for the purpose of validity, consider foreign types to have
      .                       // alignment and size determined by the layout (size will be 0,
      .                       // alignment should take attributes into account).
      .                       .unwrap_or_else(|| (place.layout.size, place.layout.align.abi));
      .                   // Direct call to `check_ptr_access_align` checks alignment even on CTFE machines.
      .                   try_validation!(
      4 ( 0.00%)              self.ecx.memory.check_ptr_access_align(
      6 ( 0.00%)                  place.ptr,
      .                           size,
      .                           align,
      .                           CheckInAllocMsg::InboundsTest, // will anyway be replaced by validity message
      .                       ),
      .                       self.path,
      .                       err_ub!(AlignmentCheckFailed { required, has }) =>
      .                           {
      .                               "an unaligned {} (required {} byte alignment but found {})",
-- line 415 ----------------------------------------
-- line 424 ----------------------------------------
      .                       err_ub!(PointerOutOfBounds { .. }) =>
      .                           { "a dangling {} (going beyond the bounds of its allocation)", kind },
      .                       // This cannot happen during const-eval (because interning already detects
      .                       // dangling pointers), but it can happen in Miri.
      .                       err_ub!(PointerUseAfterFree(..)) =>
      .                           { "a dangling {} (use-after-free)", kind },
      .                   );
      .                   // Recursive checking
      6 ( 0.00%)          if let Some(ref mut ref_tracking) = self.ref_tracking {
      .                       // Proceed recursively even for ZST, no reason to skip them!
      .                       // `!` is a ZST and we want to validate it.
      .                       // Skip validation entirely for some external statics
      4 ( 0.00%)              if let Ok((alloc_id, _offset, _ptr)) = self.ecx.memory.ptr_try_get_alloc(place.ptr) {
      .                           // not a ZST
      6 ( 0.00%)                  let alloc_kind = self.ecx.tcx.get_global_alloc(alloc_id);
      4 ( 0.00%)                  if let Some(GlobalAlloc::Static(did)) = alloc_kind {
      .                               assert!(!self.ecx.tcx.is_thread_local_static(did));
      .                               assert!(self.ecx.tcx.is_static(did));
      .                               if matches!(
      .                                   self.ctfe_mode,
      .                                   Some(CtfeValidationMode::Const { allow_static_ptrs: false, .. })
      .                               ) {
      .                                   // See const_eval::machine::MemoryExtra::can_access_statics for why
      .                                   // this check is so important.
-- line 447 ----------------------------------------
-- line 460 ----------------------------------------
      .                               // and that static refers back to us.
      .                               // We might miss const-invalid data,
      .                               // but things are still sound otherwise (in particular re: consts
      .                               // referring to statics).
      .                               return Ok(());
      .                           }
      .                       }
      .                       let path = &self.path;
     18 ( 0.00%)              ref_tracking.track(place, || {
      .                           // We need to clone the path anyway, make sure it gets created
      .                           // with enough space for the additional `Deref`.
      8 ( 0.00%)                  let mut new_path = Vec::with_capacity(path.len() + 1);
      .                           new_path.clone_from(path);
      .                           new_path.push(PathElem::Deref);
      .                           new_path
      .                       });
      .                   }
      .                   Ok(())
     18 ( 0.00%)      }
      .           
    140 ( 0.00%)      fn read_scalar(
      .                   &self,
      .                   op: &OpTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, ScalarMaybeUninit<M::PointerTag>> {
    160 ( 0.00%)          Ok(try_validation!(
     60 ( 0.00%)              self.ecx.read_scalar(op),
      .                       self.path,
      .                       err_unsup!(ReadPointerAsBytes) => { "(potentially part of) a pointer" } expected { "plain (non-pointer) bytes" },
      .                   ))
    120 ( 0.00%)      }
      .           
      .               /// Check if this is a value of primitive type, and if yes check the validity of the value
      .               /// at that type.  Return `true` if the type is indeed primitive.
 67,158 ( 0.02%)      fn try_visit_primitive(
      .                   &mut self,
      .                   value: &OpTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, bool> {
      .                   // Go over all the primitive types
 22,386 ( 0.01%)          let ty = value.layout.ty;
 44,772 ( 0.01%)          match ty.kind() {
      .                       ty::Bool => {
     12 ( 0.00%)                  let value = self.read_scalar(value)?;
      6 ( 0.00%)                  try_validation!(
      .                               value.to_bool(),
      .                               self.path,
      .                               err_ub!(InvalidBool(..)) | err_ub!(InvalidUninitBytes(None)) =>
      .                                   { "{}", value } expected { "a boolean" },
      .                           );
      .                           Ok(true)
      .                       }
      .                       ty::Char => {
-- line 510 ----------------------------------------
-- line 513 ----------------------------------------
      .                               value.to_char(),
      .                               self.path,
      .                               err_ub!(InvalidChar(..)) | err_ub!(InvalidUninitBytes(None)) =>
      .                                   { "{}", value } expected { "a valid unicode scalar value (in `0..=0x10FFFF` but not in `0xD800..=0xDFFF`)" },
      .                           );
      .                           Ok(true)
      .                       }
      .                       ty::Float(_) | ty::Int(_) | ty::Uint(_) => {
     68 ( 0.00%)                  let value = self.read_scalar(value)?;
      .                           // NOTE: Keep this in sync with the array optimization for int/float
      .                           // types below!
      .                           if M::enforce_number_validity(self.ecx) {
      .                               // Integers/floats in CTFE: Must be scalar bits, pointers are dangerous
      .                               let is_bits = value.check_init().map_or(false, |v| v.try_to_int().is_ok());
      .                               if !is_bits {
      .                                   throw_validation_failure!(self.path,
      .                                       { "{}", value } expected { "initialized plain (non-pointer) bytes" }
-- line 529 ----------------------------------------
-- line 543 ----------------------------------------
      .                               err_unsup!(ReadPointerAsBytes) => { "part of a pointer" } expected { "a proper pointer or integer value" },
      .                           );
      .                           if place.layout.is_unsized() {
      .                               self.check_wide_ptr_meta(place.meta, place.layout)?;
      .                           }
      .                           Ok(true)
      .                       }
      .                       ty::Ref(_, ty, mutbl) => {
      6 ( 0.00%)                  if matches!(self.ctfe_mode, Some(CtfeValidationMode::Const { .. }))
      .                               && *mutbl == hir::Mutability::Mut
      .                           {
      .                               // A mutable reference inside a const? That does not seem right (except if it is
      .                               // a ZST).
      .                               let layout = self.ecx.layout_of(ty)?;
      .                               if !layout.is_zst() {
      .                                   throw_validation_failure!(self.path, { "mutable reference in a `const`" });
      .                               }
      .                           }
      6 ( 0.00%)                  self.check_safe_pointer(value, "reference")?;
      .                           Ok(true)
      .                       }
  8,456 ( 0.00%)              ty::Adt(def, ..) if def.is_box() => {
      .                           self.check_safe_pointer(value, "box")?;
      .                           Ok(true)
      .                       }
      .                       ty::FnPtr(_sig) => {
      .                           let value = try_validation!(
      .                               self.ecx.read_immediate(value),
      .                               self.path,
      .                               err_unsup!(ReadPointerAsBytes) => { "part of a pointer" } expected { "a proper pointer or integer value" },
-- line 572 ----------------------------------------
-- line 606 ----------------------------------------
      .                       | ty::Infer(..)
      .                       | ty::Placeholder(..)
      .                       | ty::Bound(..)
      .                       | ty::Param(..)
      .                       | ty::Opaque(..)
      .                       | ty::Projection(..)
      .                       | ty::GeneratorWitness(..) => bug!("Encountered invalid type {:?}", ty),
      .                   }
111,930 ( 0.04%)      }
      .           
      .               fn visit_scalar(
      .                   &mut self,
      .                   op: &OpTy<'tcx, M::PointerTag>,
      .                   scalar_layout: ScalarAbi,
      .               ) -> InterpResult<'tcx> {
      .                   if scalar_layout.valid_range.is_full_for(op.layout.size) {
      .                       // Nothing to check
-- line 622 ----------------------------------------
-- line 709 ----------------------------------------
      .           
      .               #[inline]
      .               fn visit_field(
      .                   &mut self,
      .                   old_op: &OpTy<'tcx, M::PointerTag>,
      .                   field: usize,
      .                   new_op: &OpTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx> {
 33,168 ( 0.01%)          let elem = self.aggregate_field_path_elem(old_op.layout, field);
 22,284 ( 0.01%)          self.with_elem(elem, move |this| this.visit_value(new_op))
      .               }
      .           
      .               #[inline]
      .               fn visit_variant(
      .                   &mut self,
      .                   old_op: &OpTy<'tcx, M::PointerTag>,
      .                   variant_id: VariantIdx,
      .                   new_op: &OpTy<'tcx, M::PointerTag>,
-- line 726 ----------------------------------------
-- line 745 ----------------------------------------
      .                       if !op.layout.ty.is_freeze(self.ecx.tcx.at(DUMMY_SP), self.ecx.param_env) {
      .                           throw_validation_failure!(self.path, { "`UnsafeCell` in a `const`" });
      .                       }
      .                   }
      .                   Ok(())
      .               }
      .           
      .               #[inline]
 66,852 ( 0.02%)      fn visit_value(&mut self, op: &OpTy<'tcx, M::PointerTag>) -> InterpResult<'tcx> {
      .                   trace!("visit_value: {:?}, {:?}", *op, op.layout);
      .           
      .                   // Check primitive types -- the leafs of our recursive descend.
 29,814 ( 0.01%)          if self.try_visit_primitive(op)? {
      .                       return Ok(());
      .                   }
      .                   // Sanity check: `builtin_deref` does not know any pointers that are not primitive.
 29,760 ( 0.01%)          assert!(op.layout.ty.builtin_deref(true).is_none());
      .           
      .                   // Special check preventing `UnsafeCell` in the inner part of constants
 23,336 ( 0.01%)          if let Some(def) = op.layout.ty.ty_adt_def() {
 19,026 ( 0.01%)              if matches!(self.ctfe_mode, Some(CtfeValidationMode::Const { inner: true, .. }))
 14,798 ( 0.00%)                  && Some(def.did) == self.ecx.tcx.lang_items().unsafe_cell_type()
      .                       {
      .                           throw_validation_failure!(self.path, { "`UnsafeCell` in a `const`" });
      .                       }
      .                   }
      .           
      .                   // Recursively walk the value at its type.
 37,200 ( 0.01%)          self.walk_value(op)?;
      .           
      .                   // *After* all of this, check the ABI.  We need to check the ABI to handle
      .                   // types like `NonNull` where the `Scalar` info is more restrictive than what
      .                   // the fields say (`rustc_layout_scalar_valid_range_start`).
      .                   // But in most cases, this will just propagate what the fields say,
      .                   // and then we want the error to point at the field -- so, first recurse,
      .                   // then check ABI.
      .                   //
      .                   // FIXME: We could avoid some redundant checks here. For newtypes wrapping
      .                   // scalars, we do the same check on every "level" (e.g., first we check
      .                   // MyNewtype and then the scalar in there).
 37,200 ( 0.01%)          match op.layout.abi {
      .                       Abi::Uninhabited => {
      .                           throw_validation_failure!(self.path,
      .                               { "a value of uninhabited type {:?}", op.layout.ty }
      .                           );
      .                       }
      .                       Abi::Scalar(scalar_layout) => {
      .                           self.visit_scalar(op, scalar_layout)?;
      .                       }
-- line 793 ----------------------------------------
-- line 798 ----------------------------------------
      .                           // that would make skipping them here an issue.
      .                       }
      .                       Abi::Aggregate { .. } => {
      .                           // Nothing to do.
      .                       }
      .                   }
      .           
      .                   Ok(())
 59,424 ( 0.02%)      }
      .           
      .               fn visit_aggregate(
      .                   &mut self,
      .                   op: &OpTy<'tcx, M::PointerTag>,
      .                   fields: impl Iterator<Item = InterpResult<'tcx, Self::V>>,
      .               ) -> InterpResult<'tcx> {
 66,960 ( 0.02%)          match op.layout.ty.kind() {
      .                       ty::Str => {
      .                           let mplace = op.assert_mem_place(); // strings are never immediate
      .                           let len = mplace.len(self.ecx)?;
      .                           try_validation!(
      .                               self.ecx.memory.read_bytes(mplace.ptr, Size::from_bytes(len)),
      .                               self.path,
      .                               err_ub!(InvalidUninitBytes(..)) => { "uninitialized data in `str`" },
      .                               err_unsup!(ReadPointerAsBytes) => { "a pointer in `str`" },
-- line 821 ----------------------------------------
-- line 822 ----------------------------------------
      .                           );
      .                       }
      .                       ty::Array(tys, ..) | ty::Slice(tys)
      .                           // This optimization applies for types that can hold arbitrary bytes (such as
      .                           // integer and floating point types) or for structs or tuples with no fields.
      .                           // FIXME(wesleywiser) This logic could be extended further to arbitrary structs
      .                           // or tuples made up of integer/floating point types or inhabited ZSTs with no
      .                           // padding.
 16,025 ( 0.01%)                  if matches!(tys.kind(), ty::Int(..) | ty::Uint(..) | ty::Float(..))
      .                           =>
      .                       {
      .                           // Optimized handling for arrays of integer/float type.
      .           
      .                           // Arrays cannot be immediate, slices are never immediate.
      .                           let mplace = op.assert_mem_place();
      .                           // This is the length of the array/slice.
  3,073 ( 0.00%)                  let len = mplace.len(self.ecx)?;
      .                           // This is the element type size.
 12,292 ( 0.00%)                  let layout = self.ecx.layout_of(tys)?;
      .                           // This is the size in bytes of the whole array. (This checks for overflow.)
  6,146 ( 0.00%)                  let size = layout.size * len;
      .           
      .                           // Optimization: we just check the entire range at once.
      .                           // NOTE: Keep this in sync with the handling of integer and float
      .                           // types above, in `visit_primitive`.
      .                           // In run-time mode, we accept pointers in here.  This is actually more
      .                           // permissive than a per-element check would be, e.g., we accept
      .                           // a &[u8] that contains a pointer even though bytewise checking would
      .                           // reject it.  However, that's good: We don't inherently want
      .                           // to reject those pointers, we just do not have the machinery to
      .                           // talk about parts of a pointer.
      .                           // We also accept uninit, for consistency with the slow path.
 30,730 ( 0.01%)                  let alloc = match self.ecx.memory.get(mplace.ptr, size, mplace.align)? {
 18,438 ( 0.01%)                      Some(a) => a,
      .                               None => {
      .                                   // Size 0, nothing more to check.
      .                                   return Ok(());
      .                               }
      .                           };
      .           
      .                           let allow_uninit_and_ptr = !M::enforce_number_validity(self.ecx);
 18,438 ( 0.01%)                  match alloc.check_bytes(
      .                               alloc_range(Size::ZERO, size),
      .                               allow_uninit_and_ptr,
      .                           ) {
      .                               // In the happy case, we needn't check anything else.
      .                               Ok(()) => {}
      .                               // Some error happened, try to provide a more detailed description.
      .                               Err(err) => {
      .                                   // For some errors we might be able to provide extra information.
-- line 871 ----------------------------------------
-- line 891 ----------------------------------------
      .                                       _ => return Err(err),
      .                                   }
      .                               }
      .                           }
      .                       }
      .                       // Fast path for arrays and slices of ZSTs. We only need to check a single ZST element
      .                       // of an array and not all of them, because there's only a single value of a specific
      .                       // ZST type, so either validation fails for all elements or none.
  1,188 ( 0.00%)              ty::Array(tys, ..) | ty::Slice(tys) if self.ecx.layout_of(tys)?.is_zst() => {
      .                           // Validate just the first element (if any).
      .                           self.walk_aggregate(op, fields.take(1))?
      .                       }
      .                       _ => {
      .                           self.walk_aggregate(op, fields)? // default handler
      .                       }
      .                   }
      .                   Ok(())
      .               }
      .           }
      .           
      .           impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {
    204 ( 0.00%)      fn validate_operand_internal(
      .                   &self,
      .                   op: &OpTy<'tcx, M::PointerTag>,
      .                   path: Vec<PathElem>,
      .                   ref_tracking: Option<&mut RefTracking<MPlaceTy<'tcx, M::PointerTag>, Vec<PathElem>>>,
      .                   ctfe_mode: Option<CtfeValidationMode>,
      .               ) -> InterpResult<'tcx> {
      .                   trace!("validate_operand_internal: {:?}, {:?}", *op, op.layout.ty);
      .           
      .                   // Construct a visitor
    306 ( 0.00%)          let mut visitor = ValidityVisitor { path, ref_tracking, ctfe_mode, ecx: self };
      .           
      .                   // Run it.
    102 ( 0.00%)          match visitor.visit_value(&op) {
      .                       Ok(()) => Ok(()),
      .                       // Pass through validation failures.
      .                       Err(err) if matches!(err.kind(), err_ub!(ValidationFailure { .. })) => Err(err),
      .                       // Also pass through InvalidProgram, those just indicate that we could not
      .                       // validate and each caller will know best what to do with them.
      .                       Err(err) if matches!(err.kind(), InterpError::InvalidProgram(_)) => Err(err),
      .                       // Avoid other errors as those do not show *where* in the value the issue lies.
      .                       Err(err) => {
      .                           err.print_backtrace();
      .                           bug!("Unexpected error during validation: {}", err);
      .                       }
      .                   }
    238 ( 0.00%)      }
      .           
      .               /// This function checks the data at `op` to be const-valid.
      .               /// `op` is assumed to cover valid memory if it is an indirect operand.
      .               /// It will error if the bits at the destination do not match the ones described by the layout.
      .               ///
      .               /// `ref_tracking` is used to record references that we encounter so that they
      .               /// can be checked recursively by an outside driving loop.
      .               ///
-- line 946 ----------------------------------------
-- line 950 ----------------------------------------
      .               #[inline(always)]
      .               pub fn const_validate_operand(
      .                   &self,
      .                   op: &OpTy<'tcx, M::PointerTag>,
      .                   path: Vec<PathElem>,
      .                   ref_tracking: &mut RefTracking<MPlaceTy<'tcx, M::PointerTag>, Vec<PathElem>>,
      .                   ctfe_mode: CtfeValidationMode,
      .               ) -> InterpResult<'tcx> {
    334 ( 0.00%)          self.validate_operand_internal(op, path, Some(ref_tracking), Some(ctfe_mode))
      .               }
      .           
      .               /// This function checks the data at `op` to be runtime-valid.
      .               /// `op` is assumed to cover valid memory if it is an indirect operand.
      .               /// It will error if the bits at the destination do not match the ones described by the layout.
      .               #[inline(always)]
      .               pub fn validate_operand(&self, op: &OpTy<'tcx, M::PointerTag>) -> InterpResult<'tcx> {
      .                   self.validate_operand_internal(op, vec![], None, None)
-- line 966 ----------------------------------------

152,709 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/validity.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/layout.rs
--------------------------------------------------------------------------------
Ir               

-- line 23 ----------------------------------------
      .           use std::iter;
      .           use std::num::NonZeroUsize;
      .           use std::ops::Bound;
      .           
      .           use rand::{seq::SliceRandom, SeedableRng};
      .           use rand_xoshiro::Xoshiro128StarStar;
      .           
      .           pub fn provide(providers: &mut ty::query::Providers) {
      6 ( 0.00%)      *providers =
      .                   ty::query::Providers { layout_of, fn_abi_of_fn_ptr, fn_abi_of_instance, ..*providers };
      .           }
      .           
      .           pub trait IntegerExt {
      .               fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx>, signed: bool) -> Ty<'tcx>;
      .               fn from_attr<C: HasDataLayout>(cx: &C, ity: attr::IntType) -> Integer;
      .               fn from_int_ty<C: HasDataLayout>(cx: &C, ity: ty::IntTy) -> Integer;
      .               fn from_uint_ty<C: HasDataLayout>(cx: &C, uty: ty::UintTy) -> Integer;
-- line 39 ----------------------------------------
-- line 44 ----------------------------------------
      .                   min: i128,
      .                   max: i128,
      .               ) -> (Integer, bool);
      .           }
      .           
      .           impl IntegerExt for Integer {
      .               #[inline]
      .               fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx>, signed: bool) -> Ty<'tcx> {
     12 ( 0.00%)          match (*self, signed) {
      .                       (I8, false) => tcx.types.u8,
      .                       (I16, false) => tcx.types.u16,
      .                       (I32, false) => tcx.types.u32,
      .                       (I64, false) => tcx.types.u64,
      .                       (I128, false) => tcx.types.u128,
      .                       (I8, true) => tcx.types.i8,
      .                       (I16, true) => tcx.types.i16,
      .                       (I32, true) => tcx.types.i32,
      .                       (I64, true) => tcx.types.i64,
      .                       (I128, true) => tcx.types.i128,
      .                   }
      .               }
      .           
      .               /// Gets the Integer type from an attr::IntType.
     20 ( 0.00%)      fn from_attr<C: HasDataLayout>(cx: &C, ity: attr::IntType) -> Integer {
      .                   let dl = cx.data_layout();
      .           
     50 ( 0.00%)          match ity {
      .                       attr::SignedInt(ast::IntTy::I8) | attr::UnsignedInt(ast::UintTy::U8) => I8,
      .                       attr::SignedInt(ast::IntTy::I16) | attr::UnsignedInt(ast::UintTy::U16) => I16,
      .                       attr::SignedInt(ast::IntTy::I32) | attr::UnsignedInt(ast::UintTy::U32) => I32,
      .                       attr::SignedInt(ast::IntTy::I64) | attr::UnsignedInt(ast::UintTy::U64) => I64,
      .                       attr::SignedInt(ast::IntTy::I128) | attr::UnsignedInt(ast::UintTy::U128) => I128,
      .                       attr::SignedInt(ast::IntTy::Isize) | attr::UnsignedInt(ast::UintTy::Usize) => {
     10 ( 0.00%)                  dl.ptr_sized_integer()
      .                       }
      .                   }
     20 ( 0.00%)      }
      .           
      .               fn from_int_ty<C: HasDataLayout>(cx: &C, ity: ty::IntTy) -> Integer {
      .                   match ity {
      .                       ty::IntTy::I8 => I8,
      .                       ty::IntTy::I16 => I16,
      .                       ty::IntTy::I32 => I32,
      .                       ty::IntTy::I64 => I64,
      .                       ty::IntTy::I128 => I128,
     32 ( 0.00%)              ty::IntTy::Isize => cx.data_layout().ptr_sized_integer(),
      .                   }
      .               }
      .               fn from_uint_ty<C: HasDataLayout>(cx: &C, ity: ty::UintTy) -> Integer {
      .                   match ity {
      .                       ty::UintTy::U8 => I8,
      .                       ty::UintTy::U16 => I16,
      .                       ty::UintTy::U32 => I32,
      .                       ty::UintTy::U64 => I64,
      .                       ty::UintTy::U128 => I128,
      2 ( 0.00%)              ty::UintTy::Usize => cx.data_layout().ptr_sized_integer(),
      .                   }
      .               }
      .           
      .               /// Finds the appropriate Integer type and signedness for the given
      .               /// signed discriminant range and `#[repr]` attribute.
      .               /// N.B.: `u128` values above `i128::MAX` will be treated as signed, but
      .               /// that shouldn't affect anything, other than maybe debuginfo.
     15 ( 0.00%)      fn repr_discr<'tcx>(
      .                   tcx: TyCtxt<'tcx>,
      .                   ty: Ty<'tcx>,
      .                   repr: &ReprOptions,
      .                   min: i128,
      .                   max: i128,
      .               ) -> (Integer, bool) {
      .                   // Theoretically, negative values could be larger in unsigned representation
      .                   // than the unsigned representation of the signed minimum. However, if there
      .                   // are any negative values, the only valid unsigned representation is u128
      .                   // which can fit all i128 values, so the result remains unaffected.
      .                   let unsigned_fit = Integer::fit_unsigned(cmp::max(min as u128, max as u128));
      .                   let signed_fit = cmp::max(Integer::fit_signed(min), Integer::fit_signed(max));
      .           
     15 ( 0.00%)          if let Some(ity) = repr.int {
      .                       let discr = Integer::from_attr(&tcx, ity);
      .                       let fit = if ity.is_signed() { signed_fit } else { unsigned_fit };
      .                       if discr < fit {
      .                           bug!(
      .                               "Integer::repr_discr: `#[repr]` hint too small for \
      .                                 discriminant range of enum `{}",
      .                               ty
      .                           )
      .                       }
      .                       return (discr, ity.is_signed());
      .                   }
      .           
     10 ( 0.00%)          let at_least = if repr.c() {
      .                       // This is usually I32, however it can be different on some platforms,
      .                       // notably hexagon and arm-none/thumb-none
      .                       tcx.data_layout().c_enum_min_size
      .                   } else {
      .                       // repr(Rust) enums try to be as small as possible
      .                       I8
      .                   };
      .           
      .                   // If there are no negative values, we can use the unsigned fit.
     45 ( 0.00%)          if min >= 0 {
      .                       (cmp::max(unsigned_fit, at_least), false)
      .                   } else {
      .                       (cmp::max(signed_fit, at_least), true)
      .                   }
     30 ( 0.00%)      }
      .           }
      .           
      .           pub trait PrimitiveExt {
      .               fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx>;
      .               fn to_int_ty<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx>;
      .           }
      .           
      .           impl PrimitiveExt for Primitive {
      .               #[inline]
      .               fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
     12 ( 0.00%)          match *self {
     20 ( 0.00%)              Int(i, signed) => i.to_ty(tcx, signed),
      .                       F32 => tcx.types.f32,
      .                       F64 => tcx.types.f64,
      .                       Pointer => tcx.mk_mut_ptr(tcx.mk_unit()),
      .                   }
      .               }
      .           
      .               /// Return an *integer* type matching this primitive.
      .               /// Useful in particular when dealing with enum discriminants.
-- line 169 ----------------------------------------
-- line 191 ----------------------------------------
      .           
      .           /// The maximum supported number of lanes in a SIMD vector.
      .           ///
      .           /// This value is selected based on backend support:
      .           /// * LLVM does not appear to have a vector width limit.
      .           /// * Cranelift stores the base-2 log of the lane count in a 4 bit integer.
      .           pub const MAX_SIMD_LANES: u64 = 1 << 0xF;
      .           
     13 ( 0.00%)  #[derive(Copy, Clone, Debug, HashStable, TyEncodable, TyDecodable)]
      .           pub enum LayoutError<'tcx> {
      .               Unknown(Ty<'tcx>),
      .               SizeOverflow(Ty<'tcx>),
      .               NormalizationFailure(Ty<'tcx>, NormalizationError<'tcx>),
      .           }
      .           
      .           impl<'tcx> fmt::Display for LayoutError<'tcx> {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
-- line 207 ----------------------------------------
-- line 215 ----------------------------------------
      .                           "unable to determine layout for `{}` because `{}` cannot be normalized",
      .                           t,
      .                           e.get_type_for_failure()
      .                       ),
      .                   }
      .               }
      .           }
      .           
  2,160 ( 0.00%)  #[instrument(skip(tcx, query), level = "debug")]
      .           fn layout_of<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>,
      .           ) -> Result<TyAndLayout<'tcx>, LayoutError<'tcx>> {
      .               ty::tls::with_related_context(tcx, move |icx| {
    135 ( 0.00%)          let (param_env, ty) = query.into_parts();
      .                   debug!(?ty);
      .           
    540 ( 0.00%)          if !tcx.recursion_limit().value_within_limit(icx.layout_depth) {
      .                       tcx.sess.fatal(&format!("overflow representing the type `{}`", ty));
      .                   }
      .           
      .                   // Update the ImplicitCtxt to increase the layout_depth
  1,215 ( 0.00%)          let icx = ty::tls::ImplicitCtxt { layout_depth: icx.layout_depth + 1, ..icx.clone() };
      .           
      .                   ty::tls::enter_context(&icx, |_| {
    405 ( 0.00%)              let param_env = param_env.with_reveal_all_normalized(tcx);
      .                       let unnormalized_ty = ty;
      .           
      .                       // FIXME: We might want to have two different versions of `layout_of`:
      .                       // One that can be called after typecheck has completed and can use
      .                       // `normalize_erasing_regions` here and another one that can be called
      .                       // before typecheck has completed and uses `try_normalize_erasing_regions`.
      .                       let ty = match tcx.try_normalize_erasing_regions(param_env, ty) {
      .                           Ok(t) => t,
      .                           Err(normalization_error) => {
      .                               return Err(LayoutError::NormalizationFailure(ty, normalization_error));
      .                           }
      .                       };
      .           
    135 ( 0.00%)              if ty != unnormalized_ty {
      .                           // Ensure this layout is also cached for the normalized type.
      .                           return tcx.layout_of(param_env.and(ty));
      .                       }
      .           
    520 ( 0.00%)              let cx = LayoutCx { tcx, param_env };
      .           
    390 ( 0.00%)              let layout = cx.layout_of_uncached(ty)?;
      .                       let layout = TyAndLayout { ty, layout };
      .           
      .                       cx.record_layout_for_printing(layout);
      .           
      .                       // Type-level uninhabitedness should always imply ABI uninhabitedness.
    129 ( 0.00%)              if tcx.conservative_is_privately_uninhabited(param_env.and(ty)) {
      2 ( 0.00%)                  assert!(layout.abi.is_uninhabited());
      .                       }
      .           
    387 ( 0.00%)              Ok(layout)
      .                   })
      .               })
      .           }
      .           
      .           pub struct LayoutCx<'tcx, C> {
      .               pub tcx: C,
      .               pub param_env: ty::ParamEnv<'tcx>,
      .           }
-- line 279 ----------------------------------------
-- line 291 ----------------------------------------
      .           // Invert a bijective mapping, i.e. `invert(map)[y] = x` if `map[x] = y`.
      .           // This is used to go between `memory_index` (source field order to memory order)
      .           // and `inverse_memory_index` (memory order to source field order).
      .           // See also `FieldsShape::Arbitrary::memory_index` for more details.
      .           // FIXME(eddyb) build a better abstraction for permutations, if possible.
      .           fn invert_mapping(map: &[u32]) -> Vec<u32> {
      .               let mut inverse = vec![0; map.len()];
      .               for i in 0..map.len() {
    172 ( 0.00%)          inverse[map[i] as usize] = i as u32;
      .               }
      .               inverse
      .           }
      .           
      .           impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {
     72 ( 0.00%)      fn scalar_pair(&self, a: Scalar, b: Scalar) -> Layout {
      .                   let dl = self.data_layout();
     56 ( 0.00%)          let b_align = b.value.align(dl);
     64 ( 0.00%)          let align = a.value.align(dl).max(b_align).max(dl.aggregate_align);
      .                   let b_offset = a.value.size(dl).align_to(b_align.abi);
      .                   let size = (b_offset + b.value.size(dl)).align_to(align.abi);
      .           
      .                   // HACK(nox): We iter on `b` and then `a` because `max_by_key`
      .                   // returns the last maximum.
     96 ( 0.00%)          let largest_niche = Niche::from_scalar(dl, b_offset, b)
      .                       .into_iter()
     80 ( 0.00%)              .chain(Niche::from_scalar(dl, Size::ZERO, a))
      .                       .max_by_key(|niche| niche.available(dl));
      .           
    152 ( 0.00%)          Layout {
      .                       variants: Variants::Single { index: VariantIdx::new(0) },
      .                       fields: FieldsShape::Arbitrary {
     16 ( 0.00%)                  offsets: vec![Size::ZERO, b_offset],
     16 ( 0.00%)                  memory_index: vec![0, 1],
      .                       },
    104 ( 0.00%)              abi: Abi::ScalarPair(a, b),
     80 ( 0.00%)              largest_niche,
      .                       align,
      .                       size,
      .                   }
     64 ( 0.00%)      }
      .           
    948 ( 0.00%)      fn univariant_uninterned(
      .                   &self,
      .                   ty: Ty<'tcx>,
      .                   fields: &[TyAndLayout<'_>],
      .                   repr: &ReprOptions,
      .                   kind: StructKind,
      .               ) -> Result<Layout, LayoutError<'tcx>> {
      .                   let dl = self.data_layout();
    316 ( 0.00%)          let pack = repr.pack;
     79 ( 0.00%)          if pack.is_some() && repr.align.is_some() {
      .                       self.tcx.sess.delay_span_bug(DUMMY_SP, "struct cannot be packed and aligned");
      .                       return Err(LayoutError::Unknown(ty));
      .                   }
      .           
    316 ( 0.00%)          let mut align = if pack.is_some() { dl.i8_align } else { dl.aggregate_align };
      .           
      .                   let mut inverse_memory_index: Vec<u32> = (0..fields.len() as u32).collect();
      .           
      .                   let optimize = !repr.inhibit_struct_field_reordering_opt();
     63 ( 0.00%)          if optimize {
      .                       let end =
    441 ( 0.00%)                  if let StructKind::MaybeUnsized = kind { fields.len() - 1 } else { fields.len() };
      .                       let optimizing = &mut inverse_memory_index[..end];
     63 ( 0.00%)              let field_align = |f: &TyAndLayout<'_>| {
    192 ( 0.00%)                  if let Some(pack) = pack { f.align.abi.min(pack) } else { f.align.abi }
      .                       };
      .           
      .                       // If `-Z randomize-layout` was enabled for the type definition we can shuffle
      .                       // the field ordering to try and catch some code making assumptions about layouts
      .                       // we don't guarantee
      .                       if repr.can_randomize_type_layout() {
      .                           // `ReprOptions.layout_seed` is a deterministic seed that we can use to
      .                           // randomize field ordering with
      .                           let mut rng = Xoshiro128StarStar::seed_from_u64(repr.field_shuffle_seed);
      .           
      .                           // Shuffle the ordering of the fields
      .                           optimizing.shuffle(&mut rng);
      .           
      .                       // Otherwise we just leave things alone and actually optimize the type's fields
      .                       } else {
    126 ( 0.00%)                  match kind {
      .                               StructKind::AlwaysSized | StructKind::MaybeUnsized => {
    275 ( 0.00%)                          optimizing.sort_by_key(|&x| {
      .                                       // Place ZSTs first to avoid "interesting offsets",
      .                                       // especially with only one or two non-ZST fields.
    168 ( 0.00%)                              let f = &fields[x as usize];
     24 ( 0.00%)                              (!f.is_zst(), cmp::Reverse(field_align(f)))
      .                                   });
      .                               }
      .           
      .                               StructKind::Prefixed(..) => {
      .                                   // Sort in ascending alignment so that the layout stays optimal
      .                                   // regardless of the prefix
     40 ( 0.00%)                          optimizing.sort_by_key(|&x| field_align(&fields[x as usize]));
      .                               }
      .                           }
      .           
      .                           // FIXME(Kixiron): We can always shuffle fields within a given alignment class
      .                           //                 regardless of the status of `-Z randomize-layout`
      .                       }
      .                   }
      .           
-- line 393 ----------------------------------------
-- line 399 ----------------------------------------
      .                   // produce `memory_index` (see `invert_mapping`).
      .           
      .                   let mut sized = true;
      .                   let mut offsets = vec![Size::ZERO; fields.len()];
      .                   let mut offset = Size::ZERO;
      .                   let mut largest_niche = None;
      .                   let mut largest_niche_available = 0;
      .           
    237 ( 0.00%)          if let StructKind::Prefixed(prefix_size, prefix_align) = kind {
      .                       let prefix_align =
    161 ( 0.00%)                  if let Some(pack) = pack { prefix_align.min(pack) } else { prefix_align };
      .                       align = align.max(AbiAndPrefAlign::new(prefix_align));
      .                       offset = prefix_size.align_to(prefix_align);
      .                   }
      .           
     46 ( 0.00%)          for &i in &inverse_memory_index {
    584 ( 0.00%)              let field = fields[i as usize];
     92 ( 0.00%)              if !sized {
      .                           self.tcx.sess.delay_span_bug(
      .                               DUMMY_SP,
      .                               &format!(
      .                                   "univariant: field #{} of `{}` comes after unsized field",
      .                                   offsets.len(),
      .                                   ty
      .                               ),
      .                           );
      .                       }
      .           
    230 ( 0.00%)              if field.is_unsized() {
      .                           sized = false;
      .                       }
      .           
      .                       // Invariant: offset < dl.obj_size_bound() <= 1<<61
     92 ( 0.00%)              let field_align = if let Some(pack) = pack {
      .                           field.align.min(AbiAndPrefAlign::new(pack))
      .                       } else {
    138 ( 0.00%)                  field.align
      .                       };
      .                       offset = offset.align_to(field_align.abi);
      .                       align = align.max(field_align);
      .           
      .                       debug!("univariant offset: {:?} field: {:#?}", offset, field);
     92 ( 0.00%)              offsets[i as usize] = offset;
      .           
     46 ( 0.00%)              if !repr.hide_niche() {
    255 ( 0.00%)                  if let Some(mut niche) = field.largest_niche {
      .                               let available = niche.available(dl);
     36 ( 0.00%)                      if available > largest_niche_available {
      .                                   largest_niche_available = available;
      .                                   niche.offset += offset;
     64 ( 0.00%)                          largest_niche = Some(niche);
      .                               }
      .                           }
      .                       }
      .           
     46 ( 0.00%)              offset = offset.checked_add(field.size, dl).ok_or(LayoutError::SizeOverflow(ty))?;
      .                   }
      .           
    186 ( 0.00%)          if let Some(repr_align) = repr.align {
      .                       align = align.max(AbiAndPrefAlign::new(repr_align));
      .                   }
      .           
      .                   debug!("univariant min_size: {:?}", offset);
      .                   let min_size = offset;
      .           
      .                   // As stated above, inverse_memory_index holds field indices by increasing offset.
      .                   // This makes it an already-sorted view of the offsets vec.
      .                   // To invert it, consider:
      .                   // If field 5 has offset 0, offsets[0] is 5, and memory_index[5] should be 0.
      .                   // Field 5 would be the first element, so memory_index is i:
      .                   // Note: if we didn't optimize, it's already right.
      .           
      .                   let memory_index =
    270 ( 0.00%)              if optimize { invert_mapping(&inverse_memory_index) } else { inverse_memory_index };
      .           
      .                   let size = min_size.align_to(align.abi);
    158 ( 0.00%)          let mut abi = Abi::Aggregate { sized };
      .           
      .                   // Unpack newtype ABIs and find scalar pairs.
    316 ( 0.00%)          if sized && size.bytes() > 0 {
      .                       // All other fields must be ZSTs.
      .                       let mut non_zst_fields = fields.iter().enumerate().filter(|&(_, f)| !f.is_zst());
      .           
      6 ( 0.00%)              match (non_zst_fields.next(), non_zst_fields.next(), non_zst_fields.next()) {
      .                           // We have exactly one non-ZST field.
      .                           (Some((i, field)), None, None) => {
      .                               // Field fills the struct and it has a scalar or scalar pair ABI.
    112 ( 0.00%)                      if offsets[i].bytes() == 0 && align.abi == field.align.abi && size == field.size
      .                               {
    108 ( 0.00%)                          match field.abi {
      .                                       // For plain scalars, or vectors of them, we can't unpack
      .                                       // newtypes for `#[repr(C)]`, as that affects C ABIs.
      2 ( 0.00%)                              Abi::Scalar(_) | Abi::Vector { .. } if optimize => {
      .                                           abi = field.abi;
      .                                       }
      .                                       // But scalar pairs are Rust-specific and get
      .                                       // treated as aggregates by C ABIs anyway.
      .                                       Abi::ScalarPair(..) => {
      .                                           abi = field.abi;
      .                                       }
      .                                       _ => {}
-- line 499 ----------------------------------------
-- line 503 ----------------------------------------
      .           
      .                           // Two non-ZST fields, and they're both scalars.
      .                           (
      .                               Some((i, &TyAndLayout { layout: &Layout { abi: Abi::Scalar(a), .. }, .. })),
      .                               Some((j, &TyAndLayout { layout: &Layout { abi: Abi::Scalar(b), .. }, .. })),
      .                               None,
      .                           ) => {
      .                               // Order by the memory placement, not source order.
      9 ( 0.00%)                      let ((i, a), (j, b)) =
      7 ( 0.00%)                          if offsets[i] < offsets[j] { ((i, a), (j, b)) } else { ((j, b), (i, a)) };
     11 ( 0.00%)                      let pair = self.scalar_pair(a, b);
      2 ( 0.00%)                      let pair_offsets = match pair.fields {
      2 ( 0.00%)                          FieldsShape::Arbitrary { ref offsets, ref memory_index } => {
      1 ( 0.00%)                              assert_eq!(memory_index, &[0, 1]);
      .                                       offsets
      .                                   }
      .                                   _ => bug!(),
      .                               };
      9 ( 0.00%)                      if offsets[i] == pair_offsets[0]
      1 ( 0.00%)                          && offsets[j] == pair_offsets[1]
      .                                   && align == pair.align
      .                                   && size == pair.size
      .                               {
      .                                   // We can use `ScalarPair` only when it matches our
      .                                   // already computed layout (including `#[repr(C)]`).
     14 ( 0.00%)                          abi = pair.abi;
      .                               }
      1 ( 0.00%)                  }
      .           
      .                           _ => {}
      .                       }
      .                   }
      .           
     46 ( 0.00%)          if fields.iter().any(|f| f.abi.is_uninhabited()) {
      .                       abi = Abi::Uninhabited;
      .                   }
      .           
  2,528 ( 0.00%)          Ok(Layout {
      .                       variants: Variants::Single { index: VariantIdx::new(0) },
    790 ( 0.00%)              fields: FieldsShape::Arbitrary { offsets, memory_index },
      .                       abi,
    869 ( 0.00%)              largest_niche,
      .                       align,
      .                       size,
      .                   })
    790 ( 0.00%)      }
      .           
  1,300 ( 0.00%)      fn layout_of_uncached(&self, ty: Ty<'tcx>) -> Result<&'tcx Layout, LayoutError<'tcx>> {
    260 ( 0.00%)          let tcx = self.tcx;
    130 ( 0.00%)          let param_env = self.param_env;
      .                   let dl = self.data_layout();
    144 ( 0.00%)          let scalar_unit = |value: Primitive| {
      4 ( 0.00%)              let size = value.size(dl);
    114 ( 0.00%)              assert!(size.bits() <= 128);
     65 ( 0.00%)              Scalar { value, valid_range: WrappingRange { start: 0, end: size.unsigned_int_max() } }
     14 ( 0.00%)          };
      .                   let scalar = |value: Primitive| tcx.intern_layout(Layout::scalar(self, scalar_unit(value)));
      .           
      .                   let univariant = |fields: &[TyAndLayout<'_>], repr: &ReprOptions, kind| {
    609 ( 0.00%)              Ok(tcx.intern_layout(self.univariant_uninterned(ty, fields, repr, kind)?))
      .                   };
      .                   debug_assert!(!ty.has_infer_types_or_consts());
      .           
    920 ( 0.00%)          Ok(match *ty.kind() {
      .                       // Basic scalars.
      .                       ty::Bool => tcx.intern_layout(Layout::scalar(
      .                           self,
     12 ( 0.00%)                  Scalar { value: Int(I8, false), valid_range: WrappingRange { start: 0, end: 1 } },
      .                       )),
      .                       ty::Char => tcx.intern_layout(Layout::scalar(
      .                           self,
      6 ( 0.00%)                  Scalar {
      .                               value: Int(I32, false),
      .                               valid_range: WrappingRange { start: 0, end: 0x10FFFF },
      .                           },
      .                       )),
     15 ( 0.00%)              ty::Int(ity) => scalar(Int(Integer::from_int_ty(dl, ity), true)),
     35 ( 0.00%)              ty::Uint(ity) => scalar(Int(Integer::from_uint_ty(dl, ity), false)),
      .                       ty::Float(fty) => scalar(match fty {
      .                           ty::FloatTy::F32 => F32,
      .                           ty::FloatTy::F64 => F64,
      .                       }),
      .                       ty::FnPtr(_) => {
      .                           let mut ptr = scalar_unit(Pointer);
      .                           ptr.valid_range = ptr.valid_range.with_start(1);
      6 ( 0.00%)                  tcx.intern_layout(Layout::scalar(self, ptr))
      .                       }
      .           
      .                       // The never type.
      3 ( 0.00%)              ty::Never => tcx.intern_layout(Layout {
      .                           variants: Variants::Single { index: VariantIdx::new(0) },
      .                           fields: FieldsShape::Primitive,
      .                           abi: Abi::Uninhabited,
      .                           largest_niche: None,
      1 ( 0.00%)                  align: dl.i8_align,
      .                           size: Size::ZERO,
      .                       }),
      .           
      .                       // Potentially-wide pointers.
     48 ( 0.00%)              ty::Ref(_, pointee, _) | ty::RawPtr(ty::TypeAndMut { ty: pointee, .. }) => {
      .                           let mut data_ptr = scalar_unit(Pointer);
      .                           if !ty.is_unsafe_ptr() {
      .                               data_ptr.valid_range = data_ptr.valid_range.with_start(1);
      .                           }
      .           
      .                           let pointee = tcx.normalize_erasing_regions(param_env, pointee);
    312 ( 0.00%)                  if pointee.is_sized(tcx.at(DUMMY_SP), param_env) {
    561 ( 0.00%)                      return Ok(tcx.intern_layout(Layout::scalar(self, data_ptr)));
      .                           }
      .           
     24 ( 0.00%)                  let unsized_part = tcx.struct_tail_erasing_lifetimes(pointee, param_env);
     24 ( 0.00%)                  let metadata = match unsized_part.kind() {
      .                               ty::Foreign(..) => {
      .                                   return Ok(tcx.intern_layout(Layout::scalar(self, data_ptr)));
      .                               }
     16 ( 0.00%)                      ty::Slice(_) | ty::Str => scalar_unit(Int(dl.ptr_sized_integer(), false)),
      .                               ty::Dynamic(..) => {
      8 ( 0.00%)                          let mut vtable = scalar_unit(Pointer);
      8 ( 0.00%)                          vtable.valid_range = vtable.valid_range.with_start(1);
     32 ( 0.00%)                          vtable
      .                               }
      .                               _ => return Err(LayoutError::Unknown(unsized_part)),
      .                           };
      .           
      .                           // Effectively a (ptr, meta) tuple.
    126 ( 0.00%)                  tcx.intern_layout(self.scalar_pair(data_ptr, metadata))
      .                       }
      .           
      .                       // Arrays and slices.
     36 ( 0.00%)              ty::Array(element, mut count) => {
     12 ( 0.00%)                  if count.has_projections() {
      .                               count = tcx.normalize_erasing_regions(param_env, count);
      .                               if count.has_projections() {
      .                                   return Err(LayoutError::Unknown(ty));
      .                               }
      .                           }
      .           
     48 ( 0.00%)                  let count = count.try_eval_usize(tcx, param_env).ok_or(LayoutError::Unknown(ty))?;
     60 ( 0.00%)                  let element = self.layout_of(element)?;
      .                           let size =
     60 ( 0.00%)                      element.size.checked_mul(count, dl).ok_or(LayoutError::SizeOverflow(ty))?;
      .           
      .                           let abi =
     96 ( 0.00%)                      if count != 0 && tcx.conservative_is_privately_uninhabited(param_env.and(ty)) {
      .                                   Abi::Uninhabited
      .                               } else {
      .                                   Abi::Aggregate { sized: true }
      .                               };
      .           
    132 ( 0.00%)                  let largest_niche = if count != 0 { element.largest_niche } else { None };
      .           
    264 ( 0.00%)                  tcx.intern_layout(Layout {
      .                               variants: Variants::Single { index: VariantIdx::new(0) },
     12 ( 0.00%)                      fields: FieldsShape::Array { stride: element.size, count },
      .                               abi,
      .                               largest_niche,
     12 ( 0.00%)                      align: element.align,
      .                               size,
      .                           })
      .                       }
      .                       ty::Slice(element) => {
      .                           let element = self.layout_of(element)?;
      .                           tcx.intern_layout(Layout {
      .                               variants: Variants::Single { index: VariantIdx::new(0) },
      .                               fields: FieldsShape::Array { stride: element.size, count: 0 },
      .                               abi: Abi::Aggregate { sized: false },
      .                               largest_niche: None,
      .                               align: element.align,
      .                               size: Size::ZERO,
      .                           })
      .                       }
      6 ( 0.00%)              ty::Str => tcx.intern_layout(Layout {
      .                           variants: Variants::Single { index: VariantIdx::new(0) },
      .                           fields: FieldsShape::Array { stride: Size::from_bytes(1), count: 0 },
      .                           abi: Abi::Aggregate { sized: false },
      .                           largest_niche: None,
      1 ( 0.00%)                  align: dl.i8_align,
      .                           size: Size::ZERO,
      .                       }),
      .           
      .                       // Odd unit types.
     52 ( 0.00%)              ty::FnDef(..) => univariant(&[], &ReprOptions::default(), StructKind::AlwaysSized)?,
      .                       ty::Dynamic(..) | ty::Foreign(..) => {
     26 ( 0.00%)                  let mut unit = self.univariant_uninterned(
      .                               ty,
      .                               &[],
      4 ( 0.00%)                      &ReprOptions::default(),
      .                               StructKind::AlwaysSized,
      .                           )?;
      4 ( 0.00%)                  match unit.abi {
      2 ( 0.00%)                      Abi::Aggregate { ref mut sized } => *sized = false,
      .                               _ => bug!(),
      .                           }
     14 ( 0.00%)                  tcx.intern_layout(unit)
      .                       }
      .           
      .                       ty::Generator(def_id, substs, _) => self.generator_layout(ty, def_id, substs)?,
      .           
      .                       ty::Closure(_, ref substs) => {
      .                           let tys = substs.as_closure().upvar_tys();
      .                           univariant(
      .                               &tys.map(|ty| self.layout_of(ty)).collect::<Result<Vec<_>, _>>()?,
      .                               &ReprOptions::default(),
      .                               StructKind::AlwaysSized,
      .                           )?
      .                       }
      .           
      3 ( 0.00%)              ty::Tuple(tys) => {
      .                           let kind =
      9 ( 0.00%)                      if tys.len() == 0 { StructKind::AlwaysSized } else { StructKind::MaybeUnsized };
      .           
      3 ( 0.00%)                  univariant(
      6 ( 0.00%)                      &tys.iter()
      .                                   .map(|k| self.layout_of(k.expect_ty()))
      .                                   .collect::<Result<Vec<_>, _>>()?,
      6 ( 0.00%)                      &ReprOptions::default(),
      .                               kind,
      .                           )?
      .                       }
      .           
      .                       // SIMD vector types.
     62 ( 0.00%)              ty::Adt(def, substs) if def.repr.simd() => {
      .                           if !def.is_struct() {
      .                               // Should have yielded E0517 by now.
      .                               tcx.sess.delay_span_bug(
      .                                   DUMMY_SP,
      .                                   "#[repr(simd)] was applied to an ADT that is not a struct",
      .                               );
      .                               return Err(LayoutError::Unknown(ty));
      .                           }
-- line 732 ----------------------------------------
-- line 833 ----------------------------------------
      .                               abi: Abi::Vector { element: e_abi, count: e_len },
      .                               largest_niche: e_ly.largest_niche,
      .                               size,
      .                               align,
      .                           })
      .                       }
      .           
      .                       // ADTs.
     62 ( 0.00%)              ty::Adt(def, substs) => {
      .                           // Cache the field layouts.
     62 ( 0.00%)                  let variants = def
      .                               .variants
      .                               .iter()
      .                               .map(|v| {
      .                                   v.fields
      .                                       .iter()
    335 ( 0.00%)                              .map(|field| self.layout_of(field.ty(tcx, substs)))
      .                                       .collect::<Result<Vec<_>, _>>()
      .                               })
      .                               .collect::<Result<IndexVec<VariantIdx, _>, _>>()?;
      .           
     31 ( 0.00%)                  if def.is_union() {
      .                               if def.repr.pack.is_some() && def.repr.align.is_some() {
      .                                   self.tcx.sess.delay_span_bug(
      .                                       tcx.def_span(def.did),
      .                                       "union cannot be packed and aligned",
      .                                   );
      .                                   return Err(LayoutError::Unknown(ty));
      .                               }
      .           
-- line 862 ----------------------------------------
-- line 921 ----------------------------------------
      .                           }
      .           
      .                           // A variant is absent if it's uninhabited and only has ZST fields.
      .                           // Present uninhabited variants only require space for their fields,
      .                           // but *not* an encoding of the discriminant (e.g., a tag value).
      .                           // See issue #49298 for more details on the need to leave space
      .                           // for non-ZST uninhabited data (mostly partial initialization).
      .                           let absent = |fields: &[TyAndLayout<'_>]| {
     47 ( 0.00%)                      let uninhabited = fields.iter().any(|f| f.abi.is_uninhabited());
      .                               let is_zst = fields.iter().all(|f| f.is_zst());
      8 ( 0.00%)                      uninhabited && is_zst
      8 ( 0.00%)                  };
      .                           let (present_first, present_second) = {
      .                               let mut present_variants = variants
      .                                   .iter_enumerated()
    140 ( 0.00%)                          .filter_map(|(i, v)| if absent(v) { None } else { Some(i) });
      .                               (present_variants.next(), present_variants.next())
      .                           };
     62 ( 0.00%)                  let present_first = match present_first {
      .                               Some(present_first) => present_first,
      .                               // Uninhabited because it has no variants, or only absent ones.
      1 ( 0.00%)                      None if def.is_enum() => {
      6 ( 0.00%)                          return Ok(tcx.layout_of(param_env.and(tcx.types.never))?.layout);
      .                               }
      .                               // If it's a struct, still compute a layout so that we can still compute the
      .                               // field offsets.
      .                               None => VariantIdx::new(0),
      .                           };
      .           
     30 ( 0.00%)                  let is_struct = !def.is_enum() ||
      .                               // Only one variant is present.
      5 ( 0.00%)                      (present_second.is_none() &&
      .                               // Representation optimizations are allowed.
      .                               !def.repr.inhibit_enum_layout_opt());
      .                           if is_struct {
      .                               // Struct, or univariant enum equivalent to a struct.
      .                               // (Typechecking will reject discriminant-sizing attrs.)
      .           
      .                               let v = present_first;
     25 ( 0.00%)                      let kind = if def.is_enum() || variants[v].is_empty() {
      .                                   StructKind::AlwaysSized
      .                               } else {
     72 ( 0.00%)                          let param_env = tcx.param_env(def.did);
     24 ( 0.00%)                          let last_field = def.variants[v].fields.last().unwrap();
      .                                   let always_sized =
    144 ( 0.00%)                              tcx.type_of(last_field.did).is_sized(tcx.at(DUMMY_SP), param_env);
     48 ( 0.00%)                          if !always_sized {
      .                                       StructKind::MaybeUnsized
      .                                   } else {
      .                                       StructKind::AlwaysSized
      .                                   }
      .                               };
      .           
    325 ( 0.00%)                      let mut st = self.univariant_uninterned(ty, &variants[v], &def.repr, kind)?;
    125 ( 0.00%)                      st.variants = Variants::Single { index: v };
    175 ( 0.00%)                      let (start, end) = self.tcx.layout_scalar_valid_range(def.did);
    100 ( 0.00%)                      match st.abi {
      .                                   Abi::Scalar(ref mut scalar) | Abi::ScalarPair(ref mut scalar, _) => {
      .                                       // the asserts ensure that we are not using the
      .                                       // `#[rustc_layout_scalar_valid_range(n)]`
      .                                       // attribute to widen the range of anything as that would probably
      .                                       // result in UB somewhere
      .                                       // FIXME(eddyb) the asserts are probably not needed,
      .                                       // as larger validity ranges would result in missed
      .                                       // optimizations, *not* wrongly assuming the inner
      .                                       // value is valid. e.g. unions enlarge validity ranges,
      .                                       // because the values may be uninitialized.
      3 ( 0.00%)                              if let Bound::Included(start) = start {
      .                                           // FIXME(eddyb) this might be incorrect - it doesn't
      .                                           // account for wrap-around (end < start) ranges.
      .                                           assert!(scalar.valid_range.start <= start);
      .                                           scalar.valid_range.start = start;
      .                                       }
      2 ( 0.00%)                              if let Bound::Included(end) = end {
      .                                           // FIXME(eddyb) this might be incorrect - it doesn't
      .                                           // account for wrap-around (end < start) ranges.
      .                                           assert!(scalar.valid_range.end >= end);
      .                                           scalar.valid_range.end = end;
      .                                       }
      .           
      .                                       // Update `largest_niche` if we have introduced a larger niche.
      3 ( 0.00%)                              let niche = if def.repr.hide_niche() {
      .                                           None
      .                                       } else {
     10 ( 0.00%)                                  Niche::from_scalar(dl, Size::ZERO, *scalar)
      .                                       };
      1 ( 0.00%)                              if let Some(niche) = niche {
      .                                           match st.largest_niche {
      .                                               Some(largest_niche) => {
      .                                                   // Replace the existing niche even if they're equal,
      .                                                   // because this one is at a lower offset.
      .                                                   if largest_niche.available(dl) <= niche.available(dl) {
      .                                                       st.largest_niche = Some(niche);
      .                                                   }
      .                                               }
      .                                               None => st.largest_niche = Some(niche),
      .                                           }
      .                                       }
      .                                   }
      .                                   _ => assert!(
     72 ( 0.00%)                              start == Bound::Unbounded && end == Bound::Unbounded,
      .                                       "nonscalar layout for layout_scalar_valid_range type {:?}: {:#?}",
      .                                       def,
      .                                       st,
      .                                   ),
      .                               }
      .           
    225 ( 0.00%)                      return Ok(tcx.intern_layout(st));
      .                           }
      .           
      .                           // At this point, we have handled all unions and
      .                           // structs. (We have also handled univariant enums
      .                           // that allow representation optimization.)
      .                           assert!(def.is_enum());
      .           
      .                           // The current code for niche-filling relies on variant indices
      .                           // instead of actual discriminants, so dataful enums with
      .                           // explicit discriminants (RFC #2363) would misbehave.
      .                           let no_explicit_discriminants = def
      .                               .variants
      .                               .iter_enumerated()
      .                               .all(|(i, v)| v.discr == ty::VariantDiscr::Relative(i.as_u32()));
      .           
     10 ( 0.00%)                  let mut niche_filling_layout = None;
      .           
      .                           // Niche-filling enum optimization.
     10 ( 0.00%)                  if !def.repr.inhibit_enum_layout_opt() && no_explicit_discriminants {
      .                               let mut dataful_variant = None;
      .                               let mut niche_variants = VariantIdx::MAX..=VariantIdx::new(0);
      .           
      .                               // Find one non-ZST variant.
     79 ( 0.00%)                      'variants: for (v, fields) in variants.iter_enumerated() {
     24 ( 0.00%)                          if absent(fields) {
      .                                       continue 'variants;
      .                                   }
     16 ( 0.00%)                          for f in fields {
      4 ( 0.00%)                              if !f.is_zst() {
      .                                           if dataful_variant.is_none() {
      .                                               dataful_variant = Some(v);
      .                                               continue 'variants;
      .                                           } else {
      .                                               dataful_variant = None;
      .                                               break 'variants;
      .                                           }
      .                                       }
      .                                   }
     28 ( 0.00%)                          niche_variants = *niche_variants.start().min(&v)..=v;
      .                               }
      .           
      9 ( 0.00%)                      if niche_variants.start() > niche_variants.end() {
      .                                   dataful_variant = None;
      .                               }
      .           
      .                               if let Some(i) = dataful_variant {
      5 ( 0.00%)                          let count = (niche_variants.end().as_u32()
      .                                       - niche_variants.start().as_u32()
      .                                       + 1) as u128;
      .           
      .                                   // Find the field with the largest niche
      1 ( 0.00%)                          let niche_candidate = variants[i]
      .                                       .iter()
      .                                       .enumerate()
      2 ( 0.00%)                              .filter_map(|(j, field)| Some((j, field.largest_niche?)))
      .                                       .max_by_key(|(_, niche)| niche.available(dl));
      .           
      2 ( 0.00%)                          if let Some((field_index, niche, (niche_start, niche_scalar))) =
     13 ( 0.00%)                              niche_candidate.and_then(|(field_index, niche)| {
      .                                           Some((field_index, niche, niche.reserve(self, count)?))
      .                                       })
      .                                   {
      .                                       let mut align = dl.aggregate_align;
      .                                       let st = variants
      .                                           .iter_enumerated()
      .                                           .map(|(j, v)| {
      .                                               let mut st = self.univariant_uninterned(
-- line 1095 ----------------------------------------
-- line 1151 ----------------------------------------
      .                                           largest_niche,
      .                                           size,
      .                                           align,
      .                                       });
      .                                   }
      .                               }
      .                           }
      .           
     25 ( 0.00%)                  let (mut min, mut max) = (i128::MAX, i128::MIN);
     23 ( 0.00%)                  let discr_type = def.repr.discr_type();
     15 ( 0.00%)                  let bits = Integer::from_attr(self, discr_type).size().bits();
     78 ( 0.00%)                  for (i, discr) in def.discriminants(tcx) {
      3 ( 0.00%)                      if variants[i].iter().any(|f| f.abi.is_uninhabited()) {
      .                                   continue;
      .                               }
      .                               let mut x = discr.val as i128;
     23 ( 0.00%)                      if discr_type.is_signed() {
      .                                   // sign extend the raw representation to be an i128
    437 ( 0.00%)                          x = (x << (128 - bits)) >> (128 - bits);
      .                               }
     92 ( 0.00%)                      if x < min {
     20 ( 0.00%)                          min = x;
      .                               }
     92 ( 0.00%)                      if x > max {
     69 ( 0.00%)                          max = x;
      .                               }
      .                           }
      .                           // We might have no inhabited variants, so pretend there's at least one.
      5 ( 0.00%)                  if (min, max) == (i128::MAX, i128::MIN) {
      .                               min = 0;
      .                               max = 0;
      .                           }
     25 ( 0.00%)                  assert!(min <= max, "discriminant range is {}...{}", min, max);
     45 ( 0.00%)                  let (min_ity, signed) = Integer::repr_discr(tcx, ty, &def.repr, min, max);
      .           
     10 ( 0.00%)                  let mut align = dl.aggregate_align;
      5 ( 0.00%)                  let mut size = Size::ZERO;
      .           
      .                           // We're interested in the smallest alignment, so start large.
     10 ( 0.00%)                  let mut start_align = Align::from_bytes(256).unwrap();
     25 ( 0.00%)                  assert_eq!(Integer::for_align(dl, start_align), None);
      .           
      .                           // repr(C) on an enum tells us to make a (tag, union) layout,
      .                           // so we need to grow the prefix alignment to be at least
      .                           // the alignment of the union. (This value is used both for
      .                           // determining the alignment of the overall enum, and the
      .                           // determining the alignment of the payload after the tag.)
     65 ( 0.00%)                  let mut prefix_align = min_ity.align(dl).abi;
      9 ( 0.00%)                  if def.repr.c() {
      .                               for fields in &variants {
      .                                   for field in fields {
      .                                       prefix_align = prefix_align.max(field.align.abi);
      .                                   }
      .                               }
      .                           }
      .           
      .                           // Create the set of structs that represent each variant.
     10 ( 0.00%)                  let mut layout_variants = variants
      .                               .iter_enumerated()
      .                               .map(|(i, field_layouts)| {
    437 ( 0.00%)                          let mut st = self.univariant_uninterned(
     23 ( 0.00%)                              ty,
      .                                       &field_layouts,
     46 ( 0.00%)                              &def.repr,
     92 ( 0.00%)                              StructKind::Prefixed(min_ity.size(), prefix_align),
      .                                   )?;
     69 ( 0.00%)                          st.variants = Variants::Single { index: i };
      .                                   // Find the first field we can't move later
      .                                   // to make room for a larger discriminant.
      .                                   for field in
    305 ( 0.00%)                              st.fields.index_by_increasing_offset().map(|j| field_layouts[j])
      .                                   {
      8 ( 0.00%)                              if !field.is_zst() || field.align.abi.bytes() != 1 {
      2 ( 0.00%)                                  start_align = start_align.min(field.align.abi);
      .                                           break;
      .                                       }
      .                                   }
     92 ( 0.00%)                          size = cmp::max(size, st.size);
     69 ( 0.00%)                          align = align.max(st.align);
    138 ( 0.00%)                          Ok(st)
      .                               })
      .                               .collect::<Result<IndexVec<VariantIdx, _>, _>>()?;
      .           
      .                           // Align the maximum variant size to the largest alignment.
     25 ( 0.00%)                  size = size.align_to(align.abi);
      .           
     20 ( 0.00%)                  if size.bytes() >= dl.obj_size_bound() {
      .                               return Err(LayoutError::SizeOverflow(ty));
      .                           }
      .           
     20 ( 0.00%)                  let typeck_ity = Integer::from_attr(dl, def.repr.discr_type());
     15 ( 0.00%)                  if typeck_ity < min_ity {
      .                               // It is a bug if Layout decided on a greater discriminant size than typeck for
      .                               // some reason at this point (based on values discriminant can take on). Mostly
      .                               // because this discriminant will be loaded, and then stored into variable of
      .                               // type calculated by typeck. Consider such case (a bug): typeck decided on
      .                               // byte-sized discriminant, but layout thinks we need a 16-bit to store all
      .                               // discriminant values. That would be a bug, because then, in codegen, in order
      .                               // to store this 16-bit discriminant into 8-bit sized temporary some of the
      .                               // space necessary to represent would have to be discarded (or layout is wrong
-- line 1250 ----------------------------------------
-- line 1263 ----------------------------------------
      .                           // as the alignment of the first field of each variant.
      .                           // We increase the size of the discriminant to avoid LLVM copying
      .                           // padding when it doesn't need to. This normally causes unaligned
      .                           // load/stores and excessive memcpy/memset operations. By using a
      .                           // bigger integer size, LLVM can be sure about its contents and
      .                           // won't be so conservative.
      .           
      .                           // Use the initial field alignment
     13 ( 0.00%)                  let mut ity = if def.repr.c() || def.repr.int.is_some() {
      .                               min_ity
      .                           } else {
      9 ( 0.00%)                      Integer::for_align(dl, start_align).unwrap_or(min_ity)
      .                           };
      .           
      .                           // If the alignment is not larger than the chosen discriminant size,
      .                           // don't use the alignment as the final size.
      3 ( 0.00%)                  if ity <= min_ity {
      .                               ity = min_ity;
      .                           } else {
      .                               // Patch up the variants' first few fields.
      2 ( 0.00%)                      let old_ity_size = min_ity.size();
      .                               let new_ity_size = ity.size();
      .                               for variant in &mut layout_variants {
      4 ( 0.00%)                          match variant.fields {
      .                                       FieldsShape::Arbitrary { ref mut offsets, .. } => {
      .                                           for i in offsets {
      3 ( 0.00%)                                      if *i <= old_ity_size {
      .                                                   assert_eq!(*i, old_ity_size);
      .                                                   *i = new_ity_size;
      .                                               }
      .                                           }
      .                                           // We might be making the struct larger.
      2 ( 0.00%)                                  if variant.size <= old_ity_size {
      2 ( 0.00%)                                      variant.size = new_ity_size;
      .                                           }
      .                                       }
      .                                       _ => bug!(),
      .                                   }
      .                               }
      .                           }
      .           
      5 ( 0.00%)                  let tag_mask = ity.size().unsigned_int_max();
      .                           let tag = Scalar {
      .                               value: Int(ity, signed),
      .                               valid_range: WrappingRange {
     25 ( 0.00%)                          start: (min as u128 & tag_mask),
     20 ( 0.00%)                          end: (max as u128 & tag_mask),
      .                               },
      .                           };
      .                           let mut abi = Abi::Aggregate { sized: true };
     30 ( 0.00%)                  if tag.value.size(dl) == size {
      .                               abi = Abi::Scalar(tag);
      .                           } else {
      .                               // Try to use a ScalarPair for all tagged enums.
      .                               let mut common_prim = None;
      .                               for (field_layouts, layout_variant) in iter::zip(&variants, &layout_variants) {
      4 ( 0.00%)                          let offsets = match layout_variant.fields {
      .                                       FieldsShape::Arbitrary { ref offsets, .. } => offsets,
      .                                       _ => bug!(),
      .                                   };
      .                                   let mut fields =
      .                                       iter::zip(field_layouts, offsets).filter(|p| !p.0.is_zst());
     20 ( 0.00%)                          let (field, offset) = match (fields.next(), fields.next()) {
      .                                       (None, None) => continue,
      .                                       (Some(pair), None) => pair,
      .                                       _ => {
      .                                           common_prim = None;
      .                                           break;
      .                                       }
      .                                   };
      3 ( 0.00%)                          let prim = match field.abi {
      2 ( 0.00%)                              Abi::Scalar(scalar) => scalar.value,
      .                                       _ => {
      .                                           common_prim = None;
      .                                           break;
      .                                       }
      .                                   };
      2 ( 0.00%)                          if let Some(pair) = common_prim {
      .                                       // This is pretty conservative. We could go fancier
      .                                       // by conflating things like i32 and u32, or even
      .                                       // realising that (u8, u8) could just cohabit with
      .                                       // u16 or even u32.
      .                                       if pair != (prim, offset) {
      .                                           common_prim = None;
      .                                           break;
      .                                       }
      .                                   } else {
      .                                       common_prim = Some((prim, offset));
      .                                   }
      .                               }
      2 ( 0.00%)                      if let Some((prim, offset)) = common_prim {
     17 ( 0.00%)                          let pair = self.scalar_pair(tag, scalar_unit(prim));
      2 ( 0.00%)                          let pair_offsets = match pair.fields {
      2 ( 0.00%)                              FieldsShape::Arbitrary { ref offsets, ref memory_index } => {
      1 ( 0.00%)                                  assert_eq!(memory_index, &[0, 1]);
      .                                           offsets
      .                                       }
      .                                       _ => bug!(),
      .                                   };
      6 ( 0.00%)                          if pair_offsets[0] == Size::ZERO
      2 ( 0.00%)                              && pair_offsets[1] == *offset
      1 ( 0.00%)                              && align == pair.align
      1 ( 0.00%)                              && size == pair.size
      .                                   {
      .                                       // We can use `ScalarPair` only when it matches our
      .                                       // already computed layout (including `#[repr(C)]`).
     27 ( 0.00%)                              abi = pair.abi;
      .                                   }
      1 ( 0.00%)                      }
      .                           }
      .           
      .                           if layout_variants.iter().all(|v| v.abi.is_uninhabited()) {
      .                               abi = Abi::Uninhabited;
      .                           }
      .           
     80 ( 0.00%)                  let largest_niche = Niche::from_scalar(dl, Size::ZERO, tag);
      .           
      .                           let tagged_layout = Layout {
      .                               variants: Variants::Multiple {
      .                                   tag,
      .                                   tag_encoding: TagEncoding::Direct,
      .                                   tag_field: 0,
      .                                   variants: layout_variants,
      .                               },
      .                               fields: FieldsShape::Arbitrary {
     25 ( 0.00%)                          offsets: vec![Size::ZERO],
     20 ( 0.00%)                          memory_index: vec![0],
      .                               },
      .                               largest_niche,
      .                               abi,
     10 ( 0.00%)                      align,
      5 ( 0.00%)                      size,
      .                           };
      .           
     15 ( 0.00%)                  let best_layout = match (tagged_layout, niche_filling_layout) {
      .                               (tagged_layout, Some(niche_filling_layout)) => {
      .                                   // Pick the smaller layout; otherwise,
      .                                   // pick the layout with the larger niche; otherwise,
      .                                   // pick tagged as it has simpler codegen.
      .                                   cmp::min_by_key(tagged_layout, niche_filling_layout, |layout| {
      .                                       let niche_size = layout.largest_niche.map_or(0, |n| n.available(dl));
      .                                       (layout.size, cmp::Reverse(niche_size))
      .                                   })
      .                               }
    305 ( 0.00%)                      (tagged_layout, None) => tagged_layout,
      .                           };
      .           
     45 ( 0.00%)                  tcx.intern_layout(best_layout)
     62 ( 0.00%)              }
      .           
      .                       // Types with no meaningful known layout.
      .                       ty::Projection(_) | ty::Opaque(..) => {
      .                           // NOTE(eddyb) `layout_of` query should've normalized these away,
      .                           // if that was possible, so there's no reason to try again here.
      .                           return Err(LayoutError::Unknown(ty));
      .                       }
      .           
-- line 1419 ----------------------------------------
-- line 1420 ----------------------------------------
      .                       ty::Placeholder(..) | ty::GeneratorWitness(..) | ty::Infer(_) => {
      .                           bug!("Layout::compute: unexpected type `{}`", ty)
      .                       }
      .           
      .                       ty::Bound(..) | ty::Param(_) | ty::Error(_) => {
      .                           return Err(LayoutError::Unknown(ty));
      .                       }
      .                   })
  1,040 ( 0.00%)      }
      .           }
      .           
      .           /// Overlap eligibility and variant assignment for each GeneratorSavedLocal.
      .           #[derive(Clone, Debug, PartialEq)]
      .           enum SavedLocalEligibility {
      .               Unassigned,
      .               Assigned(VariantIdx),
      .               // FIXME: Use newtype_index so we aren't wasting bytes
-- line 1436 ----------------------------------------
-- line 1755 ----------------------------------------
      .               }
      .           
      .               /// This is invoked by the `layout_of` query to record the final
      .               /// layout of each type.
      .               #[inline(always)]
      .               fn record_layout_for_printing(&self, layout: TyAndLayout<'tcx>) {
      .                   // If we are running with `-Zprint-type-sizes`, maybe record layouts
      .                   // for dumping later.
    645 ( 0.00%)          if self.tcx.sess.opts.debugging_opts.print_type_sizes {
      .                       self.record_layout_for_printing_outlined(layout)
      .                   }
      .               }
      .           
      .               fn record_layout_for_printing_outlined(&self, layout: TyAndLayout<'tcx>) {
      .                   // Ignore layouts that are done with non-empty environments or
      .                   // non-monomorphic layouts, as the user only wants to see the stuff
      .                   // resulting from the final codegen session.
-- line 1771 ----------------------------------------
-- line 2041 ----------------------------------------
      .           
      .           pub trait HasParamEnv<'tcx> {
      .               fn param_env(&self) -> ty::ParamEnv<'tcx>;
      .           }
      .           
      .           impl<'tcx> HasDataLayout for TyCtxt<'tcx> {
      .               #[inline]
      .               fn data_layout(&self) -> &TargetDataLayout {
 33,811 ( 0.01%)          &self.data_layout
      .               }
      .           }
      .           
      .           impl<'tcx> HasTargetSpec for TyCtxt<'tcx> {
      .               fn target_spec(&self) -> &Target {
      4 ( 0.00%)          &self.sess.target
      .               }
      .           }
      .           
      .           impl<'tcx> HasTyCtxt<'tcx> for TyCtxt<'tcx> {
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   *self
      .               }
-- line 2063 ----------------------------------------
-- line 2080 ----------------------------------------
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   **self
      .               }
      .           }
      .           
      .           impl<'tcx, C> HasParamEnv<'tcx> for LayoutCx<'tcx, C> {
      .               fn param_env(&self) -> ty::ParamEnv<'tcx> {
    150 ( 0.00%)          self.param_env
      .               }
      .           }
      .           
      .           impl<'tcx, T: HasDataLayout> HasDataLayout for LayoutCx<'tcx, T> {
      .               fn data_layout(&self) -> &TargetDataLayout {
      .                   self.tcx.data_layout()
      .               }
      .           }
-- line 2096 ----------------------------------------
-- line 2098 ----------------------------------------
      .           impl<'tcx, T: HasTargetSpec> HasTargetSpec for LayoutCx<'tcx, T> {
      .               fn target_spec(&self) -> &Target {
      .                   self.tcx.target_spec()
      .               }
      .           }
      .           
      .           impl<'tcx, T: HasTyCtxt<'tcx>> HasTyCtxt<'tcx> for LayoutCx<'tcx, T> {
      .               fn tcx(&self) -> TyCtxt<'tcx> {
    196 ( 0.00%)          self.tcx.tcx()
      .               }
      .           }
      .           
      .           pub trait MaybeResult<T> {
      .               type Error;
      .           
      .               fn from(x: Result<T, Self::Error>) -> Self;
      .               fn to_result(self) -> Result<T, Self::Error>;
-- line 2114 ----------------------------------------
-- line 2124 ----------------------------------------
      .                   Ok(self)
      .               }
      .           }
      .           
      .           impl<T, E> MaybeResult<T> for Result<T, E> {
      .               type Error = E;
      .           
      .               fn from(x: Result<T, Self::Error>) -> Self {
 29,022 ( 0.01%)          x
      .               }
      .               fn to_result(self) -> Result<T, Self::Error> {
      .                   self
      .               }
      .           }
      .           
      .           pub type TyAndLayout<'tcx> = rustc_target::abi::TyAndLayout<'tcx, Ty<'tcx>>;
      .           
-- line 2140 ----------------------------------------
-- line 2167 ----------------------------------------
      .               ) -> <Self::LayoutOfResult as MaybeResult<TyAndLayout<'tcx>>>::Error;
      .           }
      .           
      .           /// Blanket extension trait for contexts that can compute layouts of types.
      .           pub trait LayoutOf<'tcx>: LayoutOfHelpers<'tcx> {
      .               /// Computes the layout of a type. Note that this implicitly
      .               /// executes in "reveal all" mode, and will normalize the input type.
      .               #[inline]
 76,909 ( 0.02%)      fn layout_of(&self, ty: Ty<'tcx>) -> Self::LayoutOfResult {
    584 ( 0.00%)          self.spanned_layout_of(ty, DUMMY_SP)
 76,856 ( 0.02%)      }
      .           
      .               /// Computes the layout of a type, at `span`. Note that this implicitly
      .               /// executes in "reveal all" mode, and will normalize the input type.
      .               // FIXME(eddyb) avoid passing information like this, and instead add more
      .               // `TyCtxt::at`-like APIs to be able to do e.g. `cx.at(span).layout_of(ty)`.
      .               #[inline]
  3,822 ( 0.00%)      fn spanned_layout_of(&self, ty: Ty<'tcx>, span: Span) -> Self::LayoutOfResult {
    294 ( 0.00%)          let span = if !span.is_dummy() { span } else { self.layout_tcx_at_span() };
    499 ( 0.00%)          let tcx = self.tcx().at(span);
      .           
      .                   MaybeResult::from(
      .                       tcx.layout_of(self.param_env().and(ty))
      .                           .map_err(|err| self.handle_layout_err(err, span, ty)),
      .                   )
  2,352 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx, C: LayoutOfHelpers<'tcx>> LayoutOf<'tcx> for C {}
      .           
      .           impl<'tcx> LayoutOfHelpers<'tcx> for LayoutCx<'tcx, TyCtxt<'tcx>> {
      .               type LayoutOfResult = Result<TyAndLayout<'tcx>, LayoutError<'tcx>>;
      .           
      .               #[inline]
-- line 2200 ----------------------------------------
-- line 2216 ----------------------------------------
      .                   err
      .               }
      .           }
      .           
      .           impl<'tcx, C> TyAbiInterface<'tcx, C> for Ty<'tcx>
      .           where
      .               C: HasTyCtxt<'tcx> + HasParamEnv<'tcx>,
      .           {
     40 ( 0.00%)      fn ty_and_layout_for_variant(
      .                   this: TyAndLayout<'tcx>,
      .                   cx: &C,
      .                   variant_index: VariantIdx,
      .               ) -> TyAndLayout<'tcx> {
      8 ( 0.00%)          let layout = match this.variants {
      .                       Variants::Single { index }
      .                           // If all variants but one are uninhabited, the variant layout is the enum layout.
      .                           if index == variant_index &&
      .                           // Don't confuse variants of uninhabited enums with the enum itself.
      .                           // For more details see https://github.com/rust-lang/rust/issues/69763.
      .                           this.fields != FieldsShape::Primitive =>
      .                       {
      .                           this.layout
-- line 2237 ----------------------------------------
-- line 2263 ----------------------------------------
      .                               align: tcx.data_layout.i8_align,
      .                               size: Size::ZERO,
      .                           })
      .                       }
      .           
      .                       Variants::Multiple { ref variants, .. } => &variants[variant_index],
      .                   };
      .           
     32 ( 0.00%)          assert_eq!(layout.variants, Variants::Single { index: variant_index });
      .           
      .                   TyAndLayout { ty: this.ty, layout }
     40 ( 0.00%)      }
      .           
372,495 ( 0.12%)      fn ty_and_layout_field(this: TyAndLayout<'tcx>, cx: &C, i: usize) -> TyAndLayout<'tcx> {
      .                   enum TyMaybeWithLayout<'tcx> {
      .                       Ty(Ty<'tcx>),
      .                       TyAndLayout(TyAndLayout<'tcx>),
      .                   }
      .           
299,128 ( 0.09%)          fn field_ty_or_layout<'tcx>(
      .                       this: TyAndLayout<'tcx>,
      .                       cx: &(impl HasTyCtxt<'tcx> + HasParamEnv<'tcx>),
      .                       i: usize,
      .                   ) -> TyMaybeWithLayout<'tcx> {
      .                       let tcx = cx.tcx();
      .                       let tag_layout = |tag: Scalar| -> TyAndLayout<'tcx> {
      .                           let layout = Layout::scalar(cx, tag);
      .                           TyAndLayout { layout: tcx.intern_layout(layout), ty: tag.value.to_ty(tcx) }
      .                       };
      .           
 74,550 ( 0.02%)              match *this.ty.kind() {
      .                           ty::Bool
      .                           | ty::Char
      .                           | ty::Int(_)
      .                           | ty::Uint(_)
      .                           | ty::Float(_)
      .                           | ty::FnPtr(_)
      .                           | ty::Never
      .                           | ty::FnDef(..)
      .                           | ty::GeneratorWitness(..)
      .                           | ty::Foreign(..)
      .                           | ty::Dynamic(..) => bug!("TyAndLayout::field({:?}): not applicable", this),
      .           
      .                           // Potentially-fat pointers.
      .                           ty::Ref(_, pointee, _) | ty::RawPtr(ty::TypeAndMut { ty: pointee, .. }) => {
     40 ( 0.00%)                      assert!(i < this.fields.count());
      .           
      .                               // Reuse the fat `*T` type as its own thin pointer data field.
      .                               // This provides information about, e.g., DST struct pointees
      .                               // (which may have no non-DST form), and will work as long
      .                               // as the `Abi` or `FieldsShape` is checked by users.
     40 ( 0.00%)                      if i == 0 {
      .                                   let nil = tcx.mk_unit();
     10 ( 0.00%)                          let unit_ptr_ty = if this.ty.is_unsafe_ptr() {
      .                                       tcx.mk_mut_ptr(nil)
      .                                   } else {
      8 ( 0.00%)                              tcx.mk_mut_ref(tcx.lifetimes.re_static, nil)
      .                                   };
      .           
      .                                   // NOTE(eddyb) using an empty `ParamEnv`, and `unwrap`-ing
      .                                   // the `Result` should always work because the type is
      .                                   // always either `*mut ()` or `&'static mut ()`.
     31 ( 0.00%)                          return TyMaybeWithLayout::TyAndLayout(TyAndLayout {
      .                                       ty: this.ty,
      .                                       ..tcx.layout_of(ty::ParamEnv::reveal_all().and(unit_ptr_ty)).unwrap()
      .                                   });
      .                               }
      .           
     86 ( 0.00%)                      match tcx.struct_tail_erasing_lifetimes(pointee, cx.param_env()).kind() {
      4 ( 0.00%)                          ty::Slice(_) | ty::Str => TyMaybeWithLayout::Ty(tcx.types.usize),
      .                                   ty::Dynamic(_, _) => {
      .                                       TyMaybeWithLayout::Ty(tcx.mk_imm_ref(
      8 ( 0.00%)                                  tcx.lifetimes.re_static,
     25 ( 0.00%)                                  tcx.mk_array(tcx.types.usize, 3),
      .                                       ))
      .                                       /* FIXME: use actual fn pointers
      .                                       Warning: naively computing the number of entries in the
      .                                       vtable by counting the methods on the trait + methods on
      .                                       all parent traits does not work, because some methods can
      .                                       be not object safe and thus excluded from the vtable.
      .                                       Increase this counter if you tried to implement this but
      .                                       failed to do it without duplicating a lot of code from
-- line 2344 ----------------------------------------
-- line 2350 ----------------------------------------
      .                                       */
      .                                   }
      .                                   _ => bug!("TyAndLayout::field({:?}): not applicable", this),
      .                               }
      .                           }
      .           
      .                           // Arrays and slices.
      .                           ty::Array(element, _) | ty::Slice(element) => TyMaybeWithLayout::Ty(element),
      2 ( 0.00%)                  ty::Str => TyMaybeWithLayout::Ty(tcx.types.u8),
      .           
      .                           // Tuples, generators and closures.
      .                           ty::Closure(_, ref substs) => field_ty_or_layout(
      .                               TyAndLayout { ty: substs.as_closure().tupled_upvars_ty(), ..this },
      .                               cx,
      .                               i,
      .                           ),
      .           
-- line 2366 ----------------------------------------
-- line 2377 ----------------------------------------
      .                               Variants::Multiple { tag, tag_field, .. } => {
      .                                   if i == tag_field {
      .                                       return TyMaybeWithLayout::TyAndLayout(tag_layout(tag));
      .                                   }
      .                                   TyMaybeWithLayout::Ty(substs.as_generator().prefix_tys().nth(i).unwrap())
      .                               }
      .                           },
      .           
     36 ( 0.00%)                  ty::Tuple(tys) => TyMaybeWithLayout::Ty(tys[i].expect_ty()),
      .           
      .                           // ADTs.
 14,230 ( 0.00%)                  ty::Adt(def, substs) => {
 28,460 ( 0.01%)                      match this.variants {
 14,230 ( 0.00%)                          Variants::Single { index } => {
 56,920 ( 0.02%)                              TyMaybeWithLayout::Ty(def.variants[index].fields[i].ty(tcx, substs))
      .                                   }
      .           
      .                                   // Discriminant field for enums (where applicable).
      .                                   Variants::Multiple { tag, .. } => {
      .                                       assert_eq!(i, 0);
      .                                       return TyMaybeWithLayout::TyAndLayout(tag_layout(tag));
      .                                   }
      .                               }
-- line 2399 ----------------------------------------
-- line 2402 ----------------------------------------
      .                           ty::Projection(_)
      .                           | ty::Bound(..)
      .                           | ty::Placeholder(..)
      .                           | ty::Opaque(..)
      .                           | ty::Param(_)
      .                           | ty::Infer(_)
      .                           | ty::Error(_) => bug!("TyAndLayout::field: unexpected type `{}`", this.ty),
      .                       }
223,650 ( 0.07%)          }
      .           
 99,400 ( 0.03%)          match field_ty_or_layout(this, cx, i) {
 49,680 ( 0.02%)              TyMaybeWithLayout::Ty(field_ty) => {
    125 ( 0.00%)                  cx.tcx().layout_of(cx.param_env().and(field_ty)).unwrap_or_else(|e| {
      .                               bug!(
      .                                   "failed to get layout for `{}`: {},\n\
      .                                    despite it being a field (#{}) of an existing layout: {:#?}",
      .                                   field_ty,
      .                                   e,
      .                                   i,
      .                                   this
      .                               )
      .                           })
      .                       }
     30 ( 0.00%)              TyMaybeWithLayout::TyAndLayout(field_layout) => field_layout,
      .                   }
198,664 ( 0.06%)      }
      .           
    494 ( 0.00%)      fn ty_and_layout_pointee_info_at(
      .                   this: TyAndLayout<'tcx>,
      .                   cx: &C,
      .                   offset: Size,
      .               ) -> Option<PointeeInfo> {
      4 ( 0.00%)          let tcx = cx.tcx();
      .                   let param_env = cx.param_env();
      .           
      .                   let addr_space_of_ty = |ty: Ty<'tcx>| {
     46 ( 0.00%)              if ty.is_fn() { cx.data_layout().instruction_address_space } else { AddressSpace::DATA }
      .                   };
      .           
    235 ( 0.00%)          let pointee_info = match *this.ty.kind() {
     21 ( 0.00%)              ty::RawPtr(mt) if offset.bytes() == 0 => {
      .                           tcx.layout_of(param_env.and(mt.ty)).ok().map(|layout| PointeeInfo {
      7 ( 0.00%)                      size: layout.size,
      7 ( 0.00%)                      align: layout.align.abi,
      .                               safe: None,
      7 ( 0.00%)                      address_space: addr_space_of_ty(mt.ty),
     35 ( 0.00%)                  })
      .                       }
      4 ( 0.00%)              ty::FnPtr(fn_sig) if offset.bytes() == 0 => {
      .                           tcx.layout_of(param_env.and(tcx.mk_fn_ptr(fn_sig))).ok().map(|layout| PointeeInfo {
      .                               size: layout.size,
      .                               align: layout.align.abi,
      .                               safe: None,
      .                               address_space: cx.data_layout().instruction_address_space,
      .                           })
      .                       }
    119 ( 0.00%)              ty::Ref(_, ty, mt) if offset.bytes() == 0 => {
     39 ( 0.00%)                  let address_space = addr_space_of_ty(ty);
     78 ( 0.00%)                  let kind = if tcx.sess.opts.optimize == OptLevel::No {
      .                               // Use conservative pointer kind if not optimizing. This saves us the
      .                               // Freeze/Unpin queries, and can save time in the codegen backend (noalias
      .                               // attributes in LLVM have compile-time cost even in unoptimized builds).
      .                               PointerKind::Shared
      .                           } else {
      .                               match mt {
      .                                   hir::Mutability::Not => {
      .                                       if ty.is_freeze(tcx.at(DUMMY_SP), cx.param_env()) {
-- line 2468 ----------------------------------------
-- line 2481 ----------------------------------------
      .                                       } else {
      .                                           PointerKind::Shared
      .                                       }
      .                                   }
      .                               }
      .                           };
      .           
      .                           tcx.layout_of(param_env.and(ty)).ok().map(|layout| PointeeInfo {
     39 ( 0.00%)                      size: layout.size,
      .                               align: layout.align.abi,
      .                               safe: Some(kind),
      .                               address_space,
    273 ( 0.00%)                  })
      .                       }
      .           
      .                       _ => {
      6 ( 0.00%)                  let mut data_variant = match this.variants {
      .                               // Within the discriminant field, only the niche itself is
      .                               // always initialized, so we only check for a pointer at its
      .                               // offset.
      .                               //
      .                               // If the niche is a pointer, it's either valid (according
      .                               // to its type), or null (which the niche field's scalar
      .                               // validity range encodes).  This allows using
      .                               // `dereferenceable_or_null` for e.g., `Option<&T>`, and
-- line 2505 ----------------------------------------
-- line 2513 ----------------------------------------
      .                               } if this.fields.offset(tag_field) == offset => {
      .                                   Some(this.for_variant(cx, dataful_variant))
      .                               }
      .                               _ => Some(this),
      .                           };
      .           
      .                           if let Some(variant) = data_variant {
      .                               // We're not interested in any unions.
      9 ( 0.00%)                      if let FieldsShape::Union(_) = variant.fields {
      .                                   data_variant = None;
      .                               }
      .                           }
      .           
      .                           let mut result = None;
      .           
      .                           if let Some(variant) = data_variant {
      .                               let ptr_end = offset + Pointer.size(cx);
      .                               for i in 0..variant.fields.count() {
      .                                   let field_start = variant.fields.offset(i);
     25 ( 0.00%)                          if field_start <= offset {
      .                                       let field = variant.field(cx, i);
      .                                       result = field.to_result().ok().and_then(|field| {
      8 ( 0.00%)                                  if ptr_end <= field_start + field.size {
      .                                               // We found the right field, look inside it.
      .                                               let field_info =
     12 ( 0.00%)                                          field.pointee_info_at(cx, offset - field_start);
      .                                               field_info
      .                                           } else {
      .                                               None
      .                                           }
      .                                       });
      3 ( 0.00%)                              if result.is_some() {
      .                                           break;
      .                                       }
      .                                   }
      .                               }
      .                           }
      .           
      .                           // FIXME(eddyb) This should be for `ptr::Unique<T>`, not `Box<T>`.
      .                           if let Some(ref mut pointee) = result {
      6 ( 0.00%)                      if let ty::Adt(def, _) = this.ty.kind() {
      .                                   if def.is_box() && offset.bytes() == 0 {
      .                                       pointee.safe = Some(PointerKind::UniqueOwned);
      .                                   }
      .                               }
      .                           }
      .           
      .                           result
      .                       }
-- line 2561 ----------------------------------------
-- line 2564 ----------------------------------------
      .                   debug!(
      .                       "pointee_info_at (offset={:?}, type kind: {:?}) => {:?}",
      .                       offset,
      .                       this.ty.kind(),
      .                       pointee_info
      .                   );
      .           
      .                   pointee_info
    784 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> ty::Instance<'tcx> {
      .               // NOTE(eddyb) this is private to avoid using it from outside of
      .               // `fn_abi_of_instance` - any other uses are either too high-level
      .               // for `Instance` (e.g. typeck would use `Ty::fn_sig` instead),
      .               // or should go through `FnAbi` instead, to avoid losing any
      .               // adjustments `fn_abi_of_instance` might be performing.
    440 ( 0.00%)      fn fn_sig_for_fn_abi(
      .                   &self,
      .                   tcx: TyCtxt<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .               ) -> ty::PolyFnSig<'tcx> {
    240 ( 0.00%)          let ty = self.ty(tcx, param_env);
    120 ( 0.00%)          match *ty.kind() {
      .                       ty::FnDef(..) => {
      .                           // HACK(davidtwco,eddyb): This is a workaround for polymorphization considering
      .                           // parameters unused if they show up in the signature, but not in the `mir::Body`
      .                           // (i.e. due to being inside a projection that got normalized, see
      .                           // `src/test/ui/polymorphization/normalized_sig_types.rs`), and codegen not keeping
      .                           // track of a polymorphization `ParamEnv` to allow normalizing later.
     80 ( 0.00%)                  let mut sig = match *ty.kind() {
    280 ( 0.00%)                      ty::FnDef(def_id, substs) => tcx
      .                                   .normalize_erasing_regions(tcx.param_env(def_id), tcx.fn_sig(def_id))
      .                                   .subst(tcx, substs),
      .                               _ => unreachable!(),
      .                           };
      .           
     80 ( 0.00%)                  if let ty::InstanceDef::VtableShim(..) = self.def {
      .                               // Modify `fn(self, ...)` to `fn(self: *mut Self, ...)`.
      .                               sig = sig.map_bound(|mut sig| {
      .                                   let mut inputs_and_output = sig.inputs_and_output.to_vec();
      .                                   inputs_and_output[0] = tcx.mk_mut_ptr(inputs_and_output[0]);
      .                                   sig.inputs_and_output = tcx.intern_type_list(&inputs_and_output);
      .                                   sig
      .                               });
      .                           }
    320 ( 0.00%)                  sig
      .                       }
      .                       ty::Closure(def_id, substs) => {
      .                           let sig = substs.as_closure().sig();
      .           
      .                           let bound_vars = tcx.mk_bound_variable_kinds(
      .                               sig.bound_vars()
      .                                   .iter()
      .                                   .chain(iter::once(ty::BoundVariableKind::Region(ty::BrEnv))),
-- line 2618 ----------------------------------------
-- line 2669 ----------------------------------------
      .                                   hir::Unsafety::Normal,
      .                                   rustc_target::spec::abi::Abi::Rust,
      .                               ),
      .                               bound_vars,
      .                           )
      .                       }
      .                       _ => bug!("unexpected type {:?} in Instance::fn_sig", ty),
      .                   }
    360 ( 0.00%)      }
      .           }
      .           
      .           /// Calculates whether a function's ABI can unwind or not.
      .           ///
      .           /// This takes two primary parameters:
      .           ///
      .           /// * `codegen_fn_attr_flags` - these are flags calculated as part of the
      .           ///   codegen attrs for a defined function. For function pointers this set of
-- line 2685 ----------------------------------------
-- line 2725 ----------------------------------------
      .           /// might (from a foreign exception or similar).
      .           #[inline]
      .           pub fn fn_can_unwind<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               codegen_fn_attr_flags: CodegenFnAttrFlags,
      .               abi: SpecAbi,
      .           ) -> bool {
      .               // Special attribute for functions which can't unwind.
    113 ( 0.00%)      if codegen_fn_attr_flags.contains(CodegenFnAttrFlags::NEVER_UNWIND) {
      .                   return false;
      .               }
      .           
      .               // Otherwise if this isn't special then unwinding is generally determined by
      .               // the ABI of the itself. ABIs like `C` have variants which also
      .               // specifically allow unwinding (`C-unwind`), but not all platform-specific
      .               // ABIs have such an option. Otherwise the only other thing here is Rust
      .               // itself, and those ABIs are determined by the panic strategy configured
-- line 2741 ----------------------------------------
-- line 2767 ----------------------------------------
      .               // to `panic=abort`).
      .               //
      .               // Eventually the check against `c_unwind` here will ideally get removed and
      .               // this'll be a little cleaner as it'll be a straightforward check of the
      .               // ABI.
      .               //
      .               // [rfc]: https://github.com/rust-lang/rfcs/blob/master/text/2945-c-unwind-abi.md
      .               use SpecAbi::*;
    288 ( 0.00%)      match abi {
      .                   C { unwind } | Stdcall { unwind } | System { unwind } | Thiscall { unwind } => {
      4 ( 0.00%)              unwind
      8 ( 0.00%)                  || (!tcx.features().c_unwind && tcx.sess.panic_strategy() == PanicStrategy::Unwind)
      .                   }
      .                   Cdecl
      .                   | Fastcall
      .                   | Vectorcall
      .                   | Aapcs
      .                   | Win64
      .                   | SysV64
      .                   | PtxKernel
-- line 2786 ----------------------------------------
-- line 2797 ----------------------------------------
      .                   | Unadjusted => false,
      .                   Rust | RustCall => tcx.sess.panic_strategy() == PanicStrategy::Unwind,
      .               }
      .           }
      .           
      .           #[inline]
      .           pub fn conv_from_spec_abi(tcx: TyCtxt<'_>, abi: SpecAbi) -> Conv {
      .               use rustc_target::spec::abi::Abi::*;
    410 ( 0.00%)      match tcx.sess.target.adjust_abi(abi) {
      .                   RustIntrinsic | PlatformIntrinsic | Rust | RustCall => Conv::Rust,
      .           
      .                   // It's the ABI's job to select this, not ours.
      .                   System { .. } => bug!("system abi should be selected elsewhere"),
      .                   EfiApi => bug!("eficall abi should be selected elsewhere"),
      .           
      .                   Stdcall { .. } => Conv::X86Stdcall,
      .                   Fastcall => Conv::X86Fastcall,
-- line 2813 ----------------------------------------
-- line 2901 ----------------------------------------
      .               /// instead, where the instance is an `InstanceDef::Virtual`.
      .               #[inline]
      .               fn fn_abi_of_fn_ptr(
      .                   &self,
      .                   sig: ty::PolyFnSig<'tcx>,
      .                   extra_args: &'tcx ty::List<Ty<'tcx>>,
      .               ) -> Self::FnAbiOfResult {
      .                   // FIXME(eddyb) get a better `span` here.
      2 ( 0.00%)          let span = self.layout_tcx_at_span();
      2 ( 0.00%)          let tcx = self.tcx().at(span);
      .           
      .                   MaybeResult::from(tcx.fn_abi_of_fn_ptr(self.param_env().and((sig, extra_args))).map_err(
      .                       |err| self.handle_fn_abi_err(err, span, FnAbiRequest::OfFnPtr { sig, extra_args }),
      .                   ))
      .               }
      .           
      .               /// Compute a `FnAbi` suitable for declaring/defining an `fn` instance, and for
      .               /// direct calls to an `fn`.
      .               ///
      .               /// NB: that includes virtual calls, which are represented by "direct calls"
      .               /// to an `InstanceDef::Virtual` instance (of `<dyn Trait as Trait>::fn`).
      .               #[inline]
    248 ( 0.00%)      fn fn_abi_of_instance(
      .                   &self,
      .                   instance: ty::Instance<'tcx>,
      .                   extra_args: &'tcx ty::List<Ty<'tcx>>,
      .               ) -> Self::FnAbiOfResult {
      .                   // FIXME(eddyb) get a better `span` here.
    134 ( 0.00%)          let span = self.layout_tcx_at_span();
    278 ( 0.00%)          let tcx = self.tcx().at(span);
      .           
      .                   MaybeResult::from(
    618 ( 0.00%)              tcx.fn_abi_of_instance(self.param_env().and((instance, extra_args))).map_err(|err| {
      .                           // HACK(eddyb) at least for definitions of/calls to `Instance`s,
      .                           // we can get some kind of span even if one wasn't provided.
      .                           // However, we don't do this early in order to avoid calling
      .                           // `def_span` unconditionally (which may have a perf penalty).
      .                           let span = if !span.is_dummy() { span } else { tcx.def_span(instance.def_id()) };
      .                           self.handle_fn_abi_err(err, span, FnAbiRequest::OfInstance { instance, extra_args })
      .                       }),
      .                   )
    248 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx, C: FnAbiOfHelpers<'tcx>> FnAbiOf<'tcx> for C {}
      .           
      3 ( 0.00%)  fn fn_abi_of_fn_ptr<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               query: ty::ParamEnvAnd<'tcx, (ty::PolyFnSig<'tcx>, &'tcx ty::List<Ty<'tcx>>)>,
      .           ) -> Result<&'tcx FnAbi<'tcx, Ty<'tcx>>, FnAbiError<'tcx>> {
      2 ( 0.00%)      let (param_env, (sig, extra_args)) = query.into_parts();
      .           
      7 ( 0.00%)      LayoutCx { tcx, param_env }.fn_abi_new_uncached(
      4 ( 0.00%)          sig,
      .                   extra_args,
      .                   None,
      .                   CodegenFnAttrFlags::empty(),
      .                   false,
      .               )
      4 ( 0.00%)  }
      .           
    360 ( 0.00%)  fn fn_abi_of_instance<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               query: ty::ParamEnvAnd<'tcx, (ty::Instance<'tcx>, &'tcx ty::List<Ty<'tcx>>)>,
      .           ) -> Result<&'tcx FnAbi<'tcx, Ty<'tcx>>, FnAbiError<'tcx>> {
    320 ( 0.00%)      let (param_env, (instance, extra_args)) = query.into_parts();
      .           
    160 ( 0.00%)      let sig = instance.fn_sig_for_fn_abi(tcx, param_env);
      .           
    200 ( 0.00%)      let caller_location = if instance.def.requires_caller_location(tcx) {
      .                   Some(tcx.caller_location_ty())
      .               } else {
      .                   None
      .               };
      .           
     40 ( 0.00%)      let attrs = tcx.codegen_fn_attrs(instance.def_id()).flags;
      .           
    320 ( 0.00%)      LayoutCx { tcx, param_env }.fn_abi_new_uncached(
    160 ( 0.00%)          sig,
      .                   extra_args,
      .                   caller_location,
      .                   attrs,
    200 ( 0.00%)          matches!(instance.def, ty::InstanceDef::Virtual(..)),
      .               )
    360 ( 0.00%)  }
      .           
      .           impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {
      .               // FIXME(eddyb) perhaps group the signature/type-containing (or all of them?)
      .               // arguments of this method, into a separate `struct`.
    533 ( 0.00%)      fn fn_abi_new_uncached(
      .                   &self,
      .                   sig: ty::PolyFnSig<'tcx>,
      .                   extra_args: &[Ty<'tcx>],
      .                   caller_location: Option<Ty<'tcx>>,
      .                   codegen_fn_attr_flags: CodegenFnAttrFlags,
      .                   // FIXME(eddyb) replace this with something typed, like an `enum`.
      .                   force_thin_self_ptr: bool,
      .               ) -> Result<&'tcx FnAbi<'tcx, Ty<'tcx>>, FnAbiError<'tcx>> {
      .                   debug!("fn_abi_new_uncached({:?}, {:?})", sig, extra_args);
      .           
    615 ( 0.00%)          let sig = self.tcx.normalize_erasing_late_bound_regions(self.param_env, sig);
      .           
      .                   let conv = conv_from_spec_abi(self.tcx(), sig.abi);
      .           
      .                   let mut inputs = sig.inputs();
      .                   let extra_args = if sig.abi == RustCall {
      .                       assert!(!sig.c_variadic && extra_args.is_empty());
      .           
      .                       if let Some(input) = sig.inputs().last() {
-- line 3009 ----------------------------------------
-- line 3018 ----------------------------------------
      .                           }
      .                       } else {
      .                           bug!(
      .                               "argument to function with \"rust-call\" ABI \
      .                                   is not a tuple"
      .                           );
      .                       }
      .                   } else {
    164 ( 0.00%)              assert!(sig.c_variadic || extra_args.is_empty());
      .                       extra_args.to_vec()
      .                   };
      .           
     41 ( 0.00%)          let target = &self.tcx.sess.target;
    123 ( 0.00%)          let target_env_gnu_like = matches!(&target.env[..], "gnu" | "musl" | "uclibc");
    123 ( 0.00%)          let win_x64_gnu = target.os == "windows" && target.arch == "x86_64" && target.env == "gnu";
      .                   let linux_s390x_gnu_like =
    164 ( 0.00%)              target.os == "linux" && target.arch == "s390x" && target_env_gnu_like;
      .                   let linux_sparc64_gnu_like =
    164 ( 0.00%)              target.os == "linux" && target.arch == "sparc64" && target_env_gnu_like;
      .                   let linux_powerpc_gnu_like =
    246 ( 0.00%)              target.os == "linux" && target.arch == "powerpc" && target_env_gnu_like;
      .                   use SpecAbi::*;
    164 ( 0.00%)          let rust_abi = matches!(sig.abi, RustIntrinsic | PlatformIntrinsic | Rust | RustCall);
      .           
      .                   // Handle safe Rust thin and fat pointers.
     41 ( 0.00%)          let adjust_for_rust_scalar = |attrs: &mut ArgAttributes,
      .                                                 scalar: Scalar,
      .                                                 layout: TyAndLayout<'tcx>,
      .                                                 offset: Size,
      .                                                 is_return: bool| {
      .                       // Booleans are always an i1 that needs to be zero-extended.
      6 ( 0.00%)              if scalar.is_bool() {
     18 ( 0.00%)                  attrs.ext(ArgExtension::Zext);
      .                           return;
      .                       }
      .           
      .                       // Only pointer types handled below.
     44 ( 0.00%)              if scalar.value != Pointer {
      .                           return;
      .                       }
      .           
     44 ( 0.00%)              if !scalar.valid_range.contains(0) {
     78 ( 0.00%)                  attrs.set(ArgAttribute::NonNull);
      .                       }
      .           
    386 ( 0.00%)              if let Some(pointee) = layout.pointee_info_at(self, offset) {
      .                           if let Some(kind) = pointee.safe {
    117 ( 0.00%)                      attrs.pointee_align = Some(pointee.align);
      .           
      .                               // `Box` (`UniqueBorrowed`) are not necessarily dereferenceable
      .                               // for the entire duration of the function as they can be deallocated
      .                               // at any time. Set their valid size to 0.
    195 ( 0.00%)                      attrs.pointee_size = match kind {
      .                                   PointerKind::UniqueOwned => Size::ZERO,
      .                                   _ => pointee.size,
      .                               };
      .           
      .                               // `Box` pointer parameters never alias because ownership is transferred
      .                               // `&mut` pointer parameters never alias other parameters,
      .                               // or mutable global data
      .                               //
-- line 3078 ----------------------------------------
-- line 3080 ----------------------------------------
      .                               // and can be marked as both `readonly` and `noalias`, as
      .                               // LLVM's definition of `noalias` is based solely on memory
      .                               // dependencies rather than pointer equality
      .                               //
      .                               // Due to past miscompiles in LLVM, we apply a separate NoAliasMutRef attribute
      .                               // for UniqueBorrowed arguments, so that the codegen backend can decide whether
      .                               // or not to actually emit the attribute. It can also be controlled with the
      .                               // `-Zmutable-noalias` debugging option.
    195 ( 0.00%)                      let no_alias = match kind {
      .                                   PointerKind::Shared | PointerKind::UniqueBorrowed => false,
      .                                   PointerKind::UniqueOwned => true,
      .                                   PointerKind::Frozen => !is_return,
      .                               };
      .                               if no_alias {
      .                                   attrs.set(ArgAttribute::NoAlias);
      .                               }
      .           
    117 ( 0.00%)                      if kind == PointerKind::Frozen && !is_return {
      .                                   attrs.set(ArgAttribute::ReadOnly);
      .                               }
      .           
    117 ( 0.00%)                      if kind == PointerKind::UniqueBorrowed && !is_return {
      .                                   attrs.set(ArgAttribute::NoAliasMutRef);
      .                               }
      .                           }
      .                       }
      .                   };
      .           
    615 ( 0.00%)          let arg_of = |ty: Ty<'tcx>, arg_idx: Option<usize>| -> Result<_, FnAbiError<'tcx>> {
    155 ( 0.00%)              let is_return = arg_idx.is_none();
      .           
    221 ( 0.00%)              let layout = self.layout_of(ty)?;
    171 ( 0.00%)              let layout = if force_thin_self_ptr && arg_idx == Some(0) {
      .                           // Don't pass the vtable, it's not an argument of the virtual fn.
      .                           // Instead, pass just the data pointer, but give it the type `*const/mut dyn Trait`
      .                           // or `&/&mut dyn Trait` because this is special-cased elsewhere in codegen
      .                           make_thin_self_ptr(self, layout)
      .                       } else {
      .                           layout
      .                       };
      .           
  1,300 ( 0.00%)              let mut arg = ArgAbi::new(self, layout, |layout, scalar, offset| {
    174 ( 0.00%)                  let mut attrs = ArgAttributes::new();
    290 ( 0.00%)                  adjust_for_rust_scalar(&mut attrs, scalar, *layout, offset, is_return);
      .                           attrs
    580 ( 0.00%)              });
      .           
     42 ( 0.00%)              if arg.layout.is_zst() {
      .                           // For some forsaken reason, x86_64-pc-windows-gnu
      .                           // doesn't ignore zero-sized struct arguments.
      .                           // The same is true for {s390x,sparc64,powerpc}-unknown-linux-{gnu,musl,uclibc}.
     24 ( 0.00%)                  if is_return
      .                               || rust_abi
      .                               || (!win_x64_gnu
      .                                   && !linux_s390x_gnu_like
      .                                   && !linux_sparc64_gnu_like
      .                                   && !linux_powerpc_gnu_like)
      .                           {
     12 ( 0.00%)                      arg.mode = PassMode::Ignore;
      .                           }
      .                       }
      .           
  1,891 ( 0.00%)              Ok(arg)
      .                   };
      .           
  1,681 ( 0.00%)          let mut fn_abi = FnAbi {
      .                       ret: arg_of(sig.output(), None)?,
     82 ( 0.00%)              args: inputs
      .                           .iter()
      .                           .cloned()
      .                           .chain(extra_args)
      .                           .chain(caller_location)
      .                           .enumerate()
     57 ( 0.00%)                  .map(|(i, ty)| arg_of(ty, Some(i)))
      .                           .collect::<Result<_, _>>()?,
      .                       c_variadic: sig.c_variadic,
      .                       fixed_count: inputs.len(),
      .                       conv,
      .                       can_unwind: fn_can_unwind(self.tcx(), codegen_fn_attr_flags, sig.abi),
      .                   };
      .                   self.fn_abi_adjust_for_abi(&mut fn_abi, sig.abi)?;
      .                   debug!("fn_abi_new_uncached = {:?}", fn_abi);
    164 ( 0.00%)          Ok(self.tcx.arena.alloc(fn_abi))
    328 ( 0.00%)      }
      .           
      .               fn fn_abi_adjust_for_abi(
      .                   &self,
      .                   fn_abi: &mut FnAbi<'tcx, Ty<'tcx>>,
      .                   abi: SpecAbi,
      .               ) -> Result<(), FnAbiError<'tcx>> {
      .                   if abi == SpecAbi::Unadjusted {
      .                       return Ok(());
      .                   }
      .           
      .                   if abi == SpecAbi::Rust
      .                       || abi == SpecAbi::RustCall
      .                       || abi == SpecAbi::RustIntrinsic
      .                       || abi == SpecAbi::PlatformIntrinsic
      .                   {
    512 ( 0.00%)              let fixup = |arg: &mut ArgAbi<'tcx, Ty<'tcx>>| {
     89 ( 0.00%)                  if arg.is_ignore() {
      .                               return;
      .                           }
      .           
    468 ( 0.00%)                  match arg.layout.abi {
      .                               Abi::Aggregate { .. } => {}
      .           
      .                               // This is a fun case! The gist of what this is doing is
      .                               // that we want callers and callees to always agree on the
      .                               // ABI of how they pass SIMD arguments. If we were to *not*
      .                               // make these arguments indirect then they'd be immediates
      .                               // in LLVM, which means that they'd used whatever the
      .                               // appropriate ABI is for the callee and the caller. That
-- line 3192 ----------------------------------------
-- line 3211 ----------------------------------------
      .                                   return;
      .                               }
      .           
      .                               _ => return,
      .                           }
      .           
      .                           // Pass and return structures up to 2 pointers in size by value, matching `ScalarPair`.
      .                           // LLVM will usually pass these in 2 registers, which is more efficient than by-ref.
     30 ( 0.00%)                  let max_by_val_size = Pointer.size(self) * 2;
      .                           let size = arg.layout.size;
      .           
    120 ( 0.00%)                  if arg.layout.is_unsized() || size > max_by_val_size {
      .                               arg.make_indirect();
      .                           } else {
      .                               // We want to pass small aggregates as immediates, but using
      .                               // a LLVM aggregate type for this leads to bad optimizations,
      .                               // so we pick an appropriately sized integer type instead.
      .                               arg.cast_to(Reg { kind: RegKind::Integer, size });
      .                           }
    295 ( 0.00%)              };
     39 ( 0.00%)              fixup(&mut fn_abi.ret);
      .                       for arg in &mut fn_abi.args {
    264 ( 0.00%)                  fixup(arg);
      .                       }
      .                   } else {
     12 ( 0.00%)              fn_abi.adjust_for_foreign_abi(self, abi)?;
      .                   }
      .           
      .                   Ok(())
      .               }
      .           }
      .           
      .           fn make_thin_self_ptr<'tcx>(
      .               cx: &(impl HasTyCtxt<'tcx> + HasParamEnv<'tcx>),
-- line 3244 ----------------------------------------

 19,784 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/layout.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 114 ----------------------------------------
      .           const EMPTY: u8 = 0b1111_1111;
      .           
      .           /// Control byte value for a deleted bucket.
      .           const DELETED: u8 = 0b1000_0000;
      .           
      .           /// Checks whether a control byte represents a full bucket (top bit is clear).
      .           #[inline]
      .           fn is_full(ctrl: u8) -> bool {
 32,794 ( 0.01%)      ctrl & 0x80 == 0
      .           }
      .           
      .           /// Checks whether a control byte represents a special value (top bit is set).
      .           #[inline]
      .           fn is_special(ctrl: u8) -> bool {
      .               ctrl & 0x80 != 0
      .           }
      .           
-- line 130 ----------------------------------------
-- line 146 ----------------------------------------
      .           /// Secondary hash function, saved in the low 7 bits of the control byte.
      .           #[inline]
      .           #[allow(clippy::cast_possible_truncation)]
      .           fn h2(hash: u64) -> u8 {
      .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
      .               // value, some hash functions (such as FxHash) produce a usize result
      .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
      .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
 29,217 ( 0.01%)      let top7 = hash >> (hash_len * 8 - 7);
      .               (top7 & 0x7f) as u8 // truncation
      .           }
      .           
      .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
      .           /// table size is a power of two) to visit every group of elements exactly once.
      .           ///
      .           /// A triangular probe has us jump by 1 more group every time. So first we
      .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 162 ----------------------------------------
-- line 173 ----------------------------------------
      .               #[inline]
      .               fn move_next(&mut self, bucket_mask: usize) {
      .                   // We should have found an empty bucket by now and ended the probe.
      .                   debug_assert!(
      .                       self.stride <= bucket_mask,
      .                       "Went past end of probe sequence"
      .                   );
      .           
  3,640 ( 0.00%)          self.stride += Group::WIDTH;
  3,640 ( 0.00%)          self.pos += self.stride;
  1,820 ( 0.00%)          self.pos &= bucket_mask;
      .               }
      .           }
      .           
      .           /// Returns the number of buckets needed to hold the given number of items,
      .           /// taking the maximum load factor into account.
      .           ///
      .           /// Returns `None` if an overflow occurs.
      .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
      .           #[cfg_attr(target_os = "emscripten", inline(never))]
      .           #[cfg_attr(not(target_os = "emscripten"), inline)]
      .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
      .               debug_assert_ne!(cap, 0);
      .           
      .               // For small tables we require at least 1 empty bucket so that lookups are
      .               // guaranteed to terminate if an element doesn't exist in the table.
  1,134 ( 0.00%)      if cap < 8 {
      .                   // We don't bother with a table size of 2 buckets since that can only
      .                   // hold a single element. Instead we skip directly to a 4 bucket table
      .                   // which can hold 3 elements.
  1,765 ( 0.00%)          return Some(if cap < 4 { 4 } else { 8 });
      .               }
      .           
      .               // Otherwise require 1/8 buckets to be empty (87.5% load)
      .               //
      .               // Be careful when modifying this, calculate_layout relies on the
      .               // overflow check here.
  1,284 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
      .           
      .               // Any overflows will have been caught by the checked_mul. Also, any
      .               // rounding errors from the division above will be cleaned up by
      .               // next_power_of_two (which can't overflow because of the previous divison).
      .               Some(adjusted_cap.next_power_of_two())
      .           }
      .           
      .           /// Returns the maximum effective capacity for the given bucket mask, taking
      .           /// the maximum load factor into account.
      .           #[inline]
      .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
  4,320 ( 0.00%)      if bucket_mask < 8 {
      .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
      .                   // Keep in mind that the bucket mask is one less than the bucket count.
      .                   bucket_mask
      .               } else {
      .                   // For larger tables we reserve 12.5% of the slots as empty.
    948 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
      .               }
      .           }
      .           
      .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
      .           /// while keeping the rest of `calculate_layout_for` independent of `T`
      .           #[derive(Copy, Clone)]
      .           struct TableLayout {
      .               size: usize,
-- line 236 ----------------------------------------
-- line 249 ----------------------------------------
      .           
      .               #[inline]
      .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
      .                   debug_assert!(buckets.is_power_of_two());
      .           
      .                   let TableLayout { size, ctrl_align } = self;
      .                   // Manual layout calculation since Layout methods are not yet stable.
      .                   let ctrl_offset =
  2,517 ( 0.00%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
  3,084 ( 0.00%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
      .           
      .                   Some((
      .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
      .                       ctrl_offset,
      .                   ))
      .               }
      .           }
      .           
-- line 266 ----------------------------------------
-- line 636 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           
      .               /// Ensures that at least `additional` items can be inserted into the table
      .               /// without reallocation.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
     13 ( 0.00%)          if additional > self.table.growth_left {
      .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
  2,865 ( 0.00%)              if self
      .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
      .                           .is_err()
      .                       {
      .                           unsafe { hint::unreachable_unchecked() }
      .                       }
      .                   }
      .               }
      .           
-- line 654 ----------------------------------------
-- line 665 ----------------------------------------
      .                   } else {
      .                       Ok(())
      .                   }
      .               }
      .           
      .               /// Out-of-line slow path for `reserve` and `try_reserve`.
      .               #[cold]
      .               #[inline(never)]
  4,695 ( 0.00%)      fn reserve_rehash(
      .                   &mut self,
      .                   additional: usize,
      .                   hasher: impl Fn(&T) -> u64,
      .                   fallibility: Fallibility,
      .               ) -> Result<(), TryReserveError> {
      .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
  1,134 ( 0.00%)          let new_items = match self.table.items.checked_add(additional) {
      .                       Some(new_items) => new_items,
      .                       None => return Err(fallibility.capacity_overflow()),
      .                   };
  1,134 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.table.bucket_mask);
  2,268 ( 0.00%)          if new_items <= full_capacity / 2 {
      .                       // Rehash in-place without re-allocating if we have plenty of spare
      .                       // capacity that is locked up due to DELETED entries.
      .                       self.rehash_in_place(hasher);
      .                       Ok(())
      .                   } else {
      .                       // Otherwise, conservatively resize to at least the next size up
      .                       // to avoid churning deletes into frequent rehashes.
      .                       self.resize(
    567 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
      .                           hasher,
      .                           fallibility,
      .                       )
      .                   }
  5,103 ( 0.00%)      }
      .           
      .               /// Rehashes the contents of the table in place (i.e. without changing the
      .               /// allocation).
      .               ///
      .               /// If `hasher` panics then some the table's contents may be lost.
      .               fn rehash_in_place(&mut self, hasher: impl Fn(&T) -> u64) {
      .                   unsafe {
      .                       // If the hash function panics then properly clean up any elements
-- line 707 ----------------------------------------
-- line 780 ----------------------------------------
      .               fn resize(
      .                   &mut self,
      .                   capacity: usize,
      .                   hasher: impl Fn(&T) -> u64,
      .                   fallibility: Fallibility,
      .               ) -> Result<(), TryReserveError> {
      .                   unsafe {
      .                       let mut new_table =
  4,386 ( 0.00%)                  self.table
      .                               .prepare_resize(TableLayout::new::<T>(), capacity, fallibility)?;
      .           
      .                       // Copy all elements to the new table.
      .                       for item in self.iter() {
      .                           // This may panic.
 18,390 ( 0.01%)                  let hash = hasher(item.as_ref());
      .           
      .                           // We can use a simpler version of insert() here since:
      .                           // - there are no DELETED entries.
      .                           // - we know there is enough space in the table.
      .                           // - all elements are unique.
      .                           let (index, _) = new_table.prepare_insert_slot(hash);
 18,390 ( 0.01%)                  new_table.bucket(index).copy_from_nonoverlapping(&item);
      .                       }
      .           
      .                       // We successfully copied all elements without panicking. Now replace
      .                       // self with the new table. The old table will have its memory freed but
      .                       // the items will not be dropped (since they have been moved into the
      .                       // new table).
      .                       mem::swap(&mut self.table, &mut new_table);
      .           
    567 ( 0.00%)              Ok(())
      .                   }
      .               }
      .           
      .               /// Inserts a new element into the table, and returns its raw bucket.
      .               ///
      .               /// This does not check if the given element already exists in the table.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
      .                   unsafe {
      .                       let mut index = self.table.find_insert_slot(hash);
      .           
      .                       // We can avoid growing the table once we have reached our load
      .                       // factor if we are replacing a tombstone. This works since the
      .                       // number of EMPTY slots does not change in this case.
     53 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
 51,966 ( 0.02%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
      .                           self.reserve(1, hasher);
      .                           index = self.table.find_insert_slot(hash);
      .                       }
      .           
      .                       self.table.record_item_insert_at(index, old_ctrl, hash);
      .           
 13,002 ( 0.00%)              let bucket = self.bucket(index);
      .                       bucket.write(value);
      .                       bucket
      .                   }
      .               }
      .           
      .               /// Attempts to insert a new element without growing the table and return its raw bucket.
      .               ///
      .               /// Returns an `Err` containing the given element if inserting it would require growing the
-- line 841 ----------------------------------------
-- line 911 ----------------------------------------
      .                       true
      .                   } else {
      .                       false
      .                   }
      .               }
      .           
      .               /// Searches for an element in the table.
      .               #[inline]
 20,988 ( 0.01%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
      .                   unsafe {
106,794 ( 0.03%)              for bucket in self.iter_hash(hash) {
      .                           let elm = bucket.as_ref();
 16,941 ( 0.01%)                  if likely(eq(elm)) {
      .                               return Some(bucket);
      .                           }
      .                       }
      .                       None
      .                   }
 27,984 ( 0.01%)      }
      .           
      .               /// Gets a reference to an element in the table.
      .               #[inline]
      .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
    608 ( 0.00%)          match self.find(hash, eq) {
      .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Gets a mutable reference to an element in the table.
      .               #[inline]
      .               pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
-- line 943 ----------------------------------------
-- line 1007 ----------------------------------------
      .               }
      .           
      .               /// Returns the number of elements the map can hold without reallocating.
      .               ///
      .               /// This number is a lower bound; the table might be able to hold
      .               /// more, but is guaranteed to be able to hold at least this many.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn capacity(&self) -> usize {
  1,136 ( 0.00%)          self.table.items + self.table.growth_left
      .               }
      .           
      .               /// Returns the number of elements in the table.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn len(&self) -> usize {
      .                   self.table.items
      .               }
      .           
      .               /// Returns the number of buckets in the table.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn buckets(&self) -> usize {
    100 ( 0.00%)          self.table.bucket_mask + 1
      .               }
      .           
      .               /// Returns an iterator over every element in the table. It is up to
      .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
      .               /// Because we cannot make the `next` method unsafe on the `RawIter`
      .               /// struct, we have to make the `iter` method unsafe.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub unsafe fn iter(&self) -> RawIter<T> {
    567 ( 0.00%)          let data = Bucket::from_base_index(self.data_end(), 0);
      .                   RawIter {
      .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
      .                       items: self.table.items,
      .                   }
      .               }
      .           
      .               /// Returns an iterator over occupied buckets that could match a given hash.
      .               ///
-- line 1044 ----------------------------------------
-- line 1122 ----------------------------------------
      .           }
      .           
      .           unsafe impl<T, A: Allocator + Clone> Send for RawTable<T, A> where T: Send {}
      .           unsafe impl<T, A: Allocator + Clone> Sync for RawTable<T, A> where T: Sync {}
      .           
      .           impl<A> RawTableInner<A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               const fn new_in(alloc: A) -> Self {
  2,419 ( 0.00%)          Self {
      .                       // Be careful to cast the entire slice to a raw pointer.
  1,317 ( 0.00%)              ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
      .                       bucket_mask: 0,
      .                       items: 0,
      .                       growth_left: 0,
      .                       alloc,
      .                   }
      .               }
      .           }
      .           
-- line 1140 ----------------------------------------
-- line 1149 ----------------------------------------
      .                   debug_assert!(buckets.is_power_of_two());
      .           
      .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
      .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(buckets) {
      .                       Some(lco) => lco,
      .                       None => return Err(fallibility.capacity_overflow()),
      .                   };
      .           
  1,134 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
      .                       Ok(block) => block.cast(),
      .                       Err(_) => return Err(fallibility.alloc_err(layout)),
      .                   };
      .           
      .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
      .                   Ok(Self {
      .                       ctrl,
    600 ( 0.00%)              bucket_mask: buckets - 1,
      .                       items: 0,
      .                       growth_left: bucket_mask_to_capacity(buckets - 1),
      .                       alloc,
      .                   })
      .               }
      .           
      .               #[inline]
  3,744 ( 0.00%)      fn fallible_with_capacity(
      .                   alloc: A,
      .                   table_layout: TableLayout,
      .                   capacity: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<Self, TryReserveError> {
      6 ( 0.00%)          if capacity == 0 {
      .                       Ok(Self::new_in(alloc))
      .                   } else {
      .                       unsafe {
      .                           let buckets =
      .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
      .           
      .                           let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
      .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
      .           
  2,247 ( 0.00%)                  Ok(result)
      .                       }
      .                   }
  3,000 ( 0.00%)      }
      .           
      .               /// Searches for an empty or deleted bucket which is suitable for inserting
      .               /// a new element and sets the hash for that slot.
      .               ///
      .               /// There must be at least 1 empty bucket in the table.
      .               #[inline]
      .               unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
      .                   let index = self.find_insert_slot(hash);
-- line 1200 ----------------------------------------
-- line 1208 ----------------------------------------
      .               ///
      .               /// There must be at least 1 empty bucket in the table.
      .               #[inline]
      .               fn find_insert_slot(&self, hash: u64) -> usize {
      .                   let mut probe_seq = self.probe_seq(hash);
      .                   loop {
      .                       unsafe {
      .                           let group = Group::load(self.ctrl(probe_seq.pos));
 32,834 ( 0.01%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
 95,868 ( 0.03%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
      .           
      .                               // In tables smaller than the group width, trailing control
      .                               // bytes outside the range of the table are filled with
      .                               // EMPTY entries. These will unfortunately trigger a
      .                               // match, but once masked may point to a full bucket that
      .                               // is already occupied. We detect this situation here and
      .                               // perform a second scan starting at the begining of the
      .                               // table. This second scan is guaranteed to find an empty
      .                               // slot (due to the load factor) before hitting the trailing
      .                               // control bytes (containing EMPTY).
 44,958 ( 0.01%)                      if unlikely(is_full(*self.ctrl(result))) {
      .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
      .                                   debug_assert_ne!(probe_seq.pos, 0);
      .                                   return Group::load_aligned(self.ctrl(0))
      .                                       .match_empty_or_deleted()
      .                                       .lowest_set_bit_nonzero();
      .                               }
      .           
      .                               return result;
-- line 1236 ----------------------------------------
-- line 1278 ----------------------------------------
      .               /// Returns an iterator-like object for a probe sequence on the table.
      .               ///
      .               /// This iterator never terminates, but is guaranteed to visit each bucket
      .               /// group exactly once. The loop using `probe_seq` must terminate upon
      .               /// reaching a group containing an empty bucket.
      .               #[inline]
      .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
      .                   ProbeSeq {
155,316 ( 0.05%)              pos: h1(hash) & self.bucket_mask,
      .                       stride: 0,
      .                   }
      .               }
      .           
      .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
      .               /// in the table, otherwise returns error
      .               #[cfg(feature = "raw")]
      .               #[inline]
-- line 1294 ----------------------------------------
-- line 1300 ----------------------------------------
      .                   } else {
      .                       self.record_item_insert_at(index, old_ctrl, hash);
      .                       Ok(index)
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
 65,010 ( 0.02%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
      .                   self.set_ctrl_h2(index, hash);
 52,008 ( 0.02%)          self.items += 1;
      .               }
      .           
      .               #[inline]
      .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
      .                   let probe_seq_pos = self.probe_seq(hash).pos;
      .                   let probe_index =
      .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
      .                   probe_index(i) == probe_index(new_i)
-- line 1318 ----------------------------------------
-- line 1349 ----------------------------------------
      .                   // replicate the buckets at the end of the trailing group. For example
      .                   // with 2 buckets and a group size of 4, the control bytes will look
      .                   // like this:
      .                   //
      .                   //     Real    |             Replicated
      .                   // ---------------------------------------------
      .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
      .                   // ---------------------------------------------
 94,176 ( 0.03%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
      .           
 31,392 ( 0.01%)          *self.ctrl(index) = ctrl;
 31,392 ( 0.01%)          *self.ctrl(index2) = ctrl;
      .               }
      .           
      .               /// Returns a pointer to a control byte.
      .               #[inline]
      .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
      .                   debug_assert!(index < self.num_ctrl_bytes());
      .                   self.ctrl.as_ptr().add(index)
      .               }
      .           
      .               #[inline]
      .               fn buckets(&self) -> usize {
  1,134 ( 0.00%)          self.bucket_mask + 1
      .               }
      .           
      .               #[inline]
      .               fn num_ctrl_bytes(&self) -> usize {
      .                   self.bucket_mask + 1 + Group::WIDTH
      .               }
      .           
      .               #[inline]
      .               fn is_empty_singleton(&self) -> bool {
  3,734 ( 0.00%)          self.bucket_mask == 0
      .               }
      .           
      .               #[allow(clippy::mut_mut)]
      .               #[inline]
    363 ( 0.00%)      unsafe fn prepare_resize(
      .                   &self,
      .                   table_layout: TableLayout,
      .                   capacity: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
      .                   debug_assert!(self.items <= capacity);
      .           
      .                   // Allocate and initialize the new table.
  1,875 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
      .                       self.alloc.clone(),
      .                       table_layout,
      .                       capacity,
      .                       fallibility,
      .                   )?;
  1,134 ( 0.00%)          new_table.growth_left -= self.items;
      .                   new_table.items = self.items;
      .           
      .                   // The hash function may panic, in which case we simply free the new
      .                   // table without dropping any elements that may have been copied into
      .                   // it.
      .                   //
      .                   // This guard is also used to free the old table on success, see
      .                   // the comment at the bottom of this function.
    264 ( 0.00%)          Ok(guard(new_table, move |self_| {
    567 ( 0.00%)              if !self_.is_empty_singleton() {
      .                           self_.free_buckets(table_layout);
      .                       }
      .                   }))
    264 ( 0.00%)      }
      .           
      .               #[inline]
      .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
      .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
      .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
      .                       Some(lco) => lco,
      .                       None => hint::unreachable_unchecked(),
      .                   };
      .                   self.alloc.deallocate(
    235 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
      .                       layout,
      .                   );
      .               }
      .           
      .               /// Marks all table buckets as empty without dropping their contents.
      .               #[inline]
      .               fn clear_no_drop(&mut self) {
      .                   if !self.is_empty_singleton() {
-- line 1434 ----------------------------------------
-- line 1667 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           }
      .           #[cfg(not(feature = "nightly"))]
      .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn drop(&mut self) {
  1,322 ( 0.00%)          if !self.table.is_empty_singleton() {
      .                       unsafe {
      .                           self.drop_elements();
      .                           self.free_buckets();
      .                       }
      .                   }
      .               }
      .           }
      .           
-- line 1683 ----------------------------------------
-- line 1798 ----------------------------------------
      .           
      .           impl<T> Iterator for RawIterRange<T> {
      .               type Item = Bucket<T>;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<Bucket<T>> {
      .                   unsafe {
      .                       loop {
  1,988 ( 0.00%)                  if let Some(index) = self.current_group.lowest_set_bit() {
      .                               self.current_group = self.current_group.remove_lowest_bit();
      .                               return Some(self.data.next_n(index));
      .                           }
      .           
  3,354 ( 0.00%)                  if self.next_ctrl >= self.end {
      .                               return None;
      .                           }
      .           
      .                           // We might read past self.end up to the next group boundary,
      .                           // but this is fine because it only occurs on tables smaller
      .                           // than the group size where the trailing control bytes are all
      .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
      .                           // to the group size (since tables are power-of-two sized).
-- line 1819 ----------------------------------------
-- line 1990 ----------------------------------------
      .           }
      .           
      .           impl<T> Iterator for RawIter<T> {
      .               type Item = Bucket<T>;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<Bucket<T>> {
      .                   if let Some(b) = self.iter.next() {
 36,780 ( 0.01%)              self.items -= 1;
      .                       Some(b)
      .                   } else {
      .                       // We don't check against items == 0 here to allow the
      .                       // compiler to optimize away the item count entirely if the
      .                       // iterator length is never queried.
      .                       debug_assert_eq!(self.items, 0);
      .                       None
      .                   }
-- line 2006 ----------------------------------------
-- line 2178 ----------------------------------------
      .               }
      .           }
      .           impl<'a, A: Allocator + Clone> RawIterHashInner<'a, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn new(table: &'a RawTableInner<A>, hash: u64) -> Self {
      .                   unsafe {
      .                       let h2_hash = h2(hash);
      .                       let probe_seq = table.probe_seq(hash);
 18,407 ( 0.01%)              let group = Group::load(table.ctrl(probe_seq.pos));
      .                       let bitmask = group.match_byte(h2_hash).into_iter();
      .           
      .                       RawIterHashInner {
      .                           table,
      .                           h2_hash,
      .                           probe_seq,
      .                           group,
      .                           bitmask,
-- line 2194 ----------------------------------------
-- line 2195 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, T, A: Allocator + Clone> Iterator for RawIterHash<'a, T, A> {
      .               type Item = Bucket<T>;
      .           
    948 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
      .                   unsafe {
      .                       match self.inner.next() {
    474 ( 0.00%)                  Some(index) => Some(self.inner.table.bucket(index)),
      .                           None => None,
      .                       }
      .                   }
    948 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, A: Allocator + Clone> Iterator for RawIterHashInner<'a, A> {
      .               type Item = usize;
      .           
      .               fn next(&mut self) -> Option<Self::Item> {
      .                   unsafe {
      .                       loop {
      .                           if let Some(bit) = self.bitmask.next() {
 19,521 ( 0.01%)                      let index = (self.probe_seq.pos + bit) & self.table.bucket_mask;
      .                               return Some(index);
      .                           }
 14,036 ( 0.00%)                  if likely(self.group.match_empty().any_bit_set()) {
      .                               return None;
      .                           }
      .                           self.probe_seq.move_next(self.table.bucket_mask);
      .                           self.group = Group::load(self.table.ctrl(self.probe_seq.pos));
  2,826 ( 0.00%)                  self.bitmask = self.group.match_byte(self.h2_hash).into_iter();
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           #[cfg(test)]
      .           mod test_map {
      .               use super::*;
-- line 2236 ----------------------------------------

151,854 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/intern.rs
--------------------------------------------------------------------------------
Ir               

-- line 49 ----------------------------------------
      .               /// particular allocation. It is primarily used to make as many allocations as possible
      .               /// read-only so LLVM can place them in const memory.
      .               mode: InternMode,
      .               /// This field stores whether we are *currently* inside an `UnsafeCell`. This can affect
      .               /// the intern mode of references we encounter.
      .               inside_unsafe_cell: bool,
      .           }
      .           
    248 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Hash, Eq)]
      .           enum InternMode {
      .               /// A static and its current mutability.  Below shared references inside a `static mut`,
      .               /// this is *immutable*, and below mutable references inside an `UnsafeCell`, this
      .               /// is *mutable*.
      .               Static(hir::Mutability),
      .               /// A `const`.
      .               Const,
      .           }
-- line 65 ----------------------------------------
-- line 69 ----------------------------------------
      .           struct IsStaticOrFn;
      .           
      .           /// Intern an allocation without looking at its children.
      .           /// `mode` is the mode of the environment where we found this pointer.
      .           /// `mutablity` is the mutability of the place to be interned; even if that says
      .           /// `immutable` things might become mutable if `ty` is not frozen.
      .           /// `ty` can be `None` if there is no potential interior mutability
      .           /// to account for (e.g. for vtables).
    372 ( 0.00%)  fn intern_shallow<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx, const_eval::MemoryKind>>(
      .               ecx: &'rt mut InterpCx<'mir, 'tcx, M>,
      .               leftover_allocations: &'rt mut FxHashSet<AllocId>,
      .               alloc_id: AllocId,
      .               mode: InternMode,
      .               ty: Option<Ty<'tcx>>,
      .           ) -> Option<IsStaticOrFn> {
      .               trace!("intern_shallow {:?} with {:?}", alloc_id, mode);
      .               // remove allocation
     31 ( 0.00%)      let tcx = ecx.tcx;
    465 ( 0.00%)      let (kind, mut alloc) = match ecx.memory.alloc_map.remove(&alloc_id) {
    310 ( 0.00%)          Some(entry) => entry,
      .                   None => {
      .                       // Pointer not found in local memory map. It is either a pointer to the global
      .                       // map, or dangling.
      .                       // If the pointer is dangling (neither in local nor global memory), we leave it
      .                       // to validation to error -- it has the much better error messages, pointing out where
      .                       // in the value the dangling reference lies.
      .                       // The `delay_span_bug` ensures that we don't forget such a check in validation.
      .                       if tcx.get_global_alloc(alloc_id).is_none() {
-- line 96 ----------------------------------------
-- line 106 ----------------------------------------
      .               match kind {
      .                   MemoryKind::Stack
      .                   | MemoryKind::Machine(const_eval::MemoryKind::Heap)
      .                   | MemoryKind::CallerLocation => {}
      .               }
      .               // Set allocation mutability as appropriate. This is used by LLVM to put things into
      .               // read-only memory, and also by Miri when evaluating other globals that
      .               // access this one.
     62 ( 0.00%)      if let InternMode::Static(mutability) = mode {
      .                   // For this, we need to take into account `UnsafeCell`. When `ty` is `None`, we assume
      .                   // no interior mutability.
      .                   let frozen = ty.map_or(true, |ty| ty.is_freeze(ecx.tcx, ecx.param_env));
      .                   // For statics, allocation mutability is the combination of place mutability and
      .                   // type mutability.
      .                   // The entire allocation needs to be mutable if it contains an `UnsafeCell` anywhere.
      .                   let immutable = mutability == Mutability::Not && frozen;
      .                   if immutable {
-- line 122 ----------------------------------------
-- line 129 ----------------------------------------
      .                   // No matter what, *constants are never mutable*. Mutating them is UB.
      .                   // See const_eval::machine::MemoryExtra::can_access_statics for why
      .                   // immutability is so important.
      .           
      .                   // Validation will ensure that there is no `UnsafeCell` on an immutable allocation.
      .                   alloc.mutability = Mutability::Not;
      .               };
      .               // link the alloc id to the actual allocation
    713 ( 0.00%)      let alloc = tcx.intern_const_alloc(alloc);
      .               leftover_allocations.extend(alloc.relocations().iter().map(|&(_, alloc_id)| alloc_id));
    124 ( 0.00%)      tcx.set_alloc_id_memory(alloc_id, alloc);
      .               None
    248 ( 0.00%)  }
      .           
      .           impl<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx, const_eval::MemoryKind>>
      .               InternVisitor<'rt, 'mir, 'tcx, M>
      .           {
      .               fn intern_shallow(
      .                   &mut self,
      .                   alloc_id: AllocId,
      .                   mode: InternMode,
      .                   ty: Option<Ty<'tcx>>,
      .               ) -> Option<IsStaticOrFn> {
      8 ( 0.00%)          intern_shallow(self.ecx, self.leftover_allocations, alloc_id, mode, ty)
      .               }
      .           }
      .           
      .           impl<'rt, 'mir, 'tcx: 'mir, M: CompileTimeMachine<'mir, 'tcx, const_eval::MemoryKind>>
      .               ValueVisitor<'mir, 'tcx, M> for InternVisitor<'rt, 'mir, 'tcx, M>
      .           {
      .               type V = MPlaceTy<'tcx>;
      .           
-- line 160 ----------------------------------------
-- line 164 ----------------------------------------
      .               }
      .           
      .               fn visit_aggregate(
      .                   &mut self,
      .                   mplace: &MPlaceTy<'tcx>,
      .                   fields: impl Iterator<Item = InterpResult<'tcx, Self::V>>,
      .               ) -> InterpResult<'tcx> {
      .                   // ZSTs cannot contain pointers, so we can skip them.
  7,440 ( 0.00%)          if mplace.layout.is_zst() {
      .                       return Ok(());
      .                   }
      .           
 23,322 ( 0.01%)          if let Some(def) = mplace.layout.ty.ty_adt_def() {
 33,824 ( 0.01%)              if Some(def.did) == self.ecx.tcx.lang_items().unsafe_cell_type() {
      .                           // We are crossing over an `UnsafeCell`, we can mutate again. This means that
      .                           // References we encounter inside here are interned as pointing to mutable
      .                           // allocations.
      .                           // Remember the `old` value to handle nested `UnsafeCell`.
      .                           let old = std::mem::replace(&mut self.inside_unsafe_cell, true);
      .                           let walked = self.walk_aggregate(mplace, fields);
      .                           self.inside_unsafe_cell = old;
      .                           return walked;
      .                       }
      .                   }
      .           
 61,646 ( 0.02%)          self.walk_aggregate(mplace, fields)
      .               }
      .           
205,659 ( 0.06%)      fn visit_value(&mut self, mplace: &MPlaceTy<'tcx>) -> InterpResult<'tcx> {
      .                   // Handle Reference types, as these are the only relocations supported by const eval.
      .                   // Raw pointers (and boxes) are handled by the `leftover_relocations` logic.
 22,851 ( 0.01%)          let tcx = self.ecx.tcx;
 22,851 ( 0.01%)          let ty = mplace.layout.ty;
 68,559 ( 0.02%)          if let ty::Ref(_, referenced_ty, ref_mutability) = *ty.kind() {
     20 ( 0.00%)              let value = self.ecx.read_immediate(&(*mplace).into())?;
      6 ( 0.00%)              let mplace = self.ecx.ref_to_mplace(&value)?;
      2 ( 0.00%)              assert_eq!(mplace.layout.ty, referenced_ty);
      .                       // Handle trait object vtables.
      4 ( 0.00%)              if let ty::Dynamic(..) =
      8 ( 0.00%)                  tcx.struct_tail_erasing_lifetimes(referenced_ty, self.ecx.param_env).kind()
      .                       {
      .                           let ptr = self.ecx.scalar_to_ptr(mplace.meta.unwrap_meta());
      .                           if let Some(alloc_id) = ptr.provenance {
      .                               // Explicitly choose const mode here, since vtables are immutable, even
      .                               // if the reference of the fat pointer is mutable.
      .                               self.intern_shallow(alloc_id, InternMode::Const, None);
      .                           } else {
      .                               // Validation will error (with a better message) on an invalid vtable pointer.
      .                               // Let validation show the error message, but make sure it *does* error.
      .                               tcx.sess
      .                                   .delay_span_bug(tcx.span, "vtables pointers cannot be integer pointers");
      .                           }
      .                       }
      .                       // Check if we have encountered this pointer+layout combination before.
      .                       // Only recurse for allocation-backed pointers.
      6 ( 0.00%)              if let Some(alloc_id) = mplace.ptr.provenance {
      .                           // Compute the mode with which we intern this. Our goal here is to make as many
      .                           // statics as we can immutable so they can be placed in read-only memory by LLVM.
      8 ( 0.00%)                  let ref_mode = match self.mode {
      .                               InternMode::Static(mutbl) => {
      .                                   // In statics, merge outer mutability with reference mutability and
      .                                   // take into account whether we are in an `UnsafeCell`.
      .           
      .                                   // The only way a mutable reference actually works as a mutable reference is
      .                                   // by being in a `static mut` directly or behind another mutable reference.
      .                                   // If there's an immutable reference or we are inside a `static`, then our
      .                                   // mutable reference is equivalent to an immutable one. As an example:
-- line 230 ----------------------------------------
-- line 254 ----------------------------------------
      .                               }
      .                               InternMode::Const => {
      .                                   // Ignore `UnsafeCell`, everything is immutable.  Validity does some sanity
      .                                   // checking for mutable references that we encounter -- they must all be
      .                                   // ZST.
      .                                   InternMode::Const
      .                               }
      .                           };
      6 ( 0.00%)                  match self.intern_shallow(alloc_id, ref_mode, Some(referenced_ty)) {
      .                               // No need to recurse, these are interned already and statics may have
      .                               // cycles, so we don't want to recurse there
      .                               Some(IsStaticOrFn) => {}
      .                               // intern everything referenced by this value. The mutability is taken from the
      .                               // reference. It is checked above that mutable references only happen in
      .                               // `static mut`
     18 ( 0.00%)                      None => self.ref_tracking.track((mplace, ref_mode), || ()),
      .                           }
      .                       }
      .                       Ok(())
      .                   } else {
      .                       // Not a reference -- proceed recursively.
      .                       self.walk_value(mplace)
      .                   }
205,659 ( 0.06%)      }
      .           }
      .           
      .           #[derive(Copy, Clone, Debug, PartialEq, Hash, Eq)]
      .           pub enum InternKind {
      .               /// The `mutability` of the static, ignoring the type which may have interior mutability.
      .               Static(hir::Mutability),
      .               Constant,
      .               Promoted,
-- line 285 ----------------------------------------
-- line 286 ----------------------------------------
      .           }
      .           
      .           /// Intern `ret` and everything it references.
      .           ///
      .           /// This *cannot raise an interpreter error*.  Doing so is left to validation, which
      .           /// tracks where in the value we are and thus can show much better error messages.
      .           /// Any errors here would anyway be turned into `const_err` lints, whereas validation failures
      .           /// are hard errors.
    232 ( 0.00%)  #[tracing::instrument(level = "debug", skip(ecx))]
    232 ( 0.00%)  pub fn intern_const_alloc_recursive<
      .               'mir,
      .               'tcx: 'mir,
      .               M: CompileTimeMachine<'mir, 'tcx, const_eval::MemoryKind>,
      .           >(
      .               ecx: &mut InterpCx<'mir, 'tcx, M>,
      .               intern_kind: InternKind,
      .               ret: &MPlaceTy<'tcx>,
      .           ) -> Result<(), ErrorReported> {
     58 ( 0.00%)      let tcx = ecx.tcx;
    203 ( 0.00%)      let base_intern_mode = match intern_kind {
      .                   InternKind::Static(mutbl) => InternMode::Static(mutbl),
      .                   // `Constant` includes array lengths.
      .                   InternKind::Constant | InternKind::Promoted => InternMode::Const,
      .               };
      .           
      .               // Type based interning.
      .               // `ref_tracking` tracks typed references we have already interned and still need to crawl for
      .               // more typed information inside them.
      .               // `leftover_allocations` collects *all* allocations we see, because some might not
      .               // be available in a typed way. They get interned at the end.
      .               let mut ref_tracking = RefTracking::empty();
      .               let leftover_allocations = &mut FxHashSet::default();
      .           
      .               // start with the outermost allocation
    116 ( 0.00%)      intern_shallow(
      .                   ecx,
      .                   leftover_allocations,
      .                   // The outermost allocation must exist, because we allocated it with
      .                   // `Memory::allocate`.
     29 ( 0.00%)          ret.ptr.provenance.unwrap(),
      .                   base_intern_mode,
     29 ( 0.00%)          Some(ret.layout.ty),
      .               );
      .           
      .               ref_tracking.track((*ret, base_intern_mode), || ());
      .           
    310 ( 0.00%)      while let Some(((mplace, mode), _)) = ref_tracking.todo.pop() {
    310 ( 0.00%)          let res = InternVisitor {
      .                       ref_tracking: &mut ref_tracking,
      .                       ecx,
      .                       mode,
      .                       leftover_allocations,
      .                       inside_unsafe_cell: false,
      .                   }
      .                   .visit_value(&mplace);
      .                   // We deliberately *ignore* interpreter errors here.  When there is a problem, the remaining
      .                   // references are "leftover"-interned, and later validation will show a proper error
      .                   // and point at the right part of the value causing the problem.
     62 ( 0.00%)          match res {
      .                       Ok(()) => {}
      .                       Err(error) => {
      .                           ecx.tcx.sess.delay_span_bug(
      .                               ecx.tcx.span,
      .                               &format!(
      .                                   "error during interning should later cause validation failure: {}",
      .                                   error
      .                               ),
-- line 352 ----------------------------------------
-- line 354 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           
      .               // Intern the rest of the allocations as mutable. These might be inside unions, padding, raw
      .               // pointers, ... So we can't intern them according to their type rules
      .           
      .               let mut todo: Vec<_> = leftover_allocations.iter().cloned().collect();
      6 ( 0.00%)      while let Some(alloc_id) = todo.pop() {
      .                   if let Some((_, mut alloc)) = ecx.memory.alloc_map.remove(&alloc_id) {
      .                       // We can't call the `intern_shallow` method here, as its logic is tailored to safe
      .                       // references and a `leftover_allocations` set (where we only have a todo-list here).
      .                       // So we hand-roll the interning logic here again.
      .                       match intern_kind {
      .                           // Statics may contain mutable allocations even behind relocations.
      .                           // Even for immutable statics it would be ok to have mutable allocations behind
      .                           // raw pointers, e.g. for `static FOO: *const AtomicUsize = &AtomicUsize::new(42)`.
-- line 370 ----------------------------------------
-- line 396 ----------------------------------------
      .                       }
      .                       let alloc = tcx.intern_const_alloc(alloc);
      .                       tcx.set_alloc_id_memory(alloc_id, alloc);
      .                       for &(_, alloc_id) in alloc.relocations().iter() {
      .                           if leftover_allocations.insert(alloc_id) {
      .                               todo.push(alloc_id);
      .                           }
      .                       }
      4 ( 0.00%)          } else if ecx.memory.dead_alloc_map.contains_key(&alloc_id) {
      .                       // Codegen does not like dangling pointers, and generally `tcx` assumes that
      .                       // all allocations referenced anywhere actually exist. So, make sure we error here.
      .                       ecx.tcx.sess.span_err(ecx.tcx.span, "encountered dangling pointer in final constant");
      .                       return Err(ErrorReported);
      8 ( 0.00%)          } else if ecx.tcx.get_global_alloc(alloc_id).is_none() {
      .                       // We have hit an `AllocId` that is neither in local or global memory and isn't
      .                       // marked as dangling by local memory.  That should be impossible.
      .                       span_bug!(ecx.tcx.span, "encountered unknown alloc id {:?}", alloc_id);
      .                   }
      .               }
      .               Ok(())
      .           }
      .           
-- line 417 ----------------------------------------

  4,422 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/intern.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir               

-- line 187 ----------------------------------------
      .           /// ```
      .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
      .               pub(crate) hash_builder: S,
      .               pub(crate) table: RawTable<(K, V), A>,
      .           }
      .           
      .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
      .               fn clone(&self) -> Self {
     44 ( 0.00%)          HashMap {
      .                       hash_builder: self.hash_builder.clone(),
      9 ( 0.00%)              table: self.table.clone(),
      .                   }
      .               }
      .           
      .               fn clone_from(&mut self, source: &Self) {
      .                   self.table.clone_from(&source.table);
      .           
      .                   // Update hash_builder only if we successfully cloned all elements.
      .                   self.hash_builder.clone_from(&source.hash_builder);
-- line 205 ----------------------------------------
-- line 210 ----------------------------------------
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash,
      .               S: BuildHasher,
      .           {
  8,105 ( 0.00%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
      .           }
      .           
      .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: ?Sized + Eq,
      .           {
 26,112 ( 0.01%)      move |x| k.eq(x.0.borrow())
      .           }
      .           
      .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: ?Sized + Eq,
      .           {
 26,932 ( 0.01%)      move |x| k.eq(x.borrow())
      .           }
      .           
      .           #[cfg(not(feature = "nightly"))]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
      .               use core::hash::Hasher;
      .               let mut state = hash_builder.build_hasher();
      .               val.hash(&mut state);
      .               state.finish()
      .           }
      .           
      .           #[cfg(feature = "nightly")]
      .           #[cfg_attr(feature = "inline-more", inline)]
     10 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash + ?Sized,
      .               S: BuildHasher,
      .           {
    484 ( 0.00%)      hash_builder.hash_one(val)
     20 ( 0.00%)  }
      .           
      .           #[cfg(not(feature = "nightly"))]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
      .           where
      .               K: Hash,
      .               S: BuildHasher,
      .           {
-- line 274 ----------------------------------------
-- line 280 ----------------------------------------
      .           
      .           #[cfg(feature = "nightly")]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
      .           where
      .               K: Hash,
      .               S: BuildHasher,
      .           {
  4,509 ( 0.00%)      hash_builder.hash_one(val)
      .           }
      .           
      .           #[cfg(feature = "ahash")]
      .           impl<K, V> HashMap<K, V, DefaultHashBuilder> {
      .               /// Creates an empty `HashMap`.
      .               ///
      .               /// The hash map is initially created with a capacity of 0, so it will not allocate until it
      .               /// is first inserted into.
-- line 296 ----------------------------------------
-- line 367 ----------------------------------------
      .               /// let s = DefaultHashBuilder::default();
      .               /// let mut map = HashMap::with_hasher(s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               ///
      .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub const fn with_hasher(hash_builder: S) -> Self {
  9,055 ( 0.00%)          Self {
      .                       hash_builder,
      .                       table: RawTable::new(),
      .                   }
      .               }
      .           
      .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
      .               /// to hash the keys.
      .               ///
-- line 383 ----------------------------------------
-- line 436 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               /// use hashbrown::hash_map::DefaultHashBuilder;
      .               ///
      .               /// let s = DefaultHashBuilder::default();
      .               /// let mut map = HashMap::with_hasher(s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
     49 ( 0.00%)      pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
    167 ( 0.00%)          Self {
      .                       hash_builder,
     28 ( 0.00%)              table: RawTable::new_in(alloc),
      .                   }
     14 ( 0.00%)      }
      .           
      .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
      .               /// to hash the keys. It will be allocated with the given allocator.
      .               ///
      .               /// The hash map will be able to hold at least `capacity` elements without
      .               /// reallocating. If `capacity` is 0, the hash map will not allocate.
      .               ///
      .               /// Warning: `hash_builder` is normally randomly generated, and
-- line 457 ----------------------------------------
-- line 527 ----------------------------------------
      .               /// map.insert("c", 3);
      .               ///
      .               /// for key in map.keys() {
      .               ///     println!("{}", key);
      .               /// }
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn keys(&self) -> Keys<'_, K, V> {
      6 ( 0.00%)          Keys { inner: self.iter() }
      .               }
      .           
      .               /// An iterator visiting all values in arbitrary order.
      .               /// The iterator element type is `&'a V`.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 543 ----------------------------------------
-- line 663 ----------------------------------------
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// assert_eq!(a.len(), 0);
      .               /// a.insert(1, "a");
      .               /// assert_eq!(a.len(), 1);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn len(&self) -> usize {
    949 ( 0.00%)          self.table.len()
      .               }
      .           
      .               /// Returns `true` if the map contains no elements.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// assert!(a.is_empty());
      .               /// a.insert(1, "a");
      .               /// assert!(!a.is_empty());
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn is_empty(&self) -> bool {
  3,934 ( 0.00%)          self.len() == 0
      .               }
      .           
      .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
      .               /// allocated memory for reuse.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// a.insert(1, "a");
      .               /// a.clear();
      .               /// assert!(a.is_empty());
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      6 ( 0.00%)      pub fn clear(&mut self) {
      .                   self.table.clear();
      6 ( 0.00%)      }
      .           
      .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
      .               /// The map cannot be used after calling this.
      .               /// The iterator element type is `K`.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
      .               /// }
      .               ///
      .               /// assert_eq!(letters[&'s'], 2);
      .               /// assert_eq!(letters[&'t'], 3);
      .               /// assert_eq!(letters[&'u'], 1);
      .               /// assert_eq!(letters.get(&'y'), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
     24 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
      .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
      .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
      .                       Entry::Occupied(OccupiedEntry {
      .                           hash,
      .                           key: Some(key),
      .                           elem,
      .                           table: self,
      .                       })
      .                   } else {
     30 ( 0.00%)              Entry::Vacant(VacantEntry {
      .                           hash,
      .                           key,
      .                           table: self,
      .                       })
      .                   }
     30 ( 0.00%)      }
      .           
      .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
      .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
      .               /// ```
      .               #[inline]
      .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
 31,356 ( 0.01%)          match self.get_inner(k) {
      .                       Some(&(_, ref v)) => Some(v),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Returns the key-value pair corresponding to the supplied key.
      .               ///
      .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
 82,444 ( 0.03%)          if self.table.is_empty() {
      .                       None
      .                   } else {
      5 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      .                       self.table.get(hash, equivalent_key(k))
      .                   }
      .               }
      .           
      .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
      .               ///
      .               /// The supplied key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// assert_eq!(map.contains_key(&1), true);
      .               /// assert_eq!(map.contains_key(&2), false);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
  9,830 ( 0.00%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   self.get_inner(k).is_some()
 13,558 ( 0.00%)      }
      .           
      .               /// Returns a mutable reference to the value corresponding to the key.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
      .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// if let Some(x) = map.get_mut(&1) {
      .               ///     *x = "b";
      .               /// }
      .               /// assert_eq!(map[&1], "b");
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
     26 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
    144 ( 0.00%)          match self.get_inner_mut(k) {
      .                       Some(&mut (_, ref mut v)) => Some(v),
      .                       None => None,
      .                   }
     52 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
     48 ( 0.00%)          if self.table.is_empty() {
      .                       None
      .                   } else {
      .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
     44 ( 0.00%)              self.table.get_mut(hash, equivalent_key(k))
      .                   }
      .               }
      .           
      .               /// Attempts to get mutable references to `N` values in the map at once.
      .               ///
      .               /// Returns an array of length `N` with the results of each query. For soundness, at most one
      .               /// mutable reference will be returned to any value. `None` will be returned if any of the
      .               /// keys are duplicates or missing.
-- line 1223 ----------------------------------------
-- line 1495 ----------------------------------------
      .               /// assert_eq!(map.insert(37, "a"), None);
      .               /// assert_eq!(map.is_empty(), false);
      .               ///
      .               /// map.insert(37, "b");
      .               /// assert_eq!(map.insert(37, "c"), Some("b"));
      .               /// assert_eq!(map[&37], "c");
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
435,755 ( 0.14%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
      .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
    114 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
      6 ( 0.00%)              Some(mem::replace(item, v))
      .                   } else {
305,191 ( 0.10%)              self.table
270,438 ( 0.08%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
 28,754 ( 0.01%)              None
      .                   }
409,599 ( 0.13%)      }
      .           
      .               /// Insert a key-value pair into the map without checking
      .               /// if the key already exists in the map.
      .               ///
      .               /// Returns a reference to the key and value just inserted.
      .               ///
      .               /// This operation is safe if a key does not exist in the map.
      .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// assert_eq!(map.remove(&1), Some("a"));
      .               /// assert_eq!(map.remove(&1), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
  2,387 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
154,200 ( 0.05%)          match self.remove_entry(k) {
 29,125 ( 0.01%)              Some((_, v)) => Some(v),
  2,085 ( 0.00%)              None => None,
      .                   }
  5,579 ( 0.00%)      }
      .           
      .               /// Removes a key from the map, returning the stored key and value if the
      .               /// key was previously in the map.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
 37,069 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
      .               }
      .           }
      .           
      .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
      .               /// Creates a raw entry builder for the HashMap.
      .               ///
      .               /// Raw entries provide the lowest level of control for searching and
      .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 1737 ----------------------------------------
      .           
      .           impl<K, V, S, A> Default for HashMap<K, V, S, A>
      .           where
      .               S: Default,
      .               A: Default + Allocator + Clone,
      .           {
      .               /// Creates an empty `HashMap<K, V, S, A>`, with the `Default` value for the hasher and allocator.
      .               #[cfg_attr(feature = "inline-more", inline)]
     21 ( 0.00%)      fn default() -> Self {
     84 ( 0.00%)          Self::with_hasher_in(Default::default(), Default::default())
     14 ( 0.00%)      }
      .           }
      .           
      .           impl<K, Q: ?Sized, V, S, A> Index<&Q> for HashMap<K, V, S, A>
      .           where
      .               K: Eq + Hash + Borrow<Q>,
      .               Q: Eq + Hash,
      .               S: BuildHasher,
      .               A: Allocator + Clone,
-- line 1755 ----------------------------------------
-- line 2209 ----------------------------------------
      .               /// Creates a `RawEntryMut` from the given key and its hash.
      .               #[inline]
      .               #[allow(clippy::wrong_self_convention)]
      .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Eq,
      .               {
121,080 ( 0.04%)          self.from_hash(hash, equivalent(k))
      .               }
      .           }
      .           
      .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
      .               /// Creates a `RawEntryMut` from the given hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
320,316 ( 0.10%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   for<'b> F: FnMut(&'b K) -> bool,
      .               {
      .                   self.search(hash, is_match)
336,558 ( 0.11%)      }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   for<'b> F: FnMut(&'b K) -> bool,
      .               {
 22,982 ( 0.01%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
134,815 ( 0.04%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
      .                           elem,
      .                           table: &mut self.map.table,
      .                           hash_builder: &self.map.hash_builder,
      .                       }),
 61,076 ( 0.02%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
      .                           table: &mut self.map.table,
      .                           hash_builder: &self.map.hash_builder,
      .                       }),
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
      .               {
      .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
      .                   self.from_key_hashed_nocheck(hash, k)
      .               }
      .           
      .               /// Access an entry by a key and its hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
128,027 ( 0.04%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Eq,
      .               {
135,449 ( 0.04%)          self.from_hash(hash, equivalent(k))
243,634 ( 0.08%)      }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
      .               where
      .                   F: FnMut(&K) -> bool,
      .               {
181,347 ( 0.06%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
      .                       Some(&(ref key, ref value)) => Some((key, value)),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Access an entry by hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
      .               /// and returns a mutable reference to it.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::shadow_unrelated)]
      .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
      .               where
      .                   K: Hash,
      .                   S: BuildHasher,
      .               {
 95,803 ( 0.03%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
      .                       hash,
      .                       (key, value),
      .                       make_hasher::<K, _, V, S>(self.hash_builder),
      .                   );
      .                   (k, v)
      .               }
      .           
      .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
      .               /// map.insert("a", 1);
      .               /// map.insert("b", 2);
      .               /// map.insert("c", 3);
      .               ///
      .               /// // Not possible with .iter()
      .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
    150 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
  4,532 ( 0.00%)          IntoIter {
  3,029 ( 0.00%)              inner: self.table.into_iter(),
      .                   }
    450 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
      .               type Item = (&'a K, &'a V);
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
  6,599 ( 0.00%)          match self.inner.next() {
      .                       Some(x) => unsafe {
      .                           let r = x.as_ref();
     41 ( 0.00%)                  Some((&r.0, &r.1))
      .                       },
      .                       None => None,
      .                   }
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      4 ( 0.00%)          self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn len(&self) -> usize {
      .                   self.inner.len()
      .               }
      .           }
-- line 3013 ----------------------------------------
-- line 3051 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
      .               type Item = (K, V);
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<(K, V)> {
    251 ( 0.00%)          self.inner.next()
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 4557 ----------------------------------------
      .           /// keys with new values returned from the iterator.
      .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
      .           where
      .               K: Eq + Hash,
      .               S: BuildHasher,
      .               A: Allocator + Clone,
      .           {
      .               #[cfg_attr(feature = "inline-more", inline)]
  2,859 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
      .                   // Keys may be already present or show multiple times in the iterator.
      .                   // Reserve the entire hint lower bound if the map is empty.
      .                   // Otherwise reserve half the hint (rounded up), so the map
      .                   // will only resize twice in the worst case.
  2,486 ( 0.00%)          let iter = iter.into_iter();
  1,103 ( 0.00%)          let reserve = if self.is_empty() {
      .                       iter.size_hint().0
      .                   } else {
    131 ( 0.00%)              (iter.size_hint().0 + 1) / 2
      .                   };
      .                   self.reserve(reserve);
      .                   iter.for_each(move |(k, v)| {
 17,193 ( 0.01%)              self.insert(k, v);
      .                   });
  1,878 ( 0.00%)      }
      .           
      .               #[inline]
      .               #[cfg(feature = "nightly")]
      .               fn extend_one(&mut self, (k, v): (K, V)) {
      .                   self.insert(k, v);
      .               }
      .           
      .               #[inline]
-- line 4588 ----------------------------------------

170,758 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir               

-- line 118 ----------------------------------------
      .               stability: InternedSet<'tcx, attr::Stability>,
      .           
      .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
      .               const_stability: InternedSet<'tcx, attr::ConstStability>,
      .           }
      .           
      .           impl<'tcx> CtxtInterners<'tcx> {
      .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
     17 ( 0.00%)          CtxtInterners {
      .                       arena,
      .                       type_: Default::default(),
      .                       type_list: Default::default(),
      .                       substs: Default::default(),
      .                       region: Default::default(),
      .                       poly_existential_predicates: Default::default(),
      .                       canonical_var_infos: Default::default(),
      .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
      .                       stability: Default::default(),
      .                       const_stability: Default::default(),
      .                   }
      .               }
      .           
      .               /// Interns a type.
      .               #[allow(rustc::usage_of_ty_tykind)]
      .               #[inline(never)]
125,152 ( 0.04%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
      .                   self.type_
 78,220 ( 0.02%)              .intern(kind, |kind| {
  9,188 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
      .           
      .                           let ty_struct = TyS {
 18,376 ( 0.01%)                      kind,
      .                               flags: flags.flags,
      .                               outer_exclusive_binder: flags.outer_exclusive_binder,
      .                           };
      .           
      .                           Interned(self.arena.alloc(ty_struct))
      .                       })
      .                       .0
140,796 ( 0.04%)      }
      .           
      .               #[inline(never)]
 15,376 ( 0.00%)      fn intern_predicate(
      .                   &self,
      .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
      .               ) -> &'tcx PredicateInner<'tcx> {
      .                   self.predicate
 13,454 ( 0.00%)              .intern(kind, |kind| {
  4,662 ( 0.00%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
      .           
      .                           let predicate_struct = PredicateInner {
      .                               kind,
      .                               flags: flags.flags,
      .                               outer_exclusive_binder: flags.outer_exclusive_binder,
      .                           };
      .           
      .                           Interned(self.arena.alloc(predicate_struct))
      .                       })
      .                       .0
 17,298 ( 0.01%)      }
      .           }
      .           
      .           pub struct CommonTypes<'tcx> {
      .               pub unit: Ty<'tcx>,
      .               pub bool: Ty<'tcx>,
      .               pub char: Ty<'tcx>,
      .               pub isize: Ty<'tcx>,
      .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
      .           /// safely used as a key in the maps of a TypeckResults. For that to be
      .           /// the case, the HirId must have the same `owner` as all the other IDs in
      .           /// this table (signified by `hir_owner`). Otherwise the HirId
      .           /// would be in a different frame of reference and using its `local_id`
      .           /// would result in lookup errors, or worse, in silently wrong data being
      .           /// stored/returned.
      .           #[inline]
      .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
  7,933 ( 0.00%)      if hir_id.owner != hir_owner {
      .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
      .               }
      .           }
      .           
      .           #[cold]
      .           #[inline(never)]
      .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
      .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
      .           }
      .           
      .           impl<'a, V> LocalTableInContext<'a, V> {
      .               pub fn contains_key(&self, id: hir::HirId) -> bool {
      .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.data.contains_key(&id.local_id)
      .               }
      .           
  6,055 ( 0.00%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
  1,236 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
  1,236 ( 0.00%)          self.data.get(&id.local_id)
  4,850 ( 0.00%)      }
      .           
      .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
      .                   self.data.iter()
      .               }
      .           }
      .           
      .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
      .               type Output = V;
      .           
    186 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
      .                   self.get(key).expect("LocalTableInContext: key not found")
    124 ( 0.00%)      }
      .           }
      .           
      .           pub struct LocalTableInContextMut<'a, V> {
      .               hir_owner: LocalDefId,
      .               data: &'a mut ItemLocalMap<V>,
      .           }
      .           
      .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
      .               pub treat_byte_string_as_slice: ItemLocalSet,
      .           
      .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
      .               /// on closure size.
      .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
      .           }
      .           
      .           impl<'tcx> TypeckResults<'tcx> {
  1,086 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
 12,851 ( 0.00%)          TypeckResults {
      .                       hir_owner,
      .                       type_dependent_defs: Default::default(),
      .                       field_indices: Default::default(),
      .                       user_provided_types: Default::default(),
      .                       user_provided_sigs: Default::default(),
      .                       node_types: Default::default(),
      .                       node_substs: Default::default(),
      .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
      .                       tainted_by_errors: None,
      .                       concrete_opaque_types: Default::default(),
      .                       closure_min_captures: Default::default(),
      .                       closure_fake_reads: Default::default(),
      .                       generator_interior_types: ty::Binder::dummy(Default::default()),
      .                       treat_byte_string_as_slice: Default::default(),
      .                       closure_size_eval: Default::default(),
      .                   }
  1,086 ( 0.00%)      }
      .           
      .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
  1,038 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
    692 ( 0.00%)          match *qpath {
  1,998 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
      .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
      .                           .type_dependent_def(id)
     78 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
      .                   }
  1,730 ( 0.00%)      }
      .           
      4 ( 0.00%)      pub fn type_dependent_defs(
      .                   &self,
      .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
     92 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
      4 ( 0.00%)      }
      .           
     69 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
    145 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
    138 ( 0.00%)      }
      .           
    252 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
      .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
    252 ( 0.00%)      }
      .           
    551 ( 0.00%)      pub fn type_dependent_defs_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
    551 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
    551 ( 0.00%)      }
      .           
      .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
     58 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
     16 ( 0.00%)      }
      .           
      .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
     78 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
     39 ( 0.00%)      }
      .           
      .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
    258 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    129 ( 0.00%)      }
      .           
      .               pub fn user_provided_types_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
     20 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
     10 ( 0.00%)      }
      .           
      .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
  1,234 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
    617 ( 0.00%)      }
      .           
      .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
  2,074 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
  1,037 ( 0.00%)      }
      .           
  8,076 ( 0.00%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
  1,346 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
      .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
      .                   })
  6,730 ( 0.00%)      }
      .           
  1,737 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
  1,737 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_types.get(&id.local_id).cloned()
  3,474 ( 0.00%)      }
      .           
      .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
    122 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
     61 ( 0.00%)      }
      .           
    568 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
    568 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
  1,136 ( 0.00%)      }
      .           
    476 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
    476 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_substs.get(&id.local_id).cloned()
    952 ( 0.00%)      }
      .           
      .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
      .               // doesn't provide type parameter substitutions.
      .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
    144 ( 0.00%)          self.node_type(pat.hir_id)
      .               }
      .           
      .               // Returns the type of an expression as a monotype.
      .               //
      .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
      .               // some cases, we insert `Adjustment` annotations such as auto-deref or
      .               // auto-ref.  The type returned by this function does not consider such
      .               // adjustments.  See `expr_ty_adjusted()` instead.
      .               //
      .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
      .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
      .               // instead of "fn(ty) -> T with T = isize".
      .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
  1,503 ( 0.00%)          self.node_type(expr.hir_id)
      .               }
      .           
      .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
  1,493 ( 0.00%)          self.node_type_opt(expr.hir_id)
      .               }
      .           
      .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
    756 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
    378 ( 0.00%)      }
      .           
      .               pub fn adjustments_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
  1,280 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
    640 ( 0.00%)      }
      .           
    687 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
  1,374 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
      .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
  1,374 ( 0.00%)      }
      .           
      .               /// Returns the type of `expr`, considering any `Adjustment`
      .               /// entry recorded for that expression.
    135 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
     27 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
     56 ( 0.00%)      }
      .           
     45 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
      9 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
     24 ( 0.00%)      }
      .           
     88 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
      .                   // Only paths and method calls/overloaded operators have
      .                   // entries in type_dependent_defs, ignore the former here.
    176 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
      .                       return false;
      .                   }
      .           
    228 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
    176 ( 0.00%)      }
      .           
    468 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
      .                   self.pat_binding_modes().get(id).copied().or_else(|| {
      .                       s.delay_span_bug(sp, "missing binding mode");
      .                       None
      .                   })
    624 ( 0.00%)      }
      .           
      .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
    386 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
    115 ( 0.00%)      }
      .           
      .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
    208 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
    104 ( 0.00%)      }
      .           
      .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    414 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
    207 ( 0.00%)      }
      .           
      .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
    148 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
     74 ( 0.00%)      }
      .           
      .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
      .               /// by the closure.
    224 ( 0.00%)      pub fn closure_min_captures_flattened(
      .                   &self,
      .                   closure_def_id: DefId,
      .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
      .                   self.closure_min_captures
      .                       .get(&closure_def_id)
      .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
      .                       .into_iter()
      .                       .flatten()
    280 ( 0.00%)      }
      .           
      .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
    112 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
     56 ( 0.00%)      }
      .           
      .               pub fn closure_kind_origins_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
      .               }
      .           
      .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
    236 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
    118 ( 0.00%)      }
      .           
      .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
    124 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
     62 ( 0.00%)      }
      .           
      .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    112 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
     56 ( 0.00%)      }
      .           
      .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
      .               }
      .           
      .               pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
      .                   validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
      .                   self.coercion_casts.contains(&hir_id.local_id)
      .               }
      .           
      .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
      .                   self.coercion_casts.insert(id);
      .               }
      .           
      .               pub fn coercion_casts(&self) -> &ItemLocalSet {
     56 ( 0.00%)          &self.coercion_casts
     56 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
      .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
      .                   let ty::TypeckResults {
      .                       hir_owner,
      .                       ref type_dependent_defs,
      .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
      .                   const START_INDEX = 0,
      .               }
      .           }
      .           
      .           /// Mapping of type annotation indices to canonical user type annotations.
      .           pub type CanonicalUserTypeAnnotations<'tcx> =
      .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
      .           
     14 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
      .           pub struct CanonicalUserTypeAnnotation<'tcx> {
      .               pub user_ty: CanonicalUserType<'tcx>,
      .               pub span: Span,
      7 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
      .           }
      .           
      .           /// Canonicalized user type annotation.
      .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
      .           
      .           impl<'tcx> CanonicalUserType<'tcx> {
      .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
      .               /// i.e., each thing is mapped to a canonical variable with the same index.
      5 ( 0.00%)      pub fn is_identity(&self) -> bool {
     10 ( 0.00%)          match self.value {
      .                       UserType::Ty(_) => false,
      .                       UserType::TypeOf(_, user_substs) => {
      5 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
      .                               return false;
      .                           }
      .           
      .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
      .                               match kind.unpack() {
      6 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
      .                                       ty::Bound(debruijn, b) => {
      .                                           // We only allow a `ty::INNERMOST` index in substitutions.
      3 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
      .                                           cvar == b.var
      .                                       }
      .                                       _ => false,
      .                                   },
      .           
      .                                   GenericArgKind::Lifetime(r) => match r {
      .                                       ty::ReLateBound(debruijn, br) => {
      .                                           // We only allow a `ty::INNERMOST` index in substitutions.
-- line 861 ----------------------------------------
-- line 872 ----------------------------------------
      .                                           cvar == b
      .                                       }
      .                                       _ => false,
      .                                   },
      .                               }
      .                           })
      .                       }
      .                   }
     10 ( 0.00%)      }
      .           }
      .           
      .           /// A user-given type annotation attached to a constant. These arise
      .           /// from constants that are named via paths, like `Foo::<A>::new` and
      .           /// so forth.
     42 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
    101 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
      .           pub enum UserType<'tcx> {
      .               Ty(Ty<'tcx>),
      .           
      .               /// The canonical type is the result of `type_of(def_id)` with the
      .               /// given substitutions applied.
      .               TypeOf(DefId, UserSubsts<'tcx>),
      .           }
      .           
      .           impl<'tcx> CommonTypes<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
    111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
      .           
      .                   CommonTypes {
      .                       unit: mk(Tuple(List::empty())),
      .                       bool: mk(Bool),
      .                       char: mk(Char),
      .                       never: mk(Never),
      .                       isize: mk(Int(ty::IntTy::Isize)),
      .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
      .           
      .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> CommonLifetimes<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
     67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
      .           
      .                   CommonLifetimes {
      5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
      5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
      5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> CommonConsts<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
      6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
      .           
      .                   CommonConsts {
      .                       unit: mk_const(ty::Const {
      .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
      .                           ty: types.unit,
      .                       }),
      .                   }
      .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
      .           
      .               /// Stores memory for globals (statics/consts).
      .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
      .           
      .               output_filenames: Arc<OutputFilenames>,
      .           }
      .           
      .           impl<'tcx> TyCtxt<'tcx> {
  2,440 ( 0.00%)      pub fn typeck_opt_const_arg(
      .                   self,
      .                   def: ty::WithOptConstParam<LocalDefId>,
      .               ) -> &'tcx TypeckResults<'tcx> {
    976 ( 0.00%)          if let Some(param_did) = def.const_param_did {
      .                       self.typeck_const_arg((def.did, param_did))
      .                   } else {
      .                       self.typeck(def.did)
      .                   }
  1,952 ( 0.00%)      }
      .           
    168 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
     56 ( 0.00%)          self.arena.alloc(Steal::new(thir))
    224 ( 0.00%)      }
      .           
  1,120 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
    224 ( 0.00%)          self.arena.alloc(Steal::new(mir))
  1,568 ( 0.00%)      }
      .           
    224 ( 0.00%)      pub fn alloc_steal_promoted(
      .                   self,
      .                   promoted: IndexVec<Promoted, Body<'tcx>>,
      .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
     56 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
    280 ( 0.00%)      }
      .           
    171 ( 0.00%)      pub fn alloc_adt_def(
      .                   self,
      .                   did: DefId,
      .                   kind: AdtKind,
      .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
      .                   repr: ReprOptions,
      .               ) -> &'tcx ty::AdtDef {
    304 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
     76 ( 0.00%)      }
      .           
      .               /// Allocates a read-only byte or string literal for `mir::interpret`.
      .               pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
      .                   // Create an allocation that just contains these bytes.
      .                   let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
      .                   let alloc = self.intern_const_alloc(alloc);
      .                   self.create_memory_alloc(alloc)
      .               }
      .           
      .               /// Returns a range of the start/end indices specified with the
      .               /// `rustc_layout_scalar_valid_range` attribute.
      .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
    448 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
    224 ( 0.00%)          let attrs = self.get_attrs(def_id);
    952 ( 0.00%)          let get = |name| {
    224 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
      .                           Some(attr) => attr,
      .                           None => return Bound::Unbounded,
      .                       };
      .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
      .                       if let Some(
      .                           &[
      .                               ast::NestedMetaItem::Literal(ast::Lit {
      .                                   kind: ast::LitKind::Int(a, _), ..
-- line 1111 ----------------------------------------
-- line 1114 ----------------------------------------
      .                       ) = attr.meta_item_list().as_deref()
      .                       {
      .                           Bound::Included(a)
      .                       } else {
      .                           self.sess
      .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
      .                           Bound::Unbounded
      .                       }
  1,120 ( 0.00%)          };
    336 ( 0.00%)          (
    336 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
    168 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
      .                   )
    448 ( 0.00%)      }
      .           
      .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
      .                   value.lift_to_tcx(self)
      .               }
      .           
      .               /// Creates a type context and call the closure with a `TyCtxt` reference
      .               /// to the context. The closure enforces that the type context and any interned
      .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
      .               /// reference to the context, to allow formatting values that need it.
     23 ( 0.00%)      pub fn create_global_ctxt(
      .                   s: &'tcx Session,
      .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
      .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
      .                   resolutions: ty::ResolverOutputs,
      .                   krate: &'tcx hir::Crate<'tcx>,
      .                   dep_graph: DepGraph,
      .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
      .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
      .                   query_kinds: &'tcx [DepKindStruct],
      .                   crate_name: &str,
      .                   output_filenames: OutputFilenames,
      .               ) -> GlobalCtxt<'tcx> {
      1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
      .                       s.fatal(&err);
      .                   });
      .                   let interners = CtxtInterners::new(arena);
      .                   let common_types = CommonTypes::new(&interners);
      .                   let common_lifetimes = CommonLifetimes::new(&interners);
      .                   let common_consts = CommonConsts::new(&interners, &common_types);
      .           
    127 ( 0.00%)          GlobalCtxt {
      .                       sess: s,
      6 ( 0.00%)              lint_store,
      .                       arena,
      2 ( 0.00%)              interners,
      5 ( 0.00%)              dep_graph,
      4 ( 0.00%)              untracked_resolutions: resolutions,
      2 ( 0.00%)              prof: s.prof.clone(),
      .                       types: common_types,
      .                       lifetimes: common_lifetimes,
      .                       consts: common_consts,
      .                       untracked_crate: krate,
      .                       on_disk_cache,
      .                       queries,
      .                       query_caches: query::QueryCaches::default(),
      .                       query_kinds,
      .                       ty_rcache: Default::default(),
      .                       pred_rcache: Default::default(),
      .                       selection_cache: Default::default(),
      .                       evaluation_cache: Default::default(),
      1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
      .                       data_layout,
      .                       alloc_map: Lock::new(interpret::AllocMap::new()),
      .                       output_filenames: Arc::new(output_filenames),
      .                   }
      9 ( 0.00%)      }
      .           
      .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
      .                   &self.query_kinds[k as usize]
      .               }
      .           
      .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
      .               #[track_caller]
      .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
      .                   ty: Ty<'tcx>,
      .                   span: S,
      .                   msg: &str,
      .               ) -> &'tcx Const<'tcx> {
      .                   self.sess.delay_span_bug(span, msg);
      .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
      .               }
      .           
    371 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
     53 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
    404 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
    424 ( 0.00%)      }
      .           
      .               /// Obtain all lang items of this crate and all dependencies (recursively)
 67,732 ( 0.02%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
      .                   self.get_lang_items(())
 87,084 ( 0.03%)      }
      .           
      .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
      .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
     28 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
      .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
     32 ( 0.00%)      }
      .           
      .               /// Obtain the diagnostic item's name
    532 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
      .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
    608 ( 0.00%)      }
      .           
      .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
    469 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
      .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
    536 ( 0.00%)      }
      .           
    602 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
      .                   self.stability_index(())
    774 ( 0.00%)      }
      .           
 12,915 ( 0.00%)      pub fn features(self) -> &'tcx rustc_feature::Features {
      .                   self.features_query(())
 14,760 ( 0.00%)      }
      .           
    628 ( 0.00%)      pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
      .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
  4,269 ( 0.00%)          if let Some(id) = id.as_local() {
      .                       self.untracked_resolutions.definitions.def_key(id)
      .                   } else {
  3,365 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
      .                   }
    526 ( 0.00%)      }
      .           
      .               /// Converts a `DefId` into its fully expanded `DefPath` (every
      .               /// `DefId` is really just an interned `DefPath`).
      .               ///
      .               /// Note that if `id` is not local to this crate, the result will
      .               ///  be a non-local `DefPath`.
      8 ( 0.00%)      pub fn def_path(self, id: DefId) -> rustc_hir::definitions::DefPath {
      .                   // Accessing the DefPath is ok, since it is part of DefPathHash.
     12 ( 0.00%)          if let Some(id) = id.as_local() {
      3 ( 0.00%)              self.untracked_resolutions.definitions.def_path(id)
      .                   } else {
     15 ( 0.00%)              self.untracked_resolutions.cstore.def_path(id)
      .                   }
     12 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
      .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
    493 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
      .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
      .                   } else {
    372 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
      .                   if crate_num == LOCAL_CRATE {
      .                       self.sess.local_stable_crate_id()
      .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
      .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
      .                       self.def_path(def_id).to_string_no_crate_verbose()
      .                   )
      .               }
      .           
      .               /// Note that this is *untracked* and should only be used within the query
      .               /// system if the result is otherwise tracked through queries
      .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
 36,174 ( 0.01%)          &*self.untracked_resolutions.cstore
 18,087 ( 0.01%)      }
      .           
      .               /// Note that this is *untracked* and should only be used within the query
      .               /// system if the result is otherwise tracked through queries
      .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
      .                   &self.untracked_resolutions.definitions
      .               }
      .           
      .               #[inline(always)]
      .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
    140 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
    585 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
      .               }
      .           
      .               #[inline(always)]
      .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
      .                   let resolutions = &self.gcx.untracked_resolutions;
      .                   StableHashingContext::ignore_spans(
      .                       self.sess,
      .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
      .               /// If `true`, we should use the MIR-based borrowck, but also
      .               /// fall back on the AST borrowck if the MIR-based one errors.
      .               pub fn migrate_borrowck(self) -> bool {
      .                   self.borrowck_mode().migrate()
      .               }
      .           
      .               /// What mode(s) of borrowck should we run? AST? MIR? both?
      .               /// (Also considers the `#![feature(nll)]` setting.)
    112 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
      .                   // Here are the main constraints we need to deal with:
      .                   //
      .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
      .                   //    synonymous with no `-Z borrowck=...` flag at all.
      .                   //
      .                   // 2. We want to allow developers on the Nightly channel
      .                   //    to opt back into the "hard error" mode for NLL,
      .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
      .                   //   errors. (To simplify the code here, it now even overrides
      .                   //   a user's attempt to specify `-Z borrowck=compare`, which
      .                   //   we arguably do not need anymore and should remove.)
      .                   //
      .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
      .                   //
      .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
      .           
    168 ( 0.00%)          if self.features().nll {
      .                       return BorrowckMode::Mir;
      .                   }
      .           
     56 ( 0.00%)          self.sess.opts.borrowck_mode
    224 ( 0.00%)      }
      .           
      .               /// If `true`, we should use lazy normalization for constants, otherwise
      .               /// we still evaluate them eagerly.
      .               #[inline]
      .               pub fn lazy_normalization(self) -> bool {
     85 ( 0.00%)          let features = self.features();
      .                   // Note: We only use lazy normalization for generic const expressions.
     51 ( 0.00%)          features.generic_const_exprs
      .               }
      .           
      .               #[inline]
      .               pub fn local_crate_exports_generics(self) -> bool {
      .                   debug_assert!(self.sess.opts.share_generics());
      .           
     14 ( 0.00%)          self.sess.crate_types().iter().any(|crate_type| {
     28 ( 0.00%)              match crate_type {
      .                           CrateType::Executable
      .                           | CrateType::Staticlib
      .                           | CrateType::ProcMacro
      .                           | CrateType::Cdylib => false,
      .           
      .                           // FIXME rust-lang/rust#64319, rust-lang/rust#64872:
      .                           // We want to block export of generics from dylibs,
      .                           // but we must fix rust-lang/rust#65890 before we can
-- line 1450 ----------------------------------------
-- line 1540 ----------------------------------------
      .                       // FIXME(#42706) -- in some cases, we could do better here.
      .                       return true;
      .                   }
      .                   false
      .               }
      .           
      .               /// Determines whether identifiers in the assembly have strict naming rules.
      .               /// Currently, only NVPTX* targets need it.
    206 ( 0.00%)      pub fn has_strict_asm_symbol_naming(self) -> bool {
    206 ( 0.00%)          self.sess.target.arch.contains("nvptx")
    412 ( 0.00%)      }
      .           
      .               /// Returns `&'static core::panic::Location<'static>`.
      .               pub fn caller_location_ty(self) -> Ty<'tcx> {
      .                   self.mk_imm_ref(
      .                       self.lifetimes.re_static,
      .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
      .                           .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
      .                   )
      .               }
      .           
      .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
    286 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
    208 ( 0.00%)          match self.def_kind(def_id) {
      .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
      .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
      .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
      .                       },
    468 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
      .                   }
    234 ( 0.00%)      }
      .           
    350 ( 0.00%)      pub fn type_length_limit(self) -> Limit {
      .                   self.limits(()).type_length_limit
    400 ( 0.00%)      }
      .           
  7,707 ( 0.00%)      pub fn recursion_limit(self) -> Limit {
      .                   self.limits(()).recursion_limit
  8,808 ( 0.00%)      }
      .           
    777 ( 0.00%)      pub fn move_size_limit(self) -> Limit {
      .                   self.limits(()).move_size_limit
    888 ( 0.00%)      }
      .           
    406 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
      .                   self.limits(()).const_eval_limit
    464 ( 0.00%)      }
      .           
      .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
      .                   iter::once(LOCAL_CRATE)
      .                       .chain(self.crates(()).iter().copied())
      .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
      .               }
      .           }
      .           
-- line 1594 ----------------------------------------
-- line 1614 ----------------------------------------
      .               fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted>;
      .           }
      .           
      .           macro_rules! nop_lift {
      .               ($set:ident; $ty:ty => $lifted:ty) => {
      .                   impl<'a, 'tcx> Lift<'tcx> for $ty {
      .                       type Lifted = $lifted;
      .                       fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {
    100 ( 0.00%)                  if tcx.interners.$set.contains_pointer_to(&Interned(self)) {
      .                               Some(unsafe { mem::transmute(self) })
      .                           } else {
      .                               None
      .                           }
      .                       }
      .                   }
      .               };
      .           }
-- line 1630 ----------------------------------------
-- line 1684 ----------------------------------------
      .               /// This is the implicit state of rustc. It contains the current
      .               /// `TyCtxt` and query. It is updated when creating a local interner or
      .               /// executing a new query. Whenever there's a `TyCtxt` value available
      .               /// you should also have access to an `ImplicitCtxt` through the functions
      .               /// in this module.
      .               #[derive(Clone)]
      .               pub struct ImplicitCtxt<'a, 'tcx> {
      .                   /// The current `TyCtxt`.
      2 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
      .           
      .                   /// The current query job, if any. This is updated by `JobOwner::start` in
      .                   /// `ty::query::plumbing` when executing a query.
      .                   pub query: Option<query::QueryJobId<DepKind>>,
      .           
      .                   /// Where to store diagnostics for the current query job, if any.
      .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
      .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
      .                   pub layout_depth: usize,
      .           
      .                   /// The current dep graph task. This is used to add dependencies to queries
      .                   /// when executing them.
      .                   pub task_deps: TaskDepsRef<'a>,
      .               }
      .           
      .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
      5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
      .                       let tcx = TyCtxt { gcx };
     25 ( 0.00%)              ImplicitCtxt {
      .                           tcx,
      .                           query: None,
      .                           diagnostics: None,
      .                           layout_depth: 0,
      .                           task_deps: TaskDepsRef::Ignore,
      .                       }
      5 ( 0.00%)          }
      .               }
      .           
      .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
      .               /// to `value` during the call to `f`. It is restored to its previous value after.
      .               /// This is used to set the pointer to the new `ImplicitCtxt`.
      .               #[cfg(parallel_compiler)]
      .               #[inline]
      .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
      .           
      .               /// Sets TLV to `value` during the call to `f`.
      .               /// It is restored to its previous value after.
      .               /// This is used to set the pointer to the new `ImplicitCtxt`.
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
      .                   let old = get_tlv();
 23,278 ( 0.01%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
      .                   TLV.with(|tlv| tlv.set(value));
      .                   f()
      .               }
      .           
      .               /// Gets the pointer to the current `ImplicitCtxt`.
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
      .               }
      .           
      .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
      .               #[inline]
      .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
      .               where
      .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
      .               {
      1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
      .               }
      .           
      .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
      .               #[inline]
      .               pub fn with_context_opt<F, R>(f: F) -> R
      .               where
      .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
      .               {
      .                   let context = get_tlv();
 95,661 ( 0.03%)          if context == 0 {
      .                       f(None)
      .                   } else {
      .                       // We could get an `ImplicitCtxt` pointer from another thread.
      .                       // Ensure that `ImplicitCtxt` is `Sync`.
      .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
      .           
      .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
      .                   }
-- line 1789 ----------------------------------------
-- line 1791 ----------------------------------------
      .           
      .               /// Allows access to the current `ImplicitCtxt`.
      .               /// Panics if there is no `ImplicitCtxt` available.
      .               #[inline]
      .               pub fn with_context<F, R>(f: F) -> R
      .               where
      .                   F: for<'a, 'tcx> FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
      .               {
     27 ( 0.00%)          with_context_opt(|opt_context| f(opt_context.expect("no ImplicitCtxt stored in tls")))
      .               }
      .           
      .               /// Allows access to the current `ImplicitCtxt` whose tcx field is the same as the tcx argument
      .               /// passed in. This means the closure is given an `ImplicitCtxt` with the same `'tcx` lifetime
      .               /// as the `TyCtxt` passed in.
      .               /// This will panic if you pass it a `TyCtxt` which is different from the current
      .               /// `ImplicitCtxt`'s `tcx` field.
      .               #[inline]
      .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
      .               where
      .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
      .               {
      .                   with_context(|context| unsafe {
 47,527 ( 0.01%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
      .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
 47,392 ( 0.01%)              f(context)
      .                   })
      .               }
      .           
      .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
      .               /// Panics if there is no `ImplicitCtxt` available.
      .               #[inline]
      .               pub fn with<F, R>(f: F) -> R
      .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
      .               fn into_pointer(&self) -> *const () {
      .                   self.0 as *const _ as *const ()
      .               }
      .           }
      .           
      .           #[allow(rustc::usage_of_ty_tykind)]
      .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
      .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
 11,559 ( 0.00%)          &self.0.kind()
      .               }
      .           }
      .           
      .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
      .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
      .           
      .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
 21,592 ( 0.01%)          self.0.kind().hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
  1,236 ( 0.00%)          &self.0.kind
      .               }
      .           }
      .           
      .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
      .           
      .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
    892 ( 0.00%)          self.0.kind.hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
      .               fn borrow<'a>(&'a self) -> &'a [T] {
 11,782 ( 0.00%)          &self.0[..]
      .               }
      .           }
      .           
      .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
      .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
      .           
      .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  7,672 ( 0.00%)          self.0[..].hash(s)
      .               }
      .           }
      .           
      .           macro_rules! direct_interners {
      .               ($($name:ident: $method:ident($ty:ty),)+) => {
      .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
      .                       fn borrow<'a>(&'a self) -> &'a $ty {
  4,362 ( 0.00%)                  &self.0
      .                       }
      .                   }
      .           
      .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
      .                       fn eq(&self, other: &Self) -> bool {
      .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
      .                           // equals `x == y`.
      .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
      .                   }
      .           
      .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
      .           
      .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
      .                       fn hash<H: Hasher>(&self, s: &mut H) {
      .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
      .                           // x.hash(s)`.
 27,135 ( 0.01%)                  self.0.hash(s)
      .                       }
      .                   }
      .           
      .                   impl<'tcx> TyCtxt<'tcx> {
 74,669 ( 0.02%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
 45,718 ( 0.01%)                  self.interners.$name.intern(v, |v| {
  5,466 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
      .                           }).0
 83,754 ( 0.03%)              }
      .                   })+
      .               }
      .           }
      .           
      .           direct_interners! {
      .               region: mk_region(RegionKind),
      .               const_: mk_const(Const<'tcx>),
      .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
      .               adt_def: intern_adt_def(AdtDef),
      .               stability: intern_stability(attr::Stability),
      .               const_stability: intern_const_stability(attr::ConstStability),
      .           }
      .           
      .           macro_rules! slice_interners {
      .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
      .                   impl<'tcx> TyCtxt<'tcx> {
170,338 ( 0.05%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
      .                           self.interners.$field.intern_ref(v, || {
      .                               Interned(List::from_arena(&*self.arena, v))
      .                           }).0
151,488 ( 0.05%)              })+
      .                   }
      .               );
      .           }
      .           
      .           slice_interners!(
      .               type_list: _intern_type_list(Ty<'tcx>),
      .               substs: _intern_substs(GenericArg<'tcx>),
      .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2188 ----------------------------------------
      .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
      .                   })
      .               }
      .           
      .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
      .               /// `*r == kind`.
      .               #[inline]
      .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
  2,064 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
      .               }
      .           
      .               #[allow(rustc::usage_of_ty_tykind)]
      .               #[inline]
      .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
119,940 ( 0.04%)          self.interners.intern_ty(st)
      .               }
      .           
      .               #[inline]
      .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
 20,587 ( 0.01%)          let inner = self.interners.intern_predicate(binder);
      .                   Predicate { inner }
      .               }
      .           
      .               #[inline]
 11,456 ( 0.00%)      pub fn reuse_or_mk_predicate(
      .                   self,
      .                   pred: Predicate<'tcx>,
      .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
      .               ) -> Predicate<'tcx> {
    683 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
 11,456 ( 0.00%)      }
      .           
      .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
      .                   match tm {
      .                       IntTy::Isize => self.types.isize,
      .                       IntTy::I8 => self.types.i8,
      .                       IntTy::I16 => self.types.i16,
      .                       IntTy::I32 => self.types.i32,
      .                       IntTy::I64 => self.types.i64,
      .                       IntTy::I128 => self.types.i128,
      .                   }
      .               }
      .           
      .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
     60 ( 0.00%)          match tm {
      .                       UintTy::Usize => self.types.usize,
      .                       UintTy::U8 => self.types.u8,
      .                       UintTy::U16 => self.types.u16,
      .                       UintTy::U32 => self.types.u32,
      .                       UintTy::U64 => self.types.u64,
      .                       UintTy::U128 => self.types.u128,
      .                   }
     60 ( 0.00%)      }
      .           
      .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
      .                   match tm {
      .                       FloatTy::F32 => self.types.f32,
      .                       FloatTy::F64 => self.types.f64,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn mk_static_str(self) -> Ty<'tcx> {
      2 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
      .               }
      .           
      .               #[inline]
      .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   // Take a copy of substs so that we own the vectors inside.
      .                   self.mk_ty(Adt(def, substs))
      .               }
      .           
-- line 2259 ----------------------------------------
-- line 2329 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
      .               }
      .           
      .               #[inline]
     93 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
      .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
     96 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(Slice(ty))
      .               }
      .           
      .               #[inline]
      .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
      8 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
      8 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
      .               }
      .           
      .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
      .                   iter.intern_with(|ts| {
      .                       let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
    270 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
      .                   })
      .               }
      .           
      .               #[inline]
      .               pub fn mk_unit(self) -> Ty<'tcx> {
     46 ( 0.00%)          self.types.unit
      .               }
      .           
      .               #[inline]
      .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
      .                   if self.features().never_type_fallback { self.types.never } else { self.types.unit }
      .               }
      .           
      .               #[inline]
      .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(FnDef(def_id, substs))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
     28 ( 0.00%)          self.mk_ty(FnPtr(fty))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_dynamic(
      .                   self,
      .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
      .                   reg: ty::Region<'tcx>,
      .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
      .                   self.mk_ty_infer(TyVar(v))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
    138 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
      .               }
      .           
      .               #[inline]
      .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
      .                   self.mk_ty_infer(IntVar(v))
      .               }
      .           
      .               #[inline]
-- line 2428 ----------------------------------------
-- line 2445 ----------------------------------------
      .                   self.mk_ty(Param(ParamTy { index, name }))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
      .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
      .               }
      .           
    434 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
    286 ( 0.00%)          match param.kind {
      .                       GenericParamDefKind::Lifetime => {
     72 ( 0.00%)                  self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
      .                       }
    100 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
      .                       GenericParamDefKind::Const { .. } => {
      .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
      .                       }
      .                   }
    434 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(Opaque(def_id, substs))
      .               }
      .           
     22 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
     22 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
     44 ( 0.00%)      }
      .           
      1 ( 0.00%)      pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
      3 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Deref)
      2 ( 0.00%)      }
      .           
      .               pub fn mk_place_downcast(
      .                   self,
      .                   place: Place<'tcx>,
      .                   adt_def: &'tcx AdtDef,
      .                   variant_index: VariantIdx,
      .               ) -> Place<'tcx> {
      .                   self.mk_place_elem(
-- line 2484 ----------------------------------------
-- line 2497 ----------------------------------------
      .           
      .               pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
      .                   self.mk_place_elem(place, PlaceElem::Index(index))
      .               }
      .           
      .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
      .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
      .               /// flight.
    207 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
      .                   let mut projection = place.projection.to_vec();
      .                   projection.push(elem);
      .           
      .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
    230 ( 0.00%)      }
      .           
    217 ( 0.00%)      pub fn intern_poly_existential_predicates(
      .                   self,
      .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
      .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
     31 ( 0.00%)          assert!(!eps.is_empty());
      .                   assert!(
      .                       eps.array_windows()
    130 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
      .                               != Ordering::Greater)
      .                   );
    124 ( 0.00%)          self._intern_poly_existential_predicates(eps)
    248 ( 0.00%)      }
      .           
      .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
      .                   // FIXME consider asking the input slice to be sorted to avoid
      .                   // re-interning permutations, in which case that would be asserted
      .                   // here.
    842 ( 0.00%)          if preds.is_empty() {
      .                       // The macro-generated method below asserts we don't intern an empty slice.
      .                       List::empty()
      .                   } else {
     74 ( 0.00%)              self._intern_predicates(preds)
      .                   }
  1,536 ( 0.00%)      }
      .           
      .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
  1,585 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
     94 ( 0.00%)      }
      .           
      .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
 29,420 ( 0.01%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
  3,780 ( 0.00%)      }
      .           
      .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
      .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
      .               }
      .           
      .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
  6,108 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
  5,504 ( 0.00%)      }
      .           
      .               pub fn intern_canonical_var_infos(
      .                   self,
      .                   ts: &[CanonicalVarInfo<'tcx>],
      .               ) -> CanonicalVarInfos<'tcx> {
    629 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
     22 ( 0.00%)      }
      .           
      .               pub fn intern_bound_variable_kinds(
      .                   self,
      .                   ts: &[ty::BoundVariableKind],
      .               ) -> &'tcx List<ty::BoundVariableKind> {
    527 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
    694 ( 0.00%)      }
      .           
      .               pub fn mk_fn_sig<I>(
      .                   self,
      .                   inputs: I,
      .                   output: I::Item,
      .                   c_variadic: bool,
      .                   unsafety: hir::Unsafety,
      .                   abi: abi::Abi,
      .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
      .               where
      .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
      .               {
      .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
    269 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
     43 ( 0.00%)              c_variadic,
     72 ( 0.00%)              unsafety,
     28 ( 0.00%)              abi,
      .                   })
      .               }
      .           
      .               pub fn mk_poly_existential_predicates<
      .                   I: InternAs<
      .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
      .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
      .                   >,
      .               >(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
     95 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
      .               }
      .           
      .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
      .                   iter.intern_with(|xs| self.intern_predicates(xs))
      .               }
      .           
      .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
    875 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
      .               }
      .           
      .               pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
114,105 ( 0.04%)          iter.intern_with(|xs| self.intern_substs(xs))
      .               }
      .           
      .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
 62,564 ( 0.02%)          iter.intern_with(|xs| self.intern_place_elems(xs))
      .               }
      .           
    576 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
      .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
  1,152 ( 0.00%)      }
      .           
      .               pub fn mk_bound_variable_kinds<
      .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
      .               >(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
  3,234 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
      .               }
      .           
      .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
      .               /// It stops at `bound` and just returns it if reached.
  4,774 ( 0.00%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
  4,774 ( 0.00%)          let hir = self.hir();
      .                   loop {
  6,174 ( 0.00%)              if id == bound {
      .                           return bound;
      .                       }
      .           
  6,880 ( 0.00%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
      .                           return id;
      .                       }
      .                       let next = hir.get_parent_node(id);
  4,128 ( 0.00%)              if next == id {
      .                           bug!("lint traversal reached the root of the crate");
      .                       }
      .                       id = next;
      .                   }
  6,820 ( 0.00%)      }
      .           
    712 ( 0.00%)      pub fn lint_level_at_node(
      .                   self,
      .                   lint: &'static Lint,
      .                   mut id: hir::HirId,
      .               ) -> (Level, LintLevelSource) {
      .                   let sets = self.lint_levels(());
      .                   loop {
  2,749 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
      .                           return pair;
      .                       }
    167 ( 0.00%)              let next = self.hir().get_parent_node(id);
    501 ( 0.00%)              if next == id {
      .                           bug!("lint traversal reached the root of the crate");
      .                       }
      .                       id = next;
      .                   }
    712 ( 0.00%)      }
      .           
     14 ( 0.00%)      pub fn struct_span_lint_hir(
      .                   self,
      .                   lint: &'static Lint,
      .                   hir_id: HirId,
      .                   span: impl Into<MultiSpan>,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
    158 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
     34 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
      8 ( 0.00%)      }
      .           
      .               pub fn struct_lint_node(
      .                   self,
      .                   lint: &'static Lint,
      .                   id: HirId,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
      .                   let (level, src) = self.lint_level_at_node(lint, id);
      .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
      .               }
      .           
    154 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
     44 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
      .                   let candidates = map.get(&id.local_id)?;
     44 ( 0.00%)          Some(&*candidates)
    176 ( 0.00%)      }
      .           
    700 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
      .                   debug!(?id, "named_region");
      .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
    900 ( 0.00%)      }
      .           
     36 ( 0.00%)      pub fn is_late_bound(self, id: HirId) -> bool {
      .                   self.is_late_bound_map(id.owner)
      2 ( 0.00%)              .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
     32 ( 0.00%)      }
      .           
    840 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
      .                   self.object_lifetime_defaults_map(id.owner)
  1,080 ( 0.00%)      }
      .           
    558 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
      .                   self.mk_bound_variable_kinds(
      .                       self.late_bound_vars_map(id.owner)
      .                           .and_then(|map| map.get(&id.local_id).cloned())
      .                           .unwrap_or_else(|| {
      .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
      .                           })
      .                           .iter(),
      .                   )
    558 ( 0.00%)      }
      .           
      .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
      .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
      .               }
      .           
      .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
      .               /// feature gates
     30 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
      3 ( 0.00%)          if self.is_const_fn_raw(def_id) {
      .                       match self.lookup_const_stability(def_id) {
      .                           Some(stability) if stability.level.is_unstable() => {
      .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
      .                               // corresponding feature gate.
      .                               self.features()
      .                                   .declared_lib_features
      .                                   .iter()
      .                                   .any(|&(sym, _)| sym == stability.feature)
-- line 2741 ----------------------------------------
-- line 2743 ----------------------------------------
      .                           // functions without const stability are either stable user written
      .                           // const fn or the user is using feature gates and we thus don't
      .                           // care what they do
      .                           _ => true,
      .                       }
      .                   } else {
      .                       false
      .                   }
     27 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> TyCtxtAt<'tcx> {
      .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
      .               #[track_caller]
      .               pub fn ty_error(self) -> Ty<'tcx> {
      .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
      .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
      .           }
      .           
      .           impl<I, T, R, E> InternAs<[T], R> for I
      .           where
      .               E: InternIteratorElement<T, R>,
      .               I: Iterator<Item = E>,
      .           {
      .               type Output = E::Output;
120,224 ( 0.04%)      fn intern_with<F>(self, f: F) -> Self::Output
      .               where
      .                   F: FnOnce(&[T]) -> R,
      .               {
 93,548 ( 0.03%)          E::intern_with(self, f)
100,350 ( 0.03%)      }
      .           }
      .           
      .           pub trait InternIteratorElement<T, R>: Sized {
      .               type Output;
      .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
      .           }
      .           
      .           impl<T, R> InternIteratorElement<T, R> for T {
      .               type Output = R;
  8,216 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
      .                   mut iter: I,
      .                   f: F,
      .               ) -> Self::Output {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
      .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
      .                   // `assert`.
 64,260 ( 0.02%)          match iter.size_hint() {
      .                       (0, Some(0)) => {
      3 ( 0.00%)                  assert!(iter.next().is_none());
      .                           f(&[])
      .                       }
      .                       (1, Some(1)) => {
      .                           let t0 = iter.next().unwrap();
      .                           assert!(iter.next().is_none());
 14,970 ( 0.00%)                  f(&[t0])
      .                       }
      .                       (2, Some(2)) => {
      .                           let t0 = iter.next().unwrap();
      .                           let t1 = iter.next().unwrap();
     29 ( 0.00%)                  assert!(iter.next().is_none());
  6,142 ( 0.00%)                  f(&[t0, t1])
      .                       }
     56 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
      .                   }
  6,237 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
      .           where
      .               T: Clone + 'a,
      .           {
      .               type Output = R;
    310 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
      .                   // This code isn't hot.
      .                   f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
    248 ( 0.00%)      }
      .           }
      .           
      .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
      .               type Output = Result<R, E>;
  9,728 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
      .                   mut iter: I,
      .                   f: F,
      .               ) -> Self::Output {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
      .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
      .                   // `assert`, unless a failure happens first, in which case the result
      .                   // will be an error anyway.
  7,190 ( 0.00%)          Ok(match iter.size_hint() {
      .                       (0, Some(0)) => {
      .                           assert!(iter.next().is_none());
      .                           f(&[])
      .                       }
      .                       (1, Some(1)) => {
     21 ( 0.00%)                  let t0 = iter.next().unwrap()?;
      .                           assert!(iter.next().is_none());
    265 ( 0.00%)                  f(&[t0])
      .                       }
      .                       (2, Some(2)) => {
     20 ( 0.00%)                  let t0 = iter.next().unwrap()?;
     20 ( 0.00%)                  let t1 = iter.next().unwrap()?;
     30 ( 0.00%)                  assert!(iter.next().is_none());
    440 ( 0.00%)                  f(&[t0, t1])
      .                       }
     20 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
      .                   })
 10,939 ( 0.00%)      }
      .           }
      .           
      .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
      .           // won't work for us.
      .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
 47,527 ( 0.01%)      t as *const () == u as *const ()
      .           }
      .           
      .           pub fn provide(providers: &mut ty::query::Providers) {
      2 ( 0.00%)      providers.in_scope_traits_map =
      .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
      3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
      2 ( 0.00%)      providers.module_reexports =
      .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
      2 ( 0.00%)      providers.crate_name = |tcx, id| {
      1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
      1 ( 0.00%)          tcx.crate_name
      .               };
      2 ( 0.00%)      providers.maybe_unused_trait_import =
      .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
      2 ( 0.00%)      providers.maybe_unused_extern_crates =
      .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
      2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
      .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
      .               };
      .           
     11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
      2 ( 0.00%)      providers.lookup_const_stability =
      .                   |tcx, id| tcx.stability().local_const_stability(id.expect_local());
      2 ( 0.00%)      providers.lookup_deprecation_entry =
    672 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
      2 ( 0.00%)      providers.extern_mod_stmt_cnum =
      .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
      3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
      3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
      2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
      1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
      7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
      .               };
      2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
      1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
      7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
      .               };
      2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
      1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
      .                   // We want to check if the panic handler was defined in this crate
      3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
      .               };
      .           }

236,950 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_query_system/src/query/plumbing.rs
--------------------------------------------------------------------------------
Ir               

-- line 43 ----------------------------------------
      .               pub(super) key_hash: u64,
      .               shard: usize,
      .           }
      .           
      .           // We compute the key's hash once and then use it for both the
      .           // shard lookup and the hashmap lookup. This relies on the fact
      .           // that both of them use `FxHasher`.
      .           fn hash_for_shard<K: Hash>(key: &K) -> u64 {
  1,220 ( 0.00%)      let mut hasher = FxHasher::default();
    248 ( 0.00%)      key.hash(&mut hasher);
     16 ( 0.00%)      hasher.finish()
      .           }
      .           
      .           impl<C: QueryCache> QueryCacheStore<C> {
    268 ( 0.00%)      pub(super) fn get_lookup<'tcx>(
      .                   &'tcx self,
      .                   key: &C::Key,
      .               ) -> (QueryLookup, LockGuard<'tcx, C::Sharded>) {
      .                   let key_hash = hash_for_shard(key);
      .                   let shard = get_shard_index_by_hash(key_hash);
      .                   let lock = self.shards.get_shard_by_index(shard).lock();
    980 ( 0.00%)          (QueryLookup { key_hash, shard }, lock)
    743 ( 0.00%)      }
      .           
      .               pub fn iter_results(&self, f: &mut dyn FnMut(&C::Key, &C::Value, DepNodeIndex)) {
      .                   self.cache.iter(&self.shards, f)
      .               }
      .           }
      .           
      .           struct QueryStateShard<D, K> {
      .               active: FxHashMap<K, QueryResult<D>>,
-- line 73 ----------------------------------------
-- line 190 ----------------------------------------
      .               ) -> TryGetJob<'b, CTX::DepKind, K>
      .               where
      .                   CTX: QueryContext,
      .               {
      .                   let shard = lookup.shard;
      .                   let mut state_lock = state.shards.get_shard_by_index(shard).lock();
      .                   let lock = &mut *state_lock;
      .           
 50,706 ( 0.02%)          match lock.active.entry(key) {
      .                       Entry::Vacant(entry) => {
      .                           // Generate an id unique within this shard.
 23,696 ( 0.01%)                  let id = lock.jobs.checked_add(1).unwrap();
 23,696 ( 0.01%)                  lock.jobs = id;
      .                           let id = QueryShardJobId(NonZeroU32::new(id).unwrap());
      .           
      .                           let job = tcx.current_query_job();
      .                           let job = QueryJob::new(id, span, job);
      .           
      .                           let key = entry.key().clone();
      .                           entry.insert(QueryResult::Started(job));
      .           
      .                           let global_id = QueryJobId::new(id, shard, dep_kind);
      .                           let owner = JobOwner { state, id: global_id, key };
  1,227 ( 0.00%)                  return TryGetJob::NotYetStarted(owner);
      .                       }
      .                       Entry::Occupied(mut entry) => {
      .                           match entry.get_mut() {
      .                               #[cfg(not(parallel_compiler))]
      .                               QueryResult::Started(job) => {
      .                                   let id = QueryJobId::new(job.id, shard, dep_kind);
      .           
      .                                   drop(state_lock);
-- line 221 ----------------------------------------
-- line 262 ----------------------------------------
      .                   cache: &QueryCacheStore<C>,
      .                   result: C::Value,
      .                   dep_node_index: DepNodeIndex,
      .               ) -> C::Stored
      .               where
      .                   C: QueryCache<Key = K>,
      .               {
      .                   // We can move out of `self` here because we `mem::forget` it below
 26,441 ( 0.01%)          let key = unsafe { ptr::read(&self.key) };
      .                   let state = self.state;
      .           
      .                   // Forget ourself so our destructor won't poison the query
      .                   mem::forget(self);
      .           
    562 ( 0.00%)          let (job, result) = {
      .                       let key_hash = hash_for_shard(&key);
      .                       let shard = get_shard_index_by_hash(key_hash);
      .                       let job = {
      .                           let mut lock = state.shards.get_shard_by_index(shard).lock();
      .                           match lock.active.remove(&key).unwrap() {
      .                               QueryResult::Started(job) => job,
      .                               QueryResult::Poisoned => panic!(),
      .                           }
      .                       };
      .                       let result = {
      .                           let mut lock = cache.shards.get_shard_by_index(shard).lock();
 46,853 ( 0.01%)                  cache.cache.complete(&mut lock, key, result, dep_node_index)
      .                       };
    736 ( 0.00%)              (job, result)
      .                   };
      .           
      .                   job.signal_complete();
      .                   result
      .               }
      .           }
      .           
      .           impl<'tcx, D, K> Drop for JobOwner<'tcx, D, K>
-- line 298 ----------------------------------------
-- line 347 ----------------------------------------
      .               Cycle(CycleError),
      .           }
      .           
      .           /// Checks if the query is already computed and in the cache.
      .           /// It returns the shard index and a lock guard to the shard,
      .           /// which will be used if the query is not in the cache and we need
      .           /// to compute it.
      .           #[inline]
 51,977 ( 0.02%)  pub fn try_get_cached<'a, CTX, C, R, OnHit>(
      .               tcx: CTX,
      .               cache: &'a QueryCacheStore<C>,
      .               key: &C::Key,
      .               // `on_hit` can be called while holding a lock to the query cache
      .               on_hit: OnHit,
      .           ) -> Result<R, QueryLookup>
      .           where
      .               C: QueryCache,
      .               CTX: DepContext,
      .               OnHit: FnOnce(&C::Stored) -> R,
      .           {
      .               cache.cache.lookup(cache, &key, |value, index| {
108,258 ( 0.03%)          if unlikely!(tcx.profiler().enabled()) {
      .                       tcx.profiler().query_cache_hit(index.into());
      .                   }
      .                   tcx.dep_graph().read_index(index);
 40,718 ( 0.01%)          on_hit(value)
      .               })
 58,520 ( 0.02%)  }
      .           
207,802 ( 0.07%)  fn try_execute_query<CTX, C>(
      .               tcx: CTX,
      .               state: &QueryState<CTX::DepKind, C::Key>,
      .               cache: &QueryCacheStore<C>,
      .               span: Span,
      .               key: C::Key,
      .               lookup: QueryLookup,
      .               dep_node: Option<DepNode<CTX::DepKind>>,
      .               query: &QueryVtable<CTX, C::Key, C::Value>,
-- line 384 ----------------------------------------
-- line 391 ----------------------------------------
      .               match JobOwner::<'_, CTX::DepKind, C::Key>::try_start(
      .                   &tcx,
      .                   state,
      .                   span,
      .                   key.clone(),
      .                   lookup,
      .                   query.dep_kind,
      .               ) {
 99,133 ( 0.03%)          TryGetJob::NotYetStarted(job) => {
265,958 ( 0.08%)              let (result, dep_node_index) = execute_job(tcx, key, dep_node, query, job.id);
 23,973 ( 0.01%)              let result = job.complete(cache, result, dep_node_index);
 32,966 ( 0.01%)              (result, Some(dep_node_index))
      .                   }
      .                   TryGetJob::Cycle(error) => {
      .                       let result = mk_cycle(tcx, error, query.handle_cycle_error, &cache.cache);
      .                       (result, None)
      .                   }
      .                   #[cfg(parallel_compiler)]
      .                   TryGetJob::JobCompleted(query_blocked_prof_timer) => {
      .                       let (v, index) = cache
-- line 410 ----------------------------------------
-- line 415 ----------------------------------------
      .                       if unlikely!(tcx.dep_context().profiler().enabled()) {
      .                           tcx.dep_context().profiler().query_cache_hit(index.into());
      .                       }
      .                       query_blocked_prof_timer.finish_with_query_invocation_id(index.into());
      .           
      .                       (v, Some(index))
      .                   }
      .               }
217,432 ( 0.07%)  }
      .           
      .           fn execute_job<CTX, K, V>(
      .               tcx: CTX,
      .               key: K,
      .               mut dep_node_opt: Option<DepNode<CTX::DepKind>>,
      .               query: &QueryVtable<CTX, K, V>,
      .               job_id: QueryJobId<CTX::DepKind>,
      .           ) -> (V, DepNodeIndex)
-- line 431 ----------------------------------------
-- line 432 ----------------------------------------
      .           where
      .               K: Clone + DepNodeParams<CTX::DepContext>,
      .               V: Debug,
      .               CTX: QueryContext,
      .           {
      .               let dep_graph = tcx.dep_context().dep_graph();
      .           
      .               // Fast path for when incr. comp. is off.
 23,696 ( 0.01%)      if !dep_graph.is_fully_enabled() {
      .                   let prof_timer = tcx.dep_context().profiler().query_provider();
 32,121 ( 0.01%)          let result = tcx.start_query(job_id, None, || query.compute(*tcx.dep_context(), key));
      .                   let dep_node_index = dep_graph.next_virtual_depnode_index();
      .                   prof_timer.finish_with_query_invocation_id(dep_node_index.into());
 21,750 ( 0.01%)          return (result, dep_node_index);
      .               }
      .           
      .               if !query.anon && !query.eval_always {
      .                   // `to_dep_node` is expensive for some `DepKind`s.
      .                   let dep_node =
      .                       dep_node_opt.get_or_insert_with(|| query.to_dep_node(*tcx.dep_context(), &key));
      .           
      .                   // The diagnostics for this query will be promoted to the current session during
-- line 453 ----------------------------------------
-- line 691 ----------------------------------------
      .           /// Executing `query::ensure(D)` is considered a read of the dep-node `D`.
      .           /// Returns true if the query should still run.
      .           ///
      .           /// This function is particularly useful when executing passes for their
      .           /// side-effects -- e.g., in order to report errors for erroneous programs.
      .           ///
      .           /// Note: The optimization is only available during incr. comp.
      .           #[inline(never)]
  6,136 ( 0.00%)  fn ensure_must_run<CTX, K, V>(
      .               tcx: CTX,
      .               key: &K,
      .               query: &QueryVtable<CTX, K, V>,
      .           ) -> (bool, Option<DepNode<CTX::DepKind>>)
      .           where
      .               K: crate::dep_graph::DepNodeParams<CTX::DepContext>,
      .               CTX: QueryContext,
      .           {
  1,534 ( 0.00%)      if query.eval_always {
      4 ( 0.00%)          return (true, None);
      .               }
      .           
      .               // Ensuring an anonymous query makes no sense
  1,530 ( 0.00%)      assert!(!query.anon);
      .           
      .               let dep_node = query.to_dep_node(*tcx.dep_context(), key);
      .           
      .               let dep_graph = tcx.dep_context().dep_graph();
  4,267 ( 0.00%)      match dep_graph.try_mark_green(tcx, &dep_node) {
      .                   None => {
      .                       // A None return from `try_mark_green` means that this is either
      .                       // a new dep node or that the dep node has already been marked red.
      .                       // Either way, we can't call `dep_graph.read()` as we don't have the
      .                       // DepNodeIndex. We must invoke the query itself. The performance cost
      .                       // this introduces should be negligible as we'll immediately hit the
      .                       // in-memory cache, or another query down the line will.
  4,590 ( 0.00%)              (true, Some(dep_node))
      .                   }
      .                   Some((_, dep_node_index)) => {
      .                       dep_graph.read_index(dep_node_index);
      .                       tcx.dep_context().profiler().query_cache_hit(dep_node_index.into());
      .                       (false, None)
      .                   }
      .               }
  6,136 ( 0.00%)  }
      .           
      .           pub enum QueryMode {
      .               Get,
      .               Ensure,
      .           }
      .           
238,034 ( 0.07%)  pub fn get_query<Q, CTX>(
      .               tcx: CTX,
      .               span: Span,
      .               key: Q::Key,
      .               lookup: QueryLookup,
      .               mode: QueryMode,
      .           ) -> Option<Q::Stored>
      .           where
      .               Q: QueryDescription<CTX>,
      .               Q::Key: DepNodeParams<CTX::DepContext>,
      .               CTX: QueryContext,
      .           {
      .               let query = Q::make_vtable(tcx, &key);
 48,563 ( 0.02%)      let dep_node = if let QueryMode::Ensure = mode {
  7,103 ( 0.00%)          let (must_run, dep_node) = ensure_must_run(tcx, &key, &query);
    767 ( 0.00%)          if !must_run {
      .                       return None;
      .                   }
  1,565 ( 0.00%)          dep_node
      .               } else {
      .                   None
      .               };
      .           
      .               debug!("ty::query::get_query<{}>(key={:?}, span={:?})", Q::NAME, key, span);
324,076 ( 0.10%)      let (result, dep_node_index) = try_execute_query(
      .                   tcx,
      .                   Q::query_state(tcx),
      .                   Q::query_cache(tcx),
      .                   span,
  2,065 ( 0.00%)          key,
      .                   lookup,
 90,881 ( 0.03%)          dep_node,
      .                   &query,
      .               );
 47,392 ( 0.01%)      if let Some(dep_node_index) = dep_node_index {
      .                   tcx.dep_context().dep_graph().read_index(dep_node_index)
      .               }
 10,448 ( 0.00%)      Some(result)
230,952 ( 0.07%)  }
      .           
      .           pub fn force_query<Q, CTX>(tcx: CTX, key: Q::Key, dep_node: DepNode<CTX::DepKind>)
      .           where
      .               Q: QueryDescription<CTX>,
      .               Q::Key: DepNodeParams<CTX::DepContext>,
      .               CTX: QueryContext,
      .           {
      .               // We may be concurrently trying both execute and force a query.
-- line 787 ----------------------------------------

205,956 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_query_system/src/query/plumbing.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs
--------------------------------------------------------------------------------
Ir               

-- line 504 ----------------------------------------
      .           use crate::panicking::{panic, panic_str};
      .           use crate::pin::Pin;
      .           use crate::{
      .               convert, hint, mem,
      .               ops::{self, ControlFlow, Deref, DerefMut},
      .           };
      .           
      .           /// The `Option` type. See [the module level documentation](self) for more.
213,021 ( 0.07%)  #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]
      .           #[rustc_diagnostic_item = "Option"]
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           pub enum Option<T> {
      .               /// No value.
      .               #[lang = "None"]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               None,
      .               /// Some value of type `T`.
      .               #[lang = "Some"]
      .               #[stable(feature = "rust1", since = "1.0.0")]
  2,246 ( 0.00%)      Some(#[stable(feature = "rust1", since = "1.0.0")] T),
      .           }
      .           
      .           /////////////////////////////////////////////////////////////////////////////
      .           // Type implementation
      .           /////////////////////////////////////////////////////////////////////////////
      .           
      .           impl<T> Option<T> {
      .               /////////////////////////////////////////////////////////////////////////
-- line 531 ----------------------------------------
-- line 542 ----------------------------------------
      .               ///
      .               /// let x: Option<u32> = None;
      .               /// assert_eq!(x.is_some(), false);
      .               /// ```
      .               #[must_use = "if you intended to assert that this has a value, consider `.unwrap()` instead"]
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
    942 ( 0.00%)      pub const fn is_some(&self) -> bool {
221,694 ( 0.07%)          matches!(*self, Some(_))
  2,355 ( 0.00%)      }
      .           
      .               /// Returns `true` if the option is a [`Some`] wrapping a value matching the predicate.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// #![feature(is_some_with)]
      .               ///
-- line 560 ----------------------------------------
-- line 585 ----------------------------------------
      .               /// let x: Option<u32> = None;
      .               /// assert_eq!(x.is_none(), true);
      .               /// ```
      .               #[must_use = "if you intended to assert that this doesn't have a value, consider \
      .                             `.and_then(|_| panic!(\"`Option` had a value when expected `None`\"))` instead"]
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
    556 ( 0.00%)      pub const fn is_none(&self) -> bool {
    834 ( 0.00%)          !self.is_some()
  1,112 ( 0.00%)      }
      .           
      .               /////////////////////////////////////////////////////////////////////////
      .               // Adapter for working with references
      .               /////////////////////////////////////////////////////////////////////////
      .           
      .               /// Converts from `&Option<T>` to `Option<&T>`.
      .               ///
      .               /// # Examples
-- line 603 ----------------------------------------
-- line 615 ----------------------------------------
      .               /// // First, cast `Option<String>` to `Option<&String>` with `as_ref`,
      .               /// // then consume *that* with `map`, leaving `text` on the stack.
      .               /// let text_length: Option<usize> = text.as_ref().map(|s| s.len());
      .               /// println!("still can print text: {:?}", text);
      .               /// ```
      .               #[inline]
      .               #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
      .               #[stable(feature = "rust1", since = "1.0.0")]
    747 ( 0.00%)      pub const fn as_ref(&self) -> Option<&T> {
338,465 ( 0.11%)          match *self {
    310 ( 0.00%)              Some(ref x) => Some(x),
    206 ( 0.00%)              None => None,
      .                   }
    747 ( 0.00%)      }
      .           
      .               /// Converts from `&mut Option<T>` to `Option<&mut T>`.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let mut x = Some(2);
      .               /// match x.as_mut() {
-- line 636 ----------------------------------------
-- line 637 ----------------------------------------
      .               ///     Some(v) => *v = 42,
      .               ///     None => {},
      .               /// }
      .               /// assert_eq!(x, Some(42));
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
     36 ( 0.00%)      pub const fn as_mut(&mut self) -> Option<&mut T> {
 72,426 ( 0.02%)          match *self {
     24 ( 0.00%)              Some(ref mut x) => Some(x),
      .                       None => None,
      .                   }
     36 ( 0.00%)      }
      .           
      .               /// Converts from <code>[Pin]<[&]Option\<T>></code> to <code>Option<[Pin]<[&]T>></code>.
      .               ///
      .               /// [&]: reference "shared reference"
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "pin", since = "1.33.0")]
      .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
-- line 658 ----------------------------------------
-- line 705 ----------------------------------------
      .               /// let x: Option<&str> = None;
      .               /// x.expect("fruits are healthy"); // panics with `fruits are healthy`
      .               /// ```
      .               #[inline]
      .               #[track_caller]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
      .               pub const fn expect(self, msg: &str) -> T {
175,758 ( 0.05%)          match self {
 22,678 ( 0.01%)              Some(val) => val,
      .                       None => expect_failed(msg),
      .                   }
      .               }
      .           
      .               /// Returns the contained [`Some`] value, consuming the `self` value.
      .               ///
      .               /// Because this function may panic, its use is generally discouraged.
      .               /// Instead, prefer to use pattern matching and handle the [`None`]
-- line 722 ----------------------------------------
-- line 741 ----------------------------------------
      .               /// ```should_panic
      .               /// let x: Option<&str> = None;
      .               /// assert_eq!(x.unwrap(), "air"); // fails
      .               /// ```
      .               #[inline]
      .               #[track_caller]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
    695 ( 0.00%)      pub const fn unwrap(self) -> T {
480,082 ( 0.15%)          match self {
 42,691 ( 0.01%)              Some(val) => val,
      .                       None => panic("called `Option::unwrap()` on a `None` value"),
      .                   }
    446 ( 0.00%)      }
      .           
      .               /// Returns the contained [`Some`] value or a provided default.
      .               ///
      .               /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing
      .               /// the result of a function call, it is recommended to use [`unwrap_or_else`],
      .               /// which is lazily evaluated.
      .               ///
      .               /// [`unwrap_or_else`]: Option::unwrap_or_else
-- line 762 ----------------------------------------
-- line 765 ----------------------------------------
      .               ///
      .               /// ```
      .               /// assert_eq!(Some("car").unwrap_or("bike"), "car");
      .               /// assert_eq!(None.unwrap_or("bike"), "bike");
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
 13,792 ( 0.00%)      pub const fn unwrap_or(self, default: T) -> T
      .               where
      .                   T: ~const Drop,
      .               {
 70,165 ( 0.02%)          match self {
 10,326 ( 0.00%)              Some(x) => x,
    232 ( 0.00%)              None => default,
      .                   }
 21,941 ( 0.01%)      }
      .           
      .               /// Returns the contained [`Some`] value or computes it from a closure.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let k = 10;
      .               /// assert_eq!(Some(4).unwrap_or_else(|| 2 * k), 4);
      .               /// assert_eq!(None.unwrap_or_else(|| 2 * k), 20);
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
     43 ( 0.00%)      pub const fn unwrap_or_else<F>(self, f: F) -> T
      .               where
      .                   F: ~const FnOnce() -> T,
      .                   F: ~const Drop,
      .               {
154,285 ( 0.05%)          match self {
 39,662 ( 0.01%)              Some(x) => x,
    180 ( 0.00%)              None => f(),
      .                   }
    167 ( 0.00%)      }
      .           
      .               /// Returns the contained [`Some`] value or a default.
      .               ///
      .               /// Consumes the `self` argument then, if [`Some`], returns the contained
      .               /// value, otherwise if [`None`], returns the [default value] for that
      .               /// type.
      .               ///
      .               /// # Examples
-- line 812 ----------------------------------------
-- line 831 ----------------------------------------
      .               /// [`FromStr`]: crate::str::FromStr
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
      .               pub const fn unwrap_or_default(self) -> T
      .               where
      .                   T: ~const Default,
      .               {
    460 ( 0.00%)          match self {
    400 ( 0.00%)              Some(x) => x,
      .                       None => Default::default(),
      .                   }
     41 ( 0.00%)      }
      .           
      .               /// Returns the contained [`Some`] value, consuming the `self` value,
      .               /// without checking that the value is not [`None`].
      .               ///
      .               /// # Safety
      .               ///
      .               /// Calling this method on [`None`] is *[undefined behavior]*.
      .               ///
-- line 851 ----------------------------------------
-- line 892 ----------------------------------------
      .               /// // `Option::map` takes self *by value*, consuming `maybe_some_string`
      .               /// let maybe_some_len = maybe_some_string.map(|s| s.len());
      .               ///
      .               /// assert_eq!(maybe_some_len, Some(13));
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
 16,680 ( 0.01%)      pub const fn map<U, F>(self, f: F) -> Option<U>
      .               where
      .                   F: ~const FnOnce(T) -> U,
      .                   F: ~const Drop,
      .               {
282,198 ( 0.09%)          match self {
600,451 ( 0.19%)              Some(x) => Some(f(x)),
  5,556 ( 0.00%)              None => None,
      .                   }
 59,302 ( 0.02%)      }
      .           
      .               /// Calls the provided closure with a reference to the contained value (if [`Some`]).
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// #![feature(result_option_inspect)]
      .               ///
-- line 917 ----------------------------------------
-- line 954 ----------------------------------------
      .               /// assert_eq!(x.map_or(42, |v| v.len()), 3);
      .               ///
      .               /// let x: Option<&str> = None;
      .               /// assert_eq!(x.map_or(42, |v| v.len()), 42);
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
     64 ( 0.00%)      pub const fn map_or<U, F>(self, default: U, f: F) -> U
      .               where
      .                   F: ~const FnOnce(T) -> U,
      .                   F: ~const Drop,
      .                   U: ~const Drop,
      .               {
 21,259 ( 0.01%)          match self {
  1,894 ( 0.00%)              Some(t) => f(t),
    302 ( 0.00%)              None => default,
      .                   }
     80 ( 0.00%)      }
      .           
      .               /// Computes a default function result (if none), or
      .               /// applies a different function to the contained value (if any).
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let k = 21;
-- line 980 ----------------------------------------
-- line 990 ----------------------------------------
      .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
      .               pub const fn map_or_else<U, D, F>(self, default: D, f: F) -> U
      .               where
      .                   D: ~const FnOnce() -> U,
      .                   D: ~const Drop,
      .                   F: ~const FnOnce(T) -> U,
      .                   F: ~const Drop,
      .               {
  1,086 ( 0.00%)          match self {
    376 ( 0.00%)              Some(t) => f(t),
      .                       None => default(),
      .                   }
      .               }
      .           
      .               /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to
      .               /// [`Ok(v)`] and [`None`] to [`Err(err)`].
      .               ///
      .               /// Arguments passed to `ok_or` are eagerly evaluated; if you are passing the
-- line 1007 ----------------------------------------
-- line 1020 ----------------------------------------
      .               /// assert_eq!(x.ok_or(0), Ok("foo"));
      .               ///
      .               /// let x: Option<&str> = None;
      .               /// assert_eq!(x.ok_or(0), Err(0));
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
 13,249 ( 0.00%)      pub const fn ok_or<E>(self, err: E) -> Result<T, E>
      .               where
      .                   E: ~const Drop,
      .               {
 58,193 ( 0.02%)          match self {
 11,881 ( 0.00%)              Some(v) => Ok(v),
     80 ( 0.00%)              None => Err(err),
      .                   }
 19,985 ( 0.01%)      }
      .           
      .               /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to
      .               /// [`Ok(v)`] and [`None`] to [`Err(err())`].
      .               ///
      .               /// [`Ok(v)`]: Ok
      .               /// [`Err(err())`]: Err
      .               /// [`Some(v)`]: Some
      .               ///
-- line 1044 ----------------------------------------
-- line 1054 ----------------------------------------
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
      .               pub const fn ok_or_else<E, F>(self, err: F) -> Result<T, E>
      .               where
      .                   F: ~const FnOnce() -> E,
      .                   F: ~const Drop,
      .               {
  1,958 ( 0.00%)          match self {
  1,678 ( 0.00%)              Some(v) => Ok(v),
    550 ( 0.00%)              None => Err(err()),
      .                   }
      .               }
      .           
      .               /// Converts from `Option<T>` (or `&Option<T>`) to `Option<&T::Target>`.
      .               ///
      .               /// Leaves the original Option in-place, creating a new one with a reference
      .               /// to the original one, additionally coercing the contents via [`Deref`].
      .               ///
-- line 1072 ----------------------------------------
-- line 1080 ----------------------------------------
      .               /// assert_eq!(x.as_deref(), None);
      .               /// ```
      .               #[stable(feature = "option_deref", since = "1.40.0")]
      .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
      .               pub const fn as_deref(&self) -> Option<&T::Target>
      .               where
      .                   T: ~const Deref,
      .               {
    509 ( 0.00%)          match self.as_ref() {
      .                       Some(t) => Some(t.deref()),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Converts from `Option<T>` (or `&mut Option<T>`) to `Option<&mut T::Target>`.
      .               ///
      .               /// Leaves the original `Option` in-place, creating a new one containing a mutable reference to
-- line 1096 ----------------------------------------
-- line 1213 ----------------------------------------
      .               /// assert_eq!(Some(2).and_then(sq).and_then(sq), Some(16));
      .               /// assert_eq!(Some(2).and_then(sq).and_then(nope), None);
      .               /// assert_eq!(Some(2).and_then(nope).and_then(sq), None);
      .               /// assert_eq!(None.and_then(sq).and_then(sq), None);
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
     73 ( 0.00%)      pub const fn and_then<U, F>(self, f: F) -> Option<U>
      .               where
      .                   F: ~const FnOnce(T) -> Option<U>,
      .                   F: ~const Drop,
      .               {
 13,733 ( 0.00%)          match self {
  1,090 ( 0.00%)              Some(x) => f(x),
      .                       None => None,
      .                   }
    754 ( 0.00%)      }
      .           
      .               /// Returns [`None`] if the option is [`None`], otherwise calls `predicate`
      .               /// with the wrapped value and returns:
      .               ///
      .               /// - [`Some(t)`] if `predicate` returns `true` (where `t` is the wrapped
      .               ///   value), and
      .               /// - [`None`] if `predicate` returns `false`.
      .               ///
-- line 1238 ----------------------------------------
-- line 1257 ----------------------------------------
      .               #[stable(feature = "option_filter", since = "1.27.0")]
      .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
      .               pub const fn filter<P>(self, predicate: P) -> Self
      .               where
      .                   T: ~const Drop,
      .                   P: ~const FnOnce(&T) -> bool,
      .                   P: ~const Drop,
      .               {
    230 ( 0.00%)          if let Some(x) = self {
     55 ( 0.00%)              if predicate(&x) {
     13 ( 0.00%)                  return Some(x);
      .                       }
      .                   }
      .                   None
      .               }
      .           
      .               /// Returns the option if it contains a value, otherwise returns `optb`.
      .               ///
      .               /// Arguments passed to `or` are eagerly evaluated; if you are passing the
-- line 1275 ----------------------------------------
-- line 1295 ----------------------------------------
      .               ///
      .               /// let x: Option<u32> = None;
      .               /// let y = None;
      .               /// assert_eq!(x.or(y), None);
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
     28 ( 0.00%)      pub const fn or(self, optb: Option<T>) -> Option<T>
      .               where
      .                   T: ~const Drop,
      .               {
    363 ( 0.00%)          match self {
      .                       Some(x) => Some(x),
     16 ( 0.00%)              None => optb,
      .                   }
     20 ( 0.00%)      }
      .           
      .               /// Returns the option if it contains a value, otherwise calls `f` and
      .               /// returns the result.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// fn nobody() -> Option<&'static str> { None }
-- line 1319 ----------------------------------------
-- line 1321 ----------------------------------------
      .               ///
      .               /// assert_eq!(Some("barbarians").or_else(vikings), Some("barbarians"));
      .               /// assert_eq!(None.or_else(vikings), Some("vikings"));
      .               /// assert_eq!(None.or_else(nobody), None);
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
  1,388 ( 0.00%)      pub const fn or_else<F>(self, f: F) -> Option<T>
      .               where
      .                   F: ~const FnOnce() -> Option<T>,
      .                   F: ~const Drop,
      .               {
  3,480 ( 0.00%)          match self {
    998 ( 0.00%)              Some(x) => Some(x),
    879 ( 0.00%)              None => f(),
      .                   }
  1,274 ( 0.00%)      }
      .           
      .               /// Returns [`Some`] if exactly one of `self`, `optb` is [`Some`], otherwise returns [`None`].
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = Some(2);
      .               /// let y: Option<u32> = None;
-- line 1346 ----------------------------------------
-- line 1431 ----------------------------------------
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "option_entry", since = "1.20.0")]
      .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
      .               pub const fn get_or_insert(&mut self, value: T) -> &mut T
      .               where
      .                   T: ~const Drop,
      .               {
  1,329 ( 0.00%)          if let None = *self {
  3,101 ( 0.00%)              *self = Some(value);
      .                   }
      .           
      .                   // SAFETY: a `None` variant for `self` would have been replaced by a `Some`
      .                   // variant in the code above.
      .                   unsafe { self.as_mut().unwrap_unchecked() }
      .               }
      .           
      .               /// Inserts the default value into the option if it is [`None`], then
-- line 1448 ----------------------------------------
-- line 1499 ----------------------------------------
      .               #[inline]
      .               #[stable(feature = "option_entry", since = "1.20.0")]
      .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
      .               pub const fn get_or_insert_with<F>(&mut self, f: F) -> &mut T
      .               where
      .                   F: ~const FnOnce() -> T,
      .                   F: ~const Drop,
      .               {
 27,196 ( 0.01%)          if let None = *self {
      .                       // the compiler isn't smart enough to know that we are not dropping a `T`
      .                       // here and wants us to ensure `T` can be dropped at compile time.
     18 ( 0.00%)              mem::forget(mem::replace(self, Some(f())))
      .                   }
      .           
      .                   // SAFETY: a `None` variant for `self` would have been replaced by a `Some`
      .                   // variant in the code above.
      .                   unsafe { self.as_mut().unwrap_unchecked() }
      .               }
      .           
      .               /////////////////////////////////////////////////////////////////////////
-- line 1518 ----------------------------------------
-- line 1532 ----------------------------------------
      .               /// let mut x: Option<u32> = None;
      .               /// let y = x.take();
      .               /// assert_eq!(x, None);
      .               /// assert_eq!(y, None);
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
  4,898 ( 0.00%)      pub const fn take(&mut self) -> Option<T> {
      .                   // FIXME replace `mem::replace` by `mem::take` when the latter is const ready
  5,999 ( 0.00%)          mem::replace(self, None)
  3,458 ( 0.00%)      }
      .           
      .               /// Replaces the actual value in the option by the value given in parameter,
      .               /// returning the old value if present,
      .               /// leaving a [`Some`] in its place without deinitializing either one.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 1551 ----------------------------------------
-- line 1558 ----------------------------------------
      .               /// let old = x.replace(3);
      .               /// assert_eq!(x, Some(3));
      .               /// assert_eq!(old, None);
      .               /// ```
      .               #[inline]
      .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
      .               #[stable(feature = "option_replace", since = "1.31.0")]
      .               pub const fn replace(&mut self, value: T) -> Option<T> {
    152 ( 0.00%)          mem::replace(self, Some(value))
      .               }
      .           
      .               /// Returns `true` if the option is a [`Some`] value containing the given value.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// #![feature(option_result_contains)]
-- line 1574 ----------------------------------------
-- line 1712 ----------------------------------------
      .               #[stable(feature = "copied", since = "1.35.0")]
      .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
      .               pub const fn copied(self) -> Option<T>
      .               where
      .                   T: Copy,
      .               {
      .                   // FIXME: this implementation, which sidesteps using `Option::map` since it's not const
      .                   // ready yet, should be reverted when possible to avoid code repetition
  1,311 ( 0.00%)          match self {
 34,335 ( 0.01%)              Some(&v) => Some(v),
     58 ( 0.00%)              None => None,
      .                   }
      3 ( 0.00%)      }
      .           
      .               /// Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the
      .               /// option.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = 12;
-- line 1732 ----------------------------------------
-- line 1733 ----------------------------------------
      .               /// let opt_x = Some(&x);
      .               /// assert_eq!(opt_x, Some(&12));
      .               /// let cloned = opt_x.cloned();
      .               /// assert_eq!(cloned, Some(12));
      .               /// ```
      .               #[must_use = "`self` will be dropped if the result is not used"]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_option_cloned", issue = "91582")]
    848 ( 0.00%)      pub const fn cloned(self) -> Option<T>
      .               where
      .                   T: ~const Clone,
      .               {
 20,957 ( 0.01%)          match self {
 39,760 ( 0.01%)              Some(t) => Some(t.clone()),
    497 ( 0.00%)              None => None,
      .                   }
  1,800 ( 0.00%)      }
      .           }
      .           
      .           impl<T> Option<&mut T> {
      .               /// Maps an `Option<&mut T>` to an `Option<T>` by copying the contents of the
      .               /// option.
      .               ///
      .               /// # Examples
      .               ///
-- line 1757 ----------------------------------------
-- line 1842 ----------------------------------------
      .           
      .           /////////////////////////////////////////////////////////////////////////////
      .           // Trait implementations
      .           /////////////////////////////////////////////////////////////////////////////
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<T: Clone> Clone for Option<T> {
      .               #[inline]
    539 ( 0.00%)      fn clone(&self) -> Self {
117,974 ( 0.04%)          match self {
  2,999 ( 0.00%)              Some(x) => Some(x.clone()),
    131 ( 0.00%)              None => None,
      .                   }
 46,961 ( 0.01%)      }
      .           
      .               #[inline]
      .               fn clone_from(&mut self, source: &Self) {
      .                   match (self, source) {
      .                       (Some(to), Some(from)) => to.clone_from(from),
      .                       (to, from) => *to = from.clone(),
      .                   }
      .               }
-- line 1863 ----------------------------------------
-- line 1870 ----------------------------------------
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let opt: Option<u32> = Option::default();
      .               /// assert!(opt.is_none());
      .               /// ```
      .               #[inline]
    165 ( 0.00%)      fn default() -> Option<T> {
    165 ( 0.00%)          None
    487 ( 0.00%)      }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<T> IntoIterator for Option<T> {
      .               type Item = T;
      .               type IntoIter = IntoIter<T>;
      .           
      .               /// Returns a consuming iterator over the possibly contained value.
-- line 1888 ----------------------------------------
-- line 1894 ----------------------------------------
      .               /// let v: Vec<&str> = x.into_iter().collect();
      .               /// assert_eq!(v, ["string"]);
      .               ///
      .               /// let x = None;
      .               /// let v: Vec<&str> = x.into_iter().collect();
      .               /// assert!(v.is_empty());
      .               /// ```
      .               #[inline]
  2,417 ( 0.00%)      fn into_iter(self) -> IntoIter<T> {
  7,022 ( 0.00%)          IntoIter { inner: Item { opt: self } }
  1,916 ( 0.00%)      }
      .           }
      .           
      .           #[stable(since = "1.4.0", feature = "option_iter")]
      .           impl<'a, T> IntoIterator for &'a Option<T> {
      .               type Item = &'a T;
      .               type IntoIter = Iter<'a, T>;
      .           
      .               fn into_iter(self) -> Iter<'a, T> {
-- line 1912 ----------------------------------------
-- line 2000 ----------------------------------------
      .           struct Item<A> {
      .               opt: Option<A>,
      .           }
      .           
      .           impl<A> Iterator for Item<A> {
      .               type Item = A;
      .           
      .               #[inline]
  4,832 ( 0.00%)      fn next(&mut self) -> Option<A> {
  2,902 ( 0.00%)          self.opt.take()
  3,416 ( 0.00%)      }
      .           
      .               #[inline]
     44 ( 0.00%)      fn size_hint(&self) -> (usize, Option<usize>) {
  1,213 ( 0.00%)          match self.opt {
     21 ( 0.00%)              Some(_) => (1, Some(1)),
     64 ( 0.00%)              None => (0, Some(0)),
      .                   }
     22 ( 0.00%)      }
      .           }
      .           
      .           impl<A> DoubleEndedIterator for Item<A> {
      .               #[inline]
      .               fn next_back(&mut self) -> Option<A> {
      .                   self.opt.take()
      .               }
      .           }
-- line 2026 ----------------------------------------
-- line 2131 ----------------------------------------
      .               inner: Item<A>,
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<A> Iterator for IntoIter<A> {
      .               type Item = A;
      .           
      .               #[inline]
  4,832 ( 0.00%)      fn next(&mut self) -> Option<A> {
  2,902 ( 0.00%)          self.inner.next()
  3,416 ( 0.00%)      }
      .               #[inline]
     44 ( 0.00%)      fn size_hint(&self) -> (usize, Option<usize>) {
     14 ( 0.00%)          self.inner.size_hint()
     22 ( 0.00%)      }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<A> DoubleEndedIterator for IntoIter<A> {
      .               #[inline]
      .               fn next_back(&mut self) -> Option<A> {
      .                   self.inner.next_back()
      .               }
-- line 2153 ----------------------------------------
-- line 2241 ----------------------------------------
      .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
      .           impl<T> const ops::Try for Option<T> {
      .               type Output = T;
      .               type Residual = Option<convert::Infallible>;
      .           
      .               #[inline]
      .               fn from_output(output: Self::Output) -> Self {
      .                   Some(output)
    190 ( 0.00%)      }
      .           
      .               #[inline]
 12,024 ( 0.00%)      fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
 97,406 ( 0.03%)          match self {
 37,196 ( 0.01%)              Some(v) => ControlFlow::Continue(v),
    372 ( 0.00%)              None => ControlFlow::Break(None),
      .                   }
 16,290 ( 0.01%)      }
      .           }
      .           
      .           #[unstable(feature = "try_trait_v2", issue = "84277")]
      .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
      .           impl<T> const ops::FromResidual for Option<T> {
      .               #[inline]
    334 ( 0.00%)      fn from_residual(residual: Option<convert::Infallible>) -> Self {
      .                   match residual {
  4,116 ( 0.00%)              None => None,
      .                   }
    448 ( 0.00%)      }
      .           }
      .           
      .           #[unstable(feature = "try_trait_v2_residual", issue = "91285")]
      .           impl<T> ops::Residual<T> for Option<convert::Infallible> {
      .               type TryType = Option<T>;
      .           }
      .           
      .           impl<T> Option<Option<T>> {
-- line 2276 ----------------------------------------

539,546 ( 0.17%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .                   #[inline]
        .                   pub fn $fn_name(
        .                       out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len!($int_ty)],
        .                       mut value: $int_ty,
        .                   ) -> &[u8] {
        .                       let mut i = 0;
        .           
        .                       loop {
   28,829 ( 0.01%)                  if value < 0x80 {
        .                               unsafe {
   14,760 ( 0.00%)                          *out.get_unchecked_mut(i).as_mut_ptr() = value as u8;
        .                               }
        .           
   20,552 ( 0.01%)                      i += 1;
        .                               break;
        .                           } else {
        .                               unsafe {
   10,788 ( 0.00%)                          *out.get_unchecked_mut(i).as_mut_ptr() = ((value & 0x7f) | 0x80) as u8;
        .                               }
        .           
    5,499 ( 0.00%)                      value >>= 7;
        .                               i += 1;
        .                           }
        .                       }
        .           
        .                       unsafe { ::std::mem::MaybeUninit::slice_assume_init_ref(&out.get_unchecked(..i)) }
        .                   }
        .               };
        .           }
-- line 45 ----------------------------------------
-- line 53 ----------------------------------------
        .           macro_rules! impl_read_unsigned_leb128 {
        .               ($fn_name:ident, $int_ty:ty) => {
        .                   #[inline]
        .                   pub fn $fn_name(slice: &[u8], position: &mut usize) -> $int_ty {
        .                       // The first iteration of this loop is unpeeled. This is a
        .                       // performance win because this code is hot and integer values less
        .                       // than 128 are very common, typically occurring 50-80% or more of
        .                       // the time, even for u64 and u128.
1,846,084 ( 0.58%)              let byte = slice[*position];
  923,042 ( 0.29%)              *position += 1;
  923,042 ( 0.29%)              if (byte & 0x80) == 0 {
      280 ( 0.00%)                  return byte as $int_ty;
        .                       }
    8,882 ( 0.00%)              let mut result = (byte & 0x7F) as $int_ty;
        .                       let mut shift = 7;
        .                       loop {
  672,648 ( 0.21%)                  let byte = slice[*position];
  414,677 ( 0.13%)                  *position += 1;
  448,432 ( 0.14%)                  if (byte & 0x80) == 0 {
  373,606 ( 0.12%)                      result |= (byte as $int_ty) << shift;
        .                               return result;
        .                           } else {
        .                               result |= ((byte & 0x7F) as $int_ty) << shift;
        .                           }
        .                           shift += 7;
        .                       }
        .                   }
        .               };
-- line 80 ----------------------------------------

  717,294 ( 0.22%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs
--------------------------------------------------------------------------------
Ir              

-- line 124 ----------------------------------------
     .           /// sizes and avoid calling `memcpy`, which is good for speed.
     .           ///
     .           /// Unsafe because: unchecked indexing at start..start+len
     .           #[inline]
     .           unsafe fn u8to64_le(buf: &[u8], start: usize, len: usize) -> u64 {
     .               debug_assert!(len < 8);
     .               let mut i = 0; // current byte index (from LSB) in the output u64
     .               let mut out = 0;
20,886 ( 0.01%)      if i + 3 < len {
     .                   // SAFETY: `i` cannot be greater than `len`, and the caller must guarantee
     .                   // that the index start..start+len is in bounds.
     .                   out = unsafe { load_int_le!(buf, start + i, u32) } as u64;
     .                   i += 4;
     .               }
43,620 ( 0.01%)      if i + 1 < len {
     .                   // SAFETY: same as above.
21,811 ( 0.01%)          out |= (unsafe { load_int_le!(buf, start + i, u16) } as u64) << (i * 8);
10,682 ( 0.00%)          i += 2
     .               }
24,355 ( 0.01%)      if i < len {
     .                   // SAFETY: same as above.
34,130 ( 0.01%)          out |= (unsafe { *buf.get_unchecked(start + i) } as u64) << (i * 8);
     .                   i += 1;
     .               }
     .               debug_assert_eq!(i, len);
     .               out
     .           }
     .           
     .           impl SipHasher {
     .               /// Creates a new `SipHasher` with the two initial keys set to 0.
-- line 153 ----------------------------------------
-- line 190 ----------------------------------------
     .               /// Creates a `SipHasher13` that is keyed off the provided keys.
     .               #[inline]
     .               #[unstable(feature = "hashmap_internals", issue = "none")]
     .               #[rustc_deprecated(
     .                   since = "1.13.0",
     .                   reason = "use `std::collections::hash_map::DefaultHasher` instead"
     .               )]
     .               pub fn new_with_keys(key0: u64, key1: u64) -> SipHasher13 {
 3,977 ( 0.00%)          SipHasher13 { hasher: Hasher::new_with_keys(key0, key1) }
     .               }
     .           }
     .           
     .           impl<S: Sip> Hasher<S> {
     .               #[inline]
     .               fn new_with_keys(key0: u64, key1: u64) -> Hasher<S> {
     9 ( 0.00%)          let mut state = Hasher {
     .                       k0: key0,
     .                       k1: key1,
     .                       length: 0,
     .                       state: State { v0: 0, v1: 0, v2: 0, v3: 0 },
     .                       tail: 0,
     .                       ntail: 0,
     .                       _marker: PhantomData,
     .                   };
     .                   state.reset();
     .                   state
     .               }
     .           
     .               #[inline]
     .               fn reset(&mut self) {
     .                   self.length = 0;
 5,961 ( 0.00%)          self.state.v0 = self.k0 ^ 0x736f6d6570736575;
 6,424 ( 0.00%)          self.state.v1 = self.k1 ^ 0x646f72616e646f6d;
     .                   self.state.v2 = self.k0 ^ 0x6c7967656e657261;
     .                   self.state.v3 = self.k1 ^ 0x7465646279746573;
     .                   self.ntail = 0;
     .               }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl super::Hasher for SipHasher {
-- line 230 ----------------------------------------
-- line 258 ----------------------------------------
     .               // in librustc_data_structures/sip128.rs, and add `write_u*`/`write_i*`
     .               // methods to `SipHasher`, `SipHasher13`, and `DefaultHasher`. This would
     .               // greatly speed up integer hashing by those hashers, at the cost of
     .               // slightly slowing down compile speeds on some benchmarks. See #69152 for
     .               // details.
     .               #[inline]
     .               fn write(&mut self, msg: &[u8]) {
     .                   let length = msg.len();
26,238 ( 0.01%)          self.length += length;
     .           
     .                   let mut needed = 0;
     .           
25,764 ( 0.01%)          if self.ntail != 0 {
13,072 ( 0.00%)              needed = 8 - self.ntail;
     .                       // SAFETY: `cmp::min(length, needed)` is guaranteed to not be over `length`
65,310 ( 0.02%)              self.tail |= unsafe { u8to64_le(msg, 0, cmp::min(length, needed)) } << (8 * self.ntail);
13,062 ( 0.00%)              if length < needed {
 8,466 ( 0.00%)                  self.ntail += length;
     .                           return;
     .                       } else {
 2,298 ( 0.00%)                  self.state.v3 ^= self.tail;
     .                           S::c_rounds(&mut self.state);
 4,596 ( 0.00%)                  self.state.v0 ^= self.tail;
 2,298 ( 0.00%)                  self.ntail = 0;
     .                       }
     .                   }
     .           
     .                   // Buffered tail is now flushed, process new input.
 7,773 ( 0.00%)          let len = length - needed;
 7,784 ( 0.00%)          let left = len & 0x7; // len % 8
     .           
     .                   let mut i = needed;
12,002 ( 0.00%)          while i < len - left {
     .                       // SAFETY: because `len - left` is the biggest multiple of 8 under
     .                       // `len`, and because `i` starts at `needed` where `len` is `length - needed`,
     .                       // `i + 8` is guaranteed to be less than or equal to `length`.
     .                       let mi = unsafe { load_int_le!(msg, i, u64) };
     .           
   163 ( 0.00%)              self.state.v3 ^= mi;
     .                       S::c_rounds(&mut self.state);
   163 ( 0.00%)              self.state.v0 ^= mi;
     .           
   326 ( 0.00%)              i += 8;
     .                   }
     .           
     .                   // SAFETY: `i` is now `needed + len.div_euclid(8) * 8`,
     .                   // so `i + left` = `needed + len` = `length`, which is by
     .                   // definition equal to `msg.len()`.
 8,236 ( 0.00%)          self.tail = unsafe { u8to64_le(msg, i, left) };
     .                   self.ntail = left;
     .               }
     .           
     .               #[inline]
     .               fn finish(&self) -> u64 {
 1,990 ( 0.00%)          let mut state = self.state;
     .           
 9,950 ( 0.00%)          let b: u64 = ((self.length as u64 & 0xff) << 56) | self.tail;
     .           
 1,990 ( 0.00%)          state.v3 ^= b;
     .                   S::c_rounds(&mut state);
 1,990 ( 0.00%)          state.v0 ^= b;
     .           
 1,990 ( 0.00%)          state.v2 ^= 0xff;
     .                   S::d_rounds(&mut state);
     .           
 3,980 ( 0.00%)          state.v0 ^ state.v1 ^ state.v2 ^ state.v3
     .               }
     .           }
     .           
     .           impl<S: Sip> Clone for Hasher<S> {
     .               #[inline]
     .               fn clone(&self) -> Hasher<S> {
     .                   Hasher {
     .                       k0: self.k0,
-- line 331 ----------------------------------------
-- line 354 ----------------------------------------
     .           }
     .           
     .           #[derive(Debug, Clone, Default)]
     .           struct Sip13Rounds;
     .           
     .           impl Sip for Sip13Rounds {
     .               #[inline]
     .               fn c_rounds(state: &mut State) {
29,530 ( 0.01%)          compress!(state);
     .               }
     .           
     .               #[inline]
     .               fn d_rounds(state: &mut State) {
 7,960 ( 0.00%)          compress!(state);
 7,960 ( 0.00%)          compress!(state);
 5,970 ( 0.00%)          compress!(state);
     .               }
     .           }
     .           
     .           #[derive(Debug, Clone, Default)]
     .           struct Sip24Rounds;
     .           
     .           impl Sip for Sip24Rounds {
     .               #[inline]
-- line 377 ----------------------------------------

61,912 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/tuple.rs
--------------------------------------------------------------------------------
Ir               

-- line 10 ----------------------------------------
      .                       $(($idx:tt) -> $T:ident)+
      .                   }
      .               )+) => {
      .                   $(
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl<$($T:PartialEq),+> PartialEq for ($($T,)+) where last_type!($($T,)+): ?Sized {
      .                           #[inline]
      .                           fn eq(&self, other: &($($T,)+)) -> bool {
  3,956 ( 0.00%)                      $(self.$idx == other.$idx)&&+
      .                           }
      .                           #[inline]
      .                           fn ne(&self, other: &($($T,)+)) -> bool {
      .                               $(self.$idx != other.$idx)||+
      .                           }
      .                       }
      .           
      .                       #[stable(feature = "rust1", since = "1.0.0")]
-- line 26 ----------------------------------------
-- line 30 ----------------------------------------
      .                       impl<$($T:PartialOrd + PartialEq),+> PartialOrd for ($($T,)+)
      .                               where last_type!($($T,)+): ?Sized {
      .                           #[inline]
      .                           fn partial_cmp(&self, other: &($($T,)+)) -> Option<Ordering> {
      .                               lexical_partial_cmp!($(self.$idx, other.$idx),+)
      .                           }
      .                           #[inline]
      .                           fn lt(&self, other: &($($T,)+)) -> bool {
433,428 ( 0.14%)                      lexical_ord!(lt, $(self.$idx, other.$idx),+)
      .                           }
      .                           #[inline]
      .                           fn le(&self, other: &($($T,)+)) -> bool {
      .                               lexical_ord!(le, $(self.$idx, other.$idx),+)
      .                           }
      .                           #[inline]
      .                           fn ge(&self, other: &($($T,)+)) -> bool {
      1 ( 0.00%)                      lexical_ord!(ge, $(self.$idx, other.$idx),+)
      .                           }
      .                           #[inline]
      .                           fn gt(&self, other: &($($T,)+)) -> bool {
      .                               lexical_ord!(gt, $(self.$idx, other.$idx),+)
      .                           }
      .                       }
      .           
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl<$($T:Ord),+> Ord for ($($T,)+) where last_type!($($T,)+): ?Sized {
      .                           #[inline]
      .                           fn cmp(&self, other: &($($T,)+)) -> Ordering {
  1,601 ( 0.00%)                      lexical_cmp!($(self.$idx, other.$idx),+)
      .                           }
      .                       }
      .           
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl<$($T:Default),+> Default for ($($T,)+) {
      .                           #[inline]
      .                           fn default() -> ($($T,)+) {
      .                               ($({ let x: $T = Default::default(); x},)+)
-- line 66 ----------------------------------------

  1,286 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/tuple.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 57 ----------------------------------------
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
      118 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
       59 ( 0.00%)              from_str_radix(src, radix)
      177 ( 0.00%)          }
        .           
        .                   /// Returns the number of ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[doc(alias = "popcount")]
        .                   #[doc(alias = "popcnt")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn count_ones(self) -> u32 {
   17,400 ( 0.01%)              intrinsics::ctpop(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of zeros in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
        .                   /// assert_eq!(n.leading_zeros(), 2);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn leading_zeros(self) -> u32 {
  107,088 ( 0.03%)              intrinsics::ctlz(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of trailing zeros in the binary representation
        .                   /// of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
        .                   /// assert_eq!(n.trailing_zeros(), 3);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn trailing_zeros(self) -> u32 {
  202,950 ( 0.06%)              intrinsics::cttz(self) as u32
        .                   }
        .           
        .                   /// Returns the number of leading ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn rotate_left(self, n: u32) -> Self {
1,016,649 ( 0.32%)              intrinsics::rotate_left(self, n as $SelfT)
        .                   }
        .           
        .                   /// Shifts the bits to the right by a specified amount, `n`,
        .                   /// wrapping the truncated bits to the beginning of the resulting
        .                   /// integer.
        .                   ///
        .                   /// Please note this isn't the same operation as the `>>` shifting operator!
        .                   ///
-- line 220 ----------------------------------------
-- line 429 ----------------------------------------
        .                   )]
        .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
    4,015 ( 0.00%)          pub const fn checked_add(self, rhs: Self) -> Option<Self> {
    3,214 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
    8,030 ( 0.00%)              if unlikely!(b) {None} else {Some(a)}
    3,212 ( 0.00%)          }
        .           
        .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
        .                   /// cannot occur.
        .                   ///
        .                   /// # Safety
        .                   ///
        .                   /// This results in undefined behavior when
        .                   #[doc = concat!("`self + rhs > ", stringify!($SelfT), "::MAX` or `self + rhs < ", stringify!($SelfT), "::MIN`,")]
-- line 448 ----------------------------------------
-- line 456 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_add`.
  219,847 ( 0.07%)              unsafe { intrinsics::unchecked_add(self, rhs) }
        .                   }
        .           
        .                   /// Checked addition with a signed integer. Computes `self + rhs`,
        .                   /// returning `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_sub`.
    2,411 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
        .                   }
        .           
        .                   /// Checked integer multiplication. Computes `self * rhs`, returning
        .                   /// `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 544 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".checked_mul(1), Some(5));")]
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.checked_mul(2), None);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
    6,288 ( 0.00%)          pub const fn checked_mul(self, rhs: Self) -> Option<Self> {
    4,192 ( 0.00%)              let (a, b) = self.overflowing_mul(rhs);
   10,480 ( 0.00%)              if unlikely!(b) {None} else {Some(a)}
    4,192 ( 0.00%)          }
        .           
        .                   /// Unchecked integer multiplication. Computes `self * rhs`, assuming overflow
        .                   /// cannot occur.
        .                   ///
        .                   /// # Safety
        .                   ///
        .                   /// This results in undefined behavior when
        .                   #[doc = concat!("`self * rhs > ", stringify!($SelfT), "::MAX` or `self * rhs < ", stringify!($SelfT), "::MIN`,")]
-- line 563 ----------------------------------------
-- line 596 ----------------------------------------
        .                                 without modifying the original"]
        .                   #[inline]
        .                   pub const fn checked_div(self, rhs: Self) -> Option<Self> {
        .                       if unlikely!(rhs == 0) {
        .                           None
        .                       } else {
        .                           // SAFETY: div by zero has been checked above and unsigned types have no other
        .                           // failure modes for division
      104 ( 0.00%)                  Some(unsafe { intrinsics::unchecked_div(self, rhs) })
        .                       }
        .                   }
        .           
        .                   /// Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning `None`
        .                   /// if `rhs == 0`.
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 612 ----------------------------------------
-- line 1035 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_add(self, rhs: Self) -> Self {
    9,892 ( 0.00%)              intrinsics::saturating_add(self, rhs)
        4 ( 0.00%)          }
        .           
        .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 1052 ----------------------------------------
-- line 1084 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
   41,465 ( 0.01%)              intrinsics::saturating_sub(self, rhs)
        .                   }
        .           
        .                   /// Saturating integer multiplication. Computes `self * rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
  436,052 ( 0.14%)              intrinsics::wrapping_add(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) addition with a signed integer. Computes
        .                   /// `self + rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
  309,724 ( 0.10%)              intrinsics::wrapping_sub(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) multiplication. Computes `self *
        .                   /// rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
        .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
  885,236 ( 0.28%)              intrinsics::wrapping_mul(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) division. Computes `self / rhs`.
        .                   /// Wrapped division on unsigned types is just normal division.
        .                   /// There's no way wrapping could ever happen.
        .                   /// This function exists, so that all operations
        .                   /// are accounted for in the wrapping operations.
        .                   ///
-- line 1256 ----------------------------------------
-- line 1397 ----------------------------------------
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_shl(self, rhs: u32) -> Self {
        .                       // SAFETY: the masking by the bitsize of the type ensures that we do not shift
        .                       // out of bounds
        .                       unsafe {
        4 ( 0.00%)                  intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)
        .                       }
        .                   }
        .           
        .                   /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,
        .                   /// where `mask` removes any high-order bits of `rhs` that
        .                   /// would cause the shift to exceed the bitwidth of the type.
        .                   ///
        .                   /// Note that this is *not* the same as a rotate-right; the
-- line 1413 ----------------------------------------
-- line 1492 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
  339,282 ( 0.11%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
    1,606 ( 0.00%)              (a as Self, b)
    3,212 ( 0.00%)          }
        .           
        .                   /// Calculates `self + rhs + carry` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
        .                   /// additional bit of overflow. This allows for chaining together multiple additions
        .                   /// to create "big integers" which represent larger values.
        .                   ///
        .                   #[doc = concat!("This can be thought of as a ", stringify!($BITS), "-bit \"full adder\", in the electronics sense.")]
-- line 1510 ----------------------------------------
-- line 1588 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
   34,589 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
        .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
        .                   /// to create "big integers" which represent larger values.
-- line 1604 ----------------------------------------
-- line 1674 ----------------------------------------
        .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                     without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
  244,616 ( 0.08%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
    2,096 ( 0.00%)              (a as Self, b)
    4,192 ( 0.00%)          }
        .           
        .                   /// Calculates the divisor when `self` is divided by `rhs`.
        .                   ///
        .                   /// Returns a tuple of the divisor along with a boolean indicating
        .                   /// whether an arithmetic overflow would occur. Note that for unsigned
        .                   /// integers overflow never occurs, so the second value is always
        .                   /// `false`.
        .                   ///
-- line 1692 ----------------------------------------
-- line 2132 ----------------------------------------
        .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
        .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
        .                   /// ```
        .                   #[must_use]
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
        .                   #[inline(always)]
        .                   pub const fn is_power_of_two(self) -> bool {
      222 ( 0.00%)              self.count_ones() == 1
        .                   }
        .           
        .                   // Returns one less than next power of two.
        .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
        .                   //
        .                   // 8u8.one_less_than_next_power_of_two() == 7
        .                   // 6u8.one_less_than_next_power_of_two() == 7
        .                   //
        .                   // This method cannot overflow, as in the `next_power_of_two`
        .                   // overflow cases it instead ends up returning the maximum value
        .                   // of the type, and can return 0 for 0.
        .                   #[inline]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   const fn one_less_than_next_power_of_two(self) -> Self {
      520 ( 0.00%)              if self <= 1 { return 0; }
        .           
    2,505 ( 0.00%)              let p = self - 1;
        .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
        .                       // That means the shift is always in-bounds, and some processors
        .                       // (such as intel pre-haswell) have more efficient ctlz
        .                       // intrinsics when the argument is non-zero.
    7,410 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    2,474 ( 0.00%)              <$SelfT>::MAX >> z
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `self`.
        .                   ///
        .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
        .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
        .                   /// release mode (the only situation in which method can return 0).
        .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        .                   #[rustc_inherit_overflow_checks]
        .                   pub const fn next_power_of_two(self) -> Self {
    4,422 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `n`. If
        .                   /// the next power of two is greater than the type's maximum value,
        .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 2195 ----------------------------------------
-- line 2264 ----------------------------------------
        .                   #[doc = concat!("let bytes = ", $swap_op, stringify!($SelfT), ".to_le_bytes();")]
        .                   #[doc = concat!("assert_eq!(bytes, ", $le_bytes, ");")]
        .                   /// ```
        .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
        .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
       20 ( 0.00%)          pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {
       16 ( 0.00%)              self.to_le().to_ne_bytes()
       12 ( 0.00%)          }
        .           
        .                   /// Return the memory representation of this integer as a byte array in
        .                   /// native byte order.
        .                   ///
        .                   /// As the target platform's native endianness is used, portable code
        .                   /// should use [`to_be_bytes`] or [`to_le_bytes`], as appropriate,
        .                   /// instead.
        .                   ///
-- line 2282 ----------------------------------------
-- line 2300 ----------------------------------------
        .                   /// ```
        .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
        .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   // SAFETY: const sound because integers are plain old datatypes so we can always
        .                   // transmute them to arrays of bytes
        .                   #[inline]
        8 ( 0.00%)          pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {
        .                       // SAFETY: integers are plain old datatypes so we can always transmute them to
        .                       // arrays of bytes
        4 ( 0.00%)              unsafe { mem::transmute(self) }
       12 ( 0.00%)          }
        .           
        .                   /// Create a native endian integer value from its representation
        .                   /// as a byte array in big endian.
        .                   ///
        .                   #[doc = $from_xe_bytes_doc]
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 2320 ----------------------------------------
-- line 2360 ----------------------------------------
        .                   ///     *input = rest;
        .                   #[doc = concat!("    ", stringify!($SelfT), "::from_le_bytes(int_bytes.try_into().unwrap())")]
        .                   /// }
        .                   /// ```
        .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
        .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
        .                   #[must_use]
        .                   #[inline]
       16 ( 0.00%)          pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {
       20 ( 0.00%)              Self::from_le(Self::from_ne_bytes(bytes))
        8 ( 0.00%)          }
        .           
        .                   /// Create a native endian integer value from its memory representation
        .                   /// as a byte array in native endianness.
        .                   ///
        .                   /// As the target platform's native endianness is used, portable code
        .                   /// likely wants to use [`from_be_bytes`] or [`from_le_bytes`], as
        .                   /// appropriate instead.
        .                   ///
-- line 2378 ----------------------------------------
-- line 2402 ----------------------------------------
        .                   /// }
        .                   /// ```
        .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
        .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
        .                   #[must_use]
        .                   // SAFETY: const sound because integers are plain old datatypes so we can always
        .                   // transmute to them
        .                   #[inline]
       16 ( 0.00%)          pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {
        .                       // SAFETY: integers are plain old datatypes so we can always transmute to them
       24 ( 0.00%)              unsafe { mem::transmute(bytes) }
        8 ( 0.00%)          }
        .           
        .                   /// New code should prefer to use
        .                   #[doc = concat!("[`", stringify!($SelfT), "::MIN", "`] instead.")]
        .                   ///
        .                   /// Returns the smallest value that can be represented by this integer type.
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_promotable]
        .                   #[inline(always)]
-- line 2421 ----------------------------------------

   16,977 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs
--------------------------------------------------------------------------------
Ir               

-- line 198 ----------------------------------------
      .                   }
      .           
      .                   #[inline]
      .                   #[allow(arithmetic_overflow)]
      .                   #[rustc_inherit_overflow_checks]
      .                   fn forward(start: Self, n: usize) -> Self {
      .                       // In debug builds, trigger a panic on overflow.
      .                       // This should optimize completely out in release builds.
  3,451 ( 0.00%)              if Self::forward_checked(start, n).is_none() {
      .                           let _ = Self::MAX + 1;
      .                       }
      .                       // Do wrapping math to allow e.g. `Step::forward(-128i8, 255)`.
      .                       start.wrapping_add(n as Self)
      .                   }
      .           
      .                   #[inline]
      .                   #[allow(arithmetic_overflow)]
-- line 214 ----------------------------------------
-- line 613 ----------------------------------------
      .           
      .                   if taken < n { Err(taken) } else { Ok(()) }
      .               }
      .           }
      .           
      .           impl<T: TrustedStep> RangeIteratorImpl for ops::Range<T> {
      .               #[inline]
      .               fn spec_next(&mut self) -> Option<T> {
954,235 ( 0.30%)          if self.start < self.end {
      .                       // SAFETY: just checked precondition
      .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
      .                       Some(mem::replace(&mut self.start, n))
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
-- line 629 ----------------------------------------
-- line 657 ----------------------------------------
      .                   // Otherwise 0 is returned which always safe to use.
      .                   self.start = unsafe { Step::forward_unchecked(self.start.clone(), taken) };
      .           
      .                   if taken < n { Err(taken) } else { Ok(()) }
      .               }
      .           
      .               #[inline]
      .               fn spec_next_back(&mut self) -> Option<T> {
 30,748 ( 0.01%)          if self.start < self.end {
      .                       // SAFETY: just checked precondition
      .                       self.end = unsafe { Step::backward_unchecked(self.end.clone(), 1) };
      .                       Some(self.end.clone())
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
-- line 673 ----------------------------------------
-- line 708 ----------------------------------------
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
      .                   self.spec_next()
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
 95,287 ( 0.03%)          if self.start < self.end {
      .                       let hint = Step::steps_between(&self.start, &self.end);
      .                       (hint.unwrap_or(usize::MAX), hint)
      .                   } else {
      .                       (0, Some(0))
      .                   }
      .               }
      .           
      .               #[inline]
-- line 724 ----------------------------------------
-- line 857 ----------------------------------------
      .           impl<A: Step> FusedIterator for ops::Range<A> {}
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<A: Step> Iterator for ops::RangeFrom<A> {
      .               type Item = A;
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
    528 ( 0.00%)          let n = Step::forward(self.start.clone(), 1);
      .                   Some(mem::replace(&mut self.start, n))
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   (usize::MAX, None)
      .               }
      .           
-- line 873 ----------------------------------------
-- line 998 ----------------------------------------
      .           
      .                   try { accum }
      .               }
      .           }
      .           
      .           impl<T: TrustedStep> RangeInclusiveIteratorImpl for ops::RangeInclusive<T> {
      .               #[inline]
      .               fn spec_next(&mut self) -> Option<T> {
    497 ( 0.00%)          if self.is_empty() {
      .                       return None;
      .                   }
      .                   let is_iterating = self.start < self.end;
    316 ( 0.00%)          Some(if is_iterating {
      .                       // SAFETY: just checked precondition
      .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
      .                       mem::replace(&mut self.start, n)
      .                   } else {
      .                       self.exhausted = true;
      .                       self.start.clone()
      .                   })
      .               }
-- line 1018 ----------------------------------------
-- line 1025 ----------------------------------------
      .                   R: Try<Output = B>,
      .               {
      .                   if self.is_empty() {
      .                       return try { init };
      .                   }
      .           
      .                   let mut accum = init;
      .           
    592 ( 0.00%)          while self.start < self.end {
      .                       // SAFETY: just checked precondition
      .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
      .                       let n = mem::replace(&mut self.start, n);
      .                       accum = f(accum, n)?;
      .                   }
      .           
      .                   self.exhausted = true;
      .           
     34 ( 0.00%)          if self.start == self.end {
      .                       accum = f(accum, self.start.clone())?;
      .                   }
      .           
      .                   try { accum }
      .               }
      .           
      .               #[inline]
      .               fn spec_next_back(&mut self) -> Option<T> {
-- line 1050 ----------------------------------------
-- line 1098 ----------------------------------------
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
      .                   self.spec_next()
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
    524 ( 0.00%)          if self.is_empty() {
      .                       return (0, Some(0));
      .                   }
      .           
      .                   match Step::steps_between(&self.start, &self.end) {
      .                       Some(hint) => (hint.saturating_add(1), hint.checked_add(1)),
      .                       None => (usize::MAX, None),
      .                   }
      .               }
-- line 1114 ----------------------------------------

238,182 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/place.rs
--------------------------------------------------------------------------------
Ir               

-- line 14 ----------------------------------------
      .           use rustc_target::abi::{HasDataLayout, Size, VariantIdx, Variants};
      .           
      .           use super::{
      .               alloc_range, mir_assign_valid_types, AllocId, AllocRef, AllocRefMut, CheckInAllocMsg,
      .               ConstAlloc, ImmTy, Immediate, InterpCx, InterpResult, LocalValue, Machine, MemoryKind, OpTy,
      .               Operand, Pointer, PointerArithmetic, Provenance, Scalar, ScalarMaybeUninit,
      .           };
      .           
 33,968 ( 0.01%)  #[derive(Copy, Clone, Hash, PartialEq, Eq, HashStable, Debug)]
      .           /// Information required for the sound usage of a `MemPlace`.
      .           pub enum MemPlaceMeta<Tag: Provenance = AllocId> {
      .               /// The unsized payload (e.g. length for slices or vtable pointer for trait objects).
      .               Meta(Scalar<Tag>),
      .               /// `Sized` types or unsized `extern type`
      .               None,
      .               /// The address of this place may not be taken. This protects the `MemPlace` from coming from
      .               /// a ZST Operand without a backing allocation and being converted to an integer address. This
-- line 30 ----------------------------------------
-- line 41 ----------------------------------------
      .                   match self {
      .                       Self::Meta(s) => s,
      .                       Self::None | Self::Poison => {
      .                           bug!("expected wide pointer extra data (e.g. slice length or trait object vtable)")
      .                       }
      .                   }
      .               }
      .               fn has_meta(self) -> bool {
  5,818 ( 0.00%)          match self {
      .                       Self::Meta(_) => true,
      .                       Self::None | Self::Poison => false,
      .                   }
      .               }
      .           }
      .           
      .           #[derive(Copy, Clone, Hash, PartialEq, Eq, HashStable, Debug)]
      .           pub struct MemPlace<Tag: Provenance = AllocId> {
-- line 57 ----------------------------------------
-- line 113 ----------------------------------------
      .               fn deref(&self) -> &MemPlace<Tag> {
      .                   &self.mplace
      .               }
      .           }
      .           
      .           impl<'tcx, Tag: Provenance> From<MPlaceTy<'tcx, Tag>> for PlaceTy<'tcx, Tag> {
      .               #[inline(always)]
      .               fn from(mplace: MPlaceTy<'tcx, Tag>) -> Self {
  1,286 ( 0.00%)          PlaceTy { place: Place::Ptr(mplace.mplace), layout: mplace.layout }
      .               }
      .           }
      .           
      .           impl<Tag: Provenance> MemPlace<Tag> {
      .               #[inline(always)]
      .               pub fn from_ptr(ptr: Pointer<Option<Tag>>, align: Align) -> Self {
      .                   MemPlace { ptr, align, meta: MemPlaceMeta::None }
      .               }
-- line 129 ----------------------------------------
-- line 132 ----------------------------------------
      .               pub fn map_provenance(self, f: impl FnOnce(Option<Tag>) -> Option<Tag>) -> Self {
      .                   MemPlace { ptr: self.ptr.map_provenance(f), ..self }
      .               }
      .           
      .               /// Turn a mplace into a (thin or wide) pointer, as a reference, pointing to the same space.
      .               /// This is the inverse of `ref_to_mplace`.
      .               #[inline(always)]
      .               pub fn to_ref(self, cx: &impl HasDataLayout) -> Immediate<Tag> {
     20 ( 0.00%)          match self.meta {
     14 ( 0.00%)              MemPlaceMeta::None => Immediate::from(Scalar::from_maybe_pointer(self.ptr, cx)),
      .                       MemPlaceMeta::Meta(meta) => {
      .                           Immediate::ScalarPair(Scalar::from_maybe_pointer(self.ptr, cx).into(), meta.into())
      .                       }
      .                       MemPlaceMeta::Poison => bug!(
      .                           "MPlaceTy::dangling may never be used to produce a \
      .                           place that will have the address of its pointee taken"
      .                       ),
      .                   }
-- line 149 ----------------------------------------
-- line 163 ----------------------------------------
      .                   })
      .               }
      .           }
      .           
      .           impl<'tcx, Tag: Provenance> MPlaceTy<'tcx, Tag> {
      .               /// Produces a MemPlace that works for ZST but nothing else
      .               #[inline]
      .               pub fn dangling(layout: TyAndLayout<'tcx>) -> Self {
     28 ( 0.00%)          let align = layout.align.abi;
      .                   let ptr = Pointer::new(None, Size::from_bytes(align.bytes())); // no provenance, absolute address
      .                   // `Poison` this to make sure that the pointer value `ptr` is never observable by the program.
      .                   MPlaceTy { mplace: MemPlace { ptr, align, meta: MemPlaceMeta::Poison }, layout }
      .               }
      .           
      .               #[inline]
      .               pub fn offset(
      .                   &self,
      .                   offset: Size,
      .                   meta: MemPlaceMeta<Tag>,
      .                   layout: TyAndLayout<'tcx>,
      .                   cx: &impl HasDataLayout,
      .               ) -> InterpResult<'tcx, Self> {
203,316 ( 0.06%)          Ok(MPlaceTy { mplace: self.mplace.offset(offset, meta, cx)?, layout })
      .               }
      .           
      .               #[inline]
      .               pub fn from_aligned_ptr(ptr: Pointer<Option<Tag>>, layout: TyAndLayout<'tcx>) -> Self {
     60 ( 0.00%)          MPlaceTy { mplace: MemPlace::from_ptr(ptr, layout.align.abi), layout }
      .               }
      .           
      .               #[inline]
  6,416 ( 0.00%)      pub(super) fn len(&self, cx: &impl HasDataLayout) -> InterpResult<'tcx, u64> {
 34,883 ( 0.01%)          if self.layout.is_unsized() {
      .                       // We need to consult `meta` metadata
      .                       match self.layout.ty.kind() {
      .                           ty::Slice(..) | ty::Str => self.mplace.meta.unwrap_meta().to_machine_usize(cx),
      .                           _ => bug!("len not supported on unsized type {:?}", self.layout.ty),
      .                       }
      .                   } else {
      .                       // Go through the layout.  There are lots of types that support a length,
      .                       // e.g., SIMD types. (But not all repr(simd) types even have FieldsShape::Array!)
 18,978 ( 0.01%)              match self.layout.fields {
 15,905 ( 0.00%)                  FieldsShape::Array { count, .. } => Ok(count),
      .                           _ => bug!("len not supported on sized type {:?}", self.layout.ty),
      .                       }
      .                   }
 12,832 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub(super) fn vtable(&self) -> Scalar<Tag> {
      .                   match self.layout.ty.kind() {
      .                       ty::Dynamic(..) => self.mplace.meta.unwrap_meta(),
      .                       _ => bug!("vtable not supported on type {:?}", self.layout.ty),
      .                   }
      .               }
-- line 217 ----------------------------------------
-- line 218 ----------------------------------------
      .           }
      .           
      .           // These are defined here because they produce a place.
      .           impl<'tcx, Tag: Provenance> OpTy<'tcx, Tag> {
      .               #[inline(always)]
      .               /// Note: do not call `as_ref` on the resulting place. This function should only be used to
      .               /// read from the resulting mplace, not to get its address back.
      .               pub fn try_as_mplace(&self) -> Result<MPlaceTy<'tcx, Tag>, ImmTy<'tcx, Tag>> {
 36,910 ( 0.01%)          match **self {
171,316 ( 0.05%)              Operand::Indirect(mplace) => Ok(MPlaceTy { mplace, layout: self.layout }),
     14 ( 0.00%)              Operand::Immediate(_) if self.layout.is_zst() => Ok(MPlaceTy::dangling(self.layout)),
 27,776 ( 0.01%)              Operand::Immediate(imm) => Err(ImmTy::from_immediate(imm, self.layout)),
      .                   }
      .               }
      .           
      .               #[inline(always)]
      .               /// Note: do not call `as_ref` on the resulting place. This function should only be used to
      .               /// read from the resulting mplace, not to get its address back.
      .               pub fn assert_mem_place(&self) -> MPlaceTy<'tcx, Tag> {
      .                   self.try_as_mplace().unwrap()
-- line 237 ----------------------------------------
-- line 263 ----------------------------------------
      .               M: Machine<'mir, 'tcx, PointerTag = Tag>,
      .           {
      .               /// Take a value, which represents a (thin or wide) reference, and make it a place.
      .               /// Alignment is just based on the type.  This is the inverse of `MemPlace::to_ref()`.
      .               ///
      .               /// Only call this if you are sure the place is "valid" (aligned and inbounds), or do not
      .               /// want to ever use the place for memory access!
      .               /// Generally prefer `deref_operand`.
     40 ( 0.00%)      pub fn ref_to_mplace(
      .                   &self,
      .                   val: &ImmTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
      .                   let pointee_type =
     12 ( 0.00%)              val.layout.ty.builtin_deref(true).expect("`ref_to_mplace` called on non-ptr type").ty;
     12 ( 0.00%)          let layout = self.layout_of(pointee_type)?;
     20 ( 0.00%)          let (ptr, meta) = match **val {
      8 ( 0.00%)              Immediate::Scalar(ptr) => (ptr, MemPlaceMeta::None),
      .                       Immediate::ScalarPair(ptr, meta) => (ptr, MemPlaceMeta::Meta(meta.check_init()?)),
      .                   };
      .           
      .                   let mplace = MemPlace {
      .                       ptr: self.scalar_to_ptr(ptr.check_init()?),
      .                       // We could use the run-time alignment here. For now, we do not, because
      .                       // the point of tracking the alignment here is to make sure that the *static*
      .                       // alignment information emitted with the loads is correct. The run-time
      .                       // alignment can only be more restrictive.
      4 ( 0.00%)              align: layout.align.abi,
      .                       meta,
      .                   };
     68 ( 0.00%)          Ok(MPlaceTy { mplace, layout })
     36 ( 0.00%)      }
      .           
      .               /// Take an operand, representing a pointer, and dereference it to a place -- that
      .               /// will always be a MemPlace.  Lives in `place.rs` because it creates a place.
      .               pub fn deref_operand(
      .                   &self,
      .                   src: &OpTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
      .                   let val = self.read_immediate(src)?;
-- line 301 ----------------------------------------
-- line 306 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               pub(super) fn get_alloc(
      .                   &self,
      .                   place: &MPlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, Option<AllocRef<'_, 'tcx, M::PointerTag, M::AllocExtra>>> {
      .                   assert!(!place.layout.is_unsized());
  1,920 ( 0.00%)          assert!(!place.meta.has_meta());
  1,920 ( 0.00%)          let size = place.layout.size;
 17,280 ( 0.01%)          self.memory.get(place.ptr, size, place.align)
      .               }
      .           
      .               #[inline]
      .               pub(super) fn get_alloc_mut(
      .                   &mut self,
      .                   place: &MPlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, Option<AllocRefMut<'_, 'tcx, M::PointerTag, M::AllocExtra>>> {
  3,912 ( 0.00%)          assert!(!place.layout.is_unsized());
  3,898 ( 0.00%)          assert!(!place.meta.has_meta());
  3,898 ( 0.00%)          let size = place.layout.size;
 23,388 ( 0.01%)          self.memory.get_mut(place.ptr, size, place.align)
      .               }
      .           
      .               /// Check if this mplace is dereferenceable and sufficiently aligned.
      .               fn check_mplace_access(
      .                   &self,
      .                   mplace: MPlaceTy<'tcx, M::PointerTag>,
      .                   msg: CheckInAllocMsg,
      .               ) -> InterpResult<'tcx> {
-- line 335 ----------------------------------------
-- line 349 ----------------------------------------
      .               /// This also works for arrays, but then the `usize` index type is restricting.
      .               /// For indexing into arrays, use `mplace_index`.
      .               #[inline(always)]
      .               pub fn mplace_field(
      .                   &self,
      .                   base: &MPlaceTy<'tcx, M::PointerTag>,
      .                   field: usize,
      .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
 60,616 ( 0.02%)          let offset = base.layout.fields.offset(field);
 48,644 ( 0.02%)          let field_layout = base.layout.field(self, field);
      .           
      .                   // Offset may need adjustment for unsized fields.
120,300 ( 0.04%)          let (meta, offset) = if field_layout.is_unsized() {
      .                       // Re-use parent metadata to determine dynamic field layout.
      .                       // With custom DSTS, this *will* execute user-defined code, but the same
      .                       // happens at run-time so that's okay.
      .                       match self.size_and_align_of(&base.meta, &field_layout)? {
      .                           Some((_, align)) => (base.meta, offset.align_to(align)),
      .                           None => {
      .                               // For unsized types with an extern type tail we perform no adjustments.
      .                               // NOTE: keep this in sync with `PlaceRef::project_field` in the codegen backend.
-- line 369 ----------------------------------------
-- line 374 ----------------------------------------
      .                   } else {
      .                       // base.meta could be present; we might be accessing a sized field of an unsized
      .                       // struct.
      .                       (MemPlaceMeta::None, offset)
      .                   };
      .           
      .                   // We do not look at `base.layout.align` nor `field_layout.align`, unlike
      .                   // codegen -- mostly to see if we can get away with that
 25,104 ( 0.01%)          base.offset(offset, meta, field_layout, self)
      .               }
      .           
      .               /// Index into an array.
      .               #[inline(always)]
      .               pub fn mplace_index(
      .                   &self,
      .                   base: &MPlaceTy<'tcx, M::PointerTag>,
      .                   index: u64,
      .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
      .                   // Not using the layout method because we want to compute on u64
     18 ( 0.00%)          match base.layout.fields {
      6 ( 0.00%)              FieldsShape::Array { stride, .. } => {
     24 ( 0.00%)                  let len = base.len(self)?;
     12 ( 0.00%)                  if index >= len {
      .                               // This can only be reached in ConstProp and non-rustc-MIR.
      .                               throw_ub!(BoundsCheckFailed { len, index });
      .                           }
      .                           let offset = stride * index; // `Size` multiplication
      .                           // All fields have the same layout.
     30 ( 0.00%)                  let field_layout = base.layout.field(self, 0);
      .           
      6 ( 0.00%)                  assert!(!field_layout.is_unsized());
      .                           base.offset(offset, MemPlaceMeta::None, field_layout, self)
      .                       }
      .                       _ => span_bug!(
      .                           self.cur_span(),
      .                           "`mplace_index` called on non-array type {:?}",
      .                           base.layout.ty
      .                       ),
      .                   }
      .               }
      .           
      .               // Iterates over all fields of an array. Much more efficient than doing the
      .               // same by repeatedly calling `mplace_array`.
 64,100 ( 0.02%)      pub(super) fn mplace_array_fields<'a>(
      .                   &self,
      .                   base: &'a MPlaceTy<'tcx, Tag>,
      .               ) -> InterpResult<'tcx, impl Iterator<Item = InterpResult<'tcx, MPlaceTy<'tcx, Tag>>> + 'a>
      .               {
 25,640 ( 0.01%)          let len = base.len(self)?; // also asserts that we have a type where this makes sense
 19,230 ( 0.01%)          let stride = match base.layout.fields {
  6,410 ( 0.00%)              FieldsShape::Array { stride, .. } => stride,
      .                       _ => span_bug!(self.cur_span(), "mplace_array_fields: expected an array layout"),
      .                   };
 12,820 ( 0.00%)          let layout = base.layout.field(self, 0);
  6,410 ( 0.00%)          let dl = &self.tcx.data_layout;
      .                   // `Size` multiplication
151,046 ( 0.05%)          Ok((0..len).map(move |i| base.offset(stride * i, MemPlaceMeta::None, layout, dl)))
 57,690 ( 0.02%)      }
      .           
      .               fn mplace_subslice(
      .                   &self,
      .                   base: &MPlaceTy<'tcx, M::PointerTag>,
      .                   from: u64,
      .                   to: u64,
      .                   from_end: bool,
      .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
-- line 439 ----------------------------------------
-- line 481 ----------------------------------------
      .                   variant: VariantIdx,
      .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
      .                   // Downcasts only change the layout
      .                   assert!(!base.meta.has_meta());
      .                   Ok(MPlaceTy { layout: base.layout.for_variant(self, variant), ..*base })
      .               }
      .           
      .               /// Project into an mplace
     60 ( 0.00%)      pub(super) fn mplace_projection(
      .                   &self,
      .                   base: &MPlaceTy<'tcx, M::PointerTag>,
      .                   proj_elem: mir::PlaceElem<'tcx>,
      .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
      .                   use rustc_middle::mir::ProjectionElem::*;
    144 ( 0.00%)          Ok(match proj_elem {
      .                       Field(field, _) => self.mplace_field(base, field.index())?,
      .                       Downcast(_, variant) => self.mplace_downcast(base, variant)?,
      .                       Deref => self.deref_operand(&base.into())?,
      .           
      6 ( 0.00%)              Index(local) => {
     30 ( 0.00%)                  let layout = self.layout_of(self.tcx.types.usize)?;
     18 ( 0.00%)                  let n = self.access_local(self.frame(), local, Some(layout))?;
     12 ( 0.00%)                  let n = self.read_scalar(&n)?;
      6 ( 0.00%)                  let n = n.to_machine_usize(self)?;
      .                           self.mplace_index(base, n)?
      .                       }
      .           
      .                       ConstantIndex { offset, min_length, from_end } => {
      .                           let n = base.len(self)?;
      .                           if n < min_length {
      .                               // This can only be reached in ConstProp and non-rustc-MIR.
      .                               throw_ub!(BoundsCheckFailed { len: min_length, index: n });
-- line 512 ----------------------------------------
-- line 520 ----------------------------------------
      .                               offset
      .                           };
      .           
      .                           self.mplace_index(base, index)?
      .                       }
      .           
      .                       Subslice { from, to, from_end } => self.mplace_subslice(base, from, to, from_end)?,
      .                   })
     48 ( 0.00%)      }
      .           
      .               /// Converts a repr(simd) place into a place where `place_index` accesses the SIMD elements.
      .               /// Also returns the number of elements.
      .               pub fn mplace_to_simd(
      .                   &self,
      .                   base: &MPlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, (MPlaceTy<'tcx, M::PointerTag>, u64)> {
      .                   // Basically we just transmute this place into an array following simd_size_and_type.
-- line 536 ----------------------------------------
-- line 542 ----------------------------------------
      .                   assert_eq!(layout.size, base.layout.size);
      .                   Ok((MPlaceTy { layout, ..*base }, len))
      .               }
      .           
      .               /// Gets the place of a field inside the place, and also the field's type.
      .               /// Just a convenience function, but used quite a bit.
      .               /// This is the only projection that might have a side-effect: We cannot project
      .               /// into the field of a local `ScalarPair`, we have to first allocate it.
 57,400 ( 0.02%)      pub fn place_field(
      .                   &mut self,
      .                   base: &PlaceTy<'tcx, M::PointerTag>,
      .                   field: usize,
      .               ) -> InterpResult<'tcx, PlaceTy<'tcx, M::PointerTag>> {
      .                   // FIXME: We could try to be smarter and avoid allocation for fields that span the
      .                   // entire place.
  5,740 ( 0.00%)          let mplace = self.force_allocation(base)?;
 68,880 ( 0.02%)          Ok(self.mplace_field(&mplace, field)?.into())
 45,920 ( 0.01%)      }
      .           
      .               pub fn place_index(
      .                   &mut self,
      .                   base: &PlaceTy<'tcx, M::PointerTag>,
      .                   index: u64,
      .               ) -> InterpResult<'tcx, PlaceTy<'tcx, M::PointerTag>> {
      .                   let mplace = self.force_allocation(base)?;
      .                   Ok(self.mplace_index(&mplace, index)?.into())
-- line 567 ----------------------------------------
-- line 586 ----------------------------------------
      .           
      .               /// Projects into a place.
      .               pub fn place_projection(
      .                   &mut self,
      .                   base: &PlaceTy<'tcx, M::PointerTag>,
      .                   &proj_elem: &mir::ProjectionElem<mir::Local, Ty<'tcx>>,
      .               ) -> InterpResult<'tcx, PlaceTy<'tcx, M::PointerTag>> {
      .                   use rustc_middle::mir::ProjectionElem::*;
 23,745 ( 0.01%)          Ok(match proj_elem {
  7,900 ( 0.00%)              Field(field, _) => self.place_field(base, field.index())?,
      .                       Downcast(_, variant) => self.place_downcast(base, variant)?,
      .                       Deref => self.deref_operand(&self.place_to_op(base)?)?.into(),
      .                       // For the other variants, we have to force an allocation.
      .                       // This matches `operand_projection`.
      .                       Subslice { .. } | ConstantIndex { .. } | Index(_) => {
      3 ( 0.00%)                  let mplace = self.force_allocation(base)?;
     51 ( 0.00%)                  self.mplace_projection(&mplace, proj_elem)?.into()
      .                       }
      .                   })
      .               }
      .           
      .               /// Converts a repr(simd) place into a place where `place_index` accesses the SIMD elements.
      .               /// Also returns the number of elements.
      .               pub fn place_to_simd(
      .                   &mut self,
-- line 610 ----------------------------------------
-- line 611 ----------------------------------------
      .                   base: &PlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, (MPlaceTy<'tcx, M::PointerTag>, u64)> {
      .                   let mplace = self.force_allocation(base)?;
      .                   self.mplace_to_simd(&mplace)
      .               }
      .           
      .               /// Computes a place. You should only use this if you intend to write into this
      .               /// place; for reading, a more efficient alternative is `eval_place_for_read`.
 19,696 ( 0.01%)      pub fn eval_place(
      .                   &mut self,
      .                   place: mir::Place<'tcx>,
      .               ) -> InterpResult<'tcx, PlaceTy<'tcx, M::PointerTag>> {
 12,310 ( 0.00%)          let mut place_ty = PlaceTy {
      .                       // This works even for dead/uninitialized locals; we check further when writing
      .                       place: Place::Local { frame: self.frame_idx(), local: place.local },
      .                       layout: self.layout_of_local(self.frame(), place.local, None)?,
      .                   };
      .           
  3,166 ( 0.00%)          for elem in place.projection.iter() {
  1,583 ( 0.00%)              place_ty = self.place_projection(&place_ty, &elem)?
      .                   }
      .           
      .                   trace!("{:?}", self.dump_place(place_ty.place));
      .                   // Sanity-check the type we ended up with.
      .                   debug_assert!(mir_assign_valid_types(
      .                       *self.tcx,
      .                       self.param_env,
      .                       self.layout_of(self.subst_from_current_frame_and_normalize_erasing_regions(
      .                           place.ty(&self.frame().body.local_decls, *self.tcx).ty
      .                       )?)?,
      .                       place_ty.layout,
      .                   ));
 44,316 ( 0.01%)          Ok(place_ty)
 19,696 ( 0.01%)      }
      .           
      .               /// Write an immediate to a place
      .               #[inline(always)]
      .               pub fn write_immediate(
      .                   &mut self,
      .                   src: Immediate<M::PointerTag>,
      .                   dest: &PlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx> {
     24 ( 0.00%)          self.write_immediate_no_validate(src, dest)?;
      .           
      .                   if M::enforce_validity(self) {
      .                       // Data got changed, better make sure it matches the type!
      .                       self.validate_operand(&self.place_to_op(dest)?)?;
      .                   }
      .           
      .                   Ok(())
      .               }
-- line 661 ----------------------------------------
-- line 678 ----------------------------------------
      .                   dest: &PlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx> {
      .                   self.write_scalar(Scalar::from_maybe_pointer(ptr.into(), self), dest)
      .               }
      .           
      .               /// Write an immediate to a place.
      .               /// If you use this you are responsible for validating that things got copied at the
      .               /// right type.
  3,924 ( 0.00%)      fn write_immediate_no_validate(
      .                   &mut self,
      .                   src: Immediate<M::PointerTag>,
      .                   dest: &PlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx> {
      .                   if cfg!(debug_assertions) {
      .                       // This is a very common path, avoid some checks in release mode
      .                       assert!(!dest.layout.is_unsized(), "Cannot write unsized data");
      .                       match src {
-- line 694 ----------------------------------------
-- line 705 ----------------------------------------
      .                               // FIXME: Can we check anything here?
      .                           }
      .                       }
      .                   }
      .                   trace!("write_immediate: {:?} <- {:?}: {}", *dest, src, dest.layout.ty);
      .           
      .                   // See if we can avoid an allocation. This is the counterpart to `try_read_immediate`,
      .                   // but not factored as a separate function.
  7,878 ( 0.00%)          let mplace = match dest.place {
     97 ( 0.00%)              Place::Local { frame, local } => {
     60 ( 0.00%)                  match M::access_local_mut(self, frame, local)? {
      .                               Ok(local) => {
      .                                   // Local can be updated in-place.
    389 ( 0.00%)                          *local = LocalValue::Live(Operand::Immediate(src));
      .                                   return Ok(());
      .                               }
      .                               Err(mplace) => {
      .                                   // The local is in memory, go on below.
      .                                   mplace
      .                               }
      .                           }
      .                       }
 23,388 ( 0.01%)              Place::Ptr(mplace) => mplace, // already referring to memory
      .                   };
 35,082 ( 0.01%)          let dest = MPlaceTy { mplace, layout: dest.layout };
      .           
      .                   // This is already in memory, write there.
 42,878 ( 0.01%)          self.write_immediate_to_mplace_no_validate(src, &dest)
  7,848 ( 0.00%)      }
      .           
      .               /// Write an immediate to memory.
      .               /// If you use this you are responsible for validating that things got copied at the
      .               /// right type.
 38,980 ( 0.01%)      fn write_immediate_to_mplace_no_validate(
      .                   &mut self,
      .                   value: Immediate<M::PointerTag>,
      .                   dest: &MPlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx> {
      .                   // Note that it is really important that the type here is the right one, and matches the
      .                   // type things are read at. In case `src_val` is a `ScalarPair`, we don't do any magic here
      .                   // to handle padding properly, which is only correct if we never look at this data with the
      .                   // wrong type.
      .           
      .                   // Invalid places are a thing: the return place of a diverging function
  3,898 ( 0.00%)          let tcx = *self.tcx;
  7,796 ( 0.00%)          let mut alloc = match self.get_alloc_mut(dest)? {
 19,455 ( 0.01%)              Some(a) => a,
      .                       None => return Ok(()), // zero-sized access
      .                   };
      .           
      .                   // FIXME: We should check that there are dest.layout.size many bytes available in
      .                   // memory.  The code below is not sufficient, with enough padding it might not
      .                   // cover all the bytes!
  7,782 ( 0.00%)          match value {
      .                       Immediate::Scalar(scalar) => {
  7,782 ( 0.00%)                  match dest.layout.abi {
      .                               Abi::Scalar(_) => {} // fine
      .                               _ => span_bug!(
      .                                   self.cur_span(),
      .                                   "write_immediate_to_mplace: invalid Scalar layout: {:#?}",
      .                                   dest.layout
      .                               ),
      .                           }
 35,019 ( 0.01%)                  alloc.write_scalar(alloc_range(Size::ZERO, dest.layout.size), scalar)
      .                       }
      .                       Immediate::ScalarPair(a_val, b_val) => {
      .                           // We checked `ptr_align` above, so all fields will have the alignment they need.
      .                           // We would anyway check against `ptr_align.restrict_for_offset(b_offset)`,
      .                           // which `ptr.offset(b_offset)` cannot possibly fail to satisfy.
      .                           let (a, b) = match dest.layout.abi {
      .                               Abi::ScalarPair(a, b) => (a.value, b.value),
      .                               _ => span_bug!(
-- line 776 ----------------------------------------
-- line 785 ----------------------------------------
      .                           // It is tempting to verify `b_offset` against `layout.fields.offset(1)`,
      .                           // but that does not work: We could be a newtype around a pair, then the
      .                           // fields do not match the `ScalarPair` components.
      .           
      .                           alloc.write_scalar(alloc_range(Size::ZERO, a_size), a_val)?;
      .                           alloc.write_scalar(alloc_range(b_offset, b_size), b_val)
      .                       }
      .                   }
 31,184 ( 0.01%)      }
      .           
      .               /// Copies the data from an operand to a place. This does not support transmuting!
      .               /// Use `copy_op_transmute` if the layouts could disagree.
      .               #[inline(always)]
      .               pub fn copy_op(
      .                   &mut self,
      .                   src: &OpTy<'tcx, M::PointerTag>,
      .                   dest: &PlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx> {
 33,201 ( 0.01%)          self.copy_op_no_validate(src, dest)?;
      .           
      .                   if M::enforce_validity(self) {
      .                       // Data got changed, better make sure it matches the type!
      .                       self.validate_operand(&self.place_to_op(dest)?)?;
      .                   }
      .           
      .                   Ok(())
      .               }
      .           
      .               /// Copies the data from an operand to a place. This does not support transmuting!
      .               /// Use `copy_op_transmute` if the layouts could disagree.
      .               /// Also, if you use this you are responsible for validating that things get copied at the
      .               /// right type.
 46,280 ( 0.01%)      fn copy_op_no_validate(
      .                   &mut self,
      .                   src: &OpTy<'tcx, M::PointerTag>,
      .                   dest: &PlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx> {
      .                   // We do NOT compare the types for equality, because well-typed code can
      .                   // actually "transmute" `&mut T` to `&T` in an assignment without a cast.
104,274 ( 0.03%)          if !mir_assign_valid_types(*self.tcx, self.param_env, src.layout, dest.layout) {
      .                       span_bug!(
      .                           self.cur_span(),
      .                           "type mismatch when copying!\nsrc: {:?},\ndest: {:?}",
      .                           src.layout.ty,
      .                           dest.layout.ty,
      .                       );
      .                   }
      .           
      .                   // Let us see if the layout is simple so we take a shortcut, avoid force_allocation.
 28,973 ( 0.01%)          let src = match self.try_read_immediate(src)? {
      .                       Ok(src_val) => {
  3,962 ( 0.00%)                  assert!(!src.layout.is_unsized(), "cannot have unsized immediates");
      .                           // Yay, we got a value that we can write directly.
      .                           // FIXME: Add a check to make sure that if `src` is indirect,
      .                           // it does not overlap with `dest`.
 50,986 ( 0.02%)                  return self.write_immediate_no_validate(*src_val, dest);
      .                       }
 14,904 ( 0.00%)              Err(mplace) => mplace,
      .                   };
      .                   // Slow path, this does not fit into an immediate. Just memcpy.
      .                   trace!("copy_op: {:?} <- {:?}: {}", *dest, src, dest.layout.ty);
      .           
      .                   // This interprets `src.meta` with the `dest` local's layout, if an unsized local
      .                   // is being initialized!
 24,219 ( 0.01%)          let (dest, size) = self.force_allocation_maybe_sized(dest, src.meta)?;
      .                   let size = size.unwrap_or_else(|| {
  5,580 ( 0.00%)              assert!(
      .                           !dest.layout.is_unsized(),
      .                           "Cannot copy into already initialized unsized place"
      .                       );
  1,860 ( 0.00%)              dest.layout.size
      .                   });
  1,863 ( 0.00%)          assert_eq!(src.meta, dest.meta, "Can only copy between equally-sized instances");
      .           
  1,863 ( 0.00%)          self.memory
  5,589 ( 0.00%)              .copy(src.ptr, src.align, dest.ptr, dest.align, size, /*nonoverlapping*/ true)
 46,280 ( 0.01%)      }
      .           
      .               /// Copies the data from an operand to a place. The layouts may disagree, but they must
      .               /// have the same size.
    232 ( 0.00%)      pub fn copy_op_transmute(
      .                   &mut self,
      .                   src: &OpTy<'tcx, M::PointerTag>,
      .                   dest: &PlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx> {
    522 ( 0.00%)          if mir_assign_valid_types(*self.tcx, self.param_env, src.layout, dest.layout) {
      .                       // Fast path: Just use normal `copy_op`
      .                       return self.copy_op(src, dest);
      .                   }
      .                   // We still require the sizes to match.
      .                   if src.layout.size != dest.layout.size {
      .                       // FIXME: This should be an assert instead of an error, but if we transmute within an
      .                       // array length computation, `typeck` may not have yet been run and errored out. In fact
      .                       // most likey we *are* running `typeck` right now. Investigate whether we can bail out
-- line 878 ----------------------------------------
-- line 916 ----------------------------------------
      .               /// Ensures that a place is in memory, and returns where it is.
      .               /// If the place currently refers to a local that doesn't yet have a matching allocation,
      .               /// create such an allocation.
      .               /// This is essentially `force_to_memplace`.
      .               ///
      .               /// This supports unsized types and returns the computed size to avoid some
      .               /// redundant computation when copying; use `force_allocation` for a simpler, sized-only
      .               /// version.
 68,490 ( 0.02%)      pub fn force_allocation_maybe_sized(
      .                   &mut self,
      .                   place: &PlaceTy<'tcx, M::PointerTag>,
      .                   meta: MemPlaceMeta<M::PointerTag>,
      .               ) -> InterpResult<'tcx, (MPlaceTy<'tcx, M::PointerTag>, Option<Size>)> {
 76,084 ( 0.02%)          let (mplace, size) = match place.place {
  5,782 ( 0.00%)              Place::Local { frame, local } => {
 11,544 ( 0.00%)                  match M::access_local_mut(self, frame, local)? {
 16,884 ( 0.01%)                      Ok(&mut local_val) => {
      .                                   // We need to make an allocation.
      .           
      .                                   // We need the layout of the local.  We can NOT use the layout we got,
      .                                   // that might e.g., be an inner field of a struct with `Scalar` layout,
      .                                   // that has different alignment than the outer field.
      .                                   let local_layout =
  9,422 ( 0.00%)                              self.layout_of_local(&self.stack()[frame], local, None)?;
      .                                   // We also need to support unsized types, and hence cannot use `allocate`.
  7,490 ( 0.00%)                          let (size, align) = self
      .                                       .size_and_align_of(&meta, &local_layout)?
      .                                       .expect("Cannot allocate for non-dyn-sized type");
 13,118 ( 0.00%)                          let ptr = self.memory.allocate(size, align, MemoryKind::Stack)?;
      .                                   let mplace = MemPlace { ptr: ptr.into(), align, meta };
  9,380 ( 0.00%)                          if let LocalValue::Live(Operand::Immediate(value)) = local_val {
      .                                       // Preserve old value.
      .                                       // We don't have to validate as we can assume the local
      .                                       // was already valid for its type.
      .                                       let mplace = MPlaceTy { mplace, layout: local_layout };
      .                                       self.write_immediate_to_mplace_no_validate(value, &mplace)?;
      .                                   }
      .                                   // Now we can call `access_mut` again, asserting it goes well,
      .                                   // and actually overwrite things.
 35,602 ( 0.01%)                          *M::access_local_mut(self, frame, local).unwrap().unwrap() =
      .                                       LocalValue::Live(Operand::Indirect(mplace));
 13,132 ( 0.00%)                          (mplace, Some(size))
      .                               }
 38,720 ( 0.01%)                      Err(mplace) => (mplace, None), // this already was an indirect local
      .                           }
      .                       }
 24,180 ( 0.01%)              Place::Ptr(mplace) => (mplace, None),
      .                   };
      .                   // Return with the original layout, so that the caller can go on
 91,296 ( 0.03%)          Ok((MPlaceTy { mplace, layout: place.layout }, size))
 60,880 ( 0.02%)      }
      .           
      .               #[inline(always)]
      .               pub fn force_allocation(
      .                   &mut self,
      .                   place: &PlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
 51,720 ( 0.02%)          Ok(self.force_allocation_maybe_sized(place, MemPlaceMeta::None)?.0)
      .               }
      .           
    176 ( 0.00%)      pub fn allocate(
      .                   &mut self,
      .                   layout: TyAndLayout<'tcx>,
      .                   kind: MemoryKind<M::MemoryKind>,
      .               ) -> InterpResult<'static, MPlaceTy<'tcx, M::PointerTag>> {
    335 ( 0.00%)          let ptr = self.memory.allocate(layout.size, layout.align.abi, kind)?;
    132 ( 0.00%)          Ok(MPlaceTy::from_aligned_ptr(ptr.into(), layout))
    154 ( 0.00%)      }
      .           
      .               /// Returns a wide MPlace of type `&'static [mut] str` to a new 1-aligned allocation.
      .               pub fn allocate_str(
      .                   &mut self,
      .                   str: &str,
      .                   kind: MemoryKind<M::MemoryKind>,
      .                   mutbl: Mutability,
      .               ) -> MPlaceTy<'tcx, M::PointerTag> {
-- line 991 ----------------------------------------
-- line 1084 ----------------------------------------
      .                               self.write_immediate(*tag_val, &niche_dest)?;
      .                           }
      .                       }
      .                   }
      .           
      .                   Ok(())
      .               }
      .           
    261 ( 0.00%)      pub fn raw_const_to_mplace(
      .                   &self,
      .                   raw: ConstAlloc<'tcx>,
      .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
      .                   // This must be an allocation in `tcx`
     87 ( 0.00%)          let _ = self.tcx.global_alloc(raw.alloc_id);
      .                   let ptr = self.global_base_pointer(Pointer::from(raw.alloc_id))?;
     93 ( 0.00%)          let layout = self.layout_of(raw.ty)?;
    174 ( 0.00%)          Ok(MPlaceTy::from_aligned_ptr(ptr.into(), layout))
    203 ( 0.00%)      }
      .           
      .               /// Turn a place with a `dyn Trait` type into a place with the actual dynamic type.
      .               /// Also return some more information so drop doesn't have to run the same code twice.
      .               pub(super) fn unpack_dyn_trait(
      .                   &self,
      .                   mplace: &MPlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, (ty::Instance<'tcx>, MPlaceTy<'tcx, M::PointerTag>)> {
      .                   let vtable = self.scalar_to_ptr(mplace.vtable()); // also sanity checks the type
-- line 1109 ----------------------------------------

 97,518 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/place.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 180 ----------------------------------------
        .           /// assert_eq!(v, &[0.into()]);
        .           ///
        .           /// // Ensure that the last item was dropped.
        .           /// assert!(weak.upgrade().is_none());
        .           /// ```
        .           #[stable(feature = "drop_in_place", since = "1.8.0")]
        .           #[lang = "drop_in_place"]
        .           #[allow(unconditional_recursion)]
1,764,590 ( 0.55%)  pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
        .               // Code here does not matter - this is replaced by the
        .               // real drop glue by the compiler.
        .           
        .               // SAFETY: see comment above
        .               unsafe { drop_in_place(to_drop) }
        .           }
        .           
        .           /// Creates a null raw pointer.
-- line 196 ----------------------------------------
-- line 206 ----------------------------------------
        .           #[inline(always)]
        .           #[must_use]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_promotable]
        .           #[rustc_const_stable(feature = "const_ptr_null", since = "1.24.0")]
        .           #[rustc_diagnostic_item = "ptr_null"]
        .           pub const fn null<T>() -> *const T {
        .               0 as *const T
       65 ( 0.00%)  }
        .           
        .           /// Creates a null mutable raw pointer.
        .           ///
        .           /// # Examples
        .           ///
        .           /// ```
        .           /// use std::ptr;
        .           ///
-- line 222 ----------------------------------------
-- line 251 ----------------------------------------
        .           /// let x = [5, 6, 7];
        .           /// let raw_pointer = x.as_ptr();
        .           /// let slice = ptr::slice_from_raw_parts(raw_pointer, 3);
        .           /// assert_eq!(unsafe { &*slice }[2], 7);
        .           /// ```
        .           #[inline]
        .           #[stable(feature = "slice_from_raw_parts", since = "1.42.0")]
        .           #[rustc_const_unstable(feature = "const_slice_from_raw_parts", issue = "67456")]
   20,840 ( 0.01%)  pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
   26,050 ( 0.01%)      from_raw_parts(data.cast(), len)
   10,420 ( 0.00%)  }
        .           
        .           /// Performs the same functionality as [`slice_from_raw_parts`], except that a
        .           /// raw mutable slice is returned, as opposed to a raw immutable slice.
        .           ///
        .           /// See the documentation of [`slice_from_raw_parts`] for more details.
        .           ///
        .           /// This function is safe, but actually using the return value is unsafe.
        .           /// See the documentation of [`slice::from_raw_parts_mut`] for slice safety requirements.
-- line 269 ----------------------------------------
-- line 283 ----------------------------------------
        .           ///     (*slice)[2] = 99; // assign a value at an index in the slice
        .           /// };
        .           ///
        .           /// assert_eq!(unsafe { &*slice }[2], 99);
        .           /// ```
        .           #[inline]
        .           #[stable(feature = "slice_from_raw_parts", since = "1.42.0")]
        .           #[rustc_const_unstable(feature = "const_slice_from_raw_parts", issue = "67456")]
   30,816 ( 0.01%)  pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
   11,556 ( 0.00%)      from_raw_parts_mut(data.cast(), len)
    7,704 ( 0.00%)  }
        .           
        .           /// Swaps the values at two mutable locations of the same type, without
        .           /// deinitializing either.
        .           ///
        .           /// But for the following two exceptions, this function is semantically
        .           /// equivalent to [`mem::swap`]:
        .           ///
        .           /// * It operates on raw pointers instead of references. When references are
-- line 301 ----------------------------------------
-- line 448 ----------------------------------------
        .                       return;
        .                   }
        .               }
        .           
        .               // Direct swapping, for the cases not going through the block optimization.
        .               // SAFETY: the caller must guarantee that `x` and `y` are valid
        .               // for writes, properly aligned, and non-overlapping.
        .               unsafe {
       59 ( 0.00%)          let z = read(x);
        .                   copy_nonoverlapping(y, x, 1);
        .                   write(y, z);
        .               }
        .           }
        .           
        .           #[inline]
        .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
        .           const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
-- line 464 ----------------------------------------
-- line 677 ----------------------------------------
        .           ///
        .           /// assert_eq!(s, "bar");
        .           /// ```
        .           ///
        .           /// [valid]: self#safety
        .           #[inline]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_ptr_read", issue = "80377")]
   22,422 ( 0.01%)  pub const unsafe fn read<T>(src: *const T) -> T {
        .               // We are calling the intrinsics directly to avoid function calls in the generated code
        .               // as `intrinsics::copy_nonoverlapping` is a wrapper function.
        .               extern "rust-intrinsic" {
        .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
        .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
        .               }
        .           
    7,044 ( 0.00%)      let mut tmp = MaybeUninit::<T>::uninit();
        .               // SAFETY: the caller must guarantee that `src` is valid for reads.
        .               // `src` cannot overlap `tmp` because `tmp` was just allocated on
        .               // the stack as a separate allocated object.
        .               //
        .               // Also, since we just wrote a valid value into `tmp`, it is guaranteed
        .               // to be properly initialized.
        .               unsafe {
   59,202 ( 0.02%)          copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
  495,842 ( 0.16%)          tmp.assume_init()
        .               }
   12,529 ( 0.00%)  }
        .           
        .           /// Reads the value from `src` without moving it. This leaves the
        .           /// memory in `src` unchanged.
        .           ///
        .           /// Unlike [`read`], `read_unaligned` works with unaligned pointers.
        .           ///
        .           /// # Safety
        .           ///
-- line 712 ----------------------------------------
-- line 872 ----------------------------------------
        .           /// swap(&mut foo, &mut bar);
        .           ///
        .           /// assert_eq!(foo, "bar");
        .           /// assert_eq!(bar, "foo");
        .           /// ```
        .           #[inline]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_ptr_write", issue = "86302")]
   30,594 ( 0.01%)  pub const unsafe fn write<T>(dst: *mut T, src: T) {
        .               // We are calling the intrinsics directly to avoid function calls in the generated code
        .               // as `intrinsics::copy_nonoverlapping` is a wrapper function.
        .               extern "rust-intrinsic" {
        .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
        .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
        .               }
        .           
        .               // SAFETY: the caller must guarantee that `dst` is valid for writes.
        .               // `dst` cannot overlap `src` because the caller has mutable access
        .               // to `dst` while `src` is owned by this function.
        .               unsafe {
3,061,501 ( 0.96%)          copy_nonoverlapping(&src as *const T, dst, 1);
        .                   intrinsics::forget(src);
        .               }
   16,658 ( 0.01%)  }
        .           
        .           /// Overwrites a memory location with the given value without reading or
        .           /// dropping the old value.
        .           ///
        .           /// Unlike [`write()`], the pointer may be unaligned.
        .           ///
        .           /// `write_unaligned` does not drop the contents of `dst`. This is safe, but it
        .           /// could leak allocations or resources, so care should be taken not to overwrite
-- line 903 ----------------------------------------
-- line 1206 ----------------------------------------
        .               if stride == 1 {
        .                   // `stride == 1` case can be computed more simply through `-p (mod a)`, but doing so
        .                   // inhibits LLVM's ability to select instructions like `lea`. Instead we compute
        .                   //
        .                   //    round_up_to_next_alignment(p, a) - p
        .                   //
        .                   // which distributes operations around the load-bearing, but pessimizing `and` sufficiently
        .                   // for LLVM to be able to utilize the various optimizations it knows about.
    1,300 ( 0.00%)          return wrapping_sub(
    3,514 ( 0.00%)              wrapping_add(p as usize, a_minus_one) & wrapping_sub(0, a),
        .                       p as usize,
        .                   );
        .               }
        .           
        .               let pmoda = p as usize & a_minus_one;
        .               if pmoda == 0 {
        .                   // Already aligned. Yay!
        .                   return 0;
-- line 1223 ----------------------------------------
-- line 1348 ----------------------------------------
        .           /// assert!(std::ptr::eq(
        .           ///     &wrapper as &dyn Trait as *const dyn Trait as *const u8,
        .           ///     &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,
        .           /// ));
        .           /// ```
        .           #[stable(feature = "ptr_eq", since = "1.17.0")]
        .           #[inline]
        .           pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
   40,897 ( 0.01%)      a == b
        .           }
        .           
        .           /// Hash a raw pointer.
        .           ///
        .           /// This can be used to hash a `&T` reference (which coerces to `*const T` implicitly)
        .           /// by its address rather than the value it points to
        .           /// (which is what the `Hash for &T` implementation does).
        .           ///
-- line 1364 ----------------------------------------

  342,598 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
   29,532 ( 0.01%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
       15 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    1,186 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
        .               LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    3,009 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
        4 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
       16 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 224 ----------------------------------------
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    2,648 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
      118 ( 0.00%)      pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
      185 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
      177 ( 0.00%)      }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
    6,317 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    7,182 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        3 ( 0.00%)      QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
        .               MacroExpansion(u64),
        .               ProcMacroSourceCode(u64),
        .               /// Strings provided as `--cfg [cfgspec]` stored in a `crate_cfg`.
        .               CfgSpec(u64),
-- line 285 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
       14 ( 0.00%)      fn from(p: PathBuf) -> Self {
        4 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
       12 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
       14 ( 0.00%)      }
        .           }
        .           
       12 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
      268 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
      402 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
      402 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
      335 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
        .               pub fn to_string_lossy(&self) -> Cow<'_, str> {
        .                   match self.inner {
        .                       FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
        .               }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    1,284 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
        .                       | DocTest(_, _)
        .                       | InlineAsm(_) => false,
        .                   }
        .               }
        .           
       65 ( 0.00%)      pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
      130 ( 0.00%)      }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
        2 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
        4 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 383 ----------------------------------------
        .               }
        .           
        .               pub fn proc_macro_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::ProcMacroSourceCode(hasher.finish())
        .               }
        .           
       15 ( 0.00%)      pub fn cfg_spec_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        6 ( 0.00%)          FileName::QuoteExpansion(hasher.finish())
       15 ( 0.00%)      }
        .           
        .               pub fn cli_crate_attr_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::CliCrateAttr(hasher.finish())
        .               }
        .           
        .               pub fn doc_test_source_code(path: PathBuf, line: isize) -> FileName {
-- line 403 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
        5 ( 0.00%)      pub lo: BytePos,
        5 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
       15 ( 0.00%)      pub ctxt: SyntaxContext,
        5 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
   10,028 ( 0.00%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
       42 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
    4,928 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
    3,696 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
    4,928 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
    1,206 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
      804 ( 0.00%)      }
        .               #[inline]
    1,624 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
    1,624 ( 0.00%)      }
        .               #[inline]
    4,113 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
    2,742 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
      420 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
      252 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
        .               pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
        .               }
-- line 566 ----------------------------------------
-- line 618 ----------------------------------------
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
      126 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
       84 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 663 ----------------------------------------
        .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
        .               /// if any.
        .               pub fn parent_callsite(self) -> Option<Span> {
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
        .               }
        .           
        .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
       40 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
       20 ( 0.00%)          while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
       44 ( 0.00%)      }
        .           
        .               /// Edition of the crate from which this span came.
      750 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
      500 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
      201 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
       40 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
       62 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
       30 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
        6 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
       24 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
      308 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
      264 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
      220 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
        .               pub fn desugaring_kind(self) -> Option<DesugaringKind> {
        .                   match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
-- line 736 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
   17,127 ( 0.01%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
    3,065 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
       49 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
       39 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
   10,556 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
   14,013 ( 0.00%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
      198 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
      126 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
      144 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
      165 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
       30 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
      105 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
      135 ( 0.00%)      }
        .           
        .               pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
        .               }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
       70 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
       10 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        8 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
      528 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
      308 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
-- line 892 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
    1,611 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
    1,074 ( 0.00%)          let mut span = self.data();
      857 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
    1,611 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
    1,752 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
      135 ( 0.00%)      pub fn reverse_glob_adjust(
        .                   &mut self,
        .                   expn_id: ExpnId,
        .                   glob_span: Span,
        .               ) -> Option<Option<ExpnId>> {
      118 ( 0.00%)          let mut span = self.data();
      131 ( 0.00%)          let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
      247 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
      150 ( 0.00%)      }
        .           
        .               #[inline]
    2,136 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
    1,869 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
      315 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
        5 ( 0.00%)          MultiSpan { primary_spans: vec, span_labels: vec![] }
        .               }
        .           
        .               pub fn push_span_label(&mut self, span: Span, label: String) {
        .                   self.span_labels.push((span, label));
        .               }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
       42 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
        .               }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
-- line 1079 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
      315 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
      315 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
        5 ( 0.00%)      fn from(spans: Vec<Span>) -> MultiSpan {
        4 ( 0.00%)          MultiSpan::from_spans(spans)
        5 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
       77 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      310 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      536 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      155 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      536 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      465 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
        6 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1267 ----------------------------------------
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
    1,202 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
       12 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    2,404 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        .                   let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
       15 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
-- line 1321 ----------------------------------------
-- line 1324 ----------------------------------------
        .           
        .               /// Check if the stored hash matches the hash of the string.
        .               pub fn matches(&self, src: &str) -> bool {
        .                   Self::new(self.kind, src) == *self
        .               }
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
        6 ( 0.00%)          let len = self.hash_len();
        6 ( 0.00%)          &self.value[..len]
        6 ( 0.00%)      }
        .           
        .               fn hash_len(&self) -> usize {
       27 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
      116 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
        2 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
        2 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
        2 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
        8 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
        4 ( 0.00%)                          0..=0xFF => 1,
        4 ( 0.00%)                          0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
        6 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
        6 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
       22 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    5,409 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      601 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  933,946 ( 0.29%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    1,202 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    6,611 ( 0.00%)              SourceFile {
    4,808 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    2,404 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    2,404 ( 0.00%)                  lines,
    2,404 ( 0.00%)                  multibyte_chars,
    2,404 ( 0.00%)                  non_narrow_chars,
    2,404 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    5,409 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
       55 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
       15 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
       10 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
       10 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
       15 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
       60 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
       10 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
       85 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
       55 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
       20 ( 0.00%)              lines,
       20 ( 0.00%)              multibyte_chars,
       20 ( 0.00%)              non_narrow_chars,
       20 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
       45 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
      524 ( 0.00%)      pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
      262 ( 0.00%)          self.lines[line_index]
      524 ( 0.00%)      }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
      280 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
       40 ( 0.00%)          if matches!(
       80 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        .                       let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        .                       if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
-- line 1582 ----------------------------------------
-- line 1592 ----------------------------------------
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
       40 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
      360 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
      642 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
    1,975 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
      871 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
    1,028 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
      738 ( 0.00%)          assert!(line_index < self.lines.len());
    1,008 ( 0.00%)          if line_index == (self.lines.len() - 1) {
       12 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
      662 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
        2 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
        6 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
        4 ( 0.00%)              if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
        .                           total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
        .                           assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
       12 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
       10 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
        4 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
        7 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
        2 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
        .                   match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
        1 ( 0.00%)                  let linebpos = self.lines[a];
        2 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
        1 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
        8 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
        3 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
        2 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
        1 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
        5 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
        7 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
       50 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
       45 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        5 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        5 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
    2,497 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
      373 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
    5,363 ( 0.00%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
1,652,021 ( 0.52%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
  881,072 ( 0.28%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
  101,406 ( 0.03%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
   21,168 ( 0.01%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
    4,276 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
   16,892 ( 0.01%)          let span = self.data_untracked();
    5,316 ( 0.00%)          span.ctxt.hash_stable(ctx, hasher);
    9,072 ( 0.00%)          span.parent.hash_stable(ctx, hasher);
        .           
    6,120 ( 0.00%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
    5,904 ( 0.00%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
   11,808 ( 0.00%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
    5,904 ( 0.00%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
    2,952 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
    2,952 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
   24,192 ( 0.01%)      }
        .           }

1,277,344 ( 0.40%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 71 ----------------------------------------
      .               fn default() -> FxHasher {
      .                   FxHasher { hash: 0 }
      .               }
      .           }
      .           
      .           impl FxHasher {
      .               #[inline]
      .               fn add_to_hash(&mut self, i: usize) {
186,008 ( 0.06%)          self.hash = self.hash.rotate_left(5).bitxor(i).wrapping_mul(K);
      .               }
      .           }
      .           
      .           impl Hasher for FxHasher {
      .               #[inline]
 12,208 ( 0.00%)      fn write(&mut self, mut bytes: &[u8]) {
      .                   #[cfg(target_pointer_width = "32")]
      .                   let read_usize = |bytes: &[u8]| u32::from_ne_bytes(bytes[..4].try_into().unwrap());
      .                   #[cfg(target_pointer_width = "64")]
      .                   let read_usize = |bytes: &[u8]| u64::from_ne_bytes(bytes[..8].try_into().unwrap());
      .           
 47,367 ( 0.01%)          let mut hash = FxHasher { hash: self.hash };
      .                   assert!(size_of::<usize>() <= 8);
652,233 ( 0.20%)          while bytes.len() >= size_of::<usize>() {
      .                       hash.add_to_hash(read_usize(bytes) as usize);
      .                       bytes = &bytes[size_of::<usize>()..];
      .                   }
 93,810 ( 0.03%)          if (size_of::<usize>() > 4) && (bytes.len() >= 4) {
      .                       hash.add_to_hash(u32::from_ne_bytes(bytes[..4].try_into().unwrap()) as usize);
      .                       bytes = &bytes[4..];
      .                   }
 93,810 ( 0.03%)          if (size_of::<usize>() > 2) && bytes.len() >= 2 {
      .                       hash.add_to_hash(u16::from_ne_bytes(bytes[..2].try_into().unwrap()) as usize);
      .                       bytes = &bytes[2..];
      .                   }
102,539 ( 0.03%)          if (size_of::<usize>() > 1) && bytes.len() >= 1 {
 18,222 ( 0.01%)              hash.add_to_hash(bytes[0] as usize);
      .                   }
 13,328 ( 0.00%)          self.hash = hash.hash;
 12,208 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
    224 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u16(&mut self, i: u16) {
      9 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u32(&mut self, i: u32) {
118,260 ( 0.04%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[cfg(target_pointer_width = "32")]
      .               #[inline]
      .               fn write_u64(&mut self, i: u64) {
      .                   self.add_to_hash(i as usize);
      .                   self.add_to_hash((i >> 32) as usize);
      .               }
-- line 131 ----------------------------------------

    278 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core.rs
--------------------------------------------------------------------------------
Ir               

-- line 26 ----------------------------------------
      .               /// indices mapping from the entry hash to its index.
      .               indices: RawTable<usize>,
      .               /// entries is a dense vec of entries in their order.
      .               entries: Vec<Bucket<K, V>>,
      .           }
      .           
      .           #[inline(always)]
      .           fn get_hash<K, V>(entries: &[Bucket<K, V>]) -> impl Fn(&usize) -> u64 + '_ {
 90,819 ( 0.03%)      move |&i| entries[i].hash.get()
      .           }
      .           
      .           #[inline]
      .           fn equivalent<'a, K, V, Q: ?Sized + Equivalent<K>>(
      .               key: &'a Q,
      .               entries: &'a [Bucket<K, V>],
      .           ) -> impl Fn(&usize) -> bool + 'a {
 15,784 ( 0.00%)      move |&i| Q::equivalent(key, &entries[i].key)
      .           }
      .           
      .           #[inline]
      .           fn erase_index(table: &mut RawTable<usize>, hash: HashValue, index: usize) {
      .               table.erase_entry(hash.get(), move |&i| i == index);
      .           }
      .           
      .           #[inline]
-- line 50 ----------------------------------------
-- line 132 ----------------------------------------
      .                   IndexMapCore {
      .                       indices: RawTable::with_capacity(n),
      .                       entries: Vec::with_capacity(n),
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub(crate) fn len(&self) -> usize {
    591 ( 0.00%)          self.indices.len()
      .               }
      .           
      .               #[inline]
      .               pub(crate) fn capacity(&self) -> usize {
      .                   cmp::min(self.indices.capacity(), self.entries.capacity())
      .               }
      .           
      .               pub(crate) fn clear(&mut self) {
-- line 148 ----------------------------------------
-- line 152 ----------------------------------------
      .           
      .               pub(crate) fn truncate(&mut self, len: usize) {
      .                   if len < self.len() {
      .                       self.erase_indices(len, self.entries.len());
      .                       self.entries.truncate(len);
      .                   }
      .               }
      .           
    225 ( 0.00%)      pub(crate) fn drain<R>(&mut self, range: R) -> Drain<'_, Bucket<K, V>>
      .               where
      .                   R: RangeBounds<usize>,
      .               {
     75 ( 0.00%)          let range = simplify_range(range, self.entries.len());
      .                   self.erase_indices(range.start, range.end);
      .                   self.entries.drain(range)
    200 ( 0.00%)      }
      .           
      .               #[cfg(feature = "rayon")]
      .               pub(crate) fn par_drain<R>(&mut self, range: R) -> rayon::vec::Drain<'_, Bucket<K, V>>
      .               where
      .                   K: Send,
      .                   V: Send,
      .                   R: RangeBounds<usize>,
      .               {
-- line 175 ----------------------------------------
-- line 194 ----------------------------------------
      .               /// Reserve capacity for `additional` more key-value pairs.
      .               pub(crate) fn reserve(&mut self, additional: usize) {
      .                   self.indices.reserve(additional, get_hash(&self.entries));
      .                   self.reserve_entries();
      .               }
      .           
      .               /// Reserve entries capacity to match the indices
      .               fn reserve_entries(&mut self) {
  2,274 ( 0.00%)          let additional = self.indices.capacity() - self.entries.len();
      .                   self.entries.reserve_exact(additional);
      .               }
      .           
      .               /// Shrink the capacity of the map as much as possible.
      .               pub(crate) fn shrink_to_fit(&mut self) {
      .                   self.indices.shrink_to(0, get_hash(&self.entries));
      .                   self.entries.shrink_to_fit();
      .               }
-- line 210 ----------------------------------------
-- line 218 ----------------------------------------
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
      .               /// Append a key-value pair, *without* checking whether it already exists,
      .               /// and return the pair's new index.
      .               fn push(&mut self, hash: HashValue, key: K, value: V) -> usize {
 12,907 ( 0.00%)          let i = self.entries.len();
      .                   self.indices.insert(hash.get(), i, get_hash(&self.entries));
 26,030 ( 0.01%)          if i == self.entries.capacity() {
      .                       // Reserve our own capacity synced to the indices,
      .                       // rather than letting `Vec::push` just double it.
      .                       self.reserve_entries();
      .                   }
 82,533 ( 0.03%)          self.entries.push(Bucket { hash, key, value });
      .                   i
      .               }
      .           
      .               /// Return the index in `entries` where an equivalent key can be found
    636 ( 0.00%)      pub(crate) fn get_index_of<Q>(&self, hash: HashValue, key: &Q) -> Option<usize>
      .               where
      .                   Q: ?Sized + Equivalent<K>,
      .               {
    190 ( 0.00%)          let eq = equivalent(key, &self.entries);
      .                   self.indices.get(hash.get(), eq).copied()
    642 ( 0.00%)      }
      .           
    874 ( 0.00%)      pub(crate) fn insert_full(&mut self, hash: HashValue, key: K, value: V) -> (usize, Option<V>)
      .               where
      .                   K: Eq,
      .               {
     10 ( 0.00%)          match self.get_index_of(hash, &key) {
      .                       Some(i) => (i, Some(replace(&mut self.entries[i].value, value))),
     80 ( 0.00%)              None => (self.push(hash, key, value), None),
      .                   }
    812 ( 0.00%)      }
      .           
      .               /// Remove an entry by shifting all entries that follow it
      .               pub(crate) fn shift_remove_full<Q>(&mut self, hash: HashValue, key: &Q) -> Option<(usize, K, V)>
      .               where
      .                   Q: ?Sized + Equivalent<K>,
      .               {
      .                   let eq = equivalent(key, &self.entries);
      .                   match self.indices.remove_entry(hash.get(), eq) {
-- line 262 ----------------------------------------
-- line 361 ----------------------------------------
      .                   let (init, shifted_entries) = self.entries.split_at(end);
      .                   let (start_entries, erased_entries) = init.split_at(start);
      .           
      .                   let erased = erased_entries.len();
      .                   let shifted = shifted_entries.len();
      .                   let half_capacity = self.indices.buckets() / 2;
      .           
      .                   // Use a heuristic between different strategies
     50 ( 0.00%)          if erased == 0 {
      .                       // Degenerate case, nothing to do
      .                   } else if start + shifted < half_capacity && start < erased {
      .                       // Reinsert everything, as there are few kept indices
      .                       self.indices.clear();
      .           
      .                       // Reinsert stable indices
      .                       for (i, entry) in enumerate(start_entries) {
      .                           self.indices.insert_no_grow(entry.hash.get(), i);
-- line 377 ----------------------------------------
-- line 468 ----------------------------------------
      .                       Entry::Vacant(entry) => entry.insert(default),
      .                   }
      .               }
      .           
      .               /// Inserts the result of the `call` function in the entry if it is vacant and returns a mutable
      .               /// reference to it. Otherwise a mutable reference to an already existent value is returned.
      .               ///
      .               /// Computes in **O(1)** time (amortized average).
 11,040 ( 0.00%)      pub fn or_insert_with<F>(self, call: F) -> &'a mut V
      .               where
      .                   F: FnOnce() -> V,
      .               {
  2,760 ( 0.00%)          match self {
    542 ( 0.00%)              Entry::Occupied(entry) => entry.into_mut(),
    970 ( 0.00%)              Entry::Vacant(entry) => entry.insert(call()),
      .                   }
 11,040 ( 0.00%)      }
      .           
      .               /// Inserts the result of the `call` function with a reference to the entry's key if it is
      .               /// vacant, and returns a mutable reference to the new value. Otherwise a mutable reference to
      .               /// an already existent value is returned.
      .               ///
      .               /// Computes in **O(1)** time (amortized average).
      .               pub fn or_insert_with_key<F>(self, call: F) -> &'a mut V
      .               where
-- line 492 ----------------------------------------
-- line 531 ----------------------------------------
      .                       x => x,
      .                   }
      .               }
      .           
      .               /// Inserts a default-constructed value in the entry if it is vacant and returns a mutable
      .               /// reference to it. Otherwise a mutable reference to an already existent value is returned.
      .               ///
      .               /// Computes in **O(1)** time (amortized average).
 98,994 ( 0.03%)      pub fn or_default(self) -> &'a mut V
      .               where
      .                   V: Default,
      .               {
 28,284 ( 0.01%)          match self {
  2,417 ( 0.00%)              Entry::Occupied(entry) => entry.into_mut(),
 35,175 ( 0.01%)              Entry::Vacant(entry) => entry.insert(V::default()),
      .                   }
113,136 ( 0.04%)      }
      .           }
      .           
      .           impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for Entry<'_, K, V> {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   match *self {
      .                       Entry::Vacant(ref v) => f.debug_tuple(stringify!(Entry)).field(v).finish(),
      .                       Entry::Occupied(ref o) => f.debug_tuple(stringify!(Entry)).field(o).finish(),
      .                   }
-- line 555 ----------------------------------------
-- line 634 ----------------------------------------
      .           
      .               /// Return the index where the key-value pair will be inserted.
      .               pub fn index(&self) -> usize {
      .                   self.map.len()
      .               }
      .           
      .               /// Inserts the entry's key and the given value into the map, and returns a mutable reference
      .               /// to the value.
  2,526 ( 0.00%)      pub fn insert(self, value: V) -> &'a mut V {
 36,239 ( 0.01%)          let i = self.map.push(self.hash, self.key, value);
     15 ( 0.00%)          &mut self.map.entries[i].value
  3,040 ( 0.00%)      }
      .           }
      .           
      .           impl<K: fmt::Debug, V> fmt::Debug for VacantEntry<'_, K, V> {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   f.debug_tuple(stringify!(VacantEntry))
      .                       .field(self.key())
      .                       .finish()
      .               }
-- line 653 ----------------------------------------

 92,100 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../elf/dl-tls.c
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/dl-lookup.c
  ./elf/do-rel.h
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S
  ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S
  ./string/../sysdeps/x86_64/strcmp.S

--------------------------------------------------------------------------------
Ir                  
--------------------------------------------------------------------------------
89,091,516 (27.87%)  events annotated

