--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name rand_distr --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --cfg feature="alloc" --cfg feature="default" --cfg feature="std" -C metadata=c80d221fe2857f65 -C extra-filename=-c80d221fe2857f65 --out-dir /usr/home/liquid/tmp/.tmpZM6Ahs/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmpZM6Ahs/target/debug/deps --extern num_traits=/usr/home/liquid/tmp/.tmpZM6Ahs/target/debug/deps/libnum_traits-62e0abe97f871cb3.rmeta --extern rand=/usr/home/liquid/tmp/.tmpZM6Ahs/target/debug/deps/librand-f9e98cc36ae94011.rmeta -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-rand_distr-0.4.3-Debug-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
2,459,439,824 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   file:function
--------------------------------------------------------------------------------
72,967,826 ( 2.97%)  ./malloc/malloc.c:_int_free
67,869,164 ( 2.76%)  ./malloc/malloc.c:_int_malloc
55,966,931 ( 2.28%)  ???:llvm::FPPassManager::runOnFunction(llvm::Function&)
42,489,581 ( 1.73%)  ./malloc/malloc.c:malloc
27,118,743 ( 1.10%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
21,151,689 ( 0.86%)  ./malloc/malloc.c:free
18,350,657 ( 0.75%)  ???:llvm::SelectionDAG::Combine(llvm::CombineLevel, llvm::AAResults*, llvm::CodeGenOpt::Level)
12,484,465 ( 0.51%)  ???:llvm::PMDataManager::verifyPreservedAnalysis(llvm::Pass*)
10,868,098 ( 0.44%)  ???:(anonymous namespace)::Verifier::visitInstruction(llvm::Instruction&)
10,829,872 ( 0.44%)  ./malloc/malloc.c:malloc_consolidate
10,309,062 ( 0.42%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
10,017,946 ( 0.41%)  ???:llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const
 9,519,637 ( 0.39%)  ???:llvm::raw_svector_ostream::write_impl(char const*, unsigned long)
 9,298,066 ( 0.38%)  ???:(anonymous namespace)::RegAllocFast::allocateBasicBlock(llvm::MachineBasicBlock&)
 9,149,958 ( 0.37%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 8,895,089 ( 0.36%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 8,892,035 ( 0.36%)  ???:llvm::MachineInstr::addOperand(llvm::MachineFunction&, llvm::MachineOperand const&)
 8,495,975 ( 0.35%)  ???:(anonymous namespace)::Verifier::visitMDNode(llvm::MDNode const&, (anonymous namespace)::Verifier::AreDebugLocsAllowed)
 7,909,477 ( 0.32%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
 7,431,188 ( 0.30%)  ./malloc/malloc.c:unlink_chunk.constprop.0
 7,408,643 ( 0.30%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_apfloat/src/ieee.rs:rustc_apfloat::ieee::sig::shift_left
 7,109,718 ( 0.29%)  ./malloc/malloc.c:realloc
 6,968,717 ( 0.28%)  ???:llvm::MCExpr::evaluateAsRelocatableImpl(llvm::MCValue&, llvm::MCAssembler const*, llvm::MCAsmLayout const*, llvm::MCFixup const*, llvm::DenseMap<llvm::MCSection const*, unsigned long, llvm::DenseMapInfo<llvm::MCSection const*>, llvm::detail::DenseMapPair<llvm::MCSection const*, unsigned long> > const*, bool) const
 6,726,777 ( 0.27%)  ???:llvm::SelectionDAGISel::SelectCodeCommon(llvm::SDNode*, unsigned char const*, unsigned int)
 5,966,892 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 5,716,120 ( 0.23%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
 5,714,908 ( 0.23%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
 5,116,760 ( 0.21%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
 5,023,230 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
 4,978,949 ( 0.20%)  ./malloc/malloc.c:_int_realloc
 4,907,679 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<rustc_middle::ty::PredicateKind as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
 4,845,537 ( 0.20%)  ./elf/dl-lookup.c:do_lookup_x
 4,768,660 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
 4,743,234 ( 0.19%)  ???:llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)
 4,721,838 ( 0.19%)  ???:llvm::TargetRegisterInfo::checkAllSuperRegsMarked(llvm::BitVector const&, llvm::ArrayRef<unsigned short>) const
 4,714,565 ( 0.19%)  ???:llvm::coro::declaresIntrinsics(llvm::Module const&, std::initializer_list<llvm::StringRef>)
 4,659,043 ( 0.19%)  ???:(anonymous namespace)::VarLocBasedLDV::process(llvm::MachineInstr&, (anonymous namespace)::VarLocBasedLDV::OpenRangesSet&, (anonymous namespace)::VarLocBasedLDV::VarLocMap&, llvm::SmallVector<(anonymous namespace)::VarLocBasedLDV::TransferDebugPair, 4u>&)
 4,644,015 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::context::TyCtxt>::reuse_or_mk_predicate
 4,613,324 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
 4,424,778 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
 4,381,755 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_middle::ty::subst::SubstFolder as rustc_middle::ty::fold::TypeFolder>::fold_ty
 4,311,231 ( 0.18%)  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:__strncmp_avx2
 4,271,097 ( 0.17%)  ???:llvm::MCObjectStreamer::emitBytes(llvm::StringRef)
 4,256,816 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 4,251,008 ( 0.17%)  ???:llvm::PassRegistry::enumerateWith(llvm::PassRegistrationListener*)
 4,229,319 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 4,159,488 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::reuse_or_mk_predicate
 4,141,271 ( 0.17%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
 4,093,425 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
 3,942,198 ( 0.16%)  ???:llvm::TargetRegisterInfo::shouldRealignStack(llvm::MachineFunction const&) const
 3,897,641 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
 3,871,779 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
 3,850,405 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::PredicateKind as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
 3,830,177 ( 0.16%)  ./malloc/malloc.c:calloc
 3,827,807 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 3,735,349 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::source_map::SourceMap>::lookup_source_file_idx
 3,716,699 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
 3,648,697 ( 0.15%)  ???:llvm::ScheduleDAGSDNodes::BuildSchedUnits()
 3,630,059 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
 3,568,496 ( 0.15%)  ???:llvm::X86TargetLowering::X86TargetLowering(llvm::X86TargetMachine const&, llvm::X86Subtarget const&)
 3,529,566 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
 3,518,656 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_apfloat/src/ieee.rs:rustc_apfloat::ieee::sig::div
 3,477,771 ( 0.14%)  ???:llvm::MCAsmLayout::getSymbolOffset(llvm::MCSymbol const&) const
 3,472,409 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 3,467,548 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>)>>::remove_entry::<hashbrown::map::equivalent_key<rustc_span::def_id::DefId, rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>>::{closure#0}>
 3,450,465 ( 0.14%)  ???:llvm::SmallSet<llvm::Register, 32u, std::less<llvm::Register> >::insert(llvm::Register const&)
 3,425,419 ( 0.14%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_sse2_unaligned_erms
 3,393,637 ( 0.14%)  ???:(anonymous namespace)::Verifier::verify(llvm::Function const&) [clone .llvm.4153962086227604281]
 3,383,052 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs:rustc_mir_dataflow::drop_flag_effects::on_all_children_bits::is_terminal_path
 3,354,212 ( 0.14%)  ???:multikeySort(llvm::MutableArrayRef<std::pair<llvm::CachedHashStringRef, unsigned long>*>, int)
 3,268,561 ( 0.13%)  ???:(anonymous namespace)::TwoAddressInstructionPass::runOnMachineFunction(llvm::MachineFunction&)
 3,236,646 ( 0.13%)  ???:(anonymous namespace)::Verifier::visitCallBase(llvm::CallBase&)
 3,187,853 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs:<rustc_parse::lexer::StringReader>::next_token
 3,187,001 ( 0.13%)  ???:llvm::MCAsmLayout::getFragmentOffset(llvm::MCFragment const*) const
 3,085,404 ( 0.13%)  ???:(anonymous namespace)::X86MCCodeEmitter::emitPrefixImpl(unsigned int&, llvm::MCInst const&, llvm::MCSubtargetInfo const&, llvm::raw_ostream&) const
 3,052,960 ( 0.12%)  ???:llvm::TargetLoweringBase::computeRegisterProperties(llvm::TargetRegisterInfo const*)
 3,023,916 ( 0.12%)  ???:llvm::TargetLoweringBase::getTypeConversion(llvm::LLVMContext&, llvm::EVT) const
 2,990,860 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
 2,959,803 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,924,109 ( 0.12%)  ???:llvm::FoldingSetBase::FindNodeOrInsertPos(llvm::FoldingSetNodeID const&, void*&, llvm::FoldingSetBase::FoldingSetInfo const&)
 2,910,809 ( 0.12%)  ???:SetImpliedBits(llvm::FeatureBitset&, llvm::FeatureBitset const&, llvm::ArrayRef<llvm::SubtargetFeatureKV>)
 2,903,844 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/canonical/canonicalizer.rs:<rustc_infer::infer::canonical::canonicalizer::Canonicalizer as rustc_middle::ty::fold::TypeFolder>::fold_ty
 2,900,659 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
 2,885,367 ( 0.12%)  ???:llvm::PMDataManager::removeNotPreservedAnalysis(llvm::Pass*)
 2,849,316 ( 0.12%)  ???:llvm::MetadataTracking::track(void*, llvm::Metadata&, llvm::PointerUnion<llvm::MetadataAsValue*, llvm::Metadata*>)
 2,843,592 ( 0.12%)  ???:(anonymous namespace)::Verifier::verifyFunctionAttrs(llvm::FunctionType*, llvm::AttributeList, llvm::Value const*, bool)
 2,783,322 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<rustc_middle::ty::PredicateKind as rustc_middle::ty::fold::TypeFoldable>::has_escaping_bound_vars
 2,768,418 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs:<rustc_infer::infer::type_variable::TypeVariableTable>::probe
 2,648,600 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs:<rustc_infer::infer::InferCtxtInner>::rollback_to
 2,642,076 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,629,609 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs:<rustc_borrowck::MirBorrowckCtxt>::access_place
 2,622,339 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::check
 2,597,330 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_predicate
 2,555,366 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs:stacker::remaining_stack
 2,543,358 ( 0.10%)  ???:llvm::FoldingSetNodeID::AddInteger(unsigned int)
 2,536,304 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::attrs
 2,531,108 ( 0.10%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::CalculateFromScratch(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::BatchUpdateInfo*)
 2,528,836 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::find_parent_node
 2,527,111 ( 0.10%)  ???:llvm::MCContext::getOrCreateSymbol(llvm::Twine const&)
 2,526,604 ( 0.10%)  ???:(anonymous namespace)::VarLocBasedLDV::ExtendRanges(llvm::MachineFunction&, llvm::TargetPassConfig*) [clone .llvm.4451506318407214204]
 2,485,474 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
 2,478,186 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs
--------------------------------------------------------------------------------
Ir                 

-- line 46 ----------------------------------------
        .           ///
        .           /// To implement this conveniently, use the derive macro located in `rustc_macros`.
        .           pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {
        .               /// Consumers may find this more convenient to use with infallible folders than
        .               /// [`try_super_fold_with`][`TypeFoldable::try_super_fold_with`], to which the
        .               /// provided default definition delegates.  Implementors **should not** override
        .               /// this provided default definition, to ensure that the two methods are coherent
        .               /// (provide a definition of `try_super_fold_with` instead).
2,673,985 ( 0.11%)      fn super_fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {
  256,736 ( 0.01%)          self.try_super_fold_with(folder).into_ok()
2,925,246 ( 0.12%)      }
        .               /// Consumers may find this more convenient to use with infallible folders than
        .               /// [`try_fold_with`][`TypeFoldable::try_fold_with`], to which the provided
        .               /// default definition delegates.  Implementors **should not** override this
        .               /// provided default definition, to ensure that the two methods are coherent
        .               /// (provide a definition of `try_fold_with` instead).
  158,284 ( 0.01%)      fn fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {
  334,963 ( 0.01%)          self.try_fold_with(folder).into_ok()
  146,309 ( 0.01%)      }
        .           
        .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error>;
        .           
6,896,887 ( 0.28%)      fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {
2,600,586 ( 0.11%)          self.try_super_fold_with(folder)
7,294,543 ( 0.30%)      }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;
  355,301 ( 0.01%)      fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
  352,877 ( 0.01%)          self.super_visit_with(visitor)
  262,701 ( 0.01%)      }
        .           
        .               /// Returns `true` if `self` has any late-bound regions that are either
        .               /// bound by `binder` or bound by some binder outside of `binder`.
        .               /// If `binder` is `ty::INNERMOST`, this indicates whether
        .               /// there are any late-bound regions that appear free.
        .               fn has_vars_bound_at_or_above(&self, binder: ty::DebruijnIndex) -> bool {
  281,613 ( 0.01%)          self.visit_with(&mut HasEscapingVarsVisitor { outer_index: binder }).is_break()
        .               }
        .           
        .               /// Returns `true` if this `self` has any regions that escape `binder` (and
        .               /// hence are not bound by it).
        .               fn has_vars_bound_above(&self, binder: ty::DebruijnIndex) -> bool {
       12 ( 0.00%)          self.has_vars_bound_at_or_above(binder.shifted_in(1))
        .               }
        .           
1,246,286 ( 0.05%)      fn has_escaping_bound_vars(&self) -> bool {
   74,370 ( 0.00%)          self.has_vars_bound_at_or_above(ty::INNERMOST)
1,248,425 ( 0.05%)      }
        .           
   48,403 ( 0.00%)      #[instrument(level = "trace")]
        .               fn has_type_flags(&self, flags: TypeFlags) -> bool {
   71,949 ( 0.00%)          self.visit_with(&mut HasTypeFlagsVisitor { flags }).break_value() == Some(FoundFlags)
        .               }
        .               fn has_projections(&self) -> bool {
    5,750 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_PROJECTION)
        .               }
        .               fn has_opaque_types(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_TY_OPAQUE)
        .               }
   12,384 ( 0.00%)      fn references_error(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_ERROR)
   12,384 ( 0.00%)      }
        .               fn has_param_types_or_consts(&self) -> bool {
    2,319 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_CT_PARAM)
        .               }
        .               fn has_infer_regions(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_RE_INFER)
        .               }
        .               fn has_infer_types(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_TY_INFER)
        .               }
        .               fn has_infer_types_or_consts(&self) -> bool {
  116,765 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_TY_INFER | TypeFlags::HAS_CT_INFER)
        .               }
   38,408 ( 0.00%)      fn needs_infer(&self) -> bool {
   71,616 ( 0.00%)          self.has_type_flags(TypeFlags::NEEDS_INFER)
   38,752 ( 0.00%)      }
        .               fn has_placeholders(&self) -> bool {
        .                   self.has_type_flags(
        .                       TypeFlags::HAS_RE_PLACEHOLDER
        .                           | TypeFlags::HAS_TY_PLACEHOLDER
        .                           | TypeFlags::HAS_CT_PLACEHOLDER,
        .                   )
        .               }
        .               fn needs_subst(&self) -> bool {
-- line 133 ----------------------------------------
-- line 147 ----------------------------------------
        .               fn has_erasable_regions(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_FREE_REGIONS)
        .               }
        .           
        .               /// Indicates whether this value references only 'global'
        .               /// generic parameters that are the same regardless of what fn we are
        .               /// in. This is used for caching.
        .               fn is_global(&self) -> bool {
   48,057 ( 0.00%)          !self.has_type_flags(TypeFlags::HAS_FREE_LOCAL_NAMES)
        .               }
        .           
        .               /// True if there are any late-bound regions
        .               fn has_late_bound_regions(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_RE_LATE_BOUND)
        .               }
        .           
        .               /// Indicates whether this value still has parameters/placeholders/inference variables
-- line 163 ----------------------------------------
-- line 194 ----------------------------------------
        .           
        .               fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;
        .           
        .               fn fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Binder<'tcx, T>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
1,911,131 ( 0.08%)          t.super_fold_with(self)
        .               }
        .           
        .               fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
   60,769 ( 0.00%)          t.super_fold_with(self)
        .               }
        .           
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
        .                   r.super_fold_with(self)
        .               }
        .           
        .               fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
    6,707 ( 0.00%)          c.super_fold_with(self)
        .               }
        .           
        .               fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
       84 ( 0.00%)          p.super_fold_with(self)
        .               }
        .           
        .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
        .                   bug!("most type folders should not be folding MIR datastructures: {:?}", c)
        .               }
-- line 238 ----------------------------------------
-- line 247 ----------------------------------------
        .           /// A blanket implementation of this trait (that defers to the relevant
        .           /// method of [`TypeFolder`]) is provided for all infallible folders in
        .           /// order to ensure the two APIs are coherent.
        .           pub trait FallibleTypeFolder<'tcx>: TypeFolder<'tcx> {
        .               fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  108,677 ( 0.00%)          t.try_super_fold_with(self)
        .               }
        .           
        .               fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
        .                   t.try_super_fold_with(self)
        .               }
        .           
        .               fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {
        .                   r.try_super_fold_with(self)
-- line 263 ----------------------------------------
-- line 269 ----------------------------------------
        .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
        .                   c.try_super_fold_with(self)
        .               }
        .           
        .               fn try_fold_predicate(
        .                   &mut self,
        .                   p: ty::Predicate<'tcx>,
        .               ) -> Result<ty::Predicate<'tcx>, Self::Error> {
   24,669 ( 0.00%)          p.try_super_fold_with(self)
        .               }
        .           
        .               fn try_fold_mir_const(
        .                   &mut self,
        .                   c: mir::ConstantKind<'tcx>,
        .               ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {
        .                   bug!("most type folders should not be folding MIR datastructures: {:?}", c)
        .               }
-- line 285 ----------------------------------------
-- line 286 ----------------------------------------
        .           }
        .           
        .           // Blanket implementation of fallible trait for infallible folders
        .           // delegates to infallible methods to prevent incoherence
        .           impl<'tcx, F> FallibleTypeFolder<'tcx> for F
        .           where
        .               F: TypeFolder<'tcx, Error = !>,
        .           {
  111,180 ( 0.00%)      fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  197,195 ( 0.01%)          Ok(self.fold_binder(t))
  166,445 ( 0.01%)      }
        .           
   14,440 ( 0.00%)      fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
2,222,973 ( 0.09%)          Ok(self.fold_ty(t))
   10,010 ( 0.00%)      }
        .           
   12,108 ( 0.00%)      fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {
  184,987 ( 0.01%)          Ok(self.fold_region(r))
   12,108 ( 0.00%)      }
        .           
    4,190 ( 0.00%)      fn try_fold_const(
        .                   &mut self,
        .                   c: &'tcx ty::Const<'tcx>,
        .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
   88,524 ( 0.00%)          Ok(self.fold_const(c))
    4,075 ( 0.00%)      }
        .           
        .               fn try_fold_predicate(
        .                   &mut self,
        .                   p: ty::Predicate<'tcx>,
        .               ) -> Result<ty::Predicate<'tcx>, Self::Error> {
        .                   Ok(self.fold_predicate(p))
        .               }
        .           
      872 ( 0.00%)      fn try_fold_mir_const(
        .                   &mut self,
        .                   c: mir::ConstantKind<'tcx>,
        .               ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {
    1,418 ( 0.00%)          Ok(self.fold_mir_const(c))
      872 ( 0.00%)      }
        .           }
        .           
        .           pub trait TypeVisitor<'tcx>: Sized {
        .               type BreakTy = !;
        .           
        .               fn visit_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: &Binder<'tcx, T>,
        .               ) -> ControlFlow<Self::BreakTy> {
      582 ( 0.00%)          t.super_visit_with(self)
        .               }
        .           
        .               fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   t.super_visit_with(self)
        .               }
        .           
        .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   r.super_visit_with(self)
        .               }
        .           
        8 ( 0.00%)      fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
       12 ( 0.00%)          c.super_visit_with(self)
        7 ( 0.00%)      }
        .           
        .               fn visit_unevaluated_const(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   uv.super_visit_with(self)
        .               }
        .           
        .               fn visit_predicate(&mut self, p: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   p.super_visit_with(self)
        .               }
-- line 359 ----------------------------------------
-- line 380 ----------------------------------------
        .               G: FnMut(ty::Region<'tcx>) -> ty::Region<'tcx>,
        .               H: FnMut(&'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>,
        .           {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
        .                   self.tcx
        .               }
        .           
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
    1,895 ( 0.00%)          let t = ty.super_fold_with(self);
        .                   (self.ty_op)(t)
        .               }
        .           
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
        .                   let r = r.super_fold_with(self);
        .                   (self.lt_op)(r)
        .               }
        .           
-- line 396 ----------------------------------------
-- line 415 ----------------------------------------
        .               ) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   value.fold_with(&mut RegionFolder::new(self, skipped_regions, &mut f))
        .               }
        .           
        .               /// Invoke `callback` on every region appearing free in `value`.
    2,203 ( 0.00%)      pub fn for_each_free_region(
        .                   self,
        .                   value: &impl TypeFoldable<'tcx>,
        .                   mut callback: impl FnMut(ty::Region<'tcx>),
        .               ) {
        .                   self.any_free_region_meets(value, |r| {
   14,698 ( 0.00%)              callback(r);
        .                       false
        .                   });
    1,922 ( 0.00%)      }
        .           
        .               /// Returns `true` if `callback` returns true for every region appearing free in `value`.
        .               pub fn all_free_regions_meet(
        .                   self,
        .                   value: &impl TypeFoldable<'tcx>,
        .                   mut callback: impl FnMut(ty::Region<'tcx>) -> bool,
        .               ) -> bool {
    2,649 ( 0.00%)          !self.any_free_region_meets(value, |r| !callback(r))
        .               }
        .           
        .               /// Returns `true` if `callback` returns true for some region appearing free in `value`.
        .               pub fn any_free_region_meets(
        .                   self,
        .                   value: &impl TypeFoldable<'tcx>,
        .                   callback: impl FnMut(ty::Region<'tcx>) -> bool,
        .               ) -> bool {
-- line 448 ----------------------------------------
-- line 473 ----------------------------------------
        .                       F: FnMut(ty::Region<'tcx>) -> bool,
        .                   {
        .                       type BreakTy = ();
        .           
        .                       fn visit_binder<T: TypeFoldable<'tcx>>(
        .                           &mut self,
        .                           t: &Binder<'tcx, T>,
        .                       ) -> ControlFlow<Self::BreakTy> {
      602 ( 0.00%)                  self.outer_index.shift_in(1);
      776 ( 0.00%)                  let result = t.as_ref().skip_binder().visit_with(self);
      582 ( 0.00%)                  self.outer_index.shift_out(1);
        .                           result
        .                       }
        .           
   14,425 ( 0.00%)              fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
   22,586 ( 0.00%)                  match *r {
        .                               ty::ReLateBound(debruijn, _) if debruijn < self.outer_index => {
        .                                   ControlFlow::CONTINUE
        .                               }
        .                               _ => {
        .                                   if (self.callback)(r) {
        .                                       ControlFlow::BREAK
        .                                   } else {
        .                                       ControlFlow::CONTINUE
        .                                   }
        .                               }
        .                           }
   20,195 ( 0.00%)              }
        .           
        .                       fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                           // We're only interested in types involving regions
   16,656 ( 0.00%)                  if ty.flags().intersects(TypeFlags::HAS_FREE_REGIONS) {
   15,379 ( 0.00%)                      ty.super_visit_with(self)
        .                           } else {
        .                               ControlFlow::CONTINUE
        .                           }
        .                       }
        .                   }
        .           
   45,206 ( 0.00%)          value.visit_with(&mut RegionVisitor { outer_index: ty::INNERMOST, callback }).is_break()
        .               }
        .           }
        .           
        .           /// Folds over the substructure of a type, visiting its component
        .           /// types and all regions that occur *free* within it.
        .           ///
        .           /// That is, `Ty` can contain function or method types that bind
        .           /// regions at the call site (`ReLateBound`), and occurrences of
-- line 520 ----------------------------------------
-- line 540 ----------------------------------------
        .           
        .           impl<'a, 'tcx> RegionFolder<'a, 'tcx> {
        .               #[inline]
        .               pub fn new(
        .                   tcx: TyCtxt<'tcx>,
        .                   skipped_regions: &'a mut bool,
        .                   fold_region_fn: &'a mut dyn FnMut(ty::Region<'tcx>, ty::DebruijnIndex) -> ty::Region<'tcx>,
        .               ) -> RegionFolder<'a, 'tcx> {
  152,950 ( 0.01%)          RegionFolder { tcx, skipped_regions, current_index: ty::INNERMOST, fold_region_fn }
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
   32,545 ( 0.00%)          self.tcx
   32,545 ( 0.00%)      }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
    1,643 ( 0.00%)          self.current_index.shift_in(1);
    2,522 ( 0.00%)          let t = t.super_fold_with(self);
    1,611 ( 0.00%)          self.current_index.shift_out(1);
        .                   t
        .               }
        .           
      982 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
   20,066 ( 0.00%)          match *r {
      982 ( 0.00%)              ty::ReLateBound(debruijn, _) if debruijn < self.current_index => {
        .                           debug!(?self.current_index, "skipped bound region");
      982 ( 0.00%)                  *self.skipped_regions = true;
        .                           r
        .                       }
        .                       _ => {
        .                           debug!(?self.current_index, "folding free region");
   57,252 ( 0.00%)                  (self.fold_region_fn)(r, self.current_index)
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Bound vars replacer
        .           
-- line 585 ----------------------------------------
-- line 592 ----------------------------------------
        .               current_index: ty::DebruijnIndex,
        .           
        .               fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,
        .               fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,
        .               fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,
        .           }
        .           
        .           impl<'a, 'tcx> BoundVarReplacer<'a, 'tcx> {
   36,250 ( 0.00%)      fn new(
        .                   tcx: TyCtxt<'tcx>,
        .                   fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,
        .                   fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,
        .                   fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,
        .               ) -> Self {
  129,908 ( 0.01%)          BoundVarReplacer { tcx, current_index: ty::INNERMOST, fld_r, fld_t, fld_c }
   18,125 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for BoundVarReplacer<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
   42,196 ( 0.00%)          self.tcx
   29,578 ( 0.00%)      }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
   96,651 ( 0.00%)          self.current_index.shift_in(1);
  201,650 ( 0.01%)          let t = t.super_fold_with(self);
   91,344 ( 0.00%)          self.current_index.shift_out(1);
        .                   t
        .               }
        .           
  290,935 ( 0.01%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
  134,974 ( 0.01%)          match *t.kind() {
    2,998 ( 0.00%)              ty::Bound(debruijn, bound_ty) if debruijn == self.current_index => {
      600 ( 0.00%)                  if let Some(fld_t) = self.fld_t.as_mut() {
        .                               let ty = fld_t(bound_ty);
      600 ( 0.00%)                      return ty::fold::shift_vars(self.tcx, &ty, self.current_index.as_u32());
        .                           }
        .                       }
  133,774 ( 0.01%)              _ if t.has_vars_bound_at_or_above(self.current_index) => {
   69,267 ( 0.00%)                  return t.super_fold_with(self);
        .                       }
        .                       _ => {}
        .                   }
        .                   t
  297,786 ( 0.01%)      }
        .           
   68,700 ( 0.00%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
   56,388 ( 0.00%)          match *r {
   56,052 ( 0.00%)              ty::ReLateBound(debruijn, br) if debruijn == self.current_index => {
   28,025 ( 0.00%)                  if let Some(fld_r) = self.fld_r.as_mut() {
        .                               let region = fld_r(br);
   56,758 ( 0.00%)                      return if let ty::ReLateBound(debruijn1, br) = *region {
        .                                   // If the callback returns a late-bound region,
        .                                   // that region should always use the INNERMOST
        .                                   // debruijn index. Then we adjust it to the
        .                                   // correct depth.
      354 ( 0.00%)                          assert_eq!(debruijn1, ty::INNERMOST);
    3,469 ( 0.00%)                          self.tcx.mk_region(ty::ReLateBound(debruijn, br))
        .                               } else {
        .                                   region
        .                               };
        .                           }
        .                       }
        .                       _ => {}
        .                   }
        .                   r
   68,700 ( 0.00%)      }
        .           
        .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
        .                   match *ct {
        .                       ty::Const { val: ty::ConstKind::Bound(debruijn, bound_const), ty }
        .                           if debruijn == self.current_index =>
        .                       {
        .                           if let Some(fld_c) = self.fld_c.as_mut() {
        .                               let ct = fld_c(bound_const, ty);
-- line 669 ----------------------------------------
-- line 697 ----------------------------------------
        .                   mut fld_r: F,
        .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
        .               where
        .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   let mut region_map = BTreeMap::new();
        .                   let mut real_fld_r =
  199,156 ( 0.01%)              |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));
    3,652 ( 0.00%)          let value = value.skip_binder();
  116,053 ( 0.00%)          let value = if !value.has_escaping_bound_vars() {
  226,386 ( 0.01%)              value
        .                   } else {
   10,731 ( 0.00%)              let mut replacer = BoundVarReplacer::new(self, Some(&mut real_fld_r), None, None);
      253 ( 0.00%)              value.fold_with(&mut replacer)
        .                   };
  301,886 ( 0.01%)          (value, region_map)
        .               }
        .           
        .               /// Replaces all escaping bound vars. The `fld_r` closure replaces escaping
        .               /// bound regions; the `fld_t` closure replaces escaping bound types and the `fld_c`
        .               /// closure replaces escaping bound consts.
  117,850 ( 0.00%)      pub fn replace_escaping_bound_vars<T, F, G, H>(
        .                   self,
        .                   value: T,
        .                   mut fld_r: F,
        .                   mut fld_t: G,
        .                   mut fld_c: H,
        .               ) -> T
        .               where
        .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
        .                   G: FnMut(ty::BoundTy) -> Ty<'tcx>,
        .                   H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,
        .                   T: TypeFoldable<'tcx>,
        .               {
  104,567 ( 0.00%)          if !value.has_escaping_bound_vars() {
  229,507 ( 0.01%)              value
        .                   } else {
        .                       let mut replacer =
  200,179 ( 0.01%)                  BoundVarReplacer::new(self, Some(&mut fld_r), Some(&mut fld_t), Some(&mut fld_c));
   17,822 ( 0.00%)              value.fold_with(&mut replacer)
        .                   }
   81,030 ( 0.00%)      }
        .           
        .               /// Replaces all types or regions bound by the given `Binder`. The `fld_r`
        .               /// closure replaces bound regions while the `fld_t` closure replaces bound
        .               /// types.
  476,699 ( 0.02%)      pub fn replace_bound_vars<T, F, G, H>(
        .                   self,
        .                   value: Binder<'tcx, T>,
        .                   mut fld_r: F,
        .                   fld_t: G,
        .                   fld_c: H,
        .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
        .               where
        .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
        .                   G: FnMut(ty::BoundTy) -> Ty<'tcx>,
        .                   H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   let mut region_map = BTreeMap::new();
   84,635 ( 0.00%)          let real_fld_r = |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));
  445,668 ( 0.02%)          let value = self.replace_escaping_bound_vars(value.skip_binder(), real_fld_r, fld_t, fld_c);
  406,808 ( 0.02%)          (value, region_map)
  346,957 ( 0.01%)      }
        .           
        .               /// Replaces any late-bound regions bound in `value` with
        .               /// free variants attached to `all_outlive_scope`.
   12,397 ( 0.00%)      pub fn liberate_late_bound_regions<T>(
        .                   self,
        .                   all_outlive_scope: DefId,
        .                   value: ty::Binder<'tcx, T>,
        .               ) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   self.replace_late_bound_regions(value, |br| {
   25,181 ( 0.00%)              self.mk_region(ty::ReFree(ty::FreeRegion {
    3,874 ( 0.00%)                  scope: all_outlive_scope,
        .                           bound_region: br.kind,
        .                       }))
        .                   })
        .                   .0
    6,762 ( 0.00%)      }
        .           
        .               pub fn shift_bound_var_indices<T>(self, bound_vars: usize, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   self.replace_escaping_bound_vars(
  419,850 ( 0.02%)              value,
        .                       |r| {
        .                           self.mk_region(ty::ReLateBound(
        .                               ty::INNERMOST,
        .                               ty::BoundRegion {
        .                                   var: ty::BoundVar::from_usize(r.var.as_usize() + bound_vars),
        .                                   kind: r.kind,
        .                               },
        .                           ))
-- line 795 ----------------------------------------
-- line 843 ----------------------------------------
        .               fn collect_late_bound_regions<T>(
        .                   self,
        .                   value: &Binder<'tcx, T>,
        .                   just_constraint: bool,
        .               ) -> FxHashSet<ty::BoundRegionKind>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
    1,284 ( 0.00%)          let mut collector = LateBoundRegionsCollector::new(just_constraint);
        .                   let result = value.as_ref().skip_binder().visit_with(&mut collector);
        .                   assert!(result.is_continue()); // should never have stopped early
    2,544 ( 0.00%)          collector.regions
        .               }
        .           
        .               /// Replaces any late-bound regions bound in `value` with `'erased`. Useful in codegen but also
        .               /// method lookup and a few other places where precise region relationships are not required.
       56 ( 0.00%)      pub fn erase_late_bound_regions<T>(self, value: Binder<'tcx, T>) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
    2,712 ( 0.00%)          self.replace_late_bound_regions(value, |_| self.lifetimes.re_erased).0
       48 ( 0.00%)      }
        .           
        .               /// Rewrite any late-bound regions so that they are anonymous. Region numbers are
        .               /// assigned starting at 0 and increasing monotonically in the order traversed
        .               /// by the fold operation.
        .               ///
        .               /// The chief purpose of this function is to canonicalize regions so that two
        .               /// `FnSig`s or `TraitRef`s which are equivalent up to region naming will become
        .               /// structurally identical. For example, `for<'a, 'b> fn(&'a isize, &'b isize)` and
        .               /// `for<'a, 'b> fn(&'b isize, &'a isize)` will become identical after anonymization.
  265,237 ( 0.01%)      pub fn anonymize_late_bound_regions<T>(self, sig: Binder<'tcx, T>) -> Binder<'tcx, T>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  189,670 ( 0.01%)          let mut counter = 0;
      387 ( 0.00%)          let inner = self
        .                       .replace_late_bound_regions(sig, |_| {
        .                           let br = ty::BoundRegion {
      666 ( 0.00%)                      var: ty::BoundVar::from_u32(counter),
        .                               kind: ty::BrAnon(counter),
        .                           };
    2,664 ( 0.00%)                  let r = self.mk_region(ty::ReLateBound(ty::INNERMOST, br));
    1,665 ( 0.00%)                  counter += 1;
        .                           r
        .                       })
        .                       .0;
   37,934 ( 0.00%)          let bound_vars = self.mk_bound_variable_kinds(
  113,802 ( 0.00%)              (0..counter).map(|i| ty::BoundVariableKind::Region(ty::BrAnon(i))),
        .                   );
  226,524 ( 0.01%)          Binder::bind_with_vars(inner, bound_vars)
  227,481 ( 0.01%)      }
        .           }
        .           
        .           pub struct ValidateBoundVars<'tcx> {
        .               bound_vars: &'tcx ty::List<ty::BoundVariableKind>,
        .               binder_index: ty::DebruijnIndex,
        .               // We may encounter the same variable at different levels of binding, so
        .               // this can't just be `Ty`
        .               visited: SsoHashSet<(ty::DebruijnIndex, Ty<'tcx>)>,
-- line 902 ----------------------------------------
-- line 1004 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               current_index: ty::DebruijnIndex,
        .               amount: u32,
        .           }
        .           
        .           impl<'tcx> Shifter<'tcx> {
        .               pub fn new(tcx: TyCtxt<'tcx>, amount: u32) -> Self {
        .                   Shifter { tcx, current_index: ty::INNERMOST, amount }
    1,210 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeFolder<'tcx> for Shifter<'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
       15 ( 0.00%)          self.tcx
        .               }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
        .                   self.current_index.shift_in(1);
        .                   let t = t.super_fold_with(self);
        .                   self.current_index.shift_out(1);
        .                   t
        .               }
        .           
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
       10 ( 0.00%)          match *r {
        .                       ty::ReLateBound(debruijn, br) => {
       20 ( 0.00%)                  if self.amount == 0 || debruijn < self.current_index {
        .                               r
        .                           } else {
        5 ( 0.00%)                      let debruijn = debruijn.shifted_in(self.amount);
        .                               let shifted = ty::ReLateBound(debruijn, br);
       50 ( 0.00%)                      self.tcx.mk_region(shifted)
        .                           }
        .                       }
        .                       _ => r,
        .                   }
        .               }
        .           
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
    1,240 ( 0.00%)          match *ty.kind() {
        .                       ty::Bound(debruijn, bound_ty) => {
        .                           if self.amount == 0 || debruijn < self.current_index {
        .                               ty
        .                           } else {
        .                               let debruijn = debruijn.shifted_in(self.amount);
        .                               self.tcx.mk_ty(ty::Bound(debruijn, bound_ty))
        .                           }
        .                       }
        .           
    1,866 ( 0.00%)              _ => ty.super_fold_with(self),
        .                   }
        .               }
        .           
        .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
        .                   if let ty::Const { val: ty::ConstKind::Bound(debruijn, bound_ct), ty } = *ct {
        .                       if self.amount == 0 || debruijn < self.current_index {
        .                           ct
        .                       } else {
-- line 1064 ----------------------------------------
-- line 1085 ----------------------------------------
        .           }
        .           
        .           pub fn shift_vars<'tcx, T>(tcx: TyCtxt<'tcx>, value: T, amount: u32) -> T
        .           where
        .               T: TypeFoldable<'tcx>,
        .           {
        .               debug!("shift_vars(value={:?}, amount={})", value, amount);
        .           
    1,218 ( 0.00%)      value.fold_with(&mut Shifter::new(tcx, amount))
        .           }
        .           
        .           #[derive(Debug, PartialEq, Eq, Copy, Clone)]
        .           struct FoundEscapingVars;
        .           
        .           /// An "escaping var" is a bound var whose binder is not part of `t`. A bound var can be a
        .           /// bound region or a bound type.
        .           ///
-- line 1101 ----------------------------------------
-- line 1128 ----------------------------------------
        .           
        .           impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {
        .               type BreakTy = FoundEscapingVars;
        .           
        .               fn visit_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: &Binder<'tcx, T>,
        .               ) -> ControlFlow<Self::BreakTy> {
    9,842 ( 0.00%)          self.outer_index.shift_in(1);
        .                   let result = t.super_visit_with(self);
   13,739 ( 0.00%)          self.outer_index.shift_out(1);
        .                   result
        .               }
        .           
        .               #[inline]
        .               fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   // If the outer-exclusive-binder is *strictly greater* than
        .                   // `outer_index`, that means that `t` contains some content
        .                   // bound at `outer_index` or above (because
-- line 1146 ----------------------------------------
-- line 1160 ----------------------------------------
        .                   // visited.
        .                   if r.bound_at_or_above_binder(self.outer_index) {
        .                       ControlFlow::Break(FoundEscapingVars)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
      144 ( 0.00%)      fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   // we don't have a `visit_infer_const` callback, so we have to
        .                   // hook in here to catch this case (annoying...), but
        .                   // otherwise we do want to remember to visit the rest of the
        .                   // const, as it has types/regions embedded in a lot of other
        .                   // places.
      218 ( 0.00%)          match ct.val {
        .                       ty::ConstKind::Bound(debruijn, _) if debruijn >= self.outer_index => {
        .                           ControlFlow::Break(FoundEscapingVars)
        .                       }
        3 ( 0.00%)              _ => ct.super_visit_with(self),
        .                   }
      144 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   if predicate.inner.outer_exclusive_binder > self.outer_index {
        .                       ControlFlow::Break(FoundEscapingVars)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
-- line 1188 ----------------------------------------
-- line 1210 ----------------------------------------
        .               #[instrument(level = "trace")]
        .               fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<Self::BreakTy> {
        .                   debug!(
        .                       "HasTypeFlagsVisitor: t={:?} t.flags={:?} self.flags={:?}",
        .                       t,
        .                       t.flags(),
        .                       self.flags
        .                   );
  289,746 ( 0.01%)          if t.flags().intersects(self.flags) {
        .                       ControlFlow::Break(FoundFlags)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
        .               #[inline]
        .               #[instrument(skip(self), level = "trace")]
        .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
    7,481 ( 0.00%)          let flags = r.type_flags();
        .                   trace!(r.flags=?flags);
        .                   if flags.intersects(self.flags) {
        .                       ControlFlow::Break(FoundFlags)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
        .               #[inline]
        .               #[instrument(level = "trace")]
        .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
   23,124 ( 0.00%)          let flags = FlagComputation::for_const(c);
        .                   trace!(r.flags=?flags);
      962 ( 0.00%)          if flags.intersects(self.flags) {
        .                       ControlFlow::Break(FoundFlags)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
        .               #[inline]
        .               #[instrument(level = "trace")]
        .               fn visit_unevaluated_const(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {
   30,865 ( 0.00%)          let flags = FlagComputation::for_unevaluated_const(uv);
        .                   trace!(r.flags=?flags);
        .                   if flags.intersects(self.flags) {
        .                       ControlFlow::Break(FoundFlags)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
-- line 1260 ----------------------------------------
-- line 1285 ----------------------------------------
        .               /// them constraints `'a == 'b`. But if you have `<&'a u32 as
        .               /// Trait>::Foo` and `<&'b u32 as Trait>::Foo`, normalizing those
        .               /// types may mean that `'a` and `'b` don't appear in the results,
        .               /// so they are not considered *constrained*.
        .               just_constrained: bool,
        .           }
        .           
        .           impl LateBoundRegionsCollector {
      636 ( 0.00%)      fn new(just_constrained: bool) -> Self {
    4,452 ( 0.00%)          LateBoundRegionsCollector {
        .                       current_index: ty::INNERMOST,
        .                       regions: Default::default(),
        .                       just_constrained,
        .                   }
      636 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {
        .               fn visit_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: &Binder<'tcx, T>,
        .               ) -> ControlFlow<Self::BreakTy> {
        .                   self.current_index.shift_in(1);
        .                   let result = t.super_visit_with(self);
        .                   self.current_index.shift_out(1);
        .                   result
        .               }
        .           
    2,505 ( 0.00%)      fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   // if we are only looking for "constrained" region, we have to
        .                   // ignore the inputs to a projection, as they may not appear
        .                   // in the normalized form
    2,518 ( 0.00%)          if self.just_constrained {
    2,492 ( 0.00%)              if let ty::Projection(..) | ty::Opaque(..) = t.kind() {
        .                           return ControlFlow::CONTINUE;
        .                       }
        .                   }
        .           
    2,930 ( 0.00%)          t.super_visit_with(self)
    1,682 ( 0.00%)      }
        .           
        .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   // if we are only looking for "constrained" region, we have to
        .                   // ignore the inputs of an unevaluated const, as they may not appear
        .                   // in the normalized form
       12 ( 0.00%)          if self.just_constrained {
        4 ( 0.00%)              if let ty::ConstKind::Unevaluated(..) = c.val {
        .                           return ControlFlow::CONTINUE;
        .                       }
        .                   }
        .           
        .                   c.super_visit_with(self)
        .               }
        .           
        .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
    2,464 ( 0.00%)          if let ty::ReLateBound(debruijn, br) = *r {
      492 ( 0.00%)              if debruijn == self.current_index {
        .                           self.regions.insert(br.kind);
        .                       }
        .                   }
        .                   ControlFlow::CONTINUE
        .               }
        .           }

  254,446 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs
--------------------------------------------------------------------------------
Ir               

-- line 44 ----------------------------------------
      .           /// Convert from a specific kind of undo to the more general UndoLog
      .           impl<'tcx> From<Instantiate> for UndoLog<'tcx> {
      .               fn from(l: Instantiate) -> Self {
      .                   UndoLog::Values(sv::UndoLog::Other(l))
      .               }
      .           }
      .           
      .           impl<'tcx> Rollback<UndoLog<'tcx>> for TypeVariableStorage<'tcx> {
 52,836 ( 0.00%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
222,102 ( 0.01%)          match undo {
 42,078 ( 0.00%)              UndoLog::EqRelation(undo) => self.eq_relations.reverse(undo),
 22,024 ( 0.00%)              UndoLog::SubRelation(undo) => self.sub_relations.reverse(undo),
 41,570 ( 0.00%)              UndoLog::Values(undo) => self.values.reverse(undo),
      .                   }
105,672 ( 0.00%)      }
      .           }
      .           
      .           pub struct TypeVariableStorage<'tcx> {
      .               values: sv::SnapshotVecStorage<Delegate>,
      .           
      .               /// Two variables are unified in `eq_relations` when we have a
      .               /// constraint `?X == ?Y`. This table also stores, for each key,
      .               /// the known value.
-- line 66 ----------------------------------------
-- line 136 ----------------------------------------
      .               DynReturnFn,
      .               LatticeVariable,
      .           }
      .           
      .           pub(crate) struct TypeVariableData {
      .               origin: TypeVariableOrigin,
      .           }
      .           
341,826 ( 0.01%)  #[derive(Copy, Clone, Debug)]
      .           pub enum TypeVariableValue<'tcx> {
      .               Known { value: Ty<'tcx> },
      .               Unknown { universe: ty::UniverseIndex },
      .           }
      .           
      .           impl<'tcx> TypeVariableValue<'tcx> {
      .               /// If this value is known, returns the type it is known to be.
      .               /// Otherwise, `None`.
      .               pub fn known(&self) -> Option<Ty<'tcx>> {
208,352 ( 0.01%)          match *self {
      .                       TypeVariableValue::Unknown { .. } => None,
      .                       TypeVariableValue::Known { value } => Some(value),
      .                   }
      .               }
      .           
      .               pub fn is_unknown(&self) -> bool {
      .                   match *self {
      .                       TypeVariableValue::Unknown { .. } => true,
-- line 162 ----------------------------------------
-- line 166 ----------------------------------------
      .           }
      .           
      .           pub(crate) struct Instantiate;
      .           
      .           pub(crate) struct Delegate;
      .           
      .           impl<'tcx> TypeVariableStorage<'tcx> {
      .               pub fn new() -> TypeVariableStorage<'tcx> {
 41,580 ( 0.00%)          TypeVariableStorage {
      .                       values: sv::SnapshotVecStorage::new(),
      .                       eq_relations: ut::UnificationTableStorage::new(),
      .                       sub_relations: ut::UnificationTableStorage::new(),
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub(crate) fn with_log<'a>(
-- line 182 ----------------------------------------
-- line 188 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> TypeVariableTable<'_, 'tcx> {
      .               /// Returns the origin that was given when `vid` was created.
      .               ///
      .               /// Note that this function does not return care whether
      .               /// `vid` has been unified with something else or not.
      .               pub fn var_origin(&self, vid: ty::TyVid) -> &TypeVariableOrigin {
    139 ( 0.00%)          &self.storage.values.get(vid.as_usize()).origin
      .               }
      .           
      .               /// Records that `a == b`, depending on `dir`.
      .               ///
      .               /// Precondition: neither `a` nor `b` are known.
      .               pub fn equate(&mut self, a: ty::TyVid, b: ty::TyVid) {
      .                   debug_assert!(self.probe(a).is_unknown());
      .                   debug_assert!(self.probe(b).is_unknown());
  1,561 ( 0.00%)          self.eq_relations().union(a, b);
  1,338 ( 0.00%)          self.sub_relations().union(a, b);
      .               }
      .           
      .               /// Records that `a <: b`, depending on `dir`.
      .               ///
      .               /// Precondition: neither `a` nor `b` are known.
      .               pub fn sub(&mut self, a: ty::TyVid, b: ty::TyVid) {
      .                   debug_assert!(self.probe(a).is_unknown());
      .                   debug_assert!(self.probe(b).is_unknown());
    668 ( 0.00%)          self.sub_relations().union(a, b);
      .               }
      .           
      .               /// Instantiates `vid` with the type `ty`.
      .               ///
      .               /// Precondition: `vid` must not have been previously instantiated.
 84,085 ( 0.00%)      pub fn instantiate(&mut self, vid: ty::TyVid, ty: Ty<'tcx>) {
      .                   let vid = self.root_var(vid);
      .                   debug_assert!(self.probe(vid).is_unknown());
      .                   debug_assert!(
      .                       self.eq_relations().probe_value(vid).is_unknown(),
      .                       "instantiating type variable `{:?}` twice: new-value = {:?}, old-value={:?}",
      .                       vid,
      .                       ty,
      .                       self.eq_relations().probe_value(vid)
      .                   );
117,719 ( 0.00%)          self.eq_relations().union_value(vid, TypeVariableValue::Known { value: ty });
      .           
      .                   // Hack: we only need this so that `types_escaping_snapshot`
      .                   // can see what has been unified; see the Delegate impl for
      .                   // more details.
      .                   self.undo_log.push(Instantiate);
 84,085 ( 0.00%)      }
      .           
      .               /// Creates a new type variable.
      .               ///
      .               /// - `diverging`: indicates if this is a "diverging" type
      .               ///   variable, e.g.,  one created as the type of a `return`
      .               ///   expression. The code in this module doesn't care if a
      .               ///   variable is diverging, but the main Rust type-checker will
      .               ///   sometimes "unify" such variables with the `!` or `()` types.
      .               /// - `origin`: indicates *why* the type variable was created.
      .               ///   The code in this module doesn't care, but it can be useful
      .               ///   for improving error messages.
105,018 ( 0.00%)      pub fn new_var(
      .                   &mut self,
      .                   universe: ty::UniverseIndex,
      .                   origin: TypeVariableOrigin,
      .               ) -> ty::TyVid {
157,527 ( 0.01%)          let eq_key = self.eq_relations().new_key(TypeVariableValue::Unknown { universe });
      .           
 87,515 ( 0.00%)          let sub_key = self.sub_relations().new_key(());
 17,503 ( 0.00%)          assert_eq!(eq_key.vid, sub_key);
      .           
157,527 ( 0.01%)          let index = self.values().push(TypeVariableData { origin });
 70,012 ( 0.00%)          assert_eq!(eq_key.vid.as_u32(), index as u32);
      .           
      .                   debug!("new_var(index={:?}, universe={:?}, origin={:?}", eq_key.vid, universe, origin,);
      .           
      .                   eq_key.vid
122,521 ( 0.00%)      }
      .           
      .               /// Returns the number of type variables created thus far.
      .               pub fn num_vars(&self) -> usize {
    869 ( 0.00%)          self.storage.values.len()
      .               }
      .           
      .               /// Returns the "root" variable of `vid` in the `eq_relations`
      .               /// equivalence table. All type variables that have been equated
      .               /// will yield the same root variable (per the union-find
      .               /// algorithm), so `root_var(a) == root_var(b)` implies that `a ==
      .               /// b` (transitively).
      .               pub fn root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
 68,274 ( 0.00%)          self.eq_relations().find(vid).vid
      .               }
      .           
      .               /// Returns the "root" variable of `vid` in the `sub_relations`
      .               /// equivalence table. All type variables that have been are
      .               /// related via equality or subtyping will yield the same root
      .               /// variable (per the union-find algorithm), so `sub_root_var(a)
      .               /// == sub_root_var(b)` implies that:
      .               ///
      .               ///     exists X. (a <: X || X <: a) && (b <: X || X <: b)
    151 ( 0.00%)      pub fn sub_root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
 59,016 ( 0.00%)          self.sub_relations().find(vid)
    302 ( 0.00%)      }
      .           
      .               /// Returns `true` if `a` and `b` have same "sub-root" (i.e., exists some
      .               /// type X such that `forall i in {a, b}. (i <: X || X <: i)`.
      .               pub fn sub_unified(&mut self, a: ty::TyVid, b: ty::TyVid) -> bool {
      .                   self.sub_root_var(a) == self.sub_root_var(b)
      .               }
      .           
      .               /// Retrieves the type to which `vid` has been instantiated, if
      .               /// any.
769,005 ( 0.03%)      pub fn probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
      .                   self.inlined_probe(vid)
769,005 ( 0.03%)      }
      .           
      .               /// An always-inlined variant of `probe`, for very hot call sites.
      .               #[inline(always)]
      .               pub fn inlined_probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
465,100 ( 0.02%)          self.eq_relations().inlined_probe_value(vid)
      .               }
      .           
      .               /// If `t` is a type-inference variable, and it has been
      .               /// instantiated, then return the with which it was
      .               /// instantiated. Otherwise, returns `t`.
      .               pub fn replace_if_possible(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
202,190 ( 0.01%)          match *t.kind() {
121,359 ( 0.00%)              ty::Infer(ty::TyVar(v)) => match self.probe(v) {
      .                           TypeVariableValue::Unknown { .. } => t,
      .                           TypeVariableValue::Known { value } => value,
      .                       },
      .                       _ => t,
      .                   }
      .               }
      .           
      .               #[inline]
-- line 323 ----------------------------------------
-- line 324 ----------------------------------------
      .               fn values(
      .                   &mut self,
      .               ) -> sv::SnapshotVec<Delegate, &mut Vec<TypeVariableData>, &mut InferCtxtUndoLogs<'tcx>> {
      .                   self.storage.values.with_log(self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn eq_relations(&mut self) -> super::UnificationTable<'_, 'tcx, TyVidEqKey<'tcx>> {
649,276 ( 0.03%)          self.storage.eq_relations.with_log(self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn sub_relations(&mut self) -> super::UnificationTable<'_, 'tcx, ty::TyVid> {
 37,979 ( 0.00%)          self.storage.sub_relations.with_log(self.undo_log)
      .               }
      .           
      .               /// Returns a range of the type variables created during the snapshot.
  4,345 ( 0.00%)      pub fn vars_since_snapshot(
      .                   &mut self,
      .                   value_count: usize,
      .               ) -> (Range<TyVid>, Vec<TypeVariableOrigin>) {
      .                   let range = TyVid::from_usize(value_count)..TyVid::from_usize(self.num_vars());
  5,214 ( 0.00%)          (
      .                       range.start..range.end,
      .                       (range.start.as_usize()..range.end.as_usize())
      .                           .map(|index| self.storage.values.get(index).origin)
      .                           .collect(),
      .                   )
  5,214 ( 0.00%)      }
      .           
      .               /// Returns indices of all variables that are not yet
      .               /// instantiated.
      .               pub fn unsolved_variables(&mut self) -> Vec<ty::TyVid> {
      .                   (0..self.storage.values.len())
      .                       .filter_map(|i| {
      .                           let vid = ty::TyVid::from_usize(i);
 34,288 ( 0.00%)                  match self.probe(vid) {
      .                               TypeVariableValue::Unknown { .. } => Some(vid),
      .                               TypeVariableValue::Known { .. } => None,
      .                           }
      .                       })
      .                       .collect()
      .               }
      .           }
      .           
-- line 368 ----------------------------------------
-- line 391 ----------------------------------------
      .           /// These structs (a newtyped TyVid) are used as the unification key
      .           /// for the `eq_relations`; they carry a `TypeVariableValue` along
      .           /// with them.
      .           #[derive(Copy, Clone, Debug, PartialEq, Eq)]
      .           pub(crate) struct TyVidEqKey<'tcx> {
      .               vid: ty::TyVid,
      .           
      .               // in the table, we map each ty-vid to one of these:
435,577 ( 0.02%)      phantom: PhantomData<TypeVariableValue<'tcx>>,
      .           }
      .           
      .           impl<'tcx> From<ty::TyVid> for TyVidEqKey<'tcx> {
      .               #[inline] // make this function eligible for inlining - it is quite hot.
      .               fn from(vid: ty::TyVid) -> Self {
      .                   TyVidEqKey { vid, phantom: PhantomData }
      .               }
      .           }
-- line 407 ----------------------------------------
-- line 419 ----------------------------------------
      .                   "TyVidEqKey"
      .               }
      .           }
      .           
      .           impl<'tcx> ut::UnifyValue for TypeVariableValue<'tcx> {
      .               type Error = ut::NoError;
      .           
      .               fn unify_values(value1: &Self, value2: &Self) -> Result<Self, ut::NoError> {
 68,383 ( 0.00%)          match (value1, value2) {
      .                       // We never equate two type variables, both of which
      .                       // have known types.  Instead, we recursively equate
      .                       // those types.
      .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Known { .. }) => {
      .                           bug!("equating two type variables, both of which have known types")
      .                       }
      .           
      .                       // If one side is known, prefer that one.
      .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Unknown { .. }) => Ok(*value1),
      .                       (&TypeVariableValue::Unknown { .. }, &TypeVariableValue::Known { .. }) => Ok(*value2),
      .           
      .                       // If both sides are *unknown*, it hardly matters, does it?
      .                       (
    223 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe1 },
    223 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe2 },
      .                       ) => {
      .                           // If we unify two unbound variables, ?T and ?U, then whatever
      .                           // value they wind up taking (which must be the same value) must
      .                           // be nameable by both universes. Therefore, the resulting
      .                           // universe is the minimum of the two universes, because that is
      .                           // the one which contains the fewest names in scope.
      .                           let universe = cmp::min(universe1, universe2);
    892 ( 0.00%)                  Ok(TypeVariableValue::Unknown { universe })
      .                       }
      .                   }
      .               }
      .           }

 39,875 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir               

-- line 27 ----------------------------------------
      .           impl CacheEntry {
      .               #[inline]
      .               fn update(
      .                   &mut self,
      .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
      .                   pos: BytePos,
      .                   time_stamp: usize,
      .               ) {
  9,427 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
  5,126 ( 0.00%)              self.file = file;
  7,834 ( 0.00%)              self.file_index = file_idx;
      .                   }
      .           
  4,079 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
      .                   let line_bounds = self.file.line_bounds(line_index);
 16,798 ( 0.00%)          self.line_number = line_index + 1;
 25,086 ( 0.00%)          self.line = line_bounds;
      .                   self.touch(time_stamp);
      .               }
      .           
      .               #[inline]
      .               fn touch(&mut self, time_stamp: usize) {
134,811 ( 0.01%)          self.time_stamp = time_stamp;
      .               }
      .           }
      .           
      .           #[derive(Clone)]
      .           pub struct CachingSourceMapView<'sm> {
      .               source_map: &'sm SourceMap,
      .               line_cache: [CacheEntry; 3],
      .               time_stamp: usize,
      .           }
      .           
      .           impl<'sm> CachingSourceMapView<'sm> {
  4,274 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
      .                   let files = source_map.files();
  2,137 ( 0.00%)          let first_file = files[0].clone();
      .                   let entry = CacheEntry {
      .                       time_stamp: 0,
      .                       line_number: 0,
      .                       line: BytePos(0)..BytePos(0),
      .                       file: first_file,
      .                       file_index: 0,
      .                   };
      .           
 10,685 ( 0.00%)          CachingSourceMapView {
      .                       source_map,
 14,959 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
      .                       time_stamp: 0,
      .                   }
  8,548 ( 0.00%)      }
      .           
      .               pub fn byte_pos_to_line_and_col(
      .                   &mut self,
      .                   pos: BytePos,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
      .                   self.time_stamp += 1;
      .           
      .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
      .                   };
      .           
      .                   let cache_entry = &mut self.line_cache[oldest];
      .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
      .           
      .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
      .               }
      .           
498,414 ( 0.02%)      pub fn span_data_to_lines_and_cols(
      .                   &mut self,
      .                   span_data: &SpanData,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
284,808 ( 0.01%)          self.time_stamp += 1;
      .           
      .                   // Check if lo and hi are in the cached lines.
 71,202 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
 71,202 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
      .           
127,706 ( 0.01%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
      .                       // Cache hit for span lo and hi. Check if they belong to the same file.
      .                       let result = {
127,218 ( 0.01%)                  let lo = &self.line_cache[lo_cache_idx as usize];
      .                           let hi = &self.line_cache[hi_cache_idx as usize];
      .           
381,654 ( 0.02%)                  if lo.file_index != hi.file_index {
      .                               return None;
      .                           }
      .           
      .                           (
127,218 ( 0.01%)                      lo.file.clone(),
      .                               lo.line_number,
      .                               span_data.lo - lo.line.start,
 63,609 ( 0.00%)                      hi.line_number,
      .                               span_data.hi - hi.line.start,
      .                           )
      .                       };
      .           
 63,609 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
 63,609 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
      .           
254,436 ( 0.01%)              return Some(result);
      .                   }
      .           
      .                   // No cache hit or cache hit for only one of span lo and hi.
 14,698 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
      .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
      .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
      .                   } else {
      .                       self.oldest_cache_entry_index()
      .                   };
      .           
      .                   // If the entry doesn't point to the correct file, get the new file and index.
      .                   // Return early if the file containing beginning of span doesn't contain end of span.
 60,728 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
 17,570 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
 21,084 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
      .                           return None;
      .                       }
      .           
 14,056 ( 0.00%)              Some(new_file_and_idx)
      .                   } else {
      .                       let file = &self.line_cache[oldest].file;
 12,237 ( 0.00%)              if !file_contains(&file, span_data.hi) {
      .                           return None;
      .                       }
      .           
 12,237 ( 0.00%)              None
      .                   };
      .           
      .                   // Update the cache entries.
 37,965 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, -1) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
      .           
 19,296 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
      .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
      .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
      .                               let hi = &mut self.line_cache[next_oldest];
      .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
      .                               (oldest, next_oldest)
      .                           } else {
      .                               (oldest, oldest)
      .                           }
      .                       }
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, _) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
    488 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
    732 ( 0.00%)                  hi.touch(self.time_stamp);
      .                           (oldest, hi_cache_idx as usize)
      .                       }
      .                       // Oldest cache entry is for span_data.hi line.
      .                       (_, -1) => {
      .                           let hi = &mut self.line_cache[oldest];
    917 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
  1,834 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
  3,668 ( 0.00%)                  lo.touch(self.time_stamp);
      .                           (lo_cache_idx as usize, oldest)
      .                       }
      .                       _ => {
      .                           panic!();
      .                       }
      .                   };
      .           
      .                   let lo = &self.line_cache[lo_idx];
      .                   let hi = &self.line_cache[hi_idx];
      .           
      .                   // Span lo and hi may equal line end when last line doesn't
      .                   // end in newline, hence the inclusive upper bounds below.
 15,186 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
  7,593 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
 15,186 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
  7,593 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
 37,965 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
 22,779 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
 22,779 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
      .           
 22,779 ( 0.00%)          Some((
  7,593 ( 0.00%)              lo.file.clone(),
      .                       lo.line_number,
      .                       span_data.lo - lo.line.start,
  7,593 ( 0.00%)              hi.line_number,
      .                       span_data.hi - hi.line.start,
      .                   ))
640,818 ( 0.03%)      }
      .           
      .               fn cache_entry_index(&self, pos: BytePos) -> isize {
      .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
725,192 ( 0.03%)              if cache_entry.line.contains(&pos) {
      .                           return idx as isize;
      .                       }
      .                   }
      .           
      .                   -1
      .               }
      .           
      .               fn oldest_cache_entry_index(&self) -> usize {
      .                   let mut oldest = 0;
      .           
      .                   for idx in 1..self.line_cache.len() {
 38,592 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
      .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
      .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
      .           
      .                   for idx in 0..self.line_cache.len() {
 11,557 ( 0.00%)              if idx != avoid_idx
  6,163 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
      .                       {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
 17,570 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
  3,514 ( 0.00%)          if !self.source_map.files().is_empty() {
  7,028 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
      .                       let file = &self.source_map.files()[file_idx];
      .           
 28,112 ( 0.00%)              if file_contains(file, pos) {
      .                           return Some((file.clone(), file_idx));
      .                       }
      .                   }
      .           
      .                   None
 17,570 ( 0.00%)      }
      .           }
      .           
      .           #[inline]
      .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
      .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
      .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
      .               // purposes of converting a byte position to a line and column number, we can't come up with a
      .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

885,534 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           
        .           pub type EncodeResult = Result<(), !>;
        .           
        .           pub struct Encoder {
        .               pub data: Vec<u8>,
        .           }
        .           
        .           impl Encoder {
        1 ( 0.00%)      pub fn new(data: Vec<u8>) -> Encoder {
        4 ( 0.00%)          Encoder { data }
        1 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn into_inner(self) -> Vec<u8> {
        4 ( 0.00%)          self.data
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn position(&self) -> usize {
   32,889 ( 0.00%)          self.data.len()
        .               }
        .           }
        .           
        .           macro_rules! write_leb128 {
        .               ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{
        .                   const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);
        .                   let old_len = $enc.data.len();
        .           
-- line 40 ----------------------------------------
-- line 67 ----------------------------------------
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> EncodeResult {
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn emit_usize(&mut self, v: usize) -> EncodeResult {
1,043,955 ( 0.04%)          write_leb128!(self, v, usize, write_usize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u128(&mut self, v: u128) -> EncodeResult {
   19,467 ( 0.00%)          write_leb128!(self, v, u128, write_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u64(&mut self, v: u64) -> EncodeResult {
    3,486 ( 0.00%)          write_leb128!(self, v, u64, write_u64_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u32(&mut self, v: u32) -> EncodeResult {
  906,680 ( 0.04%)          write_leb128!(self, v, u32, write_u32_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u16(&mut self, v: u16) -> EncodeResult {
        .                   self.data.extend_from_slice(&v.to_le_bytes());
        .                   Ok(())
        .               }
        .           
-- line 98 ----------------------------------------
-- line 131 ----------------------------------------
        .               #[inline]
        .               fn emit_i8(&mut self, v: i8) -> EncodeResult {
        .                   let as_u8: u8 = unsafe { std::mem::transmute(v) };
        .                   self.emit_u8(as_u8)
        .               }
        .           
        .               #[inline]
        .               fn emit_bool(&mut self, v: bool) -> EncodeResult {
   14,242 ( 0.00%)          self.emit_u8(if v { 1 } else { 0 })
        .               }
        .           
        .               #[inline]
        .               fn emit_f64(&mut self, v: f64) -> EncodeResult {
        .                   let as_u64: u64 = v.to_bits();
        .                   self.emit_u64(as_u64)
        .               }
        .           
-- line 147 ----------------------------------------
-- line 549 ----------------------------------------
        .               #[inline]
        .               pub fn advance(&mut self, bytes: usize) {
        .                   self.position += bytes;
        .               }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {
        .                   let start = self.position;
       27 ( 0.00%)          self.position += bytes;
       27 ( 0.00%)          &self.data[start..self.position]
        .               }
        .           }
        .           
        .           macro_rules! read_leb128 {
        .               ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};
        .           }
        .           
        .           impl<'a> serialize::Decoder for Decoder<'a> {
        .               #[inline]
        .               fn read_unit(&mut self) -> () {
        .                   ()
        .               }
        .           
        .               #[inline]
        .               fn read_u128(&mut self) -> u128 {
    2,524 ( 0.00%)          read_leb128!(self, read_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_u64(&mut self) -> u64 {
    3,994 ( 0.00%)          read_leb128!(self, read_u64_leb128)
        .               }
        .           
        .               #[inline]
   75,614 ( 0.00%)      fn read_u32(&mut self) -> u32 {
  329,322 ( 0.01%)          read_leb128!(self, read_u32_leb128)
  151,228 ( 0.01%)      }
        .           
        .               #[inline]
        .               fn read_u16(&mut self) -> u16 {
  561,386 ( 0.02%)          let bytes = [self.data[self.position], self.data[self.position + 1]];
   80,198 ( 0.00%)          let value = u16::from_le_bytes(bytes);
  160,396 ( 0.01%)          self.position += 2;
        .                   value
        .               }
        .           
        .               #[inline]
        .               fn read_u8(&mut self) -> u8 {
2,275,833 ( 0.09%)          let value = self.data[self.position];
  481,984 ( 0.02%)          self.position += 1;
        .                   value
        .               }
        .           
        .               #[inline]
  464,928 ( 0.02%)      fn read_usize(&mut self) -> usize {
  465,054 ( 0.02%)          read_leb128!(self, read_usize_leb128)
  929,856 ( 0.04%)      }
        .           
        .               #[inline]
        .               fn read_i128(&mut self) -> i128 {
        .                   read_leb128!(self, read_i128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_i64(&mut self) -> i64 {
-- line 613 ----------------------------------------
-- line 637 ----------------------------------------
        .               #[inline]
        .               fn read_isize(&mut self) -> isize {
        .                   read_leb128!(self, read_isize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_bool(&mut self) -> bool {
        .                   let value = self.read_u8();
   53,270 ( 0.00%)          value != 0
        .               }
        .           
        .               #[inline]
        .               fn read_f64(&mut self) -> f64 {
        .                   let bits = self.read_u64();
        .                   f64::from_bits(bits)
        .               }
        .           
-- line 653 ----------------------------------------
-- line 660 ----------------------------------------
        .               #[inline]
        .               fn read_char(&mut self) -> char {
        .                   let bits = self.read_u32();
        .                   std::char::from_u32(bits).unwrap()
        .               }
        .           
        .               #[inline]
        .               fn read_str(&mut self) -> Cow<'_, str> {
   56,490 ( 0.00%)          let len = self.read_usize();
  324,038 ( 0.01%)          let sentinel = self.data[self.position + len];
   81,104 ( 0.00%)          assert!(sentinel == STR_SENTINEL);
        .                   let s = unsafe {
        .                       std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])
        .                   };
  202,760 ( 0.01%)          self.position += len + 1;
   46,983 ( 0.00%)          Cow::Borrowed(s)
        .               }
        .           
        .               #[inline]
        .               fn read_raw_bytes_into(&mut self, s: &mut [u8]) {
      574 ( 0.00%)          let start = self.position;
    4,885 ( 0.00%)          self.position += s.len();
      574 ( 0.00%)          s.copy_from_slice(&self.data[start..self.position]);
        .               }
        .           }
        .           
        .           // Specializations for contiguous byte sequences follow. The default implementations for slices
        .           // encode and decode each element individually. This isn't necessary for `u8` slices when using
        .           // opaque encoders and decoders, because each `u8` is unchanged by encoding and decoding.
        .           // Therefore, we can use more efficient implementations that process the entire sequence at once.
        .           
-- line 690 ----------------------------------------

1,515,656 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs
--------------------------------------------------------------------------------
Ir               

-- line 28 ----------------------------------------
      .               PushRegionObligation,
      .           }
      .           
      .           macro_rules! impl_from {
      .               ($($ctor: ident ($ty: ty),)*) => {
      .                   $(
      .                   impl<'tcx> From<$ty> for UndoLog<'tcx> {
      .                       fn from(x: $ty) -> Self {
  1,632 ( 0.00%)                  UndoLog::$ctor(x.into())
      .                       }
      .                   }
      .                   )*
      .               }
      .           }
      .           
      .           // Upcast from a single kind of "undoable action" to the general enum
      .           impl_from! {
-- line 44 ----------------------------------------
-- line 57 ----------------------------------------
      .               ConstUnificationTable(sv::UndoLog<ut::Delegate<ty::ConstVid<'tcx>>>),
      .           
      .               RegionUnificationTable(sv::UndoLog<ut::Delegate<RegionVidKey<'tcx>>>),
      .               ProjectionCache(traits::UndoLog<'tcx>),
      .           }
      .           
      .           /// The Rollback trait defines how to rollback a particular action.
      .           impl<'tcx> Rollback<UndoLog<'tcx>> for InferCtxtInner<'tcx> {
245,337 ( 0.01%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
408,895 ( 0.02%)          match undo {
528,360 ( 0.02%)              UndoLog::TypeVariables(undo) => self.type_variable_storage.reverse(undo),
    686 ( 0.00%)              UndoLog::ConstUnificationTable(undo) => self.const_unification_storage.reverse(undo),
  2,140 ( 0.00%)              UndoLog::IntUnificationTable(undo) => self.int_unification_storage.reverse(undo),
    448 ( 0.00%)              UndoLog::FloatUnificationTable(undo) => self.float_unification_storage.reverse(undo),
      .                       UndoLog::RegionConstraintCollector(undo) => {
 99,358 ( 0.00%)                  self.region_constraint_storage.as_mut().unwrap().reverse(undo)
      .                       }
      .                       UndoLog::RegionUnificationTable(undo) => {
 25,620 ( 0.00%)                  self.region_constraint_storage.as_mut().unwrap().unification_table.reverse(undo)
      .                       }
      .                       UndoLog::ProjectionCache(undo) => self.projection_cache.reverse(undo),
      .                       UndoLog::PushRegionObligation => {
      .                           self.region_obligations.pop();
      .                       }
      .                   }
327,116 ( 0.01%)      }
      .           }
      .           
      .           /// The combined undo log for all the various unification tables. For each change to the storage
      .           /// for any kind of inference variable, we record an UndoLog entry in the vector here.
      .           pub(crate) struct InferCtxtUndoLogs<'tcx> {
      .               logs: Vec<UndoLog<'tcx>>,
      .               num_open_snapshots: usize,
      .           }
      .           
      .           impl Default for InferCtxtUndoLogs<'_> {
      .               fn default() -> Self {
 27,720 ( 0.00%)          Self { logs: Default::default(), num_open_snapshots: Default::default() }
      .               }
      .           }
      .           
      .           /// The UndoLogs trait defines how we undo a particular kind of action (of type T). We can undo any
      .           /// action that is convertable into an UndoLog (per the From impls above).
      .           impl<'tcx, T> UndoLogs<T> for InferCtxtUndoLogs<'tcx>
      .           where
      .               UndoLog<'tcx>: From<T>,
-- line 102 ----------------------------------------
-- line 103 ----------------------------------------
      .           {
      .               #[inline]
      .               fn num_open_snapshots(&self) -> usize {
      .                   self.num_open_snapshots
      .               }
      .           
      .               #[inline]
      .               fn push(&mut self, undo: T) {
 64,536 ( 0.00%)          if self.in_snapshot() {
 13,056 ( 0.00%)              self.logs.push(undo.into())
      .                   }
      .               }
      .           
      .               fn clear(&mut self) {
      .                   self.logs.clear();
      .                   self.num_open_snapshots = 0;
      .               }
      .           
-- line 120 ----------------------------------------
-- line 125 ----------------------------------------
      .               {
      .                   if self.in_snapshot() {
      .                       self.logs.extend(undos.into_iter().map(UndoLog::from))
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> InferCtxtInner<'tcx> {
279,066 ( 0.01%)      pub fn rollback_to(&mut self, snapshot: Snapshot<'tcx>) {
      .                   debug!("rollback_to({})", snapshot.undo_len);
      .                   self.undo_log.assert_open_snapshot(&snapshot);
      .           
338,359 ( 0.01%)          while self.undo_log.logs.len() > snapshot.undo_len {
      .                       let undo = self.undo_log.logs.pop().unwrap();
981,348 ( 0.04%)              self.reverse(undo);
      .                   }
      .           
107,695 ( 0.00%)          if self.undo_log.num_open_snapshots == 1 {
      .                       // The root snapshot. It's safe to clear the undo log because
      .                       // there's no snapshot further out that we might need to roll back
      .                       // to.
 30,828 ( 0.00%)              assert!(snapshot.undo_len == 0);
      .                       self.undo_log.logs.clear();
      .                   }
      .           
154,947 ( 0.01%)          self.undo_log.num_open_snapshots -= 1;
325,577 ( 0.01%)      }
      .           
      .               pub fn commit(&mut self, snapshot: Snapshot<'tcx>) {
      .                   debug!("commit({})", snapshot.undo_len);
      .           
219,003 ( 0.01%)          if self.undo_log.num_open_snapshots == 1 {
      .                       // The root snapshot. It's safe to clear the undo log because
      .                       // there's no snapshot further out that we might need to roll back
      .                       // to.
 53,484 ( 0.00%)              assert!(snapshot.undo_len == 0);
      .                       self.undo_log.logs.clear();
      .                   }
      .           
245,745 ( 0.01%)          self.undo_log.num_open_snapshots -= 1;
      .               }
      .           }
      .           
      .           impl<'tcx> InferCtxtUndoLogs<'tcx> {
      .               pub fn start_snapshot(&mut self) -> Snapshot<'tcx> {
478,048 ( 0.02%)          self.num_open_snapshots += 1;
      .                   Snapshot { undo_len: self.logs.len(), _marker: PhantomData }
      .               }
      .           
      .               pub(crate) fn region_constraints_in_snapshot(
      .                   &self,
      .                   s: &Snapshot<'tcx>,
      .               ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {
 30,152 ( 0.00%)          self.logs[s.undo_len..].iter().filter_map(|log| match log {
      .                       UndoLog::RegionConstraintCollector(log) => Some(log),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               pub(crate) fn region_constraints(
      .                   &self,
      .               ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {
-- line 186 ----------------------------------------
-- line 187 ----------------------------------------
      .                   self.logs.iter().filter_map(|log| match log {
      .                       UndoLog::RegionConstraintCollector(log) => Some(log),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               fn assert_open_snapshot(&self, snapshot: &Snapshot<'tcx>) {
      .                   // Failures here may indicate a failure to follow a stack discipline.
139,533 ( 0.01%)          assert!(self.logs.len() >= snapshot.undo_len);
139,533 ( 0.01%)          assert!(self.num_open_snapshots > 0);
      .               }
      .           }
      .           
      .           impl<'tcx> std::ops::Index<usize> for InferCtxtUndoLogs<'tcx> {
      .               type Output = UndoLog<'tcx>;
      .           
      .               fn index(&self, key: usize) -> &Self::Output {
      .                   &self.logs[key]
-- line 204 ----------------------------------------

184,490 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 97 ----------------------------------------
      .           
      .               /// If true, the capture is behind a reference.
      .               by_ref: bool,
      .           }
      .           
      .           const DEREF_PROJECTION: &[PlaceElem<'_>; 1] = &[ProjectionElem::Deref];
      .           
      .           pub fn provide(providers: &mut Providers) {
      4 ( 0.00%)      *providers = Providers {
      .                   mir_borrowck: |tcx, did| {
    367 ( 0.00%)              if let Some(def) = ty::WithOptConstParam::try_lookup(did, tcx) {
      .                           tcx.mir_borrowck_const_arg(def)
      .                       } else {
  1,468 ( 0.00%)                  mir_borrowck(tcx, ty::WithOptConstParam::unknown(did))
      .                       }
      .                   },
      .                   mir_borrowck_const_arg: |tcx, (did, param_did)| {
      .                       mir_borrowck(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })
      .                   },
      .                   ..*providers
      .               };
      1 ( 0.00%)  }
      .           
  3,670 ( 0.00%)  fn mir_borrowck<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               def: ty::WithOptConstParam<LocalDefId>,
      .           ) -> &'tcx BorrowCheckResult<'tcx> {
      .               let (input_body, promoted) = tcx.mir_promoted(def);
      .               debug!("run query mir_borrowck: {}", tcx.def_path_str(def.did.to_def_id()));
      .           
  4,771 ( 0.00%)      let opt_closure_req = tcx.infer_ctxt().with_opaque_type_inference(def.did).enter(|infcx| {
      .                   let input_body: &Body<'_> = &input_body.borrow();
      .                   let promoted: &IndexVec<_, _> = &promoted.borrow();
  5,138 ( 0.00%)          do_mir_borrowck(&infcx, input_body, promoted, false).0
  1,468 ( 0.00%)      });
      .               debug!("mir_borrowck done");
      .           
    367 ( 0.00%)      tcx.arena.alloc(opt_closure_req)
  2,936 ( 0.00%)  }
      .           
      .           /// Perform the actual borrow checking.
      .           ///
      .           /// If `return_body_with_facts` is true, then return the body with non-erased
      .           /// region ids on which the borrow checking was performed together with Polonius
      .           /// facts.
  8,074 ( 0.00%)  #[instrument(skip(infcx, input_body, input_promoted), level = "debug")]
      .           fn do_mir_borrowck<'a, 'tcx>(
      .               infcx: &InferCtxt<'a, 'tcx>,
      .               input_body: &Body<'tcx>,
      .               input_promoted: &IndexVec<Promoted, Body<'tcx>>,
      .               return_body_with_facts: bool,
      .           ) -> (BorrowCheckResult<'tcx>, Option<Box<BodyWithBorrowckFacts<'tcx>>>) {
  3,670 ( 0.00%)      let def = input_body.source.with_opt_param().as_local().unwrap();
      .           
      .               debug!(?def);
      .           
    734 ( 0.00%)      let tcx = infcx.tcx;
      .               let param_env = tcx.param_env(def.did);
    367 ( 0.00%)      let id = tcx.hir().local_def_id_to_hir_id(def.did);
      .           
    734 ( 0.00%)      let mut local_names = IndexVec::from_elem(None, &input_body.local_decls);
      .               for var_debug_info in &input_body.var_debug_info {
  4,257 ( 0.00%)          if let VarDebugInfoContents::Place(place) = var_debug_info.value {
  2,208 ( 0.00%)              if let Some(local) = place.as_local() {
  3,309 ( 0.00%)                  if let Some(prev_name) = local_names[local] {
      .                               if var_debug_info.name != prev_name {
      .                                   span_bug!(
      .                                       var_debug_info.source_info.span,
      .                                       "local {:?} has many names (`{}` vs `{}`)",
      .                                       local,
      .                                       prev_name,
      .                                       var_debug_info.name
      .                                   );
      .                               }
      .                           }
  3,309 ( 0.00%)                  local_names[local] = Some(var_debug_info.name);
      .                       }
      .                   }
      .               }
      .           
      .               // Gather the upvars of a closure, if any.
  1,468 ( 0.00%)      let tables = tcx.typeck_opt_const_arg(def);
    734 ( 0.00%)      if let Some(ErrorReported) = tables.tainted_by_errors {
      .                   infcx.set_tainted_by_errors();
      .               }
  1,468 ( 0.00%)      let upvars: Vec<_> = tables
      .                   .closure_min_captures_flattened(def.did.to_def_id())
      .                   .map(|captured_place| {
      .                       let capture = captured_place.info.capture_kind;
      2 ( 0.00%)              let by_ref = match capture {
      .                           ty::UpvarCapture::ByValue => false,
      .                           ty::UpvarCapture::ByRef(..) => true,
      .                       };
      .                       Upvar { place: captured_place.clone(), by_ref }
      .                   })
      .                   .collect();
      .           
      .               // Replace all regions with fresh inference variables. This
      .               // requires first making our own copy of the MIR. This copy will
      .               // be modified (in place) to contain non-lexical lifetimes. It
      .               // will have a lifetime tied to the inference context.
    734 ( 0.00%)      let mut body_owned = input_body.clone();
      .               let mut promoted = input_promoted.clone();
      .               let free_regions =
  1,101 ( 0.00%)          nll::replace_regions_in_mir(infcx, param_env, &mut body_owned, &mut promoted);
      .               let body = &body_owned; // no further changes
      .           
    367 ( 0.00%)      let location_table_owned = LocationTable::new(body);
      .               let location_table = &location_table_owned;
      .           
      .               let mut errors_buffer = Vec::new();
  1,101 ( 0.00%)      let (move_data, move_errors): (MoveData<'tcx>, Vec<(Place<'tcx>, MoveError<'tcx>)>) =
  2,569 ( 0.00%)          match MoveData::gather_moves(&body, tcx, param_env) {
  2,202 ( 0.00%)              Ok(move_data) => (move_data, Vec::new()),
      .                       Err((move_data, move_errors)) => (move_data, move_errors),
      .                   };
      .               let promoted_errors = promoted
      .                   .iter_enumerated()
     20 ( 0.00%)          .map(|(idx, body)| (idx, MoveData::gather_moves(&body, tcx, param_env)));
      .           
  2,202 ( 0.00%)      let mdpe = MoveDataParamEnv { move_data, param_env };
      .           
  2,936 ( 0.00%)      let mut flow_inits = MaybeInitializedPlaces::new(tcx, &body, &mdpe)
    367 ( 0.00%)          .into_engine(tcx, &body)
      .                   .pass_name("borrowck")
      .                   .iterate_to_fixpoint()
      .                   .into_results_cursor(&body);
      .           
  4,404 ( 0.00%)      let locals_are_invalidated_at_exit = tcx.hir().body_owner_kind(id).is_fn_or_closure();
      .               let borrow_set =
  3,670 ( 0.00%)          Rc::new(BorrowSet::build(tcx, body, locals_are_invalidated_at_exit, &mdpe.move_data));
      .           
  1,835 ( 0.00%)      let use_polonius = return_body_with_facts || infcx.tcx.sess.opts.debugging_opts.polonius;
      .           
      .               // Compute non-lexical lifetimes.
      .               let nll::NllOutput {
  1,101 ( 0.00%)          regioncx,
  1,468 ( 0.00%)          opaque_type_values,
    734 ( 0.00%)          polonius_input,
  1,101 ( 0.00%)          polonius_output,
  1,468 ( 0.00%)          opt_closure_req,
  3,670 ( 0.00%)          nll_errors,
  6,606 ( 0.00%)      } = nll::compute_regions(
      .                   infcx,
  5,872 ( 0.00%)          free_regions,
      .                   body,
      .                   &promoted,
      .                   location_table,
      .                   param_env,
      .                   &mut flow_inits,
      .                   &mdpe.move_data,
      .                   &borrow_set,
      .                   &upvars,
      .                   use_polonius,
      .               );
      .           
      .               // Dump MIR results into a file, if that is enabled. This let us
      .               // write unit-tests, as well as helping with debugging.
  1,101 ( 0.00%)      nll::dump_mir_results(infcx, &body, &regioncx, &opt_closure_req);
      .           
      .               // We also have a `#[rustc_regions]` annotation that causes us to dump
      .               // information.
    734 ( 0.00%)      nll::dump_annotation(
      .                   infcx,
      .                   &body,
      .                   &regioncx,
      .                   &opt_closure_req,
      .                   &opaque_type_values,
      .                   &mut errors_buffer,
      .               );
      .           
      .               // The various `flow_*` structures can be large. We drop `flow_inits` here
      .               // so it doesn't overlap with the others below. This reduces peak memory
      .               // usage significantly on some benchmarks.
  5,872 ( 0.00%)      drop(flow_inits);
      .           
    367 ( 0.00%)      let regioncx = Rc::new(regioncx);
      .           
  2,202 ( 0.00%)      let flow_borrows = Borrows::new(tcx, body, &regioncx, &borrow_set)
    367 ( 0.00%)          .into_engine(tcx, body)
      .                   .pass_name("borrowck")
      .                   .iterate_to_fixpoint();
  2,202 ( 0.00%)      let flow_uninits = MaybeUninitializedPlaces::new(tcx, body, &mdpe)
    367 ( 0.00%)          .into_engine(tcx, body)
      .                   .pass_name("borrowck")
      .                   .iterate_to_fixpoint();
  2,202 ( 0.00%)      let flow_ever_inits = EverInitializedPlaces::new(tcx, body, &mdpe)
    367 ( 0.00%)          .into_engine(tcx, body)
      .                   .pass_name("borrowck")
      .                   .iterate_to_fixpoint();
      .           
    754 ( 0.00%)      let movable_generator = !matches!(
  2,222 ( 0.00%)          tcx.hir().get(id),
      .                   Node::Expr(&hir::Expr {
      .                       kind: hir::ExprKind::Closure(.., Some(hir::Movability::Static)),
      .                       ..
      .                   })
      .               );
      .           
     14 ( 0.00%)      for (idx, move_data_results) in promoted_errors {
      .                   let promoted_body = &promoted[idx];
      .           
      4 ( 0.00%)          if let Err((move_data, move_errors)) = move_data_results {
      .                       let mut promoted_mbcx = MirBorrowckCtxt {
      .                           infcx,
      .                           param_env,
      .                           body: promoted_body,
      .                           move_data: &move_data,
      .                           location_table, // no need to create a real one for the promoted, it is not used
      .                           movable_generator,
      .                           fn_self_span_reported: Default::default(),
-- line 307 ----------------------------------------
-- line 325 ----------------------------------------
      .                       };
      .                       promoted_mbcx.report_move_errors(move_errors);
      .                       errors_buffer = promoted_mbcx.errors_buffer;
      .                   };
      .               }
      .           
      .               let dominators = body.dominators();
      .           
 16,515 ( 0.00%)      let mut mbcx = MirBorrowckCtxt {
      .                   infcx,
      .                   param_env,
      .                   body,
      .                   move_data: &mdpe.move_data,
      .                   location_table,
      .                   movable_generator,
      .                   locals_are_invalidated_at_exit,
      .                   fn_self_span_reported: Default::default(),
      .                   access_place_error_reported: Default::default(),
      .                   reservation_error_reported: Default::default(),
      .                   reservation_warnings: Default::default(),
      .                   move_error_reported: BTreeMap::new(),
      .                   uninitialized_error_reported: Default::default(),
  1,468 ( 0.00%)          errors_buffer,
    367 ( 0.00%)          regioncx: Rc::clone(&regioncx),
      .                   used_mut: Default::default(),
      .                   used_mut_upvars: SmallVec::new(),
    367 ( 0.00%)          borrow_set: Rc::clone(&borrow_set),
  2,202 ( 0.00%)          dominators,
  1,468 ( 0.00%)          upvars,
  1,468 ( 0.00%)          local_names,
      .                   region_names: RefCell::default(),
      .                   next_region_name: RefCell::new(1),
      .                   polonius_output,
      .               };
      .           
      .               // Compute and report region errors, if any.
  1,101 ( 0.00%)      mbcx.report_region_errors(nll_errors);
      .           
      .               let results = BorrowckResults {
  2,202 ( 0.00%)          ever_inits: flow_ever_inits,
  2,936 ( 0.00%)          uninits: flow_uninits,
  4,037 ( 0.00%)          borrows: flow_borrows,
      .               };
      .           
  2,202 ( 0.00%)      mbcx.report_move_errors(move_errors);
      .           
    367 ( 0.00%)      rustc_mir_dataflow::visit_results(
      .                   body,
    367 ( 0.00%)          traversal::reverse_postorder(body).map(|(bb, _)| bb),
      .                   &results,
      .                   &mut mbcx,
      .               );
      .           
      .               // Convert any reservation warnings into lints.
      .               let reservation_warnings = mem::take(&mut mbcx.reservation_warnings);
      .               for (_, (place, span, location, bk, borrow)) in reservation_warnings {
      .                   let mut initial_diag = mbcx.report_conflicting_borrow(location, (place, span), bk, &borrow);
-- line 381 ----------------------------------------
-- line 406 ----------------------------------------
      .               // For each non-user used mutable variable, check if it's been assigned from
      .               // a user-declared local. If so, then put that local into the used_mut set.
      .               // Note that this set is expected to be small - only upvars from closures
      .               // would have a chance of erroneously adding non-user-defined mutable vars
      .               // to the set.
      .               let temporary_used_locals: FxHashSet<Local> = mbcx
      .                   .used_mut
      .                   .iter()
    367 ( 0.00%)          .filter(|&local| !mbcx.body.local_decls[*local].is_user_variable())
      .                   .cloned()
      .                   .collect();
      .               // For the remaining unused locals that are marked as mutable, we avoid linting any that
      .               // were never initialized. These locals may have been removed as unreachable code; or will be
      .               // linted as unused variables.
      .               let unused_mut_locals =
    367 ( 0.00%)          mbcx.body.mut_vars_iter().filter(|local| !mbcx.used_mut.contains(local)).collect();
  1,468 ( 0.00%)      mbcx.gather_used_muts(temporary_used_locals, unused_mut_locals);
      .           
      .               debug!("mbcx.used_mut: {:?}", mbcx.used_mut);
  1,468 ( 0.00%)      let used_mut = mbcx.used_mut;
    367 ( 0.00%)      for local in mbcx.body.mut_vars_and_args_iter().filter(|local| !used_mut.contains(local)) {
      8 ( 0.00%)          let local_decl = &mbcx.body.local_decls[local];
     48 ( 0.00%)          let lint_root = match &mbcx.body.source_scopes[local_decl.source_info.scope].local_data {
      .                       ClearCrossCrate::Set(data) => data.lint_root,
      .                       _ => continue,
      .                   };
      .           
      .                   // Skip over locals that begin with an underscore or have no name
     24 ( 0.00%)          match mbcx.local_names[local] {
      .                       Some(name) => {
      .                           if name.as_str().starts_with('_') {
      .                               continue;
      .                           }
      .                       }
      .                       None => continue,
      .                   }
      .           
-- line 442 ----------------------------------------
-- line 455 ----------------------------------------
      .                               String::new(),
      .                               Applicability::MachineApplicable,
      .                           )
      .                           .emit();
      .                   })
      .               }
      .           
      .               // Buffer any move errors that we collected and de-duplicated.
  3,303 ( 0.00%)      for (_, (_, diag)) in mbcx.move_error_reported {
      .                   diag.buffer(&mut mbcx.errors_buffer);
      .               }
      .           
    367 ( 0.00%)      if !mbcx.errors_buffer.is_empty() {
      .                   mbcx.errors_buffer.sort_by_key(|diag| diag.sort_span);
      .           
      .                   for diag in mbcx.errors_buffer.drain(..) {
      .                       mbcx.infcx.tcx.sess.diagnostic().emit_diagnostic(&diag);
      .                   }
      .               }
      .           
      .               let result = BorrowCheckResult {
  1,468 ( 0.00%)          concrete_opaque_types: opaque_type_values,
  1,835 ( 0.00%)          closure_requirements: opt_closure_req,
  2,202 ( 0.00%)          used_mut_upvars: mbcx.used_mut_upvars,
      .               };
      .           
    734 ( 0.00%)      let body_with_facts = if return_body_with_facts {
      .                   let output_facts = mbcx.polonius_output.expect("Polonius output was not computed");
      .                   Some(Box::new(BodyWithBorrowckFacts {
      .                       body: body_owned,
      .                       input_facts: *polonius_input.expect("Polonius input facts were not generated"),
      .                       output_facts,
      .                       location_table: location_table_owned,
      .                   }))
      .               } else {
      .                   None
      .               };
      .           
      .               debug!("do_mir_borrowck: result = {:#?}", result);
      .           
  5,138 ( 0.00%)      (result, body_with_facts)
  4,404 ( 0.00%)  }
      .           
      .           /// A `Body` with information computed by the borrow checker. This struct is
      .           /// intended to be consumed by compiler consumers.
      .           ///
      .           /// We need to include the MIR body here because the region identifiers must
      .           /// match the ones in the Polonius facts.
      .           pub struct BodyWithBorrowckFacts<'tcx> {
      .               /// A mir body that contains region identifiers.
-- line 504 ----------------------------------------
-- line 608 ----------------------------------------
      .           // Check that:
      .           // 1. assignments are always made to mutable locations (FIXME: does that still really go here?)
      .           // 2. loans made in overlapping scopes do not conflict
      .           // 3. assignments do not affect things loaned out as immutable
      .           // 4. moves do not affect things loaned out in any way
      .           impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx> {
      .               type FlowState = Flows<'cx, 'tcx>;
      .           
150,273 ( 0.01%)      fn visit_statement_before_primary_effect(
      .                   &mut self,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .                   stmt: &'cx Statement<'tcx>,
      .                   location: Location,
      .               ) {
      .                   debug!("MirBorrowckCtxt::process_statement({:?}, {:?}): {:?}", location, stmt, flow_state);
      .                   let span = stmt.source_info.span;
      .           
      .                   self.check_activations(location, span, flow_state);
      .           
 83,485 ( 0.00%)          match &stmt.kind {
  9,962 ( 0.00%)              StatementKind::Assign(box (lhs, ref rhs)) => {
      .                           self.consume_rvalue(location, (rhs, span), flow_state);
      .           
 19,924 ( 0.00%)                  self.mutate_place(location, (*lhs, span), Shallow(None), flow_state);
      .                       }
    504 ( 0.00%)              StatementKind::FakeRead(box (_, ref place)) => {
      .                           // Read for match doesn't access any memory and is used to
      .                           // assert that a place is safe and live. So we don't have to
      .                           // do any checks here.
      .                           //
      .                           // FIXME: Remove check that the place is initialized. This is
      .                           // needed for now because matches don't have never patterns yet.
      .                           // So this is the only place we prevent
      .                           //      let x: !;
      .                           //      match x {};
      .                           // from compiling.
  2,016 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
      .                               location,
      .                               InitializationRequiringAction::Use,
  4,536 ( 0.00%)                      (place.as_ref(), span),
      .                               flow_state,
      .                           );
      .                       }
      .                       StatementKind::SetDiscriminant { place, variant_index: _ } => {
      .                           self.mutate_place(location, (**place, span), Shallow(None), flow_state);
      .                       }
      .                       StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {
      .                           ..
-- line 655 ----------------------------------------
-- line 663 ----------------------------------------
      .                       | StatementKind::Coverage(..)
      .                       | StatementKind::AscribeUserType(..)
      .                       | StatementKind::Retag { .. }
      .                       | StatementKind::StorageLive(..) => {
      .                           // `Nop`, `AscribeUserType`, `Retag`, and `StorageLive` are irrelevant
      .                           // to borrow check.
      .                       }
      .                       StatementKind::StorageDead(local) => {
 34,728 ( 0.00%)                  self.access_place(
      .                               location,
 63,668 ( 0.00%)                      (Place::from(*local), span),
      .                               (Shallow(None), Write(WriteKind::StorageDeadOrDrop)),
      .                               LocalMutationIsAllowed::Yes,
      .                               flow_state,
      .                           );
      .                       }
      .                   }
133,576 ( 0.01%)      }
      .           
 25,032 ( 0.00%)      fn visit_terminator_before_primary_effect(
      .                   &mut self,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .                   term: &'cx Terminator<'tcx>,
      .                   loc: Location,
      .               ) {
      .                   debug!("MirBorrowckCtxt::process_terminator({:?}, {:?}): {:?}", loc, term, flow_state);
      .                   let span = term.source_info.span;
      .           
      .                   self.check_activations(loc, span, flow_state);
      .           
 15,645 ( 0.00%)          match term.kind {
  1,228 ( 0.00%)              TerminatorKind::SwitchInt { ref discr, switch_ty: _, targets: _ } => {
  1,228 ( 0.00%)                  self.consume_operand(loc, (discr, span), flow_state);
      .                       }
    126 ( 0.00%)              TerminatorKind::Drop { place, target: _, unwind: _ } => {
      .                           debug!(
      .                               "visit_terminator_drop \
      .                                loc: {:?} term: {:?} place: {:?} span: {:?}",
      .                               loc, term, place, span
      .                           );
      .           
    378 ( 0.00%)                  self.access_place(
      .                               loc,
    567 ( 0.00%)                      (place, span),
      .                               (AccessDepth::Drop, Write(WriteKind::StorageDeadOrDrop)),
      .                               LocalMutationIsAllowed::Yes,
      .                               flow_state,
      .                           );
      .                       }
      .                       TerminatorKind::DropAndReplace {
      .                           place: drop_place,
      .                           value: ref new_value,
      .                           target: _,
      .                           unwind: _,
      .                       } => {
      .                           self.mutate_place(loc, (drop_place, span), Deep, flow_state);
      .                           self.consume_operand(loc, (new_value, span), flow_state);
      .                       }
      .                       TerminatorKind::Call {
  3,939 ( 0.00%)                  ref func,
      .                           ref args,
      .                           ref destination,
      .                           cleanup: _,
      .                           from_hir_call: _,
      .                           fn_span: _,
      .                       } => {
 10,504 ( 0.00%)                  self.consume_operand(loc, (func, span), flow_state);
      .                           for arg in args {
 12,168 ( 0.00%)                      self.consume_operand(loc, (arg, span), flow_state);
      .                           }
  5,248 ( 0.00%)                  if let Some((dest, _ /*bb*/)) = *destination {
 15,708 ( 0.00%)                      self.mutate_place(loc, (dest, span), Deep, flow_state);
      .                           }
      .                       }
    546 ( 0.00%)              TerminatorKind::Assert { ref cond, expected: _, ref msg, target: _, cleanup: _ } => {
     91 ( 0.00%)                  self.consume_operand(loc, (cond, span), flow_state);
      .                           use rustc_middle::mir::AssertKind;
    236 ( 0.00%)                  if let AssertKind::BoundsCheck { ref len, ref index } = *msg {
    180 ( 0.00%)                      self.consume_operand(loc, (len, span), flow_state);
      .                               self.consume_operand(loc, (index, span), flow_state);
      .                           }
      .                       }
      .           
      .                       TerminatorKind::Yield { ref value, resume: _, resume_arg, drop: _ } => {
      .                           self.consume_operand(loc, (value, span), flow_state);
      .                           self.mutate_place(loc, (resume_arg, span), Deep, flow_state);
      .                       }
-- line 749 ----------------------------------------
-- line 790 ----------------------------------------
      .                       | TerminatorKind::Resume
      .                       | TerminatorKind::Return
      .                       | TerminatorKind::GeneratorDrop
      .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
      .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ } => {
      .                           // no data used, thus irrelevant to borrowck
      .                       }
      .                   }
 22,432 ( 0.00%)      }
      .           
 21,903 ( 0.00%)      fn visit_terminator_after_primary_effect(
      .                   &mut self,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .                   term: &'cx Terminator<'tcx>,
      .                   loc: Location,
      .               ) {
  3,129 ( 0.00%)          let span = term.source_info.span;
      .           
 12,516 ( 0.00%)          match term.kind {
      .                       TerminatorKind::Yield { value: _, resume: _, resume_arg: _, drop: _ } => {
      .                           if self.movable_generator {
      .                               // Look for any active borrows to locals
      .                               let borrow_set = self.borrow_set.clone();
      .                               for i in flow_state.borrows.iter() {
      .                                   let borrow = &borrow_set[i];
      .                                   self.check_for_local_borrow(borrow, span);
      .                               }
-- line 816 ----------------------------------------
-- line 817 ----------------------------------------
      .                           }
      .                       }
      .           
      .                       TerminatorKind::Resume | TerminatorKind::Return | TerminatorKind::GeneratorDrop => {
      .                           // Returning from the function implicitly kills storage for all locals and statics.
      .                           // Often, the storage will already have been killed by an explicit
      .                           // StorageDead, but we don't always emit those (notably on unwind paths),
      .                           // so this "extra check" serves as a kind of backup.
  1,188 ( 0.00%)                  let borrow_set = self.borrow_set.clone();
      .                           for i in flow_state.borrows.iter() {
      .                               let borrow = &borrow_set[i];
      .                               self.check_for_invalidation_at_exit(loc, borrow, span);
      .                           }
      .                       }
      .           
      .                       TerminatorKind::Abort
      .                       | TerminatorKind::Assert { .. }
-- line 833 ----------------------------------------
-- line 836 ----------------------------------------
      .                       | TerminatorKind::DropAndReplace { .. }
      .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
      .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ }
      .                       | TerminatorKind::Goto { .. }
      .                       | TerminatorKind::SwitchInt { .. }
      .                       | TerminatorKind::Unreachable
      .                       | TerminatorKind::InlineAsm { .. } => {}
      .                   }
 25,032 ( 0.00%)      }
      .           }
      .           
      .           use self::AccessDepth::{Deep, Shallow};
      .           use self::ReadOrWrite::{Activation, Read, Reservation, Write};
      .           
      .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
      .           enum ArtificialField {
      .               ArrayLength,
-- line 852 ----------------------------------------
-- line 913 ----------------------------------------
      .           /// When checking permissions for a place access, this flag is used to indicate that an immutable
      .           /// local place can be mutated.
      .           //
      .           // FIXME: @nikomatsakis suggested that this flag could be removed with the following modifications:
      .           // - Merge `check_access_permissions()` and `check_if_reassignment_to_immutable_state()`.
      .           // - Split `is_mutable()` into `is_assignable()` (can be directly assigned) and
      .           //   `is_declared_mutable()`.
      .           // - Take flow state into consideration in `is_assignable()` for local variables.
  5,351 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
      .           enum LocalMutationIsAllowed {
      .               Yes,
      .               /// We want use of immutable upvars to cause a "write to immutable upvar"
      .               /// error, not an "reassignment" error.
      .               ExceptUpvars,
      .               No,
      .           }
      .           
-- line 929 ----------------------------------------
-- line 970 ----------------------------------------
      .               }
      .           
      .               /// Checks an access to the given place to see if it is allowed. Examines the set of borrows
      .               /// that are in scope, as well as which paths have been initialized, to ensure that (a) the
      .               /// place is initialized and (b) it is not borrowed in some way that would prevent this
      .               /// access.
      .               ///
      .               /// Returns `true` if an error is reported.
292,736 ( 0.01%)      fn access_place(
      .                   &mut self,
      .                   location: Location,
      .                   place_span: (Place<'tcx>, Span),
      .                   kind: (AccessDepth, ReadOrWrite),
      .                   is_local_mutation_allowed: LocalMutationIsAllowed,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
      .                   let (sd, rw) = kind;
      .           
 73,184 ( 0.00%)          if let Activation(_, borrow_index) = rw {
    690 ( 0.00%)              if self.reservation_error_reported.contains(&place_span.0) {
      .                           debug!(
      .                               "skipping access_place for activation of invalid reservation \
      .                                place: {:?} borrow_index: {:?}",
      .                               place_span.0, borrow_index
      .                           );
      .                           return;
      .                       }
      .                   }
      .           
      .                   // Check is_empty() first because it's the common case, and doing that
      .                   // way we avoid the clone() call.
 18,296 ( 0.00%)          if !self.access_place_error_reported.is_empty()
      .                       && self.access_place_error_reported.contains(&(place_span.0, place_span.1))
      .                   {
      .                       debug!(
      .                           "access_place: suppressing error place_span=`{:?}` kind=`{:?}`",
      .                           place_span, kind
      .                       );
      .                       return;
      .                   }
      .           
109,776 ( 0.00%)          let mutability_error = self.check_access_permissions(
 73,184 ( 0.00%)              place_span,
      .                       rw,
      .                       is_local_mutation_allowed,
      .                       flow_state,
      .                       location,
      .                   );
      .                   let conflict_error =
201,256 ( 0.01%)              self.check_access_for_conflict(location, place_span, sd, rw, flow_state);
      .           
 54,888 ( 0.00%)          if let (Activation(_, borrow_idx), true) = (kind.1, conflict_error) {
      .                       // Suppress this warning when there's an error being emitted for the
      .                       // same borrow: fixing the error is likely to fix the warning.
      .                       self.reservation_warnings.remove(&borrow_idx);
      .                   }
      .           
 54,888 ( 0.00%)          if conflict_error || mutability_error {
      .                       debug!("access_place: logging error place_span=`{:?}` kind=`{:?}`", place_span, kind);
      .           
      .                       self.access_place_error_reported.insert((place_span.0, place_span.1));
      .                   }
146,368 ( 0.01%)      }
      .           
      .               fn check_access_for_conflict(
      .                   &mut self,
      .                   location: Location,
      .                   place_span: (Place<'tcx>, Span),
      .                   sd: AccessDepth,
      .                   rw: ReadOrWrite,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) -> bool {
      .                   debug!(
      .                       "check_access_for_conflict(location={:?}, place_span={:?}, sd={:?}, rw={:?})",
      .                       location, place_span, sd, rw,
      .                   );
      .           
 18,296 ( 0.00%)          let mut error_reported = false;
 54,888 ( 0.00%)          let tcx = self.infcx.tcx;
      .                   let body = self.body;
 36,592 ( 0.00%)          let borrow_set = self.borrow_set.clone();
      .           
      .                   // Use polonius output if it has been enabled.
 36,592 ( 0.00%)          let polonius_output = self.polonius_output.clone();
      .                   let borrows_in_scope = if let Some(polonius) = &polonius_output {
      .                       let location = self.location_table.start_index(location);
      .                       Either::Left(polonius.errors_at(location).iter().copied())
      .                   } else {
      .                       Either::Right(flow_state.borrows.iter())
      .                   };
      .           
237,848 ( 0.01%)          each_borrow_involving_path(
      .                       self,
      .                       tcx,
      .                       body,
      .                       location,
109,776 ( 0.00%)              (sd, place_span.0),
      .                       &borrow_set,
109,776 ( 0.00%)              borrows_in_scope,
205,874 ( 0.01%)              |this, borrow_index, borrow| match (rw, borrow.kind) {
      .                           // Obviously an activation is compatible with its own
      .                           // reservation (or even prior activating uses of same
      .                           // borrow); so don't check if they interfere.
      .                           //
      .                           // NOTE: *reservations* do conflict with themselves;
      .                           // thus aren't injecting unsoundenss w/ this check.)
    345 ( 0.00%)                  (Activation(_, activating), _) if activating == borrow_index => {
      .                               debug!(
      .                                   "check_access_for_conflict place_span: {:?} sd: {:?} rw: {:?} \
      .                                    skipping {:?} b/c activation of same borrow_index",
      .                                   place_span,
      .                                   sd,
      .                                   rw,
      .                                   (borrow_index, borrow),
      .                               );
-- line 1084 ----------------------------------------
-- line 1179 ----------------------------------------
      .                                   }
      .                               }
      .                               Control::Break
      .                           }
      .                       },
      .                   );
      .           
      .                   error_reported
 54,888 ( 0.00%)      }
      .           
 62,900 ( 0.00%)      fn mutate_place(
      .                   &mut self,
      .                   location: Location,
      .                   place_span: (Place<'tcx>, Span),
      .                   kind: AccessDepth,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
      .                   // Write of P[i] or *P requires P init'd.
 56,610 ( 0.00%)          self.check_if_assigned_path_is_moved(location, place_span, flow_state);
      .           
      .                   // Special case: you can assign an immutable local variable
      .                   // (e.g., `x = ...`) so long as it has never been initialized
      .                   // before (at this point in the flow).
  6,290 ( 0.00%)          if let Some(local) = place_span.0.as_local() {
 25,108 ( 0.00%)              if let Mutability::Not = self.body.local_decls[local].mutability {
      .                           // check for reassignments to immutable local variables
      .                           self.check_if_reassignment_to_immutable_state(
      .                               location, local, place_span, flow_state,
      .                           );
      .                           return;
      .                       }
      .                   }
      .           
      .                   // Otherwise, use the normal access permission rules.
 59,472 ( 0.00%)          self.access_place(
      .                       location,
 19,824 ( 0.00%)              place_span,
      .                       (kind, Write(WriteKind::Mutate)),
      .                       LocalMutationIsAllowed::No,
      .                       flow_state,
      .                   );
 50,320 ( 0.00%)      }
      .           
      .               fn consume_rvalue(
      .                   &mut self,
      .                   location: Location,
      .                   (rvalue, span): (&'cx Rvalue<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
 29,886 ( 0.00%)          match *rvalue {
  4,827 ( 0.00%)              Rvalue::Ref(_ /*rgn*/, bk, place) => {
 18,518 ( 0.00%)                  let access_kind = match bk {
      .                               BorrowKind::Shallow => {
      .                                   (Shallow(Some(ArtificialField::ShallowBorrow)), Read(ReadKind::Borrow(bk)))
      .                               }
      .                               BorrowKind::Shared => (Deep, Read(ReadKind::Borrow(bk))),
      .                               BorrowKind::Unique | BorrowKind::Mut { .. } => {
      .                                   let wk = WriteKind::MutableBorrow(bk);
    790 ( 0.00%)                          if allow_two_phase_borrow(bk) {
      .                                       (Deep, Reservation(wk))
      .                                   } else {
      .                                       (Deep, Write(wk))
      .                                   }
      .                               }
      .                           };
      .           
 33,789 ( 0.00%)                  self.access_place(
      .                               location,
  6,436 ( 0.00%)                      (place, span),
      .                               access_kind,
      .                               LocalMutationIsAllowed::No,
      .                               flow_state,
      .                           );
      .           
      .                           let action = if bk == BorrowKind::Shallow {
      .                               InitializationRequiringAction::MatchOn
      .                           } else {
      .                               InitializationRequiringAction::Borrow
      .                           };
      .           
 11,263 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
      .                               location,
      .                               action,
 11,263 ( 0.00%)                      (place.as_ref(), span),
      .                               flow_state,
      .                           );
      .                       }
      .           
      .                       Rvalue::AddressOf(mutability, place) => {
      .                           let access_kind = match mutability {
      .                               Mutability::Mut => (
      .                                   Deep,
-- line 1270 ----------------------------------------
-- line 1302 ----------------------------------------
      .                       }
      .           
      .                       Rvalue::Len(place) | Rvalue::Discriminant(place) => {
      .                           let af = match *rvalue {
      .                               Rvalue::Len(..) => Some(ArtificialField::ArrayLength),
      .                               Rvalue::Discriminant(..) => None,
      .                               _ => unreachable!(),
      .                           };
  1,248 ( 0.00%)                  self.access_place(
      .                               location,
    312 ( 0.00%)                      (place, span),
      .                               (Shallow(af), Read(ReadKind::Copy)),
      .                               LocalMutationIsAllowed::No,
      .                               flow_state,
      .                           );
    546 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
      .                               location,
      .                               InitializationRequiringAction::Use,
    546 ( 0.00%)                      (place.as_ref(), span),
      .                               flow_state,
      .                           );
      .                       }
      .           
      .                       Rvalue::BinaryOp(_bin_op, box (ref operand1, ref operand2))
      .                       | Rvalue::CheckedBinaryOp(_bin_op, box (ref operand1, ref operand2)) => {
  5,420 ( 0.00%)                  self.consume_operand(location, (operand1, span), flow_state);
  3,794 ( 0.00%)                  self.consume_operand(location, (operand2, span), flow_state);
      .                       }
      .           
      .                       Rvalue::NullaryOp(_op, _ty) => {
      .                           // nullary ops take no dynamic input; no borrowck effect.
      .                       }
      .           
      .                       Rvalue::Aggregate(ref aggregate_kind, ref operands) => {
      .                           // We need to report back the list of mutable upvars that were
      .                           // moved into the closure and subsequently used by the closure,
      .                           // in order to populate our used_mut set.
  1,077 ( 0.00%)                  match **aggregate_kind {
      .                               AggregateKind::Closure(def_id, _) | AggregateKind::Generator(def_id, _, _) => {
      .                                   let BorrowCheckResult { used_mut_upvars, .. } =
     20 ( 0.00%)                              self.infcx.tcx.mir_borrowck(def_id.expect_local());
      .                                   debug!("{:?} used_mut_upvars={:?}", def_id, used_mut_upvars);
      .                                   for field in used_mut_upvars {
      .                                       self.propagate_closure_used_mut_upvar(&operands[field.index()]);
      .                                   }
      .                               }
      .                               AggregateKind::Adt(..)
      .                               | AggregateKind::Array(..)
      .                               | AggregateKind::Tuple { .. } => (),
-- line 1350 ----------------------------------------
-- line 1448 ----------------------------------------
      .                               }
      .                               _ => propagate_closure_used_mut_place(self, place),
      .                           }
      .                       }
      .                       Operand::Constant(..) => {}
      .                   }
      .               }
      .           
 87,024 ( 0.00%)      fn consume_operand(
      .                   &mut self,
      .                   location: Location,
      .                   (operand, span): (&'cx Operand<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
 42,136 ( 0.00%)          match *operand {
  4,467 ( 0.00%)              Operand::Copy(place) => {
      .                           // copy of place: check if this is "copy of frozen path"
      .                           // (FIXME: see check_loans.rs)
  8,934 ( 0.00%)                  self.access_place(
      .                               location,
  7,445 ( 0.00%)                      (place, span),
      .                               (Deep, Read(ReadKind::Copy)),
      .                               LocalMutationIsAllowed::No,
      .                               flow_state,
      .                           );
      .           
      .                           // Finally, check if path was already moved.
      .                           self.check_if_path_or_subpath_is_moved(
      .                               location,
      .                               InitializationRequiringAction::Use,
      .                               (place.as_ref(), span),
      .                               flow_state,
      .                           );
      .                       }
 11,904 ( 0.00%)              Operand::Move(place) => {
      .                           // move of place: check if this is move of already borrowed path
 30,284 ( 0.00%)                  self.access_place(
      .                               location,
 19,840 ( 0.00%)                      (place, span),
      .                               (Deep, Write(WriteKind::Move)),
      .                               LocalMutationIsAllowed::Yes,
      .                               flow_state,
      .                           );
      .           
      .                           // Finally, check if path was already moved.
  3,344 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
      .                               location,
      .                               InitializationRequiringAction::Use,
  2,508 ( 0.00%)                      (place.as_ref(), span),
      .                               flow_state,
      .                           );
      .                       }
      .                       Operand::Constant(_) => {}
      .                   }
 58,016 ( 0.00%)      }
      .           
      .               /// Checks whether a borrow of this place is invalidated when the function
      .               /// exits
      .               fn check_for_invalidation_at_exit(
      .                   &mut self,
      .                   location: Location,
      .                   borrow: &BorrowData<'tcx>,
      .                   span: Span,
-- line 1510 ----------------------------------------
-- line 1573 ----------------------------------------
      .                       err.buffer(&mut self.errors_buffer);
      .                   }
      .               }
      .           
      .               fn check_activations(&mut self, location: Location, span: Span, flow_state: &Flows<'cx, 'tcx>) {
      .                   // Two-phase borrow support: For each activation that is newly
      .                   // generated at this statement, check if it interferes with
      .                   // another borrow.
 39,652 ( 0.00%)          let borrow_set = self.borrow_set.clone();
 76,520 ( 0.00%)          for &borrow_index in borrow_set.activations_at_location(location) {
      .                       let borrow = &borrow_set[borrow_index];
      .           
      .                       // only mutable borrows should be 2-phase
  1,725 ( 0.00%)              assert!(match borrow.kind {
      .                           BorrowKind::Shared | BorrowKind::Shallow => false,
      .                           BorrowKind::Unique | BorrowKind::Mut { .. } => true,
      .                       });
      .           
  4,140 ( 0.00%)              self.access_place(
      .                           location,
  2,070 ( 0.00%)                  (borrow.borrowed_place, span),
  3,105 ( 0.00%)                  (Deep, Activation(WriteKind::MutableBorrow(borrow.kind), borrow_index)),
      .                           LocalMutationIsAllowed::No,
      .                           flow_state,
      .                       );
      .                       // We do not need to call `check_if_path_or_subpath_is_moved`
      .                       // again, as we already called it when we made the
      .                       // initial reservation.
      .                   }
      .               }
-- line 1602 ----------------------------------------
-- line 1606 ----------------------------------------
      .                   location: Location,
      .                   local: Local,
      .                   place_span: (Place<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
      .                   debug!("check_if_reassignment_to_immutable_state({:?})", local);
      .           
      .                   // Check if any of the initializiations of `local` have happened yet:
  8,004 ( 0.00%)          if let Some(init_index) = self.is_local_ever_initialized(local, flow_state) {
      .                       // And, if so, report an error.
      .                       let init = &self.move_data.inits[init_index];
      .                       let span = init.span(&self.body);
      .                       self.report_illegal_reassignment(location, place_span, span, place_span.0);
      .                   }
      .               }
      .           
 99,593 ( 0.00%)      fn check_if_full_path_is_moved(
      .                   &mut self,
      .                   location: Location,
      .                   desired_action: InitializationRequiringAction,
      .                   place_span: (PlaceRef<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
      .                   let maybe_uninits = &flow_state.uninits;
      .           
-- line 1630 ----------------------------------------
-- line 1660 ----------------------------------------
      .                   // Therefore, if we seek out the *closest* prefix for which we
      .                   // have a MovePath, that should capture the initialization
      .                   // state for the place scenario.
      .                   //
      .                   // This code covers scenarios 1, 2, and 3.
      .           
      .                   debug!("check_if_full_path_is_moved place: {:?}", place_span.0);
      .                   let (prefix, mpi) = self.move_path_closest_to(place_span.0);
  7,661 ( 0.00%)          if maybe_uninits.contains(mpi) {
      .                       self.report_use_of_moved_or_uninitialized(
      .                           location,
      .                           desired_action,
      .                           (prefix, place_span.0, place_span.1),
      .                           mpi,
      .                       );
      .                   } // Only query longest prefix with a MovePath, not further
      .                   // ancestors; dataflow recurs on children when parents
      .                   // move (to support partial (re)inits).
      .                   //
      .                   // (I.e., querying parents breaks scenario 7; but may want
      .                   // to do such a query based on partial-init feature-gate.)
 61,288 ( 0.00%)      }
      .           
      .               /// Subslices correspond to multiple move paths, so we iterate through the
      .               /// elements of the base array. For each element we check
      .               ///
      .               /// * Does this element overlap with our slice.
      .               /// * Is any part of it uninitialized.
      .               fn check_if_subslice_element_is_moved(
      .                   &mut self,
-- line 1689 ----------------------------------------
-- line 1719 ----------------------------------------
      .                                       return; // don't bother finding other problems.
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   }
      .               }
      .           
 84,128 ( 0.00%)      fn check_if_path_or_subpath_is_moved(
      .                   &mut self,
      .                   location: Location,
      .                   desired_action: InitializationRequiringAction,
      .                   place_span: (PlaceRef<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
 15,296 ( 0.00%)          let maybe_uninits = &flow_state.uninits;
      .           
      .                   // Bad scenarios:
      .                   //
      .                   // 1. Move of `a.b.c`, use of `a` or `a.b`
      .                   //    partial initialization support, one might have `a.x`
      .                   //    initialized but not `a.b`.
      .                   // 2. All bad scenarios from `check_if_full_path_is_moved`
      .                   //
-- line 1742 ----------------------------------------
-- line 1743 ----------------------------------------
      .                   // OK scenarios:
      .                   //
      .                   // 3. Move of `a.b.c`, use of `a.b.d`
      .                   // 4. Uninitialized `a.x`, initialized `a.b`, use of `a.b`
      .                   // 5. Copied `(a.b: &_)`, use of `*(a.b).c`; note that `a.b`
      .                   //    must have been initialized for the use to be sound.
      .                   // 6. Move of `a.b.c` then reinit of `a.b.c.d`, use of `a.b.c.d`
      .           
 53,536 ( 0.00%)          self.check_if_full_path_is_moved(location, desired_action, place_span, flow_state);
      .           
  7,052 ( 0.00%)          if let Some((place_base, ProjectionElem::Subslice { from, to, from_end: false })) =
  7,648 ( 0.00%)              place_span.0.last_projection()
      .                   {
      .                       let place_ty = place_base.ty(self.body(), self.infcx.tcx);
      .                       if let ty::Array(..) = place_ty.ty.kind() {
      .                           self.check_if_subslice_element_is_moved(
      .                               location,
      .                               desired_action,
      .                               (place_base, place_span.1),
      .                               maybe_uninits,
-- line 1762 ----------------------------------------
-- line 1772 ----------------------------------------
      .                   //
      .                   // (Distinct from handling of scenarios 1+2+4 above because
      .                   // `place` does not interfere with suffixes of its prefixes,
      .                   // e.g., `a.b.c` does not interfere with `a.b.d`)
      .                   //
      .                   // This code covers scenario 1.
      .           
      .                   debug!("check_if_path_or_subpath_is_moved place: {:?}", place_span.0);
 30,592 ( 0.00%)          if let Some(mpi) = self.move_path_for_place(place_span.0) {
 24,156 ( 0.00%)              let uninit_mpi = self
      .                           .move_data
      .                           .find_in_move_path_or_its_descendants(mpi, |mpi| maybe_uninits.contains(mpi));
      .           
 12,078 ( 0.00%)              if let Some(uninit_mpi) = uninit_mpi {
      .                           self.report_use_of_moved_or_uninitialized(
      .                               location,
      .                               desired_action,
      .                               (place_span.0, place_span.0, place_span.1),
      .                               uninit_mpi,
      .                           );
      .                           return; // don't bother finding other problems.
      .                       }
      .                   }
 61,184 ( 0.00%)      }
      .           
      .               /// Currently MoveData does not store entries for all places in
      .               /// the input MIR. For example it will currently filter out
      .               /// places that are Copy; thus we do not track places of shared
      .               /// reference type. This routine will walk up a place along its
      .               /// prefixes, searching for a foundational place that *is*
      .               /// tracked in the MoveData.
      .               ///
      .               /// An Err result includes a tag indicated why the search failed.
      .               /// Currently this can only occur if the place is built off of a
      .               /// static variable, as we do not track those in the MoveData.
      .               fn move_path_closest_to(&mut self, place: PlaceRef<'tcx>) -> (PlaceRef<'tcx>, MovePathIndex) {
 99,593 ( 0.00%)          match self.move_data.rev_lookup.find(place) {
      .                       LookupResult::Parent(Some(mpi)) | LookupResult::Exact(mpi) => {
      .                           (self.move_data.move_paths[mpi].place.as_ref(), mpi)
      .                       }
      .                       LookupResult::Parent(None) => panic!("should have move path for every Local"),
      .                   }
      .               }
      .           
      .               fn move_path_for_place(&mut self, place: PlaceRef<'tcx>) -> Option<MovePathIndex> {
      .                   // If returns None, then there is no move path corresponding
      .                   // to a direct owner of `place` (which means there is nothing
      .                   // that borrowck tracks for its analysis).
      .           
 68,864 ( 0.00%)          match self.move_data.rev_lookup.find(place) {
      .                       LookupResult::Parent(_) => None,
      .                       LookupResult::Exact(mpi) => Some(mpi),
      .                   }
      .               }
      .           
      .               fn check_if_assigned_path_is_moved(
      .                   &mut self,
      .                   location: Location,
      .                   (place, span): (Place<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
      .                   debug!("check_if_assigned_path_is_moved place: {:?}", place);
      .           
      .                   // None case => assigning to `x` does not require `x` be initialized.
     13 ( 0.00%)          for (place_base, elem) in place.iter_projections().rev() {
     92 ( 0.00%)              match elem {
      .                           ProjectionElem::Index(_/*operand*/) |
      .                           ProjectionElem::ConstantIndex { .. } |
      .                           // assigning to P[i] requires P to be valid.
      .                           ProjectionElem::Downcast(_/*adt_def*/, _/*variant_idx*/) =>
      .                           // assigning to (P->variant) is okay if assigning to `P` is okay
      .                           //
      .                           // FIXME: is this true even if P is an adt with a dtor?
      .                           { }
      .           
      .                           // assigning to (*P) requires P to be initialized
      .                           ProjectionElem::Deref => {
     91 ( 0.00%)                      self.check_if_full_path_is_moved(
      .                                   location, InitializationRequiringAction::Use,
     78 ( 0.00%)                          (place_base, span), flow_state);
      .                               // (base initialized; no need to
      .                               // recur further)
      .                               break;
      .                           }
      .           
      .                           ProjectionElem::Subslice { .. } => {
      .                               panic!("we don't allow assignments to subslices, location: {:?}",
      .                                      location);
      .                           }
      .           
      .                           ProjectionElem::Field(..) => {
      .                               // if type of `P` has a dtor, then
      .                               // assigning to `P.f` requires `P` itself
      .                               // be already initialized
      .                               let tcx = self.infcx.tcx;
      4 ( 0.00%)                      let base_ty = place_base.ty(self.body(), tcx).ty;
     12 ( 0.00%)                      match base_ty.kind() {
     24 ( 0.00%)                          ty::Adt(def, _) if def.has_dtor(tcx) => {
      .                                       self.check_if_path_or_subpath_is_moved(
      .                                           location, InitializationRequiringAction::Assignment,
      .                                           (place_base, span), flow_state);
      .           
      .                                       // (base initialized; no need to
      .                                       // recur further)
      .                                       break;
      .                                   }
-- line 1877 ----------------------------------------
-- line 1931 ----------------------------------------
      .           
      .                       // Shallow so that we'll stop at any dereference; we'll
      .                       // report errors about issues with such bases elsewhere.
      .                       let maybe_uninits = &flow_state.uninits;
      .           
      .                       // Find the shortest uninitialized prefix you can reach
      .                       // without going over a Deref.
      .                       let mut shortest_uninit_seen = None;
     88 ( 0.00%)              for prefix in this.prefixes(base, PrefixSet::Shallow) {
      4 ( 0.00%)                  let mpi = match this.move_path_for_place(prefix) {
      .                               Some(mpi) => mpi,
      .                               None => continue,
      .                           };
      .           
      .                           if maybe_uninits.contains(mpi) {
      .                               debug!(
      .                                   "check_parent_of_field updating shortest_uninit_seen from {:?} to {:?}",
      .                                   shortest_uninit_seen,
-- line 1948 ----------------------------------------
-- line 1949 ----------------------------------------
      .                                   Some((prefix, mpi))
      .                               );
      .                               shortest_uninit_seen = Some((prefix, mpi));
      .                           } else {
      .                               debug!("check_parent_of_field {:?} is definitely initialized", (prefix, mpi));
      .                           }
      .                       }
      .           
     12 ( 0.00%)              if let Some((prefix, mpi)) = shortest_uninit_seen {
      .                           // Check for a reassignment into an uninitialized field of a union (for example,
      .                           // after a move out). In this case, do not report an error here. There is an
      .                           // exception, if this is the first assignment into the union (that is, there is
      .                           // no move out from an earlier location) then this is an attempt at initialization
      .                           // of the union - we should error in that case.
      .                           let tcx = this.infcx.tcx;
      .                           if base.ty(this.body(), tcx).ty.is_union() {
      .                               if this.move_data.path_map[mpi].iter().any(|moi| {
-- line 1965 ----------------------------------------
-- line 1979 ----------------------------------------
      .                   }
      .               }
      .           
      .               /// Checks the permissions for the given place and read or write kind
      .               ///
      .               /// Returns `true` if an error is reported.
      .               fn check_access_permissions(
      .                   &mut self,
 36,592 ( 0.00%)          (place, span): (Place<'tcx>, Span),
      .                   kind: ReadOrWrite,
      .                   is_local_mutation_allowed: LocalMutationIsAllowed,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .                   location: Location,
      .               ) -> bool {
      .                   debug!(
      .                       "check_access_permissions({:?}, {:?}, is_local_mutation_allowed: {:?})",
      .                       place, kind, is_local_mutation_allowed
      .                   );
      .           
      .                   let error_access;
      .                   let the_place_err;
      .           
281,352 ( 0.01%)          match kind {
      .                       Reservation(WriteKind::MutableBorrow(
      .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
      .                       ))
      .                       | Write(WriteKind::MutableBorrow(
      .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
      .                       )) => {
  3,950 ( 0.00%)                  let is_local_mutation_allowed = match borrow_kind {
      .                               BorrowKind::Unique => LocalMutationIsAllowed::Yes,
      .                               BorrowKind::Mut { .. } => is_local_mutation_allowed,
      .                               BorrowKind::Shared | BorrowKind::Shallow => unreachable!(),
      .                           };
  2,765 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
      .                               Ok(root_place) => {
      .                                   self.add_used_mut(root_place, flow_state);
      .                                   return false;
      .                               }
      .                               Err(place_err) => {
      .                                   error_access = AccessKind::MutableBorrow;
      .                                   the_place_err = place_err;
      .                               }
      .                           }
      .                       }
      .                       Reservation(WriteKind::Mutate) | Write(WriteKind::Mutate) => {
 34,692 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
      .                               Ok(root_place) => {
      .                                   self.add_used_mut(root_place, flow_state);
      .                                   return false;
      .                               }
      .                               Err(place_err) => {
      .                                   error_access = AccessKind::Mutate;
      .                                   the_place_err = place_err;
      .                               }
-- line 2033 ----------------------------------------
-- line 2041 ----------------------------------------
      .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
      .                       )
      .                       | Write(
      .                           WriteKind::Move
      .                           | WriteKind::StorageDeadOrDrop
      .                           | WriteKind::MutableBorrow(BorrowKind::Shared)
      .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
      .                       ) => {
 19,638 ( 0.00%)                  if let (Err(_), true) = (
 68,733 ( 0.00%)                      self.is_mutable(place.as_ref(), is_local_mutation_allowed),
      .                               self.errors_buffer.is_empty(),
      .                           ) {
      .                               // rust-lang/rust#46908: In pure NLL mode this code path should be
      .                               // unreachable, but we use `delay_span_bug` because we can hit this when
      .                               // dereferencing a non-Copy raw pointer *and* have `-Ztreat-err-as-bug`
      .                               // enabled. We don't want to ICE for that case, as other errors will have
      .                               // been emitted (#52262).
      .                               self.infcx.tcx.sess.delay_span_bug(
-- line 2058 ----------------------------------------
-- line 2094 ----------------------------------------
      .                   if previously_initialized {
      .                       self.report_mutability_error(place, span, the_place_err, error_access, location);
      .                       true
      .                   } else {
      .                       false
      .                   }
      .               }
      .           
 31,710 ( 0.00%)      fn is_local_ever_initialized(
      .                   &self,
      .                   local: Local,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) -> Option<InitIndex> {
 19,026 ( 0.00%)          let mpi = self.move_data.rev_lookup.find_local(local);
  6,342 ( 0.00%)          let ii = &self.move_data.init_path_map[mpi];
 26,126 ( 0.00%)          for &index in ii {
 14,200 ( 0.00%)              if flow_state.ever_inits.contains(index) {
      .                           return Some(index);
      .                       }
      .                   }
      .                   None
 25,368 ( 0.00%)      }
      .           
      .               /// Adds the place into the used mutable variables set
 21,404 ( 0.00%)      fn add_used_mut(&mut self, root_place: RootPlace<'tcx>, flow_state: &Flows<'cx, 'tcx>) {
      .                   match root_place {
 16,053 ( 0.00%)              RootPlace { place_local: local, place_projection: [], is_local_mutation_allowed } => {
      .                           // If the local may have been initialized, and it is now currently being
      .                           // mutated, then it is justified to be annotated with the `mut`
      .                           // keyword, since the mutation may be a possible reassignment.
 10,359 ( 0.00%)                  if is_local_mutation_allowed != LocalMutationIsAllowed::Yes
 15,024 ( 0.00%)                      && self.is_local_ever_initialized(local, flow_state).is_some()
      .                           {
      .                               self.used_mut.insert(local);
      .                           }
      .                       }
      .                       RootPlace {
      .                           place_local: _,
      .                           place_projection: _,
      .                           is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
-- line 2133 ----------------------------------------
-- line 2140 ----------------------------------------
      .                           if let Some(field) = self.is_upvar_field_projection(PlaceRef {
      .                               local: place_local,
      .                               projection: place_projection,
      .                           }) {
      .                               self.used_mut_upvars.push(field);
      .                           }
      .                       }
      .                   }
 20,452 ( 0.00%)      }
      .           
      .               /// Whether this value can be written or borrowed mutably.
      .               /// Returns the root place if the place passed in is a projection.
172,513 ( 0.01%)      fn is_mutable(
      .                   &self,
      .                   place: PlaceRef<'tcx>,
      .                   is_local_mutation_allowed: LocalMutationIsAllowed,
      .               ) -> Result<RootPlace<'tcx>, PlaceRef<'tcx>> {
      .                   debug!("is_mutable: place={:?}, is_local...={:?}", place, is_local_mutation_allowed);
 48,075 ( 0.00%)          match place.last_projection() {
      .                       None => {
 15,170 ( 0.00%)                  let local = &self.body.local_decls[place.local];
 45,510 ( 0.00%)                  match local.mutability {
  3,740 ( 0.00%)                      Mutability::Not => match is_local_mutation_allowed {
 11,220 ( 0.00%)                          LocalMutationIsAllowed::Yes => Ok(RootPlace {
      .                                       place_local: place.local,
      .                                       place_projection: place.projection,
      .                                       is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
      .                                   }),
      .                                   LocalMutationIsAllowed::ExceptUpvars => Ok(RootPlace {
      .                                       place_local: place.local,
      .                                       place_projection: place.projection,
      .                                       is_local_mutation_allowed: LocalMutationIsAllowed::ExceptUpvars,
      .                                   }),
      .                                   LocalMutationIsAllowed::No => Err(place),
      .                               },
 26,600 ( 0.00%)                      Mutability::Mut => Ok(RootPlace {
      .                                   place_local: place.local,
      .                                   place_projection: place.projection,
      .                                   is_local_mutation_allowed,
      .                               }),
      .                           }
      .                       }
      .                       Some((place_base, elem)) => {
  1,539 ( 0.00%)                  match elem {
      .                               ProjectionElem::Deref => {
    700 ( 0.00%)                          let base_ty = place_base.ty(self.body(), self.infcx.tcx).ty;
      .           
      .                                   // Check the kind of deref to decide
  2,100 ( 0.00%)                          match base_ty.kind() {
      .                                       ty::Ref(_, _, mutbl) => {
    686 ( 0.00%)                                  match mutbl {
      .                                               // Shared borrowed data is never mutable
      .                                               hir::Mutability::Not => Err(place),
      .                                               // Mutably borrowed data is mutable, but only if we have a
      .                                               // unique path to the `&mut`
      .                                               hir::Mutability::Mut => {
    686 ( 0.00%)                                          let mode = match self.is_upvar_field_projection(place) {
      .                                                       Some(field) if self.upvars[field.index()].by_ref => {
      .                                                           is_local_mutation_allowed
      .                                                       }
      .                                                       _ => LocalMutationIsAllowed::Yes,
      .                                                   };
      .           
  2,058 ( 0.00%)                                          self.is_mutable(place_base, mode)
      .                                               }
      .                                           }
      .                                       }
      .                                       ty::RawPtr(tnm) => {
      .                                           match tnm.mutbl {
      .                                               // `*const` raw pointers are not mutable
      .                                               hir::Mutability::Not => Err(place),
      .                                               // `*mut` raw pointers are always mutable, regardless of
-- line 2211 ----------------------------------------
-- line 2213 ----------------------------------------
      .                                               hir::Mutability::Mut => Ok(RootPlace {
      .                                                   place_local: place.local,
      .                                                   place_projection: place.projection,
      .                                                   is_local_mutation_allowed,
      .                                               }),
      .                                           }
      .                                       }
      .                                       // `Box<T>` owns its content, so mutable if its location is mutable
      7 ( 0.00%)                              _ if base_ty.is_box() => {
      .                                           self.is_mutable(place_base, is_local_mutation_allowed)
      .                                       }
      .                                       // Deref should only be for reference, pointers or boxes
      .                                       _ => bug!("Deref of unexpected type: {:?}", base_ty),
      .                                   }
      .                               }
      .                               // All other projections are owned by their base path, so mutable if
      .                               // base path is mutable
      .                               ProjectionElem::Field(..)
      .                               | ProjectionElem::Index(..)
      .                               | ProjectionElem::ConstantIndex { .. }
      .                               | ProjectionElem::Subslice { .. }
      .                               | ProjectionElem::Downcast(..) => {
      .                                   let upvar_field_projection = self.is_upvar_field_projection(place);
    326 ( 0.00%)                          if let Some(field) = upvar_field_projection {
      .                                       let upvar = &self.upvars[field.index()];
      .                                       debug!(
      .                                           "is_mutable: upvar.mutability={:?} local_mutation_is_allowed={:?} \
      .                                            place={:?}, place_base={:?}",
      .                                           upvar, is_local_mutation_allowed, place, place_base
      .                                       );
      .                                       match (upvar.place.mutability, is_local_mutation_allowed) {
      .                                           (
-- line 2244 ----------------------------------------
-- line 2285 ----------------------------------------
      .                                       }
      .                                   } else {
      .                                       self.is_mutable(place_base, is_local_mutation_allowed)
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   }
125,464 ( 0.01%)      }
      .           
      .               /// If `place` is a field projection, and the field is being projected from a closure type,
      .               /// then returns the index of the field being projected. Note that this closure will always
      .               /// be `self` in the current MIR, because that is the only time we directly access the fields
      .               /// of a closure type.
      .               fn is_upvar_field_projection(&self, place_ref: PlaceRef<'tcx>) -> Option<Field> {
  4,554 ( 0.00%)          path_utils::is_upvar_field_projection(self.infcx.tcx, &self.upvars, place_ref, self.body())
      .               }
      .           }
      .           
      .           /// The degree of overlap between 2 places for borrow-checking.
      .           enum Overlap {
      .               /// The places might partially overlap - in this case, we give
      .               /// up and say that they might conflict. This occurs when
      .               /// different fields of a union are borrowed. For example,
-- line 2308 ----------------------------------------

588,409 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
  617,780 ( 0.03%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
      140 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    1,206 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
       18 ( 0.00%)      LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
        .                   local_path: Option<PathBuf>,
        .                   /// `virtual_name` is the stable path rustc will store internally within
-- line 175 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    3,534 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
       54 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
      216 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 213 ----------------------------------------
        .               }
        .           }
        .           
        .           impl RealFileName {
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path(&self) -> Option<&Path> {
        4 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => {
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    6,604 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
       28 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
       54 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
      898 ( 0.00%)      pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
    2,435 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
    1,347 ( 0.00%)      }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
    7,592 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    7,637 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        3 ( 0.00%)      QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
        .               MacroExpansion(u64),
        .               ProcMacroSourceCode(u64),
        .               /// Strings provided as `--cfg [cfgspec]` stored in a `crate_cfg`.
        .               CfgSpec(u64),
-- line 285 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
      189 ( 0.00%)      fn from(p: PathBuf) -> Self {
       54 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
      162 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
      189 ( 0.00%)      }
        .           }
        .           
       34 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
    5,928 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
    8,892 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
    8,892 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
    7,410 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
      220 ( 0.00%)      pub fn to_string_lossy(&self) -> Cow<'_, str> {
      165 ( 0.00%)          match self.inner {
       55 ( 0.00%)              FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
      220 ( 0.00%)      }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    4,126 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
        .                       | DocTest(_, _)
        .                       | InlineAsm(_) => false,
        .                   }
        .               }
        .           
    1,483 ( 0.00%)      pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
    2,966 ( 0.00%)      }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
       27 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
       54 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 383 ----------------------------------------
        .               }
        .           
        .               pub fn proc_macro_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::ProcMacroSourceCode(hasher.finish())
        .               }
        .           
       15 ( 0.00%)      pub fn cfg_spec_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        6 ( 0.00%)          FileName::QuoteExpansion(hasher.finish())
       15 ( 0.00%)      }
        .           
        .               pub fn cli_crate_attr_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::CliCrateAttr(hasher.finish())
        .               }
        .           
        .               pub fn doc_test_source_code(path: PathBuf, line: isize) -> FileName {
-- line 403 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
       14 ( 0.00%)      pub lo: BytePos,
       14 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
       39 ( 0.00%)      pub ctxt: SyntaxContext,
       13 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
  238,539 ( 0.01%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
    2,055 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
   57,104 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
   42,828 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
   57,104 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
        .           ///
        .           /// Spans have two orthogonal attributes:
        .           ///
        .           /// - They can be *primary spans*. In this case they are the locus of
        .           ///   the error, and would be rendered with `^^^`.
        .           /// - They can have a *label*. In this case, the label is written next
        .           ///   to the mark in the snippet when we render.
      101 ( 0.00%)  #[derive(Clone, Debug, Hash, PartialEq, Eq, Encodable, Decodable)]
        .           pub struct MultiSpan {
        .               primary_spans: Vec<Span>,
       24 ( 0.00%)      span_labels: Vec<(Span, String)>,
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
   56,790 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
   37,860 ( 0.00%)      }
        .               #[inline]
    5,868 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
    5,868 ( 0.00%)      }
        .               #[inline]
   20,673 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
   13,782 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
    8,055 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
    4,833 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
        .               pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
        .               }
-- line 566 ----------------------------------------
-- line 568 ----------------------------------------
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
        .                   self.data_untracked().is_dummy()
        .               }
        .           
        .               /// Returns `true` if this span comes from a macro or desugaring.
        .               #[inline]
       90 ( 0.00%)      pub fn from_expansion(self) -> bool {
        .                   self.ctxt() != SyntaxContext::root()
       60 ( 0.00%)      }
        .           
        .               /// Returns `true` if `span` originates in a derive-macro's expansion.
        .               pub fn in_derive_expansion(self) -> bool {
        .                   matches!(self.ctxt().outer_expn_data().kind, ExpnKind::Macro(MacroKind::Derive, _))
        .               }
        .           
        .               /// Gate suggestions that would not be appropriate in a context the user didn't write.
        .               pub fn can_be_used_for_suggestions(self) -> bool {
-- line 586 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
      309 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
      206 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
    6,165 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
    4,110 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
        .               /// Returns `true` if the spans are equal with regards to the source text.
        .               ///
        .               /// Use this instead of `==` when either span could be generated code,
        .               /// and you only care that they point to the same bytes of source text.
      135 ( 0.00%)      pub fn source_equal(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
       45 ( 0.00%)          span.lo == other.lo && span.hi == other.hi
       90 ( 0.00%)      }
        .           
        .               /// Returns `Some(span)`, where the start is trimmed by the end of `other`.
        .               pub fn trim_start(self, other: Span) -> Option<Span> {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   if span.hi > other.hi { Some(span.with_lo(cmp::max(span.lo, other.hi))) } else { None }
        .               }
        .           
-- line 655 ----------------------------------------
-- line 663 ----------------------------------------
        .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
        .               /// if any.
        .               pub fn parent_callsite(self) -> Option<Span> {
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
        .               }
        .           
        .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
    2,840 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
    1,420 ( 0.00%)          while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
    3,124 ( 0.00%)      }
        .           
        .               /// Edition of the crate from which this span came.
   18,729 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
   12,486 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
    4,627 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
    1,455 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
    1,919 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
      800 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
      160 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
      640 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
   10,388 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
    8,904 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
    7,420 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
      455 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
      546 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
      364 ( 0.00%)      }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
        .               pub fn allows_unsafe(self) -> bool {
        .                   self.ctxt().outer_expn_data().allow_internal_unsafe
        .               }
        .           
       24 ( 0.00%)      pub fn macro_backtrace(mut self) -> impl Iterator<Item = ExpnData> {
        .                   let mut prev_span = DUMMY_SP;
        .                   std::iter::from_fn(move || {
        .                       loop {
      120 ( 0.00%)                  let expn_data = self.ctxt().outer_expn_data();
       42 ( 0.00%)                  if expn_data.is_root() {
        9 ( 0.00%)                      return None;
        .                           }
        .           
       60 ( 0.00%)                  let is_recursive = expn_data.call_site.source_equal(prev_span);
        .           
        6 ( 0.00%)                  prev_span = self;
        6 ( 0.00%)                  self = expn_data.call_site;
        .           
        .                           // Don't print recursive invocations.
       30 ( 0.00%)                  if !is_recursive {
      132 ( 0.00%)                      return Some(expn_data);
        .                           }
        .                       }
        .                   })
       48 ( 0.00%)      }
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
  399,410 ( 0.02%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
   71,264 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
    1,356 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
    1,214 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
  244,741 ( 0.01%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
  326,790 ( 0.01%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
    1,408 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
      896 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
    1,024 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
    2,255 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
      410 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
    1,435 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
    1,845 ( 0.00%)      }
        .           
        .               pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
        .               }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
    2,250 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
       10 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        .                   self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
   13,560 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
    7,910 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
    9,243 ( 0.00%)          span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
        .               pub fn remove_mark(&mut self) -> ExpnId {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.remove_mark();
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
-- line 897 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
   63,999 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
   42,666 ( 0.00%)          let mut span = self.data();
   34,999 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
   63,999 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
   70,554 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
        .               pub fn reverse_glob_adjust(
        .                   &mut self,
        .                   expn_id: ExpnId,
        .                   glob_span: Span,
        .               ) -> Option<Option<ExpnId>> {
       28 ( 0.00%)          let mut span = self.data();
       56 ( 0.00%)          let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
      112 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
   64,952 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
   56,833 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1044 ----------------------------------------
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   (*SPAN_DEBUG)(Span::new(self.lo, self.hi, self.ctxt, self.parent), f)
        .               }
        .           }
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        2 ( 0.00%)          MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
    3,260 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
        5 ( 0.00%)      pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
      340 ( 0.00%)          MultiSpan { primary_spans: vec, span_labels: vec![] }
        5 ( 0.00%)      }
        .           
        .               pub fn push_span_label(&mut self, span: Span, label: String) {
        .                   self.span_labels.push((span, label));
        .               }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
      586 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
       38 ( 0.00%)      }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
       66 ( 0.00%)      pub fn has_primary_spans(&self) -> bool {
       18 ( 0.00%)          self.primary_spans.iter().any(|sp| !sp.is_dummy())
       77 ( 0.00%)      }
        .           
        .               /// Returns `true` if this contains only a dummy primary span with any hygienic context.
        .               pub fn is_dummy(&self) -> bool {
        .                   let mut is_dummy = true;
        .                   for span in &self.primary_spans {
        .                       if !span.is_dummy() {
        .                           is_dummy = false;
        .                       }
-- line 1089 ----------------------------------------
-- line 1110 ----------------------------------------
        .                   replacements_occurred
        .               }
        .           
        .               /// Returns the strings to highlight. We always ensure that there
        .               /// is an entry for each of the primary spans -- for each primary
        .               /// span `P`, if there is at least one label with span `P`, we return
        .               /// those labels (marked as primary). But otherwise we return
        .               /// `SpanLabel` instances with empty labels.
      266 ( 0.00%)      pub fn span_labels(&self) -> Vec<SpanLabel> {
       38 ( 0.00%)          let is_primary = |span| self.primary_spans.contains(&span);
        .           
        .                   let mut span_labels = self
        .                       .span_labels
        .                       .iter()
        .                       .map(|&(span, ref label)| SpanLabel {
        .                           span,
        .                           is_primary: is_primary(span),
        .                           label: Some(label.clone()),
        .                       })
        .                       .collect::<Vec<_>>();
        .           
       36 ( 0.00%)          for &span in &self.primary_spans {
        .                       if !span_labels.iter().any(|sl| sl.span == span) {
        .                           span_labels.push(SpanLabel { span, is_primary: true, label: None });
        .                       }
        .                   }
        .           
        .                   span_labels
      266 ( 0.00%)      }
        .           
        .               /// Returns `true` if any of the span labels is displayable.
       30 ( 0.00%)      pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
       35 ( 0.00%)      }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
    3,260 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
    3,260 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
      335 ( 0.00%)      fn from(spans: Vec<Span>) -> MultiSpan {
      268 ( 0.00%)          MultiSpan::from_spans(spans)
      335 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
      924 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      322 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      560 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      161 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      560 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      483 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
       81 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1257 ----------------------------------------
        .               AbsentOk,
        .               /// A failed attempt has been made to load the external source.
        .               AbsentErr,
        .               Unneeded,
        .           }
        .           
        .           impl ExternalSource {
        .               pub fn get_source(&self) -> Option<&Lrc<String>> {
       57 ( 0.00%)          match self {
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::Present(ref src), .. } => Some(src),
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
    1,226 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
      162 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    2,452 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        2 ( 0.00%)          let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
       96 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
        .                   hash
        .               }
        .           
        .               /// Check if the stored hash matches the hash of the string.
        .               pub fn matches(&self, src: &str) -> bool {
        2 ( 0.00%)          Self::new(self.kind, src) == *self
        .               }
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
       98 ( 0.00%)          let len = self.hash_len();
       98 ( 0.00%)          &self.value[..len]
       98 ( 0.00%)      }
        .           
        .               fn hash_len(&self) -> usize {
      290 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
    1,566 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
       27 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
       27 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
       27 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
      108 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
       54 ( 0.00%)                          0..=0xFF => 1,
        .                                   0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
       54 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
       81 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
      297 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    5,517 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      613 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  912,998 ( 0.04%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    1,226 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    6,743 ( 0.00%)              SourceFile {
    4,904 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    2,452 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    2,452 ( 0.00%)                  lines,
    2,452 ( 0.00%)                  multibyte_chars,
    2,452 ( 0.00%)                  non_narrow_chars,
    2,452 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    5,517 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
      330 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
       90 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
       60 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
       60 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
       90 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
      360 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
       60 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
      510 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
      330 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
      120 ( 0.00%)              lines,
      120 ( 0.00%)              multibyte_chars,
      120 ( 0.00%)              non_narrow_chars,
      120 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
      270 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
   19,300 ( 0.00%)      pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
    9,650 ( 0.00%)          self.lines[line_index]
   19,300 ( 0.00%)      }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
    4,648 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
      676 ( 0.00%)          if matches!(
    1,328 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        2 ( 0.00%)              let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        6 ( 0.00%)              if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
        .                       {
       10 ( 0.00%)                  if let Some(mut src) = src {
        .                               // The src_hash needs to be computed on the pre-normalized src.
        2 ( 0.00%)                      if self.src_hash.matches(&src) {
        6 ( 0.00%)                          normalize_src(&mut src, BytePos::from_usize(0));
       16 ( 0.00%)                          *src_kind = ExternalSourceKind::Present(Lrc::new(src));
        .                                   return true;
        .                               }
        .                           } else {
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
      662 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
    5,976 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
      441 ( 0.00%)      pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
      413 ( 0.00%)          fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
        .                       let slice = &src[begin..];
        .                       match slice.find('\n') {
        .                           Some(e) => &slice[..e],
        .                           None => slice,
        .                       }
      472 ( 0.00%)          }
        .           
        .                   let begin = {
       63 ( 0.00%)              let line = self.lines.get(line_number)?;
       63 ( 0.00%)              let begin: BytePos = *line - self.start_pos;
        .                       begin.to_usize()
        .                   };
        .           
      189 ( 0.00%)          if let Some(ref src) = self.src {
      165 ( 0.00%)              Some(Cow::from(get_until_newline(src, begin)))
       30 ( 0.00%)          } else if let Some(src) = self.external_src.borrow().get_source() {
       78 ( 0.00%)              Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        8 ( 0.00%)              None
        .                   }
      504 ( 0.00%)      }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
    2,063 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
   29,072 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
   32,265 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
   26,003 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
   17,715 ( 0.00%)          assert!(line_index < self.lines.len());
   25,197 ( 0.00%)          if line_index == (self.lines.len() - 1) {
      113 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
   16,718 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1678 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_empty(&self) -> bool {
        .                   self.start_pos == self.end_pos
        .               }
        .           
        .               /// Calculates the original byte position relative to the start of the file
        .               /// based on the given byte position.
       42 ( 0.00%)      pub fn original_relative_byte_pos(&self, pos: BytePos) -> BytePos {
        .                   // Diff before any records is 0. Otherwise use the previously recorded
        .                   // diff as that applies to the following characters until a new diff
        .                   // is recorded.
        .                   let diff = match self.normalized_pos.binary_search_by(|np| np.pos.cmp(&pos)) {
        .                       Ok(i) => self.normalized_pos[i].diff,
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
      168 ( 0.00%)          BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
      126 ( 0.00%)      }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
      424 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
    1,272 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
    2,556 ( 0.00%)              if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
    7,464 ( 0.00%)                  total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
    6,220 ( 0.00%)                  assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
    2,544 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
    2,120 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
      848 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
    1,484 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
      424 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
      176 ( 0.00%)          match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
      212 ( 0.00%)                  let linebpos = self.lines[a];
      424 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
      212 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
    1,696 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
    1,696 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
      636 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
      424 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
      212 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
    1,060 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
    1,484 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
      320 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
      288 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       32 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       32 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
   63,938 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
    4,722 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
  105,199 ( 0.00%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
1,872,220 ( 0.08%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
1,787,827 ( 0.07%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
  227,654 ( 0.01%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
       24 ( 0.00%)  #[derive(Debug, Clone)]
        .           pub struct Loc {
        .               /// Information about the original source.
        .               pub file: Lrc<SourceFile>,
        .               /// The (1-based) line number.
        6 ( 0.00%)      pub line: usize,
        .               /// The (0-based) column offset.
        .               pub col: CharPos,
        .               /// The (0-based) column offset when displayed.
        6 ( 0.00%)      pub col_display: usize,
        .           }
        .           
        .           // Used to be structural records.
        .           #[derive(Debug)]
        .           pub struct SourceFileAndLine {
        .               pub sf: Lrc<SourceFile>,
        .               /// Index of line, starting from 0.
        .               pub line: usize,
-- line 1980 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
  506,065 ( 0.02%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
   97,247 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
  408,818 ( 0.02%)          let span = self.data_untracked();
  142,029 ( 0.01%)          span.ctxt.hash_stable(ctx, hasher);
  216,885 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
        .           
  145,683 ( 0.01%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
  142,404 ( 0.01%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
  284,808 ( 0.01%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
  142,404 ( 0.01%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
   71,202 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
   71,202 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
  578,360 ( 0.02%)      }
        .           }

2,373,365 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir                 

-- line 186 ----------------------------------------
        .           /// // use the values stored in map
        .           /// ```
        .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
        .               pub(crate) hash_builder: S,
        .               pub(crate) table: RawTable<(K, V), A>,
        .           }
        .           
        .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
      272 ( 0.00%)      fn clone(&self) -> Self {
    1,529 ( 0.00%)          HashMap {
        .                       hash_builder: self.hash_builder.clone(),
      290 ( 0.00%)              table: self.table.clone(),
        .                   }
      306 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   self.table.clone_from(&source.table);
        .           
        .                   // Update hash_builder only if we successfully cloned all elements.
        .                   self.hash_builder.clone_from(&source.hash_builder);
        .               }
        .           }
-- line 207 ----------------------------------------
-- line 210 ----------------------------------------
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash,
        .               S: BuildHasher,
        .           {
  109,145 ( 0.00%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
        .           }
        .           
        .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: ?Sized + Eq,
        .           {
  375,375 ( 0.02%)      move |x| k.eq(x.0.borrow())
        .           }
        .           
        .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: ?Sized + Eq,
        .           {
  290,036 ( 0.01%)      move |x| k.eq(x.borrow())
        .           }
        .           
        .           #[cfg(not(feature = "nightly"))]
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
        .               use core::hash::Hasher;
        .               let mut state = hash_builder.build_hasher();
        .               val.hash(&mut state);
        .               state.finish()
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           #[cfg_attr(feature = "inline-more", inline)]
        8 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash + ?Sized,
        .               S: BuildHasher,
        .           {
        .               hash_builder.hash_one(val)
       16 ( 0.00%)  }
        .           
        .           #[cfg(not(feature = "nightly"))]
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
        .           where
        .               K: Hash,
        .               S: BuildHasher,
        .           {
-- line 274 ----------------------------------------
-- line 367 ----------------------------------------
        .               /// let s = DefaultHashBuilder::default();
        .               /// let mut map = HashMap::with_hasher(s);
        .               /// map.insert(1, 2);
        .               /// ```
        .               ///
        .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub const fn with_hasher(hash_builder: S) -> Self {
  224,935 ( 0.01%)          Self {
        .                       hash_builder,
        .                       table: RawTable::new(),
        .                   }
        .               }
        .           
        .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
        .               /// to hash the keys.
        .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
        .               /// use hashbrown::hash_map::DefaultHashBuilder;
        .               ///
        .               /// let s = DefaultHashBuilder::default();
        .               /// let mut map = HashMap::with_hasher(s);
        .               /// map.insert(1, 2);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
       88 ( 0.00%)          Self {
        .                       hash_builder,
        .                       table: RawTable::new_in(alloc),
        .                   }
        .               }
        .           
        .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
        .               /// to hash the keys. It will be allocated with the given allocator.
        .               ///
-- line 453 ----------------------------------------
-- line 527 ----------------------------------------
        .               /// map.insert("c", 3);
        .               ///
        .               /// for key in map.keys() {
        .               ///     println!("{}", key);
        .               /// }
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn keys(&self) -> Keys<'_, K, V> {
        6 ( 0.00%)          Keys { inner: self.iter() }
        .               }
        .           
        .               /// An iterator visiting all values in arbitrary order.
        .               /// The iterator element type is `&'a V`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 543 ----------------------------------------
-- line 663 ----------------------------------------
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// assert_eq!(a.len(), 0);
        .               /// a.insert(1, "a");
        .               /// assert_eq!(a.len(), 1);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn len(&self) -> usize {
   16,379 ( 0.00%)          self.table.len()
        .               }
        .           
        .               /// Returns `true` if the map contains no elements.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// assert!(a.is_empty());
        .               /// a.insert(1, "a");
        .               /// assert!(!a.is_empty());
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn is_empty(&self) -> bool {
   78,611 ( 0.00%)          self.len() == 0
        .               }
        .           
        .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
        .               /// allocated memory for reuse.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// a.insert(1, "a");
        .               /// a.clear();
        .               /// assert!(a.is_empty());
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        6 ( 0.00%)      pub fn clear(&mut self) {
        .                   self.table.clear();
        6 ( 0.00%)      }
        .           
        .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
        .               /// The map cannot be used after calling this.
        .               /// The iterator element type is `K`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
        .               /// }
        .               ///
        .               /// assert_eq!(letters[&'s'], 2);
        .               /// assert_eq!(letters[&'t'], 3);
        .               /// assert_eq!(letters[&'u'], 1);
        .               /// assert_eq!(letters.get(&'y'), None);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
      468 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
        .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
        .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
      240 ( 0.00%)              Entry::Occupied(OccupiedEntry {
        .                           hash,
        .                           key: Some(key),
        .                           elem,
        .                           table: self,
        .                       })
        .                   } else {
      345 ( 0.00%)              Entry::Vacant(VacantEntry {
        .                           hash,
        .                           key,
        .                           table: self,
        .                       })
        .                   }
      585 ( 0.00%)      }
        .           
        .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
        .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
  656,502 ( 0.03%)          match self.get_inner(k) {
        .                       Some(&(_, ref v)) => Some(v),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Returns the key-value pair corresponding to the supplied key.
        .               ///
        .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
  883,175 ( 0.04%)          if self.table.is_empty() {
        .                       None
        .                   } else {
        4 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
        .                       self.table.get(hash, equivalent_key(k))
        .                   }
        .               }
        .           
        .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
        .               ///
        .               /// The supplied key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// assert_eq!(map.contains_key(&1), true);
        .               /// assert_eq!(map.contains_key(&2), false);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
  328,215 ( 0.01%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   self.get_inner(k).is_some()
  429,356 ( 0.02%)      }
        .           
        .               /// Returns a mutable reference to the value corresponding to the key.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
        .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// if let Some(x) = map.get_mut(&1) {
        .               ///     *x = "b";
        .               /// }
        .               /// assert_eq!(map[&1], "b");
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
      631 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
    2,451 ( 0.00%)          match self.get_inner_mut(k) {
        .                       Some(&mut (_, ref mut v)) => Some(v),
        .                       None => None,
        .                   }
    1,262 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
      817 ( 0.00%)          if self.table.is_empty() {
        .                       None
        .                   } else {
        .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      372 ( 0.00%)              self.table.get_mut(hash, equivalent_key(k))
        .                   }
        .               }
        .           
        .               /// Attempts to get mutable references to `N` values in the map at once.
        .               ///
        .               /// Returns an array of length `N` with the results of each query. For soundness, at most one
        .               /// mutable reference will be returned to any value. `None` will be returned if any of the
        .               /// keys are duplicates or missing.
-- line 1223 ----------------------------------------
-- line 1495 ----------------------------------------
        .               /// assert_eq!(map.insert(37, "a"), None);
        .               /// assert_eq!(map.is_empty(), false);
        .               ///
        .               /// map.insert(37, "b");
        .               /// assert_eq!(map.insert(37, "c"), Some("b"));
        .               /// assert_eq!(map[&37], "c");
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
3,137,455 ( 0.13%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
        .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
    1,812 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
       12 ( 0.00%)              Some(mem::replace(item, v))
        .                   } else {
1,449,835 ( 0.06%)              self.table
1,308,186 ( 0.05%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
  149,866 ( 0.01%)              None
        .                   }
2,946,273 ( 0.12%)      }
        .           
        .               /// Insert a key-value pair into the map without checking
        .               /// if the key already exists in the map.
        .               ///
        .               /// Returns a reference to the key and value just inserted.
        .               ///
        .               /// This operation is safe if a key does not exist in the map.
        .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// assert_eq!(map.remove(&1), Some("a"));
        .               /// assert_eq!(map.remove(&1), None);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
   63,817 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
  758,039 ( 0.03%)          match self.remove_entry(k) {
   21,870 ( 0.00%)              Some((_, v)) => Some(v),
   55,923 ( 0.00%)              None => None,
        .                   }
  149,680 ( 0.01%)      }
        .           
        .               /// Removes a key from the map, returning the stored key and value if the
        .               /// key was previously in the map.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
  247,422 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
        .               }
        .           }
        .           
        .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
        .               /// Creates a raw entry builder for the HashMap.
        .               ///
        .               /// Raw entries provide the lowest level of control for searching and
        .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
        .               /// Creates a `RawEntryMut` from the given key and its hash.
        .               #[inline]
        .               #[allow(clippy::wrong_self_convention)]
        .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Eq,
        .               {
1,640,928 ( 0.07%)          self.from_hash(hash, equivalent(k))
        .               }
        .           }
        .           
        .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
        .               /// Creates a `RawEntryMut` from the given hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
4,121,610 ( 0.17%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   for<'b> F: FnMut(&'b K) -> bool,
        .               {
        .                   self.search(hash, is_match)
4,482,594 ( 0.18%)      }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   for<'b> F: FnMut(&'b K) -> bool,
        .               {
  515,614 ( 0.02%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
2,667,082 ( 0.11%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
        .                           elem,
        .                           table: &mut self.map.table,
        .                           hash_builder: &self.map.hash_builder,
        .                       }),
  235,003 ( 0.01%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
        .                           table: &mut self.map.table,
        .                           hash_builder: &self.map.hash_builder,
        .                       }),
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
        .               {
        .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
        .                   self.from_key_hashed_nocheck(hash, k)
        .               }
        .           
        .               /// Access an entry by a key and its hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
1,172,920 ( 0.05%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Eq,
        .               {
1,336,489 ( 0.05%)          self.from_hash(hash, equivalent(k))
2,117,661 ( 0.09%)      }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
        .               where
        .                   F: FnMut(&K) -> bool,
        .               {
2,049,177 ( 0.08%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
        .                       Some(&(ref key, ref value)) => Some((key, value)),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Access an entry by hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
        .               /// and returns a mutable reference to it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::shadow_unrelated)]
        .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
        .               where
        .                   K: Hash,
        .                   S: BuildHasher,
        .               {
  385,133 ( 0.02%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
        .                       hash,
        .                       (key, value),
        .                       make_hasher::<K, _, V, S>(self.hash_builder),
        .                   );
        .                   (k, v)
        .               }
        .           
        .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
        .               /// map.insert("a", 1);
        .               /// map.insert("b", 2);
        .               /// map.insert("c", 3);
        .               ///
        .               /// // Not possible with .iter()
        .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
    1,730 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
   34,359 ( 0.00%)          IntoIter {
   19,404 ( 0.00%)              inner: self.table.into_iter(),
        .                   }
    5,190 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
        .               type Item = (&'a K, &'a V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
  148,223 ( 0.01%)          match self.inner.next() {
        .                       Some(x) => unsafe {
        .                           let r = x.as_ref();
      887 ( 0.00%)                  Some((&r.0, &r.1))
        .                       },
        .                       None => None,
        .                   }
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
       57 ( 0.00%)          self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn len(&self) -> usize {
        .                   self.inner.len()
        .               }
        .           }
-- line 3013 ----------------------------------------
-- line 3051 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
        .               type Item = (K, V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<(K, V)> {
    4,199 ( 0.00%)          self.inner.next()
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
        .                   f.debug_list().entries(self.iter()).finish()
        .               }
        .           }
        .           
        .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
        .               type Item = &'a K;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
       50 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match self.inner.next() {
        .                       Some((k, _)) => Some(k),
        .                       None => None,
        .                   }
      100 ( 0.00%)      }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 3819 ----------------------------------------
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn insert(self, value: V) -> &'a mut V
        .               where
        .                   K: Hash,
        .                   S: BuildHasher,
        .               {
        .                   let table = &mut self.table.table;
       12 ( 0.00%)          let entry = table.insert_entry(
        .                       self.hash,
        .                       (self.key, value),
        .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
        .                   );
        .                   &mut entry.1
        .               }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
        .           /// keys with new values returned from the iterator.
        .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
        .           where
        .               K: Eq + Hash,
        .               S: BuildHasher,
        .               A: Allocator + Clone,
        .           {
        .               #[cfg_attr(feature = "inline-more", inline)]
   29,456 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
        .                   // Keys may be already present or show multiple times in the iterator.
        .                   // Reserve the entire hint lower bound if the map is empty.
        .                   // Otherwise reserve half the hint (rounded up), so the map
        .                   // will only resize twice in the worst case.
   28,559 ( 0.00%)          let iter = iter.into_iter();
   17,476 ( 0.00%)          let reserve = if self.is_empty() {
        .                       iter.size_hint().0
        .                   } else {
      955 ( 0.00%)              (iter.size_hint().0 + 1) / 2
        .                   };
        .                   self.reserve(reserve);
        .                   iter.for_each(move |(k, v)| {
   53,845 ( 0.00%)              self.insert(k, v);
        .                   });
   16,636 ( 0.00%)      }
        .           
        .               #[inline]
        .               #[cfg(feature = "nightly")]
        .               fn extend_one(&mut self, (k, v): (K, V)) {
        .                   self.insert(k, v);
        .               }
        .           
        .               #[inline]
-- line 4588 ----------------------------------------
-- line 4604 ----------------------------------------
        .           impl<'a, K, V, S, A> Extend<(&'a K, &'a V)> for HashMap<K, V, S, A>
        .           where
        .               K: Eq + Hash + Copy,
        .               V: Copy,
        .               S: BuildHasher,
        .               A: Allocator + Clone,
        .           {
        .               #[cfg_attr(feature = "inline-more", inline)]
       42 ( 0.00%)      fn extend<T: IntoIterator<Item = (&'a K, &'a V)>>(&mut self, iter: T) {
        .                   self.extend(iter.into_iter().map(|(&key, &value)| (key, value)));
       48 ( 0.00%)      }
        .           
        .               #[inline]
        .               #[cfg(feature = "nightly")]
        .               fn extend_one(&mut self, (k, v): (&'a K, &'a V)) {
        .                   self.insert(*k, *v);
        .               }
        .           
        .               #[inline]
-- line 4622 ----------------------------------------

1,789,537 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                  

-- line 57 ----------------------------------------
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
       620 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
       310 ( 0.00%)              from_str_radix(src, radix)
       930 ( 0.00%)          }
         .           
         .                   /// Returns the number of ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[doc(alias = "popcount")]
         .                   #[doc(alias = "popcnt")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn count_ones(self) -> u32 {
   175,170 ( 0.01%)              intrinsics::ctpop(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of zeros in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
         .                   /// assert_eq!(n.leading_zeros(), 2);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn leading_zeros(self) -> u32 {
   619,480 ( 0.03%)              intrinsics::ctlz(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of trailing zeros in the binary representation
         .                   /// of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
         .                   /// assert_eq!(n.trailing_zeros(), 3);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn trailing_zeros(self) -> u32 {
   480,681 ( 0.02%)              intrinsics::cttz(self) as u32
         .                   }
         .           
         .                   /// Returns the number of leading ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn rotate_left(self, n: u32) -> Self {
10,967,642 ( 0.45%)              intrinsics::rotate_left(self, n as $SelfT)
         .                   }
         .           
         .                   /// Shifts the bits to the right by a specified amount, `n`,
         .                   /// wrapping the truncated bits to the beginning of the resulting
         .                   /// integer.
         .                   ///
         .                   /// Please note this isn't the same operation as the `>>` shifting operator!
         .                   ///
-- line 220 ----------------------------------------
-- line 430 ----------------------------------------
         .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   pub const fn checked_add(self, rhs: Self) -> Option<Self> {
         4 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
         .                       if unlikely!(b) {None} else {Some(a)}
         .                   }
         .           
         .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
         .                   /// cannot occur.
         .                   ///
         .                   /// # Safety
         .                   ///
-- line 446 ----------------------------------------
-- line 456 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_add`.
 1,015,410 ( 0.04%)              unsafe { intrinsics::unchecked_add(self, rhs) }
         .                   }
         .           
         .                   /// Checked addition with a signed integer. Computes `self + rhs`,
         .                   /// returning `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_sub`.
   590,661 ( 0.02%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
         .                   }
         .           
         .                   /// Checked integer multiplication. Computes `self * rhs`, returning
         .                   /// `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 596 ----------------------------------------
         .                                 without modifying the original"]
         .                   #[inline]
         .                   pub const fn checked_div(self, rhs: Self) -> Option<Self> {
         .                       if unlikely!(rhs == 0) {
         .                           None
         .                       } else {
         .                           // SAFETY: div by zero has been checked above and unsigned types have no other
         .                           // failure modes for division
     1,312 ( 0.00%)                  Some(unsafe { intrinsics::unchecked_div(self, rhs) })
         .                       }
         .                   }
         .           
         .                   /// Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning `None`
         .                   /// if `rhs == 0`.
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 612 ----------------------------------------
-- line 1035 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_add(self, rhs: Self) -> Self {
   206,606 ( 0.01%)              intrinsics::saturating_add(self, rhs)
         .                   }
         .           
         .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
     8,021 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
         .                   }
         .           
         .                   /// Saturating integer multiplication. Computes `self * rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1104 ----------------------------------------
         .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX).saturating_mul(10), ", stringify!($SelfT),"::MAX);")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   pub const fn saturating_mul(self, rhs: Self) -> Self {
     2,152 ( 0.00%)              match self.checked_mul(rhs) {
         .                           Some(x) => x,
         .                           None => Self::MAX,
         .                       }
         .                   }
         .           
         .                   /// Saturating integer division. Computes `self / rhs`, saturating at the
         .                   /// numeric bounds instead of overflowing.
         .                   ///
-- line 1120 ----------------------------------------
-- line 1175 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
 6,167,234 ( 0.25%)              intrinsics::wrapping_add(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) addition with a signed integer. Computes
         .                   /// `self + rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
 1,931,983 ( 0.08%)              intrinsics::wrapping_sub(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) multiplication. Computes `self *
         .                   /// rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
         .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
 6,831,680 ( 0.28%)              intrinsics::wrapping_mul(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) division. Computes `self / rhs`.
         .                   /// Wrapped division on unsigned types is just normal division.
         .                   /// There's no way wrapping could ever happen.
         .                   /// This function exists, so that all operations
         .                   /// are accounted for in the wrapping operations.
         .                   ///
-- line 1256 ----------------------------------------
-- line 1492 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
   877,745 ( 0.04%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
         .                   }
         .           
         .                   /// Calculates `self + rhs + carry` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
         .                   /// additional bit of overflow. This allows for chaining together multiple additions
         .                   /// to create "big integers" which represent larger values.
-- line 1508 ----------------------------------------
-- line 1587 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_sub(2), (3, false));")]
         .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
       528 ( 0.00%)          pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
   330,766 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
     1,056 ( 0.00%)          }
         .           
         .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
         .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
         .                   /// to create "big integers" which represent larger values.
         .                   ///
         .                   /// # Examples
-- line 1606 ----------------------------------------
-- line 1674 ----------------------------------------
         .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                     without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
 1,495,736 ( 0.06%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
         .                   }
         .           
         .                   /// Calculates the divisor when `self` is divided by `rhs`.
         .                   ///
         .                   /// Returns a tuple of the divisor along with a boolean indicating
         .                   /// whether an arithmetic overflow would occur. Note that for unsigned
         .                   /// integers overflow never occurs, so the second value is always
-- line 1690 ----------------------------------------
-- line 2132 ----------------------------------------
         .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
         .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
         .                   /// ```
         .                   #[must_use]
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
         .                   #[inline(always)]
         .                   pub const fn is_power_of_two(self) -> bool {
       216 ( 0.00%)              self.count_ones() == 1
         .                   }
         .           
         .                   // Returns one less than next power of two.
         .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
         .                   //
         .                   // 8u8.one_less_than_next_power_of_two() == 7
         .                   // 6u8.one_less_than_next_power_of_two() == 7
         .                   //
         .                   // This method cannot overflow, as in the `next_power_of_two`
         .                   // overflow cases it instead ends up returning the maximum value
         .                   // of the type, and can return 0 for 0.
         .                   #[inline]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   const fn one_less_than_next_power_of_two(self) -> Self {
    11,228 ( 0.00%)              if self <= 1 { return 0; }
         .           
    22,619 ( 0.00%)              let p = self - 1;
         .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
         .                       // That means the shift is always in-bounds, and some processors
         .                       // (such as intel pre-haswell) have more efficient ctlz
         .                       // intrinsics when the argument is non-zero.
    67,488 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    22,892 ( 0.00%)              <$SelfT>::MAX >> z
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `self`.
         .                   ///
         .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
         .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
         .                   /// release mode (the only situation in which method can return 0).
         .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   #[rustc_inherit_overflow_checks]
         .                   pub const fn next_power_of_two(self) -> Self {
    33,962 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `n`. If
         .                   /// the next power of two is greater than the type's maximum value,
         .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 2195 ----------------------------------------

   148,066 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                  

-- line 70 ----------------------------------------
         .           
         .                   impl<'a, T> $name<'a, T> {
         .                       // Helper function for creating a slice from the iterator.
         .                       #[inline(always)]
         .                       fn make_slice(&self) -> &'a [T] {
         .                           // SAFETY: the iterator was created from a slice with pointer
         .                           // `self.ptr` and length `len!(self)`. This guarantees that all
         .                           // the prerequisites for `from_raw_parts` are fulfilled.
    64,109 ( 0.00%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
         .                       }
         .           
         .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
         .                       // returning the old start.
         .                       // Unsafe because the offset must not exceed `self.len()`.
         .                       #[inline(always)]
         .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
         .                           if mem::size_of::<T>() == 0 {
         .                               zst_shrink!(self, offset);
         .                               self.ptr.as_ptr()
         .                           } else {
         .                               let old = self.ptr.as_ptr();
         .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
         .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
   407,914 ( 0.02%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
         .                               old
         .                           }
         .                       }
         .           
         .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
         .                       // returning the new end.
         .                       // Unsafe because the offset must not exceed `self.len()`.
         .                       #[inline(always)]
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
         .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
         .                           if mem::size_of::<T>() == 0 {
         .                               zst_shrink!(self, offset);
         .                               self.ptr.as_ptr()
         .                           } else {
         .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
         .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
         .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
     1,295 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
         .                               self.end
         .                           }
         .                       }
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   impl<T> ExactSizeIterator for $name<'_, T> {
         .                       #[inline(always)]
         .                       fn len(&self) -> usize {
   119,080 ( 0.00%)                  len!(self)
         .                       }
         .           
         .                       #[inline(always)]
         .                       fn is_empty(&self) -> bool {
         .                           is_empty!(self)
         .                       }
         .                   }
         .           
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
         .                       fn next(&mut self) -> Option<$elem> {
         .                           // could be implemented with slices, but this avoids bounds checks
         .           
         .                           // SAFETY: `assume` calls are safe since a slice's start pointer
         .                           // must be non-null, and slices over non-ZSTs must also have a
         .                           // non-null end pointer. The call to `next_unchecked!` is safe
         .                           // since we check if the iterator is empty first.
         .                           unsafe {
   275,272 ( 0.01%)                      assume(!self.ptr.as_ptr().is_null());
         .                               if mem::size_of::<T>() != 0 {
    57,020 ( 0.00%)                          assume(!self.end.is_null());
         .                               }
35,341,051 ( 1.44%)                      if is_empty!(self) {
         .                                   None
         .                               } else {
         .                                   Some(next_unchecked!(self))
         .                               }
         .                           }
         .                       }
         .           
         .                       #[inline]
         .                       fn size_hint(&self) -> (usize, Option<usize>) {
 1,101,984 ( 0.04%)                  let exact = len!(self);
         .                           (exact, Some(exact))
         .                       }
         .           
         .                       #[inline]
         .                       fn count(self) -> usize {
         .                           len!(self)
         .                       }
         .           
         .                       #[inline]
         .                       fn nth(&mut self, n: usize) -> Option<$elem> {
    11,374 ( 0.00%)                  if n >= len!(self) {
         .                               // This iterator is now empty.
         .                               if mem::size_of::<T>() == 0 {
         .                                   // We have to do it this way as `ptr` may never be 0, but `end`
         .                                   // could be (due to wrapping).
         .                                   self.end = self.ptr.as_ptr();
         .                               } else {
         .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
         .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
         .                       // faster to compile.
         .                       #[inline]
         .                       fn for_each<F>(mut self, mut f: F)
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item),
         .                       {
         .                           while let Some(x) = self.next() {
     3,238 ( 0.00%)                      f(x);
         .                           }
         .                       }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
         .                       fn all<F>(&mut self, mut f: F) -> bool
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> bool,
         .                       {
     2,265 ( 0.00%)                  while let Some(x) = self.next() {
    14,657 ( 0.00%)                      if !f(x) {
         .                                   return false;
         .                               }
         .                           }
         .                           true
         .                       }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
         8 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> bool,
         .                       {
   375,997 ( 0.02%)                  while let Some(x) = self.next() {
   364,377 ( 0.01%)                      if f(x) {
         .                                   return true;
         .                               }
         .                           }
         .                           false
         8 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
         .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
         .                       where
         .                           Self: Sized,
         .                           P: FnMut(&Self::Item) -> bool,
         .                       {
    47,636 ( 0.00%)                  while let Some(x) = self.next() {
    48,401 ( 0.00%)                      if predicate(&x) {
         .                                   return Some(x);
         .                               }
         .                           }
         .                           None
     2,224 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
         .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> Option<B>,
         .                       {
    43,211 ( 0.00%)                  while let Some(x) = self.next() {
   155,471 ( 0.01%)                      if let Some(y) = f(x) {
    17,723 ( 0.00%)                          return Some(y);
         .                               }
         .                           }
         .                           None
     6,155 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile. Also, the `assume` avoids a bounds check.
         .                       #[inline]
         .                       #[rustc_inherit_overflow_checks]
         .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
         .                           Self: Sized,
         .                           P: FnMut(Self::Item) -> bool,
         .                       {
         .                           let n = len!(self);
         .                           let mut i = 0;
         .                           while let Some(x) = self.next() {
   349,273 ( 0.01%)                      if predicate(x) {
         .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
         .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
         .                                   unsafe { assume(i < n) };
         .                                   return Some(i);
         .                               }
         .                               i += 1;
         .                           }
         .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
         .                       // faster to compile. Also, the `assume` avoids a bounds check.
         .                       #[inline]
         .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
         .                           P: FnMut(Self::Item) -> bool,
         .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
         .                       {
         .                           let n = len!(self);
         .                           let mut i = n;
    31,770 ( 0.00%)                  while let Some(x) = self.next_back() {
   433,041 ( 0.02%)                      i -= 1;
   354,975 ( 0.01%)                      if predicate(x) {
         .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
         .                                   // and is only decreasing.
         .                                   unsafe { assume(i < n) };
         .                                   return Some(i);
         .                               }
         .                           }
         .                           None
         .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
         .                           // the returned references is guaranteed to refer to an element
         .                           // of the slice and thus guaranteed to be valid.
         .                           //
         .                           // Also note that the caller also guarantees that we're never
         .                           // called with the same index again, and that no other methods
         .                           // that will access this subslice are called, so it is valid
         .                           // for the returned reference to be mutable in the case of
         .                           // `IterMut`
    93,239 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
         .                       }
         .           
         .                       $($extra)*
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
         .                       #[inline]
-- line 348 ----------------------------------------
-- line 349 ----------------------------------------
         .                       fn next_back(&mut self) -> Option<$elem> {
         .                           // could be implemented with slices, but this avoids bounds checks
         .           
         .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
         .                           // and slices over non-ZSTs must also have a non-null end pointer.
         .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
         .                           // empty first.
         .                           unsafe {
     1,094 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
         .                               if mem::size_of::<T>() != 0 {
     1,122 ( 0.00%)                          assume(!self.end.is_null());
         .                               }
   883,744 ( 0.04%)                      if is_empty!(self) {
         .                                   None
         .                               } else {
         .                                   Some(next_back_unchecked!(self))
         .                               }
         .                           }
         .                       }
         .           
         .                       #[inline]
-- line 369 ----------------------------------------

 7,143,349 ( 0.29%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir                 

-- line 118 ----------------------------------------
        .               stability: InternedSet<'tcx, attr::Stability>,
        .           
        .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
        .               const_stability: InternedSet<'tcx, attr::ConstStability>,
        .           }
        .           
        .           impl<'tcx> CtxtInterners<'tcx> {
        .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
       17 ( 0.00%)          CtxtInterners {
        .                       arena,
        .                       type_: Default::default(),
        .                       type_list: Default::default(),
        .                       substs: Default::default(),
        .                       region: Default::default(),
        .                       poly_existential_predicates: Default::default(),
        .                       canonical_var_infos: Default::default(),
        .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
        .                       stability: Default::default(),
        .                       const_stability: Default::default(),
        .                   }
        .               }
        .           
        .               /// Interns a type.
        .               #[allow(rustc::usage_of_ty_tykind)]
        .               #[inline(never)]
1,433,432 ( 0.06%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
        .                   self.type_
  895,895 ( 0.04%)              .intern(kind, |kind| {
   43,282 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
        .           
        .                           let ty_struct = TyS {
   86,564 ( 0.00%)                      kind,
        .                               flags: flags.flags,
        .                               outer_exclusive_binder: flags.outer_exclusive_binder,
        .                           };
        .           
        .                           Interned(self.arena.alloc(ty_struct))
        .                       })
        .                       .0
1,612,611 ( 0.07%)      }
        .           
        .               #[inline(never)]
  833,152 ( 0.03%)      fn intern_predicate(
        .                   &self,
        .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
        .               ) -> &'tcx PredicateInner<'tcx> {
        .                   self.predicate
  729,008 ( 0.03%)              .intern(kind, |kind| {
   83,892 ( 0.00%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
        .           
        .                           let predicate_struct = PredicateInner {
        .                               kind,
        .                               flags: flags.flags,
        .                               outer_exclusive_binder: flags.outer_exclusive_binder,
        .                           };
        .           
        .                           Interned(self.arena.alloc(predicate_struct))
        .                       })
        .                       .0
  937,296 ( 0.04%)      }
        .           }
        .           
        .           pub struct CommonTypes<'tcx> {
        .               pub unit: Ty<'tcx>,
        .               pub bool: Ty<'tcx>,
        .               pub char: Ty<'tcx>,
        .               pub isize: Ty<'tcx>,
        .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
        .           /// safely used as a key in the maps of a TypeckResults. For that to be
        .           /// the case, the HirId must have the same `owner` as all the other IDs in
        .           /// this table (signified by `hir_owner`). Otherwise the HirId
        .           /// would be in a different frame of reference and using its `local_id`
        .           /// would result in lookup errors, or worse, in silently wrong data being
        .           /// stored/returned.
        .           #[inline]
        .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
  234,844 ( 0.01%)      if hir_id.owner != hir_owner {
        .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
        .               }
        .           }
        .           
        .           #[cold]
        .           #[inline(never)]
        .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
        .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
        .           }
        .           
        .           impl<'a, V> LocalTableInContext<'a, V> {
        .               pub fn contains_key(&self, id: hir::HirId) -> bool {
        .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.data.contains_key(&id.local_id)
        .               }
        .           
  177,028 ( 0.01%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
   35,452 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
   35,452 ( 0.00%)          self.data.get(&id.local_id)
  141,892 ( 0.01%)      }
        .           
        .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
        .                   self.data.iter()
        .               }
        .           }
        .           
        .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
        .               type Output = V;
        .           
    1,896 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
        .                   self.get(key).expect("LocalTableInContext: key not found")
    1,264 ( 0.00%)      }
        .           }
        .           
        .           pub struct LocalTableInContextMut<'a, V> {
        .               hir_owner: LocalDefId,
        .               data: &'a mut ItemLocalMap<V>,
        .           }
        .           
        .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
        .               pub treat_byte_string_as_slice: ItemLocalSet,
        .           
        .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
        .               /// on closure size.
        .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
        .           }
        .           
        .           impl<'tcx> TypeckResults<'tcx> {
    9,294 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
  109,979 ( 0.00%)          TypeckResults {
        .                       hir_owner,
        .                       type_dependent_defs: Default::default(),
        .                       field_indices: Default::default(),
        .                       user_provided_types: Default::default(),
        .                       user_provided_sigs: Default::default(),
        .                       node_types: Default::default(),
        .                       node_substs: Default::default(),
        .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
        .                       tainted_by_errors: None,
        .                       concrete_opaque_types: Default::default(),
        .                       closure_min_captures: Default::default(),
        .                       closure_fake_reads: Default::default(),
        .                       generator_interior_types: ty::Binder::dummy(Default::default()),
        .                       treat_byte_string_as_slice: Default::default(),
        .                       closure_size_eval: Default::default(),
        .                   }
    9,294 ( 0.00%)      }
        .           
        .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
   40,653 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
   27,102 ( 0.00%)          match *qpath {
   68,532 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
        .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
        .                           .type_dependent_def(id)
   12,774 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
        .                   }
   67,755 ( 0.00%)      }
        .           
      438 ( 0.00%)      pub fn type_dependent_defs(
        .                   &self,
        .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
    3,406 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
      438 ( 0.00%)      }
        .           
    3,702 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
    6,874 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
    7,404 ( 0.00%)      }
        .           
    4,172 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
        .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
    4,172 ( 0.00%)      }
        .           
   16,246 ( 0.00%)      pub fn type_dependent_defs_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
   16,246 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
   16,246 ( 0.00%)      }
        .           
        .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
    1,976 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
      359 ( 0.00%)      }
        .           
        .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
    3,102 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
    1,551 ( 0.00%)      }
        .           
        .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
    5,224 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    2,612 ( 0.00%)      }
        .           
        .               pub fn user_provided_types_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
    1,448 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
      724 ( 0.00%)      }
        .           
        .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
   35,702 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
   17,851 ( 0.00%)      }
        .           
        .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
   59,148 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
   29,574 ( 0.00%)      }
        .           
  247,902 ( 0.01%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
   41,317 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
        .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
        .                   })
  206,585 ( 0.01%)      }
        .           
   53,396 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
   53,396 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_types.get(&id.local_id).cloned()
  106,792 ( 0.00%)      }
        .           
        .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
    7,990 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
    3,995 ( 0.00%)      }
        .           
   18,627 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
   18,627 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
   37,254 ( 0.00%)      }
        .           
   12,537 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
   12,537 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_substs.get(&id.local_id).cloned()
   25,074 ( 0.00%)      }
        .           
        .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
        .               // doesn't provide type parameter substitutions.
        .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
    4,240 ( 0.00%)          self.node_type(pat.hir_id)
        .               }
        .           
        .               // Returns the type of an expression as a monotype.
        .               //
        .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
        .               // some cases, we insert `Adjustment` annotations such as auto-deref or
        .               // auto-ref.  The type returned by this function does not consider such
        .               // adjustments.  See `expr_ty_adjusted()` instead.
        .               //
        .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
        .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
        .               // instead of "fn(ty) -> T with T = isize".
        .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
   45,993 ( 0.00%)          self.node_type(expr.hir_id)
        .               }
        .           
        .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
   46,290 ( 0.00%)          self.node_type_opt(expr.hir_id)
        .               }
        .           
        .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   23,802 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
   11,901 ( 0.00%)      }
        .           
        .               pub fn adjustments_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   33,440 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
   16,720 ( 0.00%)      }
        .           
   21,353 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
   42,706 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
        .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
   42,706 ( 0.00%)      }
        .           
        .               /// Returns the type of `expr`, considering any `Adjustment`
        .               /// entry recorded for that expression.
    1,650 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
      330 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
      556 ( 0.00%)      }
        .           
      270 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
       54 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
      144 ( 0.00%)      }
        .           
    2,968 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
        .                   // Only paths and method calls/overloaded operators have
        .                   // entries in type_dependent_defs, ignore the former here.
    5,936 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
        .                       return false;
        .                   }
        .           
    7,500 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
    5,936 ( 0.00%)      }
        .           
    9,894 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
        .                   self.pat_binding_modes().get(id).copied().or_else(|| {
        .                       s.delay_span_bug(sp, "missing binding mode");
        .                       None
        .                   })
   13,192 ( 0.00%)      }
        .           
        .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
    8,182 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
    2,442 ( 0.00%)      }
        .           
        .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
    4,412 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
    2,206 ( 0.00%)      }
        .           
        .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
   10,110 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
    5,055 ( 0.00%)      }
        .           
        .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
    3,368 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
    1,684 ( 0.00%)      }
        .           
        .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
        .               /// by the closure.
    1,564 ( 0.00%)      pub fn closure_min_captures_flattened(
        .                   &self,
        .                   closure_def_id: DefId,
        .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
        .                   self.closure_min_captures
        .                       .get(&closure_def_id)
        .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
        .                       .into_iter()
        .                       .flatten()
    1,955 ( 0.00%)      }
        .           
        .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
      724 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
      362 ( 0.00%)      }
        .           
        .               pub fn closure_kind_origins_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
        .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
        .               }
        .           
        .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
    1,988 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
      994 ( 0.00%)      }
        .           
        .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
    1,264 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
      632 ( 0.00%)      }
        .           
        .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
      724 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
      362 ( 0.00%)      }
        .           
        .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
        .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
        .               }
        .           
      456 ( 0.00%)      pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
      152 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
        .                   self.coercion_casts.contains(&hir_id.local_id)
      304 ( 0.00%)      }
        .           
        .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
        .                   self.coercion_casts.insert(id);
        .               }
        .           
        .               pub fn coercion_casts(&self) -> &ItemLocalSet {
      362 ( 0.00%)          &self.coercion_casts
      362 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
        .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
        .                   let ty::TypeckResults {
        .                       hir_owner,
        .                       ref type_dependent_defs,
        .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
        .                   const START_INDEX = 0,
        .               }
        .           }
        .           
        .           /// Mapping of type annotation indices to canonical user type annotations.
        .           pub type CanonicalUserTypeAnnotations<'tcx> =
        .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
        .           
      256 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
        .           pub struct CanonicalUserTypeAnnotation<'tcx> {
        .               pub user_ty: CanonicalUserType<'tcx>,
        .               pub span: Span,
      404 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
        .           }
        .           
        .           /// Canonicalized user type annotation.
        .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
        .           
        .           impl<'tcx> CanonicalUserType<'tcx> {
        .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
        .               /// i.e., each thing is mapped to a canonical variable with the same index.
      785 ( 0.00%)      pub fn is_identity(&self) -> bool {
    1,570 ( 0.00%)          match self.value {
        .                       UserType::Ty(_) => false,
        .                       UserType::TypeOf(_, user_substs) => {
      785 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
        .                               return false;
        .                           }
        .           
        .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
        .                               match kind.unpack() {
    1,552 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
        .                                       ty::Bound(debruijn, b) => {
        .                                           // We only allow a `ty::INNERMOST` index in substitutions.
      701 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
        .                                           cvar == b.var
        .                                       }
        .                                       _ => false,
        .                                   },
        .           
        4 ( 0.00%)                          GenericArgKind::Lifetime(r) => match r {
        .                                       ty::ReLateBound(debruijn, br) => {
        .                                           // We only allow a `ty::INNERMOST` index in substitutions.
        .                                           assert_eq!(*debruijn, ty::INNERMOST);
        .                                           cvar == br.var
        .                                       }
        .                                       _ => false,
        .                                   },
        .           
-- line 867 ----------------------------------------
-- line 872 ----------------------------------------
        .                                           cvar == b
        .                                       }
        .                                       _ => false,
        .                                   },
        .                               }
        .                           })
        .                       }
        .                   }
    1,570 ( 0.00%)      }
        .           }
        .           
        .           /// A user-given type annotation attached to a constant. These arise
        .           /// from constants that are named via paths, like `Foo::<A>::new` and
        .           /// so forth.
    2,424 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
   10,773 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
        .           pub enum UserType<'tcx> {
        .               Ty(Ty<'tcx>),
        .           
        .               /// The canonical type is the result of `type_of(def_id)` with the
        .               /// given substitutions applied.
        .               TypeOf(DefId, UserSubsts<'tcx>),
        .           }
        .           
        .           impl<'tcx> CommonTypes<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
      111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
        .           
        .                   CommonTypes {
        .                       unit: mk(Tuple(List::empty())),
        .                       bool: mk(Bool),
        .                       char: mk(Char),
        .                       never: mk(Never),
        .                       isize: mk(Int(ty::IntTy::Isize)),
        .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
        .           
        .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> CommonLifetimes<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
       67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
        .           
        .                   CommonLifetimes {
        5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
        5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
        5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> CommonConsts<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
        6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
        .           
        .                   CommonConsts {
        .                       unit: mk_const(ty::Const {
        .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
        .                           ty: types.unit,
        .                       }),
        .                   }
        .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
        .           
        .               /// Stores memory for globals (statics/consts).
        .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
        .           
        .               output_filenames: Arc<OutputFilenames>,
        .           }
        .           
        .           impl<'tcx> TyCtxt<'tcx> {
   15,100 ( 0.00%)      pub fn typeck_opt_const_arg(
        .                   self,
        .                   def: ty::WithOptConstParam<LocalDefId>,
        .               ) -> &'tcx TypeckResults<'tcx> {
    6,040 ( 0.00%)          if let Some(param_did) = def.const_param_did {
        .                       self.typeck_const_arg((def.did, param_did))
        .                   } else {
        .                       self.typeck(def.did)
        .                   }
   12,080 ( 0.00%)      }
        .           
    1,101 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
      367 ( 0.00%)          self.arena.alloc(Steal::new(thir))
    1,468 ( 0.00%)      }
        .           
    7,340 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
    1,468 ( 0.00%)          self.arena.alloc(Steal::new(mir))
   10,276 ( 0.00%)      }
        .           
    1,468 ( 0.00%)      pub fn alloc_steal_promoted(
        .                   self,
        .                   promoted: IndexVec<Promoted, Body<'tcx>>,
        .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
      367 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
    1,835 ( 0.00%)      }
        .           
    1,017 ( 0.00%)      pub fn alloc_adt_def(
        .                   self,
        .                   did: DefId,
        .                   kind: AdtKind,
        .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
        .                   repr: ReprOptions,
        .               ) -> &'tcx ty::AdtDef {
    1,808 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
      452 ( 0.00%)      }
        .           
        .               /// Allocates a read-only byte or string literal for `mir::interpret`.
        .               pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
        .                   // Create an allocation that just contains these bytes.
        .                   let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
        .                   let alloc = self.intern_const_alloc(alloc);
        .                   self.create_memory_alloc(alloc)
        .               }
        .           
        .               /// Returns a range of the start/end indices specified with the
        .               /// `rustc_layout_scalar_valid_range` attribute.
        .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
    5,240 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
    2,620 ( 0.00%)          let attrs = self.get_attrs(def_id);
   11,135 ( 0.00%)          let get = |name| {
    2,620 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
        .                           Some(attr) => attr,
        .                           None => return Bound::Unbounded,
        .                       };
        .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
      184 ( 0.00%)              if let Some(
        .                           &[
        .                               ast::NestedMetaItem::Literal(ast::Lit {
       92 ( 0.00%)                          kind: ast::LitKind::Int(a, _), ..
        .                               }),
        .                           ],
       46 ( 0.00%)              ) = attr.meta_item_list().as_deref()
        .                       {
        .                           Bound::Included(a)
        .                       } else {
        .                           self.sess
        .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
        .                           Bound::Unbounded
        .                       }
   13,100 ( 0.00%)          };
    3,930 ( 0.00%)          (
    3,930 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
    1,965 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
        .                   )
    5,240 ( 0.00%)      }
        .           
        .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
        .                   value.lift_to_tcx(self)
        .               }
        .           
        .               /// Creates a type context and call the closure with a `TyCtxt` reference
        .               /// to the context. The closure enforces that the type context and any interned
        .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
        .               /// reference to the context, to allow formatting values that need it.
       23 ( 0.00%)      pub fn create_global_ctxt(
        .                   s: &'tcx Session,
        .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
        .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
        .                   resolutions: ty::ResolverOutputs,
        .                   krate: &'tcx hir::Crate<'tcx>,
        .                   dep_graph: DepGraph,
        .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
        .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
        .                   query_kinds: &'tcx [DepKindStruct],
        .                   crate_name: &str,
        .                   output_filenames: OutputFilenames,
        .               ) -> GlobalCtxt<'tcx> {
        1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
        .                       s.fatal(&err);
        .                   });
        .                   let interners = CtxtInterners::new(arena);
        .                   let common_types = CommonTypes::new(&interners);
        .                   let common_lifetimes = CommonLifetimes::new(&interners);
        .                   let common_consts = CommonConsts::new(&interners, &common_types);
        .           
      127 ( 0.00%)          GlobalCtxt {
        .                       sess: s,
        6 ( 0.00%)              lint_store,
        .                       arena,
        2 ( 0.00%)              interners,
        5 ( 0.00%)              dep_graph,
        4 ( 0.00%)              untracked_resolutions: resolutions,
        2 ( 0.00%)              prof: s.prof.clone(),
        .                       types: common_types,
        .                       lifetimes: common_lifetimes,
        .                       consts: common_consts,
        .                       untracked_crate: krate,
        .                       on_disk_cache,
        .                       queries,
        .                       query_caches: query::QueryCaches::default(),
        .                       query_kinds,
        .                       ty_rcache: Default::default(),
        .                       pred_rcache: Default::default(),
        .                       selection_cache: Default::default(),
        .                       evaluation_cache: Default::default(),
        1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
        .                       data_layout,
        .                       alloc_map: Lock::new(interpret::AllocMap::new()),
        .                       output_filenames: Arc::new(output_filenames),
        .                   }
        9 ( 0.00%)      }
        .           
        .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
        .                   &self.query_kinds[k as usize]
        .               }
        .           
        .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
        .               #[track_caller]
        .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   ty: Ty<'tcx>,
        .                   span: S,
        .                   msg: &str,
        .               ) -> &'tcx Const<'tcx> {
        .                   self.sess.delay_span_bug(span, msg);
        .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
        .               }
        .           
   11,760 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
    1,680 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
   12,794 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
   13,440 ( 0.00%)      }
        .           
        .               /// Obtain all lang items of this crate and all dependencies (recursively)
  625,219 ( 0.03%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
        .                   self.get_lang_items(())
  803,853 ( 0.03%)      }
        .           
        .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
        .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
      392 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
        .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
      448 ( 0.00%)      }
        .           
        .               /// Obtain the diagnostic item's name
   16,044 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
        .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
   18,336 ( 0.00%)      }
        .           
        .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
   38,318 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
        .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
   43,792 ( 0.00%)      }
        .           
    9,002 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
        .                   self.stability_index(())
   11,574 ( 0.00%)      }
        .           
  279,090 ( 0.01%)      pub fn features(self) -> &'tcx rustc_feature::Features {
        .                   self.features_query(())
  318,960 ( 0.01%)      }
        .           
    6,853 ( 0.00%)      pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
        .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
   51,779 ( 0.00%)          if let Some(id) = id.as_local() {
        .                       self.untracked_resolutions.definitions.def_key(id)
        .                   } else {
   60,909 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
        .                   }
    2,380 ( 0.00%)      }
        .           
        .               /// Converts a `DefId` into its fully expanded `DefPath` (every
        .               /// `DefId` is really just an interned `DefPath`).
        .               ///
        .               /// Note that if `id` is not local to this crate, the result will
        .               ///  be a non-local `DefPath`.
      122 ( 0.00%)      pub fn def_path(self, id: DefId) -> rustc_hir::definitions::DefPath {
        .                   // Accessing the DefPath is ok, since it is part of DefPathHash.
      183 ( 0.00%)          if let Some(id) = id.as_local() {
       75 ( 0.00%)              self.untracked_resolutions.definitions.def_path(id)
        .                   } else {
      180 ( 0.00%)              self.untracked_resolutions.cstore.def_path(id)
        .                   }
      183 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
        .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
    5,046 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
        .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
        .                   } else {
    1,607 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
        .                   if crate_num == LOCAL_CRATE {
        .                       self.sess.local_stable_crate_id()
        .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
        .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
        .                       self.def_path(def_id).to_string_no_crate_verbose()
        .                   )
        .               }
        .           
        .               /// Note that this is *untracked* and should only be used within the query
        .               /// system if the result is otherwise tracked through queries
        .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
   73,170 ( 0.00%)          &*self.untracked_resolutions.cstore
   36,585 ( 0.00%)      }
        .           
        .               /// Note that this is *untracked* and should only be used within the query
        .               /// system if the result is otherwise tracked through queries
        .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
        .                   &self.untracked_resolutions.definitions
        .               }
        .           
        .               #[inline(always)]
        .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
    1,188 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
    4,803 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
        .               }
        .           
        .               #[inline(always)]
        .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
        .                   let resolutions = &self.gcx.untracked_resolutions;
        .                   StableHashingContext::ignore_spans(
        .                       self.sess,
        .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
        .               /// If `true`, we should use the MIR-based borrowck, but also
        .               /// fall back on the AST borrowck if the MIR-based one errors.
        .               pub fn migrate_borrowck(self) -> bool {
        .                   self.borrowck_mode().migrate()
        .               }
        .           
        .               /// What mode(s) of borrowck should we run? AST? MIR? both?
        .               /// (Also considers the `#![feature(nll)]` setting.)
      724 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
        .                   // Here are the main constraints we need to deal with:
        .                   //
        .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
        .                   //    synonymous with no `-Z borrowck=...` flag at all.
        .                   //
        .                   // 2. We want to allow developers on the Nightly channel
        .                   //    to opt back into the "hard error" mode for NLL,
        .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
        .                   //   errors. (To simplify the code here, it now even overrides
        .                   //   a user's attempt to specify `-Z borrowck=compare`, which
        .                   //   we arguably do not need anymore and should remove.)
        .                   //
        .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
        .                   //
        .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
        .           
    1,086 ( 0.00%)          if self.features().nll {
        .                       return BorrowckMode::Mir;
        .                   }
        .           
      362 ( 0.00%)          self.sess.opts.borrowck_mode
    1,448 ( 0.00%)      }
        .           
        .               /// If `true`, we should use lazy normalization for constants, otherwise
        .               /// we still evaluate them eagerly.
        .               #[inline]
        .               pub fn lazy_normalization(self) -> bool {
      838 ( 0.00%)          let features = self.features();
        .                   // Note: We only use lazy normalization for generic const expressions.
      810 ( 0.00%)          features.generic_const_exprs
        .               }
        .           
        .               #[inline]
        .               pub fn local_crate_exports_generics(self) -> bool {
        .                   debug_assert!(self.sess.opts.share_generics());
        .           
      401 ( 0.00%)          self.sess.crate_types().iter().any(|crate_type| {
      673 ( 0.00%)              match crate_type {
        .                           CrateType::Executable
        .                           | CrateType::Staticlib
        .                           | CrateType::ProcMacro
        .                           | CrateType::Cdylib => false,
        .           
        .                           // FIXME rust-lang/rust#64319, rust-lang/rust#64872:
        .                           // We want to block export of generics from dylibs,
        .                           // but we must fix rust-lang/rust#65890 before we can
-- line 1450 ----------------------------------------
-- line 1540 ----------------------------------------
        .                       // FIXME(#42706) -- in some cases, we could do better here.
        .                       return true;
        .                   }
        .                   false
        .               }
        .           
        .               /// Determines whether identifiers in the assembly have strict naming rules.
        .               /// Currently, only NVPTX* targets need it.
    1,300 ( 0.00%)      pub fn has_strict_asm_symbol_naming(self) -> bool {
    1,300 ( 0.00%)          self.sess.target.arch.contains("nvptx")
    2,600 ( 0.00%)      }
        .           
        .               /// Returns `&'static core::panic::Location<'static>`.
      414 ( 0.00%)      pub fn caller_location_ty(self) -> Ty<'tcx> {
        .                   self.mk_imm_ref(
       69 ( 0.00%)              self.lifetimes.re_static,
        .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
      138 ( 0.00%)                  .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
        .                   )
      414 ( 0.00%)      }
        .           
        .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
    1,848 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
    1,344 ( 0.00%)          match self.def_kind(def_id) {
        .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
        .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
        .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
        .                       },
    3,024 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
        .                   }
    1,512 ( 0.00%)      }
        .           
    6,538 ( 0.00%)      pub fn type_length_limit(self) -> Limit {
        .                   self.limits(()).type_length_limit
    7,472 ( 0.00%)      }
        .           
  232,134 ( 0.01%)      pub fn recursion_limit(self) -> Limit {
        .                   self.limits(()).recursion_limit
  265,296 ( 0.01%)      }
        .           
   29,239 ( 0.00%)      pub fn move_size_limit(self) -> Limit {
        .                   self.limits(()).move_size_limit
   33,416 ( 0.00%)      }
        .           
    1,995 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
        .                   self.limits(()).const_eval_limit
    2,280 ( 0.00%)      }
        .           
        .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
        .                   iter::once(LOCAL_CRATE)
        .                       .chain(self.crates(()).iter().copied())
        .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
        .               }
        .           }
        .           
-- line 1594 ----------------------------------------
-- line 1614 ----------------------------------------
        .               fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted>;
        .           }
        .           
        .           macro_rules! nop_lift {
        .               ($set:ident; $ty:ty => $lifted:ty) => {
        .                   impl<'a, 'tcx> Lift<'tcx> for $ty {
        .                       type Lifted = $lifted;
        .                       fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {
      860 ( 0.00%)                  if tcx.interners.$set.contains_pointer_to(&Interned(self)) {
        .                               Some(unsafe { mem::transmute(self) })
        .                           } else {
        .                               None
        .                           }
        .                       }
        .                   }
        .               };
        .           }
-- line 1630 ----------------------------------------
-- line 1684 ----------------------------------------
        .               /// This is the implicit state of rustc. It contains the current
        .               /// `TyCtxt` and query. It is updated when creating a local interner or
        .               /// executing a new query. Whenever there's a `TyCtxt` value available
        .               /// you should also have access to an `ImplicitCtxt` through the functions
        .               /// in this module.
        .               #[derive(Clone)]
        .               pub struct ImplicitCtxt<'a, 'tcx> {
        .                   /// The current `TyCtxt`.
        2 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
        .           
        .                   /// The current query job, if any. This is updated by `JobOwner::start` in
        .                   /// `ty::query::plumbing` when executing a query.
        .                   pub query: Option<query::QueryJobId<DepKind>>,
        .           
        .                   /// Where to store diagnostics for the current query job, if any.
        .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
        .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
        .                   pub layout_depth: usize,
        .           
        .                   /// The current dep graph task. This is used to add dependencies to queries
        .                   /// when executing them.
        .                   pub task_deps: TaskDepsRef<'a>,
        .               }
        .           
        .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
        5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
        .                       let tcx = TyCtxt { gcx };
       25 ( 0.00%)              ImplicitCtxt {
        .                           tcx,
        .                           query: None,
        .                           diagnostics: None,
        .                           layout_depth: 0,
        .                           task_deps: TaskDepsRef::Ignore,
        .                       }
        5 ( 0.00%)          }
        .               }
        .           
        .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
        .               /// to `value` during the call to `f`. It is restored to its previous value after.
        .               /// This is used to set the pointer to the new `ImplicitCtxt`.
        .               #[cfg(parallel_compiler)]
        .               #[inline]
        .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
        .           
        .               /// Sets TLV to `value` during the call to `f`.
        .               /// It is restored to its previous value after.
        .               /// This is used to set the pointer to the new `ImplicitCtxt`.
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
        .                   let old = get_tlv();
  102,767 ( 0.00%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
        .                   TLV.with(|tlv| tlv.set(value));
        .                   f()
        .               }
        .           
        .               /// Gets the pointer to the current `ImplicitCtxt`.
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
        .               }
        .           
        .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
        .               #[inline]
        .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
        .               where
        .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
        .               {
        1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
        .               }
        .           
        .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
        .               #[inline]
        .               pub fn with_context_opt<F, R>(f: F) -> R
        .               where
        .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
        .               {
        .                   let context = get_tlv();
  410,133 ( 0.02%)          if context == 0 {
        .                       f(None)
        .                   } else {
        .                       // We could get an `ImplicitCtxt` pointer from another thread.
        .                       // Ensure that `ImplicitCtxt` is `Sync`.
        .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
        .           
        .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
        .                   }
-- line 1789 ----------------------------------------
-- line 1791 ----------------------------------------
        .           
        .               /// Allows access to the current `ImplicitCtxt`.
        .               /// Panics if there is no `ImplicitCtxt` available.
        .               #[inline]
        .               pub fn with_context<F, R>(f: F) -> R
        .               where
        .                   F: for<'a, 'tcx> FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
        .               {
      459 ( 0.00%)          with_context_opt(|opt_context| f(opt_context.expect("no ImplicitCtxt stored in tls")))
        .               }
        .           
        .               /// Allows access to the current `ImplicitCtxt` whose tcx field is the same as the tcx argument
        .               /// passed in. This means the closure is given an `ImplicitCtxt` with the same `'tcx` lifetime
        .               /// as the `TyCtxt` passed in.
        .               /// This will panic if you pass it a `TyCtxt` which is different from the current
        .               /// `ImplicitCtxt`'s `tcx` field.
        .               #[inline]
        .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
        .               where
        .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
        .               {
        .                   with_context(|context| unsafe {
  197,824 ( 0.01%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
        .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
  196,308 ( 0.01%)              f(context)
        .                   })
        .               }
        .           
        .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
        .               /// Panics if there is no `ImplicitCtxt` available.
        .               #[inline]
        .               pub fn with<F, R>(f: F) -> R
        .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
        .               fn into_pointer(&self) -> *const () {
        .                   self.0 as *const _ as *const ()
        .               }
        .           }
        .           
        .           #[allow(rustc::usage_of_ty_tykind)]
        .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
        .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
  160,768 ( 0.01%)          &self.0.kind()
        .               }
        .           }
        .           
        .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
        .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
        .           
        .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   86,864 ( 0.00%)          self.0.kind().hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
   92,177 ( 0.00%)          &self.0.kind
        .               }
        .           }
        .           
        .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
        .           
        .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   14,332 ( 0.00%)          self.0.kind.hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
        .               fn borrow<'a>(&'a self) -> &'a [T] {
  214,414 ( 0.01%)          &self.0[..]
        .               }
        .           }
        .           
        .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
        .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
        .           
        .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   37,205 ( 0.00%)          self.0[..].hash(s)
        .               }
        .           }
        .           
        .           macro_rules! direct_interners {
        .               ($($name:ident: $method:ident($ty:ty),)+) => {
        .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
        .                       fn borrow<'a>(&'a self) -> &'a $ty {
   57,022 ( 0.00%)                  &self.0
        .                       }
        .                   }
        .           
        .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
        .                       fn eq(&self, other: &Self) -> bool {
        .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
        .                           // equals `x == y`.
        .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
        .                   }
        .           
        .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
        .           
        .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
        .                       fn hash<H: Hasher>(&self, s: &mut H) {
        .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
        .                           // x.hash(s)`.
   34,688 ( 0.00%)                  self.0.hash(s)
        .                       }
        .                   }
        .           
        .                   impl<'tcx> TyCtxt<'tcx> {
  509,970 ( 0.02%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
  270,474 ( 0.01%)                  self.interners.$name.intern(v, |v| {
    7,207 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
        .                           }).0
  571,581 ( 0.02%)              }
        .                   })+
        .               }
        .           }
        .           
        .           direct_interners! {
        .               region: mk_region(RegionKind),
        .               const_: mk_const(Const<'tcx>),
        .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
        .               adt_def: intern_adt_def(AdtDef),
        .               stability: intern_stability(attr::Stability),
        .               const_stability: intern_const_stability(attr::ConstStability),
        .           }
        .           
        .           macro_rules! slice_interners {
        .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
        .                   impl<'tcx> TyCtxt<'tcx> {
2,380,343 ( 0.10%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
        .                           self.interners.$field.intern_ref(v, || {
        .                               Interned(List::from_arena(&*self.arena, v))
        .                           }).0
2,131,326 ( 0.09%)              })+
        .                   }
        .               );
        .           }
        .           
        .           slice_interners!(
        .               type_list: _intern_type_list(Ty<'tcx>),
        .               substs: _intern_substs(GenericArg<'tcx>),
        .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2188 ----------------------------------------
        .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
        .                   })
        .               }
        .           
        .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
        .               /// `*r == kind`.
        .               #[inline]
        .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
   46,244 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
        .               }
        .           
        .               #[allow(rustc::usage_of_ty_tykind)]
        .               #[inline]
        .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
1,285,824 ( 0.05%)          self.interners.intern_ty(st)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
1,131,974 ( 0.05%)          let inner = self.interners.intern_predicate(binder);
        .                   Predicate { inner }
        .               }
        .           
        .               #[inline]
2,887,304 ( 0.12%)      pub fn reuse_or_mk_predicate(
        .                   self,
        .                   pred: Predicate<'tcx>,
        .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
        .               ) -> Predicate<'tcx> {
  295,124 ( 0.01%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
2,887,304 ( 0.12%)      }
        .           
        .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
      601 ( 0.00%)          match tm {
        .                       IntTy::Isize => self.types.isize,
        .                       IntTy::I8 => self.types.i8,
        .                       IntTy::I16 => self.types.i16,
        .                       IntTy::I32 => self.types.i32,
        .                       IntTy::I64 => self.types.i64,
        .                       IntTy::I128 => self.types.i128,
        .                   }
      601 ( 0.00%)      }
        .           
        .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
      744 ( 0.00%)          match tm {
        .                       UintTy::Usize => self.types.usize,
        .                       UintTy::U8 => self.types.u8,
        .                       UintTy::U16 => self.types.u16,
        .                       UintTy::U32 => self.types.u32,
        .                       UintTy::U64 => self.types.u64,
        .                       UintTy::U128 => self.types.u128,
        .                   }
      744 ( 0.00%)      }
        .           
        .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
      611 ( 0.00%)          match tm {
        .                       FloatTy::F32 => self.types.f32,
        .                       FloatTy::F64 => self.types.f64,
        .                   }
      611 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_static_str(self) -> Ty<'tcx> {
      460 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   // Take a copy of substs so that we own the vectors inside.
        .                   self.mk_ty(Adt(def, substs))
        .               }
        .           
-- line 2259 ----------------------------------------
-- line 2329 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
        .               }
        .           
        .               #[inline]
      737 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
        .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
      752 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(Slice(ty))
        .               }
        .           
        .               #[inline]
        .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
    1,056 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
    1,569 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
        .               }
        .           
        .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
    5,696 ( 0.00%)          iter.intern_with(|ts| {
    3,475 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
    7,664 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
    5,094 ( 0.00%)          })
        .               }
        .           
        .               #[inline]
        .               pub fn mk_unit(self) -> Ty<'tcx> {
      925 ( 0.00%)          self.types.unit
        .               }
        .           
        .               #[inline]
        .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
        .                   if self.features().never_type_fallback { self.types.never } else { self.types.unit }
        .               }
        .           
        .               #[inline]
        .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(FnDef(def_id, substs))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
      518 ( 0.00%)          self.mk_ty(FnPtr(fty))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_dynamic(
        .                   self,
        .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
        .                   reg: ty::Region<'tcx>,
        .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
        .                   self.mk_ty_infer(TyVar(v))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
    2,124 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
        .               }
        .           
        .               #[inline]
        .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
        .                   self.mk_ty_infer(IntVar(v))
        .               }
        .           
        .               #[inline]
-- line 2428 ----------------------------------------
-- line 2445 ----------------------------------------
        .                   self.mk_ty(Param(ParamTy { index, name }))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
        .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
        .               }
        .           
    7,994 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
    5,710 ( 0.00%)          match param.kind {
        .                       GenericParamDefKind::Lifetime => {
        .                           self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
        .                       }
    2,284 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
        .                       GenericParamDefKind::Const { .. } => {
        .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
        .                       }
        .                   }
    7,994 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(Opaque(def_id, substs))
        .               }
        .           
      584 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
      584 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
    1,168 ( 0.00%)      }
        .           
       46 ( 0.00%)      pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
      138 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Deref)
       92 ( 0.00%)      }
        .           
      190 ( 0.00%)      pub fn mk_place_downcast(
        .                   self,
        .                   place: Place<'tcx>,
        .                   adt_def: &'tcx AdtDef,
        .                   variant_index: VariantIdx,
        .               ) -> Place<'tcx> {
      190 ( 0.00%)          self.mk_place_elem(
        .                       place,
      380 ( 0.00%)              PlaceElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index),
        .                   )
      380 ( 0.00%)      }
        .           
        .               pub fn mk_place_downcast_unnamed(
        .                   self,
        .                   place: Place<'tcx>,
        .                   variant_index: VariantIdx,
        .               ) -> Place<'tcx> {
        .                   self.mk_place_elem(place, PlaceElem::Downcast(None, variant_index))
        .               }
-- line 2496 ----------------------------------------
-- line 2497 ----------------------------------------
        .           
        .               pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
        .                   self.mk_place_elem(place, PlaceElem::Index(index))
        .               }
        .           
        .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
        .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
        .               /// flight.
    7,380 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
        .                   let mut projection = place.projection.to_vec();
        .                   projection.push(elem);
        .           
        .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
    8,200 ( 0.00%)      }
        .           
    4,032 ( 0.00%)      pub fn intern_poly_existential_predicates(
        .                   self,
        .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
        .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
      576 ( 0.00%)          assert!(!eps.is_empty());
        .                   assert!(
        .                       eps.array_windows()
      100 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
        .                               != Ordering::Greater)
        .                   );
    2,304 ( 0.00%)          self._intern_poly_existential_predicates(eps)
    4,608 ( 0.00%)      }
        .           
        .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
        .                   // FIXME consider asking the input slice to be sorted to avoid
        .                   // re-interning permutations, in which case that would be asserted
        .                   // here.
    9,083 ( 0.00%)          if preds.is_empty() {
        .                       // The macro-generated method below asserts we don't intern an empty slice.
        .                       List::empty()
        .                   } else {
    2,535 ( 0.00%)              self._intern_predicates(preds)
        .                   }
   13,096 ( 0.00%)      }
        .           
        .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
   33,450 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
    1,464 ( 0.00%)      }
        .           
        .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
  385,241 ( 0.02%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
   26,780 ( 0.00%)      }
        .           
        .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
        .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
        .               }
        .           
        .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
   16,481 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
   15,438 ( 0.00%)      }
        .           
        .               pub fn intern_canonical_var_infos(
        .                   self,
        .                   ts: &[CanonicalVarInfo<'tcx>],
        .               ) -> CanonicalVarInfos<'tcx> {
   14,593 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
      202 ( 0.00%)      }
        .           
        .               pub fn intern_bound_variable_kinds(
        .                   self,
        .                   ts: &[ty::BoundVariableKind],
        .               ) -> &'tcx List<ty::BoundVariableKind> {
   42,128 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
   77,890 ( 0.00%)      }
        .           
        .               pub fn mk_fn_sig<I>(
        .                   self,
        .                   inputs: I,
        .                   output: I::Item,
        .                   c_variadic: bool,
        .                   unsafety: hir::Unsafety,
        .                   abi: abi::Abi,
        .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
        .               where
        .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
        .               {
        .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
    2,028 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
      518 ( 0.00%)              c_variadic,
      660 ( 0.00%)              unsafety,
      752 ( 0.00%)              abi,
       40 ( 0.00%)          })
        .               }
        .           
        .               pub fn mk_poly_existential_predicates<
        .                   I: InternAs<
        .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
        .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
        .                   >,
        .               >(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
    2,278 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
        .               }
        .           
        .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
        4 ( 0.00%)          iter.intern_with(|xs| self.intern_predicates(xs))
        .               }
        .           
        .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
    9,918 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
        .               }
        .           
      150 ( 0.00%)      pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
  293,436 ( 0.01%)          iter.intern_with(|xs| self.intern_substs(xs))
      200 ( 0.00%)      }
        .           
        .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
  103,803 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
        .               }
        .           
   15,249 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
        .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
   30,498 ( 0.00%)      }
        .           
        .               pub fn mk_bound_variable_kinds<
        .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
        .               >(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
  239,350 ( 0.01%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
        .               }
        .           
        .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
        .               /// It stops at `bound` and just returns it if reached.
  149,380 ( 0.01%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
  149,380 ( 0.01%)          let hir = self.hir();
        .                   loop {
  322,599 ( 0.01%)              if id == bound {
        .                           return bound;
        .                       }
        .           
  431,285 ( 0.02%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
        .                           return id;
        .                       }
        .                       let next = hir.get_parent_node(id);
  258,579 ( 0.01%)              if next == id {
        .                           bug!("lint traversal reached the root of the crate");
        .                       }
        .                       id = next;
        .                   }
  213,400 ( 0.01%)      }
        .           
    8,456 ( 0.00%)      pub fn lint_level_at_node(
        .                   self,
        .                   lint: &'static Lint,
        .                   mut id: hir::HirId,
        .               ) -> (Level, LintLevelSource) {
        .                   let sets = self.lint_levels(());
        .                   loop {
   37,028 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
        .                           return pair;
        .                       }
    2,470 ( 0.00%)              let next = self.hir().get_parent_node(id);
    7,410 ( 0.00%)              if next == id {
        .                           bug!("lint traversal reached the root of the crate");
        .                       }
        .                       id = next;
        .                   }
    8,456 ( 0.00%)      }
        .           
      896 ( 0.00%)      pub fn struct_span_lint_hir(
        .                   self,
        .                   lint: &'static Lint,
        .                   hir_id: HirId,
        .                   span: impl Into<MultiSpan>,
        .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
        .               ) {
    1,048 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
      581 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
      512 ( 0.00%)      }
        .           
        .               pub fn struct_lint_node(
        .                   self,
        .                   lint: &'static Lint,
        .                   id: HirId,
        .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
        .               ) {
        .                   let (level, src) = self.lint_level_at_node(lint, id);
        .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
        .               }
        .           
    5,488 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
    1,568 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
        .                   let candidates = map.get(&id.local_id)?;
    1,568 ( 0.00%)          Some(&*candidates)
    6,272 ( 0.00%)      }
        .           
   11,774 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
        .                   debug!(?id, "named_region");
        .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
   15,138 ( 0.00%)      }
        .           
        .               pub fn is_late_bound(self, id: HirId) -> bool {
        .                   self.is_late_bound_map(id.owner)
        .                       .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
        .               }
        .           
   12,838 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
        .                   self.object_lifetime_defaults_map(id.owner)
   16,506 ( 0.00%)      }
        .           
   21,069 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
        .                   self.mk_bound_variable_kinds(
        .                       self.late_bound_vars_map(id.owner)
        .                           .and_then(|map| map.get(&id.local_id).cloned())
        .                           .unwrap_or_else(|| {
        .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
        .                           })
        .                           .iter(),
        .                   )
   21,069 ( 0.00%)      }
        .           
        .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
        .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
        .               }
        .           
        .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
        .               /// feature gates
      300 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
       30 ( 0.00%)          if self.is_const_fn_raw(def_id) {
        2 ( 0.00%)              match self.lookup_const_stability(def_id) {
        4 ( 0.00%)                  Some(stability) if stability.level.is_unstable() => {
        .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
        .                               // corresponding feature gate.
        2 ( 0.00%)                      self.features()
        .                                   .declared_lib_features
        .                                   .iter()
        .                                   .any(|&(sym, _)| sym == stability.feature)
        .                           }
        .                           // functions without const stability are either stable user written
        .                           // const fn or the user is using feature gates and we thus don't
        .                           // care what they do
        .                           _ => true,
        .                       }
        .                   } else {
        .                       false
        .                   }
      270 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TyCtxtAt<'tcx> {
        .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
        .               #[track_caller]
        .               pub fn ty_error(self) -> Ty<'tcx> {
        .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
        .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
        .           }
        .           
        .           impl<I, T, R, E> InternAs<[T], R> for I
        .           where
        .               E: InternIteratorElement<T, R>,
        .               I: Iterator<Item = E>,
        .           {
        .               type Output = E::Output;
  173,528 ( 0.01%)      fn intern_with<F>(self, f: F) -> Self::Output
        .               where
        .                   F: FnOnce(&[T]) -> R,
        .               {
1,311,800 ( 0.05%)          E::intern_with(self, f)
  135,018 ( 0.01%)      }
        .           }
        .           
        .           pub trait InternIteratorElement<T, R>: Sized {
        .               type Output;
        .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
        .           }
        .           
        .           impl<T, R> InternIteratorElement<T, R> for T {
        .               type Output = R;
  430,333 ( 0.02%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
        .                   mut iter: I,
        .                   f: F,
        .               ) -> Self::Output {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
        .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
        .                   // `assert`.
  314,357 ( 0.01%)          match iter.size_hint() {
        .                       (0, Some(0)) => {
        6 ( 0.00%)                  assert!(iter.next().is_none());
        .                           f(&[])
        .                       }
        .                       (1, Some(1)) => {
        .                           let t0 = iter.next().unwrap();
        .                           assert!(iter.next().is_none());
   28,410 ( 0.00%)                  f(&[t0])
        .                       }
        .                       (2, Some(2)) => {
        .                           let t0 = iter.next().unwrap();
        .                           let t1 = iter.next().unwrap();
      147 ( 0.00%)                  assert!(iter.next().is_none());
   23,472 ( 0.00%)                  f(&[t0, t1])
        .                       }
    1,488 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
        .                   }
  239,170 ( 0.01%)      }
        .           }
        .           
        .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
        .           where
        .               T: Clone + 'a,
        .           {
        .               type Output = R;
   12,333 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
        .                   // This code isn't hot.
       16 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
    9,882 ( 0.00%)      }
        .           }
        .           
        .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
        .               type Output = Result<R, E>;
  321,232 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
        .                   mut iter: I,
        .                   f: F,
        .               ) -> Self::Output {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
        .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
        .                   // `assert`, unless a failure happens first, in which case the result
        .                   // will be an error anyway.
  258,168 ( 0.01%)          Ok(match iter.size_hint() {
        .                       (0, Some(0)) => {
        .                           assert!(iter.next().is_none());
        .                           f(&[])
        .                       }
        .                       (1, Some(1)) => {
    1,665 ( 0.00%)                  let t0 = iter.next().unwrap()?;
        .                           assert!(iter.next().is_none());
   16,335 ( 0.00%)                  f(&[t0])
        .                       }
        .                       (2, Some(2)) => {
      196 ( 0.00%)                  let t0 = iter.next().unwrap()?;
      196 ( 0.00%)                  let t1 = iter.next().unwrap()?;
      294 ( 0.00%)                  assert!(iter.next().is_none());
   28,610 ( 0.00%)                  f(&[t0, t1])
        .                       }
    2,579 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
        .                   })
  361,006 ( 0.01%)      }
        .           }
        .           
        .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
        .           // won't work for us.
        .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
  197,824 ( 0.01%)      t as *const () == u as *const ()
        .           }
        .           
        .           pub fn provide(providers: &mut ty::query::Providers) {
        2 ( 0.00%)      providers.in_scope_traits_map =
        .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
        3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
        2 ( 0.00%)      providers.module_reexports =
        .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
        2 ( 0.00%)      providers.crate_name = |tcx, id| {
        1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
        1 ( 0.00%)          tcx.crate_name
        .               };
        2 ( 0.00%)      providers.maybe_unused_trait_import =
        .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
        2 ( 0.00%)      providers.maybe_unused_extern_crates =
        .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
        2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
        .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
        .               };
        .           
       11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
        2 ( 0.00%)      providers.lookup_const_stability =
        .                   |tcx, id| tcx.stability().local_const_stability(id.expect_local());
        2 ( 0.00%)      providers.lookup_deprecation_entry =
   10,272 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
        2 ( 0.00%)      providers.extern_mod_stmt_cnum =
        .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
        3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
        3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
        2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
        1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
        7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
        .               };
        2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
        1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
        7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
        .               };
        2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
        1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
        .                   // We want to check if the panic handler was defined in this crate
        3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
        .               };
        .           }

1,155,883 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 36 ----------------------------------------
      .           use rustc_session::parse::ParseSess;
      .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
      .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
      .           use tracing::debug;
      .           
      .           use std::ops::Range;
      .           use std::{cmp, mem, slice};
      .           
 16,214 ( 0.00%)  bitflags::bitflags! {
      .               struct Restrictions: u8 {
      .                   const STMT_EXPR         = 1 << 0;
      .                   const NO_STRUCT_LITERAL = 1 << 1;
      .                   const CONST_EXPR        = 1 << 2;
      .               }
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
      .                               $self.bump();
      .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
      .                           }
      .                       }
      .                   }
      .               };
      .           }
      .           
 20,150 ( 0.00%)  #[derive(Clone)]
      .           pub struct Parser<'a> {
    368 ( 0.00%)      pub sess: &'a ParseSess,
      .               /// The current token.
    114 ( 0.00%)      pub token: Token,
      .               /// The spacing for the current token
    289 ( 0.00%)      pub token_spacing: Spacing,
      .               /// The previous token.
    171 ( 0.00%)      pub prev_token: Token,
    521 ( 0.00%)      pub capture_cfg: bool,
  1,274 ( 0.00%)      restrictions: Restrictions,
    578 ( 0.00%)      expected_tokens: Vec<TokenType>,
      .               // Important: This must only be advanced from `next_tok`
      .               // to ensure that `token_cursor.num_next_calls` is updated properly
      .               token_cursor: TokenCursor,
    578 ( 0.00%)      desugar_doc_comments: bool,
      .               /// This field is used to keep track of how many left angle brackets we have seen. This is
      .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
      .               /// appropriately.
      .               ///
      .               /// See the comments in the `parse_path_segment` function for more details.
    578 ( 0.00%)      unmatched_angle_bracket_count: u32,
    867 ( 0.00%)      max_angle_bracket_count: u32,
      .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
      .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
      .               /// error.
    289 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
      .               last_unexpected_token_span: Option<Span>,
      .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
      .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
      .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
      .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
      .               subparser_name: Option<&'static str>,
      .               capture_state: CaptureState,
      .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
      .           /// the first macro inner attribute to invoke a proc-macro).
      .           /// When create a `TokenStream`, the inner attributes get inserted
      .           /// into the proper place in the token stream.
      .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
      .           
      .           /// Controls how we capture tokens. Capturing can be expensive,
      .           /// so we try to avoid performing capturing in cases where
      .           /// we will never need an `AttrAnnotatedTokenStream`
    289 ( 0.00%)  #[derive(Copy, Clone)]
      .           pub enum Capturing {
      .               /// We aren't performing any capturing - this is the default mode.
      .               No,
      .               /// We are capturing tokens
      .               Yes,
      .           }
      .           
  1,178 ( 0.00%)  #[derive(Clone)]
      .           struct CaptureState {
  1,156 ( 0.00%)      capturing: Capturing,
    289 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
      .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
      .           }
      .           
      .           impl<'a> Drop for Parser<'a> {
      .               fn drop(&mut self) {
  2,591 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
      .               }
      .           }
      .           
 62,631 ( 0.00%)  #[derive(Clone)]
      .           struct TokenCursor {
      .               frame: TokenCursorFrame,
 14,554 ( 0.00%)      stack: Vec<TokenCursorFrame>,
      .               desugar_doc_comments: bool,
      .               // Counts the number of calls to `next` or `next_desugared`,
      .               // depending on whether `desugar_doc_comments` is set.
  4,527 ( 0.00%)      num_next_calls: usize,
      .               // During parsing, we may sometimes need to 'unglue' a
      .               // glued token into two component tokens
      .               // (e.g. '>>' into '>' and '>), so that the parser
      .               // can consume them one at a time. This process
      .               // bypasses the normal capturing mechanism
      .               // (e.g. `num_next_calls` will not be incremented),
      .               // since the 'unglued' tokens due not exist in
      .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
      .               // in `Option<Vec<u8>>` requires us to unglue
      .               // the trailing `>>` token. The `break_last_token`
      .               // field is used to track this token - it gets
      .               // appended to the captured stream when
      .               // we evaluate a `LazyTokenStream`
      .               break_last_token: bool,
      .           }
      .           
 28,340 ( 0.00%)  #[derive(Clone)]
      .           struct TokenCursorFrame {
  9,782 ( 0.00%)      delim: token::DelimToken,
      .               span: DelimSpan,
      .               open_delim: bool,
 19,564 ( 0.00%)      tree_cursor: tokenstream::Cursor,
      .               close_delim: bool,
      .           }
      .           
      .           impl TokenCursorFrame {
      .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
  1,980 ( 0.00%)          TokenCursorFrame {
      .                       delim,
      .                       span,
      .                       open_delim: false,
  4,833 ( 0.00%)              tree_cursor: tts.into_trees(),
      .                       close_delim: false,
      .                   }
      .               }
      .           }
      .           
      .           impl TokenCursor {
456,036 ( 0.02%)      fn next(&mut self) -> (Token, Spacing) {
      .                   loop {
218,032 ( 0.01%)              let (tree, spacing) = if !self.frame.open_delim {
  4,041 ( 0.00%)                  self.frame.open_delim = true;
 20,205 ( 0.00%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
444,913 ( 0.02%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
      .                           tree
 16,570 ( 0.00%)              } else if !self.frame.close_delim {
  3,906 ( 0.00%)                  self.frame.close_delim = true;
 19,530 ( 0.00%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
  7,812 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
 50,778 ( 0.00%)                  self.frame = frame;
      .                           continue;
      .                       } else {
  8,514 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
      .                       };
      .           
 84,088 ( 0.00%)              match tree {
      .                           TokenTree::Token(token) => {
304,024 ( 0.01%)                      return (token, spacing);
      .                           }
      .                           TokenTree::Delimited(sp, delim, tts) => {
      .                               let frame = TokenCursorFrame::new(sp, delim, tts);
      .                               self.stack.push(mem::replace(&mut self.frame, frame));
      .                           }
      .                       }
      .                   }
304,024 ( 0.01%)      }
      .           
  5,240 ( 0.00%)      fn next_desugared(&mut self) -> (Token, Spacing) {
  1,572 ( 0.00%)          let (data, attr_style, sp) = match self.next() {
      .                       (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
      .                           (data, attr_style, span)
      .                       }
  2,620 ( 0.00%)              tok => return tok,
      .                   };
      .           
      .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
      .                   // required to wrap the text.
      .                   let mut num_of_hashes = 0;
      .                   let mut count = 0;
      .                   for ch in data.as_str().chars() {
      .                       count = match ch {
-- line 298 ----------------------------------------
-- line 332 ----------------------------------------
      .                                   .iter()
      .                                   .cloned()
      .                                   .collect::<TokenStream>()
      .                           },
      .                       ),
      .                   ));
      .           
      .                   self.next()
  4,716 ( 0.00%)      }
      .           }
      .           
 20,250 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
      .           enum TokenType {
 16,200 ( 0.00%)      Token(TokenKind),
      .               Keyword(Symbol),
      .               Operator,
      .               Lifetime,
      .               Ident,
      .               Path,
      .               Type,
      .               Const,
      .           }
-- line 353 ----------------------------------------
-- line 378 ----------------------------------------
      .               /// The separator token.
      .               sep: Option<TokenKind>,
      .               /// `true` if a trailing separator is allowed.
      .               trailing_sep_allowed: bool,
      .           }
      .           
      .           impl SeqSep {
      .               fn trailing_allowed(t: TokenKind) -> SeqSep {
     45 ( 0.00%)          SeqSep { sep: Some(t), trailing_sep_allowed: true }
      .               }
      .           
      .               fn none() -> SeqSep {
      .                   SeqSep { sep: None, trailing_sep_allowed: false }
      .               }
      .           }
      .           
      .           pub enum FollowedByType {
      .               Yes,
      .               No,
      .           }
      .           
      .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
  1,144 ( 0.00%)      Some(match token.kind {
  2,288 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
  2,288 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
  2,288 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
      .                   token::DocComment(..) => "doc comment",
      .                   _ => return None,
      .               })
      .           }
      .           
  4,004 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
  1,144 ( 0.00%)      let token_str = pprust::token_to_string(token);
      .               match token_descr_opt(token) {
      .                   Some(prefix) => format!("{} `{}`", prefix, token_str),
  4,004 ( 0.00%)          _ => format!("`{}`", token_str),
      .               }
  2,860 ( 0.00%)  }
      .           
      .           impl<'a> Parser<'a> {
  5,544 ( 0.00%)      pub fn new(
      .                   sess: &'a ParseSess,
      .                   tokens: TokenStream,
      .                   desugar_doc_comments: bool,
      .                   subparser_name: Option<&'static str>,
      .               ) -> Self {
    396 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
    792 ( 0.00%)          start_frame.open_delim = true;
      .                   start_frame.close_delim = true;
      .           
 12,276 ( 0.00%)          let mut parser = Parser {
      .                       sess,
    396 ( 0.00%)              token: Token::dummy(),
      .                       token_spacing: Spacing::Alone,
    396 ( 0.00%)              prev_token: Token::dummy(),
      .                       capture_cfg: false,
      .                       restrictions: Restrictions::empty(),
      .                       expected_tokens: Vec::new(),
      .                       token_cursor: TokenCursor {
  2,376 ( 0.00%)                  frame: start_frame,
      .                           stack: Vec::new(),
      .                           num_next_calls: 0,
      .                           desugar_doc_comments,
      .                           break_last_token: false,
      .                       },
      .                       desugar_doc_comments,
      .                       unmatched_angle_bracket_count: 0,
      .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
      .                           capturing: Capturing::No,
      .                           replace_ranges: Vec::new(),
      .                           inner_attr_ranges: Default::default(),
      .                       },
      .                       current_closure: None,
      .                   };
      .           
      .                   // Make parser point to the first token.
    792 ( 0.00%)          parser.bump();
      .           
      .                   parser
  3,564 ( 0.00%)      }
      .           
      .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
      .                   loop {
217,596 ( 0.01%)              let (mut next, spacing) = if self.desugar_doc_comments {
  2,096 ( 0.00%)                  self.token_cursor.next_desugared()
      .                       } else {
107,226 ( 0.00%)                  self.token_cursor.next()
      .                       };
145,064 ( 0.01%)              self.token_cursor.num_next_calls += 1;
      .                       // We've retrieved an token from the underlying
      .                       // cursor, so we no longer need to worry about
      .                       // an unglued token. See `break_and_eat` for more details
 36,266 ( 0.00%)              self.token_cursor.break_last_token = false;
145,064 ( 0.01%)              if next.span.is_dummy() {
      .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
  1,700 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
      .                       }
120,516 ( 0.00%)              if matches!(
 72,532 ( 0.00%)                  next.kind,
      .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
      .                       ) {
      .                           continue;
      .                       }
145,064 ( 0.01%)              return (next, spacing);
      .                   }
      .               }
      .           
      .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
      .                   match self.expect_one_of(&[], &[]) {
      .                       Err(e) => Err(e),
      .                       // We can get `Ok(true)` from `recover_closing_delimiter`
      .                       // which is called in `expected_one_of_not_found`.
      .                       Ok(_) => FatalError.raise(),
      .                   }
      .               }
      .           
      .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
 43,605 ( 0.00%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
  4,845 ( 0.00%)          if self.expected_tokens.is_empty() {
  2,892 ( 0.00%)              if self.token == *t {
  2,410 ( 0.00%)                  self.bump();
      .                           Ok(false)
      .                       } else {
      .                           self.unexpected_try_recover(t)
      .                       }
      .                   } else {
 52,356 ( 0.00%)              self.expect_one_of(slice::from_ref(t), &[])
      .                   }
 72,675 ( 0.00%)      }
      .           
      .               /// Expect next token to be edible or inedible token.  If edible,
      .               /// then consume it; if inedible, then return without consuming
      .               /// anything.  Signal a fatal error if next token is unexpected.
 60,348 ( 0.00%)      pub fn expect_one_of(
      .                   &mut self,
      .                   edible: &[TokenKind],
      .                   inedible: &[TokenKind],
      .               ) -> PResult<'a, bool /* recovered */> {
 10,058 ( 0.00%)          if edible.contains(&self.token.kind) {
 13,485 ( 0.00%)              self.bump();
      .                       Ok(false)
      .                   } else if inedible.contains(&self.token.kind) {
      .                       // leave it in the input
      .                       Ok(false)
      .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
      .                       FatalError.raise();
      .                   } else {
      .                       self.expected_one_of_not_found(edible, inedible)
      .                   }
 75,435 ( 0.00%)      }
      .           
      .               // Public for rustfmt usage.
      .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
 34,897 ( 0.00%)          self.parse_ident_common(true)
      .               }
      .           
      .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
 26,691 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
      .                       TokenKind::DocComment(..) => {
      .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
      .                       }
      .                       _ => self.expected_ident_found(),
      .                   })
      .               }
      .           
 61,243 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
  8,749 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
 52,494 ( 0.00%)          if !is_raw && ident.is_reserved() {
      .                       let mut err = self.expected_ident_found();
      .                       if recover {
      .                           err.emit();
      .                       } else {
      .                           return Err(err);
      .                       }
      .                   }
 34,996 ( 0.00%)          self.bump();
      .                   Ok(ident)
 87,490 ( 0.00%)      }
      .           
      .               /// Checks if the next token is `tok`, and returns `true` if so.
      .               ///
      .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
      .               /// encountered.
784,063 ( 0.03%)      fn check(&mut self, tok: &TokenKind) -> bool {
342,393 ( 0.01%)          let is_present = self.token == *tok;
231,122 ( 0.01%)          if !is_present {
502,368 ( 0.02%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
      .                   }
      .                   is_present
784,063 ( 0.03%)      }
      .           
      .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
     32 ( 0.00%)      pub fn eat(&mut self, tok: &TokenKind) -> bool {
165,168 ( 0.01%)          let is_present = self.check(tok);
108,034 ( 0.00%)          if is_present {
 19,857 ( 0.00%)              self.bump()
      .                   }
      .                   is_present
     40 ( 0.00%)      }
      .           
      .               /// If the next token is the given keyword, returns `true` without eating it.
      .               /// An expectation is also added for diagnostics purposes.
 27,990 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
  6,020 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
183,433 ( 0.01%)          self.token.is_keyword(kw)
      .               }
      .           
      .               /// If the next token is the given keyword, eats it and returns `true`.
      .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
      .               // Public for rustfmt usage.
 49,000 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
 38,860 ( 0.00%)          if self.check_keyword(kw) {
  4,871 ( 0.00%)              self.bump();
      .                       true
      .                   } else {
      .                       false
      .                   }
 49,000 ( 0.00%)      }
      .           
      .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
  7,044 ( 0.00%)          if self.token.is_keyword(kw) {
  1,542 ( 0.00%)              self.bump();
      .                       true
      .                   } else {
      .                       false
      .                   }
      .               }
      .           
      .               /// If the given word is not a keyword, signals an error.
      .               /// If the next token is not the given word, signals an error.
      .               /// Otherwise, eats it.
    905 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
      .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
    724 ( 0.00%)      }
      .           
      .               /// Is the given keyword `kw` followed by a non-reserved identifier?
 27,864 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
 13,932 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
 31,347 ( 0.00%)      }
      .           
 47,196 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
 17,444 ( 0.00%)          if ok {
      .                       true
      .                   } else {
  8,844 ( 0.00%)              self.expected_tokens.push(typ);
      .                       false
      .                   }
 47,196 ( 0.00%)      }
      .           
      .               fn check_ident(&mut self) -> bool {
  8,267 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
      .               }
      .           
 16,684 ( 0.00%)      fn check_path(&mut self) -> bool {
 37,972 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
 20,855 ( 0.00%)      }
      .           
      .               fn check_type(&mut self) -> bool {
  4,698 ( 0.00%)          self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
      .               }
      .           
      .               fn check_const_arg(&mut self) -> bool {
  3,144 ( 0.00%)          self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
      .               }
      .           
  8,091 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
  4,495 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
      .                       && self.look_ahead(dist + 1, |t| match t.kind {
      .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
      .                           token::OpenDelim(DelimToken::Brace) => true,
      .                           _ => false,
      .                       })
  8,091 ( 0.00%)      }
      .           
      .               /// Checks to see if the next token is either `+` or `+=`.
      .               /// Otherwise returns `false`.
      .               fn check_plus(&mut self) -> bool {
  5,156 ( 0.00%)          self.check_or_expected(
  2,578 ( 0.00%)              self.token.is_like_plus(),
  2,578 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
      .                   )
      .               }
      .           
      .               /// Eats the expected token if it's present possibly breaking
      .               /// compound tokens like multi-character operators in process.
      .               /// Returns `true` if the token was eaten.
 67,296 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
 39,256 ( 0.00%)          if self.token.kind == expected {
  2,622 ( 0.00%)              self.bump();
      .                       return true;
      .                   }
 21,485 ( 0.00%)          match self.token.kind.break_two_token_op() {
     99 ( 0.00%)              Some((first, second)) if first == expected => {
     24 ( 0.00%)                  let first_span = self.sess.source_map().start_point(self.token.span);
     30 ( 0.00%)                  let second_span = self.token.span.with_lo(first_span.hi());
     54 ( 0.00%)                  self.token = Token::new(first, first_span);
      .                           // Keep track of this token - if we end token capturing now,
      .                           // we'll want to append this token to the captured stream.
      .                           //
      .                           // If we consume any additional tokens, then this token
      .                           // is not needed (we'll capture the entire 'glued' token),
      .                           // and `next_tok` will set this field to `None`
      6 ( 0.00%)                  self.token_cursor.break_last_token = true;
      .                           // Use the spacing of the glued token as the spacing
      .                           // of the unglued second token.
     84 ( 0.00%)                  self.bump_with((Token::new(second, second_span), self.token_spacing));
      .                           true
      .                       }
      .                       _ => {
 12,873 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
      .                           false
      .                       }
      .                   }
 67,655 ( 0.00%)      }
      .           
      .               /// Eats `+` possibly breaking tokens like `+=` in process.
      .               fn eat_plus(&mut self) -> bool {
  1,408 ( 0.00%)          self.break_and_eat(token::BinOp(token::Plus))
      .               }
      .           
      .               /// Eats `&` possibly breaking tokens like `&&` in process.
      .               /// Signals an error if `&` is not eaten.
      .               fn expect_and(&mut self) -> PResult<'a, ()> {
  1,134 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `|` possibly breaking tokens like `||` in process.
      .               /// Signals an error if `|` was not eaten.
      .               fn expect_or(&mut self) -> PResult<'a, ()> {
     90 ( 0.00%)          if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `<` possibly breaking tokens like `<<` in process.
  3,198 ( 0.00%)      fn eat_lt(&mut self) -> bool {
 14,352 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
  9,447 ( 0.00%)          if ate {
      .                       // See doc comment for `unmatched_angle_bracket_count`.
  2,084 ( 0.00%)              self.unmatched_angle_bracket_count += 1;
  2,223 ( 0.00%)              self.max_angle_bracket_count += 1;
      .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
      .                   }
      .                   ate
  3,198 ( 0.00%)      }
      .           
      .               /// Eats `<` possibly breaking tokens like `<<` in process.
      .               /// Signals an error if `<` was not eaten.
      .               fn expect_lt(&mut self) -> PResult<'a, ()> {
      .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `>` possibly breaking tokens like `>>` in process.
      .               /// Signals an error if `>` was not eaten.
      .               fn expect_gt(&mut self) -> PResult<'a, ()> {
  3,126 ( 0.00%)          if self.break_and_eat(token::Gt) {
      .                       // See doc comment for `unmatched_angle_bracket_count`.
  1,563 ( 0.00%)              if self.unmatched_angle_bracket_count > 0 {
  1,042 ( 0.00%)                  self.unmatched_angle_bracket_count -= 1;
      .                           debug!("expect_gt: (decrement) count={:?}", self.unmatched_angle_bracket_count);
      .                       }
      .                       Ok(())
      .                   } else {
      .                       self.unexpected()
      .                   }
      .               }
      .           
      .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
      .                   kets.iter().any(|k| match expect {
 17,007 ( 0.00%)              TokenExpectType::Expect => self.check(k),
    237 ( 0.00%)              TokenExpectType::NoExpect => self.token == **k,
      .                   })
      .               }
      .           
      .               fn parse_seq_to_before_tokens<T>(
      .                   &mut self,
      .                   kets: &[&TokenKind],
      .                   sep: SeqSep,
      .                   expect: TokenExpectType,
-- line 759 ----------------------------------------
-- line 761 ----------------------------------------
      .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
      .                   let mut first = true;
      .                   let mut recovered = false;
      .                   let mut trailing = false;
      .                   let mut v = vec![];
      .                   let unclosed_delims = !self.unclosed_delims.is_empty();
      .           
      .                   while !self.expect_any_with_type(kets, expect) {
 16,144 ( 0.00%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
      .                           break;
      .                       }
 10,220 ( 0.00%)              if let Some(ref t) = sep.sep {
 12,319 ( 0.00%)                  if first {
      .                               first = false;
      .                           } else {
 13,191 ( 0.00%)                      match self.expect(t) {
      .                                   Ok(false) => {
      .                                       self.current_closure.take();
      .                                   }
      .                                   Ok(true) => {
      .                                       self.current_closure.take();
      .                                       recovered = true;
      .                                       break;
      .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
      .                                               e.cancel();
      .                                               break;
      .                                           }
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
  5,914 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
      .                           trailing = true;
      .                           break;
      .                       }
      .           
  3,570 ( 0.00%)              let t = f(self)?;
  2,440 ( 0.00%)              v.push(t);
      .                   }
      .           
  7,196 ( 0.00%)          Ok((v, trailing, recovered))
      .               }
      .           
      .               fn recover_missing_braces_around_closure_body(
      .                   &mut self,
      .                   closure_spans: ClosureSpans,
      .                   mut expect_err: DiagnosticBuilder<'_>,
      .               ) -> PResult<'a, ()> {
      .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
      .               fn parse_seq_to_before_end<T>(
      .                   &mut self,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
  7,450 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
      .               }
      .           
      .               /// Parses a sequence, including the closing delimiter. The function
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
 10,940 ( 0.00%)      fn parse_seq_to_end<T>(
      .                   &mut self,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
  4,721 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
  2,415 ( 0.00%)          if !recovered {
      .                       self.eat(ket);
      .                   }
 11,907 ( 0.00%)          Ok((val, trailing))
  8,752 ( 0.00%)      }
      .           
      .               /// Parses a sequence, including the closing delimiter. The function
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
      .               fn parse_unspanned_seq<T>(
      .                   &mut self,
      .                   bra: &TokenKind,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
  3,773 ( 0.00%)          self.expect(bra)?;
  8,752 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
      .               }
      .           
      .               fn parse_delim_comma_seq<T>(
      .                   &mut self,
      .                   delim: DelimToken,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
      .                   self.parse_unspanned_seq(
  1,465 ( 0.00%)              &token::OpenDelim(delim),
  1,863 ( 0.00%)              &token::CloseDelim(delim),
      .                       SeqSep::trailing_allowed(token::Comma),
      .                       f,
      .                   )
      .               }
      .           
      .               fn parse_paren_comma_seq<T>(
      .                   &mut self,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
      .                   self.parse_delim_comma_seq(token::Paren, f)
      .               }
      .           
      .               /// Advance the parser by one token using provided token as the next one.
471,536 ( 0.02%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
      .                   // Bumping after EOF is a bad sign, usually an infinite loop.
217,632 ( 0.01%)          if self.prev_token.kind == TokenKind::Eof {
      .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
      .                       self.span_bug(self.token.span, msg);
      .                   }
      .           
      .                   // Update the current and previous tokens.
145,088 ( 0.01%)          self.prev_token = mem::replace(&mut self.token, next_token);
 36,272 ( 0.00%)          self.token_spacing = next_spacing;
      .           
      .                   // Diagnostics.
 36,272 ( 0.00%)          self.expected_tokens.clear();
      .               }
      .           
      .               /// Advance the parser by one token.
290,128 ( 0.01%)      pub fn bump(&mut self) {
145,064 ( 0.01%)          let next_token = self.next_tok(self.token.span);
217,596 ( 0.01%)          self.bump_with(next_token);
290,128 ( 0.01%)      }
      .           
      .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
      .               /// When `dist == 0` then the current token is looked at.
      .               pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
  2,980 ( 0.00%)          if dist == 0 {
  1,314 ( 0.00%)              return looker(&self.token);
      .                   }
      .           
 13,295 ( 0.00%)          let frame = &self.token_cursor.frame;
 14,412 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
      .                       let all_normal = (0..dist).all(|i| {
 38,553 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
 51,170 ( 0.00%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
      .                       });
      .                       if all_normal {
 63,354 ( 0.00%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
 23,111 ( 0.00%)                      Some(tree) => match tree {
 10,952 ( 0.00%)                          TokenTree::Token(token) => looker(token),
      .                                   TokenTree::Delimited(dspan, delim, _) => {
  4,589 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
      .                                   }
      .                               },
  8,687 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
      .                           };
      .                       }
      .                   }
      .           
      .                   let mut cursor = self.token_cursor.clone();
      .                   let mut i = 0;
  1,709 ( 0.00%)          let mut token = Token::dummy();
  2,128 ( 0.00%)          while i < dist {
 13,067 ( 0.00%)              token = cursor.next().0;
  5,707 ( 0.00%)              if matches!(
  3,474 ( 0.00%)                  token.kind,
      .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
      .                       ) {
      .                           continue;
      .                       }
  1,120 ( 0.00%)              i += 1;
      .                   }
     86 ( 0.00%)          return looker(&token);
      .               }
      .           
      .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
 10,755 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
  3,005 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
 10,755 ( 0.00%)      }
      .           
      .               /// Parses asyncness: `async` or nothing.
      .               fn parse_asyncness(&mut self) -> Async {
      .                   if self.eat_keyword(kw::Async) {
      .                       let span = self.prev_token.uninterpolated_span();
      .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
      .                   } else {
      .                       Async::No
      .                   }
      .               }
      .           
      .               /// Parses unsafety: `unsafe` or nothing.
    858 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
      .                   if self.eat_keyword(kw::Unsafe) {
      .                       Unsafe::Yes(self.prev_token.uninterpolated_span())
      .                   } else {
      .                       Unsafe::No
      .                   }
  3,432 ( 0.00%)      }
      .           
      .               /// Parses constness: `const` or nothing.
  8,960 ( 0.00%)      fn parse_constness(&mut self) -> Const {
      .                   // Avoid const blocks to be parsed as const items
  2,692 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
      .                       && self.eat_keyword(kw::Const)
      .                   {
    195 ( 0.00%)              Const::Yes(self.prev_token.uninterpolated_span())
      .                   } else {
      .                       Const::No
      .                   }
 15,680 ( 0.00%)      }
      .           
      .               /// Parses inline const expressions.
      .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
      .                   if pat {
      .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
      .                   } else {
      .                       self.sess.gated_spans.gate(sym::inline_const, span);
      .                   }
-- line 1104 ----------------------------------------
-- line 1108 ----------------------------------------
      .                       id: DUMMY_NODE_ID,
      .                       value: self.mk_expr(blk.span, ExprKind::Block(blk, None), AttrVec::new()),
      .                   };
      .                   let blk_span = anon_const.value.span;
      .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
      .               }
      .           
      .               /// Parses mutability (`mut` or nothing).
     16 ( 0.00%)      fn parse_mutability(&mut self) -> Mutability {
      .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
    386 ( 0.00%)      }
      .           
      .               /// Possibly parses mutability (`const` or `mut`).
      .               fn parse_const_or_mut(&mut self) -> Option<Mutability> {
      .                   if self.eat_keyword(kw::Mut) {
      .                       Some(Mutability::Mut)
      .                   } else if self.eat_keyword(kw::Const) {
      .                       Some(Mutability::Not)
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
      .               fn parse_field_name(&mut self) -> PResult<'a, Ident> {
     98 ( 0.00%)          if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) = self.token.kind
      .                   {
      .                       self.expect_no_suffix(self.token.span, "a tuple index", suffix);
      .                       self.bump();
      .                       Ok(Ident::new(symbol, self.prev_token.span))
      .                   } else {
    147 ( 0.00%)              self.parse_ident_common(true)
      .                   }
      .               }
      .           
      .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
    279 ( 0.00%)          self.parse_mac_args_common(true).map(P)
      .               }
      .           
      .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
  1,395 ( 0.00%)          self.parse_mac_args_common(false)
      .               }
      .           
  5,310 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
  4,720 ( 0.00%)          Ok(
  3,660 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
    543 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
    522 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
      .                       {
  1,676 ( 0.00%)                  match self.parse_token_tree() {
  2,095 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
      .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
      .                               {
    838 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
      .                               }
      .                               _ => unreachable!(),
      .                           }
    342 ( 0.00%)              } else if !delimited_only {
      .                           if self.eat(&token::Eq) {
      .                               let eq_span = self.prev_token.span;
      .           
      .                               // Collect tokens because they are used during lowering to HIR.
      .                               let expr = self.parse_expr_force_collect()?;
      .                               let span = expr.span;
      .           
      .                               let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
-- line 1172 ----------------------------------------
-- line 1173 ----------------------------------------
      .                               MacArgs::Eq(eq_span, Token::new(token_kind, span))
      .                           } else {
      .                               MacArgs::Empty
      .                           }
      .                       } else {
      .                           return self.unexpected();
      .                       },
      .                   )
  4,130 ( 0.00%)      }
      .           
      .               fn parse_or_use_outer_attributes(
      .                   &mut self,
      .                   already_parsed_attrs: Option<AttrWrapper>,
      .               ) -> PResult<'a, AttrWrapper> {
 16,214 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
      .                       Ok(attrs)
      .                   } else {
  9,300 ( 0.00%)              self.parse_outer_attributes()
      .                   }
      .               }
      .           
      .               /// Parses a single token tree from the input.
  3,704 ( 0.00%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
  1,429 ( 0.00%)          match self.token.kind {
      .                       token::OpenDelim(..) => {
      .                           let depth = self.token_cursor.stack.len();
      .           
      .                           // We keep advancing the token cursor until we hit
      .                           // the matching `CloseDelim` token.
 14,022 ( 0.00%)                  while !(depth == self.token_cursor.stack.len()
      .                               && matches!(self.token.kind, token::CloseDelim(_)))
      .                           {
      .                               // Advance one token at a time, so `TokenCursor::next()`
      .                               // can capture these tokens if necessary.
  8,416 ( 0.00%)                      self.bump();
      .                           }
      .                           // We are still inside the frame corresponding
      .                           // to the delimited stream we captured, so grab
      .                           // the tokens from this frame.
      .                           let frame = &self.token_cursor.frame;
    906 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
    906 ( 0.00%)                  let span = frame.span;
    453 ( 0.00%)                  let delim = frame.delim;
      .                           // Consume close delimiter
    906 ( 0.00%)                  self.bump();
  2,265 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
      .                       }
      .                       token::CloseDelim(_) | token::Eof => unreachable!(),
      .                       _ => {
     20 ( 0.00%)                  self.bump();
     50 ( 0.00%)                  TokenTree::Token(self.prev_token.clone())
      .                       }
      .                   }
  3,241 ( 0.00%)      }
      .           
      .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
      .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
      .                   let mut tts = Vec::new();
      .                   while self.token != token::Eof {
      .                       tts.push(self.parse_token_tree());
      .                   }
      .                   Ok(tts)
-- line 1234 ----------------------------------------
-- line 1244 ----------------------------------------
      .                   }
      .                   TokenStream::new(result)
      .               }
      .           
      .               /// Evaluates the closure with restrictions in place.
      .               ///
      .               /// Afters the closure is evaluated, restrictions are reset.
      .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
  5,476 ( 0.00%)          let old = self.restrictions;
  7,247 ( 0.00%)          self.restrictions = res;
      .                   let res = f(self);
  6,621 ( 0.00%)          self.restrictions = old;
      .                   res
      .               }
      .           
 14,200 ( 0.00%)      fn is_crate_vis(&self) -> bool {
  8,875 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
 15,975 ( 0.00%)      }
      .           
      .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
      .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
      .               /// If the following element can't be a tuple (i.e., it's a function definition), then
      .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
      .               /// so emit a proper diagnostic.
      .               // Public for rustfmt usage.
 13,180 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
  2,636 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
      .           
  1,318 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
  5,272 ( 0.00%)          if self.is_crate_vis() {
      .                       self.bump(); // `crate`
      .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
      .                       return Ok(Visibility {
      .                           span: self.prev_token.span,
      .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
      .                           tokens: None,
      .                       });
      .                   }
      .           
      .                   if !self.eat_keyword(kw::Pub) {
      .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
      .                       // keyword to grab a span from for inherited visibility; an empty span at the
      .                       // beginning of the current token would seem to be the "Schelling span".
  1,186 ( 0.00%)              return Ok(Visibility {
  3,558 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
      .                           kind: VisibilityKind::Inherited,
      .                           tokens: None,
      .                       });
      .                   }
    132 ( 0.00%)          let lo = self.prev_token.span;
      .           
    660 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
      .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
      .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
      .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
      .                       // by the following tokens.
     18 ( 0.00%)              if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
      .                       // account for `pub(crate::foo)`
      .                       {
      .                           // Parse `pub(crate)`.
      6 ( 0.00%)                  self.bump(); // `(`
      4 ( 0.00%)                  self.bump(); // `crate`
      6 ( 0.00%)                  self.expect(&token::CloseDelim(token::Paren))?; // `)`
      2 ( 0.00%)                  let vis = VisibilityKind::Crate(CrateSugar::PubCrate);
      .                           return Ok(Visibility {
      6 ( 0.00%)                      span: lo.to(self.prev_token.span),
      .                               kind: vis,
      .                               tokens: None,
      .                           });
      .                       } else if self.is_keyword_ahead(1, &[kw::In]) {
      .                           // Parse `pub(in path)`.
      .                           self.bump(); // `(`
      .                           self.bump(); // `in`
      .                           let path = self.parse_path(PathStyle::Mod)?; // `path`
-- line 1317 ----------------------------------------
-- line 1338 ----------------------------------------
      .                       } else if let FollowedByType::No = fbt {
      .                           // Provide this diagnostic if a type cannot follow;
      .                           // in particular, if this is not a tuple struct.
      .                           self.recover_incorrect_vis_restriction()?;
      .                           // Emit diagnostic, but continue with public visibility.
      .                       }
      .                   }
      .           
    390 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
 11,862 ( 0.00%)      }
      .           
      .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
      .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
      .                   self.bump(); // `(`
      .                   let path = self.parse_path(PathStyle::Mod)?;
      .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
      .           
      .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
      .                       )
      .                       .emit();
      .           
      .                   Ok(())
      .               }
      .           
      .               /// Parses `extern string_literal?`.
      .               fn parse_extern(&mut self) -> Extern {
    251 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
      .               }
      .           
      .               /// Parses a string literal as an ABI spec.
      .               fn parse_abi(&mut self) -> Option<StrLit> {
      .                   match self.parse_str_lit() {
      .                       Ok(str_lit) => Some(str_lit),
      .                       Err(Some(lit)) => match lit.kind {
      .                           ast::LitKind::Err(_) => None,
-- line 1386 ----------------------------------------
-- line 1395 ----------------------------------------
      .                                   .emit();
      .                               None
      .                           }
      .                       },
      .                       Err(None) => None,
      .                   }
      .               }
      .           
     90 ( 0.00%)      pub fn collect_tokens_no_attrs<R: AstLike>(
      .                   &mut self,
      .                   f: impl FnOnce(&mut Self) -> PResult<'a, R>,
      .               ) -> PResult<'a, R> {
      .                   // The only reason to call `collect_tokens_no_attrs` is if you want tokens, so use
      .                   // `ForceCollect::Yes`
      .                   self.collect_tokens_trailing_token(
      .                       AttrWrapper::empty(),
      .                       ForceCollect::Yes,
      9 ( 0.00%)              |this, _attrs| Ok((f(this)?, TrailingToken::None)),
      .                   )
     90 ( 0.00%)      }
      .           
      .               /// `::{` or `::*`
 58,344 ( 0.00%)      fn is_import_coupler(&mut self) -> bool {
 29,172 ( 0.00%)          self.check(&token::ModSep)
      .                       && self.look_ahead(1, |t| {
 13,905 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
      .                       })
 58,941 ( 0.00%)      }
      .           
      .               pub fn clear_expected_tokens(&mut self) {
      .                   self.expected_tokens.clear();
      .               }
      .           }
      .           
      .           crate fn make_unclosed_delims_error(
      .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
      .                   err.span_label(sp, "closing delimiter possibly meant for this");
      .               }
      .               if let Some(sp) = unmatched.unclosed_span {
      .                   err.span_label(sp, "unclosed delimiter");
      .               }
      .               Some(err)
      .           }
      .           
  5,480 ( 0.00%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
  2,740 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
      .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
  2,740 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
      .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
      .                       e.emit();
      .                   }
      .               }
  5,480 ( 0.00%)  }
      .           
      .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
      .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
      .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
      .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
      .           /// `AttrAnnotatedTokenTree::Delimited` tokens
      .           #[derive(Debug, Clone)]
      .           pub enum FlatToken {
-- line 1474 ----------------------------------------

231,503 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir                 

-- line 21 ----------------------------------------
        .           use rustc_target::spec::abi;
        .           use std::borrow::Cow;
        .           use std::cmp::Ordering;
        .           use std::marker::PhantomData;
        .           use std::ops::Range;
        .           use ty::util::IntTypeExt;
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        4 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct TypeAndMut<'tcx> {
    2,049 ( 0.00%)      pub ty: Ty<'tcx>,
   10,245 ( 0.00%)      pub mutbl: hir::Mutability,
        .           }
        .           
        .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
        .           #[derive(HashStable)]
        .           /// A "free" region `fr` can be interpreted as "some region
        .           /// at least as big as the scope `fr.scope`".
        .           pub struct FreeRegion {
   25,535 ( 0.00%)      pub scope: DefId,
   50,659 ( 0.00%)      pub bound_region: BoundRegionKind,
        .           }
        .           
  185,599 ( 0.01%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
       32 ( 0.00%)  #[derive(HashStable)]
        .           pub enum BoundRegionKind {
        .               /// An anonymous region parameter for a given fn (&T)
    5,318 ( 0.00%)      BrAnon(u32),
        .           
        .               /// Named region parameters for functions (a in &'a T)
        .               ///
        .               /// The `DefId` is needed to distinguish free regions in
        .               /// the event of shadowing.
      156 ( 0.00%)      BrNamed(DefId, Symbol),
        .           
        .               /// Anonymous region for the implicit env pointer parameter
        .               /// to a closure
        .               BrEnv,
        .           }
        .           
      606 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
        .           #[derive(HashStable)]
        .           pub struct BoundRegion {
   37,526 ( 0.00%)      pub var: BoundVar,
   28,190 ( 0.00%)      pub kind: BoundRegionKind,
        .           }
        .           
        .           impl BoundRegionKind {
        .               pub fn is_named(&self) -> bool {
        .                   match *self {
        .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
        .                       _ => false,
        .                   }
        .               }
        .           }
        .           
        .           /// Defines the kinds of types.
        .           ///
        .           /// N.B., if you change this, you'll probably want to change the corresponding
        .           /// AST structure in `rustc_ast/src/ast.rs` as well.
5,353,289 ( 0.22%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
   50,753 ( 0.00%)  #[derive(HashStable)]
        .           #[rustc_diagnostic_item = "TyKind"]
        .           pub enum TyKind<'tcx> {
        .               /// The primitive boolean type. Written as `bool`.
        .               Bool,
        .           
        .               /// The primitive character type; holds a Unicode scalar value
        .               /// (a non-surrogate code point). Written as `char`.
        .               Char,
-- line 90 ----------------------------------------
-- line 99 ----------------------------------------
        .               Float(ty::FloatTy),
        .           
        .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
        .               ///
        .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
        .               /// That is, even after substitution it is possible that there are type
        .               /// variables. This happens when the `Adt` corresponds to an ADT
        .               /// definition and not a concrete use of it.
  472,446 ( 0.02%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
        .           
        .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
        .               Foreign(DefId),
        .           
        .               /// The pointee of a string slice. Written as `str`.
        .               Str,
        .           
        .               /// An array with the given length. Written as `[T; n]`.
   22,398 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
        .           
        .               /// The pointee of an array slice. Written as `[T]`.
        .               Slice(Ty<'tcx>),
        .           
        .               /// A raw pointer. Written as `*mut T` or `*const T`
        .               RawPtr(TypeAndMut<'tcx>),
        .           
        .               /// A reference; a pointer with an associated lifetime. Written as
        .               /// `&'a mut T` or `&'a T`.
  590,463 ( 0.02%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
        .           
        .               /// The anonymous type of a function declaration/definition. Each
        .               /// function has a unique type, which is output (for a function
        .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
        .               ///
        .               /// For example the type of `bar` here:
        .               ///
        .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
        .               ///
        .               /// ```rust
        .               /// fn foo() -> i32 { 1 }
        .               /// let bar: fn() -> i32 = foo;
        .               /// ```
        .               FnPtr(PolyFnSig<'tcx>),
        .           
        .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
   22,620 ( 0.00%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
        .           
        .               /// The anonymous type of a closure. Used to represent the type of
        .               /// `|a| a`.
        .               Closure(DefId, SubstsRef<'tcx>),
        .           
        .               /// The anonymous type of a generator. Used to represent the type of
        .               /// `|a| yield a`.
        .               Generator(DefId, SubstsRef<'tcx>, hir::Movability),
-- line 159 ----------------------------------------
-- line 180 ----------------------------------------
        .               /// The substitutions are for the generics of the function in question.
        .               /// After typeck, the concrete type can be found in the `types` map.
        .               Opaque(DefId, SubstsRef<'tcx>),
        .           
        .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
        .               Param(ParamTy),
        .           
        .               /// Bound type variable, used only when preparing a trait query.
    2,277 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
        .           
        .               /// A placeholder type - universally quantified higher-ranked type.
        .               Placeholder(ty::PlaceholderType),
        .           
        .               /// A type variable used during type checking.
        .               Infer(InferTy),
        .           
        .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 330 ----------------------------------------
        .               pub closure_kind_ty: T,
        .               pub closure_sig_as_fn_ptr_ty: T,
        .               pub tupled_upvars_ty: T,
        .           }
        .           
        .           impl<'tcx> ClosureSubsts<'tcx> {
        .               /// Construct `ClosureSubsts` from `ClosureSubstsParts`, containing `Substs`
        .               /// for the closure parent, alongside additional closure-specific components.
        5 ( 0.00%)      pub fn new(
        .                   tcx: TyCtxt<'tcx>,
        .                   parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,
        .               ) -> ClosureSubsts<'tcx> {
        .                   ClosureSubsts {
        .                       substs: tcx.mk_substs(
       10 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
       20 ( 0.00%)                      [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]
        .                                   .iter()
        .                                   .map(|&ty| ty.into()),
        .                           ),
        .                       ),
        .                   }
       10 ( 0.00%)      }
        .           
        .               /// Divides the closure substs into their respective components.
        .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
      188 ( 0.00%)      fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
        .                   match self.substs[..] {
    1,232 ( 0.00%)              [
      340 ( 0.00%)                  ref parent_substs @ ..,
      370 ( 0.00%)                  closure_kind_ty,
      150 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
      284 ( 0.00%)                  tupled_upvars_ty,
      752 ( 0.00%)              ] => ClosureSubstsParts {
        .                           parent_substs,
        .                           closure_kind_ty,
        .                           closure_sig_as_fn_ptr_ty,
        .                           tupled_upvars_ty,
        .                       },
        .                       _ => bug!("closure substs missing synthetics"),
        .                   }
      564 ( 0.00%)      }
        .           
        .               /// Returns `true` only if enough of the synthetic types are known to
        .               /// allow using all of the methods on `ClosureSubsts` without panicking.
        .               ///
        .               /// Used primarily by `ty::print::pretty` to be able to handle closure
        .               /// types that haven't had their synthetic types substituted in.
        .               pub fn is_valid(self) -> bool {
        .                   self.substs.len() >= 3
-- line 378 ----------------------------------------
-- line 383 ----------------------------------------
        .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
        .                   self.split().parent_substs
        .               }
        .           
        .               /// Returns an iterator over the list of types of captured paths by the closure.
        .               /// In case there was a type error in figuring out the types of the captured path, an
        .               /// empty iterator is returned.
        .               #[inline]
      120 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
      184 ( 0.00%)          match self.tupled_upvars_ty().kind() {
        .                       TyKind::Error(_) => None,
       80 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
        .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
        .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
        .                   }
        .                   .into_iter()
        .                   .flatten()
       80 ( 0.00%)      }
        .           
        .               /// Returns the tuple type representing the upvars for this closure.
        .               #[inline]
        .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
      874 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
        .               }
        .           
        .               /// Returns the closure kind for this closure; may return a type
        .               /// variable during inference. To get the closure kind during
        .               /// inference, use `infcx.closure_kind(substs)`.
       73 ( 0.00%)      pub fn kind_ty(self) -> Ty<'tcx> {
        .                   self.split().closure_kind_ty.expect_ty()
      146 ( 0.00%)      }
        .           
        .               /// Returns the `fn` pointer type representing the closure signature for this
        .               /// closure.
        .               // FIXME(eddyb) this should be unnecessary, as the shallowly resolved
        .               // type is known at the time of the creation of `ClosureSubsts`,
        .               // see `rustc_typeck::check::closure`.
        .               pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {
        .                   self.split().closure_sig_as_fn_ptr_ty.expect_ty()
        .               }
        .           
        .               /// Returns the closure kind for this closure; only usable outside
        .               /// of an inference context, because in that context we know that
        .               /// there are no type variables.
        .               ///
        .               /// If you have an inference context, use `infcx.closure_kind()`.
        2 ( 0.00%)      pub fn kind(self) -> ty::ClosureKind {
       13 ( 0.00%)          self.kind_ty().to_opt_closure_kind().unwrap()
        4 ( 0.00%)      }
        .           
        .               /// Extracts the signature from the closure.
       74 ( 0.00%)      pub fn sig(self) -> ty::PolyFnSig<'tcx> {
        .                   let ty = self.sig_as_fn_ptr_ty();
      148 ( 0.00%)          match ty.kind() {
      296 ( 0.00%)              ty::FnPtr(sig) => *sig,
        .                       _ => bug!("closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}", ty.kind()),
        .                   }
      222 ( 0.00%)      }
        .           }
        .           
        .           /// Similar to `ClosureSubsts`; see the above documentation for more.
        .           #[derive(Copy, Clone, Debug, TypeFoldable)]
        .           pub struct GeneratorSubsts<'tcx> {
        .               pub substs: SubstsRef<'tcx>,
        .           }
        .           
-- line 448 ----------------------------------------
-- line 676 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> UpvarSubsts<'tcx> {
        .               /// Returns an iterator over the list of types of captured paths by the closure/generator.
        .               /// In case there was a type error in figuring out the types of the captured path, an
        .               /// empty iterator is returned.
        .               #[inline]
        .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       14 ( 0.00%)          let tupled_tys = match self {
       19 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
        .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
        .                   };
        .           
       31 ( 0.00%)          match tupled_tys.kind() {
        .                       TyKind::Error(_) => None,
       26 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
        .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
        .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
        .                   }
        .                   .into_iter()
        .                   .flatten()
        .               }
        .           
        .               #[inline]
        .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
       24 ( 0.00%)          match self {
       27 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
        .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
        .                   }
        .               }
        .           }
        .           
        .           /// An inline const is modeled like
        .           ///
        .           ///     const InlineConst<'l0...'li, T0...Tj, R>: R;
-- line 710 ----------------------------------------
-- line 760 ----------------------------------------
        .               }
        .           
        .               /// Returns the type of this inline const.
        .               pub fn ty(self) -> Ty<'tcx> {
        .                   self.split().ty.expect_ty()
        .               }
        .           }
        .           
   16,684 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
   18,442 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub enum ExistentialPredicate<'tcx> {
        .               /// E.g., `Iterator`.
        .               Trait(ExistentialTraitRef<'tcx>),
        .               /// E.g., `Iterator::Item = T`.
        .               Projection(ExistentialProjection<'tcx>),
        .               /// E.g., `Send`.
       30 ( 0.00%)      AutoTrait(DefId),
        .           }
        .           
        .           impl<'tcx> ExistentialPredicate<'tcx> {
        .               /// Compares via an ordering that will not change if modules are reordered or other changes are
        .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
      100 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
        .                   use self::ExistentialPredicate::*;
      116 ( 0.00%)          match (*self, *other) {
        .                       (Trait(_), Trait(_)) => Ordering::Equal,
        .                       (Projection(ref a), Projection(ref b)) => {
        .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
        .                       }
        .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
        .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
        .                       }
        .                       (Trait(_), _) => Ordering::Less,
        .                       (Projection(_), Trait(_)) => Ordering::Greater,
        .                       (Projection(_), _) => Ordering::Less,
        .                       (AutoTrait(_), _) => Ordering::Greater,
        .                   }
      120 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
    2,214 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
        .                   use crate::ty::ToPredicate;
    1,230 ( 0.00%)          match self.skip_binder() {
        .                       ExistentialPredicate::Trait(tr) => {
        .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
        .                       }
        .                       ExistentialPredicate::Projection(p) => {
        .                           self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
        .                       }
        .                       ExistentialPredicate::AutoTrait(did) => {
        .                           let trait_ref = self.rebind(ty::TraitRef {
        .                               def_id: did,
        .                               substs: tcx.mk_substs_trait(self_ty, &[]),
        .                           });
        .                           trait_ref.without_const().to_predicate(tcx)
        .                       }
        .                   }
    1,968 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
        .               /// Returns the "principal `DefId`" of this set of existential predicates.
        .               ///
        .               /// A Rust trait object type consists (in addition to a lifetime bound)
        .               /// of a set of trait bounds, which are separated into any number
        .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 839 ----------------------------------------
        .               /// are the set `{Sync}`.
        .               ///
        .               /// It is also possible to have a "trivial" trait object that
        .               /// consists only of auto traits, with no principal - for example,
        .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
        .               /// is `{Send, Sync}`, while there is no principal. These trait objects
        .               /// have a "trivial" vtable consisting of just the size, alignment,
        .               /// and destructor.
       51 ( 0.00%)      pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
      948 ( 0.00%)          self[0]
      795 ( 0.00%)              .map_bound(|this| match this {
        .                           ExistentialPredicate::Trait(tr) => Some(tr),
        .                           _ => None,
      204 ( 0.00%)              })
        .                       .transpose()
      153 ( 0.00%)      }
        .           
      246 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
        .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
      492 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn projection_bounds<'a>(
        .                   &'a self,
        .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
        .                   self.iter().filter_map(|predicate| {
        .                       predicate
       28 ( 0.00%)                  .map_bound(|pred| match pred {
        .                               ExistentialPredicate::Projection(projection) => Some(projection),
        .                               _ => None,
        .                           })
        .                           .transpose()
        .                   })
        .               }
        .           
        .               #[inline]
-- line 874 ----------------------------------------
-- line 886 ----------------------------------------
        .           ///     T: Foo<U>
        .           ///
        .           /// This would be represented by a trait-reference where the `DefId` is the
        .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
        .           /// and `U` as parameter 1.
        .           ///
        .           /// Trait references also appear in object types like `Foo<U>`, but in
        .           /// that case the `Self` parameter is absent from the substitutions.
   29,679 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
2,308,753 ( 0.09%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct TraitRef<'tcx> {
      949 ( 0.00%)      pub def_id: DefId,
1,237,492 ( 0.05%)      pub substs: SubstsRef<'tcx>,
        .           }
        .           
        .           impl<'tcx> TraitRef<'tcx> {
    3,515 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
        .                   TraitRef { def_id, substs }
   14,060 ( 0.00%)      }
        .           
        .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
        .               /// are the parameters defined on trait.
      477 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
      212 ( 0.00%)          ty::Binder::dummy(TraitRef {
        .                       def_id,
      318 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
        .                   })
      424 ( 0.00%)      }
        .           
        .               #[inline]
        3 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
        .                   self.substs.type_at(0)
        2 ( 0.00%)      }
        .           
    2,296 ( 0.00%)      pub fn from_method(
        .                   tcx: TyCtxt<'tcx>,
        .                   trait_id: DefId,
        .                   substs: SubstsRef<'tcx>,
        .               ) -> ty::TraitRef<'tcx> {
        .                   let defs = tcx.generics_of(trait_id);
        .           
      287 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
    3,157 ( 0.00%)      }
        .           }
        .           
        .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
        .           
        .           impl<'tcx> PolyTraitRef<'tcx> {
        .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
        .                   self.map_bound_ref(|tr| tr.self_ty())
        .               }
        .           
        .               pub fn def_id(&self) -> DefId {
   13,944 ( 0.00%)          self.skip_binder().def_id
    4,648 ( 0.00%)      }
        .           
    2,031 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
    4,062 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
        .                       trait_ref,
        .                       constness: ty::BoundConstness::NotConst,
        .                       polarity: ty::ImplPolarity::Positive,
        .                   })
    2,031 ( 0.00%)      }
        .           }
        .           
        .           /// An existential reference to a trait, where `Self` is erased.
        .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
        .           ///
        .           ///     exists T. T: Trait<'a, 'b, X, Y>
        .           ///
        .           /// The substitutions don't include the erased `Self`, only trait
        .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
       80 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    9,311 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct ExistentialTraitRef<'tcx> {
    1,148 ( 0.00%)      pub def_id: DefId,
   10,344 ( 0.00%)      pub substs: SubstsRef<'tcx>,
        .           }
        .           
        .           impl<'tcx> ExistentialTraitRef<'tcx> {
       24 ( 0.00%)      pub fn erase_self_ty(
        .                   tcx: TyCtxt<'tcx>,
        .                   trait_ref: ty::TraitRef<'tcx>,
        .               ) -> ty::ExistentialTraitRef<'tcx> {
        .                   // Assert there is a Self.
        .                   trait_ref.substs.type_at(0);
        .           
        .                   ty::ExistentialTraitRef {
        .                       def_id: trait_ref.def_id,
        .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
        .                   }
       24 ( 0.00%)      }
        .           
        .               /// Object types don't have a self type specified. Therefore, when
        .               /// we convert the principal trait-ref into a normal trait-ref,
        .               /// you must give *some* self type. A common choice is `mk_err()`
        .               /// or some placeholder type.
        .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
        .                   // otherwise the escaping vars would be captured by the binder
        .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
-- line 985 ----------------------------------------
-- line 994 ----------------------------------------
        .               pub fn def_id(&self) -> DefId {
        .                   self.skip_binder().def_id
        .               }
        .           
        .               /// Object types don't have a self type specified. Therefore, when
        .               /// we convert the principal trait-ref into a normal trait-ref,
        .               /// you must give *some* self type. A common choice is `mk_err()`
        .               /// or some placeholder type.
       90 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
      106 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
      120 ( 0.00%)      }
        .           }
        .           
   26,507 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
       85 ( 0.00%)  #[derive(HashStable)]
        .           pub enum BoundVariableKind {
        .               Ty(BoundTyKind),
        .               Region(BoundRegionKind),
        .               Const,
        .           }
        .           
        .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
        .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
        .           /// (which would be represented by the type `PolyTraitRef ==
        .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
        .           /// erase, or otherwise "discharge" these bound vars, we change the
        .           /// type from `Binder<'tcx, T>` to just `T` (see
        .           /// e.g., `liberate_late_bound_regions`).
        .           ///
        .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
   23,338 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
  290,265 ( 0.01%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
        .           
        .           impl<'tcx, T> Binder<'tcx, T>
        .           where
        .               T: TypeFoldable<'tcx>,
        .           {
        .               /// Wraps `value` in a binder, asserting that `value` does not
        .               /// contain any bound vars that would be bound by the
        .               /// binder. This is commonly used to 'inject' a value T into a
        .               /// different binding level.
   18,180 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
   82,649 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
  189,668 ( 0.01%)          Binder(value, ty::List::empty())
   18,048 ( 0.00%)      }
        .           
        .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(vars);
        .                       value.visit_with(&mut validator);
        .                   }
  102,117 ( 0.00%)          Binder(value, vars)
        .               }
        .           }
        .           
        .           impl<'tcx, T> Binder<'tcx, T> {
        .               /// Skips the binder and returns the "bound" value. This is a
        .               /// risky thing to do because it's easy to get confused about
        .               /// De Bruijn indices and the like. It is usually better to
        .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
        .               /// accounting.
        .               ///
        .               /// Some examples where `skip_binder` is reasonable:
        .               ///
        .               /// - extracting the `DefId` from a PolyTraitRef;
        .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
        .               ///   a type parameter `X`, since the type `X` does not reference any regions
        .               pub fn skip_binder(self) -> T {
1,228,837 ( 0.05%)          self.0
        .               }
        .           
        .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
   28,013 ( 0.00%)          self.1
        .               }
        .           
        .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
   10,309 ( 0.00%)          Binder(&self.0, self.1)
        .               }
        .           
        .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(&T) -> U,
        .               {
        .                   let value = f(&self.0);
        .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
        .           
        .               pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(&T) -> U,
        .               {
        .                   self.as_ref().map_bound(f)
        .               }
        .           
       40 ( 0.00%)      pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(T) -> U,
        .               {
   38,718 ( 0.00%)          let value = f(self.0);
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.1);
        .                       value.visit_with(&mut validator);
        .                   }
  237,320 ( 0.01%)          Binder(value, self.1)
       40 ( 0.00%)      }
        .           
        .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
        .               where
        .                   F: FnOnce(T) -> Result<U, E>,
        .               {
        .                   let value = f(self.0)?;
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.1);
        .                       value.visit_with(&mut validator);
        .                   }
   33,386 ( 0.00%)          Ok(Binder(value, self.1))
        .               }
        .           
        .               /// Wraps a `value` in a binder, using the same bound variables as the
        .               /// current `Binder`. This should not be used if the new value *changes*
        .               /// the bound variables. Note: the (old or new) value itself does not
        .               /// necessarily need to *name* all the bound variables.
        .               ///
        .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
        .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
        .               where
        .                   U: TypeFoldable<'tcx>,
        .               {
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
        .                       value.visit_with(&mut validator);
        .                   }
   93,990 ( 0.00%)          Binder(value, self.1)
        .               }
        .           
        .               /// Unwraps and returns the value within, but only if it contains
        .               /// no bound vars at all. (In other words, if this binder --
        .               /// and indeed any enclosing binder -- doesn't bind anything at
        .               /// all.) Otherwise, returns `None`.
        .               ///
        .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
        .               /// binder, but permits late-bound vars bound by enclosing
        .               /// binders, but that would require adjusting the debruijn
        .               /// indices, and given the shallow binding structure we often use,
        .               /// would not be that useful.)
        .               pub fn no_bound_vars(self) -> Option<T>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  262,265 ( 0.01%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
       15 ( 0.00%)      }
        .           
        .               /// Splits the contents into two things that share the same binder
        .               /// level as the original, returning two distinct binders.
        .               ///
        .               /// `f` should consider bound regions at depth 1 to be free, and
        .               /// anything it produces with bound regions at depth 1 will be
        .               /// bound in the resulting return values.
        .               pub fn split<U, V, F>(self, f: F) -> (Binder<'tcx, U>, Binder<'tcx, V>)
-- line 1160 ----------------------------------------
-- line 1170 ----------------------------------------
        .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
        .                   let bound_vars = self.1;
        .                   self.0.map(|v| Binder(v, bound_vars))
        .               }
        .           }
        .           
        .           /// Represents the projection of an associated type. In explicit UFCS
        .           /// form this would be written `<T as Trait<..>>::N`.
      483 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
  283,098 ( 0.01%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct ProjectionTy<'tcx> {
        .               /// The parameters of the associated item.
   17,545 ( 0.00%)      pub substs: SubstsRef<'tcx>,
        .           
        .               /// The `DefId` of the `TraitItem` for the associated type `N`.
        .               ///
        .               /// Note that this is not the `DefId` of the `TraitRef` containing this
        .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
   97,654 ( 0.00%)      pub item_def_id: DefId,
        .           }
        .           
        .           impl<'tcx> ProjectionTy<'tcx> {
   12,488 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
    3,568 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
   14,272 ( 0.00%)      }
        .           
        .               /// Extracts the underlying trait reference and own substs from this projection.
        .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
        .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
      595 ( 0.00%)      pub fn trait_ref_and_own_substs(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
      255 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
        .                   let trait_generics = tcx.generics_of(def_id);
      425 ( 0.00%)          (
        .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
        .                       &self.substs[trait_generics.count()..],
        .                   )
      765 ( 0.00%)      }
        .           
        .               /// Extracts the underlying trait reference from this projection.
        .               /// For example, if this is a projection of `<T as Iterator>::Item`,
        .               /// then this function would return a `T: Iterator` trait reference.
        .               ///
        .               /// WARNING: This will drop the substs for generic associated types
        .               /// consider calling [Self::trait_ref_and_own_substs] to get those
        .               /// as well.
   16,020 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
    1,780 ( 0.00%)          let def_id = self.trait_def_id(tcx);
    1,780 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
   19,580 ( 0.00%)      }
        .           
    3,632 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
   10,896 ( 0.00%)          self.substs.type_at(0)
    7,264 ( 0.00%)      }
        .           }
        .           
        .           #[derive(Copy, Clone, Debug, TypeFoldable)]
        .           pub struct GenSig<'tcx> {
        .               pub resume_ty: Ty<'tcx>,
        .               pub yield_ty: Ty<'tcx>,
        .               pub return_ty: Ty<'tcx>,
        .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
        .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
        .           
        .           /// Signature of a function type, which we have arbitrarily
        .           /// decided to use to refer to the input/output types.
        .           ///
        .           /// - `inputs`: is the list of arguments and their modes.
        .           /// - `output`: is the return type.
        .           /// - `c_variadic`: indicates whether this is a C-variadic function.
   35,904 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
   20,563 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct FnSig<'tcx> {
    2,009 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
   20,777 ( 0.00%)      pub c_variadic: bool,
    4,259 ( 0.00%)      pub unsafety: hir::Unsafety,
   21,053 ( 0.00%)      pub abi: abi::Abi,
        .           }
        .           
        .           impl<'tcx> FnSig<'tcx> {
   15,612 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
   69,528 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
   31,224 ( 0.00%)      }
        .           
    9,740 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
   75,406 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
   19,480 ( 0.00%)      }
        .           
        .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
        .               // method.
        .               fn fake() -> FnSig<'tcx> {
        .                   FnSig {
        .                       inputs_and_output: List::empty(),
        .                       c_variadic: false,
        .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
        .               }
        .           }
        .           
        .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
        .           
        .           impl<'tcx> PolyFnSig<'tcx> {
        .               #[inline]
        .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
    3,304 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
        .               }
        .               #[inline]
        .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
    6,375 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
        .               }
        .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
        .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
      316 ( 0.00%)      }
        .               #[inline]
        .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
    4,094 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
        .               }
        .               pub fn c_variadic(&self) -> bool {
      630 ( 0.00%)          self.skip_binder().c_variadic
      315 ( 0.00%)      }
        .               pub fn unsafety(&self) -> hir::Unsafety {
    2,626 ( 0.00%)          self.skip_binder().unsafety
    1,313 ( 0.00%)      }
        .               pub fn abi(&self) -> abi::Abi {
   19,004 ( 0.00%)          self.skip_binder().abi
    4,751 ( 0.00%)      }
        .           }
        .           
        .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
        .           
       36 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
      390 ( 0.00%)  #[derive(HashStable)]
        .           pub struct ParamTy {
   10,614 ( 0.00%)      pub index: u32,
        .               pub name: Symbol,
        .           }
        .           
        .           impl<'tcx> ParamTy {
      432 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
        .                   ParamTy { index, name }
      216 ( 0.00%)      }
        .           
        .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
      284 ( 0.00%)          ParamTy::new(def.index, def.name)
      142 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
        .                   tcx.mk_ty_param(self.index, self.name)
        .               }
        .           }
        .           
        .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
        .           #[derive(HashStable)]
        .           pub struct ParamConst {
      132 ( 0.00%)      pub index: u32,
      132 ( 0.00%)      pub name: Symbol,
        .           }
        .           
        .           impl ParamConst {
        .               pub fn new(index: u32, name: Symbol) -> ParamConst {
        .                   ParamConst { index, name }
        .               }
        .           
        .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
        .           /// the inference variable is supposed to satisfy the relation
        .           /// *for every value of the placeholder region*. To ensure that doesn't
        .           /// happen, you can use `leak_check`. This is more clearly explained
        .           /// by the [rustc dev guide].
        .           ///
        .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
        .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
        .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
1,941,969 ( 0.08%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
      882 ( 0.00%)  pub enum RegionKind {
        .               /// Region bound in a type or fn declaration which will be
        .               /// substituted 'early' -- that is, at the same time when type
        .               /// parameters are substituted.
        .               ReEarlyBound(EarlyBoundRegion),
        .           
        .               /// Region bound in a function scope, which will be substituted when the
        .               /// function is called.
   56,390 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
        .           
        .               /// When checking a function body, the types of all arguments and so forth
        .               /// that refer to bound region parameters are modified to refer to free
        .               /// region parameters.
        .               ReFree(FreeRegion),
        .           
        .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
        .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
        .               /// regions visible from `U`, but not less than regions not visible
        .               /// from `U`.
        .               ReEmpty(ty::UniverseIndex),
        .           
        .               /// Erased region, used by trait selection, in MIR and during codegen.
        .               ReErased,
        .           }
        .           
   21,492 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
        .           pub struct EarlyBoundRegion {
      183 ( 0.00%)      pub def_id: DefId,
   13,794 ( 0.00%)      pub index: u32,
    3,401 ( 0.00%)      pub name: Symbol,
        .           }
        .           
        .           /// A **`const`** **v**ariable **ID**.
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
        .           pub struct ConstVid<'tcx> {
    1,444 ( 0.00%)      pub index: u32,
      695 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
        .           }
        .           
        .           rustc_index::newtype_index! {
        .               /// A **region** (lifetime) **v**ariable **ID**.
        .               pub struct RegionVid {
        .                   DEBUG_FORMAT = custom,
        .               }
        .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
        .           rustc_index::newtype_index! {
        .               pub struct BoundVar { .. }
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub struct BoundTy {
        .               pub var: BoundVar,
    2,277 ( 0.00%)      pub kind: BoundTyKind,
        .           }
        .           
   38,769 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub enum BoundTyKind {
        .               Anon,
        .               Param(Symbol),
        .           }
        .           
        .           impl From<BoundVar> for BoundTy {
        .               fn from(var: BoundVar) -> Self {
-- line 1532 ----------------------------------------
-- line 1616 ----------------------------------------
        .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
        .                       RegionKind::ReEmpty(_) => false,
        .                       RegionKind::ReErased => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_late_bound(&self) -> bool {
    2,157 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_placeholder(&self) -> bool {
        .                   matches!(*self, ty::RePlaceholder(..))
        .               }
        .           
        .               #[inline]
        .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
   57,300 ( 0.00%)          match *self {
        .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
        .                       _ => false,
        .                   }
        .               }
        .           
        .               pub fn type_flags(&self) -> TypeFlags {
        .                   let mut flags = TypeFlags::empty();
        .           
   76,756 ( 0.00%)          match *self {
        .                       ty::ReVar(..) => {
        .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
        .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
        .                           flags = flags | TypeFlags::HAS_RE_INFER;
        .                       }
        .                       ty::RePlaceholder(..) => {
        .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
        .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
        .                       ty::ReErased => {
        .                           flags = flags | TypeFlags::HAS_RE_ERASED;
        .                       }
        .                   }
        .           
        .                   debug!("type_flags({:?}) = {:?}", self, flags);
        .           
        .                   flags
    3,746 ( 0.00%)      }
        .           
        .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
        .               /// For example, consider the regions in this snippet of code:
        .               ///
        .               /// ```
        .               /// impl<'a> Foo {
        .               ///      ^^ -- early bound, declared on an impl
        .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
        .           
        .               #[inline(always)]
        .               pub fn flags(&self) -> TypeFlags {
        .                   self.flags
        .               }
        .           
        .               #[inline]
        .               pub fn is_unit(&self) -> bool {
    2,310 ( 0.00%)          match self.kind() {
      444 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_never(&self) -> bool {
   32,425 ( 0.00%)          matches!(self.kind(), Never)
        .               }
        .           
        .               #[inline]
        .               pub fn is_primitive(&self) -> bool {
        .                   self.kind().is_primitive()
        .               }
        .           
        .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_ref(&self) -> bool {
        .                   matches!(self.kind(), Ref(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_ty_var(&self) -> bool {
   42,979 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
   38,462 ( 0.00%)          match self.kind() {
    3,911 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_ty_infer(&self) -> bool {
       15 ( 0.00%)          matches!(self.kind(), Infer(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_phantom_data(&self) -> bool {
        6 ( 0.00%)          if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
        .               }
        .           
        .               #[inline]
        .               pub fn is_bool(&self) -> bool {
        .                   *self.kind() == Bool
        .               }
        .           
        .               /// Returns `true` if this type is a `str`.
        .               #[inline]
        .               pub fn is_str(&self) -> bool {
        .                   *self.kind() == Str
        .               }
        .           
        .               #[inline]
        .               pub fn is_param(&self, index: u32) -> bool {
        4 ( 0.00%)          match self.kind() {
        .                       ty::Param(ref data) => data.index == index,
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_slice(&self) -> bool {
        .                   match self.kind() {
        .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_array(&self) -> bool {
       79 ( 0.00%)          matches!(self.kind(), Array(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_simd(&self) -> bool {
        .                   match self.kind() {
        .                       Adt(def, _) => def.repr.simd(),
        .                       _ => false,
        .                   }
        .               }
        .           
       18 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
       36 ( 0.00%)          match self.kind() {
        .                       Array(ty, _) | Slice(ty) => ty,
        .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
        .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
        .                   }
       18 ( 0.00%)      }
        .           
        .               pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
        .                   match self.kind() {
        .                       Adt(def, substs) => {
        .                           assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
        .                           let variant = def.non_enum_variant();
        .                           let f0_ty = variant.fields[0].ty(tcx, substs);
        .           
-- line 1824 ----------------------------------------
-- line 1838 ----------------------------------------
        .                           }
        .                       }
        .                       _ => bug!("`simd_size_and_type` called on invalid type"),
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_region_ptr(&self) -> bool {
      145 ( 0.00%)          matches!(self.kind(), Ref(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_mutable_ptr(&self) -> bool {
        .                   matches!(
        .                       self.kind(),
        .                       RawPtr(TypeAndMut { mutbl: hir::Mutability::Mut, .. })
        .                           | Ref(_, _, hir::Mutability::Mut)
-- line 1854 ----------------------------------------
-- line 1861 ----------------------------------------
        .                   match self.kind() {
        .                       Ref(_, _, mutability) => Some(*mutability),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_unsafe_ptr(&self) -> bool {
    3,262 ( 0.00%)          matches!(self.kind(), RawPtr(_))
        .               }
        .           
        .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
        .               #[inline]
        .               pub fn is_any_ptr(&self) -> bool {
        8 ( 0.00%)          self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
        .               }
        .           
        .               #[inline]
        .               pub fn is_box(&self) -> bool {
   29,448 ( 0.00%)          match self.kind() {
    3,575 ( 0.00%)              Adt(def, _) => def.is_box(),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               /// Panics if called on any type other than `Box<T>`.
      582 ( 0.00%)      pub fn boxed_ty(&self) -> Ty<'tcx> {
      582 ( 0.00%)          match self.kind() {
    1,455 ( 0.00%)              Adt(def, substs) if def.is_box() => substs.type_at(0),
        .                       _ => bug!("`boxed_ty` is called on non-box type {:?}", self),
        .                   }
      582 ( 0.00%)      }
        .           
        .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
        .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
        .               /// contents are abstract to rustc.)
        .               #[inline]
        .               pub fn is_scalar(&self) -> bool {
    1,913 ( 0.00%)          matches!(
    4,153 ( 0.00%)              self.kind(),
        .                       Bool | Char
        .                           | Int(_)
        .                           | Float(_)
        .                           | Uint(_)
        .                           | FnDef(..)
        .                           | FnPtr(_)
        .                           | RawPtr(_)
        .                           | Infer(IntVar(_) | FloatVar(_))
        .                   )
        .               }
        .           
        .               /// Returns `true` if this type is a floating point type.
        .               #[inline]
        .               pub fn is_floating_point(&self) -> bool {
    2,705 ( 0.00%)          matches!(self.kind(), Float(_) | Infer(FloatVar(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_trait(&self) -> bool {
       74 ( 0.00%)          matches!(self.kind(), Dynamic(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_enum(&self) -> bool {
      368 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
        .               }
        .           
        .               #[inline]
        .               pub fn is_union(&self) -> bool {
    3,388 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
        .               }
        .           
        .               #[inline]
        .               pub fn is_closure(&self) -> bool {
      698 ( 0.00%)          matches!(self.kind(), Closure(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_generator(&self) -> bool {
    1,704 ( 0.00%)          matches!(self.kind(), Generator(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_integral(&self) -> bool {
   14,452 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fresh_ty(&self) -> bool {
        .                   matches!(self.kind(), Infer(FreshTy(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fresh(&self) -> bool {
    5,554 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_char(&self) -> bool {
        .                   matches!(self.kind(), Char)
        .               }
        .           
        .               #[inline]
        .               pub fn is_numeric(&self) -> bool {
        .                   self.is_integral() || self.is_floating_point()
        .               }
        .           
        .               #[inline]
        .               pub fn is_signed(&self) -> bool {
      215 ( 0.00%)          matches!(self.kind(), Int(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_ptr_sized_integral(&self) -> bool {
      792 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
        .               }
        .           
        .               #[inline]
        .               pub fn has_concrete_skeleton(&self) -> bool {
        .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
        .               }
        .           
        .               /// Returns the type and mutability of `*ty`.
        .               ///
        .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
        .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
    5,855 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
   35,794 ( 0.00%)          match self.kind() {
      604 ( 0.00%)              Adt(def, _) if def.is_box() => {
      591 ( 0.00%)                  Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
        .                       }
   22,010 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
      130 ( 0.00%)              RawPtr(mt) if explicit => Some(*mt),
        .                       _ => None,
        .                   }
   11,710 ( 0.00%)      }
        .           
        .               /// Returns the type of `ty[i]`.
        .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
      348 ( 0.00%)          match self.kind() {
        .                       Array(ty, _) | Slice(ty) => Some(ty),
        .                       _ => None,
        .                   }
       36 ( 0.00%)      }
        .           
   62,120 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
   31,060 ( 0.00%)          match self.kind() {
   23,289 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
       10 ( 0.00%)              FnPtr(f) => *f,
        .                       Error(_) => {
        .                           // ignore errors (#54954)
        .                           ty::Binder::dummy(FnSig::fake())
        .                       }
        .                       Closure(..) => bug!(
        .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
        .                       ),
        .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
        .                   }
   69,885 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn is_fn(&self) -> bool {
    2,109 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fn_ptr(&self) -> bool {
        .                   matches!(self.kind(), FnPtr(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_impl_trait(&self) -> bool {
        .                   matches!(self.kind(), Opaque(..))
        .               }
        .           
        .               #[inline]
        .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
    2,583 ( 0.00%)          match self.kind() {
        .                       Adt(adt, _) => Some(adt),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               /// Iterates over tuple fields.
        .               /// Panics when called on anything but a tuple.
      133 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
      762 ( 0.00%)          match self.kind() {
      675 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
        .                       _ => bug!("tuple_fields called on non-tuple"),
        .                   }
      266 ( 0.00%)      }
        .           
        .               /// Get the `i`-th element of a tuple.
        .               /// Panics when called on anything but a tuple.
        8 ( 0.00%)      pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
       16 ( 0.00%)          match self.kind() {
       16 ( 0.00%)              Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
        .                       _ => bug!("tuple_fields called on non-tuple"),
        .                   }
       16 ( 0.00%)      }
        .           
        .               /// If the type contains variants, returns the valid range of variant indices.
        .               //
        .               // FIXME: This requires the optimized MIR in the case of generators.
        .               #[inline]
        .               pub fn variant_range(&self, tcx: TyCtxt<'tcx>) -> Option<Range<VariantIdx>> {
        .                   match self.kind() {
        .                       TyKind::Adt(adt, _) => Some(adt.variant_range()),
-- line 2068 ----------------------------------------
-- line 2073 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// If the type contains variants, returns the variant for `variant_index`.
        .               /// Panics if `variant_index` is out of range.
        .               //
        .               // FIXME: This requires the optimized MIR in the case of generators.
        .               #[inline]
    3,130 ( 0.00%)      pub fn discriminant_for_variant(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .                   variant_index: VariantIdx,
        .               ) -> Option<Discr<'tcx>> {
    2,359 ( 0.00%)          match self.kind() {
      750 ( 0.00%)              TyKind::Adt(adt, _) if adt.variants.is_empty() => {
        .                           // This can actually happen during CTFE, see
        .                           // https://github.com/rust-lang/rust/issues/89765.
        .                           None
        .                       }
      375 ( 0.00%)              TyKind::Adt(adt, _) if adt.is_enum() => {
        .                           Some(adt.discriminant_for_variant(tcx, variant_index))
        .                       }
        .                       TyKind::Generator(def_id, substs, _) => {
        .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
        .                       }
        .                       _ => None,
        .                   }
    2,504 ( 0.00%)      }
        .           
        .               /// Returns the type of the discriminant of this type.
    3,330 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
    1,665 ( 0.00%)          match self.kind() {
    2,664 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
        .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
        .           
        .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
        .                           let assoc_items = tcx.associated_item_def_ids(
        .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
        .                           );
        .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
        .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
        .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
        .           
        .                       ty::Bound(..)
        .                       | ty::Placeholder(_)
        .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
        .                       }
        .                   }
    2,664 ( 0.00%)      }
        .           
        .               /// Returns the type of metadata for (potentially fat) pointers to this type.
       72 ( 0.00%)      pub fn ptr_metadata_ty(
        .                   &'tcx self,
        .                   tcx: TyCtxt<'tcx>,
        .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
        .               ) -> Ty<'tcx> {
       72 ( 0.00%)          let tail = tcx.struct_tail_with_normalize(self, normalize);
       40 ( 0.00%)          match tail.kind() {
        .                       // Sized types
        .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
        .                       | ty::Uint(_)
        .                       | ty::Int(_)
        .                       | ty::Bool
        .                       | ty::Float(_)
        .                       | ty::FnDef(..)
        .                       | ty::FnPtr(_)
-- line 2160 ----------------------------------------
-- line 2170 ----------------------------------------
        .                       | ty::Foreign(..)
        .                       // If returned by `struct_tail_without_normalization` this is a unit struct
        .                       // without any fields, or not a struct, and therefore is Sized.
        .                       | ty::Adt(..)
        .                       // If returned by `struct_tail_without_normalization` this is the empty tuple,
        .                       // a.k.a. unit type, which is Sized
        .                       | ty::Tuple(..) => tcx.types.unit,
        .           
       16 ( 0.00%)              ty::Str | ty::Slice(_) => tcx.types.usize,
        .                       ty::Dynamic(..) => {
        .                           let dyn_metadata = tcx.lang_items().dyn_metadata().unwrap();
        .                           tcx.type_of(dyn_metadata).subst(tcx, &[tail.into()])
        .                       },
        .           
        .                       ty::Projection(_)
        .                       | ty::Param(_)
        .                       | ty::Opaque(..)
        .                       | ty::Infer(ty::TyVar(_))
        .                       | ty::Bound(..)
        .                       | ty::Placeholder(..)
        .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("`ptr_metadata_ty` applied to unexpected type: {:?}", tail)
        .                       }
        .                   }
       64 ( 0.00%)      }
        .           
        .               /// When we create a closure, we record its kind (i.e., what trait
        .               /// it implements) into its `ClosureSubsts` using a type
        .               /// parameter. This is kind of a phantom type, except that the
        .               /// most convenient thing for us to are the integral types. This
        .               /// function converts such a special type into the closure
        .               /// kind. To go the other way, use
        .               /// `tcx.closure_kind_ty(closure_kind)`.
        .               ///
        .               /// Note that during type checking, we use an inference variable
        .               /// to represent the closure kind, because it has not yet been
        .               /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)
        .               /// is complete, that type variable will be unified.
      210 ( 0.00%)      pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {
      420 ( 0.00%)          match self.kind() {
      400 ( 0.00%)              Int(int_ty) => match int_ty {
        .                           ty::IntTy::I8 => Some(ty::ClosureKind::Fn),
        .                           ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),
        .                           ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),
        .                           _ => bug!("cannot convert type `{:?}` to a closure kind", self),
        .                       },
        .           
        .                       // "Bound" types appear in canonical queries when the
        .                       // closure type is not yet known
        .                       Bound(..) | Infer(_) => None,
        .           
        .                       Error(_) => Some(ty::ClosureKind::Fn),
        .           
        .                       _ => bug!("cannot convert type `{:?}` to a closure kind", self),
        .                   }
      210 ( 0.00%)      }
        .           
        .               /// Fast path helper for testing if a type is `Sized`.
        .               ///
        .               /// Returning true means the type is known to be sized. Returning
        .               /// `false` means nothing -- could be sized, might not be.
        .               ///
        .               /// Note that we could never rely on the fact that a type such as `[_]` is
        .               /// trivially `!Sized` because we could be in a type environment with a
        .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
        .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
        .               /// this method doesn't return `Option<bool>`.
  124,542 ( 0.01%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
   83,028 ( 0.00%)          match self.kind() {
        .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
        .                       | ty::Uint(_)
        .                       | ty::Int(_)
        .                       | ty::Bool
        .                       | ty::Float(_)
        .                       | ty::FnDef(..)
        .                       | ty::FnPtr(_)
        .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
        .                       | ty::GeneratorWitness(..)
        .                       | ty::Array(..)
        .                       | ty::Closure(..)
        .                       | ty::Never
        .                       | ty::Error(_) => true,
        .           
        .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
        .           
    1,732 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
        .           
    4,989 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
        .           
        .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
        .           
        .                       ty::Infer(ty::TyVar(_)) => false,
        .           
        .                       ty::Bound(..)
        .                       | ty::Placeholder(..)
        .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
        .                       }
        .                   }
  124,542 ( 0.01%)      }
        .           }
        .           
        .           /// Extra information about why we ended up with a particular variance.
        .           /// This is only used to add more information to error messages, and
        .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
        .           /// may lead to confusing notes in error messages, it will never cause
        .           /// a miscompilation or unsoundness.
        .           ///
-- line 2280 ----------------------------------------
-- line 2295 ----------------------------------------
        .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
        .                   param_index: u32,
        .               },
        .           }
        .           
        .           impl<'tcx> VarianceDiagInfo<'tcx> {
        .               /// Mirrors `Variance::xform` - used to 'combine' the existing
        .               /// and new `VarianceDiagInfo`s when our variance changes.
   19,254 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
        .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
   28,881 ( 0.00%)          match self {
        .                       VarianceDiagInfo::None => other,
        .                       VarianceDiagInfo::Invariant { .. } => self,
        .                   }
    9,627 ( 0.00%)      }
        .           }

7,460,209 ( 0.30%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 42 ----------------------------------------
      .           /// `stack_size` bytes.
      .           ///
      .           /// The closure `f` is guaranteed to run on a stack with at least `red_zone` bytes, and it will be
      .           /// run on the current stack if there's space available.
      .           #[inline(always)]
      .           pub fn maybe_grow<R, F: FnOnce() -> R>(red_zone: usize, stack_size: usize, callback: F) -> R {
      .               // if we can't guess the remaining stack (unsupported on some platforms) we immediately grow
      .               // the stack and then cache the new stack size (which we do know now because we allocated it.
505,312 ( 0.02%)      let enough_space = match remaining_stack() {
      .                   Some(remaining) => remaining >= red_zone,
      .                   None => false,
      .               };
696,918 ( 0.03%)      if enough_space {
 35,795 ( 0.00%)          callback()
      .               } else {
      .                   grow(stack_size, callback)
      .               }
      .           }
      .           
      .           /// Always creates a new stack for the passed closure to run on.
      .           /// The closure will still be on the same thread as the caller of `grow`.
      .           /// This will allocate a new stack with at least `stack_size` bytes.
-- line 63 ----------------------------------------
-- line 82 ----------------------------------------
      .               _grow(stack_size, dyn_callback);
      .               ret.unwrap()
      .           }
      .           
      .           /// Queries the amount of remaining stack as interpreted by this library.
      .           ///
      .           /// This function will return the amount of stack space left which will be used
      .           /// to determine whether a stack switch should be made or not.
464,612 ( 0.02%)  pub fn remaining_stack() -> Option<usize> {
      .               let current_ptr = current_stack_ptr();
464,612 ( 0.02%)      get_stack_limit().map(|limit| current_ptr - limit)
929,224 ( 0.04%)  }
      .           
      .           psm_stack_information! (
      .               yes {
      .                   fn current_stack_ptr() -> usize {
464,612 ( 0.02%)              psm::stack_pointer() as usize
      .                   }
      .               }
      .               no {
      .                   #[inline(always)]
      .                   fn current_stack_ptr() -> usize {
      .                       unsafe {
      .                           let mut x = std::mem::MaybeUninit::<u8>::uninit();
      .                           // Unlikely to be ever exercised. As a fallback we execute a volatile read to a
-- line 106 ----------------------------------------
-- line 111 ----------------------------------------
      .                           x.as_ptr() as usize
      .                       }
      .                   }
      .               }
      .           );
      .           
      .           thread_local! {
      .               static STACK_LIMIT: Cell<Option<usize>> = Cell::new(unsafe {
      1 ( 0.00%)          guess_os_stack_limit()
      .               })
      .           }
      .           
      .           #[inline(always)]
      .           fn get_stack_limit() -> Option<usize> {
      .               STACK_LIMIT.with(|s| s.get())
      .           }
      .           
-- line 127 ----------------------------------------
-- line 403 ----------------------------------------
      .                       VirtualQuery(
      .                           psm::stack_pointer() as *const _,
      .                           mi.as_mut_ptr(),
      .                           std::mem::size_of::<QueryT>() as SIZE_T,
      .                       );
      .                       Some(mi.assume_init().AllocationBase as usize + get_thread_stack_guarantee() + 0x1000)
      .                   }
      .               } else if #[cfg(any(target_os = "linux", target_os="solaris", target_os = "netbsd"))] {
      2 ( 0.00%)          unsafe fn guess_os_stack_limit() -> Option<usize> {
      .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
      7 ( 0.00%)              assert_eq!(libc::pthread_getattr_np(libc::pthread_self(),
      .                                                           attr.as_mut_ptr()), 0);
      1 ( 0.00%)              let mut stackaddr = std::ptr::null_mut();
      4 ( 0.00%)              let mut stacksize = 0;
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_getstack(
      .                           attr.as_ptr(), &mut stackaddr, &mut stacksize
      .                       ), 0);
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_destroy(attr.as_mut_ptr()), 0);
      1 ( 0.00%)              Some(stackaddr as usize)
      3 ( 0.00%)          }
      .               } else if #[cfg(any(target_os = "freebsd", target_os = "dragonfly"))] {
      .                   unsafe fn guess_os_stack_limit() -> Option<usize> {
      .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
      .                       assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
      .                       assert_eq!(libc::pthread_attr_get_np(libc::pthread_self(), attr.as_mut_ptr()), 0);
      .                       let mut stackaddr = std::ptr::null_mut();
      .                       let mut stacksize = 0;
      .                       assert_eq!(libc::pthread_attr_getstack(
-- line 431 ----------------------------------------

296,609 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .           use rustc_span::hygiene::MacroKind;
        .           use rustc_span::source_map::Spanned;
        .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
        .           use rustc_span::Span;
        .           use rustc_target::spec::abi::Abi;
        .           use std::collections::VecDeque;
        .           
        .           fn fn_decl<'hir>(node: Node<'hir>) -> Option<&'hir FnDecl<'hir>> {
    4,125 ( 0.00%)      match node {
        .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
        .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
        .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(&sig.decl),
        .                   Node::Expr(Expr { kind: ExprKind::Closure(_, fn_decl, ..), .. })
        .                   | Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(fn_decl, ..), .. }) => {
        .                       Some(fn_decl)
        .                   }
        .                   _ => None,
        .               }
        .           }
        .           
        .           pub fn fn_sig<'hir>(node: Node<'hir>) -> Option<&'hir FnSig<'hir>> {
      268 ( 0.00%)      match &node {
        .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
        .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
        .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(sig),
        .                   _ => None,
        .               }
        .           }
        .           
        .           pub fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {
   64,281 ( 0.00%)      match node {
        .                   Node::Item(Item {
        .                       kind: ItemKind::Const(_, body) | ItemKind::Static(.., body) | ItemKind::Fn(.., body),
        .                       ..
        .                   })
        .                   | Node::TraitItem(TraitItem {
        .                       kind:
        .                           TraitItemKind::Const(_, Some(body)) | TraitItemKind::Fn(_, TraitFn::Provided(body)),
        .                       ..
        .                   })
        .                   | Node::ImplItem(ImplItem {
        .                       kind: ImplItemKind::Const(_, body) | ImplItemKind::Fn(_, body),
        .                       ..
        .                   })
    9,937 ( 0.00%)          | Node::Expr(Expr { kind: ExprKind::Closure(.., body, _, _), .. }) => Some(*body),
        .           
    1,011 ( 0.00%)          Node::AnonConst(constant) => Some(constant.body),
        .           
        .                   _ => None,
        .               }
        .           }
        .           
        .           fn is_body_owner<'hir>(node: Node<'hir>, hir_id: HirId) -> bool {
        .               match associated_body(node) {
        .                   Some(b) => b.hir_id == hir_id,
-- line 71 ----------------------------------------
-- line 83 ----------------------------------------
        .           pub struct ParentHirIterator<'hir> {
        .               current_id: HirId,
        .               map: Map<'hir>,
        .           }
        .           
        .           impl<'hir> Iterator for ParentHirIterator<'hir> {
        .               type Item = (HirId, Node<'hir>);
        .           
    6,503 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
      932 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
        .                       return None;
        .                   }
        .                   loop {
        .                       // There are nodes that do not have entries, so we need to skip them.
        .                       let parent_id = self.map.get_parent_node(self.current_id);
        .           
    2,784 ( 0.00%)              if parent_id == self.current_id {
        .                           self.current_id = CRATE_HIR_ID;
        .                           return None;
        .                       }
        .           
    1,856 ( 0.00%)              self.current_id = parent_id;
    7,424 ( 0.00%)              if let Some(node) = self.map.find(parent_id) {
    3,700 ( 0.00%)                  return Some((parent_id, node));
        .                       }
        .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
        .                   }
    8,361 ( 0.00%)      }
        .           }
        .           
        .           /// An iterator that walks up the ancestor tree of a given `HirId`.
        .           /// Constructed using `tcx.hir().parent_owner_iter(hir_id)`.
        .           pub struct ParentOwnerIterator<'hir> {
        .               current_id: HirId,
        .               map: Map<'hir>,
        .           }
        .           
        .           impl<'hir> Iterator for ParentOwnerIterator<'hir> {
        .               type Item = (LocalDefId, OwnerNode<'hir>);
        .           
   66,321 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
   22,107 ( 0.00%)          if self.current_id.local_id.index() != 0 {
    4,332 ( 0.00%)              self.current_id.local_id = ItemLocalId::new(0);
   17,328 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
        .                           return Some((self.current_id.owner, node.node));
        .                       }
        .                   }
    3,037 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
        .                       return None;
        .                   }
        .                   loop {
        .                       // There are nodes that do not have entries, so we need to skip them.
        .                       let parent_id = self.map.def_key(self.current_id.owner).parent;
        .           
        .                       let parent_id = parent_id.map_or(CRATE_HIR_ID.owner, |local_def_index| {
        .                           let def_id = LocalDefId { local_def_index };
        .                           self.map.local_def_id_to_hir_id(def_id).owner
        .                       });
    6,074 ( 0.00%)              self.current_id = HirId::make_owner(parent_id);
        .           
        .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
    6,074 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
        .                           return Some((self.current_id.owner, node.node));
        .                       }
        .                   }
   58,952 ( 0.00%)      }
        .           }
        .           
        .           impl<'hir> Map<'hir> {
      224 ( 0.00%)      pub fn krate(&self) -> &'hir Crate<'hir> {
       32 ( 0.00%)          self.tcx.hir_crate(())
      256 ( 0.00%)      }
        .           
        7 ( 0.00%)      pub fn root_module(&self) -> &'hir Mod<'hir> {
        1 ( 0.00%)          match self.tcx.hir_owner(CRATE_DEF_ID).map(|o| o.node) {
        .                       Some(OwnerNode::Crate(item)) => item,
        .                       _ => bug!(),
        .                   }
        8 ( 0.00%)      }
        .           
        .               pub fn items(&self) -> impl Iterator<Item = &'hir Item<'hir>> + 'hir {
        .                   let krate = self.krate();
        .                   krate.owners.iter().filter_map(|owner| match owner.as_ref()?.node() {
        .                       OwnerNode::Item(item) => Some(item),
        .                       _ => None,
        .                   })
        .               }
-- line 169 ----------------------------------------
-- line 184 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn def_path_hash(self, def_id: LocalDefId) -> DefPathHash {
        .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
        .                   self.tcx.untracked_resolutions.definitions.def_path_hash(def_id)
        .               }
        .           
        .               #[inline]
  125,928 ( 0.01%)      pub fn local_def_id(&self, hir_id: HirId) -> LocalDefId {
   17,505 ( 0.00%)          self.opt_local_def_id(hir_id).unwrap_or_else(|| {
        .                       bug!(
        .                           "local_def_id: no entry for `{:?}`, which has a map of `{:?}`",
        .                           hir_id,
        .                           self.find(hir_id)
        .                       )
        .                   })
   94,446 ( 0.00%)      }
        .           
        .               #[inline]
   46,704 ( 0.00%)      pub fn opt_local_def_id(&self, hir_id: HirId) -> Option<LocalDefId> {
   17,710 ( 0.00%)          if hir_id.local_id == ItemLocalId::new(0) {
        .                       Some(hir_id.owner)
        .                   } else {
    6,574 ( 0.00%)              self.tcx
        .                           .hir_owner_nodes(hir_id.owner)?
        .                           .local_id_to_def_id
        .                           .get(&hir_id.local_id)
        .                           .copied()
        .                   }
   52,542 ( 0.00%)      }
        .           
        .               #[inline]
      194 ( 0.00%)      pub fn local_def_id_to_hir_id(&self, def_id: LocalDefId) -> HirId {
        .                   // FIXME(#85914) is this access safe for incr. comp.?
    5,014 ( 0.00%)          self.tcx.untracked_resolutions.definitions.local_def_id_to_hir_id(def_id)
      388 ( 0.00%)      }
        .           
        7 ( 0.00%)      pub fn iter_local_def_id(&self) -> impl Iterator<Item = LocalDefId> + '_ {
        .                   // Create a dependency to the crate to be sure we reexcute this when the amount of
        .                   // definitions change.
        1 ( 0.00%)          self.tcx.ensure().hir_crate(());
        .                   self.tcx.untracked_resolutions.definitions.iter_local_def_id()
        9 ( 0.00%)      }
        .           
   14,329 ( 0.00%)      pub fn opt_def_kind(&self, local_def_id: LocalDefId) -> Option<DefKind> {
        .                   let hir_id = self.local_def_id_to_hir_id(local_def_id);
   26,611 ( 0.00%)          let def_kind = match self.find(hir_id)? {
    3,388 ( 0.00%)              Node::Item(item) => match item.kind {
        .                           ItemKind::Static(..) => DefKind::Static,
        .                           ItemKind::Const(..) => DefKind::Const,
        .                           ItemKind::Fn(..) => DefKind::Fn,
        .                           ItemKind::Macro(..) => DefKind::Macro(MacroKind::Bang),
        .                           ItemKind::Mod(..) => DefKind::Mod,
        .                           ItemKind::OpaqueTy(..) => DefKind::OpaqueTy,
        .                           ItemKind::TyAlias(..) => DefKind::TyAlias,
        .                           ItemKind::Enum(..) => DefKind::Enum,
-- line 239 ----------------------------------------
-- line 247 ----------------------------------------
        .                           ItemKind::GlobalAsm(..) => DefKind::GlobalAsm,
        .                           ItemKind::Impl { .. } => DefKind::Impl,
        .                       },
        .                       Node::ForeignItem(item) => match item.kind {
        .                           ForeignItemKind::Fn(..) => DefKind::Fn,
        .                           ForeignItemKind::Static(..) => DefKind::Static,
        .                           ForeignItemKind::Type => DefKind::ForeignTy,
        .                       },
        8 ( 0.00%)              Node::TraitItem(item) => match item.kind {
        .                           TraitItemKind::Const(..) => DefKind::AssocConst,
        .                           TraitItemKind::Fn(..) => DefKind::AssocFn,
        .                           TraitItemKind::Type(..) => DefKind::AssocTy,
        .                       },
      326 ( 0.00%)              Node::ImplItem(item) => match item.kind {
        .                           ImplItemKind::Const(..) => DefKind::AssocConst,
        .                           ImplItemKind::Fn(..) => DefKind::AssocFn,
        .                           ImplItemKind::TyAlias(..) => DefKind::AssocTy,
        .                       },
        .                       Node::Variant(_) => DefKind::Variant,
        .                       Node::Ctor(variant_data) => {
        .                           // FIXME(eddyb) is this even possible, if we have a `Node::Ctor`?
      295 ( 0.00%)                  assert_ne!(variant_data.ctor_hir_id(), None);
        .           
      399 ( 0.00%)                  let ctor_of = match self.find(self.get_parent_node(hir_id)) {
        .                               Some(Node::Item(..)) => def::CtorOf::Struct,
        .                               Some(Node::Variant(..)) => def::CtorOf::Variant,
        .                               _ => unreachable!(),
        .                           };
      118 ( 0.00%)                  DefKind::Ctor(ctor_of, def::CtorKind::from_hir(variant_data))
      236 ( 0.00%)              }
        .                       Node::AnonConst(_) => {
       84 ( 0.00%)                  let inline = match self.find(self.get_parent_node(hir_id)) {
        .                               Some(Node::Expr(&Expr {
        .                                   kind: ExprKind::ConstBlock(ref anon_const), ..
        .                               })) if anon_const.hir_id == hir_id => true,
        .                               _ => false,
        .                           };
        .                           if inline { DefKind::InlineConst } else { DefKind::AnonConst }
        .                       }
        .                       Node::Field(_) => DefKind::Field,
       25 ( 0.00%)              Node::Expr(expr) => match expr.kind {
        .                           ExprKind::Closure(.., None) => DefKind::Closure,
        .                           ExprKind::Closure(.., Some(_)) => DefKind::Generator,
        .                           _ => bug!("def_kind: unsupported node: {}", self.node_to_string(hir_id)),
        .                       },
      648 ( 0.00%)              Node::GenericParam(param) => match param.kind {
        .                           GenericParamKind::Lifetime { .. } => DefKind::LifetimeParam,
        .                           GenericParamKind::Type { .. } => DefKind::TyParam,
        .                           GenericParamKind::Const { .. } => DefKind::ConstParam,
        .                       },
        .                       Node::Crate(_) => DefKind::Mod,
        .                       Node::Stmt(_)
        .                       | Node::PathSegment(_)
        .                       | Node::Ty(_)
-- line 300 ----------------------------------------
-- line 304 ----------------------------------------
        .                       | Node::Binding(_)
        .                       | Node::Local(_)
        .                       | Node::Param(_)
        .                       | Node::Arm(_)
        .                       | Node::Lifetime(_)
        .                       | Node::Visibility(_)
        .                       | Node::Block(_) => return None,
        .                   };
    6,504 ( 0.00%)          Some(def_kind)
   20,470 ( 0.00%)      }
        .           
        .               pub fn def_kind(&self, local_def_id: LocalDefId) -> DefKind {
        .                   self.opt_def_kind(local_def_id)
        .                       .unwrap_or_else(|| bug!("def_kind: unsupported node: {:?}", local_def_id))
        .               }
        .           
  816,176 ( 0.03%)      pub fn find_parent_node(&self, id: HirId) -> Option<HirId> {
  102,022 ( 0.00%)          if id.local_id == ItemLocalId::from_u32(0) {
        .                       Some(self.tcx.hir_owner_parent(id.owner))
        .                   } else {
  197,840 ( 0.01%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
   98,920 ( 0.00%)              let node = owner.nodes[id.local_id].as_ref()?;
  296,760 ( 0.01%)              let hir_id = HirId { owner: id.owner, local_id: node.parent };
        .                       Some(hir_id)
        .                   }
  816,176 ( 0.03%)      }
        .           
    4,850 ( 0.00%)      pub fn get_parent_node(&self, hir_id: HirId) -> HirId {
  543,613 ( 0.02%)          self.find_parent_node(hir_id).unwrap()
    9,700 ( 0.00%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
  476,960 ( 0.02%)      pub fn find(&self, id: HirId) -> Option<Node<'hir>> {
   59,620 ( 0.00%)          if id.local_id == ItemLocalId::from_u32(0) {
        .                       let owner = self.tcx.hir_owner(id.owner)?;
   40,720 ( 0.00%)              Some(owner.node.into())
        .                   } else {
   36,450 ( 0.00%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
   18,225 ( 0.00%)              let node = owner.nodes[id.local_id].as_ref()?;
   54,675 ( 0.00%)              Some(node.node)
        .                   }
  476,960 ( 0.02%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
        .               #[inline]
        .               pub fn find_by_def_id(&self, id: LocalDefId) -> Option<Node<'hir>> {
   15,637 ( 0.00%)          self.find(self.local_def_id_to_hir_id(id))
        .               }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
   40,395 ( 0.00%)      pub fn get(&self, id: HirId) -> Node<'hir> {
   23,104 ( 0.00%)          self.find(id).unwrap_or_else(|| bug!("couldn't find hir id {} in the HIR map", id))
   26,930 ( 0.00%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
        .               #[inline]
        .               pub fn get_by_def_id(&self, id: LocalDefId) -> Node<'hir> {
        .                   self.find_by_def_id(id).unwrap_or_else(|| bug!("couldn't find {:?} in the HIR map", id))
        .               }
        .           
    1,086 ( 0.00%)      pub fn get_if_local(&self, id: DefId) -> Option<Node<'hir>> {
      543 ( 0.00%)          id.as_local().and_then(|id| self.find(self.local_def_id_to_hir_id(id)))
    1,086 ( 0.00%)      }
        .           
        .               pub fn get_generics(&self, id: LocalDefId) -> Option<&'hir Generics<'hir>> {
        .                   let node = self.tcx.hir_owner(id)?;
        .                   match node.node {
        .                       OwnerNode::ImplItem(impl_item) => Some(&impl_item.generics),
        .                       OwnerNode::TraitItem(trait_item) => Some(&trait_item.generics),
        .                       OwnerNode::Item(Item {
        .                           kind:
-- line 374 ----------------------------------------
-- line 381 ----------------------------------------
        .                               | ItemKind::TraitAlias(generics, _)
        .                               | ItemKind::Impl(Impl { generics, .. }),
        .                           ..
        .                       }) => Some(generics),
        .                       _ => None,
        .                   }
        .               }
        .           
  159,964 ( 0.01%)      pub fn item(&self, id: ItemId) -> &'hir Item<'hir> {
   45,704 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_item()
  182,816 ( 0.01%)      }
        .           
      756 ( 0.00%)      pub fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
      216 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_trait_item()
      864 ( 0.00%)      }
        .           
   65,842 ( 0.00%)      pub fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
   18,812 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_impl_item()
   75,248 ( 0.00%)      }
        .           
        .               pub fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
        .                   self.tcx.hir_owner(id.def_id).unwrap().node.expect_foreign_item()
        .               }
        .           
   86,016 ( 0.00%)      pub fn body(&self, id: BodyId) -> &'hir Body<'hir> {
   24,576 ( 0.00%)          self.tcx.hir_owner_nodes(id.hir_id.owner).unwrap().bodies[&id.hir_id.local_id]
   98,304 ( 0.00%)      }
        .           
    2,475 ( 0.00%)      pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnDecl<'hir>> {
    2,475 ( 0.00%)          if let Some(node) = self.find(hir_id) {
        .                       fn_decl(node)
        .                   } else {
        .                       bug!("no node for hir_id `{}`", hir_id)
        .                   }
    1,650 ( 0.00%)      }
        .           
      153 ( 0.00%)      pub fn fn_sig_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnSig<'hir>> {
      153 ( 0.00%)          if let Some(node) = self.find(hir_id) {
        .                       fn_sig(node)
        .                   } else {
        .                       bug!("no node for hir_id `{}`", hir_id)
        .                   }
      153 ( 0.00%)      }
        .           
        .               pub fn enclosing_body_owner(&self, hir_id: HirId) -> HirId {
        .                   for (parent, _) in self.parent_iter(hir_id) {
        .                       if let Some(body) = self.maybe_body_owned_by(parent) {
        .                           return self.body_owner(body);
        .                       }
        .                   }
        .           
        .                   bug!("no `enclosing_body_owner` for hir_id `{}`", hir_id);
        .               }
        .           
        .               /// Returns the `HirId` that corresponds to the definition of
        .               /// which this is the body of, i.e., a `fn`, `const` or `static`
        .               /// item (possibly associated), a closure, or a `hir::AnonConst`.
   59,496 ( 0.00%)      pub fn body_owner(&self, BodyId { hir_id }: BodyId) -> HirId {
        .                   let parent = self.get_parent_node(hir_id);
   44,622 ( 0.00%)          assert!(self.find(parent).map_or(false, |n| is_body_owner(n, hir_id)));
        .                   parent
   59,496 ( 0.00%)      }
        .           
   18,140 ( 0.00%)      pub fn body_owner_def_id(&self, id: BodyId) -> LocalDefId {
   29,160 ( 0.00%)          self.local_def_id(self.body_owner(id))
   18,140 ( 0.00%)      }
        .           
        .               /// Given a `HirId`, returns the `BodyId` associated with it,
        .               /// if the node is a body owner, otherwise returns `None`.
    3,878 ( 0.00%)      pub fn maybe_body_owned_by(&self, hir_id: HirId) -> Option<BodyId> {
   12,382 ( 0.00%)          self.find(hir_id).map(associated_body).flatten()
   11,634 ( 0.00%)      }
        .           
        .               /// Given a body owner's id, returns the `BodyId` associated with it.
    6,732 ( 0.00%)      pub fn body_owned_by(&self, id: HirId) -> BodyId {
        .                   self.maybe_body_owned_by(id).unwrap_or_else(|| {
        .                       span_bug!(
        .                           self.span(id),
        .                           "body_owned_by: {} has no associated body",
        .                           self.node_to_string(id)
        .                       );
        .                   })
    5,236 ( 0.00%)      }
        .           
      311 ( 0.00%)      pub fn body_param_names(&self, id: BodyId) -> impl Iterator<Item = Ident> + 'hir {
    2,949 ( 0.00%)          self.body(id).params.iter().map(|arg| match arg.pat.kind {
    1,008 ( 0.00%)              PatKind::Binding(_, _, ident, _) => ident,
        .                       _ => Ident::empty(),
        .                   })
      933 ( 0.00%)      }
        .           
        .               /// Returns the `BodyOwnerKind` of this `LocalDefId`.
        .               ///
        .               /// Panics if `LocalDefId` does not have an associated body.
   13,197 ( 0.00%)      pub fn body_owner_kind(&self, id: HirId) -> BodyOwnerKind {
   33,707 ( 0.00%)          match self.get(id) {
        .                       Node::Item(&Item { kind: ItemKind::Const(..), .. })
        .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Const(..), .. })
        .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Const(..), .. })
        .                       | Node::AnonConst(_) => BodyOwnerKind::Const,
        .                       Node::Ctor(..)
        .                       | Node::Item(&Item { kind: ItemKind::Fn(..), .. })
        .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Fn(..), .. })
        .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Fn(..), .. }) => BodyOwnerKind::Fn,
       48 ( 0.00%)              Node::Item(&Item { kind: ItemKind::Static(_, m, _), .. }) => BodyOwnerKind::Static(m),
        .                       Node::Expr(&Expr { kind: ExprKind::Closure(..), .. }) => BodyOwnerKind::Closure,
        .                       node => bug!("{:#?} is not a body node", node),
        .                   }
   13,197 ( 0.00%)      }
        .           
        .               /// Returns the `ConstContext` of the body associated with this `LocalDefId`.
        .               ///
        .               /// Panics if `LocalDefId` does not have an associated body.
        .               ///
        .               /// This should only be used for determining the context of a body, a return
        .               /// value of `Some` does not always suggest that the owner of the body is `const`,
        .               /// just that it has to be checked as if it were.
   17,616 ( 0.00%)      pub fn body_const_context(&self, did: LocalDefId) -> Option<ConstContext> {
        .                   let hir_id = self.local_def_id_to_hir_id(did);
   26,424 ( 0.00%)          let ccx = match self.body_owner_kind(hir_id) {
        .                       BodyOwnerKind::Const => ConstContext::Const,
       72 ( 0.00%)              BodyOwnerKind::Static(mt) => ConstContext::Static(mt),
        .           
    1,866 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_constructor(did.to_def_id()) => return None,
    1,866 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_const_fn_raw(did.to_def_id()) => ConstContext::ConstFn,
        .                       BodyOwnerKind::Fn
    3,732 ( 0.00%)                  if self.tcx.has_attr(did.to_def_id(), sym::default_method_body_is_const) =>
        .                       {
        .                           ConstContext::ConstFn
        .                       }
        .                       BodyOwnerKind::Fn | BodyOwnerKind::Closure => return None,
        .                   };
        .           
        .                   Some(ccx)
   19,818 ( 0.00%)      }
        .           
        .               /// Returns an iterator of the `DefId`s for all body-owners in this
        .               /// crate. If you would prefer to iterate over the bodies
        .               /// themselves, you can do `self.hir().krate().body_ids.iter()`.
       21 ( 0.00%)      pub fn body_owners(self) -> impl Iterator<Item = LocalDefId> + 'hir {
        3 ( 0.00%)          self.krate()
        .                       .owners
        .                       .iter_enumerated()
        .                       .flat_map(move |(owner, owner_info)| {
    6,141 ( 0.00%)                  let bodies = &owner_info.as_ref()?.nodes.bodies;
        .                           Some(bodies.iter().map(move |&(local_id, _)| {
       14 ( 0.00%)                      let hir_id = HirId { owner, local_id };
        .                               let body_id = BodyId { hir_id };
    3,628 ( 0.00%)                      self.body_owner_def_id(body_id)
        .                           }))
        .                       })
        .                       .flatten()
       15 ( 0.00%)      }
        .           
       10 ( 0.00%)      pub fn par_body_owners<F: Fn(LocalDefId) + Sync + Send>(self, f: F) {
        .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
        .                   #[cfg(parallel_compiler)]
        .                   use rustc_rayon::iter::IndexedParallelIterator;
        .           
        3 ( 0.00%)          par_iter(&self.krate().owners.raw).enumerate().for_each(|(owner, owner_info)| {
        .                       let owner = LocalDefId::new(owner);
   12,282 ( 0.00%)              if let Some(owner_info) = owner_info {
        .                           par_iter(owner_info.nodes.bodies.range(..)).for_each(|(local_id, _)| {
        .                               let hir_id = HirId { owner, local_id: *local_id };
        .                               let body_id = BodyId { hir_id };
    3,303 ( 0.00%)                      f(self.body_owner_def_id(body_id))
        .                           })
        .                       }
        .                   });
        8 ( 0.00%)      }
        .           
        .               pub fn ty_param_owner(&self, id: HirId) -> LocalDefId {
        .                   match self.get(id) {
        .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
        .                           id.expect_owner()
        .                       }
        .                       Node::GenericParam(_) => self.get_parent_item(id),
        .                       _ => bug!("ty_param_owner: {} not a type parameter", self.node_to_string(id)),
-- line 558 ----------------------------------------
-- line 564 ----------------------------------------
        .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
        .                           kw::SelfUpper
        .                       }
        .                       Node::GenericParam(param) => param.name.ident().name,
        .                       _ => bug!("ty_param_name: {} not a type parameter", self.node_to_string(id)),
        .                   }
        .               }
        .           
      756 ( 0.00%)      pub fn trait_impls(&self, trait_did: DefId) -> &'hir [LocalDefId] {
       84 ( 0.00%)          self.tcx.all_local_trait_impls(()).get(&trait_did).map_or(&[], |xs| &xs[..])
      756 ( 0.00%)      }
        .           
        .               /// Gets the attributes on the crate. This is preferable to
        .               /// invoking `krate.attrs` because it registers a tighter
        .               /// dep-graph access.
        .               pub fn krate_attrs(&self) -> &'hir [ast::Attribute] {
       74 ( 0.00%)          self.attrs(CRATE_HIR_ID)
        .               }
        .           
      623 ( 0.00%)      pub fn get_module(&self, module: LocalDefId) -> (&'hir Mod<'hir>, Span, HirId) {
        .                   let hir_id = HirId::make_owner(module);
      445 ( 0.00%)          match self.tcx.hir_owner(module).map(|o| o.node) {
      156 ( 0.00%)              Some(OwnerNode::Item(&Item { span, kind: ItemKind::Mod(ref m), .. })) => {
        .                           (m, span, hir_id)
        .                       }
       33 ( 0.00%)              Some(OwnerNode::Crate(item)) => (item, item.inner, hir_id),
        .                       node => panic!("not a module: {:?}", node),
        .                   }
      801 ( 0.00%)      }
        .           
        .               /// Walks the contents of a crate. See also `Crate::visit_all_items`.
       11 ( 0.00%)      pub fn walk_toplevel_module(self, visitor: &mut impl Visitor<'hir>) {
       30 ( 0.00%)          let (top_mod, span, hir_id) = self.get_module(CRATE_DEF_ID);
        .                   visitor.visit_mod(top_mod, span, hir_id);
        8 ( 0.00%)      }
        .           
        .               /// Walks the attributes in a crate.
       20 ( 0.00%)      pub fn walk_attributes(self, visitor: &mut impl Visitor<'hir>) {
        2 ( 0.00%)          let krate = self.krate();
        .                   for (owner, info) in krate.owners.iter_enumerated() {
    8,188 ( 0.00%)              if let Some(info) = info {
        .                           for (local_id, attrs) in info.attrs.map.iter() {
        .                               let id = HirId { owner, local_id: *local_id };
        .                               for a in *attrs {
    9,085 ( 0.00%)                          visitor.visit_attribute(id, a)
        .                               }
        .                           }
        .                       }
        .                   }
       16 ( 0.00%)      }
        .           
        .               /// Visits all items in the crate in some deterministic (but
        .               /// unspecified) order. If you just need to process every item,
        .               /// but don't care about nesting, this method is the best choice.
        .               ///
        .               /// If you do care about nesting -- usually because your algorithm
        .               /// follows lexical scoping rules -- then you want a different
        .               /// approach. You should override `visit_nested_item` in your
        .               /// visitor and then call `intravisit::walk_crate` instead.
      152 ( 0.00%)      pub fn visit_all_item_likes<V>(&self, visitor: &mut V)
        .               where
        .                   V: itemlikevisit::ItemLikeVisitor<'hir>,
        .               {
       22 ( 0.00%)          let krate = self.krate();
       82 ( 0.00%)          for owner in krate.owners.iter().filter_map(Option::as_ref) {
   38,874 ( 0.00%)              match owner.node() {
   43,197 ( 0.00%)                  OwnerNode::Item(item) => visitor.visit_item(item),
        .                           OwnerNode::ForeignItem(item) => visitor.visit_foreign_item(item),
      978 ( 0.00%)                  OwnerNode::ImplItem(item) => visitor.visit_impl_item(item),
        .                           OwnerNode::TraitItem(item) => visitor.visit_trait_item(item),
        .                           OwnerNode::Crate(_) => {}
        .                       }
        .                   }
      152 ( 0.00%)      }
        .           
        .               /// A parallel version of `visit_all_item_likes`.
        .               pub fn par_visit_all_item_likes<V>(&self, visitor: &V)
        .               where
        .                   V: itemlikevisit::ParItemLikeVisitor<'hir> + Sync + Send,
        .               {
        1 ( 0.00%)          let krate = self.krate();
        2 ( 0.00%)          par_for_each_in(&krate.owners.raw, |owner| match owner.as_ref().map(OwnerInfo::node) {
      847 ( 0.00%)              Some(OwnerNode::Item(item)) => visitor.visit_item(item),
        .                       Some(OwnerNode::ForeignItem(item)) => visitor.visit_foreign_item(item),
      326 ( 0.00%)              Some(OwnerNode::ImplItem(item)) => visitor.visit_impl_item(item),
        4 ( 0.00%)              Some(OwnerNode::TraitItem(item)) => visitor.visit_trait_item(item),
        .                       Some(OwnerNode::Crate(_)) | None => {}
        .                   })
        .               }
        .           
    2,322 ( 0.00%)      pub fn visit_item_likes_in_module<V>(&self, module: LocalDefId, visitor: &mut V)
        .               where
        .                   V: ItemLikeVisitor<'hir>,
        .               {
      297 ( 0.00%)          let module = self.tcx.hir_module_items(module);
        .           
      324 ( 0.00%)          for id in module.items.iter() {
   38,115 ( 0.00%)              visitor.visit_item(self.item(*id));
        .                   }
        .           
      324 ( 0.00%)          for id in module.trait_items.iter() {
      160 ( 0.00%)              visitor.visit_trait_item(self.trait_item(*id));
        .                   }
        .           
      324 ( 0.00%)          for id in module.impl_items.iter() {
   12,714 ( 0.00%)              visitor.visit_impl_item(self.impl_item(*id));
        .                   }
        .           
      324 ( 0.00%)          for id in module.foreign_items.iter() {
        .                       visitor.visit_foreign_item(self.foreign_item(*id));
        .                   }
    2,376 ( 0.00%)      }
        .           
       46 ( 0.00%)      pub fn for_each_module(&self, f: impl Fn(LocalDefId)) {
        .                   let mut queue = VecDeque::new();
        .                   queue.push_back(CRATE_DEF_ID);
        .           
      216 ( 0.00%)          while let Some(id) = queue.pop_front() {
        .                       f(id);
       81 ( 0.00%)              let items = self.tcx.hir_module_items(id);
      864 ( 0.00%)              queue.extend(items.submodules.iter().copied())
        .                   }
       40 ( 0.00%)      }
        .           
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId)) {
        4 ( 0.00%)          self.for_each_module(f)
        .               }
        .           
        .               #[cfg(parallel_compiler)]
        .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId) + Sync) {
        .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
        .                   par_iter_submodules(self.tcx, CRATE_DEF_ID, &f);
        .           
        .                   fn par_iter_submodules<F>(tcx: TyCtxt<'_>, module: LocalDefId, f: &F)
-- line 699 ----------------------------------------
-- line 703 ----------------------------------------
        .                       (*f)(module);
        .                       let items = tcx.hir_module_items(module);
        .                       par_iter(&items.submodules[..]).for_each(|&sm| par_iter_submodules(tcx, sm, f));
        .                   }
        .               }
        .           
        .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
        .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
      894 ( 0.00%)      pub fn parent_iter(self, current_id: HirId) -> ParentHirIterator<'hir> {
        .                   ParentHirIterator { current_id, map: self }
    3,588 ( 0.00%)      }
        .           
        .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
        .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
        .               pub fn parent_owner_iter(self, current_id: HirId) -> ParentOwnerIterator<'hir> {
        .                   ParentOwnerIterator { current_id, map: self }
   21,627 ( 0.00%)      }
        .           
        .               /// Checks if the node is left-hand side of an assignment.
        .               pub fn is_lhs(&self, id: HirId) -> bool {
        .                   match self.find(self.get_parent_node(id)) {
        .                       Some(Node::Expr(expr)) => match expr.kind {
        .                           ExprKind::Assign(lhs, _rhs, _span) => lhs.hir_id == id,
        .                           _ => false,
        .                       },
-- line 727 ----------------------------------------
-- line 792 ----------------------------------------
        .                   }
        .                   None
        .               }
        .           
        .               /// Retrieves the `HirId` for `id`'s parent item, or `id` itself if no
        .               /// parent item is in this map. The "parent item" is the closest parent node
        .               /// in the HIR which is recorded by the map and is an item, either an item
        .               /// in a module, trait, or impl.
    6,509 ( 0.00%)      pub fn get_parent_item(&self, hir_id: HirId) -> LocalDefId {
   58,773 ( 0.00%)          if let Some((def_id, _node)) = self.parent_owner_iter(hir_id).next() {
        .                       def_id
        .                   } else {
        .                       CRATE_DEF_ID
        .                   }
   13,018 ( 0.00%)      }
        .           
        .               /// Returns the `HirId` of `id`'s nearest module parent, or `id` itself if no
        .               /// module parent is in this map.
        .               pub(super) fn get_module_parent_node(&self, hir_id: HirId) -> LocalDefId {
    6,030 ( 0.00%)          for (def_id, node) in self.parent_owner_iter(hir_id) {
    3,314 ( 0.00%)              if let OwnerNode::Item(&Item { kind: ItemKind::Mod(_), .. }) = node {
        .                           return def_id;
        .                       }
        .                   }
        .                   CRATE_DEF_ID
        .               }
        .           
        .               /// When on an if expression, a match arm tail expression or a match arm, give back
        .               /// the enclosing `if` or `match` expression.
-- line 820 ----------------------------------------
-- line 834 ----------------------------------------
        .                           }
        .                           _ => {}
        .                       }
        .                   }
        .                   None
        .               }
        .           
        .               /// Returns the nearest enclosing scope. A scope is roughly an item or block.
       24 ( 0.00%)      pub fn get_enclosing_scope(&self, hir_id: HirId) -> Option<HirId> {
        9 ( 0.00%)          for (hir_id, node) in self.parent_iter(hir_id) {
       18 ( 0.00%)              if let Node::Item(Item {
        .                           kind:
        .                               ItemKind::Fn(..)
        .                               | ItemKind::Const(..)
        .                               | ItemKind::Static(..)
        .                               | ItemKind::Mod(..)
        .                               | ItemKind::Enum(..)
        .                               | ItemKind::Struct(..)
        .                               | ItemKind::Union(..)
-- line 852 ----------------------------------------
-- line 858 ----------------------------------------
        .                       | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(..), .. })
        .                       | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(..), .. })
        .                       | Node::Block(_) = node
        .                       {
        .                           return Some(hir_id);
        .                       }
        .                   }
        .                   None
       30 ( 0.00%)      }
        .           
        .               /// Returns the defining scope for an opaque type definition.
        .               pub fn get_defining_scope(&self, id: HirId) -> HirId {
        .                   let mut scope = id;
        .                   loop {
        .                       scope = self.get_enclosing_scope(scope).unwrap_or(CRATE_HIR_ID);
        .                       if scope == CRATE_HIR_ID || !matches!(self.get(scope), Node::Block(_)) {
        .                           return scope;
-- line 874 ----------------------------------------
-- line 885 ----------------------------------------
        .                       }
        .                   }
        .                   bug!(
        .                       "expected foreign mod or inlined parent, found {}",
        .                       self.node_to_string(HirId::make_owner(parent))
        .                   )
        .               }
        .           
   30,275 ( 0.00%)      pub fn expect_item(&self, id: LocalDefId) -> &'hir Item<'hir> {
   12,975 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::Item(item), .. }) => item,
        .                       _ => bug!("expected item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
   34,600 ( 0.00%)      }
        .           
    4,564 ( 0.00%)      pub fn expect_impl_item(&self, id: LocalDefId) -> &'hir ImplItem<'hir> {
    1,956 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::ImplItem(item), .. }) => item,
        .                       _ => bug!("expected impl item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
    5,216 ( 0.00%)      }
        .           
       56 ( 0.00%)      pub fn expect_trait_item(&self, id: LocalDefId) -> &'hir TraitItem<'hir> {
       24 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::TraitItem(item), .. }) => item,
        .                       _ => bug!("expected trait item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
       64 ( 0.00%)      }
        .           
        .               pub fn expect_variant(&self, id: HirId) -> &'hir Variant<'hir> {
        .                   match self.find(id) {
        .                       Some(Node::Variant(variant)) => variant,
        .                       _ => bug!("expected variant, found {}", self.node_to_string(id)),
        .                   }
        .               }
        .           
-- line 920 ----------------------------------------
-- line 922 ----------------------------------------
        .                   match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::ForeignItem(item), .. }) => item,
        .                       _ => {
        .                           bug!("expected foreign item, found {}", self.node_to_string(HirId::make_owner(id)))
        .                       }
        .                   }
        .               }
        .           
       56 ( 0.00%)      pub fn expect_expr(&self, id: HirId) -> &'hir Expr<'hir> {
       21 ( 0.00%)          match self.find(id) {
        .                       Some(Node::Expr(expr)) => expr,
        .                       _ => bug!("expected expr, found {}", self.node_to_string(id)),
        .                   }
       49 ( 0.00%)      }
        .           
   22,590 ( 0.00%)      pub fn opt_name(&self, id: HirId) -> Option<Symbol> {
    7,538 ( 0.00%)          Some(match self.get(id) {
        .                       Node::Item(i) => i.ident.name,
        .                       Node::ForeignItem(fi) => fi.ident.name,
        .                       Node::ImplItem(ii) => ii.ident.name,
        .                       Node::TraitItem(ti) => ti.ident.name,
        .                       Node::Variant(v) => v.ident.name,
        .                       Node::Field(f) => f.ident.name,
        .                       Node::Lifetime(lt) => lt.name.ident().name,
    7,518 ( 0.00%)              Node::GenericParam(param) => param.name.ident().name,
        8 ( 0.00%)              Node::Binding(&Pat { kind: PatKind::Binding(_, _, l, _), .. }) => l.name,
        .                       Node::Ctor(..) => self.name(HirId::make_owner(self.get_parent_item(id))),
        .                       _ => return None,
        .                   })
   12,550 ( 0.00%)      }
        .           
   20,064 ( 0.00%)      pub fn name(&self, id: HirId) -> Symbol {
    7,534 ( 0.00%)          match self.opt_name(id) {
        .                       Some(name) => name,
        .                       None => bug!("no name for {}", self.node_to_string(id)),
        .                   }
   15,048 ( 0.00%)      }
        .           
        .               /// Given a node ID, gets a list of attributes associated with the AST
        .               /// corresponding to the node-ID.
1,109,633 ( 0.05%)      pub fn attrs(&self, id: HirId) -> &'hir [ast::Attribute] {
  158,519 ( 0.01%)          self.tcx.hir_attrs(id.owner).get(id.local_id)
1,268,152 ( 0.05%)      }
        .           
        .               /// Gets the span of the definition of the specified HIR node.
        .               /// This is used by `tcx.get_span`
    3,612 ( 0.00%)      pub fn span(&self, hir_id: HirId) -> Span {
   24,904 ( 0.00%)          self.opt_span(hir_id)
        .                       .unwrap_or_else(|| bug!("hir::map::Map::span: id not in map: {:?}", hir_id))
    3,612 ( 0.00%)      }
        .           
   61,495 ( 0.00%)      pub fn opt_span(&self, hir_id: HirId) -> Option<Span> {
   61,495 ( 0.00%)          let span = match self.find(hir_id)? {
        .                       Node::Param(param) => param.span,
    1,944 ( 0.00%)              Node::Item(item) => match &item.kind {
        .                           ItemKind::Fn(sig, _, _) => sig.span,
    1,848 ( 0.00%)                  _ => item.span,
        .                       },
        .                       Node::ForeignItem(foreign_item) => foreign_item.span,
       46 ( 0.00%)              Node::TraitItem(trait_item) => match &trait_item.kind {
       42 ( 0.00%)                  TraitItemKind::Fn(sig, _) => sig.span,
        4 ( 0.00%)                  _ => trait_item.span,
        .                       },
    2,608 ( 0.00%)              Node::ImplItem(impl_item) => match &impl_item.kind {
    2,384 ( 0.00%)                  ImplItemKind::Fn(sig, _) => sig.span,
      224 ( 0.00%)                  _ => impl_item.span,
        .                       },
      108 ( 0.00%)              Node::Variant(variant) => variant.span,
      200 ( 0.00%)              Node::Field(field) => field.span,
      490 ( 0.00%)              Node::AnonConst(constant) => self.body(constant.body).value.span,
        .                       Node::Expr(expr) => expr.span,
        .                       Node::Stmt(stmt) => stmt.span,
        .                       Node::PathSegment(seg) => seg.ident.span,
        .                       Node::Ty(ty) => ty.span,
        .                       Node::TraitRef(tr) => tr.path.span,
        .                       Node::Binding(pat) => pat.span,
        .                       Node::Pat(pat) => pat.span,
        .                       Node::Arm(arm) => arm.span,
        .                       Node::Block(block) => block.span,
      483 ( 0.00%)              Node::Ctor(..) => match self.find(self.get_parent_node(hir_id))? {
        .                           Node::Item(item) => item.span,
        .                           Node::Variant(variant) => variant.span,
        .                           _ => unreachable!(),
        .                       },
        .                       Node::Lifetime(lifetime) => lifetime.span,
        .                       Node::GenericParam(param) => param.span,
        .                       Node::Visibility(&Spanned {
        .                           node: VisibilityKind::Restricted { ref path, .. },
        .                           ..
        .                       }) => path.span,
        .                       Node::Infer(i) => i.span,
        .                       Node::Visibility(v) => bug!("unexpected Visibility {:?}", v),
        .                       Node::Local(local) => local.span,
        4 ( 0.00%)              Node::Crate(item) => item.inner,
        .                   };
        .                   Some(span)
   87,850 ( 0.00%)      }
        .           
        .               /// Like `hir.span()`, but includes the body of function items
        .               /// (instead of just the function header)
        .               pub fn span_with_body(&self, hir_id: HirId) -> Span {
        .                   match self.find(hir_id) {
        .                       Some(Node::TraitItem(item)) => item.span,
        .                       Some(Node::ImplItem(impl_item)) => impl_item.span,
        .                       Some(Node::Item(item)) => item.span,
        .                       Some(_) => self.span(hir_id),
        .                       _ => bug!("hir::map::Map::span_with_body: id not in map: {:?}", hir_id),
        .                   }
        .               }
        .           
      524 ( 0.00%)      pub fn span_if_local(&self, id: DefId) -> Option<Span> {
    3,280 ( 0.00%)          id.as_local().and_then(|id| self.opt_span(self.local_def_id_to_hir_id(id)))
      786 ( 0.00%)      }
        .           
        .               pub fn res_span(&self, res: Res) -> Option<Span> {
        .                   match res {
        .                       Res::Err => None,
        .                       Res::Local(id) => Some(self.span(id)),
        .                       res => self.span_if_local(res.opt_def_id()?),
        .                   }
        .               }
-- line 1042 ----------------------------------------
-- line 1062 ----------------------------------------
        .           }
        .           
        .           impl<'hir> intravisit::Map<'hir> for Map<'hir> {
        .               fn find(&self, hir_id: HirId) -> Option<Node<'hir>> {
        .                   self.find(hir_id)
        .               }
        .           
        .               fn body(&self, id: BodyId) -> &'hir Body<'hir> {
    7,312 ( 0.00%)          self.body(id)
        .               }
        .           
        .               fn item(&self, id: ItemId) -> &'hir Item<'hir> {
   10,987 ( 0.00%)          self.item(id)
        .               }
        .           
        .               fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
       60 ( 0.00%)          self.trait_item(id)
        .               }
        .           
        .               fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
    4,564 ( 0.00%)          self.impl_item(id)
        .               }
        .           
        .               fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
        .                   self.foreign_item(id)
        .               }
        .           }
        .           
        7 ( 0.00%)  pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {
        .               debug_assert_eq!(crate_num, LOCAL_CRATE);
        .               let krate = tcx.hir_crate(());
        3 ( 0.00%)      let hir_body_hash = krate.hir_hash;
        .           
        .               let upstream_crates = upstream_crates(tcx);
        .           
        .               // We hash the final, remapped names of all local source files so we
        .               // don't have to include the path prefix remapping commandline args.
        .               // If we included the full mapping in the SVH, we could only have
        .               // reproducible builds by compiling from the same directory. So we just
        .               // hash the result of the mapping instead of the mapping itself.
        2 ( 0.00%)      let mut source_file_names: Vec<_> = tcx
        .                   .sess
        .                   .source_map()
        .                   .files()
        .                   .iter()
        .                   .filter(|source_file| source_file.cnum == LOCAL_CRATE)
       80 ( 0.00%)          .map(|source_file| source_file.name_hash)
        .                   .collect();
        .           
        .               source_file_names.sort_unstable();
        .           
        .               let mut hcx = tcx.create_stable_hashing_context();
        .               let mut stable_hasher = StableHasher::new();
        .               hir_body_hash.hash_stable(&mut hcx, &mut stable_hasher);
        .               upstream_crates.hash_stable(&mut hcx, &mut stable_hasher);
        .               source_file_names.hash_stable(&mut hcx, &mut stable_hasher);
        3 ( 0.00%)      if tcx.sess.opts.debugging_opts.incremental_relative_spans {
        .                   let definitions = &tcx.untracked_resolutions.definitions;
        .                   let mut owner_spans: Vec<_> = krate
        .                       .owners
        .                       .iter_enumerated()
        .                       .filter_map(|(def_id, info)| {
        .                           let _ = info.as_ref()?;
        .                           let def_path_hash = definitions.def_path_hash(def_id);
        .                           let span = definitions.def_span(def_id);
        .                           debug_assert_eq!(span.parent(), None);
        .                           Some((def_path_hash, span))
        .                       })
        .                       .collect();
        .                   owner_spans.sort_unstable_by_key(|bn| bn.0);
        .                   owner_spans.hash_stable(&mut hcx, &mut stable_hasher);
        .               }
        3 ( 0.00%)      tcx.sess.opts.dep_tracking_hash(true).hash_stable(&mut hcx, &mut stable_hasher);
        2 ( 0.00%)      tcx.sess.local_stable_crate_id().hash_stable(&mut hcx, &mut stable_hasher);
        .           
        .               let crate_hash: Fingerprint = stable_hasher.finish();
        1 ( 0.00%)      Svh::new(crate_hash.to_smaller_hash())
        9 ( 0.00%)  }
        .           
        .           fn upstream_crates(tcx: TyCtxt<'_>) -> Vec<(StableCrateId, Svh)> {
        .               let mut upstream_crates: Vec<_> = tcx
        .                   .crates(())
        .                   .iter()
        .                   .map(|&cnum| {
      135 ( 0.00%)              let stable_crate_id = tcx.resolutions(()).cstore.stable_crate_id(cnum);
       27 ( 0.00%)              let hash = tcx.crate_hash(cnum);
        .                       (stable_crate_id, hash)
        .                   })
        .                   .collect();
        .               upstream_crates.sort_unstable_by_key(|&(stable_crate_id, _)| stable_crate_id);
        .               upstream_crates
        .           }
        .           
        .           fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {
-- line 1155 ----------------------------------------
-- line 1238 ----------------------------------------
        .                   Some(Node::Lifetime(_)) => node_str("lifetime"),
        .                   Some(Node::GenericParam(ref param)) => format!("generic_param {:?}{}", param, id_str),
        .                   Some(Node::Visibility(ref vis)) => format!("visibility {:?}{}", vis, id_str),
        .                   Some(Node::Crate(..)) => String::from("root_crate"),
        .                   None => format!("unknown node{}", id_str),
        .               }
        .           }
        .           
      243 ( 0.00%)  pub(super) fn hir_module_items(tcx: TyCtxt<'_>, module_id: LocalDefId) -> ModuleItems {
      162 ( 0.00%)      let mut collector = ModuleCollector {
        .                   tcx,
        .                   submodules: Vec::default(),
        .                   items: Vec::default(),
        .                   trait_items: Vec::default(),
        .                   impl_items: Vec::default(),
        .                   foreign_items: Vec::default(),
        .               };
        .           
      135 ( 0.00%)      let (hir_mod, span, hir_id) = tcx.hir().get_module(module_id);
        .               collector.visit_mod(hir_mod, span, hir_id);
        .           
      432 ( 0.00%)      let ModuleCollector { submodules, items, trait_items, impl_items, foreign_items, .. } =
        .                   collector;
      297 ( 0.00%)      return ModuleItems {
      108 ( 0.00%)          submodules: submodules.into_boxed_slice(),
      108 ( 0.00%)          items: items.into_boxed_slice(),
      108 ( 0.00%)          trait_items: trait_items.into_boxed_slice(),
      108 ( 0.00%)          impl_items: impl_items.into_boxed_slice(),
      108 ( 0.00%)          foreign_items: foreign_items.into_boxed_slice(),
        .               };
        .           
        .               struct ModuleCollector<'tcx> {
        .                   tcx: TyCtxt<'tcx>,
        .                   submodules: Vec<LocalDefId>,
        .                   items: Vec<ItemId>,
        .                   trait_items: Vec<TraitItemId>,
        .                   impl_items: Vec<ImplItemId>,
        .                   foreign_items: Vec<ForeignItemId>,
        .               }
        .           
        .               impl<'hir> Visitor<'hir> for ModuleCollector<'hir> {
        .                   type NestedFilter = nested_filter::All;
        .           
        .                   fn nested_visit_map(&mut self) -> Self::Map {
    1,517 ( 0.00%)              self.tcx.hir()
        .                   }
        .           
    4,235 ( 0.00%)          fn visit_item(&mut self, item: &'hir Item<'hir>) {
    2,541 ( 0.00%)              self.items.push(item.item_id());
    1,694 ( 0.00%)              if let ItemKind::Mod(..) = item.kind {
        .                           // If this declares another module, do not recurse inside it.
       26 ( 0.00%)                  self.submodules.push(item.def_id);
        .                       } else {
    4,926 ( 0.00%)                  intravisit::walk_item(self, item)
        .                       }
      104 ( 0.00%)          }
        .           
        .                   fn visit_trait_item(&mut self, item: &'hir TraitItem<'hir>) {
       12 ( 0.00%)              self.trait_items.push(item.trait_item_id());
       12 ( 0.00%)              intravisit::walk_trait_item(self, item)
        .                   }
        .           
        .                   fn visit_impl_item(&mut self, item: &'hir ImplItem<'hir>) {
      978 ( 0.00%)              self.impl_items.push(item.impl_item_id());
      978 ( 0.00%)              intravisit::walk_impl_item(self, item)
        .                   }
        .           
        .                   fn visit_foreign_item(&mut self, item: &'hir ForeignItem<'hir>) {
        .                       self.foreign_items.push(item.foreign_item_id());
        .                       intravisit::walk_foreign_item(self, item)
        .                   }
        .               }
      216 ( 0.00%)  }

  488,442 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 91 ----------------------------------------
        .           // maximum of number bytes needed to fill an 8-byte-sized element on which
        .           // SipHash operates. Note that for variable-sized copies which are known to be
        .           // less than 8 bytes, this function will perform more work than necessary unless
        .           // the compiler is able to optimize the extra work away.
        .           #[inline]
        .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
        .               debug_assert!(count <= 8);
        .           
   47,617 ( 0.00%)      if count == 8 {
        .                   ptr::copy_nonoverlapping(src, dst, 8);
        .                   return;
        .               }
        .           
        .               let mut i = 0;
   56,412 ( 0.00%)      if i + 3 < count {
        .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
        .                   i += 4;
        .               }
        .           
  121,730 ( 0.00%)      if i + 1 < count {
        .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
   12,686 ( 0.00%)          i += 2
        .               }
        .           
   56,412 ( 0.00%)      if i < count {
   42,679 ( 0.00%)          *dst.add(i) = *src.add(i);
        .                   i += 1;
        .               }
        .           
        .               debug_assert_eq!(i, count);
        .           }
        .           
        .           // # Implementation
        .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
        .           
        .                   hasher
        .               }
        .           
        .               // A specialized write function for values with size <= 8.
        .               #[inline]
        .               fn short_write<T>(&mut self, x: T) {
        .                   let size = mem::size_of::<T>();
  627,822 ( 0.03%)          let nbuf = self.nbuf;
        .                   debug_assert!(size <= 8);
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
        .           
4,188,041 ( 0.17%)          if nbuf + size < BUFFER_SIZE {
        .                       unsafe {
        .                           // The memcpy call is optimized away because the size is known.
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
        .                       }
        .           
1,305,184 ( 0.05%)              self.nbuf = nbuf + size;
        .           
        .                       return;
        .                   }
        .           
  209,113 ( 0.01%)          unsafe { self.short_write_process_buffer(x) }
        .               }
        .           
        .               // A specialized write function for values with size <= 8 that should only
        .               // be called when the write would cause the buffer to fill.
        .               //
        .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
        .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
        .               // overflow) if it wasn't already.
        .               #[inline(never)]
   63,941 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
        .                   let size = mem::size_of::<T>();
   63,941 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(size <= 8);
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
        .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
        .           
        .                   // Copy first part of input into end of buffer, possibly into spill
        .                   // element. The memcpy call is optimized away because the size is known.
        .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
        .           
        .                   // Process buffer.
        .                   for i in 0..BUFFER_CAPACITY {
  639,410 ( 0.03%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
  511,528 ( 0.02%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
  575,469 ( 0.02%)              self.state.v0 ^= elem;
        .                   }
        .           
        .                   // Copy remaining input into start of buffer by copying size - 1
        .                   // elements from spill (at most size - 1 bytes could have overflowed
        .                   // into the spill). The memcpy call is optimized away because the size
        .                   // is known. And the whole copy is optimized away for size == 1.
        .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
        .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
        .           
        .                   // This function should only be called when the write fills the buffer.
        .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
        .                   // is statically known, so the branch is optimized away.
  301,933 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
  255,764 ( 0.01%)          self.processed += BUFFER_SIZE;
  127,882 ( 0.01%)      }
        .           
        .               // A write function for byte slices.
        .               #[inline]
        .               fn slice_write(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
   10,803 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .           
  167,224 ( 0.01%)          if nbuf + length < BUFFER_SIZE {
        .                       unsafe {
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .           
   61,166 ( 0.00%)                  if length <= 8 {
        .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
        .                           } else {
        .                               // This memcpy is *not* optimized away.
        .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
        .                           }
        .                       }
        .           
   30,815 ( 0.00%)              self.nbuf = nbuf + length;
        .           
        .                       return;
        .                   }
        .           
   21,080 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
        .               }
        .           
        .               // A write function for byte slices that should only be called when the
        .               // write would cause the buffer to fill.
        .               //
        .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
        .               // and `msg` must contain enough bytes to initialize the rest of the element
        .               // containing the byte offset `self.nbuf`.
        .               #[inline(never)]
   13,215 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
    2,643 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
        .           
        .                   // Always copy first part of input into current element of buffer.
        .                   // This function should only be called when the write fills the buffer,
        .                   // so we know that there is enough input to fill the current element.
    7,929 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
    2,643 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
        .           
        .                   let src = msg.as_ptr();
        .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
        .           
        .                   // Process buffer.
        .           
        .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
        .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
        .                   // We know that is true, because last step ensured we have a full
        .                   // element in the buffer.
    5,286 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
        .           
        .                   for i in 0..last {
   19,908 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
   22,551 ( 0.00%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
   39,816 ( 0.00%)              self.state.v0 ^= elem;
        .                   }
        .           
        .                   // Process the remaining element-sized chunks of input.
        .                   let mut processed = needed_in_elem;
    5,286 ( 0.00%)          let input_left = length - processed;
    3,732 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
        .                   let extra_bytes_left = input_left % ELEM_SIZE;
        .           
        .                   for _ in 0..elems_left {
    1,985 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
    1,985 ( 0.00%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
    1,985 ( 0.00%)              self.state.v0 ^= elem;
    3,970 ( 0.00%)              processed += ELEM_SIZE;
        .                   }
        .           
        .                   // Copy remaining input into start of buffer.
        .                   let src = msg.as_ptr().add(processed);
        .                   let dst = self.buf.as_mut_ptr() as *mut u8;
        .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
        .           
    2,643 ( 0.00%)          self.nbuf = extra_bytes_left;
   13,215 ( 0.00%)          self.processed += nbuf + processed;
   15,858 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn finish128(mut self) -> (u64, u64) {
        .                   debug_assert!(self.nbuf < BUFFER_SIZE);
        .           
        .                   // Process full elements in buffer.
   31,410 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
        .           
        .                   // Since we're consuming self, avoid updating members for a potential
        .                   // performance gain.
   41,880 ( 0.00%)          let mut state = self.state;
        .           
        .                   for i in 0..last {
   29,514 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
   29,514 ( 0.00%)              state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut state);
   29,514 ( 0.00%)              state.v0 ^= elem;
        .                   }
        .           
        .                   // Get remaining partial element.
   20,940 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
        .                       unsafe {
        .                           // Ensure element is initialized by writing zero bytes. At most
        .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
        .                           // to write this many because we have the spill and we maintain
        .                           // `self.nbuf` such that this write will start before the spill.
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
        .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
    8,612 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
        .                       }
        .                   } else {
        .                       0
        .                   };
        .           
        .                   // Finalize the hash.
   29,144 ( 0.00%)          let length = self.processed + self.nbuf;
   20,122 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
        .           
   10,061 ( 0.00%)          state.v3 ^= b;
        .                   Sip24Rounds::c_rounds(&mut state);
   10,061 ( 0.00%)          state.v0 ^= b;
        .           
   10,061 ( 0.00%)          state.v2 ^= 0xee;
        .                   Sip24Rounds::d_rounds(&mut state);
   33,726 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
        .           
   13,602 ( 0.00%)          state.v1 ^= 0xdd;
        .                   Sip24Rounds::d_rounds(&mut state);
   13,602 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
        .           
        .                   (_0, _1)
        .               }
        .           }
        .           
        .           impl Hasher for SipHasher128 {
        .               #[inline]
        .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
        .           }
        .           
        .           #[derive(Debug, Clone, Default)]
        .           struct Sip24Rounds;
        .           
        .           impl Sip24Rounds {
        .               #[inline]
        .               fn c_rounds(state: &mut State) {
2,363,854 ( 0.10%)          compress!(state);
2,543,531 ( 0.10%)          compress!(state);
        .               }
        .           
        .               #[inline]
        .               fn d_rounds(state: &mut State) {
   67,448 ( 0.00%)          compress!(state);
   67,448 ( 0.00%)          compress!(state);
   67,448 ( 0.00%)          compress!(state);
   57,388 ( 0.00%)          compress!(state);
        .               }
        .           }

  517,309 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir                 

-- line 5 ----------------------------------------
        .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
        .           unsafe impl GlobalAlloc for System {
        .               #[inline]
        .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
        .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
        .                   // So only rely on MIN_ALIGN if size >= align.
        .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
        .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
2,724,946 ( 0.11%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
2,043,708 ( 0.08%)              libc::malloc(layout.size()) as *mut u8
        .                   } else {
        .                       #[cfg(target_os = "macos")]
        .                       {
        .                           if layout.align() > (1 << 31) {
        .                               return ptr::null_mut();
        .                           }
        .                       }
        .                       aligned_malloc(&layout)
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
        .                   // See the comment above in `alloc` for why this check looks the way it does.
  135,612 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
  203,418 ( 0.01%)              libc::calloc(layout.size(), 1) as *mut u8
        .                   } else {
        .                       let ptr = self.alloc(layout);
        .                       if !ptr.is_null() {
        .                           ptr::write_bytes(ptr, 0, layout.size());
        .                       }
        .                       ptr
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
  715,129 ( 0.03%)          libc::free(ptr as *mut libc::c_void)
        .               }
        .           
        .               #[inline]
        .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
  288,464 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
  576,928 ( 0.02%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
        .                   } else {
        .                       realloc_fallback(self, ptr, layout, new_size)
        .                   }
        .               }
        .           }
        .           
        .           cfg_if::cfg_if! {
        .               if #[cfg(any(
-- line 56 ----------------------------------------
-- line 84 ----------------------------------------
        .               } else if #[cfg(target_os = "wasi")] {
        .                   #[inline]
        .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
        .                       libc::aligned_alloc(layout.align(), layout.size()) as *mut u8
        .                   }
        .               } else {
        .                   #[inline]
        .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
        1 ( 0.00%)              let mut out = ptr::null_mut();
        .                       // posix_memalign requires that the alignment be a multiple of `sizeof(void*)`.
        .                       // Since these are all powers of 2, we can just use max.
        .                       let align = layout.align().max(crate::mem::size_of::<usize>());
        2 ( 0.00%)              let ret = libc::posix_memalign(&mut out, align, layout.size());
        2 ( 0.00%)              if ret != 0 { ptr::null_mut() } else { out as *mut u8 }
        .                   }
        .               }
        .           }

        1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs
--------------------------------------------------------------------------------
Ir                 

-- line 10 ----------------------------------------
        .           pub fn move_path_children_matching<'tcx, F>(
        .               move_data: &MoveData<'tcx>,
        .               path: MovePathIndex,
        .               mut cond: F,
        .           ) -> Option<MovePathIndex>
        .           where
        .               F: FnMut(mir::PlaceElem<'tcx>) -> bool,
        .           {
        4 ( 0.00%)      let mut next_child = move_data.move_paths[path].first_child;
       12 ( 0.00%)      while let Some(child_index) = next_child {
        .                   let move_path_children = &move_data.move_paths[child_index];
        8 ( 0.00%)          if let Some(&elem) = move_path_children.place.projection.last() {
       10 ( 0.00%)              if cond(elem) {
        .                           return Some(child_index);
        .                       }
        .                   }
        .                   next_child = move_path_children.next_sibling;
        .               }
        .           
        .               None
        .           }
-- line 30 ----------------------------------------
-- line 48 ----------------------------------------
        .           //
        .           // FIXME: we have to do something for moving slice patterns.
        .           fn place_contents_drop_state_cannot_differ<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               place: mir::Place<'tcx>,
        .           ) -> bool {
        .               let ty = place.ty(body, tcx).ty;
  628,272 ( 0.03%)      match ty.kind() {
        .                   ty::Array(..) => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} => false",
        .                           place, ty
        .                       );
        .                       false
        .                   }
        .                   ty::Slice(..) | ty::Ref(..) | ty::RawPtr(..) => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} refd => true",
        .                           place, ty
        .                       );
        .                       true
        .                   }
   92,637 ( 0.00%)          ty::Adt(def, _) if (def.has_dtor(tcx) && !def.is_box()) || def.is_union() => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} Drop => true",
        .                           place, ty
        .                       );
        .                       true
        .                   }
        .                   _ => false,
        .               }
-- line 79 ----------------------------------------
-- line 83 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               lookup_result: LookupResult,
        .               each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
   24,398 ( 0.00%)      match lookup_result {
        .                   LookupResult::Parent(..) => {
        .                       // access to untracked value - do not touch children
        .                   }
        .                   LookupResult::Exact(e) => on_all_children_bits(tcx, body, move_data, e, each_child),
        .               }
        .           }
        .           
        .           pub fn on_all_children_bits<'tcx, F>(
-- line 99 ----------------------------------------
-- line 100 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               move_path_index: MovePathIndex,
        .               mut each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
  942,528 ( 0.04%)      fn is_terminal_path<'tcx>(
        .                   tcx: TyCtxt<'tcx>,
        .                   body: &Body<'tcx>,
        .                   move_data: &MoveData<'tcx>,
        .                   path: MovePathIndex,
        .               ) -> bool {
  235,632 ( 0.01%)          place_contents_drop_state_cannot_differ(tcx, body, move_data.move_paths[path].place)
  942,528 ( 0.04%)      }
        .           
1,154,136 ( 0.05%)      fn on_all_children_bits<'tcx, F>(
        .                   tcx: TyCtxt<'tcx>,
        .                   body: &Body<'tcx>,
        .                   move_data: &MoveData<'tcx>,
        .                   move_path_index: MovePathIndex,
        .                   each_child: &mut F,
        .               ) where
        .                   F: FnMut(MovePathIndex),
        .               {
   35,847 ( 0.00%)          each_child(move_path_index);
        .           
  824,779 ( 0.03%)          if is_terminal_path(tcx, body, move_data, move_path_index) {
        .                       return;
        .                   }
        .           
   78,280 ( 0.00%)          let mut next_child_index = move_data.move_paths[move_path_index].first_child;
  160,656 ( 0.01%)          while let Some(child_index) = next_child_index {
    7,812 ( 0.00%)              on_all_children_bits(tcx, body, move_data, child_index, each_child);
    1,302 ( 0.00%)              next_child_index = move_data.move_paths[child_index].next_sibling;
        .                   }
  909,160 ( 0.04%)      }
  687,860 ( 0.03%)      on_all_children_bits(tcx, body, move_data, move_path_index, &mut each_child);
        .           }
        .           
        .           pub fn on_all_drop_children_bits<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               path: MovePathIndex,
        .               mut each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
    1,260 ( 0.00%)      on_all_children_bits(tcx, body, &ctxt.move_data, path, |child| {
      628 ( 0.00%)          let place = &ctxt.move_data.move_paths[path].place;
      157 ( 0.00%)          let ty = place.ty(body, tcx).ty;
        .                   debug!("on_all_drop_children_bits({:?}, {:?} : {:?})", path, place, ty);
        .           
       12 ( 0.00%)          let erased_ty = tcx.erase_regions(ty);
      962 ( 0.00%)          if erased_ty.needs_drop(tcx, ctxt.param_env) {
      156 ( 0.00%)              each_child(child);
        .                   } else {
        .                       debug!("on_all_drop_children_bits - skipping")
        .                   }
        .               })
        .           }
        .           
   24,679 ( 0.00%)  pub fn drop_flag_effects_for_function_entry<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex, DropFlagState),
        .           {
        .               let move_data = &ctxt.move_data;
    2,210 ( 0.00%)      for arg in body.args_iter() {
    6,168 ( 0.00%)          let place = mir::Place::from(arg);
    9,252 ( 0.00%)          let lookup_result = move_data.rev_lookup.find(place.as_ref());
        .                   on_lookup_result_bits(tcx, body, move_data, lookup_result, |mpi| {
    3,084 ( 0.00%)              callback(mpi, DropFlagState::Present)
        .                   });
        .               }
   17,680 ( 0.00%)  }
        .           
1,399,167 ( 0.06%)  pub fn drop_flag_effects_for_location<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               loc: Location,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex, DropFlagState),
        .           {
        .               let move_data = &ctxt.move_data;
        .               debug!("drop_flag_effects_for_location({:?})", loc);
        .           
        .               // first, move out of the RHS
   59,478 ( 0.00%)      for mi in &move_data.loc_map[loc] {
  266,694 ( 0.01%)          let path = mi.move_path_index(move_data);
        .                   debug!("moving out of path {:?}", move_data.move_paths[path]);
        .           
   69,273 ( 0.00%)          on_all_children_bits(tcx, body, move_data, path, |mpi| callback(mpi, DropFlagState::Absent))
        .               }
        .           
        .               debug!("drop_flag_effects: assignment for location({:?})", loc);
        .           
   35,847 ( 0.00%)      for_location_inits(tcx, body, move_data, loc, |mpi| callback(mpi, DropFlagState::Present));
1,085,096 ( 0.04%)  }
        .           
        .           pub fn for_location_inits<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               loc: Location,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
   59,478 ( 0.00%)      for ii in &move_data.init_loc_map[loc] {
  176,064 ( 0.01%)          let init = move_data.inits[*ii];
  106,358 ( 0.00%)          match init.kind {
        .                       InitKind::Deep => {
        .                           let path = init.path;
        .           
        .                           on_all_children_bits(tcx, body, move_data, path, &mut callback)
        .                       }
        .                       InitKind::Shallow => {
        .                           let mpi = init.path;
        .                           callback(mpi);
-- line 226 ----------------------------------------
-- line 230 ----------------------------------------
        .               }
        .           }
        .           
        .           /// Calls `handle_inactive_variant` for each descendant move path of `enum_place` that contains a
        .           /// `Downcast` to a variant besides the `active_variant`.
        .           ///
        .           /// NOTE: If there are no move paths corresponding to an inactive variant,
        .           /// `handle_inactive_variant` will not be called for that variant.
    7,584 ( 0.00%)  pub(crate) fn on_all_inactive_variants<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &mir::Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               enum_place: mir::Place<'tcx>,
        .               active_variant: VariantIdx,
        .               mut handle_inactive_variant: impl FnMut(MovePathIndex),
        .           ) {
    3,160 ( 0.00%)      let enum_mpi = match move_data.rev_lookup.find(enum_place.as_ref()) {
        .                   LookupResult::Exact(mpi) => mpi,
        .                   LookupResult::Parent(_) => return,
        .               };
        .           
        .               let enum_path = &move_data.move_paths[enum_mpi];
      852 ( 0.00%)      for (variant_mpi, variant_path) in enum_path.children(&move_data.move_paths) {
        .                   // Because of the way we build the `MoveData` tree, each child should have exactly one more
        .                   // projection than `enum_place`. This additional projection must be a downcast since the
        .                   // base is an enum.
       42 ( 0.00%)          let (downcast, base_proj) = variant_path.place.projection.split_last().unwrap();
      168 ( 0.00%)          assert_eq!(enum_place.projection.len(), base_proj.len());
        .           
      126 ( 0.00%)          let variant_idx = match *downcast {
        .                       mir::ProjectionElem::Downcast(_, idx) => idx,
        .                       _ => unreachable!(),
        .                   };
        .           
       42 ( 0.00%)          if variant_idx != active_variant {
        .                       on_all_children_bits(tcx, body, move_data, variant_mpi, |mpi| {
       49 ( 0.00%)                  handle_inactive_variant(mpi)
        .                       });
        .                   }
        .               }
    5,056 ( 0.00%)  }

  723,972 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 111 ----------------------------------------
         .           const EMPTY: u8 = 0b1111_1111;
         .           
         .           /// Control byte value for a deleted bucket.
         .           const DELETED: u8 = 0b1000_0000;
         .           
         .           /// Checks whether a control byte represents a full bucket (top bit is clear).
         .           #[inline]
         .           fn is_full(ctrl: u8) -> bool {
 1,930,383 ( 0.08%)      ctrl & 0x80 == 0
         .           }
         .           
         .           /// Checks whether a control byte represents a special value (top bit is set).
         .           #[inline]
         .           fn is_special(ctrl: u8) -> bool {
         .               ctrl & 0x80 != 0
         .           }
         .           
         .           /// Checks whether a special control value is EMPTY (just check 1 bit).
         .           #[inline]
         .           fn special_is_empty(ctrl: u8) -> bool {
         .               debug_assert!(is_special(ctrl));
   147,670 ( 0.01%)      ctrl & 0x01 != 0
         .           }
         .           
         .           /// Primary hash function, used to select the initial bucket to probe from.
         .           #[inline]
         .           #[allow(clippy::cast_possible_truncation)]
         .           fn h1(hash: u64) -> usize {
         .               // On 32-bit platforms we simply ignore the higher hash bits.
         .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
         .           /// Secondary hash function, saved in the low 7 bits of the control byte.
         .           #[inline]
         .           #[allow(clippy::cast_possible_truncation)]
         .           fn h2(hash: u64) -> u8 {
         .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
         .               // value, some hash functions (such as FxHash) produce a usize result
         .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
         .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
30,854,635 ( 1.25%)      let top7 = hash >> (hash_len * 8 - 7);
         .               (top7 & 0x7f) as u8 // truncation
         .           }
         .           
         .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
         .           /// table size is a power of two) to visit every group of elements exactly once.
         .           ///
         .           /// A triangular probe has us jump by 1 more group every time. So first we
         .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
         .               #[inline]
         .               fn move_next(&mut self, bucket_mask: usize) {
         .                   // We should have found an empty bucket by now and ended the probe.
         .                   debug_assert!(
         .                       self.stride <= bucket_mask,
         .                       "Went past end of probe sequence"
         .                   );
         .           
   195,590 ( 0.01%)          self.stride += Group::WIDTH;
   195,590 ( 0.01%)          self.pos += self.stride;
   159,378 ( 0.01%)          self.pos &= bucket_mask;
         .               }
         .           }
         .           
         .           /// Returns the number of buckets needed to hold the given number of items,
         .           /// taking the maximum load factor into account.
         .           ///
         .           /// Returns `None` if an overflow occurs.
         .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
         .           #[cfg_attr(target_os = "emscripten", inline(never))]
         .           #[cfg_attr(not(target_os = "emscripten"), inline)]
         .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
         .               debug_assert_ne!(cap, 0);
         .           
         .               // For small tables we require at least 1 empty bucket so that lookups are
         .               // guaranteed to terminate if an element doesn't exist in the table.
   141,692 ( 0.01%)      if cap < 8 {
         .                   // We don't bother with a table size of 2 buckets since that can only
         .                   // hold a single element. Instead we skip directly to a 4 bucket table
         .                   // which can hold 3 elements.
   292,235 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
         .               }
         .           
         .               // Otherwise require 1/8 buckets to be empty (87.5% load)
         .               //
         .               // Be careful when modifying this, calculate_layout relies on the
         .               // overflow check here.
    74,394 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
         .           
         .               // Any overflows will have been caught by the checked_mul. Also, any
         .               // rounding errors from the division above will be cleaned up by
         .               // next_power_of_two (which can't overflow because of the previous division).
         .               Some(adjusted_cap.next_power_of_two())
         .           }
         .           
         .           /// Returns the maximum effective capacity for the given bucket mask, taking
         .           /// the maximum load factor into account.
         .           #[inline]
         .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
   368,822 ( 0.01%)      if bucket_mask < 8 {
         .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
         .                   // Keep in mind that the bucket mask is one less than the bucket count.
         .                   bucket_mask
         .               } else {
         .                   // For larger tables we reserve 12.5% of the slots as empty.
    92,172 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
         .               }
         .           }
         .           
         .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
         .           /// while keeping the rest of `calculate_layout_for` independent of `T`
         .           #[derive(Copy, Clone)]
         .           struct TableLayout {
         .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
         .           
         .               #[inline]
         .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   let TableLayout { size, ctrl_align } = self;
         .                   // Manual layout calculation since Layout methods are not yet stable.
         .                   let ctrl_offset =
   290,217 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
   387,505 ( 0.02%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
         .           
         .                   Some((
         .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
         .                       ctrl_offset,
         .                   ))
         .               }
         .           }
         .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub unsafe fn drop(&self) {
         .                   self.as_ptr().drop_in_place();
         .               }
         .               #[inline]
         .               pub unsafe fn read(&self) -> T {
     1,034 ( 0.00%)          self.as_ptr().read()
         .               }
         .               #[inline]
         .               pub unsafe fn write(&self, val: T) {
         .                   self.as_ptr().write(val);
         .               }
         .               #[inline]
         .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
         .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
         .               /// Creates a new empty hash table without allocating any memory, using the
         .               /// given allocator.
         .               ///
         .               /// In effect this returns a table with exactly 1 bucket. However we can
         .               /// leave the data pointer dangling since that bucket is never written to
         .               /// due to our load factor forcing us to always have at least 1 free bucket.
         .               #[inline]
         .               pub fn new_in(alloc: A) -> Self {
       867 ( 0.00%)          Self {
         .                       table: RawTableInner::new_in(alloc),
         .                       marker: PhantomData,
         .                   }
         .               }
         .           
         .               /// Allocates a new hash table with the given number of buckets.
         .               ///
         .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
         .               unsafe fn new_uninitialized(
         .                   alloc: A,
         .                   buckets: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   Ok(Self {
       130 ( 0.00%)              table: RawTableInner::new_uninitialized(
         .                           alloc,
         .                           TableLayout::new::<T>(),
         .                           buckets,
         .                           fallibility,
         .                       )?,
         .                       marker: PhantomData,
         .                   })
         .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
         .               /// Attempts to allocate a new hash table with at least enough capacity
         .               /// for inserting the given number of elements without reallocating.
         .               fn fallible_with_capacity(
         .                   alloc: A,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   Ok(Self {
    23,874 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
         .                           alloc,
         .                           TableLayout::new::<T>(),
         .                           capacity,
         .                           fallibility,
         .                       )?,
         .                       marker: PhantomData,
         .                   })
         .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
         .                   debug_assert_ne!(self.table.bucket_mask, 0);
         .                   debug_assert!(index < self.buckets());
         .                   Bucket::from_base_index(self.data_end(), index)
         .               }
         .           
         .               /// Erases an element from the table without dropping it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    23,877 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    23,877 ( 0.00%)          let index = self.bucket_index(item);
         .                   self.table.erase(index);
    47,754 ( 0.00%)      }
         .           
         .               /// Erases an element from the table, dropping it in place.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::needless_pass_by_value)]
         .               #[allow(deprecated)]
         .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
         .                   // Erase the element from the table first since drop might panic.
    11,816 ( 0.00%)          self.erase_no_drop(&item);
         .                   item.drop();
         .               }
         .           
         .               /// Finds and erases an element from the table, dropping it in place.
         .               /// Returns true if an element was found.
         .               #[cfg(feature = "raw")]
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// Removes an element from the table, returning it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::needless_pass_by_value)]
         .               #[allow(deprecated)]
         .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    35,938 ( 0.00%)          self.erase_no_drop(&item);
       388 ( 0.00%)          item.read()
         .               }
         .           
         .               /// Finds and removes an element from the table, returning it.
         .               #[cfg_attr(feature = "inline-more", inline)]
   778,506 ( 0.03%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
     1,930 ( 0.00%)          match self.find(hash, eq) {
    10,034 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
   168,503 ( 0.01%)              None => None,
         .                   }
 1,100,255 ( 0.04%)      }
         .           
         .               /// Marks all table buckets as empty without dropping their contents.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn clear_no_drop(&mut self) {
         .                   self.table.clear_no_drop();
         .               }
         .           
         .               /// Removes all elements from the table without freeing the backing memory.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn clear(&mut self) {
         .                   // Ensure that the table is reset even if one of the drops panic
         .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
         .                   unsafe {
         1 ( 0.00%)              self_.drop_elements();
         .                   }
         .               }
         .           
         7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
    13,816 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
         .                       for item in self.iter() {
         .                           item.drop();
         .                       }
         .                   }
         8 ( 0.00%)      }
         .           
         .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
         .                   // Calculate the minimal number of elements that we need to reserve
         .                   // space for.
         .                   let min_size = usize::max(self.table.items, min_size);
         .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Ensures that at least `additional` items can be inserted into the table
         .               /// without reallocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
   388,900 ( 0.02%)          if additional > self.table.growth_left {
         .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
   235,184 ( 0.01%)              if self
         .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
         .                           .is_err()
         .                       {
         .                           unsafe { hint::unreachable_unchecked() }
         .                       }
         .                   }
         .               }
         .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
         .                   } else {
         .                       Ok(())
         .                   }
         .               }
         .           
         .               /// Out-of-line slow path for `reserve` and `try_reserve`.
         .               #[cold]
         .               #[inline(never)]
   550,194 ( 0.02%)      fn reserve_rehash(
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: impl Fn(&T) -> u64,
         .                   fallibility: Fallibility,
         .               ) -> Result<(), TryReserveError> {
         .                   unsafe {
         .                       self.table.reserve_rehash_inner(
         .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
         .                           TableLayout::new::<T>(),
         .                           if mem::needs_drop::<T>() {
         .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
         .                           } else {
         .                               None
         .                           },
         .                       )
         .                   }
   365,112 ( 0.01%)      }
         .           
         .               /// Allocates a new table of a different size and moves the contents of the
         .               /// current table into it.
         .               fn resize(
         .                   &mut self,
         .                   capacity: usize,
         .                   hasher: impl Fn(&T) -> u64,
         .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
         .                       )
         .                   }
         .               }
         .           
         .               /// Inserts a new element into the table, and returns its raw bucket.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
 2,799,008 ( 0.11%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
         .                   unsafe {
         .                       let mut index = self.table.find_insert_slot(hash);
         .           
         .                       // We can avoid growing the table once we have reached our load
         .                       // factor if we are replacing a tombstone. This works since the
         .                       // number of EMPTY slots does not change in this case.
     5,793 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
 1,822,793 ( 0.07%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
         .                           self.reserve(1, hasher);
         .                           index = self.table.find_insert_slot(hash);
         .                       }
         .           
         .                       self.table.record_item_insert_at(index, old_ctrl, hash);
         .           
         .                       let bucket = self.bucket(index);
         2 ( 0.00%)              bucket.write(value);
         .                       bucket
         .                   }
 2,062,623 ( 0.08%)      }
         .           
         .               /// Attempts to insert a new element without growing the table and return its raw bucket.
         .               ///
         .               /// Returns an `Err` containing the given element if inserting it would require growing the
         .               /// table.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Inserts a new element into the table, and returns a mutable reference to it.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
   549,672 ( 0.02%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
       128 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
   412,254 ( 0.02%)      }
         .           
         .               /// Inserts a new element into the table, without growing the table.
         .               ///
         .               /// There must be enough space in the table to insert the new element.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
     1,375 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
   420,225 ( 0.02%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
    11,380 ( 0.00%)          let bucket = self.table.bucket(index);
         .           
         .                   // If we are replacing a DELETED entry then we don't need to update
         .                   // the load counter.
   871,380 ( 0.04%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
         .           
         .                   bucket.write(value);
   694,528 ( 0.03%)          self.table.items += 1;
         .                   bucket
     2,666 ( 0.00%)      }
         .           
         .               /// Temporary removes a bucket, applying the given function to the removed
         .               /// element and optionally put back the returned value in the same bucket.
         .               ///
         .               /// Returns `true` if the bucket still contains an element
         .               ///
         .               /// This does not check if the given bucket is actually occupied.
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
         .                       true
         .                   } else {
         .                       false
         .                   }
         .               }
         .           
         .               /// Searches for an element in the table.
         .               #[inline]
    16,221 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
     8,680 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    30,340 ( 0.00%)              eq(self.bucket(index).as_ref())
     2,388 ( 0.00%)          });
         .           
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match result {
       689 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
         .                       None => None,
         .                   }
    17,976 ( 0.00%)      }
         .           
         .               /// Gets a reference to an element in the table.
         .               #[inline]
         .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
    19,102 ( 0.00%)          match self.find(hash, eq) {
         .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Gets a mutable reference to an element in the table.
         .               #[inline]
     1,302 ( 0.00%)      pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
    21,606 ( 0.00%)          match self.find(hash, eq) {
         .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
         .                       None => None,
         .                   }
     1,488 ( 0.00%)      }
         .           
         .               /// Attempts to get mutable references to `N` entries in the table at once.
         .               ///
         .               /// Returns an array of length `N` with the results of each query.
         .               ///
         .               /// At most one mutable reference will be returned to any entry. `None` will be returned if any
         .               /// of the hashes are duplicates. `None` will be returned if the hash is not found.
         .               ///
-- line 859 ----------------------------------------
-- line 920 ----------------------------------------
         .               #[inline]
         .               pub fn len(&self) -> usize {
         .                   self.table.items
         .               }
         .           
         .               /// Returns `true` if the table contains no elements.
         .               #[inline]
         .               pub fn is_empty(&self) -> bool {
   904,913 ( 0.04%)          self.len() == 0
         .               }
         .           
         .               /// Returns the number of buckets in the table.
         .               #[inline]
         .               pub fn buckets(&self) -> usize {
         .                   self.table.bucket_mask + 1
         .               }
         .           
         .               /// Returns an iterator over every element in the table. It is up to
         .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
         .               /// Because we cannot make the `next` method unsafe on the `RawIter`
         .               /// struct, we have to make the `iter` method unsafe.
         .               #[inline]
         .               pub unsafe fn iter(&self) -> RawIter<T> {
         1 ( 0.00%)          let data = Bucket::from_base_index(self.data_end(), 0);
         .                   RawIter {
         .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
   134,797 ( 0.01%)              items: self.table.items,
         .                   }
         .               }
         .           
         .               /// Returns an iterator over occupied buckets that could match a given hash.
         .               ///
         .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
         .               /// return items that have a hash value different than the one provided. You
         .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
         .               /// Iteration starts at the provided iterator's current location.
         .               ///
         .               /// It is up to the caller to ensure that the iterator is valid for this
         .               /// `RawTable` and covers all items that remain in the table.
         .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
         .                   debug_assert_eq!(iter.len(), self.len());
         .           
         .                   let alloc = self.table.alloc.clone();
     9,068 ( 0.00%)          let allocation = self.into_allocation();
     6,801 ( 0.00%)          RawIntoIter {
    11,335 ( 0.00%)              iter,
         .                       allocation,
         .                       marker: PhantomData,
         .                       alloc,
         .                   }
         .               }
         .           
         .               /// Converts the table into a raw allocation. The contents of the table
         .               /// should be dropped using a `RawIter` before freeing the allocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
     3,997 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
         .                       None
         .                   } else {
         .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
         .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
         .                           Some(lco) => lco,
         .                           None => unsafe { hint::unreachable_unchecked() },
         .                       };
         .                       Some((
       801 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
         .                           layout,
         .                       ))
         .                   };
         .                   mem::forget(self);
         .                   alloc
         .               }
         .           }
         .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           impl<A> RawTableInner<A> {
         .               #[inline]
         .               const fn new_in(alloc: A) -> Self {
   800,543 ( 0.03%)          Self {
         .                       // Be careful to cast the entire slice to a raw pointer.
         .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
         .                       bucket_mask: 0,
         .                       items: 0,
         .                       growth_left: 0,
         .                       alloc,
         .                   }
         .               }
         .           }
         .           
         .           impl<A: Allocator + Clone> RawTableInner<A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
   508,003 ( 0.02%)      unsafe fn new_uninitialized(
         .                   alloc: A,
         .                   table_layout: TableLayout,
         .                   buckets: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
         .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
         .                   // such allocations will never succeed anyways.
         .                   //
         .                   // This mirrors what Vec does in the standard library.
         .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
         .                       return Err(fallibility.capacity_overflow());
         .                   }
         .           
   119,278 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
         .                       Ok(block) => block.cast(),
         .                       Err(_) => return Err(fallibility.alloc_err(layout)),
         .                   };
         .           
         .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
   279,750 ( 0.01%)          Ok(Self {
         .                       ctrl,
   117,497 ( 0.00%)              bucket_mask: buckets - 1,
         .                       items: 0,
         .                       growth_left: bucket_mask_to_capacity(buckets - 1),
         .                       alloc,
         .                   })
   369,752 ( 0.02%)      }
         .           
         .               #[inline]
    57,514 ( 0.00%)      fn fallible_with_capacity(
         .                   alloc: A,
         .                   table_layout: TableLayout,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
    14,650 ( 0.00%)          if capacity == 0 {
    12,330 ( 0.00%)              Ok(Self::new_in(alloc))
         .                   } else {
         .                       unsafe {
         .                           let buckets =
         .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
         .           
   230,999 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
         .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
         .           
    28,720 ( 0.00%)                  Ok(result)
         .                       }
         .                   }
    57,514 ( 0.00%)      }
         .           
         .               /// Searches for an empty or deleted bucket which is suitable for inserting
         .               /// a new element and sets the hash for that slot.
         .               ///
         .               /// There must be at least 1 empty bucket in the table.
         .               #[inline]
   146,363 ( 0.01%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
         .                   let index = self.find_insert_slot(hash);
   146,363 ( 0.01%)          let old_ctrl = *self.ctrl(index);
         .                   self.set_ctrl_h2(index, hash);
         .                   (index, old_ctrl)
   292,726 ( 0.01%)      }
         .           
         .               /// Searches for an empty or deleted bucket which is suitable for inserting
         .               /// a new element.
         .               ///
         .               /// There must be at least 1 empty bucket in the table.
         .               #[inline]
         .               fn find_insert_slot(&self, hash: u64) -> usize {
         .                   let mut probe_seq = self.probe_seq(hash);
         .                   loop {
         .                       unsafe {
         .                           let group = Group::load(self.ctrl(probe_seq.pos));
 1,252,655 ( 0.05%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
 3,673,012 ( 0.15%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
         .           
         .                               // In tables smaller than the group width, trailing control
         .                               // bytes outside the range of the table are filled with
         .                               // EMPTY entries. These will unfortunately trigger a
         .                               // match, but once masked may point to a full bucket that
         .                               // is already occupied. We detect this situation here and
         .                               // perform a second scan starting at the beginning of the
         .                               // table. This second scan is guaranteed to find an empty
         .                               // slot (due to the load factor) before hitting the trailing
         .                               // control bytes (containing EMPTY).
 1,679,569 ( 0.07%)                      if unlikely(is_full(*self.ctrl(result))) {
         .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
         .                                   debug_assert_ne!(probe_seq.pos, 0);
         .                                   return Group::load_aligned(self.ctrl(0))
         .                                       .match_empty_or_deleted()
         .                                       .lowest_set_bit_nonzero();
         .                               }
         .           
         .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
         .           
         .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
         .               /// code generated, but it is eliminated by LLVM optimizations.
         .               #[inline]
         .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
         .                   let h2_hash = h2(hash);
         .                   let mut probe_seq = self.probe_seq(hash);
         .           
    75,488 ( 0.00%)          loop {
         .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
         .           
 3,606,441 ( 0.15%)              for bit in group.match_byte(h2_hash) {
 6,718,347 ( 0.27%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
         .           
 4,573,074 ( 0.19%)                  if likely(eq(index)) {
         .                               return Some(index);
         .                           }
         .                       }
         .           
 1,195,255 ( 0.05%)              if likely(group.match_empty().any_bit_set()) {
         .                           return None;
         .                       }
         .           
         .                       probe_seq.move_next(self.bucket_mask);
         .                   }
         .               }
         .           
         .               #[allow(clippy::mut_mut)]
         .               #[inline]
         .               unsafe fn prepare_rehash_in_place(&mut self) {
         .                   // Bulk convert all full control bytes to DELETED, and all DELETED
         .                   // control bytes to EMPTY. This effectively frees up all buckets
         .                   // containing a DELETED entry.
         5 ( 0.00%)          for i in (0..self.buckets()).step_by(Group::WIDTH) {
         .                       let group = Group::load_aligned(self.ctrl(i));
         .                       let group = group.convert_special_to_empty_and_full_to_deleted();
         .                       group.store_aligned(self.ctrl(i));
         .                   }
         .           
         .                   // Fix up the trailing control bytes. See the comments in set_ctrl
         .                   // for the handling of tables smaller than the group width.
         3 ( 0.00%)          if self.buckets() < Group::WIDTH {
         .                       self.ctrl(0)
         .                           .copy_to(self.ctrl(Group::WIDTH), self.buckets());
         .                   } else {
         .                       self.ctrl(0)
         .                           .copy_to(self.ctrl(self.buckets()), Group::WIDTH);
         .                   }
         .               }
         .           
-- line 1220 ----------------------------------------
-- line 1225 ----------------------------------------
         .                   Bucket::from_base_index(self.data_end(), index)
         .               }
         .           
         .               #[inline]
         .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
         .                   debug_assert_ne!(self.bucket_mask, 0);
         .                   debug_assert!(index < self.buckets());
         .                   let base: *mut u8 = self.data_end().as_ptr();
 4,587,872 ( 0.19%)          base.sub((index + 1) * size_of)
         .               }
         .           
         .               #[inline]
         .               unsafe fn data_end<T>(&self) -> NonNull<T> {
         .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
         .               }
         .           
         .               /// Returns an iterator-like object for a probe sequence on the table.
         .               ///
         .               /// This iterator never terminates, but is guaranteed to visit each bucket
         .               /// group exactly once. The loop using `probe_seq` must terminate upon
         .               /// reaching a group containing an empty bucket.
         .               #[inline]
         .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
         .                   ProbeSeq {
21,284,533 ( 0.87%)              pos: h1(hash) & self.bucket_mask,
         .                       stride: 0,
         .                   }
         .               }
         .           
         .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
         .               /// in the table, otherwise returns error
         .               #[cfg(feature = "raw")]
         .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
         .                   } else {
         .                       self.record_item_insert_at(index, old_ctrl, hash);
         .                       Ok(index)
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
 2,278,569 ( 0.09%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
         .                   self.set_ctrl_h2(index, hash);
 1,822,152 ( 0.07%)          self.items += 1;
         .               }
         .           
         .               #[inline]
         .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
         .                   let probe_seq_pos = self.probe_seq(hash).pos;
         .                   let probe_index =
         .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
        66 ( 0.00%)          probe_index(i) == probe_index(new_i)
         .               }
         .           
         .               /// Sets a control byte to the hash, and possibly also the replicated control byte at
         .               /// the end of the array.
         .               #[inline]
         .               unsafe fn set_ctrl_h2(&self, index: usize, hash: u64) {
         .                   self.set_ctrl(index, h2(hash));
         .               }
-- line 1289 ----------------------------------------
-- line 1312 ----------------------------------------
         .                   // replicate the buckets at the end of the trailing group. For example
         .                   // with 2 buckets and a group size of 4, the control bytes will look
         .                   // like this:
         .                   //
         .                   //     Real    |             Replicated
         .                   // ---------------------------------------------
         .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
         .                   // ---------------------------------------------
 3,530,904 ( 0.14%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
         .           
 1,176,692 ( 0.05%)          *self.ctrl(index) = ctrl;
 1,177,130 ( 0.05%)          *self.ctrl(index2) = ctrl;
         .               }
         .           
         .               /// Returns a pointer to a control byte.
         .               #[inline]
         .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
         .                   debug_assert!(index < self.num_ctrl_bytes());
         .                   self.ctrl.as_ptr().add(index)
         .               }
         .           
         .               #[inline]
         .               fn buckets(&self) -> usize {
   376,760 ( 0.02%)          self.bucket_mask + 1
         .               }
         .           
         .               #[inline]
         .               fn num_ctrl_bytes(&self) -> usize {
   281,187 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
         .               }
         .           
         .               #[inline]
         .               fn is_empty_singleton(&self) -> bool {
 1,462,085 ( 0.06%)          self.bucket_mask == 0
         .               }
         .           
         .               #[allow(clippy::mut_mut)]
         .               #[inline]
         .               unsafe fn prepare_resize(
         .                   &self,
         .                   table_layout: TableLayout,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
         .                   debug_assert!(self.items <= capacity);
         .           
         .                   // Allocate and initialize the new table.
     3,798 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
         .                       self.alloc.clone(),
         .                       table_layout,
         .                       capacity,
         .                       fallibility,
         .                   )?;
   148,014 ( 0.01%)          new_table.growth_left -= self.items;
         .                   new_table.items = self.items;
         .           
         .                   // The hash function may panic, in which case we simply free the new
         .                   // table without dropping any elements that may have been copied into
         .                   // it.
         .                   //
         .                   // This guard is also used to free the old table on success, see
         .                   // the comment at the bottom of this function.
         .                   Ok(guard(new_table, move |self_| {
    67,325 ( 0.00%)              if !self_.is_empty_singleton() {
         .                           self_.free_buckets(table_layout);
         .                       }
         .                   }))
         .               }
         .           
         .               /// Reserves or rehashes to make room for `additional` more elements.
         .               ///
         .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
         .                   fallibility: Fallibility,
         .                   layout: TableLayout,
         .                   drop: Option<fn(*mut u8)>,
         .               ) -> Result<(), TryReserveError> {
         .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
   134,656 ( 0.01%)          let new_items = match self.items.checked_add(additional) {
         .                       Some(new_items) => new_items,
         .                       None => return Err(fallibility.capacity_overflow()),
         .                   };
   134,652 ( 0.01%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
   284,420 ( 0.01%)          if new_items <= full_capacity / 2 {
         .                       // Rehash in-place without re-allocating if we have plenty of spare
         .                       // capacity that is locked up due to DELETED entries.
         .                       self.rehash_in_place(hasher, layout.size, drop);
         2 ( 0.00%)              Ok(())
         .                   } else {
         .                       // Otherwise, conservatively resize to at least the next size up
         .                       // to avoid churning deletes into frequent rehashes.
         .                       self.resize_inner(
    67,325 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
         .                           hasher,
         .                           fallibility,
         .                           layout,
         .                       )
         .                   }
         .               }
         .           
         .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
         .               #[inline(always)]
         .               unsafe fn resize_inner(
         .                   &mut self,
         .                   capacity: usize,
         .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
         .                   fallibility: Fallibility,
         .                   layout: TableLayout,
         .               ) -> Result<(), TryReserveError> {
     9,296 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
         .           
         .                   // Copy all elements to the new table.
         .                   for i in 0..self.buckets() {
   706,352 ( 0.03%)              if !is_full(*self.ctrl(i)) {
         .                           continue;
         .                       }
         .           
         .                       // This may panic.
         .                       let hash = hasher(self, i);
         .           
         .                       // We can use a simpler version of insert() here since:
         .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
         .                   }
         .           
         .                   // We successfully copied all elements without panicking. Now replace
         .                   // self with the new table. The old table will have its memory freed but
         .                   // the items will not be dropped (since they have been moved into the
         .                   // new table).
         .                   mem::swap(self, &mut new_table);
         .           
    67,325 ( 0.00%)          Ok(())
         .               }
         .           
         .               /// Rehashes the contents of the table in place (i.e. without changing the
         .               /// allocation).
         .               ///
         .               /// If `hasher` panics then some the table's contents may be lost.
         .               ///
         .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1496 ----------------------------------------
         .                       }
         .                       self_.growth_left = bucket_mask_to_capacity(self_.bucket_mask) - self_.items;
         .                   });
         .           
         .                   // At this point, DELETED elements are elements that we haven't
         .                   // rehashed yet. Find them and re-insert them at their ideal
         .                   // position.
         .                   'outer: for i in 0..guard.buckets() {
       128 ( 0.00%)              if *guard.ctrl(i) != DELETED {
         .                           continue;
         .                       }
         .           
         .                       let i_p = guard.bucket_ptr(i, size_of);
         .           
         .                       'inner: loop {
         .                           // Hash the current item
         .                           let hash = hasher(*guard, i);
-- line 1512 ----------------------------------------
-- line 1515 ----------------------------------------
         .                           let new_i = guard.find_insert_slot(hash);
         .                           let new_i_p = guard.bucket_ptr(new_i, size_of);
         .           
         .                           // Probing works by scanning through all of the control
         .                           // bytes in groups, which may not be aligned to the group
         .                           // size. If both the new and old position fall within the
         .                           // same unaligned group, then there is no benefit in moving
         .                           // it and we can just continue to the next item.
        22 ( 0.00%)                  if likely(guard.is_in_same_group(i, new_i, hash)) {
         .                               guard.set_ctrl_h2(i, hash);
         .                               continue 'outer;
         .                           }
         .           
         .                           // We are moving the current item to a new position. Write
         .                           // our H2 to the control byte of the new position.
         .                           let prev_ctrl = guard.replace_ctrl_h2(new_i, hash);
         .                           if prev_ctrl == EMPTY {
-- line 1531 ----------------------------------------
-- line 1541 ----------------------------------------
         .                               // swapped into the old slot.
         .                               debug_assert_eq!(prev_ctrl, DELETED);
         .                               ptr::swap_nonoverlapping(i_p, new_i_p, size_of);
         .                               continue 'inner;
         .                           }
         .                       }
         .                   }
         .           
         3 ( 0.00%)          guard.growth_left = bucket_mask_to_capacity(guard.bucket_mask) - guard.items;
         .           
         .                   mem::forget(guard);
         .               }
         .           
         .               #[inline]
         .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
         .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
         .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
         .                       Some(lco) => lco,
         .                       None => hint::unreachable_unchecked(),
         .                   };
         .                   self.alloc.deallocate(
    44,347 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
         .                       layout,
         .                   );
         .               }
         .           
         .               /// Marks all table buckets as empty without dropping their contents.
         .               #[inline]
         .               fn clear_no_drop(&mut self) {
     9,818 ( 0.00%)          if !self.is_empty_singleton() {
         .                       unsafe {
         .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
         .                       }
         .                   }
    12,668 ( 0.00%)          self.items = 0;
     9,872 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
         .               }
         .           
         .               #[inline]
         .               unsafe fn erase(&mut self, index: usize) {
         .                   debug_assert!(is_full(*self.ctrl(index)));
   130,793 ( 0.01%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
         .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
         .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
         .           
         .                   // If we are inside a continuous block of Group::WIDTH full or deleted
         .                   // cells then a probe window may have seen a full block when trying to
         .                   // insert. We therefore need to keep that block non-empty so that
         .                   // lookups will continue searching to the next probe window.
         .                   //
         .                   // Note that in this context `leading_zeros` refers to the bytes at the
         .                   // end of a group, while `trailing_zeros` refers to the bytes at the
         .                   // beginning of a group.
   523,172 ( 0.02%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
         .                       DELETED
         .                   } else {
   644,520 ( 0.03%)              self.growth_left += 1;
         .                       EMPTY
         .                   };
         .                   self.set_ctrl(index, ctrl);
   523,172 ( 0.02%)          self.items -= 1;
         .               }
         .           }
         .           
         .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
     2,328 ( 0.00%)      fn clone(&self) -> Self {
       325 ( 0.00%)          if self.table.is_empty_singleton() {
         .                       Self::new_in(self.table.alloc.clone())
         .                   } else {
         .                       unsafe {
         .                           let mut new_table = ManuallyDrop::new(
         .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
         .                               match Self::new_uninitialized(
         .                                   self.table.alloc.clone(),
         .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
         .                               // We need to free the memory allocated for the new table.
         .                               new_table.free_buckets();
         .                           });
         .           
         .                           // Return the newly created table.
         .                           ManuallyDrop::into_inner(new_table)
         .                       }
         .                   }
     2,619 ( 0.00%)      }
         .           
         .               fn clone_from(&mut self, source: &Self) {
         .                   if source.table.is_empty_singleton() {
         .                       *self = Self::new_in(self.table.alloc.clone());
         .                   } else {
         .                       unsafe {
         .                           // First, drop all our elements without clearing the control bytes.
         .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
         .                       .table
         .                       .ctrl(0)
         .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
         .                   source
         .                       .data_start()
         .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
         .           
         .                   self.table.items = source.table.items;
        52 ( 0.00%)          self.table.growth_left = source.table.growth_left;
         .               }
         .           }
         .           
         .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
         .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
         .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
         .               fn default() -> Self {
         .                   Self::new_in(Default::default())
         .               }
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
   719,533 ( 0.03%)      fn drop(&mut self) {
   630,785 ( 0.03%)          if !self.table.is_empty_singleton() {
         .                       unsafe {
         .                           self.drop_elements();
         .                           self.free_buckets();
         .                       }
         .                   }
   778,396 ( 0.03%)      }
         .           }
         .           #[cfg(not(feature = "nightly"))]
         .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn drop(&mut self) {
         .                   if !self.table.is_empty_singleton() {
         .                       unsafe {
         .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
         .               type Item = T;
         .               type IntoIter = RawIntoIter<T, A>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
     9,068 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
         .                   unsafe {
         .                       let iter = self.iter();
         .                       self.into_iter_from(iter)
         .                   }
    11,335 ( 0.00%)      }
         .           }
         .           
         .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
         .           /// not track an item count.
         .           pub(crate) struct RawIterRange<T> {
         .               // Mask of full buckets in the current group. Bits are cleared from this
         .               // mask as each element is processed.
         .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
         .           
         .           impl<T> Iterator for RawIterRange<T> {
         .               type Item = Bucket<T>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<Bucket<T>> {
         .                   unsafe {
         .                       loop {
   271,539 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    42,594 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    68,954 ( 0.00%)                      return Some(self.data.next_n(index));
         .                           }
         .           
   247,709 ( 0.01%)                  if self.next_ctrl >= self.end {
         .                               return None;
         .                           }
         .           
         .                           // We might read past self.end up to the next group boundary,
         .                           // but this is fine because it only occurs on tables smaller
         .                           // than the group size where the trailing control bytes are all
         .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
         .                           // to the group size (since tables are power-of-two sized).
     7,307 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
     6,126 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
    14,778 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
         .                       }
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   // We don't have an item count, so just guess based on the range size.
         .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
         .                           }
         .                       } else {
         .                           // We must have already iterated past the removed item.
         .                       }
         .                   }
         .               }
         .           
         .               unsafe fn drop_elements(&mut self) {
     1,811 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
         .                       for item in self {
         .                           item.drop();
         .                       }
         .                   }
         .               }
         .           }
         .           
         .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<T> Iterator for RawIter<T> {
         .               type Item = Bucket<T>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
    49,179 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
   115,500 ( 0.00%)          if let Some(b) = self.iter.next() {
   348,757 ( 0.01%)              self.items -= 1;
         .                       Some(b)
         .                   } else {
         .                       // We don't check against items == 0 here to allow the
         .                       // compiler to optimize away the item count entirely if the
         .                       // iterator length is never queried.
         .                       debug_assert_eq!(self.items, 0);
         .                       None
         .                   }
    98,358 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   (self.items, Some(self.items))
         .               }
         .           }
         .           
         .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
     4,414 ( 0.00%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements
         .                       self.iter.drop_elements();
         .           
         .                       // Free the table
    18,486 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
         .                           self.alloc.deallocate(ptr, layout);
         .                       }
         .                   }
       414 ( 0.00%)      }
         .           }
         .           #[cfg(not(feature = "nightly"))]
         .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements
         .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
         .               type Item = T;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
     1,904 ( 0.00%)      fn next(&mut self) -> Option<T> {
     1,386 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
     4,203 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         4 ( 0.00%)          self.iter.size_hint()
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
         .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
         .           
         .           /// Iterator which consumes elements without freeing the table storage.
         .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
         .           where
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
       184 ( 0.00%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements. Note that this may panic.
         .                       self.iter.drop_elements();
         .           
         .                       // Reset the contents of the table now that all elements have been
         .                       // dropped.
         .                       self.table.clear_no_drop();
         .           
         .                       // Move the now empty table back to its original location.
        23 ( 0.00%)              self.orig_table
         .                           .as_ptr()
         .                           .copy_from_nonoverlapping(&*self.table, 1);
         .                   }
       184 ( 0.00%)      }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
         .               type Item = T;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<T> {
         .                   unsafe {
-- line 2289 ----------------------------------------

11,554,326 ( 0.47%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/canonical/canonicalizer.rs
--------------------------------------------------------------------------------
Ir               

-- line 39 ----------------------------------------
      .               pub fn canonicalize_query<V>(
      .                   &self,
      .                   value: V,
      .                   query_state: &mut OriginalQueryValues<'tcx>,
      .               ) -> Canonicalized<'tcx, V>
      .               where
      .                   V: TypeFoldable<'tcx>,
      .               {
 12,854 ( 0.00%)          self.tcx.sess.perf_stats.queries_canonicalized.fetch_add(1, Ordering::Relaxed);
      .           
 63,486 ( 0.00%)          Canonicalizer::canonicalize(value, self, self.tcx, &CanonicalizeAllFreeRegions, query_state)
      .               }
      .           
      .               /// Canonicalizes a query *response* `V`. When we canonicalize a
      .               /// query response, we only canonicalize unbound inference
      .               /// variables, and we leave other free regions alone. So,
      .               /// continuing with the example from `canonicalize_query`, if
      .               /// there was an input query `T: Trait<'static>`, it would have
      .               /// been canonicalized to
-- line 57 ----------------------------------------
-- line 69 ----------------------------------------
      .               /// things) includes a mapping to `'?0 := 'static`. When
      .               /// canonicalizing this query result R, we would leave this
      .               /// reference to `'static` alone.
      .               ///
      .               /// To get a good understanding of what is happening here, check
      .               /// out the [chapter in the rustc dev guide][c].
      .               ///
      .               /// [c]: https://rust-lang.github.io/chalk/book/canonical_queries/canonicalization.html#canonicalizing-the-query-result
     45 ( 0.00%)      pub fn canonicalize_response<V>(&self, value: V) -> Canonicalized<'tcx, V>
      .               where
      .                   V: TypeFoldable<'tcx>,
      .               {
  5,870 ( 0.00%)          let mut query_state = OriginalQueryValues::default();
 20,545 ( 0.00%)          Canonicalizer::canonicalize(
 34,900 ( 0.00%)              value,
      .                       self,
  2,935 ( 0.00%)              self.tcx,
      .                       &CanonicalizeQueryResponse,
      .                       &mut query_state,
      .                   )
     35 ( 0.00%)      }
      .           
  6,741 ( 0.00%)      pub fn canonicalize_user_type_annotation<V>(&self, value: V) -> Canonicalized<'tcx, V>
      .               where
      .                   V: TypeFoldable<'tcx>,
      .               {
  1,654 ( 0.00%)          let mut query_state = OriginalQueryValues::default();
  5,789 ( 0.00%)          Canonicalizer::canonicalize(
  4,884 ( 0.00%)              value,
      .                       self,
    827 ( 0.00%)              self.tcx,
      .                       &CanonicalizeUserTypeAnnotation,
      .                       &mut query_state,
      .                   )
  5,243 ( 0.00%)      }
      .           
      .               /// A variant of `canonicalize_query` that does not
      .               /// canonicalize `'static`. This is useful when
      .               /// the query implementation can perform more efficient
      .               /// handling of `'static` regions (e.g. trait evaluation).
    930 ( 0.00%)      pub fn canonicalize_query_keep_static<V>(
      .                   &self,
      .                   value: V,
      .                   query_state: &mut OriginalQueryValues<'tcx>,
      .               ) -> Canonicalized<'tcx, V>
      .               where
      .                   V: TypeFoldable<'tcx>,
      .               {
 34,462 ( 0.00%)          self.tcx.sess.perf_stats.queries_canonicalized.fetch_add(1, Ordering::Relaxed);
      .           
153,359 ( 0.01%)          Canonicalizer::canonicalize(
  4,664 ( 0.00%)              value,
      .                       self,
 17,231 ( 0.00%)              self.tcx,
      .                       &CanonicalizeFreeRegionsOtherThanStatic,
      .                       query_state,
      .                   )
    930 ( 0.00%)      }
      .           }
      .           
      .           /// Controls how we canonicalize "free regions" that are not inference
      .           /// variables. This depends on what we are canonicalizing *for* --
      .           /// e.g., if we are canonicalizing to create a query, we want to
      .           /// replace those with inference variables, since we want to make a
      .           /// maximally general query. But if we are canonicalizing a *query
      .           /// response*, then we don't typically replace free regions, as they
-- line 134 ----------------------------------------
-- line 141 ----------------------------------------
      .               ) -> ty::Region<'tcx>;
      .           
      .               fn any(&self) -> bool;
      .           }
      .           
      .           struct CanonicalizeQueryResponse;
      .           
      .           impl CanonicalizeRegionMode for CanonicalizeQueryResponse {
 20,720 ( 0.00%)      fn canonicalize_free_region<'tcx>(
      .                   &self,
      .                   canonicalizer: &mut Canonicalizer<'_, 'tcx>,
      .                   r: ty::Region<'tcx>,
      .               ) -> ty::Region<'tcx> {
 12,432 ( 0.00%)          match r {
      .                       ty::ReFree(_)
      .                       | ty::ReErased
      .                       | ty::ReStatic
      .                       | ty::ReEmpty(ty::UniverseIndex::ROOT)
      .                       | ty::ReEarlyBound(..) => r,
      .           
      .                       ty::RePlaceholder(placeholder) => canonicalizer.canonical_var_for_region(
      .                           CanonicalVarInfo { kind: CanonicalVarKind::PlaceholderRegion(*placeholder) },
      .                           r,
      .                       ),
      .           
      .                       ty::ReVar(vid) => {
  4,104 ( 0.00%)                  let universe = canonicalizer.region_var_universe(*vid);
      .                           canonicalizer.canonical_var_for_region(
      .                               CanonicalVarInfo { kind: CanonicalVarKind::Region(universe) },
      .                               r,
      .                           )
      .                       }
      .           
      .                       ty::ReEmpty(ui) => {
      .                           bug!("canonicalizing 'empty in universe {:?}", ui) // FIXME
-- line 175 ----------------------------------------
-- line 188 ----------------------------------------
      .                               tcx.sess.delay_span_bug(
      .                                   rustc_span::DUMMY_SP,
      .                                   &format!("unexpected region in query response: `{:?}`", r),
      .                               );
      .                           });
      .                           r
      .                       }
      .                   }
 20,720 ( 0.00%)      }
      .           
      .               fn any(&self) -> bool {
      .                   false
      .               }
      .           }
      .           
      .           struct CanonicalizeUserTypeAnnotation;
      .           
      .           impl CanonicalizeRegionMode for CanonicalizeUserTypeAnnotation {
  2,106 ( 0.00%)      fn canonicalize_free_region<'tcx>(
      .                   &self,
      .                   canonicalizer: &mut Canonicalizer<'_, 'tcx>,
      .                   r: ty::Region<'tcx>,
      .               ) -> ty::Region<'tcx> {
  2,106 ( 0.00%)          match r {
      .                       ty::ReEarlyBound(_) | ty::ReFree(_) | ty::ReErased | ty::ReStatic => r,
      .                       ty::ReVar(_) => canonicalizer.canonical_var_for_region_in_root_universe(r),
      .                       _ => {
      .                           // We only expect region names that the user can type.
      .                           bug!("unexpected region in query response: `{:?}`", r)
      .                       }
      .                   }
  2,106 ( 0.00%)      }
      .           
      .               fn any(&self) -> bool {
      .                   false
  7,524 ( 0.00%)      }
      .           }
      .           
      .           struct CanonicalizeAllFreeRegions;
      .           
      .           impl CanonicalizeRegionMode for CanonicalizeAllFreeRegions {
 10,144 ( 0.00%)      fn canonicalize_free_region<'tcx>(
      .                   &self,
      .                   canonicalizer: &mut Canonicalizer<'_, 'tcx>,
      .                   r: ty::Region<'tcx>,
      .               ) -> ty::Region<'tcx> {
      .                   canonicalizer.canonical_var_for_region_in_root_universe(r)
  7,608 ( 0.00%)      }
      .           
      .               fn any(&self) -> bool {
      .                   true
 47,316 ( 0.00%)      }
      .           }
      .           
      .           struct CanonicalizeFreeRegionsOtherThanStatic;
      .           
      .           impl CanonicalizeRegionMode for CanonicalizeFreeRegionsOtherThanStatic {
 13,074 ( 0.00%)      fn canonicalize_free_region<'tcx>(
      .                   &self,
      .                   canonicalizer: &mut Canonicalizer<'_, 'tcx>,
      .                   r: ty::Region<'tcx>,
      .               ) -> ty::Region<'tcx> {
  8,716 ( 0.00%)          if let ty::ReStatic = r {
      .                       r
      .                   } else {
      .                       canonicalizer.canonical_var_for_region_in_root_universe(r)
      .                   }
 13,074 ( 0.00%)      }
      .           
      .               fn any(&self) -> bool {
      .                   true
      .               }
      .           }
      .           
      .           struct Canonicalizer<'cx, 'tcx> {
      .               infcx: &'cx InferCtxt<'cx, 'tcx>,
-- line 263 ----------------------------------------
-- line 270 ----------------------------------------
      .               canonicalize_region_mode: &'cx dyn CanonicalizeRegionMode,
      .               needs_canonical_flags: TypeFlags,
      .           
      .               binder_index: ty::DebruijnIndex,
      .           }
      .           
      .           impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {
      .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
100,888 ( 0.00%)          self.tcx
 81,666 ( 0.00%)      }
      .           
      .               fn fold_binder<T>(&mut self, t: ty::Binder<'tcx, T>) -> ty::Binder<'tcx, T>
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
242,244 ( 0.01%)          self.binder_index.shift_in(1);
426,161 ( 0.02%)          let t = t.super_fold_with(self);
239,434 ( 0.01%)          self.binder_index.shift_out(1);
      .                   t
      .               }
      .           
 46,968 ( 0.00%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
 70,452 ( 0.00%)          match *r {
      2 ( 0.00%)              ty::ReLateBound(index, ..) => {
      2 ( 0.00%)                  if index >= self.binder_index {
      .                               bug!("escaping late-bound region during canonicalization");
      .                           } else {
      .                               r
      .                           }
      .                       }
      .           
      .                       ty::ReVar(vid) => {
  9,367 ( 0.00%)                  let resolved_vid = self
      .                               .infcx
      .                               .inner
      .                               .borrow_mut()
      .                               .unwrap_region_constraints()
      .                               .opportunistic_resolve_var(vid);
      .                           debug!(
      .                               "canonical: region var found with vid {:?}, \
      .                                opportunistically resolved to {:?}",
      .                               vid, r
      .                           );
 37,468 ( 0.00%)                  let r = self.tcx.reuse_or_mk_region(r, ty::ReVar(resolved_vid));
 56,202 ( 0.00%)                  self.canonicalize_region_mode.canonicalize_free_region(self, r)
      .                       }
      .           
      .                       ty::ReStatic
      .                       | ty::ReEarlyBound(..)
      .                       | ty::ReFree(_)
      .                       | ty::ReEmpty(_)
      .                       | ty::RePlaceholder(..)
 23,730 ( 0.00%)              | ty::ReErased => self.canonicalize_region_mode.canonicalize_free_region(self, r),
      .                   }
 56,214 ( 0.00%)      }
      .           
905,520 ( 0.04%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
763,026 ( 0.03%)          match *t.kind() {
  2,346 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
      .                           debug!("canonical: type var found with vid {:?}", vid);
  9,384 ( 0.00%)                  match self.infcx.probe_ty_var(vid) {
      .                               // `t` could be a float / int variable; canonicalize that instead.
      .                               Ok(t) => {
      .                                   debug!("(resolved to {:?})", t);
      .                                   self.fold_ty(t)
      .                               }
      .           
      .                               // `TyVar(vid)` is unresolved, track its universe index in the canonicalized
      .                               // result.
      .                               Err(mut ui) => {
      .                                   // FIXME: perf problem described in #55921.
      .                                   ui = ty::UniverseIndex::ROOT;
      .                                   self.canonicalize_ty_var(
  2,191 ( 0.00%)                              CanonicalVarInfo {
      .                                           kind: CanonicalVarKind::Ty(CanonicalTyVarKind::General(ui)),
      .                                       },
      .                                       t,
      .                                   )
      .                               }
      .                           }
      .                       }
      .           
-- line 351 ----------------------------------------
-- line 395 ----------------------------------------
      .                       | ty::FnPtr(_)
      .                       | ty::Dynamic(..)
      .                       | ty::Never
      .                       | ty::Tuple(..)
      .                       | ty::Projection(..)
      .                       | ty::Foreign(..)
      .                       | ty::Param(..)
      .                       | ty::Opaque(..) => {
297,272 ( 0.01%)                  if t.flags().intersects(self.needs_canonical_flags) {
 47,684 ( 0.00%)                      t.super_fold_with(self)
      .                           } else {
      .                               t
      .                           }
      .                       }
      .                   }
864,648 ( 0.04%)      }
      .           
      .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
      .                   match ct.val {
      .                       ty::ConstKind::Infer(InferConst::Var(vid)) => {
      .                           debug!("canonical: const var found with vid {:?}", vid);
      .                           match self.infcx.probe_const_var(vid) {
      .                               Ok(c) => {
      .                                   debug!("(resolved to {:?})", c);
-- line 418 ----------------------------------------
-- line 453 ----------------------------------------
      .                   let flags = FlagComputation::for_const(ct);
      .                   if flags.intersects(self.needs_canonical_flags) { ct.super_fold_with(self) } else { ct }
      .               }
      .           }
      .           
      .           impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {
      .               /// The main `canonicalize` method, shared impl of
      .               /// `canonicalize_query` and `canonicalize_response`.
378,403 ( 0.02%)      fn canonicalize<V>(
      .                   value: V,
      .                   infcx: &InferCtxt<'_, 'tcx>,
      .                   tcx: TyCtxt<'tcx>,
      .                   canonicalize_region_mode: &dyn CanonicalizeRegionMode,
      .                   query_state: &mut OriginalQueryValues<'tcx>,
      .               ) -> Canonicalized<'tcx, V>
      .               where
      .                   V: TypeFoldable<'tcx>,
      .               {
165,282 ( 0.01%)          let needs_canonical_flags = if canonicalize_region_mode.any() {
      .                       TypeFlags::NEEDS_INFER |
      .                       TypeFlags::HAS_FREE_REGIONS | // `HAS_RE_PLACEHOLDER` implies `HAS_FREE_REGIONS`
      .                       TypeFlags::HAS_TY_PLACEHOLDER |
      .                       TypeFlags::HAS_CT_PLACEHOLDER
      .                   } else {
      .                       TypeFlags::NEEDS_INFER
      .                           | TypeFlags::HAS_RE_PLACEHOLDER
      .                           | TypeFlags::HAS_TY_PLACEHOLDER
      .                           | TypeFlags::HAS_CT_PLACEHOLDER
      .                   };
      .           
      .                   // Fast path: nothing that needs to be canonicalized.
 34,821 ( 0.00%)          if !value.has_type_flags(needs_canonical_flags) {
      .                       let canon_value = Canonical {
      .                           max_universe: ty::UniverseIndex::ROOT,
      .                           variables: List::empty(),
 26,942 ( 0.00%)                  value,
      .                       };
 97,331 ( 0.00%)              return canon_value;
      .                   }
      .           
 77,924 ( 0.00%)          let mut canonicalizer = Canonicalizer {
      .                       infcx,
      .                       tcx,
      .                       canonicalize_region_mode,
      .                       needs_canonical_flags,
      .                       variables: SmallVec::new(),
      .                       query_state,
      .                       indices: FxHashMap::default(),
      .                       binder_index: ty::INNERMOST,
      .                   };
 23,280 ( 0.00%)          let out_value = value.fold_with(&mut canonicalizer);
      .           
      .                   // Once we have canonicalized `out_value`, it should not
      .                   // contain anything that ties it to this inference context
      .                   // anymore, so it should live in the global arena.
      .                   debug_assert!(!out_value.needs_infer());
      .           
 13,530 ( 0.00%)          let canonical_variables = tcx.intern_canonical_var_infos(&canonicalizer.variables);
      .           
      .                   let max_universe = canonical_variables
      .                       .iter()
 33,582 ( 0.00%)              .map(|cvar| cvar.universe())
      .                       .max()
      .                       .unwrap_or(ty::UniverseIndex::ROOT);
      .           
 47,322 ( 0.00%)          Canonical { max_universe, variables: canonical_variables, value: out_value }
247,414 ( 0.01%)      }
      .           
      .               /// Creates a canonical variable replacing `kind` from the input,
      .               /// or returns an existing variable if `kind` has already been
      .               /// seen. `kind` is expected to be an unbound variable (or
      .               /// potentially a free region).
139,750 ( 0.01%)      fn canonical_var(&mut self, info: CanonicalVarInfo<'tcx>, kind: GenericArg<'tcx>) -> BoundVar {
 27,950 ( 0.00%)          let Canonicalizer { variables, query_state, indices, .. } = self;
      .           
 27,950 ( 0.00%)          let var_values = &mut query_state.var_values;
      .           
      .                   // This code is hot. `variables` and `var_values` are usually small
      .                   // (fewer than 8 elements ~95% of the time). They are SmallVec's to
      .                   // avoid allocations in those cases. We also don't use `indices` to
      .                   // determine if a kind has been seen before until the limit of 8 has
      .                   // been exceeded, to also avoid allocations for `indices`.
 27,950 ( 0.00%)          if !var_values.spilled() {
      .                       // `var_values` is stack-allocated. `indices` isn't used yet. Do a
      .                       // direct linear search of `var_values`.
      .                       if let Some(idx) = var_values.iter().position(|&k| k == kind) {
      .                           // `kind` is already present in `var_values`.
      .                           BoundVar::new(idx)
      .                       } else {
      .                           // `kind` isn't present in `var_values`. Append it. Likewise
      .                           // for `info` and `variables`.
      .                           variables.push(info);
      .                           var_values.push(kind);
 54,960 ( 0.00%)                  assert_eq!(variables.len(), var_values.len());
      .           
      .                           // If `var_values` has become big enough to be heap-allocated,
      .                           // fill up `indices` to facilitate subsequent lookups.
 10,992 ( 0.00%)                  if var_values.spilled() {
      .                               assert!(indices.is_empty());
      .                               *indices = var_values
      .                                   .iter()
      .                                   .enumerate()
      .                                   .map(|(i, &kind)| (kind, BoundVar::new(i)))
      .                                   .collect();
      .                           }
      .                           // The cv is the index of the appended element.
 21,984 ( 0.00%)                  BoundVar::new(var_values.len() - 1)
      .                       }
      .                   } else {
      .                       // `var_values` is large. Do a hashmap search via `indices`.
      .                       *indices.entry(kind).or_insert_with(|| {
      .                           variables.push(info);
      .                           var_values.push(kind);
      .                           assert_eq!(variables.len(), var_values.len());
      .                           BoundVar::new(variables.len() - 1)
      .                       })
      .                   }
125,775 ( 0.01%)      }
      .           
      .               /// Shorthand helper that creates a canonical region variable for
      .               /// `r` (always in the root universe). The reason that we always
      .               /// put these variables into the root universe is because this
      .               /// method is used during **query construction:** in that case, we
      .               /// are taking all the regions and just putting them into the most
      .               /// generic context we can. This may generate solutions that don't
      .               /// fit (e.g., that equate some region variable with a placeholder
-- line 578 ----------------------------------------
-- line 599 ----------------------------------------
      .           
      .               /// Creates a canonical variable (with the given `info`)
      .               /// representing the region `r`; return a region referencing it.
      .               fn canonical_var_for_region(
      .                   &mut self,
      .                   info: CanonicalVarInfo<'tcx>,
      .                   r: ty::Region<'tcx>,
      .               ) -> ty::Region<'tcx> {
 42,672 ( 0.00%)          let var = self.canonical_var(info, r.into());
      .                   let br = ty::BoundRegion { var, kind: ty::BrAnon(var.as_u32()) };
  7,575 ( 0.00%)          let region = ty::ReLateBound(self.binder_index, br);
 53,025 ( 0.00%)          self.tcx().mk_region(region)
      .               }
      .           
      .               /// Given a type variable `ty_var` of the given kind, first check
      .               /// if `ty_var` is bound to anything; if so, canonicalize
      .               /// *that*. Otherwise, create a new canonical variable for
      .               /// `ty_var`.
 18,272 ( 0.00%)      fn canonicalize_ty_var(&mut self, info: CanonicalVarInfo<'tcx>, ty_var: Ty<'tcx>) -> Ty<'tcx> {
  2,284 ( 0.00%)          let infcx = self.infcx;
      .                   let bound_to = infcx.shallow_resolve(ty_var);
  2,284 ( 0.00%)          if bound_to != ty_var {
      .                       self.fold_ty(bound_to)
      .                   } else {
 15,988 ( 0.00%)              let var = self.canonical_var(info, ty_var.into());
  2,284 ( 0.00%)              self.tcx().mk_ty(ty::Bound(self.binder_index, var.into()))
      .                   }
 13,704 ( 0.00%)      }
      .           
      .               /// Given a type variable `const_var` of the given kind, first check
      .               /// if `const_var` is bound to anything; if so, canonicalize
      .               /// *that*. Otherwise, create a new canonical variable for
      .               /// `const_var`.
      .               fn canonicalize_const_var(
      .                   &mut self,
      .                   info: CanonicalVarInfo<'tcx>,
-- line 634 ----------------------------------------

225,162 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/canonical/canonicalizer.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 168 ----------------------------------------
        .               pub self_ty: Ty<'tcx>,
        .               pub trait_ref: Option<TraitRef<'tcx>>,
        .               pub predicates: Vec<Predicate<'tcx>>,
        .           }
        .           
        .           #[derive(
        .               Copy,
        .               Clone,
  106,885 ( 0.00%)      PartialEq,
        .               Eq,
        .               Hash,
        .               TyEncodable,
   18,144 ( 0.00%)      TyDecodable,
        .               HashStable,
        .               Debug,
        .               TypeFoldable
        .           )]
        .           pub enum ImplPolarity {
        .               /// `impl Trait for Type`
        .               Positive,
        .               /// `impl !Trait for Type`
-- line 188 ----------------------------------------
-- line 210 ----------------------------------------
        .                   match self {
        .                       Self::Positive => f.write_str("positive"),
        .                       Self::Negative => f.write_str("negative"),
        .                       Self::Reservation => f.write_str("reservation"),
        .                   }
        .               }
        .           }
        .           
  183,604 ( 0.01%)  #[derive(Clone, Debug, PartialEq, Eq, Copy, Hash, TyEncodable, TyDecodable, HashStable)]
        .           pub enum Visibility {
        .               /// Visible everywhere (including in other crates).
        .               Public,
        .               /// Visible only in the given crate-local module.
        .               Restricted(DefId),
        .               /// Not visible anywhere in the local crate. This is the visibility of private external items.
        .               Invisible,
        .           }
        .           
  312,478 ( 0.01%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable, TyEncodable, TyDecodable)]
        .           pub enum BoundConstness {
        .               /// `T: Trait`
        .               NotConst,
        .               /// `T: ~const Trait`
        .               ///
        .               /// Requires resolving to const only when we are in a const context.
        .               ConstIfConst,
        .           }
        .           
        .           impl BoundConstness {
        .               /// Reduce `self` and `constness` to two possible combined states instead of four.
   22,294 ( 0.00%)      pub fn and(&mut self, constness: hir::Constness) -> hir::Constness {
   33,441 ( 0.00%)          match (constness, self) {
        .                       (hir::Constness::Const, BoundConstness::ConstIfConst) => hir::Constness::Const,
        .                       (_, this) => {
   40,858 ( 0.00%)                  *this = BoundConstness::NotConst;
        .                           hir::Constness::NotConst
        .                       }
        .                   }
   11,147 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Display for BoundConstness {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   match self {
        .                       Self::NotConst => f.write_str("normal"),
        .                       Self::ConstIfConst => f.write_str("`~const`"),
        .                   }
-- line 256 ----------------------------------------
-- line 274 ----------------------------------------
        .               pub before_feature_tys: Ty<'tcx>,
        .               /// Tuple containing the types of closure captures after the feature `capture_disjoint_fields`
        .               pub after_feature_tys: Ty<'tcx>,
        .           }
        .           
        .           pub trait DefIdTree: Copy {
        .               fn parent(self, id: DefId) -> Option<DefId>;
        .           
       21 ( 0.00%)      fn is_descendant_of(self, mut descendant: DefId, ancestor: DefId) -> bool {
       44 ( 0.00%)          if descendant.krate != ancestor.krate {
        .                       return false;
        .                   }
        .           
    5,473 ( 0.00%)          while descendant != ancestor {
    4,485 ( 0.00%)              match self.parent(descendant) {
        .                           Some(parent) => descendant = parent,
        .                           None => return false,
        .                       }
        .                   }
        .                   true
       24 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> DefIdTree for TyCtxt<'tcx> {
    7,842 ( 0.00%)      fn parent(self, id: DefId) -> Option<DefId> {
        .                   self.def_key(id).parent.map(|index| DefId { index, ..id })
   11,763 ( 0.00%)      }
        .           }
        .           
        .           impl Visibility {
      364 ( 0.00%)      pub fn from_hir(visibility: &hir::Visibility<'_>, id: hir::HirId, tcx: TyCtxt<'_>) -> Self {
    1,092 ( 0.00%)          match visibility.node {
        .                       hir::VisibilityKind::Public => Visibility::Public,
        .                       hir::VisibilityKind::Crate(_) => Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)),
        .                       hir::VisibilityKind::Restricted { ref path, .. } => match path.res {
        .                           // If there is no resolution, `resolve` will have already reported an error, so
        .                           // assume that the visibility is public to avoid reporting more privacy errors.
        .                           Res::Err => Visibility::Public,
        .                           def => Visibility::Restricted(def.def_id()),
        .                       },
        .                       hir::VisibilityKind::Inherited => {
      432 ( 0.00%)                  Visibility::Restricted(tcx.parent_module(id).to_def_id())
        .                       }
        .                   }
      364 ( 0.00%)      }
        .           
        .               /// Returns `true` if an item with this visibility is accessible from the given block.
   64,008 ( 0.00%)      pub fn is_accessible_from<T: DefIdTree>(self, module: DefId, tree: T) -> bool {
  139,730 ( 0.01%)          let restriction = match self {
        .                       // Public items are visible everywhere.
        .                       Visibility::Public => return true,
        .                       // Private items from other crates are visible nowhere.
        .                       Visibility::Invisible => return false,
        .                       // Restricted items are visible in an arbitrary local module.
    3,073 ( 0.00%)              Visibility::Restricted(other) if other.krate != module.krate => return false,
        .                       Visibility::Restricted(module) => module,
        .                   };
        .           
        6 ( 0.00%)          tree.is_descendant_of(module, restriction)
   64,008 ( 0.00%)      }
        .           
        .               /// Returns `true` if this visibility is at least as accessible as the given visibility
    5,256 ( 0.00%)      pub fn is_at_least<T: DefIdTree>(self, vis: Visibility, tree: T) -> bool {
   18,840 ( 0.00%)          let vis_restriction = match vis {
        .                       Visibility::Public => return self == Visibility::Public,
        .                       Visibility::Invisible => return true,
        .                       Visibility::Restricted(module) => module,
        .                   };
        .           
        .                   self.is_accessible_from(vis_restriction, tree)
    5,256 ( 0.00%)      }
        .           
        .               // Returns `true` if this item is visible anywhere in the local crate.
        .               pub fn is_visible_locally(self) -> bool {
        .                   match self {
        .                       Visibility::Public => true,
        .                       Visibility::Restricted(def_id) => def_id.is_local(),
        .                       Visibility::Invisible => false,
        .                   }
        .               }
        .           
        .               pub fn is_public(self) -> bool {
    3,372 ( 0.00%)          matches!(self, Visibility::Public)
    1,686 ( 0.00%)      }
        .           }
        .           
        .           /// The crate variances map is computed during typeck and contains the
        .           /// variance of every item in the local crate. You should not use it
        .           /// directly, because to do so will make your pass dependent on the
        .           /// HIR of every item in the local crate. Instead, use
        .           /// `tcx.variances_of()` to get the variance for a *particular*
        .           /// item.
-- line 365 ----------------------------------------
-- line 474 ----------------------------------------
        .           
        .                       // The other fields just provide fast access to information that is
        .                       // also contained in `kind`, so no need to hash them.
        .                       flags: _,
        .           
        .                       outer_exclusive_binder: _,
        .                   } = *self;
        .           
    7,314 ( 0.00%)          kind.hash_stable(hcx, hasher);
        .               }
        .           }
        .           
        .           #[rustc_diagnostic_item = "Ty"]
        .           #[cfg_attr(not(bootstrap), rustc_pass_by_value)]
        .           pub type Ty<'tcx> = &'tcx TyS<'tcx>;
        .           
        .           impl ty::EarlyBoundRegion {
-- line 490 ----------------------------------------
-- line 509 ----------------------------------------
        .           #[derive(Clone, Copy, Lift)]
        .           pub struct Predicate<'tcx> {
        .               inner: &'tcx PredicateInner<'tcx>,
        .           }
        .           
        .           impl<'tcx> PartialEq for Predicate<'tcx> {
        .               fn eq(&self, other: &Self) -> bool {
        .                   // `self.kind` is always interned.
  354,337 ( 0.01%)          ptr::eq(self.inner, other.inner)
  321,987 ( 0.01%)      }
        .           }
        .           
        .           impl Hash for Predicate<'_> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   (self.inner as *const PredicateInner<'_>).hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Predicate<'tcx> {}
        .           
        .           impl<'tcx> Predicate<'tcx> {
        .               /// Gets the inner `Binder<'tcx, PredicateKind<'tcx>>`.
        .               #[inline]
        .               pub fn kind(self) -> Binder<'tcx, PredicateKind<'tcx>> {
1,676,545 ( 0.07%)          self.inner.kind
        .               }
        .           
        .               /// Flips the polarity of a Predicate.
        .               ///
        .               /// Given `T: Trait` predicate it returns `T: !Trait` and given `T: !Trait` returns `T: Trait`.
        .               pub fn flip_polarity(&self, tcx: TyCtxt<'tcx>) -> Option<Predicate<'tcx>> {
        .                   let kind = self
        .                       .inner
-- line 541 ----------------------------------------
-- line 567 ----------------------------------------
        .                       flags: _,
        .                       outer_exclusive_binder: _,
        .                   } = self.inner;
        .           
        .                   kind.hash_stable(hcx, hasher);
        .               }
        .           }
        .           
5,003,754 ( 0.20%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
7,121,375 ( 0.29%)  #[derive(HashStable, TypeFoldable)]
        .           pub enum PredicateKind<'tcx> {
        .               /// Corresponds to `where Foo: Bar<A, B, C>`. `Foo` here would be
        .               /// the `Self` type of the trait reference and `A`, `B`, and `C`
        .               /// would be the type parameters.
        .               Trait(TraitPredicate<'tcx>),
        .           
        .               /// `where 'a: 'b`
        .               RegionOutlives(RegionOutlivesPredicate<'tcx>),
-- line 584 ----------------------------------------
-- line 594 ----------------------------------------
        .               WellFormed(GenericArg<'tcx>),
        .           
        .               /// Trait must be object-safe.
        .               ObjectSafe(DefId),
        .           
        .               /// No direct syntax. May be thought of as `where T: FnFoo<...>`
        .               /// for some substitutions `...` and `T` being a closure type.
        .               /// Satisfied (or refuted) once we know the closure's kind.
      110 ( 0.00%)      ClosureKind(DefId, SubstsRef<'tcx>, ClosureKind),
        .           
        .               /// `T1 <: T2`
        .               ///
        .               /// This obligation is created most often when we have two
        .               /// unresolved type variables and hence don't have enough
        .               /// information to process the subtyping obligation yet.
      202 ( 0.00%)      Subtype(SubtypePredicate<'tcx>),
        .           
        .               /// `T1` coerced to `T2`
        .               ///
        .               /// Like a subtyping obligation, this is created most often
        .               /// when we have two unresolved type variables and hence
        .               /// don't have enough information to process the coercion
        .               /// obligation yet. At the moment, we actually process coercions
        .               /// very much like subtyping and don't handle the full coercion
-- line 617 ----------------------------------------
-- line 645 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> Predicate<'tcx> {
        .               /// Performs a substitution suitable for going from a
        .               /// poly-trait-ref to supertraits that must hold if that
        .               /// poly-trait-ref holds. This is slightly different from a normal
        .               /// substitution in terms of what happens with bound regions. See
        .               /// lengthy comment below for details.
  251,910 ( 0.01%)      pub fn subst_supertrait(
        .                   self,
        .                   tcx: TyCtxt<'tcx>,
        .                   trait_ref: &ty::PolyTraitRef<'tcx>,
        .               ) -> Predicate<'tcx> {
        .                   // The interaction between HRTB and supertraits is not entirely
        .                   // obvious. Let me walk you (and myself) through an example.
        .                   //
        .                   // Let's start with an easy case. Consider two traits:
-- line 661 ----------------------------------------
-- line 731 ----------------------------------------
        .                   //    ['x, 'b]
        .                   let bound_pred = self.kind();
        .                   let pred_bound_vars = bound_pred.bound_vars();
        .                   let trait_bound_vars = trait_ref.bound_vars();
        .                   // 1) Self: Bar1<'a, '^0.0> -> Self: Bar1<'a, '^0.1>
        .                   let shifted_pred =
        .                       tcx.shift_bound_var_indices(trait_bound_vars.len(), bound_pred.skip_binder());
        .                   // 2) Self: Bar1<'a, '^0.1> -> T: Bar1<'^0.0, '^0.1>
   27,990 ( 0.00%)          let new = shifted_pred.subst(tcx, trait_ref.skip_binder().substs);
        .                   // 3) ['x] + ['b] -> ['x, 'b]
        .                   let bound_vars =
        .                       tcx.mk_bound_variable_kinds(trait_bound_vars.iter().chain(pred_bound_vars));
  251,910 ( 0.01%)          tcx.reuse_or_mk_predicate(self, ty::Binder::bind_with_vars(new, bound_vars))
  195,930 ( 0.01%)      }
        .           }
        .           
   32,531 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
  566,851 ( 0.02%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct TraitPredicate<'tcx> {
        .               pub trait_ref: TraitRef<'tcx>,
        .           
  639,149 ( 0.03%)      pub constness: BoundConstness,
        .           
  885,660 ( 0.04%)      pub polarity: ImplPolarity,
        .           }
        .           
        .           pub type PolyTraitPredicate<'tcx> = ty::Binder<'tcx, TraitPredicate<'tcx>>;
        .           
        .           impl<'tcx> TraitPredicate<'tcx> {
  237,832 ( 0.01%)      pub fn remap_constness(&mut self, tcx: TyCtxt<'tcx>, param_env: &mut ParamEnv<'tcx>) {
  208,139 ( 0.01%)          if unlikely!(Some(self.trait_ref.def_id) == tcx.lang_items().drop_trait()) {
        .                       // remap without changing constness of this predicate.
        .                       // this is because `T: ~const Drop` has a different meaning to `T: Drop`
       36 ( 0.00%)              param_env.remap_constness_with(self.constness)
        .                   } else {
   29,711 ( 0.00%)              *param_env = param_env.with_constness(self.constness.and(param_env.constness()))
        .                   }
  178,374 ( 0.01%)      }
        .           
        .               /// Remap the constness of this predicate before emitting it for diagnostics.
        .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
        .                   // this is different to `remap_constness` that callees want to print this predicate
        .                   // in case of selection errors. `T: ~const Drop` bounds cannot end up here when the
        .                   // param_env is not const because we it is always satisfied in non-const contexts.
        .                   if let hir::Constness::NotConst = param_env.constness() {
        .                       self.constness = ty::BoundConstness::NotConst;
        .                   }
        .               }
        .           
        .               pub fn def_id(self) -> DefId {
   86,092 ( 0.00%)          self.trait_ref.def_id
   43,046 ( 0.00%)      }
        .           
   37,332 ( 0.00%)      pub fn self_ty(self) -> Ty<'tcx> {
  111,996 ( 0.00%)          self.trait_ref.self_ty()
   74,664 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> PolyTraitPredicate<'tcx> {
        .               pub fn def_id(self) -> DefId {
        .                   // Ok to skip binder since trait `DefId` does not care about regions.
        .                   self.skip_binder().def_id()
  137,348 ( 0.01%)      }
        .           
        2 ( 0.00%)      pub fn self_ty(self) -> ty::Binder<'tcx, Ty<'tcx>> {
        8 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.self_ty())
        4 ( 0.00%)      }
        .           
        .               /// Remap the constness of this predicate before emitting it for diagnostics.
        .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
        .                   *self = self.map_bound(|mut p| {
        .                       p.remap_constness_diag(param_env);
        .                       p
        .                   });
        .               }
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
   24,044 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
   35,546 ( 0.00%)  pub struct OutlivesPredicate<A, B>(pub A, pub B); // `A: B`
        .           pub type RegionOutlivesPredicate<'tcx> = OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>;
        .           pub type TypeOutlivesPredicate<'tcx> = OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>;
        .           pub type PolyRegionOutlivesPredicate<'tcx> = ty::Binder<'tcx, RegionOutlivesPredicate<'tcx>>;
        .           pub type PolyTypeOutlivesPredicate<'tcx> = ty::Binder<'tcx, TypeOutlivesPredicate<'tcx>>;
        .           
        .           /// Encodes that `a` must be a subtype of `b`. The `a_is_expected` flag indicates
        .           /// whether the `a` type is the type that we should label as "expected" when
        .           /// presenting user diagnostics.
        .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
      685 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct SubtypePredicate<'tcx> {
    1,276 ( 0.00%)      pub a_is_expected: bool,
        .               pub a: Ty<'tcx>,
        .               pub b: Ty<'tcx>,
        .           }
        .           pub type PolySubtypePredicate<'tcx> = ty::Binder<'tcx, SubtypePredicate<'tcx>>;
        .           
        .           /// Encodes that we have to coerce *from* the `a` type to the `b` type.
        .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
        4 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct CoercePredicate<'tcx> {
        .               pub a: Ty<'tcx>,
        .               pub b: Ty<'tcx>,
        .           }
        .           pub type PolyCoercePredicate<'tcx> = ty::Binder<'tcx, CoercePredicate<'tcx>>;
        .           
  292,606 ( 0.01%)  #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, TyEncodable, TyDecodable)]
  205,600 ( 0.01%)  #[derive(HashStable, TypeFoldable)]
        .           pub enum Term<'tcx> {
        4 ( 0.00%)      Ty(Ty<'tcx>),
        .               Const(&'tcx Const<'tcx>),
        .           }
        .           
        .           impl<'tcx> From<Ty<'tcx>> for Term<'tcx> {
        .               fn from(ty: Ty<'tcx>) -> Self {
        .                   Term::Ty(ty)
    1,659 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> From<&'tcx Const<'tcx>> for Term<'tcx> {
        .               fn from(c: &'tcx Const<'tcx>) -> Self {
        .                   Term::Const(c)
        .               }
        .           }
        .           
        .           impl<'tcx> Term<'tcx> {
        .               pub fn ty(&self) -> Option<Ty<'tcx>> {
    5,896 ( 0.00%)          if let Term::Ty(ty) = self { Some(ty) } else { None }
    2,948 ( 0.00%)      }
        .           }
        .           
        .           /// This kind of predicate has no *direct* correspondent in the
        .           /// syntax, but it roughly corresponds to the syntactic forms:
        .           ///
        .           /// 1. `T: TraitRef<..., Item = Type>`
        .           /// 2. `<T as TraitRef<...>>::Item == Type` (NYI)
        .           ///
        .           /// In particular, form #1 is "desugared" to the combination of a
        .           /// normal trait predicate (`T: TraitRef<...>`) and one of these
        .           /// predicates. Form #2 is a broader form in that it also permits
        .           /// equality between arbitrary types. Processing an instance of
        .           /// Form #2 eventually yields one of these `ProjectionPredicate`
        .           /// instances to normalize the LHS.
       42 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
   29,855 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct ProjectionPredicate<'tcx> {
        .               pub projection_ty: ProjectionTy<'tcx>,
  235,970 ( 0.01%)      pub term: Term<'tcx>,
        .           }
        .           
        .           pub type PolyProjectionPredicate<'tcx> = Binder<'tcx, ProjectionPredicate<'tcx>>;
        .           
        .           impl<'tcx> PolyProjectionPredicate<'tcx> {
        .               /// Returns the `DefId` of the trait of the associated item being projected.
        .               #[inline]
        .               pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
       16 ( 0.00%)          self.skip_binder().projection_ty.trait_def_id(tcx)
        .               }
        .           
        .               /// Get the [PolyTraitRef] required for this projection to be well formed.
        .               /// Note that for generic associated types the predicates of the associated
        .               /// type also need to be checked.
        .               #[inline]
        .               pub fn required_poly_trait_ref(&self, tcx: TyCtxt<'tcx>) -> PolyTraitRef<'tcx> {
        .                   // Note: unlike with `TraitRef::to_poly_trait_ref()`,
        .                   // `self.0.trait_ref` is permitted to have escaping regions.
        .                   // This is because here `self` has a `Binder` and so does our
        .                   // return value, so we are preserving the number of binding
        .                   // levels.
       20 ( 0.00%)          self.map_bound(|predicate| predicate.projection_ty.trait_ref(tcx))
        .               }
        .           
        .               pub fn term(&self) -> Binder<'tcx, Term<'tcx>> {
        .                   self.map_bound(|predicate| predicate.term)
        .               }
        .           
        .               /// The `DefId` of the `TraitItem` for the associated type.
        .               ///
        .               /// Note that this is not the `DefId` of the `TraitRef` containing this
        .               /// associated type, which is in `tcx.associated_item(projection_def_id()).container`.
        .               pub fn projection_def_id(&self) -> DefId {
        .                   // Ok to skip binder since trait `DefId` does not care about regions.
   12,080 ( 0.00%)          self.skip_binder().projection_ty.item_def_id
    6,040 ( 0.00%)      }
        .           }
        .           
        .           pub trait ToPolyTraitRef<'tcx> {
        .               fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx>;
        .           }
        .           
        .           impl<'tcx> ToPolyTraitRef<'tcx> for PolyTraitPredicate<'tcx> {
    9,993 ( 0.00%)      fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx> {
    9,993 ( 0.00%)          self.map_bound_ref(|trait_pred| trait_pred.trait_ref)
    9,993 ( 0.00%)      }
        .           }
        .           
        .           pub trait ToPredicate<'tcx> {
        .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx>;
        .           }
        .           
        .           impl<'tcx> ToPredicate<'tcx> for Binder<'tcx, PredicateKind<'tcx>> {
        .               #[inline(always)]
        .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
        .                   tcx.mk_predicate(self)
        .               }
        .           }
        .           
        .           impl<'tcx> ToPredicate<'tcx> for PolyTraitPredicate<'tcx> {
   14,391 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
   71,955 ( 0.00%)          self.map_bound(PredicateKind::Trait).to_predicate(tcx)
   28,782 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate<'tcx> {
        .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
        .                   self.map_bound(PredicateKind::RegionOutlives).to_predicate(tcx)
        .               }
        .           }
        .           
        .           impl<'tcx> ToPredicate<'tcx> for PolyTypeOutlivesPredicate<'tcx> {
      132 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
      264 ( 0.00%)          self.map_bound(PredicateKind::TypeOutlives).to_predicate(tcx)
      264 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {
      484 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
    2,420 ( 0.00%)          self.map_bound(PredicateKind::Projection).to_predicate(tcx)
      968 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Predicate<'tcx> {
  162,492 ( 0.01%)      pub fn to_opt_poly_trait_pred(self) -> Option<PolyTraitPredicate<'tcx>> {
        .                   let predicate = self.kind();
  487,476 ( 0.02%)          match predicate.skip_binder() {
  316,890 ( 0.01%)              PredicateKind::Trait(t) => Some(predicate.rebind(t)),
        .                       PredicateKind::Projection(..)
        .                       | PredicateKind::Subtype(..)
        .                       | PredicateKind::Coerce(..)
        .                       | PredicateKind::RegionOutlives(..)
        .                       | PredicateKind::WellFormed(..)
        .                       | PredicateKind::ObjectSafe(..)
        .                       | PredicateKind::ClosureKind(..)
        .                       | PredicateKind::TypeOutlives(..)
        .                       | PredicateKind::ConstEvaluatable(..)
        .                       | PredicateKind::ConstEquate(..)
   17,868 ( 0.00%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
        .                   }
  162,492 ( 0.01%)      }
        .           
   47,381 ( 0.00%)      pub fn to_opt_type_outlives(self) -> Option<PolyTypeOutlivesPredicate<'tcx>> {
        .                   let predicate = self.kind();
   94,762 ( 0.00%)          match predicate.skip_binder() {
        .                       PredicateKind::TypeOutlives(data) => Some(predicate.rebind(data)),
        .                       PredicateKind::Trait(..)
        .                       | PredicateKind::Projection(..)
        .                       | PredicateKind::Subtype(..)
        .                       | PredicateKind::Coerce(..)
        .                       | PredicateKind::RegionOutlives(..)
        .                       | PredicateKind::WellFormed(..)
        .                       | PredicateKind::ObjectSafe(..)
        .                       | PredicateKind::ClosureKind(..)
        .                       | PredicateKind::ConstEvaluatable(..)
        .                       | PredicateKind::ConstEquate(..)
   47,381 ( 0.00%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
        .                   }
   47,381 ( 0.00%)      }
        .           }
        .           
        .           /// Represents the bounds declared on a particular set of type
        .           /// parameters. Should eventually be generalized into a flag list of
        .           /// where-clauses. You can obtain an `InstantiatedPredicates` list from a
        .           /// `GenericPredicates` by using the `instantiate` method. Note that this method
        .           /// reflects an important semantic invariant of `InstantiatedPredicates`: while
        .           /// the `GenericPredicates` are expressed in terms of the bound type
-- line 1005 ----------------------------------------
-- line 1011 ----------------------------------------
        .           /// Example:
        .           ///
        .           ///     struct Foo<T, U: Bar<T>> { ... }
        .           ///
        .           /// Here, the `GenericPredicates` for `Foo` would contain a list of bounds like
        .           /// `[[], [U:Bar<T>]]`. Now if there were some particular reference
        .           /// like `Foo<isize,usize>`, then the `InstantiatedPredicates` would be `[[],
        .           /// [usize:Bar<isize>]]`.
   43,711 ( 0.00%)  #[derive(Clone, Debug, TypeFoldable)]
        .           pub struct InstantiatedPredicates<'tcx> {
        .               pub predicates: Vec<Predicate<'tcx>>,
        .               pub spans: Vec<Span>,
        .           }
        .           
        .           impl<'tcx> InstantiatedPredicates<'tcx> {
       87 ( 0.00%)      pub fn empty() -> InstantiatedPredicates<'tcx> {
   28,602 ( 0.00%)          InstantiatedPredicates { predicates: vec![], spans: vec![] }
       87 ( 0.00%)      }
        .           
        .               pub fn is_empty(&self) -> bool {
        .                   self.predicates.is_empty()
        .               }
        .           }
        .           
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable, TyEncodable, TyDecodable, TypeFoldable)]
        .           pub struct OpaqueTypeKey<'tcx> {
-- line 1036 ----------------------------------------
-- line 1091 ----------------------------------------
        .               /// ```
        .               /// for<'a> fn(&'a u32)
        .               /// ```
        .               ///
        .               /// Once we "enter" into this `for<'a>` quantifier, we are in a
        .               /// new universe that extends `U` -- in this new universe, we can
        .               /// name the region `'a`, but that region was not nameable from
        .               /// `U` because it was not in scope there.
   27,383 ( 0.00%)      pub fn next_universe(self) -> UniverseIndex {
        .                   UniverseIndex::from_u32(self.private.checked_add(1).unwrap())
   82,149 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` can name a name from `other` -- in other words,
        .               /// if the set of names in `self` is a superset of those in
        .               /// `other` (`self >= other`).
        .               pub fn can_name(self, other: UniverseIndex) -> bool {
   36,740 ( 0.00%)          self.private >= other.private
   18,370 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` cannot name some names from `other` -- in other
        .               /// words, if the set of names in `self` is a strict subset of
        .               /// those in `other` (`self < other`).
        .               pub fn cannot_name(self, other: UniverseIndex) -> bool {
       12 ( 0.00%)          self.private < other.private
        6 ( 0.00%)      }
        .           }
        .           
        .           /// The "placeholder index" fully defines a placeholder region, type, or const. Placeholders are
        .           /// identified by both a universe, as well as a name residing within that universe. Distinct bound
        .           /// regions/types/consts within the same universe simply have an unknown relationship to one
        .           /// another.
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, PartialOrd, Ord)]
        .           pub struct Placeholder<T> {
       90 ( 0.00%)      pub universe: UniverseIndex,
       66 ( 0.00%)      pub name: T,
        .           }
        .           
        .           impl<'a, T> HashStable<StableHashingContext<'a>> for Placeholder<T>
        .           where
        .               T: HashStable<StableHashingContext<'a>>,
        .           {
        .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
        .                   self.universe.hash_stable(hcx, hasher);
-- line 1133 ----------------------------------------
-- line 1194 ----------------------------------------
        .           /// aren't allowed to call that query: it is equal to `type_of(const_param)` which is
        .           /// trivial to compute.
        .           ///
        .           /// If we now want to use that constant in a place which potentionally needs its type
        .           /// we also pass the type of its `const_param`. This is the point of `WithOptConstParam`,
        .           /// except that instead of a `Ty` we bundle the `DefId` of the const parameter.
        .           /// Meaning that we need to use `type_of(const_param_did)` if `const_param_did` is `Some`
        .           /// to get the type of `did`.
    9,395 ( 0.00%)  #[derive(Copy, Clone, Debug, TypeFoldable, Lift, TyEncodable, TyDecodable)]
        .           #[derive(PartialEq, Eq, PartialOrd, Ord)]
        .           #[derive(Hash, HashStable)]
        .           pub struct WithOptConstParam<T> {
    7,585 ( 0.00%)      pub did: T,
        .               /// The `DefId` of the corresponding generic parameter in case `did` is
        .               /// a const argument.
        .               ///
        .               /// Note that even if `did` is a const argument, this may still be `None`.
        .               /// All queries taking `WithOptConstParam` start by calling `tcx.opt_const_param_of(def.did)`
        .               /// to potentially update `param_did` in the case it is `None`.
   59,842 ( 0.00%)      pub const_param_did: Option<DefId>,
        .           }
        .           
        .           impl<T> WithOptConstParam<T> {
        .               /// Creates a new `WithOptConstParam` setting `const_param_did` to `None`.
        .               #[inline(always)]
        .               pub fn unknown(did: T) -> WithOptConstParam<T> {
        .                   WithOptConstParam { did, const_param_did: None }
   17,632 ( 0.00%)      }
        .           }
        .           
        .           impl WithOptConstParam<LocalDefId> {
        .               /// Returns `Some((did, param_did))` if `def_id` is a const argument,
        .               /// `None` otherwise.
        .               #[inline(always)]
        .               pub fn try_lookup(did: LocalDefId, tcx: TyCtxt<'_>) -> Option<(LocalDefId, DefId)> {
        .                   tcx.opt_const_param_of(did).map(|param_did| (did, param_did))
        .               }
        .           
        .               /// In case `self` is unknown but `self.did` is a const argument, this returns
        .               /// a `WithOptConstParam` with the correct `const_param_did`.
        .               #[inline(always)]
        .               pub fn try_upgrade(self, tcx: TyCtxt<'_>) -> Option<WithOptConstParam<LocalDefId>> {
    1,468 ( 0.00%)          if self.const_param_did.is_none() {
    2,202 ( 0.00%)              if let const_param_did @ Some(_) = tcx.opt_const_param_of(self.did) {
        .                           return Some(WithOptConstParam { did: self.did, const_param_did });
        .                       }
        .                   }
        .           
        .                   None
        .               }
        .           
        .               pub fn to_global(self) -> WithOptConstParam<DefId> {
        .                   WithOptConstParam { did: self.did.to_def_id(), const_param_did: self.const_param_did }
        .               }
        .           
      204 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
      249 ( 0.00%)          if let Some(did) = self.const_param_did { did } else { self.did.to_def_id() }
       51 ( 0.00%)      }
        .           }
        .           
        .           impl WithOptConstParam<DefId> {
      976 ( 0.00%)      pub fn as_local(self) -> Option<WithOptConstParam<LocalDefId>> {
        .                   self.did
        .                       .as_local()
        .                       .map(|did| WithOptConstParam { did, const_param_did: self.const_param_did })
      976 ( 0.00%)      }
        .           
        .               pub fn as_const_arg(self) -> Option<(LocalDefId, DefId)> {
    5,992 ( 0.00%)          if let Some(param_did) = self.const_param_did {
    2,850 ( 0.00%)              if let Some(did) = self.did.as_local() {
        .                           return Some((did, param_did));
        .                       }
        .                   }
        .           
        .                   None
      732 ( 0.00%)      }
        .           
        .               pub fn is_local(self) -> bool {
        .                   self.did.is_local()
        .               }
        .           
      502 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
        .                   self.const_param_did.unwrap_or(self.did)
      502 ( 0.00%)      }
        .           }
        .           
        .           /// When type checking, we use the `ParamEnv` to track
        .           /// details about the set of where-clauses that are in scope at this
        .           /// particular point.
        .           #[derive(Copy, Clone, Hash, PartialEq, Eq)]
        .           pub struct ParamEnv<'tcx> {
        .               /// This packs both caller bounds and the reveal enum into one pointer.
-- line 1285 ----------------------------------------
-- line 1302 ----------------------------------------
        .               reveal: traits::Reveal,
        .               constness: hir::Constness,
        .           }
        .           
        .           unsafe impl rustc_data_structures::tagged_ptr::Tag for ParamTag {
        .               const BITS: usize = 2;
        .               #[inline]
        .               fn into_usize(self) -> usize {
   50,616 ( 0.00%)          match self {
        .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst } => 0,
        .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst } => 1,
        .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const } => 2,
        .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::Const } => 3,
        .                   }
        .               }
        .               #[inline]
        .               unsafe fn from_usize(ptr: usize) -> Self {
  542,569 ( 0.02%)          match ptr {
        .                       0 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst },
        .                       1 => Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst },
        .                       2 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const },
        .                       3 => Self { reveal: traits::Reveal::All, constness: hir::Constness::Const },
        .                       _ => std::hint::unreachable_unchecked(),
        .                   }
        .               }
        .           }
-- line 1327 ----------------------------------------
-- line 1405 ----------------------------------------
        .               pub fn new(
        .                   caller_bounds: &'tcx List<Predicate<'tcx>>,
        .                   reveal: Reveal,
        .                   constness: hir::Constness,
        .               ) -> Self {
        .                   ty::ParamEnv { packed: CopyTaggedPtr::new(caller_bounds, ParamTag { reveal, constness }) }
        .               }
        .           
      138 ( 0.00%)      pub fn with_user_facing(mut self) -> Self {
        .                   self.packed.set_tag(ParamTag { reveal: Reveal::UserFacing, ..self.packed.tag() });
        .                   self
      138 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn with_constness(mut self, constness: hir::Constness) -> Self {
        .                   self.packed.set_tag(ParamTag { constness, ..self.packed.tag() });
        .                   self
        .               }
        .           
        .               #[inline]
-- line 1424 ----------------------------------------
-- line 1430 ----------------------------------------
        .               #[inline]
        .               pub fn without_const(mut self) -> Self {
        .                   self.packed.set_tag(ParamTag { constness: hir::Constness::NotConst, ..self.packed.tag() });
        .                   self
        .               }
        .           
        .               #[inline]
        .               pub fn remap_constness_with(&mut self, mut constness: ty::BoundConstness) {
   17,782 ( 0.00%)          *self = self.with_constness(constness.and(self.constness()))
        .               }
        .           
        .               /// Returns a new parameter environment with the same clauses, but
        .               /// which "reveals" the true results of projections in all cases
        .               /// (even for associated types that are specializable). This is
        .               /// the desired behavior during codegen and certain other special
        .               /// contexts; normally though we want to use `Reveal::UserFacing`,
        .               /// which is the default.
        .               /// All opaque types in the caller_bounds of the `ParamEnv`
        .               /// will be normalized to their underlying types.
        .               /// See PR #65989 and issue #65918 for more details
   24,232 ( 0.00%)      pub fn with_reveal_all_normalized(self, tcx: TyCtxt<'tcx>) -> Self {
        .                   if self.packed.tag().reveal == traits::Reveal::All {
        .                       return self;
        .                   }
        .           
        .                   ParamEnv::new(
        .                       tcx.normalize_opaque_types(self.caller_bounds()),
        .                       Reveal::All,
        .                       self.constness(),
        .                   )
   27,261 ( 0.00%)      }
        .           
        .               /// Returns this same environment but with no caller bounds.
        .               #[inline]
        .               pub fn without_caller_bounds(self) -> Self {
        .                   Self::new(List::empty(), self.reveal(), self.constness())
        .               }
        .           
        .               /// Creates a suitable environment in which to perform trait
-- line 1468 ----------------------------------------
-- line 1472 ----------------------------------------
        .               /// pair it with the empty environment. This improves caching and is generally
        .               /// invisible.
        .               ///
        .               /// N.B., we preserve the environment when type-checking because it
        .               /// is possible for the user to have wacky where-clauses like
        .               /// `where Box<u32>: Copy`, which are clearly never
        .               /// satisfiable. We generally want to behave as if they were true,
        .               /// although the surrounding function is never reachable.
   76,870 ( 0.00%)      pub fn and<T: TypeFoldable<'tcx>>(self, value: T) -> ParamEnvAnd<'tcx, T> {
        .                   match self.reveal() {
        .                       Reveal::UserFacing => ParamEnvAnd { param_env: self, value },
        .           
        .                       Reveal::All => {
   23,295 ( 0.00%)                  if value.is_global() {
    2,032 ( 0.00%)                      ParamEnvAnd { param_env: self.without_caller_bounds(), value }
        .                           } else {
        .                               ParamEnvAnd { param_env: self, value }
        .                           }
        .                       }
        .                   }
   70,609 ( 0.00%)      }
        .           }
        .           
        .           // FIXME(ecstaticmorse): Audit all occurrences of `without_const().to_predicate(tcx)` to ensure that
        .           // the constness of trait bounds is being propagated correctly.
        .           impl<'tcx> PolyTraitRef<'tcx> {
        .               #[inline]
        .               pub fn with_constness(self, constness: BoundConstness) -> PolyTraitPredicate<'tcx> {
   19,682 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
        .                       trait_ref,
        .                       constness,
        .                       polarity: ty::ImplPolarity::Positive,
        .                   })
        .               }
        .               #[inline]
        .               pub fn without_const(self) -> PolyTraitPredicate<'tcx> {
        .                   self.with_constness(BoundConstness::NotConst)
        .               }
        .           }
        .           
    3,620 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TypeFoldable)]
        .           pub struct ParamEnvAnd<'tcx, T> {
   18,652 ( 0.00%)      pub param_env: ParamEnv<'tcx>,
  305,471 ( 0.01%)      pub value: T,
        .           }
        .           
        .           impl<'tcx, T> ParamEnvAnd<'tcx, T> {
        .               pub fn into_parts(self) -> (ParamEnv<'tcx>, T) {
        .                   (self.param_env, self.value)
        .               }
        .           
        .               #[inline]
        .               pub fn without_const(mut self) -> Self {
        .                   self.param_env = self.param_env.without_const();
   19,294 ( 0.00%)          self
        .               }
        .           }
        .           
        .           impl<'a, 'tcx, T> HashStable<StableHashingContext<'a>> for ParamEnvAnd<'tcx, T>
        .           where
        .               T: HashStable<StableHashingContext<'a>>,
        .           {
        .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
-- line 1534 ----------------------------------------
-- line 1542 ----------------------------------------
        .           #[derive(Copy, Clone, Debug, HashStable)]
        .           pub struct Destructor {
        .               /// The `DefId` of the destructor method
        .               pub did: DefId,
        .               /// The constness of the destructor method
        .               pub constness: hir::Constness,
        .           }
        .           
      838 ( 0.00%)  bitflags! {
    2,457 ( 0.00%)      #[derive(HashStable, TyEncodable, TyDecodable)]
        .               pub struct VariantFlags: u32 {
        .                   const NO_VARIANT_FLAGS        = 0;
        .                   /// Indicates whether the field list of this variant is `#[non_exhaustive]`.
        .                   const IS_FIELD_LIST_NON_EXHAUSTIVE = 1 << 0;
        .                   /// Indicates whether this variant was obtained as part of recovering from
        .                   /// a syntactic error. May be incomplete or bogus.
        .                   const IS_RECOVERED = 1 << 1;
        .               }
        .           }
        .           
        .           /// Definition of a variant -- a struct's fields or an enum variant.
  163,487 ( 0.01%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
        .           pub struct VariantDef {
        .               /// `DefId` that identifies the variant itself.
        .               /// If this variant belongs to a struct or union, then this is a copy of its `DefId`.
        .               pub def_id: DefId,
        .               /// `DefId` that identifies the variant's constructor.
        .               /// If this variant is a struct variant, then this is `None`.
        .               pub ctor_def_id: Option<DefId>,
        .               /// Variant or struct name.
-- line 1571 ----------------------------------------
-- line 1592 ----------------------------------------
        .               /// `parent_did` is the `DefId` of the `AdtDef` representing the enum or struct that
        .               /// owns this variant. It is used for checking if a struct has `#[non_exhaustive]` w/out having
        .               /// to go through the redirect of checking the ctor's attributes - but compiling a small crate
        .               /// requires loading the `AdtDef`s for all the structs in the universe (e.g., coherence for any
        .               /// built-in trait), and we do not want to load attributes twice.
        .               ///
        .               /// If someone speeds up attribute loading to not be a performance concern, they can
        .               /// remove this hack and use the constructor `DefId` everywhere.
    1,192 ( 0.00%)      pub fn new(
        .                   name: Symbol,
        .                   variant_did: Option<DefId>,
        .                   ctor_def_id: Option<DefId>,
        .                   discr: VariantDiscr,
        .                   fields: Vec<FieldDef>,
        .                   ctor_kind: CtorKind,
        .                   adt_kind: AdtKind,
        .                   parent_did: DefId,
-- line 1608 ----------------------------------------
-- line 1611 ----------------------------------------
        .               ) -> Self {
        .                   debug!(
        .                       "VariantDef::new(name = {:?}, variant_did = {:?}, ctor_def_id = {:?}, discr = {:?},
        .                        fields = {:?}, ctor_kind = {:?}, adt_kind = {:?}, parent_did = {:?})",
        .                       name, variant_did, ctor_def_id, discr, fields, ctor_kind, adt_kind, parent_did,
        .                   );
        .           
        .                   let mut flags = VariantFlags::NO_VARIANT_FLAGS;
      149 ( 0.00%)          if is_field_list_non_exhaustive {
        .                       flags |= VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE;
        .                   }
        .           
      447 ( 0.00%)          if recovered {
        .                       flags |= VariantFlags::IS_RECOVERED;
        .                   }
        .           
    1,341 ( 0.00%)          VariantDef {
        .                       def_id: variant_did.unwrap_or(parent_did),
        .                       ctor_def_id,
        .                       name,
        .                       discr,
      596 ( 0.00%)              fields,
        .                       ctor_kind,
        .                       flags,
        .                   }
      596 ( 0.00%)      }
        .           
        .               /// Is this field list non-exhaustive?
        .               #[inline]
        .               pub fn is_field_list_non_exhaustive(&self) -> bool {
        .                   self.flags.intersects(VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE)
        .               }
        .           
        .               /// Was this variant obtained as part of recovering from a syntactic error?
        .               #[inline]
        .               pub fn is_recovered(&self) -> bool {
        .                   self.flags.intersects(VariantFlags::IS_RECOVERED)
        .               }
        .           
        .               /// Computes the `Ident` of this variant by looking up the `Span`
    2,527 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
    1,444 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.def_id).unwrap())
    3,249 ( 0.00%)      }
        .           }
        .           
   88,381 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]
        .           pub enum VariantDiscr {
        .               /// Explicit value for this variant, i.e., `X = 123`.
        .               /// The `DefId` corresponds to the embedded constant.
        .               Explicit(DefId),
        .           
        .               /// The previous variant's discriminant plus one.
        .               /// For efficiency reasons, the distance from the
        .               /// last `Explicit` discriminant is being stored,
        .               /// or `0` for the first variant, if it has none.
        .               Relative(u32),
        .           }
        .           
  229,187 ( 0.01%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
        .           pub struct FieldDef {
        .               pub did: DefId,
        .               pub name: Symbol,
        .               pub vis: Visibility,
        .           }
        .           
    3,253 ( 0.00%)  bitflags! {
        .               #[derive(TyEncodable, TyDecodable, Default, HashStable)]
        .               pub struct ReprFlags: u8 {
        .                   const IS_C               = 1 << 0;
        .                   const IS_SIMD            = 1 << 1;
        .                   const IS_TRANSPARENT     = 1 << 2;
        .                   // Internal only for now. If true, don't reorder fields.
        .                   const IS_LINEAR          = 1 << 3;
        .                   // If true, don't expose any niche to type's context.
-- line 1684 ----------------------------------------
-- line 1689 ----------------------------------------
        .                   // Any of these flags being set prevent field reordering optimisation.
        .                   const IS_UNOPTIMISABLE   = ReprFlags::IS_C.bits
        .                                            | ReprFlags::IS_SIMD.bits
        .                                            | ReprFlags::IS_LINEAR.bits;
        .               }
        .           }
        .           
        .           /// Represents the repr options provided by the user,
  126,586 ( 0.01%)  #[derive(Copy, Clone, Debug, Eq, PartialEq, TyEncodable, TyDecodable, Default, HashStable)]
        .           pub struct ReprOptions {
        .               pub int: Option<attr::IntType>,
        .               pub align: Option<Align>,
        .               pub pack: Option<Align>,
        .               pub flags: ReprFlags,
        .               /// The seed to be used for randomizing a type's layout
        .               ///
        .               /// Note: This could technically be a `[u8; 16]` (a `u128`) which would
-- line 1705 ----------------------------------------
-- line 1706 ----------------------------------------
        .               /// be the "most accurate" hash as it'd encompass the item and crate
        .               /// hash without loss, but it does pay the price of being larger.
        .               /// Everything's a tradeoff, a `u64` seed should be sufficient for our
        .               /// purposes (primarily `-Z randomize-layout`)
        .               pub field_shuffle_seed: u64,
        .           }
        .           
        .           impl ReprOptions {
      845 ( 0.00%)      pub fn new(tcx: TyCtxt<'_>, did: DefId) -> ReprOptions {
        .                   let mut flags = ReprFlags::empty();
        .                   let mut size = None;
        .                   let mut max_align: Option<Align> = None;
        .                   let mut min_pack: Option<Align> = None;
        .           
        .                   // Generate a deterministically-derived seed from the item's path hash
        .                   // to allow for cross-crate compilation to actually work
        .                   let mut field_shuffle_seed = tcx.def_path_hash(did).0.to_smaller_hash();
        .           
        .                   // If the user defined a custom seed for layout randomization, xor the item's
        .                   // path hash with the user defined seed, this will allowing determinism while
        .                   // still allowing users to further randomize layout generation for e.g. fuzzing
      195 ( 0.00%)          if let Some(user_seed) = tcx.sess.opts.debugging_opts.layout_seed {
        .                       field_shuffle_seed ^= user_seed;
        .                   }
        .           
      260 ( 0.00%)          for attr in tcx.get_attrs(did).iter() {
    3,155 ( 0.00%)              for r in attr::find_repr_attrs(&tcx.sess, attr) {
        .                           flags.insert(match r {
        .                               attr::ReprC => ReprFlags::IS_C,
        .                               attr::ReprPacked(pack) => {
        .                                   let pack = Align::from_bytes(pack as u64).unwrap();
        .                                   min_pack = Some(if let Some(min_pack) = min_pack {
        .                                       min_pack.min(pack)
        .                                   } else {
        .                                       pack
-- line 1740 ----------------------------------------
-- line 1753 ----------------------------------------
        .                                   ReprFlags::empty()
        .                               }
        .                           });
        .                       }
        .                   }
        .           
        .                   // If `-Z randomize-layout` was enabled for the type definition then we can
        .                   // consider performing layout randomization
      520 ( 0.00%)          if tcx.sess.opts.debugging_opts.randomize_layout {
        .                       flags.insert(ReprFlags::RANDOMIZE_LAYOUT);
        .                   }
        .           
        .                   // This is here instead of layout because the choice must make it into metadata.
      390 ( 0.00%)          if !tcx.consider_optimizing(|| format!("Reorder fields of {:?}", tcx.def_path_str(did))) {
        .                       flags.insert(ReprFlags::IS_LINEAR);
        .                   }
        .           
      130 ( 0.00%)          Self { int: size, align: max_align, pack: min_pack, flags, field_shuffle_seed }
    1,820 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn simd(&self) -> bool {
        .                   self.flags.contains(ReprFlags::IS_SIMD)
        .               }
        .           
        .               #[inline]
        .               pub fn c(&self) -> bool {
-- line 1779 ----------------------------------------
-- line 1798 ----------------------------------------
        .               #[inline]
        .               pub fn hide_niche(&self) -> bool {
        .                   self.flags.contains(ReprFlags::HIDE_NICHE)
        .               }
        .           
        .               /// Returns the discriminant type, given these `repr` options.
        .               /// This must only be called on enums!
        .               pub fn discr_type(&self) -> attr::IntType {
    2,317 ( 0.00%)          self.int.unwrap_or(attr::SignedInt(ast::IntTy::Isize))
      948 ( 0.00%)      }
        .           
        .               /// Returns `true` if this `#[repr()]` should inhabit "smart enum
        .               /// layout" optimizations, such as representing `Foo<&T>` as a
        .               /// single pointer.
        .               pub fn inhibit_enum_layout_opt(&self) -> bool {
      595 ( 0.00%)          self.c() || self.int.is_some()
        .               }
        .           
        .               /// Returns `true` if this `#[repr()]` should inhibit struct field reordering
        .               /// optimizations, such as with `repr(C)`, `repr(packed(1))`, or `repr(<int>)`.
        .               pub fn inhibit_struct_field_reordering_opt(&self) -> bool {
    1,978 ( 0.00%)          if let Some(pack) = self.pack {
        .                       if pack.bytes() == 1 {
        .                           return true;
        .                       }
        .                   }
        .           
    4,008 ( 0.00%)          self.flags.intersects(ReprFlags::IS_UNOPTIMISABLE) || self.int.is_some()
        .               }
        .           
        .               /// Returns `true` if this type is valid for reordering and `-Z randomize-layout`
        .               /// was enabled for its declaration crate
        .               pub fn can_randomize_type_layout(&self) -> bool {
      976 ( 0.00%)          !self.inhibit_struct_field_reordering_opt()
        .                       && self.flags.contains(ReprFlags::RANDOMIZE_LAYOUT)
        .               }
        .           
        .               /// Returns `true` if this `#[repr()]` should inhibit union ABI optimisations.
        .               pub fn inhibit_union_abi_opt(&self) -> bool {
        8 ( 0.00%)          self.c()
        .               }
        .           }
        .           
        .           impl<'tcx> FieldDef {
        .               /// Returns the type of this field. The resulting type is not normalized. The `subst` is
        .               /// typically obtained via the second field of [`TyKind::Adt`].
   34,384 ( 0.00%)      pub fn ty(&self, tcx: TyCtxt<'tcx>, subst: SubstsRef<'tcx>) -> Ty<'tcx> {
    9,824 ( 0.00%)          tcx.type_of(self.did).subst(tcx, subst)
   39,296 ( 0.00%)      }
        .           
        .               /// Computes the `Ident` of this variant by looking up the `Span`
    6,566 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
    3,752 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.did).unwrap())
    8,442 ( 0.00%)      }
        .           }
        .           
        .           pub type Attributes<'tcx> = &'tcx [ast::Attribute];
        .           
        .           #[derive(Debug, PartialEq, Eq)]
        .           pub enum ImplOverlapKind {
        .               /// These impls are always allowed to overlap.
        .               Permitted {
-- line 1859 ----------------------------------------
-- line 1891 ----------------------------------------
        .               /// marker traits.
        .               /// 4. Neither of the impls can have any where-clauses.
        .               ///
        .               /// Once `traitobject` 0.1.0 is no longer an active concern, this hack can be removed.
        .               Issue33140,
        .           }
        .           
        .           impl<'tcx> TyCtxt<'tcx> {
   17,632 ( 0.00%)      pub fn typeck_body(self, body: hir::BodyId) -> &'tcx TypeckResults<'tcx> {
    4,408 ( 0.00%)          self.typeck(self.hir().body_owner_def_id(body))
   17,632 ( 0.00%)      }
        .           
        .               pub fn provided_trait_methods(self, id: DefId) -> impl 'tcx + Iterator<Item = &'tcx AssocItem> {
        .                   self.associated_items(id)
        .                       .in_definition_order()
        .                       .filter(|item| item.kind == AssocKind::Fn && item.defaultness.has_value())
        .               }
        .           
        .               fn item_name_from_hir(self, def_id: DefId) -> Option<Ident> {
        .                   self.hir().get_if_local(def_id).and_then(|node| node.ident())
        .               }
        .           
    2,133 ( 0.00%)      fn item_name_from_def_id(self, def_id: DefId) -> Option<Symbol> {
      237 ( 0.00%)          if def_id.index == CRATE_DEF_INDEX {
        .                       Some(self.crate_name(def_id.krate))
        .                   } else {
      711 ( 0.00%)              let def_key = self.def_key(def_id);
    1,185 ( 0.00%)              match def_key.disambiguated_data.data {
        .                           // The name of a constructor is that of its parent.
        .                           rustc_hir::definitions::DefPathData::Ctor => self.item_name_from_def_id(DefId {
        .                               krate: def_id.krate,
        .                               index: def_key.parent.unwrap(),
        .                           }),
      474 ( 0.00%)                  _ => def_key.disambiguated_data.data.get_opt_name(),
        .                       }
        .                   }
    1,896 ( 0.00%)      }
        .           
        .               /// Look up the name of an item across crates. This does not look at HIR.
        .               ///
        .               /// When possible, this function should be used for cross-crate lookups over
        .               /// [`opt_item_name`] to avoid invalidating the incremental cache. If you
        .               /// need to handle items without a name, or HIR items that will not be
        .               /// serialized cross-crate, or if you need the span of the item, use
        .               /// [`opt_item_name`] instead.
        .               ///
        .               /// [`opt_item_name`]: Self::opt_item_name
    1,659 ( 0.00%)      pub fn item_name(self, id: DefId) -> Symbol {
        .                   // Look at cross-crate items first to avoid invalidating the incremental cache
        .                   // unless we have to.
      237 ( 0.00%)          self.item_name_from_def_id(id).unwrap_or_else(|| {
        .                       bug!("item_name: no name for {:?}", self.def_path(id));
        .                   })
    1,185 ( 0.00%)      }
        .           
        .               /// Look up the name and span of an item or [`Node`].
        .               ///
        .               /// See [`item_name`][Self::item_name] for more information.
        .               pub fn opt_item_name(self, def_id: DefId) -> Option<Ident> {
        .                   // Look at the HIR first so the span will be correct if this is a local item.
        .                   self.item_name_from_hir(def_id)
        .                       .or_else(|| self.item_name_from_def_id(def_id).map(Ident::with_dummy_span))
        .               }
        .           
  200,680 ( 0.01%)      pub fn opt_associated_item(self, def_id: DefId) -> Option<&'tcx AssocItem> {
   80,272 ( 0.00%)          if let DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy = self.def_kind(def_id) {
        .                       Some(self.associated_item(def_id))
        .                   } else {
        .                       None
        .                   }
  180,612 ( 0.01%)      }
        .           
    1,258 ( 0.00%)      pub fn field_index(self, hir_id: hir::HirId, typeck_results: &TypeckResults<'_>) -> usize {
        .                   typeck_results.field_indices().get(hir_id).cloned().expect("no index for a field")
    2,516 ( 0.00%)      }
        .           
       18 ( 0.00%)      pub fn find_field_index(self, ident: Ident, variant: &VariantDef) -> Option<usize> {
        .                   variant
        .                       .fields
        .                       .iter()
       44 ( 0.00%)              .position(|field| self.hygienic_eq(ident, field.ident(self), variant.def_id))
       18 ( 0.00%)      }
        .           
        .               /// Returns `true` if the impls are the same polarity and the trait either
        .               /// has no items or is annotated `#[marker]` and prevents item overrides.
   14,560 ( 0.00%)      pub fn impls_are_allowed_to_overlap(
        .                   self,
        .                   def_id1: DefId,
        .                   def_id2: DefId,
        .               ) -> Option<ImplOverlapKind> {
        .                   // If either trait impl references an error, they're allowed to overlap,
        .                   // as one of them essentially doesn't exist.
        .                   if self.impl_trait_ref(def_id1).map_or(false, |tr| tr.references_error())
    2,912 ( 0.00%)              || self.impl_trait_ref(def_id2).map_or(false, |tr| tr.references_error())
        .                   {
        .                       return Some(ImplOverlapKind::Permitted { marker: false });
        .                   }
        .           
   14,560 ( 0.00%)          match (self.impl_polarity(def_id1), self.impl_polarity(def_id2)) {
        .                       (ImplPolarity::Reservation, _) | (_, ImplPolarity::Reservation) => {
        .                           // `#[rustc_reservation_impl]` impls don't overlap with anything
        .                           debug!(
        .                               "impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (reservations)",
        .                               def_id1, def_id2
        .                           );
        .                           return Some(ImplOverlapKind::Permitted { marker: false });
        .                       }
-- line 1997 ----------------------------------------
-- line 2004 ----------------------------------------
        .                           );
        .                           return None;
        .                       }
        .                       (ImplPolarity::Positive, ImplPolarity::Positive)
        .                       | (ImplPolarity::Negative, ImplPolarity::Negative) => {}
        .                   };
        .           
        .                   let is_marker_overlap = {
   14,560 ( 0.00%)              let is_marker_impl = |def_id: DefId| -> bool {
    4,368 ( 0.00%)                  let trait_ref = self.impl_trait_ref(def_id);
    4,368 ( 0.00%)                  trait_ref.map_or(false, |tr| self.trait_def(tr.def_id).is_marker)
   11,648 ( 0.00%)              };
    5,824 ( 0.00%)              is_marker_impl(def_id1) && is_marker_impl(def_id2)
        .                   };
        .           
        .                   if is_marker_overlap {
        .                       debug!(
        .                           "impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (marker overlap)",
        .                           def_id1, def_id2
        .                       );
        .                       Some(ImplOverlapKind::Permitted { marker: true })
        .                   } else {
    5,824 ( 0.00%)              if let Some(self_ty1) = self.issue33140_self_ty(def_id1) {
        .                           if let Some(self_ty2) = self.issue33140_self_ty(def_id2) {
        .                               if self_ty1 == self_ty2 {
        .                                   debug!(
        .                                       "impls_are_allowed_to_overlap({:?}, {:?}) - issue #33140 HACK",
        .                                       def_id1, def_id2
        .                                   );
        .                                   return Some(ImplOverlapKind::Issue33140);
        .                               } else {
-- line 2034 ----------------------------------------
-- line 2038 ----------------------------------------
        .                                   );
        .                               }
        .                           }
        .                       }
        .           
        .                       debug!("impls_are_allowed_to_overlap({:?}, {:?}) = None", def_id1, def_id2);
        .                       None
        .                   }
   11,648 ( 0.00%)      }
        .           
        .               /// Returns `ty::VariantDef` if `res` refers to a struct,
        .               /// or variant or their constructors, panics otherwise.
      126 ( 0.00%)      pub fn expect_variant_res(self, res: Res) -> &'tcx VariantDef {
      216 ( 0.00%)          match res {
        .                       Res::Def(DefKind::Variant, did) => {
        .                           let enum_did = self.parent(did).unwrap();
        .                           self.adt_def(enum_did).variant_with_id(did)
        .                       }
        .                       Res::Def(DefKind::Struct | DefKind::Union, did) => self.adt_def(did).non_enum_variant(),
        .                       Res::Def(DefKind::Ctor(CtorOf::Variant, ..), variant_ctor_did) => {
        .                           let variant_did = self.parent(variant_ctor_did).unwrap();
        .                           let enum_did = self.parent(variant_did).unwrap();
-- line 2059 ----------------------------------------
-- line 2060 ----------------------------------------
        .                           self.adt_def(enum_did).variant_with_ctor_id(variant_ctor_did)
        .                       }
        .                       Res::Def(DefKind::Ctor(CtorOf::Struct, ..), ctor_did) => {
        .                           let struct_did = self.parent(ctor_did).expect("struct ctor has no parent");
        .                           self.adt_def(struct_did).non_enum_variant()
        .                       }
        .                       _ => bug!("expect_variant_res used with unexpected res {:?}", res),
        .                   }
      144 ( 0.00%)      }
        .           
        .               /// Returns the possibly-auto-generated MIR of a `(DefId, Subst)` pair.
    8,160 ( 0.00%)      pub fn instance_mir(self, instance: ty::InstanceDef<'tcx>) -> &'tcx Body<'tcx> {
    2,040 ( 0.00%)          match instance {
    9,930 ( 0.00%)              ty::InstanceDef::Item(def) => match self.def_kind(def.did) {
        .                           DefKind::Const
        .                           | DefKind::Static
        .                           | DefKind::AssocConst
        .                           | DefKind::Ctor(..)
        .                           | DefKind::AnonConst
        .                           | DefKind::InlineConst => self.mir_for_ctfe_opt_const_arg(def),
        .                           // If the caller wants `mir_for_ctfe` of a function they should not be using
        .                           // `instance_mir`, so we'll assume const fn also wants the optimized version.
        .                           _ => {
      993 ( 0.00%)                      assert_eq!(def.const_param_did, None);
        .                               self.optimized_mir(def.did)
        .                           }
        .                       },
        .                       ty::InstanceDef::VtableShim(..)
        .                       | ty::InstanceDef::ReifyShim(..)
        .                       | ty::InstanceDef::Intrinsic(..)
        .                       | ty::InstanceDef::FnPtrShim(..)
        .                       | ty::InstanceDef::Virtual(..)
        .                       | ty::InstanceDef::ClosureOnceShim { .. }
        .                       | ty::InstanceDef::DropGlue(..)
        .                       | ty::InstanceDef::CloneShim(..) => self.mir_shims(instance),
        .                   }
    9,180 ( 0.00%)      }
        .           
        .               /// Gets the attributes of a definition.
  147,690 ( 0.01%)      pub fn get_attrs(self, did: DefId) -> Attributes<'tcx> {
   44,307 ( 0.00%)          if let Some(did) = did.as_local() {
   39,906 ( 0.00%)              self.hir().attrs(self.hir().local_def_id_to_hir_id(did))
        .                   } else {
        .                       self.item_attrs(did)
        .                   }
  118,152 ( 0.00%)      }
        .           
        .               /// Determines whether an item is annotated with an attribute.
   15,112 ( 0.00%)      pub fn has_attr(self, did: DefId, attr: Symbol) -> bool {
   51,120 ( 0.00%)          self.sess.contains_name(&self.get_attrs(did), attr)
        .               }
        .           
        .               /// Determines whether an item is annotated with `doc(hidden)`.
      336 ( 0.00%)      pub fn is_doc_hidden(self, did: DefId) -> bool {
       48 ( 0.00%)          self.get_attrs(did)
        .                       .iter()
        .                       .filter_map(|attr| if attr.has_name(sym::doc) { attr.meta_item_list() } else { None })
        .                       .any(|items| items.iter().any(|item| item.has_name(sym::hidden)))
      384 ( 0.00%)      }
        .           
        .               /// Returns `true` if this is an `auto trait`.
   10,885 ( 0.00%)      pub fn trait_is_auto(self, trait_def_id: DefId) -> bool {
    1,555 ( 0.00%)          self.trait_def(trait_def_id).has_auto_impl
   12,440 ( 0.00%)      }
        .           
        .               /// Returns layout of a generator. Layout might be unavailable if the
        .               /// generator is tainted by errors.
        .               pub fn generator_layout(self, def_id: DefId) -> Option<&'tcx GeneratorLayout<'tcx>> {
        .                   self.optimized_mir(def_id).generator_layout()
        .               }
        .           
        .               /// Given the `DefId` of an impl, returns the `DefId` of the trait it implements.
        .               /// If it implements no trait, returns `None`.
    6,559 ( 0.00%)      pub fn trait_id_of_impl(self, def_id: DefId) -> Option<DefId> {
        .                   self.impl_trait_ref(def_id).map(|tr| tr.def_id)
    8,433 ( 0.00%)      }
        .           
        .               /// If the given defid describes a method belonging to an impl, returns the
        .               /// `DefId` of the impl that the method belongs to; otherwise, returns `None`.
    1,000 ( 0.00%)      pub fn impl_of_method(self, def_id: DefId) -> Option<DefId> {
    3,640 ( 0.00%)          self.opt_associated_item(def_id).and_then(|trait_item| match trait_item.container {
        .                       TraitContainer(_) => None,
        .                       ImplContainer(def_id) => Some(def_id),
        .                   })
    2,000 ( 0.00%)      }
        .           
        .               /// Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`
        .               /// with the name of the crate containing the impl.
        .               pub fn span_of_impl(self, impl_did: DefId) -> Result<Span, Symbol> {
        .                   if let Some(impl_did) = impl_did.as_local() {
        .                       Ok(self.def_span(impl_did))
        .                   } else {
        .                       Err(self.crate_name(impl_did.krate))
        .                   }
        .               }
        .           
        .               /// Hygienically compares a use-site name (`use_name`) for a field or an associated item with
        .               /// its supposed definition name (`def_name`). The method also needs `DefId` of the supposed
        .               /// definition's parent/scope to perform comparison.
   17,072 ( 0.00%)      pub fn hygienic_eq(self, use_name: Ident, def_name: Ident, def_parent_def_id: DefId) -> bool {
        .                   // We could use `Ident::eq` here, but we deliberately don't. The name
        .                   // comparison fails frequently, and we want to avoid the expensive
        .                   // `normalize_to_macros_2_0()` calls required for the span comparison whenever possible.
    2,134 ( 0.00%)          use_name.name == def_name.name
    6,390 ( 0.00%)              && use_name
        .                           .span
        .                           .ctxt()
        .                           .hygienic_eq(def_name.span.ctxt(), self.expn_that_defined(def_parent_def_id))
   17,072 ( 0.00%)      }
        .           
    3,294 ( 0.00%)      pub fn adjust_ident(self, mut ident: Ident, scope: DefId) -> Ident {
      732 ( 0.00%)          ident.span.normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope));
      732 ( 0.00%)          ident
    2,928 ( 0.00%)      }
        .           
   14,238 ( 0.00%)      pub fn adjust_ident_and_get_scope(
        .                   self,
        .                   mut ident: Ident,
        .                   scope: DefId,
        .                   block: hir::HirId,
        .               ) -> (Ident, DefId) {
    1,582 ( 0.00%)          let scope = ident
        .                       .span
        .                       .normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope))
        .                       .and_then(|actual_expansion| actual_expansion.expn_data().parent_module)
    6,328 ( 0.00%)              .unwrap_or_else(|| self.parent_module(block).to_def_id());
    9,492 ( 0.00%)          (ident, scope)
   14,238 ( 0.00%)      }
        .           
    1,253 ( 0.00%)      pub fn is_object_safe(self, key: DefId) -> bool {
        .                   self.object_safety_violations(key).is_empty()
    1,432 ( 0.00%)      }
        .           }
        .           
        .           /// Yields the parent function's `LocalDefId` if `def_id` is an `impl Trait` definition.
    6,039 ( 0.00%)  pub fn is_impl_trait_defn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<LocalDefId> {
    6,039 ( 0.00%)      let def_id = def_id.as_local()?;
    4,808 ( 0.00%)      if let Node::Item(item) = tcx.hir().get_by_def_id(def_id) {
    1,694 ( 0.00%)          if let hir::ItemKind::OpaqueTy(ref opaque_ty) = item.kind {
        .                       return match opaque_ty.origin {
        .                           hir::OpaqueTyOrigin::FnReturn(parent) | hir::OpaqueTyOrigin::AsyncFn(parent) => {
        .                               Some(parent)
        .                           }
        .                           hir::OpaqueTyOrigin::TyAlias => None,
        .                       };
        .                   }
        .               }
        .               None
    8,052 ( 0.00%)  }
        .           
        .           pub fn int_ty(ity: ast::IntTy) -> IntTy {
        .               match ity {
        .                   ast::IntTy::Isize => IntTy::Isize,
        .                   ast::IntTy::I8 => IntTy::I8,
        .                   ast::IntTy::I16 => IntTy::I16,
        .                   ast::IntTy::I32 => IntTy::I32,
        .                   ast::IntTy::I64 => IntTy::I64,
-- line 2216 ----------------------------------------
-- line 2224 ----------------------------------------
        .                   ast::UintTy::U8 => UintTy::U8,
        .                   ast::UintTy::U16 => UintTy::U16,
        .                   ast::UintTy::U32 => UintTy::U32,
        .                   ast::UintTy::U64 => UintTy::U64,
        .                   ast::UintTy::U128 => UintTy::U128,
        .               }
        .           }
        .           
      231 ( 0.00%)  pub fn float_ty(fty: ast::FloatTy) -> FloatTy {
        .               match fty {
        .                   ast::FloatTy::F32 => FloatTy::F32,
        .                   ast::FloatTy::F64 => FloatTy::F64,
        .               }
      231 ( 0.00%)  }
        .           
      236 ( 0.00%)  pub fn ast_int_ty(ity: IntTy) -> ast::IntTy {
        .               match ity {
        .                   IntTy::Isize => ast::IntTy::Isize,
        .                   IntTy::I8 => ast::IntTy::I8,
        .                   IntTy::I16 => ast::IntTy::I16,
        .                   IntTy::I32 => ast::IntTy::I32,
        .                   IntTy::I64 => ast::IntTy::I64,
        .                   IntTy::I128 => ast::IntTy::I128,
        .               }
      236 ( 0.00%)  }
        .           
        .           pub fn ast_uint_ty(uty: UintTy) -> ast::UintTy {
        .               match uty {
        .                   UintTy::Usize => ast::UintTy::Usize,
        .                   UintTy::U8 => ast::UintTy::U8,
        .                   UintTy::U16 => ast::UintTy::U16,
        .                   UintTy::U32 => ast::UintTy::U32,
        .                   UintTy::U64 => ast::UintTy::U64,
-- line 2256 ----------------------------------------
-- line 2262 ----------------------------------------
        .               closure::provide(providers);
        .               context::provide(providers);
        .               erase_regions::provide(providers);
        .               layout::provide(providers);
        .               util::provide(providers);
        .               print::provide(providers);
        .               super::util::bug::provide(providers);
        .               super::middle::provide(providers);
        8 ( 0.00%)      *providers = ty::query::Providers {
        .                   trait_impls_of: trait_def::trait_impls_of_provider,
        .                   type_uninhabited_from: inhabitedness::type_uninhabited_from,
        .                   const_param_default: consts::const_param_default,
        .                   vtable_allocation: vtable::vtable_allocation_provider,
        .                   ..*providers
        .               };
        1 ( 0.00%)  }
        .           
        .           /// A map for the local crate mapping each type to a vector of its
        .           /// inherent impls. This is not meant to be used outside of coherence;
        .           /// rather, you should request the vector for a specific type via
        .           /// `tcx.inherent_impls(def_id)` so as to minimize your dependencies
        .           /// (constructing this map requires touching the entire crate).
        .           #[derive(Clone, Debug, Default, HashStable)]
        .           pub struct CrateInherentImpls {
        .               pub inherent_impls: LocalDefIdMap<Vec<DefId>>,
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, HashStable)]
        .           pub struct SymbolName<'tcx> {
        .               /// `&str` gives a consistent ordering, which ensures reproducible builds.
    7,749 ( 0.00%)      pub name: &'tcx str,
        .           }
        .           
        .           impl<'tcx> SymbolName<'tcx> {
    2,508 ( 0.00%)      pub fn new(tcx: TyCtxt<'tcx>, name: &str) -> SymbolName<'tcx> {
        .                   SymbolName {
        .                       name: unsafe { str::from_utf8_unchecked(tcx.arena.alloc_slice(name.as_bytes())) },
        .                   }
    3,344 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> fmt::Display for SymbolName<'tcx> {
      260 ( 0.00%)      fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   fmt::Display::fmt(&self.name, fmt)
        .               }
        .           }
        .           
        .           impl<'tcx> fmt::Debug for SymbolName<'tcx> {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   fmt::Display::fmt(&self.name, fmt)
        .               }
-- line 2312 ----------------------------------------

5,474,216 ( 0.22%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 417 ----------------------------------------
        .               /// # #![allow(unused_mut)]
        .               /// let mut vec: Vec<i32> = Vec::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub const fn new() -> Self {
3,235,314 ( 0.13%)          Vec { buf: RawVec::NEW, len: 0 }
      260 ( 0.00%)      }
        .           
        .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
        .               ///
        .               /// The vector will be able to hold exactly `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the vector will not allocate.
        .               ///
        .               /// It is important to note that although the returned vector has the
        .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 601 ----------------------------------------
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
  997,406 ( 0.04%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
        .               }
        .           
        .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
   60,198 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
        .               }
        .           
        .               /// Decomposes a `Vec<T>` into its raw components.
        .               ///
        .               /// Returns the raw pointer to the underlying data, the length of
        .               /// the vector (in elements), and the allocated capacity of the
        .               /// data (in elements). These are the same arguments in the same
        .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let vec: Vec<i32> = Vec::with_capacity(10);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn capacity(&self) -> usize {
  328,038 ( 0.01%)          self.buf.capacity()
        .               }
        .           
        .               /// Reserves capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve(&mut self, additional: usize) {
  278,466 ( 0.01%)          self.buf.reserve(self.len, additional);
        .               }
        .           
        .               /// Reserves the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve_exact(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve_exact(&mut self, additional: usize) {
   12,991 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
        .               }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `try_reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
        .               /// assert!(vec.capacity() >= 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn shrink_to_fit(&mut self) {
        .                   // The capacity is never less than the length, and there's nothing to do when
        .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
        .                   // by only calling it with a greater capacity.
   18,274 ( 0.00%)          if self.capacity() > self.len {
   13,736 ( 0.00%)              self.buf.shrink_to_fit(self.len);
        .                   }
        .               }
        .           
        .               /// Shrinks the capacity of the vector with a lower bound.
        .               ///
        .               /// The capacity will remain at least as large as both the length
        .               /// and the supplied value.
        .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
        .               /// let slice = vec.into_boxed_slice();
        .               /// assert_eq!(slice.into_vec().capacity(), 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
        .                   unsafe {
        .                       self.shrink_to_fit();
    5,584 ( 0.00%)              let me = ManuallyDrop::new(self);
        .                       let buf = ptr::read(&me.buf);
        .                       let len = me.len();
        .                       buf.into_box(len).assume_init()
        .                   }
        .               }
        .           
        .               /// Shortens the vector, keeping the first `len` elements and dropping
        .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.truncate(0);
        .               /// assert_eq!(vec, []);
        .               /// ```
        .               ///
        .               /// [`clear`]: Vec::clear
        .               /// [`drain`]: Vec::drain
        .               #[stable(feature = "rust1", since = "1.0.0")]
  183,878 ( 0.01%)      pub fn truncate(&mut self, len: usize) {
        .                   // This is safe because:
        .                   //
        .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
        .                   //   case avoids creating an invalid slice, and
        .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
        .                   //   such that no value will be dropped twice in case `drop_in_place`
        .                   //   were to panic once (if it panics twice, the program aborts).
        .                   unsafe {
        .                       // Note: It's intentional that this is `>` and not `>=`.
        .                       //       Changing it to `>=` has negative performance
        .                       //       implications in some cases. See #78884 for more.
  166,919 ( 0.01%)              if len > self.len {
        .                           return;
        .                       }
        .                       let remaining_len = self.len - len;
        .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
  194,155 ( 0.01%)              self.len = len;
    5,217 ( 0.00%)              ptr::drop_in_place(s);
        .                   }
  220,634 ( 0.01%)      }
        .           
        .               /// Extracts a slice containing the entire vector.
        .               ///
        .               /// Equivalent to `&s[..]`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_ptr(&self) -> *const T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref`, which creates an intermediate reference.
3,992,257 ( 0.16%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns an unsafe mutable pointer to the vector's buffer.
        .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
        .               /// }
        .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_mut_ptr(&mut self) -> *mut T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref_mut`, which creates an intermediate reference.
3,008,441 ( 0.12%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
        .               ///
        .               /// Normally, here, one would use [`clear`] instead to correctly drop
        .               /// the contents and thus not leak memory.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   debug_assert!(new_len <= self.capacity());
        .           
  671,207 ( 0.03%)          self.len = new_len;
   30,434 ( 0.00%)      }
        .           
        .               /// Removes an element from the vector and returns it.
        .               ///
        .               /// The removed element is replaced by the last element of the vector.
        .               ///
        .               /// This does not preserve ordering, but is *O*(1).
        .               /// If you need to preserve the element order, use [`remove`] instead.
        .               ///
-- line 1276 ----------------------------------------
-- line 1305 ----------------------------------------
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // We replace self[index] with the last element. Note that if the
        .                       // bounds check above succeeds there must be a last element (which
        .                       // can be self[index] itself).
        .                       let value = ptr::read(self.as_ptr().add(index));
        .                       let base_ptr = self.as_mut_ptr();
      857 ( 0.00%)              ptr::copy(base_ptr.add(len - 1), base_ptr.add(index), 1);
        .                       self.set_len(len - 1);
        .                       value
        .                   }
        .               }
        .           
        .               /// Inserts an element at position `index` within the vector, shifting all
        .               /// elements after it to the right.
        .               ///
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.insert(1, 4);
        .               /// assert_eq!(vec, [1, 4, 2, 3]);
        .               /// vec.insert(4, 5);
        .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    4,361 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
        .                   }
        .           
    1,052 ( 0.00%)          let len = self.len();
    2,036 ( 0.00%)          if index > len {
        .                       assert_failed(index, len);
        .                   }
        .           
        .                   // space for the new element
    4,086 ( 0.00%)          if len == self.buf.capacity() {
        .                       self.reserve(1);
        .                   }
        .           
        .                   unsafe {
        .                       // infallible
        .                       // The spot to put the new value
        .                       {
        .                           let p = self.as_mut_ptr().add(index);
        .                           // Shift everything over to make space. (Duplicating the
        .                           // `index`th element into two consecutive places.)
    4,842 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
        .                           // Write it in, overwriting the first copy of the `index`th
        .                           // element.
        .                           ptr::write(p, element);
        .                       }
    4,086 ( 0.00%)              self.set_len(len + 1);
        .                   }
    3,738 ( 0.00%)      }
        .           
        .               /// Removes and returns the element at position `index` within the vector,
        .               /// shifting all elements after it to the left.
        .               ///
        .               /// Note: Because this shifts over the remaining elements, it has a
        .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
        .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
        .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1395 ----------------------------------------
        .               pub fn remove(&mut self, index: usize) -> T {
        .                   #[cold]
        .                   #[inline(never)]
        .                   #[track_caller]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("removal index (is {}) should be < len (is {})", index, len);
        .                   }
        .           
      459 ( 0.00%)          let len = self.len();
    1,639 ( 0.00%)          if index >= len {
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // infallible
        .                       let ret;
        .                       {
        .                           // the place we are taking from.
        .                           let ptr = self.as_mut_ptr().add(index);
        .                           // copy it out, unsafely having a copy of the value on
        .                           // the stack and in the vector at the same time.
    3,152 ( 0.00%)                  ret = ptr::read(ptr);
        .           
        .                           // Shift everything down to fill in that spot.
    1,200 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
        .                       }
      486 ( 0.00%)              self.set_len(len - 1);
        .                       ret
        .                   }
        .               }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
-- line 1428 ----------------------------------------
-- line 1442 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3, 4, 5];
        .               /// let keep = [false, true, true, false, true];
        .               /// let mut iter = keep.iter();
        .               /// vec.retain(|_| *iter.next().unwrap());
        .               /// assert_eq!(vec, [2, 3, 5]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
  282,787 ( 0.01%)      pub fn retain<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&T) -> bool,
        .               {
   12,595 ( 0.00%)          self.retain_mut(|elem| f(elem));
  276,592 ( 0.01%)      }
        .           
        .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
        .               /// });
        .               /// assert_eq!(vec, [2, 3, 4]);
        .               /// ```
        .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
        .               pub fn retain_mut<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
   35,142 ( 0.00%)          let original_len = self.len();
        .                   // Avoid double drop if the drop guard is not executed,
        .                   // since we may make some holes during the process.
        .                   unsafe { self.set_len(0) };
        .           
        .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
        .                   //      |<-              processed len   ->| ^- next to check
        .                   //                  |<-  deleted cnt     ->|
        .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
        .                       v: &'a mut Vec<T, A>,
        .                       processed_len: usize,
        .                       deleted_cnt: usize,
        .                       original_len: usize,
        .                   }
        .           
        .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
        .                       fn drop(&mut self) {
   27,351 ( 0.00%)                  if self.deleted_cnt > 0 {
        .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
        .                               unsafe {
        .                                   ptr::copy(
        .                                       self.v.as_ptr().add(self.processed_len),
   19,378 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
        .                                       self.original_len - self.processed_len,
        .                                   );
        .                               }
        .                           }
        .                           // SAFETY: After filling holes, all items are in contiguous memory.
        .                           unsafe {
        2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
        .                           }
        .                       }
        .                   }
        .           
        .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
        .           
        .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
        .                       original_len: usize,
        .                       f: &mut F,
        .                       g: &mut BackshiftOnDrop<'_, T, A>,
        .                   ) where
        .                       F: FnMut(&mut T) -> bool,
        .                   {
  549,505 ( 0.02%)              while g.processed_len != original_len {
        .                           // SAFETY: Unchecked element must be valid.
        .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
  181,284 ( 0.01%)                  if !f(cur) {
        .                               // Advance early to avoid double drop if `drop_in_place` panicked.
   33,478 ( 0.00%)                      g.processed_len += 1;
   18,264 ( 0.00%)                      g.deleted_cnt += 1;
        .                               // SAFETY: We never touch this element again after dropped.
        8 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
        .                               // We already advanced the counter.
        .                               if DELETED {
        .                                   continue;
        .                               } else {
        .                                   break;
        .                               }
        .                           }
        .                           if DELETED {
        .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
        .                               // We use copy for move, and never touch this element again.
        .                               unsafe {
   27,354 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
        .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
        .                               }
        .                           }
   27,164 ( 0.00%)                  g.processed_len += 1;
        .                       }
        .                   }
        .           
        .                   // Stage 1: Nothing was deleted.
        .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
        .           
        .                   // Stage 2: Some elements were deleted.
        .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
        .               ///
        .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
        .               ///
        .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
        .               /// ```
        .               #[stable(feature = "dedup_by", since = "1.16.0")]
    7,777 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
        .               where
        .                   F: FnMut(&mut T, &mut T) -> bool,
        .               {
    2,387 ( 0.00%)          let len = self.len();
    7,258 ( 0.00%)          if len <= 1 {
        .                       return;
        .                   }
        .           
        .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
        .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
        .                       /* Offset of the element we want to check if it is duplicate */
        .                       read: usize,
        .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
        .                   let ptr = gap.vec.as_mut_ptr();
        .           
        .                   /* Drop items while going through Vec, it should be more efficient than
        .                    * doing slice partition_dedup + truncate */
        .           
        .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
        .                    * are always in-bounds and read_ptr never aliases prev_ptr */
        .                   unsafe {
   10,646 ( 0.00%)              while gap.read < len {
        .                           let read_ptr = ptr.add(gap.read);
        .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
        .           
      804 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
        .                               // Increase `gap.read` now since the drop may panic.
        .                               gap.read += 1;
        .                               /* We have found duplicate, drop it in-place */
        .                               ptr::drop_in_place(read_ptr);
        .                           } else {
        .                               let write_ptr = ptr.add(gap.write);
        .           
        .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
        .                                * have to use `copy` or conditional `copy_nonoverlapping`.
        .                                * Looks like the first option is faster. */
        .                               ptr::copy(read_ptr, write_ptr, 1);
        .           
        .                               /* We have filled that place, so go further */
    6,082 ( 0.00%)                      gap.write += 1;
        .                               gap.read += 1;
        .                           }
        .                       }
        .           
        .                       /* Technically we could let `gap` clean up with its Drop, but
        .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
        .                        * the codegen, so we just do it manually */
        .                       gap.vec.set_len(gap.write);
        .                       mem::forget(gap);
        .                   }
    8,888 ( 0.00%)      }
        .           
        .               /// Appends an element to the back of a collection.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
        .               ///
        .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2];
        .               /// vec.push(3);
        .               /// assert_eq!(vec, [1, 2, 3]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      335 ( 0.00%)      pub fn push(&mut self, value: T) {
        .                   // This will panic or abort if we would allocate > isize::MAX bytes
        .                   // or if the length increment would overflow for zero-sized types.
4,245,665 ( 0.17%)          if self.len == self.buf.capacity() {
  363,601 ( 0.01%)              self.buf.reserve_for_push(self.len);
        .                   }
        .                   unsafe {
  162,753 ( 0.01%)              let end = self.as_mut_ptr().add(self.len);
        .                       ptr::write(end, value);
5,746,884 ( 0.23%)              self.len += 1;
        .                   }
      268 ( 0.00%)      }
        .           
        .               /// Removes the last element from a vector and returns it, or [`None`] if it
        .               /// is empty.
        .               ///
        .               /// If you'd like to pop the first element, consider using
        .               /// [`VecDeque::pop_front`] instead.
        .               ///
        .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3];
        .               /// assert_eq!(vec.pop(), Some(3));
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop(&mut self) -> Option<T> {
1,064,300 ( 0.04%)          if self.len == 0 {
        4 ( 0.00%)              None
        .                   } else {
        .                       unsafe {
  812,473 ( 0.03%)                  self.len -= 1;
  148,404 ( 0.01%)                  Some(ptr::read(self.as_ptr().add(self.len())))
        .                       }
        .                   }
        .               }
        .           
        .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
        .               ///
        .               /// # Panics
        .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
        .               /// let mut vec2 = vec![4, 5, 6];
        .               /// vec.append(&mut vec2);
        .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
        .               /// assert_eq!(vec2, []);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "append", since = "1.4.0")]
    1,057 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
        .                   unsafe {
        .                       self.append_elements(other.as_slice() as _);
        .                       other.set_len(0);
        .                   }
      906 ( 0.00%)      }
        .           
        .               /// Appends elements to `Self` from other buffer.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               unsafe fn append_elements(&mut self, other: *const [T]) {
        .                   let count = unsafe { (*other).len() };
        .                   self.reserve(count);
   35,671 ( 0.00%)          let len = self.len();
       32 ( 0.00%)          unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
  301,650 ( 0.01%)          self.len += count;
        .               }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// When the iterator **is** dropped, all elements in the range are removed
        .               /// from the vector, even if the iterator was not fully consumed. If the
        .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
        .                   // When the Drain is first created, it shortens the length of
        .                   // the source vector to make sure no uninitialized or moved-from elements
        .                   // are accessible at all if the Drain's destructor never gets to run.
        .                   //
        .                   // Drain will ptr::read out the values to remove.
        .                   // When finished, remaining tail of the vec is copied back to cover
        .                   // the hole, and the vector length is restored to the new length.
        .                   //
   17,325 ( 0.00%)          let len = self.len();
        .                   let Range { start, end } = slice::range(range, ..len);
        .           
        .                   unsafe {
        .                       // set self.vec length's to start, to be safe in case Drain is leaked
        .                       self.set_len(start);
        .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
        .                       // whole Drain iterator (like &mut T).
      731 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
      458 ( 0.00%)              Drain {
        .                           tail_start: end,
      526 ( 0.00%)                  tail_len: len - end,
        .                           iter: range_slice.iter(),
        .                           vec: NonNull::from(self),
        .                       }
        .                   }
        .               }
        .           
        .               /// Clears the vector, removing all values.
        .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
        .               ///
        .               /// v.clear();
        .               ///
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn clear(&mut self) {
  327,556 ( 0.01%)          self.truncate(0)
        .               }
        .           
        .               /// Returns the number of elements in the vector, also referred to
        .               /// as its 'length'.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
        .               /// let mut v = Vec::new();
        .               /// assert!(v.is_empty());
        .               ///
        .               /// v.push(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn is_empty(&self) -> bool {
  413,645 ( 0.02%)          self.len() == 0
        .               }
        .           
        .               /// Splits the collection into two at the given index.
        .               ///
        .               /// Returns a newly allocated vector containing the elements in the range
        .               /// `[at, len)`. After the call, the original vector will be left containing
        .               /// the elements `[0, at)` with its previous capacity unchanged.
        .               ///
-- line 1916 ----------------------------------------
-- line 1935 ----------------------------------------
        .                   A: Clone,
        .               {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(at: usize, len: usize) -> ! {
        .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
        .                   }
        .           
    2,568 ( 0.00%)          if at > self.len() {
        .                       assert_failed(at, self.len());
        .                   }
        .           
    1,752 ( 0.00%)          if at == 0 {
        .                       // the new vector can take over the original buffer and avoid the copy
        .                       return mem::replace(
        .                           self,
        .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
        .                       );
        .                   }
        .           
        .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
        .               ///
        .               /// let mut vec = vec![];
        .               /// let mut p = 1;
        .               /// vec.resize_with(4, || { p *= 2; p });
        .               /// assert_eq!(vec, [2, 4, 8, 16]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
   20,791 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
        .               where
        .                   F: FnMut() -> T,
        .               {
    2,847 ( 0.00%)          let len = self.len();
    5,694 ( 0.00%)          if new_len > len {
   29,988 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
   17,944 ( 0.00%)      }
        .           
        .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
        .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
        .               /// `'a`. If the type has only static references, or none at all, then this
        .               /// may be chosen to be `'static`.
        .               ///
        .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
        .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
        .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
        .               #[inline]
        .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
        .                   // Note:
        .                   // This method is not implemented in terms of `split_at_spare_mut`,
        .                   // to prevent invalidation of pointers to the buffer.
        .                   unsafe {
        .                       slice::from_raw_parts_mut(
        2 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
      112 ( 0.00%)                  self.buf.capacity() - self.len,
        .                       )
        .                   }
        .               }
        .           
        .               /// Returns vector content as a slice of `T`, along with the remaining spare
        .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
        .               ///
        .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2189 ----------------------------------------
        .               /// assert_eq!(vec, ["hello", "world", "world"]);
        .               ///
        .               /// let mut vec = vec![1, 2, 3, 4];
        .               /// vec.resize(2, 0);
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize", since = "1.5.0")]
   27,192 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
    2,723 ( 0.00%)          let len = self.len();
        .           
   10,749 ( 0.00%)          if new_len > len {
    6,980 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
    4,435 ( 0.00%)      }
        .           
        .               /// Clones and appends all elements in a slice to the `Vec`.
        .               ///
        .               /// Iterates over the slice `other`, clones each element, and then appends
        .               /// it to this `Vec`. The `other` slice is traversed in-order.
        .               ///
        .               /// Note that this function is same as [`extend`] except that it is
        .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2271 ----------------------------------------
        .           trait ExtendWith<T> {
        .               fn next(&mut self) -> T;
        .               fn last(self) -> T;
        .           }
        .           
        .           struct ExtendElement<T>(T);
        .           impl<T: Clone> ExtendWith<T> for ExtendElement<T> {
        .               fn next(&mut self) -> T {
      578 ( 0.00%)          self.0.clone()
        .               }
        .               fn last(self) -> T {
        .                   self.0
        .               }
        .           }
        .           
        .           struct ExtendFunc<F>(F);
        .           impl<T, F: FnMut() -> T> ExtendWith<T> for ExtendFunc<F> {
-- line 2287 ----------------------------------------
-- line 2291 ----------------------------------------
        .               fn last(mut self) -> T {
        .                   (self.0)()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               #[cfg(not(no_global_oom_handling))]
        .               /// Extend the vector by `n` values, using the given generator.
  189,934 ( 0.01%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
        .                   self.reserve(n);
        .           
        .                   unsafe {
    6,086 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
        .                       // Use SetLenOnDrop to work around bug where compiler
        .                       // might not realize the store through `ptr` through self.set_len()
        .                       // don't alias.
        .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
        .           
        .                       // Write all elements except the last one
        .                       for _ in 1..n {
        .                           ptr::write(ptr, value.next());
        .                           ptr = ptr.offset(1);
        .                           // Increment the length in every step in case next() panics
        .                           local_len.increment_len(1);
        .                       }
        .           
  266,255 ( 0.01%)              if n > 0 {
        .                           // We can write the last element directly without cloning needlessly
        .                           ptr::write(ptr, value.last());
        .                           local_len.increment_len(1);
        .                       }
        .           
        .                       // len set by scope guard
        .                   }
  151,415 ( 0.01%)      }
        .           }
        .           
        .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
        .               /// Removes consecutive repeated elements in the vector according to the
        .               /// [`PartialEq`] trait implementation.
        .               ///
        .               /// If the vector is sorted, this removes all duplicates.
        .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
        .               ///
        .               /// vec.dedup();
        .               ///
        .               /// assert_eq!(vec, [1, 2, 3, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn dedup(&mut self) {
    1,112 ( 0.00%)          self.dedup_by(|a, b| a == b)
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Internal methods and functions
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
   41,979 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
  260,380 ( 0.01%)      <T as SpecFromElem>::from_elem(elem, n, Global)
   48,449 ( 0.00%)  }
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[unstable(feature = "allocator_api", issue = "32838")]
        .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
        .               <T as SpecFromElem>::from_elem(elem, n, alloc)
        .           }
        .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
        .           // Common trait implementations for Vec
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
        .               type Target = [T];
        .           
        .               fn deref(&self) -> &[T] {
5,926,283 ( 0.24%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
       21 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
        .               fn deref_mut(&mut self) -> &mut [T] {
1,433,745 ( 0.06%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           trait SpecCloneFrom {
        .               fn clone_from(this: &mut Self, other: &Self);
        .           }
        .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
        .                   this.extend_from_slice(other);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
        .               #[cfg(not(test))]
  262,208 ( 0.01%)      fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
        2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
  320,092 ( 0.01%)      }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Instead use the
        .               // `slice::to_vec`  function which is only available with cfg(test)
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
        .               type Output = I::Output;
        .           
        .               #[inline]
        .               fn index(&self, index: I) -> &Self::Output {
  178,434 ( 0.01%)          Index::index(&**self, index)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {
        .               #[inline]
        .               fn index_mut(&mut self, index: I) -> &mut Self::Output {
    1,032 ( 0.00%)          IndexMut::index_mut(&mut **self, index)
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> FromIterator<T> for Vec<T> {
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
1,527,928 ( 0.06%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
        .               type Item = T;
        .               type IntoIter = IntoIter<T, A>;
        .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
        .               /// for s in v.into_iter() {
        .               ///     // s has type String, not &String
        .               ///     println!("{}", s);
        .               /// }
        .               /// ```
        .               #[inline]
        .               fn into_iter(self) -> IntoIter<T, A> {
        .                   unsafe {
  668,002 ( 0.03%)              let mut me = ManuallyDrop::new(self);
        .                       let alloc = ptr::read(me.allocator());
        .                       let begin = me.as_mut_ptr();
        .                       let end = if mem::size_of::<T>() == 0 {
        .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
        .                       } else {
        .                           begin.add(me.len()) as *const T
        .                       };
        .                       let cap = me.buf.capacity();
  211,894 ( 0.01%)              IntoIter {
        .                           buf: NonNull::new_unchecked(begin),
        .                           phantom: PhantomData,
        .                           cap,
        .                           alloc,
        .                           ptr: begin,
        .                           end,
        .                       }
        .                   }
-- line 2589 ----------------------------------------
-- line 2601 ----------------------------------------
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
        .               type Item = &'a mut T;
        .               type IntoIter = slice::IterMut<'a, T>;
        .           
        .               fn into_iter(self) -> slice::IterMut<'a, T> {
    1,226 ( 0.00%)          self.iter_mut()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
        .               #[inline]
    1,536 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  930,912 ( 0.04%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
    1,536 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, item: T) {
        .                   self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
-- line 2627 ----------------------------------------
-- line 2636 ----------------------------------------
        .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
        .                   // This is the case for a general iterator.
        .                   //
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iterator {
        .                   //          self.push(item);
        .                   //      }
  288,769 ( 0.01%)          while let Some(element) = iterator.next() {
   28,991 ( 0.00%)              let len = self.len();
  344,334 ( 0.01%)              if len == self.capacity() {
    2,382 ( 0.00%)                  let (lower, _) = iterator.size_hint();
        .                           self.reserve(lower.saturating_add(1));
        .                       }
        .                       unsafe {
        .                           ptr::write(self.as_mut_ptr().add(len), element);
        .                           // Since next() executes user code which can panic we have to bump the length
        .                           // after each step.
        .                           // NB can't overflow since we would have had to alloc the address space
  287,057 ( 0.01%)                  self.set_len(len + 1);
        .                       }
        .                   }
    3,122 ( 0.00%)      }
        .           
        .               /// Creates a splicing iterator that replaces the specified range in the vector
        .               /// with the given `replace_with` iterator and yields the removed items.
        .               /// `replace_with` does not need to be the same length as `range`.
        .               ///
        .               /// `range` is removed even if the iterator is not consumed until the end.
        .               ///
        .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2693 ----------------------------------------
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "vec_splice", since = "1.21.0")]
        .               pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, A>
        .               where
        .                   R: RangeBounds<usize>,
        .                   I: IntoIterator<Item = T>,
        .               {
    3,080 ( 0.00%)          Splice { drain: self.drain(range), replace_with: replace_with.into_iter() }
        .               }
        .           
        .               /// Creates an iterator which uses a closure to determine if an element should be removed.
        .               ///
        .               /// If the closure returns true, then the element is removed and yielded.
        .               /// If the closure returns false, the element will remain in the vector and will not be yielded
        .               /// by the iterator.
        .               ///
-- line 2709 ----------------------------------------
-- line 2745 ----------------------------------------
        .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
        .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
        .               /// ```
        .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
        .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
    3,474 ( 0.00%)          let old_len = self.len();
        .           
        .                   // Guard against us getting leaked (leak amplification)
        .                   unsafe {
        .                       self.set_len(0);
        .                   }
        .           
    9,688 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
        .               }
        .           }
        .           
        .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
        .           ///
        .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
        .           /// append the entire slice at once.
        .           ///
        .           /// [`copy_from_slice`]: slice::copy_from_slice
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "extend_ref", since = "1.2.0")]
        .           impl<'a, T: Copy + 'a, A: Allocator + 'a> Extend<&'a T> for Vec<T, A> {
    2,000 ( 0.00%)      fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {
        .                   self.spec_extend(iter.into_iter())
    1,500 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, &item: &'a T) {
        .                   self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
-- line 2783 ----------------------------------------
-- line 2803 ----------------------------------------
        .               #[inline]
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   Ord::cmp(&**self, &**other)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
  871,707 ( 0.04%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // use drop for [T]
        .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
        .                       // could avoid questions of validity in certain cases
  372,697 ( 0.02%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
        .                   }
        .                   // RawVec handles deallocation
1,028,058 ( 0.04%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
        .           impl<T> const Default for Vec<T> {
        .               /// Creates an empty `Vec<T>`.
        .               fn default() -> Vec<T> {
        .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
        .               /// newly-allocated buffer with exactly the right capacity.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
        .               /// ```
        .               fn from(v: Vec<T, A>) -> Self {
        4 ( 0.00%)          v.into_boxed_slice()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl From<&str> for Vec<u8> {
        .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
        .               ///
-- line 2992 ----------------------------------------

1,671,004 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs
--------------------------------------------------------------------------------
Ir                 

-- line 22 ----------------------------------------
        .           
        .           /// An entity in the Rust type system, which can be one of
        .           /// several kinds (types, lifetimes, and consts).
        .           /// To reduce memory usage, a `GenericArg` is an interned pointer,
        .           /// with the lowest 2 bits being reserved for a tag to
        .           /// indicate the type (`Ty`, `Region`, or `Const`) it points to.
        .           #[derive(Copy, Clone, PartialEq, Eq, Hash)]
        .           pub struct GenericArg<'tcx> {
  313,398 ( 0.01%)      ptr: NonZeroUsize,
1,088,785 ( 0.04%)      marker: PhantomData<(Ty<'tcx>, ty::Region<'tcx>, &'tcx ty::Const<'tcx>)>,
        .           }
        .           
        .           const TAG_MASK: usize = 0b11;
        .           const TYPE_TAG: usize = 0b00;
        .           const REGION_TAG: usize = 0b01;
        .           const CONST_TAG: usize = 0b10;
        .           
   79,760 ( 0.00%)  #[derive(Debug, TyEncodable, TyDecodable, PartialEq, Eq, PartialOrd, Ord, HashStable)]
        .           pub enum GenericArgKind<'tcx> {
        .               Lifetime(ty::Region<'tcx>),
        .               Type(Ty<'tcx>),
        .               Const(&'tcx ty::Const<'tcx>),
        .           }
        .           
        .           impl<'tcx> GenericArgKind<'tcx> {
   20,358 ( 0.00%)      fn pack(self) -> GenericArg<'tcx> {
   20,358 ( 0.00%)          let (tag, ptr) = match self {
        .                       GenericArgKind::Lifetime(lt) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(lt) & TAG_MASK, 0);
        .                           (REGION_TAG, lt as *const _ as usize)
        .                       }
        .                       GenericArgKind::Type(ty) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(ty) & TAG_MASK, 0);
-- line 56 ----------------------------------------
-- line 58 ----------------------------------------
        .                       }
        .                       GenericArgKind::Const(ct) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(ct) & TAG_MASK, 0);
        .                           (CONST_TAG, ct as *const _ as usize)
        .                       }
        .                   };
        .           
  113,850 ( 0.00%)          GenericArg { ptr: unsafe { NonZeroUsize::new_unchecked(ptr | tag) }, marker: PhantomData }
   20,358 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> fmt::Debug for GenericArg<'tcx> {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   match self.unpack() {
        .                       GenericArgKind::Lifetime(lt) => lt.fmt(f),
        .                       GenericArgKind::Type(ty) => ty.fmt(f),
        .                       GenericArgKind::Const(ct) => ct.fmt(f),
-- line 75 ----------------------------------------
-- line 85 ----------------------------------------
        .           
        .           impl<'tcx> PartialOrd for GenericArg<'tcx> {
        .               fn partial_cmp(&self, other: &GenericArg<'_>) -> Option<Ordering> {
        .                   Some(self.cmp(&other))
        .               }
        .           }
        .           
        .           impl<'tcx> From<ty::Region<'tcx>> for GenericArg<'tcx> {
   62,799 ( 0.00%)      fn from(r: ty::Region<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Lifetime(r).pack()
   62,799 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> From<Ty<'tcx>> for GenericArg<'tcx> {
  705,131 ( 0.03%)      fn from(ty: Ty<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Type(ty).pack()
  705,131 ( 0.03%)      }
        .           }
        .           
        .           impl<'tcx> From<&'tcx ty::Const<'tcx>> for GenericArg<'tcx> {
      973 ( 0.00%)      fn from(c: &'tcx ty::Const<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Const(c).pack()
      973 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> GenericArg<'tcx> {
        .               #[inline]
        .               pub fn unpack(self) -> GenericArgKind<'tcx> {
        .                   let ptr = self.ptr.get();
        .                   unsafe {
7,402,736 ( 0.30%)              match ptr & TAG_MASK {
   65,363 ( 0.00%)                  REGION_TAG => GenericArgKind::Lifetime(&*((ptr & !TAG_MASK) as *const _)),
1,841,879 ( 0.07%)                  TYPE_TAG => GenericArgKind::Type(&*((ptr & !TAG_MASK) as *const _)),
      793 ( 0.00%)                  CONST_TAG => GenericArgKind::Const(&*((ptr & !TAG_MASK) as *const _)),
        .                           _ => intrinsics::unreachable(),
        .                       }
        .                   }
        .               }
        .           
        .               /// Unpack the `GenericArg` as a type when it is known certainly to be a type.
        .               /// This is true in cases where `Substs` is used in places where the kinds are known
        .               /// to be limited (e.g. in tuples, where the only parameters are type parameters).
        .               pub fn expect_ty(self) -> Ty<'tcx> {
        .                   match self.unpack() {
        .                       GenericArgKind::Type(ty) => ty,
        .                       _ => bug!("expected a type, but found another kind"),
        .                   }
   16,738 ( 0.00%)      }
        .           
        .               /// Unpack the `GenericArg` as a const when it is known certainly to be a const.
        .               pub fn expect_const(self) -> &'tcx ty::Const<'tcx> {
        .                   match self.unpack() {
        .                       GenericArgKind::Const(c) => c,
        .                       _ => bug!("expected a const, but found another kind"),
        .                   }
        .               }
-- line 140 ----------------------------------------
-- line 155 ----------------------------------------
        .           impl<'tcx> TypeFoldable<'tcx> for GenericArg<'tcx> {
        .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error> {
        .                   match self.unpack() {
        .                       GenericArgKind::Lifetime(lt) => lt.try_fold_with(folder).map(Into::into),
        .                       GenericArgKind::Type(ty) => ty.try_fold_with(folder).map(Into::into),
        3 ( 0.00%)              GenericArgKind::Const(ct) => ct.try_fold_with(folder).map(Into::into),
        .                   }
        .               }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
        .                   match self.unpack() {
        .                       GenericArgKind::Lifetime(lt) => lt.visit_with(visitor),
        .                       GenericArgKind::Type(ty) => ty.visit_with(visitor),
        .                       GenericArgKind::Const(ct) => ct.visit_with(visitor),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for GenericArg<'tcx> {
        .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
    4,806 ( 0.00%)          self.unpack().encode(e)
        .               }
        .           }
        .           
        .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for GenericArg<'tcx> {
  101,790 ( 0.00%)      fn decode(d: &mut D) -> GenericArg<'tcx> {
  101,790 ( 0.00%)          GenericArgKind::decode(d).pack()
        .               }
        .           }
        .           
        .           /// A substitution mapping generic parameters to new values.
        .           pub type InternalSubsts<'tcx> = List<GenericArg<'tcx>>;
        .           
        .           pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;
        .           
        .           impl<'a, 'tcx> InternalSubsts<'tcx> {
        .               /// Interpret these substitutions as the substitutions of a closure type.
        .               /// Closure substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the signature and closure kind;
        .               /// see `ty::ClosureSubsts` struct for more comments.
      287 ( 0.00%)      pub fn as_closure(&'a self) -> ClosureSubsts<'a> {
        .                   ClosureSubsts { substs: self }
      287 ( 0.00%)      }
        .           
        .               /// Interpret these substitutions as the substitutions of a generator type.
        .               /// Generator substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the signature and generator kind;
        .               /// see `ty::GeneratorSubsts` struct for more comments.
        .               pub fn as_generator(&'tcx self) -> GeneratorSubsts<'tcx> {
        .                   GeneratorSubsts { substs: self }
        .               }
-- line 208 ----------------------------------------
-- line 211 ----------------------------------------
        .               /// Inline const substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the inferred type;
        .               /// see `ty::InlineConstSubsts` struct for more comments.
        .               pub fn as_inline_const(&'tcx self) -> InlineConstSubsts<'tcx> {
        .                   InlineConstSubsts { substs: self }
        .               }
        .           
        .               /// Creates an `InternalSubsts` that maps each generic parameter to itself.
   15,450 ( 0.00%)      pub fn identity_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {
    3,172 ( 0.00%)          Self::for_item(tcx, def_id, |param, _| tcx.mk_param_from_def(param))
   13,905 ( 0.00%)      }
        .           
        .               /// Creates an `InternalSubsts` for generic parameter definitions,
        .               /// by calling closures to obtain each kind.
        .               /// The closures get to observe the `InternalSubsts` as they're
        .               /// being built, which can be used to correctly
        .               /// substitute defaults of generic parameters.
  170,985 ( 0.01%)      pub fn for_item<F>(tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
        .               where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   let defs = tcx.generics_of(def_id);
        .                   let count = defs.count();
        .                   let mut substs = SmallVec::with_capacity(count);
   63,449 ( 0.00%)          Self::fill_item(&mut substs, tcx, defs, &mut mk_kind);
   37,350 ( 0.00%)          tcx.intern_substs(&substs)
  173,169 ( 0.01%)      }
        .           
        .               pub fn extend_to<F>(&self, tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
        .               where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   Self::for_item(tcx, def_id, |param, substs| {
        .                       self.get(param.index as usize).cloned().unwrap_or_else(|| mk_kind(param, substs))
        .                   })
        .               }
        .           
  233,746 ( 0.01%)      pub fn fill_item<F>(
        .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
        .                   tcx: TyCtxt<'tcx>,
        .                   defs: &ty::Generics,
        .                   mk_kind: &mut F,
        .               ) where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
   96,200 ( 0.00%)          if let Some(def_id) = defs.parent {
        .                       let parent_defs = tcx.generics_of(def_id);
   11,915 ( 0.00%)              Self::fill_item(substs, tcx, parent_defs, mk_kind);
        .                   }
        .                   Self::fill_single(substs, defs, mk_kind)
  185,336 ( 0.01%)      }
        .           
        .               pub fn fill_single<F>(
        .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
        .                   defs: &ty::Generics,
        .                   mk_kind: &mut F,
        .               ) where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   substs.reserve(defs.params.len());
        .                   for param in &defs.params {
        .                       let kind = mk_kind(param, substs);
  105,264 ( 0.00%)              assert_eq!(param.index as usize, substs.len());
        .                       substs.push(kind);
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn types(&'a self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'a {
        .                   self.iter()
        .                       .filter_map(|k| if let GenericArgKind::Type(ty) = k.unpack() { Some(ty) } else { None })
-- line 281 ----------------------------------------
-- line 302 ----------------------------------------
        .                   self.iter().filter_map(|k| match k.unpack() {
        .                       GenericArgKind::Lifetime(_) => None,
        .                       generic => Some(generic),
        .                   })
        .               }
        .           
        .               #[inline]
        .               pub fn type_at(&self, i: usize) -> Ty<'tcx> {
  196,914 ( 0.01%)          if let GenericArgKind::Type(ty) = self[i].unpack() {
        .                       ty
        .                   } else {
        .                       bug!("expected type for param #{} in {:?}", i, self);
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn region_at(&self, i: usize) -> ty::Region<'tcx> {
-- line 318 ----------------------------------------
-- line 350 ----------------------------------------
        .               /// impl<U> X<U> for U { fn f<V>() {} }
        .               /// ```
        .               ///
        .               /// * If `self` is `[Self, S, T]`: the identity substs of `f` in the trait.
        .               /// * If `source_ancestor` is the def_id of the trait.
        .               /// * If `target_substs` is `[U]`, the substs for the impl.
        .               /// * Then we will return `[U, T]`, the subst for `f` in the impl that
        .               ///   are needed for it to match the trait.
    5,159 ( 0.00%)      pub fn rebase_onto(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .                   source_ancestor: DefId,
        .                   target_substs: SubstsRef<'tcx>,
        .               ) -> SubstsRef<'tcx> {
        .                   let defs = tcx.generics_of(source_ancestor);
    1,474 ( 0.00%)          tcx.mk_substs(target_substs.iter().chain(self.iter().skip(defs.params.len())))
    5,896 ( 0.00%)      }
        .           
      375 ( 0.00%)      pub fn truncate_to(&self, tcx: TyCtxt<'tcx>, generics: &ty::Generics) -> SubstsRef<'tcx> {
        .                   tcx.mk_substs(self.iter().take(generics.count()))
      750 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {
   20,566 ( 0.00%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error> {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // The match arms are in order of frequency. The 1, 2, and 0 cases are
        .                   // typically hit in 90--99.99% of cases. When folding doesn't change
        .                   // the substs, it's faster to reuse the existing substs rather than
        .                   // calling `intern_substs`.
2,404,394 ( 0.10%)          match self.len() {
        .                       1 => {
  260,074 ( 0.01%)                  let param0 = self[0].try_fold_with(folder)?;
  678,044 ( 0.03%)                  if param0 == self[0] { Ok(self) } else { Ok(folder.tcx().intern_substs(&[param0])) }
        .                       }
        .                       2 => {
  282,766 ( 0.01%)                  let param0 = self[0].try_fold_with(folder)?;
  757,570 ( 0.03%)                  let param1 = self[1].try_fold_with(folder)?;
  879,372 ( 0.04%)                  if param0 == self[0] && param1 == self[1] {
        .                               Ok(self)
        .                           } else {
  295,815 ( 0.01%)                      Ok(folder.tcx().intern_substs(&[param0, param1]))
        .                           }
        .                       }
        .                       0 => Ok(self),
        .                       _ => {
        .                           let params: SmallVec<[_; 8]> =
   14,989 ( 0.00%)                      self.iter().map(|k| k.try_fold_with(folder)).collect::<Result<_, _>>()?;
      169 ( 0.00%)                  if params[..] == self[..] {
        .                               Ok(self)
        .                           } else {
    1,107 ( 0.00%)                      Ok(folder.tcx().intern_substs(&params))
        .                           }
        .                       }
        .                   }
   65,675 ( 0.00%)      }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
  204,236 ( 0.01%)          self.iter().try_for_each(|t| t.visit_with(visitor))
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Public trait `Subst`
        .           //
        .           // Just call `foo.subst(tcx, substs)` to perform a substitution across
        .           // `foo`. Or use `foo.subst_spanned(tcx, substs, Some(span))` when
-- line 420 ----------------------------------------
-- line 435 ----------------------------------------
        .           
        .           impl<'tcx, T: TypeFoldable<'tcx>> Subst<'tcx> for T {
        .               fn subst_spanned(
        .                   self,
        .                   tcx: TyCtxt<'tcx>,
        .                   substs: &[GenericArg<'tcx>],
        .                   span: Option<Span>,
        .               ) -> T {
  723,725 ( 0.03%)          let mut folder = SubstFolder { tcx, substs, span, binders_passed: 0 };
        .                   self.fold_with(&mut folder)
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // The actual substitution engine itself is a type folder.
        .           
        .           struct SubstFolder<'a, 'tcx> {
-- line 451 ----------------------------------------
-- line 456 ----------------------------------------
        .               span: Option<Span>,
        .           
        .               /// Number of region binders we have passed through while doing the substitution
        .               binders_passed: u32,
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
  116,975 ( 0.00%)          self.tcx
        .               }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
  128,566 ( 0.01%)          self.binders_passed += 1;
   27,848 ( 0.00%)          let t = t.super_fold_with(self);
  128,566 ( 0.01%)          self.binders_passed -= 1;
        .                   t
        .               }
        .           
  175,782 ( 0.01%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
        .                   // Note: This routine only handles regions that are bound on
        .                   // type declarations and other outer declarations, not those
        .                   // bound in *fn types*. Region substitution of the bound
        .                   // regions that appear in a function signature is done using
        .                   // the specialized routine `ty::replace_late_regions()`.
   58,594 ( 0.00%)          match *r {
   42,734 ( 0.00%)              ty::ReEarlyBound(data) => {
   42,734 ( 0.00%)                  let rk = self.substs.get(data.index as usize).map(|k| k.unpack());
        .                           match rk {
   21,367 ( 0.00%)                      Some(GenericArgKind::Lifetime(lt)) => self.shift_region_through_binders(lt),
        .                               _ => {
        .                                   let span = self.span.unwrap_or(DUMMY_SP);
        .                                   let msg = format!(
        .                                       "Region parameter out of range \
        .                                        when substituting in region {} (index={})",
        .                                       data.name, data.index
        .                                   );
        .                                   span_bug!(span, "{}", msg);
        .                               }
        .                           }
        .                       }
        .                       _ => r,
        .                   }
  205,079 ( 0.01%)      }
        .           
  674,823 ( 0.03%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
  224,941 ( 0.01%)          if !t.needs_subst() {
        .                       return t;
        .                   }
        .           
  333,094 ( 0.01%)          match *t.kind() {
  632,700 ( 0.03%)              ty::Param(p) => self.ty_for_param(p, t),
  240,042 ( 0.01%)              _ => t.super_fold_with(self),
        .                   }
  924,670 ( 0.04%)      }
        .           
   40,705 ( 0.00%)      fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
   14,855 ( 0.00%)          if let ty::ConstKind::Param(p) = c.val {
        .                       self.const_for_param(p, c)
        .                   } else {
   46,530 ( 0.00%)              c.super_fold_with(self)
        .                   }
    5,160 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {
        .                   c.super_fold_with(self)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> SubstFolder<'a, 'tcx> {
        .               fn ty_for_param(&self, p: ty::ParamTy, source_ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   // Look up the type in the substitutions. It really should be in there.
  253,080 ( 0.01%)          let opt_ty = self.substs.get(p.index as usize).map(|k| k.unpack());
        .                   let ty = match opt_ty {
        .                       Some(GenericArgKind::Type(ty)) => ty,
        .                       Some(kind) => {
        .                           let span = self.span.unwrap_or(DUMMY_SP);
        .                           span_bug!(
        .                               span,
        .                               "expected type for `{:?}` ({:?}/{}) but found {:?} \
        .                                when substituting, substs={:?}",
-- line 539 ----------------------------------------
-- line 562 ----------------------------------------
        .               }
        .           
        .               fn const_for_param(
        .                   &self,
        .                   p: ParamConst,
        .                   source_ct: &'tcx ty::Const<'tcx>,
        .               ) -> &'tcx ty::Const<'tcx> {
        .                   // Look up the const in the substitutions. It really should be in there.
    1,290 ( 0.00%)          let opt_ct = self.substs.get(p.index as usize).map(|k| k.unpack());
        .                   let ct = match opt_ct {
        .                       Some(GenericArgKind::Const(ct)) => ct,
        .                       Some(kind) => {
        .                           let span = self.span.unwrap_or(DUMMY_SP);
        .                           span_bug!(
        .                               span,
        .                               "expected const for `{:?}` ({:?}/{}) but found {:?} \
        .                                when substituting substs={:?}",
-- line 578 ----------------------------------------
-- line 645 ----------------------------------------
        .               fn shift_vars_through_binders<T: TypeFoldable<'tcx>>(&self, val: T) -> T {
        .                   debug!(
        .                       "shift_vars(val={:?}, binders_passed={:?}, has_escaping_bound_vars={:?})",
        .                       val,
        .                       self.binders_passed,
        .                       val.has_escaping_bound_vars()
        .                   );
        .           
  427,623 ( 0.02%)          if self.binders_passed == 0 || !val.has_escaping_bound_vars() {
        .                       return val;
        .                   }
        .           
        .                   let result = ty::fold::shift_vars(self.tcx(), val, self.binders_passed);
        .                   debug!("shift_vars: shifted result = {:?}", result);
        .           
        .                   result
        .               }
        .           
        .               fn shift_region_through_binders(&self, region: ty::Region<'tcx>) -> ty::Region<'tcx> {
   51,379 ( 0.00%)          if self.binders_passed == 0 || !region.has_escaping_bound_vars() {
        .                       return region;
        .                   }
        .                   ty::fold::shift_region(self.tcx, region, self.binders_passed)
        .               }
        .           }
        .           
        .           /// Stores the user-given substs to reach some fully qualified path
        .           /// (e.g., `<T>::Item` or `<T as Trait>::Item`).
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
    4,267 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct UserSubsts<'tcx> {
        .               /// The substitutions for the item as given by the user.
        .               pub substs: SubstsRef<'tcx>,
        .           
        .               /// The self type, in the case of a `<T>::Item` path (when applied
        .               /// to an inherent impl). See `UserSelfTy` below.
    1,886 ( 0.00%)      pub user_self_ty: Option<UserSelfTy<'tcx>>,
        .           }
        .           
        .           /// Specifies the user-given self type. In the case of a path that
        .           /// refers to a member in an inherent impl, this self type is
        .           /// sometimes needed to constrain the type parameters on the impl. For
        .           /// example, in this code:
        .           ///
        .           /// ```
-- line 689 ----------------------------------------
-- line 696 ----------------------------------------
        .           /// self type `Foo<u32>`. Then we can instantiate the parameters of
        .           /// the impl (with the substs from `UserSubsts`) and apply those to
        .           /// the self type, giving `Foo<?A>`. Finally, we unify that with
        .           /// the self type here, which contains `?A` to be `&'static u32`
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
        .           #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct UserSelfTy<'tcx> {
        .               pub impl_def_id: DefId,
      735 ( 0.00%)      pub self_ty: Ty<'tcx>,
        .           }

2,997,320 ( 0.12%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 141 ----------------------------------------
        .               /// ```
        .               /// let a = [1, 2, 3];
        .               /// assert!(!a.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
        .               #[inline]
        .               pub const fn is_empty(&self) -> bool {
  527,809 ( 0.02%)          self.len() == 0
        .               }
        .           
        .               /// Returns the first element of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
        .               ///
        .               /// let w: &[i32] = &[];
        .               /// assert_eq!(None, w.first());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn first(&self) -> Option<&T> {
   27,036 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
        .               }
        .           
        .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
        .               ///     *first = 5;
        .               /// }
        .               /// assert_eq!(x, &[5, 1, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
        .               #[inline]
        .               pub const fn first_mut(&mut self) -> Option<&mut T> {
      536 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
        .               }
        .           
        .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 197 ----------------------------------------
        .               ///     assert_eq!(first, &0);
        .               ///     assert_eq!(elements, &[1, 2]);
        .               /// }
        .               /// ```
        .               #[stable(feature = "slice_splits", since = "1.5.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn split_first(&self) -> Option<(&T, &[T])> {
        8 ( 0.00%)          if let [first, tail @ ..] = self { Some((first, tail)) } else { None }
        .               }
        .           
        .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 213 ----------------------------------------
-- line 237 ----------------------------------------
        .               ///     assert_eq!(last, &2);
        .               ///     assert_eq!(elements, &[0, 1]);
        .               /// }
        .               /// ```
        .               #[stable(feature = "slice_splits", since = "1.5.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
   18,513 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
        .               }
        .           
        .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
        .               ///
        .               /// let w: &[i32] = &[];
        .               /// assert_eq!(None, w.last());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn last(&self) -> Option<&T> {
  347,296 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
        .               }
        .           
        .               /// Returns a mutable pointer to the last item in the slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
        .               ///     *last = 10;
        .               /// }
        .               /// assert_eq!(x, &[0, 1, 10]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
        .               #[inline]
        .               pub const fn last_mut(&mut self) -> Option<&mut T> {
  387,664 ( 0.02%)          if let [.., last] = self { Some(last) } else { None }
        .               }
        .           
        .               /// Returns a reference to an element or subslice depending on the type of
        .               /// index.
        .               ///
        .               /// - If given a position, returns a reference to the element at that
        .               ///   position or `None` if out of bounds.
        .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 448 ----------------------------------------
        .               /// }
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: slice::as_mut_ptr
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
        .               #[inline]
        .               pub const fn as_ptr(&self) -> *const T {
  646,377 ( 0.03%)          self as *const [T] as *const T
        .               }
        .           
        .               /// Returns an unsafe mutable pointer to the slice's buffer.
        .               ///
        .               /// The caller must ensure that the slice outlives the pointer this
        .               /// function returns, or else it will end up pointing to garbage.
        .               ///
        .               /// Modifying the container referenced by this slice may cause its buffer
-- line 464 ----------------------------------------
-- line 476 ----------------------------------------
        .               ///     }
        .               /// }
        .               /// assert_eq!(x, &[3, 4, 6]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
        .               #[inline]
        .               pub const fn as_mut_ptr(&mut self) -> *mut T {
       29 ( 0.00%)          self as *mut [T] as *mut T
        .               }
        .           
        .               /// Returns the two raw pointers spanning the slice.
        .               ///
        .               /// The returned range is half-open, which means that the end pointer
        .               /// points *one past* the last element of the slice. This way, an empty
        .               /// slice is represented by two equal pointers, and the difference between
        .               /// the two pointers represents the size of the slice.
-- line 492 ----------------------------------------
-- line 556 ----------------------------------------
        .               /// [`as_mut_ptr`]: slice::as_mut_ptr
        .               #[stable(feature = "slice_ptr_range", since = "1.48.0")]
        .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
        .               #[inline]
        .               pub const fn as_mut_ptr_range(&mut self) -> Range<*mut T> {
        .                   let start = self.as_mut_ptr();
        .                   // SAFETY: See as_ptr_range() above for why `add` here is safe.
        .                   let end = unsafe { start.add(self.len()) };
        1 ( 0.00%)          start..end
        .               }
        .           
        .               /// Swaps two elements in the slice.
        .               ///
        .               /// # Arguments
        .               ///
        .               /// * a - The index of the first element
        .               /// * b - The index of the second element
-- line 572 ----------------------------------------
-- line 582 ----------------------------------------
        .               /// v.swap(2, 4);
        .               /// assert!(v == ["a", "b", "e", "d", "c"]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
        .               #[inline]
        .               #[track_caller]
        .               pub const fn swap(&mut self, a: usize, b: usize) {
   15,124 ( 0.00%)          let _ = &self[a];
   33,863 ( 0.00%)          let _ = &self[b];
        .           
        .                   // SAFETY: we just checked that both `a` and `b` are in bounds
        .                   unsafe { self.swap_unchecked(a, b) }
        .               }
        .           
        .               /// Swaps two elements in the slice, without doing bounds checking.
        .               ///
        .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 644 ----------------------------------------
        .               /// ```
        .               /// let mut v = [1, 2, 3];
        .               /// v.reverse();
        .               /// assert!(v == [3, 2, 1]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn reverse(&mut self) {
        2 ( 0.00%)          let half_len = self.len() / 2;
        .                   let Range { start, end } = self.as_mut_ptr_range();
        .           
        .                   // These slices will skip the middle item for an odd length,
        .                   // since that one doesn't need to move.
        .                   let (front_half, back_half) =
        .                       // SAFETY: Both are subparts of the original slice, so the memory
        .                       // range is valid, and they don't overlap because they're each only
        .                       // half (or less) of the original slice.
-- line 660 ----------------------------------------
-- line 677 ----------------------------------------
        .           
        .                       // Because this function is first compiled in isolation,
        .                       // this check tells LLVM that the indexing below is
        .                       // in-bounds.  Then after inlining -- once the actual
        .                       // lengths of the slices are known -- it's removed.
        .                       let (a, b) = (&mut a[..n], &mut b[..n]);
        .           
        .                       for i in 0..n {
    3,425 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns an iterator over the slice.
        .               ///
        .               /// # Examples
        .               ///
-- line 693 ----------------------------------------
-- line 1499 ----------------------------------------
        .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
        .               ///     assert_eq!(right, []);
        .               /// }
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               #[track_caller]
        .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
      348 ( 0.00%)          assert!(mid <= self.len());
        .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
        .                   // fulfills the requirements of `from_raw_parts_mut`.
        .                   unsafe { self.split_at_unchecked(mid) }
        .               }
        .           
        .               /// Divides one mutable slice into two at an index.
        .               ///
        .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
        .               /// left[1] = 2;
        .               /// right[1] = 4;
        .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               #[track_caller]
        .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
   37,712 ( 0.00%)          assert!(mid <= self.len());
        .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
        .                   // fulfills the requirements of `from_raw_parts_mut`.
        .                   unsafe { self.split_at_mut_unchecked(mid) }
        .               }
        .           
        .               /// Divides one slice into two at an index, without doing bounds checking.
        .               ///
        .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
        .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
        .                   let len = self.len();
        .                   let ptr = self.as_mut_ptr();
        .           
        .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
        .                   //
        .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
        .                   // is fine.
    4,555 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
        .               }
        .           
        .               /// Divides one slice into an array and a remainder slice at an index.
        .               ///
        .               /// The array will contain all indices from `[0, N)` (excluding
        .               /// the index `N` itself) and the slice will contain all
        .               /// indices from `[N, len)` (excluding the index `len` itself).
        .               ///
-- line 1644 ----------------------------------------
-- line 2113 ----------------------------------------
        .               /// assert!(!v.iter().any(|e| e == "hi"));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn contains(&self, x: &T) -> bool
        .               where
        .                   T: PartialEq,
        .               {
      456 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
        .               }
        .           
        .               /// Returns `true` if `needle` is a prefix of the slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2142 ----------------------------------------
        .               /// assert!(v.starts_with(&[]));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn starts_with(&self, needle: &[T]) -> bool
        .               where
        .                   T: PartialEq,
        .               {
        .                   let n = needle.len();
   22,977 ( 0.00%)          self.len() >= n && needle == &self[..n]
        .               }
        .           
        .               /// Returns `true` if `needle` is a suffix of the slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let v = [10, 40, 30];
-- line 2158 ----------------------------------------
-- line 2171 ----------------------------------------
        .               /// assert!(v.ends_with(&[]));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn ends_with(&self, needle: &[T]) -> bool
        .               where
        .                   T: PartialEq,
        .               {
        .                   let (m, n) = (self.len(), needle.len());
   10,614 ( 0.00%)          m >= n && needle == &self[m - n..]
        .               }
        .           
        .               /// Returns a subslice with the prefix removed.
        .               ///
        .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
        .               /// If `prefix` is empty, simply returns the original slice.
        .               ///
        .               /// If the slice does not start with `prefix`, returns `None`.
-- line 2187 ----------------------------------------
-- line 2293 ----------------------------------------
        .               /// s.insert(idx, num);
        .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
        .               where
        .                   T: Ord,
        .               {
        3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
        .               }
        .           
        .               /// Binary searches this sorted slice with a comparator function.
        .               ///
        .               /// The comparator function should implement an order consistent
        .               /// with the sort order of the underlying slice, returning an
        .               /// order code that indicates whether its argument is `Less`,
        .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
        .               #[inline]
        .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
        .               where
        .                   F: FnMut(&'a T) -> Ordering,
        .               {
        .                   let mut size = self.len();
        .                   let mut left = 0;
        .                   let mut right = size;
2,023,765 ( 0.08%)          while left < right {
2,791,593 ( 0.11%)              let mid = left + size / 2;
        .           
        .                       // SAFETY: the call is made safe by the following invariants:
        .                       // - `mid >= 0`
        .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
  393,684 ( 0.02%)              let cmp = f(unsafe { self.get_unchecked(mid) });
        .           
        .                       // The reason why we use if/else control flow rather than match
        .                       // is because match reorders comparison operations, which is perf sensitive.
        .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
  756,953 ( 0.03%)              if cmp == Less {
1,276,429 ( 0.05%)                  left = mid + 1;
  399,085 ( 0.02%)              } else if cmp == Greater {
        .                           right = mid;
        .                       } else {
        .                           // SAFETY: same as the `get_unchecked` above
        .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
        .                           return Ok(mid);
        .                       }
        .           
2,235,982 ( 0.09%)              size = right - left;
        .                   }
        .                   Err(left)
        .               }
        .           
        .               /// Binary searches this sorted slice with a key extraction function.
        .               ///
        .               /// Assumes that the slice is sorted by the key, for instance with
        .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3203 ----------------------------------------
        .                   #[track_caller]
        .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
        .                       panic!(
        .                           "source slice length ({}) does not match destination slice length ({})",
        .                           src_len, dst_len,
        .                       );
        .                   }
        .           
   83,336 ( 0.00%)          if self.len() != src.len() {
        .                       len_mismatch_fail(self.len(), src.len());
        .                   }
        .           
        .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
        .                   // checked to have the same length. The slices cannot overlap because
        .                   // mutable references are exclusive.
        .                   unsafe {
        .                       ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
-- line 3219 ----------------------------------------
-- line 3382 ----------------------------------------
        .                   }
        .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
        .                   let ts: usize = mem::size_of::<U>() / gcd;
        .                   let us: usize = mem::size_of::<T>() / gcd;
        .           
        .                   // Armed with this knowledge, we can find how many `U`s we can fit!
        .                   let us_len = self.len() / ts * us;
        .                   // And how many `T`s will be in the trailing slice!
   19,946 ( 0.00%)          let ts_len = self.len() % ts;
        .                   (us_len, ts_len)
        .               }
        .           
        .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
        .               /// maintained.
        .               ///
        .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
        .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
        .                       return (self, &[], &[]);
        .                   }
        .           
        .                   // First, find at what point do we split between the first and 2nd slice. Easy with
        .                   // ptr.align_offset.
        .                   let ptr = self.as_ptr();
        .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
        .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
   19,946 ( 0.00%)          if offset > self.len() {
        .                       (self, &[], &[])
        .                   } else {
        .                       let (left, rest) = self.split_at(offset);
        .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
        .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
        .                       // since the caller guarantees that we can transmute `T` to `U` safely.
        .                       unsafe {
        .                           (
        .                               left,
        .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
   19,946 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
        .                           )
        .                       }
        .                   }
        .               }
        .           
        .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
        .               /// maintained.
        .               ///
-- line 3456 ----------------------------------------

1,928,709 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 26 ----------------------------------------
      .           pub struct UnmatchedBrace {
      .               pub expected_delim: token::DelimToken,
      .               pub found_delim: Option<token::DelimToken>,
      .               pub found_span: Span,
      .               pub unclosed_span: Option<Span>,
      .               pub candidate_span: Option<Span>,
      .           }
      .           
    420 ( 0.00%)  crate fn parse_token_trees<'a>(
      .               sess: &'a ParseSess,
      .               src: &'a str,
      .               start_pos: BytePos,
      .               override_span: Option<Span>,
      .           ) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
      .               StringReader { sess, start_pos, pos: start_pos, end_src_index: src.len(), src, override_span }
      .                   .into_token_trees()
    270 ( 0.00%)  }
      .           
      .           struct StringReader<'a> {
      .               sess: &'a ParseSess,
      .               /// Initial position, read-only.
      .               start_pos: BytePos,
      .               /// The absolute offset within the source_map of the current character.
      .               pos: BytePos,
      .               /// Stop reading src at this index.
-- line 50 ----------------------------------------
-- line 51 ----------------------------------------
      .               end_src_index: usize,
      .               /// Source text to tokenize.
      .               src: &'a str,
      .               override_span: Option<Span>,
      .           }
      .           
      .           impl<'a> StringReader<'a> {
      .               fn mk_sp(&self, lo: BytePos, hi: BytePos) -> Span {
 45,665 ( 0.00%)          self.override_span.unwrap_or_else(|| Span::with_root_ctxt(lo, hi))
      .               }
      .           
      .               /// Returns the next token, and info about preceding whitespace, if any.
237,307 ( 0.01%)      fn next_token(&mut self) -> (Spacing, Token) {
      .                   let mut spacing = Spacing::Joint;
      .           
      .                   // Skip `#!` at the start of the file
 67,802 ( 0.00%)          let start_src_index = self.src_index(self.pos);
101,703 ( 0.00%)          let text: &str = &self.src[start_src_index..self.end_src_index];
      .                   let is_beginning_of_file = self.pos == self.start_pos;
 33,901 ( 0.00%)          if is_beginning_of_file {
    120 ( 0.00%)              if let Some(shebang_len) = rustc_lexer::strip_shebang(text) {
      .                           self.pos = self.pos + BytePos::from_usize(shebang_len);
      .                           spacing = Spacing::Alone;
      .                       }
      .                   }
      .           
      .                   // Skip trivial (whitespace & comments) tokens
      .                   loop {
 64,915 ( 0.00%)              let start_src_index = self.src_index(self.pos);
148,224 ( 0.01%)              let text: &str = &self.src[start_src_index..self.end_src_index];
      .           
 49,408 ( 0.00%)              if text.is_empty() {
      .                           let span = self.mk_sp(self.pos, self.pos);
    150 ( 0.00%)                  return (spacing, Token::new(token::Eof, span));
      .                       }
      .           
148,134 ( 0.01%)              let token = rustc_lexer::first_token(text);
      .           
 98,756 ( 0.00%)              let start = self.pos;
 49,378 ( 0.00%)              self.pos = self.pos + BytePos::from_usize(token.len);
      .           
      .                       debug!("next_token: {:?}({:?})", token.kind, self.str_from(start));
      .           
398,752 ( 0.02%)              match self.cook_lexer_token(token.kind, start) {
270,968 ( 0.01%)                  Some(kind) => {
      .                               let span = self.mk_sp(start, self.pos);
203,226 ( 0.01%)                      return (spacing, Token::new(kind, span));
      .                           }
      .                           None => spacing = Spacing::Alone,
      .                       }
      .                   }
305,109 ( 0.01%)      }
      .           
      .               /// Report a fatal lexical error with a given span.
      .               fn fatal_span(&self, sp: Span, m: &str) -> FatalError {
      .                   self.sess.span_diagnostic.span_fatal(sp, m)
      .               }
      .           
      .               /// Report a lexical error with a given span.
      .               fn err_span(&self, sp: Span, m: &str) {
-- line 110 ----------------------------------------
-- line 130 ----------------------------------------
      .               ) -> DiagnosticBuilder<'a> {
      .                   self.sess
      .                       .span_diagnostic
      .                       .struct_span_fatal(self.mk_sp(from_pos, to_pos), &format!("{}: {}", m, escaped_char(c)))
      .               }
      .           
      .               /// Detect usages of Unicode codepoints changing the direction of the text on screen and loudly
      .               /// complain about it.
  2,891 ( 0.00%)      fn lint_unicode_text_flow(&self, start: BytePos) {
      .                   // Opening delimiter of the length 2 is not included into the comment text.
      .                   let content_start = start + BytePos(2);
      .                   let content = self.str_from(content_start);
      .                   if contains_text_flow_control_chars(content) {
      .                       let span = self.mk_sp(start, self.pos);
      .                       self.sess.buffer_lint_with_diagnostic(
      .                           &TEXT_DIRECTION_CODEPOINT_IN_COMMENT,
      .                           span,
      .                           ast::CRATE_NODE_ID,
      .                           "unicode codepoint changing visible direction of text present in comment",
      .                           BuiltinLintDiagnostics::UnicodeTextFlow(span, content.to_string()),
      .                       );
      .                   }
  3,304 ( 0.00%)      }
      .           
      .               /// Turns simple `rustc_lexer::TokenKind` enum into a rich
      .               /// `rustc_ast::TokenKind`. This turns strings into interned
      .               /// symbols and runs additional validation.
      .               fn cook_lexer_token(&self, token: rustc_lexer::TokenKind, start: BytePos) -> Option<TokenKind> {
246,890 ( 0.01%)          Some(match token {
  1,345 ( 0.00%)              rustc_lexer::TokenKind::LineComment { doc_style } => {
      .                           // Skip non-doc comments
  5,486 ( 0.00%)                  let doc_style = if let Some(doc_style) = doc_style {
      .                               doc_style
      .                           } else {
      .                               self.lint_unicode_text_flow(start);
      .                               return None;
      .                           };
      .           
      .                           // Opening delimiter of the length 3 is not included into the symbol.
      .                           let content_start = start + BytePos(3);
      .                           let content = self.str_from(content_start);
  4,660 ( 0.00%)                  self.cook_doc_comment(content_start, content, CommentKind::Line, doc_style)
      .                       }
      .                       rustc_lexer::TokenKind::BlockComment { doc_style, terminated } => {
      .                           if !terminated {
      .                               let msg = match doc_style {
      .                                   Some(_) => "unterminated block doc-comment",
      .                                   None => "unterminated block comment",
      .                               };
      .                               let last_bpos = self.pos;
-- line 179 ----------------------------------------
-- line 198 ----------------------------------------
      .                           let content_end = self.pos - BytePos(if terminated { 2 } else { 0 });
      .                           let content = self.str_from_to(content_start, content_end);
      .                           self.cook_doc_comment(content_start, content, CommentKind::Block, doc_style)
      .                       }
      .                       rustc_lexer::TokenKind::Whitespace => return None,
      .                       rustc_lexer::TokenKind::Ident
      .                       | rustc_lexer::TokenKind::RawIdent
      .                       | rustc_lexer::TokenKind::UnknownPrefix => {
 46,936 ( 0.00%)                  let is_raw_ident = token == rustc_lexer::TokenKind::RawIdent;
 58,670 ( 0.00%)                  let is_unknown_prefix = token == rustc_lexer::TokenKind::UnknownPrefix;
      .                           let mut ident_start = start;
 23,468 ( 0.00%)                  if is_raw_ident {
      .                               ident_start = ident_start + BytePos(2);
      .                           }
 35,202 ( 0.00%)                  if is_unknown_prefix {
      .                               self.report_unknown_prefix(start);
      .                           }
 58,670 ( 0.00%)                  let sym = nfc_normalize(self.str_from(ident_start));
      .                           let span = self.mk_sp(start, self.pos);
 46,936 ( 0.00%)                  self.sess.symbol_gallery.insert(sym, span);
 23,468 ( 0.00%)                  if is_raw_ident {
      .                               if !sym.can_be_raw() {
      .                                   self.err_span(span, &format!("`{}` cannot be a raw identifier", sym));
      .                               }
      .                               self.sess.raw_identifier_spans.borrow_mut().push(span);
      .                           }
 82,138 ( 0.00%)                  token::Ident(sym, is_raw_ident)
      .                       }
      .                       rustc_lexer::TokenKind::InvalidIdent
      .                           // Do not recover an identifier with emoji if the codepoint is a confusable
      .                           // with a recoverable substitution token, like `➖`.
      .                           if UNICODE_ARRAY
      .                               .iter()
      .                               .find(|&&(c, _, _)| {
      .                                   let sym = self.str_from(start);
-- line 232 ----------------------------------------
-- line 234 ----------------------------------------
      .                               })
      .                               .is_none() =>
      .                       {
      .                           let sym = nfc_normalize(self.str_from(start));
      .                           let span = self.mk_sp(start, self.pos);
      .                           self.sess.bad_unicode_identifiers.borrow_mut().entry(sym).or_default().push(span);
      .                           token::Ident(sym, false)
      .                       }
 33,760 ( 0.00%)              rustc_lexer::TokenKind::Literal { kind, suffix_start } => {
      .                           let suffix_start = start + BytePos(suffix_start as u32);
      .                           let (kind, symbol) = self.cook_lexer_literal(start, suffix_start, kind);
  6,330 ( 0.00%)                  let suffix = if suffix_start < self.pos {
      .                               let string = self.str_from(suffix_start);
      .                               if string == "_" {
      .                                   self.sess
      .                                       .span_diagnostic
      .                                       .struct_span_warn(
      .                                           self.mk_sp(suffix_start, self.pos),
      .                                           "underscore literal suffix is not allowed",
      .                                       )
-- line 253 ----------------------------------------
-- line 259 ----------------------------------------
      .                                       .note(
      .                                           "see issue #42326 \
      .                                            <https://github.com/rust-lang/rust/issues/42326> \
      .                                            for more information",
      .                                       )
      .                                       .emit();
      .                                   None
      .                               } else {
    150 ( 0.00%)                          Some(Symbol::intern(string))
      .                               }
      .                           } else {
      .                               None
      .                           };
 16,880 ( 0.00%)                  token::Literal(token::Lit { kind, symbol, suffix })
      .                       }
     48 ( 0.00%)              rustc_lexer::TokenKind::Lifetime { starts_with_number } => {
      .                           // Include the leading `'` in the real identifier, for macro
      .                           // expansion purposes. See #12512 for the gory details of why
      .                           // this is necessary.
      .                           let lifetime_name = self.str_from(start);
     24 ( 0.00%)                  if starts_with_number {
      .                               self.err_span_(start, self.pos, "lifetimes cannot start with a number");
      .                           }
     72 ( 0.00%)                  let ident = Symbol::intern(lifetime_name);
     96 ( 0.00%)                  token::Lifetime(ident)
      .                       }
      .                       rustc_lexer::TokenKind::Semi => token::Semi,
      .                       rustc_lexer::TokenKind::Comma => token::Comma,
      .                       rustc_lexer::TokenKind::Dot => token::Dot,
      .                       rustc_lexer::TokenKind::OpenParen => token::OpenDelim(token::Paren),
      .                       rustc_lexer::TokenKind::CloseParen => token::CloseDelim(token::Paren),
      .                       rustc_lexer::TokenKind::OpenBrace => token::OpenDelim(token::Brace),
      .                       rustc_lexer::TokenKind::CloseBrace => token::CloseDelim(token::Brace),
-- line 291 ----------------------------------------
-- line 324 ----------------------------------------
      .                               err.help("source files must contain UTF-8 encoded text, unexpected null bytes might occur when a different encoding is used");
      .                           }
      .                           err.emit();
      .                           token?
      .                       }
      .                   })
      .               }
      .           
 11,184 ( 0.00%)      fn cook_doc_comment(
      .                   &self,
      .                   content_start: BytePos,
      .                   content: &str,
      .                   comment_kind: CommentKind,
      .                   doc_style: DocStyle,
      .               ) -> TokenKind {
    932 ( 0.00%)          if content.contains('\r') {
      .                       for (idx, _) in content.char_indices().filter(|&(_, c)| c == '\r') {
      .                           self.err_span_(
      .                               content_start + BytePos(idx as u32),
      .                               content_start + BytePos(idx as u32 + 1),
      .                               match comment_kind {
      .                                   CommentKind::Line => "bare CR not allowed in doc-comment",
      .                                   CommentKind::Block => "bare CR not allowed in block doc-comment",
      .                               },
-- line 347 ----------------------------------------
-- line 349 ----------------------------------------
      .                       }
      .                   }
      .           
      .                   let attr_style = match doc_style {
      .                       DocStyle::Outer => AttrStyle::Outer,
      .                       DocStyle::Inner => AttrStyle::Inner,
      .                   };
      .           
  2,796 ( 0.00%)          token::DocComment(comment_kind, attr_style, Symbol::intern(content))
 13,980 ( 0.00%)      }
      .           
      .               fn cook_lexer_literal(
      .                   &self,
      .                   start: BytePos,
      .                   suffix_start: BytePos,
      .                   kind: rustc_lexer::LiteralKind,
      .               ) -> (token::LitKind, Symbol) {
      .                   // prefix means `"` or `br"` or `r###"`, ...
-- line 366 ----------------------------------------
-- line 380 ----------------------------------------
      .                               self.sess.span_diagnostic.span_fatal_with_code(
      .                                   self.mk_sp(start + BytePos(1), suffix_start),
      .                                   "unterminated byte constant",
      .                                   error_code!(E0763),
      .                               )
      .                           }
      .                           (token::Byte, Mode::Byte, 2, 1) // b' '
      .                       }
    172 ( 0.00%)              rustc_lexer::LiteralKind::Str { terminated } => {
    172 ( 0.00%)                  if !terminated {
      .                               self.sess.span_diagnostic.span_fatal_with_code(
      .                                   self.mk_sp(start, suffix_start),
      .                                   "unterminated double quote string",
      .                                   error_code!(E0765),
      .                               )
      .                           }
      .                           (token::Str, Mode::Str, 1, 1) // " "
      .                       }
-- line 397 ----------------------------------------
-- line 410 ----------------------------------------
      .                           let n = u32::from(n_hashes);
      .                           (token::StrRaw(n_hashes), Mode::RawStr, 2 + n, 1 + n) // r##" "##
      .                       }
      .                       rustc_lexer::LiteralKind::RawByteStr { n_hashes, err } => {
      .                           self.report_raw_str_error(start, err);
      .                           let n = u32::from(n_hashes);
      .                           (token::ByteStrRaw(n_hashes), Mode::RawByteStr, 3 + n, 1 + n) // br##" "##
      .                       }
    680 ( 0.00%)              rustc_lexer::LiteralKind::Int { base, empty_int } => {
    340 ( 0.00%)                  return if empty_int {
      .                               self.sess
      .                                   .span_diagnostic
      .                                   .struct_span_err_with_code(
      .                                       self.mk_sp(start, suffix_start),
      .                                       "no valid digits found for number",
      .                                       error_code!(E0768),
      .                                   )
      .                                   .emit();
      .                               (token::Integer, sym::integer(0))
      .                           } else {
      .                               self.validate_int_literal(base, start, suffix_start);
  1,020 ( 0.00%)                      (token::Integer, self.symbol_from_to(start, suffix_start))
      .                           };
      .                       }
  1,598 ( 0.00%)              rustc_lexer::LiteralKind::Float { base, empty_exponent } => {
  1,598 ( 0.00%)                  if empty_exponent {
      .                               self.err_span_(start, self.pos, "expected at least one digit in exponent");
      .                           }
      .           
 11,186 ( 0.00%)                  match base {
      .                               Base::Hexadecimal => self.err_span_(
      .                                   start,
      .                                   suffix_start,
      .                                   "hexadecimal float literal is not supported",
      .                               ),
      .                               Base::Octal => {
      .                                   self.err_span_(start, suffix_start, "octal float literal is not supported")
      .                               }
      .                               Base::Binary => {
      .                                   self.err_span_(start, suffix_start, "binary float literal is not supported")
      .                               }
      .                               _ => (),
      .                           }
      .           
  4,794 ( 0.00%)                  let id = self.symbol_from_to(start, suffix_start);
      .                           return (token::Float, id);
      .                       }
      .                   };
      .                   let content_start = start + BytePos(prefix_len);
      .                   let content_end = suffix_start - BytePos(postfix_len);
    516 ( 0.00%)          let id = self.symbol_from_to(content_start, content_end);
      .                   self.validate_literal_escape(mode, content_start, content_end, prefix_len, postfix_len);
      .                   (lit_kind, id)
      .               }
      .           
      .               #[inline]
      .               fn src_index(&self, pos: BytePos) -> usize {
      .                   (pos - self.start_pos).to_usize()
      .               }
      .           
      .               /// Slice of the source text from `start` up to but excluding `self.pos`,
      .               /// meaning the slice does not include the character `self.ch`.
      .               fn str_from(&self, start: BytePos) -> &str {
 82,226 ( 0.00%)          self.str_from_to(start, self.pos)
      .               }
      .           
      .               /// As symbol_from, with an explicit endpoint.
      .               fn symbol_from_to(&self, start: BytePos, end: BytePos) -> Symbol {
      .                   debug!("taking an ident from {:?} to {:?}", start, end);
 18,826 ( 0.00%)          Symbol::intern(self.str_from_to(start, end))
      .               }
      .           
      .               /// Slice of the source text spanning from `start` up to but excluding `end`.
 15,415 ( 0.00%)      fn str_from_to(&self, start: BytePos, end: BytePos) -> &str {
      .                   &self.src[self.src_index(start)..self.src_index(end)]
 61,660 ( 0.00%)      }
      .           
      .               fn report_raw_str_error(&self, start: BytePos, opt_err: Option<RawStrError>) {
      .                   match opt_err {
      .                       Some(RawStrError::InvalidStarter { bad_char }) => {
      .                           self.report_non_started_raw_string(start, bad_char)
      .                       }
      .                       Some(RawStrError::NoTerminator { expected, found, possible_terminator_offset }) => self
      .                           .report_unterminated_raw_string(start, expected, possible_terminator_offset, found),
-- line 493 ----------------------------------------
-- line 609 ----------------------------------------
      .               fn validate_literal_escape(
      .                   &self,
      .                   mode: Mode,
      .                   content_start: BytePos,
      .                   content_end: BytePos,
      .                   prefix_len: u32,
      .                   postfix_len: u32,
      .               ) {
  1,032 ( 0.00%)          let lit_content = self.str_from_to(content_start, content_end);
 28,992 ( 0.00%)          unescape::unescape_literal(lit_content, mode, &mut |range, result| {
      .                       // Here we only check for errors. The actual unescaping is done later.
  6,302 ( 0.00%)              if let Err(err) = result {
      .                           let span_with_quotes = self
      .                               .mk_sp(content_start - BytePos(prefix_len), content_end + BytePos(postfix_len));
      .                           let (start, end) = (range.start as u32, range.end as u32);
      .                           let lo = content_start + BytePos(start);
      .                           let hi = lo + BytePos(end - start);
      .                           let span = self.mk_sp(lo, hi);
      .                           emit_unescape_error(
      .                               &self.sess.span_diagnostic,
-- line 628 ----------------------------------------
-- line 629 ----------------------------------------
      .                               lit_content,
      .                               span_with_quotes,
      .                               span,
      .                               mode,
      .                               range,
      .                               err,
      .                           );
      .                       }
 28,359 ( 0.00%)          });
      .               }
      .           
      .               fn validate_int_literal(&self, base: Base, content_start: BytePos, content_end: BytePos) {
  1,360 ( 0.00%)          let base = match base {
      .                       Base::Binary => 2,
      .                       Base::Octal => 8,
      .                       _ => return,
      .                   };
      .                   let s = self.str_from_to(content_start + BytePos(2), content_end);
      .                   for (idx, c) in s.char_indices() {
      .                       let idx = idx as u32;
      .                       if c != '_' && c.to_digit(base).is_none() {
-- line 649 ----------------------------------------
-- line 650 ----------------------------------------
      .                           let lo = content_start + BytePos(2 + idx);
      .                           let hi = content_start + BytePos(2 + idx + c.len_utf8() as u32);
      .                           self.err_span_(lo, hi, &format!("invalid digit for a base {} literal", base));
      .                       }
      .                   }
      .               }
      .           }
      .           
105,606 ( 0.00%)  pub fn nfc_normalize(string: &str) -> Symbol {
      .               use unicode_normalization::{is_nfc_quick, IsNormalized, UnicodeNormalization};
 23,468 ( 0.00%)      match is_nfc_quick(string.chars()) {
117,340 ( 0.00%)          IsNormalized::Yes => Symbol::intern(string),
      .                   _ => {
      .                       let normalized_str: String = string.chars().nfc().collect();
      .                       Symbol::intern(&normalized_str)
      .                   }
      .               }
      .           }

150,622 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_apfloat/src/ieee.rs
--------------------------------------------------------------------------------
Ir                 

-- line 26 ----------------------------------------
        .               marker: PhantomData<S>,
        .           }
        .           
        .           /// Fundamental unit of big integer arithmetic, but also
        .           /// large to store the largest significands by itself.
        .           type Limb = u128;
        .           const LIMB_BITS: usize = 128;
        .           fn limbs_for_bits(bits: usize) -> usize {
   37,440 ( 0.00%)      (bits + LIMB_BITS - 1) / LIMB_BITS
    6,456 ( 0.00%)  }
        .           
        .           /// Enum that represents what fraction of the LSB truncated bits of an fp number
        .           /// represent.
        .           ///
        .           /// This essentially combines the roles of guard and sticky bits.
        .           #[must_use]
    6,508 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           enum Loss {
        .               // Example of truncated bits:
        .               ExactlyZero,  // 000000
        .               LessThanHalf, // 0xxxxx  x's not all zero
        .               ExactlyHalf,  // 100000
        .               MoreThanHalf, // 1xxxxx  x's not all zero
        .           }
        .           
-- line 50 ----------------------------------------
-- line 70 ----------------------------------------
        .               /// The significand bitpattern to mark a NaN as quiet.
        .               /// NOTE: for X87DoubleExtended we need to set two bits instead of 2.
        .               const QNAN_SIGNIFICAND: Limb = 1 << Self::QNAN_BIT;
        .           
        .               fn from_bits(bits: u128) -> IeeeFloat<Self> {
        .                   assert!(Self::BITS > Self::PRECISION);
        .           
        .                   let sign = bits & (1 << (Self::BITS - 1));
      132 ( 0.00%)          let exponent = (bits & !sign) >> (Self::PRECISION - 1);
      220 ( 0.00%)          let mut r = IeeeFloat {
       44 ( 0.00%)              sig: [bits & ((1 << (Self::PRECISION - 1)) - 1)],
        .                       // Convert the exponent from its bias representation to a signed integer.
      110 ( 0.00%)              exp: (exponent as ExpInt) - Self::MAX_EXP,
        .                       category: Category::Zero,
        .                       sign: sign != 0,
        .                       marker: PhantomData,
        .                   };
        .           
      220 ( 0.00%)          if r.exp == Self::MIN_EXP - 1 && r.sig == [0] {
        .                       // Exponent, significand meaningless.
        .                       r.category = Category::Zero;
        .                   } else if r.exp == Self::MAX_EXP + 1 && r.sig == [0] {
        .                       // Exponent, significand meaningless.
        .                       r.category = Category::Infinity;
        .                   } else if r.exp == Self::MAX_EXP + 1 && r.sig != [0] {
        .                       // Sign, exponent, significand meaningless.
        .                       r.category = Category::NaN;
        .                   } else {
       66 ( 0.00%)              r.category = Category::Normal;
        .                       if r.exp == Self::MIN_EXP - 1 {
        .                           // Denormal.
        .                           r.exp = Self::MIN_EXP;
        .                       } else {
        .                           // Set integer bit.
      176 ( 0.00%)                  sig::set_bit(&mut r.sig, Self::PRECISION - 1);
        .                       }
        .                   }
        .           
        .                   r
        .               }
        .           
        .               fn to_bits(x: IeeeFloat<Self>) -> u128 {
        .                   assert!(Self::BITS > Self::PRECISION);
        .           
        .                   // Split integer bit from significand.
    8,738 ( 0.00%)          let integer_bit = sig::get_bit(&x.sig, Self::PRECISION - 1);
    4,372 ( 0.00%)          let mut significand = x.sig[0] & ((1 << (Self::PRECISION - 1)) - 1);
   15,295 ( 0.00%)          let exponent = match x.category {
        .                       Category::Normal => {
   12,918 ( 0.00%)                  if x.exp == Self::MIN_EXP && !integer_bit {
        .                               // Denormal.
        .                               Self::MIN_EXP - 1
        .                           } else {
        .                               x.exp
        .                           }
        .                       }
        .                       Category::Zero => {
        .                           // FIXME(eddyb) Maybe we should guarantee an invariant instead?
-- line 127 ----------------------------------------
-- line 132 ----------------------------------------
        .                           // FIXME(eddyb) Maybe we should guarantee an invariant instead?
        .                           significand = 0;
        .                           Self::MAX_EXP + 1
        .                       }
        .                       Category::NaN => Self::MAX_EXP + 1,
        .                   };
        .           
        .                   // Convert the exponent from a signed integer to its bias representation.
   10,815 ( 0.00%)          let exponent = (exponent + Self::MAX_EXP) as u128;
        .           
   21,624 ( 0.00%)          ((x.sign as u128) << (Self::BITS - 1)) | (exponent << (Self::PRECISION - 1)) | significand
        .               }
        .           }
        .           
        .           impl<S> Copy for IeeeFloat<S> {}
        .           impl<S> Clone for IeeeFloat<S> {
        .               fn clone(&self) -> Self {
        .                   *self
        .               }
-- line 150 ----------------------------------------
-- line 289 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<S> Neg for IeeeFloat<S> {
        .               type Output = Self;
        .               fn neg(mut self) -> Self {
        2 ( 0.00%)          self.sign = !self.sign;
       17 ( 0.00%)          self
        .               }
        .           }
        .           
        .           /// Prints this value as a decimal string.
        .           ///
        .           /// \param precision The maximum number of digits of
        .           ///   precision to output. If there are fewer digits available,
        .           ///   zero padding will not be used unless the value is
-- line 306 ----------------------------------------
-- line 721 ----------------------------------------
        .                       sig: [1 << (S::PRECISION - 1)],
        .                       exp: S::MIN_EXP,
        .                       category: Category::Normal,
        .                       sign: false,
        .                       marker: PhantomData,
        .                   }
        .               }
        .           
       12 ( 0.00%)      fn add_r(mut self, rhs: Self, round: Round) -> StatusAnd<Self> {
       30 ( 0.00%)          let status = match (self.category, rhs.category) {
        .                       (Category::Infinity, Category::Infinity) => {
        .                           // Differently signed infinities can only be validly
        .                           // subtracted.
        .                           if self.sign != rhs.sign {
        .                               self = Self::NAN;
        .                               Status::INVALID_OP
        .                           } else {
        .                               Status::OK
-- line 738 ----------------------------------------
-- line 746 ----------------------------------------
        .           
        .                       (Category::Zero, _) | (_, Category::NaN | Category::Infinity) => {
        .                           self = rhs;
        .                           Status::OK
        .                       }
        .           
        .                       // This return code means it was not a simple case.
        .                       (Category::Normal, Category::Normal) => {
       22 ( 0.00%)                  let loss = sig::add_or_sub(
        .                               &mut self.sig,
        2 ( 0.00%)                      &mut self.exp,
        2 ( 0.00%)                      &mut self.sign,
        4 ( 0.00%)                      &mut [rhs.sig[0]],
        .                               rhs.exp,
        2 ( 0.00%)                      rhs.sign,
        .                           );
        .                           let status;
       28 ( 0.00%)                  self = unpack!(status=, self.normalize(round, loss));
        .           
        .                           // Can only be zero if we lost no fraction.
        2 ( 0.00%)                  assert!(self.category != Category::Zero || loss == Loss::ExactlyZero);
        .           
        .                           status
        .                       }
        .                   };
        .           
        .                   // If two numbers add (exactly) to zero, IEEE 754 decrees it is a
        .                   // positive zero unless rounding to minus infinity, except that
        .                   // adding two like-signed zeroes gives that zero.
        .                   if self.category == Category::Zero
        .                       && (rhs.category != Category::Zero || self.sign != rhs.sign)
        .                   {
        .                       self.sign = round == Round::TowardNegative;
        .                   }
        .           
        8 ( 0.00%)          status.and(self)
       10 ( 0.00%)      }
        .           
        .               fn mul_r(mut self, rhs: Self, round: Round) -> StatusAnd<Self> {
        .                   self.sign ^= rhs.sign;
        .           
        .                   match (self.category, rhs.category) {
        .                       (Category::NaN, _) => {
        .                           self.sign = false;
        .                           Status::OK.and(self)
-- line 790 ----------------------------------------
-- line 930 ----------------------------------------
        .                   {
        .                       self.sign = round == Round::TowardNegative;
        .                   }
        .           
        .                   status.and(self)
        .               }
        .           
        .               fn div_r(mut self, rhs: Self, round: Round) -> StatusAnd<Self> {
      120 ( 0.00%)          self.sign ^= rhs.sign;
        .           
      260 ( 0.00%)          match (self.category, rhs.category) {
        .                       (Category::NaN, _) => {
        .                           self.sign = false;
        .                           Status::OK.and(self)
        .                       }
        .           
        .                       (_, Category::NaN) => {
        .                           self.category = Category::NaN;
        .                           self.sig = rhs.sig;
-- line 948 ----------------------------------------
-- line 962 ----------------------------------------
        .                       }
        .           
        .                       (Category::Normal, Category::Zero) => {
        .                           self.category = Category::Infinity;
        .                           Status::DIV_BY_ZERO.and(self)
        .                       }
        .           
        .                       (Category::Normal, Category::Normal) => {
      100 ( 0.00%)                  self.exp -= rhs.exp;
       20 ( 0.00%)                  let dividend = self.sig[0];
      120 ( 0.00%)                  let loss = sig::div(
        .                               &mut self.sig,
        .                               &mut self.exp,
       20 ( 0.00%)                      &mut [dividend],
      100 ( 0.00%)                      &mut [rhs.sig[0]],
        .                               S::PRECISION,
        .                           );
        .                           let mut status;
      320 ( 0.00%)                  self = unpack!(status=, self.normalize(round, loss));
       60 ( 0.00%)                  if loss != Loss::ExactlyZero {
        .                               status |= Status::INEXACT;
        .                           }
       60 ( 0.00%)                  status.and(self)
        .                       }
        .                   }
        .               }
        .           
        .               fn c_fmod(mut self, rhs: Self) -> StatusAnd<Self> {
        .                   match (self.category, rhs.category) {
        .                       (Category::NaN, _)
        .                       | (Category::Zero, Category::Infinity | Category::Normal)
-- line 992 ----------------------------------------
-- line 1155 ----------------------------------------
        .                                   sig::increment(&mut self.sig);
        .                               }
        .                           }
        .                           Status::OK.and(self)
        .                       }
        .                   }
        .               }
        .           
       22 ( 0.00%)      fn from_bits(input: u128) -> Self {
        .                   // Dispatch to semantics.
        .                   S::from_bits(input)
       66 ( 0.00%)      }
        .           
        .               fn from_u128_r(input: u128, round: Round) -> StatusAnd<Self> {
        9 ( 0.00%)          IeeeFloat {
        .                       sig: [input],
        .                       exp: S::PRECISION as ExpInt - 1,
        .                       category: Category::Normal,
        .                       sign: false,
        .                       marker: PhantomData,
        .                   }
        .                   .normalize(round, Loss::ExactlyZero)
        .               }
        .           
        .               fn from_str_r(mut s: &str, mut round: Round) -> Result<StatusAnd<Self>, ParseError> {
    2,162 ( 0.00%)          if s.is_empty() {
        .                       return Err(ParseError("Invalid string length"));
        .                   }
        .           
        .                   // Handle special cases.
        .                   match s {
       20 ( 0.00%)              "inf" | "INFINITY" => return Ok(Status::OK.and(Self::INFINITY)),
        9 ( 0.00%)              "-inf" | "-INFINITY" => return Ok(Status::OK.and(-Self::INFINITY)),
       40 ( 0.00%)              "nan" | "NaN" => return Ok(Status::OK.and(Self::NAN)),
       18 ( 0.00%)              "-nan" | "-NaN" => return Ok(Status::OK.and(-Self::NAN)),
        .                       _ => {}
        .                   }
        .           
        .                   // Handle a leading minus sign.
        .                   let minus = s.starts_with('-');
    2,162 ( 0.00%)          if minus || s.starts_with('+') {
        .                       s = &s[1..];
        .                       if s.is_empty() {
        .                           return Err(ParseError("String has no digits"));
        .                       }
        .                   }
        .           
        .                   // Adjust the rounding mode for the absolute value below.
        .                   if minus {
        .                       round = -round;
        .                   }
        .           
    2,162 ( 0.00%)          let r = if s.starts_with("0x") || s.starts_with("0X") {
        .                       s = &s[2..];
        .                       if s.is_empty() {
        .                           return Err(ParseError("Invalid string"));
        .                       }
        .                       Self::from_hexadecimal_string(s, round)?
        .                   } else {
        .                       Self::from_decimal_string(s, round)?
        .                   };
        .           
    8,648 ( 0.00%)          Ok(r.map(|r| if minus { -r } else { r }))
        .               }
        .           
    1,081 ( 0.00%)      fn to_bits(self) -> u128 {
        .                   // Dispatch to semantics.
   10,925 ( 0.00%)          S::to_bits(self)
    2,162 ( 0.00%)      }
        .           
        .               fn to_u128_r(self, width: usize, round: Round, is_exact: &mut bool) -> StatusAnd<u128> {
        .                   // The result of trying to convert a number too large.
        .                   let overflow = if self.sign {
        .                       // Negative numbers cannot be represented as unsigned.
        .                       0
        .                   } else {
        .                       // Largest unsigned integer of the given width.
-- line 1231 ----------------------------------------
-- line 1547 ----------------------------------------
        .           
        .               /// Returns `true` if, when truncating the current number, with `bit` the
        .               /// new LSB, with the given lost fraction and rounding mode, the result
        .               /// would need to be rounded away from zero (i.e., by increasing the
        .               /// signficand). This routine must work for `Category::Zero` of both signs, and
        .               /// `Category::Normal` numbers.
        .               fn round_away_from_zero(&self, round: Round, loss: Loss, bit: usize) -> bool {
        .                   // NaNs and infinities should not have lost fractions.
    3,165 ( 0.00%)          assert!(self.is_finite_non_zero() || self.is_zero());
        .           
        .                   // Current callers never pass this so we don't handle it.
        .                   assert_ne!(loss, Loss::ExactlyZero);
        .           
    5,275 ( 0.00%)          match round {
        .                       Round::NearestTiesToAway => loss == Loss::ExactlyHalf || loss == Loss::MoreThanHalf,
        .                       Round::NearestTiesToEven => {
    4,749 ( 0.00%)                  if loss == Loss::MoreThanHalf {
        .                               return true;
        .                           }
        .           
        .                           // Our zeros don't have a significand to test.
        .                           if loss == Loss::ExactlyHalf && self.category != Category::Zero {
        .                               return sig::get_bit(&self.sig, bit);
        .                           }
        .           
-- line 1571 ----------------------------------------
-- line 1572 ----------------------------------------
        .                           false
        .                       }
        .                       Round::TowardZero => false,
        .                       Round::TowardPositive => !self.sign,
        .                       Round::TowardNegative => self.sign,
        .                   }
        .               }
        .           
   13,188 ( 0.00%)      fn normalize(mut self, round: Round, mut loss: Loss) -> StatusAnd<Self> {
    3,297 ( 0.00%)          if !self.is_finite_non_zero() {
        .                       return Status::OK.and(self);
        .                   }
        .           
        .                   // Before rounding normalize the exponent of Category::Normal numbers.
    3,297 ( 0.00%)          let mut omsb = sig::omsb(&self.sig);
        .           
    2,198 ( 0.00%)          if omsb > 0 {
        .                       // OMSB is numbered from 1. We want to place it in the integer
        .                       // bit numbered PRECISION if possible, with a compensating change in
        .                       // the exponent.
    5,495 ( 0.00%)              let mut final_exp = self.exp.saturating_add(omsb as ExpInt - S::PRECISION as ExpInt);
        .           
        .                       // If the resulting exponent is too high, overflow according to
        .                       // the rounding mode.
    3,297 ( 0.00%)              if final_exp > S::MAX_EXP {
        .                           let round = if self.sign { -round } else { round };
        .                           return Self::overflow_result(round).map(|r| r.copy_sign(self));
        .                       }
        .           
        .                       // Subnormal numbers have exponent MIN_EXP, and their MSB
        .                       // is forced based on that.
    3,297 ( 0.00%)              if final_exp < S::MIN_EXP {
        .                           final_exp = S::MIN_EXP;
        .                       }
        .           
        .                       // Shifting left is easy as we don't lose precision.
    2,198 ( 0.00%)              if final_exp < self.exp {
        .                           assert_eq!(loss, Loss::ExactlyZero);
        .           
        .                           let exp_change = (self.exp - final_exp) as usize;
        .                           sig::shift_left(&mut self.sig, &mut self.exp, exp_change);
        .           
        .                           return Status::OK.and(self);
        .                       }
        .           
        .                       // Shift right and capture any new lost fraction.
    1,099 ( 0.00%)              if final_exp > self.exp {
        3 ( 0.00%)                  let exp_change = (final_exp - self.exp) as usize;
       10 ( 0.00%)                  loss = sig::shift_right(&mut self.sig, &mut self.exp, exp_change).combine(loss);
        .           
        .                           // Keep OMSB up-to-date.
        .                           omsb = omsb.saturating_sub(exp_change);
        .                       }
        .                   }
        .           
        .                   // Now round the number according to round given the lost
        .                   // fraction.
        .           
        .                   // As specified in IEEE 754, since we do not trap we do not report
        .                   // underflow for exact results.
    1,099 ( 0.00%)          if loss == Loss::ExactlyZero {
        .                       // Canonicalize zeros.
       88 ( 0.00%)              if omsb == 0 {
        .                           self.category = Category::Zero;
        .                       }
        .           
        .                       return Status::OK.and(self);
        .                   }
        .           
        .                   // Increment the significand if we're rounding away from zero.
        .                   if self.round_away_from_zero(round, loss, 0) {
    1,052 ( 0.00%)              if omsb == 0 {
        .                           self.exp = S::MIN_EXP;
        .                       }
        .           
        .                       // We should never overflow.
    3,682 ( 0.00%)              assert_eq!(sig::increment(&mut self.sig), 0);
    2,104 ( 0.00%)              omsb = sig::omsb(&self.sig);
        .           
        .                       // Did the significand increment overflow?
    1,052 ( 0.00%)              if omsb == S::PRECISION + 1 {
        .                           // Renormalize by incrementing the exponent and shifting our
        .                           // significand right one. However if we already have the
        .                           // maximum exponent we overflow to infinity.
        3 ( 0.00%)                  if self.exp == S::MAX_EXP {
        .                               self.category = Category::Infinity;
        .           
        .                               return (Status::OVERFLOW | Status::INEXACT).and(self);
        .                           }
        .           
        4 ( 0.00%)                  let _: Loss = sig::shift_right(&mut self.sig, &mut self.exp, 1);
        .           
        4 ( 0.00%)                  return Status::INEXACT.and(self);
        .                       }
        .                   }
        .           
        .                   // The normal case - we were and are not denormal, and any
        .                   // significand increment above didn't overflow.
    2,108 ( 0.00%)          if omsb == S::PRECISION {
    4,216 ( 0.00%)              return Status::INEXACT.and(self);
        .                   }
        .           
        .                   // We have a non-zero denormal.
        .                   assert!(omsb < S::PRECISION);
        .           
        .                   // Canonicalize zeros.
        .                   if omsb == 0 {
        .                       self.category = Category::Zero;
        .                   }
        .           
        .                   // The Category::Zero case is a denormal that underflowed to zero.
        .                   (Status::UNDERFLOW | Status::INEXACT).and(self)
    8,792 ( 0.00%)      }
        .           
        .               fn from_hexadecimal_string(s: &str, round: Round) -> Result<StatusAnd<Self>, ParseError> {
        .                   let mut r = IeeeFloat {
        .                       sig: [0],
        .                       exp: 0,
        .                       category: Category::Normal,
        .                       sign: false,
        .                       marker: PhantomData,
-- line 1692 ----------------------------------------
-- line 1829 ----------------------------------------
        .                   let mut any_digits = false;
        .                   let mut dec_exp = 0i32;
        .           
        .                   // Without leading or trailing zeros, irrespective of the dot.
        .                   let mut first_sig_digit = None;
        .                   let mut last_sig_digit = 0;
        .                   let mut dot = s.len();
        .           
   81,130 ( 0.00%)          for (p, c) in s.char_indices() {
        .                       if c == '.' {
    3,243 ( 0.00%)                  if dot != s.len() {
        .                               return Err(ParseError("String contains multiple dots"));
        .                           }
        .                           dot = p;
   19,742 ( 0.00%)              } else if let Some(dec_value) = c.to_digit(10) {
        .                           any_digits = true;
        .           
   39,480 ( 0.00%)                  if dec_value != 0 {
   68,176 ( 0.00%)                      if first_sig_digit.is_none() {
        .                                   first_sig_digit = Some(p);
        .                               }
        .                               last_sig_digit = p;
        .                           }
        6 ( 0.00%)              } else if c == 'e' || c == 'E' {
        4 ( 0.00%)                  if !any_digits {
        .                               return Err(ParseError("Significand has no digits"));
        .                           }
        .           
        4 ( 0.00%)                  if dot == s.len() {
        .                               dot = p;
        .                           }
        .           
        4 ( 0.00%)                  let mut chars = s[p + 1..].chars().peekable();
        .           
        .                           // Adjust for the given exponent.
        .                           let exp_minus = chars.peek() == Some(&'-');
        .                           if exp_minus || chars.peek() == Some(&'+') {
        .                               chars.next();
        .                           }
        .           
        .                           any_digits = false;
        .                           for c in chars {
        2 ( 0.00%)                      if let Some(value) = c.to_digit(10) {
        .                                   any_digits = true;
        .                                   dec_exp = dec_exp.saturating_mul(10).saturating_add(value as i32);
        .                               } else {
        .                                   return Err(ParseError("Invalid character in exponent"));
        .                               }
        .                           }
        4 ( 0.00%)                  if !any_digits {
        .                               return Err(ParseError("Exponent has no digits"));
        .                           }
        .           
        4 ( 0.00%)                  if exp_minus {
        8 ( 0.00%)                      dec_exp = -dec_exp;
        .                           }
        .           
        .                           break;
        .                       } else {
        .                           return Err(ParseError("Invalid character in significand"));
        .                       }
        .                   }
    2,162 ( 0.00%)          if !any_digits {
        .                       return Err(ParseError("Significand has no digits"));
        .                   }
        .           
        .                   // Test if we have a zero number allowing for non-zero exponents.
    3,243 ( 0.00%)          let first_sig_digit = match first_sig_digit {
        .                       Some(p) => p,
        .                       None => return Ok(Status::OK.and(Self::ZERO)),
        .                   };
        .           
        .                   // Adjust the exponents for any decimal point.
    4,304 ( 0.00%)          if dot > last_sig_digit {
       58 ( 0.00%)              dec_exp = dec_exp.saturating_add((dot - last_sig_digit - 1) as i32);
        .                   } else {
    2,094 ( 0.00%)              dec_exp = dec_exp.saturating_sub((last_sig_digit - dot) as i32);
        .                   }
    7,532 ( 0.00%)          let significand_digits = last_sig_digit - first_sig_digit + 1
    5,380 ( 0.00%)              - (dot > first_sig_digit && dot < last_sig_digit) as usize;
    3,228 ( 0.00%)          let normalized_exp = dec_exp.saturating_add(significand_digits as i32 - 1);
        .           
        .                   // Handle the cases where exponents are obviously too large or too
        .                   // small. Writing L for log 10 / log 2, a number d.ddddd*10^dec_exp
        .                   // definitely overflows if
        .                   //
        .                   //       (dec_exp - 1) * L >= MAX_EXP
        .                   //
        .                   // and definitely underflows to zero where
-- line 1917 ----------------------------------------
-- line 1919 ----------------------------------------
        .                   //       (dec_exp + 1) * L <= MIN_EXP - PRECISION
        .                   //
        .                   // With integer arithmetic the tightest bounds for L are
        .                   //
        .                   //       93/28 < L < 196/59            [ numerator <= 256 ]
        .                   //       42039/12655 < L < 28738/8651  [ numerator <= 65536 ]
        .           
        .                   // Check for MAX_EXP.
    2,152 ( 0.00%)          if normalized_exp.saturating_sub(1).saturating_mul(42039) >= 12655 * S::MAX_EXP as i32 {
        .                       // Overflow and round.
        .                       return Ok(Self::overflow_result(round));
        .                   }
        .           
        .                   // Check for MIN_EXP.
    2,152 ( 0.00%)          if normalized_exp.saturating_add(1).saturating_mul(28738)
        .                       <= 8651 * (S::MIN_EXP as i32 - S::PRECISION as i32)
        .                   {
        .                       // Underflow to zero and round.
        .                       let r =
        .                           if round == Round::TowardPositive { IeeeFloat::SMALLEST } else { IeeeFloat::ZERO };
        .                       return Ok((Status::UNDERFLOW | Status::INEXACT).and(r));
        .                   }
        .           
        .                   // A tight upper bound on number of bits required to hold an
        .                   // N-digit decimal integer is N * 196 / 59. Allocate enough space
        .                   // to hold the full significand, and an extra limb required by
        .                   // tcMultiplyPart.
    6,456 ( 0.00%)          let max_limbs = limbs_for_bits(1 + 196 * significand_digits / 59);
        .                   let mut dec_sig: SmallVec<[Limb; 1]> = SmallVec::with_capacity(max_limbs);
        .           
        .                   // Convert to binary efficiently - we do almost all multiplication
        .                   // in a Limb. When this would overflow do we do a single
        .                   // bignum multiplication, and then revert again to multiplication
        .                   // in a Limb.
        .                   let mut chars = s[first_sig_digit..=last_sig_digit].chars();
        .                   loop {
        .                       let mut val = 0;
        .                       let mut multiplier = 1;
        .           
        .                       loop {
   75,806 ( 0.00%)                  let dec_value = match chars.next() {
        .                               Some('.') => continue,
        .                               Some(c) => c.to_digit(10).unwrap(),
        .                               None => break,
        .                           };
        .           
   56,247 ( 0.00%)                  multiplier *= 10;
  281,235 ( 0.01%)                  val = val * 10 + dec_value as Limb;
        .           
        .                           // The maximum number that can be multiplied by ten with any
        .                           // digit added without overflowing a Limb.
  131,243 ( 0.01%)                  if multiplier > (!0 - 9) / 10 {
        .                               break;
        .                           }
        .                       }
        .           
        .                       // If we've consumed no digits, we're done.
    6,456 ( 0.00%)              if multiplier == 1 {
        .                           break;
        .                       }
        .           
        .                       // Multiply out the current limb.
        .                       let mut carry = val;
        .                       for x in &mut dec_sig {
        .                           let [low, mut high] = sig::widening_mul(*x, multiplier);
        .           
-- line 1984 ----------------------------------------
-- line 1986 ----------------------------------------
        .                           let (low, overflow) = low.overflowing_add(carry);
        .                           high += overflow as Limb;
        .           
        .                           *x = low;
        .                           carry = high;
        .                       }
        .           
        .                       // If we had carry, we need another limb (likely but not guaranteed).
   11,836 ( 0.00%)              if carry > 0 {
        .                           dec_sig.push(carry);
        .                       }
        .                   }
        .           
        .                   // Calculate pow(5, abs(dec_exp)) into `pow5_full`.
        .                   // The *_calc Vec's are reused scratch space, as an optimization.
   23,672 ( 0.00%)          let (pow5_full, mut pow5_calc, mut sig_calc, mut sig_scratch_calc) = {
    1,076 ( 0.00%)              let mut power = dec_exp.abs() as usize;
        .           
        .                       const FIRST_EIGHT_POWERS: [Limb; 8] = [1, 5, 25, 125, 625, 3125, 15625, 78125];
        .           
    1,076 ( 0.00%)              let mut p5_scratch = smallvec![];
    3,228 ( 0.00%)              let mut p5: SmallVec<[Limb; 1]> = smallvec![FIRST_EIGHT_POWERS[4]];
        .           
    1,076 ( 0.00%)              let mut r_scratch = smallvec![];
    7,532 ( 0.00%)              let mut r: SmallVec<[Limb; 1]> = smallvec![FIRST_EIGHT_POWERS[power & 7]];
    5,160 ( 0.00%)              power >>= 3;
        .           
    6,270 ( 0.00%)              while power > 0 {
        .                           // Calculate pow(5,pow(2,n+3)).
   10,290 ( 0.00%)                  p5_scratch.resize(p5.len() * 2, 0);
   26,767 ( 0.00%)                  let _: Loss = sig::mul(&mut p5_scratch, &mut 0, &p5, &p5, p5.len() * 2 * LIMB_BITS);
    4,118 ( 0.00%)                  while p5_scratch.last() == Some(&0) {
        .                               p5_scratch.pop();
        .                           }
        .                           mem::swap(&mut p5, &mut p5_scratch);
        .           
    4,118 ( 0.00%)                  if power & 1 != 0 {
    6,192 ( 0.00%)                      r_scratch.resize(r.len() + p5.len(), 0);
        .                               let _: Loss =
   12,384 ( 0.00%)                          sig::mul(&mut r_scratch, &mut 0, &r, &p5, (r.len() + p5.len()) * LIMB_BITS);
    2,064 ( 0.00%)                      while r_scratch.last() == Some(&0) {
        .                                   r_scratch.pop();
        .                               }
        .                               mem::swap(&mut r, &mut r_scratch);
        .                           }
        .           
        .                           power >>= 1;
        .                       }
        .           
   19,368 ( 0.00%)              (r, r_scratch, p5, p5_scratch)
        .                   };
        .           
        .                   // Attempt dec_sig * 10^dec_exp with increasing precision.
        .                   let mut attempt = 0;
        .                   loop {
    5,380 ( 0.00%)              let calc_precision = (LIMB_BITS << attempt) - 1;
        .                       attempt += 1;
        .           
   23,672 ( 0.00%)              let calc_normal_from_limbs = |sig: &mut SmallVec<[Limb; 1]>,
        .                                                     limbs: &[Limb]|
        .                        -> StatusAnd<ExpInt> {
   15,064 ( 0.00%)                  sig.resize(limbs_for_bits(calc_precision), 0);
   17,216 ( 0.00%)                  let (mut loss, mut exp) = sig::from_limbs(sig, limbs, calc_precision);
        .           
        .                           // Before rounding normalize the exponent of Category::Normal numbers.
    4,304 ( 0.00%)                  let mut omsb = sig::omsb(sig);
        .           
    4,304 ( 0.00%)                  assert_ne!(omsb, 0);
        .           
        .                           // OMSB is numbered from 1. We want to place it in the integer
        .                           // bit numbered PRECISION if possible, with a compensating change in
        .                           // the exponent.
    6,456 ( 0.00%)                  let final_exp = exp.saturating_add(omsb as ExpInt - calc_precision as ExpInt);
        .           
        .                           // Shifting left is easy as we don't lose precision.
    4,304 ( 0.00%)                  if final_exp < exp {
    2,152 ( 0.00%)                      assert_eq!(loss, Loss::ExactlyZero);
        .           
    6,456 ( 0.00%)                      let exp_change = (exp - final_exp) as usize;
    8,608 ( 0.00%)                      sig::shift_left(sig, &mut exp, exp_change);
        .           
        .                               return Status::OK.and(exp);
        .                           }
        .           
        .                           // Shift right and capture any new lost fraction.
        .                           if final_exp > exp {
        .                               let exp_change = (final_exp - exp) as usize;
        .                               loss = sig::shift_right(sig, &mut exp, exp_change).combine(loss);
-- line 2073 ----------------------------------------
-- line 2099 ----------------------------------------
        .           
        .                                   return Status::INEXACT.and(exp);
        .                               }
        .                           }
        .           
        .                           // The normal case - we were and are not denormal, and any
        .                           // significand increment above didn't overflow.
        .                           Status::INEXACT.and(exp)
   19,368 ( 0.00%)              };
        .           
        .                       let status;
    1,076 ( 0.00%)              let mut exp = unpack!(status=,
    3,228 ( 0.00%)                  calc_normal_from_limbs(&mut sig_calc, &dec_sig));
        .                       let pow5_status;
        .                       let pow5_exp = unpack!(pow5_status=,
    3,228 ( 0.00%)                  calc_normal_from_limbs(&mut pow5_calc, &pow5_full));
        .           
        .                       // Add dec_exp, as 10^n = 5^n * 2^n.
    3,228 ( 0.00%)              exp += dec_exp as ExpInt;
        .           
        .                       let mut used_bits = S::PRECISION;
    4,304 ( 0.00%)              let mut truncated_bits = calc_precision - used_bits;
        .           
        .                       let half_ulp_err1 = (status != Status::OK) as Limb;
        .                       let (calc_loss, half_ulp_err2);
    1,076 ( 0.00%)              if dec_exp >= 0 {
       87 ( 0.00%)                  exp += pow5_exp;
        .           
      174 ( 0.00%)                  sig_scratch_calc.resize(sig_calc.len() + pow5_calc.len(), 0);
      145 ( 0.00%)                  calc_loss = sig::mul(
        .                               &mut sig_scratch_calc,
        .                               &mut exp,
        .                               &sig_calc,
        .                               &pow5_calc,
        .                               calc_precision,
        .                           );
        .                           mem::swap(&mut sig_calc, &mut sig_scratch_calc);
        .           
        .                           half_ulp_err2 = (pow5_status != Status::OK) as Limb;
        .                       } else {
    3,141 ( 0.00%)                  exp -= pow5_exp;
        .           
    4,188 ( 0.00%)                  sig_scratch_calc.resize(sig_calc.len(), 0);
    5,235 ( 0.00%)                  calc_loss = sig::div(
        .                               &mut sig_scratch_calc,
        .                               &mut exp,
        .                               &mut sig_calc,
        .                               &mut pow5_calc,
        .                               calc_precision,
        .                           );
        .                           mem::swap(&mut sig_calc, &mut sig_scratch_calc);
        .           
        .                           // Denormal numbers have less precision.
    3,141 ( 0.00%)                  if exp < S::MIN_EXP {
        .                               truncated_bits += (S::MIN_EXP - exp) as usize;
        .                               used_bits = calc_precision.saturating_sub(truncated_bits);
        .                           }
        .                           // Extra half-ulp lost in reciprocal of exponent.
        .                           half_ulp_err2 =
    6,282 ( 0.00%)                      2 * (pow5_status != Status::OK || calc_loss != Loss::ExactlyZero) as Limb;
        .                       }
        .           
        .                       // Both sig::mul and sig::div return the
        .                       // result with the integer bit set.
    6,456 ( 0.00%)              assert!(sig::get_bit(&sig_calc, calc_precision - 1));
        .           
        .                       // The error from the true value, in half-ulps, on multiplying two
        .                       // floating point numbers, which differ from the value they
        .                       // approximate by at most half_ulp_err1 and half_ulp_err2 half-ulps, is strictly less
        .                       // than the returned value.
        .                       //
        .                       // See "How to Read Floating Point Numbers Accurately" by William D Clinger.
        .                       assert!(half_ulp_err1 < 2 || half_ulp_err2 < 2 || (half_ulp_err1 + half_ulp_err2 < 8));
        .           
        .                       let inexact = (calc_loss != Loss::ExactlyZero) as Limb;
   12,912 ( 0.00%)              let half_ulp_err = if half_ulp_err1 + half_ulp_err2 == 0 {
        .                           inexact * 2 // <= inexact half-ulps.
        .                       } else {
        .                           inexact + 2 * (half_ulp_err1 + half_ulp_err2)
        .                       };
        .           
        .                       let ulps_from_boundary = {
    5,380 ( 0.00%)                  let bits = calc_precision - used_bits - 1;
        .           
    2,152 ( 0.00%)                  let i = bits / LIMB_BITS;
   17,216 ( 0.00%)                  let limb = sig_calc[i] & (!0 >> (LIMB_BITS - 1 - bits % LIMB_BITS));
    2,152 ( 0.00%)                  let boundary = match round {
    9,684 ( 0.00%)                      Round::NearestTiesToEven | Round::NearestTiesToAway => 1 << (bits % LIMB_BITS),
        .                               _ => 0,
        .                           };
    2,152 ( 0.00%)                  if i == 0 {
        .                               let delta = limb.wrapping_sub(boundary);
        .                               cmp::min(delta, delta.wrapping_neg())
        .                           } else if limb == boundary {
        .                               if !sig::is_all_zeros(&sig_calc[1..i]) {
        .                                   !0 // A lot.
        .                               } else {
        .                                   sig_calc[0]
        .                               }
-- line 2197 ----------------------------------------
-- line 2202 ----------------------------------------
        .                                   sig_calc[0].wrapping_neg()
        .                               }
        .                           } else {
        .                               !0 // A lot.
        .                           }
        .                       };
        .           
        .                       // Are we guaranteed to round correctly if we truncate?
    3,228 ( 0.00%)              if ulps_from_boundary.saturating_mul(2) >= half_ulp_err {
    4,304 ( 0.00%)                  let mut r = IeeeFloat {
        .                               sig: [0],
    1,076 ( 0.00%)                      exp,
        .                               category: Category::Normal,
        .                               sign: false,
        .                               marker: PhantomData,
        .                           };
    7,532 ( 0.00%)                  sig::extract(&mut r.sig, &sig_calc, used_bits, calc_precision - used_bits);
        .                           // If we extracted less bits above we must adjust our exponent
        .                           // to compensate for the implicit right shift.
    5,380 ( 0.00%)                  r.exp += (S::PRECISION - used_bits) as ExpInt;
    2,152 ( 0.00%)                  let loss = Loss::through_truncation(&sig_calc, truncated_bits);
   17,216 ( 0.00%)                  return Ok(r.normalize(round, loss));
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl Loss {
        .               /// Combine the effect of two lost fractions.
        1 ( 0.00%)      fn combine(self, less_significant: Loss) -> Loss {
        .                   let mut more_significant = self;
        1 ( 0.00%)          if less_significant != Loss::ExactlyZero {
        .                       if more_significant == Loss::ExactlyZero {
        .                           more_significant = Loss::LessThanHalf;
        .                       } else if more_significant == Loss::ExactlyHalf {
        .                           more_significant = Loss::MoreThanHalf;
        .                       }
        .                   }
        .           
        .                   more_significant
        1 ( 0.00%)      }
        .           
        .               /// Returns the fraction lost were a bignum truncated losing the least
        .               /// significant `bits` bits.
        .               fn through_truncation(limbs: &[Limb], bits: usize) -> Loss {
    8,732 ( 0.00%)          if bits == 0 {
        .                       return Loss::ExactlyZero;
        .                   }
        .           
    2,214 ( 0.00%)          let half_bit = bits - 1;
    9,994 ( 0.00%)          let half_limb = half_bit / LIMB_BITS;
    4,428 ( 0.00%)          let (half_limb, rest) = if half_limb < limbs.len() {
   11,070 ( 0.00%)              (limbs[half_limb], &limbs[..half_limb])
        .                   } else {
        .                       (0, limbs)
        .                   };
   13,284 ( 0.00%)          let half = 1 << (half_bit % LIMB_BITS);
    6,642 ( 0.00%)          let has_half = half_limb & half != 0;
   21,064 ( 0.00%)          let has_rest = half_limb & (half - 1) != 0 || !sig::is_all_zeros(rest);
        .           
    5,664 ( 0.00%)          match (has_half, has_rest) {
        .                       (false, false) => Loss::ExactlyZero,
        .                       (false, true) => Loss::LessThanHalf,
        .                       (true, false) => Loss::ExactlyHalf,
        .                       (true, true) => Loss::MoreThanHalf,
        .                   }
    1,076 ( 0.00%)      }
        .           }
        .           
        .           /// Implementation details of IeeeFloat significands, such as big integer arithmetic.
        .           /// As a rule of thumb, no functions in this module should dynamically allocate.
        .           mod sig {
        .               use super::{limbs_for_bits, ExpInt, Limb, Loss, LIMB_BITS};
        .               use core::cmp::Ordering;
        .               use core::iter;
        .               use core::mem;
        .           
        .               pub(super) fn is_all_zeros(limbs: &[Limb]) -> bool {
      602 ( 0.00%)          limbs.iter().all(|&l| l == 0)
        .               }
        .           
        .               /// One, not zero, based LSB. That is, returns 0 for a zeroed significand.
        .               pub(super) fn olsb(limbs: &[Limb]) -> usize {
        .                   limbs
        .                       .iter()
        .                       .enumerate()
    4,268 ( 0.00%)              .find(|(_, &limb)| limb != 0)
    5,335 ( 0.00%)              .map_or(0, |(i, limb)| i * LIMB_BITS + limb.trailing_zeros() as usize + 1)
        .               }
        .           
        .               /// One, not zero, based MSB. That is, returns 0 for a zeroed significand.
    3,777 ( 0.00%)      pub(super) fn omsb(limbs: &[Limb]) -> usize {
        .                   limbs
        .                       .iter()
        .                       .enumerate()
   57,096 ( 0.00%)              .rfind(|(_, &limb)| limb != 0)
   62,893 ( 0.00%)              .map_or(0, |(i, limb)| (i + 1) * LIMB_BITS - limb.leading_zeros() as usize)
    7,554 ( 0.00%)      }
        .           
        .               /// Comparison (unsigned) of two significands.
        .               pub(super) fn cmp(a: &[Limb], b: &[Limb]) -> Ordering {
    4,244 ( 0.00%)          assert_eq!(a.len(), b.len());
   15,742 ( 0.00%)          for (a, b) in a.iter().zip(b).rev() {
1,071,722 ( 0.04%)              match a.cmp(b) {
        .                           Ordering::Equal => {}
        .                           o => return o,
        .                       }
        .                   }
        .           
        .                   Ordering::Equal
        .               }
        .           
        .               /// Extracts the given bit.
    6,522 ( 0.00%)      pub(super) fn get_bit(limbs: &[Limb], bit: usize) -> bool {
   48,915 ( 0.00%)          limbs[bit / LIMB_BITS] & (1 << (bit % LIMB_BITS)) != 0
    6,522 ( 0.00%)      }
        .           
        .               /// Sets the given bit.
       88 ( 0.00%)      pub(super) fn set_bit(limbs: &mut [Limb], bit: usize) {
1,191,200 ( 0.05%)          limbs[bit / LIMB_BITS] |= 1 << (bit % LIMB_BITS);
       88 ( 0.00%)      }
        .           
        .               /// Clear the given bit.
        .               pub(super) fn clear_bit(limbs: &mut [Limb], bit: usize) {
        .                   limbs[bit / LIMB_BITS] &= !(1 << (bit % LIMB_BITS));
        .               }
        .           
        .               /// Shifts `dst` left `bits` bits, subtract `bits` from its exponent.
  953,239 ( 0.04%)      pub(super) fn shift_left(dst: &mut [Limb], exp: &mut ExpInt, bits: usize) {
  272,354 ( 0.01%)          if bits > 0 {
        .                       // Our exponent should not underflow.
  268,086 ( 0.01%)              *exp = exp.checked_sub(bits as ExpInt).unwrap();
        .           
        .                       // Jump is the inter-limb jump; shift is the intra-limb shift.
        .                       let jump = bits / LIMB_BITS;
        .                       let shift = bits % LIMB_BITS;
        .           
        .                       for i in (0..dst.len()).rev() {
        .                           let mut limb;
        .           
2,010,645 ( 0.08%)                  if i < jump {
        .                               limb = 0;
        .                           } else {
        .                               // dst[i] comes from the two limbs src[i - jump] and, if we have
        .                               // an intra-limb shift, src[i - jump - 1].
  670,215 ( 0.03%)                      limb = dst[i - jump];
  134,043 ( 0.01%)                      if shift > 0 {
1,072,344 ( 0.04%)                          limb <<= shift;
  268,086 ( 0.01%)                          if i > jump {
        .                                       limb |= dst[i - jump - 1] >> (LIMB_BITS - shift);
        .                                   }
        .                               }
        .                           }
        .           
  268,086 ( 0.01%)                  dst[i] = limb;
        .                       }
        .                   }
1,089,416 ( 0.04%)      }
        .           
        .               /// Shifts `dst` right `bits` bits noting lost fraction.
   16,450 ( 0.00%)      pub(super) fn shift_right(dst: &mut [Limb], exp: &mut ExpInt, bits: usize) -> Loss {
        .                   let loss = Loss::through_truncation(dst, bits);
        .           
        .                   if bits > 0 {
        .                       // Our exponent should not overflow.
    1,138 ( 0.00%)              *exp = exp.checked_add(bits as ExpInt).unwrap();
        .           
        .                       // Jump is the inter-limb jump; shift is the intra-limb shift.
        .                       let jump = bits / LIMB_BITS;
        .                       let shift = bits % LIMB_BITS;
        .           
        .                       // Perform the shift. This leaves the most significant `bits` bits
        .                       // of the result at zero.
        .                       for i in 0..dst.len() {
        .                           let mut limb;
        .           
    5,835 ( 0.00%)                  if i + jump >= dst.len() {
        .                               limb = 0;
        .                           } else {
    4,668 ( 0.00%)                      limb = dst[i + jump];
    1,138 ( 0.00%)                      if shift > 0 {
    9,336 ( 0.00%)                          limb >>= shift;
    3,501 ( 0.00%)                          if i + jump + 1 < dst.len() {
      406 ( 0.00%)                              limb |= dst[i + jump + 1] << (LIMB_BITS - shift);
        .                                   }
        .                               }
        .                           }
        .           
    2,334 ( 0.00%)                  dst[i] = limb;
        .                       }
        .                   }
        .           
        .                   loss
   19,740 ( 0.00%)      }
        .           
        .               /// Copies the bit vector of width `src_bits` from `src`, starting at bit SRC_LSB,
        .               /// to `dst`, such that the bit SRC_LSB becomes the least significant bit of `dst`.
        .               /// All high bits above `src_bits` in `dst` are zero-filled.
   22,596 ( 0.00%)      pub(super) fn extract(dst: &mut [Limb], src: &[Limb], src_bits: usize, src_lsb: usize) {
    6,456 ( 0.00%)          if src_bits == 0 {
        .                       return;
        .                   }
        .           
        .                   let dst_limbs = limbs_for_bits(src_bits);
    6,456 ( 0.00%)          assert!(dst_limbs <= dst.len());
        .           
    6,456 ( 0.00%)          let src = &src[src_lsb / LIMB_BITS..];
        .                   dst[..dst_limbs].copy_from_slice(&src[..dst_limbs]);
        .           
    3,228 ( 0.00%)          let shift = src_lsb % LIMB_BITS;
   22,596 ( 0.00%)          let _: Loss = shift_right(&mut dst[..dst_limbs], &mut 0, shift);
        .           
        .                   // We now have (dst_limbs * LIMB_BITS - shift) bits from `src`
        .                   // in `dst`.  If this is less that src_bits, append the rest, else
        .                   // clear the high bits.
    6,456 ( 0.00%)          let n = dst_limbs * LIMB_BITS - shift;
    6,456 ( 0.00%)          if n < src_bits {
        .                       let mask = (1 << (src_bits - n)) - 1;
        .                       dst[dst_limbs - 1] |= (src[dst_limbs] & mask) << (n % LIMB_BITS);
   22,596 ( 0.00%)          } else if n > src_bits && src_bits % LIMB_BITS > 0 {
   48,420 ( 0.00%)              dst[dst_limbs - 1] &= (1 << (src_bits % LIMB_BITS)) - 1;
        .                   }
        .           
        .                   // Clear high limbs.
        .                   for x in &mut dst[dst_limbs..] {
        .                       *x = 0;
        .                   }
   25,824 ( 0.00%)      }
        .           
        .               /// We want the most significant PRECISION bits of `src`. There may not
        .               /// be that many; extract what we can.
   21,520 ( 0.00%)      pub(super) fn from_limbs(dst: &mut [Limb], src: &[Limb], precision: usize) -> (Loss, ExpInt) {
        .                   let omsb = omsb(src);
        .           
    4,304 ( 0.00%)          if precision <= omsb {
        .                       extract(dst, src, precision, omsb - precision);
        .                       (Loss::through_truncation(src, omsb - precision), omsb as ExpInt - 1)
        .                   } else {
   10,760 ( 0.00%)              extract(dst, src, omsb, 0);
    6,456 ( 0.00%)              (Loss::ExactlyZero, precision as ExpInt - 1)
        .                   }
   21,520 ( 0.00%)      }
        .           
        .               /// For every consecutive chunk of `bits` bits from `limbs`,
        .               /// going from most significant to the least significant bits,
        .               /// call `f` to transform those bits and store the result back.
        .               pub(super) fn each_chunk<F: FnMut(Limb) -> Limb>(limbs: &mut [Limb], bits: usize, mut f: F) {
        .                   assert_eq!(LIMB_BITS % bits, 0);
        .                   for limb in limbs.iter_mut().rev() {
        .                       let mut r = 0;
        .                       for i in (0..LIMB_BITS / bits).rev() {
      590 ( 0.00%)                  r |= f((*limb >> (i * bits)) & ((1 << bits) - 1)) << (i * bits);
        .                       }
       58 ( 0.00%)              *limb = r;
        .                   }
        .               }
        .           
        .               /// Increment in-place, return the carry flag.
        .               pub(super) fn increment(dst: &mut [Limb]) -> Limb {
    2,104 ( 0.00%)          for x in dst {
    1,052 ( 0.00%)              *x = x.wrapping_add(1);
    1,052 ( 0.00%)              if *x != 0 {
        .                           return 0;
        .                       }
        .                   }
        .           
        .                   1
      526 ( 0.00%)      }
        .           
        .               /// Decrement in-place, return the borrow flag.
        .               pub(super) fn decrement(dst: &mut [Limb]) -> Limb {
        .                   for x in dst {
        .                       *x = x.wrapping_sub(1);
        .                       if *x != !0 {
        .                           return 0;
        .                       }
-- line 2477 ----------------------------------------
-- line 2494 ----------------------------------------
        .                   c
        .               }
        .           
        .               /// `a -= b + c` where `c` is zero or one. Returns the borrow flag.
        .               pub(super) fn sub(a: &mut [Limb], b: &[Limb], mut c: Limb) -> Limb {
        .                   assert!(c <= 1);
        .           
        .                   for (a, &b) in iter::zip(a, b) {
        4 ( 0.00%)              let (r, overflow) = a.overflowing_sub(b);
        .                       let (r, overflow2) = r.overflowing_sub(c);
  198,442 ( 0.01%)              *a = r;
        6 ( 0.00%)              c = (overflow | overflow2) as Limb;
        .                   }
        .           
        .                   c
        .               }
        .           
        .               /// `a += b` or `a -= b`. Does not preserve `b`.
       14 ( 0.00%)      pub(super) fn add_or_sub(
        .                   a_sig: &mut [Limb],
        .                   a_exp: &mut ExpInt,
        .                   a_sign: &mut bool,
        .                   b_sig: &mut [Limb],
        .                   b_exp: ExpInt,
        .                   b_sign: bool,
        .               ) -> Loss {
        .                   // Are we bigger exponent-wise than the RHS?
        6 ( 0.00%)          let bits = *a_exp - b_exp;
        .           
        .                   // Determine if the operation on the absolute values is effectively
        .                   // an addition or subtraction.
        .                   // Subtraction is more subtle than one might naively expect.
       10 ( 0.00%)          if *a_sign ^ b_sign {
        .                       let (reverse, loss);
        .           
        4 ( 0.00%)              if bits == 0 {
        .                           reverse = cmp(a_sig, b_sig) == Ordering::Less;
        .                           loss = Loss::ExactlyZero;
        2 ( 0.00%)              } else if bits > 0 {
       14 ( 0.00%)                  loss = shift_right(b_sig, &mut 0, (bits - 1) as usize);
       12 ( 0.00%)                  shift_left(a_sig, a_exp, 1);
        .                           reverse = false;
        .                       } else {
        .                           loss = shift_right(a_sig, a_exp, (-bits - 1) as usize);
        .                           shift_left(b_sig, &mut 0, 1);
        .                           reverse = true;
        .                       }
        .           
        .                       let borrow = (loss != Loss::ExactlyZero) as Limb;
        .                       if reverse {
        .                           // The code above is intended to ensure that no borrow is necessary.
        .                           assert_eq!(sub(b_sig, a_sig, borrow), 0);
        .                           a_sig.copy_from_slice(b_sig);
        .                           *a_sign = !*a_sign;
        .                       } else {
        .                           // The code above is intended to ensure that no borrow is necessary.
        8 ( 0.00%)                  assert_eq!(sub(a_sig, b_sig, borrow), 0);
        .                       }
        .           
        .                       // Invert the lost fraction - it was on the RHS and subtracted.
        8 ( 0.00%)              match loss {
        .                           Loss::LessThanHalf => Loss::MoreThanHalf,
        .                           Loss::MoreThanHalf => Loss::LessThanHalf,
        .                           _ => loss,
        .                       }
        .                   } else {
        .                       let loss = if bits > 0 {
        .                           shift_right(b_sig, &mut 0, bits as usize)
        .                       } else {
        .                           shift_right(a_sig, a_exp, -bits as usize)
        .                       };
        .                       // We have a guard bit; generating a carry cannot happen.
        .                       assert_eq!(add(a_sig, b_sig, 0), 0);
        .                       loss
        .                   }
       18 ( 0.00%)      }
        .           
        .               /// `[low, high] = a * b`.
        .               ///
        .               /// This cannot overflow, because
        .               ///
        .               /// `(n - 1) * (n - 1) + 2 * (n - 1) == (n - 1) * (n + 1)`
        .               ///
        .               /// which is less than n<sup>2</sup>.
        .               pub(super) fn widening_mul(a: Limb, b: Limb) -> [Limb; 2] {
        .                   let mut wide = [0, 0];
        .           
    9,360 ( 0.00%)          if a == 0 || b == 0 {
        .                       return wide;
        .                   }
        .           
        .                   const HALF_BITS: usize = LIMB_BITS / 2;
        .           
        .                   let select = |limb, i| (limb >> (i * HALF_BITS)) & ((1 << HALF_BITS) - 1);
        .                   for i in 0..2 {
        .                       for j in 0..2 {
   53,040 ( 0.00%)                  let mut x = [select(a, i) * select(b, j), 0];
        .                           shift_left(&mut x, &mut 0, (i + j) * HALF_BITS);
        .                           assert_eq!(add(&mut wide, &x, 0), 0);
        .                       }
        .                   }
        .           
        .                   wide
        .               }
        .           
        .               /// `dst = a * b` (for normal `a` and `b`). Returns the lost fraction.
   34,320 ( 0.00%)      pub(super) fn mul<'a>(
        .                   dst: &mut [Limb],
        .                   exp: &mut ExpInt,
        .                   mut a: &'a [Limb],
        .                   mut b: &'a [Limb],
        .                   precision: usize,
        .               ) -> Loss {
        .                   // Put the narrower number on the `a` for less loops below.
    6,240 ( 0.00%)          if a.len() > b.len() {
        .                       mem::swap(&mut a, &mut b);
        .                   }
        .           
        .                   for x in &mut dst[..b.len()] {
   12,480 ( 0.00%)              *x = 0;
        .                   }
        .           
        .                   for i in 0..a.len() {
        .                       let mut carry = 0;
        .                       for j in 0..b.len() {
    6,240 ( 0.00%)                  let [low, mut high] = widening_mul(a[i], b[j]);
        .           
        .                           // Now add carry.
        .                           let (low, overflow) = low.overflowing_add(carry);
    9,360 ( 0.00%)                  high += overflow as Limb;
        .           
        .                           // And now `dst[i + j]`, and store the new low part there.
    6,240 ( 0.00%)                  let (low, overflow) = low.overflowing_add(dst[i + j]);
    9,360 ( 0.00%)                  high += overflow as Limb;
        .           
    6,240 ( 0.00%)                  dst[i + j] = low;
        .                           carry = high;
        .                       }
   21,840 ( 0.00%)              dst[i + b.len()] = carry;
        .                   }
        .           
        .                   // Assume the operands involved in the multiplication are single-precision
        .                   // FP, and the two multiplicants are:
        .                   //     a = a23 . a22 ... a0 * 2^e1
        .                   //     b = b23 . b22 ... b0 * 2^e2
        .                   // the result of multiplication is:
        .                   //     dst = c48 c47 c46 . c45 ... c0 * 2^(e1+e2)
        .                   // Note that there are three significant bits at the left-hand side of the
        .                   // radix point: two for the multiplication, and an overflow bit for the
        .                   // addition (that will always be zero at this point). Move the radix point
        .                   // toward left by two bits, and adjust exponent accordingly.
   15,600 ( 0.00%)          *exp += 2;
        .           
        .                   // Convert the result having "2 * precision" significant-bits back to the one
        .                   // having "precision" significant-bits. First, move the radix point from
        .                   // poision "2*precision - 1" to "precision - 1". The exponent need to be
        .                   // adjusted by "2*precision - 1" - "precision - 1" = "precision".
   18,720 ( 0.00%)          *exp -= precision as ExpInt + 1;
        .           
        .                   // In case MSB resides at the left-hand side of radix point, shift the
        .                   // mantissa right by some amount to make sure the MSB reside right before
        .                   // the radix point (i.e., "MSB . rest-significant-bits").
        .                   //
        .                   // Note that the result is not normalized when "omsb < precision". So, the
        .                   // caller needs to call IeeeFloat::normalize() if normalized value is
        .                   // expected.
        .                   let omsb = omsb(dst);
    6,588 ( 0.00%)          if omsb <= precision { Loss::ExactlyZero } else { shift_right(dst, exp, omsb - precision) }
   27,819 ( 0.00%)      }
        .           
        .               /// `quotient = dividend / divisor`. Returns the lost fraction.
        .               /// Does not preserve `dividend` or `divisor`.
   14,938 ( 0.00%)      pub(super) fn div(
        .                   quotient: &mut [Limb],
        .                   exp: &mut ExpInt,
        .                   dividend: &mut [Limb],
        .                   divisor: &mut [Limb],
        .                   precision: usize,
        .               ) -> Loss {
        .                   // Normalize the divisor.
    2,134 ( 0.00%)          let bits = precision - omsb(divisor);
    5,335 ( 0.00%)          shift_left(divisor, &mut 0, bits);
    3,201 ( 0.00%)          *exp += bits as ExpInt;
        .           
        .                   // Normalize the dividend.
    3,201 ( 0.00%)          let bits = precision - omsb(dividend);
    6,402 ( 0.00%)          shift_left(dividend, exp, bits);
        .           
        .                   // Division by 1.
        .                   let olsb_divisor = olsb(divisor);
    2,134 ( 0.00%)          if olsb_divisor == precision {
        .                       quotient.copy_from_slice(dividend);
        .                       return Loss::ExactlyZero;
        .                   }
        .           
        .                   // Ensure the dividend >= divisor initially for the loop below.
        .                   // Incidentally, this means that the division loop below is
        .                   // guaranteed to set the integer bit to one.
        .                   if cmp(dividend, divisor) == Ordering::Less {
    4,776 ( 0.00%)              shift_left(dividend, exp, 1);
    1,592 ( 0.00%)              assert_ne!(cmp(dividend, divisor), Ordering::Less)
        .                   }
        .           
        .                   // Helper for figuring out the lost fraction.
        .                   let lost_fraction = |dividend: &[Limb], divisor: &[Limb]| match cmp(dividend, divisor) {
        .                       Ordering::Greater => Loss::MoreThanHalf,
        .                       Ordering::Equal => Loss::ExactlyHalf,
        .                       Ordering::Less => {
        .                           if is_all_zeros(dividend) {
-- line 2702 ----------------------------------------
-- line 2703 ----------------------------------------
        .                               Loss::ExactlyZero
        .                           } else {
        .                               Loss::LessThanHalf
        .                           }
        .                       }
        .                   };
        .           
        .                   // Try to perform a (much faster) short division for small divisors.
    5,305 ( 0.00%)          let divisor_bits = precision - (olsb_divisor - 1);
        .                   macro_rules! try_short_div {
        .                       ($W:ty, $H:ty, $half:expr) => {
        .                           if divisor_bits * 2 <= $half {
        .                               // Extract the small divisor.
        .                               let _: Loss = shift_right(divisor, &mut 0, olsb_divisor - 1);
        .                               let divisor = divisor[0] as $H as $W;
        .           
        .                               // Shift the dividend to produce a quotient with the unit bit set.
        .                               let top_limb = *dividend.last().unwrap();
        .                               let mut rem = (top_limb >> (LIMB_BITS - (divisor_bits - 1))) as $H;
        .                               shift_left(dividend, &mut 0, divisor_bits - 1);
        .           
        .                               // Apply short division in place on $H (of $half bits) chunks.
        .                               each_chunk(dividend, $half, |chunk| {
      110 ( 0.00%)                          let chunk = chunk as $H;
      382 ( 0.00%)                          let combined = ((rem as $W) << $half) | (chunk as $W);
      173 ( 0.00%)                          rem = (combined % divisor) as $H;
      784 ( 0.00%)                          (combined / divisor) as $H as Limb
        .                               });
        .                               quotient.copy_from_slice(dividend);
        .           
        .                               return lost_fraction(&[(rem as Limb) << 1], &[divisor as Limb]);
        .                           }
        .                       };
        .                   }
        .           
    6,215 ( 0.00%)          try_short_div!(u32, u16, 16);
    2,172 ( 0.00%)          try_short_div!(u64, u32, 32);
    2,064 ( 0.00%)          try_short_div!(u128, u64, 64);
        .           
        .                   // Zero the quotient before setting bits in it.
        .                   for x in &mut quotient[..limbs_for_bits(precision)] {
    3,096 ( 0.00%)              *x = 0;
        .                   }
        .           
        .                   // Long division.
        .                   for bit in (0..precision).rev() {
        .                       if cmp(dividend, divisor) != Ordering::Less {
        .                           sub(dividend, divisor, 0);
        .                           set_bit(quotient, bit);
        .                       }
  786,384 ( 0.03%)              shift_left(dividend, &mut 0, 1);
        .                   }
        .           
        .                   lost_fraction(dividend, divisor)
    8,536 ( 0.00%)      }
        .           }

  742,027 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_apfloat/src/ieee.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 108 ----------------------------------------
        .                   suppress_errors: bool,
        .               },
        .           }
        .           
        .           impl RegionckMode {
        .               /// Indicates that the MIR borrowck will repeat these region
        .               /// checks, so we should ignore errors if NLL is (unconditionally)
        .               /// enabled.
      362 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
        .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
        .                   // this always `true` and then proceed to eliminate the dead code.
      362 ( 0.00%)          match tcx.borrowck_mode() {
        .                       // If we're on Migrate mode, report AST region errors
        .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
        .           
        .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
        .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
        .                   }
      724 ( 0.00%)      }
        .           }
        .           
        .           /// This type contains all the things within `InferCtxt` that sit within a
        .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
        .           /// operations are hot enough that we want only one call to `borrow_mut` per
        .           /// call to `start_snapshot` and `rollback_to`.
        .           pub struct InferCtxtInner<'tcx> {
        .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
        .               /// type instantiations (`ty::Infer`) to the actual opaque
        .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
        .               /// opaque type inference variables to their corresponding
        .               /// opaque type.
        .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
        .           }
        .           
        .           impl<'tcx> InferCtxtInner<'tcx> {
   69,300 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
  471,240 ( 0.02%)          InferCtxtInner {
        .                       projection_cache: Default::default(),
        .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
        .                       undo_log: InferCtxtUndoLogs::default(),
        .                       const_unification_storage: ut::UnificationTableStorage::new(),
        .                       int_unification_storage: ut::UnificationTableStorage::new(),
        .                       float_unification_storage: ut::UnificationTableStorage::new(),
   41,580 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
        .                       region_obligations: vec![],
        .                       opaque_types: Default::default(),
        .                       opaque_types_vars: Default::default(),
        .                   }
   83,160 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
        .                   &self.region_obligations
        .               }
        .           
        .               #[inline]
        .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
    4,796 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
  328,393 ( 0.01%)          self.type_variable_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn int_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::IntVid,
        .                       &mut ut::UnificationStorage<ty::IntVid>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
    9,136 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn float_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::FloatVid,
        .                       &mut ut::UnificationStorage<ty::FloatVid>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
   27,071 ( 0.00%)          self.float_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn const_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::ConstVid<'tcx>,
        .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
    2,929 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
   58,342 ( 0.00%)          self.region_constraint_storage
        .                       .as_mut()
        .                       .expect("region constraints already solved")
   66,878 ( 0.00%)              .with_log(&mut self.undo_log)
        .               }
        .           }
        .           
        .           pub struct InferCtxt<'a, 'tcx> {
        .               pub tcx: TyCtxt<'tcx>,
        .           
        .               /// The `DefId` of the item in whose context we are performing inference or typeck.
        .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
        .               /// item we are type-checking, and just consider those names as
        .               /// part of the root universe. So this would only get incremented
        .               /// when we enter into a higher-ranked (`for<..>`) type or trait
        .               /// bound.
        .               universe: Cell<ty::UniverseIndex>,
        .           }
        .           
        .           /// See the `error_reporting` module for more details.
   69,624 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
        .           pub enum ValuePairs<'tcx> {
        .               Types(ExpectedFound<Ty<'tcx>>),
        .               Regions(ExpectedFound<ty::Region<'tcx>>),
        .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
        .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
        .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
        .           }
        .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
        .           pub struct TypeTrace<'tcx> {
        .               cause: ObligationCause<'tcx>,
        .               values: ValuePairs<'tcx>,
        .           }
        .           
        .           /// The origin of a `r1 <= r2` constraint.
        .           ///
        .           /// See `error_reporting` module for more details
   81,146 ( 0.00%)  #[derive(Clone, Debug)]
        .           pub enum SubregionOrigin<'tcx> {
        .               /// Arose from a subtyping relation
    3,713 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
        .           
        .               /// When casting `&'a T` to an `&'b Trait` object,
        .               /// relating `'a` to `'b`
        .               RelateObjectBound(Span),
        .           
        .               /// Some type parameter was instantiated with the given type,
        .               /// and that type must outlive some region.
    1,508 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
        .           
        .               /// The given region parameter was instantiated with a region
        .               /// that must outlive some other region.
        .               RelateRegionParamBound(Span),
        .           
        .               /// Creating a pointer `b` to contents of another reference
        .               Reborrow(Span),
        .           
        .               /// Creating a pointer `b` to contents of an upvar
        .               ReborrowUpvar(Span, ty::UpvarId),
        .           
        .               /// Data with type `Ty<'tcx>` was borrowed
    1,492 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
        .           
        .               /// (&'a &'b T) where a >= b
    1,137 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
        .           
        .               /// Comparing the signature and requirements of an impl method against
        .               /// the containing trait.
        .               CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
        .           
        .               /// Comparing the signature and requirements of an impl associated type
        .               /// against the containing trait
        .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
-- line 426 ----------------------------------------
-- line 554 ----------------------------------------
        .               defining_use_anchor: Option<LocalDefId>,
        .           }
        .           
        .           pub trait TyCtxtInferExt<'tcx> {
        .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
        .           }
        .           
        .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
   13,860 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
   41,580 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
   13,860 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> InferCtxtBuilder<'tcx> {
        .               /// Used only by `rustc_typeck` during body type-checking/inference,
        .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
        .               /// Will also change the scope for opaque type defining use checks to the given owner.
   10,683 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
   13,057 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
    5,935 ( 0.00%)          self.with_opaque_type_inference(table_owner)
    8,309 ( 0.00%)      }
        .           
        .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
        .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
        .               ///
        .               /// It is only meant to be called in two places, for typeck
        .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
        .               /// in mir borrowck.
      734 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
      367 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
    3,108 ( 0.00%)          self
    1,101 ( 0.00%)      }
        .           
        .               /// Given a canonical value `C` as a starting point, create an
        .               /// inference context that contains each of the bound values
        .               /// within instantiated as a fresh variable. The `f` closure is
        .               /// invoked with the new infcx, along with the instantiated value
        .               /// `V` and a substitution `S`. This substitution `S` maps from
        .               /// the bound values in `C` to their instantiated values in `V`
        .               /// (in other words, `S(C) = V`).
   22,810 ( 0.00%)      pub fn enter_with_canonical<T, R>(
        .                   &mut self,
        .                   span: Span,
        .                   canonical: &Canonical<'tcx, T>,
        .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
        .               ) -> R
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   self.enter(|infcx| {
   30,806 ( 0.00%)              let (value, subst) =
    2,073 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
   45,664 ( 0.00%)              f(infcx, value, subst)
        .                   })
   24,806 ( 0.00%)      }
        .           
   77,362 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
   37,536 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
        .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
  600,515 ( 0.02%)          f(InferCtxt {
        .                       tcx,
        .                       defining_use_anchor,
        .                       in_progress_typeck_results,
   13,860 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
        .                       lexical_region_resolutions: RefCell::new(None),
        .                       selection_cache: Default::default(),
        .                       evaluation_cache: Default::default(),
        .                       reported_trait_errors: Default::default(),
        .                       reported_closure_mismatch: Default::default(),
        .                       tainted_by_errors_flag: Cell::new(false),
   13,860 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
        .                       in_snapshot: Cell::new(false),
        .                       skip_leak_check: Cell::new(false),
        .                       universe: Cell::new(ty::UniverseIndex::ROOT),
        .                   })
   82,684 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx, T> InferOk<'tcx, T> {
        .               pub fn unit(self) -> InferOk<'tcx, ()> {
        .                   InferOk { value: (), obligations: self.obligations }
        .               }
        .           
        .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
        .               pub fn into_value_registering_obligations(
        .                   self,
        .                   infcx: &InferCtxt<'_, 'tcx>,
        .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
        .               ) -> T {
    1,188 ( 0.00%)          let InferOk { value, obligations } = self;
    4,096 ( 0.00%)          for obligation in obligations {
        .                       fulfill_cx.register_predicate_obligation(infcx, obligation);
        .                   }
        .                   value
        .               }
        .           }
        .           
        .           impl<'tcx> InferOk<'tcx, ()> {
    9,205 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
   36,820 ( 0.00%)          self.obligations
    9,205 ( 0.00%)      }
        .           }
        .           
        .           #[must_use = "once you start a snapshot, you should always consume it"]
        .           pub struct CombinedSnapshot<'a, 'tcx> {
        .               undo_snapshot: Snapshot<'tcx>,
        .               region_constraints_snapshot: RegionSnapshot,
        .               universe: ty::UniverseIndex,
        .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
        .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
        .                   debug!("canonical consts: {:?}", &canonical.value);
        .           
        .                   self.tcx.try_unify_abstract_consts(canonical.value)
        .               }
        .           
        .               pub fn is_in_snapshot(&self) -> bool {
        .                   self.in_snapshot.get()
   24,769 ( 0.00%)      }
        .           
  157,512 ( 0.01%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
  177,201 ( 0.01%)          t.fold_with(&mut self.freshener())
  177,201 ( 0.01%)      }
        .           
        .               /// Returns the origin of the type variable identified by `vid`, or `None`
        .               /// if this is not a type variable.
        .               ///
        .               /// No attempt is made to resolve `ty`.
      290 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
      580 ( 0.00%)          match *ty.kind() {
       75 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
      300 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
        .                       }
       70 ( 0.00%)              _ => None,
        .                   }
      580 ( 0.00%)      }
        .           
   19,689 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
        .                   freshen::TypeFreshener::new(self, false)
   19,689 ( 0.00%)      }
        .           
        .               /// Like `freshener`, but does not replace `'static` regions.
   73,835 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
        .                   freshen::TypeFreshener::new(self, true)
   73,835 ( 0.00%)      }
        .           
    1,584 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
      792 ( 0.00%)          let mut inner = self.inner.borrow_mut();
      792 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
        .                       .type_variables()
        .                       .unsolved_variables()
        .                       .into_iter()
      158 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
        .                       .collect();
        .                   vars.extend(
        .                       (0..inner.int_unification_table().len())
        .                           .map(|i| ty::IntVid { index: i as u32 })
      146 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
        2 ( 0.00%)                  .map(|v| self.tcx.mk_int_var(v)),
        .                   );
        .                   vars.extend(
        .                       (0..inner.float_unification_table().len())
        .                           .map(|i| ty::FloatVid { index: i as u32 })
      828 ( 0.00%)                  .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
       68 ( 0.00%)                  .map(|v| self.tcx.mk_float_var(v)),
        .                   );
        .                   vars
    2,772 ( 0.00%)      }
        .           
   46,747 ( 0.00%)      fn combine_fields(
        .                   &'a self,
        .                   trace: TypeTrace<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .               ) -> CombineFields<'a, 'tcx> {
  187,004 ( 0.01%)          CombineFields {
        .                       infcx: self,
  467,510 ( 0.02%)              trace,
        .                       cause: None,
        .                       param_env,
        .                       obligations: PredicateObligations::new(),
        .                   }
   46,747 ( 0.00%)      }
        .           
        .               /// Clear the "currently in a snapshot" flag, invoke the closure,
        .               /// then restore the flag to its original value. This flag is a
        .               /// debugging measure designed to detect cases where we start a
        .               /// snapshot, create type variables, and register obligations
        .               /// which may involve those type variables in the fulfillment cx,
        .               /// potentially leaving "dangling type variables" behind.
        .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 755 ----------------------------------------
        .               /// better than grovelling through megabytes of `RUSTC_LOG` output.
        .               ///
        .               /// HOWEVER, in some cases the flag is unhelpful. In particular, we
        .               /// sometimes create a "mini-fulfilment-cx" in which we enroll
        .               /// obligations. As long as this fulfillment cx is fully drained
        .               /// before we return, this is not a problem, as there won't be any
        .               /// escaping obligations in the main cx. In those cases, you can
        .               /// use this function.
       24 ( 0.00%)      pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
        .               where
        .                   F: FnOnce(&Self) -> R,
        .               {
        .                   let flag = self.in_snapshot.replace(false);
    5,223 ( 0.00%)          let result = func(self);
        .                   self.in_snapshot.set(flag);
        .                   result
       27 ( 0.00%)      }
        .           
  239,024 ( 0.01%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
        .                   debug!("start_snapshot()");
        .           
        .                   let in_snapshot = self.in_snapshot.replace(true);
        .           
        .                   let mut inner = self.inner.borrow_mut();
        .           
  717,072 ( 0.03%)          CombinedSnapshot {
        .                       undo_snapshot: inner.undo_log.start_snapshot(),
        .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
        .                       universe: self.universe(),
        .                       was_in_snapshot: in_snapshot,
        .                       // Borrow typeck results "in progress" (i.e., during typeck)
        .                       // to ban writes from within a snapshot to them.
  119,512 ( 0.00%)              _in_progress_typeck_results: self
        .                           .in_progress_typeck_results
        .                           .map(|typeck_results| typeck_results.borrow()),
        .                   }
  478,048 ( 0.02%)      }
        .           
  511,621 ( 0.02%)      #[instrument(skip(self, snapshot), level = "debug")]
        .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
        .                   let CombinedSnapshot {
   46,511 ( 0.00%)              undo_snapshot,
   46,511 ( 0.00%)              region_constraints_snapshot,
   46,511 ( 0.00%)              universe,
   46,511 ( 0.00%)              was_in_snapshot,
   93,022 ( 0.00%)              _in_progress_typeck_results,
        .                   } = snapshot;
        .           
        .                   self.in_snapshot.set(was_in_snapshot);
        .                   self.universe.set(universe);
        .           
        .                   let mut inner = self.inner.borrow_mut();
   46,511 ( 0.00%)          inner.rollback_to(undo_snapshot);
        .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
        .               }
        .           
1,095,015 ( 0.04%)      #[instrument(skip(self, snapshot), level = "debug")]
        .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
        .                   let CombinedSnapshot {
   73,001 ( 0.00%)              undo_snapshot,
        .                       region_constraints_snapshot: _,
        .                       universe: _,
   73,001 ( 0.00%)              was_in_snapshot,
  146,002 ( 0.01%)              _in_progress_typeck_results,
        .                   } = snapshot;
        .           
        .                   self.in_snapshot.set(was_in_snapshot);
        .           
        .                   self.inner.borrow_mut().commit(undo_snapshot);
        .               }
        .           
        .               /// Executes `f` and commit the bindings.
   42,493 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
   52,140 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
    4,740 ( 0.00%)          let snapshot = self.start_snapshot();
   14,987 ( 0.00%)          let r = f(&snapshot);
   33,180 ( 0.00%)          self.commit_from(snapshot);
   28,461 ( 0.00%)          r
        .               }
        .           
        .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
  569,126 ( 0.02%)      #[instrument(skip(self, f), level = "debug")]
  699,748 ( 0.03%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
        .               {
   92,971 ( 0.00%)          let snapshot = self.start_snapshot();
  320,920 ( 0.01%)          let r = f(&snapshot);
        .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
   84,389 ( 0.00%)          match r {
        .                       Ok(_) => {
  505,942 ( 0.02%)                  self.commit_from(snapshot);
        .                       }
        .                       Err(_) => {
  179,642 ( 0.01%)                  self.rollback_to("commit_if_ok -- error", snapshot);
        .                       }
        .                   }
  520,933 ( 0.02%)          r
        .               }
        .           
        .               /// Execute `f` then unroll any bindings it creates.
  188,685 ( 0.01%)      #[instrument(skip(self, f), level = "debug")]
  226,199 ( 0.01%)      pub fn probe<R, F>(&self, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
   56,364 ( 0.00%)          let snapshot = self.start_snapshot();
   93,843 ( 0.00%)          let r = f(&snapshot);
  257,968 ( 0.01%)          self.rollback_to("probe", snapshot);
   21,249 ( 0.00%)          r
        .               }
        .           
        .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
        .               #[instrument(skip(self, f), level = "debug")]
        .               pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
-- line 875 ----------------------------------------
-- line 884 ----------------------------------------
        .                   r
        .               }
        .           
        .               /// Scan the constraints produced since `snapshot` began and returns:
        .               ///
        .               /// - `None` -- if none of them involve "region outlives" constraints
        .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
        .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
   15,870 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
        .                   &self,
        .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
        .               ) -> Option<bool> {
   31,740 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .unwrap_region_constraints()
        .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
   23,805 ( 0.00%)      }
        .           
        .               pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
        .                   self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
        .               }
        .           
      372 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
        .               where
        .                   T: at::ToTrace<'tcx>,
        .               {
        .                   let origin = &ObligationCause::dummy();
        .                   self.probe(|_| {
        .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
        .                           // Ignore obligations, since we are unrolling
        .                           // everything anyway.
        .                       })
        .                   })
      279 ( 0.00%)      }
        .           
    5,976 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
        .               where
        .                   T: at::ToTrace<'tcx>,
        .               {
        .                   let origin = &ObligationCause::dummy();
        .                   self.probe(|_| {
        .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
        .                           // Ignore obligations, since we are unrolling
        .                           // everything anyway.
        .                       })
        .                   })
    4,482 ( 0.00%)      }
        .           
   37,840 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               pub fn sub_regions(
        .                   &self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   a: ty::Region<'tcx>,
        .                   b: ty::Region<'tcx>,
        .               ) {
   34,056 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
        .               }
        .           
        .               /// Require that the region `r` be equal to one of the regions in
        .               /// the set `regions`.
        .               #[instrument(skip(self), level = "debug")]
        .               pub fn member_constraint(
        .                   &self,
        .                   opaque_type_def_id: DefId,
-- line 947 ----------------------------------------
-- line 969 ----------------------------------------
        .               /// to `subtype_predicate` -- that is, "coercing" `a` to `b` winds up
        .               /// actually requiring `a <: b`. This is of course a valid coercion,
        .               /// but it's not as flexible as `FnCtxt::coerce` would be.
        .               ///
        .               /// (We may refactor this in the future, but there are a number of
        .               /// practical obstacles. Among other things, `FnCtxt::coerce` presently
        .               /// records adjustments that are required on the HIR in order to perform
        .               /// the coercion, and we don't currently have a way to manage that.)
       12 ( 0.00%)      pub fn coerce_predicate(
        .                   &self,
        .                   cause: &ObligationCause<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   predicate: ty::PolyCoercePredicate<'tcx>,
        .               ) -> Option<InferResult<'tcx, ()>> {
        8 ( 0.00%)          let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
        .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
        .                       a: p.a,
        .                       b: p.b,
        .                   });
       20 ( 0.00%)          self.subtype_predicate(cause, param_env, subtype_predicate)
       16 ( 0.00%)      }
        .           
    1,092 ( 0.00%)      pub fn subtype_predicate(
        .                   &self,
        .                   cause: &ObligationCause<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   predicate: ty::PolySubtypePredicate<'tcx>,
        .               ) -> Option<InferResult<'tcx, ()>> {
        .                   // Check for two unresolved inference variables, in which case we can
        .                   // make no progress. This is partly a micro-optimization, but it's
        .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
        .                   // earlier that they are sub-unified).
        .                   //
        .                   // Note that we can just skip the binders here because
        .                   // type variables can't (at present, at
        .                   // least) capture any of the things bound by this binder.
        .                   //
        .                   // Note that this sub here is not just for diagnostics - it has semantic
        .                   // effects as well.
       91 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
       91 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
      712 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
      174 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
        .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
      174 ( 0.00%)                  return None;
        .                       }
        .                       _ => {}
        .                   }
        .           
        .                   Some(self.commit_if_ok(|_snapshot| {
        4 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
        .                           self.replace_bound_vars_with_placeholders(predicate);
        .           
        8 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
        .           
        .                       Ok(ok.unit())
        .                   }))
      819 ( 0.00%)      }
        .           
   13,884 ( 0.00%)      pub fn region_outlives_predicate(
        .                   &self,
        .                   cause: &traits::ObligationCause<'tcx>,
        .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
        .               ) -> UnitResult<'tcx> {
        .                   self.commit_if_ok(|_snapshot| {
        .                       let ty::OutlivesPredicate(r_a, r_b) =
        .                           self.replace_bound_vars_with_placeholders(predicate);
        .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
        .                           RelateRegionParamBound(cause.span)
        .                       });
   11,570 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
        .                       Ok(())
        .                   })
    9,256 ( 0.00%)      }
        .           
        .               /// Number of type variables created so far.
       34 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
        .                   self.inner.borrow_mut().type_variables().num_vars()
       68 ( 0.00%)      }
        .           
   15,990 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
   79,950 ( 0.00%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
   23,985 ( 0.00%)      }
        .           
   14,858 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
   55,399 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
   22,287 ( 0.00%)      }
        .           
    1,032 ( 0.00%)      pub fn next_ty_var_in_universe(
        .                   &self,
        .                   origin: TypeVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> Ty<'tcx> {
    5,676 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
      516 ( 0.00%)          self.tcx.mk_ty_var(vid)
    1,548 ( 0.00%)      }
        .           
        .               pub fn next_const_var(
        .                   &self,
        .                   ty: Ty<'tcx>,
        .                   origin: ConstVariableOrigin,
        .               ) -> &'tcx ty::Const<'tcx> {
        .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
        .               }
-- line 1074 ----------------------------------------
-- line 1090 ----------------------------------------
        .               pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
        .                   self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
        .                       origin,
        .                       val: ConstVariableValue::Unknown { universe: self.universe() },
        .                   })
        .               }
        .           
        .               fn next_int_var_id(&self) -> IntVid {
      275 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
        .               }
        .           
      165 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
        .                   self.tcx.mk_int_var(self.next_int_var_id())
      220 ( 0.00%)      }
        .           
        .               fn next_float_var_id(&self) -> FloatVid {
      910 ( 0.00%)          self.inner.borrow_mut().float_unification_table().new_key(None)
        .               }
        .           
      546 ( 0.00%)      pub fn next_float_var(&self) -> Ty<'tcx> {
        .                   self.tcx.mk_float_var(self.next_float_var_id())
      728 ( 0.00%)      }
        .           
        .               /// Creates a fresh region variable with the next available index.
        .               /// The variable will be created in the maximum universe created
        .               /// thus far, allowing it to name any region created thus far.
    5,684 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
  128,462 ( 0.01%)          self.next_region_var_in_universe(origin, self.universe())
   11,368 ( 0.00%)      }
        .           
        .               /// Creates a fresh region variable with the next available index
        .               /// in the given universe; typically, you can use
        .               /// `next_region_var` and just use the maximal universe.
   50,554 ( 0.00%)      pub fn next_region_var_in_universe(
        .                   &self,
        .                   origin: RegionVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> ty::Region<'tcx> {
        .                   let region_var =
  328,601 ( 0.01%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
  126,385 ( 0.01%)          self.tcx.mk_region(ty::ReVar(region_var))
   75,831 ( 0.00%)      }
        .           
        .               /// Return the universe that the region `r` was created in.  For
        .               /// most regions (e.g., `'static`, named regions from the user,
        .               /// etc) this is the root universe U0. For inference variables or
        .               /// placeholders, however, it will return the universe which which
        .               /// they are associated.
    6,814 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
        .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
   10,221 ( 0.00%)      }
        .           
        .               /// Number of region variables created so far.
    2,946 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
        .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
    4,419 ( 0.00%)      }
        .           
        .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
    8,164 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
        .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
   16,328 ( 0.00%)      }
        .           
        .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
        5 ( 0.00%)      pub fn next_nll_region_var_in_universe(
        .                   &self,
        .                   origin: NllRegionVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> ty::Region<'tcx> {
       35 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
       10 ( 0.00%)      }
        .           
  137,760 ( 0.01%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
   70,224 ( 0.00%)          match param.kind {
        .                       GenericParamDefKind::Lifetime => {
        .                           // Create a region inference variable for the given
        .                           // region parameter definition.
    7,938 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
        .                       }
        .                       GenericParamDefKind::Type { .. } => {
        .                           // Create a type inference variable for the given
        .                           // type parameter definition. The substitutions are
        .                           // for actual parameters that may be referred to by
        .                           // the default of this type parameter, if it exists.
        .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
        .                           // used in a path such as `Foo::<T, U>::new()` will
        .                           // use an inference variable for `C` with `[T, U]`
        .                           // as the substitutions for the default, `(T, U)`.
   35,712 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
        .                               self.universe(),
   44,640 ( 0.00%)                      TypeVariableOrigin {
        .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
    8,928 ( 0.00%)                              param.name,
    8,928 ( 0.00%)                              Some(param.def_id),
        .                                   ),
        .                                   span,
        .                               },
        .                           );
        .           
    8,928 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
        .                       }
        .                       GenericParamDefKind::Const { .. } => {
        .                           let origin = ConstVariableOrigin {
        .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
        .                                   param.name,
        .                                   param.def_id,
        .                               ),
        .                               span,
        .                           };
        .                           let const_var_id =
    3,894 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
        .                                   origin,
        .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
        .                               });
      354 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
        .                       }
        .                   }
    2,832 ( 0.00%)      }
        .           
        .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
        .               /// type/region parameter to a fresh inference variable.
   47,331 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
  175,412 ( 0.01%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
   31,554 ( 0.00%)      }
        .           
        .               /// Returns `true` if errors have been reported since this infcx was
        .               /// created. This is sometimes used as a heuristic to skip
        .               /// reporting errors that often occur as a result of earlier
        .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
        .               /// inference variables, regionck errors).
    1,030 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
        .                   debug!(
        .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
        .                        tainted_by_errors_flag={})",
        .                       self.tcx.sess.err_count(),
        .                       self.err_count_on_creation,
        .                       self.tainted_by_errors_flag.get()
        .                   );
        .           
   39,551 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
        .                       return true; // errors reported since this infcx was made
        .                   }
        .                   self.tainted_by_errors_flag.get()
    1,545 ( 0.00%)      }
        .           
        .               /// Set the "tainted by errors" flag to true. We call this when we
        .               /// observe an error from a prior pass.
        .               pub fn set_tainted_by_errors(&self) {
        .                   debug!("set_tainted_by_errors()");
        .                   self.tainted_by_errors_flag.set(true)
        .               }
        .           
        .               /// Process the region constraints and return any any errors that
        .               /// result. After this, no more unification operations should be
        .               /// done -- or the compiler will panic -- but it is legal to use
        .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   41,937 ( 0.00%)      pub fn resolve_regions(
        .                   &self,
        .                   region_context: DefId,
        .                   outlives_env: &OutlivesEnvironment<'tcx>,
        .                   mode: RegionckMode,
        .               ) -> Vec<RegionResolutionError<'tcx>> {
  113,829 ( 0.00%)          let (var_infos, data) = {
        .                       let mut inner = self.inner.borrow_mut();
        .                       let inner = &mut *inner;
    5,991 ( 0.00%)              assert!(
   17,973 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
        .                           "region_obligations not empty: {:#?}",
        .                           inner.region_obligations
        .                       );
        .                       inner
        .                           .region_constraint_storage
        .                           .take()
        .                           .expect("regions already resolved")
        .                           .with_log(&mut inner.undo_log)
        .                           .into_infos_and_data()
    5,991 ( 0.00%)          };
        .           
        .                   let region_rels =
    5,991 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
        .           
   53,919 ( 0.00%)          let (lexical_region_resolutions, errors) =
  143,784 ( 0.01%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
        .           
   23,964 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
    5,991 ( 0.00%)          assert!(old_value.is_none());
        .           
        .                   errors
   53,919 ( 0.00%)      }
        .           
        .               /// Process the region constraints and report any errors that
        .               /// result. After this, no more unification operations should be
        .               /// done -- or the compiler will panic -- but it is legal to use
        .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   59,910 ( 0.00%)      pub fn resolve_regions_and_report_errors(
        .                   &self,
        .                   region_context: DefId,
        .                   outlives_env: &OutlivesEnvironment<'tcx>,
        .                   mode: RegionckMode,
        .               ) {
   11,982 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
        .           
   17,973 ( 0.00%)          if !self.is_tainted_by_errors() {
        .                       // As a heuristic, just skip reporting region errors
        .                       // altogether if other errors have been reported while
        .                       // this infcx was in use.  This is totally hokey but
        .                       // otherwise we have a hard time separating legit region
        .                       // errors from silly ones.
   11,982 ( 0.00%)              self.report_region_errors(&errors);
        .                   }
   29,955 ( 0.00%)      }
        .           
        .               /// Obtains (and clears) the current set of region
        .               /// constraints. The inference context is still usable: further
        .               /// unifications will simply add new constraints.
        .               ///
        .               /// This method is not meant to be used with normal lexical region
        .               /// resolution. Rather, it is used in the NLL mode as a kind of
        .               /// interim hack: basically we run normal type-check and generate
-- line 1307 ----------------------------------------
-- line 1319 ----------------------------------------
        .               }
        .           
        .               /// Gives temporary access to the region constraint data.
        .               pub fn with_region_constraints<R>(
        .                   &self,
        .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
        .               ) -> R {
        .                   let mut inner = self.inner.borrow_mut();
    9,416 ( 0.00%)          op(inner.unwrap_region_constraints().data())
        .               }
        .           
        .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
        .                   let mut inner = self.inner.borrow_mut();
        .                   let inner = &mut *inner;
        .                   inner
        .                       .region_constraint_storage
        .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
        .                       .var_origin(vid)
        .               }
        .           
        .               /// Takes ownership of the list of variable regions. This implies
        .               /// that all the region constraints have already been taken, and
        .               /// hence that `resolve_regions_and_report_errors` can never be
        .               /// called. This is used only during NLL processing to "hand off" ownership
        .               /// of the set of region variables into the NLL region context.
    1,835 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
        .                   let mut inner = self.inner.borrow_mut();
    6,973 ( 0.00%)          let (var_infos, data) = inner
        .                       .region_constraint_storage
        .                       .take()
        .                       .expect("regions already resolved")
        .                       .with_log(&mut inner.undo_log)
      367 ( 0.00%)              .into_infos_and_data();
      367 ( 0.00%)          assert!(data.is_empty());
        .                   var_infos
    2,936 ( 0.00%)      }
        .           
        .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
        .                   self.resolve_vars_if_possible(t).to_string()
        .               }
        .           
        .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
        .               /// universe index of `TyVar(vid)`.
    4,994 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
        .                   use self::type_variable::TypeVariableValue;
        .           
   14,982 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
        .                       TypeVariableValue::Known { value } => Ok(value),
        .                       TypeVariableValue::Unknown { universe } => Err(universe),
        .                   }
   17,479 ( 0.00%)      }
        .           
        .               /// Resolve any type variables found in `value` -- but only one
        .               /// level.  So, if the variable `?X` is bound to some type
        .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
        .               /// itself be bound to a type).
        .               ///
        .               /// Useful when you only need to inspect the outermost level of
        .               /// the type and don't care about nested types (or perhaps you
        .               /// will be resolving them as well, e.g. in a loop).
        .               pub fn shallow_resolve<T>(&self, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  133,309 ( 0.01%)          value.fold_with(&mut ShallowResolver { infcx: self })
        .               }
        .           
    6,172 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
        .                   self.inner.borrow_mut().type_variables().root_var(var)
    9,258 ( 0.00%)      }
        .           
        .               /// Where possible, replaces type/const variables in
        .               /// `value` with their final value. Note that region variables
        .               /// are unaffected. If a type/const variable has not been unified, it
        .               /// is left as is. This is an idempotent operation that does
        .               /// not affect inference state in any way and so you can do it
        .               /// at will.
    3,820 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  138,082 ( 0.01%)          if !value.needs_infer() {
  183,404 ( 0.01%)              return value; // Avoid duplicated subst-folding.
        .                   }
  125,368 ( 0.01%)          let mut r = resolve::OpportunisticVarResolver::new(self);
  136,423 ( 0.01%)          value.fold_with(&mut r)
    4,775 ( 0.00%)      }
        .           
        .               /// Returns the first unresolved variable contained in `T`. In the
        .               /// process of visiting `T`, this will resolve (where possible)
        .               /// type variables in `T`, but it never constructs the final,
        .               /// resolved type, so it's more efficient than
        .               /// `resolve_vars_if_possible()`.
        .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
        .               where
-- line 1415 ----------------------------------------
-- line 1490 ----------------------------------------
        .                   expected: &'tcx ty::Const<'tcx>,
        .                   actual: &'tcx ty::Const<'tcx>,
        .                   err: TypeError<'tcx>,
        .               ) -> DiagnosticBuilder<'tcx> {
        .                   let trace = TypeTrace::consts(cause, true, expected, actual);
        .                   self.report_and_explain_type_error(trace, &err)
        .               }
        .           
   15,354 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
        .                   &self,
        .                   span: Span,
        .                   lbrct: LateBoundRegionConversionTime,
        .                   value: ty::Binder<'tcx, T>,
        .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   let fld_r =
   59,874 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
        .                   let fld_t = |_| {
        .                       self.next_ty_var(TypeVariableOrigin {
        .                           kind: TypeVariableOriginKind::MiscVariable,
        .                           span,
        .                       })
        .                   };
        .                   let fld_c = |_, ty| {
        .                       self.next_const_var(
        .                           ty,
        .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
        .                       )
        .                   };
  256,559 ( 0.01%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
   10,236 ( 0.00%)      }
        .           
        .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
   11,880 ( 0.00%)      pub fn verify_generic_bound(
        .                   &self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   kind: GenericKind<'tcx>,
        .                   a: ty::Region<'tcx>,
        .                   bound: VerifyBound<'tcx>,
        .               ) {
        .                   debug!("verify_generic_bound({:?}, {:?} <: {:?})", kind, a, bound);
        .           
    4,455 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .unwrap_region_constraints()
   25,245 ( 0.00%)              .verify_generic_bound(origin, kind, a, bound);
   10,395 ( 0.00%)      }
        .           
        .               /// Obtains the latest type of the given closure; this may be a
        .               /// closure in the current function, in which case its
        .               /// `ClosureKind` may not yet be known.
      144 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
      288 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
        .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
      216 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
        .               }
        .           
        .               /// Clears the selection, evaluation, and projection caches. This is useful when
        .               /// repeatedly attempting to select an `Obligation` while changing only
        .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
        .               pub fn clear_caches(&self) {
        .                   self.selection_cache.clear();
        .                   self.evaluation_cache.clear();
        .                   self.inner.borrow_mut().projection_cache().clear();
        .               }
        .           
        .               pub fn universe(&self) -> ty::UniverseIndex {
  285,010 ( 0.01%)          self.universe.get()
   95,220 ( 0.00%)      }
        .           
        .               /// Creates and return a fresh universe that extends all previous
        .               /// universes. Updates `self.universe` to that new universe.
       32 ( 0.00%)      pub fn create_next_universe(&self) -> ty::UniverseIndex {
       32 ( 0.00%)          let u = self.universe.get().next_universe();
        .                   self.universe.set(u);
        .                   u
       32 ( 0.00%)      }
        .           
        .               /// Resolves and evaluates a constant.
        .               ///
        .               /// The constant can be located on a trait like `<A as B>::C`, in which case the given
        .               /// substitutions and environment are used to resolve the constant. Alternatively if the
        .               /// constant has generic parameters in scope the substitutions are used to evaluate the value of
        .               /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count
        .               /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still
-- line 1576 ----------------------------------------
-- line 1606 ----------------------------------------
        .                   // variables, thus we don't need to substitute back the original values.
        .                   self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
        .               }
        .           
        .               /// If `typ` is a type variable of some kind, resolve it one level
        .               /// (but do not resolve types found in the result). If `typ` is
        .               /// not a type variable, just return it unmodified.
        .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
1,279,928 ( 0.05%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
  699,599 ( 0.03%)          match *typ.kind() {
        .                       ty::Infer(ty::TyVar(v)) => {
        .                           // Not entirely obvious: if `typ` is a type variable,
        .                           // it can be resolved to an int/float variable, which
        .                           // can then be recursively resolved, hence the
        .                           // recursion. Note though that we prevent type
        .                           // variables from unifying to other type variables
        .                           // directly (though they may be embedded
        .                           // structurally), and we prevent cycles in any case,
        .                           // so this recursion should always be of very limited
        .                           // depth.
        .                           //
        .                           // Note: if these two lines are combined into one we get
        .                           // dynamic borrow errors on `self.inner`.
  347,628 ( 0.01%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
        .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
        .                       }
        .           
    4,740 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
        .                           .inner
        .                           .borrow_mut()
        .                           .int_unification_table()
        .                           .probe_value(v)
    1,284 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
        .                           .unwrap_or(typ),
        .           
   16,560 ( 0.00%)              ty::Infer(ty::FloatVar(v)) => self
        .                           .inner
        .                           .borrow_mut()
        .                           .float_unification_table()
        .                           .probe_value(v)
    5,960 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
        .                           .unwrap_or(typ),
        .           
        .                       _ => typ,
        .                   }
1,439,919 ( 0.06%)      }
        .           
        .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
        .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
        .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
        .               ///
        .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
        .               /// inlined, despite being large, because it has only two call sites that
        .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
        .               #[inline(always)]
        .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
        .                   match infer_var {
        .                       TyOrConstInferVar::Ty(v) => {
        .                           use self::type_variable::TypeVariableValue;
        .           
        .                           // If `inlined_probe` returns a `Known` value, it never equals
        .                           // `ty::Infer(ty::TyVar(v))`.
  397,844 ( 0.02%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
        .                               TypeVariableValue::Unknown { .. } => false,
        .                               TypeVariableValue::Known { .. } => true,
        .                           }
        .                       }
        .           
        .                       TyOrConstInferVar::TyInt(v) => {
        .                           // If `inlined_probe_value` returns a value it's always a
        .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
        .                           // `ty::Infer(_)`.
    4,688 ( 0.00%)                  self.inner.borrow_mut().int_unification_table().inlined_probe_value(v).is_some()
        .                       }
        .           
        .                       TyOrConstInferVar::TyFloat(v) => {
        .                           // If `probe_value` returns a value it's always a
        .                           // `ty::Float(_)`, which never matches a `ty::Infer(_)`.
        .                           //
        .                           // Not `inlined_probe_value(v)` because this call site is colder.
   28,143 ( 0.00%)                  self.inner.borrow_mut().float_unification_table().probe_value(v).is_some()
        .                       }
        .           
        .                       TyOrConstInferVar::Const(v) => {
        .                           // If `probe_value` returns a `Known` value, it never equals
        .                           // `ty::ConstKind::Infer(ty::InferConst::Var(v))`.
        .                           //
        .                           // Not `inlined_probe_value(v)` because this call site is colder.
        .                           match self.inner.borrow_mut().const_unification_table().probe_value(v).val {
-- line 1696 ----------------------------------------
-- line 1716 ----------------------------------------
        .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
        .               Const(ConstVid<'tcx>),
        .           }
        .           
        .           impl<'tcx> TyOrConstInferVar<'tcx> {
        .               /// Tries to extract an inference variable from a type or a constant, returns `None`
        .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
        .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
    4,560 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
        .                   match arg.unpack() {
        .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
        .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
        .                       GenericArgKind::Lifetime(_) => None,
        .                   }
    4,560 ( 0.00%)      }
        .           
        .               /// Tries to extract an inference variable from a type, returns `None`
        .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
      162 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
   41,372 ( 0.00%)          match *ty.kind() {
    8,852 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
       82 ( 0.00%)              ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
      494 ( 0.00%)              ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
        .                       _ => None,
        .                   }
      162 ( 0.00%)      }
        .           
        .               /// Tries to extract an inference variable from a constant, returns `None`
        .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
        .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
        .                   match ct.val {
        .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
        .                       _ => None,
        .                   }
-- line 1749 ----------------------------------------
-- line 1755 ----------------------------------------
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
        .                   self.infcx.tcx
        .               }
        .           
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
  239,700 ( 0.01%)          self.infcx.shallow_resolve_ty(ty)
        .               }
        .           
    2,552 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    2,552 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
    3,190 ( 0.00%)              self.infcx
        .                           .inner
        .                           .borrow_mut()
        .                           .const_unification_table()
    1,914 ( 0.00%)                  .probe_value(*vid)
        .                           .val
        .                           .known()
        .                           .unwrap_or(ct)
        .                   } else {
        .                       ct
        .                   }
    3,190 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeTrace<'tcx> {
        .               pub fn span(&self) -> Span {
        .                   self.cause.span
        .               }
        .           
        .               pub fn types(
-- line 1787 ----------------------------------------
-- line 1818 ----------------------------------------
        .                       CompareImplTypeObligation { span, .. } => span,
        .                   }
        .               }
        .           
        .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
        .               where
        .                   F: FnOnce() -> Self,
        .               {
   15,325 ( 0.00%)          match *cause.code() {
    1,935 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
    9,675 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
        .                       }
        .           
        .                       traits::ObligationCauseCode::CompareImplMethodObligation {
        .                           impl_item_def_id,
        .                           trait_item_def_id,
        .                       } => SubregionOrigin::CompareImplMethodObligation {
        .                           span: cause.span,
        .                           impl_item_def_id,
-- line 1836 ----------------------------------------

1,376,469 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 121 ----------------------------------------
      .           #[derive(Debug)]
      .           pub enum ProcessResult<O, E> {
      .               Unchanged,
      .               Changed(Vec<O>),
      .               Error(E),
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
 36,480 ( 0.00%)  struct ObligationTreeId(usize);
      .           
      .           type ObligationTreeIdGenerator =
      .               std::iter::Map<std::ops::RangeFrom<usize>, fn(usize) -> ObligationTreeId>;
      .           
      .           pub struct ObligationForest<O: ForestObligation> {
      .               /// The list of obligations. In between calls to `process_obligations`,
      .               /// this list only contains nodes in the `Pending` or `Waiting` state.
      .               ///
-- line 137 ----------------------------------------
-- line 181 ----------------------------------------
      .               has_parent: bool,
      .           
      .               /// Identifier of the obligation tree to which this node belongs.
      .               obligation_tree_id: ObligationTreeId,
      .           }
      .           
      .           impl<O> Node<O> {
      .               fn new(parent: Option<usize>, obligation: O, obligation_tree_id: ObligationTreeId) -> Node<O> {
383,328 ( 0.02%)          Node {
      .                       obligation,
      .                       state: Cell::new(NodeState::Pending),
 41,112 ( 0.00%)              dependents: if let Some(parent_index) = parent { vec![parent_index] } else { vec![] },
      .                       has_parent: parent.is_some(),
      .                       obligation_tree_id,
      .                   }
      .               }
      .           }
      .           
      .           /// The state of one node in some tree within the forest. This represents the
      .           /// current state of processing for the obligation (of type `O`) associated
-- line 200 ----------------------------------------
-- line 223 ----------------------------------------
      .           ///  |     compress()
      .           ///  v
      .           /// (Removed)
      .           /// ```
      .           /// The `Error` state can be introduced in several places, via `error_at()`.
      .           ///
      .           /// Outside of `ObligationForest` methods, nodes should be either `Pending` or
      .           /// `Waiting`.
315,565 ( 0.01%)  #[derive(Debug, Copy, Clone, PartialEq, Eq)]
      .           enum NodeState {
      .               /// This obligation has not yet been selected successfully. Cannot have
      .               /// subobligations.
      .               Pending,
      .           
      .               /// This obligation was selected successfully, but may or may not have
      .               /// subobligations.
      .               Success,
-- line 239 ----------------------------------------
-- line 279 ----------------------------------------
      .               pub stalled: bool,
      .           }
      .           
      .           impl<O, E> OutcomeTrait for Outcome<O, E> {
      .               type Error = Error<O, E>;
      .               type Obligation = O;
      .           
      .               fn new() -> Self {
 64,194 ( 0.00%)          Self { stalled: true, errors: vec![] }
      .               }
      .           
      .               fn mark_not_stalled(&mut self) {
 23,877 ( 0.00%)          self.stalled = false;
      .               }
      .           
      .               fn is_stalled(&self) -> bool {
 10,787 ( 0.00%)          self.stalled
      .               }
      .           
      .               fn record_completed(&mut self, _outcome: &Self::Obligation) {
      .                   // do nothing
      .               }
      .           
      .               fn record_error(&mut self, error: Self::Error) {
      .                   self.errors.push(error)
-- line 303 ----------------------------------------
-- line 306 ----------------------------------------
      .           
      .           #[derive(Debug, PartialEq, Eq)]
      .           pub struct Error<O, E> {
      .               pub error: E,
      .               pub backtrace: Vec<O>,
      .           }
      .           
      .           impl<O: ForestObligation> ObligationForest<O> {
 10,963 ( 0.00%)      pub fn new() -> ObligationForest<O> {
131,556 ( 0.01%)          ObligationForest {
      .                       nodes: vec![],
      .                       done_cache: Default::default(),
      .                       active_cache: Default::default(),
      .                       reused_node_vec: vec![],
      .                       obligation_tree_id_generator: (0..).map(ObligationTreeId),
      .                       error_cache: Default::default(),
      .                   }
 10,963 ( 0.00%)      }
      .           
      .               /// Returns the total number of nodes in the forest that have not
      .               /// yet been fully resolved.
      .               pub fn len(&self) -> usize {
      .                   self.nodes.len()
      .               }
      .           
      .               /// Registers an obligation.
      .               pub fn register_obligation(&mut self, obligation: O) {
      .                   // Ignore errors here - there is no guarantee of success.
321,997 ( 0.01%)          let _ = self.register_obligation_at(obligation, None);
      .               }
      .           
      .               // Returns Err(()) if we already know this obligation failed.
388,388 ( 0.02%)      fn register_obligation_at(&mut self, obligation: O, parent: Option<usize>) -> Result<(), ()> {
 70,616 ( 0.00%)          let cache_key = obligation.as_cache_key();
 70,616 ( 0.00%)          if self.done_cache.contains(&cache_key) {
      .                       debug!("register_obligation_at: ignoring already done obligation: {:?}", obligation);
      .                       return Ok(());
      .                   }
      .           
177,966 ( 0.01%)          match self.active_cache.entry(cache_key) {
      .                       Entry::Occupied(o) => {
 11,406 ( 0.00%)                  let node = &mut self.nodes[*o.get()];
 11,406 ( 0.00%)                  if let Some(parent_index) = parent {
      .                               // If the node is already in `active_cache`, it has already
      .                               // had its chance to be marked with a parent. So if it's
      .                               // not already present, just dump `parent` into the
      .                               // dependents as a non-parent.
  9,570 ( 0.00%)                      if !node.dependents.contains(&parent_index) {
      .                                   node.dependents.push(parent_index);
      .                               }
      .                           }
 17,109 ( 0.00%)                  if let NodeState::Error = node.state.get() { Err(()) } else { Ok(()) }
      .                       }
 71,874 ( 0.00%)              Entry::Vacant(v) => {
143,748 ( 0.01%)                  let obligation_tree_id = match parent {
 11,436 ( 0.00%)                      Some(parent_index) => self.nodes[parent_index].obligation_tree_id,
      .                               None => self.obligation_tree_id_generator.next().unwrap(),
      .                           };
      .           
      .                           let already_failed = parent.is_some()
      .                               && self
      .                                   .error_cache
      .                                   .get(&obligation_tree_id)
      .                                   .map_or(false, |errors| errors.contains(v.key()));
      .           
      .                           if already_failed {
      .                               Err(())
      .                           } else {
 23,958 ( 0.00%)                      let new_index = self.nodes.len();
      .                               v.insert(new_index);
      .                               self.nodes.push(Node::new(parent, obligation, obligation_tree_id));
      .                               Ok(())
      .                           }
      .                       }
      .                   }
317,772 ( 0.01%)      }
      .           
      .               /// Converts all remaining obligations to the given error.
115,787 ( 0.00%)      pub fn to_errors<E: Clone>(&mut self, error: E) -> Vec<Error<O, E>> {
      .                   let errors = self
      .                       .nodes
      .                       .iter()
      .                       .enumerate()
      .                       .filter(|(_index, node)| node.state.get() == NodeState::Pending)
      .                       .map(|(index, _node)| Error { error: error.clone(), backtrace: self.error_at(index) })
      .                       .collect();
      .           
 33,082 ( 0.00%)          self.compress(|_| assert!(false));
      .                   errors
 99,246 ( 0.00%)      }
      .           
      .               /// Returns the set of obligations that are in a pending state.
      .               pub fn map_pending_obligations<P, F>(&self, f: F) -> Vec<P>
      .               where
      .                   F: Fn(&O) -> P,
      .               {
      7 ( 0.00%)          self.nodes
      .                       .iter()
      .                       .filter(|node| node.state.get() == NodeState::Pending)
      .                       .map(|node| f(&node.obligation))
      .                       .collect()
      .               }
      .           
      .               fn insert_into_error_cache(&mut self, index: usize) {
      .                   let node = &self.nodes[index];
-- line 410 ----------------------------------------
-- line 414 ----------------------------------------
      .                       .insert(node.obligation.as_cache_key());
      .               }
      .           
      .               /// Performs a pass through the obligation list. This must
      .               /// be called in a loop until `outcome.stalled` is false.
      .               ///
      .               /// This _cannot_ be unrolled (presently, at least).
      .               #[inline(never)]
288,873 ( 0.01%)      pub fn process_obligations<P, OUT>(&mut self, processor: &mut P) -> OUT
      .               where
      .                   P: ObligationProcessor<Obligation = O>,
      .                   OUT: OutcomeTrait<Obligation = O, Error = Error<O, P::Error>>,
      .               {
      .                   let mut outcome = OUT::new();
      .           
      .                   // Note that the loop body can append new nodes, and those new nodes
      .                   // will then be processed by subsequent iterations of the loop.
      .                   //
      .                   // We can't use an iterator for the loop because `self.nodes` is
      .                   // appended to and the borrow checker would complain. We also can't use
      .                   // `for index in 0..self.nodes.len() { ... }` because the range would
      .                   // be computed with the initial length, and we would miss the appended
      .                   // nodes. Therefore we use a `while` loop.
      .                   let mut index = 0;
149,084 ( 0.01%)          while let Some(node) = self.nodes.get_mut(index) {
      .                       // `processor.process_obligation` can modify the predicate within
      .                       // `node.obligation`, and that predicate is the key used for
      .                       // `self.active_cache`. This means that `self.active_cache` can get
      .                       // out of sync with `nodes`. It's not very common, but it does
      .                       // happen, and code in `compress` has to allow for it.
233,974 ( 0.01%)              if node.state.get() != NodeState::Pending {
  5,980 ( 0.00%)                  index += 1;
      .                           continue;
      .                       }
      .           
132,621 ( 0.01%)              match processor.process_obligation(&mut node.obligation) {
      .                           ProcessResult::Unchanged => {
      .                               // No change in state.
      .                           }
 95,508 ( 0.00%)                  ProcessResult::Changed(children) => {
      .                               // We are not (yet) stalled.
      .                               outcome.mark_not_stalled();
      .                               node.state.set(NodeState::Success);
      .           
116,586 ( 0.00%)                      for child in children {
179,163 ( 0.01%)                          let st = self.register_obligation_at(child, Some(index));
 21,078 ( 0.00%)                          if let Err(()) = st {
      .                                       // Error already reported - propagate it
      .                                       // to our node.
      .                                       self.error_at(index);
      .                                   }
      .                               }
      .                           }
      .                           ProcessResult::Error(err) => {
      .                               outcome.mark_not_stalled();
      .                               outcome.record_error(Error { error: err, backtrace: self.error_at(index) });
      .                           }
      .                       }
222,014 ( 0.01%)              index += 1;
      .                   }
      .           
      .                   // There's no need to perform marking, cycle processing and compression when nothing
      .                   // changed.
 10,787 ( 0.00%)          if !outcome.is_stalled() {
      .                       self.mark_successes();
      .                       self.process_cycles(processor);
 11,450 ( 0.00%)              self.compress(|obl| outcome.record_completed(obl));
      .                   }
      .           
      .                   outcome
288,873 ( 0.01%)      }
      .           
      .               /// Returns a vector of obligations for `p` and all of its
      .               /// ancestors, putting them into the error state in the process.
      .               fn error_at(&self, mut index: usize) -> Vec<O> {
      .                   let mut error_stack: Vec<usize> = vec![];
      .                   let mut trace = vec![];
      .           
      .                   loop {
-- line 492 ----------------------------------------
-- line 516 ----------------------------------------
      .                   trace
      .               }
      .           
      .               /// Mark all `Waiting` nodes as `Success`, except those that depend on a
      .               /// pending node.
      .               fn mark_successes(&self) {
      .                   // Convert all `Waiting` nodes to `Success`.
      .                   for node in &self.nodes {
125,651 ( 0.01%)              if node.state.get() == NodeState::Waiting {
      .                           node.state.set(NodeState::Success);
      .                       }
      .                   }
      .           
      .                   // Convert `Success` nodes that depend on a pending node back to
      .                   // `Waiting`.
      .                   for node in &self.nodes {
 54,451 ( 0.00%)              if node.state.get() == NodeState::Pending {
      .                           // This call site is hot.
      .                           self.inlined_mark_dependents_as_waiting(node);
      .                       }
      .                   }
      .               }
      .           
      .               // This always-inlined function is for the hot call site.
      .               #[inline(always)]
      .               fn inlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
  3,109 ( 0.00%)          for &index in node.dependents.iter() {
      .                       let node = &self.nodes[index];
  3,109 ( 0.00%)              let state = node.state.get();
  3,109 ( 0.00%)              if state == NodeState::Success {
      .                           // This call site is cold.
  6,060 ( 0.00%)                  self.uninlined_mark_dependents_as_waiting(node);
      .                       } else {
      .                           debug_assert!(state == NodeState::Waiting || state == NodeState::Error)
      .                       }
      .                   }
      .               }
      .           
      .               // This never-inlined function is for the cold call site.
      .               #[inline(never)]
 14,140 ( 0.00%)      fn uninlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
      .                   // Mark node Waiting in the cold uninlined code instead of the hot inlined
      .                   node.state.set(NodeState::Waiting);
      .                   self.inlined_mark_dependents_as_waiting(node)
 16,160 ( 0.00%)      }
      .           
      .               /// Report cycles between all `Success` nodes, and convert all `Success`
      .               /// nodes to `Done`. This must be called after `mark_successes`.
      .               fn process_cycles<P>(&mut self, processor: &mut P)
      .               where
      .                   P: ObligationProcessor<Obligation = O>,
      .               {
  5,725 ( 0.00%)          let mut stack = std::mem::take(&mut self.reused_node_vec);
      .                   for (index, node) in self.nodes.iter().enumerate() {
      .                       // For some benchmarks this state test is extremely hot. It's a win
      .                       // to handle the no-op cases immediately to avoid the cost of the
      .                       // function call.
 54,451 ( 0.00%)              if node.state.get() == NodeState::Success {
116,750 ( 0.00%)                  self.find_cycles_from_node(&mut stack, processor, index);
      .                       }
      .                   }
      .           
      .                   debug_assert!(stack.is_empty());
 45,800 ( 0.00%)          self.reused_node_vec = stack;
      .               }
      .           
286,290 ( 0.01%)      fn find_cycles_from_node<P>(&self, stack: &mut Vec<usize>, processor: &mut P, index: usize)
      .               where
      .                   P: ObligationProcessor<Obligation = O>,
      .               {
      .                   let node = &self.nodes[index];
 63,620 ( 0.00%)          if node.state.get() == NodeState::Success {
  1,058 ( 0.00%)              match stack.iter().rposition(|&n| n == index) {
      .                           None => {
      .                               stack.push(index);
  8,460 ( 0.00%)                      for &dep_index in node.dependents.iter() {
 33,840 ( 0.00%)                          self.find_cycles_from_node(stack, processor, dep_index);
      .                               }
      .                               stack.pop();
      .                               node.state.set(NodeState::Done);
      .                           }
      .                           Some(rpos) => {
      .                               // Cycle detected.
      .                               processor.process_backedge(
      .                                   stack[rpos..].iter().map(|&i| &self.nodes[i].obligation),
      .                                   PhantomData,
      .                               );
      .                           }
      .                       }
      .                   }
254,480 ( 0.01%)      }
      .           
      .               /// Compresses the vector, removing all popped nodes. This adjusts the
      .               /// indices and hence invalidates any outstanding indices. `process_cycles`
      .               /// must be run beforehand to remove any cycles on `Success` nodes.
      .               #[inline(never)]
161,587 ( 0.01%)      fn compress(&mut self, mut outcome_cb: impl FnMut(&O)) {
 22,266 ( 0.00%)          let orig_nodes_len = self.nodes.len();
      .                   let mut node_rewrites: Vec<_> = std::mem::take(&mut self.reused_node_vec);
      .                   debug_assert!(node_rewrites.is_empty());
      .                   node_rewrites.extend(0..orig_nodes_len);
      .                   let mut dead_nodes = 0;
      .           
      .                   // Move removable nodes to the end, preserving the order of the
      .                   // remaining nodes.
      .                   //
      .                   // LOOP INVARIANT:
      .                   //     self.nodes[0..index - dead_nodes] are the first remaining nodes
      .                   //     self.nodes[index - dead_nodes..index] are all dead
      .                   //     self.nodes[index..] are unchanged
      .                   for index in 0..orig_nodes_len {
      .                       let node = &self.nodes[index];
295,155 ( 0.01%)              match node.state.get() {
      .                           NodeState::Pending | NodeState::Waiting => {
 61,148 ( 0.00%)                      if dead_nodes > 0 {
 15,834 ( 0.00%)                          self.nodes.swap(index, index - dead_nodes);
 26,390 ( 0.00%)                          node_rewrites[index] -= dead_nodes;
      .                               }
      .                           }
      .                           NodeState::Done => {
      .                               // This lookup can fail because the contents of
      .                               // `self.active_cache` are not guaranteed to match those of
      .                               // `self.nodes`. See the comment in `process_obligation`
      .                               // for more details.
 89,600 ( 0.00%)                      if let Some((predicate, _)) =
 71,631 ( 0.00%)                          self.active_cache.remove_entry(&node.obligation.as_cache_key())
      .                               {
      .                                   self.done_cache.insert(predicate);
      .                               } else {
      .                                   self.done_cache.insert(node.obligation.as_cache_key().clone());
      .                               }
      .                               // Extract the success stories.
      .                               outcome_cb(&node.obligation);
 47,754 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
 47,754 ( 0.00%)                      dead_nodes += 1;
      .                           }
      .                           NodeState::Error => {
      .                               // We *intentionally* remove the node from the cache at this point. Otherwise
      .                               // tests must come up with a different type on every type error they
      .                               // check against.
      .                               self.active_cache.remove(&node.obligation.as_cache_key());
      .                               self.insert_into_error_cache(index);
      .                               node_rewrites[index] = orig_nodes_len;
-- line 658 ----------------------------------------
-- line 659 ----------------------------------------
      .                               dead_nodes += 1;
      .                           }
      .                           NodeState::Success => unreachable!(),
      .                       }
      .                   }
      .           
      .                   if dead_nodes > 0 {
      .                       // Remove the dead nodes and rewrite indices.
 10,434 ( 0.00%)              self.nodes.truncate(orig_nodes_len - dead_nodes);
  5,217 ( 0.00%)              self.apply_rewrites(&node_rewrites);
      .                   }
      .           
      .                   node_rewrites.truncate(0);
 89,064 ( 0.00%)          self.reused_node_vec = node_rewrites;
178,128 ( 0.01%)      }
      .           
      .               #[inline(never)]
 46,953 ( 0.00%)      fn apply_rewrites(&mut self, node_rewrites: &[usize]) {
      .                   let orig_nodes_len = node_rewrites.len();
      .           
      .                   for node in &mut self.nodes {
      .                       let mut i = 0;
 22,039 ( 0.00%)              while let Some(dependent) = node.dependents.get_mut(i) {
  6,076 ( 0.00%)                  let new_index = node_rewrites[*dependent];
  3,038 ( 0.00%)                  if new_index >= orig_nodes_len {
      .                               node.dependents.swap_remove(i);
      .                               if i == 0 && node.has_parent {
      .                                   // We just removed the parent.
      .                                   node.has_parent = false;
      .                               }
      .                           } else {
  1,519 ( 0.00%)                      *dependent = new_index;
  3,038 ( 0.00%)                      i += 1;
      .                           }
      .                       }
      .                   }
      .           
      .                   // This updating of `self.active_cache` is necessary because the
      .                   // removal of nodes within `compress` can fail. See above.
      .                   self.active_cache.retain(|_predicate, index| {
105,712 ( 0.00%)              let new_index = node_rewrites[*index];
 52,856 ( 0.00%)              if new_index >= orig_nodes_len {
      .                           false
      .                       } else {
 20,520 ( 0.00%)                  *index = new_index;
      .                           true
      .                       }
      .                   });
 41,736 ( 0.00%)      }
      .           }

667,288 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/dl-lookup.c
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
574,089,660 (23.34%)  events annotated

