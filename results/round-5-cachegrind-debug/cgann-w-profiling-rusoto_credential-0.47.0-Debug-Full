--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name rusoto_credential --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 -C metadata=6c8ca85ffb989995 -C extra-filename=-6c8ca85ffb989995 --out-dir /usr/home/liquid/tmp/.tmpHXBnA0/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmpHXBnA0/target/debug/deps --extern async_trait=/usr/home/liquid/tmp/.tmpHXBnA0/target/debug/deps/libasync_trait-0d29c6b3600675a5.so --extern chrono=/usr/home/liquid/tmp/.tmpHXBnA0/target/debug/deps/libchrono-34a019ca58c92cb6.rmeta --extern dirs_next=/usr/home/liquid/tmp/.tmpHXBnA0/target/debug/deps/libdirs_next-374a67a44e805929.rmeta --extern futures=/usr/home/liquid/tmp/.tmpHXBnA0/target/debug/deps/libfutures-080ff6f809e1ac6d.rmeta --extern hyper=/usr/home/liquid/tmp/.tmpHXBnA0/target/debug/deps/libhyper-f4f7d22aa6802334.rlib --extern serde=/usr/home/liquid/tmp/.tmpHXBnA0/target/debug/deps/libserde-c18e66765eaa3bb4.rmeta --extern serde_json=/usr/home/liquid/tmp/.tmpHXBnA0/target/debug/deps/libserde_json-ca782b72a036b34a.rmeta --extern shlex=/usr/home/liquid/tmp/.tmpHXBnA0/target/debug/deps/libshlex-31c74045ecfccb3e.rmeta --extern tokio=/usr/home/liquid/tmp/.tmpHXBnA0/target/debug/deps/libtokio-706ad559e0f3a638.rmeta --extern zeroize=/usr/home/liquid/tmp/.tmpHXBnA0/target/debug/deps/libzeroize-1a77c2edb94b5ccd.rmeta -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-rusoto_credential-0.47.0-Debug-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                      
--------------------------------------------------------------------------------
19,864,083,476 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                      file:function
--------------------------------------------------------------------------------
1,035,667,621 ( 5.21%)  ???:llvm::FPPassManager::runOnFunction(llvm::Function&)
  597,943,852 ( 3.01%)  ???:llvm::SelectionDAG::Combine(llvm::CombineLevel, llvm::AAResults*, llvm::CodeGenOpt::Level)
  481,516,042 ( 2.42%)  ./malloc/malloc.c:_int_malloc
  457,944,013 ( 2.31%)  ./malloc/malloc.c:_int_free
  281,415,339 ( 1.42%)  ./malloc/malloc.c:malloc
  279,670,466 ( 1.41%)  ???:llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const
  259,255,973 ( 1.31%)  ???:(anonymous namespace)::Verifier::visitInstruction(llvm::Instruction&)
  254,866,049 ( 1.28%)  ???:(anonymous namespace)::Verifier::visitMDNode(llvm::MDNode const&, (anonymous namespace)::Verifier::AreDebugLocsAllowed)
  220,893,499 ( 1.11%)  ???:llvm::raw_svector_ostream::write_impl(char const*, unsigned long)
  220,225,756 ( 1.11%)  ???:llvm::MachineInstr::addOperand(llvm::MachineFunction&, llvm::MachineOperand const&)
  215,524,306 ( 1.08%)  ???:llvm::PMDataManager::verifyPreservedAnalysis(llvm::Pass*)
  205,518,637 ( 1.03%)  ???:llvm::SelectionDAGISel::SelectCodeCommon(llvm::SDNode*, unsigned char const*, unsigned int)
  205,152,023 ( 1.03%)  ???:(anonymous namespace)::RegAllocFast::allocateBasicBlock(llvm::MachineBasicBlock&)
  169,192,501 ( 0.85%)  ???:llvm::MCExpr::evaluateAsRelocatableImpl(llvm::MCValue&, llvm::MCAssembler const*, llvm::MCAsmLayout const*, llvm::MCFixup const*, llvm::DenseMap<llvm::MCSection const*, unsigned long, llvm::DenseMapInfo<llvm::MCSection const*>, llvm::detail::DenseMapPair<llvm::MCSection const*, unsigned long> > const*, bool) const
  163,768,882 ( 0.82%)  ???:llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)
  133,508,009 ( 0.67%)  ./malloc/malloc.c:free
  133,047,583 ( 0.67%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
  130,969,056 ( 0.66%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
  129,349,013 ( 0.65%)  ???:llvm::MCAsmLayout::getSymbolOffset(llvm::MCSymbol const&) const
  124,392,466 ( 0.63%)  ???:llvm::ScheduleDAGSDNodes::BuildSchedUnits()
  112,014,849 ( 0.56%)  ???:llvm::FoldingSetNodeID::AddInteger(unsigned int)
  111,476,099 ( 0.56%)  ???:(anonymous namespace)::VarLocBasedLDV::process(llvm::MachineInstr&, (anonymous namespace)::VarLocBasedLDV::OpenRangesSet&, (anonymous namespace)::VarLocBasedLDV::VarLocMap&, llvm::SmallVector<(anonymous namespace)::VarLocBasedLDV::TransferDebugPair, 4u>&)
  107,053,658 ( 0.54%)  ???:llvm::TargetLoweringBase::getTypeConversion(llvm::LLVMContext&, llvm::EVT) const
  103,573,776 ( 0.52%)  ???:llvm::MCObjectStreamer::emitBytes(llvm::StringRef)
   89,929,022 ( 0.45%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_sse2_unaligned_erms
   86,845,738 ( 0.44%)  ???:llvm::TargetRegisterInfo::shouldRealignStack(llvm::MachineFunction const&) const
   86,752,374 ( 0.44%)  ???:(anonymous namespace)::Verifier::visitCallBase(llvm::CallBase&)
   86,067,113 ( 0.43%)  ???:llvm::coro::declaresIntrinsics(llvm::Module const&, std::initializer_list<llvm::StringRef>)
   85,829,008 ( 0.43%)  ???:llvm::TargetRegisterInfo::checkAllSuperRegsMarked(llvm::BitVector const&, llvm::ArrayRef<unsigned short>) const
   85,158,373 ( 0.43%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
   82,162,272 ( 0.41%)  ???:multikeySort(llvm::MutableArrayRef<std::pair<llvm::CachedHashStringRef, unsigned long>*>, int)
   81,375,764 ( 0.41%)  ???:(anonymous namespace)::TwoAddressInstructionPass::runOnMachineFunction(llvm::MachineFunction&)
   79,990,569 ( 0.40%)  ???:llvm::SelectionDAG::MorphNodeTo(llvm::SDNode*, unsigned int, llvm::SDVTList, llvm::ArrayRef<llvm::SDValue>)
   78,604,957 ( 0.40%)  ???:llvm::InstrEmitter::EmitMachineNode(llvm::SDNode*, bool, bool, llvm::DenseMap<llvm::SDValue, llvm::Register, llvm::DenseMapInfo<llvm::SDValue>, llvm::detail::DenseMapPair<llvm::SDValue, llvm::Register> >&)
   78,561,751 ( 0.40%)  ???:llvm::MCAsmLayout::getFragmentOffset(llvm::MCFragment const*) const
   77,757,361 ( 0.39%)  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:__strncmp_avx2
   77,533,453 ( 0.39%)  ???:llvm::SmallSet<llvm::Register, 32u, std::less<llvm::Register> >::insert(llvm::Register const&)
   75,686,759 ( 0.38%)  ???:llvm::DAGTypeLegalizer::run()
   75,423,125 ( 0.38%)  ???:(anonymous namespace)::Verifier::verify(llvm::Function const&) [clone .llvm.4153962086227604281]
   75,264,598 ( 0.38%)  ???:(anonymous namespace)::SelectionDAGLegalize::LegalizeOp(llvm::SDNode*) [clone .llvm.8386621111310650999]
   74,066,567 ( 0.37%)  ???:(anonymous namespace)::X86MCCodeEmitter::emitPrefixImpl(unsigned int&, llvm::MCInst const&, llvm::MCSubtargetInfo const&, llvm::raw_ostream&) const
   72,959,897 ( 0.37%)  ???:llvm::FoldingSetBase::FindNodeOrInsertPos(llvm::FoldingSetNodeID const&, void*&, llvm::FoldingSetBase::FoldingSetInfo const&)
   72,038,626 ( 0.36%)  ???:(anonymous namespace)::Verifier::verifyFunctionAttrs(llvm::FunctionType*, llvm::AttributeList, llvm::Value const*, bool)
   71,552,792 ( 0.36%)  ???:llvm::MetadataTracking::track(void*, llvm::Metadata&, llvm::PointerUnion<llvm::MetadataAsValue*, llvm::Metadata*>)
   71,474,326 ( 0.36%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::CalculateFromScratch(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::BatchUpdateInfo*)
   71,322,919 ( 0.36%)  ???:llvm::MDString::get(llvm::LLVMContext&, llvm::StringRef)
   66,586,014 ( 0.34%)  ???:llvm::SelectionDAG::getConstant(llvm::ConstantInt const&, llvm::SDLoc const&, llvm::EVT, bool, bool)
   66,571,434 ( 0.34%)  ???:(anonymous namespace)::ELFObjectWriter::recordRelocation(llvm::MCAssembler&, llvm::MCAsmLayout const&, llvm::MCFragment const*, llvm::MCFixup const&, llvm::MCValue, unsigned long&) [clone .llvm.14145361893594770252]
   66,486,595 ( 0.33%)  ???:llvm::MCContext::getOrCreateSymbol(llvm::Twine const&)
   65,065,236 ( 0.33%)  ./malloc/malloc.c:malloc_consolidate
   64,732,878 ( 0.33%)  ???:llvm::SelectionDAG::Legalize()
   64,658,197 ( 0.33%)  ???:(anonymous namespace)::VarLocBasedLDV::ExtendRanges(llvm::MachineFunction&, llvm::TargetPassConfig*) [clone .llvm.4451506318407214204]
   60,496,805 ( 0.30%)  ???:(anonymous namespace)::DAGCombiner::combine(llvm::SDNode*)
   60,002,325 ( 0.30%)  ???:llvm::calculateDbgEntityHistory(llvm::MachineFunction const*, llvm::TargetRegisterInfo const*, llvm::DbgValueHistoryMap&, llvm::DbgLabelInstrMap&)
   56,582,814 ( 0.28%)  ???:(anonymous namespace)::PEI::runOnMachineFunction(llvm::MachineFunction&)
   56,056,518 ( 0.28%)  ???:llvm::MDNode::MDNode(llvm::LLVMContext&, unsigned int, llvm::Metadata::StorageType, llvm::ArrayRef<llvm::Metadata*>, llvm::ArrayRef<llvm::Metadata*>)
   55,603,442 ( 0.28%)  ./malloc/malloc.c:unlink_chunk.constprop.0
   54,743,574 ( 0.28%)  ???:(anonymous namespace)::ScheduleDAGRRList::Schedule() [clone .llvm.6953762222372402862]
   48,713,613 ( 0.25%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   48,486,063 ( 0.24%)  ???:(anonymous namespace)::X86MCInstLower::Lower(llvm::MachineInstr const*, llvm::MCInst&) const
   47,891,375 ( 0.24%)  ./stdlib/msort.c:msort_with_tmp.part.0
   45,211,085 ( 0.23%)  ???:llvm::FoldingSet<llvm::AttributeImpl>::NodeEquals(llvm::FoldingSetBase const*, llvm::FoldingSetBase::Node*, llvm::FoldingSetNodeID const&, unsigned int, llvm::FoldingSetNodeID&)
   44,937,906 ( 0.23%)  ???:llvm::X86FrameLowering::hasFP(llvm::MachineFunction const&) const
   44,717,608 ( 0.23%)  ???:(anonymous namespace)::Verifier::visitFunction(llvm::Function const&)::$_3::operator()(llvm::Instruction const&, llvm::MDNode const*) const
   44,206,106 ( 0.22%)  ???:llvm::MCAssembler::layout(llvm::MCAsmLayout&)
   44,200,510 ( 0.22%)  ???:llvm::FunctionLoweringInfo::set(llvm::Function const&, llvm::MachineFunction&, llvm::SelectionDAG*)
   43,643,594 ( 0.22%)  ???:(anonymous namespace)::X86MCCodeEmitter::encodeInstruction(llvm::MCInst const&, llvm::raw_ostream&, llvm::SmallVectorImpl<llvm::MCFixup>&, llvm::MCSubtargetInfo const&) const
   42,857,884 ( 0.22%)  ???:llvm::PMDataManager::removeNotPreservedAnalysis(llvm::Pass*)
   42,254,856 ( 0.21%)  ???:llvm::MachineFunction::CreateMachineInstr(llvm::MCInstrDesc const&, llvm::DebugLoc const&, bool)
   42,105,615 ( 0.21%)  ???:llvm::ScheduleDAGSDNodes::AddSchedEdges()
   42,076,993 ( 0.21%)  ???:(anonymous namespace)::ELFWriter::writeObject(llvm::MCAssembler&, llvm::MCAsmLayout const&)
   41,867,996 ( 0.21%)  ???:llvm::DwarfDebug::beginInstruction(llvm::MachineInstr const*)
   40,934,440 ( 0.21%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
   40,857,208 ( 0.21%)  ???:llvm::raw_ostream::write(char const*, unsigned long)
   39,565,710 ( 0.20%)  ???:llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&)
   38,564,781 ( 0.19%)  ???:llvm::SelectionDAG::AssignTopologicalOrder()
   38,036,519 ( 0.19%)  ???:llvm::SmallPtrSetImplBase::insert_imp_big(void const*)
   37,383,263 ( 0.19%)  ???:llvm::Twine::printOneChild(llvm::raw_ostream&, llvm::Twine::Child, llvm::Twine::NodeKind) const
   37,246,864 ( 0.19%)  ???:llvm::SelectionDAGISel::SelectAllBasicBlocks(llvm::Function const&)
   37,007,047 ( 0.19%)  ???:(anonymous namespace)::CFIInstrInserter::runOnMachineFunction(llvm::MachineFunction&)
   36,634,741 ( 0.18%)  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long)
   36,629,687 ( 0.18%)  ???:llvm::DataLayout::getAlignment(llvm::Type*, bool) const
   36,120,300 ( 0.18%)  ???:llvm::hashing::detail::hash_combine_recursive_helper::combine(unsigned long, char*, char*)
   35,947,278 ( 0.18%)  ???:char* llvm::hashing::detail::hash_combine_recursive_helper::combine_data<llvm::Metadata*>(unsigned long&, char*, char*, llvm::Metadata*)
   35,180,689 ( 0.18%)  ???:(anonymous namespace)::RegAllocFast::markRegUsedInInstr(unsigned short)
   35,151,007 ( 0.18%)  ???:llvm::LLVMContextImpl::~LLVMContextImpl()
   35,082,284 ( 0.18%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms
   35,016,659 ( 0.18%)  ???:llvm::SelectionDAG::getRegister(unsigned int, llvm::EVT)
   34,706,529 ( 0.17%)  ./elf/dl-lookup.c:do_lookup_x
   34,700,011 ( 0.17%)  ???:llvm::MCELFStreamer::emitLabel(llvm::MCSymbol*, llvm::SMLoc)
   34,030,644 ( 0.17%)  ???:(anonymous namespace)::X86AsmBackend::applyFixup(llvm::MCAssembler const&, llvm::MCFixup const&, llvm::MCValue const&, llvm::MutableArrayRef<char>, unsigned long, bool, llvm::MCSubtargetInfo const*) const
   33,667,191 ( 0.17%)  ???:llvm::X86TargetMachine::getTargetTransformInfo(llvm::Function const&)
   33,470,517 ( 0.17%)  ???:llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator, 4096ul, 4096ul, 128ul>::Allocate(unsigned long, llvm::Align)
   33,356,838 ( 0.17%)  ???:llvm::MCStreamer::emitULEB128IntValue(unsigned long, unsigned int)
   33,019,336 ( 0.17%)  ???:llvm::DIEAbbrev::Profile(llvm::FoldingSetNodeID&) const
   32,417,459 ( 0.16%)  ???:llvm::AsmPrinter::emitFunctionBody()
   32,116,689 ( 0.16%)  ???:(anonymous namespace)::X86MCCodeEmitter::emitMemModRMByte(llvm::MCInst const&, unsigned int, unsigned int, unsigned long, bool, unsigned long, llvm::raw_ostream&, llvm::SmallVectorImpl<llvm::MCFixup>&, llvm::MCSubtargetInfo const&, bool) const
   31,956,513 ( 0.16%)  ???:llvm::MachineFunctionPass::runOnFunction(llvm::Function&)
   31,647,890 ( 0.16%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::runSemiNCA(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, unsigned int)
   31,521,747 ( 0.16%)  ???:llvm::MCELFStreamer::emitInstToData(llvm::MCInst const&, llvm::MCSubtargetInfo const&)
   31,515,887 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::source_map::SourceMap>::lookup_source_file_idx
   31,226,397 ( 0.16%)  ???:(anonymous namespace)::VarLocBasedLDV::collectIDsForRegs(llvm::SmallSet<unsigned int, 32u, std::less<unsigned int> >&, llvm::SmallSet<llvm::Register, 32u, std::less<llvm::Register> > const&, llvm::CoalescingBitVector<unsigned long> const&, (anonymous namespace)::VarLocBasedLDV::VarLocMap const&)
   31,053,410 ( 0.16%)  ???:llvm::FoldingSet<llvm::SDNode>::NodeEquals(llvm::FoldingSetBase const*, llvm::FoldingSetBase::Node*, llvm::FoldingSetNodeID const&, unsigned int, llvm::FoldingSetNodeID&)
   30,287,573 ( 0.15%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs:<hashbrown::map::HashMap<rustc_span::def_id::DefIndex, rustc_hir::definitions::DefKey, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
   30,128,383 ( 0.15%)  ???:???
   29,933,016 ( 0.15%)  ???:llvm::X86RegisterInfo::eliminateFrameIndex(llvm::MachineInstrBundleIterator<llvm::MachineInstr, false>, int, unsigned int, llvm::RegScavenger*) const
   29,800,487 ( 0.15%)  ???:llvm::MCDwarfLineAddr::Encode(llvm::MCContext&, llvm::MCDwarfLineTableParams, long, unsigned long, llvm::raw_ostream&)
   29,688,989 ( 0.15%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:memcpy@GLIBC_2.2.5
   29,403,768 ( 0.15%)  ???:llvm::MCObjectStreamer::emitInstruction(llvm::MCInst const&, llvm::MCSubtargetInfo const&)
   29,300,481 ( 0.15%)  ???:llvm::InlineFunction(llvm::CallBase&, llvm::InlineFunctionInfo&, llvm::AAResults*, bool, llvm::Function*)
   28,980,194 ( 0.15%)  ???:llvm::SelectionDAG::getNode(unsigned int, llvm::SDLoc const&, llvm::SDVTList, llvm::ArrayRef<llvm::SDValue>)
   28,913,430 ( 0.15%)  ???:llvm::MDNodeKeyImpl<llvm::DICompositeType>::MDNodeKeyImpl(llvm::DICompositeType const*)
   28,904,601 ( 0.15%)  ???:llvm::ScheduleDAGSDNodes::EmitSchedule(llvm::MachineInstrBundleIterator<llvm::MachineInstr, false>&)
   28,073,663 ( 0.14%)  ???:llvm::MCObjectStreamer::emitValueImpl(llvm::MCExpr const*, unsigned int, llvm::SMLoc)
   26,362,087 ( 0.13%)  ./malloc/malloc.c:realloc
   26,325,039 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/fmt/mod.rs:core::fmt::write
   26,323,086 ( 0.13%)  ???:llvm::CoalescingBitVector<unsigned long>::find(unsigned long) const
   25,960,674 ( 0.13%)  ???:llvm::MCAssembler::layoutSectionOnce(llvm::MCAsmLayout&, llvm::MCSection&)
   25,904,882 ( 0.13%)  ???:llvm::TargetLowering::SimplifyDemandedBits(llvm::SDValue, llvm::APInt const&, llvm::APInt const&, llvm::KnownBits&, llvm::TargetLowering::TargetLoweringOpt&, unsigned int, bool) const
   25,412,467 ( 0.13%)  ???:llvm::MDTuple::getImpl(llvm::LLVMContext&, llvm::ArrayRef<llvm::Metadata*>, llvm::Metadata::StorageType, bool)
   25,210,800 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::SourceFile>::line_begin_pos
   25,210,800 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::source_map::SourceMap>::lookup_line
   25,183,090 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs:rustc_codegen_ssa::debuginfo::type_names::push_item_name
   25,127,221 ( 0.13%)  ???:llvm::DILocation::getImpl(llvm::LLVMContext&, unsigned int, unsigned int, llvm::Metadata*, llvm::Metadata*, bool, llvm::Metadata::StorageType, bool)
   25,029,118 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::HashMap<rustc_span::def_id::DefIndex, rustc_hir::definitions::DefKey, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
   24,689,804 ( 0.12%)  ???:llvm::SelectionDAG::getNode(unsigned int, llvm::SDLoc const&, llvm::EVT, llvm::SDValue, llvm::SDValue, llvm::SDNodeFlags)
   24,581,827 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/lossy.rs:<core::str::lossy::Utf8LossyChunksIter as core::iter::traits::iterator::Iterator>::next
   24,537,452 ( 0.12%)  ???:llvm::LazyCallGraph::Node::populateSlow()
   24,380,119 ( 0.12%)  ???:llvm::DIEValueList::addValue(llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator, 4096ul, 4096ul, 128ul>&, llvm::DIEValue const&)
   24,252,748 ( 0.12%)  ???:llvm::MDString* llvm::DINode::getOperandAs<llvm::MDString>(unsigned int) const
   24,071,457 ( 0.12%)  ???:(anonymous namespace)::RegAllocFast::setPhysReg(llvm::MachineInstr&, llvm::MachineOperand&, unsigned short)
   23,857,092 ( 0.12%)  ???:llvm::Function::dropAllReferences()
   23,698,086 ( 0.12%)  ???:llvm::MDNode::dropAllReferences()
   23,668,729 ( 0.12%)  ???:llvm::InstrEmitter::EmitCopyFromReg(llvm::SDNode*, unsigned int, bool, bool, llvm::Register, llvm::DenseMap<llvm::SDValue, llvm::Register, llvm::DenseMapInfo<llvm::SDValue>, llvm::detail::DenseMapPair<llvm::SDValue, llvm::Register> >&)
   23,514,294 ( 0.12%)  ???:llvm::SelectionDAG::clear()
   23,508,599 ( 0.12%)  ???:(anonymous namespace)::X86AsmBackend::getFixupKindInfo(llvm::MCFixupKind) const
   23,278,490 ( 0.12%)  ???:llvm::Module::getOrInsertFunction(llvm::StringRef, llvm::FunctionType*)
   23,261,839 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_middle::ty::subst::SubstFolder as rustc_middle::ty::fold::TypeFolder>::fold_ty
   23,182,471 ( 0.12%)  ???:llvm::X86FrameLowering::getFrameIndexReference(llvm::MachineFunction const&, int, llvm::Register&) const
   22,807,817 ( 0.11%)  ???:llvm::SelectionDAG::computeKnownBits(llvm::SDValue, llvm::APInt const&, unsigned int) const
   22,745,632 ( 0.11%)  ???:llvm::X86RegisterInfo::getReservedRegs(llvm::MachineFunction const&) const
   22,642,427 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_metadata::creader::CrateMetadataRef>::def_key
   21,984,274 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   21,965,250 ( 0.11%)  ???:(anonymous namespace)::RegAllocFast::allocVirtReg(llvm::MachineInstr&, (anonymous namespace)::RegAllocFast::LiveReg&, llvm::Register, bool)
   21,935,249 ( 0.11%)  ???:(anonymous namespace)::PruningFunctionCloner::CloneBlock(llvm::BasicBlock const*, llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Instruction, true, false, void>, false, true>, std::vector<llvm::BasicBlock const*, std::allocator<llvm::BasicBlock const*> >&)
   21,639,919 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
   21,555,504 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs:rustc_codegen_ssa::debuginfo::type_names::push_unqualified_item_name
   21,281,107 ( 0.11%)  ???:(anonymous namespace)::X86AsmBackend::emitInstructionBegin(llvm::MCObjectStreamer&, llvm::MCInst const&)
   21,146,807 ( 0.11%)  ???:(anonymous namespace)::RemoveRedundantDebugValues::runOnMachineFunction(llvm::MachineFunction&)
   21,136,958 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
   20,999,385 ( 0.11%)  ???:llvm::X86TargetMachine::getSubtargetImpl(llvm::Function const&) const
   20,984,033 ( 0.11%)  ???:llvm::TargetLoweringBase::ArgListEntry::setAttributes(llvm::CallBase const*, unsigned int)
   20,851,323 ( 0.10%)  ???:(anonymous namespace)::VectorLegalizer::LegalizeOp(llvm::SDValue) [clone .llvm.3993696295502019106]
   20,829,208 ( 0.10%)  ???:(anonymous namespace)::RegAllocFast::freePhysReg(unsigned short)
   20,690,528 ( 0.10%)  ???:(anonymous namespace)::RegAllocFast::isRegUsedInInstr(unsigned short, bool) const
   20,604,025 ( 0.10%)  ./nptl/pthread_rwlock_common.c:pthread_rwlock_unlock
   20,579,823 ( 0.10%)  ???:bool llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation*, llvm::detail::DenseSetEmpty, llvm::MDNodeInfo<llvm::DILocation>, llvm::detail::DenseSetPair<llvm::DILocation*> >, llvm::DILocation*, llvm::detail::DenseSetEmpty, llvm::MDNodeInfo<llvm::DILocation>, llvm::detail::DenseSetPair<llvm::DILocation*> >::LookupBucketFor<llvm::DILocation*>(llvm::DILocation* const&, llvm::detail::DenseSetPair<llvm::DILocation*> const*&) const
   20,112,891 ( 0.10%)  ???:llvm::MCSymbolRefExpr::create(llvm::MCSymbol const*, llvm::MCSymbolRefExpr::VariantKind, llvm::MCContext&, llvm::SMLoc)
   20,087,792 ( 0.10%)  ???:llvm::LexicalScopes::extractLexicalScopes(llvm::SmallVectorImpl<std::pair<llvm::MachineInstr const*, llvm::MachineInstr const*> >&, llvm::DenseMap<llvm::MachineInstr const*, llvm::LexicalScope*, llvm::DenseMapInfo<llvm::MachineInstr const*>, llvm::detail::DenseMapPair<llvm::MachineInstr const*, llvm::LexicalScope*> >&)

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/fmt/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 177 ----------------------------------------
        .               ///     f.write_fmt(format_args!("{}", s))
        .               /// }
        .               ///
        .               /// let mut buf = String::new();
        .               /// writer(&mut buf, "world").unwrap();
        .               /// assert_eq!(&buf, "world");
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
       30 ( 0.00%)      fn write_fmt(mut self: &mut Self, args: Arguments<'_>) -> Result {
6,012,906 ( 0.03%)          write(&mut self, args)
       30 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "fmt_write_blanket_impl", since = "1.4.0")]
        .           impl<W: Write + ?Sized> Write for &mut W {
4,085,880 ( 0.02%)      fn write_str(&mut self, s: &str) -> Result {
2,184,322 ( 0.01%)          (**self).write_str(s)
4,260,238 ( 0.02%)      }
        .           
    3,310 ( 0.00%)      fn write_char(&mut self, c: char) -> Result {
    1,913 ( 0.00%)          (**self).write_char(c)
    5,241 ( 0.00%)      }
        .           
        .               fn write_fmt(&mut self, args: Arguments<'_>) -> Result {
        .                   (**self).write_fmt(args)
        .               }
        .           }
        .           
        .           /// Configuration for formatting.
        .           ///
-- line 206 ----------------------------------------
-- line 228 ----------------------------------------
        .               ///
        .               /// This can be used as a micro-optimization in cases where a full `Arguments`
        .               /// structure (as created by `format_args!`) is not necessary; `Arguments`
        .               /// is a little more expensive to use in simple formatting scenarios.
        .               ///
        .               /// Currently not intended for use outside of the standard library.
        .               #[unstable(feature = "fmt_internals", reason = "internal to standard library", issue = "none")]
        .               #[doc(hidden)]
  202,398 ( 0.00%)      pub fn new(buf: &'a mut (dyn Write + 'a)) -> Formatter<'a> {
4,470,780 ( 0.02%)          Formatter {
        .                       flags: 0,
        .                       fill: ' ',
        .                       align: rt::v1::Alignment::Unknown,
        .                       width: None,
        .                       precision: None,
        .                       buf,
        .                   }
  101,199 ( 0.00%)      }
        .           }
        .           
        .           // NB. Argument is essentially an optimized partially applied formatting function,
        .           // equivalent to `exists T.(&T, fn(&T, &mut Formatter<'_>) -> Result`.
        .           
        .           extern "C" {
        .               type Opaque;
        .           }
-- line 253 ----------------------------------------
-- line 306 ----------------------------------------
        .               // SAFETY: ptr is a reference
        .               let _v: usize = unsafe { crate::ptr::read_volatile(ptr) };
        .               loop {}
        .           };
        .           
        .           impl<'a> ArgumentV1<'a> {
        .               #[doc(hidden)]
        .               #[unstable(feature = "fmt_internals", reason = "internal to format_args!", issue = "none")]
    1,444 ( 0.00%)      pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
        .                   // SAFETY: `mem::transmute(x)` is safe because
        .                   //     1. `&'b T` keeps the lifetime it originated with `'b`
        .                   //              (so as to not have an unbounded lifetime)
        .                   //     2. `&'b T` and `&'b Opaque` have the same memory layout
        .                   //              (when `T` is `Sized`, as it is here)
        .                   // `mem::transmute(f)` is safe since `fn(&T, &mut Formatter<'_>) -> Result`
        .                   // and `fn(&Opaque, &mut Formatter<'_>) -> Result` have the same ABI
        .                   // (as long as `T` is `Sized`)
    2,888 ( 0.00%)          unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
    1,444 ( 0.00%)      }
        .           
        .               #[doc(hidden)]
        .               #[unstable(feature = "fmt_internals", reason = "internal to format_args!", issue = "none")]
        .               pub fn from_usize(x: &usize) -> ArgumentV1<'_> {
        .                   ArgumentV1::new(x, USIZE_MARKER)
        .               }
        .           
        .               fn as_usize(&self) -> Option<usize> {
-- line 332 ----------------------------------------
-- line 353 ----------------------------------------
        .           
        .           impl<'a> Arguments<'a> {
        .               /// When using the format_args!() macro, this function is used to generate the
        .               /// Arguments structure.
        .               #[doc(hidden)]
        .               #[inline]
        .               #[unstable(feature = "fmt_internals", reason = "internal to format_args!", issue = "none")]
        .               #[rustc_const_unstable(feature = "const_fmt_arguments_new", issue = "none")]
    3,861 ( 0.00%)      pub const fn new_v1(pieces: &'a [&'static str], args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {
    5,616 ( 0.00%)          if pieces.len() < args.len() || pieces.len() > args.len() + 1 {
        .                       panic!("invalid args");
        .                   }
1,285,891 ( 0.01%)          Arguments { pieces, fmt: None, args }
      702 ( 0.00%)      }
        .           
        .               /// This function is used to specify nonstandard formatting parameters.
        .               ///
        .               /// An `UnsafeArg` is required because the following invariants must be held
        .               /// in order for this function to be safe:
        .               /// 1. The `pieces` slice must be at least as long as `fmt`.
        .               /// 2. Every [`rt::v1::Argument::position`] value within `fmt` must be a
        .               ///    valid index of `args`.
-- line 374 ----------------------------------------
-- line 379 ----------------------------------------
        .               #[unstable(feature = "fmt_internals", reason = "internal to format_args!", issue = "none")]
        .               #[rustc_const_unstable(feature = "const_fmt_arguments_new", issue = "none")]
        .               pub const fn new_v1_formatted(
        .                   pieces: &'a [&'static str],
        .                   args: &'a [ArgumentV1<'a>],
        .                   fmt: &'a [rt::v1::Argument],
        .                   _unsafe_arg: UnsafeArg,
        .               ) -> Arguments<'a> {
  242,096 ( 0.00%)          Arguments { pieces, fmt: Some(fmt), args }
        .               }
        .           
        .               /// Estimates the length of the formatted text.
        .               ///
        .               /// This is intended to be used for setting initial `String` capacity
        .               /// when using `format!`. Note: this is neither the lower nor upper bound.
        .               #[doc(hidden)]
        .               #[inline]
        .               #[unstable(feature = "fmt_internals", reason = "internal to format_args!", issue = "none")]
        .               pub fn estimated_capacity(&self) -> usize {
        .                   let pieces_length: usize = self.pieces.iter().map(|x| x.len()).sum();
        .           
   84,656 ( 0.00%)          if self.args.is_empty() {
        .                       pieces_length
  338,608 ( 0.00%)          } else if !self.pieces.is_empty() && self.pieces[0].is_empty() && pieces_length < 16 {
        .                       // If the format string starts with an argument,
        .                       // don't preallocate anything, unless length
        .                       // of pieces is significant.
        .                       0
        .                   } else {
        .                       // There are some arguments, so any additional push
        .                       // will reallocate the string. To avoid that,
        .                       // we're "pre-doubling" the capacity here.
-- line 410 ----------------------------------------
-- line 1146 ----------------------------------------
        .           /// let mut output = String::new();
        .           /// write!(&mut output, "Hello {}!", "world")
        .           ///     .expect("Error occurred while trying to write in String");
        .           /// assert_eq!(output, "Hello world!");
        .           /// ```
        .           ///
        .           /// [`write!`]: crate::write!
        .           #[stable(feature = "rust1", since = "1.0.0")]
5,795,379 ( 0.03%)  pub fn write(output: &mut dyn Write, args: Arguments<'_>) -> Result {
        .               let mut formatter = Formatter::new(output);
        .               let mut idx = 0;
        .           
1,931,793 ( 0.01%)      match args.fmt {
        .                   None => {
        .                       // We can use default formatting parameters for all arguments.
  625,748 ( 0.00%)              for (i, arg) in args.args.iter().enumerate() {
        .                           // SAFETY: args.args and args.pieces come from the same Arguments,
        .                           // which guarantees the indexes are always within bounds.
        .                           let piece = unsafe { args.pieces.get_unchecked(i) };
1,018,568 ( 0.01%)                  if !piece.is_empty() {
1,137,336 ( 0.01%)                      formatter.buf.write_str(*piece)?;
        .                           }
2,546,420 ( 0.01%)                  (arg.formatter)(arg.value, &mut formatter)?;
        .                           idx += 1;
        .                       }
        .                   }
        .                   Some(fmt) => {
        .                       // Every spec has a corresponding argument that is preceded by
        .                       // a string piece.
        .                       for (i, arg) in fmt.iter().enumerate() {
        .                           // SAFETY: fmt and args.pieces come from the same Arguments,
        .                           // which guarantees the indexes are always within bounds.
        .                           let piece = unsafe { args.pieces.get_unchecked(i) };
   36,508 ( 0.00%)                  if !piece.is_empty() {
   50,004 ( 0.00%)                      formatter.buf.write_str(*piece)?;
        .                           }
        .                           // SAFETY: arg and args.args come from the same Arguments,
        .                           // which guarantees the indexes are always within bounds.
   54,762 ( 0.00%)                  unsafe { run(&mut formatter, arg, args.args) }?;
        .                           idx += 1;
        .                       }
        .                   }
        .               }
        .           
        .               // There can be only one trailing string piece left.
  643,931 ( 0.00%)      if let Some(piece) = args.pieces.get(idx) {
2,332,554 ( 0.01%)          formatter.buf.write_str(*piece)?;
        .               }
        .           
        .               Ok(())
5,151,448 ( 0.03%)  }
        .           
        .           unsafe fn run(fmt: &mut Formatter<'_>, arg: &rt::v1::Argument, args: &[ArgumentV1<'_>]) -> Result {
   36,508 ( 0.00%)      fmt.fill = arg.format.fill;
   36,508 ( 0.00%)      fmt.align = arg.format.align;
   36,508 ( 0.00%)      fmt.flags = arg.format.flags;
        .               // SAFETY: arg and args come from the same Arguments,
        .               // which guarantees the indexes are always within bounds.
        .               unsafe {
   73,016 ( 0.00%)          fmt.width = getcount(args, &arg.format.width);
   73,016 ( 0.00%)          fmt.precision = getcount(args, &arg.format.precision);
        .               }
        .           
        .               // Extract the correct argument
        .               debug_assert!(arg.position < args.len());
        .               // SAFETY: arg and args come from the same Arguments,
        .               // which guarantees its index is always within bounds.
   18,254 ( 0.00%)      let value = unsafe { args.get_unchecked(arg.position) };
        .           
        .               // Then actually do some printing
   54,762 ( 0.00%)      (value.formatter)(value.value, fmt)
        .           }
        .           
        .           unsafe fn getcount(args: &[ArgumentV1<'_>], cnt: &rt::v1::Count) -> Option<usize> {
  109,666 ( 0.00%)      match *cnt {
        .                   rt::v1::Count::Is(n) => Some(n),
        .                   rt::v1::Count::Implied => None,
        .                   rt::v1::Count::Param(i) => {
        .                       debug_assert!(i < args.len());
        .                       // SAFETY: cnt and args come from the same Arguments,
        .                       // which guarantees this index is always within bounds.
        .                       unsafe { args.get_unchecked(i).as_usize() }
        .                   }
-- line 1228 ----------------------------------------
-- line 1312 ----------------------------------------
        .               ///
        .               /// assert_eq!(&format!("{}", Foo::new(2)), "2");
        .               /// assert_eq!(&format!("{}", Foo::new(-1)), "-1");
        .               /// assert_eq!(&format!("{}", Foo::new(0)), "0");
        .               /// assert_eq!(&format!("{:#}", Foo::new(-1)), "-Foo 1");
        .               /// assert_eq!(&format!("{:0>#8}", Foo::new(-1)), "00-Foo 1");
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
2,559,204 ( 0.01%)      pub fn pad_integral(&mut self, is_nonnegative: bool, prefix: &str, buf: &str) -> Result {
        .                   let mut width = buf.len();
        .           
        .                   let mut sign = None;
  426,534 ( 0.00%)          if !is_nonnegative {
        .                       sign = Some('-');
        .                       width += 1;
  213,267 ( 0.00%)          } else if self.sign_plus() {
        .                       sign = Some('+');
  213,267 ( 0.00%)              width += 1;
        .                   }
        .           
  213,267 ( 0.00%)          let prefix = if self.alternate() {
        .                       width += prefix.chars().count();
        .                       Some(prefix)
        .                   } else {
        .                       None
        .                   };
        .           
        .                   // Writes the sign if it exists, and then the prefix if it was requested
        .                   #[inline(never)]
1,279,602 ( 0.01%)          fn write_prefix(f: &mut Formatter<'_>, sign: Option<char>, prefix: Option<&str>) -> Result {
  426,534 ( 0.00%)              if let Some(c) = sign {
        .                           f.buf.write_char(c)?;
        .                       }
  426,534 ( 0.00%)              if let Some(prefix) = prefix { f.buf.write_str(prefix) } else { Ok(()) }
  853,068 ( 0.00%)          }
        .           
        .                   // The `width` field is more of a `min-width` parameter at this point.
  426,534 ( 0.00%)          match self.width {
        .                       // If there's no minimum length requirements then we can just
        .                       // write the bytes.
        .                       None => {
1,365,588 ( 0.01%)                  write_prefix(self, sign, prefix)?;
  975,420 ( 0.00%)                  self.buf.write_str(buf)
        .                       }
        .                       // Check if we're over the minimum width, if so then we can also
        .                       // just write the bytes.
   54,549 ( 0.00%)              Some(min) if width >= min => {
  136,056 ( 0.00%)                  write_prefix(self, sign, prefix)?;
   51,021 ( 0.00%)                  self.buf.write_str(buf)
        .                       }
        .                       // The sign and prefix goes before the padding if the fill character
        .                       // is zero
    1,176 ( 0.00%)              Some(min) if self.sign_aware_zero_pad() => {
        .                           let old_fill = crate::mem::replace(&mut self.fill, '0');
        .                           let old_align = crate::mem::replace(&mut self.align, rt::v1::Alignment::Right);
    8,232 ( 0.00%)                  write_prefix(self, sign, prefix)?;
    5,880 ( 0.00%)                  let post_padding = self.padding(min - width, rt::v1::Alignment::Right)?;
    8,232 ( 0.00%)                  self.buf.write_str(buf)?;
        .                           post_padding.write(self)?;
    2,352 ( 0.00%)                  self.fill = old_fill;
    3,528 ( 0.00%)                  self.align = old_align;
        .                           Ok(())
        .                       }
        .                       // Otherwise, the sign and prefix goes after the padding
        .                       Some(min) => {
        .                           let post_padding = self.padding(min - width, rt::v1::Alignment::Right)?;
        .                           write_prefix(self, sign, prefix)?;
        .                           self.buf.write_str(buf)?;
        .                           post_padding.write(self)
        .                       }
        .                   }
   10,584 ( 0.00%)      }
        .           
        .               /// This function takes a string slice and emits it to the internal buffer
        .               /// after applying the relevant formatting flags specified. The flags
        .               /// recognized for generic strings are:
        .               ///
        .               /// * width - the minimum width of what to emit
        .               /// * fill/align - what to emit and where to emit it if the string
        .               ///                provided needs to be padded
-- line 1391 ----------------------------------------
-- line 1406 ----------------------------------------
        .               ///         formatter.pad("Foo")
        .               ///     }
        .               /// }
        .               ///
        .               /// assert_eq!(&format!("{:<4}", Foo), "Foo ");
        .               /// assert_eq!(&format!("{:0>4}", Foo), "0Foo");
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
2,499,345 ( 0.01%)      pub fn pad(&mut self, s: &str) -> Result {
        .                   // Make sure there's a fast path up front
  833,115 ( 0.00%)          if self.width.is_none() && self.precision.is_none() {
        .                       return self.buf.write_str(s);
        .                   }
        .                   // The `precision` field can be interpreted as a `max-width` for the
        .                   // string being formatted.
        .                   let s = if let Some(max) = self.precision {
        .                       // If our string is longer that the precision, then we must have
        .                       // truncation. However other flags like `fill`, `width` and `align`
        .                       // must act as always.
-- line 1424 ----------------------------------------
-- line 1461 ----------------------------------------
        .               /// Write the pre-padding and return the unwritten post-padding. Callers are
        .               /// responsible for ensuring post-padding is written after the thing that is
        .               /// being padded.
        .               pub(crate) fn padding(
        .                   &mut self,
        .                   padding: usize,
        .                   default: rt::v1::Alignment,
        .               ) -> result::Result<PostPadding, Error> {
    2,352 ( 0.00%)          let align = match self.align {
        .                       rt::v1::Alignment::Unknown => default,
        .                       _ => self.align,
        .                   };
        .           
    4,704 ( 0.00%)          let (pre_pad, post_pad) = match align {
        .                       rt::v1::Alignment::Left => (0, padding),
        .                       rt::v1::Alignment::Right | rt::v1::Alignment::Unknown => (padding, 0),
        .                       rt::v1::Alignment::Center => (padding / 2, (padding + 1) / 2),
        .                   };
        .           
    3,528 ( 0.00%)          for _ in 0..pre_pad {
    6,040 ( 0.00%)              self.buf.write_char(self.fill)?;
        .                   }
        .           
        .                   Ok(PostPadding::new(self.fill, post_pad))
        .               }
        .           
        .               /// Takes the formatted parts and applies the padding.
        .               /// Assumes that the caller already has rendered the parts with required precision,
        .               /// so that `self.precision` can be ignored.
-- line 1489 ----------------------------------------
-- line 1591 ----------------------------------------
        .               ///     }
        .               /// }
        .               ///
        .               /// assert_eq!(&format!("{}", Foo), "Foo");
        .               /// assert_eq!(&format!("{:0>8}", Foo), "Foo");
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn write_str(&mut self, data: &str) -> Result {
2,659,020 ( 0.01%)          self.buf.write_str(data)
        .               }
        .           
        .               /// Writes some formatted information into this instance.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::fmt;
-- line 1607 ----------------------------------------
-- line 1613 ----------------------------------------
        .               ///         formatter.write_fmt(format_args!("Foo {}", self.0))
        .               ///     }
        .               /// }
        .               ///
        .               /// assert_eq!(&format!("{}", Foo(-1)), "Foo -1");
        .               /// assert_eq!(&format!("{:0>8}", Foo(2)), "Foo 2");
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
   70,751 ( 0.00%)      pub fn write_fmt(&mut self, fmt: Arguments<'_>) -> Result {
  849,012 ( 0.00%)          write(self.buf, fmt)
  141,502 ( 0.00%)      }
        .           
        .               /// Flags for formatting
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_deprecated(
        .                   since = "1.24.0",
        .                   reason = "use the `sign_plus`, `sign_minus`, `alternate`, \
        .                             or `sign_aware_zero_pad` methods instead"
-- line 1631 ----------------------------------------
-- line 1793 ----------------------------------------
        .               /// }
        .               ///
        .               /// assert_eq!(&format!("{:+}", Foo(23)), "Foo(+23)");
        .               /// assert_eq!(&format!("{}", Foo(23)), "Foo(23)");
        .               /// ```
        .               #[must_use]
        .               #[stable(feature = "fmt_flags", since = "1.5.0")]
        .               pub fn sign_plus(&self) -> bool {
  639,801 ( 0.00%)          self.flags & (1 << FlagV1::SignPlus as u32) != 0
        .               }
        .           
        .               /// Determines if the `-` flag was specified.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::fmt;
-- line 1809 ----------------------------------------
-- line 1850 ----------------------------------------
        .               /// }
        .               ///
        .               /// assert_eq!(&format!("{:#}", Foo(23)), "Foo(23)");
        .               /// assert_eq!(&format!("{}", Foo(23)), "23");
        .               /// ```
        .               #[must_use]
        .               #[stable(feature = "fmt_flags", since = "1.5.0")]
        .               pub fn alternate(&self) -> bool {
  213,267 ( 0.00%)          self.flags & (1 << FlagV1::Alternate as u32) != 0
        .               }
        .           
        .               /// Determines if the `0` flag was specified.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::fmt;
-- line 1866 ----------------------------------------
-- line 1876 ----------------------------------------
        .               ///     }
        .               /// }
        .               ///
        .               /// assert_eq!(&format!("{:04}", Foo(23)), "23");
        .               /// ```
        .               #[must_use]
        .               #[stable(feature = "fmt_flags", since = "1.5.0")]
        .               pub fn sign_aware_zero_pad(&self) -> bool {
    1,176 ( 0.00%)          self.flags & (1 << FlagV1::SignAwareZeroPad as u32) != 0
        .               }
        .           
        .               // FIXME: Decide what public API we want for these two flags.
        .               // https://github.com/rust-lang/rust/issues/48584
        .               fn debug_lower_hex(&self) -> bool {
        .                   self.flags & (1 << FlagV1::DebugLowerHex as u32) != 0
        .               }
        .           
-- line 1892 ----------------------------------------
-- line 2076 ----------------------------------------
        .           
        .           #[stable(since = "1.2.0", feature = "formatter_write")]
        .           impl Write for Formatter<'_> {
        .               fn write_str(&mut self, s: &str) -> Result {
        .                   self.buf.write_str(s)
        .               }
        .           
        .               fn write_char(&mut self, c: char) -> Result {
    6,237 ( 0.00%)          self.buf.write_char(c)
        .               }
        .           
        .               fn write_fmt(&mut self, args: Arguments<'_>) -> Result {
        .                   write(self.buf, args)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
-- line 2092 ----------------------------------------
-- line 2098 ----------------------------------------
        .           
        .           // Implementations of the core formatting traits
        .           
        .           macro_rules! fmt_refs {
        .               ($($tr:ident),*) => {
        .                   $(
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<T: ?Sized + $tr> $tr for &T {
  273,215 ( 0.00%)              fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
        .                   }
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<T: ?Sized + $tr> $tr for &mut T {
    1,864 ( 0.00%)              fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
        .                   }
        .                   )*
        .               }
        .           }
        .           
        .           fmt_refs! { Debug, Display, Octal, Binary, LowerHex, UpperHex, LowerExp, UpperExp }
        .           
        .           #[unstable(feature = "never_type", issue = "35121")]
-- line 2118 ----------------------------------------
-- line 2166 ----------------------------------------
        .                   }
        .                   f.write_str(&self[from..])?;
        .                   f.write_char('"')
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl Display for str {
  833,106 ( 0.00%)      fn fmt(&self, f: &mut Formatter<'_>) -> Result {
  555,416 ( 0.00%)          f.pad(self)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl Debug for char {
        .               fn fmt(&self, f: &mut Formatter<'_>) -> Result {
        .                   f.write_char('\'')?;
        .                   for c in self.escape_debug_ext(EscapeDebugExtArgs {
-- line 2183 ----------------------------------------
-- line 2188 ----------------------------------------
        .                       f.write_char(c)?
        .                   }
        .                   f.write_char('\'')
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl Display for char {
       18 ( 0.00%)      fn fmt(&self, f: &mut Formatter<'_>) -> Result {
       36 ( 0.00%)          if f.width.is_none() && f.precision.is_none() {
       18 ( 0.00%)              f.write_char(*self)
        .                   } else {
        .                       f.pad(self.encode_utf8(&mut [0; 4]))
        .                   }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: ?Sized> Pointer for *const T {
-- line 2206 ----------------------------------------

8,189,610 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/fmt/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 118 ----------------------------------------
         .               /// let a = [1, 2, 3];
         .               /// assert_eq!(a.len(), 3);
         .               /// ```
         .               #[lang = "slice_len_fn"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_len", since = "1.39.0")]
         .               #[inline]
         .               // SAFETY: const sound because we transmute out the length field as a usize (which it must be)
     8,898 ( 0.00%)      pub const fn len(&self) -> usize {
         .                   // FIXME: Replace with `crate::ptr::metadata(self)` when that is const-stable.
         .                   // As of this writing this causes a "Const-stable functions can only call other
         .                   // const-stable functions" error.
         .           
         .                   // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T
         .                   // and PtrComponents<T> have the same memory layouts. Only std can make this
         .                   // guarantee.
     8,898 ( 0.00%)          unsafe { crate::ptr::PtrRepr { const_ptr: self }.components.metadata }
     5,932 ( 0.00%)      }
         .           
         .               /// Returns `true` if the slice has a length of 0.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let a = [1, 2, 3];
         .               /// assert!(!a.is_empty());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
         .               #[inline]
         .               pub const fn is_empty(&self) -> bool {
 1,907,011 ( 0.01%)          self.len() == 0
         .               }
         .           
         .               /// Returns the first element of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 158 ----------------------------------------
         .               /// assert_eq!(Some(&10), v.first());
         .               ///
         .               /// let w: &[i32] = &[];
         .               /// assert_eq!(None, w.first());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
        36 ( 0.00%)      pub const fn first(&self) -> Option<&T> {
     3,997 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
        27 ( 0.00%)      }
         .           
         .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
         .               ///
-- line 176 ----------------------------------------
-- line 178 ----------------------------------------
         .               ///     *first = 5;
         .               /// }
         .               /// assert_eq!(x, &[5, 1, 2]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
         .               #[inline]
         .               pub const fn first_mut(&mut self) -> Option<&mut T> {
     1,336 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
         .               }
         .           
         .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 197 ----------------------------------------
         .               ///     assert_eq!(first, &0);
         .               ///     assert_eq!(elements, &[1, 2]);
         .               /// }
         .               /// ```
         .               #[stable(feature = "slice_splits", since = "1.5.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn split_first(&self) -> Option<(&T, &[T])> {
       201 ( 0.00%)          if let [first, tail @ ..] = self { Some((first, tail)) } else { None }
         .               }
         .           
         .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 213 ----------------------------------------
-- line 237 ----------------------------------------
         .               ///     assert_eq!(last, &2);
         .               ///     assert_eq!(elements, &[0, 1]);
         .               /// }
         .               /// ```
         .               #[stable(feature = "slice_splits", since = "1.5.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
    21,916 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
         .               }
         .           
         .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 275 ----------------------------------------
         .               /// assert_eq!(Some(&30), v.last());
         .               ///
         .               /// let w: &[i32] = &[];
         .               /// assert_eq!(None, w.last());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
        10 ( 0.00%)      pub const fn last(&self) -> Option<&T> {
   221,697 ( 0.00%)          if let [.., last] = self { Some(last) } else { None }
         6 ( 0.00%)      }
         .           
         .               /// Returns a mutable pointer to the last item in the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
         .               ///
-- line 293 ----------------------------------------
-- line 295 ----------------------------------------
         .               ///     *last = 10;
         .               /// }
         .               /// assert_eq!(x, &[0, 1, 10]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
         .               #[inline]
         .               pub const fn last_mut(&mut self) -> Option<&mut T> {
 1,159,536 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
         .               }
         .           
         .               /// Returns a reference to an element or subslice depending on the type of
         .               /// index.
         .               ///
         .               /// - If given a position, returns a reference to the element at that
         .               ///   position or `None` if out of bounds.
         .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 317 ----------------------------------------
         .               /// let v = [10, 40, 30];
         .               /// assert_eq!(Some(&40), v.get(1));
         .               /// assert_eq!(Some(&[10, 40][..]), v.get(0..2));
         .               /// assert_eq!(None, v.get(3));
         .               /// assert_eq!(None, v.get(0..4));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
     4,568 ( 0.00%)      pub fn get<I>(&self, index: I) -> Option<&I::Output>
         .               where
         .                   I: SliceIndex<Self>,
         .               {
     1,142 ( 0.00%)          index.get(self)
     1,142 ( 0.00%)      }
         .           
         .               /// Returns a mutable reference to an element or subslice depending on the
         .               /// type of index (see [`get`]) or `None` if the index is out of bounds.
         .               ///
         .               /// [`get`]: slice::get
         .               ///
         .               /// # Examples
         .               ///
-- line 338 ----------------------------------------
-- line 372 ----------------------------------------
         .               /// let x = &[1, 2, 4];
         .               ///
         .               /// unsafe {
         .               ///     assert_eq!(x.get_unchecked(1), &2);
         .               /// }
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
        96 ( 0.00%)      pub unsafe fn get_unchecked<I>(&self, index: I) -> &I::Output
         .               where
         .                   I: SliceIndex<Self>,
         .               {
         .                   // SAFETY: the caller must uphold most of the safety requirements for `get_unchecked`;
         .                   // the slice is dereferenceable because `self` is a safe reference.
         .                   // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.
        36 ( 0.00%)          unsafe { &*index.get_unchecked(self) }
        24 ( 0.00%)      }
         .           
         .               /// Returns a mutable reference to an element or subslice, without doing
         .               /// bounds checking.
         .               ///
         .               /// For a safe alternative see [`get_mut`].
         .               ///
         .               /// # Safety
         .               ///
-- line 396 ----------------------------------------
-- line 408 ----------------------------------------
         .               /// unsafe {
         .               ///     let elem = x.get_unchecked_mut(1);
         .               ///     *elem = 13;
         .               /// }
         .               /// assert_eq!(x, &[1, 13, 4]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
       240 ( 0.00%)      pub unsafe fn get_unchecked_mut<I>(&mut self, index: I) -> &mut I::Output
         .               where
         .                   I: SliceIndex<Self>,
         .               {
         .                   // SAFETY: the caller must uphold the safety requirements for `get_unchecked_mut`;
         .                   // the slice is dereferenceable because `self` is a safe reference.
         .                   // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.
        72 ( 0.00%)          unsafe { &mut *index.get_unchecked_mut(self) }
        60 ( 0.00%)      }
         .           
         .               /// Returns a raw pointer to the slice's buffer.
         .               ///
         .               /// The caller must ensure that the slice outlives the pointer this
         .               /// function returns, or else it will end up pointing to garbage.
         .               ///
         .               /// The caller must also ensure that the memory the pointer (non-transitively) points to
         .               /// is never written to (except inside an `UnsafeCell`) using this pointer or any pointer
-- line 432 ----------------------------------------
-- line 447 ----------------------------------------
         .               ///     }
         .               /// }
         .               /// ```
         .               ///
         .               /// [`as_mut_ptr`]: slice::as_mut_ptr
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
         .               #[inline]
   251,620 ( 0.00%)      pub const fn as_ptr(&self) -> *const T {
 2,618,067 ( 0.01%)          self as *const [T] as *const T
   125,810 ( 0.00%)      }
         .           
         .               /// Returns an unsafe mutable pointer to the slice's buffer.
         .               ///
         .               /// The caller must ensure that the slice outlives the pointer this
         .               /// function returns, or else it will end up pointing to garbage.
         .               ///
         .               /// Modifying the container referenced by this slice may cause its buffer
         .               /// to be reallocated, which would also make any pointers to it invalid.
-- line 465 ----------------------------------------
-- line 475 ----------------------------------------
         .               ///         *x_ptr.add(i) += 2;
         .               ///     }
         .               /// }
         .               /// assert_eq!(x, &[3, 4, 6]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline]
     3,116 ( 0.00%)      pub const fn as_mut_ptr(&mut self) -> *mut T {
        10 ( 0.00%)          self as *mut [T] as *mut T
     1,558 ( 0.00%)      }
         .           
         .               /// Returns the two raw pointers spanning the slice.
         .               ///
         .               /// The returned range is half-open, which means that the end pointer
         .               /// points *one past* the last element of the slice. This way, an empty
         .               /// slice is represented by two equal pointers, and the difference between
         .               /// the two pointers represents the size of the slice.
         .               ///
-- line 493 ----------------------------------------
-- line 582 ----------------------------------------
         .               /// v.swap(2, 4);
         .               /// assert!(v == ["a", "b", "e", "d", "c"]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
         .               #[inline]
         .               #[track_caller]
         .               pub const fn swap(&mut self, a: usize, b: usize) {
    42,756 ( 0.00%)          let _ = &self[a];
   133,454 ( 0.00%)          let _ = &self[b];
         .           
         .                   // SAFETY: we just checked that both `a` and `b` are in bounds
         .                   unsafe { self.swap_unchecked(a, b) }
         .               }
         .           
         .               /// Swaps two elements in the slice, without doing bounds checking.
         .               ///
         .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 677 ----------------------------------------
         .           
         .                       // Because this function is first compiled in isolation,
         .                       // this check tells LLVM that the indexing below is
         .                       // in-bounds.  Then after inlining -- once the actual
         .                       // lengths of the slices are known -- it's removed.
         .                       let (a, b) = (&mut a[..n], &mut b[..n]);
         .           
         .                       for i in 0..n {
    35,411 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
         .                       }
         .                   }
         .               }
         .           
         .               /// Returns an iterator over the slice.
         .               ///
         .               /// # Examples
         .               ///
-- line 693 ----------------------------------------
-- line 697 ----------------------------------------
         .               ///
         .               /// assert_eq!(iterator.next(), Some(&1));
         .               /// assert_eq!(iterator.next(), Some(&2));
         .               /// assert_eq!(iterator.next(), Some(&4));
         .               /// assert_eq!(iterator.next(), None);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
    98,286 ( 0.00%)      pub fn iter(&self) -> Iter<'_, T> {
    98,286 ( 0.00%)          Iter::new(self)
    65,524 ( 0.00%)      }
         .           
         .               /// Returns an iterator that allows modifying each value.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [1, 2, 4];
         .               /// for elem in x.iter_mut() {
         .               ///     *elem += 2;
         .               /// }
         .               /// assert_eq!(x, &[3, 4, 6]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
     2,235 ( 0.00%)      pub fn iter_mut(&mut self) -> IterMut<'_, T> {
     2,235 ( 0.00%)          IterMut::new(self)
     1,490 ( 0.00%)      }
         .           
         .               /// Returns an iterator over all contiguous windows of length
         .               /// `size`. The windows overlap. If the slice is shorter than
         .               /// `size`, the iterator returns no values.
         .               ///
         .               /// # Panics
         .               ///
         .               /// Panics if `size` is 0.
-- line 732 ----------------------------------------
-- line 1499 ----------------------------------------
         .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
         .               ///     assert_eq!(right, []);
         .               /// }
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
         .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
       312 ( 0.00%)          assert!(mid <= self.len());
         .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
         .                   // fulfills the requirements of `from_raw_parts_mut`.
         .                   unsafe { self.split_at_unchecked(mid) }
         .               }
         .           
         .               /// Divides one mutable slice into two at an index.
         .               ///
         .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
         .               /// left[1] = 2;
         .               /// right[1] = 4;
         .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
         .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
    28,948 ( 0.00%)          assert!(mid <= self.len());
         .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
         .                   // fulfills the requirements of `from_raw_parts_mut`.
         .                   unsafe { self.split_at_mut_unchecked(mid) }
         .               }
         .           
         .               /// Divides one slice into two at an index, without doing bounds checking.
         .               ///
         .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
         .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
         .                   let len = self.len();
         .                   let ptr = self.as_mut_ptr();
         .           
         .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
         .                   //
         .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
         .                   // is fine.
     5,644 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
         .               }
         .           
         .               /// Divides one slice into an array and a remainder slice at an index.
         .               ///
         .               /// The array will contain all indices from `[0, N)` (excluding
         .               /// the index `N` itself) and the slice will contain all
         .               /// indices from `[N, len)` (excluding the index `len` itself).
         .               ///
-- line 1644 ----------------------------------------
-- line 2109 ----------------------------------------
         .               ///
         .               /// ```
         .               /// let v = [String::from("hello"), String::from("world")]; // slice of `String`
         .               /// assert!(v.iter().any(|e| e == "hello")); // search with `&str`
         .               /// assert!(!v.iter().any(|e| e == "hi"));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
        40 ( 0.00%)      pub fn contains(&self, x: &T) -> bool
         .               where
         .                   T: PartialEq,
         .               {
       306 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
        20 ( 0.00%)      }
         .           
         .               /// Returns `true` if `needle` is a prefix of the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
         .               /// assert!(v.starts_with(&[10]));
-- line 2130 ----------------------------------------
-- line 2137 ----------------------------------------
         .               ///
         .               /// ```
         .               /// let v = &[10, 40, 30];
         .               /// assert!(v.starts_with(&[]));
         .               /// let v: &[u8] = &[];
         .               /// assert!(v.starts_with(&[]));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
    14,175 ( 0.00%)      pub fn starts_with(&self, needle: &[T]) -> bool
         .               where
         .                   T: PartialEq,
         .               {
     6,075 ( 0.00%)          let n = needle.len();
   166,435 ( 0.00%)          self.len() >= n && needle == &self[..n]
    10,125 ( 0.00%)      }
         .           
         .               /// Returns `true` if `needle` is a suffix of the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
         .               /// assert!(v.ends_with(&[30]));
-- line 2159 ----------------------------------------
-- line 2166 ----------------------------------------
         .               ///
         .               /// ```
         .               /// let v = &[10, 40, 30];
         .               /// assert!(v.ends_with(&[]));
         .               /// let v: &[u8] = &[];
         .               /// assert!(v.ends_with(&[]));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
     1,092 ( 0.00%)      pub fn ends_with(&self, needle: &[T]) -> bool
         .               where
         .                   T: PartialEq,
         .               {
     1,404 ( 0.00%)          let (m, n) = (self.len(), needle.len());
   803,267 ( 0.00%)          m >= n && needle == &self[m - n..]
       780 ( 0.00%)      }
         .           
         .               /// Returns a subslice with the prefix removed.
         .               ///
         .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
         .               /// If `prefix` is empty, simply returns the original slice.
         .               ///
         .               /// If the slice does not start with `prefix`, returns `None`.
         .               ///
-- line 2188 ----------------------------------------
-- line 2293 ----------------------------------------
         .               /// s.insert(idx, num);
         .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
         .               where
         .                   T: Ord,
         .               {
         3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
         .               }
         .           
         .               /// Binary searches this sorted slice with a comparator function.
         .               ///
         .               /// The comparator function should implement an order consistent
         .               /// with the sort order of the underlying slice, returning an
         .               /// order code that indicates whether its argument is `Less`,
         .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
         .               #[inline]
         .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
         .               where
         .                   F: FnMut(&'a T) -> Ordering,
         .               {
         .                   let mut size = self.len();
         .                   let mut left = 0;
         .                   let mut right = size;
13,572,275 ( 0.07%)          while left < right {
23,887,876 ( 0.12%)              let mid = left + size / 2;
         .           
         .                       // SAFETY: the call is made safe by the following invariants:
         .                       // - `mid >= 0`
         .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
 2,554,573 ( 0.01%)              let cmp = f(unsafe { self.get_unchecked(mid) });
         .           
         .                       // The reason why we use if/else control flow rather than match
         .                       // is because match reorders comparison operations, which is perf sensitive.
         .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
 6,078,296 ( 0.03%)              if cmp == Less {
13,547,346 ( 0.07%)                  left = mid + 1;
 3,231,044 ( 0.02%)              } else if cmp == Greater {
         .                           right = mid;
         .                       } else {
         .                           // SAFETY: same as the `get_unchecked` above
         .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
         .                           return Ok(mid);
         .                       }
         .           
18,089,552 ( 0.09%)              size = right - left;
         .                   }
         .                   Err(left)
         .               }
         .           
         .               /// Binary searches this sorted slice with a key extraction function.
         .               ///
         .               /// Assumes that the slice is sorted by the key, for instance with
         .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3187 ----------------------------------------
         .               /// assert_eq!(slice, [4, 5, 3, 4, 5]);
         .               /// ```
         .               ///
         .               /// [`clone_from_slice`]: slice::clone_from_slice
         .               /// [`split_at_mut`]: slice::split_at_mut
         .               #[doc(alias = "memcpy")]
         .               #[stable(feature = "copy_from_slice", since = "1.9.0")]
         .               #[track_caller]
       220 ( 0.00%)      pub fn copy_from_slice(&mut self, src: &[T])
         .               where
         .                   T: Copy,
         .               {
         .                   // The panic code path was put into a cold function to not bloat the
         .                   // call site.
         .                   #[inline(never)]
         .                   #[cold]
         .                   #[track_caller]
         .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
         .                       panic!(
         .                           "source slice length ({}) does not match destination slice length ({})",
         .                           src_len, dst_len,
         .                       );
         .                   }
         .           
   156,900 ( 0.00%)          if self.len() != src.len() {
         .                       len_mismatch_fail(self.len(), src.len());
         .                   }
         .           
         .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
         .                   // checked to have the same length. The slices cannot overlap because
         .                   // mutable references are exclusive.
         .                   unsafe {
       132 ( 0.00%)              ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
         .                   }
        44 ( 0.00%)      }
         .           
         .               /// Copies elements from one part of the slice to another part of itself,
         .               /// using a memmove.
         .               ///
         .               /// `src` is the range within `self` to copy from. `dest` is the starting
         .               /// index of the range within `self` to copy to, which will have the same
         .               /// length as `src`. The two ranges may overlap. The ends of the two ranges
         .               /// must be less than or equal to `self.len()`.
-- line 3229 ----------------------------------------
-- line 3380 ----------------------------------------
         .                       }
         .                       a << k
         .                   }
         .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
         .                   let ts: usize = mem::size_of::<U>() / gcd;
         .                   let us: usize = mem::size_of::<T>() / gcd;
         .           
         .                   // Armed with this knowledge, we can find how many `U`s we can fit!
        10 ( 0.00%)          let us_len = self.len() / ts * us;
         .                   // And how many `T`s will be in the trailing slice!
    17,828 ( 0.00%)          let ts_len = self.len() % ts;
         .                   (us_len, ts_len)
         .               }
         .           
         .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
         .               /// maintained.
         .               ///
         .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
         .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
         .                       return (self, &[], &[]);
         .                   }
         .           
         .                   // First, find at what point do we split between the first and 2nd slice. Easy with
         .                   // ptr.align_offset.
         .                   let ptr = self.as_ptr();
         .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
         .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
    17,828 ( 0.00%)          if offset > self.len() {
         .                       (self, &[], &[])
         .                   } else {
         .                       let (left, rest) = self.split_at(offset);
         .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
         .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
         .                       // since the caller guarantees that we can transmute `T` to `U` safely.
         .                       unsafe {
         .                           (
         .                               left,
         .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
    17,838 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
         .                           )
         .                       }
         .                   }
         .               }
         .           
         .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
         .               /// maintained.
         .               ///
-- line 3456 ----------------------------------------
-- line 3731 ----------------------------------------
         .               /// let v = [1, 2, 3, 3, 5, 6, 7];
         .               /// let i = v.partition_point(|&x| x < 5);
         .               ///
         .               /// assert_eq!(i, 4);
         .               /// assert!(v[..i].iter().all(|&x| x < 5));
         .               /// assert!(v[i..].iter().all(|&x| !(x < 5)));
         .               /// ```
         .               #[stable(feature = "partition_point", since = "1.52.0")]
         7 ( 0.00%)      pub fn partition_point<P>(&self, mut pred: P) -> usize
         .               where
         .                   P: FnMut(&T) -> bool,
         .               {
         .                   self.binary_search_by(|x| if pred(x) { Less } else { Greater }).unwrap_or_else(|i| i)
        14 ( 0.00%)      }
         .           
         .               /// Removes the subslice corresponding to the given range
         .               /// and returns a reference to it.
         .               ///
         .               /// Returns `None` and does not modify the slice if the given
         .               /// range is out of bounds.
         .               ///
         .               /// Note that this method only accepts one-sided ranges such as
-- line 3752 ----------------------------------------

 9,454,119 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                   

-- line 111 ----------------------------------------
          .           const EMPTY: u8 = 0b1111_1111;
          .           
          .           /// Control byte value for a deleted bucket.
          .           const DELETED: u8 = 0b1000_0000;
          .           
          .           /// Checks whether a control byte represents a full bucket (top bit is clear).
          .           #[inline]
          .           fn is_full(ctrl: u8) -> bool {
  5,640,801 ( 0.03%)      ctrl & 0x80 == 0
          .           }
          .           
          .           /// Checks whether a control byte represents a special value (top bit is set).
          .           #[inline]
          .           fn is_special(ctrl: u8) -> bool {
          .               ctrl & 0x80 != 0
          .           }
          .           
          .           /// Checks whether a special control value is EMPTY (just check 1 bit).
          .           #[inline]
          .           fn special_is_empty(ctrl: u8) -> bool {
          .               debug_assert!(is_special(ctrl));
    318,355 ( 0.00%)      ctrl & 0x01 != 0
          .           }
          .           
          .           /// Primary hash function, used to select the initial bucket to probe from.
          .           #[inline]
          .           #[allow(clippy::cast_possible_truncation)]
          .           fn h1(hash: u64) -> usize {
          .               // On 32-bit platforms we simply ignore the higher hash bits.
          .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
          .           /// Secondary hash function, saved in the low 7 bits of the control byte.
          .           #[inline]
          .           #[allow(clippy::cast_possible_truncation)]
          .           fn h2(hash: u64) -> u8 {
          .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
          .               // value, some hash functions (such as FxHash) produce a usize result
          .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
          .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
101,232,931 ( 0.51%)      let top7 = hash >> (hash_len * 8 - 7);
          .               (top7 & 0x7f) as u8 // truncation
          .           }
          .           
          .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
          .           /// table size is a power of two) to visit every group of elements exactly once.
          .           ///
          .           /// A triangular probe has us jump by 1 more group every time. So first we
          .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
          .               #[inline]
          .               fn move_next(&mut self, bucket_mask: usize) {
          .                   // We should have found an empty bucket by now and ended the probe.
          .                   debug_assert!(
          .                       self.stride <= bucket_mask,
          .                       "Went past end of probe sequence"
          .                   );
          .           
    845,528 ( 0.00%)          self.stride += Group::WIDTH;
    845,528 ( 0.00%)          self.pos += self.stride;
    682,293 ( 0.00%)          self.pos &= bucket_mask;
          .               }
          .           }
          .           
          .           /// Returns the number of buckets needed to hold the given number of items,
          .           /// taking the maximum load factor into account.
          .           ///
          .           /// Returns `None` if an overflow occurs.
          .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
          .           #[cfg_attr(target_os = "emscripten", inline(never))]
          .           #[cfg_attr(not(target_os = "emscripten"), inline)]
          .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
          .               debug_assert_ne!(cap, 0);
          .           
          .               // For small tables we require at least 1 empty bucket so that lookups are
          .               // guaranteed to terminate if an element doesn't exist in the table.
    220,948 ( 0.00%)      if cap < 8 {
          .                   // We don't bother with a table size of 2 buckets since that can only
          .                   // hold a single element. Instead we skip directly to a 4 bucket table
          .                   // which can hold 3 elements.
    345,340 ( 0.00%)          return Some(if cap < 4 { 4 } else { 8 });
          .               }
          .           
          .               // Otherwise require 1/8 buckets to be empty (87.5% load)
          .               //
          .               // Be careful when modifying this, calculate_layout relies on the
          .               // overflow check here.
    248,436 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
          .           
          .               // Any overflows will have been caught by the checked_mul. Also, any
          .               // rounding errors from the division above will be cleaned up by
          .               // next_power_of_two (which can't overflow because of the previous division).
          .               Some(adjusted_cap.next_power_of_two())
          .           }
          .           
          .           /// Returns the maximum effective capacity for the given bucket mask, taking
          .           /// the maximum load factor into account.
          .           #[inline]
          .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
    626,894 ( 0.00%)      if bucket_mask < 8 {
          .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
          .                   // Keep in mind that the bucket mask is one less than the bucket count.
          .                   bucket_mask
          .               } else {
          .                   // For larger tables we reserve 12.5% of the slots as empty.
    315,752 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
          .               }
          .           }
          .           
          .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
          .           /// while keeping the rest of `calculate_layout_for` independent of `T`
          .           #[derive(Copy, Clone)]
          .           struct TableLayout {
          .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
          .           
          .               #[inline]
          .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   let TableLayout { size, ctrl_align } = self;
          .                   // Manual layout calculation since Layout methods are not yet stable.
          .                   let ctrl_offset =
    374,564 ( 0.00%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
    561,842 ( 0.00%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
          .           
          .                   Some((
          .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
          .                       ctrl_offset,
          .                   ))
          .               }
          .           }
          .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
          .                   }
          .               }
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub unsafe fn drop(&self) {
          .                   self.as_ptr().drop_in_place();
          .               }
          .               #[inline]
          .               pub unsafe fn read(&self) -> T {
        520 ( 0.00%)          self.as_ptr().read()
          .               }
          .               #[inline]
          .               pub unsafe fn write(&self, val: T) {
          .                   self.as_ptr().write(val);
          .               }
          .               #[inline]
          .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
          .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 392 ----------------------------------------
          .           
          .           impl<T> RawTable<T, Global> {
          .               /// Creates a new empty hash table without allocating any memory.
          .               ///
          .               /// In effect this returns a table with exactly 1 bucket. However we can
          .               /// leave the data pointer dangling since that bucket is never written to
          .               /// due to our load factor forcing us to always have at least 1 free bucket.
          .               #[inline]
         12 ( 0.00%)      pub const fn new() -> Self {
         32 ( 0.00%)          Self {
          8 ( 0.00%)              table: RawTableInner::new_in(Global),
          .                       marker: PhantomData,
          .                   }
          8 ( 0.00%)      }
          .           
          .               /// Attempts to allocate a new hash table with at least enough capacity
          .               /// for inserting the given number of elements without reallocating.
          .               #[cfg(feature = "raw")]
          .               pub fn try_with_capacity(capacity: usize) -> Result<Self, TryReserveError> {
          .                   Self::try_with_capacity_in(capacity, Global)
          .               }
          .           
-- line 413 ----------------------------------------
-- line 421 ----------------------------------------
          .           impl<T, A: Allocator + Clone> RawTable<T, A> {
          .               /// Creates a new empty hash table without allocating any memory, using the
          .               /// given allocator.
          .               ///
          .               /// In effect this returns a table with exactly 1 bucket. However we can
          .               /// leave the data pointer dangling since that bucket is never written to
          .               /// due to our load factor forcing us to always have at least 1 free bucket.
          .               #[inline]
         12 ( 0.00%)      pub fn new_in(alloc: A) -> Self {
        647 ( 0.00%)          Self {
          8 ( 0.00%)              table: RawTableInner::new_in(alloc),
          .                       marker: PhantomData,
          .                   }
          8 ( 0.00%)      }
          .           
          .               /// Allocates a new hash table with the given number of buckets.
          .               ///
          .               /// The control bytes are left uninitialized.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               unsafe fn new_uninitialized(
          .                   alloc: A,
          .                   buckets: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   Ok(Self {
        165 ( 0.00%)              table: RawTableInner::new_uninitialized(
          .                           alloc,
          .                           TableLayout::new::<T>(),
          .                           buckets,
          .                           fallibility,
          .                       )?,
          .                       marker: PhantomData,
          .                   })
          .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
          .               /// Attempts to allocate a new hash table with at least enough capacity
          .               /// for inserting the given number of elements without reallocating.
          .               fn fallible_with_capacity(
          .                   alloc: A,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   Ok(Self {
     18,263 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
          .                           alloc,
          .                           TableLayout::new::<T>(),
          .                           capacity,
          .                           fallibility,
          .                       )?,
          .                       marker: PhantomData,
          .                   })
          .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
          .                   debug_assert_ne!(self.table.bucket_mask, 0);
          .                   debug_assert!(index < self.buckets());
          .                   Bucket::from_base_index(self.data_end(), index)
          .               }
          .           
          .               /// Erases an element from the table without dropping it.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
     30,961 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
     30,961 ( 0.00%)          let index = self.bucket_index(item);
          .                   self.table.erase(index);
     61,922 ( 0.00%)      }
          .           
          .               /// Erases an element from the table, dropping it in place.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::needless_pass_by_value)]
          .               #[allow(deprecated)]
          .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
          .                   // Erase the element from the table first since drop might panic.
     14,362 ( 0.00%)          self.erase_no_drop(&item);
          .                   item.drop();
          .               }
          .           
          .               /// Finds and erases an element from the table, dropping it in place.
          .               /// Returns true if an element was found.
          .               #[cfg(feature = "raw")]
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
          .                   }
          .               }
          .           
          .               /// Removes an element from the table, returning it.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::needless_pass_by_value)]
          .               #[allow(deprecated)]
          .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
     47,560 ( 0.00%)          self.erase_no_drop(&item);
         50 ( 0.00%)          item.read()
          .               }
          .           
          .               /// Finds and removes an element from the table, returning it.
          .               #[cfg_attr(feature = "inline-more", inline)]
  1,240,076 ( 0.01%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
      6,446 ( 0.00%)          match self.find(hash, eq) {
      4,444 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
     82,180 ( 0.00%)              None => None,
          .                   }
  1,647,299 ( 0.01%)      }
          .           
          .               /// Marks all table buckets as empty without dropping their contents.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn clear_no_drop(&mut self) {
          .                   self.table.clear_no_drop();
          .               }
          .           
          .               /// Removes all elements from the table without freeing the backing memory.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn clear(&mut self) {
          .                   // Ensure that the table is reset even if one of the drops panic
          .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
          .                   unsafe {
          1 ( 0.00%)              self_.drop_elements();
          .                   }
          .               }
          .           
          7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
     28,954 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
          .                       for item in self.iter() {
          .                           item.drop();
          .                       }
          .                   }
          8 ( 0.00%)      }
          .           
          .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
          .                   // Calculate the minimal number of elements that we need to reserve
          .                   // space for.
          .                   let min_size = usize::max(self.table.items, min_size);
          .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 641 ----------------------------------------
          .                           }
          .                       }
          .                   }
          .               }
          .           
          .               /// Ensures that at least `additional` items can be inserted into the table
          .               /// without reallocation.
          .               #[cfg_attr(feature = "inline-more", inline)]
         28 ( 0.00%)      pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
    773,944 ( 0.00%)          if additional > self.table.growth_left {
          .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
    364,711 ( 0.00%)              if self
          .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
          .                           .is_err()
          .                       {
          .                           unsafe { hint::unreachable_unchecked() }
          .                       }
          .                   }
         20 ( 0.00%)      }
          .           
          .               /// Tries to ensure that at least `additional` items can be inserted into
          .               /// the table without reallocation.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn try_reserve(
          .                   &mut self,
          .                   additional: usize,
          .                   hasher: impl Fn(&T) -> u64,
-- line 667 ----------------------------------------
-- line 671 ----------------------------------------
          .                   } else {
          .                       Ok(())
          .                   }
          .               }
          .           
          .               /// Out-of-line slow path for `reserve` and `try_reserve`.
          .               #[cold]
          .               #[inline(never)]
    887,716 ( 0.00%)      fn reserve_rehash(
          .                   &mut self,
          .                   additional: usize,
          .                   hasher: impl Fn(&T) -> u64,
          .                   fallibility: Fallibility,
          .               ) -> Result<(), TryReserveError> {
          .                   unsafe {
          .                       self.table.reserve_rehash_inner(
          .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
          .                           TableLayout::new::<T>(),
          .                           if mem::needs_drop::<T>() {
          .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
          .                           } else {
          .                               None
          .                           },
          .                       )
          .                   }
    532,696 ( 0.00%)      }
          .           
          .               /// Allocates a new table of a different size and moves the contents of the
          .               /// current table into it.
          .               fn resize(
          .                   &mut self,
          .                   capacity: usize,
          .                   hasher: impl Fn(&T) -> u64,
          .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
          .                       )
          .                   }
          .               }
          .           
          .               /// Inserts a new element into the table, and returns its raw bucket.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
  7,818,582 ( 0.04%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
          .                   unsafe {
          .                       let mut index = self.table.find_insert_slot(hash);
          .           
          .                       // We can avoid growing the table once we have reached our load
          .                       // factor if we are replacing a tombstone. This works since the
          .                       // number of EMPTY slots does not change in this case.
      8,099 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
  5,434,666 ( 0.03%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
          .                           self.reserve(1, hasher);
          .                           index = self.table.find_insert_slot(hash);
          .                       }
          .           
          .                       self.table.record_item_insert_at(index, old_ctrl, hash);
          .           
          .                       let bucket = self.bucket(index);
          2 ( 0.00%)              bucket.write(value);
          .                       bucket
          .                   }
  5,835,569 ( 0.03%)      }
          .           
          .               /// Attempts to insert a new element without growing the table and return its raw bucket.
          .               ///
          .               /// Returns an `Err` containing the given element if inserting it would require growing the
          .               /// table.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
          .                       }
          .                   }
          .               }
          .           
          .               /// Inserts a new element into the table, and returns a mutable reference to it.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
  1,460,344 ( 0.01%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
        880 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
  1,095,258 ( 0.01%)      }
          .           
          .               /// Inserts a new element into the table, without growing the table.
          .               ///
          .               /// There must be enough space in the table to insert the new element.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
      4,701 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
    947,909 ( 0.00%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
     16,370 ( 0.00%)          let bucket = self.table.bucket(index);
          .           
          .                   // If we are replacing a DELETED entry then we don't need to update
          .                   // the load counter.
  1,917,621 ( 0.01%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
          .           
          .                   bucket.write(value);
  1,479,166 ( 0.01%)          self.table.items += 1;
          .                   bucket
      8,697 ( 0.00%)      }
          .           
          .               /// Temporary removes a bucket, applying the given function to the removed
          .               /// element and optionally put back the returned value in the same bucket.
          .               ///
          .               /// Returns `true` if the bucket still contains an element
          .               ///
          .               /// This does not check if the given bucket is actually occupied.
          .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
          .                       true
          .                   } else {
          .                       false
          .                   }
          .               }
          .           
          .               /// Searches for an element in the table.
          .               #[inline]
    255,786 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
     26,858 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    102,478 ( 0.00%)              eq(self.bucket(index).as_ref())
      5,706 ( 0.00%)          });
          .           
          .                   // Avoid `Option::map` because it bloats LLVM IR.
          .                   match result {
      3,185 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
          .                       None => None,
          .                   }
    292,570 ( 0.00%)      }
          .           
          .               /// Gets a reference to an element in the table.
          .               #[inline]
          .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
     75,800 ( 0.00%)          match self.find(hash, eq) {
          .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
          .                       None => None,
          .                   }
          .               }
          .           
          .               /// Gets a mutable reference to an element in the table.
          .               #[inline]
     50,573 ( 0.00%)      pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
    125,852 ( 0.00%)          match self.find(hash, eq) {
          .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
          .                       None => None,
          .                   }
     58,288 ( 0.00%)      }
          .           
          .               /// Attempts to get mutable references to `N` entries in the table at once.
          .               ///
          .               /// Returns an array of length `N` with the results of each query.
          .               ///
          .               /// At most one mutable reference will be returned to any entry. `None` will be returned if any
          .               /// of the hashes are duplicates. `None` will be returned if the hash is not found.
          .               ///
-- line 859 ----------------------------------------
-- line 913 ----------------------------------------
          .               /// more, but is guaranteed to be able to hold at least this many.
          .               #[inline]
          .               pub fn capacity(&self) -> usize {
          .                   self.table.items + self.table.growth_left
          .               }
          .           
          .               /// Returns the number of elements in the table.
          .               #[inline]
         32 ( 0.00%)      pub fn len(&self) -> usize {
         16 ( 0.00%)          self.table.items
         32 ( 0.00%)      }
          .           
          .               /// Returns `true` if the table contains no elements.
          .               #[inline]
         24 ( 0.00%)      pub fn is_empty(&self) -> bool {
  1,951,228 ( 0.01%)          self.len() == 0
         48 ( 0.00%)      }
          .           
          .               /// Returns the number of buckets in the table.
          .               #[inline]
          .               pub fn buckets(&self) -> usize {
          .                   self.table.bucket_mask + 1
          .               }
          .           
          .               /// Returns an iterator over every element in the table. It is up to
          .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
          .               /// Because we cannot make the `next` method unsafe on the `RawIter`
          .               /// struct, we have to make the `iter` method unsafe.
          .               #[inline]
          .               pub unsafe fn iter(&self) -> RawIter<T> {
          1 ( 0.00%)          let data = Bucket::from_base_index(self.data_end(), 0);
          .                   RawIter {
          .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
    120,024 ( 0.00%)              items: self.table.items,
          .                   }
          .               }
          .           
          .               /// Returns an iterator over occupied buckets that could match a given hash.
          .               ///
          .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
          .               /// return items that have a hash value different than the one provided. You
          .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
          .               /// Iteration starts at the provided iterator's current location.
          .               ///
          .               /// It is up to the caller to ensure that the iterator is valid for this
          .               /// `RawTable` and covers all items that remain in the table.
          .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
          .                   debug_assert_eq!(iter.len(), self.len());
          .           
          .                   let alloc = self.table.alloc.clone();
      4,496 ( 0.00%)          let allocation = self.into_allocation();
      3,372 ( 0.00%)          RawIntoIter {
      5,620 ( 0.00%)              iter,
          .                       allocation,
          .                       marker: PhantomData,
          .                       alloc,
          .                   }
          .               }
          .           
          .               /// Converts the table into a raw allocation. The contents of the table
          .               /// should be dropped using a `RawIter` before freeing the allocation.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
      1,880 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
          .                       None
          .                   } else {
          .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
          .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
          .                           Some(lco) => lco,
          .                           None => unsafe { hint::unreachable_unchecked() },
          .                       };
          .                       Some((
        442 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
          .                           layout,
          .                       ))
          .                   };
          .                   mem::forget(self);
          .                   alloc
          .               }
          .           }
          .           
-- line 1033 ----------------------------------------
-- line 1041 ----------------------------------------
          .           where
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           impl<A> RawTableInner<A> {
          .               #[inline]
         24 ( 0.00%)      const fn new_in(alloc: A) -> Self {
    947,153 ( 0.00%)          Self {
          .                       // Be careful to cast the entire slice to a raw pointer.
         56 ( 0.00%)              ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
          .                       bucket_mask: 0,
          .                       items: 0,
          .                       growth_left: 0,
          .                       alloc,
          .                   }
         16 ( 0.00%)      }
          .           }
          .           
          .           impl<A: Allocator + Clone> RawTableInner<A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
    605,057 ( 0.00%)      unsafe fn new_uninitialized(
          .                   alloc: A,
          .                   table_layout: TableLayout,
          .                   buckets: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
          .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
          .                   // such allocations will never succeed anyways.
          .                   //
          .                   // This mirrors what Vec does in the standard library.
          .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
          .                       return Err(fallibility.capacity_overflow());
          .                   }
          .           
    160,428 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
          .                       Ok(block) => block.cast(),
          .                       Err(_) => return Err(fallibility.alloc_err(layout)),
          .                   };
          .           
          .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
    334,752 ( 0.00%)          Ok(Self {
          .                       ctrl,
    166,299 ( 0.00%)              bucket_mask: buckets - 1,
          .                       items: 0,
          .                       growth_left: bucket_mask_to_capacity(buckets - 1),
          .                       alloc,
          .                   })
    440,566 ( 0.00%)      }
          .           
          .               #[inline]
     49,597 ( 0.00%)      fn fallible_with_capacity(
          .                   alloc: A,
          .                   table_layout: TableLayout,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
     12,532 ( 0.00%)          if capacity == 0 {
     11,951 ( 0.00%)              Ok(Self::new_in(alloc))
          .                   } else {
          .                       unsafe {
          .                           let buckets =
          .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
          .           
    273,853 ( 0.00%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
          .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
          .           
     23,047 ( 0.00%)                  Ok(result)
          .                       }
          .                   }
     49,597 ( 0.00%)      }
          .           
          .               /// Searches for an empty or deleted bucket which is suitable for inserting
          .               /// a new element and sets the hash for that slot.
          .               ///
          .               /// There must be at least 1 empty bucket in the table.
          .               #[inline]
    314,184 ( 0.00%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
          .                   let index = self.find_insert_slot(hash);
    314,184 ( 0.00%)          let old_ctrl = *self.ctrl(index);
          .                   self.set_ctrl_h2(index, hash);
          .                   (index, old_ctrl)
    628,368 ( 0.00%)      }
          .           
          .               /// Searches for an empty or deleted bucket which is suitable for inserting
          .               /// a new element.
          .               ///
          .               /// There must be at least 1 empty bucket in the table.
          .               #[inline]
          .               fn find_insert_slot(&self, hash: u64) -> usize {
          .                   let mut probe_seq = self.probe_seq(hash);
          .                   loop {
          .                       unsafe {
          .                           let group = Group::load(self.ctrl(probe_seq.pos));
  3,650,834 ( 0.02%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
 10,596,122 ( 0.05%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
          .           
          .                               // In tables smaller than the group width, trailing control
          .                               // bytes outside the range of the table are filled with
          .                               // EMPTY entries. These will unfortunately trigger a
          .                               // match, but once masked may point to a full bucket that
          .                               // is already occupied. We detect this situation here and
          .                               // perform a second scan starting at the beginning of the
          .                               // table. This second scan is guaranteed to find an empty
          .                               // slot (due to the load factor) before hitting the trailing
          .                               // control bytes (containing EMPTY).
  4,890,369 ( 0.02%)                      if unlikely(is_full(*self.ctrl(result))) {
          .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
          .                                   debug_assert_ne!(probe_seq.pos, 0);
          .                                   return Group::load_aligned(self.ctrl(0))
          .                                       .match_empty_or_deleted()
          .                                       .lowest_set_bit_nonzero();
          .                               }
          .           
          .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
          .           
          .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
          .               /// code generated, but it is eliminated by LLVM optimizations.
          .               #[inline]
          .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
          .                   let h2_hash = h2(hash);
          .                   let mut probe_seq = self.probe_seq(hash);
          .           
    337,712 ( 0.00%)          loop {
          .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
          .           
 11,630,866 ( 0.06%)              for bit in group.match_byte(h2_hash) {
 25,274,124 ( 0.13%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
          .           
 16,875,141 ( 0.08%)                  if likely(eq(index)) {
          .                               return Some(index);
          .                           }
          .                       }
          .           
  2,854,558 ( 0.01%)              if likely(group.match_empty().any_bit_set()) {
          .                           return None;
          .                       }
          .           
          .                       probe_seq.move_next(self.bucket_mask);
          .                   }
          .               }
          .           
          .               #[allow(clippy::mut_mut)]
-- line 1198 ----------------------------------------
-- line 1225 ----------------------------------------
          .                   Bucket::from_base_index(self.data_end(), index)
          .               }
          .           
          .               #[inline]
          .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
          .                   debug_assert_ne!(self.bucket_mask, 0);
          .                   debug_assert!(index < self.buckets());
          .                   let base: *mut u8 = self.data_end().as_ptr();
 14,247,408 ( 0.07%)          base.sub((index + 1) * size_of)
          .               }
          .           
          .               #[inline]
          .               unsafe fn data_end<T>(&self) -> NonNull<T> {
          .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
          .               }
          .           
          .               /// Returns an iterator-like object for a probe sequence on the table.
          .               ///
          .               /// This iterator never terminates, but is guaranteed to visit each bucket
          .               /// group exactly once. The loop using `probe_seq` must terminate upon
          .               /// reaching a group containing an empty bucket.
          .               #[inline]
          .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
          .                   ProbeSeq {
 74,736,662 ( 0.38%)              pos: h1(hash) & self.bucket_mask,
          .                       stride: 0,
          .                   }
          .               }
          .           
          .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
          .               /// in the table, otherwise returns error
          .               #[cfg(feature = "raw")]
          .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
          .                   } else {
          .                       self.record_item_insert_at(index, old_ctrl, hash);
          .                       Ok(index)
          .                   }
          .               }
          .           
          .               #[inline]
          .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
  6,829,166 ( 0.03%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
          .                   self.set_ctrl_h2(index, hash);
  5,434,352 ( 0.03%)          self.items += 1;
          .               }
          .           
          .               #[inline]
          .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
          .                   let probe_seq_pos = self.probe_seq(hash).pos;
          .                   let probe_index =
          .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
          .                   probe_index(i) == probe_index(new_i)
-- line 1281 ----------------------------------------
-- line 1312 ----------------------------------------
          .                   // replicate the buckets at the end of the trailing group. For example
          .                   // with 2 buckets and a group size of 4, the control bytes will look
          .                   // like this:
          .                   //
          .                   //     Real    |             Replicated
          .                   // ---------------------------------------------
          .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
          .                   // ---------------------------------------------
 10,390,233 ( 0.05%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
          .           
  3,457,869 ( 0.02%)          *self.ctrl(index) = ctrl;
  3,458,033 ( 0.02%)          *self.ctrl(index2) = ctrl;
          .               }
          .           
          .               /// Returns a pointer to a control byte.
          .               #[inline]
          .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
          .                   debug_assert!(index < self.num_ctrl_bytes());
          .                   self.ctrl.as_ptr().add(index)
          .               }
          .           
          .               #[inline]
          .               fn buckets(&self) -> usize {
    429,560 ( 0.00%)          self.bucket_mask + 1
          .               }
          .           
          .               #[inline]
          .               fn num_ctrl_bytes(&self) -> usize {
    319,624 ( 0.00%)          self.bucket_mask + 1 + Group::WIDTH
          .               }
          .           
          .               #[inline]
         16 ( 0.00%)      fn is_empty_singleton(&self) -> bool {
  1,794,159 ( 0.01%)          self.bucket_mask == 0
         32 ( 0.00%)      }
          .           
          .               #[allow(clippy::mut_mut)]
          .               #[inline]
          .               unsafe fn prepare_resize(
          .                   &self,
          .                   table_layout: TableLayout,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
          .                   debug_assert!(self.items <= capacity);
          .           
          .                   // Allocate and initialize the new table.
      4,968 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
          .                       self.alloc.clone(),
          .                       table_layout,
          .                       capacity,
          .                       fallibility,
          .                   )?;
    243,401 ( 0.00%)          new_table.growth_left -= self.items;
          .                   new_table.items = self.items;
          .           
          .                   // The hash function may panic, in which case we simply free the new
          .                   // table without dropping any elements that may have been copied into
          .                   // it.
          .                   //
          .                   // This guard is also used to free the old table on success, see
          .                   // the comment at the bottom of this function.
          .                   Ok(guard(new_table, move |self_| {
    108,285 ( 0.00%)              if !self_.is_empty_singleton() {
          .                           self_.free_buckets(table_layout);
          .                       }
          .                   }))
          .               }
          .           
          .               /// Reserves or rehashes to make room for `additional` more elements.
          .               ///
          .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
          .                   &mut self,
          .                   additional: usize,
          .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
          .                   fallibility: Fallibility,
          .                   layout: TableLayout,
          .                   drop: Option<fn(*mut u8)>,
          .               ) -> Result<(), TryReserveError> {
          .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
    216,577 ( 0.00%)          let new_items = match self.items.checked_add(additional) {
          .                       Some(new_items) => new_items,
          .                       None => return Err(fallibility.capacity_overflow()),
          .                   };
    216,570 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
    471,007 ( 0.00%)          if new_items <= full_capacity / 2 {
          .                       // Rehash in-place without re-allocating if we have plenty of spare
          .                       // capacity that is locked up due to DELETED entries.
          .                       self.rehash_in_place(hasher, layout.size, drop);
          .                       Ok(())
          .                   } else {
          .                       // Otherwise, conservatively resize to at least the next size up
          .                       // to avoid churning deletes into frequent rehashes.
          .                       self.resize_inner(
    108,285 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
          .                           hasher,
          .                           fallibility,
          .                           layout,
          .                       )
          .                   }
          .               }
          .           
          .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
          .               #[inline(always)]
          .               unsafe fn resize_inner(
          .                   &mut self,
          .                   capacity: usize,
          .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
          .                   fallibility: Fallibility,
          .                   layout: TableLayout,
          .               ) -> Result<(), TryReserveError> {
     12,245 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
          .           
          .                   // Copy all elements to the new table.
          .                   for i in 0..self.buckets() {
  2,109,020 ( 0.01%)              if !is_full(*self.ctrl(i)) {
          .                           continue;
          .                       }
          .           
          .                       // This may panic.
          .                       let hash = hasher(self, i);
          .           
          .                       // We can use a simpler version of insert() here since:
          .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
          .                   }
          .           
          .                   // We successfully copied all elements without panicking. Now replace
          .                   // self with the new table. The old table will have its memory freed but
          .                   // the items will not be dropped (since they have been moved into the
          .                   // new table).
          .                   mem::swap(self, &mut new_table);
          .           
    108,285 ( 0.00%)          Ok(())
          .               }
          .           
          .               /// Rehashes the contents of the table in place (i.e. without changing the
          .               /// allocation).
          .               ///
          .               /// If `hasher` panics then some the table's contents may be lost.
          .               ///
          .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1554 ----------------------------------------
          .               #[inline]
          .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
          .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
          .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
          .                       Some(lco) => lco,
          .                       None => hint::unreachable_unchecked(),
          .                   };
          .                   self.alloc.deallocate(
     66,408 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
          .                       layout,
          .                   );
          .               }
          .           
          .               /// Marks all table buckets as empty without dropping their contents.
          .               #[inline]
          .               fn clear_no_drop(&mut self) {
      8,393 ( 0.00%)          if !self.is_empty_singleton() {
          .                       unsafe {
          .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
          .                       }
          .                   }
     10,605 ( 0.00%)          self.items = 0;
      8,711 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
          .               }
          .           
          .               #[inline]
          .               unsafe fn erase(&mut self, index: usize) {
          .                   debug_assert!(is_full(*self.ctrl(index)));
    257,882 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
          .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
          .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
          .           
          .                   // If we are inside a continuous block of Group::WIDTH full or deleted
          .                   // cells then a probe window may have seen a full block when trying to
          .                   // insert. We therefore need to keep that block non-empty so that
          .                   // lookups will continue searching to the next probe window.
          .                   //
          .                   // Note that in this context `leading_zeros` refers to the bytes at the
          .                   // end of a group, while `trailing_zeros` refers to the bytes at the
          .                   // beginning of a group.
  1,031,528 ( 0.01%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
          .                       DELETED
          .                   } else {
  1,237,230 ( 0.01%)              self.growth_left += 1;
          .                       EMPTY
          .                   };
          .                   self.set_ctrl(index, ctrl);
  1,031,528 ( 0.01%)          self.items -= 1;
          .               }
          .           }
          .           
          .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
      1,656 ( 0.00%)      fn clone(&self) -> Self {
        244 ( 0.00%)          if self.table.is_empty_singleton() {
          .                       Self::new_in(self.table.alloc.clone())
          .                   } else {
          .                       unsafe {
          .                           let mut new_table = ManuallyDrop::new(
          .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
          .                               match Self::new_uninitialized(
          .                                   self.table.alloc.clone(),
          .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
          .                               // We need to free the memory allocated for the new table.
          .                               new_table.free_buckets();
          .                           });
          .           
          .                           // Return the newly created table.
          .                           ManuallyDrop::into_inner(new_table)
          .                       }
          .                   }
      1,863 ( 0.00%)      }
          .           
          .               fn clone_from(&mut self, source: &Self) {
          .                   if source.table.is_empty_singleton() {
          .                       *self = Self::new_in(self.table.alloc.clone());
          .                   } else {
          .                       unsafe {
          .                           // First, drop all our elements without clearing the control bytes.
          .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
          .                       .table
          .                       .ctrl(0)
          .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
          .                   source
          .                       .data_start()
          .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
          .           
          .                   self.table.items = source.table.items;
         66 ( 0.00%)          self.table.growth_left = source.table.growth_left;
          .               }
          .           }
          .           
          .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
          .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
          .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
          .               fn default() -> Self {
          .                   Self::new_in(Default::default())
          .               }
          .           }
          .           
          .           #[cfg(feature = "nightly")]
          .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
    938,556 ( 0.00%)      fn drop(&mut self) {
    764,898 ( 0.00%)          if !self.table.is_empty_singleton() {
          .                       unsafe {
          .                           self.drop_elements();
          .                           self.free_buckets();
          .                       }
          .                   }
    960,224 ( 0.00%)      }
          .           }
          .           #[cfg(not(feature = "nightly"))]
          .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn drop(&mut self) {
          .                   if !self.table.is_empty_singleton() {
          .                       unsafe {
          .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
          .               type Item = T;
          .               type IntoIter = RawIntoIter<T, A>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
      4,496 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
          .                   unsafe {
          .                       let iter = self.iter();
          .                       self.into_iter_from(iter)
          .                   }
      5,620 ( 0.00%)      }
          .           }
          .           
          .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
          .           /// not track an item count.
          .           pub(crate) struct RawIterRange<T> {
          .               // Mask of full buckets in the current group. Bits are cleared from this
          .               // mask as each element is processed.
          .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
          .           
          .           impl<T> Iterator for RawIterRange<T> {
          .               type Item = Bucket<T>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn next(&mut self) -> Option<Bucket<T>> {
          .                   unsafe {
          .                       loop {
    611,411 ( 0.00%)                  if let Some(index) = self.current_group.lowest_set_bit() {
     84,469 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    106,942 ( 0.00%)                      return Some(self.data.next_n(index));
          .                           }
          .           
    326,491 ( 0.00%)                  if self.next_ctrl >= self.end {
          .                               return None;
          .                           }
          .           
          .                           // We might read past self.end up to the next group boundary,
          .                           // but this is fine because it only occurs on tables smaller
          .                           // than the group size where the trailing control bytes are all
          .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
          .                           // to the group size (since tables are power-of-two sized).
     29,599 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
     12,817 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
     75,849 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
          .                       }
          .                   }
          .               }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          .                   // We don't have an item count, so just guess based on the range size.
          .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
          .                           }
          .                       } else {
          .                           // We must have already iterated past the removed item.
          .                       }
          .                   }
          .               }
          .           
          .               unsafe fn drop_elements(&mut self) {
      1,258 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
          .                       for item in self {
          .                           item.drop();
          .                       }
          .                   }
          .               }
          .           }
          .           
          .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
          .                   }
          .               }
          .           }
          .           
          .           impl<T> Iterator for RawIter<T> {
          .               type Item = Bucket<T>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
     64,065 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
    222,296 ( 0.00%)          if let Some(b) = self.iter.next() {
    816,320 ( 0.00%)              self.items -= 1;
          .                       Some(b)
          .                   } else {
          .                       // We don't check against items == 0 here to allow the
          .                       // compiler to optimize away the item count entirely if the
          .                       // iterator length is never queried.
          .                       debug_assert_eq!(self.items, 0);
          .                       None
          .                   }
    128,130 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          .                   (self.items, Some(self.items))
          .               }
          .           }
          .           
          .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           #[cfg(feature = "nightly")]
          .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
      2,362 ( 0.00%)      fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements
          .                       self.iter.drop_elements();
          .           
          .                       // Free the table
      8,873 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
          .                           self.alloc.deallocate(ptr, layout);
          .                       }
          .                   }
        506 ( 0.00%)      }
          .           }
          .           #[cfg(not(feature = "nightly"))]
          .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements
          .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
          .                   }
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
          .               type Item = T;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
      8,031 ( 0.00%)      fn next(&mut self) -> Option<T> {
        747 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
     23,426 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          4 ( 0.00%)          self.iter.size_hint()
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
          .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
          .           
          .           /// Iterator which consumes elements without freeing the table storage.
          .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
          .           where
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
        440 ( 0.00%)      fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements. Note that this may panic.
          .                       self.iter.drop_elements();
          .           
          .                       // Reset the contents of the table now that all elements have been
          .                       // dropped.
          .                       self.table.clear_no_drop();
          .           
          .                       // Move the now empty table back to its original location.
         55 ( 0.00%)              self.orig_table
          .                           .as_ptr()
          .                           .copy_from_nonoverlapping(&*self.table, 1);
          .                   }
        440 ( 0.00%)      }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
          .               type Item = T;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn next(&mut self) -> Option<T> {
          .                   unsafe {
-- line 2289 ----------------------------------------

 35,349,165 ( 0.18%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs
--------------------------------------------------------------------------------
Ir                 

-- line 24 ----------------------------------------
        .           use smallvec::SmallVec;
        .           
        .           use std::fmt::Write;
        .           
        .           // Compute the name of the type as it should be stored in debuginfo. Does not do
        .           // any caching, i.e., calling the function twice with the same type will also do
        .           // the work twice. The `qualified` parameter only affects the first level of the
        .           // type name, further levels (i.e., type parameters) are always fully qualified.
  378,238 ( 0.00%)  pub fn compute_debuginfo_type_name<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               t: Ty<'tcx>,
        .               qualified: bool,
        .           ) -> String {
        .               let _prof = tcx.prof.generic_activity("compute_debuginfo_type_name");
        .           
        .               let mut result = String::with_capacity(64);
        .               let mut visited = FxHashSet::default();
  162,102 ( 0.00%)      push_debuginfo_type_name(tcx, t, qualified, &mut result, &mut visited);
        .               result
  243,153 ( 0.00%)  }
        .           
        .           // Pushes the name of the type as it should be stored in debuginfo on the
        .           // `output` String. See also compute_debuginfo_type_name().
3,786,892 ( 0.02%)  fn push_debuginfo_type_name<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               t: Ty<'tcx>,
        .               qualified: bool,
        .               output: &mut String,
        .               visited: &mut FxHashSet<Ty<'tcx>>,
        .           ) {
        .               // When targeting MSVC, emit C++ style type names for compatibility with
        .               // .natvis visualizers (and perhaps other existing native debuggers?)
        .               let cpp_like_debuginfo = cpp_like_debuginfo(tcx);
        .           
  767,948 ( 0.00%)      match *t.kind() {
        .                   ty::Bool => output.push_str("bool"),
        .                   ty::Char => output.push_str("char"),
        .                   ty::Str => output.push_str("str"),
        .                   ty::Never => {
        .                       if cpp_like_debuginfo {
        .                           output.push_str("never$");
        .                       } else {
        .                           output.push('!');
        .                       }
        .                   }
      651 ( 0.00%)          ty::Int(int_ty) => output.push_str(int_ty.name_str()),
    9,079 ( 0.00%)          ty::Uint(uint_ty) => output.push_str(uint_ty.name_str()),
        5 ( 0.00%)          ty::Float(float_ty) => output.push_str(float_ty.name_str()),
      117 ( 0.00%)          ty::Foreign(def_id) => push_item_name(tcx, def_id, qualified, output),
  306,860 ( 0.00%)          ty::Adt(def, substs) => {
  460,290 ( 0.00%)              if def.is_enum() && cpp_like_debuginfo {
        .                           msvc_enum_fallback(tcx, t, def, substs, output, visited);
        .                       } else {
1,074,010 ( 0.01%)                  push_item_name(tcx, def.did, qualified, output);
1,841,160 ( 0.01%)                  push_generic_params_internal(tcx, substs, output, visited);
        .                       }
        .                   }
    5,636 ( 0.00%)          ty::Tuple(component_types) => {
    5,636 ( 0.00%)              if cpp_like_debuginfo {
        .                           output.push_str("tuple$<");
        .                       } else {
        .                           output.push('(');
        .                       }
        .           
        .                       for component_type in component_types {
   65,889 ( 0.00%)                  push_debuginfo_type_name(tcx, component_type.expect_ty(), true, output, visited);
        .                           push_arg_separator(cpp_like_debuginfo, output);
        .                       }
    3,697 ( 0.00%)              if !component_types.is_empty() {
        .                           pop_arg_separator(output);
        .                       }
        .           
    3,697 ( 0.00%)              if cpp_like_debuginfo {
        .                           push_close_angle_bracket(cpp_like_debuginfo, output);
        .                       } else {
        .                           output.push(')');
        .                       }
        .                   }
    5,872 ( 0.00%)          ty::RawPtr(ty::TypeAndMut { ty: inner_type, mutbl }) => {
    2,936 ( 0.00%)              if cpp_like_debuginfo {
        .                           match mutbl {
        .                               hir::Mutability::Not => output.push_str("ptr_const$<"),
        .                               hir::Mutability::Mut => output.push_str("ptr_mut$<"),
        .                           }
        .                       } else {
        .                           output.push('*');
    5,872 ( 0.00%)                  match mutbl {
        .                               hir::Mutability::Not => output.push_str("const "),
        .                               hir::Mutability::Mut => output.push_str("mut "),
        .                           }
        .                       }
        .           
    8,808 ( 0.00%)              push_debuginfo_type_name(tcx, inner_type, qualified, output, visited);
        .           
        .                       if cpp_like_debuginfo {
        .                           push_close_angle_bracket(cpp_like_debuginfo, output);
        .                       }
        .                   }
   15,366 ( 0.00%)          ty::Ref(_, inner_type, mutbl) => {
        .                       // Slices and `&str` are treated like C++ pointers when computing debug
        .                       // info for MSVC debugger. However, wrapping these types' names in a synthetic type
        .                       // causes the .natvis engine for WinDbg to fail to display their data, so we opt these
        .                       // types out to aid debugging in MSVC.
        .                       let is_slice_or_str = matches!(*inner_type.kind(), ty::Slice(_) | ty::Str);
        .           
    5,122 ( 0.00%)              if !cpp_like_debuginfo {
        .                           output.push('&');
    5,122 ( 0.00%)                  output.push_str(mutbl.prefix_str());
        .                       } else if !is_slice_or_str {
        .                           match mutbl {
        .                               hir::Mutability::Not => output.push_str("ref$<"),
        .                               hir::Mutability::Mut => output.push_str("ref_mut$<"),
        .                           }
        .                       }
        .           
   40,976 ( 0.00%)              push_debuginfo_type_name(tcx, inner_type, qualified, output, visited);
        .           
        .                       if cpp_like_debuginfo && !is_slice_or_str {
        .                           push_close_angle_bracket(cpp_like_debuginfo, output);
        .                       }
        .                   }
      144 ( 0.00%)          ty::Array(inner_type, len) => {
       48 ( 0.00%)              if cpp_like_debuginfo {
        .                           output.push_str("array$<");
        .                           push_debuginfo_type_name(tcx, inner_type, true, output, visited);
        .                           match len.val {
        .                               ty::ConstKind::Param(param) => write!(output, ",{}>", param.name).unwrap(),
        .                               _ => write!(output, ",{}>", len.eval_usize(tcx, ty::ParamEnv::reveal_all()))
        .                                   .unwrap(),
        .                           }
        .                       } else {
        .                           output.push('[');
      288 ( 0.00%)                  push_debuginfo_type_name(tcx, inner_type, true, output, visited);
       96 ( 0.00%)                  match len.val {
        .                               ty::ConstKind::Param(param) => write!(output, "; {}]", param.name).unwrap(),
      432 ( 0.00%)                      _ => write!(output, "; {}]", len.eval_usize(tcx, ty::ParamEnv::reveal_all()))
        .                                   .unwrap(),
        .                           }
        .                       }
        .                   }
      313 ( 0.00%)          ty::Slice(inner_type) => {
      313 ( 0.00%)              if cpp_like_debuginfo {
        .                           output.push_str("slice$<");
        .                       } else {
        .                           output.push('[');
        .                       }
        .           
    1,565 ( 0.00%)              push_debuginfo_type_name(tcx, inner_type, true, output, visited);
        .           
        .                       if cpp_like_debuginfo {
        .                           push_close_angle_bracket(cpp_like_debuginfo, output);
        .                       } else {
        .                           output.push(']');
        .                       }
        .                   }
        .                   ty::Dynamic(ref trait_data, ..) => {
    1,202 ( 0.00%)              let auto_traits: SmallVec<[DefId; 4]> = trait_data.auto_traits().collect();
        .           
    1,202 ( 0.00%)              let has_enclosing_parens = if cpp_like_debuginfo {
        .                           output.push_str("dyn$<");
        .                           false
        .                       } else {
    6,966 ( 0.00%)                  if trait_data.len() > 1 && auto_traits.len() != 0 {
        .                               // We need enclosing parens because there is more than one trait
        .                               output.push_str("(dyn ");
        .                               true
        .                           } else {
        .                               output.push_str("dyn ");
        .                               false
        .                           }
        .                       };
        .           
    6,010 ( 0.00%)              if let Some(principal) = trait_data.principal() {
        .                           let principal =
   13,222 ( 0.00%)                      tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), principal);
    7,212 ( 0.00%)                  push_item_name(tcx, principal.def_id, qualified, output);
        .                           let principal_has_generic_params =
    6,010 ( 0.00%)                      push_generic_params_internal(tcx, principal.substs, output, visited);
        .           
    1,202 ( 0.00%)                  let projection_bounds: SmallVec<[_; 4]> = trait_data
        .                               .projection_bounds()
        .                               .map(|bound| {
    2,264 ( 0.00%)                          let ExistentialProjection { item_def_id, term, .. } = bound.skip_binder();
        .                                   // FIXME(associated_const_equality): allow for consts here
      566 ( 0.00%)                          (item_def_id, term.ty().unwrap())
    1,698 ( 0.00%)                      })
        .                               .collect();
        .           
    3,606 ( 0.00%)                  if projection_bounds.len() != 0 {
    1,698 ( 0.00%)                      if principal_has_generic_params {
        .                                   // push_generic_params_internal() above added a `>` but we actually
        .                                   // want to add more items to that list, so remove that again.
      199 ( 0.00%)                          pop_close_angle_bracket(output);
        .                               }
        .           
   10,020 ( 0.00%)                      for (item_def_id, ty) in projection_bounds {
        .                                   push_arg_separator(cpp_like_debuginfo, output);
        .           
        .                                   if cpp_like_debuginfo {
        .                                       output.push_str("assoc$<");
        .                                       push_item_name(tcx, item_def_id, false, output);
        .                                       push_arg_separator(cpp_like_debuginfo, output);
        .                                       push_debuginfo_type_name(tcx, ty, true, output, visited);
        .                                       push_close_angle_bracket(cpp_like_debuginfo, output);
        .                                   } else {
      566 ( 0.00%)                              push_item_name(tcx, item_def_id, false, output);
        .                                       output.push('=');
    2,830 ( 0.00%)                              push_debuginfo_type_name(tcx, ty, true, output, visited);
        .                                   }
        .                               }
        .           
      566 ( 0.00%)                      push_close_angle_bracket(cpp_like_debuginfo, output);
        .                           }
        .           
    2,404 ( 0.00%)                  if auto_traits.len() != 0 {
    1,078 ( 0.00%)                      push_auto_trait_separator(cpp_like_debuginfo, output);
        .                           }
    1,202 ( 0.00%)              }
        .           
    3,606 ( 0.00%)              if auto_traits.len() != 0 {
    5,390 ( 0.00%)                  let mut auto_traits: SmallVec<[String; 4]> = auto_traits
        .                               .into_iter()
        .                               .map(|def_id| {
        .                                   let mut name = String::with_capacity(20);
    8,455 ( 0.00%)                          push_item_name(tcx, def_id, true, &mut name);
        .                                   name
        .                               })
        .                               .collect();
        .                           auto_traits.sort_unstable();
        .           
   24,942 ( 0.00%)                  for auto_trait in auto_traits {
        .                               output.push_str(&auto_trait);
        .                               push_auto_trait_separator(cpp_like_debuginfo, output);
        .                           }
        .           
        .                           pop_auto_trait_separator(output);
        .                       }
        .           
    1,202 ( 0.00%)              if cpp_like_debuginfo {
        .                           push_close_angle_bracket(cpp_like_debuginfo, output);
    2,404 ( 0.00%)              } else if has_enclosing_parens {
    2,156 ( 0.00%)                  output.push(')');
        .                       }
    1,202 ( 0.00%)          }
        .                   ty::FnDef(..) | ty::FnPtr(_) => {
        .                       // We've encountered a weird 'recursive type'
        .                       // Currently, the only way to generate such a type
        .                       // is by using 'impl trait':
        .                       //
        .                       // fn foo() -> impl Copy { foo }
        .                       //
        .                       // There's not really a sensible name we can generate,
        .                       // since we don't include 'impl trait' types (e.g. ty::Opaque)
        .                       // in the output
        .                       //
        .                       // Since we need to generate *something*, we just
        .                       // use a dummy string that should make it clear
        .                       // that something unusual is going on
    4,364 ( 0.00%)              if !visited.insert(t) {
        .                           output.push_str(if cpp_like_debuginfo {
        .                               "recursive_type$"
        .                           } else {
        .                               "<recursive_type>"
        .                           });
        .                           return;
        .                       }
        .           
        .                       let sig =
   24,002 ( 0.00%)                  tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), t.fn_sig(tcx));
        .           
    2,182 ( 0.00%)              if cpp_like_debuginfo {
        .                           // Format as a C++ function pointer: return_type (*)(params...)
        .                           if sig.output().is_unit() {
        .                               output.push_str("void");
        .                           } else {
        .                               push_debuginfo_type_name(tcx, sig.output(), true, output, visited);
        .                           }
        .                           output.push_str(" (*)(");
        .                       } else {
    6,546 ( 0.00%)                  output.push_str(sig.unsafety.prefix_str());
        .           
    2,182 ( 0.00%)                  if sig.abi != rustc_target::spec::abi::Abi::Rust {
        .                               output.push_str("extern \"");
        .                               output.push_str(sig.abi.name());
        .                               output.push_str("\" ");
        .                           }
        .           
        .                           output.push_str("fn(");
        .                       }
        .           
    4,364 ( 0.00%)              if !sig.inputs().is_empty() {
    6,515 ( 0.00%)                  for &parameter_type in sig.inputs() {
   13,506 ( 0.00%)                      push_debuginfo_type_name(tcx, parameter_type, true, output, visited);
        .                               push_arg_separator(cpp_like_debuginfo, output);
        .                           }
        .                           pop_arg_separator(output);
        .                       }
        .           
    4,364 ( 0.00%)              if sig.c_variadic {
        .                           if !sig.inputs().is_empty() {
        .                               output.push_str(", ...");
        .                           } else {
        .                               output.push_str("...");
        .                           }
        .                       }
        .           
        .                       output.push(')');
        .           
    4,506 ( 0.00%)              if !cpp_like_debuginfo && !sig.output().is_unit() {
        .                           output.push_str(" -> ");
   18,360 ( 0.00%)                  push_debuginfo_type_name(tcx, sig.output(), true, output, visited);
        .                       }
        .           
        .                       // We only keep the type in 'visited'
        .                       // for the duration of the body of this method.
        .                       // It's fine for a particular function type
        .                       // to show up multiple times in one overall type
        .                       // (e.g. MyType<fn() -> u8, fn() -> u8>
        .                       //
        .                       // We only care about avoiding recursing
        .                       // directly back to the type we're currently
        .                       // processing
    4,364 ( 0.00%)              visited.remove(t);
        .                   }
        .                   ty::Closure(def_id, ..) | ty::Generator(def_id, ..) => {
  116,202 ( 0.00%)              let key = tcx.def_key(def_id);
   38,734 ( 0.00%)              if qualified {
        .                           let parent_def_id = DefId { index: key.parent.unwrap(), ..def_id };
  124,544 ( 0.00%)                  push_item_name(tcx, parent_def_id, true, output);
        .                           output.push_str("::");
        .                       }
  251,771 ( 0.00%)              push_unqualified_item_name(tcx, def_id, key.disambiguated_data, output);
        .                   }
        .                   // Type parameters from polymorphized functions.
        .                   ty::Param(_) => {
        .                       output.push_str(&format!("{:?}", t));
        .                   }
        .                   ty::Error(_)
        .                   | ty::Infer(_)
        .                   | ty::Placeholder(..)
-- line 363 ----------------------------------------
-- line 422 ----------------------------------------
        .                           output.push_str(&format!(", {}", variant));
        .                       }
        .                   }
        .                   push_close_angle_bracket(true, output);
        .               }
        .           
        .               const NON_CPP_AUTO_TRAIT_SEPARATOR: &str = " + ";
        .           
    2,156 ( 0.00%)      fn push_auto_trait_separator(cpp_like_debuginfo: bool, output: &mut String) {
    3,847 ( 0.00%)          if cpp_like_debuginfo {
        .                       push_arg_separator(cpp_like_debuginfo, output);
        .                   } else {
        .                       output.push_str(NON_CPP_AUTO_TRAIT_SEPARATOR);
        .                   }
    2,156 ( 0.00%)      }
        .           
        .               fn pop_auto_trait_separator(output: &mut String) {
    1,078 ( 0.00%)          if output.ends_with(NON_CPP_AUTO_TRAIT_SEPARATOR) {
    4,312 ( 0.00%)              output.truncate(output.len() - NON_CPP_AUTO_TRAIT_SEPARATOR.len());
        .                   } else {
        .                       pop_arg_separator(output);
        .                   }
        .               }
  129,960 ( 0.00%)  }
        .           
        .           /// Computes a name for the global variable storing a vtable.
        .           ///
        .           /// The name is of the form:
        .           ///
        .           /// `<path::to::SomeType as path::to::SomeTrait>::{vtable}`
        .           ///
        .           /// or, when generating C++-like names:
        .           ///
        .           /// `impl$<path::to::SomeType, path::to::SomeTrait>::vtable$`
    1,045 ( 0.00%)  pub fn compute_debuginfo_vtable_name<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               t: Ty<'tcx>,
        .               trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,
        .           ) -> String {
        .               let cpp_like_debuginfo = cpp_like_debuginfo(tcx);
        .           
        .               let mut vtable_name = String::with_capacity(64);
        .           
       95 ( 0.00%)      if cpp_like_debuginfo {
        .                   vtable_name.push_str("impl$<");
        .               } else {
        .                   vtable_name.push('<');
        .               }
        .           
        .               let mut visited = FxHashSet::default();
      475 ( 0.00%)      push_debuginfo_type_name(tcx, t, true, &mut vtable_name, &mut visited);
        .           
       95 ( 0.00%)      if cpp_like_debuginfo {
        .                   vtable_name.push_str(", ");
        .               } else {
        .                   vtable_name.push_str(" as ");
        .               }
        .           
      190 ( 0.00%)      if let Some(trait_ref) = trait_ref {
        .                   let trait_ref =
      950 ( 0.00%)              tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), trait_ref);
      570 ( 0.00%)          push_item_name(tcx, trait_ref.def_id, true, &mut vtable_name);
        .                   visited.clear();
      380 ( 0.00%)          push_generic_params_internal(tcx, trait_ref.substs, &mut vtable_name, &mut visited);
        .               } else {
        .                   vtable_name.push_str("_");
        .               }
        .           
      380 ( 0.00%)      push_close_angle_bracket(cpp_like_debuginfo, &mut vtable_name);
        .           
       95 ( 0.00%)      let suffix = if cpp_like_debuginfo { "::vtable$" } else { "::{vtable}" };
        .           
        .               vtable_name.reserve_exact(suffix.len());
        .               vtable_name.push_str(suffix);
        .           
        .               vtable_name
      855 ( 0.00%)  }
        .           
7,701,432 ( 0.04%)  pub fn push_item_name(tcx: TyCtxt<'_>, def_id: DefId, qualified: bool, output: &mut String) {
3,212,892 ( 0.02%)      let def_key = tcx.def_key(def_id);
2,567,144 ( 0.01%)      if qualified {
        .                   if let Some(parent) = def_key.parent {
2,720,580 ( 0.01%)              push_item_name(tcx, DefId { krate: def_id.krate, index: parent }, true, output);
        .                       output.push_str("::");
        .                   }
        .               }
        .           
8,988,400 ( 0.05%)      push_unqualified_item_name(tcx, def_id, def_key.disambiguated_data, output);
        .           }
        .           
7,940,628 ( 0.04%)  fn push_unqualified_item_name(
        .               tcx: TyCtxt<'_>,
        .               def_id: DefId,
        .               disambiguated_data: DisambiguatedDefPathData,
        .               output: &mut String,
        .           ) {
2,345,596 ( 0.01%)      match disambiguated_data.data {
        .                   DefPathData::CrateRoot => {
  753,200 ( 0.00%)              output.push_str(tcx.crate_name(def_id.krate).as_str());
        .                   }
   38,531 ( 0.00%)          DefPathData::ClosureExpr if tcx.generator_kind(def_id).is_some() => {
        .                       let key = match tcx.generator_kind(def_id).unwrap() {
   17,856 ( 0.00%)                  hir::GeneratorKind::Async(hir::AsyncGeneratorKind::Block) => "async_block",
        .                           hir::GeneratorKind::Async(hir::AsyncGeneratorKind::Closure) => "async_closure",
   33,100 ( 0.00%)                  hir::GeneratorKind::Async(hir::AsyncGeneratorKind::Fn) => "async_fn",
        .                           hir::GeneratorKind::Gen => "generator",
        .                       };
        .                       // Generators look like closures, but we want to treat them differently
        .                       // in the debug info.
   12,739 ( 0.00%)              if cpp_like_debuginfo(tcx) {
        .                           write!(output, "{}${}", key, disambiguated_data.disambiguator).unwrap();
        .                       } else {
  114,651 ( 0.00%)                  write!(output, "{{{}#{}}}", key, disambiguated_data.disambiguator).unwrap();
        .                       }
        .                   }
1,495,020 ( 0.01%)          _ => match disambiguated_data.data.name() {
  909,486 ( 0.00%)              DefPathDataName::Named(name) => {
1,364,229 ( 0.01%)                  output.push_str(name.as_str());
        .                       }
   43,597 ( 0.00%)              DefPathDataName::Anon { namespace } => {
   43,597 ( 0.00%)                  if cpp_like_debuginfo(tcx) {
        .                               write!(output, "{}${}", namespace, disambiguated_data.disambiguator).unwrap();
        .                           } else {
  392,373 ( 0.00%)                      write!(output, "{{{}#{}}}", namespace, disambiguated_data.disambiguator)
        .                                   .unwrap();
        .                           }
        .                       }
        .                   },
        .               };
5,293,752 ( 0.03%)  }
        .           
        .           // Pushes the generic parameters in the given `InternalSubsts` to the output string.
        .           // This ignores region parameters, since they can't reliably be
        .           // reconstructed for items from non-local crates. For local crates, this
        .           // would be possible but with inlining and LTO we have to use the least
        .           // common denominator - otherwise we would run into conflicts.
1,782,825 ( 0.01%)  fn push_generic_params_internal<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               substs: SubstsRef<'tcx>,
        .               output: &mut String,
        .               visited: &mut FxHashSet<Ty<'tcx>>,
        .           ) -> bool {
        .               if substs.non_erasable_generics().next().is_none() {
        .                   return false;
        .               }
-- line 566 ----------------------------------------
-- line 569 ----------------------------------------
        .           
        .               let cpp_like_debuginfo = cpp_like_debuginfo(tcx);
        .           
        .               output.push('<');
        .           
        .               for type_parameter in substs.non_erasable_generics() {
        .                   match type_parameter {
        .                       GenericArgKind::Type(type_parameter) => {
  865,668 ( 0.00%)                  push_debuginfo_type_name(tcx, type_parameter, true, output, visited);
        .                       }
        .                       GenericArgKind::Const(ct) => {
        .                           push_const_param(tcx, ct, output);
        .                       }
        .                       other => bug!("Unexpected non-erasable generic: {:?}", other),
        .                   }
        .           
        .                   push_arg_separator(cpp_like_debuginfo, output);
        .               }
        .               pop_arg_separator(output);
  400,556 ( 0.00%)      push_close_angle_bracket(cpp_like_debuginfo, output);
        .           
        .               true
1,296,600 ( 0.01%)  }
        .           
        .           fn push_const_param<'tcx>(tcx: TyCtxt<'tcx>, ct: &'tcx ty::Const<'tcx>, output: &mut String) {
       14 ( 0.00%)      match ct.val {
        .                   ty::ConstKind::Param(param) => {
        .                       write!(output, "{}", param.name)
        .                   }
       28 ( 0.00%)          _ => match ct.ty.kind() {
        .                       ty::Int(ity) => {
        .                           let bits = ct.eval_bits(tcx, ty::ParamEnv::reveal_all(), ct.ty);
        .                           let val = Integer::from_int_ty(&tcx, *ity).size().sign_extend(bits) as i128;
        .                           write!(output, "{}", val)
        .                       }
        .                       ty::Uint(_) => {
       49 ( 0.00%)                  let val = ct.eval_bits(tcx, ty::ParamEnv::reveal_all(), ct.ty);
       35 ( 0.00%)                  write!(output, "{}", val)
        .                       }
        .                       ty::Bool => {
        .                           let val = ct.try_eval_bool(tcx, ty::ParamEnv::reveal_all()).unwrap();
        .                           write!(output, "{}", val)
        .                       }
        .                       _ => {
        .                           // If we cannot evaluate the constant to a known type, we fall back
        .                           // to emitting a stable hash value of the constant. This isn't very pretty
-- line 614 ----------------------------------------
-- line 630 ----------------------------------------
        .                               write!(output, "{{CONST#{:x}}}", hash)
        .                           }
        .                       }
        .                   },
        .               }
        .               .unwrap();
        .           }
        .           
   88,176 ( 0.00%)  pub fn push_generic_params<'tcx>(tcx: TyCtxt<'tcx>, substs: SubstsRef<'tcx>, output: &mut String) {
        .               let _prof = tcx.prof.generic_activity("compute_debuginfo_type_name");
        .               let mut visited = FxHashSet::default();
   29,392 ( 0.00%)      push_generic_params_internal(tcx, substs, output, &mut visited);
   51,436 ( 0.00%)  }
        .           
  201,600 ( 0.00%)  fn push_close_angle_bracket(cpp_like_debuginfo: bool, output: &mut String) {
        .               // MSVC debugger always treats `>>` as a shift, even when parsing templates,
        .               // so add a space to avoid confusion.
  201,600 ( 0.00%)      if cpp_like_debuginfo && output.ends_with('>') {
        .                   output.push(' ')
        .               };
        .           
        .               output.push('>');
  201,600 ( 0.00%)  }
        .           
      398 ( 0.00%)  fn pop_close_angle_bracket(output: &mut String) {
      199 ( 0.00%)      assert!(output.ends_with('>'), "'output' does not end with '>': {}", output);
        .               output.pop();
      199 ( 0.00%)      if output.ends_with(' ') {
        .                   output.pop();
        .               }
      398 ( 0.00%)  }
        .           
        .           fn push_arg_separator(cpp_like_debuginfo: bool, output: &mut String) {
        .               // Natvis does not always like having spaces between parts of the type name
        .               // and this causes issues when we need to write a typename in natvis, for example
        .               // as part of a cast like the `HashMap` visualizer does.
  146,983 ( 0.00%)      if cpp_like_debuginfo {
        .                   output.push(',');
        .               } else {
        .                   output.push_str(", ");
        .               };
        .           }
        .           
        .           fn pop_arg_separator(output: &mut String) {
  105,968 ( 0.00%)      if output.ends_with(' ') {
        .                   output.pop();
        .               }
        .           
  105,968 ( 0.00%)      assert!(output.ends_with(','));
        .           
        .               output.pop();
        .           }
        .           
        .           /// Check if we should generate C++ like names and debug information.
   10,538 ( 0.00%)  pub fn cpp_like_debuginfo(tcx: TyCtxt<'_>) -> bool {
1,350,903 ( 0.01%)      tcx.sess.target.is_like_msvc
   21,076 ( 0.00%)  }

1,381,926 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/lossy.rs
--------------------------------------------------------------------------------
Ir                 

-- line 8 ----------------------------------------
        .           /// Lossy UTF-8 string.
        .           #[unstable(feature = "str_internals", issue = "none")]
        .           pub struct Utf8Lossy {
        .               bytes: [u8],
        .           }
        .           
        .           impl Utf8Lossy {
        .               #[must_use]
   83,308 ( 0.00%)      pub fn from_bytes(bytes: &[u8]) -> &Utf8Lossy {
        .                   // SAFETY: Both use the same memory layout, and UTF-8 correctness isn't required.
        .                   unsafe { mem::transmute(bytes) }
   41,654 ( 0.00%)      }
        .           
   83,302 ( 0.00%)      pub fn chunks(&self) -> Utf8LossyChunksIter<'_> {
        .                   Utf8LossyChunksIter { source: &self.bytes }
   41,651 ( 0.00%)      }
        .           }
        .           
        .           /// Iterator over lossy UTF-8 string
        .           #[must_use = "iterators are lazy and do nothing unless consumed"]
        .           #[unstable(feature = "str_internals", issue = "none")]
        .           #[allow(missing_debug_implementations)]
        .           pub struct Utf8LossyChunksIter<'a> {
        .               source: &'a [u8],
-- line 31 ----------------------------------------
-- line 40 ----------------------------------------
        .               /// Single broken char, empty if none.
        .               /// Empty iff iterator item is last.
        .               pub broken: &'a [u8],
        .           }
        .           
        .           impl<'a> Iterator for Utf8LossyChunksIter<'a> {
        .               type Item = Utf8LossyChunk<'a>;
        .           
  124,962 ( 0.00%)      fn next(&mut self) -> Option<Utf8LossyChunk<'a>> {
   83,308 ( 0.00%)          if self.source.is_empty() {
        .                       return None;
        .                   }
        .           
        .                   const TAG_CONT_U8: u8 = 128;
        .                   fn safe_get(xs: &[u8], i: usize) -> u8 {
        .                       *xs.get(i).unwrap_or(&0)
        .                   }
        .           
        .                   let mut i = 0;
        .                   let mut valid_up_to = 0;
6,761,554 ( 0.03%)          while i < self.source.len() {
        .                       // SAFETY: `i < self.source.len()` per previous line.
        .                       // For some reason the following are both significantly slower:
        .                       // while let Some(&byte) = self.source.get(i) {
        .                       // while let Some(byte) = self.source.get(i).copied() {
3,380,777 ( 0.02%)              let byte = unsafe { *self.source.get_unchecked(i) };
3,380,777 ( 0.02%)              i += 1;
        .           
6,761,554 ( 0.03%)              if byte < 128 {
        .                           // This could be a `1 => ...` case in the match below, but for
        .                           // the common case of all-ASCII inputs, we bypass loading the
        .                           // sizeable UTF8_CHAR_WIDTH table into cache.
        .                       } else {
        .                           let w = utf8_char_width(byte);
        .           
        .                           match w {
        .                               2 => {
-- line 76 ----------------------------------------
-- line 121 ----------------------------------------
        .                   // via `i += 1` and in between every single one of those increments, `i`
        .                   // is compared against `self.source.len()`. That happens either
        .                   // literally by `i < self.source.len()` in the while-loop's condition,
        .                   // or indirectly by `safe_get(self.source, i) & 192 != TAG_CONT_U8`. The
        .                   // loop is terminated as soon as the latest `i += 1` has made `i` no
        .                   // longer less than `self.source.len()`, which means it'll be at most
        .                   // equal to `self.source.len()`.
        .                   let (inspected, remaining) = unsafe { self.source.split_at_unchecked(i) };
   83,308 ( 0.00%)          self.source = remaining;
        .           
        .                   // SAFETY: `valid_up_to <= i` because it is only ever assigned via
        .                   // `valid_up_to = i` and `i` only increases.
        .                   let (valid, broken) = unsafe { inspected.split_at_unchecked(valid_up_to) };
        .           
  208,270 ( 0.00%)          Some(Utf8LossyChunk {
        .                       // SAFETY: All bytes up to `valid_up_to` are valid UTF-8.
        .                       valid: unsafe { from_utf8_unchecked(valid) },
        .                       broken,
        .                   })
  208,270 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Display for Utf8Lossy {
       24 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   // If we're the empty string then our iterator won't actually yield
        .                   // anything, so perform the formatting manually
        3 ( 0.00%)          if self.bytes.is_empty() {
        .                       return "".fmt(f);
        .                   }
        .           
       33 ( 0.00%)          for Utf8LossyChunk { valid, broken } in self.chunks() {
        .                       // If we successfully decoded the whole chunk as a valid string then
        .                       // we can return a direct formatting of the string which will also
        .                       // respect various formatting flags if possible.
        6 ( 0.00%)              if valid.len() == self.bytes.len() {
        3 ( 0.00%)                  assert!(broken.is_empty());
        .                           return valid.fmt(f);
        .                       }
        .           
        .                       f.write_str(valid)?;
        .                       if !broken.is_empty() {
        .                           f.write_char(char::REPLACEMENT_CHARACTER)?;
        .                       }
        .                   }
        .                   Ok(())
       27 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for Utf8Lossy {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   f.write_char('"')?;
        .           
        .                   for Utf8LossyChunk { valid, broken } in self.chunks() {
        .                       // Valid part.
-- line 174 ----------------------------------------

3,589,056 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/lossy.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir                  

-- line 21 ----------------------------------------
         .           use rustc_target::spec::abi;
         .           use std::borrow::Cow;
         .           use std::cmp::Ordering;
         .           use std::marker::PhantomData;
         .           use std::ops::Range;
         .           use ty::util::IntTypeExt;
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        69 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
         .           pub struct TypeAndMut<'tcx> {
    29,199 ( 0.00%)      pub ty: Ty<'tcx>,
   145,995 ( 0.00%)      pub mutbl: hir::Mutability,
         .           }
         .           
         .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
         .           #[derive(HashStable)]
         .           /// A "free" region `fr` can be interpreted as "some region
         .           /// at least as big as the scope `fr.scope`".
         .           pub struct FreeRegion {
     6,163 ( 0.00%)      pub scope: DefId,
    12,712 ( 0.00%)      pub bound_region: BoundRegionKind,
         .           }
         .           
   726,366 ( 0.00%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
     1,309 ( 0.00%)  #[derive(HashStable)]
         .           pub enum BoundRegionKind {
         .               /// An anonymous region parameter for a given fn (&T)
    83,447 ( 0.00%)      BrAnon(u32),
         .           
         .               /// Named region parameters for functions (a in &'a T)
         .               ///
         .               /// The `DefId` is needed to distinguish free regions in
         .               /// the event of shadowing.
       595 ( 0.00%)      BrNamed(DefId, Symbol),
         .           
         .               /// Anonymous region for the implicit env pointer parameter
         .               /// to a closure
         .               BrEnv,
         .           }
         .           
     1,694 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
         .           #[derive(HashStable)]
         .           pub struct BoundRegion {
   153,587 ( 0.00%)      pub var: BoundVar,
   134,799 ( 0.00%)      pub kind: BoundRegionKind,
         .           }
         .           
         .           impl BoundRegionKind {
         .               pub fn is_named(&self) -> bool {
         .                   match *self {
         .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
         .                       _ => false,
         .                   }
         .               }
         .           }
         .           
         .           /// Defines the kinds of types.
         .           ///
         .           /// N.B., if you change this, you'll probably want to change the corresponding
         .           /// AST structure in `rustc_ast/src/ast.rs` as well.
28,324,119 ( 0.14%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
 1,168,761 ( 0.01%)  #[derive(HashStable)]
         .           #[rustc_diagnostic_item = "TyKind"]
         .           pub enum TyKind<'tcx> {
         .               /// The primitive boolean type. Written as `bool`.
         .               Bool,
         .           
         .               /// The primitive character type; holds a Unicode scalar value
         .               /// (a non-surrogate code point). Written as `char`.
         .               Char,
-- line 90 ----------------------------------------
-- line 99 ----------------------------------------
         .               Float(ty::FloatTy),
         .           
         .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
         .               ///
         .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
         .               /// That is, even after substitution it is possible that there are type
         .               /// variables. This happens when the `Adt` corresponds to an ADT
         .               /// definition and not a concrete use of it.
 4,881,915 ( 0.02%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
         .           
         .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
         .               Foreign(DefId),
         .           
         .               /// The pointee of a string slice. Written as `str`.
         .               Str,
         .           
         .               /// An array with the given length. Written as `[T; n]`.
    19,739 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
         .           
         .               /// The pointee of an array slice. Written as `[T]`.
         .               Slice(Ty<'tcx>),
         .           
         .               /// A raw pointer. Written as `*mut T` or `*const T`
         .               RawPtr(TypeAndMut<'tcx>),
         .           
         .               /// A reference; a pointer with an associated lifetime. Written as
         .               /// `&'a mut T` or `&'a T`.
 1,530,676 ( 0.01%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
         .           
         .               /// The anonymous type of a function declaration/definition. Each
         .               /// function has a unique type, which is output (for a function
         .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
         .               ///
         .               /// For example the type of `bar` here:
         .               ///
         .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
         .               ///
         .               /// ```rust
         .               /// fn foo() -> i32 { 1 }
         .               /// let bar: fn() -> i32 = foo;
         .               /// ```
         .               FnPtr(PolyFnSig<'tcx>),
         .           
         .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
   106,496 ( 0.00%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
         .           
         .               /// The anonymous type of a closure. Used to represent the type of
         .               /// `|a| a`.
         .               Closure(DefId, SubstsRef<'tcx>),
         .           
         .               /// The anonymous type of a generator. Used to represent the type of
         .               /// `|a| yield a`.
    90,207 ( 0.00%)      Generator(DefId, SubstsRef<'tcx>, hir::Movability),
         .           
         .               /// A type representing the types stored inside a generator.
         .               /// This should only appear in GeneratorInteriors.
         .               GeneratorWitness(Binder<'tcx, &'tcx List<Ty<'tcx>>>),
         .           
         .               /// The never type `!`.
         .               Never,
         .           
-- line 167 ----------------------------------------
-- line 180 ----------------------------------------
         .               /// The substitutions are for the generics of the function in question.
         .               /// After typeck, the concrete type can be found in the `types` map.
         .               Opaque(DefId, SubstsRef<'tcx>),
         .           
         .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
         .               Param(ParamTy),
         .           
         .               /// Bound type variable, used only when preparing a trait query.
     1,880 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
         .           
         .               /// A placeholder type - universally quantified higher-ranked type.
         .               Placeholder(ty::PlaceholderType),
         .           
         .               /// A type variable used during type checking.
         .               Infer(InferTy),
         .           
         .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 330 ----------------------------------------
         .               pub closure_kind_ty: T,
         .               pub closure_sig_as_fn_ptr_ty: T,
         .               pub tupled_upvars_ty: T,
         .           }
         .           
         .           impl<'tcx> ClosureSubsts<'tcx> {
         .               /// Construct `ClosureSubsts` from `ClosureSubstsParts`, containing `Substs`
         .               /// for the closure parent, alongside additional closure-specific components.
        39 ( 0.00%)      pub fn new(
         .                   tcx: TyCtxt<'tcx>,
         .                   parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,
         .               ) -> ClosureSubsts<'tcx> {
         .                   ClosureSubsts {
         .                       substs: tcx.mk_substs(
        78 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
       156 ( 0.00%)                      [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]
         .                                   .iter()
         .                                   .map(|&ty| ty.into()),
         .                           ),
         .                       ),
         .                   }
        78 ( 0.00%)      }
         .           
         .               /// Divides the closure substs into their respective components.
         .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
     6,662 ( 0.00%)      fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
         .                   match self.substs[..] {
    35,586 ( 0.00%)              [
    10,146 ( 0.00%)                  ref parent_substs @ ..,
    10,645 ( 0.00%)                  closure_kind_ty,
     3,799 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
    10,015 ( 0.00%)                  tupled_upvars_ty,
    26,648 ( 0.00%)              ] => ClosureSubstsParts {
         .                           parent_substs,
         .                           closure_kind_ty,
         .                           closure_sig_as_fn_ptr_ty,
         .                           tupled_upvars_ty,
         .                       },
         .                       _ => bug!("closure substs missing synthetics"),
         .                   }
    19,986 ( 0.00%)      }
         .           
         .               /// Returns `true` only if enough of the synthetic types are known to
         .               /// allow using all of the methods on `ClosureSubsts` without panicking.
         .               ///
         .               /// Used primarily by `ty::print::pretty` to be able to handle closure
         .               /// types that haven't had their synthetic types substituted in.
         4 ( 0.00%)      pub fn is_valid(self) -> bool {
         8 ( 0.00%)          self.substs.len() >= 3
         8 ( 0.00%)              && matches!(self.split().tupled_upvars_ty.expect_ty().kind(), Tuple(_))
         8 ( 0.00%)      }
         .           
         .               /// Returns the substitutions of the closure's parent.
         .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
         .                   self.split().parent_substs
         .               }
         .           
         .               /// Returns an iterator over the list of types of captured paths by the closure.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
     6,480 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
     5,837 ( 0.00%)          match self.tupled_upvars_ty().kind() {
         .                       TyKind::Error(_) => None,
     3,130 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
     4,320 ( 0.00%)      }
         .           
         .               /// Returns the tuple type representing the upvars for this closure.
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
    36,082 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
         .               }
         .           
         .               /// Returns the closure kind for this closure; may return a type
         .               /// variable during inference. To get the closure kind during
         .               /// inference, use `infcx.closure_kind(substs)`.
     1,542 ( 0.00%)      pub fn kind_ty(self) -> Ty<'tcx> {
         .                   self.split().closure_kind_ty.expect_ty()
     3,084 ( 0.00%)      }
         .           
         .               /// Returns the `fn` pointer type representing the closure signature for this
         .               /// closure.
         .               // FIXME(eddyb) this should be unnecessary, as the shallowly resolved
         .               // type is known at the time of the creation of `ClosureSubsts`,
         .               // see `rustc_typeck::check::closure`.
         .               pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {
         .                   self.split().closure_sig_as_fn_ptr_ty.expect_ty()
         .               }
         .           
         .               /// Returns the closure kind for this closure; only usable outside
         .               /// of an inference context, because in that context we know that
         .               /// there are no type variables.
         .               ///
         .               /// If you have an inference context, use `infcx.closure_kind()`.
        11 ( 0.00%)      pub fn kind(self) -> ty::ClosureKind {
       348 ( 0.00%)          self.kind_ty().to_opt_closure_kind().unwrap()
        22 ( 0.00%)      }
         .           
         .               /// Extracts the signature from the closure.
     2,057 ( 0.00%)      pub fn sig(self) -> ty::PolyFnSig<'tcx> {
         .                   let ty = self.sig_as_fn_ptr_ty();
     4,114 ( 0.00%)          match ty.kind() {
     8,228 ( 0.00%)              ty::FnPtr(sig) => *sig,
         .                       _ => bug!("closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}", ty.kind()),
         .                   }
     6,171 ( 0.00%)      }
         .           }
         .           
         .           /// Similar to `ClosureSubsts`; see the above documentation for more.
         .           #[derive(Copy, Clone, Debug, TypeFoldable)]
         .           pub struct GeneratorSubsts<'tcx> {
         .               pub substs: SubstsRef<'tcx>,
         .           }
         .           
-- line 448 ----------------------------------------
-- line 453 ----------------------------------------
         .               pub return_ty: T,
         .               pub witness: T,
         .               pub tupled_upvars_ty: T,
         .           }
         .           
         .           impl<'tcx> GeneratorSubsts<'tcx> {
         .               /// Construct `GeneratorSubsts` from `GeneratorSubstsParts`, containing `Substs`
         .               /// for the generator parent, alongside additional generator-specific components.
        14 ( 0.00%)      pub fn new(
         .                   tcx: TyCtxt<'tcx>,
         .                   parts: GeneratorSubstsParts<'tcx, Ty<'tcx>>,
         .               ) -> GeneratorSubsts<'tcx> {
         .                   GeneratorSubsts {
         .                       substs: tcx.mk_substs(
        28 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
        42 ( 0.00%)                      [
        14 ( 0.00%)                          parts.resume_ty,
         .                                   parts.yield_ty,
        14 ( 0.00%)                          parts.return_ty,
         .                                   parts.witness,
        14 ( 0.00%)                          parts.tupled_upvars_ty,
         .                               ]
         .                               .iter()
         .                               .map(|&ty| ty.into()),
         .                           ),
         .                       ),
         .                   }
        28 ( 0.00%)      }
         .           
         .               /// Divides the generator substs into their respective components.
         .               /// The ordering assumed here must match that used by `GeneratorSubsts::new` above.
     2,259 ( 0.00%)      fn split(self) -> GeneratorSubstsParts<'tcx, GenericArg<'tcx>> {
         .                   match self.substs[..] {
    25,730 ( 0.00%)              [ref parent_substs @ .., resume_ty, yield_ty, return_ty, witness, tupled_upvars_ty] => {
    11,295 ( 0.00%)                  GeneratorSubstsParts {
         .                               parent_substs,
         .                               resume_ty,
         .                               yield_ty,
         .                               return_ty,
         .                               witness,
         .                               tupled_upvars_ty,
         .                           }
         .                       }
         .                       _ => bug!("generator substs missing synthetics"),
         .                   }
     6,777 ( 0.00%)      }
         .           
         .               /// Returns `true` only if enough of the synthetic types are known to
         .               /// allow using all of the methods on `GeneratorSubsts` without panicking.
         .               ///
         .               /// Used primarily by `ty::print::pretty` to be able to handle generator
         .               /// types that haven't had their synthetic types substituted in.
        14 ( 0.00%)      pub fn is_valid(self) -> bool {
        28 ( 0.00%)          self.substs.len() >= 5
        28 ( 0.00%)              && matches!(self.split().tupled_upvars_ty.expect_ty().kind(), Tuple(_))
        28 ( 0.00%)      }
         .           
         .               /// Returns the substitutions of the generator's parent.
         .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
         .                   self.split().parent_substs
         .               }
         .           
         .               /// This describes the types that can be contained in a generator.
         .               /// It will be a type variable initially and unified in the last stages of typeck of a body.
         .               /// It contains a tuple of all the types that could end up on a generator frame.
         .               /// The state transformation MIR pass may only produce layouts which mention types
         .               /// in this tuple. Upvars are not counted here.
       314 ( 0.00%)      pub fn witness(self) -> Ty<'tcx> {
         .                   self.split().witness.expect_ty()
       628 ( 0.00%)      }
         .           
         .               /// Returns an iterator over the list of types of captured paths by the generator.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
       432 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
     2,988 ( 0.00%)          match self.tupled_upvars_ty().kind() {
         .                       TyKind::Error(_) => None,
     1,858 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
       288 ( 0.00%)      }
         .           
         .               /// Returns the tuple type representing the upvars for this generator.
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
     8,286 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
         .               }
         .           
         .               /// Returns the type representing the resume type of the generator.
        32 ( 0.00%)      pub fn resume_ty(self) -> Ty<'tcx> {
         .                   self.split().resume_ty.expect_ty()
        64 ( 0.00%)      }
         .           
         .               /// Returns the type representing the yield type of the generator.
        18 ( 0.00%)      pub fn yield_ty(self) -> Ty<'tcx> {
         .                   self.split().yield_ty.expect_ty()
        36 ( 0.00%)      }
         .           
         .               /// Returns the type representing the return type of the generator.
        18 ( 0.00%)      pub fn return_ty(self) -> Ty<'tcx> {
         .                   self.split().return_ty.expect_ty()
        36 ( 0.00%)      }
         .           
         .               /// Returns the "generator signature", which consists of its yield
         .               /// and return types.
         .               ///
         .               /// N.B., some bits of the code prefers to see this wrapped in a
         .               /// binder, but it never contains bound regions. Probably this
         .               /// function should be removed.
     3,156 ( 0.00%)      pub fn poly_sig(self) -> PolyGenSig<'tcx> {
       824 ( 0.00%)          ty::Binder::dummy(self.sig())
     3,156 ( 0.00%)      }
         .           
         .               /// Returns the "generator signature", which consists of its resume, yield
         .               /// and return types.
       838 ( 0.00%)      pub fn sig(self) -> GenSig<'tcx> {
     2,514 ( 0.00%)          ty::GenSig {
         .                       resume_ty: self.resume_ty(),
         .                       yield_ty: self.yield_ty(),
         .                       return_ty: self.return_ty(),
         .                   }
     2,514 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> GeneratorSubsts<'tcx> {
         .               /// Generator has not been resumed yet.
         .               pub const UNRESUMED: usize = 0;
         .               /// Generator has returned or is completed.
         .               pub const RETURNED: usize = 1;
         .               /// Generator has been poisoned.
-- line 586 ----------------------------------------
-- line 589 ----------------------------------------
         .               const UNRESUMED_NAME: &'static str = "Unresumed";
         .               const RETURNED_NAME: &'static str = "Returned";
         .               const POISONED_NAME: &'static str = "Panicked";
         .           
         .               /// The valid variant indices of this generator.
         .               #[inline]
         .               pub fn variant_range(&self, def_id: DefId, tcx: TyCtxt<'tcx>) -> Range<VariantIdx> {
         .                   // FIXME requires optimized MIR
     2,046 ( 0.00%)          let num_variants = tcx.generator_layout(def_id).unwrap().variant_fields.len();
         .                   VariantIdx::new(0)..VariantIdx::new(num_variants)
         .               }
         .           
         .               /// The discriminant for the given variant. Panics if the `variant_index` is
         .               /// out of range.
         .               #[inline]
         .               pub fn discriminant_for_variant(
         .                   &self,
         .                   def_id: DefId,
         .                   tcx: TyCtxt<'tcx>,
         .                   variant_index: VariantIdx,
         .               ) -> Discr<'tcx> {
         .                   // Generators don't support explicit discriminant values, so they are
         .                   // the same as the variant index.
       153 ( 0.00%)          assert!(self.variant_range(def_id, tcx).contains(&variant_index));
       306 ( 0.00%)          Discr { val: variant_index.as_usize() as u128, ty: self.discr_ty(tcx) }
         .               }
         .           
         .               /// The set of all discriminants for the generator, enumerated with their
         .               /// variant indices.
         .               #[inline]
         .               pub fn discriminants(
         .                   self,
         .                   def_id: DefId,
-- line 621 ----------------------------------------
-- line 623 ----------------------------------------
         .               ) -> impl Iterator<Item = (VariantIdx, Discr<'tcx>)> + Captures<'tcx> {
         .                   self.variant_range(def_id, tcx).map(move |index| {
         .                       (index, Discr { val: index.as_usize() as u128, ty: self.discr_ty(tcx) })
         .                   })
         .               }
         .           
         .               /// Calls `f` with a reference to the name of the enumerator for the given
         .               /// variant `v`.
     2,895 ( 0.00%)      pub fn variant_name(v: VariantIdx) -> Cow<'static, str> {
     4,578 ( 0.00%)          match v.as_usize() {
         .                       Self::UNRESUMED => Cow::from(Self::UNRESUMED_NAME),
         .                       Self::RETURNED => Cow::from(Self::RETURNED_NAME),
         .                       Self::POISONED => Cow::from(Self::POISONED_NAME),
     2,513 ( 0.00%)              _ => Cow::from(format!("Suspend{}", v.as_usize() - 3)),
         .                   }
     3,860 ( 0.00%)      }
         .           
         .               /// The type of the state discriminant used in the generator type.
         .               #[inline]
         .               pub fn discr_ty(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
       496 ( 0.00%)          tcx.types.u32
         .               }
         .           
         .               /// This returns the types of the MIR locals which had to be stored across suspension points.
         .               /// It is calculated in rustc_const_eval::transform::generator::StateTransform.
         .               /// All the types here must be in the tuple in GeneratorInterior.
         .               ///
         .               /// The locals are grouped by their variant number. Note that some locals may
         .               /// be repeated in multiple variants.
         .               #[inline]
         .               pub fn state_tys(
         .                   self,
         .                   def_id: DefId,
         .                   tcx: TyCtxt<'tcx>,
         .               ) -> impl Iterator<Item = impl Iterator<Item = Ty<'tcx>> + Captures<'tcx>> {
     9,360 ( 0.00%)          let layout = tcx.generator_layout(def_id).unwrap();
         .                   layout.variant_fields.iter().map(move |variant| {
    14,992 ( 0.00%)              variant.iter().map(move |field| layout.field_tys[*field].subst(tcx, self.substs))
         .                   })
         .               }
         .           
         .               /// This is the types of the fields of a generator which are not stored in a
         .               /// variant.
         .               #[inline]
     4,964 ( 0.00%)      pub fn prefix_tys(self) -> impl Iterator<Item = Ty<'tcx>> {
         .                   self.upvar_tys()
     3,408 ( 0.00%)      }
         .           }
         .           
         .           #[derive(Debug, Copy, Clone, HashStable)]
         .           pub enum UpvarSubsts<'tcx> {
         .               Closure(SubstsRef<'tcx>),
         .               Generator(SubstsRef<'tcx>),
         .           }
         .           
         .           impl<'tcx> UpvarSubsts<'tcx> {
         .               /// Returns an iterator over the list of types of captured paths by the closure/generator.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
         .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       156 ( 0.00%)          let tupled_tys = match self {
       139 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
        70 ( 0.00%)              UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
         .                   };
         .           
       340 ( 0.00%)          match tupled_tys.kind() {
         .                       TyKind::Error(_) => None,
       287 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
         .               }
         .           
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
       262 ( 0.00%)          match self {
       191 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
       107 ( 0.00%)              UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
         .                   }
         .               }
         .           }
         .           
         .           /// An inline const is modeled like
         .           ///
         .           ///     const InlineConst<'l0...'li, T0...Tj, R>: R;
         .           ///
-- line 711 ----------------------------------------
-- line 760 ----------------------------------------
         .               }
         .           
         .               /// Returns the type of this inline const.
         .               pub fn ty(self) -> Ty<'tcx> {
         .                   self.split().ty.expect_ty()
         .               }
         .           }
         .           
   380,300 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
   189,687 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub enum ExistentialPredicate<'tcx> {
         .               /// E.g., `Iterator`.
         .               Trait(ExistentialTraitRef<'tcx>),
         .               /// E.g., `Iterator::Item = T`.
         .               Projection(ExistentialProjection<'tcx>),
         .               /// E.g., `Send`.
    10,740 ( 0.00%)      AutoTrait(DefId),
         .           }
         .           
         .           impl<'tcx> ExistentialPredicate<'tcx> {
         .               /// Compares via an ordering that will not change if modules are reordered or other changes are
         .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
    79,040 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
         .                   use self::ExistentialPredicate::*;
   117,638 ( 0.00%)          match (*self, *other) {
         .                       (Trait(_), Trait(_)) => Ordering::Equal,
         .                       (Projection(ref a), Projection(ref b)) => {
         .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
         .                       }
         .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
         .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
         .                       }
         .                       (Trait(_), _) => Ordering::Less,
         .                       (Projection(_), Trait(_)) => Ordering::Greater,
         .                       (Projection(_), _) => Ordering::Less,
         .                       (AutoTrait(_), _) => Ordering::Greater,
         .                   }
    94,848 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
     3,870 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
         .                   use crate::ty::ToPredicate;
     2,982 ( 0.00%)          match self.skip_binder() {
         .                       ExistentialPredicate::Trait(tr) => {
         .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
         .                       }
         .                       ExistentialPredicate::Projection(p) => {
        50 ( 0.00%)                  self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
         .                       }
         .                       ExistentialPredicate::AutoTrait(did) => {
       474 ( 0.00%)                  let trait_ref = self.rebind(ty::TraitRef {
         .                               def_id: did,
         .                               substs: tcx.mk_substs_trait(self_ty, &[]),
         .                           });
         .                           trait_ref.without_const().to_predicate(tcx)
         .                       }
         .                   }
     3,440 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
         .               /// Returns the "principal `DefId`" of this set of existential predicates.
         .               ///
         .               /// A Rust trait object type consists (in addition to a lifetime bound)
         .               /// of a set of trait bounds, which are separated into any number
         .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 839 ----------------------------------------
         .               /// are the set `{Sync}`.
         .               ///
         .               /// It is also possible to have a "trivial" trait object that
         .               /// consists only of auto traits, with no principal - for example,
         .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
         .               /// is `{Send, Sync}`, while there is no principal. These trait objects
         .               /// have a "trivial" vtable consisting of just the size, alignment,
         .               /// and destructor.
     1,837 ( 0.00%)      pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
     9,500 ( 0.00%)          self[0]
     3,858 ( 0.00%)              .map_bound(|this| match this {
         .                           ExistentialPredicate::Trait(tr) => Some(tr),
         .                           _ => None,
     7,348 ( 0.00%)              })
         .                       .transpose()
     5,511 ( 0.00%)      }
         .           
       388 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
         .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
       776 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn projection_bounds<'a>(
         .                   &'a self,
         .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
         .                   self.iter().filter_map(|predicate| {
       429 ( 0.00%)              predicate
    12,820 ( 0.00%)                  .map_bound(|pred| match pred {
     2,449 ( 0.00%)                      ExistentialPredicate::Projection(projection) => Some(projection),
         .                               _ => None,
         .                           })
         .                           .transpose()
         .                   })
         .               }
         .           
         .               #[inline]
         .               pub fn auto_traits<'a>(&'a self) -> impl Iterator<Item = DefId> + 'a {
       401 ( 0.00%)          self.iter().filter_map(|predicate| match predicate.skip_binder() {
         .                       ExistentialPredicate::AutoTrait(did) => Some(did),
         .                       _ => None,
         .                   })
         .               }
         .           }
         .           
         .           /// A complete reference to a trait. These take numerous guises in syntax,
         .           /// but perhaps the most recognizable form is in a where-clause:
-- line 884 ----------------------------------------
-- line 886 ----------------------------------------
         .           ///     T: Foo<U>
         .           ///
         .           /// This would be represented by a trait-reference where the `DefId` is the
         .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
         .           /// and `U` as parameter 1.
         .           ///
         .           /// Trait references also appear in object types like `Foo<U>`, but in
         .           /// that case the `Self` parameter is absent from the substitutions.
    32,503 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
 1,422,357 ( 0.01%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct TraitRef<'tcx> {
    78,386 ( 0.00%)      pub def_id: DefId,
 2,093,344 ( 0.01%)      pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           impl<'tcx> TraitRef<'tcx> {
       699 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
         .                   TraitRef { def_id, substs }
     2,796 ( 0.00%)      }
         .           
         .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
         .               /// are the parameters defined on trait.
     1,719 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
       764 ( 0.00%)          ty::Binder::dummy(TraitRef {
         .                       def_id,
     1,146 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
         .                   })
     1,528 ( 0.00%)      }
         .           
         .               #[inline]
         6 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
         .                   self.substs.type_at(0)
         4 ( 0.00%)      }
         .           
    16,464 ( 0.00%)      pub fn from_method(
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_id: DefId,
         .                   substs: SubstsRef<'tcx>,
         .               ) -> ty::TraitRef<'tcx> {
         .                   let defs = tcx.generics_of(trait_id);
         .           
     2,058 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
    22,638 ( 0.00%)      }
         .           }
         .           
         .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
         .           
         .           impl<'tcx> PolyTraitRef<'tcx> {
         .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
         .                   self.map_bound_ref(|tr| tr.self_ty())
         .               }
         .           
         .               pub fn def_id(&self) -> DefId {
     9,504 ( 0.00%)          self.skip_binder().def_id
     3,168 ( 0.00%)      }
         .           
     7,832 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
    15,664 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
         .                       trait_ref,
         .                       constness: ty::BoundConstness::NotConst,
         .                       polarity: ty::ImplPolarity::Positive,
         .                   })
     7,832 ( 0.00%)      }
         .           }
         .           
         .           /// An existential reference to a trait, where `Self` is erased.
         .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
         .           ///
         .           ///     exists T. T: Trait<'a, 'b, X, Y>
         .           ///
         .           /// The substitutions don't include the erased `Self`, only trait
         .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
     1,063 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    42,883 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ExistentialTraitRef<'tcx> {
     7,030 ( 0.00%)      pub def_id: DefId,
    56,672 ( 0.00%)      pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           impl<'tcx> ExistentialTraitRef<'tcx> {
     1,000 ( 0.00%)      pub fn erase_self_ty(
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_ref: ty::TraitRef<'tcx>,
         .               ) -> ty::ExistentialTraitRef<'tcx> {
         .                   // Assert there is a Self.
         .                   trait_ref.substs.type_at(0);
         .           
         .                   ty::ExistentialTraitRef {
         .                       def_id: trait_ref.def_id,
         .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
         .                   }
     1,000 ( 0.00%)      }
         .           
         .               /// Object types don't have a self type specified. Therefore, when
         .               /// we convert the principal trait-ref into a normal trait-ref,
         .               /// you must give *some* self type. A common choice is `mk_err()`
         .               /// or some placeholder type.
       282 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
         .                   // otherwise the escaping vars would be captured by the binder
         .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
         .           
       141 ( 0.00%)          ty::TraitRef { def_id: self.def_id, substs: tcx.mk_substs_trait(self_ty, self.substs) }
       705 ( 0.00%)      }
         .           }
         .           
         .           pub type PolyExistentialTraitRef<'tcx> = Binder<'tcx, ExistentialTraitRef<'tcx>>;
         .           
         .           impl<'tcx> PolyExistentialTraitRef<'tcx> {
         .               pub fn def_id(&self) -> DefId {
         .                   self.skip_binder().def_id
         .               }
         .           
         .               /// Object types don't have a self type specified. Therefore, when
         .               /// we convert the principal trait-ref into a normal trait-ref,
         .               /// you must give *some* self type. A common choice is `mk_err()`
         .               /// or some placeholder type.
     1,137 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
     1,477 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
     1,516 ( 0.00%)      }
         .           }
         .           
   189,655 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
     1,334 ( 0.00%)  #[derive(HashStable)]
         .           pub enum BoundVariableKind {
         .               Ty(BoundTyKind),
         .               Region(BoundRegionKind),
         .               Const,
         .           }
         .           
         .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
         .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
         .           /// (which would be represented by the type `PolyTraitRef ==
         .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
         .           /// erase, or otherwise "discharge" these bound vars, we change the
         .           /// type from `Binder<'tcx, T>` to just `T` (see
         .           /// e.g., `liberate_late_bound_regions`).
         .           ///
         .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
   314,714 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
   826,553 ( 0.00%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
         .           
         .           impl<'tcx, T> Binder<'tcx, T>
         .           where
         .               T: TypeFoldable<'tcx>,
         .           {
         .               /// Wraps `value` in a binder, asserting that `value` does not
         .               /// contain any bound vars that would be bound by the
         .               /// binder. This is commonly used to 'inject' a value T into a
         .               /// different binding level.
    18,562 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
    57,083 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
   170,676 ( 0.00%)          Binder(value, ty::List::empty())
    18,358 ( 0.00%)      }
         .           
         .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(vars);
         .                       value.visit_with(&mut validator);
         .                   }
    68,285 ( 0.00%)          Binder(value, vars)
         .               }
         .           }
         .           
         .           impl<'tcx, T> Binder<'tcx, T> {
         .               /// Skips the binder and returns the "bound" value. This is a
         .               /// risky thing to do because it's easy to get confused about
         .               /// De Bruijn indices and the like. It is usually better to
         .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
         .               /// accounting.
         .               ///
         .               /// Some examples where `skip_binder` is reasonable:
         .               ///
         .               /// - extracting the `DefId` from a PolyTraitRef;
         .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
         .               ///   a type parameter `X`, since the type `X` does not reference any regions
         .               pub fn skip_binder(self) -> T {
 1,935,379 ( 0.01%)          self.0
         .               }
         .           
         .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
     2,881 ( 0.00%)          self.1
         .               }
         .           
         .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
    19,991 ( 0.00%)          Binder(&self.0, self.1)
         .               }
         .           
         .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(&T) -> U,
         .               {
         .                   let value = f(&self.0);
         .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
         .           
         .               pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(&T) -> U,
         .               {
         .                   self.as_ref().map_bound(f)
         .               }
         .           
     4,931 ( 0.00%)      pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(T) -> U,
         .               {
   365,155 ( 0.00%)          let value = f(self.0);
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.1);
         .                       value.visit_with(&mut validator);
         .                   }
   596,982 ( 0.00%)          Binder(value, self.1)
     5,669 ( 0.00%)      }
         .           
         .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
         .               where
         .                   F: FnOnce(T) -> Result<U, E>,
         .               {
         .                   let value = f(self.0)?;
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.1);
         .                       value.visit_with(&mut validator);
         .                   }
    23,933 ( 0.00%)          Ok(Binder(value, self.1))
         .               }
         .           
         .               /// Wraps a `value` in a binder, using the same bound variables as the
         .               /// current `Binder`. This should not be used if the new value *changes*
         .               /// the bound variables. Note: the (old or new) value itself does not
         .               /// necessarily need to *name* all the bound variables.
         .               ///
         .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
         .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
         .               where
         .                   U: TypeFoldable<'tcx>,
         .               {
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
         .                       value.visit_with(&mut validator);
         .                   }
    62,956 ( 0.00%)          Binder(value, self.1)
         .               }
         .           
         .               /// Unwraps and returns the value within, but only if it contains
         .               /// no bound vars at all. (In other words, if this binder --
         .               /// and indeed any enclosing binder -- doesn't bind anything at
         .               /// all.) Otherwise, returns `None`.
         .               ///
         .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
         .               /// binder, but permits late-bound vars bound by enclosing
         .               /// binders, but that would require adjusting the debruijn
         .               /// indices, and given the shallow binding structure we often use,
         .               /// would not be that useful.)
         .               pub fn no_bound_vars(self) -> Option<T>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
   185,353 ( 0.00%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
       425 ( 0.00%)      }
         .           
         .               /// Splits the contents into two things that share the same binder
         .               /// level as the original, returning two distinct binders.
         .               ///
         .               /// `f` should consider bound regions at depth 1 to be free, and
         .               /// anything it produces with bound regions at depth 1 will be
         .               /// bound in the resulting return values.
         .               pub fn split<U, V, F>(self, f: F) -> (Binder<'tcx, U>, Binder<'tcx, V>)
-- line 1160 ----------------------------------------
-- line 1170 ----------------------------------------
         .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
         .                   let bound_vars = self.1;
         .                   self.0.map(|v| Binder(v, bound_vars))
         .               }
         .           }
         .           
         .           /// Represents the projection of an associated type. In explicit UFCS
         .           /// form this would be written `<T as Trait<..>>::N`.
     3,014 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
   132,033 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ProjectionTy<'tcx> {
         .               /// The parameters of the associated item.
   100,646 ( 0.00%)      pub substs: SubstsRef<'tcx>,
         .           
         .               /// The `DefId` of the `TraitItem` for the associated type `N`.
         .               ///
         .               /// Note that this is not the `DefId` of the `TraitRef` containing this
         .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
   114,986 ( 0.00%)      pub item_def_id: DefId,
         .           }
         .           
         .           impl<'tcx> ProjectionTy<'tcx> {
    44,891 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
    12,826 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
    51,304 ( 0.00%)      }
         .           
         .               /// Extracts the underlying trait reference and own substs from this projection.
         .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
         .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
     6,209 ( 0.00%)      pub fn trait_ref_and_own_substs(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
     2,661 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
         .                   let trait_generics = tcx.generics_of(def_id);
     4,435 ( 0.00%)          (
         .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
         .                       &self.substs[trait_generics.count()..],
         .                   )
     7,983 ( 0.00%)      }
         .           
         .               /// Extracts the underlying trait reference from this projection.
         .               /// For example, if this is a projection of `<T as Iterator>::Item`,
         .               /// then this function would return a `T: Iterator` trait reference.
         .               ///
         .               /// WARNING: This will drop the substs for generic associated types
         .               /// consider calling [Self::trait_ref_and_own_substs] to get those
         .               /// as well.
    57,195 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
     6,355 ( 0.00%)          let def_id = self.trait_def_id(tcx);
     6,355 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
    69,905 ( 0.00%)      }
         .           
    13,177 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
    39,531 ( 0.00%)          self.substs.type_at(0)
    26,354 ( 0.00%)      }
         .           }
         .           
     3,508 ( 0.00%)  #[derive(Copy, Clone, Debug, TypeFoldable)]
         .           pub struct GenSig<'tcx> {
         .               pub resume_ty: Ty<'tcx>,
         .               pub yield_ty: Ty<'tcx>,
         .               pub return_ty: Ty<'tcx>,
         .           }
         .           
         .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
         .           
         .           /// Signature of a function type, which we have arbitrarily
         .           /// decided to use to refer to the input/output types.
         .           ///
         .           /// - `inputs`: is the list of arguments and their modes.
         .           /// - `output`: is the return type.
         .           /// - `c_variadic`: indicates whether this is a C-variadic function.
   123,430 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    70,520 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct FnSig<'tcx> {
     5,973 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
    81,877 ( 0.00%)      pub c_variadic: bool,
    14,986 ( 0.00%)      pub unsafety: hir::Unsafety,
    71,796 ( 0.00%)      pub abi: abi::Abi,
         .           }
         .           
         .           impl<'tcx> FnSig<'tcx> {
    69,348 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
   313,035 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
   138,696 ( 0.00%)      }
         .           
    36,637 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
   314,263 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
    73,274 ( 0.00%)      }
         .           
         .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
         .               // method.
         .               fn fake() -> FnSig<'tcx> {
         .                   FnSig {
         .                       inputs_and_output: List::empty(),
         .                       c_variadic: false,
         .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
         .               }
         .           }
         .           
         .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
         .           
         .           impl<'tcx> PolyFnSig<'tcx> {
         .               #[inline]
         .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
    16,661 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
         .               }
         .               #[inline]
         .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
     6,040 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
         .               }
         .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
         .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
       199 ( 0.00%)      }
         .               #[inline]
         .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
     3,771 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
         .               }
         .               pub fn c_variadic(&self) -> bool {
       398 ( 0.00%)          self.skip_binder().c_variadic
       199 ( 0.00%)      }
         .               pub fn unsafety(&self) -> hir::Unsafety {
     1,882 ( 0.00%)          self.skip_binder().unsafety
       941 ( 0.00%)      }
         .               pub fn abi(&self) -> abi::Abi {
   125,652 ( 0.00%)          self.skip_binder().abi
    31,413 ( 0.00%)      }
         .           }
         .           
         .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
         .           
       120 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
     2,886 ( 0.00%)  #[derive(HashStable)]
         .           pub struct ParamTy {
       230 ( 0.00%)      pub index: u32,
         .               pub name: Symbol,
         .           }
         .           
         .           impl<'tcx> ParamTy {
       138 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
         .                   ParamTy { index, name }
        69 ( 0.00%)      }
         .           
         .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
        48 ( 0.00%)          ParamTy::new(def.index, def.name)
        24 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
         .                   tcx.mk_ty_param(self.index, self.name)
         .               }
         .           }
         .           
         .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
        36 ( 0.00%)  #[derive(HashStable)]
         .           pub struct ParamConst {
       258 ( 0.00%)      pub index: u32,
       258 ( 0.00%)      pub name: Symbol,
         .           }
         .           
         .           impl ParamConst {
         .               pub fn new(index: u32, name: Symbol) -> ParamConst {
         .                   ParamConst { index, name }
         .               }
         .           
         .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
         .           /// the inference variable is supposed to satisfy the relation
         .           /// *for every value of the placeholder region*. To ensure that doesn't
         .           /// happen, you can use `leak_check`. This is more clearly explained
         .           /// by the [rustc dev guide].
         .           ///
         .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
         .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
         .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
 4,808,710 ( 0.02%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
    21,750 ( 0.00%)  pub enum RegionKind {
         .               /// Region bound in a type or fn declaration which will be
         .               /// substituted 'early' -- that is, at the same time when type
         .               /// parameters are substituted.
         .               ReEarlyBound(EarlyBoundRegion),
         .           
         .               /// Region bound in a function scope, which will be substituted when the
         .               /// function is called.
   268,632 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
         .           
         .               /// When checking a function body, the types of all arguments and so forth
         .               /// that refer to bound region parameters are modified to refer to free
         .               /// region parameters.
         .               ReFree(FreeRegion),
         .           
         .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
         .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
         .               /// regions visible from `U`, but not less than regions not visible
         .               /// from `U`.
         .               ReEmpty(ty::UniverseIndex),
         .           
         .               /// Erased region, used by trait selection, in MIR and during codegen.
         .               ReErased,
         .           }
         .           
    30,236 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
         .           pub struct EarlyBoundRegion {
    13,753 ( 0.00%)      pub def_id: DefId,
    17,963 ( 0.00%)      pub index: u32,
    72,735 ( 0.00%)      pub name: Symbol,
         .           }
         .           
         .           /// A **`const`** **v**ariable **ID**.
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
         .           pub struct ConstVid<'tcx> {
       739 ( 0.00%)      pub index: u32,
        89 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
         .           }
         .           
         .           rustc_index::newtype_index! {
         .               /// A **region** (lifetime) **v**ariable **ID**.
         .               pub struct RegionVid {
         .                   DEBUG_FORMAT = custom,
         .               }
         .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
         .           rustc_index::newtype_index! {
         .               pub struct BoundVar { .. }
         .           }
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub struct BoundTy {
         .               pub var: BoundVar,
     1,880 ( 0.00%)      pub kind: BoundTyKind,
         .           }
         .           
    32,110 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub enum BoundTyKind {
         .               Anon,
         .               Param(Symbol),
         .           }
         .           
         .           impl From<BoundVar> for BoundTy {
         .               fn from(var: BoundVar) -> Self {
         .                   BoundTy { var, kind: BoundTyKind::Anon }
         .               }
         .           }
         .           
         .           /// A `ProjectionPredicate` for an `ExistentialTraitRef`.
       266 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
    20,427 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ExistentialProjection<'tcx> {
     3,584 ( 0.00%)      pub item_def_id: DefId,
    24,952 ( 0.00%)      pub substs: SubstsRef<'tcx>,
     6,238 ( 0.00%)      pub term: Term<'tcx>,
         .           }
         .           
         .           pub type PolyExistentialProjection<'tcx> = Binder<'tcx, ExistentialProjection<'tcx>>;
         .           
         .           impl<'tcx> ExistentialProjection<'tcx> {
         .               /// Extracts the underlying existential trait reference from this projection.
         .               /// For example, if this is a projection of `exists T. <T as Iterator>::Item == X`,
         .               /// then this function would return an `exists T. T: Iterator` existential trait
         .               /// reference.
     1,582 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::ExistentialTraitRef<'tcx> {
       678 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
       452 ( 0.00%)          let subst_count = tcx.generics_of(def_id).count() - 1;
       226 ( 0.00%)          let substs = tcx.intern_substs(&self.substs[..subst_count]);
         .                   ty::ExistentialTraitRef { def_id, substs }
     2,034 ( 0.00%)      }
         .           
         .               pub fn with_self_ty(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   self_ty: Ty<'tcx>,
         .               ) -> ty::ProjectionPredicate<'tcx> {
         .                   // otherwise the escaping regions would be captured by the binders
         .                   debug_assert!(!self_ty.has_escaping_bound_vars());
-- line 1566 ----------------------------------------
-- line 1569 ----------------------------------------
         .                       projection_ty: ty::ProjectionTy {
         .                           item_def_id: self.item_def_id,
         .                           substs: tcx.mk_substs_trait(self_ty, self.substs),
         .                       },
         .                       term: self.term,
         .                   }
         .               }
         .           
       215 ( 0.00%)      pub fn erase_self_ty(
         .                   tcx: TyCtxt<'tcx>,
         .                   projection_predicate: ty::ProjectionPredicate<'tcx>,
         .               ) -> Self {
         .                   // Assert there is a Self.
       129 ( 0.00%)          projection_predicate.projection_ty.substs.type_at(0);
         .           
       172 ( 0.00%)          Self {
        86 ( 0.00%)              item_def_id: projection_predicate.projection_ty.item_def_id,
         .                       substs: tcx.intern_substs(&projection_predicate.projection_ty.substs[1..]),
        43 ( 0.00%)              term: projection_predicate.term,
         .                   }
       301 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> PolyExistentialProjection<'tcx> {
       235 ( 0.00%)      pub fn with_self_ty(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   self_ty: Ty<'tcx>,
         .               ) -> ty::PolyProjectionPredicate<'tcx> {
       235 ( 0.00%)          self.map_bound(|p| p.with_self_ty(tcx, self_ty))
       282 ( 0.00%)      }
         .           
         .               pub fn item_def_id(&self) -> DefId {
        94 ( 0.00%)          self.skip_binder().item_def_id
        47 ( 0.00%)      }
         .           }
         .           
         .           /// Region utilities
         .           impl RegionKind {
         .               /// Is this region named by the user?
         .               pub fn has_name(&self) -> bool {
         .                   match *self {
         .                       RegionKind::ReEarlyBound(ebr) => ebr.has_name(),
-- line 1611 ----------------------------------------
-- line 1616 ----------------------------------------
         .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
         .                       RegionKind::ReEmpty(_) => false,
         .                       RegionKind::ReErased => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_late_bound(&self) -> bool {
     1,643 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_placeholder(&self) -> bool {
         1 ( 0.00%)          matches!(*self, ty::RePlaceholder(..))
         .               }
         .           
         .               #[inline]
         .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
    86,092 ( 0.00%)          match *self {
         .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               pub fn type_flags(&self) -> TypeFlags {
         .                   let mut flags = TypeFlags::empty();
         .           
   214,606 ( 0.00%)          match *self {
         .                       ty::ReVar(..) => {
         .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
         .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
         .                           flags = flags | TypeFlags::HAS_RE_INFER;
         .                       }
         .                       ty::RePlaceholder(..) => {
         .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
         .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
         .                       ty::ReErased => {
         .                           flags = flags | TypeFlags::HAS_RE_ERASED;
         .                       }
         .                   }
         .           
         .                   debug!("type_flags({:?}) = {:?}", self, flags);
         .           
         .                   flags
    21,850 ( 0.00%)      }
         .           
         .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
         .               /// For example, consider the regions in this snippet of code:
         .               ///
         .               /// ```
         .               /// impl<'a> Foo {
         .               ///      ^^ -- early bound, declared on an impl
         .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
         .           
         .               #[inline(always)]
         .               pub fn flags(&self) -> TypeFlags {
         .                   self.flags
         .               }
         .           
         .               #[inline]
         .               pub fn is_unit(&self) -> bool {
     7,042 ( 0.00%)          match self.kind() {
       387 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_never(&self) -> bool {
    14,453 ( 0.00%)          matches!(self.kind(), Never)
         .               }
         .           
         .               #[inline]
         .               pub fn is_primitive(&self) -> bool {
         .                   self.kind().is_primitive()
         .               }
         .           
         .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn is_ref(&self) -> bool {
         .                   matches!(self.kind(), Ref(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_ty_var(&self) -> bool {
    51,898 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
    27,834 ( 0.00%)          match self.kind() {
     3,749 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_ty_infer(&self) -> bool {
       159 ( 0.00%)          matches!(self.kind(), Infer(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_phantom_data(&self) -> bool {
         .                   if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
         .               }
         .           
         .               #[inline]
-- line 1770 ----------------------------------------
-- line 1775 ----------------------------------------
         .               /// Returns `true` if this type is a `str`.
         .               #[inline]
         .               pub fn is_str(&self) -> bool {
         .                   *self.kind() == Str
         .               }
         .           
         .               #[inline]
         .               pub fn is_param(&self, index: u32) -> bool {
       302 ( 0.00%)          match self.kind() {
         .                       ty::Param(ref data) => data.index == index,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_slice(&self) -> bool {
         .                   match self.kind() {
         .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_array(&self) -> bool {
        84 ( 0.00%)          matches!(self.kind(), Array(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_simd(&self) -> bool {
         .                   match self.kind() {
         .                       Adt(def, _) => def.repr.simd(),
         .                       _ => false,
         .                   }
         .               }
         .           
       134 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
       268 ( 0.00%)          match self.kind() {
         .                       Array(ty, _) | Slice(ty) => ty,
         .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
         .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
         .                   }
       134 ( 0.00%)      }
         .           
         .               pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
         .                   match self.kind() {
         .                       Adt(def, substs) => {
         .                           assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
         .                           let variant = def.non_enum_variant();
         .                           let f0_ty = variant.fields[0].ty(tcx, substs);
         .           
-- line 1824 ----------------------------------------
-- line 1861 ----------------------------------------
         .                   match self.kind() {
         .                       Ref(_, _, mutability) => Some(*mutability),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_unsafe_ptr(&self) -> bool {
    15,431 ( 0.00%)          matches!(self.kind(), RawPtr(_))
         .               }
         .           
         .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
         .               #[inline]
         .               pub fn is_any_ptr(&self) -> bool {
        14 ( 0.00%)          self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
         .               }
         .           
         .               #[inline]
         .               pub fn is_box(&self) -> bool {
    21,934 ( 0.00%)          match self.kind() {
     5,913 ( 0.00%)              Adt(def, _) => def.is_box(),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               /// Panics if called on any type other than `Box<T>`.
     3,956 ( 0.00%)      pub fn boxed_ty(&self) -> Ty<'tcx> {
     3,956 ( 0.00%)          match self.kind() {
     9,890 ( 0.00%)              Adt(def, substs) if def.is_box() => substs.type_at(0),
         .                       _ => bug!("`boxed_ty` is called on non-box type {:?}", self),
         .                   }
     3,956 ( 0.00%)      }
         .           
         .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
         .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
         .               /// contents are abstract to rustc.)
         .               #[inline]
         .               pub fn is_scalar(&self) -> bool {
        43 ( 0.00%)          matches!(
        98 ( 0.00%)              self.kind(),
         .                       Bool | Char
         .                           | Int(_)
         .                           | Float(_)
         .                           | Uint(_)
         .                           | FnDef(..)
         .                           | FnPtr(_)
         .                           | RawPtr(_)
         .                           | Infer(IntVar(_) | FloatVar(_))
         .                   )
         .               }
         .           
         .               /// Returns `true` if this type is a floating point type.
         .               #[inline]
         .               pub fn is_floating_point(&self) -> bool {
     4,156 ( 0.00%)          matches!(self.kind(), Float(_) | Infer(FloatVar(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_trait(&self) -> bool {
     1,974 ( 0.00%)          matches!(self.kind(), Dynamic(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_enum(&self) -> bool {
     1,034 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
         .               }
         .           
         .               #[inline]
         .               pub fn is_union(&self) -> bool {
     2,795 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
         .               }
         .           
         .               #[inline]
         .               pub fn is_closure(&self) -> bool {
       600 ( 0.00%)          matches!(self.kind(), Closure(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_generator(&self) -> bool {
     1,296 ( 0.00%)          matches!(self.kind(), Generator(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_integral(&self) -> bool {
     3,406 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fresh_ty(&self) -> bool {
         .                   matches!(self.kind(), Infer(FreshTy(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fresh(&self) -> bool {
    23,528 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_char(&self) -> bool {
         .                   matches!(self.kind(), Char)
         .               }
         .           
         .               #[inline]
         .               pub fn is_numeric(&self) -> bool {
         .                   self.is_integral() || self.is_floating_point()
         .               }
         .           
         .               #[inline]
         .               pub fn is_signed(&self) -> bool {
     1,110 ( 0.00%)          matches!(self.kind(), Int(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_ptr_sized_integral(&self) -> bool {
        96 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
         .               }
         .           
         .               #[inline]
         .               pub fn has_concrete_skeleton(&self) -> bool {
         .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
         .               }
         .           
         .               /// Returns the type and mutability of `*ty`.
         .               ///
         .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
         .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
    18,181 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
   115,184 ( 0.00%)          match self.kind() {
     3,588 ( 0.00%)              Adt(def, _) if def.is_box() => {
       574 ( 0.00%)                  Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
         .                       }
    42,752 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
    17,540 ( 0.00%)              RawPtr(mt) if explicit => Some(*mt),
         .                       _ => None,
         .                   }
    36,362 ( 0.00%)      }
         .           
         .               /// Returns the type of `ty[i]`.
         .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
     1,349 ( 0.00%)          match self.kind() {
         .                       Array(ty, _) | Slice(ty) => Some(ty),
         .                       _ => None,
         .                   }
        77 ( 0.00%)      }
         .           
   303,376 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
   151,688 ( 0.00%)          match self.kind() {
   112,608 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
     1,930 ( 0.00%)              FnPtr(f) => *f,
         .                       Error(_) => {
         .                           // ignore errors (#54954)
         .                           ty::Binder::dummy(FnSig::fake())
         .                       }
         .                       Closure(..) => bug!(
         .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
         .                       ),
         .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
         .                   }
   341,298 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn is_fn(&self) -> bool {
    47,448 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fn_ptr(&self) -> bool {
         .                   matches!(self.kind(), FnPtr(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_impl_trait(&self) -> bool {
         .                   matches!(self.kind(), Opaque(..))
         .               }
         .           
         .               #[inline]
         .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
     7,546 ( 0.00%)          match self.kind() {
         .                       Adt(adt, _) => Some(adt),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               /// Iterates over tuple fields.
         .               /// Panics when called on anything but a tuple.
     2,902 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
     7,736 ( 0.00%)          match self.kind() {
    11,038 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
         .                       _ => bug!("tuple_fields called on non-tuple"),
         .                   }
     5,804 ( 0.00%)      }
         .           
         .               /// Get the `i`-th element of a tuple.
         .               /// Panics when called on anything but a tuple.
        62 ( 0.00%)      pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
       124 ( 0.00%)          match self.kind() {
       124 ( 0.00%)              Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
         .                       _ => bug!("tuple_fields called on non-tuple"),
         .                   }
       124 ( 0.00%)      }
         .           
         .               /// If the type contains variants, returns the valid range of variant indices.
         .               //
         .               // FIXME: This requires the optimized MIR in the case of generators.
         .               #[inline]
         .               pub fn variant_range(&self, tcx: TyCtxt<'tcx>) -> Option<Range<VariantIdx>> {
         .                   match self.kind() {
         .                       TyKind::Adt(adt, _) => Some(adt.variant_range()),
-- line 2068 ----------------------------------------
-- line 2073 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// If the type contains variants, returns the variant for `variant_index`.
         .               /// Panics if `variant_index` is out of range.
         .               //
         .               // FIXME: This requires the optimized MIR in the case of generators.
         .               #[inline]
    27,970 ( 0.00%)      pub fn discriminant_for_variant(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   variant_index: VariantIdx,
         .               ) -> Option<Discr<'tcx>> {
    31,098 ( 0.00%)          match self.kind() {
    11,588 ( 0.00%)              TyKind::Adt(adt, _) if adt.variants.is_empty() => {
         .                           // This can actually happen during CTFE, see
         .                           // https://github.com/rust-lang/rust/issues/89765.
         .                           None
         .                       }
     5,794 ( 0.00%)              TyKind::Adt(adt, _) if adt.is_enum() => {
         .                           Some(adt.discriminant_for_variant(tcx, variant_index))
         .                       }
         .                       TyKind::Generator(def_id, substs, _) => {
     4,092 ( 0.00%)                  Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
         .                       }
         .                       _ => None,
         .                   }
    22,376 ( 0.00%)      }
         .           
         .               /// Returns the type of the discriminant of this type.
    33,630 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
    16,815 ( 0.00%)          match self.kind() {
    26,256 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
         .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
         .           
         .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
         .                           let assoc_items = tcx.associated_item_def_ids(
         .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
         .                           );
         .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
         .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
         .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
         .           
         .                       ty::Bound(..)
         .                       | ty::Placeholder(_)
         .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
         .                       }
         .                   }
    26,904 ( 0.00%)      }
         .           
         .               /// Returns the type of metadata for (potentially fat) pointers to this type.
       180 ( 0.00%)      pub fn ptr_metadata_ty(
         .                   &'tcx self,
         .                   tcx: TyCtxt<'tcx>,
         .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
         .               ) -> Ty<'tcx> {
       180 ( 0.00%)          let tail = tcx.struct_tail_with_normalize(self, normalize);
       100 ( 0.00%)          match tail.kind() {
         .                       // Sized types
         .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
         .                       | ty::Uint(_)
         .                       | ty::Int(_)
         .                       | ty::Bool
         .                       | ty::Float(_)
         .                       | ty::FnDef(..)
         .                       | ty::FnPtr(_)
-- line 2160 ----------------------------------------
-- line 2170 ----------------------------------------
         .                       | ty::Foreign(..)
         .                       // If returned by `struct_tail_without_normalization` this is a unit struct
         .                       // without any fields, or not a struct, and therefore is Sized.
         .                       | ty::Adt(..)
         .                       // If returned by `struct_tail_without_normalization` this is the empty tuple,
         .                       // a.k.a. unit type, which is Sized
         .                       | ty::Tuple(..) => tcx.types.unit,
         .           
        40 ( 0.00%)              ty::Str | ty::Slice(_) => tcx.types.usize,
         .                       ty::Dynamic(..) => {
         .                           let dyn_metadata = tcx.lang_items().dyn_metadata().unwrap();
         .                           tcx.type_of(dyn_metadata).subst(tcx, &[tail.into()])
         .                       },
         .           
         .                       ty::Projection(_)
         .                       | ty::Param(_)
         .                       | ty::Opaque(..)
         .                       | ty::Infer(ty::TyVar(_))
         .                       | ty::Bound(..)
         .                       | ty::Placeholder(..)
         .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`ptr_metadata_ty` applied to unexpected type: {:?}", tail)
         .                       }
         .                   }
       160 ( 0.00%)      }
         .           
         .               /// When we create a closure, we record its kind (i.e., what trait
         .               /// it implements) into its `ClosureSubsts` using a type
         .               /// parameter. This is kind of a phantom type, except that the
         .               /// most convenient thing for us to are the integral types. This
         .               /// function converts such a special type into the closure
         .               /// kind. To go the other way, use
         .               /// `tcx.closure_kind_ty(closure_kind)`.
         .               ///
         .               /// Note that during type checking, we use an inference variable
         .               /// to represent the closure kind, because it has not yet been
         .               /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)
         .               /// is complete, that type variable will be unified.
     4,482 ( 0.00%)      pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {
     8,964 ( 0.00%)          match self.kind() {
     8,964 ( 0.00%)              Int(int_ty) => match int_ty {
         .                           ty::IntTy::I8 => Some(ty::ClosureKind::Fn),
         .                           ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),
         .                           ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),
         .                           _ => bug!("cannot convert type `{:?}` to a closure kind", self),
         .                       },
         .           
         .                       // "Bound" types appear in canonical queries when the
         .                       // closure type is not yet known
         .                       Bound(..) | Infer(_) => None,
         .           
         .                       Error(_) => Some(ty::ClosureKind::Fn),
         .           
         .                       _ => bug!("cannot convert type `{:?}` to a closure kind", self),
         .                   }
     4,482 ( 0.00%)      }
         .           
         .               /// Fast path helper for testing if a type is `Sized`.
         .               ///
         .               /// Returning true means the type is known to be sized. Returning
         .               /// `false` means nothing -- could be sized, might not be.
         .               ///
         .               /// Note that we could never rely on the fact that a type such as `[_]` is
         .               /// trivially `!Sized` because we could be in a type environment with a
         .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
         .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
         .               /// this method doesn't return `Option<bool>`.
   406,413 ( 0.00%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
   270,942 ( 0.00%)          match self.kind() {
         .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
         .                       | ty::Uint(_)
         .                       | ty::Int(_)
         .                       | ty::Bool
         .                       | ty::Float(_)
         .                       | ty::FnDef(..)
         .                       | ty::FnPtr(_)
         .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
         .                       | ty::GeneratorWitness(..)
         .                       | ty::Array(..)
         .                       | ty::Closure(..)
         .                       | ty::Never
         .                       | ty::Error(_) => true,
         .           
         .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
         .           
     3,589 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
         .           
    75,543 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
         .           
         .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
         .           
         .                       ty::Infer(ty::TyVar(_)) => false,
         .           
         .                       ty::Bound(..)
         .                       | ty::Placeholder(..)
         .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
         .                       }
         .                   }
   406,413 ( 0.00%)      }
         .           }
         .           
         .           /// Extra information about why we ended up with a particular variance.
         .           /// This is only used to add more information to error messages, and
         .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
         .           /// may lead to confusing notes in error messages, it will never cause
         .           /// a miscompilation or unsoundness.
         .           ///
         .           /// When in doubt, use `VarianceDiagInfo::default()`
        72 ( 0.00%)  #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]
         .           pub enum VarianceDiagInfo<'tcx> {
         .               /// No additional information - this is the default.
         .               /// We will not add any additional information to error messages.
         .               #[default]
         .               None,
         .               /// We switched our variance because a generic argument occurs inside
         .               /// the invariant generic argument of another type.
         .               Invariant {
-- line 2290 ----------------------------------------
-- line 2295 ----------------------------------------
         .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
         .                   param_index: u32,
         .               },
         .           }
         .           
         .           impl<'tcx> VarianceDiagInfo<'tcx> {
         .               /// Mirrors `Variance::xform` - used to 'combine' the existing
         .               /// and new `VarianceDiagInfo`s when our variance changes.
    22,166 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
         .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
    33,249 ( 0.00%)          match self {
         .                       VarianceDiagInfo::None => other,
         .                       VarianceDiagInfo::Invariant { .. } => self,
         .                   }
    11,083 ( 0.00%)      }
         .           }

29,861,371 ( 0.15%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs
--------------------------------------------------------------------------------
Ir                  

-- line 26 ----------------------------------------
         .               /// }
         .               ///
         .               /// assert_eq!(letters[&'s'], 2);
         .               /// assert_eq!(letters[&'t'], 3);
         .               /// assert_eq!(letters[&'u'], 1);
         .               /// assert_eq!(letters.get(&'y'), None);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
17,716,542 ( 0.09%)      pub fn rustc_entry(&mut self, key: K) -> RustcEntry<'_, K, V, A> {
         .                   let hash = make_insert_hash(&self.hash_builder, &key);
    46,037 ( 0.00%)          if let Some(elem) = self.table.find(hash, |q| q.0.eq(&key)) {
 3,613,020 ( 0.02%)              RustcEntry::Occupied(RustcOccupiedEntry {
 1,113,810 ( 0.01%)                  key: Some(key),
         .                           elem,
         .                           table: &mut self.table,
         .                       })
         .                   } else {
         .                       // Ideally we would put this in VacantEntry::insert, but Entry is not
         .                       // generic over the BuildHasher and adding a generic parameter would be
         .                       // a breaking change.
         .                       self.reserve(1);
         .           
 1,094,566 ( 0.01%)              RustcEntry::Vacant(RustcVacantEntry {
         .                           hash,
   533,074 ( 0.00%)                  key,
         .                           table: &mut self.table,
         .                       })
         .                   }
15,207,298 ( 0.08%)      }
         .           }
         .           
         .           /// A view into a single entry in a map, which may either be vacant or occupied.
         .           ///
         .           /// This `enum` is constructed from the [`entry`] method on [`HashMap`].
         .           ///
         .           /// [`HashMap`]: struct.HashMap.html
         .           /// [`entry`]: struct.HashMap.html#method.rustc_entry
-- line 62 ----------------------------------------
-- line 405 ----------------------------------------
         .               /// if let RustcEntry::Occupied(o) = map.rustc_entry("poneyland") {
         .               ///     *o.into_mut() += 10;
         .               /// }
         .               ///
         .               /// assert_eq!(map["poneyland"], 22);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn into_mut(self) -> &'a mut V {
 1,376,399 ( 0.01%)          unsafe { &mut self.elem.as_mut().1 }
         .               }
         .           
         .               /// Sets the value of the entry, and returns the entry's old value.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
-- line 421 ----------------------------------------
-- line 568 ----------------------------------------
         .               /// let mut map: HashMap<&str, u32> = HashMap::new();
         .               ///
         .               /// if let RustcEntry::Vacant(o) = map.rustc_entry("poneyland") {
         .               ///     o.insert(37);
         .               /// }
         .               /// assert_eq!(map["poneyland"], 37);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
    12,366 ( 0.00%)      pub fn insert(self, value: V) -> &'a mut V {
         .                   unsafe {
   108,079 ( 0.00%)              let bucket = self.table.insert_no_grow(self.hash, (self.key, value));
    32,664 ( 0.00%)              &mut bucket.as_mut().1
         .                   }
    15,084 ( 0.00%)      }
         .           
         .               /// Sets the value of the entry with the RustcVacantEntry's key,
         .               /// and returns a RustcOccupiedEntry.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
-- line 589 ----------------------------------------

 6,479,666 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir                  

-- line 186 ----------------------------------------
         .           /// // use the values stored in map
         .           /// ```
         .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
         .               pub(crate) hash_builder: S,
         .               pub(crate) table: RawTable<(K, V), A>,
         .           }
         .           
         .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
       296 ( 0.00%)      fn clone(&self) -> Self {
     1,086 ( 0.00%)          HashMap {
         .                       hash_builder: self.hash_builder.clone(),
       206 ( 0.00%)              table: self.table.clone(),
         .                   }
       333 ( 0.00%)      }
         .           
         .               fn clone_from(&mut self, source: &Self) {
         .                   self.table.clone_from(&source.table);
         .           
         .                   // Update hash_builder only if we successfully cloned all elements.
         .                   self.hash_builder.clone_from(&source.hash_builder);
         .               }
         .           }
         .           
         .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         8 ( 0.00%)  pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash,
         .               S: BuildHasher,
         .           {
   759,237 ( 0.00%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
        12 ( 0.00%)  }
         .           
         .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: ?Sized + Eq,
         .           {
 1,102,080 ( 0.01%)      move |x| k.eq(x.0.borrow())
         .           }
         .           
         .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: ?Sized + Eq,
         .           {
   761,260 ( 0.00%)      move |x| k.eq(x.borrow())
         .           }
         .           
         .           #[cfg(not(feature = "nightly"))]
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
         .               use core::hash::Hasher;
         .               let mut state = hash_builder.build_hasher();
         .               val.hash(&mut state);
         .               state.finish()
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           #[cfg_attr(feature = "inline-more", inline)]
         2 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash + ?Sized,
         .               S: BuildHasher,
         .           {
     4,280 ( 0.00%)      hash_builder.hash_one(val)
         4 ( 0.00%)  }
         .           
         .           #[cfg(not(feature = "nightly"))]
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
         .           where
         .               K: Hash,
         .               S: BuildHasher,
         .           {
-- line 274 ----------------------------------------
-- line 280 ----------------------------------------
         .           
         .           #[cfg(feature = "nightly")]
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
         .           where
         .               K: Hash,
         .               S: BuildHasher,
         .           {
    88,869 ( 0.00%)      hash_builder.hash_one(val)
         .           }
         .           
         .           #[cfg(feature = "ahash")]
         .           impl<K, V> HashMap<K, V, DefaultHashBuilder> {
         .               /// Creates an empty `HashMap`.
         .               ///
         .               /// The hash map is initially created with a capacity of 0, so it will not allocate until it
         .               /// is first inserted into.
-- line 296 ----------------------------------------
-- line 366 ----------------------------------------
         .               ///
         .               /// let s = DefaultHashBuilder::default();
         .               /// let mut map = HashMap::with_hasher(s);
         .               /// map.insert(1, 2);
         .               /// ```
         .               ///
         .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
         .               #[cfg_attr(feature = "inline-more", inline)]
        32 ( 0.00%)      pub const fn with_hasher(hash_builder: S) -> Self {
   133,509 ( 0.00%)          Self {
         .                       hash_builder,
         8 ( 0.00%)              table: RawTable::new(),
         .                   }
         8 ( 0.00%)      }
         .           
         .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
         .               /// to hash the keys.
         .               ///
         .               /// The hash map will be able to hold at least `capacity` elements without
         .               /// reallocating. If `capacity` is 0, the hash map will not allocate.
         .               ///
         .               /// Warning: `hash_builder` is normally randomly generated, and
-- line 387 ----------------------------------------
-- line 436 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               /// use hashbrown::hash_map::DefaultHashBuilder;
         .               ///
         .               /// let s = DefaultHashBuilder::default();
         .               /// let mut map = HashMap::with_hasher(s);
         .               /// map.insert(1, 2);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
        32 ( 0.00%)      pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
       239 ( 0.00%)          Self {
         .                       hash_builder,
         8 ( 0.00%)              table: RawTable::new_in(alloc),
         .                   }
         8 ( 0.00%)      }
         .           
         .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
         .               /// to hash the keys. It will be allocated with the given allocator.
         .               ///
         .               /// The hash map will be able to hold at least `capacity` elements without
         .               /// reallocating. If `capacity` is 0, the hash map will not allocate.
         .               ///
         .               /// Warning: `hash_builder` is normally randomly generated, and
-- line 457 ----------------------------------------
-- line 527 ----------------------------------------
         .               /// map.insert("c", 3);
         .               ///
         .               /// for key in map.keys() {
         .               ///     println!("{}", key);
         .               /// }
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn keys(&self) -> Keys<'_, K, V> {
         6 ( 0.00%)          Keys { inner: self.iter() }
         .               }
         .           
         .               /// An iterator visiting all values in arbitrary order.
         .               /// The iterator element type is `&'a V`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 543 ----------------------------------------
-- line 662 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// assert_eq!(a.len(), 0);
         .               /// a.insert(1, "a");
         .               /// assert_eq!(a.len(), 1);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         8 ( 0.00%)      pub fn len(&self) -> usize {
    11,020 ( 0.00%)          self.table.len()
         8 ( 0.00%)      }
         .           
         .               /// Returns `true` if the map contains no elements.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// assert!(a.is_empty());
         .               /// a.insert(1, "a");
         .               /// assert!(!a.is_empty());
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         8 ( 0.00%)      pub fn is_empty(&self) -> bool {
    62,906 ( 0.00%)          self.len() == 0
        16 ( 0.00%)      }
         .           
         .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
         .               /// allocated memory for reuse.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
-- line 697 ----------------------------------------
-- line 790 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// a.insert(1, "a");
         .               /// a.clear();
         .               /// assert!(a.is_empty());
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         6 ( 0.00%)      pub fn clear(&mut self) {
         .                   self.table.clear();
         6 ( 0.00%)      }
         .           
         .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
         .               /// The map cannot be used after calling this.
         .               /// The iterator element type is `K`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 808 ----------------------------------------
-- line 865 ----------------------------------------
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
         .               /// let mut map: HashMap<&str, i32> = HashMap::new();
         .               /// map.reserve(10);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
        16 ( 0.00%)      pub fn reserve(&mut self, additional: usize) {
        16 ( 0.00%)          self.table
         8 ( 0.00%)              .reserve(additional, make_hasher::<K, _, V, S>(&self.hash_builder));
         8 ( 0.00%)      }
         .           
         .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
         .               /// in the given `HashMap<K,V>`. The collection may reserve more space to avoid
         .               /// frequent reallocations.
         .               ///
         .               /// # Errors
         .               ///
         .               /// If the capacity overflows, or the allocator reports a failure, then an error
-- line 884 ----------------------------------------
-- line 963 ----------------------------------------
         .               /// }
         .               ///
         .               /// assert_eq!(letters[&'s'], 2);
         .               /// assert_eq!(letters[&'t'], 3);
         .               /// assert_eq!(letters[&'u'], 1);
         .               /// assert_eq!(letters.get(&'y'), None);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
     2,392 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
         .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
         .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
       430 ( 0.00%)              Entry::Occupied(OccupiedEntry {
         .                           hash,
         .                           key: Some(key),
         .                           elem,
         .                           table: self,
         .                       })
         .                   } else {
     2,560 ( 0.00%)              Entry::Vacant(VacantEntry {
         .                           hash,
         .                           key,
         .                           table: self,
         .                       })
         .                   }
     2,990 ( 0.00%)      }
         .           
         .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
         .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
 1,711,907 ( 0.01%)          match self.get_inner(k) {
         .                       Some(&(_, ref v)) => Some(v),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Returns the key-value pair corresponding to the supplied key.
         .               ///
         .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1086 ----------------------------------------
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match self.get_inner(k) {
         .                       Some(&(ref key, ref value)) => Some((key, value)),
         .                       None => None,
         .                   }
         .               }
         .           
         .               #[inline]
        60 ( 0.00%)      fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
 1,905,490 ( 0.01%)          if self.table.is_empty() {
        12 ( 0.00%)              None
         .                   } else {
         1 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
         .                       self.table.get(hash, equivalent_key(k))
         .                   }
        36 ( 0.00%)      }
         .           
         .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
         .               ///
         .               /// The supplied key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
         .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1113 ----------------------------------------
-- line 1155 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// assert_eq!(map.contains_key(&1), true);
         .               /// assert_eq!(map.contains_key(&2), false);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
   471,133 ( 0.00%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
        60 ( 0.00%)          self.get_inner(k).is_some()
   575,576 ( 0.00%)      }
         .           
         .               /// Returns a mutable reference to the value corresponding to the key.
         .               ///
         .               /// The key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
         .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// if let Some(x) = map.get_mut(&1) {
         .               ///     *x = "b";
         .               /// }
         .               /// assert_eq!(map[&1], "b");
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
       762 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
    24,222 ( 0.00%)          match self.get_inner_mut(k) {
         .                       Some(&mut (_, ref mut v)) => Some(v),
         .                       None => None,
         .                   }
     1,524 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
     8,086 ( 0.00%)          if self.table.is_empty() {
         .                       None
         .                   } else {
         .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
    15,534 ( 0.00%)              self.table.get_mut(hash, equivalent_key(k))
         .                   }
         .               }
         .           
         .               /// Attempts to get mutable references to `N` values in the map at once.
         .               ///
         .               /// Returns an array of length `N` with the results of each query. For soundness, at most one
         .               /// mutable reference will be returned to any value. `None` will be returned if any of the
         .               /// keys are duplicates or missing.
-- line 1223 ----------------------------------------
-- line 1495 ----------------------------------------
         .               /// assert_eq!(map.insert(37, "a"), None);
         .               /// assert_eq!(map.is_empty(), false);
         .               ///
         .               /// map.insert(37, "b");
         .               /// assert_eq!(map.insert(37, "c"), Some("b"));
         .               /// assert_eq!(map[&37], "c");
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
 9,229,195 ( 0.05%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
         .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
    29,908 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
         4 ( 0.00%)              Some(mem::replace(item, v))
         .                   } else {
 3,895,348 ( 0.02%)              self.table
 5,723,010 ( 0.03%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
   691,113 ( 0.00%)              None
         .                   }
 7,904,175 ( 0.04%)      }
         .           
         .               /// Insert a key-value pair into the map without checking
         .               /// if the key already exists in the map.
         .               ///
         .               /// Returns a reference to the key and value just inserted.
         .               ///
         .               /// This operation is safe if a key does not exist in the map.
         .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// assert_eq!(map.remove(&1), Some("a"));
         .               /// assert_eq!(map.remove(&1), None);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
    30,895 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
 1,389,133 ( 0.01%)          match self.remove_entry(k) {
    57,815 ( 0.00%)              Some((_, v)) => Some(v),
    26,111 ( 0.00%)              None => None,
         .                   }
    69,880 ( 0.00%)      }
         .           
         .               /// Removes a key from the map, returning the stored key and value if the
         .               /// key was previously in the map.
         .               ///
         .               /// The key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
   394,420 ( 0.00%)          self.table.remove_entry(hash, equivalent_key(k))
         .               }
         .           }
         .           
         .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
         .               /// Creates a raw entry builder for the HashMap.
         .               ///
         .               /// Raw entries provide the lowest level of control for searching and
         .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 1737 ----------------------------------------
         .           
         .           impl<K, V, S, A> Default for HashMap<K, V, S, A>
         .           where
         .               S: Default,
         .               A: Default + Allocator + Clone,
         .           {
         .               /// Creates an empty `HashMap<K, V, S, A>`, with the `Default` value for the hasher and allocator.
         .               #[cfg_attr(feature = "inline-more", inline)]
        12 ( 0.00%)      fn default() -> Self {
        44 ( 0.00%)          Self::with_hasher_in(Default::default(), Default::default())
         8 ( 0.00%)      }
         .           }
         .           
         .           impl<K, Q: ?Sized, V, S, A> Index<&Q> for HashMap<K, V, S, A>
         .           where
         .               K: Eq + Hash + Borrow<Q>,
         .               Q: Eq + Hash,
         .               S: BuildHasher,
         .               A: Allocator + Clone,
-- line 1755 ----------------------------------------
-- line 2069 ----------------------------------------
         .           where
         .               F: FnMut(&K, &mut V) -> bool,
         .               A: Allocator + Clone,
         .           {
         .               type Item = (K, V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<Self::Item> {
        18 ( 0.00%)          self.inner.next(&mut self.f)
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   (0, self.inner.iter.size_hint().1)
         .               }
         .           }
         .           
-- line 2085 ----------------------------------------
-- line 2095 ----------------------------------------
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub(super) fn next<F>(&mut self, f: &mut F) -> Option<(K, V)>
         .               where
         .                   F: FnMut(&K, &mut V) -> bool,
         .               {
         .                   unsafe {
         .                       for item in &mut self.iter {
         .                           let &mut (ref key, ref mut value) = item.as_mut();
        33 ( 0.00%)                  if f(key, value) {
         6 ( 0.00%)                      return Some(self.table.remove(item));
         .                           }
         .                       }
         .                   }
         .                   None
         .               }
         .           }
         .           
         .           /// A mutable iterator over the values of a `HashMap`.
-- line 2112 ----------------------------------------
-- line 2209 ----------------------------------------
         .               /// Creates a `RawEntryMut` from the given key and its hash.
         .               #[inline]
         .               #[allow(clippy::wrong_self_convention)]
         .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Eq,
         .               {
 6,581,010 ( 0.03%)          self.from_hash(hash, equivalent(k))
         .               }
         .           }
         .           
         .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
         .               /// Creates a `RawEntryMut` from the given hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
15,949,698 ( 0.08%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   for<'b> F: FnMut(&'b K) -> bool,
         .               {
         .                   self.search(hash, is_match)
17,617,868 ( 0.09%)      }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   for<'b> F: FnMut(&'b K) -> bool,
         .               {
 2,117,736 ( 0.01%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
10,787,703 ( 0.05%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
         .                           elem,
         .                           table: &mut self.map.table,
         .                           hash_builder: &self.map.hash_builder,
         .                       }),
   632,578 ( 0.00%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
         .                           table: &mut self.map.table,
         .                           hash_builder: &self.map.hash_builder,
         .                       }),
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
         .               {
         .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
         .                   self.from_key_hashed_nocheck(hash, k)
         .               }
         .           
         .               /// Access an entry by a key and its hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
 3,663,328 ( 0.02%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Eq,
         .               {
 3,100,412 ( 0.02%)          self.from_hash(hash, equivalent(k))
 6,340,320 ( 0.03%)      }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
         .               where
         .                   F: FnMut(&K) -> bool,
         .               {
 4,075,295 ( 0.02%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
         .                       Some(&(ref key, ref value)) => Some((key, value)),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Access an entry by hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
         .               /// and returns a mutable reference to it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::shadow_unrelated)]
         .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
         .               where
         .                   K: Hash,
         .                   S: BuildHasher,
         .               {
 1,017,259 ( 0.01%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
         .                       hash,
         .                       (key, value),
         .                       make_hasher::<K, _, V, S>(self.hash_builder),
         .                   );
         .                   (k, v)
         .               }
         .           
         .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
         .               /// map.insert("a", 1);
         .               /// map.insert("b", 2);
         .               /// map.insert("c", 3);
         .               ///
         .               /// // Not possible with .iter()
         .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
       756 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
    17,141 ( 0.00%)          IntoIter {
     9,701 ( 0.00%)              inner: self.table.into_iter(),
         .                   }
     2,268 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
         .               type Item = (&'a K, &'a V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
   224,854 ( 0.00%)          match self.inner.next() {
         .                       Some(x) => unsafe {
         .                           let r = x.as_ref();
     1,305 ( 0.00%)                  Some((&r.0, &r.1))
         .                       },
         .                       None => None,
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
     1,339 ( 0.00%)          self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn len(&self) -> usize {
         .                   self.inner.len()
         .               }
         .           }
-- line 3013 ----------------------------------------
-- line 3018 ----------------------------------------
         .               type Item = (&'a K, &'a mut V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(&'a K, &'a mut V)> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match self.inner.next() {
         .                       Some(x) => unsafe {
         .                           let r = x.as_mut();
        43 ( 0.00%)                  Some((&r.0, &mut r.1))
         .                       },
         .                       None => None,
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
-- line 3034 ----------------------------------------
-- line 3051 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
         .               type Item = (K, V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(K, V)> {
    23,422 ( 0.00%)          self.inner.next()
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
         .                   f.debug_list().entries(self.iter()).finish()
         .               }
         .           }
         .           
         .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
         .               type Item = &'a K;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
       513 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match self.inner.next() {
         .                       Some((k, _)) => Some(k),
         .                       None => None,
         .                   }
     1,026 ( 0.00%)      }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 3819 ----------------------------------------
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn insert(self, value: V) -> &'a mut V
         .               where
         .                   K: Hash,
         .                   S: BuildHasher,
         .               {
         .                   let table = &mut self.table.table;
       176 ( 0.00%)          let entry = table.insert_entry(
         .                       self.hash,
         .                       (self.key, value),
         .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
         .                   );
         .                   &mut entry.1
         .               }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
         .           /// keys with new values returned from the iterator.
         .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
         .           where
         .               K: Eq + Hash,
         .               S: BuildHasher,
         .               A: Allocator + Clone,
         .           {
         .               #[cfg_attr(feature = "inline-more", inline)]
    99,393 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
         .                   // Keys may be already present or show multiple times in the iterator.
         .                   // Reserve the entire hint lower bound if the map is empty.
         .                   // Otherwise reserve half the hint (rounded up), so the map
         .                   // will only resize twice in the worst case.
    83,096 ( 0.00%)          let iter = iter.into_iter();
    27,436 ( 0.00%)          let reserve = if self.is_empty() {
        16 ( 0.00%)              iter.size_hint().0
         .                   } else {
       675 ( 0.00%)              (iter.size_hint().0 + 1) / 2
         .                   };
        12 ( 0.00%)          self.reserve(reserve);
        28 ( 0.00%)          iter.for_each(move |(k, v)| {
   648,981 ( 0.00%)              self.insert(k, v);
         .                   });
    82,867 ( 0.00%)      }
         .           
         .               #[inline]
         .               #[cfg(feature = "nightly")]
         .               fn extend_one(&mut self, (k, v): (K, V)) {
         .                   self.insert(k, v);
         .               }
         .           
         .               #[inline]
-- line 4588 ----------------------------------------

 5,850,266 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs
--------------------------------------------------------------------------------
Ir                  

-- line 22 ----------------------------------------
         .           
         .           /// An entity in the Rust type system, which can be one of
         .           /// several kinds (types, lifetimes, and consts).
         .           /// To reduce memory usage, a `GenericArg` is an interned pointer,
         .           /// with the lowest 2 bits being reserved for a tag to
         .           /// indicate the type (`Ty`, `Region`, or `Const`) it points to.
         .           #[derive(Copy, Clone, PartialEq, Eq, Hash)]
         .           pub struct GenericArg<'tcx> {
 1,391,444 ( 0.01%)      ptr: NonZeroUsize,
 2,821,701 ( 0.01%)      marker: PhantomData<(Ty<'tcx>, ty::Region<'tcx>, &'tcx ty::Const<'tcx>)>,
         .           }
         .           
         .           const TAG_MASK: usize = 0b11;
         .           const TYPE_TAG: usize = 0b00;
         .           const REGION_TAG: usize = 0b01;
         .           const CONST_TAG: usize = 0b10;
         .           
   346,273 ( 0.00%)  #[derive(Debug, TyEncodable, TyDecodable, PartialEq, Eq, PartialOrd, Ord, HashStable)]
         .           pub enum GenericArgKind<'tcx> {
         .               Lifetime(ty::Region<'tcx>),
         .               Type(Ty<'tcx>),
         .               Const(&'tcx ty::Const<'tcx>),
         .           }
         .           
         .           impl<'tcx> GenericArgKind<'tcx> {
    79,976 ( 0.00%)      fn pack(self) -> GenericArg<'tcx> {
    79,976 ( 0.00%)          let (tag, ptr) = match self {
         .                       GenericArgKind::Lifetime(lt) => {
         .                           // Ensure we can use the tag bits.
         .                           assert_eq!(mem::align_of_val(lt) & TAG_MASK, 0);
         .                           (REGION_TAG, lt as *const _ as usize)
         .                       }
         .                       GenericArgKind::Type(ty) => {
         .                           // Ensure we can use the tag bits.
         .                           assert_eq!(mem::align_of_val(ty) & TAG_MASK, 0);
-- line 56 ----------------------------------------
-- line 58 ----------------------------------------
         .                       }
         .                       GenericArgKind::Const(ct) => {
         .                           // Ensure we can use the tag bits.
         .                           assert_eq!(mem::align_of_val(ct) & TAG_MASK, 0);
         .                           (CONST_TAG, ct as *const _ as usize)
         .                       }
         .                   };
         .           
   297,333 ( 0.00%)          GenericArg { ptr: unsafe { NonZeroUsize::new_unchecked(ptr | tag) }, marker: PhantomData }
    79,976 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> fmt::Debug for GenericArg<'tcx> {
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   match self.unpack() {
         .                       GenericArgKind::Lifetime(lt) => lt.fmt(f),
         .                       GenericArgKind::Type(ty) => ty.fmt(f),
         .                       GenericArgKind::Const(ct) => ct.fmt(f),
-- line 75 ----------------------------------------
-- line 85 ----------------------------------------
         .           
         .           impl<'tcx> PartialOrd for GenericArg<'tcx> {
         .               fn partial_cmp(&self, other: &GenericArg<'_>) -> Option<Ordering> {
         .                   Some(self.cmp(&other))
         .               }
         .           }
         .           
         .           impl<'tcx> From<ty::Region<'tcx>> for GenericArg<'tcx> {
   140,969 ( 0.00%)      fn from(r: ty::Region<'tcx>) -> GenericArg<'tcx> {
         .                   GenericArgKind::Lifetime(r).pack()
   140,969 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> From<Ty<'tcx>> for GenericArg<'tcx> {
 1,002,700 ( 0.01%)      fn from(ty: Ty<'tcx>) -> GenericArg<'tcx> {
         .                   GenericArgKind::Type(ty).pack()
 1,002,700 ( 0.01%)      }
         .           }
         .           
         .           impl<'tcx> From<&'tcx ty::Const<'tcx>> for GenericArg<'tcx> {
        53 ( 0.00%)      fn from(c: &'tcx ty::Const<'tcx>) -> GenericArg<'tcx> {
         .                   GenericArgKind::Const(c).pack()
        53 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> GenericArg<'tcx> {
         .               #[inline]
         .               pub fn unpack(self) -> GenericArgKind<'tcx> {
         .                   let ptr = self.ptr.get();
         .                   unsafe {
18,805,847 ( 0.09%)              match ptr & TAG_MASK {
   129,829 ( 0.00%)                  REGION_TAG => GenericArgKind::Lifetime(&*((ptr & !TAG_MASK) as *const _)),
 4,818,571 ( 0.02%)                  TYPE_TAG => GenericArgKind::Type(&*((ptr & !TAG_MASK) as *const _)),
     3,876 ( 0.00%)                  CONST_TAG => GenericArgKind::Const(&*((ptr & !TAG_MASK) as *const _)),
         .                           _ => intrinsics::unreachable(),
         .                       }
         .                   }
         .               }
         .           
         .               /// Unpack the `GenericArg` as a type when it is known certainly to be a type.
         .               /// This is true in cases where `Substs` is used in places where the kinds are known
         .               /// to be limited (e.g. in tuples, where the only parameters are type parameters).
         .               pub fn expect_ty(self) -> Ty<'tcx> {
         .                   match self.unpack() {
         .                       GenericArgKind::Type(ty) => ty,
         .                       _ => bug!("expected a type, but found another kind"),
         .                   }
   272,292 ( 0.00%)      }
         .           
         .               /// Unpack the `GenericArg` as a const when it is known certainly to be a const.
         .               pub fn expect_const(self) -> &'tcx ty::Const<'tcx> {
         .                   match self.unpack() {
         .                       GenericArgKind::Const(c) => c,
         .                       _ => bug!("expected a const, but found another kind"),
         .                   }
         .               }
-- line 140 ----------------------------------------
-- line 170 ----------------------------------------
         .                       GenericArgKind::Type(ty) => ty.visit_with(visitor),
         .                       GenericArgKind::Const(ct) => ct.visit_with(visitor),
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for GenericArg<'tcx> {
         .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
    42,052 ( 0.00%)          self.unpack().encode(e)
         .               }
         .           }
         .           
         .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for GenericArg<'tcx> {
   399,880 ( 0.00%)      fn decode(d: &mut D) -> GenericArg<'tcx> {
   399,880 ( 0.00%)          GenericArgKind::decode(d).pack()
         .               }
         .           }
         .           
         .           /// A substitution mapping generic parameters to new values.
         .           pub type InternalSubsts<'tcx> = List<GenericArg<'tcx>>;
         .           
         .           pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;
         .           
         .           impl<'a, 'tcx> InternalSubsts<'tcx> {
         .               /// Interpret these substitutions as the substitutions of a closure type.
         .               /// Closure substitutions have a particular structure controlled by the
         .               /// compiler that encodes information like the signature and closure kind;
         .               /// see `ty::ClosureSubsts` struct for more comments.
    14,161 ( 0.00%)      pub fn as_closure(&'a self) -> ClosureSubsts<'a> {
         .                   ClosureSubsts { substs: self }
    14,161 ( 0.00%)      }
         .           
         .               /// Interpret these substitutions as the substitutions of a generator type.
         .               /// Generator substitutions have a particular structure controlled by the
         .               /// compiler that encodes information like the signature and generator kind;
         .               /// see `ty::GeneratorSubsts` struct for more comments.
         .               pub fn as_generator(&'tcx self) -> GeneratorSubsts<'tcx> {
         .                   GeneratorSubsts { substs: self }
         .               }
-- line 208 ----------------------------------------
-- line 211 ----------------------------------------
         .               /// Inline const substitutions have a particular structure controlled by the
         .               /// compiler that encodes information like the inferred type;
         .               /// see `ty::InlineConstSubsts` struct for more comments.
         .               pub fn as_inline_const(&'tcx self) -> InlineConstSubsts<'tcx> {
         .                   InlineConstSubsts { substs: self }
         .               }
         .           
         .               /// Creates an `InternalSubsts` that maps each generic parameter to itself.
    20,050 ( 0.00%)      pub fn identity_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {
     4,264 ( 0.00%)          Self::for_item(tcx, def_id, |param, _| tcx.mk_param_from_def(param))
    18,045 ( 0.00%)      }
         .           
         .               /// Creates an `InternalSubsts` for generic parameter definitions,
         .               /// by calling closures to obtain each kind.
         .               /// The closures get to observe the `InternalSubsts` as they're
         .               /// being built, which can be used to correctly
         .               /// substitute defaults of generic parameters.
   232,504 ( 0.00%)      pub fn for_item<F>(tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
         .               where
         .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
         .               {
         .                   let defs = tcx.generics_of(def_id);
         .                   let count = defs.count();
         .                   let mut substs = SmallVec::with_capacity(count);
    83,839 ( 0.00%)          Self::fill_item(&mut substs, tcx, defs, &mut mk_kind);
    48,440 ( 0.00%)          tcx.intern_substs(&substs)
   232,920 ( 0.00%)      }
         .           
         .               pub fn extend_to<F>(&self, tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
         .               where
         .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
         .               {
         .                   Self::for_item(tcx, def_id, |param, substs| {
         .                       self.get(param.index as usize).cloned().unwrap_or_else(|| mk_kind(param, substs))
         .                   })
         .               }
         .           
   310,370 ( 0.00%)      pub fn fill_item<F>(
         .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
         .                   tcx: TyCtxt<'tcx>,
         .                   defs: &ty::Generics,
         .                   mk_kind: &mut F,
         .               ) where
         .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
         .               {
   127,229 ( 0.00%)          if let Some(def_id) = defs.parent {
         .                       let parent_defs = tcx.generics_of(def_id);
    14,766 ( 0.00%)              Self::fill_item(substs, tcx, parent_defs, mk_kind);
         .                   }
         .                   Self::fill_single(substs, defs, mk_kind)
   246,264 ( 0.00%)      }
         .           
        32 ( 0.00%)      pub fn fill_single<F>(
         .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
         .                   defs: &ty::Generics,
         .                   mk_kind: &mut F,
         .               ) where
         .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
         .               {
         .                   substs.reserve(defs.params.len());
         .                   for param in &defs.params {
        72 ( 0.00%)              let kind = mk_kind(param, substs);
   183,513 ( 0.00%)              assert_eq!(param.index as usize, substs.len());
         .                       substs.push(kind);
         .                   }
        32 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn types(&'a self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'a {
         .                   self.iter()
         .                       .filter_map(|k| if let GenericArgKind::Type(ty) = k.unpack() { Some(ty) } else { None })
         .               }
         .           
         .               #[inline]
-- line 284 ----------------------------------------
-- line 301 ----------------------------------------
         .               ) -> impl DoubleEndedIterator<Item = GenericArgKind<'tcx>> + 'a {
         .                   self.iter().filter_map(|k| match k.unpack() {
         .                       GenericArgKind::Lifetime(_) => None,
         .                       generic => Some(generic),
         .                   })
         .               }
         .           
         .               #[inline]
        15 ( 0.00%)      pub fn type_at(&self, i: usize) -> Ty<'tcx> {
   634,725 ( 0.00%)          if let GenericArgKind::Type(ty) = self[i].unpack() {
         .                       ty
         .                   } else {
         .                       bug!("expected type for param #{} in {:?}", i, self);
         .                   }
        10 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn region_at(&self, i: usize) -> ty::Region<'tcx> {
         .                   if let GenericArgKind::Lifetime(lt) = self[i].unpack() {
         .                       lt
         .                   } else {
         .                       bug!("expected region for param #{} in {:?}", i, self);
         .                   }
-- line 323 ----------------------------------------
-- line 350 ----------------------------------------
         .               /// impl<U> X<U> for U { fn f<V>() {} }
         .               /// ```
         .               ///
         .               /// * If `self` is `[Self, S, T]`: the identity substs of `f` in the trait.
         .               /// * If `source_ancestor` is the def_id of the trait.
         .               /// * If `target_substs` is `[U]`, the substs for the impl.
         .               /// * Then we will return `[U, T]`, the subst for `f` in the impl that
         .               ///   are needed for it to match the trait.
    42,378 ( 0.00%)      pub fn rebase_onto(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   source_ancestor: DefId,
         .                   target_substs: SubstsRef<'tcx>,
         .               ) -> SubstsRef<'tcx> {
         .                   let defs = tcx.generics_of(source_ancestor);
    12,108 ( 0.00%)          tcx.mk_substs(target_substs.iter().chain(self.iter().skip(defs.params.len())))
    48,432 ( 0.00%)      }
         .           
     7,348 ( 0.00%)      pub fn truncate_to(&self, tcx: TyCtxt<'tcx>, generics: &ty::Generics) -> SubstsRef<'tcx> {
         .                   tcx.mk_substs(self.iter().take(generics.count()))
    14,696 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {
   220,969 ( 0.00%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
         .                   self,
         .                   folder: &mut F,
         .               ) -> Result<Self, F::Error> {
         .                   // This code is hot enough that it's worth specializing for the most
         .                   // common length lists, to avoid the overhead of `SmallVec` creation.
         .                   // The match arms are in order of frequency. The 1, 2, and 0 cases are
         .                   // typically hit in 90--99.99% of cases. When folding doesn't change
         .                   // the substs, it's faster to reuse the existing substs rather than
         .                   // calling `intern_substs`.
 4,050,856 ( 0.02%)          match self.len() {
         .                       1 => {
   667,451 ( 0.00%)                  let param0 = self[0].try_fold_with(folder)?;
 2,348,807 ( 0.01%)                  if param0 == self[0] { Ok(self) } else { Ok(folder.tcx().intern_substs(&[param0])) }
         .                       }
         .                       2 => {
   335,126 ( 0.00%)                  let param0 = self[0].try_fold_with(folder)?;
   817,847 ( 0.00%)                  let param1 = self[1].try_fold_with(folder)?;
   767,487 ( 0.00%)                  if param0 == self[0] && param1 == self[1] {
         .                               Ok(self)
         .                           } else {
   624,128 ( 0.00%)                      Ok(folder.tcx().intern_substs(&[param0, param1]))
         .                           }
         .                       }
         .                       0 => Ok(self),
         .                       _ => {
         .                           let params: SmallVec<[_; 8]> =
    97,398 ( 0.00%)                      self.iter().map(|k| k.try_fold_with(folder)).collect::<Result<_, _>>()?;
     4,998 ( 0.00%)                  if params[..] == self[..] {
         .                               Ok(self)
         .                           } else {
    11,308 ( 0.00%)                      Ok(folder.tcx().intern_substs(&params))
         .                           }
         .                       }
         .                   }
   287,189 ( 0.00%)      }
         .           
         .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
   700,431 ( 0.00%)          self.iter().try_for_each(|t| t.visit_with(visitor))
         .               }
         .           }
         .           
         .           ///////////////////////////////////////////////////////////////////////////
         .           // Public trait `Subst`
         .           //
         .           // Just call `foo.subst(tcx, substs)` to perform a substitution across
         .           // `foo`. Or use `foo.subst_spanned(tcx, substs, Some(span))` when
-- line 420 ----------------------------------------
-- line 435 ----------------------------------------
         .           
         .           impl<'tcx, T: TypeFoldable<'tcx>> Subst<'tcx> for T {
         .               fn subst_spanned(
         .                   self,
         .                   tcx: TyCtxt<'tcx>,
         .                   substs: &[GenericArg<'tcx>],
         .                   span: Option<Span>,
         .               ) -> T {
 3,795,201 ( 0.02%)          let mut folder = SubstFolder { tcx, substs, span, binders_passed: 0 };
         .                   self.fold_with(&mut folder)
         .               }
         .           }
         .           
         .           ///////////////////////////////////////////////////////////////////////////
         .           // The actual substitution engine itself is a type folder.
         .           
         .           struct SubstFolder<'a, 'tcx> {
-- line 451 ----------------------------------------
-- line 456 ----------------------------------------
         .               span: Option<Span>,
         .           
         .               /// Number of region binders we have passed through while doing the substitution
         .               binders_passed: u32,
         .           }
         .           
         .           impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
   796,686 ( 0.00%)          self.tcx
         .               }
         .           
         .               fn fold_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: ty::Binder<'tcx, T>,
         .               ) -> ty::Binder<'tcx, T> {
   363,980 ( 0.00%)          self.binders_passed += 1;
    76,766 ( 0.00%)          let t = t.super_fold_with(self);
   363,980 ( 0.00%)          self.binders_passed -= 1;
         .                   t
         .               }
         .           
   659,040 ( 0.00%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
         .                   // Note: This routine only handles regions that are bound on
         .                   // type declarations and other outer declarations, not those
         .                   // bound in *fn types*. Region substitution of the bound
         .                   // regions that appear in a function signature is done using
         .                   // the specialized routine `ty::replace_late_regions()`.
   219,680 ( 0.00%)          match *r {
    57,144 ( 0.00%)              ty::ReEarlyBound(data) => {
    57,144 ( 0.00%)                  let rk = self.substs.get(data.index as usize).map(|k| k.unpack());
         .                           match rk {
    28,572 ( 0.00%)                      Some(GenericArgKind::Lifetime(lt)) => self.shift_region_through_binders(lt),
         .                               _ => {
         .                                   let span = self.span.unwrap_or(DUMMY_SP);
         .                                   let msg = format!(
         .                                       "Region parameter out of range \
         .                                        when substituting in region {} (index={})",
         .                                       data.name, data.index
         .                                   );
         .                                   span_bug!(span, "{}", msg);
         .                               }
         .                           }
         .                       }
         .                       _ => r,
         .                   }
   768,880 ( 0.00%)      }
         .           
 4,028,475 ( 0.02%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
 1,342,825 ( 0.01%)          if !t.needs_subst() {
         .                       return t;
         .                   }
         .           
 1,981,616 ( 0.01%)          match *t.kind() {
 2,708,265 ( 0.01%)              ty::Param(p) => self.ty_for_param(p, t),
 2,694,930 ( 0.01%)              _ => t.super_fold_with(self),
         .                   }
 4,468,350 ( 0.02%)      }
         .           
   335,769 ( 0.00%)      fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    96,754 ( 0.00%)          if let ty::ConstKind::Param(p) = c.val {
         .                       self.const_for_param(p, c)
         .                   } else {
   430,227 ( 0.00%)              c.super_fold_with(self)
         .                   }
     1,312 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {
         .                   c.super_fold_with(self)
         .               }
         .           }
         .           
         .           impl<'a, 'tcx> SubstFolder<'a, 'tcx> {
         .               fn ty_for_param(&self, p: ty::ParamTy, source_ty: Ty<'tcx>) -> Ty<'tcx> {
         .                   // Look up the type in the substitutions. It really should be in there.
 1,083,306 ( 0.01%)          let opt_ty = self.substs.get(p.index as usize).map(|k| k.unpack());
         .                   let ty = match opt_ty {
         .                       Some(GenericArgKind::Type(ty)) => ty,
         .                       Some(kind) => {
         .                           let span = self.span.unwrap_or(DUMMY_SP);
         .                           span_bug!(
         .                               span,
         .                               "expected type for `{:?}` ({:?}/{}) but found {:?} \
         .                                when substituting, substs={:?}",
-- line 539 ----------------------------------------
-- line 562 ----------------------------------------
         .               }
         .           
         .               fn const_for_param(
         .                   &self,
         .                   p: ParamConst,
         .                   source_ct: &'tcx ty::Const<'tcx>,
         .               ) -> &'tcx ty::Const<'tcx> {
         .                   // Look up the const in the substitutions. It really should be in there.
       328 ( 0.00%)          let opt_ct = self.substs.get(p.index as usize).map(|k| k.unpack());
         .                   let ct = match opt_ct {
         .                       Some(GenericArgKind::Const(ct)) => ct,
         .                       Some(kind) => {
         .                           let span = self.span.unwrap_or(DUMMY_SP);
         .                           span_bug!(
         .                               span,
         .                               "expected const for `{:?}` ({:?}/{}) but found {:?} \
         .                                when substituting substs={:?}",
-- line 578 ----------------------------------------
-- line 645 ----------------------------------------
         .               fn shift_vars_through_binders<T: TypeFoldable<'tcx>>(&self, val: T) -> T {
         .                   debug!(
         .                       "shift_vars(val={:?}, binders_passed={:?}, has_escaping_bound_vars={:?})",
         .                       val,
         .                       self.binders_passed,
         .                       val.has_escaping_bound_vars()
         .                   );
         .           
 1,797,076 ( 0.01%)          if self.binders_passed == 0 || !val.has_escaping_bound_vars() {
         .                       return val;
         .                   }
         .           
         .                   let result = ty::fold::shift_vars(self.tcx(), val, self.binders_passed);
         .                   debug!("shift_vars: shifted result = {:?}", result);
         .           
         .                   result
         .               }
         .           
         .               fn shift_region_through_binders(&self, region: ty::Region<'tcx>) -> ty::Region<'tcx> {
    68,909 ( 0.00%)          if self.binders_passed == 0 || !region.has_escaping_bound_vars() {
         .                       return region;
         .                   }
         .                   ty::fold::shift_region(self.tcx, region, self.binders_passed)
         .               }
         .           }
         .           
         .           /// Stores the user-given substs to reach some fully qualified path
         .           /// (e.g., `<T>::Item` or `<T as Trait>::Item`).
         .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
     4,378 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
         .           pub struct UserSubsts<'tcx> {
         .               /// The substitutions for the item as given by the user.
         .               pub substs: SubstsRef<'tcx>,
         .           
         .               /// The self type, in the case of a `<T>::Item` path (when applied
         .               /// to an inherent impl). See `UserSelfTy` below.
     1,777 ( 0.00%)      pub user_self_ty: Option<UserSelfTy<'tcx>>,
         .           }
         .           
         .           /// Specifies the user-given self type. In the case of a path that
         .           /// refers to a member in an inherent impl, this self type is
         .           /// sometimes needed to constrain the type parameters on the impl. For
         .           /// example, in this code:
         .           ///
         .           /// ```
-- line 689 ----------------------------------------
-- line 696 ----------------------------------------
         .           /// self type `Foo<u32>`. Then we can instantiate the parameters of
         .           /// the impl (with the substs from `UserSubsts`) and apply those to
         .           /// the self type, giving `Foo<?A>`. Finally, we unify that with
         .           /// the self type here, which contains `?A` to be `&'static u32`
         .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
         .           #[derive(HashStable, TypeFoldable, Lift)]
         .           pub struct UserSelfTy<'tcx> {
         .               pub impl_def_id: DefId,
       645 ( 0.00%)      pub self_ty: Ty<'tcx>,
         .           }

 8,193,525 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir                 

-- line 118 ----------------------------------------
        .               stability: InternedSet<'tcx, attr::Stability>,
        .           
        .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
        .               const_stability: InternedSet<'tcx, attr::ConstStability>,
        .           }
        .           
        .           impl<'tcx> CtxtInterners<'tcx> {
        .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
       17 ( 0.00%)          CtxtInterners {
        .                       arena,
        .                       type_: Default::default(),
        .                       type_list: Default::default(),
        .                       substs: Default::default(),
        .                       region: Default::default(),
        .                       poly_existential_predicates: Default::default(),
        .                       canonical_var_infos: Default::default(),
        .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
        .                       stability: Default::default(),
        .                       const_stability: Default::default(),
        .                   }
        .               }
        .           
        .               /// Interns a type.
        .               #[allow(rustc::usage_of_ty_tykind)]
        .               #[inline(never)]
7,523,904 ( 0.04%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
        .                   self.type_
4,702,440 ( 0.02%)              .intern(kind, |kind| {
  127,492 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
        .           
        .                           let ty_struct = TyS {
  254,984 ( 0.00%)                      kind,
        .                               flags: flags.flags,
        .                               outer_exclusive_binder: flags.outer_exclusive_binder,
        .                           };
        .           
        .                           Interned(self.arena.alloc(ty_struct))
        .                       })
        .                       .0
8,464,392 ( 0.04%)      }
        .           
        .               #[inline(never)]
1,573,984 ( 0.01%)      fn intern_predicate(
        .                   &self,
        .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
        .               ) -> &'tcx PredicateInner<'tcx> {
        .                   self.predicate
1,377,236 ( 0.01%)              .intern(kind, |kind| {
  165,846 ( 0.00%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
        .           
        .                           let predicate_struct = PredicateInner {
        .                               kind,
        .                               flags: flags.flags,
        .                               outer_exclusive_binder: flags.outer_exclusive_binder,
        .                           };
        .           
        .                           Interned(self.arena.alloc(predicate_struct))
        .                       })
        .                       .0
1,770,732 ( 0.01%)      }
        .           }
        .           
        .           pub struct CommonTypes<'tcx> {
        .               pub unit: Ty<'tcx>,
        .               pub bool: Ty<'tcx>,
        .               pub char: Ty<'tcx>,
        .               pub isize: Ty<'tcx>,
        .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
        .           /// safely used as a key in the maps of a TypeckResults. For that to be
        .           /// the case, the HirId must have the same `owner` as all the other IDs in
        .           /// this table (signified by `hir_owner`). Otherwise the HirId
        .           /// would be in a different frame of reference and using its `local_id`
        .           /// would result in lookup errors, or worse, in silently wrong data being
        .           /// stored/returned.
        .           #[inline]
        .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
  133,364 ( 0.00%)      if hir_id.owner != hir_owner {
        .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
        .               }
        .           }
        .           
        .           #[cold]
        .           #[inline(never)]
        .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
        .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
        .           }
        .           
        .           impl<'a, V> LocalTableInContext<'a, V> {
        .               pub fn contains_key(&self, id: hir::HirId) -> bool {
        .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.data.contains_key(&id.local_id)
        .               }
        .           
   97,199 ( 0.00%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
   19,312 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
   19,312 ( 0.00%)          self.data.get(&id.local_id)
   78,100 ( 0.00%)      }
        .           
        .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
        .                   self.data.iter()
        .               }
        .           }
        .           
        .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
        .               type Output = V;
        .           
    1,278 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
        .                   self.get(key).expect("LocalTableInContext: key not found")
      852 ( 0.00%)      }
        .           }
        .           
        .           pub struct LocalTableInContextMut<'a, V> {
        .               hir_owner: LocalDefId,
        .               data: &'a mut ItemLocalMap<V>,
        .           }
        .           
        .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 328 ----------------------------------------
        .           /// ```
        .           ///
        .           /// Here, we would store the type `T`, the span of the value `x`, the "scope-span" for
        .           /// the scope that contains `x`, the expr `T` evaluated from, and the span of `foo.await`.
        .           #[derive(TyEncodable, TyDecodable, Clone, Debug, Eq, Hash, PartialEq, HashStable)]
        .           #[derive(TypeFoldable)]
        .           pub struct GeneratorInteriorTypeCause<'tcx> {
        .               /// Type of the captured binding.
      362 ( 0.00%)      pub ty: Ty<'tcx>,
        .               /// Span of the binding that was captured.
      123 ( 0.00%)      pub span: Span,
        .               /// Span of the scope of the captured binding.
      530 ( 0.00%)      pub scope_span: Option<Span>,
        .               /// Span of `.await` or `yield` expression.
      530 ( 0.00%)      pub yield_span: Span,
        .               /// Expr which the type evaluated from.
      742 ( 0.00%)      pub expr: Option<hir::HirId>,
        .           }
        .           
        .           #[derive(TyEncodable, TyDecodable, Debug)]
        .           pub struct TypeckResults<'tcx> {
        .               /// The `HirId::owner` all `ItemLocalId`s in this table are relative to.
        .               pub hir_owner: LocalDefId,
        .           
        .               /// Resolved definitions for `<T>::X` associated paths and
-- line 352 ----------------------------------------
-- line 507 ----------------------------------------
        .               pub treat_byte_string_as_slice: ItemLocalSet,
        .           
        .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
        .               /// on closure size.
        .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
        .           }
        .           
        .           impl<'tcx> TypeckResults<'tcx> {
    3,870 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
   45,795 ( 0.00%)          TypeckResults {
        .                       hir_owner,
        .                       type_dependent_defs: Default::default(),
        .                       field_indices: Default::default(),
        .                       user_provided_types: Default::default(),
        .                       user_provided_sigs: Default::default(),
        .                       node_types: Default::default(),
        .                       node_substs: Default::default(),
        .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
        .                       tainted_by_errors: None,
        .                       concrete_opaque_types: Default::default(),
        .                       closure_min_captures: Default::default(),
        .                       closure_fake_reads: Default::default(),
        .                       generator_interior_types: ty::Binder::dummy(Default::default()),
        .                       treat_byte_string_as_slice: Default::default(),
        .                       closure_size_eval: Default::default(),
        .                   }
    3,870 ( 0.00%)      }
        .           
        .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
   30,192 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
   20,128 ( 0.00%)          match *qpath {
   41,910 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
        .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
        .                           .type_dependent_def(id)
   18,474 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
        .                   }
   50,320 ( 0.00%)      }
        .           
      250 ( 0.00%)      pub fn type_dependent_defs(
        .                   &self,
        .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
    1,212 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
      250 ( 0.00%)      }
        .           
    2,631 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
    6,421 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
    5,262 ( 0.00%)      }
        .           
    2,844 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
        .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
    2,844 ( 0.00%)      }
        .           
    7,299 ( 0.00%)      pub fn type_dependent_defs_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
    7,299 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
    7,299 ( 0.00%)      }
        .           
        .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
    1,718 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
      506 ( 0.00%)      }
        .           
        .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
    1,560 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
      780 ( 0.00%)      }
        .           
        .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
    3,668 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    1,834 ( 0.00%)      }
        .           
        .               pub fn user_provided_types_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
    1,056 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
      528 ( 0.00%)      }
        .           
        .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
   15,662 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
    7,831 ( 0.00%)      }
        .           
        .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
   27,312 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
   13,656 ( 0.00%)      }
        .           
  130,644 ( 0.00%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
   21,774 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
        .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
        .                   })
  108,870 ( 0.00%)      }
        .           
   35,011 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
   35,011 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_types.get(&id.local_id).cloned()
   70,022 ( 0.00%)      }
        .           
        .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
    3,664 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
    1,832 ( 0.00%)      }
        .           
    8,828 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
    8,828 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
   17,656 ( 0.00%)      }
        .           
    5,821 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
    5,821 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_substs.get(&id.local_id).cloned()
   11,642 ( 0.00%)      }
        .           
        .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
        .               // doesn't provide type parameter substitutions.
        .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
    3,644 ( 0.00%)          self.node_type(pat.hir_id)
        .               }
        .           
        .               // Returns the type of an expression as a monotype.
        .               //
        .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
        .               // some cases, we insert `Adjustment` annotations such as auto-deref or
        .               // auto-ref.  The type returned by this function does not consider such
        .               // adjustments.  See `expr_ty_adjusted()` instead.
        .               //
        .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
        .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
        .               // instead of "fn(ty) -> T with T = isize".
        .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
   24,850 ( 0.00%)          self.node_type(expr.hir_id)
        .               }
        .           
        .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
   50,204 ( 0.00%)          self.node_type_opt(expr.hir_id)
        .               }
        .           
        .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   11,330 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
    5,665 ( 0.00%)      }
        .           
        .               pub fn adjustments_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   15,448 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
    7,724 ( 0.00%)      }
        .           
   15,979 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
   31,958 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
        .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
   31,958 ( 0.00%)      }
        .           
        .               /// Returns the type of `expr`, considering any `Adjustment`
        .               /// entry recorded for that expression.
    1,075 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
      215 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
      196 ( 0.00%)      }
        .           
    4,520 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
      904 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
      784 ( 0.00%)      }
        .           
      962 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
        .                   // Only paths and method calls/overloaded operators have
        .                   // entries in type_dependent_defs, ignore the former here.
    1,924 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
        .                       return false;
        .                   }
        .           
    2,056 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
    1,924 ( 0.00%)      }
        .           
    6,990 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
        .                   self.pat_binding_modes().get(id).copied().or_else(|| {
        .                       s.delay_span_bug(sp, "missing binding mode");
        .                       None
        .                   })
    9,320 ( 0.00%)      }
        .           
        .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
    6,150 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
    1,910 ( 0.00%)      }
        .           
        .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
    2,616 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
    1,308 ( 0.00%)      }
        .           
        .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    9,006 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
    4,503 ( 0.00%)      }
        .           
        .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
    2,008 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
    1,004 ( 0.00%)      }
        .           
        .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
        .               /// by the closure.
    1,968 ( 0.00%)      pub fn closure_min_captures_flattened(
        .                   &self,
        .                   closure_def_id: DefId,
        .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
        .                   self.closure_min_captures
        .                       .get(&closure_def_id)
        .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
        .                       .into_iter()
        .                       .flatten()
    2,460 ( 0.00%)      }
        .           
        .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
      354 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
      177 ( 0.00%)      }
        .           
        .               pub fn closure_kind_origins_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
        .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
        .               }
        .           
        .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
    1,206 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
      603 ( 0.00%)      }
        .           
        .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
      852 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
      426 ( 0.00%)      }
        .           
        .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
      354 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
      177 ( 0.00%)      }
        .           
        .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
        .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
        .               }
        .           
        .               pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
        .                   validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
        .                   self.coercion_casts.contains(&hir_id.local_id)
        .               }
        .           
        .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
        .                   self.coercion_casts.insert(id);
        .               }
        .           
        .               pub fn coercion_casts(&self) -> &ItemLocalSet {
      177 ( 0.00%)          &self.coercion_casts
      177 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
        .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
        .                   let ty::TypeckResults {
        .                       hir_owner,
        .                       ref type_dependent_defs,
        .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
        .                   const START_INDEX = 0,
        .               }
        .           }
        .           
        .           /// Mapping of type annotation indices to canonical user type annotations.
        .           pub type CanonicalUserTypeAnnotations<'tcx> =
        .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
        .           
      392 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
        .           pub struct CanonicalUserTypeAnnotation<'tcx> {
        .               pub user_ty: CanonicalUserType<'tcx>,
        .               pub span: Span,
      300 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
        .           }
        .           
        .           /// Canonicalized user type annotation.
        .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
        .           
        .           impl<'tcx> CanonicalUserType<'tcx> {
        .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
        .               /// i.e., each thing is mapped to a canonical variable with the same index.
      864 ( 0.00%)      pub fn is_identity(&self) -> bool {
    1,728 ( 0.00%)          match self.value {
        .                       UserType::Ty(_) => false,
        .                       UserType::TypeOf(_, user_substs) => {
      864 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
        .                               return false;
        .                           }
        .           
        .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
        .                               match kind.unpack() {
    1,996 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
        .                                       ty::Bound(debruijn, b) => {
        .                                           // We only allow a `ty::INNERMOST` index in substitutions.
      967 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
        .                                           cvar == b.var
        .                                       }
        .                                       _ => false,
        .                                   },
        .           
      204 ( 0.00%)                          GenericArgKind::Lifetime(r) => match r {
        .                                       ty::ReLateBound(debruijn, br) => {
        .                                           // We only allow a `ty::INNERMOST` index in substitutions.
        .                                           assert_eq!(*debruijn, ty::INNERMOST);
        .                                           cvar == br.var
        .                                       }
        .                                       _ => false,
        .                                   },
        .           
-- line 867 ----------------------------------------
-- line 872 ----------------------------------------
        .                                           cvar == b
        .                                       }
        .                                       _ => false,
        .                                   },
        .                               }
        .                           })
        .                       }
        .                   }
    1,728 ( 0.00%)      }
        .           }
        .           
        .           /// A user-given type annotation attached to a constant. These arise
        .           /// from constants that are named via paths, like `Foo::<A>::new` and
        .           /// so forth.
    1,800 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
   10,764 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
        .           pub enum UserType<'tcx> {
        .               Ty(Ty<'tcx>),
        .           
        .               /// The canonical type is the result of `type_of(def_id)` with the
        .               /// given substitutions applied.
        .               TypeOf(DefId, UserSubsts<'tcx>),
        .           }
        .           
        .           impl<'tcx> CommonTypes<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
      111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
        .           
        .                   CommonTypes {
        .                       unit: mk(Tuple(List::empty())),
        .                       bool: mk(Bool),
        .                       char: mk(Char),
        .                       never: mk(Never),
        .                       isize: mk(Int(ty::IntTy::Isize)),
        .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
        .           
        .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> CommonLifetimes<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
       67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
        .           
        .                   CommonLifetimes {
        5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
        5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
        5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> CommonConsts<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
        6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
        .           
        .                   CommonConsts {
        .                       unit: mk_const(ty::Const {
        .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
        .                           ty: types.unit,
        .                       }),
        .                   }
        .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
        .           
        .               /// Stores memory for globals (statics/consts).
        .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
        .           
        .               output_filenames: Arc<OutputFilenames>,
        .           }
        .           
        .           impl<'tcx> TyCtxt<'tcx> {
   10,420 ( 0.00%)      pub fn typeck_opt_const_arg(
        .                   self,
        .                   def: ty::WithOptConstParam<LocalDefId>,
        .               ) -> &'tcx TypeckResults<'tcx> {
    4,168 ( 0.00%)          if let Some(param_did) = def.const_param_did {
        .                       self.typeck_const_arg((def.did, param_did))
        .                   } else {
        .                       self.typeck(def.did)
        .                   }
    8,336 ( 0.00%)      }
        .           
      690 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
      230 ( 0.00%)          self.arena.alloc(Steal::new(thir))
      920 ( 0.00%)      }
        .           
    4,600 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
      920 ( 0.00%)          self.arena.alloc(Steal::new(mir))
    6,440 ( 0.00%)      }
        .           
      920 ( 0.00%)      pub fn alloc_steal_promoted(
        .                   self,
        .                   promoted: IndexVec<Promoted, Body<'tcx>>,
        .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
      230 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
    1,150 ( 0.00%)      }
        .           
    5,634 ( 0.00%)      pub fn alloc_adt_def(
        .                   self,
        .                   did: DefId,
        .                   kind: AdtKind,
        .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
        .                   repr: ReprOptions,
        .               ) -> &'tcx ty::AdtDef {
   10,016 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
    2,504 ( 0.00%)      }
        .           
        .               /// Allocates a read-only byte or string literal for `mir::interpret`.
       30 ( 0.00%)      pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
        .                   // Create an allocation that just contains these bytes.
        6 ( 0.00%)          let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
       78 ( 0.00%)          let alloc = self.intern_const_alloc(alloc);
        .                   self.create_memory_alloc(alloc)
       30 ( 0.00%)      }
        .           
        .               /// Returns a range of the start/end indices specified with the
        .               /// `rustc_layout_scalar_valid_range` attribute.
        .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
   21,664 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
   10,832 ( 0.00%)          let attrs = self.get_attrs(def_id);
   46,036 ( 0.00%)          let get = |name| {
   10,832 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
        .                           Some(attr) => attr,
        .                           None => return Bound::Unbounded,
        .                       };
        .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
    1,608 ( 0.00%)              if let Some(
        .                           &[
        .                               ast::NestedMetaItem::Literal(ast::Lit {
      804 ( 0.00%)                          kind: ast::LitKind::Int(a, _), ..
        .                               }),
        .                           ],
      402 ( 0.00%)              ) = attr.meta_item_list().as_deref()
        .                       {
        .                           Bound::Included(a)
        .                       } else {
        .                           self.sess
        .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
        .                           Bound::Unbounded
        .                       }
   54,160 ( 0.00%)          };
   16,248 ( 0.00%)          (
   16,248 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
    8,124 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
        .                   )
   21,664 ( 0.00%)      }
        .           
        .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
        .                   value.lift_to_tcx(self)
        .               }
        .           
        .               /// Creates a type context and call the closure with a `TyCtxt` reference
        .               /// to the context. The closure enforces that the type context and any interned
        .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
        .               /// reference to the context, to allow formatting values that need it.
       23 ( 0.00%)      pub fn create_global_ctxt(
        .                   s: &'tcx Session,
        .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
        .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
        .                   resolutions: ty::ResolverOutputs,
        .                   krate: &'tcx hir::Crate<'tcx>,
        .                   dep_graph: DepGraph,
        .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
        .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
        .                   query_kinds: &'tcx [DepKindStruct],
        .                   crate_name: &str,
        .                   output_filenames: OutputFilenames,
        .               ) -> GlobalCtxt<'tcx> {
        1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
        .                       s.fatal(&err);
        .                   });
        .                   let interners = CtxtInterners::new(arena);
        .                   let common_types = CommonTypes::new(&interners);
        .                   let common_lifetimes = CommonLifetimes::new(&interners);
        .                   let common_consts = CommonConsts::new(&interners, &common_types);
        .           
      127 ( 0.00%)          GlobalCtxt {
        .                       sess: s,
        6 ( 0.00%)              lint_store,
        .                       arena,
        2 ( 0.00%)              interners,
        5 ( 0.00%)              dep_graph,
        4 ( 0.00%)              untracked_resolutions: resolutions,
        2 ( 0.00%)              prof: s.prof.clone(),
        .                       types: common_types,
        .                       lifetimes: common_lifetimes,
        .                       consts: common_consts,
        .                       untracked_crate: krate,
        .                       on_disk_cache,
        .                       queries,
        .                       query_caches: query::QueryCaches::default(),
        .                       query_kinds,
        .                       ty_rcache: Default::default(),
        .                       pred_rcache: Default::default(),
        .                       selection_cache: Default::default(),
        .                       evaluation_cache: Default::default(),
        1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
        .                       data_layout,
        .                       alloc_map: Lock::new(interpret::AllocMap::new()),
        .                       output_filenames: Arc::new(output_filenames),
        .                   }
        9 ( 0.00%)      }
        .           
        .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
        .                   &self.query_kinds[k as usize]
        .               }
        .           
        .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
        .               #[track_caller]
        .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   ty: Ty<'tcx>,
        .                   span: S,
        .                   msg: &str,
        .               ) -> &'tcx Const<'tcx> {
        .                   self.sess.delay_span_bug(span, msg);
        .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
        .               }
        .           
    8,127 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
    1,161 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
    8,693 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
    9,288 ( 0.00%)      }
        .           
        .               /// Obtain all lang items of this crate and all dependencies (recursively)
2,049,502 ( 0.01%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
        .                   self.get_lang_items(())
2,635,074 ( 0.01%)      }
        .           
        .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
        .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
       84 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
        .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
       96 ( 0.00%)      }
        .           
        .               /// Obtain the diagnostic item's name
   14,987 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
        .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
   17,128 ( 0.00%)      }
        .           
        .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
   13,916 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
        .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
   15,904 ( 0.00%)      }
        .           
    3,073 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
        .                   self.stability_index(())
    3,951 ( 0.00%)      }
        .           
  150,003 ( 0.00%)      pub fn features(self) -> &'tcx rustc_feature::Features {
        .                   self.features_query(())
  171,432 ( 0.00%)      }
        .           
  771,427 ( 0.00%)      pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
        .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
4,314,289 ( 0.02%)          if let Some(id) = id.as_local() {
        .                       self.untracked_resolutions.definitions.def_key(id)
        .                   } else {
7,223,451 ( 0.04%)              self.untracked_resolutions.cstore.def_key(id)
        .                   }
   14,540 ( 0.00%)      }
        .           
        .               /// Converts a `DefId` into its fully expanded `DefPath` (every
        .               /// `DefId` is really just an interned `DefPath`).
        .               ///
        .               /// Note that if `id` is not local to this crate, the result will
        .               ///  be a non-local `DefPath`.
      476 ( 0.00%)      pub fn def_path(self, id: DefId) -> rustc_hir::definitions::DefPath {
        .                   // Accessing the DefPath is ok, since it is part of DefPathHash.
      714 ( 0.00%)          if let Some(id) = id.as_local() {
       24 ( 0.00%)              self.untracked_resolutions.definitions.def_path(id)
        .                   } else {
    1,150 ( 0.00%)              self.untracked_resolutions.cstore.def_path(id)
        .                   }
      714 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
        .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
   17,824 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
        .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
        .                   } else {
   35,367 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
        .                   if crate_num == LOCAL_CRATE {
        .                       self.sess.local_stable_crate_id()
        .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
        .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
        .                       self.def_path(def_id).to_string_no_crate_verbose()
        .                   )
        .               }
        .           
        .               /// Note that this is *untracked* and should only be used within the query
        .               /// system if the result is otherwise tracked through queries
        .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
  161,262 ( 0.00%)          &*self.untracked_resolutions.cstore
   80,631 ( 0.00%)      }
        .           
        .               /// Note that this is *untracked* and should only be used within the query
        .               /// system if the result is otherwise tracked through queries
        .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
        .                   &self.untracked_resolutions.definitions
        .               }
        .           
        .               #[inline(always)]
        .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
   35,941 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
  143,781 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
        .               }
        .           
        .               #[inline(always)]
        .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
        .                   let resolutions = &self.gcx.untracked_resolutions;
        .                   StableHashingContext::ignore_spans(
        .                       self.sess,
        .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
        .               /// If `true`, we should use the MIR-based borrowck, but also
        .               /// fall back on the AST borrowck if the MIR-based one errors.
        .               pub fn migrate_borrowck(self) -> bool {
        .                   self.borrowck_mode().migrate()
        .               }
        .           
        .               /// What mode(s) of borrowck should we run? AST? MIR? both?
        .               /// (Also considers the `#![feature(nll)]` setting.)
      354 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
        .                   // Here are the main constraints we need to deal with:
        .                   //
        .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
        .                   //    synonymous with no `-Z borrowck=...` flag at all.
        .                   //
        .                   // 2. We want to allow developers on the Nightly channel
        .                   //    to opt back into the "hard error" mode for NLL,
        .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
        .                   //   errors. (To simplify the code here, it now even overrides
        .                   //   a user's attempt to specify `-Z borrowck=compare`, which
        .                   //   we arguably do not need anymore and should remove.)
        .                   //
        .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
        .                   //
        .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
        .           
      531 ( 0.00%)          if self.features().nll {
        .                       return BorrowckMode::Mir;
        .                   }
        .           
      177 ( 0.00%)          self.sess.opts.borrowck_mode
      708 ( 0.00%)      }
        .           
        .               /// If `true`, we should use lazy normalization for constants, otherwise
        .               /// we still evaluate them eagerly.
        .               #[inline]
        .               pub fn lazy_normalization(self) -> bool {
       43 ( 0.00%)          let features = self.features();
        .                   // Note: We only use lazy normalization for generic const expressions.
       43 ( 0.00%)          features.generic_const_exprs
        .               }
        .           
        .               #[inline]
        .               pub fn local_crate_exports_generics(self) -> bool {
        .                   debug_assert!(self.sess.opts.share_generics());
        .           
   11,351 ( 0.00%)          self.sess.crate_types().iter().any(|crate_type| {
   18,923 ( 0.00%)              match crate_type {
        .                           CrateType::Executable
        .                           | CrateType::Staticlib
        .                           | CrateType::ProcMacro
        .                           | CrateType::Cdylib => false,
        .           
        .                           // FIXME rust-lang/rust#64319, rust-lang/rust#64872:
        .                           // We want to block export of generics from dylibs,
        .                           // but we must fix rust-lang/rust#65890 before we can
-- line 1450 ----------------------------------------
-- line 1540 ----------------------------------------
        .                       // FIXME(#42706) -- in some cases, we could do better here.
        .                       return true;
        .                   }
        .                   false
        .               }
        .           
        .               /// Determines whether identifiers in the assembly have strict naming rules.
        .               /// Currently, only NVPTX* targets need it.
   51,759 ( 0.00%)      pub fn has_strict_asm_symbol_naming(self) -> bool {
   51,759 ( 0.00%)          self.sess.target.arch.contains("nvptx")
  103,518 ( 0.00%)      }
        .           
        .               /// Returns `&'static core::panic::Location<'static>`.
    7,002 ( 0.00%)      pub fn caller_location_ty(self) -> Ty<'tcx> {
        .                   self.mk_imm_ref(
    1,167 ( 0.00%)              self.lifetimes.re_static,
        .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
    2,334 ( 0.00%)                  .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
        .                   )
    7,002 ( 0.00%)      }
        .           
        .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
    1,320 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
      960 ( 0.00%)          match self.def_kind(def_id) {
        .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
        .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
        .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
        .                       },
    2,160 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
        .                   }
    1,080 ( 0.00%)      }
        .           
  421,246 ( 0.00%)      pub fn type_length_limit(self) -> Limit {
        .                   self.limits(()).type_length_limit
  481,424 ( 0.00%)      }
        .           
  961,037 ( 0.00%)      pub fn recursion_limit(self) -> Limit {
        .                   self.limits(()).recursion_limit
1,098,328 ( 0.01%)      }
        .           
  513,758 ( 0.00%)      pub fn move_size_limit(self) -> Limit {
        .                   self.limits(()).move_size_limit
  587,152 ( 0.00%)      }
        .           
   14,644 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
        .                   self.limits(()).const_eval_limit
   16,736 ( 0.00%)      }
        .           
        .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
        .                   iter::once(LOCAL_CRATE)
        .                       .chain(self.crates(()).iter().copied())
        .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
        .               }
        .           }
        .           
-- line 1594 ----------------------------------------
-- line 1614 ----------------------------------------
        .               fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted>;
        .           }
        .           
        .           macro_rules! nop_lift {
        .               ($set:ident; $ty:ty => $lifted:ty) => {
        .                   impl<'a, 'tcx> Lift<'tcx> for $ty {
        .                       type Lifted = $lifted;
        .                       fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {
   28,176 ( 0.00%)                  if tcx.interners.$set.contains_pointer_to(&Interned(self)) {
        .                               Some(unsafe { mem::transmute(self) })
        .                           } else {
        .                               None
        .                           }
        .                       }
        .                   }
        .               };
        .           }
-- line 1630 ----------------------------------------
-- line 1684 ----------------------------------------
        .               /// This is the implicit state of rustc. It contains the current
        .               /// `TyCtxt` and query. It is updated when creating a local interner or
        .               /// executing a new query. Whenever there's a `TyCtxt` value available
        .               /// you should also have access to an `ImplicitCtxt` through the functions
        .               /// in this module.
        .               #[derive(Clone)]
        .               pub struct ImplicitCtxt<'a, 'tcx> {
        .                   /// The current `TyCtxt`.
        2 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
        .           
        .                   /// The current query job, if any. This is updated by `JobOwner::start` in
        .                   /// `ty::query::plumbing` when executing a query.
        .                   pub query: Option<query::QueryJobId<DepKind>>,
        .           
        .                   /// Where to store diagnostics for the current query job, if any.
        .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
        .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
        .                   pub layout_depth: usize,
        .           
        .                   /// The current dep graph task. This is used to add dependencies to queries
        .                   /// when executing them.
        .                   pub task_deps: TaskDepsRef<'a>,
        .               }
        .           
        .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
        5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
        .                       let tcx = TyCtxt { gcx };
       25 ( 0.00%)              ImplicitCtxt {
        .                           tcx,
        .                           query: None,
        .                           diagnostics: None,
        .                           layout_depth: 0,
        .                           task_deps: TaskDepsRef::Ignore,
        .                       }
        5 ( 0.00%)          }
        .               }
        .           
        .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
        .               /// to `value` during the call to `f`. It is restored to its previous value after.
        .               /// This is used to set the pointer to the new `ImplicitCtxt`.
        .               #[cfg(parallel_compiler)]
        .               #[inline]
        .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
        .           
        .               /// Sets TLV to `value` during the call to `f`.
        .               /// It is restored to its previous value after.
        .               /// This is used to set the pointer to the new `ImplicitCtxt`.
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
        .                   let old = get_tlv();
  214,324 ( 0.00%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
        .                   TLV.with(|tlv| tlv.set(value));
        .                   f()
        .               }
        .           
        .               /// Gets the pointer to the current `ImplicitCtxt`.
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
        .               }
        .           
        .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
        .               #[inline]
        .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
        .               where
        .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
        .               {
        1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
        .               }
        .           
        .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
        .               #[inline]
        .               pub fn with_context_opt<F, R>(f: F) -> R
        .               where
        .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
        .               {
        .                   let context = get_tlv();
  938,647 ( 0.00%)          if context == 0 {
        .                       f(None)
        .                   } else {
        .                       // We could get an `ImplicitCtxt` pointer from another thread.
        .                       // Ensure that `ImplicitCtxt` is `Sync`.
        .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
        .           
        .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
        .                   }
-- line 1789 ----------------------------------------
-- line 1791 ----------------------------------------
        .           
        .               /// Allows access to the current `ImplicitCtxt`.
        .               /// Panics if there is no `ImplicitCtxt` available.
        .               #[inline]
        .               pub fn with_context<F, R>(f: F) -> R
        .               where
        .                   F: for<'a, 'tcx> FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
        .               {
   14,278 ( 0.00%)          with_context_opt(|opt_context| f(opt_context.expect("no ImplicitCtxt stored in tls")))
        .               }
        .           
        .               /// Allows access to the current `ImplicitCtxt` whose tcx field is the same as the tcx argument
        .               /// passed in. This means the closure is given an `ImplicitCtxt` with the same `'tcx` lifetime
        .               /// as the `TyCtxt` passed in.
        .               /// This will panic if you pass it a `TyCtxt` which is different from the current
        .               /// `ImplicitCtxt`'s `tcx` field.
        .               #[inline]
        .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
        .               where
        .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
        .               {
        .                   with_context(|context| unsafe {
  449,512 ( 0.00%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
        .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
  433,778 ( 0.00%)              f(context)
        .                   })
        .               }
        .           
        .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
        .               /// Panics if there is no `ImplicitCtxt` available.
        .               #[inline]
        .               pub fn with<F, R>(f: F) -> R
        .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
        .               fn into_pointer(&self) -> *const () {
        .                   self.0 as *const _ as *const ()
        .               }
        .           }
        .           
        .           #[allow(rustc::usage_of_ty_tykind)]
        .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
        .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
  889,119 ( 0.00%)          &self.0.kind()
        .               }
        .           }
        .           
        .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
        .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
        .           
        .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  372,228 ( 0.00%)          self.0.kind().hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
  173,291 ( 0.00%)          &self.0.kind
        .               }
        .           }
        .           
        .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
        .           
        .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   28,668 ( 0.00%)          self.0.kind.hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
        .               fn borrow<'a>(&'a self) -> &'a [T] {
  937,313 ( 0.00%)          &self.0[..]
        .               }
        .           }
        .           
        .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
        .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
        .           
        .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   91,588 ( 0.00%)          self.0[..].hash(s)
        .               }
        .           }
        .           
        .           macro_rules! direct_interners {
        .               ($($name:ident: $method:ident($ty:ty),)+) => {
        .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
        .                       fn borrow<'a>(&'a self) -> &'a $ty {
  154,671 ( 0.00%)                  &self.0
        .                       }
        .                   }
        .           
        .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
        .                       fn eq(&self, other: &Self) -> bool {
        .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
        .                           // equals `x == y`.
        .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
        .                   }
        .           
        .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
        .           
        .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
        .                       fn hash<H: Hasher>(&self, s: &mut H) {
        .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
        .                           // x.hash(s)`.
   82,400 ( 0.00%)                  self.0.hash(s)
        .                       }
        .                   }
        .           
        .                   impl<'tcx> TyCtxt<'tcx> {
1,406,074 ( 0.01%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
  762,801 ( 0.00%)                  self.interners.$name.intern(v, |v| {
   21,178 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
        .                           }).0
1,555,047 ( 0.01%)              }
        .                   })+
        .               }
        .           }
        .           
        .           direct_interners! {
        .               region: mk_region(RegionKind),
        .               const_: mk_const(Const<'tcx>),
        .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
        .               adt_def: intern_adt_def(AdtDef),
        .               stability: intern_stability(attr::Stability),
        .               const_stability: intern_const_stability(attr::ConstStability),
        .           }
        .           
        .           macro_rules! slice_interners {
        .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
        .                   impl<'tcx> TyCtxt<'tcx> {
9,935,683 ( 0.05%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
        .                           self.interners.$field.intern_ref(v, || {
        .                               Interned(List::from_arena(&*self.arena, v))
        .                           }).0
8,912,169 ( 0.04%)              })+
        .                   }
        .               );
        .           }
        .           
        .           slice_interners!(
        .               type_list: _intern_type_list(Ty<'tcx>),
        .               substs: _intern_substs(GenericArg<'tcx>),
        .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2129 ----------------------------------------
        .               /// unsafe.
        .               pub fn safe_to_unsafe_fn_ty(self, sig: PolyFnSig<'tcx>) -> Ty<'tcx> {
        .                   assert_eq!(sig.unsafety(), hir::Unsafety::Normal);
        .                   self.mk_fn_ptr(sig.map_bound(|sig| ty::FnSig { unsafety: hir::Unsafety::Unsafe, ..sig }))
        .               }
        .           
        .               /// Given the def_id of a Trait `trait_def_id` and the name of an associated item `assoc_name`
        .               /// returns true if the `trait_def_id` defines an associated item of name `assoc_name`.
       84 ( 0.00%)      pub fn trait_may_define_assoc_type(self, trait_def_id: DefId, assoc_name: Ident) -> bool {
        .                   self.super_traits_of(trait_def_id).any(|trait_did| {
        .                       self.associated_items(trait_did)
        .                           .find_by_name_and_kind(self, assoc_name, ty::AssocKind::Type, trait_did)
        .                           .is_some()
        .                   })
       63 ( 0.00%)      }
        .           
        .               /// Computes the def-ids of the transitive supertraits of `trait_def_id`. This (intentionally)
        .               /// does not compute the full elaborated super-predicates but just the set of def-ids. It is used
        .               /// to identify which traits may define a given associated type to help avoid cycle errors.
        .               /// Returns a `DefId` iterator.
        .               fn super_traits_of(self, trait_def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {
        .                   let mut set = FxHashSet::default();
       14 ( 0.00%)          let mut stack = vec![trait_def_id];
        .           
        .                   set.insert(trait_def_id);
        .           
       63 ( 0.00%)          iter::from_fn(move || -> Option<DefId> {
       14 ( 0.00%)              let trait_did = stack.pop()?;
        7 ( 0.00%)              let generic_predicates = self.super_predicates_of(trait_did);
        .           
        .                       for (predicate, _) in generic_predicates.predicates {
       12 ( 0.00%)                  if let ty::PredicateKind::Trait(data) = predicate.kind().skip_binder() {
        8 ( 0.00%)                      if set.insert(data.def_id()) {
        .                                   stack.push(data.def_id());
        .                               }
        .                           }
        .                       }
        .           
        .                       Some(trait_did)
        .                   })
        .               }
-- line 2169 ----------------------------------------
-- line 2188 ----------------------------------------
        .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
        .                   })
        .               }
        .           
        .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
        .               /// `*r == kind`.
        .               #[inline]
        .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
  103,556 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
        .               }
        .           
        .               #[allow(rustc::usage_of_ty_tykind)]
        .               #[inline]
        .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
6,496,183 ( 0.03%)          self.interners.intern_ty(st)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
2,106,166 ( 0.01%)          let inner = self.interners.intern_predicate(binder);
        .                   Predicate { inner }
        .               }
        .           
        .               #[inline]
1,537,224 ( 0.01%)      pub fn reuse_or_mk_predicate(
        .                   self,
        .                   pred: Predicate<'tcx>,
        .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
        .               ) -> Predicate<'tcx> {
   68,525 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
1,537,224 ( 0.01%)      }
        .           
        .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
       18 ( 0.00%)          match tm {
        .                       IntTy::Isize => self.types.isize,
        .                       IntTy::I8 => self.types.i8,
        .                       IntTy::I16 => self.types.i16,
        .                       IntTy::I32 => self.types.i32,
        .                       IntTy::I64 => self.types.i64,
        .                       IntTy::I128 => self.types.i128,
        .                   }
       18 ( 0.00%)      }
        .           
        .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
       49 ( 0.00%)          match tm {
        .                       UintTy::Usize => self.types.usize,
        .                       UintTy::U8 => self.types.u8,
        .                       UintTy::U16 => self.types.u16,
        .                       UintTy::U32 => self.types.u32,
        .                       UintTy::U64 => self.types.u64,
        .                       UintTy::U128 => self.types.u128,
        .                   }
       49 ( 0.00%)      }
        .           
        .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
        4 ( 0.00%)          match tm {
        .                       FloatTy::F32 => self.types.f32,
        .                       FloatTy::F64 => self.types.f64,
        .                   }
        4 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_static_str(self) -> Ty<'tcx> {
      320 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   // Take a copy of substs so that we own the vectors inside.
        .                   self.mk_ty(Adt(def, substs))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_foreign(self, def_id: DefId) -> Ty<'tcx> {
        .                   self.mk_ty(Foreign(def_id))
        .               }
        .           
    1,248 ( 0.00%)      fn mk_generic_adt(self, wrapper_def_id: DefId, ty_param: Ty<'tcx>) -> Ty<'tcx> {
        .                   let adt_def = self.adt_def(wrapper_def_id);
        .                   let substs =
    2,132 ( 0.00%)              InternalSubsts::for_item(self, wrapper_def_id, |param, substs| match param.kind {
        .                           GenericParamDefKind::Lifetime | GenericParamDefKind::Const { .. } => bug!(),
       52 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
      416 ( 0.00%)                      if param.index == 0 {
        .                                   ty_param.into()
        .                               } else {
       52 ( 0.00%)                          assert!(has_default);
      156 ( 0.00%)                          self.type_of(param.def_id).subst(self, substs).into()
        .                               }
        .                           }
        .                       });
      156 ( 0.00%)          self.mk_ty(Adt(adt_def, substs))
    1,248 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_box(self, ty: Ty<'tcx>) -> Ty<'tcx> {
      260 ( 0.00%)          let def_id = self.require_lang_item(LangItem::OwnedBox, None);
      208 ( 0.00%)          self.mk_generic_adt(def_id, ty)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_lang_item(self, ty: Ty<'tcx>, item: LangItem) -> Option<Ty<'tcx>> {
        .                   let def_id = self.lang_items().require(item).ok()?;
        .                   Some(self.mk_generic_adt(def_id, ty))
        .               }
        .           
-- line 2293 ----------------------------------------
-- line 2295 ----------------------------------------
        .               pub fn mk_diagnostic_item(self, ty: Ty<'tcx>, name: Symbol) -> Option<Ty<'tcx>> {
        .                   let def_id = self.get_diagnostic_item(name)?;
        .                   Some(self.mk_generic_adt(def_id, ty))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_maybe_uninit(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   let def_id = self.require_lang_item(LangItem::MaybeUninit, None);
      312 ( 0.00%)          self.mk_generic_adt(def_id, ty)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_ptr(self, tm: TypeAndMut<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(RawPtr(tm))
        .               }
        .           
        .               #[inline]
-- line 2311 ----------------------------------------
-- line 2329 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
        .               }
        .           
        .               #[inline]
   11,756 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
        .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
   11,984 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(Slice(ty))
        .               }
        .           
        .               #[inline]
        .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
    5,408 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
    6,092 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
        .               }
        .           
        .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
  243,716 ( 0.00%)          iter.intern_with(|ts| {
   52,828 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
  151,361 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
  219,339 ( 0.00%)          })
        .               }
        .           
        .               #[inline]
        .               pub fn mk_unit(self) -> Ty<'tcx> {
    5,576 ( 0.00%)          self.types.unit
        .               }
        .           
        .               #[inline]
        .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
        .                   if self.features().never_type_fallback { self.types.never } else { self.types.unit }
        .               }
        .           
        .               #[inline]
        .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(FnDef(def_id, substs))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
   15,444 ( 0.00%)          self.mk_ty(FnPtr(fty))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_dynamic(
        .                   self,
        .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
        .                   reg: ty::Region<'tcx>,
        .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
        .                   self.mk_ty_infer(TyVar(v))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
      144 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
        .               }
        .           
        .               #[inline]
        .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
        .                   self.mk_ty_infer(IntVar(v))
        .               }
        .           
        .               #[inline]
-- line 2428 ----------------------------------------
-- line 2445 ----------------------------------------
        .                   self.mk_ty(Param(ParamTy { index, name }))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
        .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
        .               }
        .           
    9,562 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
    5,950 ( 0.00%)          match param.kind {
        .                       GenericParamDefKind::Lifetime => {
    2,640 ( 0.00%)                  self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
        .                       }
    1,852 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
        .                       GenericParamDefKind::Const { .. } => {
        .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
        .                       }
        .                   }
    9,562 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(Opaque(def_id, substs))
        .               }
        .           
    1,884 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
    1,884 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
    3,768 ( 0.00%)      }
        .           
      548 ( 0.00%)      pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
    1,644 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Deref)
    1,096 ( 0.00%)      }
        .           
      275 ( 0.00%)      pub fn mk_place_downcast(
        .                   self,
        .                   place: Place<'tcx>,
        .                   adt_def: &'tcx AdtDef,
        .                   variant_index: VariantIdx,
        .               ) -> Place<'tcx> {
      275 ( 0.00%)          self.mk_place_elem(
        .                       place,
      550 ( 0.00%)              PlaceElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index),
        .                   )
      550 ( 0.00%)      }
        .           
      277 ( 0.00%)      pub fn mk_place_downcast_unnamed(
        .                   self,
        .                   place: Place<'tcx>,
        .                   variant_index: VariantIdx,
        .               ) -> Place<'tcx> {
      277 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Downcast(None, variant_index))
      554 ( 0.00%)      }
        .           
       12 ( 0.00%)      pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
       12 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Index(index))
       24 ( 0.00%)      }
        .           
        .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
        .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
        .               /// flight.
   33,057 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
        .                   let mut projection = place.projection.to_vec();
        .                   projection.push(elem);
        .           
        .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
   36,730 ( 0.00%)      }
        .           
   23,380 ( 0.00%)      pub fn intern_poly_existential_predicates(
        .                   self,
        .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
        .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
    3,448 ( 0.00%)          assert!(!eps.is_empty());
        .                   assert!(
        .                       eps.array_windows()
   30,400 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
        .                               != Ordering::Greater)
        .                   );
   13,792 ( 0.00%)          self._intern_poly_existential_predicates(eps)
   26,720 ( 0.00%)      }
        .           
        .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
        .                   // FIXME consider asking the input slice to be sorted to avoid
        .                   // re-interning permutations, in which case that would be asserted
        .                   // here.
   22,756 ( 0.00%)          if preds.is_empty() {
        .                       // The macro-generated method below asserts we don't intern an empty slice.
        .                       List::empty()
        .                   } else {
   16,471 ( 0.00%)              self._intern_predicates(preds)
        .                   }
   12,666 ( 0.00%)      }
        .           
        .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
  155,895 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
   35,634 ( 0.00%)      }
        .           
        .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
1,708,215 ( 0.01%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
  172,074 ( 0.00%)      }
        .           
        .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
        .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
        .               }
        .           
        .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
   88,681 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
  110,334 ( 0.00%)      }
        .           
        .               pub fn intern_canonical_var_infos(
        .                   self,
        .                   ts: &[CanonicalVarInfo<'tcx>],
        .               ) -> CanonicalVarInfos<'tcx> {
   27,494 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
    2,716 ( 0.00%)      }
        .           
        .               pub fn intern_bound_variable_kinds(
        .                   self,
        .                   ts: &[ty::BoundVariableKind],
        .               ) -> &'tcx List<ty::BoundVariableKind> {
   27,453 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
   36,094 ( 0.00%)      }
        .           
        .               pub fn mk_fn_sig<I>(
        .                   self,
        .                   inputs: I,
        .                   output: I::Item,
        .                   c_variadic: bool,
        .                   unsafety: hir::Unsafety,
        .                   abi: abi::Abi,
        .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
        .               where
        .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
        .               {
        .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
    2,278 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
      604 ( 0.00%)              c_variadic,
      739 ( 0.00%)              unsafety,
      938 ( 0.00%)              abi,
      740 ( 0.00%)          })
        .               }
        .           
        .               pub fn mk_poly_existential_predicates<
        .                   I: InternAs<
        .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
        .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
        .                   >,
        .               >(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
    6,711 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
        .               }
        .           
        .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
       68 ( 0.00%)          iter.intern_with(|xs| self.intern_predicates(xs))
        .               }
        .           
        .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
  226,080 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
        .               }
        .           
    1,512 ( 0.00%)      pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
1,551,911 ( 0.01%)          iter.intern_with(|xs| self.intern_substs(xs))
    2,016 ( 0.00%)      }
        .           
        .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
1,028,997 ( 0.01%)          iter.intern_with(|xs| self.intern_place_elems(xs))
        .               }
        .           
   37,811 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
        .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
   75,622 ( 0.00%)      }
        .           
        .               pub fn mk_bound_variable_kinds<
        .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
        .               >(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
  145,766 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
        .               }
        .           
        .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
        .               /// It stops at `bound` and just returns it if reached.
   65,324 ( 0.00%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
   65,324 ( 0.00%)          let hir = self.hir();
        .                   loop {
  153,258 ( 0.00%)              if id == bound {
        .                           return bound;
        .                       }
        .           
  210,442 ( 0.00%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
        .                           return id;
        .                       }
        .                       let next = hir.get_parent_node(id);
  125,262 ( 0.00%)              if next == id {
        .                           bug!("lint traversal reached the root of the crate");
        .                       }
        .                       id = next;
        .                   }
   93,320 ( 0.00%)      }
        .           
    4,128 ( 0.00%)      pub fn lint_level_at_node(
        .                   self,
        .                   lint: &'static Lint,
        .                   mut id: hir::HirId,
        .               ) -> (Level, LintLevelSource) {
        .                   let sets = self.lint_levels(());
        .                   loop {
   35,502 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
        .                           return pair;
        .                       }
    3,142 ( 0.00%)              let next = self.hir().get_parent_node(id);
    9,426 ( 0.00%)              if next == id {
        .                           bug!("lint traversal reached the root of the crate");
        .                       }
        .                       id = next;
        .                   }
    4,128 ( 0.00%)      }
        .           
      252 ( 0.00%)      pub fn struct_span_lint_hir(
        .                   self,
        .                   lint: &'static Lint,
        .                   hir_id: HirId,
        .                   span: impl Into<MultiSpan>,
        .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
        .               ) {
    1,117 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
      367 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
      144 ( 0.00%)      }
        .           
        .               pub fn struct_lint_node(
        .                   self,
        .                   lint: &'static Lint,
        .                   id: HirId,
        .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
        .               ) {
        .                   let (level, src) = self.lint_level_at_node(lint, id);
        .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
        .               }
        .           
    3,269 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
      934 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
        .                   let candidates = map.get(&id.local_id)?;
      934 ( 0.00%)          Some(&*candidates)
    3,736 ( 0.00%)      }
        .           
    5,516 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
        .                   debug!(?id, "named_region");
        .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
    7,092 ( 0.00%)      }
        .           
      981 ( 0.00%)      pub fn is_late_bound(self, id: HirId) -> bool {
        .                   self.is_late_bound_map(id.owner)
       44 ( 0.00%)              .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
      872 ( 0.00%)      }
        .           
    4,396 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
        .                   self.object_lifetime_defaults_map(id.owner)
    5,652 ( 0.00%)      }
        .           
    5,454 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
        .                   self.mk_bound_variable_kinds(
        .                       self.late_bound_vars_map(id.owner)
        .                           .and_then(|map| map.get(&id.local_id).cloned())
        .                           .unwrap_or_else(|| {
        .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
        .                           })
        .                           .iter(),
        .                   )
    5,454 ( 0.00%)      }
        .           
        .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
        .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
        .               }
        .           
        .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
        .               /// feature gates
      620 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
       62 ( 0.00%)          if self.is_const_fn_raw(def_id) {
       23 ( 0.00%)              match self.lookup_const_stability(def_id) {
       12 ( 0.00%)                  Some(stability) if stability.level.is_unstable() => {
        .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
        .                               // corresponding feature gate.
        2 ( 0.00%)                      self.features()
        .                                   .declared_lib_features
        .                                   .iter()
        .                                   .any(|&(sym, _)| sym == stability.feature)
        .                           }
        .                           // functions without const stability are either stable user written
        .                           // const fn or the user is using feature gates and we thus don't
        .                           // care what they do
        .                           _ => true,
        .                       }
        .                   } else {
        .                       false
        .                   }
      558 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TyCtxtAt<'tcx> {
        .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
        .               #[track_caller]
        .               pub fn ty_error(self) -> Ty<'tcx> {
        .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
        .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
        .           }
        .           
        .           impl<I, T, R, E> InternAs<[T], R> for I
        .           where
        .               E: InternIteratorElement<T, R>,
        .               I: Iterator<Item = E>,
        .           {
        .               type Output = E::Output;
  948,792 ( 0.00%)      fn intern_with<F>(self, f: F) -> Self::Output
        .               where
        .                   F: FnOnce(&[T]) -> R,
        .               {
5,246,947 ( 0.03%)          E::intern_with(self, f)
  504,702 ( 0.00%)      }
        .           }
        .           
        .           pub trait InternIteratorElement<T, R>: Sized {
        .               type Output;
        .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
        .           }
        .           
        .           impl<T, R> InternIteratorElement<T, R> for T {
        .               type Output = R;
  553,843 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
        .                   mut iter: I,
        .                   f: F,
        .               ) -> Self::Output {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
        .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
        .                   // `assert`.
  781,669 ( 0.00%)          match iter.size_hint() {
        .                       (0, Some(0)) => {
       24 ( 0.00%)                  assert!(iter.next().is_none());
        .                           f(&[])
        .                       }
        .                       (1, Some(1)) => {
        .                           let t0 = iter.next().unwrap();
       27 ( 0.00%)                  assert!(iter.next().is_none());
  101,969 ( 0.00%)                  f(&[t0])
        .                       }
        .                       (2, Some(2)) => {
        .                           let t0 = iter.next().unwrap();
        .                           let t1 = iter.next().unwrap();
      184 ( 0.00%)                  assert!(iter.next().is_none());
   98,944 ( 0.00%)                  f(&[t0, t1])
        .                       }
    1,580 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
        .                   }
  375,728 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
        .           where
        .               T: Clone + 'a,
        .           {
        .               type Output = R;
   10,018 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
        .                   // This code isn't hot.
      296 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
    8,291 ( 0.00%)      }
        .           }
        .           
        .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
        .               type Output = Result<R, E>;
2,122,106 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
        .                   mut iter: I,
        .                   f: F,
        .               ) -> Self::Output {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
        .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
        .                   // `assert`, unless a failure happens first, in which case the result
        .                   // will be an error anyway.
1,665,708 ( 0.01%)          Ok(match iter.size_hint() {
        .                       (0, Some(0)) => {
        .                           assert!(iter.next().is_none());
        .                           f(&[])
        .                       }
        .                       (1, Some(1)) => {
      795 ( 0.00%)                  let t0 = iter.next().unwrap()?;
        .                           assert!(iter.next().is_none());
  142,419 ( 0.00%)                  f(&[t0])
        .                       }
        .                       (2, Some(2)) => {
   13,766 ( 0.00%)                  let t0 = iter.next().unwrap()?;
   13,766 ( 0.00%)                  let t1 = iter.next().unwrap()?;
   20,622 ( 0.00%)                  assert!(iter.next().is_none());
  135,280 ( 0.00%)                  f(&[t0, t1])
        .                       }
  149,482 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
        .                   })
2,408,916 ( 0.01%)      }
        .           }
        .           
        .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
        .           // won't work for us.
        .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
  449,512 ( 0.00%)      t as *const () == u as *const ()
        .           }
        .           
        .           pub fn provide(providers: &mut ty::query::Providers) {
        2 ( 0.00%)      providers.in_scope_traits_map =
        .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
        3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
        2 ( 0.00%)      providers.module_reexports =
        .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
        2 ( 0.00%)      providers.crate_name = |tcx, id| {
        1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
        1 ( 0.00%)          tcx.crate_name
        .               };
        2 ( 0.00%)      providers.maybe_unused_trait_import =
        .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
        2 ( 0.00%)      providers.maybe_unused_extern_crates =
        .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
        2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
        .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
        .               };
        .           
       11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
        2 ( 0.00%)      providers.lookup_const_stability =
        .                   |tcx, id| tcx.stability().local_const_stability(id.expect_local());
        2 ( 0.00%)      providers.lookup_deprecation_entry =
    3,496 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
        2 ( 0.00%)      providers.extern_mod_stmt_cnum =
        .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
        3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
        3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
        2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
        1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
        7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
        .               };
        2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
        1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
        7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
        .               };
        2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
        1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
        .                   // We want to check if the panic handler was defined in this crate
        3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
        .               };
        .           }

4,724,117 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs
--------------------------------------------------------------------------------
Ir                  

-- line 176 ----------------------------------------
         .               }
         .               fn sess(self) -> Option<&'tcx Session> {
         .                   None
         .               }
         .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
         .                   None
         .               }
         .           
    48,084 ( 0.00%)      fn decoder(self, pos: usize) -> DecodeContext<'a, 'tcx> {
    16,028 ( 0.00%)          let tcx = self.tcx();
 1,292,361 ( 0.01%)          DecodeContext {
   148,949 ( 0.00%)              opaque: opaque::Decoder::new(self.blob(), pos),
    16,028 ( 0.00%)              cdata: self.cdata(),
         .                       blob: self.blob(),
    53,450 ( 0.00%)              sess: self.sess().or(tcx.map(|tcx| tcx.sess)),
         .                       tcx,
         .                       last_source_file_index: 0,
         .                       lazy_state: LazyState::NoNode,
         .                       alloc_decoding_session: self
         .                           .cdata()
   126,332 ( 0.00%)                  .map(|cdata| cdata.cdata.alloc_decoding_state.new_decoding_session()),
         .                   }
    48,084 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, 'tcx> Metadata<'a, 'tcx> for &'a MetadataBlob {
         .               #[inline]
         .               fn blob(self) -> &'a MetadataBlob {
         .                   self
         .               }
         .           }
-- line 206 ----------------------------------------
-- line 255 ----------------------------------------
         .               }
         .               #[inline]
         .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
         .                   Some(self.1)
         .               }
         .           }
         .           
         .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<T> {
   136,557 ( 0.00%)      fn decode<M: Metadata<'a, 'tcx>>(self, metadata: M) -> T {
   143,635 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
   390,181 ( 0.00%)          dcx.lazy_state = LazyState::NodeStart(self.position);
   128,687 ( 0.00%)          T::decode(&mut dcx)
   175,422 ( 0.00%)      }
         .           }
         .           
         .           impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<[T]> {
         .               fn decode<M: Metadata<'a, 'tcx>>(
         .                   self,
         .                   metadata: M,
         .               ) -> impl ExactSizeIterator<Item = T> + Captures<'a> + Captures<'tcx> + 'x {
     1,015 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
       290 ( 0.00%)          dcx.lazy_state = LazyState::NodeStart(self.position);
   172,530 ( 0.00%)          (0..self.meta).map(move |_| T::decode(&mut dcx))
         .               }
         .           }
         .           
         .           impl<'a, 'tcx> DecodeContext<'a, 'tcx> {
         .               #[inline]
         .               fn tcx(&self) -> TyCtxt<'tcx> {
         .                   debug_assert!(self.tcx.is_some(), "missing TyCtxt in DecodeContext");
         .                   self.tcx.unwrap()
-- line 285 ----------------------------------------
-- line 292 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn cdata(&self) -> CrateMetadataRef<'a> {
         .                   debug_assert!(self.cdata.is_some(), "missing CrateMetadata in DecodeContext");
         .                   self.cdata.unwrap()
         .               }
         .           
         .               fn map_encoded_cnum_to_current(&self, cnum: CrateNum) -> CrateNum {
   427,428 ( 0.00%)          if cnum == LOCAL_CRATE { self.cdata().cnum } else { self.cdata().cnum_map[cnum] }
         .               }
         .           
   132,313 ( 0.00%)      fn read_lazy_with_meta<T: ?Sized + LazyMeta>(&mut self, meta: T::Meta) -> Lazy<T> {
         .                   let distance = self.read_usize();
   123,947 ( 0.00%)          let position = match self.lazy_state {
         .                       LazyState::NoNode => bug!("read_lazy_with_meta: outside of a metadata node"),
    25,744 ( 0.00%)              LazyState::NodeStart(start) => {
         .                           let start = start.get();
    51,488 ( 0.00%)                  assert!(distance <= start);
         .                           start - distance
         .                       }
    28,029 ( 0.00%)              LazyState::Previous(last_pos) => last_pos.get() + distance,
         .                   };
    70,174 ( 0.00%)          self.lazy_state = LazyState::Previous(NonZeroUsize::new(position).unwrap());
         .                   Lazy::from_position_and_meta(NonZeroUsize::new(position).unwrap(), meta)
   132,313 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn read_raw_bytes(&mut self, len: usize) -> &'a [u8] {
         .                   self.opaque.read_raw_bytes(len)
         .               }
         .           }
         .           
         .           impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {
-- line 324 ----------------------------------------
-- line 326 ----------------------------------------
         .           
         .               #[inline]
         .               fn tcx(&self) -> TyCtxt<'tcx> {
         .                   self.tcx.expect("missing TyCtxt in DecodeContext")
         .               }
         .           
         .               #[inline]
         .               fn peek_byte(&self) -> u8 {
   842,570 ( 0.00%)          self.opaque.data[self.opaque.position()]
         .               }
         .           
         .               #[inline]
         .               fn position(&self) -> usize {
       293 ( 0.00%)          self.opaque.position()
         .               }
         .           
   747,033 ( 0.00%)      fn cached_ty_for_shorthand<F>(&mut self, shorthand: usize, or_insert_with: F) -> Ty<'tcx>
         .               where
         .                   F: FnOnce(&mut Self) -> Ty<'tcx>,
         .               {
   106,719 ( 0.00%)          let tcx = self.tcx();
         .           
   106,719 ( 0.00%)          let key = ty::CReaderCacheKey { cnum: Some(self.cdata().cnum), pos: shorthand };
         .           
   366,788 ( 0.00%)          if let Some(&ty) = tcx.ty_rcache.borrow().get(&key) {
         .                       return ty;
         .                   }
         .           
    15,022 ( 0.00%)          let ty = or_insert_with(self);
         .                   tcx.ty_rcache.borrow_mut().insert(key, ty);
         .                   ty
   960,471 ( 0.00%)      }
         .           
       412 ( 0.00%)      fn with_position<F, R>(&mut self, pos: usize, f: F) -> R
         .               where
         .                   F: FnOnce(&mut Self) -> R,
         .               {
         .                   let new_opaque = opaque::Decoder::new(self.opaque.data, pos);
         .                   let old_opaque = mem::replace(&mut self.opaque, new_opaque);
         .                   let old_state = mem::replace(&mut self.lazy_state, LazyState::NoNode);
       206 ( 0.00%)          let r = f(self);
    89,815 ( 0.00%)          self.opaque = old_opaque;
    17,963 ( 0.00%)          self.lazy_state = old_state;
         .                   r
       515 ( 0.00%)      }
         .           
         .               fn decode_alloc_id(&mut self) -> rustc_middle::mir::interpret::AllocId {
     2,051 ( 0.00%)          if let Some(alloc_decoding_session) = self.alloc_decoding_session {
       586 ( 0.00%)              alloc_decoding_session.decode_alloc_id(self)
         .                   } else {
         .                       bug!("Attempting to decode interpret::AllocId without CrateMetadata")
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for CrateNum {
         .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> CrateNum {
   312,475 ( 0.00%)          let cnum = CrateNum::from_u32(d.read_u32());
         .                   d.map_encoded_cnum_to_current(cnum)
         .               }
         .           }
         .           
         .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for DefIndex {
       730 ( 0.00%)      fn decode(d: &mut DecodeContext<'a, 'tcx>) -> DefIndex {
   415,572 ( 0.00%)          DefIndex::from_u32(d.read_u32())
     1,460 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnIndex {
         .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> ExpnIndex {
         .                   ExpnIndex::from_u32(d.read_u32())
         .               }
         .           }
         .           
         .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {
   805,300 ( 0.00%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> SyntaxContext {
   201,325 ( 0.00%)          let cdata = decoder.cdata();
   201,325 ( 0.00%)          let sess = decoder.sess.unwrap();
   402,650 ( 0.00%)          let cname = cdata.root.name;
         .                   rustc_span::hygiene::decode_syntax_context(decoder, &cdata.hygiene_context, |_, id| {
         .                       debug!("SpecializedDecoder<SyntaxContext>: decoding {}", id);
    11,860 ( 0.00%)              cdata
         .                           .root
         .                           .syntax_contexts
         .                           .get(cdata, id)
         .                           .unwrap_or_else(|| panic!("Missing SyntaxContext {:?} for crate {:?}", id, cname))
         .                           .decode((cdata, sess))
         .                   })
 1,006,625 ( 0.01%)      }
         .           }
         .           
         .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnId {
    47,271 ( 0.00%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> ExpnId {
     6,753 ( 0.00%)          let local_cdata = decoder.cdata();
     6,753 ( 0.00%)          let sess = decoder.sess.unwrap();
         .           
         .                   let cnum = CrateNum::decode(decoder);
         .                   let index = u32::decode(decoder);
         .           
         .                   let expn_id = rustc_span::hygiene::decode_expn_id(cnum, index, |expn_id| {
         .                       let ExpnId { krate: cnum, local_id: index } = expn_id;
         .                       // Lookup local `ExpnData`s in our own crate data. Foreign `ExpnData`s
         .                       // are stored in the owning crate, to avoid duplication.
         .                       debug_assert_ne!(cnum, LOCAL_CRATE);
     3,091 ( 0.00%)              let crate_data = if cnum == local_cdata.cnum {
         .                           local_cdata
         .                       } else {
         .                           local_cdata.cstore.get_crate_data(cnum)
         .                       };
    15,455 ( 0.00%)              let expn_data = crate_data
         .                           .root
         .                           .expn_data
         .                           .get(crate_data, index)
         .                           .unwrap()
         .                           .decode((crate_data, sess));
    15,455 ( 0.00%)              let expn_hash = crate_data
         .                           .root
         .                           .expn_hashes
         .                           .get(crate_data, index)
         .                           .unwrap()
         .                           .decode((crate_data, sess));
    30,910 ( 0.00%)              (expn_data, expn_hash)
         .                   });
         .                   expn_id
    54,024 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Span {
 1,539,440 ( 0.01%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Span {
   192,430 ( 0.00%)          let ctxt = SyntaxContext::decode(decoder);
         .                   let tag = u8::decode(decoder);
         .           
   384,860 ( 0.00%)          if tag == TAG_PARTIAL_SPAN {
         .                       return DUMMY_SP.with_ctxt(ctxt);
         .                   }
         .           
         .                   debug_assert!(tag == TAG_VALID_SPAN_LOCAL || tag == TAG_VALID_SPAN_FOREIGN);
         .           
         .                   let lo = BytePos::decode(decoder);
         .                   let len = BytePos::decode(decoder);
         .                   let hi = lo + len;
         .           
   573,105 ( 0.00%)          let Some(sess) = decoder.sess else {
         .                       bug!("Cannot decode Span without Session.")
         .                   };
         .           
         .                   // There are two possibilities here:
         .                   // 1. This is a 'local span', which is located inside a `SourceFile`
         .                   // that came from this crate. In this case, we use the source map data
         .                   // encoded in this crate. This branch should be taken nearly all of the time.
         .                   // 2. This is a 'foreign span', which is located inside a `SourceFile`
-- line 476 ----------------------------------------
-- line 492 ----------------------------------------
         .                   // a transitive dependency.
         .                   //
         .                   // When we encode a foreign span, we adjust its 'lo' and 'high' values
         .                   // to be based on the *foreign* crate (e.g. crate C), not the crate
         .                   // we are writing metadata for (e.g. crate B). This allows us to
         .                   // treat the 'local' and 'foreign' cases almost identically during deserialization:
         .                   // we can call `imported_source_files` for the proper crate, and binary search
         .                   // through the returned slice using our span.
   433,939 ( 0.00%)          let imported_source_files = if tag == TAG_VALID_SPAN_LOCAL {
         .                       decoder.cdata().imported_source_files(sess)
         .                   } else {
         .                       // When we encode a proc-macro crate, all `Span`s should be encoded
         .                       // with `TAG_VALID_SPAN_LOCAL`
    30,277 ( 0.00%)              if decoder.cdata().root.is_proc_macro_crate() {
         .                           // Decode `CrateNum` as u32 - using `CrateNum::decode` will ICE
         .                           // since we don't have `cnum_map` populated.
         .                           let cnum = u32::decode(decoder);
         .                           panic!(
         .                               "Decoding of crate {:?} tried to access proc-macro dep {:?}",
         .                               decoder.cdata().root.name,
         .                               cnum
         .                           );
-- line 513 ----------------------------------------
-- line 518 ----------------------------------------
         .                           "SpecializedDecoder<Span>::specialized_decode: loading source files from cnum {:?}",
         .                           cnum
         .                       );
         .           
         .                       // Decoding 'foreign' spans should be rare enough that it's
         .                       // not worth it to maintain a per-CrateNum cache for `last_source_file_index`.
         .                       // We just set it to 0, to ensure that we don't try to access something out
         .                       // of bounds for our initial 'guess'
    60,554 ( 0.00%)              decoder.last_source_file_index = 0;
         .           
    30,277 ( 0.00%)              let foreign_data = decoder.cdata().cstore.get_crate_data(cnum);
         .                       foreign_data.imported_source_files(sess)
         .                   };
         .           
         .                   let source_file = {
         .                       // Optimize for the case that most spans within a translated item
         .                       // originate from the same source_file.
   573,105 ( 0.00%)              let last_source_file = &imported_source_files[decoder.last_source_file_index];
         .           
   762,759 ( 0.00%)              if lo >= last_source_file.original_start_pos && lo <= last_source_file.original_end_pos
         .                       {
         .                           last_source_file
         .                       } else {
         .                           let index = imported_source_files
         .                               .binary_search_by_key(&lo, |source_file| source_file.original_start_pos)
   103,620 ( 0.00%)                      .unwrap_or_else(|index| index - 1);
         .           
         .                           // Don't try to cache the index for foreign spans,
         .                           // as this would require a map from CrateNums to indices
    51,869 ( 0.00%)                  if tag == TAG_VALID_SPAN_LOCAL {
    24,357 ( 0.00%)                      decoder.last_source_file_index = index;
         .                           }
   103,738 ( 0.00%)                  &imported_source_files[index]
         .                       }
         .                   };
         .           
         .                   // Make sure our binary search above is correct.
         .                   debug_assert!(
         .                       lo >= source_file.original_start_pos && lo <= source_file.original_end_pos,
         .                       "Bad binary search: lo={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
         .                       lo,
-- line 558 ----------------------------------------
-- line 565 ----------------------------------------
         .                       hi >= source_file.original_start_pos && hi <= source_file.original_end_pos,
         .                       "Bad binary search: hi={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
         .                       hi,
         .                       source_file.original_start_pos,
         .                       source_file.original_end_pos
         .                   );
         .           
         .                   let lo =
   764,140 ( 0.00%)              (lo + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
         .                   let hi =
         .                       (hi + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
         .           
         .                   // Do not try to decode parent for foreign spans.
         .                   Span::new(lo, hi, ctxt, None)
 1,731,870 ( 0.01%)      }
         .           }
         .           
         .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for &'tcx [thir::abstract_const::Node<'tcx>] {
         .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> Self {
         .                   ty::codec::RefDecodable::decode(d)
         .               }
         .           }
         .           
-- line 587 ----------------------------------------
-- line 590 ----------------------------------------
         .                   ty::codec::RefDecodable::decode(d)
         .               }
         .           }
         .           
         .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
         .               for Lazy<T>
         .           {
         .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
    44,312 ( 0.00%)          decoder.read_lazy_with_meta(())
         .               }
         .           }
         .           
         .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
         .               for Lazy<[T]>
         .           {
         .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
         .                   let len = decoder.read_usize();
    49,662 ( 0.00%)          if len == 0 { Lazy::empty() } else { decoder.read_lazy_with_meta(len) }
         .               }
         .           }
         .           
         .           impl<'a, 'tcx, I: Idx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
         .               for Lazy<Table<I, T>>
         .           where
         .               Option<T>: FixedSizeEncoding,
         .           {
         .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
         .                   let len = decoder.read_usize();
    34,814 ( 0.00%)          decoder.read_lazy_with_meta(len)
         .               }
         .           }
         .           
         .           implement_ty_decoder!(DecodeContext<'a, 'tcx>);
         .           
         .           impl<'tcx> MetadataBlob {
         .               crate fn new(metadata_ref: MetadataRef) -> MetadataBlob {
         .                   MetadataBlob(Lrc::new(metadata_ref))
-- line 626 ----------------------------------------
-- line 630 ----------------------------------------
         .                   self.blob().starts_with(METADATA_HEADER)
         .               }
         .           
         .               crate fn get_rustc_version(&self) -> String {
         .                   Lazy::<String>::from_position(NonZeroUsize::new(METADATA_HEADER.len() + 4).unwrap())
         .                       .decode(self)
         .               }
         .           
       618 ( 0.00%)      crate fn get_root(&self) -> CrateRoot<'tcx> {
       206 ( 0.00%)          let slice = &self.blob()[..];
         .                   let offset = METADATA_HEADER.len();
     1,030 ( 0.00%)          let pos = (((slice[offset + 0] as u32) << 24)
       412 ( 0.00%)              | ((slice[offset + 1] as u32) << 16)
       824 ( 0.00%)              | ((slice[offset + 2] as u32) << 8)
       618 ( 0.00%)              | ((slice[offset + 3] as u32) << 0)) as usize;
         .                   Lazy::<CrateRoot<'tcx>>::from_position(NonZeroUsize::new(pos).unwrap()).decode(self)
     1,030 ( 0.00%)      }
         .           
         .               crate fn list_crate_metadata(&self, out: &mut dyn io::Write) -> io::Result<()> {
         .                   let root = self.get_root();
         .                   writeln!(out, "Crate info:")?;
         .                   writeln!(out, "name {}{}", root.name, root.extra_filename)?;
         .                   writeln!(out, "hash {} stable_crate_id {:?}", root.hash, root.stable_crate_id)?;
         .                   writeln!(out, "proc_macro {:?}", root.proc_macro_data.is_some())?;
         .                   writeln!(out, "=External Dependencies=")?;
-- line 654 ----------------------------------------
-- line 666 ----------------------------------------
         .                   }
         .                   write!(out, "\n")?;
         .                   Ok(())
         .               }
         .           }
         .           
         .           impl CrateRoot<'_> {
         .               crate fn is_proc_macro_crate(&self) -> bool {
       130 ( 0.00%)          self.proc_macro_data.is_some()
         .               }
         .           
         .               crate fn name(&self) -> Symbol {
        18 ( 0.00%)          self.name
         .               }
         .           
         .               crate fn hash(&self) -> Svh {
        67 ( 0.00%)          self.hash
         .               }
         .           
         .               crate fn stable_crate_id(&self) -> StableCrateId {
       146 ( 0.00%)          self.stable_crate_id
         .               }
         .           
         .               crate fn triple(&self) -> &TargetTriple {
         .                   &self.triple
         .               }
         .           
         .               crate fn decode_crate_deps<'a>(
         .                   &self,
         .                   metadata: &'a MetadataBlob,
         .               ) -> impl ExactSizeIterator<Item = CrateDep> + Captures<'a> {
       126 ( 0.00%)          self.crate_deps.decode(metadata)
         .               }
         .           }
         .           
         .           impl<'a, 'tcx> CrateMetadataRef<'a> {
        21 ( 0.00%)      fn raw_proc_macro(self, id: DefIndex) -> &'a ProcMacro {
         .                   // DefIndex's in root.proc_macro_data have a one-to-one correspondence
         .                   // with items in 'raw_proc_macros'.
         6 ( 0.00%)          let pos = self
         .                       .root
         .                       .proc_macro_data
         .                       .as_ref()
         .                       .unwrap()
         .                       .macros
         .                       .decode(self)
         .                       .position(|i| i == id)
         .                       .unwrap();
        12 ( 0.00%)          &self.raw_proc_macros.unwrap()[pos]
        27 ( 0.00%)      }
         .           
   102,597 ( 0.00%)      fn opt_item_ident(self, item_index: DefIndex, sess: &Session) -> Option<Ident> {
    76,116 ( 0.00%)          let name = self.def_key(item_index).disambiguated_data.data.get_opt_name()?;
    53,235 ( 0.00%)          let span = match self.root.tables.ident_span.get(self, item_index) {
         .                       Some(lazy_span) => lazy_span.decode((self, sess)),
         .                       None => {
         .                           // FIXME: this weird case of a name with no span is specific to `extern crate`
         .                           // items, which are supposed to be treated like `use` items and only be encoded
         .                           // to metadata as `Export`s, return `None` because that's what all the callers
         .                           // expect in this case.
       252 ( 0.00%)                  assert_eq!(self.def_kind(item_index), DefKind::ExternCrate);
         .                           return None;
         .                       }
         .                   };
         .                   Some(Ident::new(name, span))
   131,178 ( 0.00%)      }
         .           
       658 ( 0.00%)      fn item_ident(self, item_index: DefIndex, sess: &Session) -> Ident {
    29,629 ( 0.00%)          self.opt_item_ident(item_index, sess).expect("no encoded ident for item")
     1,316 ( 0.00%)      }
         .           
         .               fn maybe_kind(self, item_id: DefIndex) -> Option<EntryKind> {
    45,988 ( 0.00%)          self.root.tables.kind.get(self, item_id).map(|k| k.decode(self))
         .               }
         .           
   183,952 ( 0.00%)      fn kind(self, item_id: DefIndex) -> EntryKind {
         .                   self.maybe_kind(item_id).unwrap_or_else(|| {
         .                       bug!(
         .                           "CrateMetadata::kind({:?}): id not found, in crate {:?} with number {}",
         .                           item_id,
         .                           self.root.name,
         .                           self.cnum,
         .                       )
         .                   })
   137,964 ( 0.00%)      }
         .           
    17,472 ( 0.00%)      fn def_kind(self, item_id: DefIndex) -> DefKind {
    34,499 ( 0.00%)          self.root.tables.def_kind.get(self, item_id).map(|k| k.decode(self)).unwrap_or_else(|| {
         .                       bug!(
         .                           "CrateMetadata::def_kind({:?}): id not found, in crate {:?} with number {}",
         .                           item_id,
         .                           self.root.name,
         .                           self.cnum,
         .                       )
         .                   })
     9,984 ( 0.00%)      }
         .           
     5,922 ( 0.00%)      fn get_span(self, index: DefIndex, sess: &Session) -> Span {
    22,526 ( 0.00%)          self.root
         .                       .tables
         .                       .span
         .                       .get(self, index)
         .                       .unwrap_or_else(|| panic!("Missing span for {:?}", index))
         .                       .decode((self, sess))
     3,290 ( 0.00%)      }
         .           
         .               fn load_proc_macro(self, id: DefIndex, sess: &Session) -> SyntaxExtension {
        34 ( 0.00%)          let (name, kind, helper_attrs) = match *self.raw_proc_macro(id) {
        10 ( 0.00%)              ProcMacro::CustomDerive { trait_name, attributes, client } => {
         .                           let helper_attrs =
         .                               attributes.iter().cloned().map(Symbol::intern).collect::<Vec<_>>();
         .                           (
         .                               trait_name,
         .                               SyntaxExtensionKind::Derive(Box::new(ProcMacroDerive { client })),
         6 ( 0.00%)                      helper_attrs,
         .                           )
         .                       }
         4 ( 0.00%)              ProcMacro::Attr { name, client } => {
         4 ( 0.00%)                  (name, SyntaxExtensionKind::Attr(Box::new(AttrProcMacro { client })), Vec::new())
         .                       }
         .                       ProcMacro::Bang { name, client } => {
         .                           (name, SyntaxExtensionKind::Bang(Box::new(BangProcMacro { client })), Vec::new())
         .                       }
         .                   };
         .           
        10 ( 0.00%)          let attrs: Vec<_> = self.get_item_attrs(id, sess).collect();
        24 ( 0.00%)          SyntaxExtension::new(
         .                       sess,
        10 ( 0.00%)              kind,
         .                       self.get_span(id, sess),
         8 ( 0.00%)              helper_attrs,
         6 ( 0.00%)              self.root.edition,
         2 ( 0.00%)              Symbol::intern(name),
         .                       &attrs,
         .                   )
         .               }
         .           
     1,573 ( 0.00%)      fn get_trait_def(self, item_id: DefIndex, sess: &Session) -> ty::TraitDef {
       484 ( 0.00%)          match self.kind(item_id) {
       121 ( 0.00%)              EntryKind::Trait(data) => {
       726 ( 0.00%)                  let data = data.decode((self, sess));
     1,936 ( 0.00%)                  ty::TraitDef::new(
         .                               self.local_def_id(item_id),
       242 ( 0.00%)                      data.unsafety,
       242 ( 0.00%)                      data.paren_sugar,
       242 ( 0.00%)                      data.has_auto_impl,
       242 ( 0.00%)                      data.is_marker,
       121 ( 0.00%)                      data.skip_array_during_method_dispatch,
       121 ( 0.00%)                      data.specialization_kind,
       484 ( 0.00%)                      self.def_path_hash(item_id),
       121 ( 0.00%)                      data.must_implement_one_of,
         .                           )
         .                       }
         .                       EntryKind::TraitAlias => ty::TraitDef::new(
         .                           self.local_def_id(item_id),
         .                           hir::Unsafety::Normal,
         .                           false,
         .                           false,
         .                           false,
         .                           false,
         .                           ty::trait_def::TraitSpecializationKind::None,
         .                           self.def_path_hash(item_id),
         .                           None,
         .                       ),
         .                       _ => bug!("def-index does not refer to trait or trait alias"),
         .                   }
     1,089 ( 0.00%)      }
         .           
     8,685 ( 0.00%)      fn get_variant(
         .                   self,
         .                   kind: &EntryKind,
         .                   index: DefIndex,
         .                   parent_did: DefId,
         .                   sess: &Session,
         .               ) -> ty::VariantDef {
     3,860 ( 0.00%)          let data = match kind {
         .                       EntryKind::Variant(data) | EntryKind::Struct(data, _) | EntryKind::Union(data, _) => {
     4,825 ( 0.00%)                  data.decode(self)
         .                       }
         .                       _ => bug!(),
         .                   };
         .           
     2,954 ( 0.00%)          let adt_kind = match kind {
         .                       EntryKind::Variant(_) => ty::AdtKind::Enum,
         .                       EntryKind::Struct(..) => ty::AdtKind::Struct,
         .                       EntryKind::Union(..) => ty::AdtKind::Union,
         .                       _ => bug!(),
         .                   };
         .           
         .                   let variant_did =
         .                       if adt_kind == ty::AdtKind::Enum { Some(self.local_def_id(index)) } else { None };
     1,930 ( 0.00%)          let ctor_did = data.ctor.map(|index| self.local_def_id(index));
         .           
    21,230 ( 0.00%)          ty::VariantDef::new(
         .                       self.item_ident(index, sess).name,
         .                       variant_did,
         .                       ctor_did,
     3,860 ( 0.00%)              data.discr,
     5,790 ( 0.00%)              self.root
         .                           .tables
         .                           .children
         .                           .get(self, index)
         .                           .unwrap_or_else(Lazy::empty)
         .                           .decode(self)
         .                           .map(|index| ty::FieldDef {
     1,189 ( 0.00%)                      did: self.local_def_id(index),
     2,378 ( 0.00%)                      name: self.item_ident(index, sess).name,
     2,378 ( 0.00%)                      vis: self.get_visibility(index),
         .                           })
         .                           .collect(),
         .                       data.ctor_kind,
         .                       adt_kind,
         .                       parent_did,
         .                       false,
       965 ( 0.00%)              data.is_non_exhaustive,
         .                   )
     8,685 ( 0.00%)      }
         .           
     9,090 ( 0.00%)      fn get_adt_def(self, item_id: DefIndex, tcx: TyCtxt<'tcx>) -> &'tcx ty::AdtDef {
     2,424 ( 0.00%)          let kind = self.kind(item_id);
     1,212 ( 0.00%)          let did = self.local_def_id(item_id);
         .           
     2,842 ( 0.00%)          let (adt_kind, repr) = match kind {
         .                       EntryKind::Enum(repr) => (ty::AdtKind::Enum, repr),
         .                       EntryKind::Struct(_, repr) => (ty::AdtKind::Struct, repr),
         .                       EntryKind::Union(_, repr) => (ty::AdtKind::Union, repr),
         .                       _ => bug!("get_adt_def called on a non-ADT {:?}", did),
         .                   };
         .           
         .                   let variants = if let ty::AdtKind::Enum = adt_kind {
       480 ( 0.00%)              self.root
         .                           .tables
         .                           .children
         .                           .get(self, item_id)
         .                           .unwrap_or_else(Lazy::empty)
         .                           .decode(self)
     7,735 ( 0.00%)                  .map(|index| self.get_variant(&self.kind(index), index, did, tcx.sess))
         .                           .collect()
         .                   } else {
     4,080 ( 0.00%)              std::iter::once(self.get_variant(&kind, item_id, did, tcx.sess)).collect()
         .                   };
         .           
     8,964 ( 0.00%)          tcx.alloc_adt_def(did, adt_kind, variants, repr)
     4,242 ( 0.00%)      }
         .           
         .               fn get_explicit_predicates(
         .                   self,
         .                   item_id: DefIndex,
         .                   tcx: TyCtxt<'tcx>,
         .               ) -> ty::GenericPredicates<'tcx> {
    20,455 ( 0.00%)          self.root.tables.explicit_predicates.get(self, item_id).unwrap().decode((self, tcx))
         .               }
         .           
         .               fn get_inferred_outlives(
         .                   self,
         .                   item_id: DefIndex,
         .                   tcx: TyCtxt<'tcx>,
         .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
    20,455 ( 0.00%)          self.root
         .                       .tables
         .                       .inferred_outlives
         .                       .get(self, item_id)
       196 ( 0.00%)              .map(|predicates| tcx.arena.alloc_from_iter(predicates.decode((self, tcx))))
         .                       .unwrap_or_default()
         .               }
         .           
         .               fn get_super_predicates(
         .                   self,
         .                   item_id: DefIndex,
         .                   tcx: TyCtxt<'tcx>,
         .               ) -> ty::GenericPredicates<'tcx> {
       600 ( 0.00%)          self.root.tables.super_predicates.get(self, item_id).unwrap().decode((self, tcx))
         .               }
         .           
         .               fn get_explicit_item_bounds(
         .                   self,
         .                   item_id: DefIndex,
         .                   tcx: TyCtxt<'tcx>,
         .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
       150 ( 0.00%)          self.root
         .                       .tables
         .                       .explicit_item_bounds
         .                       .get(self, item_id)
       116 ( 0.00%)              .map(|bounds| tcx.arena.alloc_from_iter(bounds.decode((self, tcx))))
         .                       .unwrap_or_default()
         .               }
         .           
         .               fn get_generics(self, item_id: DefIndex, sess: &Session) -> ty::Generics {
    21,518 ( 0.00%)          self.root.tables.generics.get(self, item_id).unwrap().decode((self, sess))
         .               }
         .           
         .               fn get_type(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
    37,505 ( 0.00%)          self.root
         .                       .tables
         .                       .ty
         .                       .get(self, id)
         .                       .unwrap_or_else(|| panic!("Not a type: {:?}", id))
         .                       .decode((self, tcx))
         .               }
         .           
         .               fn get_stability(self, id: DefIndex) -> Option<attr::Stability> {
       845 ( 0.00%)          self.root.tables.stability.get(self, id).map(|stab| stab.decode(self))
         .               }
         .           
         .               fn get_const_stability(self, id: DefIndex) -> Option<attr::ConstStability> {
        35 ( 0.00%)          self.root.tables.const_stability.get(self, id).map(|stab| stab.decode(self))
         .               }
         .           
         .               fn get_deprecation(self, id: DefIndex) -> Option<attr::Deprecation> {
     1,175 ( 0.00%)          self.root.tables.deprecation.get(self, id).map(|depr| depr.decode(self))
         .               }
         .           
       432 ( 0.00%)      fn get_visibility(self, id: DefIndex) -> ty::Visibility {
    28,131 ( 0.00%)          self.root.tables.visibility.get(self, id).unwrap().decode(self)
       288 ( 0.00%)      }
         .           
         .               fn get_impl_data(self, id: DefIndex) -> ImplData {
    70,767 ( 0.00%)          match self.kind(id) {
    58,970 ( 0.00%)              EntryKind::Impl(data) => data.decode(self),
         .                       _ => bug!(),
         .                   }
         .               }
         .           
         .               fn get_parent_impl(self, id: DefIndex) -> Option<DefId> {
    31,509 ( 0.00%)          self.get_impl_data(id).parent_impl
         .               }
         .           
         .               fn get_impl_polarity(self, id: DefIndex) -> ty::ImplPolarity {
       756 ( 0.00%)          self.get_impl_data(id).polarity
         .               }
         .           
         .               fn get_impl_defaultness(self, id: DefIndex) -> hir::Defaultness {
       471 ( 0.00%)          self.get_impl_data(id).defaultness
         .               }
         .           
         .               fn get_impl_constness(self, id: DefIndex) -> hir::Constness {
        61 ( 0.00%)          self.get_impl_data(id).constness
         .               }
         .           
         .               fn get_trait_item_def_id(self, id: DefIndex) -> Option<DefId> {
    24,655 ( 0.00%)          self.root.tables.trait_item_def_id.get(self, id).map(|d| d.decode(self))
         .               }
         .           
         .               fn get_coerce_unsized_info(self, id: DefIndex) -> Option<ty::adjustment::CoerceUnsizedInfo> {
         3 ( 0.00%)          self.get_impl_data(id).coerce_unsized_info
         .               }
         .           
         .               fn get_impl_trait(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Option<ty::TraitRef<'tcx>> {
   130,364 ( 0.00%)          self.root.tables.impl_trait_ref.get(self, id).map(|tr| tr.decode((self, tcx)))
         .               }
         .           
         .               fn get_expn_that_defined(self, id: DefIndex, sess: &Session) -> ExpnId {
     3,485 ( 0.00%)          self.root.tables.expn_that_defined.get(self, id).unwrap().decode((self, sess))
         .               }
         .           
         .               fn get_const_param_default(
         .                   self,
         .                   tcx: TyCtxt<'tcx>,
         .                   id: DefIndex,
         .               ) -> rustc_middle::ty::Const<'tcx> {
         .                   self.root.tables.const_defaults.get(self, id).unwrap().decode((self, tcx))
-- line 1026 ----------------------------------------
-- line 1028 ----------------------------------------
         .           
         .               /// Iterates over all the stability attributes in the given crate.
         .               fn get_lib_features(self, tcx: TyCtxt<'tcx>) -> &'tcx [(Symbol, Option<Symbol>)] {
         .                   tcx.arena.alloc_from_iter(self.root.lib_features.decode(self))
         .               }
         .           
         .               /// Iterates over the language items in the given crate.
         .               fn get_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, usize)] {
       201 ( 0.00%)          tcx.arena.alloc_from_iter(
       134 ( 0.00%)              self.root
         .                           .lang_items
         .                           .decode(self)
       564 ( 0.00%)                  .map(|(def_index, index)| (self.local_def_id(def_index), index)),
         .                   )
         .               }
         .           
         .               /// Iterates over the diagnostic items in the given crate.
         .               fn get_diagnostic_items(self) -> DiagnosticItems {
         .                   let mut id_to_name = FxHashMap::default();
       134 ( 0.00%)          let name_to_id = self
         .                       .root
         .                       .diagnostic_items
         .                       .decode(self)
         .                       .map(|(name, def_index)| {
       130 ( 0.00%)                  let id = self.local_def_id(def_index);
       130 ( 0.00%)                  id_to_name.insert(id, name);
         .                           (name, id)
         .                       })
         .                       .collect();
       603 ( 0.00%)          DiagnosticItems { id_to_name, name_to_id }
         .               }
         .           
         .               /// Iterates over all named children of the given module,
         .               /// including both proper items and reexports.
         .               /// Module here is understood in name resolution sense - it can be a `mod` item,
         .               /// or a crate root, or an enum, or a trait.
         .               fn for_each_module_child(
         .                   self,
         .                   id: DefIndex,
         .                   mut callback: impl FnMut(ModChild),
         .                   sess: &Session,
         .               ) {
       360 ( 0.00%)          if let Some(data) = &self.root.proc_macro_data {
         .                       // If we are loading as a proc macro, we want to return
         .                       // the view of this crate as a proc macro crate.
         1 ( 0.00%)              if id == CRATE_DEF_INDEX {
        15 ( 0.00%)                  for def_index in data.macros.decode(self) {
         3 ( 0.00%)                      let raw_macro = self.raw_proc_macro(def_index);
         .                               let res = Res::Def(
         .                                   DefKind::Macro(macro_kind(raw_macro)),
         .                                   self.local_def_id(def_index),
         .                               );
         .                               let ident = self.item_ident(def_index, sess);
         .                               callback(ModChild {
         .                                   ident,
         .                                   res,
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
         .                                   span: ident.span,
         .                               });
         .                           }
         .                       }
         .                       return;
         .                   }
         .           
         .                   // Iterate over all children.
       712 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
     1,424 ( 0.00%)              for child_index in children.decode((self, sess)) {
    17,334 ( 0.00%)                  if let Some(ident) = self.opt_item_ident(child_index, sess) {
     2,967 ( 0.00%)                      let kind = self.def_kind(child_index);
     1,978 ( 0.00%)                      if matches!(kind, DefKind::Macro(..)) {
         .                                   // FIXME: Macros are currently encoded twice, once as items and once as
         .                                   // reexports. We ignore the items here and only use the reexports.
         .                                   continue;
         .                               }
         .                               let def_id = self.local_def_id(child_index);
         .                               let res = Res::Def(kind, def_id);
         .                               let vis = self.get_visibility(child_index);
         .                               let span = self.get_span(child_index, sess);
         .           
         .                               callback(ModChild { ident, res, vis, span });
         .           
         .                               // For non-re-export structs and variants add their constructors to children.
         .                               // Re-export lists automatically contain constructors when necessary.
     3,706 ( 0.00%)                      match kind {
         .                                   DefKind::Struct => {
        80 ( 0.00%)                              if let Some((ctor_def_id, ctor_kind)) =
         .                                           self.get_ctor_def_id_and_kind(child_index)
         .                                       {
         .                                           let ctor_res =
         .                                               Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);
         .                                           let vis = self.get_visibility(ctor_def_id.index);
         .                                           callback(ModChild { ident, res: ctor_res, vis, span });
         .                                       }
         .                                   }
         .                                   DefKind::Variant => {
         .                                       // Braced variants, unlike structs, generate unusable names in
         .                                       // value namespace, they are reserved for possible future use.
         .                                       // It's ok to use the variant's id as a ctor id since an
         .                                       // error will be reported on any use of such resolution anyway.
       201 ( 0.00%)                              let (ctor_def_id, ctor_kind) = self
         .                                           .get_ctor_def_id_and_kind(child_index)
         .                                           .unwrap_or((def_id, CtorKind::Fictive));
         .                                       let ctor_res =
         .                                           Res::Def(DefKind::Ctor(CtorOf::Variant, ctor_kind), ctor_def_id);
         .                                       let mut vis = self.get_visibility(ctor_def_id.index);
        67 ( 0.00%)                              if ctor_def_id == def_id && vis.is_public() {
         .                                           // For non-exhaustive variants lower the constructor visibility to
         .                                           // within the crate. We only need this for fictive constructors,
         .                                           // for other constructors correct visibilities
         .                                           // were already encoded in metadata.
         .                                           let mut attrs = self.get_item_attrs(def_id.index, sess);
         .                                           if attrs.any(|item| item.has_name(sym::non_exhaustive)) {
         .                                               let crate_def_id = self.local_def_id(CRATE_DEF_INDEX);
         .                                               vis = ty::Visibility::Restricted(crate_def_id);
-- line 1141 ----------------------------------------
-- line 1144 ----------------------------------------
         .                                       callback(ModChild { ident, res: ctor_res, vis, span });
         .                                   }
         .                                   _ => {}
         .                               }
         .                           }
         .                       }
         .                   }
         .           
       869 ( 0.00%)          match self.kind(id) {
        94 ( 0.00%)              EntryKind::Mod(exports) => {
     2,832 ( 0.00%)                  for exp in exports.decode((self, sess)) {
         .                               callback(exp);
         .                           }
         .                       }
         .                       EntryKind::Enum(..) | EntryKind::Trait(..) => {}
         .                       _ => bug!("`for_each_module_child` is called on a non-module: {:?}", self.def_kind(id)),
         .                   }
         .               }
         .           
         .               fn is_ctfe_mir_available(self, id: DefIndex) -> bool {
       648 ( 0.00%)          self.root.tables.mir_for_ctfe.get(self, id).is_some()
         .               }
         .           
         .               fn is_item_mir_available(self, id: DefIndex) -> bool {
     6,612 ( 0.00%)          self.root.tables.mir.get(self, id).is_some()
         .               }
         .           
         .               fn module_expansion(self, id: DefIndex, sess: &Session) -> ExpnId {
     4,347 ( 0.00%)          match self.kind(id) {
         .                       EntryKind::Mod(_) | EntryKind::Enum(_) | EntryKind::Trait(_) => {
         .                           self.get_expn_that_defined(id, sess)
         .                       }
         .                       _ => panic!("Expected module, found {:?}", self.local_def_id(id)),
         .                   }
         .               }
         .           
         .               fn get_optimized_mir(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
     8,270 ( 0.00%)          self.root
         .                       .tables
         .                       .mir
         .                       .get(self, id)
         .                       .unwrap_or_else(|| {
         .                           bug!("get_optimized_mir: missing MIR for `{:?}`", self.local_def_id(id))
         .                       })
         .                       .decode((self, tcx))
         .               }
         .           
         .               fn get_mir_for_ctfe(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
       810 ( 0.00%)          self.root
         .                       .tables
         .                       .mir_for_ctfe
         .                       .get(self, id)
         .                       .unwrap_or_else(|| {
         .                           bug!("get_mir_for_ctfe: missing MIR for `{:?}`", self.local_def_id(id))
         .                       })
         .                       .decode((self, tcx))
         .               }
-- line 1200 ----------------------------------------
-- line 1216 ----------------------------------------
         .                       .tables
         .                       .unused_generic_params
         .                       .get(self, id)
         .                       .map(|params| params.decode(self))
         .                       .unwrap_or_default()
         .               }
         .           
         .               fn get_promoted_mir(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> IndexVec<Promoted, Body<'tcx>> {
       505 ( 0.00%)          self.root
         .                       .tables
         .                       .promoted_mir
         .                       .get(self, id)
         .                       .unwrap_or_else(|| {
         .                           bug!("get_promoted_mir: missing MIR for `{:?}`", self.local_def_id(id))
         .                       })
         .                       .decode((self, tcx))
         .               }
-- line 1232 ----------------------------------------
-- line 1242 ----------------------------------------
         .                           qualif,
         .                           _,
         .                       ) => qualif,
         .                       _ => bug!("mir_const_qualif: unexpected kind"),
         .                   }
         .               }
         .           
         .               fn get_fn_has_self_parameter(self, id: DefIndex) -> bool {
     1,255 ( 0.00%)          match self.kind(id) {
     1,004 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).has_self,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               fn get_associated_item_def_ids(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [DefId] {
     4,837 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
     2,073 ( 0.00%)              tcx.arena.alloc_from_iter(
       691 ( 0.00%)                  children.decode((self, tcx.sess)).map(|child_index| self.local_def_id(child_index)),
         .                       )
         .                   } else {
         .                       &[]
         .                   }
         .               }
         .           
    43,332 ( 0.00%)      fn get_associated_item(self, id: DefIndex, sess: &Session) -> ty::AssocItem {
    25,277 ( 0.00%)          let def_key = self.def_key(id);
         .                   let parent = self.local_def_id(def_key.parent.unwrap());
         .                   let ident = self.item_ident(id, sess);
         .           
    25,851 ( 0.00%)          let (kind, container, has_self) = match self.kind(id) {
        40 ( 0.00%)              EntryKind::AssocConst(container, _, _) => (ty::AssocKind::Const, container, false),
     3,334 ( 0.00%)              EntryKind::AssocFn(data) => {
         .                           let data = data.decode(self);
    23,338 ( 0.00%)                  (ty::AssocKind::Fn, data.container, data.has_self)
         .                       }
       534 ( 0.00%)              EntryKind::AssocType(container) => (ty::AssocKind::Type, container, false),
         .                       _ => bug!("cannot get associated-item of `{:?}`", def_key),
         .                   };
         .           
    64,998 ( 0.00%)          ty::AssocItem {
         .                       name: ident.name,
         .                       kind,
         .                       vis: self.get_visibility(id),
         .                       defaultness: container.defaultness(),
         .                       def_id: self.local_def_id(id),
         .                       trait_item_def_id: self.get_trait_item_def_id(id),
         .                       container: container.with_def_id(parent),
         .                       fn_has_self_parameter: has_self,
         .                   }
    32,499 ( 0.00%)      }
         .           
         .               fn get_item_variances(self, id: DefIndex) -> impl Iterator<Item = ty::Variance> + 'a {
       475 ( 0.00%)          self.root.tables.variances.get(self, id).unwrap_or_else(Lazy::empty).decode(self)
         .               }
         .           
         .               fn get_ctor_def_id_and_kind(self, node_id: DefIndex) -> Option<(DefId, CtorKind)> {
     4,134 ( 0.00%)          match self.kind(node_id) {
         .                       EntryKind::Struct(data, _) | EntryKind::Variant(data) => {
     1,764 ( 0.00%)                  let vdata = data.decode(self);
     1,227 ( 0.00%)                  vdata.ctor.map(|index| (self.local_def_id(index), vdata.ctor_kind))
         .                       }
         .                       _ => None,
         .                   }
     2,362 ( 0.00%)      }
         .           
     1,248 ( 0.00%)      fn get_item_attrs(
         .                   self,
         .                   id: DefIndex,
         .                   sess: &'a Session,
         .               ) -> impl Iterator<Item = ast::Attribute> + 'a {
    19,266 ( 0.00%)          self.root
         .                       .tables
         .                       .attributes
         .                       .get(self, id)
         .                       .unwrap_or_else(|| {
         .                           // Structure and variant constructors don't have any attributes encoded for them,
         .                           // but we assume that someone passing a constructor ID actually wants to look at
         .                           // the attributes on the corresponding struct or variant.
         .                           let def_key = self.def_key(id);
-- line 1320 ----------------------------------------
-- line 1322 ----------------------------------------
         .                           let parent_id = def_key.parent.expect("no parent for a constructor");
         .                           self.root
         .                               .tables
         .                               .attributes
         .                               .get(self, parent_id)
         .                               .expect("no encoded attributes for a structure or variant")
         .                       })
         .                       .decode((self, sess))
       936 ( 0.00%)      }
         .           
         .               fn get_struct_field_names(
         .                   self,
         .                   id: DefIndex,
         .                   sess: &'a Session,
         .               ) -> impl Iterator<Item = Spanned<Symbol>> + 'a {
     1,970 ( 0.00%)          self.root
         .                       .tables
         .                       .children
         .                       .get(self, id)
         .                       .unwrap_or_else(Lazy::empty)
         .                       .decode(self)
     6,580 ( 0.00%)              .map(move |index| respan(self.get_span(index, sess), self.item_ident(index, sess).name))
         .               }
         .           
         .               fn get_struct_field_visibilities(self, id: DefIndex) -> impl Iterator<Item = Visibility> + 'a {
       410 ( 0.00%)          self.root
         .                       .tables
         .                       .children
         .                       .get(self, id)
         .                       .unwrap_or_else(Lazy::empty)
         .                       .decode(self)
       144 ( 0.00%)              .map(move |field_index| self.get_visibility(field_index))
         .               }
         .           
         .               fn get_inherent_implementations_for_type(
         .                   self,
         .                   tcx: TyCtxt<'tcx>,
         .                   id: DefIndex,
         .               ) -> &'tcx [DefId] {
       172 ( 0.00%)          tcx.arena.alloc_from_iter(
       215 ( 0.00%)              self.root
         .                           .tables
         .                           .inherent_impls
         .                           .get(self, id)
         .                           .unwrap_or_else(Lazy::empty)
         .                           .decode(self)
     2,664 ( 0.00%)                  .map(|index| self.local_def_id(index)),
         .                   )
         .               }
         .           
         .               fn get_traits(self) -> impl Iterator<Item = DefId> + 'a {
         .                   self.root.traits.decode(self).map(move |index| self.local_def_id(index))
         .               }
         .           
         .               fn get_trait_impls(self) -> impl Iterator<Item = (DefId, DefId, Option<SimplifiedType>)> + 'a {
-- line 1376 ----------------------------------------
-- line 1380 ----------------------------------------
         .                           index: *trait_index,
         .                       };
         .                       impls.decode(self).map(move |(impl_index, simplified_self_ty)| {
         .                           (trait_def_id, self.local_def_id(impl_index), simplified_self_ty)
         .                       })
         .                   })
         .               }
         .           
    75,978 ( 0.00%)      fn get_implementations_of_trait(
         .                   self,
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_def_id: DefId,
         .               ) -> &'tcx [(DefId, Option<SimplifiedType>)] {
     8,442 ( 0.00%)          if self.trait_impls.is_empty() {
         .                       return &[];
         .                   }
         .           
         .                   // Do a reverse lookup beforehand to avoid touching the crate_num
         .                   // hash map in the loop below.
     8,354 ( 0.00%)          let key = match self.reverse_translate_def_id(trait_def_id) {
         .                       Some(def_id) => (def_id.krate.as_u32(), def_id.index),
         .                       None => return &[],
         .                   };
         .           
         .                   if let Some(impls) = self.trait_impls.get(&key) {
     2,908 ( 0.00%)              tcx.arena.alloc_from_iter(
     1,454 ( 0.00%)                  impls
         .                               .decode(self)
    13,026 ( 0.00%)                      .map(|(idx, simplified_self_ty)| (self.local_def_id(idx), simplified_self_ty)),
         .                       )
         .                   } else {
         .                       &[]
         .                   }
    67,536 ( 0.00%)      }
         .           
         .               fn get_trait_of_item(self, id: DefIndex) -> Option<DefId> {
     9,172 ( 0.00%)          let def_key = self.def_key(id);
    11,465 ( 0.00%)          match def_key.disambiguated_data.data {
         .                       DefPathData::TypeNs(..) | DefPathData::ValueNs(..) => (),
         .                       // Not an associated item
         .                       _ => return None,
         .                   }
    19,431 ( 0.00%)          def_key.parent.and_then(|parent_index| match self.kind(parent_index) {
         .                       EntryKind::Trait(_) | EntryKind::TraitAlias => Some(self.local_def_id(parent_index)),
         .                       _ => None,
         .                   })
         .               }
         .           
         .               fn get_native_libraries(self, sess: &'a Session) -> impl Iterator<Item = NativeLib> + 'a {
       134 ( 0.00%)          self.root.native_libraries.decode((self, sess))
         .               }
         .           
         .               fn get_proc_macro_quoted_span(self, index: usize, sess: &Session) -> Span {
         .                   self.root
         .                       .tables
         .                       .proc_macro_quoted_spans
         .                       .get(self, index)
         .                       .unwrap_or_else(|| panic!("Missing proc macro quoted span: {:?}", index))
-- line 1437 ----------------------------------------
-- line 1450 ----------------------------------------
         .                       self.root.dylib_dependency_formats.decode(self).enumerate().flat_map(|(i, link)| {
         .                           let cnum = CrateNum::new(i + 1);
         .                           link.map(|link| (self.cnum_map[cnum], link))
         .                       }),
         .                   )
         .               }
         .           
         .               fn get_missing_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [lang_items::LangItem] {
       335 ( 0.00%)          tcx.arena.alloc_from_iter(self.root.lang_items_missing.decode(self))
         .               }
         .           
         .               fn get_fn_param_names(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [Ident] {
         .                   let param_names = match self.kind(id) {
         .                       EntryKind::Fn(data) | EntryKind::ForeignFn(data) => data.decode(self).param_names,
         .                       EntryKind::AssocFn(data) => data.decode(self).fn_data.param_names,
         .                       _ => Lazy::empty(),
         .                   };
         .                   tcx.arena.alloc_from_iter(param_names.decode((self, tcx)))
         .               }
         .           
         .               fn exported_symbols(
         .                   self,
         .                   tcx: TyCtxt<'tcx>,
         .               ) -> &'tcx [(ExportedSymbol<'tcx>, SymbolExportLevel)] {
       402 ( 0.00%)          tcx.arena.alloc_from_iter(self.root.exported_symbols.decode((self, tcx)))
         .               }
         .           
         .               fn get_rendered_const(self, id: DefIndex) -> String {
         .                   match self.kind(id) {
         .                       EntryKind::AnonConst(_, data)
         .                       | EntryKind::Const(_, data)
         .                       | EntryKind::AssocConst(_, _, data) => data.decode(self).0,
         .                       _ => bug!(),
         .                   }
         .               }
         .           
         .               fn get_macro(self, id: DefIndex, sess: &Session) -> MacroDef {
        84 ( 0.00%)          match self.kind(id) {
        14 ( 0.00%)              EntryKind::MacroDef(macro_def) => macro_def.decode((self, sess)),
         .                       _ => bug!(),
         .                   }
         .               }
         .           
         .               // This replicates some of the logic of the crate-local `is_const_fn_raw` query, because we
         .               // don't serialize constness for tuple variant and tuple struct constructors.
         .               fn is_const_fn_raw(self, id: DefIndex) -> bool {
       396 ( 0.00%)          let constness = match self.kind(id) {
        70 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).fn_data.constness,
        30 ( 0.00%)              EntryKind::Fn(data) => data.decode(self).constness,
         .                       EntryKind::ForeignFn(data) => data.decode(self).constness,
         .                       EntryKind::Variant(..) | EntryKind::Struct(..) => hir::Constness::Const,
         .                       _ => hir::Constness::NotConst,
         .                   };
         .                   constness == hir::Constness::Const
         .               }
         .           
         .               fn asyncness(self, id: DefIndex) -> hir::IsAsync {
-- line 1506 ----------------------------------------
-- line 1508 ----------------------------------------
         .                       EntryKind::Fn(data) => data.decode(self).asyncness,
         .                       EntryKind::AssocFn(data) => data.decode(self).fn_data.asyncness,
         .                       EntryKind::ForeignFn(data) => data.decode(self).asyncness,
         .                       _ => bug!("asyncness: expected function kind"),
         .                   }
         .               }
         .           
         .               fn is_foreign_item(self, id: DefIndex) -> bool {
    24,475 ( 0.00%)          match self.kind(id) {
         .                       EntryKind::ForeignImmStatic | EntryKind::ForeignMutStatic | EntryKind::ForeignFn(_) => {
         .                           true
         .                       }
         .                       _ => false,
         .                   }
         .               }
         .           
         .               fn static_mutability(self, id: DefIndex) -> Option<hir::Mutability> {
     3,850 ( 0.00%)          match self.kind(id) {
         .                       EntryKind::ImmStatic | EntryKind::ForeignImmStatic => Some(hir::Mutability::Not),
         .                       EntryKind::MutStatic | EntryKind::ForeignMutStatic => Some(hir::Mutability::Mut),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               fn generator_kind(self, id: DefIndex) -> Option<hir::GeneratorKind> {
     1,150 ( 0.00%)          match self.kind(id) {
         .                       EntryKind::Generator(data) => Some(data),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               fn fn_sig(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {
    11,270 ( 0.00%)          self.root.tables.fn_sig.get(self, id).unwrap().decode((self, tcx))
         .               }
         .           
         .               #[inline]
 9,217,957 ( 0.05%)      fn def_key(self, index: DefIndex) -> DefKey {
 2,635,014 ( 0.01%)          *self
         .                       .def_key_cache
         .                       .lock()
         .                       .entry(index)
    53,369 ( 0.00%)              .or_insert_with(|| self.root.tables.def_keys.get(self, index).unwrap().decode(self))
10,534,808 ( 0.05%)      }
         .           
         .               // Returns the path leading to the thing with this `id`.
         .               fn def_path(self, id: DefIndex) -> DefPath {
         .                   debug!("def_path(cnum={:?}, id={:?})", self.cnum, id);
       920 ( 0.00%)          DefPath::make(self.cnum, id, |parent| self.def_key(parent))
         .               }
         .           
         .               fn def_path_hash_unlocked(
         .                   self,
         .                   index: DefIndex,
         .                   def_path_hashes: &mut FxHashMap<DefIndex, DefPathHash>,
         .               ) -> DefPathHash {
    87,346 ( 0.00%)          *def_path_hashes.entry(index).or_insert_with(|| {
    30,165 ( 0.00%)              self.root.tables.def_path_hashes.get(self, index).unwrap().decode(self)
         .                   })
         .               }
         .           
         .               #[inline]
   305,711 ( 0.00%)      fn def_path_hash(self, index: DefIndex) -> DefPathHash {
         .                   let mut def_path_hashes = self.def_path_hash_cache.lock();
         .                   self.def_path_hash_unlocked(index, &mut def_path_hashes)
   349,384 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn def_path_hash_to_def_index(self, hash: DefPathHash) -> DefIndex {
         .                   self.def_path_hash_map.def_path_hash_to_def_index(&hash)
         .               }
         .           
         .               fn expn_hash_to_expn_id(self, sess: &Session, index_guess: u32, hash: ExpnHash) -> ExpnId {
         .                   debug_assert_eq!(ExpnId::from_hash(hash), None);
-- line 1580 ----------------------------------------
-- line 1635 ----------------------------------------
         .               /// Proc macro crates don't currently export spans, so this function does not have
         .               /// to work for them.
         .               fn imported_source_files(self, sess: &Session) -> &'a [ImportedSourceFile] {
         .                   // Translate the virtual `/rustc/$hash` prefix back to a real directory
         .                   // that should hold actual sources, where possible.
         .                   //
         .                   // NOTE: if you update this, you might need to also update bootstrap's code for generating
         .                   // the `rust-src` component in `Src::run` in `src/bootstrap/dist.rs`.
   382,070 ( 0.00%)          let virtual_rust_source_base_dir = option_env!("CFG_VIRTUAL_RUST_SOURCE_BASE_DIR")
         .                       .map(Path::new)
         .                       .filter(|_| {
         .                           // Only spend time on further checks if we have what to translate *to*.
         .                           sess.opts.real_rust_source_base_dir.is_some()
         .                       })
         .                       .filter(|virtual_dir| {
         .                           // Don't translate away `/rustc/$hash` if we're still remapping to it,
         .                           // since that means we're still building `std`/`rustc` that need it,
         .                           // and we don't want the real path to leak into codegen/debuginfo.
         .                           !sess.opts.remap_path_prefix.iter().any(|(_from, to)| to == virtual_dir)
         .                       });
   382,070 ( 0.00%)          let try_to_translate_virtual_to_real = |name: &mut rustc_span::FileName| {
         .                       debug!(
         .                           "try_to_translate_virtual_to_real(name={:?}): \
         .                            virtual_rust_source_base_dir={:?}, real_rust_source_base_dir={:?}",
         .                           name, virtual_rust_source_base_dir, sess.opts.real_rust_source_base_dir,
         .                       );
         .           
     5,850 ( 0.00%)              if let Some(virtual_dir) = virtual_rust_source_base_dir {
         .                           if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
         .                               if let rustc_span::FileName::Real(old_name) = name {
         .                                   if let rustc_span::RealFileName::Remapped { local_path: _, virtual_name } =
         .                                       old_name
         .                                   {
         .                                       if let Ok(rest) = virtual_name.strip_prefix(virtual_dir) {
         .                                           let virtual_name = virtual_name.clone();
         .           
-- line 1670 ----------------------------------------
-- line 1709 ----------------------------------------
         .                                           *old_name = new_name;
         .                                       }
         .                                   }
         .                               }
         .                           }
         .                       }
         .                   };
         .           
   351,793 ( 0.00%)          self.cdata.source_map_import_info.get_or_init(|| {
       135 ( 0.00%)              let external_source_map = self.root.source_map.decode(self);
         .           
         .                       external_source_map
         .                           .map(|source_file_to_import| {
         .                               // We can't reuse an existing SourceFile, so allocate a new one
         .                               // containing the information we need.
         .                               let rustc_span::SourceFile {
    24,570 ( 0.00%)                          mut name,
     7,020 ( 0.00%)                          src_hash,
     1,170 ( 0.00%)                          start_pos,
     2,340 ( 0.00%)                          end_pos,
     5,850 ( 0.00%)                          mut lines,
     5,850 ( 0.00%)                          mut multibyte_chars,
     7,020 ( 0.00%)                          mut non_narrow_chars,
     5,850 ( 0.00%)                          mut normalized_pos,
     7,020 ( 0.00%)                          name_hash,
         .                                   ..
         .                               } = source_file_to_import;
         .           
         .                               // If this file is under $sysroot/lib/rustlib/src/ but has not been remapped
         .                               // during rust bootstrapping by `remap-debuginfo = true`, and the user
         .                               // wish to simulate that behaviour by -Z simulate-remapped-rust-src-base,
         .                               // then we change `name` to a similar state as if the rust was bootstrapped
         .                               // with `remap-debuginfo = true`.
         .                               // This is useful for testing so that tests about the effects of
         .                               // `try_to_translate_virtual_to_real` don't have to worry about how the
         .                               // compiler is bootstrapped.
     2,340 ( 0.00%)                      if let Some(virtual_dir) =
         .                                   &sess.opts.debugging_opts.simulate_remapped_rust_src_base
         .                               {
         .                                   if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
         .                                       if let rustc_span::FileName::Real(ref mut old_name) = name {
         .                                           if let rustc_span::RealFileName::LocalPath(local) = old_name {
         .                                               if let Ok(rest) = local.strip_prefix(real_dir) {
         .                                                   *old_name = rustc_span::RealFileName::Remapped {
         .                                                       local_path: None,
-- line 1753 ----------------------------------------
-- line 1767 ----------------------------------------
         .                               let source_length = (end_pos - start_pos).to_usize();
         .           
         .                               // Translate line-start positions and multibyte character
         .                               // position into frame of reference local to file.
         .                               // `SourceMap::new_imported_source_file()` will then translate those
         .                               // coordinates to their new global frame of reference when the
         .                               // offset of the SourceFile is known.
         .                               for pos in &mut lines {
 1,151,616 ( 0.01%)                          *pos = *pos - start_pos;
         .                               }
         .                               for mbc in &mut multibyte_chars {
     1,898 ( 0.00%)                          mbc.pos = mbc.pos - start_pos;
         .                               }
         .                               for swc in &mut non_narrow_chars {
       954 ( 0.00%)                          *swc = *swc - start_pos;
         .                               }
         .                               for np in &mut normalized_pos {
     4,050 ( 0.00%)                          np.pos = np.pos - start_pos;
         .                               }
         .           
    21,060 ( 0.00%)                      let local_version = sess.source_map().new_imported_source_file(
    15,210 ( 0.00%)                          name,
     8,190 ( 0.00%)                          src_hash,
         .                                   name_hash,
         .                                   source_length,
     2,340 ( 0.00%)                          self.cnum,
     5,850 ( 0.00%)                          lines,
     7,020 ( 0.00%)                          multibyte_chars,
     5,850 ( 0.00%)                          non_narrow_chars,
     4,680 ( 0.00%)                          normalized_pos,
         .                                   start_pos,
         .                                   end_pos,
         .                               );
         .                               debug!(
         .                                   "CrateMetaData::imported_source_files alloc \
         .                                    source_file {:?} original (start_pos {:?} end_pos {:?}) \
         .                                    translated (start_pos {:?} end_pos {:?})",
         .                                   local_version.name,
-- line 1804 ----------------------------------------
-- line 1808 ----------------------------------------
         .                                   local_version.end_pos
         .                               );
         .           
         .                               ImportedSourceFile {
         .                                   original_start_pos: start_pos,
         .                                   original_end_pos: end_pos,
         .                                   translated_source_file: local_version,
         .                               }
     3,510 ( 0.00%)                  })
         .                           .collect()
         .                   })
         .               }
         .           }
         .           
         .           impl CrateMetadata {
       804 ( 0.00%)      crate fn new(
         .                   sess: &Session,
         .                   blob: MetadataBlob,
         .                   root: CrateRoot<'static>,
         .                   raw_proc_macros: Option<&'static [ProcMacro]>,
         .                   cnum: CrateNum,
         .                   cnum_map: CrateNumMap,
         .                   dep_kind: CrateDepKind,
         .                   source: CrateSource,
         .                   private_dep: bool,
         .                   host_hash: Option<Svh>,
         .               ) -> CrateMetadata {
       201 ( 0.00%)          let trait_impls = root
         .                       .impls
         .                       .decode((&blob, sess))
         .                       .map(|trait_impls| (trait_impls.trait_id, trait_impls.impls))
         .                       .collect();
         .                   let alloc_decoding_state =
       201 ( 0.00%)              AllocDecodingState::new(root.interpret_alloc_index.decode(&blob).collect());
         .                   let dependencies = Lock::new(cnum_map.iter().cloned().collect());
         .           
         .                   // Pre-decode the DefPathHash->DefIndex table. This is a cheap operation
         .                   // that does not copy any data. It just does some data verification.
        67 ( 0.00%)          let def_path_hash_map = root.def_path_hash_map.decode(&blob);
         .           
     1,541 ( 0.00%)          CrateMetadata {
        67 ( 0.00%)              blob,
       201 ( 0.00%)              root,
       268 ( 0.00%)              trait_impls,
         .                       raw_proc_macros,
         .                       source_map_import_info: OnceCell::new(),
       268 ( 0.00%)              def_path_hash_map,
         .                       expn_hash_map: Default::default(),
       469 ( 0.00%)              alloc_decoding_state,
         .                       cnum,
       268 ( 0.00%)              cnum_map,
       335 ( 0.00%)              dependencies,
         .                       dep_kind: Lock::new(dep_kind),
       804 ( 0.00%)              source,
         .                       private_dep,
         .                       host_hash,
         .                       extern_crate: Lock::new(None),
         .                       hygiene_context: Default::default(),
         .                       def_key_cache: Default::default(),
         .                       def_path_hash_cache: Default::default(),
         .                   }
       603 ( 0.00%)      }
         .           
         .               crate fn dependencies(&self) -> LockGuard<'_, Vec<CrateNum>> {
         .                   self.dependencies.borrow()
         .               }
         .           
         .               crate fn add_dependency(&self, cnum: CrateNum) {
         .                   self.dependencies.borrow_mut().push(cnum);
         .               }
         .           
         .               crate fn update_extern_crate(&self, new_extern_crate: ExternCrate) -> bool {
         .                   let mut extern_crate = self.extern_crate.borrow_mut();
         .                   let update = Some(new_extern_crate.rank()) > extern_crate.as_ref().map(ExternCrate::rank);
         .                   if update {
       355 ( 0.00%)              *extern_crate = Some(new_extern_crate);
         .                   }
         .                   update
         .               }
         .           
         .               crate fn source(&self) -> &CrateSource {
     1,108 ( 0.00%)          &self.source
         .               }
         .           
         .               crate fn dep_kind(&self) -> CrateDepKind {
         .                   *self.dep_kind.lock()
         .               }
         .           
         .               crate fn update_dep_kind(&self, f: impl FnOnce(CrateDepKind) -> CrateDepKind) {
     1,097 ( 0.00%)          self.dep_kind.with_lock(|dep_kind| *dep_kind = f(*dep_kind))
         .               }
         .           
         .               crate fn panic_strategy(&self) -> PanicStrategy {
         .                   self.root.panic_strategy
         .               }
         .           
         .               crate fn needs_panic_runtime(&self) -> bool {
         .                   self.root.needs_panic_runtime
-- line 1905 ----------------------------------------
-- line 1909 ----------------------------------------
         .                   self.root.panic_runtime
         .               }
         .           
         .               crate fn is_profiler_runtime(&self) -> bool {
         .                   self.root.profiler_runtime
         .               }
         .           
         .               crate fn needs_allocator(&self) -> bool {
         5 ( 0.00%)          self.root.needs_allocator
         .               }
         .           
         .               crate fn has_global_allocator(&self) -> bool {
         .                   self.root.has_global_allocator
         .               }
         .           
         .               crate fn has_default_lib_allocator(&self) -> bool {
         .                   self.root.has_default_lib_allocator
         .               }
         .           
         .               crate fn is_proc_macro_crate(&self) -> bool {
         .                   self.root.is_proc_macro_crate()
         .               }
         .           
         .               crate fn name(&self) -> Symbol {
     4,561 ( 0.00%)          self.root.name
         .               }
         .           
         .               crate fn stable_crate_id(&self) -> StableCrateId {
         .                   self.root.stable_crate_id
         .               }
         .           
         .               crate fn hash(&self) -> Svh {
         .                   self.root.hash
         .               }
         .           
         .               fn num_def_ids(&self) -> usize {
         .                   self.root.tables.def_keys.size()
         .               }
         .           
         .               fn local_def_id(&self, index: DefIndex) -> DefId {
    37,237 ( 0.00%)          DefId { krate: self.cnum, index }
         .               }
         .           
         .               // Translate a DefId from the current compilation environment to a DefId
         .               // for an external crate.
         .               fn reverse_translate_def_id(&self, did: DefId) -> Option<DefId> {
         .                   for (local, &global) in self.cnum_map.iter_enumerated() {
    73,439 ( 0.00%)              if global == did.krate {
         .                           return Some(DefId { krate: local, index: did.index });
         .                       }
         .                   }
         .           
         .                   None
         .               }
         .           }
         .           
         .           // Cannot be implemented on 'ProcMacro', as libproc_macro
         .           // does not depend on librustc_ast
         .           fn macro_kind(raw: &ProcMacro) -> MacroKind {
         3 ( 0.00%)      match raw {
         .                   ProcMacro::CustomDerive { .. } => MacroKind::Derive,
         .                   ProcMacro::Attr { .. } => MacroKind::Attr,
         .                   ProcMacro::Bang { .. } => MacroKind::Bang,
         .               }
         .           }

 3,603,604 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/dl-lookup.c
  ./malloc/malloc.c
  ./nptl/pthread_rwlock_common.c
  ./stdlib/msort.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S
  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
1,039,785,185 ( 5.23%)  events annotated

