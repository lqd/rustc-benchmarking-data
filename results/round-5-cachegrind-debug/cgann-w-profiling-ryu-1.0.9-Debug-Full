--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name ryu --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 -C metadata=d8f447c1ade4730a -C extra-filename=-d8f447c1ade4730a --out-dir /usr/home/liquid/tmp/.tmpJOklBm/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmpJOklBm/target/debug/deps -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-ryu-1.0.9-Debug-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
765,512,516 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   file:function
--------------------------------------------------------------------------------
24,870,946 ( 3.25%)  ./malloc/malloc.c:_int_malloc
22,114,733 ( 2.89%)  ./malloc/malloc.c:_int_free
13,840,657 ( 1.81%)  ./malloc/malloc.c:malloc
10,308,916 ( 1.35%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
 9,262,861 ( 1.21%)  ???:llvm::SelectionDAG::Combine(llvm::CombineLevel, llvm::AAResults*, llvm::CodeGenOpt::Level)
 8,448,071 ( 1.10%)  ???:(anonymous namespace)::RegAllocFast::allocateBasicBlock(llvm::MachineBasicBlock&)
 8,024,225 ( 1.05%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
 7,918,201 ( 1.03%)  ???:llvm::FPPassManager::runOnFunction(llvm::Function&)
 6,344,174 ( 0.83%)  ./malloc/malloc.c:free
 5,676,008 ( 0.74%)  ???:(anonymous namespace)::Verifier::visitInstruction(llvm::Instruction&)
 5,420,260 ( 0.71%)  ???:llvm::raw_svector_ostream::write_impl(char const*, unsigned long)
 5,214,663 ( 0.68%)  ???:llvm::MachineInstr::addOperand(llvm::MachineFunction&, llvm::MachineOperand const&)
 4,845,200 ( 0.63%)  ./elf/dl-lookup.c:do_lookup_x
 4,650,882 ( 0.61%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
 4,251,008 ( 0.56%)  ???:llvm::PassRegistry::enumerateWith(llvm::PassRegistrationListener*)
 4,141,271 ( 0.54%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
 4,057,212 ( 0.53%)  ./malloc/malloc.c:malloc_consolidate
 3,568,496 ( 0.47%)  ???:llvm::X86TargetLowering::X86TargetLowering(llvm::X86TargetMachine const&, llvm::X86Subtarget const&)
 3,545,434 ( 0.46%)  ???:llvm::MCExpr::evaluateAsRelocatableImpl(llvm::MCValue&, llvm::MCAssembler const*, llvm::MCAsmLayout const*, llvm::MCFixup const*, llvm::DenseMap<llvm::MCSection const*, unsigned long, llvm::DenseMapInfo<llvm::MCSection const*>, llvm::detail::DenseMapPair<llvm::MCSection const*, unsigned long> > const*, bool) const
 3,334,911 ( 0.44%)  ???:(anonymous namespace)::VarLocBasedLDV::process(llvm::MachineInstr&, (anonymous namespace)::VarLocBasedLDV::OpenRangesSet&, (anonymous namespace)::VarLocBasedLDV::VarLocMap&, llvm::SmallVector<(anonymous namespace)::VarLocBasedLDV::TransferDebugPair, 4u>&)
 3,265,670 ( 0.43%)  ???:(anonymous namespace)::Verifier::visitMDNode(llvm::MDNode const&, (anonymous namespace)::Verifier::AreDebugLocsAllowed)
 3,052,960 ( 0.40%)  ???:llvm::TargetLoweringBase::computeRegisterProperties(llvm::TargetRegisterInfo const*)
 3,018,154 ( 0.39%)  ???:llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const
 2,919,391 ( 0.38%)  ???:llvm::SelectionDAGISel::SelectCodeCommon(llvm::SDNode*, unsigned char const*, unsigned int)
 2,916,670 ( 0.38%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
 2,910,809 ( 0.38%)  ???:SetImpliedBits(llvm::FeatureBitset&, llvm::FeatureBitset const&, llvm::ArrayRef<llvm::SubtargetFeatureKV>)
 2,864,450 ( 0.37%)  ./malloc/malloc.c:unlink_chunk.constprop.0
 2,544,545 ( 0.33%)  ???:(anonymous namespace)::Verifier::visitCallBase(llvm::CallBase&)
 2,506,983 ( 0.33%)  ???:llvm::ScheduleDAGSDNodes::BuildSchedUnits()
 2,192,243 ( 0.29%)  ???:llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)
 2,139,033 ( 0.28%)  ./elf/do-rel.h:_dl_relocate_object
 2,068,754 ( 0.27%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
 2,037,264 ( 0.27%)  ???:(anonymous namespace)::X86MCCodeEmitter::emitPrefixImpl(unsigned int&, llvm::MCInst const&, llvm::MCSubtargetInfo const&, llvm::raw_ostream&) const
 2,027,086 ( 0.26%)  ???:llvm::SmallSet<llvm::Register, 32u, std::less<llvm::Register> >::insert(llvm::Register const&)
 2,021,760 ( 0.26%)  ???:llvm::TargetRegisterInfo::shouldRealignStack(llvm::MachineFunction const&) const
 1,993,675 ( 0.26%)  ???:(anonymous namespace)::TwoAddressInstructionPass::runOnMachineFunction(llvm::MachineFunction&)
 1,990,381 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 1,940,570 ( 0.25%)  ???:llvm::InstrEmitter::EmitMachineNode(llvm::SDNode*, bool, bool, llvm::DenseMap<llvm::SDValue, llvm::Register, llvm::DenseMapInfo<llvm::SDValue>, llvm::detail::DenseMapPair<llvm::SDValue, llvm::Register> >&)
 1,888,428 ( 0.25%)  ???:llvm::TargetLoweringBase::getTypeConversion(llvm::LLVMContext&, llvm::EVT) const
 1,857,103 ( 0.24%)  ???:llvm::PMDataManager::verifyPreservedAnalysis(llvm::Pass*)
 1,767,156 ( 0.23%)  ???:llvm::MCAsmLayout::getFragmentOffset(llvm::MCFragment const*) const
 1,729,350 ( 0.23%)  ???:llvm::MCAsmLayout::getSymbolOffset(llvm::MCSymbol const&) const
 1,671,154 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 1,665,520 ( 0.22%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_sse2_unaligned_erms
 1,619,973 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 1,615,683 ( 0.21%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::CalculateFromScratch(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::BatchUpdateInfo*)
 1,579,006 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs:rustc_mir_dataflow::drop_flag_effects::on_all_children_bits::is_terminal_path
 1,567,166 ( 0.20%)  ???:llvm::MCObjectStreamer::emitBytes(llvm::StringRef)
 1,545,637 ( 0.20%)  ???:llvm::SelectionDAG::MorphNodeTo(llvm::SDNode*, unsigned int, llvm::SDVTList, llvm::ArrayRef<llvm::SDValue>)
 1,538,174 ( 0.20%)  ???:llvm::SmallPtrSetImplBase::insert_imp_big(void const*)
 1,522,462 ( 0.20%)  ./stdlib/msort.c:msort_with_tmp.part.0
 1,517,100 ( 0.20%)  ???:llvm::calculateDbgEntityHistory(llvm::MachineFunction const*, llvm::TargetRegisterInfo const*, llvm::DbgValueHistoryMap&, llvm::DbgLabelInstrMap&)
 1,485,184 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
 1,473,412 ( 0.19%)  ???:llvm::MetadataTracking::track(void*, llvm::Metadata&, llvm::PointerUnion<llvm::MetadataAsValue*, llvm::Metadata*>)
 1,468,917 ( 0.19%)  ???:llvm::SelectionDAG::Legalize()
 1,439,141 ( 0.19%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 1,397,763 ( 0.18%)  ???:(anonymous namespace)::GetCFGOnlyPasses::passEnumerate(llvm::PassInfo const*) [clone .llvm.764396836974782617]
 1,390,808 ( 0.18%)  ./malloc/malloc.c:realloc
 1,390,302 ( 0.18%)  ???:(anonymous namespace)::Verifier::verify(llvm::Function const&) [clone .llvm.4153962086227604281]
 1,358,396 ( 0.18%)  ???:(anonymous namespace)::SelectionDAGLegalize::LegalizeOp(llvm::SDNode*) [clone .llvm.8386621111310650999]
 1,345,383 ( 0.18%)  ???:(anonymous namespace)::X86MCInstLower::Lower(llvm::MachineInstr const*, llvm::MCInst&) const
 1,292,765 ( 0.17%)  ???:(anonymous namespace)::PEI::runOnMachineFunction(llvm::MachineFunction&)
 1,291,851 ( 0.17%)  ???:(anonymous namespace)::X86MCCodeEmitter::encodeInstruction(llvm::MCInst const&, llvm::raw_ostream&, llvm::SmallVectorImpl<llvm::MCFixup>&, llvm::MCSubtargetInfo const&) const
 1,255,901 ( 0.16%)  ???:llvm::MCContext::getOrCreateSymbol(llvm::Twine const&)
 1,249,166 ( 0.16%)  ???:llvm::DAGTypeLegalizer::run()
 1,229,144 ( 0.16%)  ???:(anonymous namespace)::VarLocBasedLDV::ExtendRanges(llvm::MachineFunction&, llvm::TargetPassConfig*) [clone .llvm.4451506318407214204]
 1,226,981 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 1,221,766 ( 0.16%)  ???:llvm::X86_MC::initLLVMToSEHAndCVRegMapping(llvm::MCRegisterInfo*)
 1,205,910 ( 0.16%)  ???:llvm::FoldingSetBase::FindNodeOrInsertPos(llvm::FoldingSetNodeID const&, void*&, llvm::FoldingSetBase::FoldingSetInfo const&)
 1,204,621 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs:<rustc_borrowck::MirBorrowckCtxt>::access_place
 1,199,230 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::source_map::SourceMap>::lookup_source_file_idx
 1,100,867 ( 0.14%)  ???:llvm::DwarfDebug::beginInstruction(llvm::MachineInstr const*)
 1,086,448 ( 0.14%)  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long)
 1,078,218 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
 1,076,682 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs:<rustc_parse::lexer::StringReader>::next_token
 1,074,864 ( 0.14%)  ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:__strlen_avx2
 1,071,518 ( 0.14%)  ???:llvm::MachineFunction::CreateMachineInstr(llvm::MCInstrDesc const&, llvm::DebugLoc const&, bool)
 1,063,871 ( 0.14%)  ???:llvm::FunctionLoweringInfo::set(llvm::Function const&, llvm::MachineFunction&, llvm::SelectionDAG*)
 1,048,400 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
 1,042,995 ( 0.14%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::runSemiNCA(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, unsigned int)
 1,008,704 ( 0.13%)  ???:llvm::PMTopLevelManager::AUFoldingSetNode::Profile(llvm::FoldingSetNodeID&, llvm::AnalysisUsage const&)
 1,006,837 ( 0.13%)  ???:multikeySort(llvm::MutableArrayRef<std::pair<llvm::CachedHashStringRef, unsigned long>*>, int)
 1,006,500 ( 0.13%)  ???:llvm::X86FrameLowering::hasFP(llvm::MachineFunction const&) const
   998,548 ( 0.13%)  ???:(anonymous namespace)::ELFWriter::writeObject(llvm::MCAssembler&, llvm::MCAsmLayout const&)
   998,400 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::attrs
   994,924 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::find_parent_node
   981,267 ( 0.13%)  ./malloc/malloc.c:_int_realloc
   975,919 ( 0.13%)  ???:llvm::SelectionDAG::getConstant(llvm::ConstantInt const&, llvm::SDLoc const&, llvm::EVT, bool, bool)
   973,222 ( 0.13%)  ???:llvm::DataLayout::getAlignment(llvm::Type*, bool) const
   968,383 ( 0.13%)  ???:(anonymous namespace)::ScheduleDAGRRList::Schedule() [clone .llvm.6953762222372402862]
   961,750 ( 0.13%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms
   957,967 ( 0.13%)  ???:(anonymous namespace)::RegAllocFast::markRegUsedInInstr(unsigned short)
   956,587 ( 0.12%)  ???:llvm::InlineFunction(llvm::CallBase&, llvm::InlineFunctionInfo&, llvm::AAResults*, bool, llvm::Function*)
   950,369 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::check
   946,077 ( 0.12%)  ???:(anonymous namespace)::CFIInstrInserter::runOnMachineFunction(llvm::MachineFunction&)
   945,182 ( 0.12%)  ???:llvm::raw_ostream::write(char const*, unsigned long)
   927,690 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
   918,087 ( 0.12%)  ???:llvm::SelectionDAGISel::SelectAllBasicBlocks(llvm::Function const&)
   910,107 ( 0.12%)  ???:llvm::PMDataManager::removeNotPreservedAnalysis(llvm::Pass*)
   902,970 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs:<smallvec::SmallVec<[rustc_mir_dataflow::move_paths::InitIndex; 4]>>::try_reserve
   897,223 ( 0.12%)  ???:(anonymous namespace)::VarLocBasedLDV::collectIDsForRegs(llvm::SmallSet<unsigned int, 32u, std::less<unsigned int> >&, llvm::SmallSet<llvm::Register, 32u, std::less<llvm::Register> > const&, llvm::CoalescingBitVector<unsigned long> const&, (anonymous namespace)::VarLocBasedLDV::VarLocMap const&)
   893,388 ( 0.12%)  ???:(anonymous namespace)::Verifier::verifyFunctionAttrs(llvm::FunctionType*, llvm::AttributeList, llvm::Value const*, bool)
   882,822 ( 0.12%)  ???:llvm::Twine::printOneChild(llvm::raw_ostream&, llvm::Twine::Child, llvm::Twine::NodeKind) const
   881,568 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs:<rustc_infer::infer::type_variable::TypeVariableTable>::probe
   868,736 ( 0.11%)  ???:llvm::MCELFStreamer::emitInstToData(llvm::MCInst const&, llvm::MCSubtargetInfo const&)
   866,886 ( 0.11%)  ???:llvm::SelectionDAG::getRegister(unsigned int, llvm::EVT)
   866,296 ( 0.11%)  ./elf/dl-lookup.c:check_match
   863,432 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs:<rustc_lexer::cursor::Cursor>::advance_token
   854,450 ( 0.11%)  ???:(anonymous namespace)::Verifier::visitFunction(llvm::Function const&)::$_3::operator()(llvm::Instruction const&, llvm::MDNode const*) const
   842,864 ( 0.11%)  ???:llvm::MCDwarfLineAddr::Encode(llvm::MCContext&, llvm::MCDwarfLineTableParams, long, unsigned long, llvm::raw_ostream&)
   832,779 ( 0.11%)  ./malloc/malloc.c:calloc
   826,592 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<std::collections::hash::map::HashMap<rustc_middle::middle::region::Scope, (rustc_middle::middle::region::Scope, u32), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::get::<rustc_middle::middle::region::Scope>
   823,068 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
   821,888 ( 0.11%)  ???:llvm::LegacyLegalizerInfo::computeTables()
   813,192 ( 0.11%)  ???:llvm::MCObjectStreamer::emitInstruction(llvm::MCInst const&, llvm::MCSubtargetInfo const&)
   811,843 ( 0.11%)  ???:(anonymous namespace)::DAGCombiner::combine(llvm::SDNode*)
   801,155 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
   778,609 ( 0.10%)  ???:llvm::LLVMContextImpl::~LLVMContextImpl()
   772,165 ( 0.10%)  ???:llvm::AsmPrinter::emitFunctionBody()
   767,202 ( 0.10%)  ???:(anonymous namespace)::ELFObjectWriter::recordRelocation(llvm::MCAssembler&, llvm::MCAsmLayout const&, llvm::MCFragment const*, llvm::MCFixup const&, llvm::MCValue, unsigned long&) [clone .llvm.14145361893594770252]
   766,982 ( 0.10%)  ???:llvm::MCAssembler::layout(llvm::MCAsmLayout&)
   766,310 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 26 ----------------------------------------
      .           pub struct UnmatchedBrace {
      .               pub expected_delim: token::DelimToken,
      .               pub found_delim: Option<token::DelimToken>,
      .               pub found_span: Span,
      .               pub unclosed_span: Option<Span>,
      .               pub candidate_span: Option<Span>,
      .           }
      .           
    168 ( 0.00%)  crate fn parse_token_trees<'a>(
      .               sess: &'a ParseSess,
      .               src: &'a str,
      .               start_pos: BytePos,
      .               override_span: Option<Span>,
      .           ) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
      .               StringReader { sess, start_pos, pos: start_pos, end_src_index: src.len(), src, override_span }
      .                   .into_token_trees()
    108 ( 0.00%)  }
      .           
      .           struct StringReader<'a> {
      .               sess: &'a ParseSess,
      .               /// Initial position, read-only.
      .               start_pos: BytePos,
      .               /// The absolute offset within the source_map of the current character.
      .               pos: BytePos,
      .               /// Stop reading src at this index.
-- line 50 ----------------------------------------
-- line 51 ----------------------------------------
      .               end_src_index: usize,
      .               /// Source text to tokenize.
      .               src: &'a str,
      .               override_span: Option<Span>,
      .           }
      .           
      .           impl<'a> StringReader<'a> {
      .               fn mk_sp(&self, lo: BytePos, hi: BytePos) -> Span {
 13,885 ( 0.00%)          self.override_span.unwrap_or_else(|| Span::with_root_ctxt(lo, hi))
      .               }
      .           
      .               /// Returns the next token, and info about preceding whitespace, if any.
 78,260 ( 0.01%)      fn next_token(&mut self) -> (Spacing, Token) {
      .                   let mut spacing = Spacing::Joint;
      .           
      .                   // Skip `#!` at the start of the file
 22,360 ( 0.00%)          let start_src_index = self.src_index(self.pos);
 33,540 ( 0.00%)          let text: &str = &self.src[start_src_index..self.end_src_index];
      .                   let is_beginning_of_file = self.pos == self.start_pos;
 11,180 ( 0.00%)          if is_beginning_of_file {
     48 ( 0.00%)              if let Some(shebang_len) = rustc_lexer::strip_shebang(text) {
      .                           self.pos = self.pos + BytePos::from_usize(shebang_len);
      .                           spacing = Spacing::Alone;
      .                       }
      .                   }
      .           
      .                   // Skip trivial (whitespace & comments) tokens
      .                   loop {
 22,954 ( 0.00%)              let start_src_index = self.src_index(self.pos);
 51,201 ( 0.01%)              let text: &str = &self.src[start_src_index..self.end_src_index];
      .           
 17,067 ( 0.00%)              if text.is_empty() {
      .                           let span = self.mk_sp(self.pos, self.pos);
     60 ( 0.00%)                  return (spacing, Token::new(token::Eof, span));
      .                       }
      .           
 51,165 ( 0.01%)              let token = rustc_lexer::first_token(text);
      .           
 34,110 ( 0.00%)              let start = self.pos;
 17,055 ( 0.00%)              self.pos = self.pos + BytePos::from_usize(token.len);
      .           
      .                       debug!("next_token: {:?}({:?})", token.kind, self.str_from(start));
      .           
137,232 ( 0.02%)              match self.cook_lexer_token(token.kind, start) {
 89,344 ( 0.01%)                  Some(kind) => {
      .                               let span = self.mk_sp(start, self.pos);
 67,008 ( 0.01%)                      return (spacing, Token::new(kind, span));
      .                           }
      .                           None => spacing = Spacing::Alone,
      .                       }
      .                   }
100,620 ( 0.01%)      }
      .           
      .               /// Report a fatal lexical error with a given span.
      .               fn fatal_span(&self, sp: Span, m: &str) -> FatalError {
      .                   self.sess.span_diagnostic.span_fatal(sp, m)
      .               }
      .           
      .               /// Report a lexical error with a given span.
      .               fn err_span(&self, sp: Span, m: &str) {
-- line 110 ----------------------------------------
-- line 130 ----------------------------------------
      .               ) -> DiagnosticBuilder<'a> {
      .                   self.sess
      .                       .span_diagnostic
      .                       .struct_span_fatal(self.mk_sp(from_pos, to_pos), &format!("{}: {}", m, escaped_char(c)))
      .               }
      .           
      .               /// Detect usages of Unicode codepoints changing the direction of the text on screen and loudly
      .               /// complain about it.
  1,785 ( 0.00%)      fn lint_unicode_text_flow(&self, start: BytePos) {
      .                   // Opening delimiter of the length 2 is not included into the comment text.
      .                   let content_start = start + BytePos(2);
      .                   let content = self.str_from(content_start);
      .                   if contains_text_flow_control_chars(content) {
      .                       let span = self.mk_sp(start, self.pos);
      .                       self.sess.buffer_lint_with_diagnostic(
      .                           &TEXT_DIRECTION_CODEPOINT_IN_COMMENT,
      .                           span,
      .                           ast::CRATE_NODE_ID,
      .                           "unicode codepoint changing visible direction of text present in comment",
      .                           BuiltinLintDiagnostics::UnicodeTextFlow(span, content.to_string()),
      .                       );
      .                   }
  2,040 ( 0.00%)      }
      .           
      .               /// Turns simple `rustc_lexer::TokenKind` enum into a rich
      .               /// `rustc_ast::TokenKind`. This turns strings into interned
      .               /// symbols and runs additional validation.
      .               fn cook_lexer_token(&self, token: rustc_lexer::TokenKind, start: BytePos) -> Option<TokenKind> {
 85,275 ( 0.01%)          Some(match token {
    448 ( 0.00%)              rustc_lexer::TokenKind::LineComment { doc_style } => {
      .                           // Skip non-doc comments
  1,490 ( 0.00%)                  let doc_style = if let Some(doc_style) = doc_style {
      .                               doc_style
      .                           } else {
      .                               self.lint_unicode_text_flow(start);
      .                               return None;
      .                           };
      .           
      .                           // Opening delimiter of the length 3 is not included into the symbol.
      .                           let content_start = start + BytePos(3);
      .                           let content = self.str_from(content_start);
    990 ( 0.00%)                  self.cook_doc_comment(content_start, content, CommentKind::Line, doc_style)
      .                       }
     10 ( 0.00%)              rustc_lexer::TokenKind::BlockComment { doc_style, terminated } => {
      5 ( 0.00%)                  if !terminated {
      .                               let msg = match doc_style {
      .                                   Some(_) => "unterminated block doc-comment",
      .                                   None => "unterminated block comment",
      .                               };
      .                               let last_bpos = self.pos;
      .                               self.sess.span_diagnostic.span_fatal_with_code(
      .                                   self.mk_sp(start, last_bpos),
      .                                   msg,
      .                                   error_code!(E0758),
      .                               );
      .                           }
      .           
      .                           // Skip non-doc comments
      5 ( 0.00%)                  let doc_style = if let Some(doc_style) = doc_style {
      .                               doc_style
      .                           } else {
      .                               self.lint_unicode_text_flow(start);
      .                               return None;
      .                           };
      .           
      .                           // Opening delimiter of the length 3 and closing delimiter of the length 2
      .                           // are not included into the symbol.
-- line 196 ----------------------------------------
-- line 198 ----------------------------------------
      .                           let content_end = self.pos - BytePos(if terminated { 2 } else { 0 });
      .                           let content = self.str_from_to(content_start, content_end);
      .                           self.cook_doc_comment(content_start, content, CommentKind::Block, doc_style)
      .                       }
      .                       rustc_lexer::TokenKind::Whitespace => return None,
      .                       rustc_lexer::TokenKind::Ident
      .                       | rustc_lexer::TokenKind::RawIdent
      .                       | rustc_lexer::TokenKind::UnknownPrefix => {
 10,772 ( 0.00%)                  let is_raw_ident = token == rustc_lexer::TokenKind::RawIdent;
 13,465 ( 0.00%)                  let is_unknown_prefix = token == rustc_lexer::TokenKind::UnknownPrefix;
      .                           let mut ident_start = start;
  5,386 ( 0.00%)                  if is_raw_ident {
      .                               ident_start = ident_start + BytePos(2);
      .                           }
  8,079 ( 0.00%)                  if is_unknown_prefix {
      .                               self.report_unknown_prefix(start);
      .                           }
 13,465 ( 0.00%)                  let sym = nfc_normalize(self.str_from(ident_start));
      .                           let span = self.mk_sp(start, self.pos);
 10,772 ( 0.00%)                  self.sess.symbol_gallery.insert(sym, span);
  5,386 ( 0.00%)                  if is_raw_ident {
      .                               if !sym.can_be_raw() {
      .                                   self.err_span(span, &format!("`{}` cannot be a raw identifier", sym));
      .                               }
      .                               self.sess.raw_identifier_spans.borrow_mut().push(span);
      .                           }
 18,851 ( 0.00%)                  token::Ident(sym, is_raw_ident)
      .                       }
      .                       rustc_lexer::TokenKind::InvalidIdent
      .                           // Do not recover an identifier with emoji if the codepoint is a confusable
      .                           // with a recoverable substitution token, like `➖`.
      .                           if UNICODE_ARRAY
      .                               .iter()
      .                               .find(|&&(c, _, _)| {
      .                                   let sym = self.str_from(start);
-- line 232 ----------------------------------------
-- line 234 ----------------------------------------
      .                               })
      .                               .is_none() =>
      .                       {
      .                           let sym = nfc_normalize(self.str_from(start));
      .                           let span = self.mk_sp(start, self.pos);
      .                           self.sess.bad_unicode_identifiers.borrow_mut().entry(sym).or_default().push(span);
      .                           token::Ident(sym, false)
      .                       }
 29,296 ( 0.00%)              rustc_lexer::TokenKind::Literal { kind, suffix_start } => {
      .                           let suffix_start = start + BytePos(suffix_start as u32);
      .                           let (kind, symbol) = self.cook_lexer_literal(start, suffix_start, kind);
  5,493 ( 0.00%)                  let suffix = if suffix_start < self.pos {
      .                               let string = self.str_from(suffix_start);
      .                               if string == "_" {
      .                                   self.sess
      .                                       .span_diagnostic
      .                                       .struct_span_warn(
      .                                           self.mk_sp(suffix_start, self.pos),
      .                                           "underscore literal suffix is not allowed",
      .                                       )
-- line 253 ----------------------------------------
-- line 259 ----------------------------------------
      .                                       .note(
      .                                           "see issue #42326 \
      .                                            <https://github.com/rust-lang/rust/issues/42326> \
      .                                            for more information",
      .                                       )
      .                                       .emit();
      .                                   None
      .                               } else {
    120 ( 0.00%)                          Some(Symbol::intern(string))
      .                               }
      .                           } else {
      .                               None
      .                           };
 14,648 ( 0.00%)                  token::Literal(token::Lit { kind, symbol, suffix })
      .                       }
      6 ( 0.00%)              rustc_lexer::TokenKind::Lifetime { starts_with_number } => {
      .                           // Include the leading `'` in the real identifier, for macro
      .                           // expansion purposes. See #12512 for the gory details of why
      .                           // this is necessary.
      .                           let lifetime_name = self.str_from(start);
      3 ( 0.00%)                  if starts_with_number {
      .                               self.err_span_(start, self.pos, "lifetimes cannot start with a number");
      .                           }
      9 ( 0.00%)                  let ident = Symbol::intern(lifetime_name);
     12 ( 0.00%)                  token::Lifetime(ident)
      .                       }
      .                       rustc_lexer::TokenKind::Semi => token::Semi,
      .                       rustc_lexer::TokenKind::Comma => token::Comma,
      .                       rustc_lexer::TokenKind::Dot => token::Dot,
      .                       rustc_lexer::TokenKind::OpenParen => token::OpenDelim(token::Paren),
      .                       rustc_lexer::TokenKind::CloseParen => token::CloseDelim(token::Paren),
      .                       rustc_lexer::TokenKind::OpenBrace => token::OpenDelim(token::Brace),
      .                       rustc_lexer::TokenKind::CloseBrace => token::CloseDelim(token::Brace),
-- line 291 ----------------------------------------
-- line 324 ----------------------------------------
      .                               err.help("source files must contain UTF-8 encoded text, unexpected null bytes might occur when a different encoding is used");
      .                           }
      .                           err.emit();
      .                           token?
      .                       }
      .                   })
      .               }
      .           
  2,376 ( 0.00%)      fn cook_doc_comment(
      .                   &self,
      .                   content_start: BytePos,
      .                   content: &str,
      .                   comment_kind: CommentKind,
      .                   doc_style: DocStyle,
      .               ) -> TokenKind {
    198 ( 0.00%)          if content.contains('\r') {
      .                       for (idx, _) in content.char_indices().filter(|&(_, c)| c == '\r') {
      .                           self.err_span_(
      .                               content_start + BytePos(idx as u32),
      .                               content_start + BytePos(idx as u32 + 1),
      .                               match comment_kind {
      .                                   CommentKind::Line => "bare CR not allowed in doc-comment",
      .                                   CommentKind::Block => "bare CR not allowed in block doc-comment",
      .                               },
-- line 347 ----------------------------------------
-- line 349 ----------------------------------------
      .                       }
      .                   }
      .           
      .                   let attr_style = match doc_style {
      .                       DocStyle::Outer => AttrStyle::Outer,
      .                       DocStyle::Inner => AttrStyle::Inner,
      .                   };
      .           
    594 ( 0.00%)          token::DocComment(comment_kind, attr_style, Symbol::intern(content))
  2,970 ( 0.00%)      }
      .           
      .               fn cook_lexer_literal(
      .                   &self,
      .                   start: BytePos,
      .                   suffix_start: BytePos,
      .                   kind: rustc_lexer::LiteralKind,
      .               ) -> (token::LitKind, Symbol) {
      .                   // prefix means `"` or `br"` or `r###"`, ...
-- line 366 ----------------------------------------
-- line 370 ----------------------------------------
      .                               self.sess.span_diagnostic.span_fatal_with_code(
      .                                   self.mk_sp(start, suffix_start),
      .                                   "unterminated character literal",
      .                                   error_code!(E0762),
      .                               )
      .                           }
      .                           (token::Char, Mode::Char, 1, 1) // ' '
      .                       }
     30 ( 0.00%)              rustc_lexer::LiteralKind::Byte { terminated } => {
     30 ( 0.00%)                  if !terminated {
      .                               self.sess.span_diagnostic.span_fatal_with_code(
      .                                   self.mk_sp(start + BytePos(1), suffix_start),
      .                                   "unterminated byte constant",
      .                                   error_code!(E0763),
      .                               )
      .                           }
      .                           (token::Byte, Mode::Byte, 2, 1) // b' '
      .                       }
     54 ( 0.00%)              rustc_lexer::LiteralKind::Str { terminated } => {
     54 ( 0.00%)                  if !terminated {
      .                               self.sess.span_diagnostic.span_fatal_with_code(
      .                                   self.mk_sp(start, suffix_start),
      .                                   "unterminated double quote string",
      .                                   error_code!(E0765),
      .                               )
      .                           }
      .                           (token::Str, Mode::Str, 1, 1) // " "
      .                       }
      3 ( 0.00%)              rustc_lexer::LiteralKind::ByteStr { terminated } => {
      3 ( 0.00%)                  if !terminated {
      .                               self.sess.span_diagnostic.span_fatal_with_code(
      .                                   self.mk_sp(start + BytePos(1), suffix_start),
      .                                   "unterminated double quote byte string",
      .                                   error_code!(E0766),
      .                               )
      .                           }
      .                           (token::ByteStr, Mode::ByteStr, 2, 1) // b" "
      .                       }
-- line 407 ----------------------------------------
-- line 410 ----------------------------------------
      .                           let n = u32::from(n_hashes);
      .                           (token::StrRaw(n_hashes), Mode::RawStr, 2 + n, 1 + n) // r##" "##
      .                       }
      .                       rustc_lexer::LiteralKind::RawByteStr { n_hashes, err } => {
      .                           self.report_raw_str_error(start, err);
      .                           let n = u32::from(n_hashes);
      .                           (token::ByteStrRaw(n_hashes), Mode::RawByteStr, 3 + n, 1 + n) // br##" "##
      .                       }
  3,488 ( 0.00%)              rustc_lexer::LiteralKind::Int { base, empty_int } => {
  1,744 ( 0.00%)                  return if empty_int {
      .                               self.sess
      .                                   .span_diagnostic
      .                                   .struct_span_err_with_code(
      .                                       self.mk_sp(start, suffix_start),
      .                                       "no valid digits found for number",
      .                                       error_code!(E0768),
      .                                   )
      .                                   .emit();
      .                               (token::Integer, sym::integer(0))
      .                           } else {
      .                               self.validate_int_literal(base, start, suffix_start);
  5,232 ( 0.00%)                      (token::Integer, self.symbol_from_to(start, suffix_start))
      .                           };
      .                       }
      .                       rustc_lexer::LiteralKind::Float { base, empty_exponent } => {
      .                           if empty_exponent {
      .                               self.err_span_(start, self.pos, "expected at least one digit in exponent");
      .                           }
      .           
      .                           match base {
-- line 439 ----------------------------------------
-- line 452 ----------------------------------------
      .                           }
      .           
      .                           let id = self.symbol_from_to(start, suffix_start);
      .                           return (token::Float, id);
      .                       }
      .                   };
      .                   let content_start = start + BytePos(prefix_len);
      .                   let content_end = suffix_start - BytePos(postfix_len);
    261 ( 0.00%)          let id = self.symbol_from_to(content_start, content_end);
      .                   self.validate_literal_escape(mode, content_start, content_end, prefix_len, postfix_len);
      .                   (lit_kind, id)
      .               }
      .           
      .               #[inline]
      .               fn src_index(&self, pos: BytePos) -> usize {
      .                   (pos - self.start_pos).to_usize()
      .               }
      .           
      .               /// Slice of the source text from `start` up to but excluding `self.pos`,
      .               /// meaning the slice does not include the character `self.ch`.
      .               fn str_from(&self, start: BytePos) -> &str {
 20,748 ( 0.00%)          self.str_from_to(start, self.pos)
      .               }
      .           
      .               /// As symbol_from, with an explicit endpoint.
      .               fn symbol_from_to(&self, start: BytePos, end: BytePos) -> Symbol {
      .                   debug!("taking an ident from {:?} to {:?}", start, end);
 13,252 ( 0.00%)          Symbol::intern(self.str_from_to(start, end))
      .               }
      .           
      .               /// Slice of the source text spanning from `start` up to but excluding `end`.
  5,091 ( 0.00%)      fn str_from_to(&self, start: BytePos, end: BytePos) -> &str {
      .                   &self.src[self.src_index(start)..self.src_index(end)]
 20,364 ( 0.00%)      }
      .           
      .               fn report_raw_str_error(&self, start: BytePos, opt_err: Option<RawStrError>) {
      .                   match opt_err {
      .                       Some(RawStrError::InvalidStarter { bad_char }) => {
      .                           self.report_non_started_raw_string(start, bad_char)
      .                       }
      .                       Some(RawStrError::NoTerminator { expected, found, possible_terminator_offset }) => self
      .                           .report_unterminated_raw_string(start, expected, possible_terminator_offset, found),
-- line 493 ----------------------------------------
-- line 609 ----------------------------------------
      .               fn validate_literal_escape(
      .                   &self,
      .                   mode: Mode,
      .                   content_start: BytePos,
      .                   content_end: BytePos,
      .                   prefix_len: u32,
      .                   postfix_len: u32,
      .               ) {
    522 ( 0.00%)          let lit_content = self.str_from_to(content_start, content_end);
  6,994 ( 0.00%)          unescape::unescape_literal(lit_content, mode, &mut |range, result| {
      .                       // Here we only check for errors. The actual unescaping is done later.
  1,270 ( 0.00%)              if let Err(err) = result {
      .                           let span_with_quotes = self
      .                               .mk_sp(content_start - BytePos(prefix_len), content_end + BytePos(postfix_len));
      .                           let (start, end) = (range.start as u32, range.end as u32);
      .                           let lo = content_start + BytePos(start);
      .                           let hi = lo + BytePos(end - start);
      .                           let span = self.mk_sp(lo, hi);
      .                           emit_unescape_error(
      .                               &self.sess.span_diagnostic,
-- line 628 ----------------------------------------
-- line 629 ----------------------------------------
      .                               lit_content,
      .                               span_with_quotes,
      .                               span,
      .                               mode,
      .                               range,
      .                               err,
      .                           );
      .                       }
  5,715 ( 0.00%)          });
      .               }
      .           
      .               fn validate_int_literal(&self, base: Base, content_start: BytePos, content_end: BytePos) {
  6,976 ( 0.00%)          let base = match base {
      .                       Base::Binary => 2,
      .                       Base::Octal => 8,
      .                       _ => return,
      .                   };
      .                   let s = self.str_from_to(content_start + BytePos(2), content_end);
      .                   for (idx, c) in s.char_indices() {
      .                       let idx = idx as u32;
      .                       if c != '_' && c.to_digit(base).is_none() {
-- line 649 ----------------------------------------
-- line 650 ----------------------------------------
      .                           let lo = content_start + BytePos(2 + idx);
      .                           let hi = content_start + BytePos(2 + idx + c.len_utf8() as u32);
      .                           self.err_span_(lo, hi, &format!("invalid digit for a base {} literal", base));
      .                       }
      .                   }
      .               }
      .           }
      .           
 24,237 ( 0.00%)  pub fn nfc_normalize(string: &str) -> Symbol {
      .               use unicode_normalization::{is_nfc_quick, IsNormalized, UnicodeNormalization};
  5,386 ( 0.00%)      match is_nfc_quick(string.chars()) {
 26,930 ( 0.00%)          IsNormalized::Yes => Symbol::intern(string),
      .                   _ => {
      .                       let normalized_str: String = string.chars().nfc().collect();
      .                       Symbol::intern(&normalized_str)
      .                   }
      .               }
      .           }

 54,752 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs
--------------------------------------------------------------------------------
Ir               

-- line 48 ----------------------------------------
      .           //
      .           // FIXME: we have to do something for moving slice patterns.
      .           fn place_contents_drop_state_cannot_differ<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               place: mir::Place<'tcx>,
      .           ) -> bool {
      .               let ty = place.ty(body, tcx).ty;
327,712 ( 0.04%)      match ty.kind() {
      .                   ty::Array(..) => {
      .                       debug!(
      .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} => false",
      .                           place, ty
      .                       );
      .                       false
      .                   }
      .                   ty::Slice(..) | ty::Ref(..) | ty::RawPtr(..) => {
      .                       debug!(
      .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} refd => true",
      .                           place, ty
      .                       );
      .                       true
      .                   }
  4,725 ( 0.00%)          ty::Adt(def, _) if (def.has_dtor(tcx) && !def.is_box()) || def.is_union() => {
      .                       debug!(
      .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} Drop => true",
      .                           place, ty
      .                       );
      .                       true
      .                   }
      .                   _ => false,
      .               }
-- line 79 ----------------------------------------
-- line 83 ----------------------------------------
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               move_data: &MoveData<'tcx>,
      .               lookup_result: LookupResult,
      .               each_child: F,
      .           ) where
      .               F: FnMut(MovePathIndex),
      .           {
  3,924 ( 0.00%)      match lookup_result {
      .                   LookupResult::Parent(..) => {
      .                       // access to untracked value - do not touch children
      .                   }
      .                   LookupResult::Exact(e) => on_all_children_bits(tcx, body, move_data, e, each_child),
      .               }
      .           }
      .           
      .           pub fn on_all_children_bits<'tcx, F>(
-- line 99 ----------------------------------------
-- line 100 ----------------------------------------
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               move_data: &MoveData<'tcx>,
      .               move_path_index: MovePathIndex,
      .               mut each_child: F,
      .           ) where
      .               F: FnMut(MovePathIndex),
      .           {
450,832 ( 0.06%)      fn is_terminal_path<'tcx>(
      .                   tcx: TyCtxt<'tcx>,
      .                   body: &Body<'tcx>,
      .                   move_data: &MoveData<'tcx>,
      .                   path: MovePathIndex,
      .               ) -> bool {
112,708 ( 0.01%)          place_contents_drop_state_cannot_differ(tcx, body, move_data.move_paths[path].place)
450,832 ( 0.06%)      }
      .           
576,006 ( 0.08%)      fn on_all_children_bits<'tcx, F>(
      .                   tcx: TyCtxt<'tcx>,
      .                   body: &Body<'tcx>,
      .                   move_data: &MoveData<'tcx>,
      .                   move_path_index: MovePathIndex,
      .                   each_child: &mut F,
      .               ) where
      .                   F: FnMut(MovePathIndex),
      .               {
 22,028 ( 0.00%)          each_child(move_path_index);
      .           
394,478 ( 0.05%)          if is_terminal_path(tcx, body, move_data, move_path_index) {
      .                       return;
      .                   }
      .           
 51,006 ( 0.01%)          let mut next_child_index = move_data.move_paths[move_path_index].first_child;
111,267 ( 0.01%)          while let Some(child_index) = next_child_index {
 19,596 ( 0.00%)              on_all_children_bits(tcx, body, move_data, child_index, each_child);
  3,266 ( 0.00%)              next_child_index = move_data.move_paths[child_index].next_sibling;
      .                   }
434,766 ( 0.06%)      }
319,220 ( 0.04%)      on_all_children_bits(tcx, body, move_data, move_path_index, &mut each_child);
      .           }
      .           
      .           pub fn on_all_drop_children_bits<'tcx, F>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               ctxt: &MoveDataParamEnv<'tcx>,
      .               path: MovePathIndex,
      .               mut each_child: F,
-- line 146 ----------------------------------------
-- line 156 ----------------------------------------
      .                   if erased_ty.needs_drop(tcx, ctxt.param_env) {
      .                       each_child(child);
      .                   } else {
      .                       debug!("on_all_drop_children_bits - skipping")
      .                   }
      .               })
      .           }
      .           
  4,533 ( 0.00%)  pub fn drop_flag_effects_for_function_entry<'tcx, F>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               ctxt: &MoveDataParamEnv<'tcx>,
      .               mut callback: F,
      .           ) where
      .               F: FnMut(MovePathIndex, DropFlagState),
      .           {
      .               let move_data = &ctxt.move_data;
    406 ( 0.00%)      for arg in body.args_iter() {
    788 ( 0.00%)          let place = mir::Place::from(arg);
  1,182 ( 0.00%)          let lookup_result = move_data.rev_lookup.find(place.as_ref());
      .                   on_lookup_result_bits(tcx, body, move_data, lookup_result, |mpi| {
    394 ( 0.00%)              callback(mpi, DropFlagState::Present)
      .                   });
      .               }
  3,248 ( 0.00%)  }
      .           
617,616 ( 0.08%)  pub fn drop_flag_effects_for_location<'tcx, F>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               ctxt: &MoveDataParamEnv<'tcx>,
      .               loc: Location,
      .               mut callback: F,
      .           ) where
      .               F: FnMut(MovePathIndex, DropFlagState),
      .           {
      .               let move_data = &ctxt.move_data;
      .               debug!("drop_flag_effects_for_location({:?})", loc);
      .           
      .               // first, move out of the RHS
 26,130 ( 0.00%)      for mi in &move_data.loc_map[loc] {
124,755 ( 0.02%)          let path = mi.move_path_index(move_data);
      .                   debug!("moving out of path {:?}", move_data.move_paths[path]);
      .           
 32,340 ( 0.00%)          on_all_children_bits(tcx, body, move_data, path, |mpi| callback(mpi, DropFlagState::Absent))
      .               }
      .           
      .               debug!("drop_flag_effects: assignment for location({:?})", loc);
      .           
 22,028 ( 0.00%)      for_location_inits(tcx, body, move_data, loc, |mpi| callback(mpi, DropFlagState::Present));
479,312 ( 0.06%)  }
      .           
      .           pub fn for_location_inits<'tcx, F>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               move_data: &MoveData<'tcx>,
      .               loc: Location,
      .               mut callback: F,
      .           ) where
      .               F: FnMut(MovePathIndex),
      .           {
 26,130 ( 0.00%)      for ii in &move_data.init_loc_map[loc] {
 81,472 ( 0.01%)          let init = move_data.inits[*ii];
 43,948 ( 0.01%)          match init.kind {
      .                       InitKind::Deep => {
      .                           let path = init.path;
      .           
      .                           on_all_children_bits(tcx, body, move_data, path, &mut callback)
      .                       }
      .                       InitKind::Shallow => {
      .                           let mpi = init.path;
      .                           callback(mpi);
-- line 226 ----------------------------------------
-- line 230 ----------------------------------------
      .               }
      .           }
      .           
      .           /// Calls `handle_inactive_variant` for each descendant move path of `enum_place` that contains a
      .           /// `Downcast` to a variant besides the `active_variant`.
      .           ///
      .           /// NOTE: If there are no move paths corresponding to an inactive variant,
      .           /// `handle_inactive_variant` will not be called for that variant.
    672 ( 0.00%)  pub(crate) fn on_all_inactive_variants<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &mir::Body<'tcx>,
      .               move_data: &MoveData<'tcx>,
      .               enum_place: mir::Place<'tcx>,
      .               active_variant: VariantIdx,
      .               mut handle_inactive_variant: impl FnMut(MovePathIndex),
      .           ) {
    280 ( 0.00%)      let enum_mpi = match move_data.rev_lookup.find(enum_place.as_ref()) {
      .                   LookupResult::Exact(mpi) => mpi,
      .                   LookupResult::Parent(_) => return,
      .               };
      .           
      .               let enum_path = &move_data.move_paths[enum_mpi];
    168 ( 0.00%)      for (variant_mpi, variant_path) in enum_path.children(&move_data.move_paths) {
      .                   // Because of the way we build the `MoveData` tree, each child should have exactly one more
      .                   // projection than `enum_place`. This additional projection must be a downcast since the
      .                   // base is an enum.
      .                   let (downcast, base_proj) = variant_path.place.projection.split_last().unwrap();
      .                   assert_eq!(enum_place.projection.len(), base_proj.len());
      .           
      .                   let variant_idx = match *downcast {
      .                       mir::ProjectionElem::Downcast(_, idx) => idx,
-- line 260 ----------------------------------------
-- line 262 ----------------------------------------
      .                   };
      .           
      .                   if variant_idx != active_variant {
      .                       on_all_children_bits(tcx, body, move_data, variant_mpi, |mpi| {
      .                           handle_inactive_variant(mpi)
      .                       });
      .                   }
      .               }
    448 ( 0.00%)  }

316,217 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 294 ----------------------------------------
        .           #[allow(deprecated)]
        .           impl From<LayoutErr> for CollectionAllocErr {
        .               fn from(_: LayoutErr) -> Self {
        .                   CollectionAllocErr::CapacityOverflow
        .               }
        .           }
        .           
        .           fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
   81,382 ( 0.01%)      match result {
        .                   Ok(x) => x,
        .                   Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
        .                   Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
        .               }
        .           }
        .           
        .           /// FIXME: use `Layout::array` when we require a Rust version where it’s stable
        .           /// https://github.com/rust-lang/rust/issues/55724
-- line 310 ----------------------------------------
-- line 422 ----------------------------------------
        .           #[cfg(feature = "union")]
        .           impl<A: Array> SmallVecData<A> {
        .               #[inline]
        .               unsafe fn inline(&self) -> *const A::Item {
        .                   self.inline.as_ptr() as *const A::Item
        .               }
        .               #[inline]
        .               unsafe fn inline_mut(&mut self) -> *mut A::Item {
    7,964 ( 0.00%)          self.inline.as_mut_ptr() as *mut A::Item
        .               }
        .               #[inline]
        .               fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
        .                   SmallVecData {
        .                       inline: core::mem::ManuallyDrop::new(inline),
        .                   }
        .               }
        .               #[inline]
        .               unsafe fn into_inline(self) -> MaybeUninit<A> {
        .                   core::mem::ManuallyDrop::into_inner(self.inline)
        .               }
        .               #[inline]
        .               unsafe fn heap(&self) -> (*mut A::Item, usize) {
      887 ( 0.00%)          self.heap
        .               }
        .               #[inline]
        .               unsafe fn heap_mut(&mut self) -> &mut (*mut A::Item, usize) {
        .                   &mut self.heap
        .               }
        .               #[inline]
        .               fn from_heap(ptr: *mut A::Item, len: usize) -> SmallVecData<A> {
        .                   SmallVecData { heap: (ptr, len) }
-- line 452 ----------------------------------------
-- line 557 ----------------------------------------
        .               #[inline]
        .               pub fn new() -> SmallVec<A> {
        .                   // Try to detect invalid custom implementations of `Array`. Hopefully,
        .                   // this check should be optimized away entirely for valid ones.
        .                   assert!(
        .                       mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
        .                           && mem::align_of::<A>() >= mem::align_of::<A::Item>()
        .                   );
   83,315 ( 0.01%)          SmallVec {
        .                       capacity: 0,
        .                       data: SmallVecData::from_inline(MaybeUninit::uninit()),
        .                   }
        .               }
        .           
        .               /// Construct an empty vector with enough capacity pre-allocated to store at least `n`
        .               /// elements.
        .               ///
-- line 573 ----------------------------------------
-- line 597 ----------------------------------------
        .               ///
        .               /// let vec = vec![1, 2, 3, 4, 5];
        .               /// let small_vec: SmallVec<[_; 3]> = SmallVec::from_vec(vec);
        .               ///
        .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
        .               /// ```
        .               #[inline]
        .               pub fn from_vec(mut vec: Vec<A::Item>) -> SmallVec<A> {
       32 ( 0.00%)          if vec.capacity() <= Self::inline_capacity() {
        .                       unsafe {
        .                           let mut data = SmallVecData::<A>::from_inline(MaybeUninit::uninit());
        .                           let len = vec.len();
        .                           vec.set_len(0);
        .                           ptr::copy_nonoverlapping(vec.as_ptr(), data.inline_mut(), len);
        .           
        .                           SmallVec {
        .                               capacity: len,
        .                               data,
        .                           }
        .                       }
        .                   } else {
        .                       let (ptr, cap, len) = (vec.as_mut_ptr(), vec.capacity(), vec.len());
        .                       mem::forget(vec);
        .           
       48 ( 0.00%)              SmallVec {
        .                           capacity: cap,
        .                           data: SmallVecData::from_heap(ptr, len),
        .                       }
        .                   }
        .               }
        .           
        .               /// Constructs a new `SmallVec` on the stack from an `A` without
        .               /// copying elements.
-- line 629 ----------------------------------------
-- line 635 ----------------------------------------
        .               /// let small_vec: SmallVec<_> = SmallVec::from_buf(buf);
        .               ///
        .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
        .               /// ```
        .               #[inline]
        .               pub fn from_buf(buf: A) -> SmallVec<A> {
        .                   SmallVec {
        .                       capacity: A::size(),
      994 ( 0.00%)              data: SmallVecData::from_inline(MaybeUninit::new(buf)),
        .                   }
        .               }
        .           
        .               /// Constructs a new `SmallVec` on the stack from an `A` without
        .               /// copying elements. Also sets the length, which must be less or
        .               /// equal to the size of `buf`.
        .               ///
        .               /// ```rust
-- line 651 ----------------------------------------
-- line 653 ----------------------------------------
        .               ///
        .               /// let buf = [1, 2, 3, 4, 5, 0, 0, 0];
        .               /// let small_vec: SmallVec<_> = SmallVec::from_buf_and_len(buf, 5);
        .               ///
        .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
        .               /// ```
        .               #[inline]
        .               pub fn from_buf_and_len(buf: A, len: usize) -> SmallVec<A> {
    2,654 ( 0.00%)          assert!(len <= A::size());
    7,962 ( 0.00%)          unsafe { SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), len) }
        .               }
        .           
        .               /// Constructs a new `SmallVec` on the stack from an `A` without
        .               /// copying elements. Also sets the length. The user is responsible
        .               /// for ensuring that `len <= A::size()`.
        .               ///
        .               /// ```rust
        .               /// use smallvec::SmallVec;
-- line 670 ----------------------------------------
-- line 674 ----------------------------------------
        .               /// let small_vec: SmallVec<_> = unsafe {
        .               ///     SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), 5)
        .               /// };
        .               ///
        .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
        .               /// ```
        .               #[inline]
        .               pub unsafe fn from_buf_and_len_unchecked(buf: MaybeUninit<A>, len: usize) -> SmallVec<A> {
    1,327 ( 0.00%)          SmallVec {
        .                       capacity: len,
        .                       data: SmallVecData::from_inline(buf),
        .                   }
        .               }
        .           
        .               /// Sets the length of a vector.
        .               ///
        .               /// This will explicitly set the size of the vector, without actually
        .               /// modifying its buffers, so it is up to the caller to ensure that the
        .               /// vector is actually the specified size.
        .               pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   let (_, len_ptr, _) = self.triple_mut();
   11,233 ( 0.00%)          *len_ptr = new_len;
        .               }
        .           
        .               /// The maximum number of elements this vector can hold inline
        .               #[inline]
        .               fn inline_capacity() -> usize {
        .                   if mem::size_of::<A::Item>() > 0 {
        .                       A::size()
        .                   } else {
-- line 703 ----------------------------------------
-- line 725 ----------------------------------------
        .               #[inline]
        .               pub fn len(&self) -> usize {
        .                   self.triple().1
        .               }
        .           
        .               /// Returns `true` if the vector is empty
        .               #[inline]
        .               pub fn is_empty(&self) -> bool {
    8,548 ( 0.00%)          self.len() == 0
        .               }
        .           
        .               /// The number of items the vector can hold without reallocating
        .               #[inline]
        .               pub fn capacity(&self) -> usize {
        .                   self.triple().2
        .               }
        .           
        .               /// Returns a tuple with (data ptr, len, capacity)
        .               /// Useful to get all SmallVec properties with a single check of the current storage variant.
        .               #[inline]
        .               fn triple(&self) -> (*const A::Item, usize, usize) {
        .                   unsafe {
  706,134 ( 0.09%)              if self.spilled() {
        .                           let (ptr, len) = self.data.heap();
        .                           (ptr, len, self.capacity)
        .                       } else {
        .                           (self.data.inline(), self.capacity, Self::inline_capacity())
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns a tuple with (data ptr, len ptr, capacity)
        .               #[inline]
        .               fn triple_mut(&mut self) -> (*mut A::Item, &mut usize, usize) {
        .                   unsafe {
  925,214 ( 0.12%)              if self.spilled() {
    9,356 ( 0.00%)                  let &mut (ptr, ref mut len_ptr) = self.data.heap_mut();
        .                           (ptr, len_ptr, self.capacity)
        .                       } else {
        .                           (
        .                               self.data.inline_mut(),
        .                               &mut self.capacity,
        .                               Self::inline_capacity(),
        .                           )
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns `true` if the data has spilled into a separate heap-allocated buffer.
        .               #[inline]
        .               pub fn spilled(&self) -> bool {
1,182,648 ( 0.15%)          self.capacity > Self::inline_capacity()
        .               }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// Note 1: The element range is removed even if the iterator is only
        .               /// partially consumed or not consumed at all.
        .               ///
-- line 784 ----------------------------------------
-- line 821 ----------------------------------------
        .                           iter: range_slice.iter(),
        .                           vec: NonNull::from(self),
        .                       }
        .                   }
        .               }
        .           
        .               /// Append an item to the vector.
        .               #[inline]
    9,755 ( 0.00%)      pub fn push(&mut self, value: A::Item) {
        .                   unsafe {
        .                       let (mut ptr, mut len, cap) = self.triple_mut();
  128,544 ( 0.02%)              if *len == cap {
       56 ( 0.00%)                  self.reserve(1);
      672 ( 0.00%)                  let &mut (heap_ptr, ref mut heap_len) = self.data.heap_mut();
        .                           ptr = heap_ptr;
        .                           len = heap_len;
        .                       }
      502 ( 0.00%)              ptr::write(ptr.add(*len), value);
  237,823 ( 0.03%)              *len += 1;
        .                   }
    7,804 ( 0.00%)      }
        .           
        .               /// Remove an item from the end of the vector and return it, or None if empty.
        .               #[inline]
        .               pub fn pop(&mut self) -> Option<A::Item> {
        .                   unsafe {
        .                       let (ptr, len_ptr, _) = self.triple_mut();
   63,630 ( 0.01%)              if *len_ptr == 0 {
        .                           return None;
        .                       }
   13,354 ( 0.00%)              let last_index = *len_ptr - 1;
   13,473 ( 0.00%)              *len_ptr = last_index;
   12,367 ( 0.00%)              Some(ptr::read(ptr.add(last_index)))
        .                   }
       50 ( 0.00%)      }
        .           
        .               /// Moves all the elements of `other` into `self`, leaving `other` empty.
        .               ///
        .               /// # Example
        .               ///
        .               /// ```
        .               /// # use smallvec::{SmallVec, smallvec};
        .               /// let mut v0: SmallVec<[u8; 16]> = smallvec![1, 2, 3];
-- line 863 ----------------------------------------
-- line 879 ----------------------------------------
        .               /// or if the capacity computation overflows `usize`.
        .               pub fn grow(&mut self, new_cap: usize) {
        .                   infallible(self.try_grow(new_cap))
        .               }
        .           
        .               /// Re-allocate to set the capacity to `max(new_cap, inline_size())`.
        .               ///
        .               /// Panics if `new_cap` is less than the vector's length
    2,028 ( 0.00%)      pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
        .                   unsafe {
        4 ( 0.00%)              let (ptr, &mut len, cap) = self.triple_mut();
        .                       let unspilled = !self.spilled();
    1,278 ( 0.00%)              assert!(new_cap >= len);
    1,278 ( 0.00%)              if new_cap <= self.inline_size() {
        .                           if unspilled {
        .                               return Ok(());
        .                           }
        .                           self.data = SmallVecData::from_inline(MaybeUninit::uninit());
        .                           ptr::copy_nonoverlapping(ptr, self.data.inline_mut(), len);
        .                           self.capacity = len;
        .                           deallocate(ptr, cap);
    1,278 ( 0.00%)              } else if new_cap != cap {
    1,185 ( 0.00%)                  let layout = layout_array::<A::Item>(new_cap)?;
        .                           debug_assert!(layout.size() > 0);
        .                           let new_alloc;
      639 ( 0.00%)                  if unspilled {
        .                               new_alloc = NonNull::new(alloc::alloc::alloc(layout))
        .                                   .ok_or(CollectionAllocErr::AllocErr { layout })?
        .                                   .cast()
        .                                   .as_ptr();
        .                               ptr::copy_nonoverlapping(ptr, new_alloc, len);
        .                           } else {
        .                               // This should never fail since the same succeeded
        .                               // when previously allocating `ptr`.
      203 ( 0.00%)                      let old_layout = layout_array::<A::Item>(cap)?;
        .           
        .                               let new_ptr = alloc::alloc::realloc(ptr as *mut u8, old_layout, layout.size());
        .                               new_alloc = NonNull::new(new_ptr)
        .                                   .ok_or(CollectionAllocErr::AllocErr { layout })?
        .                                   .cast()
        .                                   .as_ptr();
        .                           }
    1,278 ( 0.00%)                  self.data = SmallVecData::from_heap(new_alloc, len);
    1,981 ( 0.00%)                  self.capacity = new_cap;
        .                       }
        .                       Ok(())
        .                   }
    2,032 ( 0.00%)      }
        .           
        .               /// Reserve capacity for `additional` more elements to be inserted.
        .               ///
        .               /// May reserve more space to avoid frequent reallocations.
        .               ///
        .               /// Panics if the capacity computation overflows `usize`.
        .               #[inline]
   31,468 ( 0.00%)      pub fn reserve(&mut self, additional: usize) {
   84,706 ( 0.01%)          infallible(self.try_reserve(additional))
   35,536 ( 0.00%)      }
        .           
        .               /// Reserve capacity for `additional` more elements to be inserted.
        .               ///
        .               /// May reserve more space to avoid frequent reallocations.
  351,630 ( 0.05%)      pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
        .                   // prefer triple_mut() even if triple() would work
        .                   // so that the optimizer removes duplicated calls to it
        .                   // from callers like insert()
      186 ( 0.00%)          let (_, &mut len, cap) = self.triple_mut();
  265,314 ( 0.03%)          if cap - len >= additional {
        .                       return Ok(());
        .                   }
        .                   let new_cap = len
        .                       .checked_add(additional)
        .                       .and_then(usize::checked_next_power_of_two)
        .                       .ok_or(CollectionAllocErr::CapacityOverflow)?;
      164 ( 0.00%)          self.try_grow(new_cap)
  365,142 ( 0.05%)      }
        .           
        .               /// Reserve the minimum capacity for `additional` more elements to be inserted.
        .               ///
        .               /// Panics if the new capacity overflows `usize`.
        .               pub fn reserve_exact(&mut self, additional: usize) {
        .                   infallible(self.try_reserve_exact(additional))
        .               }
        .           
        .               /// Reserve the minimum capacity for `additional` more elements to be inserted.
        .               pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
        .                   let (_, &mut len, cap) = self.triple_mut();
   15,390 ( 0.00%)          if cap - len >= additional {
        .                       return Ok(());
        .                   }
        .                   let new_cap = len
        .                       .checked_add(additional)
        .                       .ok_or(CollectionAllocErr::CapacityOverflow)?;
      188 ( 0.00%)          self.try_grow(new_cap)
      188 ( 0.00%)      }
        .           
        .               /// Shrink the capacity of the vector as much as possible.
        .               ///
        .               /// When possible, this will move data from an external heap buffer to the vector's inline
        .               /// storage.
        .               pub fn shrink_to_fit(&mut self) {
        .                   if !self.spilled() {
        .                       return;
-- line 981 ----------------------------------------
-- line 999 ----------------------------------------
        .               /// If `len` is greater than or equal to the vector's current length, this has no
        .               /// effect.
        .               ///
        .               /// This does not re-allocate.  If you want the vector's capacity to shrink, call
        .               /// `shrink_to_fit` after truncating.
        .               pub fn truncate(&mut self, len: usize) {
        .                   unsafe {
        .                       let (ptr, len_ptr, _) = self.triple_mut();
    2,920 ( 0.00%)              while len < *len_ptr {
        .                           let last_index = *len_ptr - 1;
        .                           *len_ptr = last_index;
        .                           ptr::drop_in_place(ptr.add(last_index));
        .                       }
        .                   }
        .               }
        .           
        .               /// Extracts a slice containing the entire vector.
-- line 1015 ----------------------------------------
-- line 1047 ----------------------------------------
        .           
        .               /// Remove and return the element at position `index`, shifting all elements after it to the
        .               /// left.
        .               ///
        .               /// Panics if `index` is out of bounds.
        .               pub fn remove(&mut self, index: usize) -> A::Item {
        .                   unsafe {
        .                       let (mut ptr, len_ptr, _) = self.triple_mut();
       10 ( 0.00%)              let len = *len_ptr;
       54 ( 0.00%)              assert!(index < len);
    5,072 ( 0.00%)              *len_ptr = len - 1;
        .                       ptr = ptr.add(index);
        .                       let item = ptr::read(ptr);
       36 ( 0.00%)              ptr::copy(ptr.add(1), ptr, len - index - 1);
        .                       item
        .                   }
        .               }
        .           
        .               /// Insert an element at position `index`, shifting all elements after it to the right.
        .               ///
        .               /// Panics if `index` is out of bounds.
      174 ( 0.00%)      pub fn insert(&mut self, index: usize, element: A::Item) {
        .                   self.reserve(1);
        .           
        .                   unsafe {
        .                       let (mut ptr, len_ptr, _) = self.triple_mut();
       16 ( 0.00%)              let len = *len_ptr;
       32 ( 0.00%)              assert!(index <= len);
       64 ( 0.00%)              *len_ptr = len + 1;
        .                       ptr = ptr.add(index);
       32 ( 0.00%)              ptr::copy(ptr, ptr.add(1), len - index);
        .                       ptr::write(ptr, element);
        .                   }
      113 ( 0.00%)      }
        .           
        .               /// Insert multiple elements at position `index`, shifting all following elements toward the
        .               /// back.
        .               pub fn insert_many<I: IntoIterator<Item = A::Item>>(&mut self, index: usize, iterable: I) {
        .                   let mut iter = iterable.into_iter();
        .                   if index == self.len() {
        .                       return self.extend(iter);
        .                   }
-- line 1088 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place and preserves the order of the retained
        .               /// elements.
    8,928 ( 0.00%)      pub fn retain<F: FnMut(&mut A::Item) -> bool>(&mut self, mut f: F) {
        .                   let mut del = 0;
        .                   let len = self.len();
        .                   for i in 0..len {
    1,320 ( 0.00%)              if !f(&mut self[i]) {
      100 ( 0.00%)                  del += 1;
      280 ( 0.00%)              } else if del > 0 {
        .                           self.swap(i - del, i);
        .                       }
        .                   }
    1,984 ( 0.00%)          self.truncate(len - del);
    7,936 ( 0.00%)      }
        .           
        .               /// Removes consecutive duplicate elements.
        .               pub fn dedup(&mut self)
        .               where
        .                   A::Item: PartialEq<A::Item>,
        .               {
        .                   self.dedup_by(|a, b| a == b);
        .               }
-- line 1228 ----------------------------------------
-- line 1418 ----------------------------------------
        .                           capacity: len,
        .                           data: SmallVecData::from_inline(unsafe {
        .                               let mut data: MaybeUninit<A> = MaybeUninit::uninit();
        .                               ptr::copy_nonoverlapping(
        .                                   slice.as_ptr(),
        .                                   data.as_mut_ptr() as *mut A::Item,
        .                                   len,
        .                               );
        9 ( 0.00%)                      data
        .                           }),
        .                       }
        .                   } else {
        .                       let mut b = slice.to_vec();
        .                       let (ptr, cap) = (b.as_mut_ptr(), b.capacity());
        .                       mem::forget(b);
        .                       SmallVec {
        .                           capacity: cap,
-- line 1434 ----------------------------------------
-- line 1436 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Copy elements from a slice into the vector at position `index`, shifting any following
        .               /// elements toward the back.
        .               ///
        .               /// For slices of `Copy` types, this is more efficient than `insert`.
   32,777 ( 0.00%)      pub fn insert_from_slice(&mut self, index: usize, slice: &[A::Item]) {
        .                   self.reserve(slice.len());
        .           
        .                   let len = self.len();
   10,284 ( 0.00%)          assert!(index <= len);
        .           
        .                   unsafe {
        .                       let slice_ptr = slice.as_ptr();
        .                       let ptr = self.as_mut_ptr().add(index);
        .                       ptr::copy(ptr, ptr.add(slice.len()), len - index);
        .                       ptr::copy_nonoverlapping(slice_ptr, ptr, slice.len());
    6,856 ( 0.00%)              self.set_len(len + slice.len());
        .                   }
   27,424 ( 0.00%)      }
        .           
        .               /// Copy elements from a slice and append them to the vector.
        .               ///
        .               /// For slices of `Copy` types, this is more efficient than `extend`.
        .               #[inline]
        .               pub fn extend_from_slice(&mut self, slice: &[A::Item]) {
        .                   let len = self.len();
    7,993 ( 0.00%)          self.insert_from_slice(len, slice);
        .               }
        .           }
        .           
        .           impl<A: Array> SmallVec<A>
        .           where
        .               A::Item: Clone,
        .           {
        .               /// Resizes the vector so that its length is equal to `len`.
-- line 1473 ----------------------------------------
-- line 1489 ----------------------------------------
        .               /// Creates a `SmallVec` with `n` copies of `elem`.
        .               /// ```
        .               /// use smallvec::SmallVec;
        .               ///
        .               /// let v = SmallVec::<[char; 128]>::from_elem('d', 2);
        .               /// assert_eq!(v, SmallVec::from_buf(['d', 'd']));
        .               /// ```
        .               pub fn from_elem(elem: A::Item, n: usize) -> Self {
      222 ( 0.00%)          if n > Self::inline_capacity() {
        .                       vec![elem; n].into()
        .                   } else {
        .                       let mut v = SmallVec::<A>::new();
        .                       unsafe {
        .                           let (ptr, len_ptr, _) = v.triple_mut();
        .                           let mut local_len = SetLenOnDrop::new(len_ptr);
        .           
        .                           for i in 0..n {
        .                               ::core::ptr::write(ptr.add(i), elem.clone());
        .                               local_len.increment_len(1);
        .                           }
        .                       }
      333 ( 0.00%)              v
        .                   }
        .               }
        .           }
        .           
        .           impl<A: Array> ops::Deref for SmallVec<A> {
        .               type Target = [A::Item];
        .               #[inline]
        .               fn deref(&self) -> &[A::Item] {
-- line 1518 ----------------------------------------
-- line 1522 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<A: Array> ops::DerefMut for SmallVec<A> {
        .               #[inline]
        .               fn deref_mut(&mut self) -> &mut [A::Item] {
        .                   unsafe {
    1,198 ( 0.00%)              let (ptr, &mut len, _) = self.triple_mut();
        .                       slice::from_raw_parts_mut(ptr, len)
        .                   }
        .               }
        .           }
        .           
        .           impl<A: Array> AsRef<[A::Item]> for SmallVec<A> {
        .               #[inline]
        .               fn as_ref(&self) -> &[A::Item] {
-- line 1538 ----------------------------------------
-- line 1716 ----------------------------------------
        .                   SmallVec::extend_from_slice(self, other)
        .               }
        .           }
        .           
        .           impl<A: Array> FromIterator<A::Item> for SmallVec<A> {
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
        .                   let mut v = SmallVec::new();
  119,905 ( 0.02%)          v.extend(iterable);
        .                   v
        .               }
        .           }
        .           
        .           impl<A: Array> Extend<A::Item> for SmallVec<A> {
  448,530 ( 0.06%)      fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
   28,291 ( 0.00%)          let mut iter = iterable.into_iter();
        .                   let (lower_size_bound, _) = iter.size_hint();
    4,792 ( 0.00%)          self.reserve(lower_size_bound);
        .           
        .                   unsafe {
        .                       let (ptr, len_ptr, cap) = self.triple_mut();
        .                       let mut len = SetLenOnDrop::new(len_ptr);
  172,811 ( 0.02%)              while len.get() < cap {
   24,877 ( 0.00%)                  if let Some(out) = iter.next() {
        .                               ptr::write(ptr.add(len.get()), out);
        .                               len.increment_len(1);
        .                           } else {
        .                               return;
        .                           }
        .                       }
        .                   }
        .           
   18,365 ( 0.00%)          for elem in iter {
       32 ( 0.00%)              self.push(elem);
        .                   }
  371,318 ( 0.05%)      }
        .           }
        .           
        .           impl<A: Array> fmt::Debug for SmallVec<A>
        .           where
        .               A::Item: fmt::Debug,
        .           {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   f.debug_list().entries(self.iter()).finish()
-- line 1759 ----------------------------------------
-- line 1764 ----------------------------------------
        .               #[inline]
        .               fn default() -> SmallVec<A> {
        .                   SmallVec::new()
        .               }
        .           }
        .           
        .           #[cfg(feature = "may_dangle")]
        .           unsafe impl<#[may_dangle] A: Array> Drop for SmallVec<A> {
   96,713 ( 0.01%)      fn drop(&mut self) {
        .                   unsafe {
  243,525 ( 0.03%)              if self.spilled() {
        .                           let (ptr, len) = self.data.heap();
        .                           Vec::from_raw_parts(ptr, len, self.capacity);
        .                       } else {
        .                           ptr::drop_in_place(&mut self[..]);
        .                       }
        .                   }
  109,577 ( 0.01%)      }
        .           }
        .           
        .           #[cfg(not(feature = "may_dangle"))]
        .           impl<A: Array> Drop for SmallVec<A> {
        .               fn drop(&mut self) {
        .                   unsafe {
        .                       if self.spilled() {
        .                           let (ptr, len) = self.data.heap();
-- line 1789 ----------------------------------------
-- line 1888 ----------------------------------------
        .               A::Item: Clone,
        .           {
        .               fn clone(&self) -> IntoIter<A> {
        .                   SmallVec::from(self.as_slice()).into_iter()
        .               }
        .           }
        .           
        .           impl<A: Array> Drop for IntoIter<A> {
       54 ( 0.00%)      fn drop(&mut self) {
    5,804 ( 0.00%)          for _ in self {}
       48 ( 0.00%)      }
        .           }
        .           
        .           impl<A: Array> Iterator for IntoIter<A> {
        .               type Item = A::Item;
        .           
        .               #[inline]
        .               fn next(&mut self) -> Option<A::Item> {
   49,508 ( 0.01%)          if self.current == self.end {
        .                       None
        .                   } else {
        .                       unsafe {
        .                           let current = self.current;
   23,714 ( 0.00%)                  self.current += 1;
      255 ( 0.00%)                  Some(ptr::read(self.data.as_ptr().add(current)))
        .                       }
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
    3,174 ( 0.00%)          let size = self.end - self.current;
        .                   (size, Some(size))
        .               }
        .           }
        .           
        .           impl<A: Array> DoubleEndedIterator for IntoIter<A> {
        .               #[inline]
        .               fn next_back(&mut self) -> Option<A::Item> {
        .                   if self.current == self.end {
-- line 1927 ----------------------------------------
-- line 1955 ----------------------------------------
        .           impl<A: Array> IntoIterator for SmallVec<A> {
        .               type IntoIter = IntoIter<A>;
        .               type Item = A::Item;
        .               fn into_iter(mut self) -> Self::IntoIter {
        .                   unsafe {
        .                       // Set SmallVec len to zero as `IntoIter` drop handles dropping of the elements
        .                       let len = self.len();
        .                       self.set_len(0);
    6,578 ( 0.00%)              IntoIter {
   34,392 ( 0.00%)                  data: self,
        .                           current: 0,
        .                           end: len,
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, A: Array> IntoIterator for &'a SmallVec<A> {
-- line 1972 ----------------------------------------
-- line 2000 ----------------------------------------
        .               len: &'a mut usize,
        .               local_len: usize,
        .           }
        .           
        .           impl<'a> SetLenOnDrop<'a> {
        .               #[inline]
        .               fn new(len: &'a mut usize) -> Self {
        .                   SetLenOnDrop {
   47,037 ( 0.01%)              local_len: *len,
        .                       len,
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn get(&self) -> usize {
        .                   self.local_len
        .               }
        .           
        .               #[inline]
        .               fn increment_len(&mut self, increment: usize) {
   15,085 ( 0.00%)          self.local_len += increment;
        .               }
        .           }
        .           
        .           impl<'a> Drop for SetLenOnDrop<'a> {
        .               #[inline]
        .               fn drop(&mut self) {
   52,858 ( 0.01%)          *self.len = self.local_len;
        .               }
        .           }
        .           
        .           #[cfg(feature = "const_new")]
        .           impl<T, const N: usize> SmallVec<[T; N]> {
        .               /// Construct an empty vector.
        .               ///
        .               /// This is a `const` version of [`SmallVec::new`] that is enabled by the feature `const_new`, with the limitation that it only works for arrays.
-- line 2035 ----------------------------------------

  712,562 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           
        .           pub type EncodeResult = Result<(), !>;
        .           
        .           pub struct Encoder {
        .               pub data: Vec<u8>,
        .           }
        .           
        .           impl Encoder {
        1 ( 0.00%)      pub fn new(data: Vec<u8>) -> Encoder {
        4 ( 0.00%)          Encoder { data }
        1 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn into_inner(self) -> Vec<u8> {
        4 ( 0.00%)          self.data
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn position(&self) -> usize {
    2,199 ( 0.00%)          self.data.len()
        .               }
        .           }
        .           
        .           macro_rules! write_leb128 {
        .               ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{
        .                   const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);
        .                   let old_len = $enc.data.len();
        .           
-- line 40 ----------------------------------------
-- line 67 ----------------------------------------
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> EncodeResult {
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn emit_usize(&mut self, v: usize) -> EncodeResult {
  194,190 ( 0.03%)          write_leb128!(self, v, usize, write_usize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u128(&mut self, v: u128) -> EncodeResult {
    9,758 ( 0.00%)          write_leb128!(self, v, u128, write_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u64(&mut self, v: u64) -> EncodeResult {
      189 ( 0.00%)          write_leb128!(self, v, u64, write_u64_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u32(&mut self, v: u32) -> EncodeResult {
  183,422 ( 0.02%)          write_leb128!(self, v, u32, write_u32_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u16(&mut self, v: u16) -> EncodeResult {
        .                   self.data.extend_from_slice(&v.to_le_bytes());
        .                   Ok(())
        .               }
        .           
-- line 98 ----------------------------------------
-- line 131 ----------------------------------------
        .               #[inline]
        .               fn emit_i8(&mut self, v: i8) -> EncodeResult {
        .                   let as_u8: u8 = unsafe { std::mem::transmute(v) };
        .                   self.emit_u8(as_u8)
        .               }
        .           
        .               #[inline]
        .               fn emit_bool(&mut self, v: bool) -> EncodeResult {
    1,235 ( 0.00%)          self.emit_u8(if v { 1 } else { 0 })
        .               }
        .           
        .               #[inline]
        .               fn emit_f64(&mut self, v: f64) -> EncodeResult {
        .                   let as_u64: u64 = v.to_bits();
        .                   self.emit_u64(as_u64)
        .               }
        .           
-- line 147 ----------------------------------------
-- line 549 ----------------------------------------
        .               #[inline]
        .               pub fn advance(&mut self, bytes: usize) {
        .                   self.position += bytes;
        .               }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {
        .                   let start = self.position;
        3 ( 0.00%)          self.position += bytes;
        3 ( 0.00%)          &self.data[start..self.position]
        .               }
        .           }
        .           
        .           macro_rules! read_leb128 {
        .               ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};
        .           }
        .           
        .           impl<'a> serialize::Decoder for Decoder<'a> {
        .               #[inline]
        .               fn read_unit(&mut self) -> () {
        .                   ()
        .               }
        .           
        .               #[inline]
        .               fn read_u128(&mut self) -> u128 {
      347 ( 0.00%)          read_leb128!(self, read_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_u64(&mut self) -> u64 {
      653 ( 0.00%)          read_leb128!(self, read_u64_leb128)
        .               }
        .           
        .               #[inline]
   24,216 ( 0.00%)      fn read_u32(&mut self) -> u32 {
   94,552 ( 0.01%)          read_leb128!(self, read_u32_leb128)
   48,432 ( 0.01%)      }
        .           
        .               #[inline]
        .               fn read_u16(&mut self) -> u16 {
  561,386 ( 0.07%)          let bytes = [self.data[self.position], self.data[self.position + 1]];
   80,198 ( 0.01%)          let value = u16::from_le_bytes(bytes);
  160,396 ( 0.02%)          self.position += 2;
        .                   value
        .               }
        .           
        .               #[inline]
        .               fn read_u8(&mut self) -> u8 {
1,119,070 ( 0.15%)          let value = self.data[self.position];
  224,382 ( 0.03%)          self.position += 1;
        .                   value
        .               }
        .           
        .               #[inline]
  118,416 ( 0.02%)      fn read_usize(&mut self) -> usize {
  118,812 ( 0.02%)          read_leb128!(self, read_usize_leb128)
  236,832 ( 0.03%)      }
        .           
        .               #[inline]
        .               fn read_i128(&mut self) -> i128 {
        .                   read_leb128!(self, read_i128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_i64(&mut self) -> i64 {
-- line 613 ----------------------------------------
-- line 637 ----------------------------------------
        .               #[inline]
        .               fn read_isize(&mut self) -> isize {
        .                   read_leb128!(self, read_isize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_bool(&mut self) -> bool {
        .                   let value = self.read_u8();
   19,388 ( 0.00%)          value != 0
        .               }
        .           
        .               #[inline]
        .               fn read_f64(&mut self) -> f64 {
        .                   let bits = self.read_u64();
        .                   f64::from_bits(bits)
        .               }
        .           
-- line 653 ----------------------------------------
-- line 660 ----------------------------------------
        .               #[inline]
        .               fn read_char(&mut self) -> char {
        .                   let bits = self.read_u32();
        .                   std::char::from_u32(bits).unwrap()
        .               }
        .           
        .               #[inline]
        .               fn read_str(&mut self) -> Cow<'_, str> {
   16,546 ( 0.00%)          let len = self.read_usize();
  109,556 ( 0.01%)          let sentinel = self.data[self.position + len];
   27,686 ( 0.00%)          assert!(sentinel == STR_SENTINEL);
        .                   let s = unsafe {
        .                       std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])
        .                   };
   69,215 ( 0.01%)          self.position += len + 1;
    9,162 ( 0.00%)          Cow::Borrowed(s)
        .               }
        .           
        .               #[inline]
        .               fn read_raw_bytes_into(&mut self, s: &mut [u8]) {
      104 ( 0.00%)          let start = self.position;
    1,403 ( 0.00%)          self.position += s.len();
      104 ( 0.00%)          s.copy_from_slice(&self.data[start..self.position]);
        .               }
        .           }
        .           
        .           // Specializations for contiguous byte sequences follow. The default implementations for slices
        .           // encode and decode each element individually. This isn't necessary for `u8` slices when using
        .           // opaque encoders and decoders, because each `u8` is unchanged by encoding and decoding.
        .           // Therefore, we can use more efficient implementations that process the entire sequence at once.
        .           
-- line 690 ----------------------------------------

  419,482 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir               

-- line 5 ----------------------------------------
      .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
      .           unsafe impl GlobalAlloc for System {
      .               #[inline]
      .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
      .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
      .                   // So only rely on MIN_ALIGN if size >= align.
      .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
      .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
616,122 ( 0.08%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
462,090 ( 0.06%)              libc::malloc(layout.size()) as *mut u8
      .                   } else {
      .                       #[cfg(target_os = "macos")]
      .                       {
      .                           if layout.align() > (1 << 31) {
      .                               return ptr::null_mut();
      .                           }
      .                       }
      .                       aligned_malloc(&layout)
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
      .                   // See the comment above in `alloc` for why this check looks the way it does.
 26,876 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
 40,314 ( 0.01%)              libc::calloc(layout.size(), 1) as *mut u8
      .                   } else {
      .                       let ptr = self.alloc(layout);
      .                       if !ptr.is_null() {
      .                           ptr::write_bytes(ptr, 0, layout.size());
      .                       }
      .                       ptr
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
160,739 ( 0.02%)          libc::free(ptr as *mut libc::c_void)
      .               }
      .           
      .               #[inline]
      .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
 47,476 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
 94,952 ( 0.01%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
      .                   } else {
      .                       realloc_fallback(self, ptr, layout, new_size)
      .                   }
      .               }
      .           }
      .           
      .           cfg_if::cfg_if! {
      .               if #[cfg(any(
-- line 56 ----------------------------------------
-- line 84 ----------------------------------------
      .               } else if #[cfg(target_os = "wasi")] {
      .                   #[inline]
      .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
      .                       libc::aligned_alloc(layout.align(), layout.size()) as *mut u8
      .                   }
      .               } else {
      .                   #[inline]
      .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
      1 ( 0.00%)              let mut out = ptr::null_mut();
      .                       // posix_memalign requires that the alignment be a multiple of `sizeof(void*)`.
      .                       // Since these are all powers of 2, we can just use max.
      .                       let align = layout.align().max(crate::mem::size_of::<usize>());
      2 ( 0.00%)              let ret = libc::posix_memalign(&mut out, align, layout.size());
      2 ( 0.00%)              if ret != 0 { ptr::null_mut() } else { out as *mut u8 }
      .                   }
      .               }
      .           }

      1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs
--------------------------------------------------------------------------------
Ir               

-- line 17 ----------------------------------------
      .                   #[inline]
      .                   pub fn $fn_name(
      .                       out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len!($int_ty)],
      .                       mut value: $int_ty,
      .                   ) -> &[u8] {
      .                       let mut i = 0;
      .           
      .                       loop {
193,161 ( 0.03%)                  if value < 0x80 {
      .                               unsafe {
 60,274 ( 0.01%)                          *out.get_unchecked_mut(i).as_mut_ptr() = value as u8;
      .                               }
      .           
 92,259 ( 0.01%)                      i += 1;
      .                               break;
      .                           } else {
      .                               unsafe {
116,072 ( 0.02%)                          *out.get_unchecked_mut(i).as_mut_ptr() = ((value & 0x7f) | 0x80) as u8;
      .                               }
      .           
 66,983 ( 0.01%)                      value >>= 7;
      .                               i += 1;
      .                           }
      .                       }
      .           
      .                       unsafe { ::std::mem::MaybeUninit::slice_assume_init_ref(&out.get_unchecked(..i)) }
      .                   }
      .               };
      .           }
-- line 45 ----------------------------------------
-- line 53 ----------------------------------------
      .           macro_rules! impl_read_unsigned_leb128 {
      .               ($fn_name:ident, $int_ty:ty) => {
      .                   #[inline]
      .                   pub fn $fn_name(slice: &[u8], position: &mut usize) -> $int_ty {
      .                       // The first iteration of this loop is unpeeled. This is a
      .                       // performance win because this code is hot and integer values less
      .                       // than 128 are very common, typically occurring 50-80% or more of
      .                       // the time, even for u64 and u128.
857,456 ( 0.11%)              let byte = slice[*position];
428,728 ( 0.06%)              *position += 1;
428,728 ( 0.06%)              if (byte & 0x80) == 0 {
     64 ( 0.00%)                  return byte as $int_ty;
      .                       }
    630 ( 0.00%)              let mut result = (byte & 0x7F) as $int_ty;
      .                       let mut shift = 7;
      .                       loop {
302,775 ( 0.04%)                  let byte = slice[*position];
198,480 ( 0.03%)                  *position += 1;
201,850 ( 0.03%)                  if (byte & 0x80) == 0 {
147,582 ( 0.02%)                      result |= (byte as $int_ty) << shift;
      .                               return result;
      .                           } else {
      .                               result |= ((byte & 0x7F) as $int_ty) << shift;
      .                           }
      .                           shift += 7;
      .                       }
      .                   }
      .               };
-- line 80 ----------------------------------------

355,014 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
  102,039 ( 0.01%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
       35 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
      620 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
        .               LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    1,784 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
       24 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
       96 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 224 ----------------------------------------
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    3,484 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
       13 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
       12 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
      728 ( 0.00%)      pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
    1,424 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
    1,092 ( 0.00%)      }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
    3,688 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    3,891 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        .               QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
-- line 281 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
       84 ( 0.00%)      fn from(p: PathBuf) -> Self {
       24 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
       72 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
       84 ( 0.00%)      }
        .           }
        .           
       34 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
    1,856 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
    2,784 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
    2,784 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
    2,320 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
      928 ( 0.00%)      pub fn to_string_lossy(&self) -> Cow<'_, str> {
      696 ( 0.00%)          match self.inner {
      232 ( 0.00%)              FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
      928 ( 0.00%)      }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    1,554 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
        .                       | DocTest(_, _)
        .                       | InlineAsm(_) => false,
        .                   }
        .               }
        .           
      684 ( 0.00%)      pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
    1,368 ( 0.00%)      }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
       12 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
       24 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
        1 ( 0.00%)      pub lo: BytePos,
        1 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
        3 ( 0.00%)      pub ctxt: SyntaxContext,
        1 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
   67,222 ( 0.01%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
      258 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
   15,288 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
   11,466 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
   15,288 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
   23,733 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
   15,822 ( 0.00%)      }
        .               #[inline]
    1,008 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
    1,008 ( 0.00%)      }
        .               #[inline]
    2,862 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
    1,908 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
    1,060 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
      636 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
        .               pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
        .               }
-- line 566 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
      222 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
      148 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
      774 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
      516 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 671 ----------------------------------------
        .               pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
        .                   while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
        .               }
        .           
        .               /// Edition of the crate from which this span came.
    2,793 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
    1,862 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
      596 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
      304 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
      396 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
      130 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
       26 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
      104 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
    1,869 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
    1,602 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
    1,335 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
      295 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
      354 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
      236 ( 0.00%)      }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
       76 ( 0.00%)      pub fn allows_unsafe(self) -> bool {
       19 ( 0.00%)          self.ctxt().outer_expn_data().allow_internal_unsafe
       76 ( 0.00%)      }
        .           
        .               pub fn macro_backtrace(mut self) -> impl Iterator<Item = ExpnData> {
        .                   let mut prev_span = DUMMY_SP;
        .                   std::iter::from_fn(move || {
        .                       loop {
        .                           let expn_data = self.ctxt().outer_expn_data();
        .                           if expn_data.is_root() {
        .                               return None;
-- line 752 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
  117,205 ( 0.02%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
   21,281 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
       29 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
       29 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
   74,410 ( 0.01%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
   95,895 ( 0.01%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
       88 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
       56 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
       64 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
      649 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
      118 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
      413 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
      531 ( 0.00%)      }
        .           
        .               pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
        .               }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
      102 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
       52 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        .                   self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
      924 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
      539 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
    3,825 ( 0.00%)          span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
        .               pub fn remove_mark(&mut self) -> ExpnId {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.remove_mark();
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
-- line 897 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
    4,707 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
    3,138 ( 0.00%)          let mut span = self.data();
    2,599 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
    4,707 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
    5,214 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
       62 ( 0.00%)          let mut span = self.data();
       93 ( 0.00%)          let mark = span.ctxt.glob_adjust(expn_id, glob_span);
      248 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
       18 ( 0.00%)      pub fn reverse_glob_adjust(
        .                   &mut self,
        .                   expn_id: ExpnId,
        .                   glob_span: Span,
        .               ) -> Option<Option<ExpnId>> {
      178 ( 0.00%)          let mut span = self.data();
      342 ( 0.00%)          let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
      682 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
       20 ( 0.00%)      }
        .           
        .               #[inline]
   11,800 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
   10,325 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
    1,290 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
        .                   MultiSpan { primary_spans: vec, span_labels: vec![] }
        .               }
        .           
        .               pub fn push_span_label(&mut self, span: Span, label: String) {
        .                   self.span_labels.push((span, label));
        .               }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
       52 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
        .               }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
-- line 1079 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
    1,290 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
    1,290 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
        .               fn from(spans: Vec<Span>) -> MultiSpan {
        .                   MultiSpan::from_spans(spans)
        .               }
        .           }
        .           
        .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
       66 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      268 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      466 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      134 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      466 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      402 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
       36 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1257 ----------------------------------------
        .               AbsentOk,
        .               /// A failed attempt has been made to load the external source.
        .               AbsentErr,
        .               Unneeded,
        .           }
        .           
        .           impl ExternalSource {
        .               pub fn get_source(&self) -> Option<&Lrc<String>> {
      154 ( 0.00%)          match self {
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::Present(ref src), .. } => Some(src),
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
      626 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
       72 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    1,252 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        .                   let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
       36 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
-- line 1321 ----------------------------------------
-- line 1324 ----------------------------------------
        .           
        .               /// Check if the stored hash matches the hash of the string.
        .               pub fn matches(&self, src: &str) -> bool {
        .                   Self::new(self.kind, src) == *self
        .               }
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
       38 ( 0.00%)          let len = self.hash_len();
       38 ( 0.00%)          &self.value[..len]
       38 ( 0.00%)      }
        .           
        .               fn hash_len(&self) -> usize {
      112 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
      696 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
       12 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
       12 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
       12 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
       48 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
       24 ( 0.00%)                          0..=0xFF => 1,
        4 ( 0.00%)                          0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
       26 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
       36 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
      132 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    2,817 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      313 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  636,706 ( 0.08%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
      626 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    3,443 ( 0.00%)              SourceFile {
    2,504 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    1,252 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    1,252 ( 0.00%)                  lines,
    1,252 ( 0.00%)                  multibyte_chars,
    1,252 ( 0.00%)                  non_narrow_chars,
    1,252 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    2,817 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
      132 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
       36 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
       24 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
       24 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
       36 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
      144 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
       24 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
      204 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
      132 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
       48 ( 0.00%)              lines,
       48 ( 0.00%)              multibyte_chars,
       48 ( 0.00%)              non_narrow_chars,
       48 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
      108 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
    7,586 ( 0.00%)      pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
    3,793 ( 0.00%)          self.lines[line_index]
    7,586 ( 0.00%)      }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
      420 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
       60 ( 0.00%)          if matches!(
      120 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        .                       let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        .                       if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
-- line 1582 ----------------------------------------
-- line 1592 ----------------------------------------
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
       60 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
      540 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
      777 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
    6,680 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
   10,684 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
    7,262 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
    4,862 ( 0.00%)          assert!(line_index < self.lines.len());
    6,990 ( 0.00%)          if line_index == (self.lines.len() - 1) {
       92 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
    4,590 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
      466 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
    1,398 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
      680 ( 0.00%)              if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
    1,512 ( 0.00%)                  total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
    1,260 ( 0.00%)                  assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
    2,796 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
    2,330 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
      932 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
    1,631 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
      466 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
      232 ( 0.00%)          match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
      233 ( 0.00%)                  let linebpos = self.lines[a];
      466 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
      233 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
    1,864 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
    1,864 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
      699 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
      466 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
      233 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
    1,165 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
    1,631 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
      120 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
      108 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       12 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       12 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
   19,836 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
    1,856 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
   35,937 ( 0.00%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
1,083,753 ( 0.14%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
  765,253 ( 0.10%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
   79,208 ( 0.01%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
  100,352 ( 0.01%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
   16,132 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
   84,220 ( 0.01%)          let span = self.data_untracked();
   37,620 ( 0.00%)          span.ctxt.hash_stable(ctx, hasher);
   43,008 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
        .           
   28,933 ( 0.00%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
   28,150 ( 0.00%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
   56,300 ( 0.01%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
   28,150 ( 0.00%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
   14,075 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
   14,075 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
  114,688 ( 0.01%)      }
        .           }

1,008,032 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 17 ----------------------------------------
      .           use rustc_span::hygiene::MacroKind;
      .           use rustc_span::source_map::Spanned;
      .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
      .           use rustc_span::Span;
      .           use rustc_target::spec::abi::Abi;
      .           use std::collections::VecDeque;
      .           
      .           fn fn_decl<'hir>(node: Node<'hir>) -> Option<&'hir FnDecl<'hir>> {
    535 ( 0.00%)      match node {
      .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
      .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
      .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(&sig.decl),
      .                   Node::Expr(Expr { kind: ExprKind::Closure(_, fn_decl, ..), .. })
      .                   | Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(fn_decl, ..), .. }) => {
      .                       Some(fn_decl)
      .                   }
      .                   _ => None,
      .               }
      .           }
      .           
      .           pub fn fn_sig<'hir>(node: Node<'hir>) -> Option<&'hir FnSig<'hir>> {
    222 ( 0.00%)      match &node {
      .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
      .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
      .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(sig),
      .                   _ => None,
      .               }
      .           }
      .           
      .           pub fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {
 10,961 ( 0.00%)      match node {
      .                   Node::Item(Item {
      .                       kind: ItemKind::Const(_, body) | ItemKind::Static(.., body) | ItemKind::Fn(.., body),
      .                       ..
      .                   })
      .                   | Node::TraitItem(TraitItem {
      .                       kind:
      .                           TraitItemKind::Const(_, Some(body)) | TraitItemKind::Fn(_, TraitFn::Provided(body)),
      .                       ..
      .                   })
      .                   | Node::ImplItem(ImplItem {
      .                       kind: ImplItemKind::Const(_, body) | ImplItemKind::Fn(_, body),
      .                       ..
      .                   })
  1,718 ( 0.00%)          | Node::Expr(Expr { kind: ExprKind::Closure(.., body, _, _), .. }) => Some(*body),
      .           
    363 ( 0.00%)          Node::AnonConst(constant) => Some(constant.body),
      .           
      .                   _ => None,
      .               }
      .           }
      .           
      .           fn is_body_owner<'hir>(node: Node<'hir>, hir_id: HirId) -> bool {
      .               match associated_body(node) {
      .                   Some(b) => b.hir_id == hir_id,
-- line 71 ----------------------------------------
-- line 83 ----------------------------------------
      .           pub struct ParentHirIterator<'hir> {
      .               current_id: HirId,
      .               map: Map<'hir>,
      .           }
      .           
      .           impl<'hir> Iterator for ParentHirIterator<'hir> {
      .               type Item = (HirId, Node<'hir>);
      .           
    392 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
     56 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
      .                       return None;
      .                   }
      .                   loop {
      .                       // There are nodes that do not have entries, so we need to skip them.
      .                       let parent_id = self.map.get_parent_node(self.current_id);
      .           
    159 ( 0.00%)              if parent_id == self.current_id {
      .                           self.current_id = CRATE_HIR_ID;
      .                           return None;
      .                       }
      .           
    106 ( 0.00%)              self.current_id = parent_id;
    424 ( 0.00%)              if let Some(node) = self.map.find(parent_id) {
    212 ( 0.00%)                  return Some((parent_id, node));
      .                       }
      .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
      .                   }
    504 ( 0.00%)      }
      .           }
      .           
      .           /// An iterator that walks up the ancestor tree of a given `HirId`.
      .           /// Constructed using `tcx.hir().parent_owner_iter(hir_id)`.
      .           pub struct ParentOwnerIterator<'hir> {
      .               current_id: HirId,
      .               map: Map<'hir>,
      .           }
      .           
      .           impl<'hir> Iterator for ParentOwnerIterator<'hir> {
      .               type Item = (LocalDefId, OwnerNode<'hir>);
      .           
  4,455 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
  1,485 ( 0.00%)          if self.current_id.local_id.index() != 0 {
    344 ( 0.00%)              self.current_id.local_id = ItemLocalId::new(0);
  1,376 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
      .                           return Some((self.current_id.owner, node.node));
      .                       }
      .                   }
    151 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
      .                       return None;
      .                   }
      .                   loop {
      .                       // There are nodes that do not have entries, so we need to skip them.
      .                       let parent_id = self.map.def_key(self.current_id.owner).parent;
      .           
      .                       let parent_id = parent_id.map_or(CRATE_HIR_ID.owner, |local_def_index| {
      .                           let def_id = LocalDefId { local_def_index };
      .                           self.map.local_def_id_to_hir_id(def_id).owner
      .                       });
    302 ( 0.00%)              self.current_id = HirId::make_owner(parent_id);
      .           
      .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
    302 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
      .                           return Some((self.current_id.owner, node.node));
      .                       }
      .                   }
  3,960 ( 0.00%)      }
      .           }
      .           
      .           impl<'hir> Map<'hir> {
    224 ( 0.00%)      pub fn krate(&self) -> &'hir Crate<'hir> {
     32 ( 0.00%)          self.tcx.hir_crate(())
    256 ( 0.00%)      }
      .           
      7 ( 0.00%)      pub fn root_module(&self) -> &'hir Mod<'hir> {
      1 ( 0.00%)          match self.tcx.hir_owner(CRATE_DEF_ID).map(|o| o.node) {
      .                       Some(OwnerNode::Crate(item)) => item,
      .                       _ => bug!(),
      .                   }
      8 ( 0.00%)      }
      .           
      .               pub fn items(&self) -> impl Iterator<Item = &'hir Item<'hir>> + 'hir {
      .                   let krate = self.krate();
      .                   krate.owners.iter().filter_map(|owner| match owner.as_ref()?.node() {
      .                       OwnerNode::Item(item) => Some(item),
      .                       _ => None,
      .                   })
      .               }
-- line 169 ----------------------------------------
-- line 184 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn def_path_hash(self, def_id: LocalDefId) -> DefPathHash {
      .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
      .                   self.tcx.untracked_resolutions.definitions.def_path_hash(def_id)
      .               }
      .           
      .               #[inline]
  7,320 ( 0.00%)      pub fn local_def_id(&self, hir_id: HirId) -> LocalDefId {
  3,222 ( 0.00%)          self.opt_local_def_id(hir_id).unwrap_or_else(|| {
      .                       bug!(
      .                           "local_def_id: no entry for `{:?}`, which has a map of `{:?}`",
      .                           hir_id,
      .                           self.find(hir_id)
      .                       )
      .                   })
  5,490 ( 0.00%)      }
      .           
      .               #[inline]
  8,592 ( 0.00%)      pub fn opt_local_def_id(&self, hir_id: HirId) -> Option<LocalDefId> {
  1,795 ( 0.00%)          if hir_id.local_id == ItemLocalId::new(0) {
      .                       Some(hir_id.owner)
      .                   } else {
    334 ( 0.00%)              self.tcx
      .                           .hir_owner_nodes(hir_id.owner)?
      .                           .local_id_to_def_id
      .                           .get(&hir_id.local_id)
      .                           .copied()
      .                   }
  9,666 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn local_def_id_to_hir_id(&self, def_id: LocalDefId) -> HirId {
      .                   // FIXME(#85914) is this access safe for incr. comp.?
    670 ( 0.00%)          self.tcx.untracked_resolutions.definitions.local_def_id_to_hir_id(def_id)
      .               }
      .           
      7 ( 0.00%)      pub fn iter_local_def_id(&self) -> impl Iterator<Item = LocalDefId> + '_ {
      .                   // Create a dependency to the crate to be sure we reexcute this when the amount of
      .                   // definitions change.
      1 ( 0.00%)          self.tcx.ensure().hir_crate(());
      .                   self.tcx.untracked_resolutions.definitions.iter_local_def_id()
      9 ( 0.00%)      }
      .           
  1,246 ( 0.00%)      pub fn opt_def_kind(&self, local_def_id: LocalDefId) -> Option<DefKind> {
      .                   let hir_id = self.local_def_id_to_hir_id(local_def_id);
  2,314 ( 0.00%)          let def_kind = match self.find(hir_id)? {
    460 ( 0.00%)              Node::Item(item) => match item.kind {
      .                           ItemKind::Static(..) => DefKind::Static,
      .                           ItemKind::Const(..) => DefKind::Const,
      .                           ItemKind::Fn(..) => DefKind::Fn,
      .                           ItemKind::Macro(..) => DefKind::Macro(MacroKind::Bang),
      .                           ItemKind::Mod(..) => DefKind::Mod,
      .                           ItemKind::OpaqueTy(..) => DefKind::OpaqueTy,
      .                           ItemKind::TyAlias(..) => DefKind::TyAlias,
      .                           ItemKind::Enum(..) => DefKind::Enum,
-- line 239 ----------------------------------------
-- line 247 ----------------------------------------
      .                           ItemKind::GlobalAsm(..) => DefKind::GlobalAsm,
      .                           ItemKind::Impl { .. } => DefKind::Impl,
      .                       },
      .                       Node::ForeignItem(item) => match item.kind {
      .                           ForeignItemKind::Fn(..) => DefKind::Fn,
      .                           ForeignItemKind::Static(..) => DefKind::Static,
      .                           ForeignItemKind::Type => DefKind::ForeignTy,
      .                       },
      6 ( 0.00%)              Node::TraitItem(item) => match item.kind {
      .                           TraitItemKind::Const(..) => DefKind::AssocConst,
      .                           TraitItemKind::Fn(..) => DefKind::AssocFn,
      .                           TraitItemKind::Type(..) => DefKind::AssocTy,
      .                       },
     11 ( 0.00%)              Node::ImplItem(item) => match item.kind {
      .                           ImplItemKind::Const(..) => DefKind::AssocConst,
      .                           ImplItemKind::Fn(..) => DefKind::AssocFn,
      .                           ImplItemKind::TyAlias(..) => DefKind::AssocTy,
      .                       },
      .                       Node::Variant(_) => DefKind::Variant,
      .                       Node::Ctor(variant_data) => {
      .                           // FIXME(eddyb) is this even possible, if we have a `Node::Ctor`?
      .                           assert_ne!(variant_data.ctor_hir_id(), None);
-- line 268 ----------------------------------------
-- line 270 ----------------------------------------
      .                           let ctor_of = match self.find(self.get_parent_node(hir_id)) {
      .                               Some(Node::Item(..)) => def::CtorOf::Struct,
      .                               Some(Node::Variant(..)) => def::CtorOf::Variant,
      .                               _ => unreachable!(),
      .                           };
      .                           DefKind::Ctor(ctor_of, def::CtorKind::from_hir(variant_data))
      .                       }
      .                       Node::AnonConst(_) => {
     32 ( 0.00%)                  let inline = match self.find(self.get_parent_node(hir_id)) {
      .                               Some(Node::Expr(&Expr {
      .                                   kind: ExprKind::ConstBlock(ref anon_const), ..
      .                               })) if anon_const.hir_id == hir_id => true,
      .                               _ => false,
      .                           };
      .                           if inline { DefKind::InlineConst } else { DefKind::AnonConst }
      .                       }
      .                       Node::Field(_) => DefKind::Field,
      .                       Node::Expr(expr) => match expr.kind {
      .                           ExprKind::Closure(.., None) => DefKind::Closure,
      .                           ExprKind::Closure(.., Some(_)) => DefKind::Generator,
      .                           _ => bug!("def_kind: unsupported node: {}", self.node_to_string(hir_id)),
      .                       },
      6 ( 0.00%)              Node::GenericParam(param) => match param.kind {
      .                           GenericParamKind::Lifetime { .. } => DefKind::LifetimeParam,
      .                           GenericParamKind::Type { .. } => DefKind::TyParam,
      .                           GenericParamKind::Const { .. } => DefKind::ConstParam,
      .                       },
      .                       Node::Crate(_) => DefKind::Mod,
      .                       Node::Stmt(_)
      .                       | Node::PathSegment(_)
      .                       | Node::Ty(_)
-- line 300 ----------------------------------------
-- line 304 ----------------------------------------
      .                       | Node::Binding(_)
      .                       | Node::Local(_)
      .                       | Node::Param(_)
      .                       | Node::Arm(_)
      .                       | Node::Lifetime(_)
      .                       | Node::Visibility(_)
      .                       | Node::Block(_) => return None,
      .                   };
    568 ( 0.00%)          Some(def_kind)
  1,780 ( 0.00%)      }
      .           
      .               pub fn def_kind(&self, local_def_id: LocalDefId) -> DefKind {
      .                   self.opt_def_kind(local_def_id)
      .                       .unwrap_or_else(|| bug!("def_kind: unsupported node: {:?}", local_def_id))
      .               }
      .           
320,768 ( 0.04%)      pub fn find_parent_node(&self, id: HirId) -> Option<HirId> {
 40,096 ( 0.01%)          if id.local_id == ItemLocalId::from_u32(0) {
      .                       Some(self.tcx.hir_owner_parent(id.owner))
      .                   } else {
 78,056 ( 0.01%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
 39,028 ( 0.01%)              let node = owner.nodes[id.local_id].as_ref()?;
117,084 ( 0.02%)              let hir_id = HirId { owner: id.owner, local_id: node.parent };
      .                       Some(hir_id)
      .                   }
320,768 ( 0.04%)      }
      .           
    477 ( 0.00%)      pub fn get_parent_node(&self, hir_id: HirId) -> HirId {
229,229 ( 0.03%)          self.find_parent_node(hir_id).unwrap()
    954 ( 0.00%)      }
      .           
      .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
 73,920 ( 0.01%)      pub fn find(&self, id: HirId) -> Option<Node<'hir>> {
  9,240 ( 0.00%)          if id.local_id == ItemLocalId::from_u32(0) {
      .                       let owner = self.tcx.hir_owner(id.owner)?;
  5,548 ( 0.00%)              Some(owner.node.into())
      .                   } else {
  7,280 ( 0.00%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
  3,640 ( 0.00%)              let node = owner.nodes[id.local_id].as_ref()?;
 10,920 ( 0.00%)              Some(node.node)
      .                   }
 73,920 ( 0.01%)      }
      .           
      .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
      .               #[inline]
      .               pub fn find_by_def_id(&self, id: LocalDefId) -> Option<Node<'hir>> {
  1,404 ( 0.00%)          self.find(self.local_def_id_to_hir_id(id))
      .               }
      .           
      .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
  5,088 ( 0.00%)      pub fn get(&self, id: HirId) -> Node<'hir> {
  3,292 ( 0.00%)          self.find(id).unwrap_or_else(|| bug!("couldn't find hir id {} in the HIR map", id))
  3,392 ( 0.00%)      }
      .           
      .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
      .               #[inline]
      .               pub fn get_by_def_id(&self, id: LocalDefId) -> Node<'hir> {
      .                   self.find_by_def_id(id).unwrap_or_else(|| bug!("couldn't find {:?} in the HIR map", id))
      .               }
      .           
    152 ( 0.00%)      pub fn get_if_local(&self, id: DefId) -> Option<Node<'hir>> {
     76 ( 0.00%)          id.as_local().and_then(|id| self.find(self.local_def_id_to_hir_id(id)))
    152 ( 0.00%)      }
      .           
      .               pub fn get_generics(&self, id: LocalDefId) -> Option<&'hir Generics<'hir>> {
      .                   let node = self.tcx.hir_owner(id)?;
      .                   match node.node {
      .                       OwnerNode::ImplItem(impl_item) => Some(&impl_item.generics),
      .                       OwnerNode::TraitItem(trait_item) => Some(&trait_item.generics),
      .                       OwnerNode::Item(Item {
      .                           kind:
-- line 374 ----------------------------------------
-- line 381 ----------------------------------------
      .                               | ItemKind::TraitAlias(generics, _)
      .                               | ItemKind::Impl(Impl { generics, .. }),
      .                           ..
      .                       }) => Some(generics),
      .                       _ => None,
      .                   }
      .               }
      .           
 21,567 ( 0.00%)      pub fn item(&self, id: ItemId) -> &'hir Item<'hir> {
  6,162 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_item()
 24,648 ( 0.00%)      }
      .           
    546 ( 0.00%)      pub fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
    156 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_trait_item()
    624 ( 0.00%)      }
      .           
  2,177 ( 0.00%)      pub fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
    622 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_impl_item()
  2,488 ( 0.00%)      }
      .           
      .               pub fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
      .                   self.tcx.hir_owner(id.def_id).unwrap().node.expect_foreign_item()
      .               }
      .           
 16,023 ( 0.00%)      pub fn body(&self, id: BodyId) -> &'hir Body<'hir> {
  4,578 ( 0.00%)          self.tcx.hir_owner_nodes(id.hir_id.owner).unwrap().bodies[&id.hir_id.local_id]
 18,312 ( 0.00%)      }
      .           
    321 ( 0.00%)      pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnDecl<'hir>> {
    321 ( 0.00%)          if let Some(node) = self.find(hir_id) {
      .                       fn_decl(node)
      .                   } else {
      .                       bug!("no node for hir_id `{}`", hir_id)
      .                   }
    214 ( 0.00%)      }
      .           
     87 ( 0.00%)      pub fn fn_sig_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnSig<'hir>> {
     87 ( 0.00%)          if let Some(node) = self.find(hir_id) {
      .                       fn_sig(node)
      .                   } else {
      .                       bug!("no node for hir_id `{}`", hir_id)
      .                   }
     87 ( 0.00%)      }
      .           
      .               pub fn enclosing_body_owner(&self, hir_id: HirId) -> HirId {
      .                   for (parent, _) in self.parent_iter(hir_id) {
      .                       if let Some(body) = self.maybe_body_owned_by(parent) {
      .                           return self.body_owner(body);
      .                       }
      .                   }
      .           
      .                   bug!("no `enclosing_body_owner` for hir_id `{}`", hir_id);
      .               }
      .           
      .               /// Returns the `HirId` that corresponds to the definition of
      .               /// which this is the body of, i.e., a `fn`, `const` or `static`
      .               /// item (possibly associated), a closure, or a `hir::AnonConst`.
 10,784 ( 0.00%)      pub fn body_owner(&self, BodyId { hir_id }: BodyId) -> HirId {
      .                   let parent = self.get_parent_node(hir_id);
  8,088 ( 0.00%)          assert!(self.find(parent).map_or(false, |n| is_body_owner(n, hir_id)));
      .                   parent
 10,784 ( 0.00%)      }
      .           
  3,425 ( 0.00%)      pub fn body_owner_def_id(&self, id: BodyId) -> LocalDefId {
  5,370 ( 0.00%)          self.local_def_id(self.body_owner(id))
  3,425 ( 0.00%)      }
      .           
      .               /// Given a `HirId`, returns the `BodyId` associated with it,
      .               /// if the node is a body owner, otherwise returns `None`.
    445 ( 0.00%)      pub fn maybe_body_owned_by(&self, hir_id: HirId) -> Option<BodyId> {
  1,478 ( 0.00%)          self.find(hir_id).map(associated_body).flatten()
  1,335 ( 0.00%)      }
      .           
      .               /// Given a body owner's id, returns the `BodyId` associated with it.
  1,287 ( 0.00%)      pub fn body_owned_by(&self, id: HirId) -> BodyId {
      .                   self.maybe_body_owned_by(id).unwrap_or_else(|| {
      .                       span_bug!(
      .                           self.span(id),
      .                           "body_owned_by: {} has no associated body",
      .                           self.node_to_string(id)
      .                       );
      .                   })
  1,001 ( 0.00%)      }
      .           
     40 ( 0.00%)      pub fn body_param_names(&self, id: BodyId) -> impl Iterator<Item = Ident> + 'hir {
    388 ( 0.00%)          self.body(id).params.iter().map(|arg| match arg.pat.kind {
    134 ( 0.00%)              PatKind::Binding(_, _, ident, _) => ident,
      .                       _ => Ident::empty(),
      .                   })
    120 ( 0.00%)      }
      .           
      .               /// Returns the `BodyOwnerKind` of this `LocalDefId`.
      .               ///
      .               /// Panics if `LocalDefId` does not have an associated body.
  2,472 ( 0.00%)      pub fn body_owner_kind(&self, id: HirId) -> BodyOwnerKind {
  6,908 ( 0.00%)          match self.get(id) {
      .                       Node::Item(&Item { kind: ItemKind::Const(..), .. })
      .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Const(..), .. })
      .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Const(..), .. })
      .                       | Node::AnonConst(_) => BodyOwnerKind::Const,
      .                       Node::Ctor(..)
      .                       | Node::Item(&Item { kind: ItemKind::Fn(..), .. })
      .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Fn(..), .. })
      .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Fn(..), .. }) => BodyOwnerKind::Fn,
     36 ( 0.00%)              Node::Item(&Item { kind: ItemKind::Static(_, m, _), .. }) => BodyOwnerKind::Static(m),
      .                       Node::Expr(&Expr { kind: ExprKind::Closure(..), .. }) => BodyOwnerKind::Closure,
      .                       node => bug!("{:#?} is not a body node", node),
      .                   }
  2,472 ( 0.00%)      }
      .           
      .               /// Returns the `ConstContext` of the body associated with this `LocalDefId`.
      .               ///
      .               /// Panics if `LocalDefId` does not have an associated body.
      .               ///
      .               /// This should only be used for determining the context of a body, a return
      .               /// value of `Some` does not always suggest that the owner of the body is `const`,
      .               /// just that it has to be checked as if it were.
  3,280 ( 0.00%)      pub fn body_const_context(&self, did: LocalDefId) -> Option<ConstContext> {
      .                   let hir_id = self.local_def_id_to_hir_id(did);
  4,920 ( 0.00%)          let ccx = match self.body_owner_kind(hir_id) {
      .                       BodyOwnerKind::Const => ConstContext::Const,
     54 ( 0.00%)              BodyOwnerKind::Static(mt) => ConstContext::Static(mt),
      .           
    236 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_constructor(did.to_def_id()) => return None,
    236 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_const_fn_raw(did.to_def_id()) => ConstContext::ConstFn,
      .                       BodyOwnerKind::Fn
    472 ( 0.00%)                  if self.tcx.has_attr(did.to_def_id(), sym::default_method_body_is_const) =>
      .                       {
      .                           ConstContext::ConstFn
      .                       }
      .                       BodyOwnerKind::Fn | BodyOwnerKind::Closure => return None,
      .                   };
      .           
      .                   Some(ccx)
  3,690 ( 0.00%)      }
      .           
      .               /// Returns an iterator of the `DefId`s for all body-owners in this
      .               /// crate. If you would prefer to iterate over the bodies
      .               /// themselves, you can do `self.hir().krate().body_ids.iter()`.
     21 ( 0.00%)      pub fn body_owners(self) -> impl Iterator<Item = LocalDefId> + 'hir {
      3 ( 0.00%)          self.krate()
      .                       .owners
      .                       .iter_enumerated()
      .                       .flat_map(move |(owner, owner_info)| {
    534 ( 0.00%)                  let bodies = &owner_info.as_ref()?.nodes.bodies;
      .                           Some(bodies.iter().map(move |&(local_id, _)| {
      4 ( 0.00%)                      let hir_id = HirId { owner, local_id };
      .                               let body_id = BodyId { hir_id };
    678 ( 0.00%)                      self.body_owner_def_id(body_id)
      .                           }))
      .                       })
      .                       .flatten()
     15 ( 0.00%)      }
      .           
     10 ( 0.00%)      pub fn par_body_owners<F: Fn(LocalDefId) + Sync + Send>(self, f: F) {
      .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
      .                   #[cfg(parallel_compiler)]
      .                   use rustc_rayon::iter::IndexedParallelIterator;
      .           
      3 ( 0.00%)          par_iter(&self.krate().owners.raw).enumerate().for_each(|(owner, owner_info)| {
      .                       let owner = LocalDefId::new(owner);
  1,068 ( 0.00%)              if let Some(owner_info) = owner_info {
      .                           par_iter(owner_info.nodes.bodies.range(..)).for_each(|(local_id, _)| {
      .                               let hir_id = HirId { owner, local_id: *local_id };
      .                               let body_id = BodyId { hir_id };
    621 ( 0.00%)                      f(self.body_owner_def_id(body_id))
      .                           })
      .                       }
      .                   });
      8 ( 0.00%)      }
      .           
      .               pub fn ty_param_owner(&self, id: HirId) -> LocalDefId {
      .                   match self.get(id) {
      .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
      .                           id.expect_owner()
      .                       }
      .                       Node::GenericParam(_) => self.get_parent_item(id),
      .                       _ => bug!("ty_param_owner: {} not a type parameter", self.node_to_string(id)),
-- line 558 ----------------------------------------
-- line 564 ----------------------------------------
      .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
      .                           kw::SelfUpper
      .                       }
      .                       Node::GenericParam(param) => param.name.ident().name,
      .                       _ => bug!("ty_param_name: {} not a type parameter", self.node_to_string(id)),
      .                   }
      .               }
      .           
    396 ( 0.00%)      pub fn trait_impls(&self, trait_did: DefId) -> &'hir [LocalDefId] {
     44 ( 0.00%)          self.tcx.all_local_trait_impls(()).get(&trait_did).map_or(&[], |xs| &xs[..])
    396 ( 0.00%)      }
      .           
      .               /// Gets the attributes on the crate. This is preferable to
      .               /// invoking `krate.attrs` because it registers a tighter
      .               /// dep-graph access.
      .               pub fn krate_attrs(&self) -> &'hir [ast::Attribute] {
     74 ( 0.00%)          self.attrs(CRATE_HIR_ID)
      .               }
      .           
    329 ( 0.00%)      pub fn get_module(&self, module: LocalDefId) -> (&'hir Mod<'hir>, Span, HirId) {
      .                   let hir_id = HirId::make_owner(module);
    235 ( 0.00%)          match self.tcx.hir_owner(module).map(|o| o.node) {
     72 ( 0.00%)              Some(OwnerNode::Item(&Item { span, kind: ItemKind::Mod(ref m), .. })) => {
      .                           (m, span, hir_id)
      .                       }
     33 ( 0.00%)              Some(OwnerNode::Crate(item)) => (item, item.inner, hir_id),
      .                       node => panic!("not a module: {:?}", node),
      .                   }
    423 ( 0.00%)      }
      .           
      .               /// Walks the contents of a crate. See also `Crate::visit_all_items`.
     11 ( 0.00%)      pub fn walk_toplevel_module(self, visitor: &mut impl Visitor<'hir>) {
     30 ( 0.00%)          let (top_mod, span, hir_id) = self.get_module(CRATE_DEF_ID);
      .                   visitor.visit_mod(top_mod, span, hir_id);
      8 ( 0.00%)      }
      .           
      .               /// Walks the attributes in a crate.
     20 ( 0.00%)      pub fn walk_attributes(self, visitor: &mut impl Visitor<'hir>) {
      2 ( 0.00%)          let krate = self.krate();
      .                   for (owner, info) in krate.owners.iter_enumerated() {
    712 ( 0.00%)              if let Some(info) = info {
      .                           for (local_id, attrs) in info.attrs.map.iter() {
      .                               let id = HirId { owner, local_id: *local_id };
      .                               for a in *attrs {
  1,120 ( 0.00%)                          visitor.visit_attribute(id, a)
      .                               }
      .                           }
      .                       }
      .                   }
     16 ( 0.00%)      }
      .           
      .               /// Visits all items in the crate in some deterministic (but
      .               /// unspecified) order. If you just need to process every item,
      .               /// but don't care about nesting, this method is the best choice.
      .               ///
      .               /// If you do care about nesting -- usually because your algorithm
      .               /// follows lexical scoping rules -- then you want a different
      .               /// approach. You should override `visit_nested_item` in your
      .               /// visitor and then call `intravisit::walk_crate` instead.
    152 ( 0.00%)      pub fn visit_all_item_likes<V>(&self, visitor: &mut V)
      .               where
      .                   V: itemlikevisit::ItemLikeVisitor<'hir>,
      .               {
     22 ( 0.00%)          let krate = self.krate();
     82 ( 0.00%)          for owner in krate.owners.iter().filter_map(Option::as_ref) {
  4,290 ( 0.00%)              match owner.node() {
  5,865 ( 0.00%)                  OwnerNode::Item(item) => visitor.visit_item(item),
      .                           OwnerNode::ForeignItem(item) => visitor.visit_foreign_item(item),
     33 ( 0.00%)                  OwnerNode::ImplItem(item) => visitor.visit_impl_item(item),
      .                           OwnerNode::TraitItem(item) => visitor.visit_trait_item(item),
      .                           OwnerNode::Crate(_) => {}
      .                       }
      .                   }
    152 ( 0.00%)      }
      .           
      .               /// A parallel version of `visit_all_item_likes`.
      .               pub fn par_visit_all_item_likes<V>(&self, visitor: &V)
      .               where
      .                   V: itemlikevisit::ParItemLikeVisitor<'hir> + Sync + Send,
      .               {
      1 ( 0.00%)          let krate = self.krate();
      2 ( 0.00%)          par_for_each_in(&krate.owners.raw, |owner| match owner.as_ref().map(OwnerInfo::node) {
    115 ( 0.00%)              Some(OwnerNode::Item(item)) => visitor.visit_item(item),
      .                       Some(OwnerNode::ForeignItem(item)) => visitor.visit_foreign_item(item),
     11 ( 0.00%)              Some(OwnerNode::ImplItem(item)) => visitor.visit_impl_item(item),
      3 ( 0.00%)              Some(OwnerNode::TraitItem(item)) => visitor.visit_trait_item(item),
      .                       Some(OwnerNode::Crate(_)) | None => {}
      .                   })
      .               }
      .           
  1,118 ( 0.00%)      pub fn visit_item_likes_in_module<V>(&self, module: LocalDefId, visitor: &mut V)
      .               where
      .                   V: ItemLikeVisitor<'hir>,
      .               {
    143 ( 0.00%)          let module = self.tcx.hir_module_items(module);
      .           
    156 ( 0.00%)          for id in module.items.iter() {
  5,175 ( 0.00%)              visitor.visit_item(self.item(*id));
      .                   }
      .           
    156 ( 0.00%)          for id in module.trait_items.iter() {
    120 ( 0.00%)              visitor.visit_trait_item(self.trait_item(*id));
      .                   }
      .           
    156 ( 0.00%)          for id in module.impl_items.iter() {
    429 ( 0.00%)              visitor.visit_impl_item(self.impl_item(*id));
      .                   }
      .           
    156 ( 0.00%)          for id in module.foreign_items.iter() {
      .                       visitor.visit_foreign_item(self.foreign_item(*id));
      .                   }
  1,144 ( 0.00%)      }
      .           
     46 ( 0.00%)      pub fn for_each_module(&self, f: impl Fn(LocalDefId)) {
      .                   let mut queue = VecDeque::new();
      .                   queue.push_back(CRATE_DEF_ID);
      .           
    104 ( 0.00%)          while let Some(id) = queue.pop_front() {
      .                       f(id);
     39 ( 0.00%)              let items = self.tcx.hir_module_items(id);
    416 ( 0.00%)              queue.extend(items.submodules.iter().copied())
      .                   }
     40 ( 0.00%)      }
      .           
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId)) {
      4 ( 0.00%)          self.for_each_module(f)
      .               }
      .           
      .               #[cfg(parallel_compiler)]
      .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId) + Sync) {
      .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
      .                   par_iter_submodules(self.tcx, CRATE_DEF_ID, &f);
      .           
      .                   fn par_iter_submodules<F>(tcx: TyCtxt<'_>, module: LocalDefId, f: &F)
-- line 699 ----------------------------------------
-- line 703 ----------------------------------------
      .                       (*f)(module);
      .                       let items = tcx.hir_module_items(module);
      .                       par_iter(&items.submodules[..]).for_each(|&sm| par_iter_submodules(tcx, sm, f));
      .                   }
      .               }
      .           
      .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
      .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
     37 ( 0.00%)      pub fn parent_iter(self, current_id: HirId) -> ParentHirIterator<'hir> {
      .                   ParentHirIterator { current_id, map: self }
    148 ( 0.00%)      }
      .           
      .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
      .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
      .               pub fn parent_owner_iter(self, current_id: HirId) -> ParentOwnerIterator<'hir> {
      .                   ParentOwnerIterator { current_id, map: self }
  1,497 ( 0.00%)      }
      .           
      .               /// Checks if the node is left-hand side of an assignment.
      .               pub fn is_lhs(&self, id: HirId) -> bool {
      .                   match self.find(self.get_parent_node(id)) {
      .                       Some(Node::Expr(expr)) => match expr.kind {
      .                           ExprKind::Assign(lhs, _rhs, _span) => lhs.hir_id == id,
      .                           _ => false,
      .                       },
-- line 727 ----------------------------------------
-- line 792 ----------------------------------------
      .                   }
      .                   None
      .               }
      .           
      .               /// Retrieves the `HirId` for `id`'s parent item, or `id` itself if no
      .               /// parent item is in this map. The "parent item" is the closest parent node
      .               /// in the HIR which is recorded by the map and is an item, either an item
      .               /// in a module, trait, or impl.
    438 ( 0.00%)      pub fn get_parent_item(&self, hir_id: HirId) -> LocalDefId {
  3,950 ( 0.00%)          if let Some((def_id, _node)) = self.parent_owner_iter(hir_id).next() {
      .                       def_id
      .                   } else {
      .                       CRATE_DEF_ID
      .                   }
    876 ( 0.00%)      }
      .           
      .               /// Returns the `HirId` of `id`'s nearest module parent, or `id` itself if no
      .               /// module parent is in this map.
      .               pub(super) fn get_module_parent_node(&self, hir_id: HirId) -> LocalDefId {
    426 ( 0.00%)          for (def_id, node) in self.parent_owner_iter(hir_id) {
    224 ( 0.00%)              if let OwnerNode::Item(&Item { kind: ItemKind::Mod(_), .. }) = node {
      .                           return def_id;
      .                       }
      .                   }
      .                   CRATE_DEF_ID
      .               }
      .           
      .               /// When on an if expression, a match arm tail expression or a match arm, give back
      .               /// the enclosing `if` or `match` expression.
-- line 820 ----------------------------------------
-- line 885 ----------------------------------------
      .                       }
      .                   }
      .                   bug!(
      .                       "expected foreign mod or inlined parent, found {}",
      .                       self.node_to_string(HirId::make_owner(parent))
      .                   )
      .               }
      .           
  1,967 ( 0.00%)      pub fn expect_item(&self, id: LocalDefId) -> &'hir Item<'hir> {
    843 ( 0.00%)          match self.tcx.hir_owner(id) {
      .                       Some(Owner { node: OwnerNode::Item(item), .. }) => item,
      .                       _ => bug!("expected item, found {}", self.node_to_string(HirId::make_owner(id))),
      .                   }
  2,248 ( 0.00%)      }
      .           
    154 ( 0.00%)      pub fn expect_impl_item(&self, id: LocalDefId) -> &'hir ImplItem<'hir> {
     66 ( 0.00%)          match self.tcx.hir_owner(id) {
      .                       Some(Owner { node: OwnerNode::ImplItem(item), .. }) => item,
      .                       _ => bug!("expected impl item, found {}", self.node_to_string(HirId::make_owner(id))),
      .                   }
    176 ( 0.00%)      }
      .           
     42 ( 0.00%)      pub fn expect_trait_item(&self, id: LocalDefId) -> &'hir TraitItem<'hir> {
     18 ( 0.00%)          match self.tcx.hir_owner(id) {
      .                       Some(Owner { node: OwnerNode::TraitItem(item), .. }) => item,
      .                       _ => bug!("expected trait item, found {}", self.node_to_string(HirId::make_owner(id))),
      .                   }
     48 ( 0.00%)      }
      .           
      .               pub fn expect_variant(&self, id: HirId) -> &'hir Variant<'hir> {
      .                   match self.find(id) {
      .                       Some(Node::Variant(variant)) => variant,
      .                       _ => bug!("expected variant, found {}", self.node_to_string(id)),
      .                   }
      .               }
      .           
-- line 920 ----------------------------------------
-- line 929 ----------------------------------------
      .           
      .               pub fn expect_expr(&self, id: HirId) -> &'hir Expr<'hir> {
      .                   match self.find(id) {
      .                       Some(Node::Expr(expr)) => expr,
      .                       _ => bug!("expected expr, found {}", self.node_to_string(id)),
      .                   }
      .               }
      .           
     36 ( 0.00%)      pub fn opt_name(&self, id: HirId) -> Option<Symbol> {
     12 ( 0.00%)          Some(match self.get(id) {
      .                       Node::Item(i) => i.ident.name,
      .                       Node::ForeignItem(fi) => fi.ident.name,
      .                       Node::ImplItem(ii) => ii.ident.name,
      .                       Node::TraitItem(ti) => ti.ident.name,
      .                       Node::Variant(v) => v.ident.name,
      .                       Node::Field(f) => f.ident.name,
      .                       Node::Lifetime(lt) => lt.name.ident().name,
     12 ( 0.00%)              Node::GenericParam(param) => param.name.ident().name,
      .                       Node::Binding(&Pat { kind: PatKind::Binding(_, _, l, _), .. }) => l.name,
      .                       Node::Ctor(..) => self.name(HirId::make_owner(self.get_parent_item(id))),
      .                       _ => return None,
      .                   })
     20 ( 0.00%)      }
      .           
     32 ( 0.00%)      pub fn name(&self, id: HirId) -> Symbol {
     12 ( 0.00%)          match self.opt_name(id) {
      .                       Some(name) => name,
      .                       None => bug!("no name for {}", self.node_to_string(id)),
      .                   }
     24 ( 0.00%)      }
      .           
      .               /// Given a node ID, gets a list of attributes associated with the AST
      .               /// corresponding to the node-ID.
436,800 ( 0.06%)      pub fn attrs(&self, id: HirId) -> &'hir [ast::Attribute] {
 62,400 ( 0.01%)          self.tcx.hir_attrs(id.owner).get(id.local_id)
499,200 ( 0.07%)      }
      .           
      .               /// Gets the span of the definition of the specified HIR node.
      .               /// This is used by `tcx.get_span`
    645 ( 0.00%)      pub fn span(&self, hir_id: HirId) -> Span {
 10,147 ( 0.00%)          self.opt_span(hir_id)
      .                       .unwrap_or_else(|| bug!("hir::map::Map::span: id not in map: {:?}", hir_id))
    645 ( 0.00%)      }
      .           
 19,922 ( 0.00%)      pub fn opt_span(&self, hir_id: HirId) -> Option<Span> {
 19,922 ( 0.00%)          let span = match self.find(hir_id)? {
      .                       Node::Param(param) => param.span,
    550 ( 0.00%)              Node::Item(item) => match &item.kind {
      .                           ItemKind::Fn(sig, _, _) => sig.span,
    318 ( 0.00%)                  _ => item.span,
      .                       },
      .                       Node::ForeignItem(foreign_item) => foreign_item.span,
     18 ( 0.00%)              Node::TraitItem(trait_item) => match &trait_item.kind {
     18 ( 0.00%)                  TraitItemKind::Fn(sig, _) => sig.span,
      .                           _ => trait_item.span,
      .                       },
     88 ( 0.00%)              Node::ImplItem(impl_item) => match &impl_item.kind {
     88 ( 0.00%)                  ImplItemKind::Fn(sig, _) => sig.span,
      .                           _ => impl_item.span,
      .                       },
      .                       Node::Variant(variant) => variant.span,
     10 ( 0.00%)              Node::Field(field) => field.span,
    182 ( 0.00%)              Node::AnonConst(constant) => self.body(constant.body).value.span,
      .                       Node::Expr(expr) => expr.span,
      .                       Node::Stmt(stmt) => stmt.span,
      .                       Node::PathSegment(seg) => seg.ident.span,
      .                       Node::Ty(ty) => ty.span,
      .                       Node::TraitRef(tr) => tr.path.span,
      .                       Node::Binding(pat) => pat.span,
      .                       Node::Pat(pat) => pat.span,
      .                       Node::Arm(arm) => arm.span,
-- line 999 ----------------------------------------
-- line 1007 ----------------------------------------
      .                       Node::GenericParam(param) => param.span,
      .                       Node::Visibility(&Spanned {
      .                           node: VisibilityKind::Restricted { ref path, .. },
      .                           ..
      .                       }) => path.span,
      .                       Node::Infer(i) => i.span,
      .                       Node::Visibility(v) => bug!("unexpected Visibility {:?}", v),
      .                       Node::Local(local) => local.span,
      4 ( 0.00%)              Node::Crate(item) => item.inner,
      .                   };
      .                   Some(span)
 28,460 ( 0.00%)      }
      .           
      .               /// Like `hir.span()`, but includes the body of function items
      .               /// (instead of just the function header)
      .               pub fn span_with_body(&self, hir_id: HirId) -> Span {
      .                   match self.find(hir_id) {
      .                       Some(Node::TraitItem(item)) => item.span,
      .                       Some(Node::ImplItem(impl_item)) => impl_item.span,
      .                       Some(Node::Item(item)) => item.span,
      .                       Some(_) => self.span(hir_id),
      .                       _ => bug!("hir::map::Map::span_with_body: id not in map: {:?}", hir_id),
      .                   }
      .               }
      .           
     16 ( 0.00%)      pub fn span_if_local(&self, id: DefId) -> Option<Span> {
    290 ( 0.00%)          id.as_local().and_then(|id| self.opt_span(self.local_def_id_to_hir_id(id)))
     24 ( 0.00%)      }
      .           
      .               pub fn res_span(&self, res: Res) -> Option<Span> {
      .                   match res {
      .                       Res::Err => None,
      .                       Res::Local(id) => Some(self.span(id)),
      .                       res => self.span_if_local(res.opt_def_id()?),
      .                   }
      .               }
-- line 1042 ----------------------------------------
-- line 1062 ----------------------------------------
      .           }
      .           
      .           impl<'hir> intravisit::Map<'hir> for Map<'hir> {
      .               fn find(&self, hir_id: HirId) -> Option<Node<'hir>> {
      .                   self.find(hir_id)
      .               }
      .           
      .               fn body(&self, id: BodyId) -> &'hir Body<'hir> {
  1,328 ( 0.00%)          self.body(id)
      .               }
      .           
      .               fn item(&self, id: ItemId) -> &'hir Item<'hir> {
  1,483 ( 0.00%)          self.item(id)
      .               }
      .           
      .               fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
     42 ( 0.00%)          self.trait_item(id)
      .               }
      .           
      .               fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
    154 ( 0.00%)          self.impl_item(id)
      .               }
      .           
      .               fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
      .                   self.foreign_item(id)
      .               }
      .           }
      .           
      7 ( 0.00%)  pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {
      .               debug_assert_eq!(crate_num, LOCAL_CRATE);
      .               let krate = tcx.hir_crate(());
      3 ( 0.00%)      let hir_body_hash = krate.hir_hash;
      .           
      .               let upstream_crates = upstream_crates(tcx);
      .           
      .               // We hash the final, remapped names of all local source files so we
      .               // don't have to include the path prefix remapping commandline args.
      .               // If we included the full mapping in the SVH, we could only have
      .               // reproducible builds by compiling from the same directory. So we just
      .               // hash the result of the mapping instead of the mapping itself.
      2 ( 0.00%)      let mut source_file_names: Vec<_> = tcx
      .                   .sess
      .                   .source_map()
      .                   .files()
      .                   .iter()
      .                   .filter(|source_file| source_file.cnum == LOCAL_CRATE)
     35 ( 0.00%)          .map(|source_file| source_file.name_hash)
      .                   .collect();
      .           
      .               source_file_names.sort_unstable();
      .           
      .               let mut hcx = tcx.create_stable_hashing_context();
      .               let mut stable_hasher = StableHasher::new();
      .               hir_body_hash.hash_stable(&mut hcx, &mut stable_hasher);
      .               upstream_crates.hash_stable(&mut hcx, &mut stable_hasher);
      .               source_file_names.hash_stable(&mut hcx, &mut stable_hasher);
      3 ( 0.00%)      if tcx.sess.opts.debugging_opts.incremental_relative_spans {
      .                   let definitions = &tcx.untracked_resolutions.definitions;
      .                   let mut owner_spans: Vec<_> = krate
      .                       .owners
      .                       .iter_enumerated()
      .                       .filter_map(|(def_id, info)| {
      .                           let _ = info.as_ref()?;
      .                           let def_path_hash = definitions.def_path_hash(def_id);
      .                           let span = definitions.def_span(def_id);
      .                           debug_assert_eq!(span.parent(), None);
      .                           Some((def_path_hash, span))
      .                       })
      .                       .collect();
      .                   owner_spans.sort_unstable_by_key(|bn| bn.0);
      .                   owner_spans.hash_stable(&mut hcx, &mut stable_hasher);
      .               }
      3 ( 0.00%)      tcx.sess.opts.dep_tracking_hash(true).hash_stable(&mut hcx, &mut stable_hasher);
      2 ( 0.00%)      tcx.sess.local_stable_crate_id().hash_stable(&mut hcx, &mut stable_hasher);
      .           
      .               let crate_hash: Fingerprint = stable_hasher.finish();
      1 ( 0.00%)      Svh::new(crate_hash.to_smaller_hash())
      9 ( 0.00%)  }
      .           
      .           fn upstream_crates(tcx: TyCtxt<'_>) -> Vec<(StableCrateId, Svh)> {
      .               let mut upstream_crates: Vec<_> = tcx
      .                   .crates(())
      .                   .iter()
      .                   .map(|&cnum| {
     15 ( 0.00%)              let stable_crate_id = tcx.resolutions(()).cstore.stable_crate_id(cnum);
      3 ( 0.00%)              let hash = tcx.crate_hash(cnum);
      .                       (stable_crate_id, hash)
      .                   })
      .                   .collect();
      .               upstream_crates.sort_unstable_by_key(|&(stable_crate_id, _)| stable_crate_id);
      .               upstream_crates
      .           }
      .           
      .           fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {
-- line 1155 ----------------------------------------
-- line 1238 ----------------------------------------
      .                   Some(Node::Lifetime(_)) => node_str("lifetime"),
      .                   Some(Node::GenericParam(ref param)) => format!("generic_param {:?}{}", param, id_str),
      .                   Some(Node::Visibility(ref vis)) => format!("visibility {:?}{}", vis, id_str),
      .                   Some(Node::Crate(..)) => String::from("root_crate"),
      .                   None => format!("unknown node{}", id_str),
      .               }
      .           }
      .           
    117 ( 0.00%)  pub(super) fn hir_module_items(tcx: TyCtxt<'_>, module_id: LocalDefId) -> ModuleItems {
     78 ( 0.00%)      let mut collector = ModuleCollector {
      .                   tcx,
      .                   submodules: Vec::default(),
      .                   items: Vec::default(),
      .                   trait_items: Vec::default(),
      .                   impl_items: Vec::default(),
      .                   foreign_items: Vec::default(),
      .               };
      .           
     65 ( 0.00%)      let (hir_mod, span, hir_id) = tcx.hir().get_module(module_id);
      .               collector.visit_mod(hir_mod, span, hir_id);
      .           
    208 ( 0.00%)      let ModuleCollector { submodules, items, trait_items, impl_items, foreign_items, .. } =
      .                   collector;
    143 ( 0.00%)      return ModuleItems {
     52 ( 0.00%)          submodules: submodules.into_boxed_slice(),
     52 ( 0.00%)          items: items.into_boxed_slice(),
     52 ( 0.00%)          trait_items: trait_items.into_boxed_slice(),
     52 ( 0.00%)          impl_items: impl_items.into_boxed_slice(),
     52 ( 0.00%)          foreign_items: foreign_items.into_boxed_slice(),
      .               };
      .           
      .               struct ModuleCollector<'tcx> {
      .                   tcx: TyCtxt<'tcx>,
      .                   submodules: Vec<LocalDefId>,
      .                   items: Vec<ItemId>,
      .                   trait_items: Vec<TraitItemId>,
      .                   impl_items: Vec<ImplItemId>,
      .                   foreign_items: Vec<ForeignItemId>,
      .               }
      .           
      .               impl<'hir> Visitor<'hir> for ModuleCollector<'hir> {
      .                   type NestedFilter = nested_filter::All;
      .           
      .                   fn nested_visit_map(&mut self) -> Self::Map {
    185 ( 0.00%)              self.tcx.hir()
      .                   }
      .           
    575 ( 0.00%)          fn visit_item(&mut self, item: &'hir Item<'hir>) {
    345 ( 0.00%)              self.items.push(item.item_id());
    230 ( 0.00%)              if let ItemKind::Mod(..) = item.kind {
      .                           // If this declares another module, do not recurse inside it.
     12 ( 0.00%)                  self.submodules.push(item.def_id);
      .                       } else {
    618 ( 0.00%)                  intravisit::walk_item(self, item)
      .                       }
     48 ( 0.00%)          }
      .           
      .                   fn visit_trait_item(&mut self, item: &'hir TraitItem<'hir>) {
      9 ( 0.00%)              self.trait_items.push(item.trait_item_id());
      9 ( 0.00%)              intravisit::walk_trait_item(self, item)
      .                   }
      .           
      .                   fn visit_impl_item(&mut self, item: &'hir ImplItem<'hir>) {
     33 ( 0.00%)              self.impl_items.push(item.impl_item_id());
     33 ( 0.00%)              intravisit::walk_impl_item(self, item)
      .                   }
      .           
      .                   fn visit_foreign_item(&mut self, item: &'hir ForeignItem<'hir>) {
      .                       self.foreign_items.push(item.foreign_item_id());
      .                       intravisit::walk_foreign_item(self, item)
      .                   }
      .               }
    104 ( 0.00%)  }

119,993 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir               

-- line 27 ----------------------------------------
      .           impl CacheEntry {
      .               #[inline]
      .               fn update(
      .                   &mut self,
      .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
      .                   pos: BytePos,
      .                   time_stamp: usize,
      .               ) {
  2,462 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
  1,104 ( 0.00%)              self.file = file;
  1,392 ( 0.00%)              self.file_index = file_idx;
      .                   }
      .           
  1,498 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
      .                   let line_bounds = self.file.line_bounds(line_index);
  4,660 ( 0.00%)          self.line_number = line_index + 1;
  7,060 ( 0.00%)          self.line = line_bounds;
      .                   self.touch(time_stamp);
      .               }
      .           
      .               #[inline]
      .               fn touch(&mut self, time_stamp: usize) {
 26,092 ( 0.00%)          self.time_stamp = time_stamp;
      .               }
      .           }
      .           
      .           #[derive(Clone)]
      .           pub struct CachingSourceMapView<'sm> {
      .               source_map: &'sm SourceMap,
      .               line_cache: [CacheEntry; 3],
      .               time_stamp: usize,
      .           }
      .           
      .           impl<'sm> CachingSourceMapView<'sm> {
    732 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
      .                   let files = source_map.files();
    366 ( 0.00%)          let first_file = files[0].clone();
      .                   let entry = CacheEntry {
      .                       time_stamp: 0,
      .                       line_number: 0,
      .                       line: BytePos(0)..BytePos(0),
      .                       file: first_file,
      .                       file_index: 0,
      .                   };
      .           
  1,830 ( 0.00%)          CachingSourceMapView {
      .                       source_map,
  2,562 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
      .                       time_stamp: 0,
      .                   }
  1,464 ( 0.00%)      }
      .           
      .               pub fn byte_pos_to_line_and_col(
      .                   &mut self,
      .                   pos: BytePos,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
      .                   self.time_stamp += 1;
      .           
      .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
      .                   };
      .           
      .                   let cache_entry = &mut self.line_cache[oldest];
      .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
      .           
      .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
      .               }
      .           
 98,525 ( 0.01%)      pub fn span_data_to_lines_and_cols(
      .                   &mut self,
      .                   span_data: &SpanData,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
 56,300 ( 0.01%)          self.time_stamp += 1;
      .           
      .                   // Check if lo and hi are in the cached lines.
 14,075 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
 14,075 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
      .           
 24,066 ( 0.00%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
      .                       // Cache hit for span lo and hi. Check if they belong to the same file.
      .                       let result = {
 24,034 ( 0.00%)                  let lo = &self.line_cache[lo_cache_idx as usize];
      .                           let hi = &self.line_cache[hi_cache_idx as usize];
      .           
 72,102 ( 0.01%)                  if lo.file_index != hi.file_index {
      .                               return None;
      .                           }
      .           
      .                           (
 24,034 ( 0.00%)                      lo.file.clone(),
      .                               lo.line_number,
      .                               span_data.lo - lo.line.start,
 12,017 ( 0.00%)                      hi.line_number,
      .                               span_data.hi - hi.line.start,
      .                           )
      .                       };
      .           
 12,017 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
 12,017 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
      .           
 48,068 ( 0.01%)              return Some(result);
      .                   }
      .           
      .                   // No cache hit or cache hit for only one of span lo and hi.
  4,084 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
      .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
      .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
      .                   } else {
      .                       self.oldest_cache_entry_index()
      .                   };
      .           
      .                   // If the entry doesn't point to the correct file, get the new file and index.
      .                   // Return early if the file containing beginning of span doesn't contain end of span.
 16,420 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
  2,800 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
  3,360 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
      .                           return None;
      .                       }
      .           
  2,240 ( 0.00%)              Some(new_file_and_idx)
      .                   } else {
      .                       let file = &self.line_cache[oldest].file;
  4,494 ( 0.00%)              if !file_contains(&file, span_data.hi) {
      .                           return None;
      .                       }
      .           
  4,494 ( 0.00%)              None
      .                   };
      .           
      .                   // Update the cache entries.
 10,290 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, -1) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
      .           
  5,520 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
      .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
      .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
      .                               let hi = &mut self.line_cache[next_oldest];
      .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
      .                               (oldest, next_oldest)
      .                           } else {
      .                               (oldest, oldest)
      .                           }
      .                       }
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, _) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
     32 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
     48 ( 0.00%)                  hi.touch(self.time_stamp);
      .                           (oldest, hi_cache_idx as usize)
      .                       }
      .                       // Oldest cache entry is for span_data.hi line.
      .                       (_, -1) => {
      .                           let hi = &mut self.line_cache[oldest];
    202 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
    404 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
    808 ( 0.00%)                  lo.touch(self.time_stamp);
      .                           (lo_cache_idx as usize, oldest)
      .                       }
      .                       _ => {
      .                           panic!();
      .                       }
      .                   };
      .           
      .                   let lo = &self.line_cache[lo_idx];
      .                   let hi = &self.line_cache[hi_idx];
      .           
      .                   // Span lo and hi may equal line end when last line doesn't
      .                   // end in newline, hence the inclusive upper bounds below.
  4,116 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
  2,058 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
  4,116 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
  2,058 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
 10,290 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
  6,174 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
  6,174 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
      .           
  6,174 ( 0.00%)          Some((
  2,058 ( 0.00%)              lo.file.clone(),
      .                       lo.line_number,
      .                       span_data.lo - lo.line.start,
  2,058 ( 0.00%)              hi.line_number,
      .                       span_data.hi - hi.line.start,
      .                   ))
126,675 ( 0.02%)      }
      .           
      .               fn cache_entry_index(&self, pos: BytePos) -> isize {
      .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
164,215 ( 0.02%)              if cache_entry.line.contains(&pos) {
      .                           return idx as isize;
      .                       }
      .                   }
      .           
      .                   -1
      .               }
      .           
      .               fn oldest_cache_entry_index(&self) -> usize {
      .                   let mut oldest = 0;
      .           
      .                   for idx in 1..self.line_cache.len() {
 11,040 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
      .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
      .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
      .           
      .                   for idx in 0..self.line_cache.len() {
  2,869 ( 0.00%)              if idx != avoid_idx
  1,715 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
      .                       {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
  2,800 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
    560 ( 0.00%)          if !self.source_map.files().is_empty() {
  1,120 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
      .                       let file = &self.source_map.files()[file_idx];
      .           
  4,480 ( 0.00%)              if file_contains(file, pos) {
      .                           return Some((file.clone(), file_idx));
      .                       }
      .                   }
      .           
      .                   None
  2,800 ( 0.00%)      }
      .           }
      .           
      .           #[inline]
      .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
      .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
      .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
      .               // purposes of converting a byte position to a line and column number, we can't come up with a
      .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

186,936 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 97 ----------------------------------------
      .           
      .               /// If true, the capture is behind a reference.
      .               by_ref: bool,
      .           }
      .           
      .           const DEREF_PROJECTION: &[PlaceElem<'_>; 1] = &[ProjectionElem::Deref];
      .           
      .           pub fn provide(providers: &mut Providers) {
      4 ( 0.00%)      *providers = Providers {
      .                   mir_borrowck: |tcx, did| {
     69 ( 0.00%)              if let Some(def) = ty::WithOptConstParam::try_lookup(did, tcx) {
      .                           tcx.mir_borrowck_const_arg(def)
      .                       } else {
    276 ( 0.00%)                  mir_borrowck(tcx, ty::WithOptConstParam::unknown(did))
      .                       }
      .                   },
      .                   mir_borrowck_const_arg: |tcx, (did, param_did)| {
      .                       mir_borrowck(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })
      .                   },
      .                   ..*providers
      .               };
      1 ( 0.00%)  }
      .           
    690 ( 0.00%)  fn mir_borrowck<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               def: ty::WithOptConstParam<LocalDefId>,
      .           ) -> &'tcx BorrowCheckResult<'tcx> {
      .               let (input_body, promoted) = tcx.mir_promoted(def);
      .               debug!("run query mir_borrowck: {}", tcx.def_path_str(def.did.to_def_id()));
      .           
    897 ( 0.00%)      let opt_closure_req = tcx.infer_ctxt().with_opaque_type_inference(def.did).enter(|infcx| {
      .                   let input_body: &Body<'_> = &input_body.borrow();
      .                   let promoted: &IndexVec<_, _> = &promoted.borrow();
    966 ( 0.00%)          do_mir_borrowck(&infcx, input_body, promoted, false).0
    276 ( 0.00%)      });
      .               debug!("mir_borrowck done");
      .           
     69 ( 0.00%)      tcx.arena.alloc(opt_closure_req)
    552 ( 0.00%)  }
      .           
      .           /// Perform the actual borrow checking.
      .           ///
      .           /// If `return_body_with_facts` is true, then return the body with non-erased
      .           /// region ids on which the borrow checking was performed together with Polonius
      .           /// facts.
  1,518 ( 0.00%)  #[instrument(skip(infcx, input_body, input_promoted), level = "debug")]
      .           fn do_mir_borrowck<'a, 'tcx>(
      .               infcx: &InferCtxt<'a, 'tcx>,
      .               input_body: &Body<'tcx>,
      .               input_promoted: &IndexVec<Promoted, Body<'tcx>>,
      .               return_body_with_facts: bool,
      .           ) -> (BorrowCheckResult<'tcx>, Option<Box<BodyWithBorrowckFacts<'tcx>>>) {
    690 ( 0.00%)      let def = input_body.source.with_opt_param().as_local().unwrap();
      .           
      .               debug!(?def);
      .           
    138 ( 0.00%)      let tcx = infcx.tcx;
      .               let param_env = tcx.param_env(def.did);
     69 ( 0.00%)      let id = tcx.hir().local_def_id_to_hir_id(def.did);
      .           
    138 ( 0.00%)      let mut local_names = IndexVec::from_elem(None, &input_body.local_decls);
      .               for var_debug_info in &input_body.var_debug_info {
    729 ( 0.00%)          if let VarDebugInfoContents::Place(place) = var_debug_info.value {
    408 ( 0.00%)              if let Some(local) = place.as_local() {
    612 ( 0.00%)                  if let Some(prev_name) = local_names[local] {
      .                               if var_debug_info.name != prev_name {
      .                                   span_bug!(
      .                                       var_debug_info.source_info.span,
      .                                       "local {:?} has many names (`{}` vs `{}`)",
      .                                       local,
      .                                       prev_name,
      .                                       var_debug_info.name
      .                                   );
      .                               }
      .                           }
    612 ( 0.00%)                  local_names[local] = Some(var_debug_info.name);
      .                       }
      .                   }
      .               }
      .           
      .               // Gather the upvars of a closure, if any.
    276 ( 0.00%)      let tables = tcx.typeck_opt_const_arg(def);
    138 ( 0.00%)      if let Some(ErrorReported) = tables.tainted_by_errors {
      .                   infcx.set_tainted_by_errors();
      .               }
    276 ( 0.00%)      let upvars: Vec<_> = tables
      .                   .closure_min_captures_flattened(def.did.to_def_id())
      .                   .map(|captured_place| {
      .                       let capture = captured_place.info.capture_kind;
      .                       let by_ref = match capture {
      .                           ty::UpvarCapture::ByValue => false,
      .                           ty::UpvarCapture::ByRef(..) => true,
      .                       };
      .                       Upvar { place: captured_place.clone(), by_ref }
      .                   })
      .                   .collect();
      .           
      .               // Replace all regions with fresh inference variables. This
      .               // requires first making our own copy of the MIR. This copy will
      .               // be modified (in place) to contain non-lexical lifetimes. It
      .               // will have a lifetime tied to the inference context.
    138 ( 0.00%)      let mut body_owned = input_body.clone();
      .               let mut promoted = input_promoted.clone();
      .               let free_regions =
    207 ( 0.00%)          nll::replace_regions_in_mir(infcx, param_env, &mut body_owned, &mut promoted);
      .               let body = &body_owned; // no further changes
      .           
     69 ( 0.00%)      let location_table_owned = LocationTable::new(body);
      .               let location_table = &location_table_owned;
      .           
      .               let mut errors_buffer = Vec::new();
    207 ( 0.00%)      let (move_data, move_errors): (MoveData<'tcx>, Vec<(Place<'tcx>, MoveError<'tcx>)>) =
    483 ( 0.00%)          match MoveData::gather_moves(&body, tcx, param_env) {
    414 ( 0.00%)              Ok(move_data) => (move_data, Vec::new()),
      .                       Err((move_data, move_errors)) => (move_data, move_errors),
      .                   };
      .               let promoted_errors = promoted
      .                   .iter_enumerated()
      .                   .map(|(idx, body)| (idx, MoveData::gather_moves(&body, tcx, param_env)));
      .           
    414 ( 0.00%)      let mdpe = MoveDataParamEnv { move_data, param_env };
      .           
    552 ( 0.00%)      let mut flow_inits = MaybeInitializedPlaces::new(tcx, &body, &mdpe)
     69 ( 0.00%)          .into_engine(tcx, &body)
      .                   .pass_name("borrowck")
      .                   .iterate_to_fixpoint()
      .                   .into_results_cursor(&body);
      .           
    828 ( 0.00%)      let locals_are_invalidated_at_exit = tcx.hir().body_owner_kind(id).is_fn_or_closure();
      .               let borrow_set =
    690 ( 0.00%)          Rc::new(BorrowSet::build(tcx, body, locals_are_invalidated_at_exit, &mdpe.move_data));
      .           
    345 ( 0.00%)      let use_polonius = return_body_with_facts || infcx.tcx.sess.opts.debugging_opts.polonius;
      .           
      .               // Compute non-lexical lifetimes.
      .               let nll::NllOutput {
    207 ( 0.00%)          regioncx,
    276 ( 0.00%)          opaque_type_values,
    138 ( 0.00%)          polonius_input,
    207 ( 0.00%)          polonius_output,
    276 ( 0.00%)          opt_closure_req,
    690 ( 0.00%)          nll_errors,
  1,242 ( 0.00%)      } = nll::compute_regions(
      .                   infcx,
  1,104 ( 0.00%)          free_regions,
      .                   body,
      .                   &promoted,
      .                   location_table,
      .                   param_env,
      .                   &mut flow_inits,
      .                   &mdpe.move_data,
      .                   &borrow_set,
      .                   &upvars,
      .                   use_polonius,
      .               );
      .           
      .               // Dump MIR results into a file, if that is enabled. This let us
      .               // write unit-tests, as well as helping with debugging.
    207 ( 0.00%)      nll::dump_mir_results(infcx, &body, &regioncx, &opt_closure_req);
      .           
      .               // We also have a `#[rustc_regions]` annotation that causes us to dump
      .               // information.
    138 ( 0.00%)      nll::dump_annotation(
      .                   infcx,
      .                   &body,
      .                   &regioncx,
      .                   &opt_closure_req,
      .                   &opaque_type_values,
      .                   &mut errors_buffer,
      .               );
      .           
      .               // The various `flow_*` structures can be large. We drop `flow_inits` here
      .               // so it doesn't overlap with the others below. This reduces peak memory
      .               // usage significantly on some benchmarks.
  1,104 ( 0.00%)      drop(flow_inits);
      .           
     69 ( 0.00%)      let regioncx = Rc::new(regioncx);
      .           
    414 ( 0.00%)      let flow_borrows = Borrows::new(tcx, body, &regioncx, &borrow_set)
     69 ( 0.00%)          .into_engine(tcx, body)
      .                   .pass_name("borrowck")
      .                   .iterate_to_fixpoint();
    414 ( 0.00%)      let flow_uninits = MaybeUninitializedPlaces::new(tcx, body, &mdpe)
     69 ( 0.00%)          .into_engine(tcx, body)
      .                   .pass_name("borrowck")
      .                   .iterate_to_fixpoint();
    414 ( 0.00%)      let flow_ever_inits = EverInitializedPlaces::new(tcx, body, &mdpe)
     69 ( 0.00%)          .into_engine(tcx, body)
      .                   .pass_name("borrowck")
      .                   .iterate_to_fixpoint();
      .           
    138 ( 0.00%)      let movable_generator = !matches!(
    414 ( 0.00%)          tcx.hir().get(id),
      .                   Node::Expr(&hir::Expr {
      .                       kind: hir::ExprKind::Closure(.., Some(hir::Movability::Static)),
      .                       ..
      .                   })
      .               );
      .           
      .               for (idx, move_data_results) in promoted_errors {
      .                   let promoted_body = &promoted[idx];
-- line 297 ----------------------------------------
-- line 325 ----------------------------------------
      .                       };
      .                       promoted_mbcx.report_move_errors(move_errors);
      .                       errors_buffer = promoted_mbcx.errors_buffer;
      .                   };
      .               }
      .           
      .               let dominators = body.dominators();
      .           
  3,105 ( 0.00%)      let mut mbcx = MirBorrowckCtxt {
      .                   infcx,
      .                   param_env,
      .                   body,
      .                   move_data: &mdpe.move_data,
      .                   location_table,
      .                   movable_generator,
      .                   locals_are_invalidated_at_exit,
      .                   fn_self_span_reported: Default::default(),
      .                   access_place_error_reported: Default::default(),
      .                   reservation_error_reported: Default::default(),
      .                   reservation_warnings: Default::default(),
      .                   move_error_reported: BTreeMap::new(),
      .                   uninitialized_error_reported: Default::default(),
    276 ( 0.00%)          errors_buffer,
     69 ( 0.00%)          regioncx: Rc::clone(&regioncx),
      .                   used_mut: Default::default(),
      .                   used_mut_upvars: SmallVec::new(),
     69 ( 0.00%)          borrow_set: Rc::clone(&borrow_set),
    414 ( 0.00%)          dominators,
    276 ( 0.00%)          upvars,
    276 ( 0.00%)          local_names,
      .                   region_names: RefCell::default(),
      .                   next_region_name: RefCell::new(1),
      .                   polonius_output,
      .               };
      .           
      .               // Compute and report region errors, if any.
    207 ( 0.00%)      mbcx.report_region_errors(nll_errors);
      .           
      .               let results = BorrowckResults {
    414 ( 0.00%)          ever_inits: flow_ever_inits,
    552 ( 0.00%)          uninits: flow_uninits,
    759 ( 0.00%)          borrows: flow_borrows,
      .               };
      .           
    414 ( 0.00%)      mbcx.report_move_errors(move_errors);
      .           
     69 ( 0.00%)      rustc_mir_dataflow::visit_results(
      .                   body,
     69 ( 0.00%)          traversal::reverse_postorder(body).map(|(bb, _)| bb),
      .                   &results,
      .                   &mut mbcx,
      .               );
      .           
      .               // Convert any reservation warnings into lints.
      .               let reservation_warnings = mem::take(&mut mbcx.reservation_warnings);
      .               for (_, (place, span, location, bk, borrow)) in reservation_warnings {
      .                   let mut initial_diag = mbcx.report_conflicting_borrow(location, (place, span), bk, &borrow);
-- line 381 ----------------------------------------
-- line 406 ----------------------------------------
      .               // For each non-user used mutable variable, check if it's been assigned from
      .               // a user-declared local. If so, then put that local into the used_mut set.
      .               // Note that this set is expected to be small - only upvars from closures
      .               // would have a chance of erroneously adding non-user-defined mutable vars
      .               // to the set.
      .               let temporary_used_locals: FxHashSet<Local> = mbcx
      .                   .used_mut
      .                   .iter()
     69 ( 0.00%)          .filter(|&local| !mbcx.body.local_decls[*local].is_user_variable())
      .                   .cloned()
      .                   .collect();
      .               // For the remaining unused locals that are marked as mutable, we avoid linting any that
      .               // were never initialized. These locals may have been removed as unreachable code; or will be
      .               // linted as unused variables.
      .               let unused_mut_locals =
     69 ( 0.00%)          mbcx.body.mut_vars_iter().filter(|local| !mbcx.used_mut.contains(local)).collect();
    276 ( 0.00%)      mbcx.gather_used_muts(temporary_used_locals, unused_mut_locals);
      .           
      .               debug!("mbcx.used_mut: {:?}", mbcx.used_mut);
    276 ( 0.00%)      let used_mut = mbcx.used_mut;
     69 ( 0.00%)      for local in mbcx.body.mut_vars_and_args_iter().filter(|local| !used_mut.contains(local)) {
      .                   let local_decl = &mbcx.body.local_decls[local];
      .                   let lint_root = match &mbcx.body.source_scopes[local_decl.source_info.scope].local_data {
      .                       ClearCrossCrate::Set(data) => data.lint_root,
      .                       _ => continue,
      .                   };
      .           
      .                   // Skip over locals that begin with an underscore or have no name
      .                   match mbcx.local_names[local] {
-- line 434 ----------------------------------------
-- line 455 ----------------------------------------
      .                               String::new(),
      .                               Applicability::MachineApplicable,
      .                           )
      .                           .emit();
      .                   })
      .               }
      .           
      .               // Buffer any move errors that we collected and de-duplicated.
    621 ( 0.00%)      for (_, (_, diag)) in mbcx.move_error_reported {
      .                   diag.buffer(&mut mbcx.errors_buffer);
      .               }
      .           
     69 ( 0.00%)      if !mbcx.errors_buffer.is_empty() {
      .                   mbcx.errors_buffer.sort_by_key(|diag| diag.sort_span);
      .           
      .                   for diag in mbcx.errors_buffer.drain(..) {
      .                       mbcx.infcx.tcx.sess.diagnostic().emit_diagnostic(&diag);
      .                   }
      .               }
      .           
      .               let result = BorrowCheckResult {
    276 ( 0.00%)          concrete_opaque_types: opaque_type_values,
    345 ( 0.00%)          closure_requirements: opt_closure_req,
    414 ( 0.00%)          used_mut_upvars: mbcx.used_mut_upvars,
      .               };
      .           
    138 ( 0.00%)      let body_with_facts = if return_body_with_facts {
      .                   let output_facts = mbcx.polonius_output.expect("Polonius output was not computed");
      .                   Some(Box::new(BodyWithBorrowckFacts {
      .                       body: body_owned,
      .                       input_facts: *polonius_input.expect("Polonius input facts were not generated"),
      .                       output_facts,
      .                       location_table: location_table_owned,
      .                   }))
      .               } else {
      .                   None
      .               };
      .           
      .               debug!("do_mir_borrowck: result = {:#?}", result);
      .           
    966 ( 0.00%)      (result, body_with_facts)
    828 ( 0.00%)  }
      .           
      .           /// A `Body` with information computed by the borrow checker. This struct is
      .           /// intended to be consumed by compiler consumers.
      .           ///
      .           /// We need to include the MIR body here because the region identifiers must
      .           /// match the ones in the Polonius facts.
      .           pub struct BodyWithBorrowckFacts<'tcx> {
      .               /// A mir body that contains region identifiers.
-- line 504 ----------------------------------------
-- line 608 ----------------------------------------
      .           // Check that:
      .           // 1. assignments are always made to mutable locations (FIXME: does that still really go here?)
      .           // 2. loans made in overlapping scopes do not conflict
      .           // 3. assignments do not affect things loaned out as immutable
      .           // 4. moves do not affect things loaned out in any way
      .           impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx> {
      .               type FlowState = Flows<'cx, 'tcx>;
      .           
 68,310 ( 0.01%)      fn visit_statement_before_primary_effect(
      .                   &mut self,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .                   stmt: &'cx Statement<'tcx>,
      .                   location: Location,
      .               ) {
      .                   debug!("MirBorrowckCtxt::process_statement({:?}, {:?}): {:?}", location, stmt, flow_state);
      .                   let span = stmt.source_info.span;
      .           
      .                   self.check_activations(location, span, flow_state);
      .           
 37,950 ( 0.00%)          match &stmt.kind {
  5,452 ( 0.00%)              StatementKind::Assign(box (lhs, ref rhs)) => {
      .                           self.consume_rvalue(location, (rhs, span), flow_state);
      .           
 10,904 ( 0.00%)                  self.mutate_place(location, (*lhs, span), Shallow(None), flow_state);
      .                       }
    125 ( 0.00%)              StatementKind::FakeRead(box (_, ref place)) => {
      .                           // Read for match doesn't access any memory and is used to
      .                           // assert that a place is safe and live. So we don't have to
      .                           // do any checks here.
      .                           //
      .                           // FIXME: Remove check that the place is initialized. This is
      .                           // needed for now because matches don't have never patterns yet.
      .                           // So this is the only place we prevent
      .                           //      let x: !;
      .                           //      match x {};
      .                           // from compiling.
    500 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
      .                               location,
      .                               InitializationRequiringAction::Use,
  1,125 ( 0.00%)                      (place.as_ref(), span),
      .                               flow_state,
      .                           );
      .                       }
      .                       StatementKind::SetDiscriminant { place, variant_index: _ } => {
      .                           self.mutate_place(location, (**place, span), Shallow(None), flow_state);
      .                       }
      .                       StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {
      .                           ..
-- line 655 ----------------------------------------
-- line 663 ----------------------------------------
      .                       | StatementKind::Coverage(..)
      .                       | StatementKind::AscribeUserType(..)
      .                       | StatementKind::Retag { .. }
      .                       | StatementKind::StorageLive(..) => {
      .                           // `Nop`, `AscribeUserType`, `Retag`, and `StorageLive` are irrelevant
      .                           // to borrow check.
      .                       }
      .                       StatementKind::StorageDead(local) => {
 14,286 ( 0.00%)                  self.access_place(
      .                               location,
 26,191 ( 0.00%)                      (Place::from(*local), span),
      .                               (Shallow(None), Write(WriteKind::StorageDeadOrDrop)),
      .                               LocalMutationIsAllowed::Yes,
      .                               flow_state,
      .                           );
      .                       }
      .                   }
 60,720 ( 0.01%)      }
      .           
  8,960 ( 0.00%)      fn visit_terminator_before_primary_effect(
      .                   &mut self,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .                   term: &'cx Terminator<'tcx>,
      .                   loc: Location,
      .               ) {
      .                   debug!("MirBorrowckCtxt::process_terminator({:?}, {:?}): {:?}", loc, term, flow_state);
      .                   let span = term.source_info.span;
      .           
      .                   self.check_activations(loc, span, flow_state);
      .           
  5,600 ( 0.00%)          match term.kind {
    652 ( 0.00%)              TerminatorKind::SwitchInt { ref discr, switch_ty: _, targets: _ } => {
    652 ( 0.00%)                  self.consume_operand(loc, (discr, span), flow_state);
      .                       }
      .                       TerminatorKind::Drop { place, target: _, unwind: _ } => {
      .                           debug!(
      .                               "visit_terminator_drop \
      .                                loc: {:?} term: {:?} place: {:?} span: {:?}",
      .                               loc, term, place, span
      .                           );
      .           
-- line 703 ----------------------------------------
-- line 714 ----------------------------------------
      .                           value: ref new_value,
      .                           target: _,
      .                           unwind: _,
      .                       } => {
      .                           self.mutate_place(loc, (drop_place, span), Deep, flow_state);
      .                           self.consume_operand(loc, (new_value, span), flow_state);
      .                       }
      .                       TerminatorKind::Call {
    765 ( 0.00%)                  ref func,
      .                           ref args,
      .                           ref destination,
      .                           cleanup: _,
      .                           from_hir_call: _,
      .                           fn_span: _,
      .                       } => {
  2,040 ( 0.00%)                  self.consume_operand(loc, (func, span), flow_state);
      .                           for arg in args {
  2,610 ( 0.00%)                      self.consume_operand(loc, (arg, span), flow_state);
      .                           }
    995 ( 0.00%)                  if let Some((dest, _ /*bb*/)) = *destination {
  2,760 ( 0.00%)                      self.mutate_place(loc, (dest, span), Deep, flow_state);
      .                           }
      .                       }
  1,776 ( 0.00%)              TerminatorKind::Assert { ref cond, expected: _, ref msg, target: _, cleanup: _ } => {
    296 ( 0.00%)                  self.consume_operand(loc, (cond, span), flow_state);
      .                           use rustc_middle::mir::AssertKind;
    592 ( 0.00%)                  if let AssertKind::BoundsCheck { ref len, ref index } = *msg {
      .                               self.consume_operand(loc, (len, span), flow_state);
      .                               self.consume_operand(loc, (index, span), flow_state);
      .                           }
      .                       }
      .           
      .                       TerminatorKind::Yield { ref value, resume: _, resume_arg, drop: _ } => {
      .                           self.consume_operand(loc, (value, span), flow_state);
      .                           self.mutate_place(loc, (resume_arg, span), Deep, flow_state);
-- line 748 ----------------------------------------
-- line 790 ----------------------------------------
      .                       | TerminatorKind::Resume
      .                       | TerminatorKind::Return
      .                       | TerminatorKind::GeneratorDrop
      .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
      .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ } => {
      .                           // no data used, thus irrelevant to borrowck
      .                       }
      .                   }
  7,656 ( 0.00%)      }
      .           
  7,840 ( 0.00%)      fn visit_terminator_after_primary_effect(
      .                   &mut self,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .                   term: &'cx Terminator<'tcx>,
      .                   loc: Location,
      .               ) {
  1,120 ( 0.00%)          let span = term.source_info.span;
      .           
  4,480 ( 0.00%)          match term.kind {
      .                       TerminatorKind::Yield { value: _, resume: _, resume_arg: _, drop: _ } => {
      .                           if self.movable_generator {
      .                               // Look for any active borrows to locals
      .                               let borrow_set = self.borrow_set.clone();
      .                               for i in flow_state.borrows.iter() {
      .                                   let borrow = &borrow_set[i];
      .                                   self.check_for_local_borrow(borrow, span);
      .                               }
-- line 816 ----------------------------------------
-- line 817 ----------------------------------------
      .                           }
      .                       }
      .           
      .                       TerminatorKind::Resume | TerminatorKind::Return | TerminatorKind::GeneratorDrop => {
      .                           // Returning from the function implicitly kills storage for all locals and statics.
      .                           // Often, the storage will already have been killed by an explicit
      .                           // StorageDead, but we don't always emit those (notably on unwind paths),
      .                           // so this "extra check" serves as a kind of backup.
    222 ( 0.00%)                  let borrow_set = self.borrow_set.clone();
      .                           for i in flow_state.borrows.iter() {
      .                               let borrow = &borrow_set[i];
      .                               self.check_for_invalidation_at_exit(loc, borrow, span);
      .                           }
      .                       }
      .           
      .                       TerminatorKind::Abort
      .                       | TerminatorKind::Assert { .. }
-- line 833 ----------------------------------------
-- line 836 ----------------------------------------
      .                       | TerminatorKind::DropAndReplace { .. }
      .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
      .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ }
      .                       | TerminatorKind::Goto { .. }
      .                       | TerminatorKind::SwitchInt { .. }
      .                       | TerminatorKind::Unreachable
      .                       | TerminatorKind::InlineAsm { .. } => {}
      .                   }
  8,960 ( 0.00%)      }
      .           }
      .           
      .           use self::AccessDepth::{Deep, Shallow};
      .           use self::ReadOrWrite::{Activation, Read, Reservation, Write};
      .           
      .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
      .           enum ArtificialField {
      .               ArrayLength,
-- line 852 ----------------------------------------
-- line 913 ----------------------------------------
      .           /// When checking permissions for a place access, this flag is used to indicate that an immutable
      .           /// local place can be mutated.
      .           //
      .           // FIXME: @nikomatsakis suggested that this flag could be removed with the following modifications:
      .           // - Merge `check_access_permissions()` and `check_if_reassignment_to_immutable_state()`.
      .           // - Split `is_mutable()` into `is_assignable()` (can be directly assigned) and
      .           //   `is_declared_mutable()`.
      .           // - Take flow state into consideration in `is_assignable()` for local variables.
  2,633 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
      .           enum LocalMutationIsAllowed {
      .               Yes,
      .               /// We want use of immutable upvars to cause a "write to immutable upvar"
      .               /// error, not an "reassignment" error.
      .               ExceptUpvars,
      .               No,
      .           }
      .           
-- line 929 ----------------------------------------
-- line 970 ----------------------------------------
      .               }
      .           
      .               /// Checks an access to the given place to see if it is allowed. Examines the set of borrows
      .               /// that are in scope, as well as which paths have been initialized, to ensure that (a) the
      .               /// place is initialized and (b) it is not borrowed in some way that would prevent this
      .               /// access.
      .               ///
      .               /// Returns `true` if an error is reported.
133,328 ( 0.02%)      fn access_place(
      .                   &mut self,
      .                   location: Location,
      .                   place_span: (Place<'tcx>, Span),
      .                   kind: (AccessDepth, ReadOrWrite),
      .                   is_local_mutation_allowed: LocalMutationIsAllowed,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
      .                   let (sd, rw) = kind;
      .           
 33,332 ( 0.00%)          if let Activation(_, borrow_index) = rw {
     20 ( 0.00%)              if self.reservation_error_reported.contains(&place_span.0) {
      .                           debug!(
      .                               "skipping access_place for activation of invalid reservation \
      .                                place: {:?} borrow_index: {:?}",
      .                               place_span.0, borrow_index
      .                           );
      .                           return;
      .                       }
      .                   }
      .           
      .                   // Check is_empty() first because it's the common case, and doing that
      .                   // way we avoid the clone() call.
  8,333 ( 0.00%)          if !self.access_place_error_reported.is_empty()
      .                       && self.access_place_error_reported.contains(&(place_span.0, place_span.1))
      .                   {
      .                       debug!(
      .                           "access_place: suppressing error place_span=`{:?}` kind=`{:?}`",
      .                           place_span, kind
      .                       );
      .                       return;
      .                   }
      .           
 49,998 ( 0.01%)          let mutability_error = self.check_access_permissions(
 33,332 ( 0.00%)              place_span,
      .                       rw,
      .                       is_local_mutation_allowed,
      .                       flow_state,
      .                       location,
      .                   );
      .                   let conflict_error =
 91,663 ( 0.01%)              self.check_access_for_conflict(location, place_span, sd, rw, flow_state);
      .           
 24,999 ( 0.00%)          if let (Activation(_, borrow_idx), true) = (kind.1, conflict_error) {
      .                       // Suppress this warning when there's an error being emitted for the
      .                       // same borrow: fixing the error is likely to fix the warning.
      .                       self.reservation_warnings.remove(&borrow_idx);
      .                   }
      .           
 24,999 ( 0.00%)          if conflict_error || mutability_error {
      .                       debug!("access_place: logging error place_span=`{:?}` kind=`{:?}`", place_span, kind);
      .           
      .                       self.access_place_error_reported.insert((place_span.0, place_span.1));
      .                   }
 66,664 ( 0.01%)      }
      .           
      .               fn check_access_for_conflict(
      .                   &mut self,
      .                   location: Location,
      .                   place_span: (Place<'tcx>, Span),
      .                   sd: AccessDepth,
      .                   rw: ReadOrWrite,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) -> bool {
      .                   debug!(
      .                       "check_access_for_conflict(location={:?}, place_span={:?}, sd={:?}, rw={:?})",
      .                       location, place_span, sd, rw,
      .                   );
      .           
  8,333 ( 0.00%)          let mut error_reported = false;
 24,999 ( 0.00%)          let tcx = self.infcx.tcx;
      .                   let body = self.body;
 16,666 ( 0.00%)          let borrow_set = self.borrow_set.clone();
      .           
      .                   // Use polonius output if it has been enabled.
 16,666 ( 0.00%)          let polonius_output = self.polonius_output.clone();
      .                   let borrows_in_scope = if let Some(polonius) = &polonius_output {
      .                       let location = self.location_table.start_index(location);
      .                       Either::Left(polonius.errors_at(location).iter().copied())
      .                   } else {
      .                       Either::Right(flow_state.borrows.iter())
      .                   };
      .           
108,329 ( 0.01%)          each_borrow_involving_path(
      .                       self,
      .                       tcx,
      .                       body,
      .                       location,
 49,998 ( 0.01%)              (sd, place_span.0),
      .                       &borrow_set,
 49,998 ( 0.01%)              borrows_in_scope,
 91,793 ( 0.01%)              |this, borrow_index, borrow| match (rw, borrow.kind) {
      .                           // Obviously an activation is compatible with its own
      .                           // reservation (or even prior activating uses of same
      .                           // borrow); so don't check if they interfere.
      .                           //
      .                           // NOTE: *reservations* do conflict with themselves;
      .                           // thus aren't injecting unsoundenss w/ this check.)
     10 ( 0.00%)                  (Activation(_, activating), _) if activating == borrow_index => {
      .                               debug!(
      .                                   "check_access_for_conflict place_span: {:?} sd: {:?} rw: {:?} \
      .                                    skipping {:?} b/c activation of same borrow_index",
      .                                   place_span,
      .                                   sd,
      .                                   rw,
      .                                   (borrow_index, borrow),
      .                               );
-- line 1084 ----------------------------------------
-- line 1179 ----------------------------------------
      .                                   }
      .                               }
      .                               Control::Break
      .                           }
      .                       },
      .                   );
      .           
      .                   error_reported
 24,999 ( 0.00%)      }
      .           
 29,560 ( 0.00%)      fn mutate_place(
      .                   &mut self,
      .                   location: Location,
      .                   place_span: (Place<'tcx>, Span),
      .                   kind: AccessDepth,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
      .                   // Write of P[i] or *P requires P init'd.
 26,604 ( 0.00%)          self.check_if_assigned_path_is_moved(location, place_span, flow_state);
      .           
      .                   // Special case: you can assign an immutable local variable
      .                   // (e.g., `x = ...`) so long as it has never been initialized
      .                   // before (at this point in the flow).
  2,956 ( 0.00%)          if let Some(local) = place_span.0.as_local() {
 11,696 ( 0.00%)              if let Mutability::Not = self.body.local_decls[local].mutability {
      .                           // check for reassignments to immutable local variables
      .                           self.check_if_reassignment_to_immutable_state(
      .                               location, local, place_span, flow_state,
      .                           );
      .                           return;
      .                       }
      .                   }
      .           
      .                   // Otherwise, use the normal access permission rules.
 31,812 ( 0.00%)          self.access_place(
      .                       location,
 10,604 ( 0.00%)              place_span,
      .                       (kind, Write(WriteKind::Mutate)),
      .                       LocalMutationIsAllowed::No,
      .                       flow_state,
      .                   );
 23,648 ( 0.00%)      }
      .           
      .               fn consume_rvalue(
      .                   &mut self,
      .                   location: Location,
      .                   (rvalue, span): (&'cx Rvalue<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
 16,356 ( 0.00%)          match *rvalue {
    138 ( 0.00%)              Rvalue::Ref(_ /*rgn*/, bk, place) => {
    524 ( 0.00%)                  let access_kind = match bk {
      .                               BorrowKind::Shallow => {
      .                                   (Shallow(Some(ArtificialField::ShallowBorrow)), Read(ReadKind::Borrow(bk)))
      .                               }
      .                               BorrowKind::Shared => (Deep, Read(ReadKind::Borrow(bk))),
      .                               BorrowKind::Unique | BorrowKind::Mut { .. } => {
      .                                   let wk = WriteKind::MutableBorrow(bk);
     28 ( 0.00%)                          if allow_two_phase_borrow(bk) {
      .                                       (Deep, Reservation(wk))
      .                                   } else {
      .                                       (Deep, Write(wk))
      .                                   }
      .                               }
      .                           };
      .           
    966 ( 0.00%)                  self.access_place(
      .                               location,
    184 ( 0.00%)                      (place, span),
      .                               access_kind,
      .                               LocalMutationIsAllowed::No,
      .                               flow_state,
      .                           );
      .           
      .                           let action = if bk == BorrowKind::Shallow {
      .                               InitializationRequiringAction::MatchOn
      .                           } else {
      .                               InitializationRequiringAction::Borrow
      .                           };
      .           
    322 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
      .                               location,
      .                               action,
    322 ( 0.00%)                      (place.as_ref(), span),
      .                               flow_state,
      .                           );
      .                       }
      .           
      .                       Rvalue::AddressOf(mutability, place) => {
      .                           let access_kind = match mutability {
      .                               Mutability::Mut => (
      .                                   Deep,
-- line 1270 ----------------------------------------
-- line 1302 ----------------------------------------
      .                       }
      .           
      .                       Rvalue::Len(place) | Rvalue::Discriminant(place) => {
      .                           let af = match *rvalue {
      .                               Rvalue::Len(..) => Some(ArtificialField::ArrayLength),
      .                               Rvalue::Discriminant(..) => None,
      .                               _ => unreachable!(),
      .                           };
     64 ( 0.00%)                  self.access_place(
      .                               location,
     16 ( 0.00%)                      (place, span),
      .                               (Shallow(af), Read(ReadKind::Copy)),
      .                               LocalMutationIsAllowed::No,
      .                               flow_state,
      .                           );
     28 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
      .                               location,
      .                               InitializationRequiringAction::Use,
     28 ( 0.00%)                      (place.as_ref(), span),
      .                               flow_state,
      .                           );
      .                       }
      .           
      .                       Rvalue::BinaryOp(_bin_op, box (ref operand1, ref operand2))
      .                       | Rvalue::CheckedBinaryOp(_bin_op, box (ref operand1, ref operand2)) => {
  5,150 ( 0.00%)                  self.consume_operand(location, (operand1, span), flow_state);
  3,605 ( 0.00%)                  self.consume_operand(location, (operand2, span), flow_state);
      .                       }
      .           
      .                       Rvalue::NullaryOp(_op, _ty) => {
      .                           // nullary ops take no dynamic input; no borrowck effect.
      .                       }
      .           
      .                       Rvalue::Aggregate(ref aggregate_kind, ref operands) => {
      .                           // We need to report back the list of mutable upvars that were
      .                           // moved into the closure and subsequently used by the closure,
      .                           // in order to populate our used_mut set.
  2,043 ( 0.00%)                  match **aggregate_kind {
      .                               AggregateKind::Closure(def_id, _) | AggregateKind::Generator(def_id, _, _) => {
      .                                   let BorrowCheckResult { used_mut_upvars, .. } =
      .                                       self.infcx.tcx.mir_borrowck(def_id.expect_local());
      .                                   debug!("{:?} used_mut_upvars={:?}", def_id, used_mut_upvars);
      .                                   for field in used_mut_upvars {
      .                                       self.propagate_closure_used_mut_upvar(&operands[field.index()]);
      .                                   }
      .                               }
-- line 1347 ----------------------------------------
-- line 1448 ----------------------------------------
      .                               }
      .                               _ => propagate_closure_used_mut_place(self, place),
      .                           }
      .                       }
      .                       Operand::Constant(..) => {}
      .                   }
      .               }
      .           
 43,908 ( 0.01%)      fn consume_operand(
      .                   &mut self,
      .                   location: Location,
      .                   (operand, span): (&'cx Operand<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
 30,542 ( 0.00%)          match *operand {
  2,946 ( 0.00%)              Operand::Copy(place) => {
      .                           // copy of place: check if this is "copy of frozen path"
      .                           // (FIXME: see check_loans.rs)
  5,892 ( 0.00%)                  self.access_place(
      .                               location,
  4,910 ( 0.00%)                      (place, span),
      .                               (Deep, Read(ReadKind::Copy)),
      .                               LocalMutationIsAllowed::No,
      .                               flow_state,
      .                           );
      .           
      .                           // Finally, check if path was already moved.
      .                           self.check_if_path_or_subpath_is_moved(
      .                               location,
      .                               InitializationRequiringAction::Use,
      .                               (place.as_ref(), span),
      .                               flow_state,
      .                           );
      .                       }
  6,777 ( 0.00%)              Operand::Move(place) => {
      .                           // move of place: check if this is move of already borrowed path
 19,935 ( 0.00%)                  self.access_place(
      .                               location,
 11,295 ( 0.00%)                      (place, span),
      .                               (Deep, Write(WriteKind::Move)),
      .                               LocalMutationIsAllowed::Yes,
      .                               flow_state,
      .                           );
      .           
      .                           // Finally, check if path was already moved.
  5,496 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
      .                               location,
      .                               InitializationRequiringAction::Use,
  4,122 ( 0.00%)                      (place.as_ref(), span),
      .                               flow_state,
      .                           );
      .                       }
      .                       Operand::Constant(_) => {}
      .                   }
 29,272 ( 0.00%)      }
      .           
      .               /// Checks whether a borrow of this place is invalidated when the function
      .               /// exits
      .               fn check_for_invalidation_at_exit(
      .                   &mut self,
      .                   location: Location,
      .                   borrow: &BorrowData<'tcx>,
      .                   span: Span,
      .               ) {
      .                   debug!("check_for_invalidation_at_exit({:?})", borrow);
      2 ( 0.00%)          let place = borrow.borrowed_place;
      .                   let mut root_place = PlaceRef { local: place.local, projection: &[] };
      .           
      .                   // FIXME(nll-rfc#40): do more precise destructor tracking here. For now
      .                   // we just know that all locals are dropped at function exit (otherwise
      .                   // we'll have a memory leak) and assume that all statics have a destructor.
      .                   //
      .                   // FIXME: allow thread-locals to borrow other thread locals?
      .           
      .                   let (might_be_alive, will_be_dropped) =
     14 ( 0.00%)              if self.body.local_decls[root_place.local].is_ref_to_thread_local() {
      .                           // Thread-locals might be dropped after the function exits
      .                           // We have to dereference the outer reference because
      .                           // borrows don't conflict behind shared references.
      .                           root_place.projection = DEREF_PROJECTION;
      .                           (true, true)
      .                       } else {
      .                           (false, self.locals_are_invalidated_at_exit)
      .                       };
      .           
     10 ( 0.00%)          if !will_be_dropped {
      .                       debug!("place_is_invalidated_at_exit({:?}) - won't be dropped", place);
      .                       return;
      .                   }
      .           
      .                   let sd = if might_be_alive { Deep } else { Shallow(None) };
      .           
     24 ( 0.00%)          if places_conflict::borrow_conflicts_with_place(
      4 ( 0.00%)              self.infcx.tcx,
      .                       &self.body,
      .                       place,
      .                       borrow.kind,
      8 ( 0.00%)              root_place,
      .                       sd,
      .                       places_conflict::PlaceConflictBias::Overlap,
      .                   ) {
      .                       debug!("check_for_invalidation_at_exit({:?}): INVALID", place);
      .                       // FIXME: should be talking about the region lifetime instead
      .                       // of just a span here.
      .                       let span = self.infcx.tcx.sess.source_map().end_point(span);
      .                       self.report_borrowed_value_does_not_live_long_enough(
-- line 1553 ----------------------------------------
-- line 1573 ----------------------------------------
      .                       err.buffer(&mut self.errors_buffer);
      .                   }
      .               }
      .           
      .               fn check_activations(&mut self, location: Location, span: Span, flow_state: &Flows<'cx, 'tcx>) {
      .                   // Two-phase borrow support: For each activation that is newly
      .                   // generated at this statement, check if it interferes with
      .                   // another borrow.
 17,420 ( 0.00%)          let borrow_set = self.borrow_set.clone();
 33,730 ( 0.00%)          for &borrow_index in borrow_set.activations_at_location(location) {
      .                       let borrow = &borrow_set[borrow_index];
      .           
      .                       // only mutable borrows should be 2-phase
     50 ( 0.00%)              assert!(match borrow.kind {
      .                           BorrowKind::Shared | BorrowKind::Shallow => false,
      .                           BorrowKind::Unique | BorrowKind::Mut { .. } => true,
      .                       });
      .           
    120 ( 0.00%)              self.access_place(
      .                           location,
     60 ( 0.00%)                  (borrow.borrowed_place, span),
     90 ( 0.00%)                  (Deep, Activation(WriteKind::MutableBorrow(borrow.kind), borrow_index)),
      .                           LocalMutationIsAllowed::No,
      .                           flow_state,
      .                       );
      .                       // We do not need to call `check_if_path_or_subpath_is_moved`
      .                       // again, as we already called it when we made the
      .                       // initial reservation.
      .                   }
      .               }
-- line 1602 ----------------------------------------
-- line 1606 ----------------------------------------
      .                   location: Location,
      .                   local: Local,
      .                   place_span: (Place<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
      .                   debug!("check_if_reassignment_to_immutable_state({:?})", local);
      .           
      .                   // Check if any of the initializiations of `local` have happened yet:
  1,830 ( 0.00%)          if let Some(init_index) = self.is_local_ever_initialized(local, flow_state) {
      .                       // And, if so, report an error.
      .                       let init = &self.move_data.inits[init_index];
      .                       let span = init.span(&self.body);
      .                       self.report_illegal_reassignment(location, place_span, span, place_span.0);
      .                   }
      .               }
      .           
 44,824 ( 0.01%)      fn check_if_full_path_is_moved(
      .                   &mut self,
      .                   location: Location,
      .                   desired_action: InitializationRequiringAction,
      .                   place_span: (PlaceRef<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
      .                   let maybe_uninits = &flow_state.uninits;
      .           
-- line 1630 ----------------------------------------
-- line 1660 ----------------------------------------
      .                   // Therefore, if we seek out the *closest* prefix for which we
      .                   // have a MovePath, that should capture the initialization
      .                   // state for the place scenario.
      .                   //
      .                   // This code covers scenarios 1, 2, and 3.
      .           
      .                   debug!("check_if_full_path_is_moved place: {:?}", place_span.0);
      .                   let (prefix, mpi) = self.move_path_closest_to(place_span.0);
  3,448 ( 0.00%)          if maybe_uninits.contains(mpi) {
      .                       self.report_use_of_moved_or_uninitialized(
      .                           location,
      .                           desired_action,
      .                           (prefix, place_span.0, place_span.1),
      .                           mpi,
      .                       );
      .                   } // Only query longest prefix with a MovePath, not further
      .                   // ancestors; dataflow recurs on children when parents
      .                   // move (to support partial (re)inits).
      .                   //
      .                   // (I.e., querying parents breaks scenario 7; but may want
      .                   // to do such a query based on partial-init feature-gate.)
 27,584 ( 0.00%)      }
      .           
      .               /// Subslices correspond to multiple move paths, so we iterate through the
      .               /// elements of the base array. For each element we check
      .               ///
      .               /// * Does this element overlap with our slice.
      .               /// * Is any part of it uninitialized.
      .               fn check_if_subslice_element_is_moved(
      .                   &mut self,
-- line 1689 ----------------------------------------
-- line 1719 ----------------------------------------
      .                                       return; // don't bother finding other problems.
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   }
      .               }
      .           
 37,576 ( 0.00%)      fn check_if_path_or_subpath_is_moved(
      .                   &mut self,
      .                   location: Location,
      .                   desired_action: InitializationRequiringAction,
      .                   place_span: (PlaceRef<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
  6,832 ( 0.00%)          let maybe_uninits = &flow_state.uninits;
      .           
      .                   // Bad scenarios:
      .                   //
      .                   // 1. Move of `a.b.c`, use of `a` or `a.b`
      .                   //    partial initialization support, one might have `a.x`
      .                   //    initialized but not `a.b`.
      .                   // 2. All bad scenarios from `check_if_full_path_is_moved`
      .                   //
-- line 1742 ----------------------------------------
-- line 1743 ----------------------------------------
      .                   // OK scenarios:
      .                   //
      .                   // 3. Move of `a.b.c`, use of `a.b.d`
      .                   // 4. Uninitialized `a.x`, initialized `a.b`, use of `a.b`
      .                   // 5. Copied `(a.b: &_)`, use of `*(a.b).c`; note that `a.b`
      .                   //    must have been initialized for the use to be sound.
      .                   // 6. Move of `a.b.c` then reinit of `a.b.c.d`, use of `a.b.c.d`
      .           
 23,912 ( 0.00%)          self.check_if_full_path_is_moved(location, desired_action, place_span, flow_state);
      .           
  2,148 ( 0.00%)          if let Some((place_base, ProjectionElem::Subslice { from, to, from_end: false })) =
  3,416 ( 0.00%)              place_span.0.last_projection()
      .                   {
      .                       let place_ty = place_base.ty(self.body(), self.infcx.tcx);
      .                       if let ty::Array(..) = place_ty.ty.kind() {
      .                           self.check_if_subslice_element_is_moved(
      .                               location,
      .                               desired_action,
      .                               (place_base, place_span.1),
      .                               maybe_uninits,
-- line 1762 ----------------------------------------
-- line 1772 ----------------------------------------
      .                   //
      .                   // (Distinct from handling of scenarios 1+2+4 above because
      .                   // `place` does not interfere with suffixes of its prefixes,
      .                   // e.g., `a.b.c` does not interfere with `a.b.d`)
      .                   //
      .                   // This code covers scenario 1.
      .           
      .                   debug!("check_if_path_or_subpath_is_moved place: {:?}", place_span.0);
 13,664 ( 0.00%)          if let Some(mpi) = self.move_path_for_place(place_span.0) {
 13,396 ( 0.00%)              let uninit_mpi = self
      .                           .move_data
      .                           .find_in_move_path_or_its_descendants(mpi, |mpi| maybe_uninits.contains(mpi));
      .           
  6,698 ( 0.00%)              if let Some(uninit_mpi) = uninit_mpi {
      .                           self.report_use_of_moved_or_uninitialized(
      .                               location,
      .                               desired_action,
      .                               (place_span.0, place_span.0, place_span.1),
      .                               uninit_mpi,
      .                           );
      .                           return; // don't bother finding other problems.
      .                       }
      .                   }
 27,328 ( 0.00%)      }
      .           
      .               /// Currently MoveData does not store entries for all places in
      .               /// the input MIR. For example it will currently filter out
      .               /// places that are Copy; thus we do not track places of shared
      .               /// reference type. This routine will walk up a place along its
      .               /// prefixes, searching for a foundational place that *is*
      .               /// tracked in the MoveData.
      .               ///
      .               /// An Err result includes a tag indicated why the search failed.
      .               /// Currently this can only occur if the place is built off of a
      .               /// static variable, as we do not track those in the MoveData.
      .               fn move_path_closest_to(&mut self, place: PlaceRef<'tcx>) -> (PlaceRef<'tcx>, MovePathIndex) {
 44,824 ( 0.01%)          match self.move_data.rev_lookup.find(place) {
      .                       LookupResult::Parent(Some(mpi)) | LookupResult::Exact(mpi) => {
      .                           (self.move_data.move_paths[mpi].place.as_ref(), mpi)
      .                       }
      .                       LookupResult::Parent(None) => panic!("should have move path for every Local"),
      .                   }
      .               }
      .           
      .               fn move_path_for_place(&mut self, place: PlaceRef<'tcx>) -> Option<MovePathIndex> {
      .                   // If returns None, then there is no move path corresponding
      .                   // to a direct owner of `place` (which means there is nothing
      .                   // that borrowck tracks for its analysis).
      .           
 30,744 ( 0.00%)          match self.move_data.rev_lookup.find(place) {
      .                       LookupResult::Parent(_) => None,
      .                       LookupResult::Exact(mpi) => Some(mpi),
      .                   }
      .               }
      .           
      .               fn check_if_assigned_path_is_moved(
      .                   &mut self,
      .                   location: Location,
      .                   (place, span): (Place<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
      .                   debug!("check_if_assigned_path_is_moved place: {:?}", place);
      .           
      .                   // None case => assigning to `x` does not require `x` be initialized.
     32 ( 0.00%)          for (place_base, elem) in place.iter_projections().rev() {
    128 ( 0.00%)              match elem {
      .                           ProjectionElem::Index(_/*operand*/) |
      .                           ProjectionElem::ConstantIndex { .. } |
      .                           // assigning to P[i] requires P to be valid.
      .                           ProjectionElem::Downcast(_/*adt_def*/, _/*variant_idx*/) =>
      .                           // assigning to (P->variant) is okay if assigning to `P` is okay
      .                           //
      .                           // FIXME: is this true even if P is an adt with a dtor?
      .                           { }
      .           
      .                           // assigning to (*P) requires P to be initialized
      .                           ProjectionElem::Deref => {
    224 ( 0.00%)                      self.check_if_full_path_is_moved(
      .                                   location, InitializationRequiringAction::Use,
    192 ( 0.00%)                          (place_base, span), flow_state);
      .                               // (base initialized; no need to
      .                               // recur further)
      .                               break;
      .                           }
      .           
      .                           ProjectionElem::Subslice { .. } => {
      .                               panic!("we don't allow assignments to subslices, location: {:?}",
      .                                      location);
-- line 1859 ----------------------------------------
-- line 1979 ----------------------------------------
      .                   }
      .               }
      .           
      .               /// Checks the permissions for the given place and read or write kind
      .               ///
      .               /// Returns `true` if an error is reported.
      .               fn check_access_permissions(
      .                   &mut self,
 16,666 ( 0.00%)          (place, span): (Place<'tcx>, Span),
      .                   kind: ReadOrWrite,
      .                   is_local_mutation_allowed: LocalMutationIsAllowed,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .                   location: Location,
      .               ) -> bool {
      .                   debug!(
      .                       "check_access_permissions({:?}, {:?}, is_local_mutation_allowed: {:?})",
      .                       place, kind, is_local_mutation_allowed
      .                   );
      .           
      .                   let error_access;
      .                   let the_place_err;
      .           
131,437 ( 0.02%)          match kind {
      .                       Reservation(WriteKind::MutableBorrow(
      .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
      .                       ))
      .                       | Write(WriteKind::MutableBorrow(
      .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
      .                       )) => {
    140 ( 0.00%)                  let is_local_mutation_allowed = match borrow_kind {
      .                               BorrowKind::Unique => LocalMutationIsAllowed::Yes,
      .                               BorrowKind::Mut { .. } => is_local_mutation_allowed,
      .                               BorrowKind::Shared | BorrowKind::Shallow => unreachable!(),
      .                           };
     98 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
      .                               Ok(root_place) => {
      .                                   self.add_used_mut(root_place, flow_state);
      .                                   return false;
      .                               }
      .                               Err(place_err) => {
      .                                   error_access = AccessKind::MutableBorrow;
      .                                   the_place_err = place_err;
      .                               }
      .                           }
      .                       }
      .                       Reservation(WriteKind::Mutate) | Write(WriteKind::Mutate) => {
 18,557 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
      .                               Ok(root_place) => {
      .                                   self.add_used_mut(root_place, flow_state);
      .                                   return false;
      .                               }
      .                               Err(place_err) => {
      .                                   error_access = AccessKind::Mutate;
      .                                   the_place_err = place_err;
      .                               }
-- line 2033 ----------------------------------------
-- line 2041 ----------------------------------------
      .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
      .                       )
      .                       | Write(
      .                           WriteKind::Move
      .                           | WriteKind::StorageDeadOrDrop
      .                           | WriteKind::MutableBorrow(BorrowKind::Shared)
      .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
      .                       ) => {
  9,280 ( 0.00%)                  if let (Err(_), true) = (
 32,480 ( 0.00%)                      self.is_mutable(place.as_ref(), is_local_mutation_allowed),
      .                               self.errors_buffer.is_empty(),
      .                           ) {
      .                               // rust-lang/rust#46908: In pure NLL mode this code path should be
      .                               // unreachable, but we use `delay_span_bug` because we can hit this when
      .                               // dereferencing a non-Copy raw pointer *and* have `-Ztreat-err-as-bug`
      .                               // enabled. We don't want to ICE for that case, as other errors will have
      .                               // been emitted (#52262).
      .                               self.infcx.tcx.sess.delay_span_bug(
-- line 2058 ----------------------------------------
-- line 2094 ----------------------------------------
      .                   if previously_initialized {
      .                       self.report_mutability_error(place, span, the_place_err, error_access, location);
      .                       true
      .                   } else {
      .                       false
      .                   }
      .               }
      .           
 14,660 ( 0.00%)      fn is_local_ever_initialized(
      .                   &self,
      .                   local: Local,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) -> Option<InitIndex> {
  8,796 ( 0.00%)          let mpi = self.move_data.rev_lookup.find_local(local);
  2,932 ( 0.00%)          let ii = &self.move_data.init_path_map[mpi];
 12,520 ( 0.00%)          for &index in ii {
  7,448 ( 0.00%)              if flow_state.ever_inits.contains(index) {
      .                           return Some(index);
      .                       }
      .                   }
      .                   None
 11,728 ( 0.00%)      }
      .           
      .               /// Adds the place into the used mutable variables set
 10,660 ( 0.00%)      fn add_used_mut(&mut self, root_place: RootPlace<'tcx>, flow_state: &Flows<'cx, 'tcx>) {
     64 ( 0.00%)          match root_place {
  7,995 ( 0.00%)              RootPlace { place_local: local, place_projection: [], is_local_mutation_allowed } => {
      .                           // If the local may have been initialized, and it is now currently being
      .                           // mutated, then it is justified to be annotated with the `mut`
      .                           // keyword, since the mutation may be a possible reassignment.
  5,260 ( 0.00%)                  if is_local_mutation_allowed != LocalMutationIsAllowed::Yes
  7,881 ( 0.00%)                      && self.is_local_ever_initialized(local, flow_state).is_some()
      .                           {
      .                               self.used_mut.insert(local);
      .                           }
      .                       }
      .                       RootPlace {
      .                           place_local: _,
      .                           place_projection: _,
      .                           is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
      .                       } => {}
      .                       RootPlace {
     32 ( 0.00%)                  place_local,
     32 ( 0.00%)                  place_projection: place_projection @ [.., _],
      .                           is_local_mutation_allowed: _,
      .                       } => {
     64 ( 0.00%)                  if let Some(field) = self.is_upvar_field_projection(PlaceRef {
      .                               local: place_local,
      .                               projection: place_projection,
      .                           }) {
      .                               self.used_mut_upvars.push(field);
      .                           }
      .                       }
      .                   }
 10,080 ( 0.00%)      }
      .           
      .               /// Whether this value can be written or borrowed mutably.
      .               /// Returns the root place if the place passed in is a projection.
 85,602 ( 0.01%)      fn is_mutable(
      .                   &self,
      .                   place: PlaceRef<'tcx>,
      .                   is_local_mutation_allowed: LocalMutationIsAllowed,
      .               ) -> Result<RootPlace<'tcx>, PlaceRef<'tcx>> {
      .                   debug!("is_mutable: place={:?}, is_local...={:?}", place, is_local_mutation_allowed);
 24,364 ( 0.00%)          match place.last_projection() {
      .                       None => {
  7,273 ( 0.00%)                  let local = &self.body.local_decls[place.local];
 21,819 ( 0.00%)                  match local.mutability {
    568 ( 0.00%)                      Mutability::Not => match is_local_mutation_allowed {
  1,704 ( 0.00%)                          LocalMutationIsAllowed::Yes => Ok(RootPlace {
      .                                       place_local: place.local,
      .                                       place_projection: place.projection,
      .                                       is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
      .                                   }),
      .                                   LocalMutationIsAllowed::ExceptUpvars => Ok(RootPlace {
      .                                       place_local: place.local,
      .                                       place_projection: place.projection,
      .                                       is_local_mutation_allowed: LocalMutationIsAllowed::ExceptUpvars,
      .                                   }),
      .                                   LocalMutationIsAllowed::No => Err(place),
      .                               },
 13,978 ( 0.00%)                      Mutability::Mut => Ok(RootPlace {
      .                                   place_local: place.local,
      .                                   place_projection: place.projection,
      .                                   is_local_mutation_allowed,
      .                               }),
      .                           }
      .                       }
      .                       Some((place_base, elem)) => {
  1,527 ( 0.00%)                  match elem {
      .                               ProjectionElem::Deref => {
     76 ( 0.00%)                          let base_ty = place_base.ty(self.body(), self.infcx.tcx).ty;
      .           
      .                                   // Check the kind of deref to decide
    132 ( 0.00%)                          match base_ty.kind() {
      .                                       ty::Ref(_, _, mutbl) => {
     12 ( 0.00%)                                  match mutbl {
      .                                               // Shared borrowed data is never mutable
      .                                               hir::Mutability::Not => Err(place),
      .                                               // Mutably borrowed data is mutable, but only if we have a
      .                                               // unique path to the `&mut`
      .                                               hir::Mutability::Mut => {
     12 ( 0.00%)                                          let mode = match self.is_upvar_field_projection(place) {
      .                                                       Some(field) if self.upvars[field.index()].by_ref => {
      .                                                           is_local_mutation_allowed
      .                                                       }
      .                                                       _ => LocalMutationIsAllowed::Yes,
      .                                                   };
      .           
     36 ( 0.00%)                                          self.is_mutable(place_base, mode)
      .                                               }
      .                                           }
      .                                       }
      .                                       ty::RawPtr(tnm) => {
     64 ( 0.00%)                                  match tnm.mutbl {
      .                                               // `*const` raw pointers are not mutable
      .                                               hir::Mutability::Not => Err(place),
      .                                               // `*mut` raw pointers are always mutable, regardless of
      .                                               // context. The users have to check by themselves.
      .                                               hir::Mutability::Mut => Ok(RootPlace {
      .                                                   place_local: place.local,
      .                                                   place_projection: place.projection,
      .                                                   is_local_mutation_allowed,
-- line 2216 ----------------------------------------
-- line 2228 ----------------------------------------
      .                               // All other projections are owned by their base path, so mutable if
      .                               // base path is mutable
      .                               ProjectionElem::Field(..)
      .                               | ProjectionElem::Index(..)
      .                               | ProjectionElem::ConstantIndex { .. }
      .                               | ProjectionElem::Subslice { .. }
      .                               | ProjectionElem::Downcast(..) => {
      .                                   let upvar_field_projection = self.is_upvar_field_projection(place);
    942 ( 0.00%)                          if let Some(field) = upvar_field_projection {
      .                                       let upvar = &self.upvars[field.index()];
      .                                       debug!(
      .                                           "is_mutable: upvar.mutability={:?} local_mutation_is_allowed={:?} \
      .                                            place={:?}, place_base={:?}",
      .                                           upvar, is_local_mutation_allowed, place, place_base
      .                                       );
      .                                       match (upvar.place.mutability, is_local_mutation_allowed) {
      .                                           (
-- line 2244 ----------------------------------------
-- line 2285 ----------------------------------------
      .                                       }
      .                                   } else {
      .                                       self.is_mutable(place_base, is_local_mutation_allowed)
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   }
 62,256 ( 0.01%)      }
      .           
      .               /// If `place` is a field projection, and the field is being projected from a closure type,
      .               /// then returns the index of the field being projected. Note that this closure will always
      .               /// be `self` in the current MIR, because that is the only time we directly access the fields
      .               /// of a closure type.
      .               fn is_upvar_field_projection(&self, place_ref: PlaceRef<'tcx>) -> Option<Field> {
  4,549 ( 0.00%)          path_utils::is_upvar_field_projection(self.infcx.tcx, &self.upvars, place_ref, self.body())
      .               }
      .           }
      .           
      .           /// The degree of overlap between 2 places for borrow-checking.
      .           enum Overlap {
      .               /// The places might partially overlap - in this case, we give
      .               /// up and say that they might conflict. This occurs when
      .               /// different fields of a union are borrowed. For example,
-- line 2308 ----------------------------------------

283,575 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir               

-- line 91 ----------------------------------------
      .           // maximum of number bytes needed to fill an 8-byte-sized element on which
      .           // SipHash operates. Note that for variable-sized copies which are known to be
      .           // less than 8 bytes, this function will perform more work than necessary unless
      .           // the compiler is able to optimize the extra work away.
      .           #[inline]
      .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
      .               debug_assert!(count <= 8);
      .           
  8,811 ( 0.00%)      if count == 8 {
      .                   ptr::copy_nonoverlapping(src, dst, 8);
      .                   return;
      .               }
      .           
      .               let mut i = 0;
 12,964 ( 0.00%)      if i + 3 < count {
      .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
      .                   i += 4;
      .               }
      .           
 27,723 ( 0.00%)      if i + 1 < count {
      .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
  3,731 ( 0.00%)          i += 2
      .               }
      .           
 12,964 ( 0.00%)      if i < count {
  7,468 ( 0.00%)          *dst.add(i) = *src.add(i);
      .                   i += 1;
      .               }
      .           
      .               debug_assert_eq!(i, count);
      .           }
      .           
      .           // # Implementation
      .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
      .           
      .                   hasher
      .               }
      .           
      .               // A specialized write function for values with size <= 8.
      .               #[inline]
      .               fn short_write<T>(&mut self, x: T) {
      .                   let size = mem::size_of::<T>();
 99,634 ( 0.01%)          let nbuf = self.nbuf;
      .                   debug_assert!(size <= 8);
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
      .           
652,589 ( 0.09%)          if nbuf + size < BUFFER_SIZE {
      .                       unsafe {
      .                           // The memcpy call is optimized away because the size is known.
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
      .                       }
      .           
207,111 ( 0.03%)              self.nbuf = nbuf + size;
      .           
      .                       return;
      .                   }
      .           
 28,110 ( 0.00%)          unsafe { self.short_write_process_buffer(x) }
      .               }
      .           
      .               // A specialized write function for values with size <= 8 that should only
      .               // be called when the write would cause the buffer to fill.
      .               //
      .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
      .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
      .               // overflow) if it wasn't already.
      .               #[inline(never)]
  9,183 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
      .                   let size = mem::size_of::<T>();
  9,183 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(size <= 8);
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
      .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
      .           
      .                   // Copy first part of input into end of buffer, possibly into spill
      .                   // element. The memcpy call is optimized away because the size is known.
      .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
      .           
      .                   // Process buffer.
      .                   for i in 0..BUFFER_CAPACITY {
 91,830 ( 0.01%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
 73,464 ( 0.01%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
 82,647 ( 0.01%)              self.state.v0 ^= elem;
      .                   }
      .           
      .                   // Copy remaining input into start of buffer by copying size - 1
      .                   // elements from spill (at most size - 1 bytes could have overflowed
      .                   // into the spill). The memcpy call is optimized away because the size
      .                   // is known. And the whole copy is optimized away for size == 1.
      .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
      .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
      .           
      .                   // This function should only be called when the write fills the buffer.
      .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
      .                   // is statically known, so the branch is optimized away.
 42,783 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
 36,732 ( 0.00%)          self.processed += BUFFER_SIZE;
 18,366 ( 0.00%)      }
      .           
      .               // A write function for byte slices.
      .               #[inline]
      .               fn slice_write(&mut self, msg: &[u8]) {
      .                   let length = msg.len();
  5,927 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .           
 41,985 ( 0.01%)          if nbuf + length < BUFFER_SIZE {
      .                       unsafe {
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .           
 12,078 ( 0.00%)                  if length <= 8 {
      .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
      .                           } else {
      .                               // This memcpy is *not* optimized away.
      .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
      .                           }
      .                       }
      .           
  8,824 ( 0.00%)              self.nbuf = nbuf + length;
      .           
      .                       return;
      .                   }
      .           
  5,191 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
      .               }
      .           
      .               // A write function for byte slices that should only be called when the
      .               // write would cause the buffer to fill.
      .               //
      .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
      .               // and `msg` must contain enough bytes to initialize the rest of the element
      .               // containing the byte offset `self.nbuf`.
      .               #[inline(never)]
  4,755 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
      .                   let length = msg.len();
    951 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
      .           
      .                   // Always copy first part of input into current element of buffer.
      .                   // This function should only be called when the write fills the buffer,
      .                   // so we know that there is enough input to fill the current element.
  2,853 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
    951 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
      .           
      .                   let src = msg.as_ptr();
      .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
      .           
      .                   // Process buffer.
      .           
      .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
      .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
      .                   // We know that is true, because last step ensured we have a full
      .                   // element in the buffer.
  1,902 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
      .           
      .                   for i in 0..last {
  7,198 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
  8,149 ( 0.00%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
 14,396 ( 0.00%)              self.state.v0 ^= elem;
      .                   }
      .           
      .                   // Process the remaining element-sized chunks of input.
      .                   let mut processed = needed_in_elem;
  1,902 ( 0.00%)          let input_left = length - processed;
  1,716 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
      .                   let extra_bytes_left = input_left % ELEM_SIZE;
      .           
      .                   for _ in 0..elems_left {
    713 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
    713 ( 0.00%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
    713 ( 0.00%)              self.state.v0 ^= elem;
  1,426 ( 0.00%)              processed += ELEM_SIZE;
      .                   }
      .           
      .                   // Copy remaining input into start of buffer.
      .                   let src = msg.as_ptr().add(processed);
      .                   let dst = self.buf.as_mut_ptr() as *mut u8;
      .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
      .           
    951 ( 0.00%)          self.nbuf = extra_bytes_left;
  4,755 ( 0.00%)          self.processed += nbuf + processed;
  5,706 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn finish128(mut self) -> (u64, u64) {
      .                   debug_assert!(self.nbuf < BUFFER_SIZE);
      .           
      .                   // Process full elements in buffer.
  5,238 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
      .           
      .                   // Since we're consuming self, avoid updating members for a potential
      .                   // performance gain.
  6,984 ( 0.00%)          let mut state = self.state;
      .           
      .                   for i in 0..last {
  4,842 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
  4,842 ( 0.00%)              state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut state);
  4,842 ( 0.00%)              state.v0 ^= elem;
      .                   }
      .           
      .                   // Get remaining partial element.
  3,492 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
      .                       unsafe {
      .                           // Ensure element is initialized by writing zero bytes. At most
      .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
      .                           // to write this many because we have the spill and we maintain
      .                           // `self.nbuf` such that this write will start before the spill.
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
      .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
  1,435 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
      .                       }
      .                   } else {
      .                       0
      .                   };
      .           
      .                   // Finalize the hash.
  4,860 ( 0.00%)          let length = self.processed + self.nbuf;
  3,356 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
      .           
  1,678 ( 0.00%)          state.v3 ^= b;
      .                   Sip24Rounds::c_rounds(&mut state);
  1,678 ( 0.00%)          state.v0 ^= b;
      .           
  1,678 ( 0.00%)          state.v2 ^= 0xee;
      .                   Sip24Rounds::d_rounds(&mut state);
  5,258 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
      .           
  1,900 ( 0.00%)          state.v1 ^= 0xdd;
      .                   Sip24Rounds::d_rounds(&mut state);
  1,900 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
      .           
      .                   (_0, _1)
      .               }
      .           }
      .           
      .           impl Hasher for SipHasher128 {
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
      .           }
      .           
      .           #[derive(Debug, Clone, Default)]
      .           struct Sip24Rounds;
      .           
      .           impl Sip24Rounds {
      .               #[inline]
      .               fn c_rounds(state: &mut State) {
363,616 ( 0.05%)          compress!(state);
400,723 ( 0.05%)          compress!(state);
      .               }
      .           
      .               #[inline]
      .               fn d_rounds(state: &mut State) {
 10,512 ( 0.00%)          compress!(state);
 10,512 ( 0.00%)          compress!(state);
 10,512 ( 0.00%)          compress!(state);
  8,835 ( 0.00%)          compress!(state);
      .               }
      .           }

 72,804 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 111 ----------------------------------------
        .           const EMPTY: u8 = 0b1111_1111;
        .           
        .           /// Control byte value for a deleted bucket.
        .           const DELETED: u8 = 0b1000_0000;
        .           
        .           /// Checks whether a control byte represents a full bucket (top bit is clear).
        .           #[inline]
        .           fn is_full(ctrl: u8) -> bool {
  426,508 ( 0.06%)      ctrl & 0x80 == 0
        .           }
        .           
        .           /// Checks whether a control byte represents a special value (top bit is set).
        .           #[inline]
        .           fn is_special(ctrl: u8) -> bool {
        .               ctrl & 0x80 != 0
        .           }
        .           
        .           /// Checks whether a special control value is EMPTY (just check 1 bit).
        .           #[inline]
        .           fn special_is_empty(ctrl: u8) -> bool {
        .               debug_assert!(is_special(ctrl));
   29,529 ( 0.00%)      ctrl & 0x01 != 0
        .           }
        .           
        .           /// Primary hash function, used to select the initial bucket to probe from.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h1(hash: u64) -> usize {
        .               // On 32-bit platforms we simply ignore the higher hash bits.
        .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
        .           /// Secondary hash function, saved in the low 7 bits of the control byte.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h2(hash: u64) -> u8 {
        .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
        .               // value, some hash functions (such as FxHash) produce a usize result
        .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
        .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
6,618,967 ( 0.86%)      let top7 = hash >> (hash_len * 8 - 7);
        .               (top7 & 0x7f) as u8 // truncation
        .           }
        .           
        .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
        .           /// table size is a power of two) to visit every group of elements exactly once.
        .           ///
        .           /// A triangular probe has us jump by 1 more group every time. So first we
        .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
        .               #[inline]
        .               fn move_next(&mut self, bucket_mask: usize) {
        .                   // We should have found an empty bucket by now and ended the probe.
        .                   debug_assert!(
        .                       self.stride <= bucket_mask,
        .                       "Went past end of probe sequence"
        .                   );
        .           
   44,246 ( 0.01%)          self.stride += Group::WIDTH;
   44,246 ( 0.01%)          self.pos += self.stride;
   38,039 ( 0.00%)          self.pos &= bucket_mask;
        .               }
        .           }
        .           
        .           /// Returns the number of buckets needed to hold the given number of items,
        .           /// taking the maximum load factor into account.
        .           ///
        .           /// Returns `None` if an overflow occurs.
        .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
        .           #[cfg_attr(target_os = "emscripten", inline(never))]
        .           #[cfg_attr(not(target_os = "emscripten"), inline)]
        .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
        .               debug_assert_ne!(cap, 0);
        .           
        .               // For small tables we require at least 1 empty bucket so that lookups are
        .               // guaranteed to terminate if an element doesn't exist in the table.
   23,820 ( 0.00%)      if cap < 8 {
        .                   // We don't bother with a table size of 2 buckets since that can only
        .                   // hold a single element. Instead we skip directly to a 4 bucket table
        .                   // which can hold 3 elements.
   48,485 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
        .               }
        .           
        .               // Otherwise require 1/8 buckets to be empty (87.5% load)
        .               //
        .               // Be careful when modifying this, calculate_layout relies on the
        .               // overflow check here.
   13,278 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
        .           
        .               // Any overflows will have been caught by the checked_mul. Also, any
        .               // rounding errors from the division above will be cleaned up by
        .               // next_power_of_two (which can't overflow because of the previous division).
        .               Some(adjusted_cap.next_power_of_two())
        .           }
        .           
        .           /// Returns the maximum effective capacity for the given bucket mask, taking
        .           /// the maximum load factor into account.
        .           #[inline]
        .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
   59,814 ( 0.01%)      if bucket_mask < 8 {
        .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
        .                   // Keep in mind that the bucket mask is one less than the bucket count.
        .                   bucket_mask
        .               } else {
        .                   // For larger tables we reserve 12.5% of the slots as empty.
   17,904 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
        .               }
        .           }
        .           
        .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
        .           /// while keeping the rest of `calculate_layout_for` independent of `T`
        .           #[derive(Copy, Clone)]
        .           struct TableLayout {
        .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
        .           
        .               #[inline]
        .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   let TableLayout { size, ctrl_align } = self;
        .                   // Manual layout calculation since Layout methods are not yet stable.
        .                   let ctrl_offset =
   50,774 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
   65,991 ( 0.01%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
        .           
        .                   Some((
        .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
        .                       ctrl_offset,
        .                   ))
        .               }
        .           }
        .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
        .                   }
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub unsafe fn drop(&self) {
        .                   self.as_ptr().drop_in_place();
        .               }
        .               #[inline]
        .               pub unsafe fn read(&self) -> T {
       76 ( 0.00%)          self.as_ptr().read()
        .               }
        .               #[inline]
        .               pub unsafe fn write(&self, val: T) {
        .                   self.as_ptr().write(val);
        .               }
        .               #[inline]
        .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
        .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
        .               /// Creates a new empty hash table without allocating any memory, using the
        .               /// given allocator.
        .               ///
        .               /// In effect this returns a table with exactly 1 bucket. However we can
        .               /// leave the data pointer dangling since that bucket is never written to
        .               /// due to our load factor forcing us to always have at least 1 free bucket.
        .               #[inline]
        .               pub fn new_in(alloc: A) -> Self {
      630 ( 0.00%)          Self {
        .                       table: RawTableInner::new_in(alloc),
        .                       marker: PhantomData,
        .                   }
        .               }
        .           
        .               /// Allocates a new hash table with the given number of buckets.
        .               ///
        .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
        .               unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   Ok(Self {
       85 ( 0.00%)              table: RawTableInner::new_uninitialized(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           buckets,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
        .               /// Attempts to allocate a new hash table with at least enough capacity
        .               /// for inserting the given number of elements without reallocating.
        .               fn fallible_with_capacity(
        .                   alloc: A,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   Ok(Self {
    5,271 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           capacity,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
        .                   debug_assert_ne!(self.table.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               /// Erases an element from the table without dropping it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    3,704 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    3,704 ( 0.00%)          let index = self.bucket_index(item);
        .                   self.table.erase(index);
    7,408 ( 0.00%)      }
        .           
        .               /// Erases an element from the table, dropping it in place.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
        .                   // Erase the element from the table first since drop might panic.
    4,098 ( 0.00%)          self.erase_no_drop(&item);
        .                   item.drop();
        .               }
        .           
        .               /// Finds and erases an element from the table, dropping it in place.
        .               /// Returns true if an element was found.
        .               #[cfg(feature = "raw")]
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    3,310 ( 0.00%)          self.erase_no_drop(&item);
       50 ( 0.00%)          item.read()
        .               }
        .           
        .               /// Finds and removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
  174,124 ( 0.02%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
      220 ( 0.00%)          match self.find(hash, eq) {
    3,369 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
   52,630 ( 0.01%)              None => None,
        .                   }
  255,972 ( 0.03%)      }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear_no_drop(&mut self) {
        .                   self.table.clear_no_drop();
        .               }
        .           
        .               /// Removes all elements from the table without freeing the backing memory.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear(&mut self) {
        .                   // Ensure that the table is reset even if one of the drops panic
        .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
        .                   unsafe {
        1 ( 0.00%)              self_.drop_elements();
        .                   }
        .               }
        .           
        7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
    1,754 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
        .                       for item in self.iter() {
        .                           item.drop();
        .                       }
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
        .                   // Calculate the minimal number of elements that we need to reserve
        .                   // space for.
        .                   let min_size = usize::max(self.table.items, min_size);
        .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Ensures that at least `additional` items can be inserted into the table
        .               /// without reallocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
   74,493 ( 0.01%)          if additional > self.table.growth_left {
        .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
   41,286 ( 0.01%)              if self
        .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
        .                           .is_err()
        .                       {
        .                           unsafe { hint::unreachable_unchecked() }
        .                       }
        .                   }
        .               }
        .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
        .                   } else {
        .                       Ok(())
        .                   }
        .               }
        .           
        .               /// Out-of-line slow path for `reserve` and `try_reserve`.
        .               #[cold]
        .               #[inline(never)]
   90,425 ( 0.01%)      fn reserve_rehash(
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
        .               ) -> Result<(), TryReserveError> {
        .                   unsafe {
        .                       self.table.reserve_rehash_inner(
        .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
        .                           TableLayout::new::<T>(),
        .                           if mem::needs_drop::<T>() {
        .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
        .                           } else {
        .                               None
        .                           },
        .                       )
        .                   }
   62,576 ( 0.01%)      }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
        .               /// current table into it.
        .               fn resize(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
        .                       )
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns its raw bucket.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
  559,470 ( 0.07%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
        .                   unsafe {
        .                       let mut index = self.table.find_insert_slot(hash);
        .           
        .                       // We can avoid growing the table once we have reached our load
        .                       // factor if we are replacing a tombstone. This works since the
        .                       // number of EMPTY slots does not change in this case.
      819 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
  394,907 ( 0.05%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
        .                           self.reserve(1, hasher);
        .                           index = self.table.find_insert_slot(hash);
        .                       }
        .           
        .                       self.table.record_item_insert_at(index, old_ctrl, hash);
        .           
        .                       let bucket = self.bucket(index);
        2 ( 0.00%)              bucket.write(value);
        .                       bucket
        .                   }
  411,971 ( 0.05%)      }
        .           
        .               /// Attempts to insert a new element without growing the table and return its raw bucket.
        .               ///
        .               /// Returns an `Err` containing the given element if inserting it would require growing the
        .               /// table.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns a mutable reference to it.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
  124,816 ( 0.02%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
        4 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
   93,612 ( 0.01%)      }
        .           
        .               /// Inserts a new element into the table, without growing the table.
        .               ///
        .               /// There must be enough space in the table to insert the new element.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
    1,253 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
   81,726 ( 0.01%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
    4,686 ( 0.00%)          let bucket = self.table.bucket(index);
        .           
        .                   // If we are replacing a DELETED entry then we don't need to update
        .                   // the load counter.
  172,866 ( 0.02%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
        .           
        .                   bucket.write(value);
  138,080 ( 0.02%)          self.table.items += 1;
        .                   bucket
    2,492 ( 0.00%)      }
        .           
        .               /// Temporary removes a bucket, applying the given function to the removed
        .               /// element and optionally put back the returned value in the same bucket.
        .               ///
        .               /// Returns `true` if the bucket still contains an element
        .               ///
        .               /// This does not check if the given bucket is actually occupied.
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// Searches for an element in the table.
        .               #[inline]
    4,126 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
    7,020 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    3,657 ( 0.00%)              eq(self.bucket(index).as_ref())
    2,747 ( 0.00%)          });
        .           
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match result {
      601 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
        .                       None => None,
        .                   }
    4,704 ( 0.00%)      }
        .           
        .               /// Gets a reference to an element in the table.
        .               #[inline]
        .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
    4,633 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Gets a mutable reference to an element in the table.
        .               #[inline]
       77 ( 0.00%)      pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
    2,273 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
        .                       None => None,
        .                   }
       88 ( 0.00%)      }
        .           
        .               /// Attempts to get mutable references to `N` entries in the table at once.
        .               ///
        .               /// Returns an array of length `N` with the results of each query.
        .               ///
        .               /// At most one mutable reference will be returned to any entry. `None` will be returned if any
        .               /// of the hashes are duplicates. `None` will be returned if the hash is not found.
        .               ///
-- line 859 ----------------------------------------
-- line 920 ----------------------------------------
        .               #[inline]
        .               pub fn len(&self) -> usize {
        .                   self.table.items
        .               }
        .           
        .               /// Returns `true` if the table contains no elements.
        .               #[inline]
        .               pub fn is_empty(&self) -> bool {
  284,024 ( 0.04%)          self.len() == 0
        .               }
        .           
        .               /// Returns the number of buckets in the table.
        .               #[inline]
        .               pub fn buckets(&self) -> usize {
        .                   self.table.bucket_mask + 1
        .               }
        .           
-- line 936 ----------------------------------------
-- line 938 ----------------------------------------
        .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
        .               /// Because we cannot make the `next` method unsafe on the `RawIter`
        .               /// struct, we have to make the `iter` method unsafe.
        .               #[inline]
        .               pub unsafe fn iter(&self) -> RawIter<T> {
        .                   let data = Bucket::from_base_index(self.data_end(), 0);
        .                   RawIter {
        .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
   42,993 ( 0.01%)              items: self.table.items,
        .                   }
        .               }
        .           
        .               /// Returns an iterator over occupied buckets that could match a given hash.
        .               ///
        .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
        .               /// return items that have a hash value different than the one provided. You
        .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
        .               /// Iteration starts at the provided iterator's current location.
        .               ///
        .               /// It is up to the caller to ensure that the iterator is valid for this
        .               /// `RawTable` and covers all items that remain in the table.
        .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
        .                   debug_assert_eq!(iter.len(), self.len());
        .           
        .                   let alloc = self.table.alloc.clone();
    1,536 ( 0.00%)          let allocation = self.into_allocation();
    1,152 ( 0.00%)          RawIntoIter {
    1,920 ( 0.00%)              iter,
        .                       allocation,
        .                       marker: PhantomData,
        .                       alloc,
        .                   }
        .               }
        .           
        .               /// Converts the table into a raw allocation. The contents of the table
        .               /// should be dropped using a `RawIter` before freeing the allocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
      552 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
        .                       None
        .                   } else {
        .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
        .                           Some(lco) => lco,
        .                           None => unsafe { hint::unreachable_unchecked() },
        .                       };
        .                       Some((
       83 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
        .                           layout,
        .                       ))
        .                   };
        .                   mem::forget(self);
        .                   alloc
        .               }
        .           }
        .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<A> RawTableInner<A> {
        .               #[inline]
        .               const fn new_in(alloc: A) -> Self {
  178,084 ( 0.02%)          Self {
        .                       // Be careful to cast the entire slice to a raw pointer.
        .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
        .                       bucket_mask: 0,
        .                       items: 0,
        .                       growth_left: 0,
        .                       alloc,
        .                   }
        .               }
        .           }
        .           
        .           impl<A: Allocator + Clone> RawTableInner<A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
   86,523 ( 0.01%)      unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
        .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
        .                   // such allocations will never succeed anyways.
        .                   //
        .                   // This mirrors what Vec does in the standard library.
        .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
        .                       return Err(fallibility.capacity_overflow());
        .                   }
        .           
   22,068 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
        .                       Ok(block) => block.cast(),
        .                       Err(_) => return Err(fallibility.alloc_err(layout)),
        .                   };
        .           
        .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
   48,816 ( 0.01%)          Ok(Self {
        .                       ctrl,
   20,063 ( 0.00%)              bucket_mask: buckets - 1,
        .                       items: 0,
        .                       growth_left: bucket_mask_to_capacity(buckets - 1),
        .                       alloc,
        .                   })
   63,106 ( 0.01%)      }
        .           
        .               #[inline]
   11,889 ( 0.00%)      fn fallible_with_capacity(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
    3,024 ( 0.00%)          if capacity == 0 {
    2,771 ( 0.00%)              Ok(Self::new_in(alloc))
        .                   } else {
        .                       unsafe {
        .                           let buckets =
        .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
        .           
   39,596 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
        .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
        .           
    5,664 ( 0.00%)                  Ok(result)
        .                       }
        .                   }
   11,889 ( 0.00%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element and sets the hash for that slot.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
   28,289 ( 0.00%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
        .                   let index = self.find_insert_slot(hash);
   28,289 ( 0.00%)          let old_ctrl = *self.ctrl(index);
        .                   self.set_ctrl_h2(index, hash);
        .                   (index, old_ctrl)
   56,578 ( 0.01%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
        .               fn find_insert_slot(&self, hash: u64) -> usize {
        .                   let mut probe_seq = self.probe_seq(hash);
        .                   loop {
        .                       unsafe {
        .                           let group = Group::load(self.ctrl(probe_seq.pos));
  273,099 ( 0.04%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
  801,265 ( 0.10%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
        .           
        .                               // In tables smaller than the group width, trailing control
        .                               // bytes outside the range of the table are filled with
        .                               // EMPTY entries. These will unfortunately trigger a
        .                               // match, but once masked may point to a full bucket that
        .                               // is already occupied. We detect this situation here and
        .                               // perform a second scan starting at the beginning of the
        .                               // table. This second scan is guaranteed to find an empty
        .                               // slot (due to the load factor) before hitting the trailing
        .                               // control bytes (containing EMPTY).
  365,760 ( 0.05%)                      if unlikely(is_full(*self.ctrl(result))) {
        .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
        .                                   debug_assert_ne!(probe_seq.pos, 0);
        .                                   return Group::load_aligned(self.ctrl(0))
        .                                       .match_empty_or_deleted()
        .                                       .lowest_set_bit_nonzero();
        .                               }
        .           
        .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
        .           
        .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
        .               /// code generated, but it is eliminated by LLVM optimizations.
        .               #[inline]
        .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
        .                   let h2_hash = h2(hash);
        .                   let mut probe_seq = self.probe_seq(hash);
        .           
   12,928 ( 0.00%)          loop {
        .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
        .           
  828,242 ( 0.11%)              for bit in group.match_byte(h2_hash) {
1,540,977 ( 0.20%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
        .           
  991,098 ( 0.13%)                  if likely(eq(index)) {
        .                               return Some(index);
        .                           }
        .                       }
        .           
  280,751 ( 0.04%)              if likely(group.match_empty().any_bit_set()) {
        .                           return None;
        .                       }
        .           
        .                       probe_seq.move_next(self.bucket_mask);
        .                   }
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
-- line 1198 ----------------------------------------
-- line 1225 ----------------------------------------
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               #[inline]
        .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
        .                   debug_assert_ne!(self.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   let base: *mut u8 = self.data_end().as_ptr();
1,056,488 ( 0.14%)          base.sub((index + 1) * size_of)
        .               }
        .           
        .               #[inline]
        .               unsafe fn data_end<T>(&self) -> NonNull<T> {
        .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
        .               }
        .           
        .               /// Returns an iterator-like object for a probe sequence on the table.
        .               ///
        .               /// This iterator never terminates, but is guaranteed to visit each bucket
        .               /// group exactly once. The loop using `probe_seq` must terminate upon
        .               /// reaching a group containing an empty bucket.
        .               #[inline]
        .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
        .                   ProbeSeq {
4,691,104 ( 0.61%)              pos: h1(hash) & self.bucket_mask,
        .                       stride: 0,
        .                   }
        .               }
        .           
        .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
        .               /// in the table, otherwise returns error
        .               #[cfg(feature = "raw")]
        .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
        .                   } else {
        .                       self.record_item_insert_at(index, old_ctrl, hash);
        .                       Ok(index)
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
  493,766 ( 0.06%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
        .                   self.set_ctrl_h2(index, hash);
  394,872 ( 0.05%)          self.items += 1;
        .               }
        .           
        .               #[inline]
        .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
        .                   let probe_seq_pos = self.probe_seq(hash).pos;
        .                   let probe_index =
        .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
        .                   probe_index(i) == probe_index(new_i)
-- line 1281 ----------------------------------------
-- line 1312 ----------------------------------------
        .                   // replicate the buckets at the end of the trailing group. For example
        .                   // with 2 buckets and a group size of 4, the control bytes will look
        .                   // like this:
        .                   //
        .                   //     Real    |             Replicated
        .                   // ---------------------------------------------
        .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
        .                   // ---------------------------------------------
  781,058 ( 0.10%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
        .           
  260,308 ( 0.03%)          *self.ctrl(index) = ctrl;
  260,403 ( 0.03%)          *self.ctrl(index2) = ctrl;
        .               }
        .           
        .               /// Returns a pointer to a control byte.
        .               #[inline]
        .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
        .                   debug_assert!(index < self.num_ctrl_bytes());
        .                   self.ctrl.as_ptr().add(index)
        .               }
        .           
        .               #[inline]
        .               fn buckets(&self) -> usize {
   95,090 ( 0.01%)          self.bucket_mask + 1
        .               }
        .           
        .               #[inline]
        .               fn num_ctrl_bytes(&self) -> usize {
   46,954 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
        .               }
        .           
        .               #[inline]
        .               fn is_empty_singleton(&self) -> bool {
  310,296 ( 0.04%)          self.bucket_mask == 0
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
        .               #[inline]
        .               unsafe fn prepare_resize(
        .                   &self,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
        .                   debug_assert!(self.items <= capacity);
        .           
        .                   // Allocate and initialize the new table.
      531 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
        .                       self.alloc.clone(),
        .                       table_layout,
        .                       capacity,
        .                       fallibility,
        .                   )?;
   26,172 ( 0.00%)          new_table.growth_left -= self.items;
        .                   new_table.items = self.items;
        .           
        .                   // The hash function may panic, in which case we simply free the new
        .                   // table without dropping any elements that may have been copied into
        .                   // it.
        .                   //
        .                   // This guard is also used to free the old table on success, see
        .                   // the comment at the bottom of this function.
        .                   Ok(guard(new_table, move |self_| {
   11,143 ( 0.00%)              if !self_.is_empty_singleton() {
        .                           self_.free_buckets(table_layout);
        .                       }
        .                   }))
        .               }
        .           
        .               /// Reserves or rehashes to make room for `additional` more elements.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .                   drop: Option<fn(*mut u8)>,
        .               ) -> Result<(), TryReserveError> {
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
   22,287 ( 0.00%)          let new_items = match self.items.checked_add(additional) {
        .                       Some(new_items) => new_items,
        .                       None => return Err(fallibility.capacity_overflow()),
        .                   };
   22,286 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
   48,212 ( 0.01%)          if new_items <= full_capacity / 2 {
        .                       // Rehash in-place without re-allocating if we have plenty of spare
        .                       // capacity that is locked up due to DELETED entries.
        .                       self.rehash_in_place(hasher, layout.size, drop);
        .                       Ok(())
        .                   } else {
        .                       // Otherwise, conservatively resize to at least the next size up
        .                       // to avoid churning deletes into frequent rehashes.
        .                       self.resize_inner(
   11,143 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
        .                           hasher,
        .                           fallibility,
        .                           layout,
        .                       )
        .                   }
        .               }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
        .               #[inline(always)]
        .               unsafe fn resize_inner(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .               ) -> Result<(), TryReserveError> {
    1,335 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
        .           
        .                   // Copy all elements to the new table.
        .                   for i in 0..self.buckets() {
  159,466 ( 0.02%)              if !is_full(*self.ctrl(i)) {
        .                           continue;
        .                       }
        .           
        .                       // This may panic.
        .                       let hash = hasher(self, i);
        .           
        .                       // We can use a simpler version of insert() here since:
        .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
        .                   }
        .           
        .                   // We successfully copied all elements without panicking. Now replace
        .                   // self with the new table. The old table will have its memory freed but
        .                   // the items will not be dropped (since they have been moved into the
        .                   // new table).
        .                   mem::swap(self, &mut new_table);
        .           
   11,143 ( 0.00%)          Ok(())
        .               }
        .           
        .               /// Rehashes the contents of the table in place (i.e. without changing the
        .               /// allocation).
        .               ///
        .               /// If `hasher` panics then some the table's contents may be lost.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1554 ----------------------------------------
        .               #[inline]
        .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
        .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
        .                       Some(lco) => lco,
        .                       None => hint::unreachable_unchecked(),
        .                   };
        .                   self.alloc.deallocate(
    8,227 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
        .                       layout,
        .                   );
        .               }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[inline]
        .               fn clear_no_drop(&mut self) {
    1,485 ( 0.00%)          if !self.is_empty_singleton() {
        .                       unsafe {
        .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
        .                       }
        .                   }
    2,064 ( 0.00%)          self.items = 0;
    1,492 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
        .               }
        .           
        .               #[inline]
        .               unsafe fn erase(&mut self, index: usize) {
        .                   debug_assert!(is_full(*self.ctrl(index)));
   25,000 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
        .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
        .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
        .           
        .                   // If we are inside a continuous block of Group::WIDTH full or deleted
        .                   // cells then a probe window may have seen a full block when trying to
        .                   // insert. We therefore need to keep that block non-empty so that
        .                   // lookups will continue searching to the next probe window.
        .                   //
        .                   // Note that in this context `leading_zeros` refers to the bytes at the
        .                   // end of a group, while `trailing_zeros` refers to the bytes at the
        .                   // beginning of a group.
  100,000 ( 0.01%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
        .                       DELETED
        .                   } else {
  122,835 ( 0.02%)              self.growth_left += 1;
        .                       EMPTY
        .                   };
        .                   self.set_ctrl(index, ctrl);
  100,000 ( 0.01%)          self.items -= 1;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
    1,696 ( 0.00%)      fn clone(&self) -> Self {
      228 ( 0.00%)          if self.table.is_empty_singleton() {
        .                       Self::new_in(self.table.alloc.clone())
        .                   } else {
        .                       unsafe {
        .                           let mut new_table = ManuallyDrop::new(
        .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
        .                               match Self::new_uninitialized(
        .                                   self.table.alloc.clone(),
        .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
        .                               // We need to free the memory allocated for the new table.
        .                               new_table.free_buckets();
        .                           });
        .           
        .                           // Return the newly created table.
        .                           ManuallyDrop::into_inner(new_table)
        .                       }
        .                   }
    1,908 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   if source.table.is_empty_singleton() {
        .                       *self = Self::new_in(self.table.alloc.clone());
        .                   } else {
        .                       unsafe {
        .                           // First, drop all our elements without clearing the control bytes.
        .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
        .                       .table
        .                       .ctrl(0)
        .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
        .                   source
        .                       .data_start()
        .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
        .           
        .                   self.table.items = source.table.items;
       34 ( 0.00%)          self.table.growth_left = source.table.growth_left;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
        .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
        .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
        .               fn default() -> Self {
        .                   Self::new_in(Default::default())
        .               }
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
  138,991 ( 0.02%)      fn drop(&mut self) {
  133,812 ( 0.02%)          if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
        .                           self.free_buckets();
        .                       }
        .                   }
  156,204 ( 0.02%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
        .               type Item = T;
        .               type IntoIter = RawIntoIter<T, A>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
    1,536 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
        .                   unsafe {
        .                       let iter = self.iter();
        .                       self.into_iter_from(iter)
        .                   }
    1,920 ( 0.00%)      }
        .           }
        .           
        .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
        .           /// not track an item count.
        .           pub(crate) struct RawIterRange<T> {
        .               // Mask of full buckets in the current group. Bits are cleared from this
        .               // mask as each element is processed.
        .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
        .           
        .           impl<T> Iterator for RawIterRange<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<Bucket<T>> {
        .                   unsafe {
        .                       loop {
   69,466 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    9,160 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
   16,147 ( 0.00%)                      return Some(self.data.next_n(index));
        .                           }
        .           
   65,801 ( 0.01%)                  if self.next_ctrl >= self.end {
        .                               return None;
        .                           }
        .           
        .                           // We might read past self.end up to the next group boundary,
        .                           // but this is fine because it only occurs on tables smaller
        .                           // than the group size where the trailing control bytes are all
        .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
        .                           // to the group size (since tables are power-of-two sized).
    1,146 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
    1,633 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
    1,597 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
        .                       }
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   // We don't have an item count, so just guess based on the range size.
        .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
        .                           }
        .                       } else {
        .                           // We must have already iterated past the removed item.
        .                       }
        .                   }
        .               }
        .           
        .               unsafe fn drop_elements(&mut self) {
      354 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
        .                       for item in self {
        .                           item.drop();
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Iterator for RawIter<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
   11,157 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
   41,084 ( 0.01%)          if let Some(b) = self.iter.next() {
   93,608 ( 0.01%)              self.items -= 1;
        .                       Some(b)
        .                   } else {
        .                       // We don't check against items == 0 here to allow the
        .                       // compiler to optimize away the item count entirely if the
        .                       // iterator length is never queried.
        .                       debug_assert_eq!(self.items, 0);
        .                       None
        .                   }
   22,314 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   (self.items, Some(self.items))
        .               }
        .           }
        .           
        .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
      708 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
        .           
        .                       // Free the table
    2,481 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
        .                           self.alloc.deallocate(ptr, layout);
        .                       }
        .                   }
      314 ( 0.00%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
      170 ( 0.00%)      fn next(&mut self) -> Option<T> {
       18 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
      427 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        4 ( 0.00%)          self.iter.size_hint()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
        .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
        .           
        .           /// Iterator which consumes elements without freeing the table storage.
        .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
        .           where
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
      208 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements. Note that this may panic.
        .                       self.iter.drop_elements();
        .           
        .                       // Reset the contents of the table now that all elements have been
        .                       // dropped.
        .                       self.table.clear_no_drop();
        .           
        .                       // Move the now empty table back to its original location.
       26 ( 0.00%)              self.orig_table
        .                           .as_ptr()
        .                           .copy_from_nonoverlapping(&*self.table, 1);
        .                   }
      208 ( 0.00%)      }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<T> {
        .                   unsafe {
-- line 2289 ----------------------------------------

2,612,463 ( 0.34%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 36 ----------------------------------------
      .           use rustc_session::parse::ParseSess;
      .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
      .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
      .           use tracing::debug;
      .           
      .           use std::ops::Range;
      .           use std::{cmp, mem, slice};
      .           
 10,927 ( 0.00%)  bitflags::bitflags! {
      .               struct Restrictions: u8 {
      .                   const STMT_EXPR         = 1 << 0;
      .                   const NO_STRUCT_LITERAL = 1 << 1;
      .                   const CONST_EXPR        = 1 << 2;
      .               }
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
      .                               $self.bump();
      .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
      .                           }
      .                       }
      .                   }
      .               };
      .           }
      .           
 14,454 ( 0.00%)  #[derive(Clone)]
      .           pub struct Parser<'a> {
    288 ( 0.00%)      pub sess: &'a ParseSess,
      .               /// The current token.
    106 ( 0.00%)      pub token: Token,
      .               /// The spacing for the current token
    210 ( 0.00%)      pub token_spacing: Spacing,
      .               /// The previous token.
    159 ( 0.00%)      pub prev_token: Token,
    367 ( 0.00%)      pub capture_cfg: bool,
    891 ( 0.00%)      restrictions: Restrictions,
    420 ( 0.00%)      expected_tokens: Vec<TokenType>,
      .               // Important: This must only be advanced from `next_tok`
      .               // to ensure that `token_cursor.num_next_calls` is updated properly
      .               token_cursor: TokenCursor,
    420 ( 0.00%)      desugar_doc_comments: bool,
      .               /// This field is used to keep track of how many left angle brackets we have seen. This is
      .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
      .               /// appropriately.
      .               ///
      .               /// See the comments in the `parse_path_segment` function for more details.
    420 ( 0.00%)      unmatched_angle_bracket_count: u32,
    630 ( 0.00%)      max_angle_bracket_count: u32,
      .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
      .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
      .               /// error.
    210 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
      .               last_unexpected_token_span: Option<Span>,
      .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
      .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
      .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
      .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
      .               subparser_name: Option<&'static str>,
      .               capture_state: CaptureState,
      .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
      .           /// the first macro inner attribute to invoke a proc-macro).
      .           /// When create a `TokenStream`, the inner attributes get inserted
      .           /// into the proper place in the token stream.
      .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
      .           
      .           /// Controls how we capture tokens. Capturing can be expensive,
      .           /// so we try to avoid performing capturing in cases where
      .           /// we will never need an `AttrAnnotatedTokenStream`
    210 ( 0.00%)  #[derive(Copy, Clone)]
      .           pub enum Capturing {
      .               /// We aren't performing any capturing - this is the default mode.
      .               No,
      .               /// We are capturing tokens
      .               Yes,
      .           }
      .           
    865 ( 0.00%)  #[derive(Clone)]
      .           struct CaptureState {
    840 ( 0.00%)      capturing: Capturing,
    210 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
      .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
      .           }
      .           
      .           impl<'a> Drop for Parser<'a> {
      .               fn drop(&mut self) {
  1,373 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
      .               }
      .           }
      .           
 19,367 ( 0.00%)  #[derive(Clone)]
      .           struct TokenCursor {
      .               frame: TokenCursorFrame,
  4,596 ( 0.00%)      stack: Vec<TokenCursorFrame>,
      .               desugar_doc_comments: bool,
      .               // Counts the number of calls to `next` or `next_desugared`,
      .               // depending on whether `desugar_doc_comments` is set.
  1,413 ( 0.00%)      num_next_calls: usize,
      .               // During parsing, we may sometimes need to 'unglue' a
      .               // glued token into two component tokens
      .               // (e.g. '>>' into '>' and '>), so that the parser
      .               // can consume them one at a time. This process
      .               // bypasses the normal capturing mechanism
      .               // (e.g. `num_next_calls` will not be incremented),
      .               // since the 'unglued' tokens due not exist in
      .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
      .               // in `Option<Vec<u8>>` requires us to unglue
      .               // the trailing `>>` token. The `break_last_token`
      .               // field is used to track this token - it gets
      .               // appended to the captured stream when
      .               // we evaluate a `LazyTokenStream`
      .               break_last_token: bool,
      .           }
      .           
  8,779 ( 0.00%)  #[derive(Clone)]
      .           struct TokenCursorFrame {
  2,895 ( 0.00%)      delim: token::DelimToken,
      .               span: DelimSpan,
      .               open_delim: bool,
  5,790 ( 0.00%)      tree_cursor: tokenstream::Cursor,
      .               close_delim: bool,
      .           }
      .           
      .           impl TokenCursorFrame {
      .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
    875 ( 0.00%)          TokenCursorFrame {
      .                       delim,
      .                       span,
      .                       open_delim: false,
  1,899 ( 0.00%)              tree_cursor: tts.into_trees(),
      .                       close_delim: false,
      .                   }
      .               }
      .           }
      .           
      .           impl TokenCursor {
152,532 ( 0.02%)      fn next(&mut self) -> (Token, Spacing) {
      .                   loop {
 74,316 ( 0.01%)              let (tree, spacing) = if !self.frame.open_delim {
  1,549 ( 0.00%)                  self.frame.open_delim = true;
  7,745 ( 0.00%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
147,780 ( 0.02%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
      .                           tree
  6,528 ( 0.00%)              } else if !self.frame.close_delim {
  1,508 ( 0.00%)                  self.frame.close_delim = true;
  7,540 ( 0.00%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
  3,016 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
 19,604 ( 0.00%)                  self.frame = frame;
      .                           continue;
      .                       } else {
  4,464 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
      .                       };
      .           
 28,520 ( 0.00%)              match tree {
      .                           TokenTree::Token(token) => {
101,688 ( 0.01%)                      return (token, spacing);
      .                           }
      .                           TokenTree::Delimited(sp, delim, tts) => {
      .                               let frame = TokenCursorFrame::new(sp, delim, tts);
      .                               self.stack.push(mem::replace(&mut self.frame, frame));
      .                           }
      .                       }
      .                   }
101,688 ( 0.01%)      }
      .           
  2,350 ( 0.00%)      fn next_desugared(&mut self) -> (Token, Spacing) {
    705 ( 0.00%)          let (data, attr_style, sp) = match self.next() {
      .                       (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
      .                           (data, attr_style, span)
      .                       }
  1,175 ( 0.00%)              tok => return tok,
      .                   };
      .           
      .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
      .                   // required to wrap the text.
      .                   let mut num_of_hashes = 0;
      .                   let mut count = 0;
      .                   for ch in data.as_str().chars() {
      .                       count = match ch {
-- line 298 ----------------------------------------
-- line 332 ----------------------------------------
      .                                   .iter()
      .                                   .cloned()
      .                                   .collect::<TokenStream>()
      .                           },
      .                       ),
      .                   ));
      .           
      .                   self.next()
  2,115 ( 0.00%)      }
      .           }
      .           
  3,120 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
      .           enum TokenType {
  2,496 ( 0.00%)      Token(TokenKind),
      .               Keyword(Symbol),
      .               Operator,
      .               Lifetime,
      .               Ident,
      .               Path,
      .               Type,
      .               Const,
      .           }
-- line 353 ----------------------------------------
-- line 392 ----------------------------------------
      .           }
      .           
      .           pub enum FollowedByType {
      .               Yes,
      .               No,
      .           }
      .           
      .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
    104 ( 0.00%)      Some(match token.kind {
    208 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
    208 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
    208 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
      .                   token::DocComment(..) => "doc comment",
      .                   _ => return None,
      .               })
      .           }
      .           
    364 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
    104 ( 0.00%)      let token_str = pprust::token_to_string(token);
      .               match token_descr_opt(token) {
      .                   Some(prefix) => format!("{} `{}`", prefix, token_str),
    364 ( 0.00%)          _ => format!("`{}`", token_str),
      .               }
    260 ( 0.00%)  }
      .           
      .           impl<'a> Parser<'a> {
  2,450 ( 0.00%)      pub fn new(
      .                   sess: &'a ParseSess,
      .                   tokens: TokenStream,
      .                   desugar_doc_comments: bool,
      .                   subparser_name: Option<&'static str>,
      .               ) -> Self {
    175 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
    350 ( 0.00%)          start_frame.open_delim = true;
      .                   start_frame.close_delim = true;
      .           
  5,425 ( 0.00%)          let mut parser = Parser {
      .                       sess,
    175 ( 0.00%)              token: Token::dummy(),
      .                       token_spacing: Spacing::Alone,
    175 ( 0.00%)              prev_token: Token::dummy(),
      .                       capture_cfg: false,
      .                       restrictions: Restrictions::empty(),
      .                       expected_tokens: Vec::new(),
      .                       token_cursor: TokenCursor {
  1,050 ( 0.00%)                  frame: start_frame,
      .                           stack: Vec::new(),
      .                           num_next_calls: 0,
      .                           desugar_doc_comments,
      .                           break_last_token: false,
      .                       },
      .                       desugar_doc_comments,
      .                       unmatched_angle_bracket_count: 0,
      .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
      .                           capturing: Capturing::No,
      .                           replace_ranges: Vec::new(),
      .                           inner_attr_ranges: Default::default(),
      .                       },
      .                       current_closure: None,
      .                   };
      .           
      .                   // Make parser point to the first token.
    350 ( 0.00%)          parser.bump();
      .           
      .                   parser
  1,575 ( 0.00%)      }
      .           
      .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
      .                   loop {
 73,590 ( 0.01%)              let (mut next, spacing) = if self.desugar_doc_comments {
    940 ( 0.00%)                  self.token_cursor.next_desugared()
      .                       } else {
 36,090 ( 0.00%)                  self.token_cursor.next()
      .                       };
 49,060 ( 0.01%)              self.token_cursor.num_next_calls += 1;
      .                       // We've retrieved an token from the underlying
      .                       // cursor, so we no longer need to worry about
      .                       // an unglued token. See `break_and_eat` for more details
 12,265 ( 0.00%)              self.token_cursor.break_last_token = false;
 49,060 ( 0.01%)              if next.span.is_dummy() {
      .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
    848 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
      .                       }
 41,319 ( 0.01%)              if matches!(
 24,530 ( 0.00%)                  next.kind,
      .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
      .                       ) {
      .                           continue;
      .                       }
 49,060 ( 0.01%)              return (next, spacing);
      .                   }
      .               }
      .           
      .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
      .                   match self.expect_one_of(&[], &[]) {
      .                       Err(e) => Err(e),
      .                       // We can get `Ok(true)` from `recover_closing_delimiter`
      .                       // which is called in `expected_one_of_not_found`.
      .                       Ok(_) => FatalError.raise(),
      .                   }
      .               }
      .           
      .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
 24,669 ( 0.00%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
  2,741 ( 0.00%)          if self.expected_tokens.is_empty() {
    630 ( 0.00%)              if self.token == *t {
    525 ( 0.00%)                  self.bump();
      .                           Ok(false)
      .                       } else {
      .                           self.unexpected_try_recover(t)
      .                       }
      .                   } else {
 31,632 ( 0.00%)              self.expect_one_of(slice::from_ref(t), &[])
      .                   }
 41,115 ( 0.01%)      }
      .           
      .               /// Expect next token to be edible or inedible token.  If edible,
      .               /// then consume it; if inedible, then return without consuming
      .               /// anything.  Signal a fatal error if next token is unexpected.
 34,776 ( 0.00%)      pub fn expect_one_of(
      .                   &mut self,
      .                   edible: &[TokenKind],
      .                   inedible: &[TokenKind],
      .               ) -> PResult<'a, bool /* recovered */> {
  5,796 ( 0.00%)          if edible.contains(&self.token.kind) {
  7,920 ( 0.00%)              self.bump();
      .                       Ok(false)
      .                   } else if inedible.contains(&self.token.kind) {
      .                       // leave it in the input
      .                       Ok(false)
      .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
      .                       FatalError.raise();
      .                   } else {
      .                       self.expected_one_of_not_found(edible, inedible)
      .                   }
 43,470 ( 0.01%)      }
      .           
      .               // Public for rustfmt usage.
      .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
  8,289 ( 0.00%)          self.parse_ident_common(true)
      .               }
      .           
      .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
  6,132 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
      .                       TokenKind::DocComment(..) => {
      .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
      .                       }
      .                       _ => self.expected_ident_found(),
      .                   })
      .               }
      .           
 14,273 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
  2,039 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
 12,234 ( 0.00%)          if !is_raw && ident.is_reserved() {
      .                       let mut err = self.expected_ident_found();
      .                       if recover {
      .                           err.emit();
      .                       } else {
      .                           return Err(err);
      .                       }
      .                   }
  8,156 ( 0.00%)          self.bump();
      .                   Ok(ident)
 20,390 ( 0.00%)      }
      .           
      .               /// Checks if the next token is `tok`, and returns `true` if so.
      .               ///
      .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
      .               /// encountered.
284,326 ( 0.04%)      fn check(&mut self, tok: &TokenKind) -> bool {
122,883 ( 0.02%)          let is_present = self.token == *tok;
 82,610 ( 0.01%)          if !is_present {
179,333 ( 0.02%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
      .                   }
      .                   is_present
284,326 ( 0.04%)      }
      .           
      .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
    300 ( 0.00%)      pub fn eat(&mut self, tok: &TokenKind) -> bool {
 56,053 ( 0.01%)          let is_present = self.check(tok);
 36,857 ( 0.00%)          if is_present {
  6,051 ( 0.00%)              self.bump()
      .                   }
      .                   is_present
    375 ( 0.00%)      }
      .           
      .               /// If the next token is the given keyword, returns `true` without eating it.
      .               /// An expectation is also added for diagnostics purposes.
  7,610 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
  1,550 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
 45,788 ( 0.01%)          self.token.is_keyword(kw)
      .               }
      .           
      .               /// If the next token is the given keyword, eats it and returns `true`.
      .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
      .               // Public for rustfmt usage.
 12,335 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
  9,060 ( 0.00%)          if self.check_keyword(kw) {
  1,135 ( 0.00%)              self.bump();
      .                       true
      .                   } else {
      .                       false
      .                   }
 12,335 ( 0.00%)      }
      .           
      .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
  1,244 ( 0.00%)          if self.token.is_keyword(kw) {
    308 ( 0.00%)              self.bump();
      .                       true
      .                   } else {
      .                       false
      .                   }
      .               }
      .           
      .               /// If the given word is not a keyword, signals an error.
      .               /// If the next token is not the given word, signals an error.
      .               /// Otherwise, eats it.
    115 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
      .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
     92 ( 0.00%)      }
      .           
      .               /// Is the given keyword `kw` followed by a non-reserved identifier?
 12,792 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
  6,396 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
 14,391 ( 0.00%)      }
      .           
  9,252 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
  3,880 ( 0.00%)          if ok {
      .                       true
      .                   } else {
  1,068 ( 0.00%)              self.expected_tokens.push(typ);
      .                       false
      .                   }
  9,252 ( 0.00%)      }
      .           
      .               fn check_ident(&mut self) -> bool {
  1,760 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
      .               }
      .           
  4,764 ( 0.00%)      fn check_path(&mut self) -> bool {
  9,962 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
  5,955 ( 0.00%)      }
      .           
      .               fn check_type(&mut self) -> bool {
     32 ( 0.00%)          self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
      .               }
      .           
      .               fn check_const_arg(&mut self) -> bool {
     32 ( 0.00%)          self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
      .               }
      .           
  1,872 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
  1,040 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
      .                       && self.look_ahead(dist + 1, |t| match t.kind {
      .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
      .                           token::OpenDelim(DelimToken::Brace) => true,
      .                           _ => false,
      .                       })
  1,872 ( 0.00%)      }
      .           
      .               /// Checks to see if the next token is either `+` or `+=`.
      .               /// Otherwise returns `false`.
      .               fn check_plus(&mut self) -> bool {
    572 ( 0.00%)          self.check_or_expected(
    286 ( 0.00%)              self.token.is_like_plus(),
    286 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
      .                   )
      .               }
      .           
      .               /// Eats the expected token if it's present possibly breaking
      .               /// compound tokens like multi-character operators in process.
      .               /// Returns `true` if the token was eaten.
 13,740 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
  8,015 ( 0.00%)          if self.token.kind == expected {
     48 ( 0.00%)              self.bump();
      .                       return true;
      .                   }
  5,605 ( 0.00%)          match self.token.kind.break_two_token_op() {
      .                       Some((first, second)) if first == expected => {
      .                           let first_span = self.sess.source_map().start_point(self.token.span);
      .                           let second_span = self.token.span.with_lo(first_span.hi());
      .                           self.token = Token::new(first, first_span);
      .                           // Keep track of this token - if we end token capturing now,
      .                           // we'll want to append this token to the captured stream.
      .                           //
      .                           // If we consume any additional tokens, then this token
-- line 682 ----------------------------------------
-- line 684 ----------------------------------------
      .                           // and `next_tok` will set this field to `None`
      .                           self.token_cursor.break_last_token = true;
      .                           // Use the spacing of the glued token as the spacing
      .                           // of the unglued second token.
      .                           self.bump_with((Token::new(second, second_span), self.token_spacing));
      .                           true
      .                       }
      .                       _ => {
  3,363 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
      .                           false
      .                       }
      .                   }
 14,789 ( 0.00%)      }
      .           
      .               /// Eats `+` possibly breaking tokens like `+=` in process.
      .               fn eat_plus(&mut self) -> bool {
     16 ( 0.00%)          self.break_and_eat(token::BinOp(token::Plus))
      .               }
      .           
      .               /// Eats `&` possibly breaking tokens like `&&` in process.
      .               /// Signals an error if `&` is not eaten.
      .               fn expect_and(&mut self) -> PResult<'a, ()> {
     72 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `|` possibly breaking tokens like `||` in process.
      .               /// Signals an error if `|` was not eaten.
      .               fn expect_or(&mut self) -> PResult<'a, ()> {
      .                   if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `<` possibly breaking tokens like `<<` in process.
    616 ( 0.00%)      fn eat_lt(&mut self) -> bool {
  3,421 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
  2,250 ( 0.00%)          if ate {
      .                       // See doc comment for `unmatched_angle_bracket_count`.
     24 ( 0.00%)              self.unmatched_angle_bracket_count += 1;
     26 ( 0.00%)              self.max_angle_bracket_count += 1;
      .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
      .                   }
      .                   ate
    616 ( 0.00%)      }
      .           
      .               /// Eats `<` possibly breaking tokens like `<<` in process.
      .               /// Signals an error if `<` was not eaten.
      .               fn expect_lt(&mut self) -> PResult<'a, ()> {
      .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `>` possibly breaking tokens like `>>` in process.
      .               /// Signals an error if `>` was not eaten.
      .               fn expect_gt(&mut self) -> PResult<'a, ()> {
     36 ( 0.00%)          if self.break_and_eat(token::Gt) {
      .                       // See doc comment for `unmatched_angle_bracket_count`.
     18 ( 0.00%)              if self.unmatched_angle_bracket_count > 0 {
     12 ( 0.00%)                  self.unmatched_angle_bracket_count -= 1;
      .                           debug!("expect_gt: (decrement) count={:?}", self.unmatched_angle_bracket_count);
      .                       }
      .                       Ok(())
      .                   } else {
      .                       self.unexpected()
      .                   }
      .               }
      .           
      .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
      .                   kets.iter().any(|k| match expect {
 16,596 ( 0.00%)              TokenExpectType::Expect => self.check(k),
      .                       TokenExpectType::NoExpect => self.token == **k,
      .                   })
      .               }
      .           
      .               fn parse_seq_to_before_tokens<T>(
      .                   &mut self,
      .                   kets: &[&TokenKind],
      .                   sep: SeqSep,
-- line 758 ----------------------------------------
-- line 761 ----------------------------------------
      .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
      .                   let mut first = true;
      .                   let mut recovered = false;
      .                   let mut trailing = false;
      .                   let mut v = vec![];
      .                   let unclosed_delims = !self.unclosed_delims.is_empty();
      .           
      .                   while !self.expect_any_with_type(kets, expect) {
 13,602 ( 0.00%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
      .                           break;
      .                       }
  8,918 ( 0.00%)              if let Some(ref t) = sep.sep {
  8,207 ( 0.00%)                  if first {
      .                               first = false;
      .                           } else {
 11,131 ( 0.00%)                      match self.expect(t) {
      .                                   Ok(false) => {
      .                                       self.current_closure.take();
      .                                   }
      .                                   Ok(true) => {
      .                                       self.current_closure.take();
      .                                       recovered = true;
      .                                       break;
      .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
      .                                               e.cancel();
      .                                               break;
      .                                           }
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
  5,010 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
      .                           trailing = true;
      .                           break;
      .                       }
      .           
  2,674 ( 0.00%)              let t = f(self)?;
    379 ( 0.00%)              v.push(t);
      .                   }
      .           
  4,216 ( 0.00%)          Ok((v, trailing, recovered))
      .               }
      .           
      .               fn recover_missing_braces_around_closure_body(
      .                   &mut self,
      .                   closure_spans: ClosureSpans,
      .                   mut expect_err: DiagnosticBuilder<'_>,
      .               ) -> PResult<'a, ()> {
      .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
      .               fn parse_seq_to_before_end<T>(
      .                   &mut self,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
  3,562 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
      .               }
      .           
      .               /// Parses a sequence, including the closing delimiter. The function
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
  2,280 ( 0.00%)      fn parse_seq_to_end<T>(
      .                   &mut self,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
  2,341 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
  1,875 ( 0.00%)          if !recovered {
      .                       self.eat(ket);
      .                   }
  3,830 ( 0.00%)          Ok((val, trailing))
  1,824 ( 0.00%)      }
      .           
      .               /// Parses a sequence, including the closing delimiter. The function
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
      .               fn parse_unspanned_seq<T>(
      .                   &mut self,
      .                   bra: &TokenKind,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
    773 ( 0.00%)          self.expect(bra)?;
  1,824 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
      .               }
      .           
      .               fn parse_delim_comma_seq<T>(
      .                   &mut self,
      .                   delim: DelimToken,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
      .                   self.parse_unspanned_seq(
    294 ( 0.00%)              &token::OpenDelim(delim),
    360 ( 0.00%)              &token::CloseDelim(delim),
      .                       SeqSep::trailing_allowed(token::Comma),
      .                       f,
      .                   )
      .               }
      .           
      .               fn parse_paren_comma_seq<T>(
      .                   &mut self,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
      .                   self.parse_delim_comma_seq(token::Paren, f)
      .               }
      .           
      .               /// Advance the parser by one token using provided token as the next one.
159,445 ( 0.02%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
      .                   // Bumping after EOF is a bad sign, usually an infinite loop.
 73,590 ( 0.01%)          if self.prev_token.kind == TokenKind::Eof {
      .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
      .                       self.span_bug(self.token.span, msg);
      .                   }
      .           
      .                   // Update the current and previous tokens.
 49,060 ( 0.01%)          self.prev_token = mem::replace(&mut self.token, next_token);
 12,265 ( 0.00%)          self.token_spacing = next_spacing;
      .           
      .                   // Diagnostics.
 12,265 ( 0.00%)          self.expected_tokens.clear();
      .               }
      .           
      .               /// Advance the parser by one token.
 98,120 ( 0.01%)      pub fn bump(&mut self) {
 49,060 ( 0.01%)          let next_token = self.next_tok(self.token.span);
 73,590 ( 0.01%)          self.bump_with(next_token);
 98,120 ( 0.01%)      }
      .           
      .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
      .               /// When `dist == 0` then the current token is looked at.
     16 ( 0.00%)      pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
    636 ( 0.00%)          if dist == 0 {
    284 ( 0.00%)              return looker(&self.token);
      .                   }
      .           
  5,165 ( 0.00%)          let frame = &self.token_cursor.frame;
  5,390 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
      .                       let all_normal = (0..dist).all(|i| {
 14,992 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
 18,410 ( 0.00%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
      .                       });
      .                       if all_normal {
 24,677 ( 0.00%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
  7,754 ( 0.00%)                      Some(tree) => match tree {
  3,625 ( 0.00%)                          TokenTree::Token(token) => looker(token),
      .                                   TokenTree::Delimited(dspan, delim, _) => {
  1,810 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
      .                                   }
      .                               },
  7,638 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
      .                           };
      .                       }
      .                   }
      .           
      .                   let mut cursor = self.token_cursor.clone();
      .                   let mut i = 0;
    458 ( 0.00%)          let mut token = Token::dummy();
      .                   while i < dist {
  3,122 ( 0.00%)              token = cursor.next().0;
  1,420 ( 0.00%)              if matches!(
    892 ( 0.00%)                  token.kind,
      .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
      .                       ) {
      .                           continue;
      .                       }
      .                       i += 1;
      .                   }
     30 ( 0.00%)          return looker(&token);
      .               }
      .           
      .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
  2,745 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
    793 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
  2,745 ( 0.00%)      }
      .           
      .               /// Parses asyncness: `async` or nothing.
      .               fn parse_asyncness(&mut self) -> Async {
      .                   if self.eat_keyword(kw::Async) {
      .                       let span = self.prev_token.uninterpolated_span();
      .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
      .                   } else {
      .                       Async::No
      .                   }
      .               }
      .           
      .               /// Parses unsafety: `unsafe` or nothing.
    132 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
      .                   if self.eat_keyword(kw::Unsafe) {
     50 ( 0.00%)              Unsafe::Yes(self.prev_token.uninterpolated_span())
      .                   } else {
      .                       Unsafe::No
      .                   }
    528 ( 0.00%)      }
      .           
      .               /// Parses constness: `const` or nothing.
  2,176 ( 0.00%)      fn parse_constness(&mut self) -> Const {
      .                   // Avoid const blocks to be parsed as const items
    666 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
      .                       && self.eat_keyword(kw::Const)
      .                   {
    105 ( 0.00%)              Const::Yes(self.prev_token.uninterpolated_span())
      .                   } else {
      .                       Const::No
      .                   }
  3,808 ( 0.00%)      }
      .           
      .               /// Parses inline const expressions.
      .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
      .                   if pat {
      .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
      .                   } else {
      .                       self.sess.gated_spans.gate(sym::inline_const, span);
      .                   }
-- line 1104 ----------------------------------------
-- line 1110 ----------------------------------------
      .                   };
      .                   let blk_span = anon_const.value.span;
      .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
      .               }
      .           
      .               /// Parses mutability (`mut` or nothing).
      .               fn parse_mutability(&mut self) -> Mutability {
      .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
     27 ( 0.00%)      }
      .           
      .               /// Possibly parses mutability (`const` or `mut`).
     78 ( 0.00%)      fn parse_const_or_mut(&mut self) -> Option<Mutability> {
      .                   if self.eat_keyword(kw::Mut) {
      .                       Some(Mutability::Mut)
      .                   } else if self.eat_keyword(kw::Const) {
      .                       Some(Mutability::Not)
      .                   } else {
      .                       None
      .                   }
     78 ( 0.00%)      }
      .           
      .               fn parse_field_name(&mut self) -> PResult<'a, Ident> {
      8 ( 0.00%)          if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) = self.token.kind
      .                   {
      .                       self.expect_no_suffix(self.token.span, "a tuple index", suffix);
      .                       self.bump();
      .                       Ok(Ident::new(symbol, self.prev_token.span))
      .                   } else {
     12 ( 0.00%)              self.parse_ident_common(true)
      .                   }
      .               }
      .           
      .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
    175 ( 0.00%)          self.parse_mac_args_common(true).map(P)
      .               }
      .           
      .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
    309 ( 0.00%)          self.parse_mac_args_common(false)
      .               }
      .           
  1,602 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
  1,424 ( 0.00%)          Ok(
  1,086 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
    147 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
    147 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
      .                       {
    516 ( 0.00%)                  match self.parse_token_tree() {
    645 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
      .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
      .                               {
    258 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
      .                               }
      .                               _ => unreachable!(),
      .                           }
     98 ( 0.00%)              } else if !delimited_only {
      .                           if self.eat(&token::Eq) {
      .                               let eq_span = self.prev_token.span;
      .           
      .                               // Collect tokens because they are used during lowering to HIR.
      .                               let expr = self.parse_expr_force_collect()?;
      .                               let span = expr.span;
      .           
      .                               let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
-- line 1172 ----------------------------------------
-- line 1173 ----------------------------------------
      .                               MacArgs::Eq(eq_span, Token::new(token_kind, span))
      .                           } else {
      .                               MacArgs::Empty
      .                           }
      .                       } else {
      .                           return self.unexpected();
      .                       },
      .                   )
  1,246 ( 0.00%)      }
      .           
      .               fn parse_or_use_outer_attributes(
      .                   &mut self,
      .                   already_parsed_attrs: Option<AttrWrapper>,
      .               ) -> PResult<'a, AttrWrapper> {
 10,917 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
      .                       Ok(attrs)
      .                   } else {
  6,634 ( 0.00%)              self.parse_outer_attributes()
      .                   }
      .               }
      .           
      .               /// Parses a single token tree from the input.
  1,984 ( 0.00%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
  1,164 ( 0.00%)          match self.token.kind {
      .                       token::OpenDelim(..) => {
      .                           let depth = self.token_cursor.stack.len();
      .           
      .                           // We keep advancing the token cursor until we hit
      .                           // the matching `CloseDelim` token.
  3,214 ( 0.00%)                  while !(depth == self.token_cursor.stack.len()
      .                               && matches!(self.token.kind, token::CloseDelim(_)))
      .                           {
      .                               // Advance one token at a time, so `TokenCursor::next()`
      .                               // can capture these tokens if necessary.
  1,562 ( 0.00%)                      self.bump();
      .                           }
      .                           // We are still inside the frame corresponding
      .                           // to the delimited stream we captured, so grab
      .                           // the tokens from this frame.
      .                           let frame = &self.token_cursor.frame;
    286 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
    286 ( 0.00%)                  let span = frame.span;
    143 ( 0.00%)                  let delim = frame.delim;
      .                           // Consume close delimiter
    286 ( 0.00%)                  self.bump();
    715 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
      .                       }
      .                       token::CloseDelim(_) | token::Eof => unreachable!(),
      .                       _ => {
    210 ( 0.00%)                  self.bump();
    525 ( 0.00%)                  TokenTree::Token(self.prev_token.clone())
      .                       }
      .                   }
  1,736 ( 0.00%)      }
      .           
      .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
      .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
      .                   let mut tts = Vec::new();
      .                   while self.token != token::Eof {
      .                       tts.push(self.parse_token_tree());
      .                   }
      .                   Ok(tts)
-- line 1234 ----------------------------------------
-- line 1244 ----------------------------------------
      .                   }
      .                   TokenStream::new(result)
      .               }
      .           
      .               /// Evaluates the closure with restrictions in place.
      .               ///
      .               /// Afters the closure is evaluated, restrictions are reset.
      .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
  3,769 ( 0.00%)          let old = self.restrictions;
  4,679 ( 0.00%)          self.restrictions = res;
      .                   let res = f(self);
  4,252 ( 0.00%)          self.restrictions = old;
      .                   res
      .               }
      .           
  4,240 ( 0.00%)      fn is_crate_vis(&self) -> bool {
  2,650 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
  4,770 ( 0.00%)      }
      .           
      .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
      .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
      .               /// If the following element can't be a tuple (i.e., it's a function definition), then
      .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
      .               /// so emit a proper diagnostic.
      .               // Public for rustfmt usage.
  2,990 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
    598 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
      .           
    299 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
  1,196 ( 0.00%)          if self.is_crate_vis() {
      .                       self.bump(); // `crate`
      .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
      .                       return Ok(Visibility {
      .                           span: self.prev_token.span,
      .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
      .                           tokens: None,
      .                       });
      .                   }
      .           
      .                   if !self.eat_keyword(kw::Pub) {
      .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
      .                       // keyword to grab a span from for inherited visibility; an empty span at the
      .                       // beginning of the current token would seem to be the "Schelling span".
    243 ( 0.00%)              return Ok(Visibility {
    729 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
      .                           kind: VisibilityKind::Inherited,
      .                           tokens: None,
      .                       });
      .                   }
     56 ( 0.00%)          let lo = self.prev_token.span;
      .           
    280 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
      .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
      .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
      .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
      .                       // by the following tokens.
      .                       if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
      .                       // account for `pub(crate::foo)`
      .                       {
      .                           // Parse `pub(crate)`.
-- line 1303 ----------------------------------------
-- line 1338 ----------------------------------------
      .                       } else if let FollowedByType::No = fbt {
      .                           // Provide this diagnostic if a type cannot follow;
      .                           // in particular, if this is not a tuple struct.
      .                           self.recover_incorrect_vis_restriction()?;
      .                           // Emit diagnostic, but continue with public visibility.
      .                       }
      .                   }
      .           
    168 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
  2,691 ( 0.00%)      }
      .           
      .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
      .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
      .                   self.bump(); // `(`
      .                   let path = self.parse_path(PathStyle::Mod)?;
      .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
      .           
      .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
      .                       )
      .                       .emit();
      .           
      .                   Ok(())
      .               }
      .           
      .               /// Parses `extern string_literal?`.
      .               fn parse_extern(&mut self) -> Extern {
     43 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
      .               }
      .           
      .               /// Parses a string literal as an ABI spec.
      .               fn parse_abi(&mut self) -> Option<StrLit> {
      .                   match self.parse_str_lit() {
      .                       Ok(str_lit) => Some(str_lit),
      .                       Err(Some(lit)) => match lit.kind {
      .                           ast::LitKind::Err(_) => None,
-- line 1386 ----------------------------------------
-- line 1409 ----------------------------------------
      .                   self.collect_tokens_trailing_token(
      .                       AttrWrapper::empty(),
      .                       ForceCollect::Yes,
      .                       |this, _attrs| Ok((f(this)?, TrailingToken::None)),
      .                   )
      .               }
      .           
      .               /// `::{` or `::*`
 13,808 ( 0.00%)      fn is_import_coupler(&mut self) -> bool {
  6,904 ( 0.00%)          self.check(&token::ModSep)
      .                       && self.look_ahead(1, |t| {
  1,633 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
      .                       })
 15,012 ( 0.00%)      }
      .           
      .               pub fn clear_expected_tokens(&mut self) {
      .                   self.expected_tokens.clear();
      .               }
      .           }
      .           
      .           crate fn make_unclosed_delims_error(
      .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
      .                   err.span_label(sp, "closing delimiter possibly meant for this");
      .               }
      .               if let Some(sp) = unmatched.unclosed_span {
      .                   err.span_label(sp, "unclosed delimiter");
      .               }
      .               Some(err)
      .           }
      .           
  3,080 ( 0.00%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
  1,540 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
      .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
  1,540 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
      .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
      .                       e.emit();
      .                   }
      .               }
  3,080 ( 0.00%)  }
      .           
      .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
      .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
      .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
      .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
      .           /// `AttrAnnotatedTokenTree::Delimited` tokens
      .           #[derive(Debug, Clone)]
      .           pub enum FlatToken {
-- line 1474 ----------------------------------------

 82,812 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 38 ----------------------------------------
      .           #[derive(Debug)]
      .           pub struct Token {
      .               pub kind: TokenKind,
      .               pub len: usize,
      .           }
      .           
      .           impl Token {
      .               fn new(kind: TokenKind, len: usize) -> Token {
153,495 ( 0.02%)          Token { kind, len }
      .               }
      .           }
      .           
      .           /// Enum representing common lexeme types.
      .           // perf note: Changing all `usize` to `u32` doesn't change performance. See #77629
 26,930 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
      .           pub enum TokenKind {
      .               // Multi-char tokens:
      .               /// "// comment"
      .               LineComment { doc_style: Option<DocStyle> },
      .               /// `/* block comment */`
      .               ///
      .               /// Block comments can be recursive, so the sequence like `/* /* */`
      .               /// will not be considered terminated and will result in a parsing error.
-- line 60 ----------------------------------------
-- line 192 ----------------------------------------
      .               /// Literal starts with "0x".
      .               Hexadecimal,
      .               /// Literal doesn't contain a prefix.
      .               Decimal,
      .           }
      .           
      .           /// `rustc` allows files to have a shebang, e.g. "#!/usr/bin/rustrun",
      .           /// but shebang isn't a part of rust syntax.
     84 ( 0.00%)  pub fn strip_shebang(input: &str) -> Option<usize> {
      .               // Shebang must start with `#!` literally, without any preceding whitespace.
      .               // For simplicity we consider any line starting with `#!` a shebang,
      .               // regardless of restrictions put on shebangs by specific platforms.
      .               if let Some(input_tail) = input.strip_prefix("#!") {
      .                   // Ok, this is a shebang but if the next non-whitespace token is `[`,
      .                   // then it may be valid Rust code, so consider it Rust code.
      .                   let next_non_whitespace_token = tokenize(input_tail).map(|tok| tok.kind).find(|tok| {
      .                       !matches!(
-- line 208 ----------------------------------------
-- line 213 ----------------------------------------
      .                       )
      .                   });
      .                   if next_non_whitespace_token != Some(TokenKind::OpenBracket) {
      .                       // No other choice than to consider this a shebang.
      .                       return Some(2 + input_tail.lines().next().unwrap_or_default().len());
      .                   }
      .               }
      .               None
     96 ( 0.00%)  }
      .           
      .           /// Parses the first token from the provided input string.
 51,165 ( 0.01%)  pub fn first_token(input: &str) -> Token {
      .               debug_assert!(!input.is_empty());
 17,055 ( 0.00%)      Cursor::new(input).advance_token()
 68,220 ( 0.01%)  }
      .           
      .           /// Creates an iterator that produces tokens from the input string.
      .           pub fn tokenize(input: &str) -> impl Iterator<Item = Token> + '_ {
      .               let mut cursor = Cursor::new(input);
      .               std::iter::from_fn(move || {
      .                   if cursor.is_eof() {
      .                       None
      .                   } else {
-- line 235 ----------------------------------------
-- line 243 ----------------------------------------
      .           /// See [Rust language reference](https://doc.rust-lang.org/reference/whitespace.html)
      .           /// for definitions of these classes.
      .           pub fn is_whitespace(c: char) -> bool {
      .               // This is Pattern_White_Space.
      .               //
      .               // Note that this set is stable (ie, it doesn't change with different
      .               // Unicode versions), so it's ok to just hard-code the values.
      .           
 41,764 ( 0.01%)      matches!(
      .                   c,
      .                   // Usual ASCII suspects
      .                   '\u{0009}'   // \t
      .                   | '\u{000A}' // \n
      .                   | '\u{000B}' // vertical tab
      .                   | '\u{000C}' // form feed
      .                   | '\u{000D}' // \r
      .                   | '\u{0020}' // space
-- line 259 ----------------------------------------
-- line 271 ----------------------------------------
      .               )
      .           }
      .           
      .           /// True if `c` is valid as a first character of an identifier.
      .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
      .           /// a formal definition of valid identifier name.
      .           pub fn is_id_start(c: char) -> bool {
      .               // This is XID_Start OR '_' (which formally is not a XID_Start).
  3,668 ( 0.00%)      c == '_' || unicode_xid::UnicodeXID::is_xid_start(c)
      .           }
      .           
      .           /// True if `c` is valid as a non-first character of an identifier.
      .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
      .           /// a formal definition of valid identifier name.
      .           pub fn is_id_continue(c: char) -> bool {
      .               unicode_xid::UnicodeXID::is_xid_continue(c)
      .           }
-- line 287 ----------------------------------------
-- line 293 ----------------------------------------
      .                   is_id_start(start) && chars.all(is_id_continue)
      .               } else {
      .                   false
      .               }
      .           }
      .           
      .           impl Cursor<'_> {
      .               /// Parses a token from the input string.
136,440 ( 0.02%)      fn advance_token(&mut self) -> Token {
      .                   let first_char = self.bump().unwrap();
 57,890 ( 0.01%)          let token_kind = match first_char {
      .                       // Slash, comment or block comment.
  1,930 ( 0.00%)              '/' => match self.first() {
      .                           '/' => self.line_comment(),
      .                           '*' => self.block_comment(),
     64 ( 0.00%)                  _ => Slash,
      .                       },
      .           
      .                       // Whitespace sequence.
      .                       c if is_whitespace(c) => self.whitespace(),
      .           
      .                       // Raw identifier, raw string literal or identifier.
    440 ( 0.00%)              'r' => match (self.first(), self.second()) {
      .                           ('#', c1) if is_id_start(c1) => self.raw_ident(),
      .                           ('#', _) | ('"', _) => {
      .                               let (n_hashes, err) = self.raw_double_quoted_string(1);
      .                               let suffix_start = self.len_consumed();
      .                               if err.is_none() {
      .                                   self.eat_literal_suffix();
      .                               }
      .                               let kind = RawStr { n_hashes, err };
      .                               Literal { kind, suffix_start }
      .                           }
      .                           _ => self.ident_or_unknown_prefix(),
      .                       },
      .           
      .                       // Byte literal, byte string literal, raw byte string literal or identifier.
    540 ( 0.00%)              'b' => match (self.first(), self.second()) {
      .                           ('\'', _) => {
      .                               self.bump();
     90 ( 0.00%)                      let terminated = self.single_quoted_string();
      .                               let suffix_start = self.len_consumed();
     60 ( 0.00%)                      if terminated {
      .                                   self.eat_literal_suffix();
      .                               }
      .                               let kind = Byte { terminated };
     60 ( 0.00%)                      Literal { kind, suffix_start }
      .                           }
      .                           ('"', _) => {
      .                               self.bump();
      9 ( 0.00%)                      let terminated = self.double_quoted_string();
      .                               let suffix_start = self.len_consumed();
      6 ( 0.00%)                      if terminated {
      .                                   self.eat_literal_suffix();
      .                               }
      .                               let kind = ByteStr { terminated };
      6 ( 0.00%)                      Literal { kind, suffix_start }
      .                           }
      .                           ('r', '"') | ('r', '#') => {
      .                               self.bump();
      .                               let (n_hashes, err) = self.raw_double_quoted_string(2);
      .                               let suffix_start = self.len_consumed();
      .                               if err.is_none() {
      .                                   self.eat_literal_suffix();
      .                               }
-- line 357 ----------------------------------------
-- line 361 ----------------------------------------
      .                           _ => self.ident_or_unknown_prefix(),
      .                       },
      .           
      .                       // Identifier (this should be checked after other variant that can
      .                       // start as identifier).
      .                       c if is_id_start(c) => self.ident_or_unknown_prefix(),
      .           
      .                       // Numeric literal.
 24,636 ( 0.00%)              c @ '0'..='9' => {
      .                           let literal_kind = self.number(c);
      .                           let suffix_start = self.len_consumed();
      .                           self.eat_literal_suffix();
  8,720 ( 0.00%)                  TokenKind::Literal { kind: literal_kind, suffix_start }
      .                       }
      .           
      .                       // One-symbol tokens.
    768 ( 0.00%)              ';' => Semi,
  3,116 ( 0.00%)              ',' => Comma,
    318 ( 0.00%)              '.' => Dot,
  2,240 ( 0.00%)              '(' => OpenParen,
  2,240 ( 0.00%)              ')' => CloseParen,
    382 ( 0.00%)              '{' => OpenBrace,
    382 ( 0.00%)              '}' => CloseBrace,
    148 ( 0.00%)              '[' => OpenBracket,
    148 ( 0.00%)              ']' => CloseBracket,
      .                       '@' => At,
    134 ( 0.00%)              '#' => Pound,
      .                       '~' => Tilde,
      .                       '?' => Question,
    608 ( 0.00%)              ':' => Colon,
      .                       '$' => Dollar,
    948 ( 0.00%)              '=' => Eq,
     98 ( 0.00%)              '!' => Bang,
    158 ( 0.00%)              '<' => Lt,
    252 ( 0.00%)              '>' => Gt,
    256 ( 0.00%)              '-' => Minus,
    138 ( 0.00%)              '&' => And,
     44 ( 0.00%)              '|' => Or,
    248 ( 0.00%)              '+' => Plus,
    162 ( 0.00%)              '*' => Star,
      .                       '^' => Caret,
     34 ( 0.00%)              '%' => Percent,
      .           
      .                       // Lifetime or character literal.
      9 ( 0.00%)              '\'' => self.lifetime_or_char(),
      .           
      .                       // String literal.
      .                       '"' => {
    162 ( 0.00%)                  let terminated = self.double_quoted_string();
      .                           let suffix_start = self.len_consumed();
    108 ( 0.00%)                  if terminated {
      .                               self.eat_literal_suffix();
      .                           }
      .                           let kind = Str { terminated };
    108 ( 0.00%)                  Literal { kind, suffix_start }
      .                       }
      .                       // Identifier starting with an emoji. Only lexed for graceful error recovery.
      .                       c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
      .                           self.fake_ident_or_unknown_prefix()
      .                       }
      .                       _ => Unknown,
      .                   };
      .                   Token::new(token_kind, self.len_consumed())
153,495 ( 0.02%)      }
      .           
      .               fn line_comment(&mut self) -> TokenKind {
      .                   debug_assert!(self.prev() == '/' && self.first() == '/');
      .                   self.bump();
      .           
  1,558 ( 0.00%)          let doc_style = match self.first() {
      .                       // `//!` is an inner line doc comment.
      .                       '!' => Some(DocStyle::Inner),
      .                       // `////` (more than 3 slashes) is not considered a doc comment.
    351 ( 0.00%)              '/' if self.second() != '/' => Some(DocStyle::Outer),
      .                       _ => None,
      .                   };
      .           
 19,747 ( 0.00%)          self.eat_while(|c| c != '\n');
  1,344 ( 0.00%)          LineComment { doc_style }
      .               }
      .           
      .               fn block_comment(&mut self) -> TokenKind {
      .                   debug_assert!(self.prev() == '/' && self.first() == '*');
      .                   self.bump();
      .           
     20 ( 0.00%)          let doc_style = match self.first() {
      .                       // `/*!` is an inner block doc comment.
      .                       '!' => Some(DocStyle::Inner),
      .                       // `/***` (more than 2 stars) is not considered a doc comment.
      .                       // `/**/` is not considered a doc comment.
      .                       '*' if !matches!(self.second(), '*' | '/') => Some(DocStyle::Outer),
      .                       _ => None,
      .                   };
      .           
      .                   let mut depth = 1usize;
    460 ( 0.00%)          while let Some(c) = self.bump() {
      .                       match c {
      .                           '/' if self.first() == '*' => {
      .                               self.bump();
      .                               depth += 1;
      .                           }
     10 ( 0.00%)                  '*' if self.first() == '/' => {
      .                               self.bump();
     10 ( 0.00%)                      depth -= 1;
     10 ( 0.00%)                      if depth == 0 {
      .                                   // This block comment is closed, so for a construction like "/* */ */"
      .                                   // there will be a successfully parsed block comment "/* */"
      .                                   // and " */" will be processed separately.
      .                                   break;
      .                               }
      .                           }
      .                           _ => (),
      .                       }
      .                   }
      .           
     25 ( 0.00%)          BlockComment { doc_style, terminated: depth == 0 }
      .               }
      .           
      .               fn whitespace(&mut self) -> TokenKind {
      .                   debug_assert!(is_whitespace(self.prev()));
      .                   self.eat_while(is_whitespace);
  5,632 ( 0.00%)          Whitespace
      .               }
      .           
      .               fn raw_ident(&mut self) -> TokenKind {
      .                   debug_assert!(self.prev() == 'r' && self.first() == '#' && is_id_start(self.second()));
      .                   // Eat "#" symbol.
      .                   self.bump();
      .                   // Eat the identifier part of RawIdent.
      .                   self.eat_identifier();
      .                   RawIdent
      .               }
      .           
 13,465 ( 0.00%)      fn ident_or_unknown_prefix(&mut self) -> TokenKind {
      .                   debug_assert!(is_id_start(self.prev()));
      .                   // Start is already eaten, eat the rest of identifier.
  5,386 ( 0.00%)          self.eat_while(is_id_continue);
      .                   // Known prefixes must have been handled earlier. So if
      .                   // we see a prefix here, it is definitely an unknown prefix.
  5,386 ( 0.00%)          match self.first() {
      .                       '#' | '"' | '\'' => UnknownPrefix,
  2,693 ( 0.00%)              c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
      .                           self.fake_ident_or_unknown_prefix()
      .                       }
  2,693 ( 0.00%)              _ => Ident,
      .                   }
 10,772 ( 0.00%)      }
      .           
      .               fn fake_ident_or_unknown_prefix(&mut self) -> TokenKind {
      .                   // Start is already eaten, eat the rest of identifier.
      .                   self.eat_while(|c| {
      .                       unicode_xid::UnicodeXID::is_xid_continue(c)
      .                           || (!c.is_ascii() && unic_emoji_char::is_emoji(c))
      .                           || c == '\u{200d}'
      .                   });
-- line 515 ----------------------------------------
-- line 519 ----------------------------------------
      .                       '#' | '"' | '\'' => UnknownPrefix,
      .                       _ => InvalidIdent,
      .                   }
      .               }
      .           
      .               fn number(&mut self, first_digit: char) -> LiteralKind {
      .                   debug_assert!('0' <= self.prev() && self.prev() <= '9');
      .                   let mut base = Base::Decimal;
  3,488 ( 0.00%)          if first_digit == '0' {
      .                       // Attempt to parse encoding base.
    442 ( 0.00%)              let has_digits = match self.first() {
      .                           'b' => {
      .                               base = Base::Binary;
      .                               self.bump();
      .                               self.eat_decimal_digits()
      .                           }
      .                           'o' => {
      .                               base = Base::Octal;
      .                               self.bump();
-- line 537 ----------------------------------------
-- line 538 ----------------------------------------
      .                               self.eat_decimal_digits()
      .                           }
      .                           'x' => {
      .                               base = Base::Hexadecimal;
      .                               self.bump();
      .                               self.eat_hexadecimal_digits()
      .                           }
      .                           // Not a base prefix.
    264 ( 0.00%)                  '0'..='9' | '_' | '.' | 'e' | 'E' => {
      .                               self.eat_decimal_digits();
      .                               true
      .                           }
      .                           // Just a 0.
      .                           _ => return Int { base, empty_int: false },
      .                       };
      .                       // Base prefix was provided, but there were no digits
      .                       // after it, e.g. "0x".
-- line 554 ----------------------------------------
-- line 555 ----------------------------------------
      .                       if !has_digits {
      .                           return Int { base, empty_int: true };
      .                       }
      .                   } else {
      .                       // No base prefix, parse number in the usual way.
      .                       self.eat_decimal_digits();
      .                   };
      .           
  9,928 ( 0.00%)          match self.first() {
      .                       // Don't be greedy if this is actually an
      .                       // integer literal followed by field/method access or a range pattern
      .                       // (`0..2` and `12.foo()`)
      4 ( 0.00%)              '.' if self.second() != '.' && !is_id_start(self.second()) => {
      .                           // might have stuff after the ., and if it does, it needs to start
      .                           // with a number
      .                           self.bump();
      .                           let mut empty_exponent = false;
      .                           if self.first().is_digit(10) {
      .                               self.eat_decimal_digits();
      .                               match self.first() {
      .                                   'e' | 'E' => {
-- line 575 ----------------------------------------
-- line 585 ----------------------------------------
      .                           self.bump();
      .                           let empty_exponent = !self.eat_float_exponent();
      .                           Float { base, empty_exponent }
      .                       }
      .                       _ => Int { base, empty_int: false },
      .                   }
      .               }
      .           
     21 ( 0.00%)      fn lifetime_or_char(&mut self) -> TokenKind {
      .                   debug_assert!(self.prev() == '\'');
      .           
      6 ( 0.00%)          let can_be_a_lifetime = if self.second() == '\'' {
      .                       // It's surely not a lifetime.
      .                       false
      .                   } else {
      .                       // If the first symbol is valid for identifier, it can be a lifetime.
      .                       // Also check if it's a number for a better error reporting (so '0 will
      .                       // be reported as invalid lifetime and not as unterminated char literal).
      .                       is_id_start(self.first()) || self.first().is_digit(10)
      .                   };
-- line 604 ----------------------------------------
-- line 617 ----------------------------------------
      .                   // length greater than 1.
      .           
      .                   let starts_with_number = self.first().is_digit(10);
      .           
      .                   // Skip the literal contents.
      .                   // First symbol can be a number (which isn't a valid identifier start),
      .                   // so skip it without any checks.
      .                   self.bump();
      6 ( 0.00%)          self.eat_while(is_id_continue);
      .           
      .                   // Check if after skipping literal contents we've met a closing
      .                   // single quote (which means that user attempted to create a
      .                   // string with single quotes).
      6 ( 0.00%)          if self.first() == '\'' {
      .                       self.bump();
      .                       let kind = Char { terminated: true };
      .                       Literal { kind, suffix_start: self.len_consumed() }
      .                   } else {
      6 ( 0.00%)              Lifetime { starts_with_number }
      .                   }
     18 ( 0.00%)      }
      .           
      .               fn single_quoted_string(&mut self) -> bool {
      .                   debug_assert!(self.prev() == '\'');
      .                   // Check if it's a one-symbol literal.
    120 ( 0.00%)          if self.second() == '\'' && self.first() != '\\' {
      .                       self.bump();
      .                       self.bump();
      .                       return true;
      .                   }
      .           
      .                   // Literal has more than one symbol.
      .           
      .                   // Parse until either quotes are terminated or error is detected.
-- line 650 ----------------------------------------
-- line 670 ----------------------------------------
      .                           // Skip the character.
      .                           _ => {
      .                               self.bump();
      .                           }
      .                       }
      .                   }
      .                   // String was not terminated.
      .                   false
     30 ( 0.00%)      }
      .           
      .               /// Eats double-quoted string and returns true
      .               /// if string is terminated.
      .               fn double_quoted_string(&mut self) -> bool {
      .                   debug_assert!(self.prev() == '"');
      .                   while let Some(c) = self.bump() {
  2,763 ( 0.00%)              match c {
      .                           '"' => {
      .                               return true;
      .                           }
     20 ( 0.00%)                  '\\' if self.first() == '\\' || self.first() == '"' => {
      .                               // Bump again to skip escaped character.
      .                               self.bump();
      .                           }
      .                           _ => (),
      .                       }
      .                   }
      .                   // End of file reached.
      .                   false
     57 ( 0.00%)      }
      .           
      .               /// Eats the double-quoted string and returns `n_hashes` and an error if encountered.
      .               fn raw_double_quoted_string(&mut self, prefix_len: usize) -> (u16, Option<RawStrError>) {
      .                   // Wrap the actual function to handle the error with too many hashes.
      .                   // This way, it eats the whole raw string.
      .                   let (n_hashes, err) = self.raw_string_unvalidated(prefix_len);
      .                   // Only up to 65535 `#`s are allowed in raw strings
      .                   match u16::try_from(n_hashes) {
-- line 706 ----------------------------------------
-- line 773 ----------------------------------------
      .                           max_hashes = n_end_hashes;
      .                       }
      .                   }
      .               }
      .           
      .               fn eat_decimal_digits(&mut self) -> bool {
      .                   let mut has_digits = false;
      .                   loop {
 51,794 ( 0.01%)              match self.first() {
      .                           '_' => {
      .                               self.bump();
      .                           }
 77,652 ( 0.01%)                  '0'..='9' => {
      .                               has_digits = true;
      .                               self.bump();
      .                           }
      .                           _ => break,
      .                       }
      .                   }
      .                   has_digits
  3,300 ( 0.00%)      }
      .           
      .               fn eat_hexadecimal_digits(&mut self) -> bool {
      .                   let mut has_digits = false;
      .                   loop {
    156 ( 0.00%)              match self.first() {
      .                           '_' => {
      .                               self.bump();
      .                           }
    315 ( 0.00%)                  '0'..='9' | 'a'..='f' | 'A'..='F' => {
      .                               has_digits = true;
      .                               self.bump();
      .                           }
      .                           _ => break,
      .                       }
      .                   }
      .                   has_digits
     12 ( 0.00%)      }
      .           
      .               /// Eats the float exponent. Returns true if at least one digit was met,
      .               /// and returns false otherwise.
      .               fn eat_float_exponent(&mut self) -> bool {
      .                   debug_assert!(self.prev() == 'e' || self.prev() == 'E');
      .                   if self.first() == '-' || self.first() == '+' {
      .                       self.bump();
      .                   }
      .                   self.eat_decimal_digits()
      .               }
      .           
      .               // Eats the suffix of the literal, e.g. "_u8".
      .               fn eat_literal_suffix(&mut self) {
  3,662 ( 0.00%)          self.eat_identifier();
      .               }
      .           
      .               // Eats the identifier.
  5,493 ( 0.00%)      fn eat_identifier(&mut self) {
      .                   if !is_id_start(self.first()) {
      .                       return;
      .                   }
      .                   self.bump();
      .           
    120 ( 0.00%)          self.eat_while(is_id_continue);
  7,228 ( 0.00%)      }
      .           }

259,075 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs
--------------------------------------------------------------------------------
Ir               

-- line 44 ----------------------------------------
      .           /// Convert from a specific kind of undo to the more general UndoLog
      .           impl<'tcx> From<Instantiate> for UndoLog<'tcx> {
      .               fn from(l: Instantiate) -> Self {
      .                   UndoLog::Values(sv::UndoLog::Other(l))
      .               }
      .           }
      .           
      .           impl<'tcx> Rollback<UndoLog<'tcx>> for TypeVariableStorage<'tcx> {
 19,269 ( 0.00%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
 81,271 ( 0.01%)          match undo {
 15,074 ( 0.00%)              UndoLog::EqRelation(undo) => self.eq_relations.reverse(undo),
  8,498 ( 0.00%)              UndoLog::SubRelation(undo) => self.sub_relations.reverse(undo),
 14,966 ( 0.00%)              UndoLog::Values(undo) => self.values.reverse(undo),
      .                   }
 38,538 ( 0.01%)      }
      .           }
      .           
      .           pub struct TypeVariableStorage<'tcx> {
      .               values: sv::SnapshotVecStorage<Delegate>,
      .           
      .               /// Two variables are unified in `eq_relations` when we have a
      .               /// constraint `?X == ?Y`. This table also stores, for each key,
      .               /// the known value.
-- line 66 ----------------------------------------
-- line 136 ----------------------------------------
      .               DynReturnFn,
      .               LatticeVariable,
      .           }
      .           
      .           pub(crate) struct TypeVariableData {
      .               origin: TypeVariableOrigin,
      .           }
      .           
108,350 ( 0.01%)  #[derive(Copy, Clone, Debug)]
      .           pub enum TypeVariableValue<'tcx> {
      .               Known { value: Ty<'tcx> },
      .               Unknown { universe: ty::UniverseIndex },
      .           }
      .           
      .           impl<'tcx> TypeVariableValue<'tcx> {
      .               /// If this value is known, returns the type it is known to be.
      .               /// Otherwise, `None`.
      .               pub fn known(&self) -> Option<Ty<'tcx>> {
 68,212 ( 0.01%)          match *self {
      .                       TypeVariableValue::Unknown { .. } => None,
      .                       TypeVariableValue::Known { value } => Some(value),
      .                   }
      .               }
      .           
      .               pub fn is_unknown(&self) -> bool {
      .                   match *self {
      .                       TypeVariableValue::Unknown { .. } => true,
-- line 162 ----------------------------------------
-- line 166 ----------------------------------------
      .           }
      .           
      .           pub(crate) struct Instantiate;
      .           
      .           pub(crate) struct Delegate;
      .           
      .           impl<'tcx> TypeVariableStorage<'tcx> {
      .               pub fn new() -> TypeVariableStorage<'tcx> {
  6,675 ( 0.00%)          TypeVariableStorage {
      .                       values: sv::SnapshotVecStorage::new(),
      .                       eq_relations: ut::UnificationTableStorage::new(),
      .                       sub_relations: ut::UnificationTableStorage::new(),
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub(crate) fn with_log<'a>(
-- line 182 ----------------------------------------
-- line 188 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> TypeVariableTable<'_, 'tcx> {
      .               /// Returns the origin that was given when `vid` was created.
      .               ///
      .               /// Note that this function does not return care whether
      .               /// `vid` has been unified with something else or not.
      .               pub fn var_origin(&self, vid: ty::TyVid) -> &TypeVariableOrigin {
    116 ( 0.00%)          &self.storage.values.get(vid.as_usize()).origin
      .               }
      .           
      .               /// Records that `a == b`, depending on `dir`.
      .               ///
      .               /// Precondition: neither `a` nor `b` are known.
      .               pub fn equate(&mut self, a: ty::TyVid, b: ty::TyVid) {
      .                   debug_assert!(self.probe(a).is_unknown());
      .                   debug_assert!(self.probe(b).is_unknown());
    203 ( 0.00%)          self.eq_relations().union(a, b);
    174 ( 0.00%)          self.sub_relations().union(a, b);
      .               }
      .           
      .               /// Records that `a <: b`, depending on `dir`.
      .               ///
      .               /// Precondition: neither `a` nor `b` are known.
      .               pub fn sub(&mut self, a: ty::TyVid, b: ty::TyVid) {
      .                   debug_assert!(self.probe(a).is_unknown());
      .                   debug_assert!(self.probe(b).is_unknown());
    181 ( 0.00%)          self.sub_relations().union(a, b);
      .               }
      .           
      .               /// Instantiates `vid` with the type `ty`.
      .               ///
      .               /// Precondition: `vid` must not have been previously instantiated.
 25,730 ( 0.00%)      pub fn instantiate(&mut self, vid: ty::TyVid, ty: Ty<'tcx>) {
      .                   let vid = self.root_var(vid);
      .                   debug_assert!(self.probe(vid).is_unknown());
      .                   debug_assert!(
      .                       self.eq_relations().probe_value(vid).is_unknown(),
      .                       "instantiating type variable `{:?}` twice: new-value = {:?}, old-value={:?}",
      .                       vid,
      .                       ty,
      .                       self.eq_relations().probe_value(vid)
      .                   );
 36,022 ( 0.00%)          self.eq_relations().union_value(vid, TypeVariableValue::Known { value: ty });
      .           
      .                   // Hack: we only need this so that `types_escaping_snapshot`
      .                   // can see what has been unified; see the Delegate impl for
      .                   // more details.
      .                   self.undo_log.push(Instantiate);
 25,730 ( 0.00%)      }
      .           
      .               /// Creates a new type variable.
      .               ///
      .               /// - `diverging`: indicates if this is a "diverging" type
      .               ///   variable, e.g.,  one created as the type of a `return`
      .               ///   expression. The code in this module doesn't care if a
      .               ///   variable is diverging, but the main Rust type-checker will
      .               ///   sometimes "unify" such variables with the `!` or `()` types.
      .               /// - `origin`: indicates *why* the type variable was created.
      .               ///   The code in this module doesn't care, but it can be useful
      .               ///   for improving error messages.
 36,492 ( 0.00%)      pub fn new_var(
      .                   &mut self,
      .                   universe: ty::UniverseIndex,
      .                   origin: TypeVariableOrigin,
      .               ) -> ty::TyVid {
 54,738 ( 0.01%)          let eq_key = self.eq_relations().new_key(TypeVariableValue::Unknown { universe });
      .           
 30,410 ( 0.00%)          let sub_key = self.sub_relations().new_key(());
  6,082 ( 0.00%)          assert_eq!(eq_key.vid, sub_key);
      .           
 54,738 ( 0.01%)          let index = self.values().push(TypeVariableData { origin });
 24,328 ( 0.00%)          assert_eq!(eq_key.vid.as_u32(), index as u32);
      .           
      .                   debug!("new_var(index={:?}, universe={:?}, origin={:?}", eq_key.vid, universe, origin,);
      .           
      .                   eq_key.vid
 42,574 ( 0.01%)      }
      .           
      .               /// Returns the number of type variables created thus far.
      .               pub fn num_vars(&self) -> usize {
    147 ( 0.00%)          self.storage.values.len()
      .               }
      .           
      .               /// Returns the "root" variable of `vid` in the `eq_relations`
      .               /// equivalence table. All type variables that have been equated
      .               /// will yield the same root variable (per the union-find
      .               /// algorithm), so `root_var(a) == root_var(b)` implies that `a ==
      .               /// b` (transitively).
      .               pub fn root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
 17,814 ( 0.00%)          self.eq_relations().find(vid).vid
      .               }
      .           
      .               /// Returns the "root" variable of `vid` in the `sub_relations`
      .               /// equivalence table. All type variables that have been are
      .               /// related via equality or subtyping will yield the same root
      .               /// variable (per the union-find algorithm), so `sub_root_var(a)
      .               /// == sub_root_var(b)` implies that:
      .               ///
      .               ///     exists X. (a <: X || X <: a) && (b <: X || X <: b)
      5 ( 0.00%)      pub fn sub_root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
 15,543 ( 0.00%)          self.sub_relations().find(vid)
     10 ( 0.00%)      }
      .           
      .               /// Returns `true` if `a` and `b` have same "sub-root" (i.e., exists some
      .               /// type X such that `forall i in {a, b}. (i <: X || X <: i)`.
      .               pub fn sub_unified(&mut self, a: ty::TyVid, b: ty::TyVid) -> bool {
      .                   self.sub_root_var(a) == self.sub_root_var(b)
      .               }
      .           
      .               /// Retrieves the type to which `vid` has been instantiated, if
      .               /// any.
244,880 ( 0.03%)      pub fn probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
      .                   self.inlined_probe(vid)
244,880 ( 0.03%)      }
      .           
      .               /// An always-inlined variant of `probe`, for very hot call sites.
      .               #[inline(always)]
      .               pub fn inlined_probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
154,940 ( 0.02%)          self.eq_relations().inlined_probe_value(vid)
      .               }
      .           
      .               /// If `t` is a type-inference variable, and it has been
      .               /// instantiated, then return the with which it was
      .               /// instantiated. Otherwise, returns `t`.
      .               pub fn replace_if_possible(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
 47,996 ( 0.01%)          match *t.kind() {
 37,962 ( 0.00%)              ty::Infer(ty::TyVar(v)) => match self.probe(v) {
      .                           TypeVariableValue::Unknown { .. } => t,
      .                           TypeVariableValue::Known { value } => value,
      .                       },
      .                       _ => t,
      .                   }
      .               }
      .           
      .               #[inline]
-- line 323 ----------------------------------------
-- line 324 ----------------------------------------
      .               fn values(
      .                   &mut self,
      .               ) -> sv::SnapshotVec<Delegate, &mut Vec<TypeVariableData>, &mut InferCtxtUndoLogs<'tcx>> {
      .                   self.storage.values.with_log(self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn eq_relations(&mut self) -> super::UnificationTable<'_, 'tcx, TyVidEqKey<'tcx>> {
209,927 ( 0.03%)          self.storage.eq_relations.with_log(self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn sub_relations(&mut self) -> super::UnificationTable<'_, 'tcx, ty::TyVid> {
 11,391 ( 0.00%)          self.storage.sub_relations.with_log(self.undo_log)
      .               }
      .           
      .               /// Returns a range of the type variables created during the snapshot.
    735 ( 0.00%)      pub fn vars_since_snapshot(
      .                   &mut self,
      .                   value_count: usize,
      .               ) -> (Range<TyVid>, Vec<TypeVariableOrigin>) {
      .                   let range = TyVid::from_usize(value_count)..TyVid::from_usize(self.num_vars());
    882 ( 0.00%)          (
      .                       range.start..range.end,
      .                       (range.start.as_usize()..range.end.as_usize())
      .                           .map(|index| self.storage.values.get(index).origin)
      .                           .collect(),
      .                   )
    882 ( 0.00%)      }
      .           
      .               /// Returns indices of all variables that are not yet
      .               /// instantiated.
      .               pub fn unsolved_variables(&mut self) -> Vec<ty::TyVid> {
      .                   (0..self.storage.values.len())
      .                       .filter_map(|i| {
      .                           let vid = ty::TyVid::from_usize(i);
 13,868 ( 0.00%)                  match self.probe(vid) {
      .                               TypeVariableValue::Unknown { .. } => Some(vid),
      .                               TypeVariableValue::Known { .. } => None,
      .                           }
      .                       })
      .                       .collect()
      .               }
      .           }
      .           
-- line 368 ----------------------------------------
-- line 391 ----------------------------------------
      .           /// These structs (a newtyped TyVid) are used as the unification key
      .           /// for the `eq_relations`; they carry a `TypeVariableValue` along
      .           /// with them.
      .           #[derive(Copy, Clone, Debug, PartialEq, Eq)]
      .           pub(crate) struct TyVidEqKey<'tcx> {
      .               vid: ty::TyVid,
      .           
      .               // in the table, we map each ty-vid to one of these:
145,828 ( 0.02%)      phantom: PhantomData<TypeVariableValue<'tcx>>,
      .           }
      .           
      .           impl<'tcx> From<ty::TyVid> for TyVidEqKey<'tcx> {
      .               #[inline] // make this function eligible for inlining - it is quite hot.
      .               fn from(vid: ty::TyVid) -> Self {
      .                   TyVidEqKey { vid, phantom: PhantomData }
      .               }
      .           }
-- line 407 ----------------------------------------
-- line 419 ----------------------------------------
      .                   "TyVidEqKey"
      .               }
      .           }
      .           
      .           impl<'tcx> ut::UnifyValue for TypeVariableValue<'tcx> {
      .               type Error = ut::NoError;
      .           
      .               fn unify_values(value1: &Self, value2: &Self) -> Result<Self, ut::NoError> {
 20,729 ( 0.00%)          match (value1, value2) {
      .                       // We never equate two type variables, both of which
      .                       // have known types.  Instead, we recursively equate
      .                       // those types.
      .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Known { .. }) => {
      .                           bug!("equating two type variables, both of which have known types")
      .                       }
      .           
      .                       // If one side is known, prefer that one.
      .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Unknown { .. }) => Ok(*value1),
      .                       (&TypeVariableValue::Unknown { .. }, &TypeVariableValue::Known { .. }) => Ok(*value2),
      .           
      .                       // If both sides are *unknown*, it hardly matters, does it?
      .                       (
     29 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe1 },
     29 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe2 },
      .                       ) => {
      .                           // If we unify two unbound variables, ?T and ?U, then whatever
      .                           // value they wind up taking (which must be the same value) must
      .                           // be nameable by both universes. Therefore, the resulting
      .                           // universe is the minimum of the two universes, because that is
      .                           // the one which contains the fewest names in scope.
      .                           let universe = cmp::min(universe1, universe2);
    116 ( 0.00%)                  Ok(TypeVariableValue::Unknown { universe })
      .                       }
      .                   }
      .               }
      .           }

 13,665 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 141 ----------------------------------------
      .               /// ```
      .               /// let a = [1, 2, 3];
      .               /// assert!(!a.is_empty());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
      .               #[inline]
      .               pub const fn is_empty(&self) -> bool {
162,669 ( 0.02%)          self.len() == 0
      .               }
      .           
      .               /// Returns the first element of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
      .               ///
      .               /// let w: &[i32] = &[];
      .               /// assert_eq!(None, w.first());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn first(&self) -> Option<&T> {
    982 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
      .               }
      .           
      .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
      .               ///     *first = 5;
      .               /// }
      .               /// assert_eq!(x, &[5, 1, 2]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
      .               #[inline]
      .               pub const fn first_mut(&mut self) -> Option<&mut T> {
     32 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
      .               }
      .           
      .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 237 ----------------------------------------
      .               ///     assert_eq!(last, &2);
      .               ///     assert_eq!(elements, &[0, 1]);
      .               /// }
      .               /// ```
      .               #[stable(feature = "slice_splits", since = "1.5.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
    885 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
      .               }
      .           
      .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
      .               ///
      .               /// let w: &[i32] = &[];
      .               /// assert_eq!(None, w.last());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn last(&self) -> Option<&T> {
121,501 ( 0.02%)          if let [.., last] = self { Some(last) } else { None }
      .               }
      .           
      .               /// Returns a mutable pointer to the last item in the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
      .               ///     *last = 10;
      .               /// }
      .               /// assert_eq!(x, &[0, 1, 10]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
      .               #[inline]
      .               pub const fn last_mut(&mut self) -> Option<&mut T> {
102,142 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
      .               }
      .           
      .               /// Returns a reference to an element or subslice depending on the type of
      .               /// index.
      .               ///
      .               /// - If given a position, returns a reference to the element at that
      .               ///   position or `None` if out of bounds.
      .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 448 ----------------------------------------
      .               /// }
      .               /// ```
      .               ///
      .               /// [`as_mut_ptr`]: slice::as_mut_ptr
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
      .               #[inline]
      .               pub const fn as_ptr(&self) -> *const T {
159,872 ( 0.02%)          self as *const [T] as *const T
      .               }
      .           
      .               /// Returns an unsafe mutable pointer to the slice's buffer.
      .               ///
      .               /// The caller must ensure that the slice outlives the pointer this
      .               /// function returns, or else it will end up pointing to garbage.
      .               ///
      .               /// Modifying the container referenced by this slice may cause its buffer
-- line 464 ----------------------------------------
-- line 476 ----------------------------------------
      .               ///     }
      .               /// }
      .               /// assert_eq!(x, &[3, 4, 6]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
      .               #[inline]
      .               pub const fn as_mut_ptr(&mut self) -> *mut T {
     12 ( 0.00%)          self as *mut [T] as *mut T
      .               }
      .           
      .               /// Returns the two raw pointers spanning the slice.
      .               ///
      .               /// The returned range is half-open, which means that the end pointer
      .               /// points *one past* the last element of the slice. This way, an empty
      .               /// slice is represented by two equal pointers, and the difference between
      .               /// the two pointers represents the size of the slice.
-- line 492 ----------------------------------------
-- line 582 ----------------------------------------
      .               /// v.swap(2, 4);
      .               /// assert!(v == ["a", "b", "e", "d", "c"]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
      .               #[inline]
      .               #[track_caller]
      .               pub const fn swap(&mut self, a: usize, b: usize) {
 11,834 ( 0.00%)          let _ = &self[a];
 15,783 ( 0.00%)          let _ = &self[b];
      .           
      .                   // SAFETY: we just checked that both `a` and `b` are in bounds
      .                   unsafe { self.swap_unchecked(a, b) }
      .               }
      .           
      .               /// Swaps two elements in the slice, without doing bounds checking.
      .               ///
      .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 677 ----------------------------------------
      .           
      .                       // Because this function is first compiled in isolation,
      .                       // this check tells LLVM that the indexing below is
      .                       // in-bounds.  Then after inlining -- once the actual
      .                       // lengths of the slices are known -- it's removed.
      .                       let (a, b) = (&mut a[..n], &mut b[..n]);
      .           
      .                       for i in 0..n {
  1,118 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
      .                       }
      .                   }
      .               }
      .           
      .               /// Returns an iterator over the slice.
      .               ///
      .               /// # Examples
      .               ///
-- line 693 ----------------------------------------
-- line 1499 ----------------------------------------
      .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
      .               ///     assert_eq!(right, []);
      .               /// }
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               #[track_caller]
      .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
    312 ( 0.00%)          assert!(mid <= self.len());
      .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
      .                   // fulfills the requirements of `from_raw_parts_mut`.
      .                   unsafe { self.split_at_unchecked(mid) }
      .               }
      .           
      .               /// Divides one mutable slice into two at an index.
      .               ///
      .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
      .               /// left[1] = 2;
      .               /// right[1] = 4;
      .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               #[track_caller]
      .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
  2,408 ( 0.00%)          assert!(mid <= self.len());
      .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
      .                   // fulfills the requirements of `from_raw_parts_mut`.
      .                   unsafe { self.split_at_mut_unchecked(mid) }
      .               }
      .           
      .               /// Divides one slice into two at an index, without doing bounds checking.
      .               ///
      .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
      .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
      .                   let len = self.len();
      .                   let ptr = self.as_mut_ptr();
      .           
      .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
      .                   //
      .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
      .                   // is fine.
    423 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
      .               }
      .           
      .               /// Divides one slice into an array and a remainder slice at an index.
      .               ///
      .               /// The array will contain all indices from `[0, N)` (excluding
      .               /// the index `N` itself) and the slice will contain all
      .               /// indices from `[N, len)` (excluding the index `len` itself).
      .               ///
-- line 1644 ----------------------------------------
-- line 2113 ----------------------------------------
      .               /// assert!(!v.iter().any(|e| e == "hi"));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               pub fn contains(&self, x: &T) -> bool
      .               where
      .                   T: PartialEq,
      .               {
      4 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
      .               }
      .           
      .               /// Returns `true` if `needle` is a prefix of the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2142 ----------------------------------------
      .               /// assert!(v.starts_with(&[]));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn starts_with(&self, needle: &[T]) -> bool
      .               where
      .                   T: PartialEq,
      .               {
      .                   let n = needle.len();
 21,449 ( 0.00%)          self.len() >= n && needle == &self[..n]
      .               }
      .           
      .               /// Returns `true` if `needle` is a suffix of the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 2158 ----------------------------------------
-- line 2171 ----------------------------------------
      .               /// assert!(v.ends_with(&[]));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn ends_with(&self, needle: &[T]) -> bool
      .               where
      .                   T: PartialEq,
      .               {
      .                   let (m, n) = (self.len(), needle.len());
    902 ( 0.00%)          m >= n && needle == &self[m - n..]
      .               }
      .           
      .               /// Returns a subslice with the prefix removed.
      .               ///
      .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
      .               /// If `prefix` is empty, simply returns the original slice.
      .               ///
      .               /// If the slice does not start with `prefix`, returns `None`.
-- line 2187 ----------------------------------------
-- line 2293 ----------------------------------------
      .               /// s.insert(idx, num);
      .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
      .               where
      .                   T: Ord,
      .               {
      3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
      .               }
      .           
      .               /// Binary searches this sorted slice with a comparator function.
      .               ///
      .               /// The comparator function should implement an order consistent
      .               /// with the sort order of the underlying slice, returning an
      .               /// order code that indicates whether its argument is `Less`,
      .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
      .               #[inline]
      .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
      .               where
      .                   F: FnMut(&'a T) -> Ordering,
      .               {
      .                   let mut size = self.len();
      .                   let mut left = 0;
      .                   let mut right = size;
643,617 ( 0.08%)          while left < right {
833,706 ( 0.11%)              let mid = left + size / 2;
      .           
      .                       // SAFETY: the call is made safe by the following invariants:
      .                       // - `mid >= 0`
      .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
128,294 ( 0.02%)              let cmp = f(unsafe { self.get_unchecked(mid) });
      .           
      .                       // The reason why we use if/else control flow rather than match
      .                       // is because match reorders comparison operations, which is perf sensitive.
      .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
223,371 ( 0.03%)              if cmp == Less {
387,172 ( 0.05%)                  left = mid + 1;
122,671 ( 0.02%)              } else if cmp == Greater {
      .                           right = mid;
      .                       } else {
      .                           // SAFETY: same as the `get_unchecked` above
      .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
      .                           return Ok(mid);
      .                       }
      .           
670,956 ( 0.09%)              size = right - left;
      .                   }
      .                   Err(left)
      .               }
      .           
      .               /// Binary searches this sorted slice with a key extraction function.
      .               ///
      .               /// Assumes that the slice is sorted by the key, for instance with
      .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3203 ----------------------------------------
      .                   #[track_caller]
      .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
      .                       panic!(
      .                           "source slice length ({}) does not match destination slice length ({})",
      .                           src_len, dst_len,
      .                       );
      .                   }
      .           
 28,616 ( 0.00%)          if self.len() != src.len() {
      .                       len_mismatch_fail(self.len(), src.len());
      .                   }
      .           
      .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
      .                   // checked to have the same length. The slices cannot overlap because
      .                   // mutable references are exclusive.
      .                   unsafe {
      .                       ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
-- line 3219 ----------------------------------------
-- line 3382 ----------------------------------------
      .                   }
      .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
      .                   let ts: usize = mem::size_of::<U>() / gcd;
      .                   let us: usize = mem::size_of::<T>() / gcd;
      .           
      .                   // Armed with this knowledge, we can find how many `U`s we can fit!
      .                   let us_len = self.len() / ts * us;
      .                   // And how many `T`s will be in the trailing slice!
  3,088 ( 0.00%)          let ts_len = self.len() % ts;
      .                   (us_len, ts_len)
      .               }
      .           
      .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
      .               /// maintained.
      .               ///
      .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
      .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
      .                       return (self, &[], &[]);
      .                   }
      .           
      .                   // First, find at what point do we split between the first and 2nd slice. Easy with
      .                   // ptr.align_offset.
      .                   let ptr = self.as_ptr();
      .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
      .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
  3,088 ( 0.00%)          if offset > self.len() {
      .                       (self, &[], &[])
      .                   } else {
      .                       let (left, rest) = self.split_at(offset);
      .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
      .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
      .                       // since the caller guarantees that we can transmute `T` to `U` safely.
      .                       unsafe {
      .                           (
      .                               left,
      .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
  3,088 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
      .                           )
      .                       }
      .                   }
      .               }
      .           
      .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
      .               /// maintained.
      .               ///
-- line 3456 ----------------------------------------

576,252 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 108 ----------------------------------------
      .                   suppress_errors: bool,
      .               },
      .           }
      .           
      .           impl RegionckMode {
      .               /// Indicates that the MIR borrowck will repeat these region
      .               /// checks, so we should ignore errors if NLL is (unconditionally)
      .               /// enabled.
     69 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
      .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
      .                   // this always `true` and then proceed to eliminate the dead code.
     69 ( 0.00%)          match tcx.borrowck_mode() {
      .                       // If we're on Migrate mode, report AST region errors
      .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
      .           
      .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
      .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
      .                   }
    138 ( 0.00%)      }
      .           }
      .           
      .           /// This type contains all the things within `InferCtxt` that sit within a
      .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
      .           /// operations are hot enough that we want only one call to `borrow_mut` per
      .           /// call to `start_snapshot` and `rollback_to`.
      .           pub struct InferCtxtInner<'tcx> {
      .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
      .               /// type instantiations (`ty::Infer`) to the actual opaque
      .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
      .               /// opaque type inference variables to their corresponding
      .               /// opaque type.
      .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
      .           }
      .           
      .           impl<'tcx> InferCtxtInner<'tcx> {
 11,125 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
 75,650 ( 0.01%)          InferCtxtInner {
      .                       projection_cache: Default::default(),
      .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
      .                       undo_log: InferCtxtUndoLogs::default(),
      .                       const_unification_storage: ut::UnificationTableStorage::new(),
      .                       int_unification_storage: ut::UnificationTableStorage::new(),
      .                       float_unification_storage: ut::UnificationTableStorage::new(),
  6,675 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
      .                       region_obligations: vec![],
      .                       opaque_types: Default::default(),
      .                       opaque_types_vars: Default::default(),
      .                   }
 13,350 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
      .                   &self.region_obligations
      .               }
      .           
      .               #[inline]
      .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
  1,518 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
102,428 ( 0.01%)          self.type_variable_storage.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn int_unification_table(
      .                   &mut self,
      .               ) -> ut::UnificationTable<
      .                   ut::InPlace<
      .                       ty::IntVid,
      .                       &mut ut::UnificationStorage<ty::IntVid>,
      .                       &mut InferCtxtUndoLogs<'tcx>,
      .                   >,
      .               > {
 10,818 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn float_unification_table(
      .                   &mut self,
      .               ) -> ut::UnificationTable<
      .                   ut::InPlace<
      .                       ty::FloatVid,
-- line 258 ----------------------------------------
-- line 268 ----------------------------------------
      .                   &mut self,
      .               ) -> ut::UnificationTable<
      .                   ut::InPlace<
      .                       ty::ConstVid<'tcx>,
      .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
      .                       &mut InferCtxtUndoLogs<'tcx>,
      .                   >,
      .               > {
    459 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
  4,366 ( 0.00%)          self.region_constraint_storage
      .                       .as_mut()
      .                       .expect("region constraints already solved")
  4,464 ( 0.00%)              .with_log(&mut self.undo_log)
      .               }
      .           }
      .           
      .           pub struct InferCtxt<'a, 'tcx> {
      .               pub tcx: TyCtxt<'tcx>,
      .           
      .               /// The `DefId` of the item in whose context we are performing inference or typeck.
      .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
      .               /// item we are type-checking, and just consider those names as
      .               /// part of the root universe. So this would only get incremented
      .               /// when we enter into a higher-ranked (`for<..>`) type or trait
      .               /// bound.
      .               universe: Cell<ty::UniverseIndex>,
      .           }
      .           
      .           /// See the `error_reporting` module for more details.
  3,584 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
      .           pub enum ValuePairs<'tcx> {
      .               Types(ExpectedFound<Ty<'tcx>>),
      .               Regions(ExpectedFound<ty::Region<'tcx>>),
      .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
      .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
      .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
      .           }
      .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
      .           pub struct TypeTrace<'tcx> {
      .               cause: ObligationCause<'tcx>,
      .               values: ValuePairs<'tcx>,
      .           }
      .           
      .           /// The origin of a `r1 <= r2` constraint.
      .           ///
      .           /// See `error_reporting` module for more details
  3,135 ( 0.00%)  #[derive(Clone, Debug)]
      .           pub enum SubregionOrigin<'tcx> {
      .               /// Arose from a subtyping relation
    209 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
      .           
      .               /// When casting `&'a T` to an `&'b Trait` object,
      .               /// relating `'a` to `'b`
      .               RelateObjectBound(Span),
      .           
      .               /// Some type parameter was instantiated with the given type,
      .               /// and that type must outlive some region.
      .               RelateParamBound(Span, Ty<'tcx>, Option<Span>),
-- line 402 ----------------------------------------
-- line 554 ----------------------------------------
      .               defining_use_anchor: Option<LocalDefId>,
      .           }
      .           
      .           pub trait TyCtxtInferExt<'tcx> {
      .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
      .           }
      .           
      .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
  2,225 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
  6,675 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
  2,225 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> InferCtxtBuilder<'tcx> {
      .               /// Used only by `rustc_typeck` during body type-checking/inference,
      .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
      .               /// Will also change the scope for opaque type defining use checks to the given owner.
  1,341 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
  1,639 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
    745 ( 0.00%)          self.with_opaque_type_inference(table_owner)
  1,043 ( 0.00%)      }
      .           
      .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
      .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
      .               ///
      .               /// It is only meant to be called in two places, for typeck
      .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
      .               /// in mir borrowck.
    138 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
     69 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
    436 ( 0.00%)          self
    207 ( 0.00%)      }
      .           
      .               /// Given a canonical value `C` as a starting point, create an
      .               /// inference context that contains each of the bound values
      .               /// within instantiated as a fresh variable. The `f` closure is
      .               /// invoked with the new infcx, along with the instantiated value
      .               /// `V` and a substitution `S`. This substitution `S` maps from
      .               /// the bound values in `C` to their instantiated values in `V`
      .               /// (in other words, `S(C) = V`).
  2,389 ( 0.00%)      pub fn enter_with_canonical<T, R>(
      .                   &mut self,
      .                   span: Span,
      .                   canonical: &Canonical<'tcx, T>,
      .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
      .               ) -> R
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
      .                   self.enter(|infcx| {
  2,678 ( 0.00%)              let (value, subst) =
    134 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
  4,045 ( 0.00%)              f(infcx, value, subst)
      .                   })
  2,619 ( 0.00%)      }
      .           
 15,057 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
  5,863 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
      .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
 99,378 ( 0.01%)          f(InferCtxt {
      .                       tcx,
      .                       defining_use_anchor,
      .                       in_progress_typeck_results,
  2,225 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
      .                       lexical_region_resolutions: RefCell::new(None),
      .                       selection_cache: Default::default(),
      .                       evaluation_cache: Default::default(),
      .                       reported_trait_errors: Default::default(),
      .                       reported_closure_mismatch: Default::default(),
      .                       tainted_by_errors_flag: Cell::new(false),
  2,225 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
      .                       in_snapshot: Cell::new(false),
      .                       skip_leak_check: Cell::new(false),
      .                       universe: Cell::new(ty::UniverseIndex::ROOT),
      .                   })
 16,402 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx, T> InferOk<'tcx, T> {
      .               pub fn unit(self) -> InferOk<'tcx, ()> {
      .                   InferOk { value: (), obligations: self.obligations }
      .               }
      .           
      .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
      .               pub fn into_value_registering_obligations(
      .                   self,
      .                   infcx: &InferCtxt<'_, 'tcx>,
      .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
      .               ) -> T {
     52 ( 0.00%)          let InferOk { value, obligations } = self;
    212 ( 0.00%)          for obligation in obligations {
      .                       fulfill_cx.register_predicate_obligation(infcx, obligation);
      .                   }
      .                   value
      .               }
      .           }
      .           
      .           impl<'tcx> InferOk<'tcx, ()> {
    538 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
  2,152 ( 0.00%)          self.obligations
    538 ( 0.00%)      }
      .           }
      .           
      .           #[must_use = "once you start a snapshot, you should always consume it"]
      .           pub struct CombinedSnapshot<'a, 'tcx> {
      .               undo_snapshot: Snapshot<'tcx>,
      .               region_constraints_snapshot: RegionSnapshot,
      .               universe: ty::UniverseIndex,
      .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
      .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
      .                   debug!("canonical consts: {:?}", &canonical.value);
      .           
      .                   self.tcx.try_unify_abstract_consts(canonical.value)
      .               }
      .           
      .               pub fn is_in_snapshot(&self) -> bool {
      .                   self.in_snapshot.get()
  4,487 ( 0.00%)      }
      .           
 34,208 ( 0.00%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
 38,484 ( 0.01%)          t.fold_with(&mut self.freshener())
 38,484 ( 0.01%)      }
      .           
      .               /// Returns the origin of the type variable identified by `vid`, or `None`
      .               /// if this is not a type variable.
      .               ///
      .               /// No attempt is made to resolve `ty`.
    214 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
    428 ( 0.00%)          match *ty.kind() {
     91 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
    364 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
      .                       }
     16 ( 0.00%)              _ => None,
      .                   }
    428 ( 0.00%)      }
      .           
  4,276 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
      .                   freshen::TypeFreshener::new(self, false)
  4,276 ( 0.00%)      }
      .           
      .               /// Like `freshener`, but does not replace `'static` regions.
 14,350 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
      .                   freshen::TypeFreshener::new(self, true)
 14,350 ( 0.00%)      }
      .           
    340 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
    170 ( 0.00%)          let mut inner = self.inner.borrow_mut();
    170 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
      .                       .type_variables()
      .                       .unsolved_variables()
      .                       .into_iter()
    182 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
      .                       .collect();
      .                   vars.extend(
      .                       (0..inner.int_unification_table().len())
      .                           .map(|i| ty::IntVid { index: i as u32 })
    720 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
     16 ( 0.00%)                  .map(|v| self.tcx.mk_int_var(v)),
      .                   );
      .                   vars.extend(
      .                       (0..inner.float_unification_table().len())
      .                           .map(|i| ty::FloatVid { index: i as u32 })
      .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
      .                           .map(|v| self.tcx.mk_float_var(v)),
      .                   );
      .                   vars
    595 ( 0.00%)      }
      .           
 10,975 ( 0.00%)      fn combine_fields(
      .                   &'a self,
      .                   trace: TypeTrace<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .               ) -> CombineFields<'a, 'tcx> {
 44,000 ( 0.01%)          CombineFields {
      .                       infcx: self,
110,000 ( 0.01%)              trace,
      .                       cause: None,
      .                       param_env,
      .                       obligations: PredicateObligations::new(),
      .                   }
 10,975 ( 0.00%)      }
      .           
      .               /// Clear the "currently in a snapshot" flag, invoke the closure,
      .               /// then restore the flag to its original value. This flag is a
      .               /// debugging measure designed to detect cases where we start a
      .               /// snapshot, create type variables, and register obligations
      .               /// which may involve those type variables in the fulfillment cx,
      .               /// potentially leaving "dangling type variables" behind.
      .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 755 ----------------------------------------
      .               /// better than grovelling through megabytes of `RUSTC_LOG` output.
      .               ///
      .               /// HOWEVER, in some cases the flag is unhelpful. In particular, we
      .               /// sometimes create a "mini-fulfilment-cx" in which we enroll
      .               /// obligations. As long as this fulfillment cx is fully drained
      .               /// before we return, this is not a problem, as there won't be any
      .               /// escaping obligations in the main cx. In those cases, you can
      .               /// use this function.
      8 ( 0.00%)      pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
      .               where
      .                   F: FnOnce(&Self) -> R,
      .               {
      .                   let flag = self.in_snapshot.replace(false);
    885 ( 0.00%)          let result = func(self);
      .                   self.in_snapshot.set(flag);
      .                   result
      9 ( 0.00%)      }
      .           
 57,528 ( 0.01%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
      .                   debug!("start_snapshot()");
      .           
      .                   let in_snapshot = self.in_snapshot.replace(true);
      .           
      .                   let mut inner = self.inner.borrow_mut();
      .           
172,584 ( 0.02%)          CombinedSnapshot {
      .                       undo_snapshot: inner.undo_log.start_snapshot(),
      .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
      .                       universe: self.universe(),
      .                       was_in_snapshot: in_snapshot,
      .                       // Borrow typeck results "in progress" (i.e., during typeck)
      .                       // to ban writes from within a snapshot to them.
 28,764 ( 0.00%)              _in_progress_typeck_results: self
      .                           .in_progress_typeck_results
      .                           .map(|typeck_results| typeck_results.borrow()),
      .                   }
115,056 ( 0.02%)      }
      .           
 95,689 ( 0.01%)      #[instrument(skip(self, snapshot), level = "debug")]
      .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
      .                   let CombinedSnapshot {
  8,699 ( 0.00%)              undo_snapshot,
  8,699 ( 0.00%)              region_constraints_snapshot,
  8,699 ( 0.00%)              universe,
  8,699 ( 0.00%)              was_in_snapshot,
 17,398 ( 0.00%)              _in_progress_typeck_results,
      .                   } = snapshot;
      .           
      .                   self.in_snapshot.set(was_in_snapshot);
      .                   self.universe.set(universe);
      .           
      .                   let mut inner = self.inner.borrow_mut();
  8,699 ( 0.00%)          inner.rollback_to(undo_snapshot);
      .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
      .               }
      .           
300,975 ( 0.04%)      #[instrument(skip(self, snapshot), level = "debug")]
      .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
      .                   let CombinedSnapshot {
 20,065 ( 0.00%)              undo_snapshot,
      .                       region_constraints_snapshot: _,
      .                       universe: _,
 20,065 ( 0.00%)              was_in_snapshot,
 40,130 ( 0.01%)              _in_progress_typeck_results,
      .                   } = snapshot;
      .           
      .                   self.in_snapshot.set(was_in_snapshot);
      .           
      .                   self.inner.borrow_mut().commit(undo_snapshot);
      .               }
      .           
      .               /// Executes `f` and commit the bindings.
  8,253 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
 10,098 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
      .               {
    918 ( 0.00%)          let snapshot = self.start_snapshot();
  2,811 ( 0.00%)          let r = f(&snapshot);
  6,426 ( 0.00%)          self.commit_from(snapshot);
  5,487 ( 0.00%)          r
      .               }
      .           
      .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
127,507 ( 0.02%)      #[instrument(skip(self, f), level = "debug")]
158,162 ( 0.02%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
      .               {
 28,397 ( 0.00%)          let snapshot = self.start_snapshot();
 72,903 ( 0.01%)          let r = f(&snapshot);
      .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
 35,554 ( 0.00%)          match r {
      .                       Ok(_) => {
134,599 ( 0.02%)                  self.commit_from(snapshot);
      .                       }
      .                       Err(_) => {
 54,699 ( 0.01%)                  self.rollback_to("commit_if_ok -- error", snapshot);
      .                       }
      .                   }
175,737 ( 0.02%)          r
      .               }
      .           
      .               /// Execute `f` then unroll any bindings it creates.
 21,674 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
 26,216 ( 0.00%)      pub fn probe<R, F>(&self, f: F) -> R
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
      .               {
  6,224 ( 0.00%)          let snapshot = self.start_snapshot();
 11,432 ( 0.00%)          let r = f(&snapshot);
 28,818 ( 0.00%)          self.rollback_to("probe", snapshot);
  3,010 ( 0.00%)          r
      .               }
      .           
      .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
      .               #[instrument(skip(self, f), level = "debug")]
      .               pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
      .               {
-- line 875 ----------------------------------------
-- line 884 ----------------------------------------
      .                   r
      .               }
      .           
      .               /// Scan the constraints produced since `snapshot` began and returns:
      .               ///
      .               /// - `None` -- if none of them involve "region outlives" constraints
      .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
      .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
  1,478 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
      .                   &self,
      .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
      .               ) -> Option<bool> {
  2,956 ( 0.00%)          self.inner
      .                       .borrow_mut()
      .                       .unwrap_region_constraints()
      .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
  2,217 ( 0.00%)      }
      .           
      .               pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
      .                   self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
      .               }
      .           
    240 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
      .               where
      .                   T: at::ToTrace<'tcx>,
      .               {
      .                   let origin = &ObligationCause::dummy();
      .                   self.probe(|_| {
      .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
      .                           // Ignore obligations, since we are unrolling
      .                           // everything anyway.
      .                       })
      .                   })
    180 ( 0.00%)      }
      .           
    180 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
      .               where
      .                   T: at::ToTrace<'tcx>,
      .               {
      .                   let origin = &ObligationCause::dummy();
      .                   self.probe(|_| {
      .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
      .                           // Ignore obligations, since we are unrolling
      .                           // everything anyway.
      .                       })
      .                   })
    135 ( 0.00%)      }
      .           
    240 ( 0.00%)      #[instrument(skip(self), level = "debug")]
      .               pub fn sub_regions(
      .                   &self,
      .                   origin: SubregionOrigin<'tcx>,
      .                   a: ty::Region<'tcx>,
      .                   b: ty::Region<'tcx>,
      .               ) {
    216 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
      .               }
      .           
      .               /// Require that the region `r` be equal to one of the regions in
      .               /// the set `regions`.
      .               #[instrument(skip(self), level = "debug")]
      .               pub fn member_constraint(
      .                   &self,
      .                   opaque_type_def_id: DefId,
-- line 947 ----------------------------------------
-- line 969 ----------------------------------------
      .               /// to `subtype_predicate` -- that is, "coercing" `a` to `b` winds up
      .               /// actually requiring `a <: b`. This is of course a valid coercion,
      .               /// but it's not as flexible as `FnCtxt::coerce` would be.
      .               ///
      .               /// (We may refactor this in the future, but there are a number of
      .               /// practical obstacles. Among other things, `FnCtxt::coerce` presently
      .               /// records adjustments that are required on the HIR in order to perform
      .               /// the coercion, and we don't currently have a way to manage that.)
     75 ( 0.00%)      pub fn coerce_predicate(
      .                   &self,
      .                   cause: &ObligationCause<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   predicate: ty::PolyCoercePredicate<'tcx>,
      .               ) -> Option<InferResult<'tcx, ()>> {
     50 ( 0.00%)          let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
      .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
      .                       a: p.a,
      .                       b: p.b,
      .                   });
    125 ( 0.00%)          self.subtype_predicate(cause, param_env, subtype_predicate)
    100 ( 0.00%)      }
      .           
    468 ( 0.00%)      pub fn subtype_predicate(
      .                   &self,
      .                   cause: &ObligationCause<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   predicate: ty::PolySubtypePredicate<'tcx>,
      .               ) -> Option<InferResult<'tcx, ()>> {
      .                   // Check for two unresolved inference variables, in which case we can
      .                   // make no progress. This is partly a micro-optimization, but it's
      .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
      .                   // earlier that they are sub-unified).
      .                   //
      .                   // Note that we can just skip the binders here because
      .                   // type variables can't (at present, at
      .                   // least) capture any of the things bound by this binder.
      .                   //
      .                   // Note that this sub here is not just for diagnostics - it has semantic
      .                   // effects as well.
     39 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
     39 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
    212 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
     28 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
      .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
     28 ( 0.00%)                  return None;
      .                       }
      .                       _ => {}
      .                   }
      .           
      .                   Some(self.commit_if_ok(|_snapshot| {
     25 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
      .                           self.replace_bound_vars_with_placeholders(predicate);
      .           
     50 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
      .           
      .                       Ok(ok.unit())
      .                   }))
    351 ( 0.00%)      }
      .           
     60 ( 0.00%)      pub fn region_outlives_predicate(
      .                   &self,
      .                   cause: &traits::ObligationCause<'tcx>,
      .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
      .               ) -> UnitResult<'tcx> {
      .                   self.commit_if_ok(|_snapshot| {
      .                       let ty::OutlivesPredicate(r_a, r_b) =
      .                           self.replace_bound_vars_with_placeholders(predicate);
      .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
      .                           RelateRegionParamBound(cause.span)
      .                       });
     50 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
      .                       Ok(())
      .                   })
     40 ( 0.00%)      }
      .           
      .               /// Number of type variables created so far.
     16 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
      .                   self.inner.borrow_mut().type_variables().num_vars()
     32 ( 0.00%)      }
      .           
  8,298 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
 41,490 ( 0.01%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
 12,447 ( 0.00%)      }
      .           
  7,708 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
 28,748 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
 11,562 ( 0.00%)      }
      .           
    132 ( 0.00%)      pub fn next_ty_var_in_universe(
      .                   &self,
      .                   origin: TypeVariableOrigin,
      .                   universe: ty::UniverseIndex,
      .               ) -> Ty<'tcx> {
    726 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
     66 ( 0.00%)          self.tcx.mk_ty_var(vid)
    198 ( 0.00%)      }
      .           
      .               pub fn next_const_var(
      .                   &self,
      .                   ty: Ty<'tcx>,
      .                   origin: ConstVariableOrigin,
      .               ) -> &'tcx ty::Const<'tcx> {
      .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
      .               }
-- line 1074 ----------------------------------------
-- line 1090 ----------------------------------------
      .               pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
      .                   self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
      .                       origin,
      .                       val: ConstVariableValue::Unknown { universe: self.universe() },
      .                   })
      .               }
      .           
      .               fn next_int_var_id(&self) -> IntVid {
    955 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
      .               }
      .           
    573 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
      .                   self.tcx.mk_int_var(self.next_int_var_id())
    764 ( 0.00%)      }
      .           
      .               fn next_float_var_id(&self) -> FloatVid {
      .                   self.inner.borrow_mut().float_unification_table().new_key(None)
      .               }
      .           
      .               pub fn next_float_var(&self) -> Ty<'tcx> {
      .                   self.tcx.mk_float_var(self.next_float_var_id())
      .               }
      .           
      .               /// Creates a fresh region variable with the next available index.
      .               /// The variable will be created in the maximum universe created
      .               /// thus far, allowing it to name any region created thus far.
    501 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
 11,603 ( 0.00%)          self.next_region_var_in_universe(origin, self.universe())
  1,002 ( 0.00%)      }
      .           
      .               /// Creates a fresh region variable with the next available index
      .               /// in the given universe; typically, you can use
      .               /// `next_region_var` and just use the maximal universe.
  4,258 ( 0.00%)      pub fn next_region_var_in_universe(
      .                   &self,
      .                   origin: RegionVariableOrigin,
      .                   universe: ty::UniverseIndex,
      .               ) -> ty::Region<'tcx> {
      .                   let region_var =
 27,677 ( 0.00%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
 10,645 ( 0.00%)          self.tcx.mk_region(ty::ReVar(region_var))
  6,387 ( 0.00%)      }
      .           
      .               /// Return the universe that the region `r` was created in.  For
      .               /// most regions (e.g., `'static`, named regions from the user,
      .               /// etc) this is the root universe U0. For inference variables or
      .               /// placeholders, however, it will return the universe which which
      .               /// they are associated.
    480 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
      .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
    720 ( 0.00%)      }
      .           
      .               /// Number of region variables created so far.
    552 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
      .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
    828 ( 0.00%)      }
      .           
      .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
    461 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
      .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
    922 ( 0.00%)      }
      .           
      .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
      .               pub fn next_nll_region_var_in_universe(
      .                   &self,
      .                   origin: NllRegionVariableOrigin,
      .                   universe: ty::UniverseIndex,
      .               ) -> ty::Region<'tcx> {
      .                   self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
      .               }
      .           
 23,704 ( 0.00%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
 12,683 ( 0.00%)          match param.kind {
      .                       GenericParamDefKind::Lifetime => {
      .                           // Create a region inference variable for the given
      .                           // region parameter definition.
  1,066 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
      .                       }
      .                       GenericParamDefKind::Type { .. } => {
      .                           // Create a type inference variable for the given
      .                           // type parameter definition. The substitutions are
      .                           // for actual parameters that may be referred to by
      .                           // the default of this type parameter, if it exists.
      .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
      .                           // used in a path such as `Foo::<T, U>::new()` will
      .                           // use an inference variable for `C` with `[T, U]`
      .                           // as the substitutions for the default, `(T, U)`.
  7,368 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
      .                               self.universe(),
  9,210 ( 0.00%)                      TypeVariableOrigin {
      .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
  1,842 ( 0.00%)                              param.name,
  1,842 ( 0.00%)                              Some(param.def_id),
      .                                   ),
      .                                   span,
      .                               },
      .                           );
      .           
  1,842 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
      .                       }
      .                       GenericParamDefKind::Const { .. } => {
      .                           let origin = ConstVariableOrigin {
      .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
      .                                   param.name,
      .                                   param.def_id,
      .                               ),
      .                               span,
      .                           };
      .                           let const_var_id =
    605 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
      .                                   origin,
      .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
      .                               });
     55 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
      .                       }
      .                   }
    440 ( 0.00%)      }
      .           
      .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
      .               /// type/region parameter to a fresh inference variable.
  8,760 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
 32,150 ( 0.00%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
  5,840 ( 0.00%)      }
      .           
      .               /// Returns `true` if errors have been reported since this infcx was
      .               /// created. This is sometimes used as a heuristic to skip
      .               /// reporting errors that often occur as a result of earlier
      .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
      .               /// inference variables, regionck errors).
    352 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
      .                   debug!(
      .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
      .                        tainted_by_errors_flag={})",
      .                       self.tcx.sess.err_count(),
      .                       self.err_count_on_creation,
      .                       self.tainted_by_errors_flag.get()
      .                   );
      .           
  7,442 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
      .                       return true; // errors reported since this infcx was made
      .                   }
      .                   self.tainted_by_errors_flag.get()
    528 ( 0.00%)      }
      .           
      .               /// Set the "tainted by errors" flag to true. We call this when we
      .               /// observe an error from a prior pass.
      .               pub fn set_tainted_by_errors(&self) {
      .                   debug!("set_tainted_by_errors()");
      .                   self.tainted_by_errors_flag.set(true)
      .               }
      .           
      .               /// Process the region constraints and return any any errors that
      .               /// result. After this, no more unification operations should be
      .               /// done -- or the compiler will panic -- but it is legal to use
      .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
  7,245 ( 0.00%)      pub fn resolve_regions(
      .                   &self,
      .                   region_context: DefId,
      .                   outlives_env: &OutlivesEnvironment<'tcx>,
      .                   mode: RegionckMode,
      .               ) -> Vec<RegionResolutionError<'tcx>> {
 19,665 ( 0.00%)          let (var_infos, data) = {
      .                       let mut inner = self.inner.borrow_mut();
      .                       let inner = &mut *inner;
  1,035 ( 0.00%)              assert!(
  3,105 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
      .                           "region_obligations not empty: {:#?}",
      .                           inner.region_obligations
      .                       );
      .                       inner
      .                           .region_constraint_storage
      .                           .take()
      .                           .expect("regions already resolved")
      .                           .with_log(&mut inner.undo_log)
      .                           .into_infos_and_data()
  1,035 ( 0.00%)          };
      .           
      .                   let region_rels =
  1,035 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
      .           
  9,315 ( 0.00%)          let (lexical_region_resolutions, errors) =
 24,840 ( 0.00%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
      .           
  4,140 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
  1,035 ( 0.00%)          assert!(old_value.is_none());
      .           
      .                   errors
  9,315 ( 0.00%)      }
      .           
      .               /// Process the region constraints and report any errors that
      .               /// result. After this, no more unification operations should be
      .               /// done -- or the compiler will panic -- but it is legal to use
      .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
 10,350 ( 0.00%)      pub fn resolve_regions_and_report_errors(
      .                   &self,
      .                   region_context: DefId,
      .                   outlives_env: &OutlivesEnvironment<'tcx>,
      .                   mode: RegionckMode,
      .               ) {
  2,070 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
      .           
  3,105 ( 0.00%)          if !self.is_tainted_by_errors() {
      .                       // As a heuristic, just skip reporting region errors
      .                       // altogether if other errors have been reported while
      .                       // this infcx was in use.  This is totally hokey but
      .                       // otherwise we have a hard time separating legit region
      .                       // errors from silly ones.
  2,070 ( 0.00%)              self.report_region_errors(&errors);
      .                   }
  5,175 ( 0.00%)      }
      .           
      .               /// Obtains (and clears) the current set of region
      .               /// constraints. The inference context is still usable: further
      .               /// unifications will simply add new constraints.
      .               ///
      .               /// This method is not meant to be used with normal lexical region
      .               /// resolution. Rather, it is used in the NLL mode as a kind of
      .               /// interim hack: basically we run normal type-check and generate
-- line 1307 ----------------------------------------
-- line 1319 ----------------------------------------
      .               }
      .           
      .               /// Gives temporary access to the region constraint data.
      .               pub fn with_region_constraints<R>(
      .                   &self,
      .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
      .               ) -> R {
      .                   let mut inner = self.inner.borrow_mut();
    560 ( 0.00%)          op(inner.unwrap_region_constraints().data())
      .               }
      .           
      .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
      .                   let mut inner = self.inner.borrow_mut();
      .                   let inner = &mut *inner;
      .                   inner
      .                       .region_constraint_storage
      .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
      .                       .var_origin(vid)
      .               }
      .           
      .               /// Takes ownership of the list of variable regions. This implies
      .               /// that all the region constraints have already been taken, and
      .               /// hence that `resolve_regions_and_report_errors` can never be
      .               /// called. This is used only during NLL processing to "hand off" ownership
      .               /// of the set of region variables into the NLL region context.
    345 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
      .                   let mut inner = self.inner.borrow_mut();
  1,311 ( 0.00%)          let (var_infos, data) = inner
      .                       .region_constraint_storage
      .                       .take()
      .                       .expect("regions already resolved")
      .                       .with_log(&mut inner.undo_log)
     69 ( 0.00%)              .into_infos_and_data();
     69 ( 0.00%)          assert!(data.is_empty());
      .                   var_infos
    552 ( 0.00%)      }
      .           
      .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
      .                   self.resolve_vars_if_possible(t).to_string()
      .               }
      .           
      .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
      .               /// universe index of `TyVar(vid)`.
  1,064 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
      .                   use self::type_variable::TypeVariableValue;
      .           
  3,192 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
      .                       TypeVariableValue::Known { value } => Ok(value),
      .                       TypeVariableValue::Unknown { universe } => Err(universe),
      .                   }
  3,724 ( 0.00%)      }
      .           
      .               /// Resolve any type variables found in `value` -- but only one
      .               /// level.  So, if the variable `?X` is bound to some type
      .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
      .               /// itself be bound to a type).
      .               ///
      .               /// Useful when you only need to inspect the outermost level of
      .               /// the type and don't care about nested types (or perhaps you
      .               /// will be resolving them as well, e.g. in a loop).
      .               pub fn shallow_resolve<T>(&self, value: T) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
 55,199 ( 0.01%)          value.fold_with(&mut ShallowResolver { infcx: self })
      .               }
      .           
  1,514 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
      .                   self.inner.borrow_mut().type_variables().root_var(var)
  2,271 ( 0.00%)      }
      .           
      .               /// Where possible, replaces type/const variables in
      .               /// `value` with their final value. Note that region variables
      .               /// are unaffected. If a type/const variable has not been unified, it
      .               /// is left as is. This is an idempotent operation that does
      .               /// not affect inference state in any way and so you can do it
      .               /// at will.
  2,004 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
 35,069 ( 0.00%)          if !value.needs_infer() {
 28,591 ( 0.00%)              return value; // Avoid duplicated subst-folding.
      .                   }
 30,240 ( 0.00%)          let mut r = resolve::OpportunisticVarResolver::new(self);
 31,036 ( 0.00%)          value.fold_with(&mut r)
  2,505 ( 0.00%)      }
      .           
      .               /// Returns the first unresolved variable contained in `T`. In the
      .               /// process of visiting `T`, this will resolve (where possible)
      .               /// type variables in `T`, but it never constructs the final,
      .               /// resolved type, so it's more efficient than
      .               /// `resolve_vars_if_possible()`.
      .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
      .               where
-- line 1415 ----------------------------------------
-- line 1490 ----------------------------------------
      .                   expected: &'tcx ty::Const<'tcx>,
      .                   actual: &'tcx ty::Const<'tcx>,
      .                   err: TypeError<'tcx>,
      .               ) -> DiagnosticBuilder<'tcx> {
      .                   let trace = TypeTrace::consts(cause, true, expected, actual);
      .                   self.report_and_explain_type_error(trace, &err)
      .               }
      .           
  5,688 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
      .                   &self,
      .                   span: Span,
      .                   lbrct: LateBoundRegionConversionTime,
      .                   value: ty::Binder<'tcx, T>,
      .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
      .                   let fld_r =
  6,885 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
      .                   let fld_t = |_| {
      .                       self.next_ty_var(TypeVariableOrigin {
      .                           kind: TypeVariableOriginKind::MiscVariable,
      .                           span,
      .                       })
      .                   };
      .                   let fld_c = |_, ty| {
      .                       self.next_const_var(
      .                           ty,
      .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
      .                       )
      .                   };
 13,080 ( 0.00%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
  3,792 ( 0.00%)      }
      .           
      .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
      .               pub fn verify_generic_bound(
      .                   &self,
      .                   origin: SubregionOrigin<'tcx>,
      .                   kind: GenericKind<'tcx>,
      .                   a: ty::Region<'tcx>,
      .                   bound: VerifyBound<'tcx>,
-- line 1530 ----------------------------------------
-- line 1551 ----------------------------------------
      .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
      .               pub fn clear_caches(&self) {
      .                   self.selection_cache.clear();
      .                   self.evaluation_cache.clear();
      .                   self.inner.borrow_mut().projection_cache().clear();
      .               }
      .           
      .               pub fn universe(&self) -> ty::UniverseIndex {
 68,727 ( 0.01%)          self.universe.get()
 29,091 ( 0.00%)      }
      .           
      .               /// Creates and return a fresh universe that extends all previous
      .               /// universes. Updates `self.universe` to that new universe.
      .               pub fn create_next_universe(&self) -> ty::UniverseIndex {
      .                   let u = self.universe.get().next_universe();
      .                   self.universe.set(u);
      .                   u
      .               }
-- line 1568 ----------------------------------------
-- line 1606 ----------------------------------------
      .                   // variables, thus we don't need to substitute back the original values.
      .                   self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
      .               }
      .           
      .               /// If `typ` is a type variable of some kind, resolve it one level
      .               /// (but do not resolve types found in the result). If `typ` is
      .               /// not a type variable, just return it unmodified.
      .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
412,416 ( 0.05%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
219,794 ( 0.03%)          match *typ.kind() {
      .                       ty::Infer(ty::TyVar(v)) => {
      .                           // Not entirely obvious: if `typ` is a type variable,
      .                           // it can be resolved to an int/float variable, which
      .                           // can then be recursively resolved, hence the
      .                           // recursion. Note though that we prevent type
      .                           // variables from unifying to other type variables
      .                           // directly (though they may be embedded
      .                           // structurally), and we prevent cycles in any case,
      .                           // so this recursion should always be of very limited
      .                           // depth.
      .                           //
      .                           // Note: if these two lines are combined into one we get
      .                           // dynamic borrow errors on `self.inner`.
107,104 ( 0.01%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
      .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
      .                       }
      .           
 12,208 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
      .                           .inner
      .                           .borrow_mut()
      .                           .int_unification_table()
      .                           .probe_value(v)
  3,846 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
      .                           .unwrap_or(typ),
      .           
      .                       ty::Infer(ty::FloatVar(v)) => self
      .                           .inner
      .                           .borrow_mut()
      .                           .float_unification_table()
      .                           .probe_value(v)
      .                           .map(|v| v.to_type(self.tcx))
      .                           .unwrap_or(typ),
      .           
      .                       _ => typ,
      .                   }
463,968 ( 0.06%)      }
      .           
      .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
      .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
      .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
      .               ///
      .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
      .               /// inlined, despite being large, because it has only two call sites that
      .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
      .               #[inline(always)]
      .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
      .                   match infer_var {
      .                       TyOrConstInferVar::Ty(v) => {
      .                           use self::type_variable::TypeVariableValue;
      .           
      .                           // If `inlined_probe` returns a `Known` value, it never equals
      .                           // `ty::Infer(ty::TyVar(v))`.
144,154 ( 0.02%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
      .                               TypeVariableValue::Unknown { .. } => false,
      .                               TypeVariableValue::Known { .. } => true,
      .                           }
      .                       }
      .           
      .                       TyOrConstInferVar::TyInt(v) => {
      .                           // If `inlined_probe_value` returns a value it's always a
      .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
      .                           // `ty::Infer(_)`.
  4,080 ( 0.00%)                  self.inner.borrow_mut().int_unification_table().inlined_probe_value(v).is_some()
      .                       }
      .           
      .                       TyOrConstInferVar::TyFloat(v) => {
      .                           // If `probe_value` returns a value it's always a
      .                           // `ty::Float(_)`, which never matches a `ty::Infer(_)`.
      .                           //
      .                           // Not `inlined_probe_value(v)` because this call site is colder.
      .                           self.inner.borrow_mut().float_unification_table().probe_value(v).is_some()
-- line 1688 ----------------------------------------
-- line 1716 ----------------------------------------
      .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
      .               Const(ConstVid<'tcx>),
      .           }
      .           
      .           impl<'tcx> TyOrConstInferVar<'tcx> {
      .               /// Tries to extract an inference variable from a type or a constant, returns `None`
      .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
      .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
  1,796 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
      .                   match arg.unpack() {
      .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
      .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
      .                       GenericArgKind::Lifetime(_) => None,
      .                   }
  1,796 ( 0.00%)      }
      .           
      .               /// Tries to extract an inference variable from a type, returns `None`
      .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
     26 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
 16,250 ( 0.00%)          match *ty.kind() {
  3,496 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
    148 ( 0.00%)              ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
      .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
      .                       _ => None,
      .                   }
     26 ( 0.00%)      }
      .           
      .               /// Tries to extract an inference variable from a constant, returns `None`
      .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
      .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
      .                   match ct.val {
      .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
      .                       _ => None,
      .                   }
-- line 1749 ----------------------------------------
-- line 1755 ----------------------------------------
      .           }
      .           
      .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
      .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
      .                   self.infcx.tcx
      .               }
      .           
      .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
 81,455 ( 0.01%)          self.infcx.shallow_resolve_ty(ty)
      .               }
      .           
    372 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    372 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
    465 ( 0.00%)              self.infcx
      .                           .inner
      .                           .borrow_mut()
      .                           .const_unification_table()
    279 ( 0.00%)                  .probe_value(*vid)
      .                           .val
      .                           .known()
      .                           .unwrap_or(ct)
      .                   } else {
      .                       ct
      .                   }
    465 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> TypeTrace<'tcx> {
      .               pub fn span(&self) -> Span {
      .                   self.cause.span
      .               }
      .           
      .               pub fn types(
-- line 1787 ----------------------------------------
-- line 1818 ----------------------------------------
      .                       CompareImplTypeObligation { span, .. } => span,
      .                   }
      .               }
      .           
      .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
      .               where
      .                   F: FnOnce() -> Self,
      .               {
  1,271 ( 0.00%)          match *cause.code() {
    412 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
  2,060 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
      .                       }
      .           
      .                       traits::ObligationCauseCode::CompareImplMethodObligation {
      .                           impl_item_def_id,
      .                           trait_item_def_id,
      .                       } => SubregionOrigin::CompareImplMethodObligation {
      .                           span: cause.span,
      .                           impl_item_def_id,
-- line 1836 ----------------------------------------

419,544 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 417 ----------------------------------------
        .               /// # #![allow(unused_mut)]
        .               /// let mut vec: Vec<i32> = Vec::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub const fn new() -> Self {
  762,085 ( 0.10%)          Vec { buf: RawVec::NEW, len: 0 }
      111 ( 0.00%)      }
        .           
        .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
        .               ///
        .               /// The vector will be able to hold exactly `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the vector will not allocate.
        .               ///
        .               /// It is important to note that although the returned vector has the
        .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 601 ----------------------------------------
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
  191,598 ( 0.03%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
        .               }
        .           
        .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
    9,838 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
        .               }
        .           
        .               /// Decomposes a `Vec<T>` into its raw components.
        .               ///
        .               /// Returns the raw pointer to the underlying data, the length of
        .               /// the vector (in elements), and the allocated capacity of the
        .               /// data (in elements). These are the same arguments in the same
        .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let vec: Vec<i32> = Vec::with_capacity(10);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn capacity(&self) -> usize {
   63,226 ( 0.01%)          self.buf.capacity()
        .               }
        .           
        .               /// Reserves capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve(&mut self, additional: usize) {
   64,813 ( 0.01%)          self.buf.reserve(self.len, additional);
        .               }
        .           
        .               /// Reserves the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve_exact(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve_exact(&mut self, additional: usize) {
    1,760 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
        .               }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `try_reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
        .               /// assert!(vec.capacity() >= 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn shrink_to_fit(&mut self) {
        .                   // The capacity is never less than the length, and there's nothing to do when
        .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
        .                   // by only calling it with a greater capacity.
    6,548 ( 0.00%)          if self.capacity() > self.len {
    2,376 ( 0.00%)              self.buf.shrink_to_fit(self.len);
        .                   }
        .               }
        .           
        .               /// Shrinks the capacity of the vector with a lower bound.
        .               ///
        .               /// The capacity will remain at least as large as both the length
        .               /// and the supplied value.
        .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
        .               /// let slice = vec.into_boxed_slice();
        .               /// assert_eq!(slice.into_vec().capacity(), 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
        .                   unsafe {
        .                       self.shrink_to_fit();
    2,218 ( 0.00%)              let me = ManuallyDrop::new(self);
        .                       let buf = ptr::read(&me.buf);
        .                       let len = me.len();
        .                       buf.into_box(len).assume_init()
        .                   }
        .               }
        .           
        .               /// Shortens the vector, keeping the first `len` elements and dropping
        .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.truncate(0);
        .               /// assert_eq!(vec, []);
        .               /// ```
        .               ///
        .               /// [`clear`]: Vec::clear
        .               /// [`drain`]: Vec::drain
        .               #[stable(feature = "rust1", since = "1.0.0")]
   62,273 ( 0.01%)      pub fn truncate(&mut self, len: usize) {
        .                   // This is safe because:
        .                   //
        .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
        .                   //   case avoids creating an invalid slice, and
        .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
        .                   //   such that no value will be dropped twice in case `drop_in_place`
        .                   //   were to panic once (if it panics twice, the program aborts).
        .                   unsafe {
        .                       // Note: It's intentional that this is `>` and not `>=`.
        .                       //       Changing it to `>=` has negative performance
        .                       //       implications in some cases. See #78884 for more.
   52,504 ( 0.01%)              if len > self.len {
        .                           return;
        .                       }
        .                       let remaining_len = self.len - len;
        .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
   55,247 ( 0.01%)              self.len = len;
    1,085 ( 0.00%)              ptr::drop_in_place(s);
        .                   }
   74,708 ( 0.01%)      }
        .           
        .               /// Extracts a slice containing the entire vector.
        .               ///
        .               /// Equivalent to `&s[..]`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_ptr(&self) -> *const T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref`, which creates an intermediate reference.
1,358,938 ( 0.18%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns an unsafe mutable pointer to the vector's buffer.
        .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
        .               /// }
        .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_mut_ptr(&mut self) -> *mut T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref_mut`, which creates an intermediate reference.
  952,080 ( 0.12%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
        .               ///
        .               /// Normally, here, one would use [`clear`] instead to correctly drop
        .               /// the contents and thus not leak memory.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   debug_assert!(new_len <= self.capacity());
        .           
  141,980 ( 0.02%)          self.len = new_len;
    4,058 ( 0.00%)      }
        .           
        .               /// Removes an element from the vector and returns it.
        .               ///
        .               /// The removed element is replaced by the last element of the vector.
        .               ///
        .               /// This does not preserve ordering, but is *O*(1).
        .               /// If you need to preserve the element order, use [`remove`] instead.
        .               ///
-- line 1276 ----------------------------------------
-- line 1305 ----------------------------------------
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // We replace self[index] with the last element. Note that if the
        .                       // bounds check above succeeds there must be a last element (which
        .                       // can be self[index] itself).
        .                       let value = ptr::read(self.as_ptr().add(index));
        .                       let base_ptr = self.as_mut_ptr();
        1 ( 0.00%)              ptr::copy(base_ptr.add(len - 1), base_ptr.add(index), 1);
        .                       self.set_len(len - 1);
        .                       value
        .                   }
        .               }
        .           
        .               /// Inserts an element at position `index` within the vector, shifting all
        .               /// elements after it to the right.
        .               ///
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.insert(1, 4);
        .               /// assert_eq!(vec, [1, 4, 2, 3]);
        .               /// vec.insert(4, 5);
        .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    1,071 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
        .                   }
        .           
      153 ( 0.00%)          let len = self.len();
      308 ( 0.00%)          if index > len {
        .                       assert_failed(index, len);
        .                   }
        .           
        .                   // space for the new element
      736 ( 0.00%)          if len == self.buf.capacity() {
        .                       self.reserve(1);
        .                   }
        .           
        .                   unsafe {
        .                       // infallible
        .                       // The spot to put the new value
        .                       {
        .                           let p = self.as_mut_ptr().add(index);
        .                           // Shift everything over to make space. (Duplicating the
        .                           // `index`th element into two consecutive places.)
    1,104 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
        .                           // Write it in, overwriting the first copy of the `index`th
        .                           // element.
        .                           ptr::write(p, element);
        .                       }
      736 ( 0.00%)              self.set_len(len + 1);
        .                   }
      918 ( 0.00%)      }
        .           
        .               /// Removes and returns the element at position `index` within the vector,
        .               /// shifting all elements after it to the left.
        .               ///
        .               /// Note: Because this shifts over the remaining elements, it has a
        .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
        .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
        .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1395 ----------------------------------------
        .               pub fn remove(&mut self, index: usize) -> T {
        .                   #[cold]
        .                   #[inline(never)]
        .                   #[track_caller]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("removal index (is {}) should be < len (is {})", index, len);
        .                   }
        .           
      115 ( 0.00%)          let len = self.len();
      410 ( 0.00%)          if index >= len {
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // infallible
        .                       let ret;
        .                       {
        .                           // the place we are taking from.
        .                           let ptr = self.as_mut_ptr().add(index);
        .                           // copy it out, unsafely having a copy of the value on
        .                           // the stack and in the vector at the same time.
      800 ( 0.00%)                  ret = ptr::read(ptr);
        .           
        .                           // Shift everything down to fill in that spot.
      296 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
        .                       }
      166 ( 0.00%)              self.set_len(len - 1);
        .                       ret
        .                   }
        .               }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
-- line 1428 ----------------------------------------
-- line 1442 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3, 4, 5];
        .               /// let keep = [false, true, true, false, true];
        .               /// let mut iter = keep.iter();
        .               /// vec.retain(|_| *iter.next().unwrap());
        .               /// assert_eq!(vec, [2, 3, 5]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
   97,421 ( 0.01%)      pub fn retain<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&T) -> bool,
        .               {
    2,144 ( 0.00%)          self.retain_mut(|elem| f(elem));
   94,640 ( 0.01%)      }
        .           
        .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
        .               /// });
        .               /// assert_eq!(vec, [2, 3, 4]);
        .               /// ```
        .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
        .               pub fn retain_mut<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
   11,836 ( 0.00%)          let original_len = self.len();
        .                   // Avoid double drop if the drop guard is not executed,
        .                   // since we may make some holes during the process.
        .                   unsafe { self.set_len(0) };
        .           
        .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
        .                   //      |<-              processed len   ->| ^- next to check
        .                   //                  |<-  deleted cnt     ->|
        .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
        .                       v: &'a mut Vec<T, A>,
        .                       processed_len: usize,
        .                       deleted_cnt: usize,
        .                       original_len: usize,
        .                   }
        .           
        .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
        .                       fn drop(&mut self) {
    6,752 ( 0.00%)                  if self.deleted_cnt > 0 {
        .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
        .                               unsafe {
        .                                   ptr::copy(
        .                                       self.v.as_ptr().add(self.processed_len),
    4,790 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
        .                                       self.original_len - self.processed_len,
        .                                   );
        .                               }
        .                           }
        .                           // SAFETY: After filling holes, all items are in contiguous memory.
        .                           unsafe {
        2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
        .                           }
        .                       }
        .                   }
        .           
        .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
        .           
        .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
        .                       original_len: usize,
        .                       f: &mut F,
        .                       g: &mut BackshiftOnDrop<'_, T, A>,
        .                   ) where
        .                       F: FnMut(&mut T) -> bool,
        .                   {
  199,246 ( 0.03%)              while g.processed_len != original_len {
        .                           // SAFETY: Unchecked element must be valid.
        .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
   57,068 ( 0.01%)                  if !f(cur) {
        .                               // Advance early to avoid double drop if `drop_in_place` panicked.
   10,088 ( 0.00%)                      g.processed_len += 1;
    5,150 ( 0.00%)                      g.deleted_cnt += 1;
        .                               // SAFETY: We never touch this element again after dropped.
        .                               unsafe { ptr::drop_in_place(cur) };
        .                               // We already advanced the counter.
        .                               if DELETED {
        .                                   continue;
        .                               } else {
        .                                   break;
        .                               }
        .                           }
        .                           if DELETED {
        .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
        .                               // We use copy for move, and never touch this element again.
        .                               unsafe {
    7,836 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
        .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
        .                               }
        .                           }
    7,600 ( 0.00%)                  g.processed_len += 1;
        .                       }
        .                   }
        .           
        .                   // Stage 1: Nothing was deleted.
        .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
        .           
        .                   // Stage 2: Some elements were deleted.
        .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
        .               ///
        .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
        .               ///
        .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
        .               /// ```
        .               #[stable(feature = "dedup_by", since = "1.16.0")]
        7 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
        .               where
        .                   F: FnMut(&mut T, &mut T) -> bool,
        .               {
      248 ( 0.00%)          let len = self.len();
      756 ( 0.00%)          if len <= 1 {
        .                       return;
        .                   }
        .           
        .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
        .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
        .                       /* Offset of the element we want to check if it is duplicate */
        .                       read: usize,
        .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
        .                   let ptr = gap.vec.as_mut_ptr();
        .           
        .                   /* Drop items while going through Vec, it should be more efficient than
        .                    * doing slice partition_dedup + truncate */
        .           
        .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
        .                    * are always in-bounds and read_ptr never aliases prev_ptr */
        .                   unsafe {
    1,858 ( 0.00%)              while gap.read < len {
        .                           let read_ptr = ptr.add(gap.read);
        .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
        .           
       24 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
        .                               // Increase `gap.read` now since the drop may panic.
        .                               gap.read += 1;
        .                               /* We have found duplicate, drop it in-place */
        .                               ptr::drop_in_place(read_ptr);
        .                           } else {
        .                               let write_ptr = ptr.add(gap.write);
        .           
        .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
        .                                * have to use `copy` or conditional `copy_nonoverlapping`.
        .                                * Looks like the first option is faster. */
        .                               ptr::copy(read_ptr, write_ptr, 1);
        .           
        .                               /* We have filled that place, so go further */
    1,110 ( 0.00%)                      gap.write += 1;
        .                               gap.read += 1;
        .                           }
        .                       }
        .           
        .                       /* Technically we could let `gap` clean up with its Drop, but
        .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
        .                        * the codegen, so we just do it manually */
        .                       gap.vec.set_len(gap.write);
        .                       mem::forget(gap);
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Appends an element to the back of a collection.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
        .               ///
        .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2];
        .               /// vec.push(3);
        .               /// assert_eq!(vec, [1, 2, 3]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
       30 ( 0.00%)      pub fn push(&mut self, value: T) {
        .                   // This will panic or abort if we would allocate > isize::MAX bytes
        .                   // or if the length increment would overflow for zero-sized types.
1,571,511 ( 0.21%)          if self.len == self.buf.capacity() {
   70,551 ( 0.01%)              self.buf.reserve_for_push(self.len);
        .                   }
        .                   unsafe {
   31,260 ( 0.00%)              let end = self.as_mut_ptr().add(self.len);
        .                       ptr::write(end, value);
1,983,250 ( 0.26%)              self.len += 1;
        .                   }
       24 ( 0.00%)      }
        .           
        .               /// Removes the last element from a vector and returns it, or [`None`] if it
        .               /// is empty.
        .               ///
        .               /// If you'd like to pop the first element, consider using
        .               /// [`VecDeque::pop_front`] instead.
        .               ///
        .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3];
        .               /// assert_eq!(vec.pop(), Some(3));
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop(&mut self) -> Option<T> {
  291,431 ( 0.04%)          if self.len == 0 {
        3 ( 0.00%)              None
        .                   } else {
        .                       unsafe {
  219,011 ( 0.03%)                  self.len -= 1;
   44,604 ( 0.01%)                  Some(ptr::read(self.as_ptr().add(self.len())))
        .                       }
        .                   }
        .               }
        .           
        .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
        .               ///
        .               /// # Panics
        .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
        .               /// let mut vec2 = vec![4, 5, 6];
        .               /// vec.append(&mut vec2);
        .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
        .               /// assert_eq!(vec2, []);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "append", since = "1.4.0")]
       63 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
        .                   unsafe {
        .                       self.append_elements(other.as_slice() as _);
        .                       other.set_len(0);
        .                   }
       54 ( 0.00%)      }
        .           
        .               /// Appends elements to `Self` from other buffer.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               unsafe fn append_elements(&mut self, other: *const [T]) {
        .                   let count = unsafe { (*other).len() };
        .                   self.reserve(count);
    7,535 ( 0.00%)          let len = self.len();
        .                   unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
   60,386 ( 0.01%)          self.len += count;
        .               }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// When the iterator **is** dropped, all elements in the range are removed
        .               /// from the vector, even if the iterator was not fully consumed. If the
        .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
        .                   // When the Drain is first created, it shortens the length of
        .                   // the source vector to make sure no uninitialized or moved-from elements
        .                   // are accessible at all if the Drain's destructor never gets to run.
        .                   //
        .                   // Drain will ptr::read out the values to remove.
        .                   // When finished, remaining tail of the vec is copied back to cover
        .                   // the hole, and the vector length is restored to the new length.
        .                   //
    2,167 ( 0.00%)          let len = self.len();
        .                   let Range { start, end } = slice::range(range, ..len);
        .           
        .                   unsafe {
        .                       // set self.vec length's to start, to be safe in case Drain is leaked
        .                       self.set_len(start);
        .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
        .                       // whole Drain iterator (like &mut T).
    2,138 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
      302 ( 0.00%)              Drain {
        .                           tail_start: end,
    1,460 ( 0.00%)                  tail_len: len - end,
        .                           iter: range_slice.iter(),
        .                           vec: NonNull::from(self),
        .                       }
        .                   }
        .               }
        .           
        .               /// Clears the vector, removing all values.
        .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
        .               ///
        .               /// v.clear();
        .               ///
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn clear(&mut self) {
  110,678 ( 0.01%)          self.truncate(0)
        .               }
        .           
        .               /// Returns the number of elements in the vector, also referred to
        .               /// as its 'length'.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
        .               /// let mut v = Vec::new();
        .               /// assert!(v.is_empty());
        .               ///
        .               /// v.push(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn is_empty(&self) -> bool {
  128,220 ( 0.02%)          self.len() == 0
        .               }
        .           
        .               /// Splits the collection into two at the given index.
        .               ///
        .               /// Returns a newly allocated vector containing the elements in the range
        .               /// `[at, len)`. After the call, the original vector will be left containing
        .               /// the elements `[0, at)` with its previous capacity unchanged.
        .               ///
-- line 1916 ----------------------------------------
-- line 1935 ----------------------------------------
        .                   A: Clone,
        .               {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(at: usize, len: usize) -> ! {
        .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
        .                   }
        .           
      161 ( 0.00%)          if at > self.len() {
        .                       assert_failed(at, self.len());
        .                   }
        .           
      145 ( 0.00%)          if at == 0 {
        .                       // the new vector can take over the original buffer and avoid the copy
        .                       return mem::replace(
        .                           self,
        .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
        .                       );
        .                   }
        .           
        .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
        .               ///
        .               /// let mut vec = vec![];
        .               /// let mut p = 1;
        .               /// vec.resize_with(4, || { p *= 2; p });
        .               /// assert_eq!(vec, [2, 4, 8, 16]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
    2,449 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
        .               where
        .                   F: FnMut() -> T,
        .               {
      329 ( 0.00%)          let len = self.len();
      658 ( 0.00%)          if new_len > len {
    3,184 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
    2,120 ( 0.00%)      }
        .           
        .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
        .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
        .               /// `'a`. If the type has only static references, or none at all, then this
        .               /// may be chosen to be `'static`.
        .               ///
        .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
        .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
        .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
        .               #[inline]
        .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
        .                   // Note:
        .                   // This method is not implemented in terms of `split_at_spare_mut`,
        .                   // to prevent invalidation of pointers to the buffer.
        .                   unsafe {
        .                       slice::from_raw_parts_mut(
        2 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
       53 ( 0.00%)                  self.buf.capacity() - self.len,
        .                       )
        .                   }
        .               }
        .           
        .               /// Returns vector content as a slice of `T`, along with the remaining spare
        .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
        .               ///
        .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2189 ----------------------------------------
        .               /// assert_eq!(vec, ["hello", "world", "world"]);
        .               ///
        .               /// let mut vec = vec![1, 2, 3, 4];
        .               /// vec.resize(2, 0);
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize", since = "1.5.0")]
   10,450 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
    1,045 ( 0.00%)          let len = self.len();
        .           
    3,135 ( 0.00%)          if new_len > len {
      591 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
    1,141 ( 0.00%)      }
        .           
        .               /// Clones and appends all elements in a slice to the `Vec`.
        .               ///
        .               /// Iterates over the slice `other`, clones each element, and then appends
        .               /// it to this `Vec`. The `other` slice is traversed in-order.
        .               ///
        .               /// Note that this function is same as [`extend`] except that it is
        .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2271 ----------------------------------------
        .           trait ExtendWith<T> {
        .               fn next(&mut self) -> T;
        .               fn last(self) -> T;
        .           }
        .           
        .           struct ExtendElement<T>(T);
        .           impl<T: Clone> ExtendWith<T> for ExtendElement<T> {
        .               fn next(&mut self) -> T {
    2,012 ( 0.00%)          self.0.clone()
        .               }
        .               fn last(self) -> T {
        .                   self.0
        .               }
        .           }
        .           
        .           struct ExtendFunc<F>(F);
        .           impl<T, F: FnMut() -> T> ExtendWith<T> for ExtendFunc<F> {
-- line 2287 ----------------------------------------
-- line 2291 ----------------------------------------
        .               fn last(mut self) -> T {
        .                   (self.0)()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               #[cfg(not(no_global_oom_handling))]
        .               /// Extend the vector by `n` values, using the given generator.
   56,432 ( 0.01%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
        .                   self.reserve(n);
        .           
        .                   unsafe {
      789 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
        .                       // Use SetLenOnDrop to work around bug where compiler
        .                       // might not realize the store through `ptr` through self.set_len()
        .                       // don't alias.
        .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
        .           
        .                       // Write all elements except the last one
        .                       for _ in 1..n {
        .                           ptr::write(ptr, value.next());
        .                           ptr = ptr.offset(1);
        .                           // Increment the length in every step in case next() panics
        .                           local_len.increment_len(1);
        .                       }
        .           
   39,380 ( 0.01%)              if n > 0 {
        .                           // We can write the last element directly without cloning needlessly
        .                           ptr::write(ptr, value.last());
        .                           local_len.increment_len(1);
        .                       }
        .           
        .                       // len set by scope guard
        .                   }
   44,987 ( 0.01%)      }
        .           }
        .           
        .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
        .               /// Removes consecutive repeated elements in the vector according to the
        .               /// [`PartialEq`] trait implementation.
        .               ///
        .               /// If the vector is sorted, this removes all duplicates.
        .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
        .               ///
        .               /// vec.dedup();
        .               ///
        .               /// assert_eq!(vec, [1, 2, 3, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn dedup(&mut self) {
        2 ( 0.00%)          self.dedup_by(|a, b| a == b)
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Internal methods and functions
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
    5,419 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
   65,766 ( 0.01%)      <T as SpecFromElem>::from_elem(elem, n, Global)
    5,732 ( 0.00%)  }
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[unstable(feature = "allocator_api", issue = "32838")]
        .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
        .               <T as SpecFromElem>::from_elem(elem, n, alloc)
        .           }
        .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
        .           // Common trait implementations for Vec
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
        .               type Target = [T];
        .           
        .               fn deref(&self) -> &[T] {
1,953,849 ( 0.26%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
        .               fn deref_mut(&mut self) -> &mut [T] {
  486,991 ( 0.06%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           trait SpecCloneFrom {
        .               fn clone_from(this: &mut Self, other: &Self);
        .           }
        .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
        .                   this.extend_from_slice(other);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
        .               #[cfg(not(test))]
   43,259 ( 0.01%)      fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
        2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
   53,579 ( 0.01%)      }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Instead use the
        .               // `slice::to_vec`  function which is only available with cfg(test)
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
        .               type Output = I::Output;
        .           
        .               #[inline]
        .               fn index(&self, index: I) -> &Self::Output {
   78,390 ( 0.01%)          Index::index(&**self, index)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {
        .               #[inline]
        .               fn index_mut(&mut self, index: I) -> &mut Self::Output {
      272 ( 0.00%)          IndexMut::index_mut(&mut **self, index)
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> FromIterator<T> for Vec<T> {
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
  240,561 ( 0.03%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
        .               type Item = T;
        .               type IntoIter = IntoIter<T, A>;
        .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
        .               /// for s in v.into_iter() {
        .               ///     // s has type String, not &String
        .               ///     println!("{}", s);
        .               /// }
        .               /// ```
        .               #[inline]
        .               fn into_iter(self) -> IntoIter<T, A> {
        .                   unsafe {
  152,489 ( 0.02%)              let mut me = ManuallyDrop::new(self);
        .                       let alloc = ptr::read(me.allocator());
        .                       let begin = me.as_mut_ptr();
        .                       let end = if mem::size_of::<T>() == 0 {
        .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
        .                       } else {
        .                           begin.add(me.len()) as *const T
        .                       };
        .                       let cap = me.buf.capacity();
   50,605 ( 0.01%)              IntoIter {
        .                           buf: NonNull::new_unchecked(begin),
        .                           phantom: PhantomData,
        .                           cap,
        .                           alloc,
        .                           ptr: begin,
        .                           end,
        .                       }
        .                   }
-- line 2589 ----------------------------------------
-- line 2601 ----------------------------------------
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
        .               type Item = &'a mut T;
        .               type IntoIter = slice::IterMut<'a, T>;
        .           
        .               fn into_iter(self) -> slice::IterMut<'a, T> {
      626 ( 0.00%)          self.iter_mut()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
        .               #[inline]
       48 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  112,921 ( 0.01%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
       48 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, item: T) {
        .                   self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
-- line 2627 ----------------------------------------
-- line 2636 ----------------------------------------
        .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
        .                   // This is the case for a general iterator.
        .                   //
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iterator {
        .                   //          self.push(item);
        .                   //      }
    7,538 ( 0.00%)          while let Some(element) = iterator.next() {
    2,114 ( 0.00%)              let len = self.len();
   65,774 ( 0.01%)              if len == self.capacity() {
      223 ( 0.00%)                  let (lower, _) = iterator.size_hint();
        .                           self.reserve(lower.saturating_add(1));
        .                       }
        .                       unsafe {
        .                           ptr::write(self.as_mut_ptr().add(len), element);
        .                           // Since next() executes user code which can panic we have to bump the length
        .                           // after each step.
        .                           // NB can't overflow since we would have had to alloc the address space
   42,466 ( 0.01%)                  self.set_len(len + 1);
        .                       }
        .                   }
    1,178 ( 0.00%)      }
        .           
        .               /// Creates a splicing iterator that replaces the specified range in the vector
        .               /// with the given `replace_with` iterator and yields the removed items.
        .               /// `replace_with` does not need to be the same length as `range`.
        .               ///
        .               /// `range` is removed even if the iterator is not consumed until the end.
        .               ///
        .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2693 ----------------------------------------
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "vec_splice", since = "1.21.0")]
        .               pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, A>
        .               where
        .                   R: RangeBounds<usize>,
        .                   I: IntoIterator<Item = T>,
        .               {
    7,854 ( 0.00%)          Splice { drain: self.drain(range), replace_with: replace_with.into_iter() }
        .               }
        .           
        .               /// Creates an iterator which uses a closure to determine if an element should be removed.
        .               ///
        .               /// If the closure returns true, then the element is removed and yielded.
        .               /// If the closure returns false, the element will remain in the vector and will not be yielded
        .               /// by the iterator.
        .               ///
-- line 2709 ----------------------------------------
-- line 2745 ----------------------------------------
        .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
        .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
        .               /// ```
        .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
        .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
      627 ( 0.00%)          let old_len = self.len();
        .           
        .                   // Guard against us getting leaked (leak amplification)
        .                   unsafe {
        .                       self.set_len(0);
        .                   }
        .           
    1,504 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
        .               }
        .           }
        .           
        .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
        .           ///
        .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
        .           /// append the entire slice at once.
        .           ///
        .           /// [`copy_from_slice`]: slice::copy_from_slice
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "extend_ref", since = "1.2.0")]
        .           impl<'a, T: Copy + 'a, A: Allocator + 'a> Extend<&'a T> for Vec<T, A> {
      120 ( 0.00%)      fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {
        .                   self.spec_extend(iter.into_iter())
       90 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, &item: &'a T) {
        .                   self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
-- line 2783 ----------------------------------------
-- line 2803 ----------------------------------------
        .               #[inline]
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   Ord::cmp(&**self, &**other)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
  242,805 ( 0.03%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // use drop for [T]
        .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
        .                       // could avoid questions of validity in certain cases
   89,758 ( 0.01%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
        .                   }
        .                   // RawVec handles deallocation
  287,048 ( 0.04%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
        .           impl<T> const Default for Vec<T> {
        .               /// Creates an empty `Vec<T>`.
        .               fn default() -> Vec<T> {
        .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
        .               /// newly-allocated buffer with exactly the right capacity.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
        .               /// ```
        .               fn from(v: Vec<T, A>) -> Self {
        4 ( 0.00%)          v.into_boxed_slice()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl From<&str> for Vec<u8> {
        .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
        .               ///
-- line 2992 ----------------------------------------

  496,749 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 57 ----------------------------------------
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
    3,476 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
    1,738 ( 0.00%)              from_str_radix(src, radix)
    5,214 ( 0.00%)          }
        .           
        .                   /// Returns the number of ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[doc(alias = "popcount")]
        .                   #[doc(alias = "popcnt")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn count_ones(self) -> u32 {
   32,445 ( 0.00%)              intrinsics::ctpop(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of zeros in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
        .                   /// assert_eq!(n.leading_zeros(), 2);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn leading_zeros(self) -> u32 {
  101,951 ( 0.01%)              intrinsics::ctlz(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of trailing zeros in the binary representation
        .                   /// of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
        .                   /// assert_eq!(n.trailing_zeros(), 3);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn trailing_zeros(self) -> u32 {
  131,442 ( 0.02%)              intrinsics::cttz(self) as u32
        .                   }
        .           
        .                   /// Returns the number of leading ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn rotate_left(self, n: u32) -> Self {
1,964,285 ( 0.26%)              intrinsics::rotate_left(self, n as $SelfT)
        .                   }
        .           
        .                   /// Shifts the bits to the right by a specified amount, `n`,
        .                   /// wrapping the truncated bits to the beginning of the resulting
        .                   /// integer.
        .                   ///
        .                   /// Please note this isn't the same operation as the `>>` shifting operator!
        .                   ///
-- line 220 ----------------------------------------
-- line 456 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_add`.
  234,247 ( 0.03%)              unsafe { intrinsics::unchecked_add(self, rhs) }
        .                   }
        .           
        .                   /// Checked addition with a signed integer. Computes `self + rhs`,
        .                   /// returning `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_sub`.
   10,208 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
        .                   }
        .           
        .                   /// Checked integer multiplication. Computes `self * rhs`, returning
        .                   /// `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 596 ----------------------------------------
        .                                 without modifying the original"]
        .                   #[inline]
        .                   pub const fn checked_div(self, rhs: Self) -> Option<Self> {
        .                       if unlikely!(rhs == 0) {
        .                           None
        .                       } else {
        .                           // SAFETY: div by zero has been checked above and unsigned types have no other
        .                           // failure modes for division
      424 ( 0.00%)                  Some(unsafe { intrinsics::unchecked_div(self, rhs) })
        .                       }
        .                   }
        .           
        .                   /// Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning `None`
        .                   /// if `rhs == 0`.
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 612 ----------------------------------------
-- line 1035 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_add(self, rhs: Self) -> Self {
   57,114 ( 0.01%)              intrinsics::saturating_add(self, rhs)
        .                   }
        .           
        .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
   19,917 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
        .                   }
        .           
        .                   /// Saturating integer multiplication. Computes `self * rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
1,123,109 ( 0.15%)              intrinsics::wrapping_add(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) addition with a signed integer. Computes
        .                   /// `self + rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
  445,472 ( 0.06%)              intrinsics::wrapping_sub(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) multiplication. Computes `self *
        .                   /// rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
        .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
1,535,692 ( 0.20%)              intrinsics::wrapping_mul(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) division. Computes `self / rhs`.
        .                   /// Wrapped division on unsigned types is just normal division.
        .                   /// There's no way wrapping could ever happen.
        .                   /// This function exists, so that all operations
        .                   /// are accounted for in the wrapping operations.
        .                   ///
-- line 1256 ----------------------------------------
-- line 1397 ----------------------------------------
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_shl(self, rhs: u32) -> Self {
        .                       // SAFETY: the masking by the bitsize of the type ensures that we do not shift
        .                       // out of bounds
        .                       unsafe {
       96 ( 0.00%)                  intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)
        .                       }
        .                   }
        .           
        .                   /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,
        .                   /// where `mask` removes any high-order bits of `rhs` that
        .                   /// would cause the shift to exceed the bitwidth of the type.
        .                   ///
        .                   /// Note that this is *not* the same as a rotate-right; the
-- line 1413 ----------------------------------------
-- line 1491 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_add(2), (7, false));")]
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        4 ( 0.00%)          pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
  316,002 ( 0.04%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        8 ( 0.00%)          }
        .           
        .                   /// Calculates `self + rhs + carry` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
        .                   /// additional bit of overflow. This allows for chaining together multiple additions
        .                   /// to create "big integers" which represent larger values.
        .                   ///
        .                   #[doc = concat!("This can be thought of as a ", stringify!($BITS), "-bit \"full adder\", in the electronics sense.")]
-- line 1510 ----------------------------------------
-- line 1587 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_sub(2), (3, false));")]
        .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        8 ( 0.00%)          pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
   38,151 ( 0.00%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
       16 ( 0.00%)          }
        .           
        .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
        .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
        .                   /// to create "big integers" which represent larger values.
        .                   ///
        .                   /// # Examples
-- line 1606 ----------------------------------------
-- line 1674 ----------------------------------------
        .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                     without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
  512,732 ( 0.07%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates the divisor when `self` is divided by `rhs`.
        .                   ///
        .                   /// Returns a tuple of the divisor along with a boolean indicating
        .                   /// whether an arithmetic overflow would occur. Note that for unsigned
        .                   /// integers overflow never occurs, so the second value is always
-- line 1690 ----------------------------------------
-- line 1838 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(0x1", stringify!($SelfT), ".overflowing_shl(132), (0x10, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_shl(self, rhs: u32) -> (Self, bool) {
       36 ( 0.00%)              (self.wrapping_shl(rhs), (rhs > ($BITS - 1)))
        .                   }
        .           
        .                   /// Shifts self right by `rhs` bits.
        .                   ///
        .                   /// Returns a tuple of the shifted version of self along with a boolean
        .                   /// indicating whether the shift value was larger than or equal to the
        .                   /// number of bits. If the shift value is too large, then value is
        .                   /// masked (N-1) where N is the number of bits, and this value is then
-- line 1854 ----------------------------------------
-- line 2132 ----------------------------------------
        .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
        .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
        .                   /// ```
        .                   #[must_use]
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
        .                   #[inline(always)]
        .                   pub const fn is_power_of_two(self) -> bool {
       48 ( 0.00%)              self.count_ones() == 1
        .                   }
        .           
        .                   // Returns one less than next power of two.
        .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
        .                   //
        .                   // 8u8.one_less_than_next_power_of_two() == 7
        .                   // 6u8.one_less_than_next_power_of_two() == 7
        .                   //
        .                   // This method cannot overflow, as in the `next_power_of_two`
        .                   // overflow cases it instead ends up returning the maximum value
        .                   // of the type, and can return 0 for 0.
        .                   #[inline]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   const fn one_less_than_next_power_of_two(self) -> Self {
      928 ( 0.00%)              if self <= 1 { return 0; }
        .           
    3,529 ( 0.00%)              let p = self - 1;
        .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
        .                       // That means the shift is always in-bounds, and some processors
        .                       // (such as intel pre-haswell) have more efficient ctlz
        .                       // intrinsics when the argument is non-zero.
   10,547 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    3,569 ( 0.00%)              <$SelfT>::MAX >> z
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `self`.
        .                   ///
        .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
        .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
        .                   /// release mode (the only situation in which method can return 0).
        .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        .                   #[rustc_inherit_overflow_checks]
        .                   pub const fn next_power_of_two(self) -> Self {
    6,130 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `n`. If
        .                   /// the next power of two is greater than the type's maximum value,
        .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 2195 ----------------------------------------

   19,189 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/dl-lookup.c
  ./elf/do-rel.h
  ./malloc/malloc.c
  ./stdlib/msort.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S
  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc

--------------------------------------------------------------------------------
Ir                  
--------------------------------------------------------------------------------
93,518,179 (12.22%)  events annotated

