--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name vsdb --edition=2021 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --cfg feature="cbor_codec" --cfg feature="default" --cfg feature="serde_cbor" --cfg feature="sled" --cfg feature="sled_engine" -C metadata=122fbb645913e44f -C extra-filename=-122fbb645913e44f --out-dir /usr/home/liquid/tmp/.tmp4vRrT3/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmp4vRrT3/target/debug/deps --extern fast_math=/usr/home/liquid/tmp/.tmp4vRrT3/target/debug/deps/libfast_math-317a8c86a16c1ef7.rmeta --extern once_cell=/usr/home/liquid/tmp/.tmp4vRrT3/target/debug/deps/libonce_cell-fc4b62a6778a2354.rmeta --extern parking_lot=/usr/home/liquid/tmp/.tmp4vRrT3/target/debug/deps/libparking_lot-13fc41516e4e349c.rmeta --extern primitive_types=/usr/home/liquid/tmp/.tmp4vRrT3/target/debug/deps/libprimitive_types-ed1d805e0f920da7.rmeta --extern ruc=/usr/home/liquid/tmp/.tmp4vRrT3/target/debug/deps/libruc-cbcbabd3b21341f3.rmeta --extern serde=/usr/home/liquid/tmp/.tmp4vRrT3/target/debug/deps/libserde-ea728094575720bd.rmeta --extern serde_cbor=/usr/home/liquid/tmp/.tmp4vRrT3/target/debug/deps/libserde_cbor-78cdb9386042ecbf.rmeta --extern sha3=/usr/home/liquid/tmp/.tmp4vRrT3/target/debug/deps/libsha3-a07c986deef1da0a.rmeta --extern vsdb_derive=/usr/home/liquid/tmp/.tmp4vRrT3/target/debug/deps/libvsdb_derive-70ba0c95af0fb27d.so --extern sled=/usr/home/liquid/tmp/.tmp4vRrT3/target/debug/deps/libvsdbsled-230ea4a34579a301.rmeta -L native=/usr/home/liquid/tmp/.tmp4vRrT3/target/debug/build/zstd-sys-5b8feef22d7b7b6c/out -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-vsdb-0.13.10-Debug-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                      
--------------------------------------------------------------------------------
68,380,511,049 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                      file:function
--------------------------------------------------------------------------------
2,706,551,667 ( 3.96%)  ./malloc/malloc.c:_int_free
1,909,696,272 ( 2.79%)  ./malloc/malloc.c:_int_malloc
1,456,593,813 ( 2.13%)  ./malloc/malloc.c:malloc
1,025,365,249 ( 1.50%)  ???:llvm::SelectionDAG::Combine(llvm::CombineLevel, llvm::AAResults*, llvm::CodeGenOpt::Level)
  820,650,860 ( 1.20%)  ./malloc/malloc.c:free
  742,431,040 ( 1.09%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
  667,050,226 ( 0.98%)  ???:llvm::FPPassManager::runOnFunction(llvm::Function&)
  436,188,862 ( 0.64%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
  372,926,876 ( 0.55%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
  372,784,516 ( 0.55%)  ???:llvm::SelectionDAGISel::SelectCodeCommon(llvm::SDNode*, unsigned char const*, unsigned int)
  334,560,792 ( 0.49%)  ./malloc/malloc.c:calloc
  317,249,246 ( 0.46%)  ???:(anonymous namespace)::Verifier::visitInstruction(llvm::Instruction&)
  295,389,860 ( 0.43%)  ???:llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const
  259,913,492 ( 0.38%)  ./malloc/malloc.c:malloc_consolidate
  250,162,128 ( 0.37%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
  242,989,014 ( 0.36%)  ???:llvm::MachineInstr::addOperand(llvm::MachineFunction&, llvm::MachineOperand const&)
  233,709,645 ( 0.34%)  ???:llvm::raw_svector_ostream::write_impl(char const*, unsigned long)
  233,437,508 ( 0.34%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
  232,825,053 ( 0.34%)  ???:(anonymous namespace)::RegAllocFast::allocateBasicBlock(llvm::MachineBasicBlock&)
  227,597,792 ( 0.33%)  ./malloc/malloc.c:realloc
  219,994,454 ( 0.32%)  ???:llvm::ScheduleDAGSDNodes::BuildSchedUnits()
  200,812,956 ( 0.29%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
  195,574,703 ( 0.29%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
  192,405,748 ( 0.28%)  ???:(anonymous namespace)::Verifier::visitMDNode(llvm::MDNode const&, (anonymous namespace)::Verifier::AreDebugLocsAllowed)
  192,186,957 ( 0.28%)  ???:llvm::MCExpr::evaluateAsRelocatableImpl(llvm::MCValue&, llvm::MCAssembler const*, llvm::MCAsmLayout const*, llvm::MCFixup const*, llvm::DenseMap<llvm::MCSection const*, unsigned long, llvm::DenseMapInfo<llvm::MCSection const*>, llvm::detail::DenseMapPair<llvm::MCSection const*, unsigned long> > const*, bool) const
  188,144,942 ( 0.28%)  ???:llvm::TargetLoweringBase::getTypeConversion(llvm::LLVMContext&, llvm::EVT) const
  187,806,469 ( 0.27%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
  187,621,338 ( 0.27%)  ./malloc/malloc.c:unlink_chunk.constprop.0
  186,879,641 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
  180,598,598 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
  168,021,177 ( 0.25%)  ???:llvm::MCAsmLayout::getSymbolOffset(llvm::MCSymbol const&) const
  159,367,645 ( 0.23%)  ./malloc/malloc.c:_int_realloc
  156,362,543 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
  153,837,125 ( 0.22%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
  150,094,400 ( 0.22%)  ???:llvm::SelectionDAG::MorphNodeTo(llvm::SDNode*, unsigned int, llvm::SDVTList, llvm::ArrayRef<llvm::SDValue>)
  149,651,086 ( 0.22%)  ???:llvm::PMDataManager::verifyPreservedAnalysis(llvm::Pass*)
  147,604,501 ( 0.22%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
  141,651,918 ( 0.21%)  ???:llvm::InstrEmitter::EmitMachineNode(llvm::SDNode*, bool, bool, llvm::DenseMap<llvm::SDValue, llvm::Register, llvm::DenseMapInfo<llvm::SDValue>, llvm::detail::DenseMapPair<llvm::SDValue, llvm::Register> >&)
  139,982,671 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
  138,801,617 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs:rustc_middle::ty::relate::super_relate_tys::<rustc_infer::infer::equate::Equate>
  138,390,344 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
  136,210,009 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
  132,996,024 ( 0.19%)  ???:(anonymous namespace)::SelectionDAGLegalize::LegalizeOp(llvm::SDNode*) [clone .llvm.8386621111310650999]
  132,862,707 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
  132,622,809 ( 0.19%)  ???:llvm::DAGTypeLegalizer::run()
  131,721,097 ( 0.19%)  ???:(anonymous namespace)::VarLocBasedLDV::process(llvm::MachineInstr&, (anonymous namespace)::VarLocBasedLDV::OpenRangesSet&, (anonymous namespace)::VarLocBasedLDV::VarLocMap&, llvm::SmallVector<(anonymous namespace)::VarLocBasedLDV::TransferDebugPair, 4u>&)
  127,007,609 ( 0.19%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
  120,616,011 ( 0.18%)  ???:llvm::SelectionDAG::getConstant(llvm::ConstantInt const&, llvm::SDLoc const&, llvm::EVT, bool, bool)
  117,976,318 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
  115,740,536 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
  115,011,250 ( 0.17%)  ???:llvm::SelectionDAG::Legalize()
  110,164,900 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_transform/src/pass_manager.rs:rustc_mir_transform::pass_manager::run_passes
  108,963,270 ( 0.16%)  ???:(anonymous namespace)::Verifier::visitCallBase(llvm::CallBase&)
  108,700,357 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:core::slice::memchr::memrchr
  107,923,751 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/equate.rs:<rustc_infer::infer::equate::Equate as rustc_middle::ty::relate::TypeRelation>::tys
  106,987,687 ( 0.16%)  ???:(anonymous namespace)::DAGCombiner::combine(llvm::SDNode*)
  105,147,886 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
  103,517,210 ( 0.15%)  ???:llvm::MetadataTracking::track(void*, llvm::Metadata&, llvm::PointerUnion<llvm::MetadataAsValue*, llvm::Metadata*>)
  100,189,844 ( 0.15%)  ???:llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)
   97,824,984 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::DefId, &(rustc_middle::ty::assoc::AssocItem, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::DefId>
   97,585,943 ( 0.14%)  ???:(anonymous namespace)::TwoAddressInstructionPass::runOnMachineFunction(llvm::MachineFunction&)
   96,516,783 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (core::option::Option<rustc_middle::hir::Owner>, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
   96,319,324 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs:<rustc_infer::infer::InferCtxtInner>::rollback_to
   95,921,169 ( 0.14%)  ???:(anonymous namespace)::ScheduleDAGRRList::Schedule() [clone .llvm.6953762222372402862]
   95,256,613 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   93,892,188 ( 0.14%)  ???:llvm::TargetRegisterInfo::shouldRealignStack(llvm::MachineFunction const&) const
   93,486,940 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
   92,982,089 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::cmp::PartialEq>::eq
   91,979,414 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_middle::ty::subst::SubstFolder as rustc_middle::ty::fold::TypeFolder>::fold_ty
   90,966,076 ( 0.13%)  ???:(anonymous namespace)::X86MCCodeEmitter::emitPrefixImpl(unsigned int&, llvm::MCInst const&, llvm::MCSubtargetInfo const&, llvm::raw_ostream&) const
   90,247,060 ( 0.13%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
   85,629,148 ( 0.13%)  ???:(anonymous namespace)::Verifier::verify(llvm::Function const&) [clone .llvm.4153962086227604281]
   84,335,318 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs:<hashbrown::map::HashMap<(rustc_span::hygiene::SyntaxContext, rustc_span::hygiene::ExpnId, rustc_span::hygiene::Transparency), rustc_span::hygiene::SyntaxContext, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
   83,959,476 ( 0.12%)  ???:llvm::FoldingSetBase::FindNodeOrInsertPos(llvm::FoldingSetNodeID const&, void*&, llvm::FoldingSetBase::FoldingSetInfo const&)
   83,385,108 ( 0.12%)  ???:llvm::SmallSet<llvm::Register, 32u, std::less<llvm::Register> >::insert(llvm::Register const&)
   82,950,872 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::check
   82,805,612 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs:<rustc_infer::infer::InferCtxt>::super_combine_tys::<rustc_infer::infer::equate::Equate>
   82,674,931 ( 0.12%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_sse2_unaligned_erms
   81,918,598 ( 0.12%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::CalculateFromScratch(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::BatchUpdateInfo*)
   80,878,019 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::source_map::SourceMap>::lookup_source_file_idx
   80,436,754 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs:<rustc_privacy::DefIdVisitorSkeleton<rustc_privacy::TypePrivacyVisitor> as rustc_middle::ty::fold::TypeVisitor>::visit_ty
   79,445,855 ( 0.12%)  ???:llvm::MCAsmLayout::getFragmentOffset(llvm::MCFragment const*) const
   79,378,794 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::DefId, (core::option::Option<rustc_hir::def::DefKind>, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::DefId>
   77,640,672 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::TokenCursor>::next
   76,646,955 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs:<rustc_privacy::DefIdVisitorSkeleton<rustc_privacy::ReachEverythingInTheInterfaceVisitor> as rustc_middle::ty::fold::TypeVisitor>::visit_ty
   76,548,408 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::Token>::is_keyword
   76,129,947 ( 0.11%)  ???:llvm::MCObjectStreamer::emitBytes(llvm::StringRef)
   75,720,474 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs:<rustc_infer::infer::type_variable::TypeVariableTable>::probe
   74,755,497 ( 0.11%)  ???:llvm::ScheduleDAGSDNodes::AddSchedEdges()
   73,454,409 ( 0.11%)  ???:(anonymous namespace)::Verifier::verifyFunctionAttrs(llvm::FunctionType*, llvm::AttributeList, llvm::Value const*, bool)
   73,303,226 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::DefId, (&rustc_middle::ty::TyS, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::DefId>
   72,780,986 ( 0.11%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms
   70,624,354 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/memchr.rs:core::slice::memchr::memrchr
   70,079,490 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump
   69,109,216 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs:stacker::remaining_stack
   69,103,837 ( 0.10%)  ???:llvm::SelectionDAG::AssignTopologicalOrder()
   68,731,608 ( 0.10%)  ???:(anonymous namespace)::VarLocBasedLDV::ExtendRanges(llvm::MachineFunction&, llvm::TargetPassConfig*) [clone .llvm.4451506318407214204]

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs
--------------------------------------------------------------------------------
Ir                  

-- line 26 ----------------------------------------
         .               /// }
         .               ///
         .               /// assert_eq!(letters[&'s'], 2);
         .               /// assert_eq!(letters[&'t'], 3);
         .               /// assert_eq!(letters[&'u'], 1);
         .               /// assert_eq!(letters.get(&'y'), None);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
75,971,648 ( 0.11%)      pub fn rustc_entry(&mut self, key: K) -> RustcEntry<'_, K, V, A> {
         .                   let hash = make_insert_hash(&self.hash_builder, &key);
   136,254 ( 0.00%)          if let Some(elem) = self.table.find(hash, |q| q.0.eq(&key)) {
 7,019,468 ( 0.01%)              RustcEntry::Occupied(RustcOccupiedEntry {
16,335,901 ( 0.02%)                  key: Some(key),
         .                           elem,
         .                           table: &mut self.table,
         .                       })
         .                   } else {
         .                       // Ideally we would put this in VacantEntry::insert, but Entry is not
         .                       // generic over the BuildHasher and adding a generic parameter would be
         .                       // a breaking change.
         .                       self.reserve(1);
         .           
10,113,059 ( 0.01%)              RustcEntry::Vacant(RustcVacantEntry {
         .                           hash,
 3,359,379 ( 0.00%)                  key,
         .                           table: &mut self.table,
         .                       })
         .                   }
49,703,524 ( 0.07%)      }
         .           }
         .           
         .           /// A view into a single entry in a map, which may either be vacant or occupied.
         .           ///
         .           /// This `enum` is constructed from the [`entry`] method on [`HashMap`].
         .           ///
         .           /// [`HashMap`]: struct.HashMap.html
         .           /// [`entry`]: struct.HashMap.html#method.rustc_entry
-- line 62 ----------------------------------------
-- line 405 ----------------------------------------
         .               /// if let RustcEntry::Occupied(o) = map.rustc_entry("poneyland") {
         .               ///     *o.into_mut() += 10;
         .               /// }
         .               ///
         .               /// assert_eq!(map["poneyland"], 22);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn into_mut(self) -> &'a mut V {
   567,030 ( 0.00%)          unsafe { &mut self.elem.as_mut().1 }
         .               }
         .           
         .               /// Sets the value of the entry, and returns the entry's old value.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
-- line 421 ----------------------------------------
-- line 568 ----------------------------------------
         .               /// let mut map: HashMap<&str, u32> = HashMap::new();
         .               ///
         .               /// if let RustcEntry::Vacant(o) = map.rustc_entry("poneyland") {
         .               ///     o.insert(37);
         .               /// }
         .               /// assert_eq!(map["poneyland"], 37);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
   104,826 ( 0.00%)      pub fn insert(self, value: V) -> &'a mut V {
         .                   unsafe {
 1,580,911 ( 0.00%)              let bucket = self.table.insert_no_grow(self.hash, (self.key, value));
   266,255 ( 0.00%)              &mut bucket.as_mut().1
         .                   }
   141,189 ( 0.00%)      }
         .           
         .               /// Sets the value of the entry with the RustcVacantEntry's key,
         .               /// and returns a RustcOccupiedEntry.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
-- line 589 ----------------------------------------

13,511,592 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir                   

-- line 91 ----------------------------------------
          .           // maximum of number bytes needed to fill an 8-byte-sized element on which
          .           // SipHash operates. Note that for variable-sized copies which are known to be
          .           // less than 8 bytes, this function will perform more work than necessary unless
          .           // the compiler is able to optimize the extra work away.
          .           #[inline]
          .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
          .               debug_assert!(count <= 8);
          .           
    811,319 ( 0.00%)      if count == 8 {
          .                   ptr::copy_nonoverlapping(src, dst, 8);
          .                   return;
          .               }
          .           
          .               let mut i = 0;
    904,064 ( 0.00%)      if i + 3 < count {
          .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
          .                   i += 4;
          .               }
          .           
  1,976,730 ( 0.00%)      if i + 1 < count {
          .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
    241,104 ( 0.00%)          i += 2
          .               }
          .           
    904,064 ( 0.00%)      if i < count {
    250,788 ( 0.00%)          *dst.add(i) = *src.add(i);
          .                   i += 1;
          .               }
          .           
          .               debug_assert_eq!(i, count);
          .           }
          .           
          .           // # Implementation
          .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
          .           
          .                   hasher
          .               }
          .           
          .               // A specialized write function for values with size <= 8.
          .               #[inline]
          .               fn short_write<T>(&mut self, x: T) {
          .                   let size = mem::size_of::<T>();
 22,644,523 ( 0.03%)          let nbuf = self.nbuf;
          .                   debug_assert!(size <= 8);
          .                   debug_assert!(nbuf < BUFFER_SIZE);
          .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
          .           
158,798,312 ( 0.23%)          if nbuf + size < BUFFER_SIZE {
          .                       unsafe {
          .                           // The memcpy call is optimized away because the size is known.
          .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
          .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
          .                       }
          .           
 48,503,475 ( 0.07%)              self.nbuf = nbuf + size;
          .           
          .                       return;
          .                   }
          .           
  8,824,531 ( 0.01%)          unsafe { self.short_write_process_buffer(x) }
          .               }
          .           
          .               // A specialized write function for values with size <= 8 that should only
          .               // be called when the write would cause the buffer to fill.
          .               //
          .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
          .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
          .               // overflow) if it wasn't already.
          .               #[inline(never)]
  2,634,147 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
          .                   let size = mem::size_of::<T>();
  2,634,147 ( 0.00%)          let nbuf = self.nbuf;
          .                   debug_assert!(size <= 8);
          .                   debug_assert!(nbuf < BUFFER_SIZE);
          .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
          .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
          .           
          .                   // Copy first part of input into end of buffer, possibly into spill
          .                   // element. The memcpy call is optimized away because the size is known.
          .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
          .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
          .           
          .                   // Process buffer.
          .                   for i in 0..BUFFER_CAPACITY {
 26,341,470 ( 0.04%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
 21,073,176 ( 0.03%)              self.state.v3 ^= elem;
          .                       Sip24Rounds::c_rounds(&mut self.state);
 23,707,323 ( 0.03%)              self.state.v0 ^= elem;
          .                   }
          .           
          .                   // Copy remaining input into start of buffer by copying size - 1
          .                   // elements from spill (at most size - 1 bytes could have overflowed
          .                   // into the spill). The memcpy call is optimized away because the size
          .                   // is known. And the whole copy is optimized away for size == 1.
          .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
          .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
          .           
          .                   // This function should only be called when the write fills the buffer.
          .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
          .                   // is statically known, so the branch is optimized away.
 12,470,123 ( 0.02%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
 10,536,588 ( 0.02%)          self.processed += BUFFER_SIZE;
  5,268,294 ( 0.01%)      }
          .           
          .               // A write function for byte slices.
          .               #[inline]
          .               fn slice_write(&mut self, msg: &[u8]) {
          .                   let length = msg.len();
    115,822 ( 0.00%)          let nbuf = self.nbuf;
          .                   debug_assert!(nbuf < BUFFER_SIZE);
          .           
  3,311,062 ( 0.00%)          if nbuf + length < BUFFER_SIZE {
          .                       unsafe {
          .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
          .           
  1,219,046 ( 0.00%)                  if length <= 8 {
          .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
          .                           } else {
          .                               // This memcpy is *not* optimized away.
          .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
          .                           }
          .                       }
          .           
    612,063 ( 0.00%)              self.nbuf = nbuf + length;
          .           
          .                       return;
          .                   }
          .           
    439,429 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
          .               }
          .           
          .               // A write function for byte slices that should only be called when the
          .               // write would cause the buffer to fill.
          .               //
          .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
          .               // and `msg` must contain enough bytes to initialize the rest of the element
          .               // containing the byte offset `self.nbuf`.
          .               #[inline(never)]
    248,415 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
          .                   let length = msg.len();
     49,683 ( 0.00%)          let nbuf = self.nbuf;
          .                   debug_assert!(nbuf < BUFFER_SIZE);
          .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
          .           
          .                   // Always copy first part of input into current element of buffer.
          .                   // This function should only be called when the write fills the buffer,
          .                   // so we know that there is enough input to fill the current element.
    149,049 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
     49,683 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
          .           
          .                   let src = msg.as_ptr();
          .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
          .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
          .           
          .                   // Process buffer.
          .           
          .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
          .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
          .                   // We know that is true, because last step ensured we have a full
          .                   // element in the buffer.
     99,366 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
          .           
          .                   for i in 0..last {
    382,709 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
    432,392 ( 0.00%)              self.state.v3 ^= elem;
          .                       Sip24Rounds::c_rounds(&mut self.state);
    765,418 ( 0.00%)              self.state.v0 ^= elem;
          .                   }
          .           
          .                   // Process the remaining element-sized chunks of input.
          .                   let mut processed = needed_in_elem;
     99,366 ( 0.00%)          let input_left = length - processed;
     67,110 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
          .                   let extra_bytes_left = input_left % ELEM_SIZE;
          .           
          .                   for _ in 0..elems_left {
     38,388 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
     38,388 ( 0.00%)              self.state.v3 ^= elem;
          .                       Sip24Rounds::c_rounds(&mut self.state);
     38,388 ( 0.00%)              self.state.v0 ^= elem;
     76,776 ( 0.00%)              processed += ELEM_SIZE;
          .                   }
          .           
          .                   // Copy remaining input into start of buffer.
          .                   let src = msg.as_ptr().add(processed);
          .                   let dst = self.buf.as_mut_ptr() as *mut u8;
          .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
          .           
     49,683 ( 0.00%)          self.nbuf = extra_bytes_left;
    248,415 ( 0.00%)          self.processed += nbuf + processed;
    298,098 ( 0.00%)      }
          .           
          .               #[inline]
          .               pub fn finish128(mut self) -> (u64, u64) {
          .                   debug_assert!(self.nbuf < BUFFER_SIZE);
          .           
          .                   // Process full elements in buffer.
    697,671 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
          .           
          .                   // Since we're consuming self, avoid updating members for a potential
          .                   // performance gain.
    930,228 ( 0.00%)          let mut state = self.state;
          .           
          .                   for i in 0..last {
    785,669 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
    785,669 ( 0.00%)              state.v3 ^= elem;
          .                       Sip24Rounds::c_rounds(&mut state);
    785,669 ( 0.00%)              state.v0 ^= elem;
          .                   }
          .           
          .                   // Get remaining partial element.
    465,114 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
          .                       unsafe {
          .                           // Ensure element is initialized by writing zero bytes. At most
          .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
          .                           // to write this many because we have the spill and we maintain
          .                           // `self.nbuf` such that this write will start before the spill.
          .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
          .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
    197,826 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
          .                       }
          .                   } else {
          .                       0
          .                   };
          .           
          .                   // Finalize the hash.
    658,292 ( 0.00%)          let length = self.processed + self.nbuf;
    455,782 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
          .           
    227,891 ( 0.00%)          state.v3 ^= b;
          .                   Sip24Rounds::c_rounds(&mut state);
    227,891 ( 0.00%)          state.v0 ^= b;
          .           
    227,891 ( 0.00%)          state.v2 ^= 0xee;
          .                   Sip24Rounds::d_rounds(&mut state);
    815,894 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
          .           
    360,108 ( 0.00%)          state.v1 ^= 0xdd;
          .                   Sip24Rounds::d_rounds(&mut state);
    360,108 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
          .           
          .                   (_0, _1)
          .               }
          .           }
          .           
          .           impl Hasher for SipHasher128 {
          .               #[inline]
          .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
          .           }
          .           
          .           #[derive(Debug, Clone, Default)]
          .           struct Sip24Rounds;
          .           
          .           impl Sip24Rounds {
          .               #[inline]
          .               fn c_rounds(state: &mut State) {
 92,814,528 ( 0.14%)          compress!(state);
 99,081,900 ( 0.14%)          compress!(state);
          .               }
          .           
          .               #[inline]
          .               fn d_rounds(state: &mut State) {
  1,631,780 ( 0.00%)          compress!(state);
  1,631,780 ( 0.00%)          compress!(state);
  1,631,780 ( 0.00%)          compress!(state);
  1,403,891 ( 0.00%)          compress!(state);
          .               }
          .           }

 16,686,691 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir                   

-- line 21 ----------------------------------------
          .           use rustc_target::spec::abi;
          .           use std::borrow::Cow;
          .           use std::cmp::Ordering;
          .           use std::marker::PhantomData;
          .           use std::ops::Range;
          .           use ty::util::IntTypeExt;
          .           
          .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
          7 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
          .           pub struct TypeAndMut<'tcx> {
     11,590 ( 0.00%)      pub ty: Ty<'tcx>,
     57,950 ( 0.00%)      pub mutbl: hir::Mutability,
          .           }
          .           
          .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
          .           #[derive(HashStable)]
          .           /// A "free" region `fr` can be interpreted as "some region
          .           /// at least as big as the scope `fr.scope`".
          .           pub struct FreeRegion {
    777,466 ( 0.00%)      pub scope: DefId,
  3,073,289 ( 0.00%)      pub bound_region: BoundRegionKind,
          .           }
          .           
 13,307,192 ( 0.02%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
         98 ( 0.00%)  #[derive(HashStable)]
          .           pub enum BoundRegionKind {
          .               /// An anonymous region parameter for a given fn (&T)
    599,601 ( 0.00%)      BrAnon(u32),
          .           
          .               /// Named region parameters for functions (a in &'a T)
          .               ///
          .               /// The `DefId` is needed to distinguish free regions in
          .               /// the event of shadowing.
     42,955 ( 0.00%)      BrNamed(DefId, Symbol),
          .           
          .               /// Anonymous region for the implicit env pointer parameter
          .               /// to a closure
          .               BrEnv,
          .           }
          .           
     21,672 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
          .           #[derive(HashStable)]
          .           pub struct BoundRegion {
  2,508,471 ( 0.00%)      pub var: BoundVar,
  1,781,991 ( 0.00%)      pub kind: BoundRegionKind,
          .           }
          .           
          .           impl BoundRegionKind {
          .               pub fn is_named(&self) -> bool {
          .                   match *self {
          .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
          .                       _ => false,
          .                   }
          .               }
          .           }
          .           
          .           /// Defines the kinds of types.
          .           ///
          .           /// N.B., if you change this, you'll probably want to change the corresponding
          .           /// AST structure in `rustc_ast/src/ast.rs` as well.
247,166,778 ( 0.36%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
    689,308 ( 0.00%)  #[derive(HashStable)]
          .           #[rustc_diagnostic_item = "TyKind"]
          .           pub enum TyKind<'tcx> {
          .               /// The primitive boolean type. Written as `bool`.
          .               Bool,
          .           
          .               /// The primitive character type; holds a Unicode scalar value
          .               /// (a non-surrogate code point). Written as `char`.
          .               Char,
-- line 90 ----------------------------------------
-- line 99 ----------------------------------------
          .               Float(ty::FloatTy),
          .           
          .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
          .               ///
          .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
          .               /// That is, even after substitution it is possible that there are type
          .               /// variables. This happens when the `Adt` corresponds to an ADT
          .               /// definition and not a concrete use of it.
 54,080,883 ( 0.08%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
          .           
          .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
          .               Foreign(DefId),
          .           
          .               /// The pointee of a string slice. Written as `str`.
          .               Str,
          .           
          .               /// An array with the given length. Written as `[T; n]`.
    220,851 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
          .           
          .               /// The pointee of an array slice. Written as `[T]`.
          .               Slice(Ty<'tcx>),
          .           
          .               /// A raw pointer. Written as `*mut T` or `*const T`
          .               RawPtr(TypeAndMut<'tcx>),
          .           
          .               /// A reference; a pointer with an associated lifetime. Written as
          .               /// `&'a mut T` or `&'a T`.
 12,285,253 ( 0.02%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
          .           
          .               /// The anonymous type of a function declaration/definition. Each
          .               /// function has a unique type, which is output (for a function
          .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
          .               ///
          .               /// For example the type of `bar` here:
          .               ///
          .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
          .               ///
          .               /// ```rust
          .               /// fn foo() -> i32 { 1 }
          .               /// let bar: fn() -> i32 = foo;
          .               /// ```
          .               FnPtr(PolyFnSig<'tcx>),
          .           
          .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
 12,630,818 ( 0.02%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
          .           
          .               /// The anonymous type of a closure. Used to represent the type of
          .               /// `|a| a`.
          .               Closure(DefId, SubstsRef<'tcx>),
          .           
          .               /// The anonymous type of a generator. Used to represent the type of
          .               /// `|a| yield a`.
          .               Generator(DefId, SubstsRef<'tcx>, hir::Movability),
-- line 159 ----------------------------------------
-- line 180 ----------------------------------------
          .               /// The substitutions are for the generics of the function in question.
          .               /// After typeck, the concrete type can be found in the `types` map.
          .               Opaque(DefId, SubstsRef<'tcx>),
          .           
          .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
          .               Param(ParamTy),
          .           
          .               /// Bound type variable, used only when preparing a trait query.
     64,078 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
          .           
          .               /// A placeholder type - universally quantified higher-ranked type.
          .               Placeholder(ty::PlaceholderType),
          .           
          .               /// A type variable used during type checking.
          .               Infer(InferTy),
          .           
          .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 330 ----------------------------------------
          .               pub closure_kind_ty: T,
          .               pub closure_sig_as_fn_ptr_ty: T,
          .               pub tupled_upvars_ty: T,
          .           }
          .           
          .           impl<'tcx> ClosureSubsts<'tcx> {
          .               /// Construct `ClosureSubsts` from `ClosureSubstsParts`, containing `Substs`
          .               /// for the closure parent, alongside additional closure-specific components.
        214 ( 0.00%)      pub fn new(
          .                   tcx: TyCtxt<'tcx>,
          .                   parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,
          .               ) -> ClosureSubsts<'tcx> {
          .                   ClosureSubsts {
          .                       substs: tcx.mk_substs(
        428 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
        856 ( 0.00%)                      [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]
          .                                   .iter()
          .                                   .map(|&ty| ty.into()),
          .                           ),
          .                       ),
          .                   }
        428 ( 0.00%)      }
          .           
          .               /// Divides the closure substs into their respective components.
          .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
      8,823 ( 0.00%)      fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
          .                   match self.substs[..] {
     54,802 ( 0.00%)              [
     15,761 ( 0.00%)                  ref parent_substs @ ..,
     16,120 ( 0.00%)                  closure_kind_ty,
      6,603 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
     13,503 ( 0.00%)                  tupled_upvars_ty,
     35,292 ( 0.00%)              ] => ClosureSubstsParts {
          .                           parent_substs,
          .                           closure_kind_ty,
          .                           closure_sig_as_fn_ptr_ty,
          .                           tupled_upvars_ty,
          .                       },
          .                       _ => bug!("closure substs missing synthetics"),
          .                   }
     26,469 ( 0.00%)      }
          .           
          .               /// Returns `true` only if enough of the synthetic types are known to
          .               /// allow using all of the methods on `ClosureSubsts` without panicking.
          .               ///
          .               /// Used primarily by `ty::print::pretty` to be able to handle closure
          .               /// types that haven't had their synthetic types substituted in.
          2 ( 0.00%)      pub fn is_valid(self) -> bool {
          4 ( 0.00%)          self.substs.len() >= 3
          4 ( 0.00%)              && matches!(self.split().tupled_upvars_ty.expect_ty().kind(), Tuple(_))
          4 ( 0.00%)      }
          .           
          .               /// Returns the substitutions of the closure's parent.
          .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
          .                   self.split().parent_substs
          .               }
          .           
          .               /// Returns an iterator over the list of types of captured paths by the closure.
          .               /// In case there was a type error in figuring out the types of the captured path, an
          .               /// empty iterator is returned.
          .               #[inline]
      4,596 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
      6,960 ( 0.00%)          match self.tupled_upvars_ty().kind() {
          .                       TyKind::Error(_) => None,
      3,266 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
          .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
          .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
          .                   }
          .                   .into_iter()
          .                   .flatten()
      3,064 ( 0.00%)      }
          .           
          .               /// Returns the tuple type representing the upvars for this closure.
          .               #[inline]
          .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
     45,734 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
          .               }
          .           
          .               /// Returns the closure kind for this closure; may return a type
          .               /// variable during inference. To get the closure kind during
          .               /// inference, use `infcx.closure_kind(substs)`.
      2,658 ( 0.00%)      pub fn kind_ty(self) -> Ty<'tcx> {
          .                   self.split().closure_kind_ty.expect_ty()
      5,316 ( 0.00%)      }
          .           
          .               /// Returns the `fn` pointer type representing the closure signature for this
          .               /// closure.
          .               // FIXME(eddyb) this should be unnecessary, as the shallowly resolved
          .               // type is known at the time of the creation of `ClosureSubsts`,
          .               // see `rustc_typeck::check::closure`.
          .               pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {
          .                   self.split().closure_sig_as_fn_ptr_ty.expect_ty()
          .               }
          .           
          .               /// Returns the closure kind for this closure; only usable outside
          .               /// of an inference context, because in that context we know that
          .               /// there are no type variables.
          .               ///
          .               /// If you have an inference context, use `infcx.closure_kind()`.
         54 ( 0.00%)      pub fn kind(self) -> ty::ClosureKind {
        405 ( 0.00%)          self.kind_ty().to_opt_closure_kind().unwrap()
        108 ( 0.00%)      }
          .           
          .               /// Extracts the signature from the closure.
      3,134 ( 0.00%)      pub fn sig(self) -> ty::PolyFnSig<'tcx> {
          .                   let ty = self.sig_as_fn_ptr_ty();
      6,268 ( 0.00%)          match ty.kind() {
     12,536 ( 0.00%)              ty::FnPtr(sig) => *sig,
          .                       _ => bug!("closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}", ty.kind()),
          .                   }
      9,402 ( 0.00%)      }
          .           }
          .           
          .           /// Similar to `ClosureSubsts`; see the above documentation for more.
          .           #[derive(Copy, Clone, Debug, TypeFoldable)]
          .           pub struct GeneratorSubsts<'tcx> {
          .               pub substs: SubstsRef<'tcx>,
          .           }
          .           
-- line 448 ----------------------------------------
-- line 478 ----------------------------------------
          .                       ),
          .                   }
          .               }
          .           
          .               /// Divides the generator substs into their respective components.
          .               /// The ordering assumed here must match that used by `GeneratorSubsts::new` above.
          .               fn split(self) -> GeneratorSubstsParts<'tcx, GenericArg<'tcx>> {
          .                   match self.substs[..] {
         13 ( 0.00%)              [ref parent_substs @ .., resume_ty, yield_ty, return_ty, witness, tupled_upvars_ty] => {
          .                           GeneratorSubstsParts {
          .                               parent_substs,
          .                               resume_ty,
          .                               yield_ty,
          .                               return_ty,
          .                               witness,
          .                               tupled_upvars_ty,
          .                           }
-- line 494 ----------------------------------------
-- line 676 ----------------------------------------
          .           }
          .           
          .           impl<'tcx> UpvarSubsts<'tcx> {
          .               /// Returns an iterator over the list of types of captured paths by the closure/generator.
          .               /// In case there was a type error in figuring out the types of the captured path, an
          .               /// empty iterator is returned.
          .               #[inline]
          .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
        536 ( 0.00%)          let tupled_tys = match self {
        750 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
          .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
          .                   };
          .           
      1,232 ( 0.00%)          match tupled_tys.kind() {
          .                       TyKind::Error(_) => None,
      1,018 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
          .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
          .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
          .                   }
          .                   .into_iter()
          .                   .flatten()
          .               }
          .           
          .               #[inline]
          .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
        964 ( 0.00%)          match self {
      1,061 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
          .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
          .                   }
          .               }
          .           }
          .           
          .           /// An inline const is modeled like
          .           ///
          .           ///     const InlineConst<'l0...'li, T0...Tj, R>: R;
-- line 710 ----------------------------------------
-- line 760 ----------------------------------------
          .               }
          .           
          .               /// Returns the type of this inline const.
          .               pub fn ty(self) -> Ty<'tcx> {
          .                   self.split().ty.expect_ty()
          .               }
          .           }
          .           
  8,872,488 ( 0.01%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
  9,444,626 ( 0.01%)  #[derive(HashStable, TypeFoldable)]
          .           pub enum ExistentialPredicate<'tcx> {
          .               /// E.g., `Iterator`.
          .               Trait(ExistentialTraitRef<'tcx>),
          .               /// E.g., `Iterator::Item = T`.
          .               Projection(ExistentialProjection<'tcx>),
          .               /// E.g., `Send`.
         95 ( 0.00%)      AutoTrait(DefId),
          .           }
          .           
          .           impl<'tcx> ExistentialPredicate<'tcx> {
          .               /// Compares via an ordering that will not change if modules are reordered or other changes are
          .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
        660 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
          .                   use self::ExistentialPredicate::*;
        644 ( 0.00%)          match (*self, *other) {
          .                       (Trait(_), Trait(_)) => Ordering::Equal,
          .                       (Projection(ref a), Projection(ref b)) => {
          .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
          .                       }
          .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
          .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
          .                       }
          .                       (Trait(_), _) => Ordering::Less,
          .                       (Projection(_), Trait(_)) => Ordering::Greater,
          .                       (Projection(_), _) => Ordering::Less,
          .                       (AutoTrait(_), _) => Ordering::Greater,
          .                   }
        792 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
    696,348 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
          .                   use crate::ty::ToPredicate;
    386,860 ( 0.00%)          match self.skip_binder() {
          .                       ExistentialPredicate::Trait(tr) => {
          .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
          .                       }
          .                       ExistentialPredicate::Projection(p) => {
          .                           self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
          .                       }
          .                       ExistentialPredicate::AutoTrait(did) => {
          .                           let trait_ref = self.rebind(ty::TraitRef {
          .                               def_id: did,
          .                               substs: tcx.mk_substs_trait(self_ty, &[]),
          .                           });
          .                           trait_ref.without_const().to_predicate(tcx)
          .                       }
          .                   }
    618,976 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
          .               /// Returns the "principal `DefId`" of this set of existential predicates.
          .               ///
          .               /// A Rust trait object type consists (in addition to a lifetime bound)
          .               /// of a set of trait bounds, which are separated into any number
          .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 839 ----------------------------------------
          .               /// are the set `{Sync}`.
          .               ///
          .               /// It is also possible to have a "trivial" trait object that
          .               /// consists only of auto traits, with no principal - for example,
          .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
          .               /// is `{Send, Sync}`, while there is no principal. These trait objects
          .               /// have a "trivial" vtable consisting of just the size, alignment,
          .               /// and destructor.
      9,720 ( 0.00%)      pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
  1,574,952 ( 0.00%)          self[0]
  1,544,708 ( 0.00%)              .map_bound(|this| match this {
          .                           ExistentialPredicate::Trait(tr) => Some(tr),
          .                           _ => None,
     38,880 ( 0.00%)              })
          .                       .transpose()
     29,160 ( 0.00%)      }
          .           
     75,250 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
          .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
    150,500 ( 0.00%)      }
          .           
          .               #[inline]
          .               pub fn projection_bounds<'a>(
          .                   &'a self,
          .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
          .                   self.iter().filter_map(|predicate| {
         18 ( 0.00%)              predicate
     47,664 ( 0.00%)                  .map_bound(|pred| match pred {
        270 ( 0.00%)                      ExistentialPredicate::Projection(projection) => Some(projection),
          .                               _ => None,
          .                           })
          .                           .transpose()
          .                   })
          .               }
          .           
          .               #[inline]
          .               pub fn auto_traits<'a>(&'a self) -> impl Iterator<Item = DefId> + 'a {
-- line 875 ----------------------------------------
-- line 886 ----------------------------------------
          .           ///     T: Foo<U>
          .           ///
          .           /// This would be represented by a trait-reference where the `DefId` is the
          .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
          .           /// and `U` as parameter 1.
          .           ///
          .           /// Trait references also appear in object types like `Foo<U>`, but in
          .           /// that case the `Self` parameter is absent from the substitutions.
     56,161 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
 22,587,321 ( 0.03%)  #[derive(HashStable, TypeFoldable)]
          .           pub struct TraitRef<'tcx> {
     14,705 ( 0.00%)      pub def_id: DefId,
 14,204,650 ( 0.02%)      pub substs: SubstsRef<'tcx>,
          .           }
          .           
          .           impl<'tcx> TraitRef<'tcx> {
     11,078 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
          .                   TraitRef { def_id, substs }
     44,312 ( 0.00%)      }
          .           
          .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
          .               /// are the parameters defined on trait.
     23,904 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
     10,624 ( 0.00%)          ty::Binder::dummy(TraitRef {
          .                       def_id,
     15,936 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
          .                   })
     21,248 ( 0.00%)      }
          .           
          .               #[inline]
          .               pub fn self_ty(&self) -> Ty<'tcx> {
          .                   self.substs.type_at(0)
          .               }
          .           
     21,344 ( 0.00%)      pub fn from_method(
          .                   tcx: TyCtxt<'tcx>,
          .                   trait_id: DefId,
          .                   substs: SubstsRef<'tcx>,
          .               ) -> ty::TraitRef<'tcx> {
          .                   let defs = tcx.generics_of(trait_id);
          .           
      2,668 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
     29,348 ( 0.00%)      }
          .           }
          .           
          .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
          .           
          .           impl<'tcx> PolyTraitRef<'tcx> {
          .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
          .                   self.map_bound_ref(|tr| tr.self_ty())
          .               }
          .           
          .               pub fn def_id(&self) -> DefId {
     59,331 ( 0.00%)          self.skip_binder().def_id
     19,777 ( 0.00%)      }
          .           
      7,769 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
     15,538 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
          .                       trait_ref,
          .                       constness: ty::BoundConstness::NotConst,
          .                       polarity: ty::ImplPolarity::Positive,
          .                   })
      7,769 ( 0.00%)      }
          .           }
          .           
          .           /// An existential reference to a trait, where `Self` is erased.
          .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
          .           ///
          .           ///     exists T. T: Trait<'a, 'b, X, Y>
          .           ///
          .           /// The substitutions don't include the erased `Self`, only trait
          .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
      4,925 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
  4,661,321 ( 0.01%)  #[derive(HashStable, TypeFoldable)]
          .           pub struct ExistentialTraitRef<'tcx> {
    604,846 ( 0.00%)      pub def_id: DefId,
  5,635,789 ( 0.01%)      pub substs: SubstsRef<'tcx>,
          .           }
          .           
          .           impl<'tcx> ExistentialTraitRef<'tcx> {
     11,872 ( 0.00%)      pub fn erase_self_ty(
          .                   tcx: TyCtxt<'tcx>,
          .                   trait_ref: ty::TraitRef<'tcx>,
          .               ) -> ty::ExistentialTraitRef<'tcx> {
          .                   // Assert there is a Self.
          .                   trait_ref.substs.type_at(0);
          .           
          .                   ty::ExistentialTraitRef {
          .                       def_id: trait_ref.def_id,
          .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
          .                   }
     11,872 ( 0.00%)      }
          .           
          .               /// Object types don't have a self type specified. Therefore, when
          .               /// we convert the principal trait-ref into a normal trait-ref,
          .               /// you must give *some* self type. A common choice is `mk_err()`
          .               /// or some placeholder type.
        714 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
          .                   // otherwise the escaping vars would be captured by the binder
          .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
          .           
        357 ( 0.00%)          ty::TraitRef { def_id: self.def_id, substs: tcx.mk_substs_trait(self_ty, self.substs) }
      1,785 ( 0.00%)      }
          .           }
          .           
          .           pub type PolyExistentialTraitRef<'tcx> = Binder<'tcx, ExistentialTraitRef<'tcx>>;
          .           
          .           impl<'tcx> PolyExistentialTraitRef<'tcx> {
          .               pub fn def_id(&self) -> DefId {
          .                   self.skip_binder().def_id
          .               }
          .           
          .               /// Object types don't have a self type specified. Therefore, when
          .               /// we convert the principal trait-ref into a normal trait-ref,
          .               /// you must give *some* self type. A common choice is `mk_err()`
          .               /// or some placeholder type.
      3,453 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
      3,773 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
      4,604 ( 0.00%)      }
          .           }
          .           
  2,706,991 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        180 ( 0.00%)  #[derive(HashStable)]
          .           pub enum BoundVariableKind {
          .               Ty(BoundTyKind),
          .               Region(BoundRegionKind),
          .               Const,
          .           }
          .           
          .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
          .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
          .           /// (which would be represented by the type `PolyTraitRef ==
          .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
          .           /// erase, or otherwise "discharge" these bound vars, we change the
          .           /// type from `Binder<'tcx, T>` to just `T` (see
          .           /// e.g., `liberate_late_bound_regions`).
          .           ///
          .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
 12,307,217 ( 0.02%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
  8,620,799 ( 0.01%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
          .           
          .           impl<'tcx, T> Binder<'tcx, T>
          .           where
          .               T: TypeFoldable<'tcx>,
          .           {
          .               /// Wraps `value` in a binder, asserting that `value` does not
          .               /// contain any bound vars that would be bound by the
          .               /// binder. This is commonly used to 'inject' a value T into a
          .               /// different binding level.
    397,410 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
  1,761,777 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
  4,251,321 ( 0.01%)          Binder(value, ty::List::empty())
    397,212 ( 0.00%)      }
          .           
          .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
          .                   if cfg!(debug_assertions) {
          .                       let mut validator = ValidateBoundVars::new(vars);
          .                       value.visit_with(&mut validator);
          .                   }
    869,386 ( 0.00%)          Binder(value, vars)
          .               }
          .           }
          .           
          .           impl<'tcx, T> Binder<'tcx, T> {
          .               /// Skips the binder and returns the "bound" value. This is a
          .               /// risky thing to do because it's easy to get confused about
          .               /// De Bruijn indices and the like. It is usually better to
          .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
          .               /// accounting.
          .               ///
          .               /// Some examples where `skip_binder` is reasonable:
          .               ///
          .               /// - extracting the `DefId` from a PolyTraitRef;
          .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
          .               ///   a type parameter `X`, since the type `X` does not reference any regions
          .               pub fn skip_binder(self) -> T {
 22,496,424 ( 0.03%)          self.0
          .               }
          .           
          .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
    180,895 ( 0.00%)          self.1
          .               }
          .           
          .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
     74,743 ( 0.00%)          Binder(&self.0, self.1)
          .               }
          .           
          .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
          .               where
          .                   F: FnOnce(&T) -> U,
          .               {
          .                   let value = f(&self.0);
          .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
          .           
          .               pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>
          .               where
          .                   F: FnOnce(&T) -> U,
          .               {
          .                   self.as_ref().map_bound(f)
          .               }
          .           
     23,148 ( 0.00%)      pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
          .               where
          .                   F: FnOnce(T) -> U,
          .               {
    217,082 ( 0.00%)          let value = f(self.0);
          .                   if cfg!(debug_assertions) {
          .                       let mut validator = ValidateBoundVars::new(self.1);
          .                       value.visit_with(&mut validator);
          .                   }
  5,201,932 ( 0.01%)          Binder(value, self.1)
     23,156 ( 0.00%)      }
          .           
          .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
          .               where
          .                   F: FnOnce(T) -> Result<U, E>,
          .               {
          .                   let value = f(self.0)?;
          .                   if cfg!(debug_assertions) {
          .                       let mut validator = ValidateBoundVars::new(self.1);
          .                       value.visit_with(&mut validator);
          .                   }
    961,481 ( 0.00%)          Ok(Binder(value, self.1))
          .               }
          .           
          .               /// Wraps a `value` in a binder, using the same bound variables as the
          .               /// current `Binder`. This should not be used if the new value *changes*
          .               /// the bound variables. Note: the (old or new) value itself does not
          .               /// necessarily need to *name* all the bound variables.
          .               ///
          .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
          .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
          .               where
          .                   U: TypeFoldable<'tcx>,
          .               {
          .                   if cfg!(debug_assertions) {
          .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
          .                       value.visit_with(&mut validator);
          .                   }
    773,058 ( 0.00%)          Binder(value, self.1)
          .               }
          .           
          .               /// Unwraps and returns the value within, but only if it contains
          .               /// no bound vars at all. (In other words, if this binder --
          .               /// and indeed any enclosing binder -- doesn't bind anything at
          .               /// all.) Otherwise, returns `None`.
          .               ///
          .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
          .               /// binder, but permits late-bound vars bound by enclosing
          .               /// binders, but that would require adjusting the debruijn
          .               /// indices, and given the shallow binding structure we often use,
          .               /// would not be that useful.)
          .               pub fn no_bound_vars(self) -> Option<T>
          .               where
          .                   T: TypeFoldable<'tcx>,
          .               {
  4,245,840 ( 0.01%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
     10,855 ( 0.00%)      }
          .           
          .               /// Splits the contents into two things that share the same binder
          .               /// level as the original, returning two distinct binders.
          .               ///
          .               /// `f` should consider bound regions at depth 1 to be free, and
          .               /// anything it produces with bound regions at depth 1 will be
          .               /// bound in the resulting return values.
          .               pub fn split<U, V, F>(self, f: F) -> (Binder<'tcx, U>, Binder<'tcx, V>)
-- line 1160 ----------------------------------------
-- line 1170 ----------------------------------------
          .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
          .                   let bound_vars = self.1;
          .                   self.0.map(|v| Binder(v, bound_vars))
          .               }
          .           }
          .           
          .           /// Represents the projection of an associated type. In explicit UFCS
          .           /// form this would be written `<T as Trait<..>>::N`.
      4,570 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
    248,975 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
          .           pub struct ProjectionTy<'tcx> {
          .               /// The parameters of the associated item.
    144,369 ( 0.00%)      pub substs: SubstsRef<'tcx>,
          .           
          .               /// The `DefId` of the `TraitItem` for the associated type `N`.
          .               ///
          .               /// Note that this is not the `DefId` of the `TraitRef` containing this
          .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
    222,169 ( 0.00%)      pub item_def_id: DefId,
          .           }
          .           
          .           impl<'tcx> ProjectionTy<'tcx> {
     48,594 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
     13,884 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
     55,536 ( 0.00%)      }
          .           
          .               /// Extracts the underlying trait reference and own substs from this projection.
          .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
          .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
     40,236 ( 0.00%)      pub fn trait_ref_and_own_substs(
          .                   &self,
          .                   tcx: TyCtxt<'tcx>,
          .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
     17,244 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
          .                   let trait_generics = tcx.generics_of(def_id);
     28,740 ( 0.00%)          (
          .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
          .                       &self.substs[trait_generics.count()..],
          .                   )
     51,732 ( 0.00%)      }
          .           
          .               /// Extracts the underlying trait reference from this projection.
          .               /// For example, if this is a projection of `<T as Iterator>::Item`,
          .               /// then this function would return a `T: Iterator` trait reference.
          .               ///
          .               /// WARNING: This will drop the substs for generic associated types
          .               /// consider calling [Self::trait_ref_and_own_substs] to get those
          .               /// as well.
     60,597 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
      6,733 ( 0.00%)          let def_id = self.trait_def_id(tcx);
      6,733 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
     74,063 ( 0.00%)      }
          .           
     13,069 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
     39,207 ( 0.00%)          self.substs.type_at(0)
     26,138 ( 0.00%)      }
          .           }
          .           
          .           #[derive(Copy, Clone, Debug, TypeFoldable)]
          .           pub struct GenSig<'tcx> {
          .               pub resume_ty: Ty<'tcx>,
          .               pub yield_ty: Ty<'tcx>,
          .               pub return_ty: Ty<'tcx>,
          .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
          .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
          .           
          .           /// Signature of a function type, which we have arbitrarily
          .           /// decided to use to refer to the input/output types.
          .           ///
          .           /// - `inputs`: is the list of arguments and their modes.
          .           /// - `output`: is the return type.
          .           /// - `c_variadic`: indicates whether this is a C-variadic function.
  1,462,993 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    536,005 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
          .           pub struct FnSig<'tcx> {
     27,595 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
    557,356 ( 0.00%)      pub c_variadic: bool,
     89,925 ( 0.00%)      pub unsafety: hir::Unsafety,
    651,134 ( 0.00%)      pub abi: abi::Abi,
          .           }
          .           
          .           impl<'tcx> FnSig<'tcx> {
    749,312 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
  3,198,554 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
  1,498,624 ( 0.00%)      }
          .           
    453,366 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
  3,386,654 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
    906,732 ( 0.00%)      }
          .           
          .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
          .               // method.
          .               fn fake() -> FnSig<'tcx> {
          .                   FnSig {
          .                       inputs_and_output: List::empty(),
          .                       c_variadic: false,
          .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
          .               }
          .           }
          .           
          .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
          .           
          .           impl<'tcx> PolyFnSig<'tcx> {
          .               #[inline]
          .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
    249,988 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
          .               }
          .               #[inline]
          .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
    223,514 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
          .               }
          .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
          .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
     35,892 ( 0.00%)      }
          .               #[inline]
          .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
    217,456 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
          .               }
          .               pub fn c_variadic(&self) -> bool {
     71,784 ( 0.00%)          self.skip_binder().c_variadic
     35,892 ( 0.00%)      }
          .               pub fn unsafety(&self) -> hir::Unsafety {
     14,614 ( 0.00%)          self.skip_binder().unsafety
      7,307 ( 0.00%)      }
          .               pub fn abi(&self) -> abi::Abi {
    432,980 ( 0.00%)          self.skip_binder().abi
    108,245 ( 0.00%)      }
          .           }
          .           
          .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
          .           
        144 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
      2,546 ( 0.00%)  #[derive(HashStable)]
          .           pub struct ParamTy {
      4,040 ( 0.00%)      pub index: u32,
          .               pub name: Symbol,
          .           }
          .           
          .           impl<'tcx> ParamTy {
      2,178 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
          .                   ParamTy { index, name }
      1,089 ( 0.00%)      }
          .           
          .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
      1,664 ( 0.00%)          ParamTy::new(def.index, def.name)
        832 ( 0.00%)      }
          .           
          .               #[inline]
          .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
          .                   tcx.mk_ty_param(self.index, self.name)
          .               }
          .           }
          .           
          .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
         44 ( 0.00%)  #[derive(HashStable)]
          .           pub struct ParamConst {
        280 ( 0.00%)      pub index: u32,
        272 ( 0.00%)      pub name: Symbol,
          .           }
          .           
          .           impl ParamConst {
          .               pub fn new(index: u32, name: Symbol) -> ParamConst {
          .                   ParamConst { index, name }
          .               }
          .           
          .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
          .           /// the inference variable is supposed to satisfy the relation
          .           /// *for every value of the placeholder region*. To ensure that doesn't
          .           /// happen, you can use `leak_check`. This is more clearly explained
          .           /// by the [rustc dev guide].
          .           ///
          .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
          .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
          .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
 77,272,767 ( 0.11%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
     13,358 ( 0.00%)  pub enum RegionKind {
          .               /// Region bound in a type or fn declaration which will be
          .               /// substituted 'early' -- that is, at the same time when type
          .               /// parameters are substituted.
          .               ReEarlyBound(EarlyBoundRegion),
          .           
          .               /// Region bound in a function scope, which will be substituted when the
          .               /// function is called.
  3,535,534 ( 0.01%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
          .           
          .               /// When checking a function body, the types of all arguments and so forth
          .               /// that refer to bound region parameters are modified to refer to free
          .               /// region parameters.
          .               ReFree(FreeRegion),
          .           
          .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
          .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
          .               /// regions visible from `U`, but not less than regions not visible
          .               /// from `U`.
          .               ReEmpty(ty::UniverseIndex),
          .           
          .               /// Erased region, used by trait selection, in MIR and during codegen.
          .               ReErased,
          .           }
          .           
     56,744 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
          .           pub struct EarlyBoundRegion {
     40,669 ( 0.00%)      pub def_id: DefId,
     84,878 ( 0.00%)      pub index: u32,
    142,279 ( 0.00%)      pub name: Symbol,
          .           }
          .           
          .           /// A **`const`** **v**ariable **ID**.
          .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
          .           pub struct ConstVid<'tcx> {
      5,532 ( 0.00%)      pub index: u32,
      1,869 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
          .           }
          .           
          .           rustc_index::newtype_index! {
          .               /// A **region** (lifetime) **v**ariable **ID**.
          .               pub struct RegionVid {
          .                   DEBUG_FORMAT = custom,
          .               }
          .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
          .           rustc_index::newtype_index! {
          .               pub struct BoundVar { .. }
          .           }
          .           
          .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
          .           #[derive(HashStable)]
          .           pub struct BoundTy {
          .               pub var: BoundVar,
     64,078 ( 0.00%)      pub kind: BoundTyKind,
          .           }
          .           
  1,089,383 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
          .           #[derive(HashStable)]
          .           pub enum BoundTyKind {
          .               Anon,
          .               Param(Symbol),
          .           }
          .           
          .           impl From<BoundVar> for BoundTy {
          .               fn from(var: BoundVar) -> Self {
          .                   BoundTy { var, kind: BoundTyKind::Anon }
          .               }
          .           }
          .           
          .           /// A `ProjectionPredicate` for an `ExistentialTraitRef`.
          .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        345 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
          .           pub struct ExistentialProjection<'tcx> {
        124 ( 0.00%)      pub item_def_id: DefId,
        368 ( 0.00%)      pub substs: SubstsRef<'tcx>,
         92 ( 0.00%)      pub term: Term<'tcx>,
          .           }
          .           
          .           pub type PolyExistentialProjection<'tcx> = Binder<'tcx, ExistentialProjection<'tcx>>;
          .           
          .           impl<'tcx> ExistentialProjection<'tcx> {
          .               /// Extracts the underlying existential trait reference from this projection.
          .               /// For example, if this is a projection of `exists T. <T as Iterator>::Item == X`,
          .               /// then this function would return an `exists T. T: Iterator` existential trait
-- line 1551 ----------------------------------------
-- line 1585 ----------------------------------------
          .                       item_def_id: projection_predicate.projection_ty.item_def_id,
          .                       substs: tcx.intern_substs(&projection_predicate.projection_ty.substs[1..]),
          .                       term: projection_predicate.term,
          .                   }
          .               }
          .           }
          .           
          .           impl<'tcx> PolyExistentialProjection<'tcx> {
         15 ( 0.00%)      pub fn with_self_ty(
          .                   &self,
          .                   tcx: TyCtxt<'tcx>,
          .                   self_ty: Ty<'tcx>,
          .               ) -> ty::PolyProjectionPredicate<'tcx> {
         15 ( 0.00%)          self.map_bound(|p| p.with_self_ty(tcx, self_ty))
         18 ( 0.00%)      }
          .           
          .               pub fn item_def_id(&self) -> DefId {
          6 ( 0.00%)          self.skip_binder().item_def_id
          3 ( 0.00%)      }
          .           }
          .           
          .           /// Region utilities
          .           impl RegionKind {
          .               /// Is this region named by the user?
          .               pub fn has_name(&self) -> bool {
          .                   match *self {
          .                       RegionKind::ReEarlyBound(ebr) => ebr.has_name(),
-- line 1611 ----------------------------------------
-- line 1616 ----------------------------------------
          .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
          .                       RegionKind::ReEmpty(_) => false,
          .                       RegionKind::ReErased => false,
          .                   }
          .               }
          .           
          .               #[inline]
          .               pub fn is_late_bound(&self) -> bool {
     31,999 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
          .               }
          .           
          .               #[inline]
          .               pub fn is_placeholder(&self) -> bool {
         22 ( 0.00%)          matches!(*self, ty::RePlaceholder(..))
          .               }
          .           
          .               #[inline]
          .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
  1,857,174 ( 0.00%)          match *self {
          .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
          .                       _ => false,
          .                   }
          .               }
          .           
          .               pub fn type_flags(&self) -> TypeFlags {
          .                   let mut flags = TypeFlags::empty();
          .           
  1,335,826 ( 0.00%)          match *self {
          .                       ty::ReVar(..) => {
          .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
          .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
          .                           flags = flags | TypeFlags::HAS_RE_INFER;
          .                       }
          .                       ty::RePlaceholder(..) => {
          .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
          .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
          .                       ty::ReErased => {
          .                           flags = flags | TypeFlags::HAS_RE_ERASED;
          .                       }
          .                   }
          .           
          .                   debug!("type_flags({:?}) = {:?}", self, flags);
          .           
          .                   flags
     79,169 ( 0.00%)      }
          .           
          .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
          .               /// For example, consider the regions in this snippet of code:
          .               ///
          .               /// ```
          .               /// impl<'a> Foo {
          .               ///      ^^ -- early bound, declared on an impl
          .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
          .           
          .               #[inline(always)]
          .               pub fn flags(&self) -> TypeFlags {
          .                   self.flags
          .               }
          .           
          .               #[inline]
          .               pub fn is_unit(&self) -> bool {
     78,010 ( 0.00%)          match self.kind() {
      1,195 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
          .                       _ => false,
          .                   }
          .               }
          .           
          .               #[inline]
          .               pub fn is_never(&self) -> bool {
    598,904 ( 0.00%)          matches!(self.kind(), Never)
          .               }
          .           
          .               #[inline]
          .               pub fn is_primitive(&self) -> bool {
          .                   self.kind().is_primitive()
          .               }
          .           
          .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
          .           
          .               #[inline]
          .               pub fn is_ref(&self) -> bool {
          .                   matches!(self.kind(), Ref(..))
          .               }
          .           
          .               #[inline]
          .               pub fn is_ty_var(&self) -> bool {
    710,096 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
          .               }
          .           
          .               #[inline]
          .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
    816,944 ( 0.00%)          match self.kind() {
    107,029 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
          .                       _ => None,
          .                   }
          .               }
          .           
          .               #[inline]
          .               pub fn is_ty_infer(&self) -> bool {
        642 ( 0.00%)          matches!(self.kind(), Infer(_))
          .               }
          .           
          .               #[inline]
          .               pub fn is_phantom_data(&self) -> bool {
         27 ( 0.00%)          if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
          .               }
          .           
          .               #[inline]
          .               pub fn is_bool(&self) -> bool {
         24 ( 0.00%)          *self.kind() == Bool
          .               }
          .           
          .               /// Returns `true` if this type is a `str`.
          .               #[inline]
          .               pub fn is_str(&self) -> bool {
          .                   *self.kind() == Str
          .               }
          .           
          .               #[inline]
          .               pub fn is_param(&self, index: u32) -> bool {
        932 ( 0.00%)          match self.kind() {
          .                       ty::Param(ref data) => data.index == index,
          .                       _ => false,
          .                   }
          .               }
          .           
          .               #[inline]
          .               pub fn is_slice(&self) -> bool {
          .                   match self.kind() {
          .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
          .                       _ => false,
          .                   }
          .               }
          .           
          .               #[inline]
          .               pub fn is_array(&self) -> bool {
        730 ( 0.00%)          matches!(self.kind(), Array(..))
          .               }
          .           
          .               #[inline]
          .               pub fn is_simd(&self) -> bool {
          6 ( 0.00%)          match self.kind() {
          3 ( 0.00%)              Adt(def, _) => def.repr.simd(),
          .                       _ => false,
          .                   }
          .               }
          .           
      2,492 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
      4,984 ( 0.00%)          match self.kind() {
          .                       Array(ty, _) | Slice(ty) => ty,
          .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
          .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
          .                   }
      2,492 ( 0.00%)      }
          .           
          .               pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
          .                   match self.kind() {
          .                       Adt(def, substs) => {
          .                           assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
          .                           let variant = def.non_enum_variant();
          .                           let f0_ty = variant.fields[0].ty(tcx, substs);
          .           
-- line 1824 ----------------------------------------
-- line 1838 ----------------------------------------
          .                           }
          .                       }
          .                       _ => bug!("`simd_size_and_type` called on invalid type"),
          .                   }
          .               }
          .           
          .               #[inline]
          .               pub fn is_region_ptr(&self) -> bool {
         68 ( 0.00%)          matches!(self.kind(), Ref(..))
          .               }
          .           
          .               #[inline]
          .               pub fn is_mutable_ptr(&self) -> bool {
          3 ( 0.00%)          matches!(
          2 ( 0.00%)              self.kind(),
          .                       RawPtr(TypeAndMut { mutbl: hir::Mutability::Mut, .. })
          .                           | Ref(_, _, hir::Mutability::Mut)
          .                   )
          .               }
          .           
          .               /// Get the mutability of the reference or `None` when not a reference
          .               #[inline]
          .               pub fn ref_mutability(&self) -> Option<hir::Mutability> {
-- line 1860 ----------------------------------------
-- line 1861 ----------------------------------------
          .                   match self.kind() {
          .                       Ref(_, _, mutability) => Some(*mutability),
          .                       _ => None,
          .                   }
          .               }
          .           
          .               #[inline]
          .               pub fn is_unsafe_ptr(&self) -> bool {
     28,359 ( 0.00%)          matches!(self.kind(), RawPtr(_))
          .               }
          .           
          .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
          .               #[inline]
          .               pub fn is_any_ptr(&self) -> bool {
         66 ( 0.00%)          self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
          .               }
          .           
          .               #[inline]
          .               pub fn is_box(&self) -> bool {
    980,032 ( 0.00%)          match self.kind() {
    224,435 ( 0.00%)              Adt(def, _) => def.is_box(),
          .                       _ => false,
          .                   }
          .               }
          .           
          .               /// Panics if called on any type other than `Box<T>`.
      6,370 ( 0.00%)      pub fn boxed_ty(&self) -> Ty<'tcx> {
      6,370 ( 0.00%)          match self.kind() {
     15,925 ( 0.00%)              Adt(def, substs) if def.is_box() => substs.type_at(0),
          .                       _ => bug!("`boxed_ty` is called on non-box type {:?}", self),
          .                   }
      6,370 ( 0.00%)      }
          .           
          .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
          .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
          .               /// contents are abstract to rustc.)
          .               #[inline]
          .               pub fn is_scalar(&self) -> bool {
      1,045 ( 0.00%)          matches!(
      2,238 ( 0.00%)              self.kind(),
          .                       Bool | Char
          .                           | Int(_)
          .                           | Float(_)
          .                           | Uint(_)
          .                           | FnDef(..)
          .                           | FnPtr(_)
          .                           | RawPtr(_)
          .                           | Infer(IntVar(_) | FloatVar(_))
          .                   )
          .               }
          .           
          .               /// Returns `true` if this type is a floating point type.
          .               #[inline]
          .               pub fn is_floating_point(&self) -> bool {
      8,349 ( 0.00%)          matches!(self.kind(), Float(_) | Infer(FloatVar(_)))
          .               }
          .           
          .               #[inline]
          .               pub fn is_trait(&self) -> bool {
      2,288 ( 0.00%)          matches!(self.kind(), Dynamic(..))
          .               }
          .           
          .               #[inline]
          .               pub fn is_enum(&self) -> bool {
      2,960 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
          .               }
          .           
          .               #[inline]
          .               pub fn is_union(&self) -> bool {
    212,099 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
          .               }
          .           
          .               #[inline]
          .               pub fn is_closure(&self) -> bool {
      3,662 ( 0.00%)          matches!(self.kind(), Closure(..))
          .               }
          .           
          .               #[inline]
          .               pub fn is_generator(&self) -> bool {
     77,154 ( 0.00%)          matches!(self.kind(), Generator(..))
          .               }
          .           
          .               #[inline]
          .               pub fn is_integral(&self) -> bool {
    114,985 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
          .               }
          .           
          .               #[inline]
          .               pub fn is_fresh_ty(&self) -> bool {
          .                   matches!(self.kind(), Infer(FreshTy(_)))
          .               }
          .           
          .               #[inline]
          .               pub fn is_fresh(&self) -> bool {
     16,747 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
          .               }
          .           
          .               #[inline]
          .               pub fn is_char(&self) -> bool {
          .                   matches!(self.kind(), Char)
          .               }
          .           
          .               #[inline]
          .               pub fn is_numeric(&self) -> bool {
          .                   self.is_integral() || self.is_floating_point()
          .               }
          .           
          .               #[inline]
          .               pub fn is_signed(&self) -> bool {
      4,288 ( 0.00%)          matches!(self.kind(), Int(_))
          .               }
          .           
          .               #[inline]
          .               pub fn is_ptr_sized_integral(&self) -> bool {
      1,998 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
          .               }
          .           
          .               #[inline]
          .               pub fn has_concrete_skeleton(&self) -> bool {
          .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
          .               }
          .           
          .               /// Returns the type and mutability of `*ty`.
          .               ///
          .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
          .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
     69,407 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
    309,518 ( 0.00%)          match self.kind() {
      4,678 ( 0.00%)              Adt(def, _) if def.is_box() => {
      3,853 ( 0.00%)                  Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
          .                       }
    183,002 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
      4,762 ( 0.00%)              RawPtr(mt) if explicit => Some(*mt),
          .                       _ => None,
          .                   }
    138,814 ( 0.00%)      }
          .           
          .               /// Returns the type of `ty[i]`.
          .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
      4,666 ( 0.00%)          match self.kind() {
          .                       Array(ty, _) | Slice(ty) => Some(ty),
          .                       _ => None,
          .                   }
        391 ( 0.00%)      }
          .           
    910,824 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
    455,412 ( 0.00%)          match self.kind() {
    339,921 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
      2,730 ( 0.00%)              FnPtr(f) => *f,
          .                       Error(_) => {
          .                           // ignore errors (#54954)
          .                           ty::Binder::dummy(FnSig::fake())
          .                       }
          .                       Closure(..) => bug!(
          .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
          .                       ),
          .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
          .                   }
  1,024,677 ( 0.00%)      }
          .           
          .               #[inline]
          .               pub fn is_fn(&self) -> bool {
     21,669 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
          .               }
          .           
          .               #[inline]
          .               pub fn is_fn_ptr(&self) -> bool {
          .                   matches!(self.kind(), FnPtr(_))
          .               }
          .           
          .               #[inline]
          .               pub fn is_impl_trait(&self) -> bool {
          .                   matches!(self.kind(), Opaque(..))
          .               }
          .           
          .               #[inline]
          .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
     58,081 ( 0.00%)          match self.kind() {
          .                       Adt(adt, _) => Some(adt),
          .                       _ => None,
          .                   }
          .               }
          .           
          .               /// Iterates over tuple fields.
          .               /// Panics when called on anything but a tuple.
      2,270 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
     59,106 ( 0.00%)          match self.kind() {
     32,828 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
          .                       _ => bug!("tuple_fields called on non-tuple"),
          .                   }
      4,540 ( 0.00%)      }
          .           
          .               /// Get the `i`-th element of a tuple.
          .               /// Panics when called on anything but a tuple.
        283 ( 0.00%)      pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
        566 ( 0.00%)          match self.kind() {
        566 ( 0.00%)              Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
          .                       _ => bug!("tuple_fields called on non-tuple"),
          .                   }
        566 ( 0.00%)      }
          .           
          .               /// If the type contains variants, returns the valid range of variant indices.
          .               //
          .               // FIXME: This requires the optimized MIR in the case of generators.
          .               #[inline]
          .               pub fn variant_range(&self, tcx: TyCtxt<'tcx>) -> Option<Range<VariantIdx>> {
          .                   match self.kind() {
          .                       TyKind::Adt(adt, _) => Some(adt.variant_range()),
-- line 2068 ----------------------------------------
-- line 2073 ----------------------------------------
          .                   }
          .               }
          .           
          .               /// If the type contains variants, returns the variant for `variant_index`.
          .               /// Panics if `variant_index` is out of range.
          .               //
          .               // FIXME: This requires the optimized MIR in the case of generators.
          .               #[inline]
     52,790 ( 0.00%)      pub fn discriminant_for_variant(
          .                   &self,
          .                   tcx: TyCtxt<'tcx>,
          .                   variant_index: VariantIdx,
          .               ) -> Option<Discr<'tcx>> {
     35,556 ( 0.00%)          match self.kind() {
     12,490 ( 0.00%)              TyKind::Adt(adt, _) if adt.variants.is_empty() => {
          .                           // This can actually happen during CTFE, see
          .                           // https://github.com/rust-lang/rust/issues/89765.
          .                           None
          .                       }
      6,245 ( 0.00%)              TyKind::Adt(adt, _) if adt.is_enum() => {
          .                           Some(adt.discriminant_for_variant(tcx, variant_index))
          .                       }
          .                       TyKind::Generator(def_id, substs, _) => {
          .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
          .                       }
          .                       _ => None,
          .                   }
     42,232 ( 0.00%)      }
          .           
          .               /// Returns the type of the discriminant of this type.
     44,960 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
     22,480 ( 0.00%)          match self.kind() {
     35,968 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
          .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
          .           
          .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
          .                           let assoc_items = tcx.associated_item_def_ids(
          .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
          .                           );
          .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
          .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
          .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
          .           
          .                       ty::Bound(..)
          .                       | ty::Placeholder(_)
          .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
          .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
          .                       }
          .                   }
     35,968 ( 0.00%)      }
          .           
          .               /// Returns the type of metadata for (potentially fat) pointers to this type.
        144 ( 0.00%)      pub fn ptr_metadata_ty(
          .                   &'tcx self,
          .                   tcx: TyCtxt<'tcx>,
          .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
          .               ) -> Ty<'tcx> {
        144 ( 0.00%)          let tail = tcx.struct_tail_with_normalize(self, normalize);
         80 ( 0.00%)          match tail.kind() {
          .                       // Sized types
          .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
          .                       | ty::Uint(_)
          .                       | ty::Int(_)
          .                       | ty::Bool
          .                       | ty::Float(_)
          .                       | ty::FnDef(..)
          .                       | ty::FnPtr(_)
-- line 2160 ----------------------------------------
-- line 2170 ----------------------------------------
          .                       | ty::Foreign(..)
          .                       // If returned by `struct_tail_without_normalization` this is a unit struct
          .                       // without any fields, or not a struct, and therefore is Sized.
          .                       | ty::Adt(..)
          .                       // If returned by `struct_tail_without_normalization` this is the empty tuple,
          .                       // a.k.a. unit type, which is Sized
          .                       | ty::Tuple(..) => tcx.types.unit,
          .           
         32 ( 0.00%)              ty::Str | ty::Slice(_) => tcx.types.usize,
          .                       ty::Dynamic(..) => {
          .                           let dyn_metadata = tcx.lang_items().dyn_metadata().unwrap();
          .                           tcx.type_of(dyn_metadata).subst(tcx, &[tail.into()])
          .                       },
          .           
          .                       ty::Projection(_)
          .                       | ty::Param(_)
          .                       | ty::Opaque(..)
          .                       | ty::Infer(ty::TyVar(_))
          .                       | ty::Bound(..)
          .                       | ty::Placeholder(..)
          .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
          .                           bug!("`ptr_metadata_ty` applied to unexpected type: {:?}", tail)
          .                       }
          .                   }
        128 ( 0.00%)      }
          .           
          .               /// When we create a closure, we record its kind (i.e., what trait
          .               /// it implements) into its `ClosureSubsts` using a type
          .               /// parameter. This is kind of a phantom type, except that the
          .               /// most convenient thing for us to are the integral types. This
          .               /// function converts such a special type into the closure
          .               /// kind. To go the other way, use
          .               /// `tcx.closure_kind_ty(closure_kind)`.
          .               ///
          .               /// Note that during type checking, we use an inference variable
          .               /// to represent the closure kind, because it has not yet been
          .               /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)
          .               /// is complete, that type variable will be unified.
      7,656 ( 0.00%)      pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {
     15,312 ( 0.00%)          match self.kind() {
     15,312 ( 0.00%)              Int(int_ty) => match int_ty {
          .                           ty::IntTy::I8 => Some(ty::ClosureKind::Fn),
          .                           ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),
          .                           ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),
          .                           _ => bug!("cannot convert type `{:?}` to a closure kind", self),
          .                       },
          .           
          .                       // "Bound" types appear in canonical queries when the
          .                       // closure type is not yet known
          .                       Bound(..) | Infer(_) => None,
          .           
          .                       Error(_) => Some(ty::ClosureKind::Fn),
          .           
          .                       _ => bug!("cannot convert type `{:?}` to a closure kind", self),
          .                   }
      7,656 ( 0.00%)      }
          .           
          .               /// Fast path helper for testing if a type is `Sized`.
          .               ///
          .               /// Returning true means the type is known to be sized. Returning
          .               /// `false` means nothing -- could be sized, might not be.
          .               ///
          .               /// Note that we could never rely on the fact that a type such as `[_]` is
          .               /// trivially `!Sized` because we could be in a type environment with a
          .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
          .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
          .               /// this method doesn't return `Option<bool>`.
  2,023,596 ( 0.00%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
  1,349,064 ( 0.00%)          match self.kind() {
          .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
          .                       | ty::Uint(_)
          .                       | ty::Int(_)
          .                       | ty::Bool
          .                       | ty::Float(_)
          .                       | ty::FnDef(..)
          .                       | ty::FnPtr(_)
          .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
          .                       | ty::GeneratorWitness(..)
          .                       | ty::Array(..)
          .                       | ty::Closure(..)
          .                       | ty::Never
          .                       | ty::Error(_) => true,
          .           
          .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
          .           
     79,090 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
          .           
    242,595 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
          .           
          .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
          .           
          .                       ty::Infer(ty::TyVar(_)) => false,
          .           
          .                       ty::Bound(..)
          .                       | ty::Placeholder(..)
          .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
          .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
          .                       }
          .                   }
  2,023,596 ( 0.00%)      }
          .           }
          .           
          .           /// Extra information about why we ended up with a particular variance.
          .           /// This is only used to add more information to error messages, and
          .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
          .           /// may lead to confusing notes in error messages, it will never cause
          .           /// a miscompilation or unsoundness.
          .           ///
          .           /// When in doubt, use `VarianceDiagInfo::default()`
        402 ( 0.00%)  #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]
          .           pub enum VarianceDiagInfo<'tcx> {
          .               /// No additional information - this is the default.
          .               /// We will not add any additional information to error messages.
          .               #[default]
          .               None,
          .               /// We switched our variance because a generic argument occurs inside
          .               /// the invariant generic argument of another type.
          .               Invariant {
-- line 2290 ----------------------------------------
-- line 2295 ----------------------------------------
          .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
          .                   param_index: u32,
          .               },
          .           }
          .           
          .           impl<'tcx> VarianceDiagInfo<'tcx> {
          .               /// Mirrors `Variance::xform` - used to 'combine' the existing
          .               /// and new `VarianceDiagInfo`s when our variance changes.
  1,058,244 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
          .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
  1,587,366 ( 0.00%)          match self {
          .                       VarianceDiagInfo::None => other,
          .                       VarianceDiagInfo::Invariant { .. } => self,
          .                   }
    529,122 ( 0.00%)      }
          .           }

335,917,850 ( 0.49%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir                   

-- line 5 ----------------------------------------
          .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
          .           unsafe impl GlobalAlloc for System {
          .               #[inline]
          .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
          .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
          .                   // So only rely on MIN_ALIGN if size >= align.
          .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
          .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
114,750,258 ( 0.17%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
 86,062,692 ( 0.13%)              libc::malloc(layout.size()) as *mut u8
          .                   } else {
          .                       #[cfg(target_os = "macos")]
          .                       {
          .                           if layout.align() > (1 << 31) {
          .                               return ptr::null_mut();
          .                           }
          .                       }
          .                       aligned_malloc(&layout)
          .                   }
          .               }
          .           
          .               #[inline]
          .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
          .                   // See the comment above in `alloc` for why this check looks the way it does.
 12,183,544 ( 0.02%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
 18,275,316 ( 0.03%)              libc::calloc(layout.size(), 1) as *mut u8
          .                   } else {
          .                       let ptr = self.alloc(layout);
          .                       if !ptr.is_null() {
          .                           ptr::write_bytes(ptr, 0, layout.size());
          .                       }
          .                       ptr
          .                   }
          .               }
          .           
          .               #[inline]
          .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
 31,733,439 ( 0.05%)          libc::free(ptr as *mut libc::c_void)
          .               }
          .           
          .               #[inline]
          .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
  9,557,088 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
 19,114,176 ( 0.03%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
          .                   } else {
          .                       realloc_fallback(self, ptr, layout, new_size)
          .                   }
          .               }
          .           }
          .           
          .           cfg_if::cfg_if! {
          .               if #[cfg(any(
-- line 56 ----------------------------------------
-- line 84 ----------------------------------------
          .               } else if #[cfg(target_os = "wasi")] {
          .                   #[inline]
          .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
          .                       libc::aligned_alloc(layout.align(), layout.size()) as *mut u8
          .                   }
          .               } else {
          .                   #[inline]
          .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
          1 ( 0.00%)              let mut out = ptr::null_mut();
          .                       // posix_memalign requires that the alignment be a multiple of `sizeof(void*)`.
          .                       // Since these are all powers of 2, we can just use max.
          .                       let align = layout.align().max(crate::mem::size_of::<usize>());
          2 ( 0.00%)              let ret = libc::posix_memalign(&mut out, align, layout.size());
          2 ( 0.00%)              if ret != 0 { ptr::null_mut() } else { out as *mut u8 }
          .                   }
          .               }
          .           }

          1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs
--------------------------------------------------------------------------------
Ir                  

-- line 28 ----------------------------------------
         .               PushRegionObligation,
         .           }
         .           
         .           macro_rules! impl_from {
         .               ($($ctor: ident ($ty: ty),)*) => {
         .                   $(
         .                   impl<'tcx> From<$ty> for UndoLog<'tcx> {
         .                       fn from(x: $ty) -> Self {
     5,639 ( 0.00%)                  UndoLog::$ctor(x.into())
         .                       }
         .                   }
         .                   )*
         .               }
         .           }
         .           
         .           // Upcast from a single kind of "undoable action" to the general enum
         .           impl_from! {
-- line 44 ----------------------------------------
-- line 57 ----------------------------------------
         .               ConstUnificationTable(sv::UndoLog<ut::Delegate<ty::ConstVid<'tcx>>>),
         .           
         .               RegionUnificationTable(sv::UndoLog<ut::Delegate<RegionVidKey<'tcx>>>),
         .               ProjectionCache(traits::UndoLog<'tcx>),
         .           }
         .           
         .           /// The Rollback trait defines how to rollback a particular action.
         .           impl<'tcx> Rollback<UndoLog<'tcx>> for InferCtxtInner<'tcx> {
 6,785,088 ( 0.01%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
11,308,480 ( 0.02%)          match undo {
18,904,600 ( 0.03%)              UndoLog::TypeVariables(undo) => self.type_variable_storage.reverse(undo),
     1,014 ( 0.00%)              UndoLog::ConstUnificationTable(undo) => self.const_unification_storage.reverse(undo),
       448 ( 0.00%)              UndoLog::IntUnificationTable(undo) => self.int_unification_storage.reverse(undo),
         .                       UndoLog::FloatUnificationTable(undo) => self.float_unification_storage.reverse(undo),
         .                       UndoLog::RegionConstraintCollector(undo) => {
 1,600,368 ( 0.00%)                  self.region_constraint_storage.as_mut().unwrap().reverse(undo)
         .                       }
         .                       UndoLog::RegionUnificationTable(undo) => {
   280,520 ( 0.00%)                  self.region_constraint_storage.as_mut().unwrap().unification_table.reverse(undo)
         .                       }
         .                       UndoLog::ProjectionCache(undo) => self.projection_cache.reverse(undo),
         .                       UndoLog::PushRegionObligation => {
         .                           self.region_obligations.pop();
         .                       }
         .                   }
 9,046,784 ( 0.01%)      }
         .           }
         .           
         .           /// The combined undo log for all the various unification tables. For each change to the storage
         .           /// for any kind of inference variable, we record an UndoLog entry in the vector here.
         .           pub(crate) struct InferCtxtUndoLogs<'tcx> {
         .               logs: Vec<UndoLog<'tcx>>,
         .               num_open_snapshots: usize,
         .           }
         .           
         .           impl Default for InferCtxtUndoLogs<'_> {
         .               fn default() -> Self {
 1,390,924 ( 0.00%)          Self { logs: Default::default(), num_open_snapshots: Default::default() }
         .               }
         .           }
         .           
         .           /// The UndoLogs trait defines how we undo a particular kind of action (of type T). We can undo any
         .           /// action that is convertable into an UndoLog (per the From impls above).
         .           impl<'tcx, T> UndoLogs<T> for InferCtxtUndoLogs<'tcx>
         .           where
         .               UndoLog<'tcx>: From<T>,
-- line 102 ----------------------------------------
-- line 103 ----------------------------------------
         .           {
         .               #[inline]
         .               fn num_open_snapshots(&self) -> usize {
         .                   self.num_open_snapshots
         .               }
         .           
         .               #[inline]
         .               fn push(&mut self, undo: T) {
 1,481,708 ( 0.00%)          if self.in_snapshot() {
    45,112 ( 0.00%)              self.logs.push(undo.into())
         .                   }
         .               }
         .           
         .               fn clear(&mut self) {
         .                   self.logs.clear();
         .                   self.num_open_snapshots = 0;
         .               }
         .           
-- line 120 ----------------------------------------
-- line 125 ----------------------------------------
         .               {
         .                   if self.in_snapshot() {
         .                       self.logs.extend(undos.into_iter().map(UndoLog::from))
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> InferCtxtInner<'tcx> {
12,500,052 ( 0.02%)      pub fn rollback_to(&mut self, snapshot: Snapshot<'tcx>) {
         .                   debug!("rollback_to({})", snapshot.undo_len);
         .                   self.undo_log.assert_open_snapshot(&snapshot);
         .           
10,951,772 ( 0.02%)          while self.undo_log.logs.len() > snapshot.undo_len {
         .                       let undo = self.undo_log.logs.pop().unwrap();
27,140,352 ( 0.04%)              self.reverse(undo);
         .                   }
         .           
 4,656,389 ( 0.01%)          if self.undo_log.num_open_snapshots == 1 {
         .                       // The root snapshot. It's safe to clear the undo log because
         .                       // there's no snapshot further out that we might need to roll back
         .                       // to.
 1,074,522 ( 0.00%)              assert!(snapshot.undo_len == 0);
         .                       self.undo_log.logs.clear();
         .                   }
         .           
 6,787,287 ( 0.01%)          self.undo_log.num_open_snapshots -= 1;
14,583,394 ( 0.02%)      }
         .           
         .               pub fn commit(&mut self, snapshot: Snapshot<'tcx>) {
         .                   debug!("commit({})", snapshot.undo_len);
         .           
 6,726,924 ( 0.01%)          if self.undo_log.num_open_snapshots == 1 {
         .                       // The root snapshot. It's safe to clear the undo log because
         .                       // there's no snapshot further out that we might need to roll back
         .                       // to.
 1,835,064 ( 0.00%)              assert!(snapshot.undo_len == 0);
         .                       self.undo_log.logs.clear();
         .                   }
         .           
 7,644,456 ( 0.01%)          self.undo_log.num_open_snapshots -= 1;
         .               }
         .           }
         .           
         .           impl<'tcx> InferCtxtUndoLogs<'tcx> {
         .               pub fn start_snapshot(&mut self) -> Snapshot<'tcx> {
17,302,600 ( 0.03%)          self.num_open_snapshots += 1;
         .                   Snapshot { undo_len: self.logs.len(), _marker: PhantomData }
         .               }
         .           
         .               pub(crate) fn region_constraints_in_snapshot(
         .                   &self,
         .                   s: &Snapshot<'tcx>,
         .               ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {
   148,326 ( 0.00%)          self.logs[s.undo_len..].iter().filter_map(|log| match log {
         .                       UndoLog::RegionConstraintCollector(log) => Some(log),
         .                       _ => None,
         .                   })
         .               }
         .           
         .               pub(crate) fn region_constraints(
         .                   &self,
         .               ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {
     5,450 ( 0.00%)          self.logs.iter().filter_map(|log| match log {
         .                       UndoLog::RegionConstraintCollector(log) => Some(log),
         .                       _ => None,
         .                   })
         .               }
         .           
         .               fn assert_open_snapshot(&self, snapshot: &Snapshot<'tcx>) {
         .                   // Failures here may indicate a failure to follow a stack discipline.
 6,250,026 ( 0.01%)          assert!(self.logs.len() >= snapshot.undo_len);
 6,250,026 ( 0.01%)          assert!(self.num_open_snapshots > 0);
         .               }
         .           }
         .           
         .           impl<'tcx> std::ops::Index<usize> for InferCtxtUndoLogs<'tcx> {
         .               type Output = UndoLog<'tcx>;
         .           
         .               fn index(&self, key: usize) -> &Self::Output {
         .                   &self.logs[key]
-- line 204 ----------------------------------------

 6,408,158 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                     

-- line 111 ----------------------------------------
            .           const EMPTY: u8 = 0b1111_1111;
            .           
            .           /// Control byte value for a deleted bucket.
            .           const DELETED: u8 = 0b1000_0000;
            .           
            .           /// Checks whether a control byte represents a full bucket (top bit is clear).
            .           #[inline]
            .           fn is_full(ctrl: u8) -> bool {
   40,122,146 ( 0.06%)      ctrl & 0x80 == 0
            .           }
            .           
            .           /// Checks whether a control byte represents a special value (top bit is set).
            .           #[inline]
            .           fn is_special(ctrl: u8) -> bool {
            .               ctrl & 0x80 != 0
            .           }
            .           
            .           /// Checks whether a special control value is EMPTY (just check 1 bit).
            .           #[inline]
            .           fn special_is_empty(ctrl: u8) -> bool {
            .               debug_assert!(is_special(ctrl));
    3,414,298 ( 0.00%)      ctrl & 0x01 != 0
            .           }
            .           
            .           /// Primary hash function, used to select the initial bucket to probe from.
            .           #[inline]
            .           #[allow(clippy::cast_possible_truncation)]
            .           fn h1(hash: u64) -> usize {
            .               // On 32-bit platforms we simply ignore the higher hash bits.
            .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
            .           /// Secondary hash function, saved in the low 7 bits of the control byte.
            .           #[inline]
            .           #[allow(clippy::cast_possible_truncation)]
            .           fn h2(hash: u64) -> u8 {
            .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
            .               // value, some hash functions (such as FxHash) produce a usize result
            .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
            .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
1,016,754,398 ( 1.49%)      let top7 = hash >> (hash_len * 8 - 7);
            .               (top7 & 0x7f) as u8 // truncation
            .           }
            .           
            .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
            .           /// table size is a power of two) to visit every group of elements exactly once.
            .           ///
            .           /// A triangular probe has us jump by 1 more group every time. So first we
            .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
            .               #[inline]
            .               fn move_next(&mut self, bucket_mask: usize) {
            .                   // We should have found an empty bucket by now and ended the probe.
            .                   debug_assert!(
            .                       self.stride <= bucket_mask,
            .                       "Went past end of probe sequence"
            .                   );
            .           
    4,243,514 ( 0.01%)          self.stride += Group::WIDTH;
    4,243,514 ( 0.01%)          self.pos += self.stride;
    3,598,535 ( 0.01%)          self.pos &= bucket_mask;
            .               }
            .           }
            .           
            .           /// Returns the number of buckets needed to hold the given number of items,
            .           /// taking the maximum load factor into account.
            .           ///
            .           /// Returns `None` if an overflow occurs.
            .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
            .           #[cfg_attr(target_os = "emscripten", inline(never))]
            .           #[cfg_attr(not(target_os = "emscripten"), inline)]
            .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
            .               debug_assert_ne!(cap, 0);
            .           
            .               // For small tables we require at least 1 empty bucket so that lookups are
            .               // guaranteed to terminate if an element doesn't exist in the table.
    5,371,194 ( 0.01%)      if cap < 8 {
            .                   // We don't bother with a table size of 2 buckets since that can only
            .                   // hold a single element. Instead we skip directly to a 4 bucket table
            .                   // which can hold 3 elements.
   11,785,470 ( 0.02%)          return Some(if cap < 4 { 4 } else { 8 });
            .               }
            .           
            .               // Otherwise require 1/8 buckets to be empty (87.5% load)
            .               //
            .               // Be careful when modifying this, calculate_layout relies on the
            .               // overflow check here.
    1,971,018 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
            .           
            .               // Any overflows will have been caught by the checked_mul. Also, any
            .               // rounding errors from the division above will be cleaned up by
            .               // next_power_of_two (which can't overflow because of the previous division).
            .               Some(adjusted_cap.next_power_of_two())
            .           }
            .           
            .           /// Returns the maximum effective capacity for the given bucket mask, taking
            .           /// the maximum load factor into account.
            .           #[inline]
            .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
   13,473,091 ( 0.02%)      if bucket_mask < 8 {
            .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
            .                   // Keep in mind that the bucket mask is one less than the bucket count.
            .                   bucket_mask
            .               } else {
            .                   // For larger tables we reserve 12.5% of the slots as empty.
    1,518,904 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
            .               }
            .           }
            .           
            .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
            .           /// while keeping the rest of `calculate_layout_for` independent of `T`
            .           #[derive(Copy, Clone)]
            .           struct TableLayout {
            .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
            .           
            .               #[inline]
            .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
            .                   debug_assert!(buckets.is_power_of_two());
            .           
            .                   let TableLayout { size, ctrl_align } = self;
            .                   // Manual layout calculation since Layout methods are not yet stable.
            .                   let ctrl_offset =
   10,997,079 ( 0.02%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
   14,762,991 ( 0.02%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
            .           
            .                   Some((
            .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
            .                       ctrl_offset,
            .                   ))
            .               }
            .           }
            .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
            .                   }
            .               }
            .               #[cfg_attr(feature = "inline-more", inline)]
            .               pub unsafe fn drop(&self) {
            .                   self.as_ptr().drop_in_place();
            .               }
            .               #[inline]
            .               pub unsafe fn read(&self) -> T {
        3,278 ( 0.00%)          self.as_ptr().read()
            .               }
            .               #[inline]
            .               pub unsafe fn write(&self, val: T) {
            .                   self.as_ptr().write(val);
            .               }
            .               #[inline]
            .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
            .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 392 ----------------------------------------
            .           
            .           impl<T> RawTable<T, Global> {
            .               /// Creates a new empty hash table without allocating any memory.
            .               ///
            .               /// In effect this returns a table with exactly 1 bucket. However we can
            .               /// leave the data pointer dangling since that bucket is never written to
            .               /// due to our load factor forcing us to always have at least 1 free bucket.
            .               #[inline]
           54 ( 0.00%)      pub const fn new() -> Self {
          144 ( 0.00%)          Self {
           36 ( 0.00%)              table: RawTableInner::new_in(Global),
            .                       marker: PhantomData,
            .                   }
           36 ( 0.00%)      }
            .           
            .               /// Attempts to allocate a new hash table with at least enough capacity
            .               /// for inserting the given number of elements without reallocating.
            .               #[cfg(feature = "raw")]
            .               pub fn try_with_capacity(capacity: usize) -> Result<Self, TryReserveError> {
            .                   Self::try_with_capacity_in(capacity, Global)
            .               }
            .           
-- line 413 ----------------------------------------
-- line 421 ----------------------------------------
            .           impl<T, A: Allocator + Clone> RawTable<T, A> {
            .               /// Creates a new empty hash table without allocating any memory, using the
            .               /// given allocator.
            .               ///
            .               /// In effect this returns a table with exactly 1 bucket. However we can
            .               /// leave the data pointer dangling since that bucket is never written to
            .               /// due to our load factor forcing us to always have at least 1 free bucket.
            .               #[inline]
           54 ( 0.00%)      pub fn new_in(alloc: A) -> Self {
       17,601 ( 0.00%)          Self {
           36 ( 0.00%)              table: RawTableInner::new_in(alloc),
            .                       marker: PhantomData,
            .                   }
           36 ( 0.00%)      }
            .           
            .               /// Allocates a new hash table with the given number of buckets.
            .               ///
            .               /// The control bytes are left uninitialized.
            .               #[cfg_attr(feature = "inline-more", inline)]
            .               unsafe fn new_uninitialized(
            .                   alloc: A,
            .                   buckets: usize,
            .                   fallibility: Fallibility,
            .               ) -> Result<Self, TryReserveError> {
            .                   debug_assert!(buckets.is_power_of_two());
            .           
            .                   Ok(Self {
        1,245 ( 0.00%)              table: RawTableInner::new_uninitialized(
            .                           alloc,
            .                           TableLayout::new::<T>(),
            .                           buckets,
            .                           fallibility,
            .                       )?,
            .                       marker: PhantomData,
            .                   })
            .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
            .               /// Attempts to allocate a new hash table with at least enough capacity
            .               /// for inserting the given number of elements without reallocating.
            .               fn fallible_with_capacity(
            .                   alloc: A,
            .                   capacity: usize,
            .                   fallibility: Fallibility,
            .               ) -> Result<Self, TryReserveError> {
            .                   Ok(Self {
      267,133 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
            .                           alloc,
            .                           TableLayout::new::<T>(),
            .                           capacity,
            .                           fallibility,
            .                       )?,
            .                       marker: PhantomData,
            .                   })
            .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
            .                   debug_assert_ne!(self.table.bucket_mask, 0);
            .                   debug_assert!(index < self.buckets());
            .                   Bucket::from_base_index(self.data_end(), index)
            .               }
            .           
            .               /// Erases an element from the table without dropping it.
            .               #[cfg_attr(feature = "inline-more", inline)]
            .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
      863,694 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
      863,694 ( 0.00%)          let index = self.bucket_index(item);
            .                   self.table.erase(index);
    1,727,388 ( 0.00%)      }
            .           
            .               /// Erases an element from the table, dropping it in place.
            .               #[cfg_attr(feature = "inline-more", inline)]
            .               #[allow(clippy::needless_pass_by_value)]
            .               #[allow(deprecated)]
            .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
            .                   // Erase the element from the table first since drop might panic.
      327,012 ( 0.00%)          self.erase_no_drop(&item);
            .                   item.drop();
            .               }
            .           
            .               /// Finds and erases an element from the table, dropping it in place.
            .               /// Returns true if an element was found.
            .               #[cfg(feature = "raw")]
            .               #[cfg_attr(feature = "inline-more", inline)]
            .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
            .                   }
            .               }
            .           
            .               /// Removes an element from the table, returning it.
            .               #[cfg_attr(feature = "inline-more", inline)]
            .               #[allow(clippy::needless_pass_by_value)]
            .               #[allow(deprecated)]
            .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    1,400,376 ( 0.00%)          self.erase_no_drop(&item);
          628 ( 0.00%)          item.read()
            .               }
            .           
            .               /// Finds and removes an element from the table, returning it.
            .               #[cfg_attr(feature = "inline-more", inline)]
   18,368,049 ( 0.03%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
            .                   // Avoid `Option::map` because it bloats LLVM IR.
       78,200 ( 0.00%)          match self.find(hash, eq) {
      134,961 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
    3,652,138 ( 0.01%)              None => None,
            .                   }
   24,895,804 ( 0.04%)      }
            .           
            .               /// Marks all table buckets as empty without dropping their contents.
            .               #[cfg_attr(feature = "inline-more", inline)]
            .               pub fn clear_no_drop(&mut self) {
            .                   self.table.clear_no_drop();
            .               }
            .           
            .               /// Removes all elements from the table without freeing the backing memory.
            .               #[cfg_attr(feature = "inline-more", inline)]
            .               pub fn clear(&mut self) {
            .                   // Ensure that the table is reset even if one of the drops panic
            .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
            .                   unsafe {
            1 ( 0.00%)              self_.drop_elements();
            .                   }
            .               }
            .           
            7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
      542,302 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
            .                       for item in self.iter() {
            .                           item.drop();
            .                       }
            .                   }
            8 ( 0.00%)      }
            .           
            .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
            .               #[cfg_attr(feature = "inline-more", inline)]
            .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
            .                   // Calculate the minimal number of elements that we need to reserve
            .                   // space for.
            .                   let min_size = usize::max(self.table.items, min_size);
            .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 641 ----------------------------------------
            .                           }
            .                       }
            .                   }
            .               }
            .           
            .               /// Ensures that at least `additional` items can be inserted into the table
            .               /// without reallocation.
            .               #[cfg_attr(feature = "inline-more", inline)]
          126 ( 0.00%)      pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
   10,524,167 ( 0.02%)          if additional > self.table.growth_left {
            .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
    8,871,558 ( 0.01%)              if self
            .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
            .                           .is_err()
            .                       {
            .                           unsafe { hint::unreachable_unchecked() }
            .                       }
            .                   }
           90 ( 0.00%)      }
            .           
            .               /// Tries to ensure that at least `additional` items can be inserted into
            .               /// the table without reallocation.
            .               #[cfg_attr(feature = "inline-more", inline)]
            .               pub fn try_reserve(
            .                   &mut self,
            .                   additional: usize,
            .                   hasher: impl Fn(&T) -> u64,
-- line 667 ----------------------------------------
-- line 671 ----------------------------------------
            .                   } else {
            .                       Ok(())
            .                   }
            .               }
            .           
            .               /// Out-of-line slow path for `reserve` and `try_reserve`.
            .               #[cold]
            .               #[inline(never)]
   21,723,321 ( 0.03%)      fn reserve_rehash(
            .                   &mut self,
            .                   additional: usize,
            .                   hasher: impl Fn(&T) -> u64,
            .                   fallibility: Fallibility,
            .               ) -> Result<(), TryReserveError> {
            .                   unsafe {
            .                       self.table.reserve_rehash_inner(
            .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
            .                           TableLayout::new::<T>(),
            .                           if mem::needs_drop::<T>() {
            .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
            .                           } else {
            .                               None
            .                           },
            .                       )
            .                   }
   15,104,080 ( 0.02%)      }
            .           
            .               /// Allocates a new table of a different size and moves the contents of the
            .               /// current table into it.
            .               fn resize(
            .                   &mut self,
            .                   capacity: usize,
            .                   hasher: impl Fn(&T) -> u64,
            .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
            .                       )
            .                   }
            .               }
            .           
            .               /// Inserts a new element into the table, and returns its raw bucket.
            .               ///
            .               /// This does not check if the given element already exists in the table.
            .               #[cfg_attr(feature = "inline-more", inline)]
   61,506,008 ( 0.09%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
            .                   unsafe {
            .                       let mut index = self.table.find_insert_slot(hash);
            .           
            .                       // We can avoid growing the table once we have reached our load
            .                       // factor if we are replacing a tombstone. This works since the
            .                       // number of EMPTY slots does not change in this case.
      345,313 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
   40,245,692 ( 0.06%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
            .                           self.reserve(1, hasher);
            .                           index = self.table.find_insert_slot(hash);
            .                       }
            .           
            .                       self.table.record_item_insert_at(index, old_ctrl, hash);
            .           
            .                       let bucket = self.bucket(index);
            2 ( 0.00%)              bucket.write(value);
            .                       bucket
            .                   }
   45,114,247 ( 0.07%)      }
            .           
            .               /// Attempts to insert a new element without growing the table and return its raw bucket.
            .               ///
            .               /// Returns an `Err` containing the given element if inserting it would require growing the
            .               /// table.
            .               ///
            .               /// This does not check if the given element already exists in the table.
            .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
            .                       }
            .                   }
            .               }
            .           
            .               /// Inserts a new element into the table, and returns a mutable reference to it.
            .               ///
            .               /// This does not check if the given element already exists in the table.
            .               #[cfg_attr(feature = "inline-more", inline)]
    9,315,544 ( 0.01%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
          624 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
    6,986,658 ( 0.01%)      }
            .           
            .               /// Inserts a new element into the table, without growing the table.
            .               ///
            .               /// There must be enough space in the table to insert the new element.
            .               ///
            .               /// This does not check if the given element already exists in the table.
            .               #[cfg_attr(feature = "inline-more", inline)]
            .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
       20,730 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
    9,327,161 ( 0.01%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
      225,425 ( 0.00%)          let bucket = self.table.bucket(index);
            .           
            .                   // If we are replacing a DELETED entry then we don't need to update
            .                   // the load counter.
   19,629,029 ( 0.03%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
            .           
            .                   bucket.write(value);
   15,824,615 ( 0.02%)          self.table.items += 1;
            .                   bucket
       36,199 ( 0.00%)      }
            .           
            .               /// Temporary removes a bucket, applying the given function to the removed
            .               /// element and optionally put back the returned value in the same bucket.
            .               ///
            .               /// Returns `true` if the bucket still contains an element
            .               ///
            .               /// This does not check if the given bucket is actually occupied.
            .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
            .                       true
            .                   } else {
            .                       false
            .                   }
            .               }
            .           
            .               /// Searches for an element in the table.
            .               #[inline]
      836,713 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
      403,919 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
      578,890 ( 0.00%)              eq(self.bucket(index).as_ref())
       66,028 ( 0.00%)          });
            .           
            .                   // Avoid `Option::map` because it bloats LLVM IR.
            .                   match result {
       17,712 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
            .                       None => None,
            .                   }
      865,624 ( 0.00%)      }
            .           
            .               /// Gets a reference to an element in the table.
            .               #[inline]
            .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
            .                   // Avoid `Option::map` because it bloats LLVM IR.
      236,353 ( 0.00%)          match self.find(hash, eq) {
            .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
            .                       None => None,
            .                   }
            .               }
            .           
            .               /// Gets a mutable reference to an element in the table.
            .               #[inline]
       26,110 ( 0.00%)      pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
            .                   // Avoid `Option::map` because it bloats LLVM IR.
      510,413 ( 0.00%)          match self.find(hash, eq) {
            .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
            .                       None => None,
            .                   }
       29,840 ( 0.00%)      }
            .           
            .               /// Attempts to get mutable references to `N` entries in the table at once.
            .               ///
            .               /// Returns an array of length `N` with the results of each query.
            .               ///
            .               /// At most one mutable reference will be returned to any entry. `None` will be returned if any
            .               /// of the hashes are duplicates. `None` will be returned if the hash is not found.
            .               ///
-- line 859 ----------------------------------------
-- line 913 ----------------------------------------
            .               /// more, but is guaranteed to be able to hold at least this many.
            .               #[inline]
            .               pub fn capacity(&self) -> usize {
            .                   self.table.items + self.table.growth_left
            .               }
            .           
            .               /// Returns the number of elements in the table.
            .               #[inline]
          184 ( 0.00%)      pub fn len(&self) -> usize {
           92 ( 0.00%)          self.table.items
          184 ( 0.00%)      }
            .           
            .               /// Returns `true` if the table contains no elements.
            .               #[inline]
          148 ( 0.00%)      pub fn is_empty(&self) -> bool {
   18,856,231 ( 0.03%)          self.len() == 0
          296 ( 0.00%)      }
            .           
            .               /// Returns the number of buckets in the table.
            .               #[inline]
            .               pub fn buckets(&self) -> usize {
            .                   self.table.bucket_mask + 1
            .               }
            .           
            .               /// Returns an iterator over every element in the table. It is up to
-- line 937 ----------------------------------------
-- line 938 ----------------------------------------
            .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
            .               /// Because we cannot make the `next` method unsafe on the `RawIter`
            .               /// struct, we have to make the `iter` method unsafe.
            .               #[inline]
            .               pub unsafe fn iter(&self) -> RawIter<T> {
            .                   let data = Bucket::from_base_index(self.data_end(), 0);
            .                   RawIter {
            .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
    3,722,595 ( 0.01%)              items: self.table.items,
            .                   }
            .               }
            .           
            .               /// Returns an iterator over occupied buckets that could match a given hash.
            .               ///
            .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
            .               /// return items that have a hash value different than the one provided. You
            .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
            .               /// Iteration starts at the provided iterator's current location.
            .               ///
            .               /// It is up to the caller to ensure that the iterator is valid for this
            .               /// `RawTable` and covers all items that remain in the table.
            .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
            .                   debug_assert_eq!(iter.len(), self.len());
            .           
            .                   let alloc = self.table.alloc.clone();
      316,684 ( 0.00%)          let allocation = self.into_allocation();
      237,513 ( 0.00%)          RawIntoIter {
      395,855 ( 0.00%)              iter,
            .                       allocation,
            .                       marker: PhantomData,
            .                       alloc,
            .                   }
            .               }
            .           
            .               /// Converts the table into a raw allocation. The contents of the table
            .               /// should be dropped using a `RawIter` before freeing the allocation.
            .               #[cfg_attr(feature = "inline-more", inline)]
            .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
      224,196 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
            .                       None
            .                   } else {
            .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
            .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
            .                           Some(lco) => lco,
            .                           None => unsafe { hint::unreachable_unchecked() },
            .                       };
            .                       Some((
        4,569 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
            .                           layout,
            .                       ))
            .                   };
            .                   mem::forget(self);
            .                   alloc
            .               }
            .           }
            .           
-- line 1033 ----------------------------------------
-- line 1041 ----------------------------------------
            .           where
            .               T: Sync,
            .               A: Sync,
            .           {
            .           }
            .           
            .           impl<A> RawTableInner<A> {
            .               #[inline]
          108 ( 0.00%)      const fn new_in(alloc: A) -> Self {
   32,414,844 ( 0.05%)          Self {
            .                       // Be careful to cast the entire slice to a raw pointer.
          252 ( 0.00%)              ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
            .                       bucket_mask: 0,
            .                       items: 0,
            .                       growth_left: 0,
            .                       alloc,
            .                   }
           72 ( 0.00%)      }
            .           }
            .           
            .           impl<A: Allocator + Clone> RawTableInner<A> {
            .               #[cfg_attr(feature = "inline-more", inline)]
   20,473,919 ( 0.03%)      unsafe fn new_uninitialized(
            .                   alloc: A,
            .                   table_layout: TableLayout,
            .                   buckets: usize,
            .                   fallibility: Fallibility,
            .               ) -> Result<Self, TryReserveError> {
            .                   debug_assert!(buckets.is_power_of_two());
            .           
            .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
            .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
            .                   // such allocations will never succeed anyways.
            .                   //
            .                   // This mirrors what Vec does in the standard library.
            .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
            .                       return Err(fallibility.capacity_overflow());
            .                   }
            .           
    4,525,442 ( 0.01%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
            .                       Ok(block) => block.cast(),
            .                       Err(_) => return Err(fallibility.alloc_err(layout)),
            .                   };
            .           
            .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
   11,177,322 ( 0.02%)          Ok(Self {
            .                       ctrl,
    4,548,733 ( 0.01%)              bucket_mask: buckets - 1,
            .                       items: 0,
            .                       growth_left: bucket_mask_to_capacity(buckets - 1),
            .                       alloc,
            .                   })
   14,891,204 ( 0.02%)      }
            .           
            .               #[inline]
      805,851 ( 0.00%)      fn fallible_with_capacity(
            .                   alloc: A,
            .                   table_layout: TableLayout,
            .                   capacity: usize,
            .                   fallibility: Fallibility,
            .               ) -> Result<Self, TryReserveError> {
      228,306 ( 0.00%)          if capacity == 0 {
      157,470 ( 0.00%)              Ok(Self::new_in(alloc))
            .                   } else {
            .                       unsafe {
            .                           let buckets =
            .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
            .           
    9,303,870 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
            .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
            .           
      453,014 ( 0.00%)                  Ok(result)
            .                       }
            .                   }
      805,851 ( 0.00%)      }
            .           
            .               /// Searches for an empty or deleted bucket which is suitable for inserting
            .               /// a new element and sets the hash for that slot.
            .               ///
            .               /// There must be at least 1 empty bucket in the table.
            .               #[inline]
    3,397,515 ( 0.00%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
            .                   let index = self.find_insert_slot(hash);
    3,397,515 ( 0.00%)          let old_ctrl = *self.ctrl(index);
            .                   self.set_ctrl_h2(index, hash);
            .                   (index, old_ctrl)
    6,795,030 ( 0.01%)      }
            .           
            .               /// Searches for an empty or deleted bucket which is suitable for inserting
            .               /// a new element.
            .               ///
            .               /// There must be at least 1 empty bucket in the table.
            .               #[inline]
            .               fn find_insert_slot(&self, hash: u64) -> usize {
            .                   let mut probe_seq = self.probe_seq(hash);
            .                   loop {
            .                       unsafe {
            .                           let group = Group::load(self.ctrl(probe_seq.pos));
   26,552,503 ( 0.04%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
   77,865,661 ( 0.11%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
            .           
            .                               // In tables smaller than the group width, trailing control
            .                               // bytes outside the range of the table are filled with
            .                               // EMPTY entries. These will unfortunately trigger a
            .                               // match, but once masked may point to a full bucket that
            .                               // is already occupied. We detect this situation here and
            .                               // perform a second scan starting at the beginning of the
            .                               // table. This second scan is guaranteed to find an empty
            .                               // slot (due to the load factor) before hitting the trailing
            .                               // control bytes (containing EMPTY).
   36,014,173 ( 0.05%)                      if unlikely(is_full(*self.ctrl(result))) {
            .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
            .                                   debug_assert_ne!(probe_seq.pos, 0);
            .                                   return Group::load_aligned(self.ctrl(0))
            .                                       .match_empty_or_deleted()
            .                                       .lowest_set_bit_nonzero();
            .                               }
            .           
            .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
            .           
            .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
            .               /// code generated, but it is eliminated by LLVM optimizations.
            .               #[inline]
            .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
            .                   let h2_hash = h2(hash);
            .                   let mut probe_seq = self.probe_seq(hash);
            .           
    2,915,408 ( 0.00%)          loop {
            .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
            .           
  107,707,221 ( 0.16%)              for bit in group.match_byte(h2_hash) {
  231,298,076 ( 0.34%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
            .           
  165,339,819 ( 0.24%)                  if likely(eq(index)) {
            .                               return Some(index);
            .                           }
            .                       }
            .           
   25,128,716 ( 0.04%)              if likely(group.match_empty().any_bit_set()) {
            .                           return None;
            .                       }
            .           
            .                       probe_seq.move_next(self.bucket_mask);
            .                   }
            .               }
            .           
            .               #[allow(clippy::mut_mut)]
            .               #[inline]
            .               unsafe fn prepare_rehash_in_place(&mut self) {
            .                   // Bulk convert all full control bytes to DELETED, and all DELETED
            .                   // control bytes to EMPTY. This effectively frees up all buckets
            .                   // containing a DELETED entry.
           20 ( 0.00%)          for i in (0..self.buckets()).step_by(Group::WIDTH) {
            .                       let group = Group::load_aligned(self.ctrl(i));
            .                       let group = group.convert_special_to_empty_and_full_to_deleted();
            .                       group.store_aligned(self.ctrl(i));
            .                   }
            .           
            .                   // Fix up the trailing control bytes. See the comments in set_ctrl
            .                   // for the handling of tables smaller than the group width.
           18 ( 0.00%)          if self.buckets() < Group::WIDTH {
            .                       self.ctrl(0)
            .                           .copy_to(self.ctrl(Group::WIDTH), self.buckets());
            .                   } else {
            .                       self.ctrl(0)
            .                           .copy_to(self.ctrl(self.buckets()), Group::WIDTH);
            .                   }
            .               }
            .           
-- line 1220 ----------------------------------------
-- line 1225 ----------------------------------------
            .                   Bucket::from_base_index(self.data_end(), index)
            .               }
            .           
            .               #[inline]
            .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
            .                   debug_assert_ne!(self.bucket_mask, 0);
            .                   debug_assert!(index < self.buckets());
            .                   let base: *mut u8 = self.data_end().as_ptr();
   84,215,280 ( 0.12%)          base.sub((index + 1) * size_of)
            .               }
            .           
            .               #[inline]
            .               unsafe fn data_end<T>(&self) -> NonNull<T> {
            .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
            .               }
            .           
            .               /// Returns an iterator-like object for a probe sequence on the table.
            .               ///
            .               /// This iterator never terminates, but is guaranteed to visit each bucket
            .               /// group exactly once. The loop using `probe_seq` must terminate upon
            .               /// reaching a group containing an empty bucket.
            .               #[inline]
            .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
            .                   ProbeSeq {
  586,754,428 ( 0.86%)              pos: h1(hash) & self.bucket_mask,
            .                       stride: 0,
            .                   }
            .               }
            .           
            .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
            .               /// in the table, otherwise returns error
            .               #[cfg(feature = "raw")]
            .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
            .                   } else {
            .                       self.record_item_insert_at(index, old_ctrl, hash);
            .                       Ok(index)
            .                   }
            .               }
            .           
            .               #[inline]
            .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
   50,323,074 ( 0.07%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
            .                   self.set_ctrl_h2(index, hash);
   40,244,264 ( 0.06%)          self.items += 1;
            .               }
            .           
            .               #[inline]
            .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
            .                   let probe_seq_pos = self.probe_seq(hash).pos;
            .                   let probe_index =
            .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
          177 ( 0.00%)          probe_index(i) == probe_index(new_i)
            .               }
            .           
            .               /// Sets a control byte to the hash, and possibly also the replicated control byte at
            .               /// the end of the array.
            .               #[inline]
            .               unsafe fn set_ctrl_h2(&self, index: usize, hash: u64) {
            .                   self.set_ctrl(index, h2(hash));
            .               }
-- line 1289 ----------------------------------------
-- line 1312 ----------------------------------------
            .                   // replicate the buckets at the end of the trailing group. For example
            .                   // with 2 buckets and a group size of 4, the control bytes will look
            .                   // like this:
            .                   //
            .                   //     Real    |             Replicated
            .                   // ---------------------------------------------
            .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
            .                   // ---------------------------------------------
   72,016,200 ( 0.11%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
            .           
   24,002,274 ( 0.04%)          *self.ctrl(index) = ctrl;
   24,043,276 ( 0.04%)          *self.ctrl(index2) = ctrl;
            .               }
            .           
            .               /// Returns a pointer to a control byte.
            .               #[inline]
            .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
            .                   debug_assert!(index < self.num_ctrl_bytes());
            .                   self.ctrl.as_ptr().add(index)
            .               }
            .           
            .               #[inline]
            .               fn buckets(&self) -> usize {
   11,837,896 ( 0.02%)          self.bucket_mask + 1
            .               }
            .           
            .               #[inline]
            .               fn num_ctrl_bytes(&self) -> usize {
    9,855,906 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
            .               }
            .           
            .               #[inline]
           72 ( 0.00%)      fn is_empty_singleton(&self) -> bool {
   59,860,117 ( 0.09%)          self.bucket_mask == 0
          144 ( 0.00%)      }
            .           
            .               #[allow(clippy::mut_mut)]
            .               #[inline]
            .               unsafe fn prepare_resize(
            .                   &self,
            .                   table_layout: TableLayout,
            .                   capacity: usize,
            .                   fallibility: Fallibility,
            .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
            .                   debug_assert!(self.items <= capacity);
            .           
            .                   // Allocate and initialize the new table.
      115,266 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
            .                       self.alloc.clone(),
            .                       table_layout,
            .                       capacity,
            .                       fallibility,
            .                   )?;
    5,645,894 ( 0.01%)          new_table.growth_left -= self.items;
            .                   new_table.items = self.items;
            .           
            .                   // The hash function may panic, in which case we simply free the new
            .                   // table without dropping any elements that may have been copied into
            .                   // it.
            .                   //
            .                   // This guard is also used to free the old table on success, see
            .                   // the comment at the bottom of this function.
            .                   Ok(guard(new_table, move |self_| {
    2,648,509 ( 0.00%)              if !self_.is_empty_singleton() {
            .                           self_.free_buckets(table_layout);
            .                       }
            .                   }))
            .               }
            .           
            .               /// Reserves or rehashes to make room for `additional` more elements.
            .               ///
            .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
            .                   &mut self,
            .                   additional: usize,
            .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
            .                   fallibility: Fallibility,
            .                   layout: TableLayout,
            .                   drop: Option<fn(*mut u8)>,
            .               ) -> Result<(), TryReserveError> {
            .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
    5,297,040 ( 0.01%)          let new_items = match self.items.checked_add(additional) {
            .                       Some(new_items) => new_items,
            .                       None => return Err(fallibility.capacity_overflow()),
            .                   };
    5,297,030 ( 0.01%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
   11,039,311 ( 0.02%)          if new_items <= full_capacity / 2 {
            .                       // Rehash in-place without re-allocating if we have plenty of spare
            .                       // capacity that is locked up due to DELETED entries.
            .                       self.rehash_in_place(hasher, layout.size, drop);
           12 ( 0.00%)              Ok(())
            .                   } else {
            .                       // Otherwise, conservatively resize to at least the next size up
            .                       // to avoid churning deletes into frequent rehashes.
            .                       self.resize_inner(
    2,648,509 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
            .                           hasher,
            .                           fallibility,
            .                           layout,
            .                       )
            .                   }
            .               }
            .           
            .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
            .               #[inline(always)]
            .               unsafe fn resize_inner(
            .                   &mut self,
            .                   capacity: usize,
            .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
            .                   fallibility: Fallibility,
            .                   layout: TableLayout,
            .               ) -> Result<(), TryReserveError> {
      305,150 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
            .           
            .                   // Copy all elements to the new table.
            .                   for i in 0..self.buckets() {
   14,169,039 ( 0.02%)              if !is_full(*self.ctrl(i)) {
            .                           continue;
            .                       }
            .           
            .                       // This may panic.
            .                       let hash = hasher(self, i);
            .           
            .                       // We can use a simpler version of insert() here since:
            .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
            .                   }
            .           
            .                   // We successfully copied all elements without panicking. Now replace
            .                   // self with the new table. The old table will have its memory freed but
            .                   // the items will not be dropped (since they have been moved into the
            .                   // new table).
            .                   mem::swap(self, &mut new_table);
            .           
    2,648,509 ( 0.00%)          Ok(())
            .               }
            .           
            .               /// Rehashes the contents of the table in place (i.e. without changing the
            .               /// allocation).
            .               ///
            .               /// If `hasher` panics then some the table's contents may be lost.
            .               ///
            .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1496 ----------------------------------------
            .                       }
            .                       self_.growth_left = bucket_mask_to_capacity(self_.bucket_mask) - self_.items;
            .                   });
            .           
            .                   // At this point, DELETED elements are elements that we haven't
            .                   // rehashed yet. Find them and re-insert them at their ideal
            .                   // position.
            .                   'outer: for i in 0..guard.buckets() {
          448 ( 0.00%)              if *guard.ctrl(i) != DELETED {
            .                           continue;
            .                       }
            .           
            .                       let i_p = guard.bucket_ptr(i, size_of);
            .           
            .                       'inner: loop {
            .                           // Hash the current item
            .                           let hash = hasher(*guard, i);
-- line 1512 ----------------------------------------
-- line 1515 ----------------------------------------
            .                           let new_i = guard.find_insert_slot(hash);
            .                           let new_i_p = guard.bucket_ptr(new_i, size_of);
            .           
            .                           // Probing works by scanning through all of the control
            .                           // bytes in groups, which may not be aligned to the group
            .                           // size. If both the new and old position fall within the
            .                           // same unaligned group, then there is no benefit in moving
            .                           // it and we can just continue to the next item.
           59 ( 0.00%)                  if likely(guard.is_in_same_group(i, new_i, hash)) {
            .                               guard.set_ctrl_h2(i, hash);
            .                               continue 'outer;
            .                           }
            .           
            .                           // We are moving the current item to a new position. Write
            .                           // our H2 to the control byte of the new position.
            .                           let prev_ctrl = guard.replace_ctrl_h2(new_i, hash);
            .                           if prev_ctrl == EMPTY {
-- line 1531 ----------------------------------------
-- line 1541 ----------------------------------------
            .                               // swapped into the old slot.
            .                               debug_assert_eq!(prev_ctrl, DELETED);
            .                               ptr::swap_nonoverlapping(i_p, new_i_p, size_of);
            .                               continue 'inner;
            .                           }
            .                       }
            .                   }
            .           
           18 ( 0.00%)          guard.growth_left = bucket_mask_to_capacity(guard.bucket_mask) - guard.items;
            .           
            .                   mem::forget(guard);
            .               }
            .           
            .               #[inline]
            .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
            .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
            .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
            .                       Some(lco) => lco,
            .                       None => hint::unreachable_unchecked(),
            .                   };
            .                   self.alloc.deallocate(
    1,671,303 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
            .                       layout,
            .                   );
            .               }
            .           
            .               /// Marks all table buckets as empty without dropping their contents.
            .               #[inline]
            .               fn clear_no_drop(&mut self) {
      318,765 ( 0.00%)          if !self.is_empty_singleton() {
            .                       unsafe {
            .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
            .                       }
            .                   }
      571,827 ( 0.00%)          self.items = 0;
      318,989 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
            .               }
            .           
            .               #[inline]
            .               unsafe fn erase(&mut self, index: usize) {
            .                   debug_assert!(is_full(*self.ctrl(index)));
    3,007,011 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
            .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
            .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
            .           
            .                   // If we are inside a continuous block of Group::WIDTH full or deleted
            .                   // cells then a probe window may have seen a full block when trying to
            .                   // insert. We therefore need to keep that block non-empty so that
            .                   // lookups will continue searching to the next probe window.
            .                   //
            .                   // Note that in this context `leading_zeros` refers to the bytes at the
            .                   // end of a group, while `trailing_zeros` refers to the bytes at the
            .                   // beginning of a group.
   12,028,044 ( 0.02%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
            .                       DELETED
            .                   } else {
   15,006,445 ( 0.02%)              self.growth_left += 1;
            .                       EMPTY
            .                   };
            .                   self.set_ctrl(index, ctrl);
   12,028,044 ( 0.02%)          self.items -= 1;
            .               }
            .           }
            .           
            .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
       46,568 ( 0.00%)      fn clone(&self) -> Self {
        6,076 ( 0.00%)          if self.table.is_empty_singleton() {
            .                       Self::new_in(self.table.alloc.clone())
            .                   } else {
            .                       unsafe {
            .                           let mut new_table = ManuallyDrop::new(
            .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
            .                               match Self::new_uninitialized(
            .                                   self.table.alloc.clone(),
            .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
            .                               // We need to free the memory allocated for the new table.
            .                               new_table.free_buckets();
            .                           });
            .           
            .                           // Return the newly created table.
            .                           ManuallyDrop::into_inner(new_table)
            .                       }
            .                   }
       52,389 ( 0.00%)      }
            .           
            .               fn clone_from(&mut self, source: &Self) {
            .                   if source.table.is_empty_singleton() {
            .                       *self = Self::new_in(self.table.alloc.clone());
            .                   } else {
            .                       unsafe {
            .                           // First, drop all our elements without clearing the control bytes.
            .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
            .                       .table
            .                       .ctrl(0)
            .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
            .                   source
            .                       .data_start()
            .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
            .           
            .                   self.table.items = source.table.items;
          498 ( 0.00%)          self.table.growth_left = source.table.growth_left;
            .               }
            .           }
            .           
            .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
            .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
            .               #[cfg_attr(feature = "inline-more", inline)]
            .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
            .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
            .               fn default() -> Self {
            .                   Self::new_in(Default::default())
            .               }
            .           }
            .           
            .           #[cfg(feature = "nightly")]
            .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
            .               #[cfg_attr(feature = "inline-more", inline)]
   35,829,234 ( 0.05%)      fn drop(&mut self) {
   26,549,488 ( 0.04%)          if !self.table.is_empty_singleton() {
            .                       unsafe {
            .                           self.drop_elements();
            .                           self.free_buckets();
            .                       }
            .                   }
   39,215,118 ( 0.06%)      }
            .           }
            .           #[cfg(not(feature = "nightly"))]
            .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
            .               #[cfg_attr(feature = "inline-more", inline)]
            .               fn drop(&mut self) {
            .                   if !self.table.is_empty_singleton() {
            .                       unsafe {
            .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
            .               }
            .           }
            .           
            .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
            .               type Item = T;
            .               type IntoIter = RawIntoIter<T, A>;
            .           
            .               #[cfg_attr(feature = "inline-more", inline)]
      316,684 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
            .                   unsafe {
            .                       let iter = self.iter();
            .                       self.into_iter_from(iter)
            .                   }
      395,855 ( 0.00%)      }
            .           }
            .           
            .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
            .           /// not track an item count.
            .           pub(crate) struct RawIterRange<T> {
            .               // Mask of full buckets in the current group. Bits are cleared from this
            .               // mask as each element is processed.
            .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
            .           
            .           impl<T> Iterator for RawIterRange<T> {
            .               type Item = Bucket<T>;
            .           
            .               #[cfg_attr(feature = "inline-more", inline)]
            .               fn next(&mut self) -> Option<Bucket<T>> {
            .                   unsafe {
            .                       loop {
    6,942,289 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
      969,708 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    1,775,235 ( 0.00%)                      return Some(self.data.next_n(index));
            .                           }
            .           
    6,574,549 ( 0.01%)                  if self.next_ctrl >= self.end {
            .                               return None;
            .                           }
            .           
            .                           // We might read past self.end up to the next group boundary,
            .                           // but this is fine because it only occurs on tables smaller
            .                           // than the group size where the trailing control bytes are all
            .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
            .                           // to the group size (since tables are power-of-two sized).
       80,963 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
      118,412 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
      113,044 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
            .                       }
            .                   }
            .               }
            .           
            .               #[inline]
            .               fn size_hint(&self) -> (usize, Option<usize>) {
            .                   // We don't have an item count, so just guess based on the range size.
            .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
            .                           }
            .                       } else {
            .                           // We must have already iterated past the removed item.
            .                       }
            .                   }
            .               }
            .           
            .               unsafe fn drop_elements(&mut self) {
       17,863 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
            .                       for item in self {
            .                           item.drop();
            .                       }
            .                   }
            .               }
            .           }
            .           
            .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
            .                   }
            .               }
            .           }
            .           
            .           impl<T> Iterator for RawIter<T> {
            .               type Item = Bucket<T>;
            .           
            .               #[cfg_attr(feature = "inline-more", inline)]
    1,327,307 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
    3,776,372 ( 0.01%)          if let Some(b) = self.iter.next() {
    8,758,954 ( 0.01%)              self.items -= 1;
            .                       Some(b)
            .                   } else {
            .                       // We don't check against items == 0 here to allow the
            .                       // compiler to optimize away the item count entirely if the
            .                       // iterator length is never queried.
            .                       debug_assert_eq!(self.items, 0);
            .                       None
            .                   }
    2,654,614 ( 0.00%)      }
            .           
            .               #[inline]
            .               fn size_hint(&self) -> (usize, Option<usize>) {
            .                   (self.items, Some(self.items))
            .               }
            .           }
            .           
            .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
            .               T: Sync,
            .               A: Sync,
            .           {
            .           }
            .           
            .           #[cfg(feature = "nightly")]
            .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
            .               #[cfg_attr(feature = "inline-more", inline)]
       19,710 ( 0.00%)      fn drop(&mut self) {
            .                   unsafe {
            .                       // Drop all remaining elements
            .                       self.iter.drop_elements();
            .           
            .                       // Free the table
    1,113,854 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
            .                           self.alloc.deallocate(ptr, layout);
            .                       }
            .                   }
          960 ( 0.00%)      }
            .           }
            .           #[cfg(not(feature = "nightly"))]
            .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
            .               #[cfg_attr(feature = "inline-more", inline)]
            .               fn drop(&mut self) {
            .                   unsafe {
            .                       // Drop all remaining elements
            .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
            .                   }
            .               }
            .           }
            .           
            .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
            .               type Item = T;
            .           
            .               #[cfg_attr(feature = "inline-more", inline)]
       16,637 ( 0.00%)      fn next(&mut self) -> Option<T> {
       13,554 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
       37,675 ( 0.00%)      }
            .           
            .               #[inline]
            .               fn size_hint(&self) -> (usize, Option<usize>) {
            5 ( 0.00%)          self.iter.size_hint()
            .               }
            .           }
            .           
            .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
            .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
            .           
            .           /// Iterator which consumes elements without freeing the table storage.
            .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
            .           where
            .               T: Sync,
            .               A: Sync,
            .           {
            .           }
            .           
            .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
            .               #[cfg_attr(feature = "inline-more", inline)]
       27,400 ( 0.00%)      fn drop(&mut self) {
            .                   unsafe {
            .                       // Drop all remaining elements. Note that this may panic.
            .                       self.iter.drop_elements();
            .           
            .                       // Reset the contents of the table now that all elements have been
            .                       // dropped.
            .                       self.table.clear_no_drop();
            .           
            .                       // Move the now empty table back to its original location.
        3,425 ( 0.00%)              self.orig_table
            .                           .as_ptr()
            .                           .copy_from_nonoverlapping(&*self.table, 1);
            .                   }
       27,400 ( 0.00%)      }
            .           }
            .           
            .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
            .               type Item = T;
            .           
            .               #[cfg_attr(feature = "inline-more", inline)]
            .               fn next(&mut self) -> Option<T> {
            .                   unsafe {
-- line 2289 ----------------------------------------

  320,755,118 ( 0.47%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs
--------------------------------------------------------------------------------
Ir                  

-- line 56 ----------------------------------------
         .           #[derive(Copy, Clone, Debug)]
         .           pub enum RelationDir {
         .               SubtypeOf,
         .               SupertypeOf,
         .               EqTo,
         .           }
         .           
         .           impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {
25,328,466 ( 0.04%)      pub fn super_combine_tys<R>(
         .                   &self,
         .                   relation: &mut R,
         .                   a: Ty<'tcx>,
         .                   b: Ty<'tcx>,
         .               ) -> RelateResult<'tcx, Ty<'tcx>>
         .               where
         .                   R: TypeRelation<'tcx>,
         .               {
         .                   let a_is_expected = relation.a_is_expected();
         .           
21,150,891 ( 0.03%)          match (a.kind(), b.kind()) {
         .                       // Relate integral variables to other types
         .                       (&ty::Infer(ty::IntVar(a_id)), &ty::Infer(ty::IntVar(b_id))) => {
         .                           self.inner
         .                               .borrow_mut()
         .                               .int_unification_table()
         .                               .unify_var_var(a_id, b_id)
         .                               .map_err(|e| int_unification_error(a_is_expected, e))?;
         .                           Ok(a)
         .                       }
        90 ( 0.00%)              (&ty::Infer(ty::IntVar(v_id)), &ty::Int(v)) => {
       180 ( 0.00%)                  self.unify_integral_variable(a_is_expected, v_id, IntType(v))
         .                       }
         .                       (&ty::Int(v), &ty::Infer(ty::IntVar(v_id))) => {
         .                           self.unify_integral_variable(!a_is_expected, v_id, IntType(v))
         .                       }
       183 ( 0.00%)              (&ty::Infer(ty::IntVar(v_id)), &ty::Uint(v)) => {
       366 ( 0.00%)                  self.unify_integral_variable(a_is_expected, v_id, UintType(v))
         .                       }
        85 ( 0.00%)              (&ty::Uint(v), &ty::Infer(ty::IntVar(v_id))) => {
       170 ( 0.00%)                  self.unify_integral_variable(!a_is_expected, v_id, UintType(v))
         .                       }
         .           
         .                       // Relate floating-point variables to other types
         .                       (&ty::Infer(ty::FloatVar(a_id)), &ty::Infer(ty::FloatVar(b_id))) => {
         .                           self.inner
         .                               .borrow_mut()
         .                               .float_unification_table()
         .                               .unify_var_var(a_id, b_id)
-- line 103 ----------------------------------------
-- line 108 ----------------------------------------
         .                           self.unify_float_variable(a_is_expected, v_id, v)
         .                       }
         .                       (&ty::Float(v), &ty::Infer(ty::FloatVar(v_id))) => {
         .                           self.unify_float_variable(!a_is_expected, v_id, v)
         .                       }
         .           
         .                       // All other cases of inference are errors
         .                       (&ty::Infer(_), _) | (_, &ty::Infer(_)) => {
     8,145 ( 0.00%)                  Err(TypeError::Sorts(ty::relate::expected_found(relation, a, b)))
         .                       }
         .           
18,829,656 ( 0.03%)              _ => ty::relate::super_relate_tys(relation, a, b),
         .                   }
25,328,466 ( 0.04%)      }
         .           
    11,328 ( 0.00%)      pub fn super_combine_consts<R>(
         .                   &self,
         .                   relation: &mut R,
         .                   a: &'tcx ty::Const<'tcx>,
         .                   b: &'tcx ty::Const<'tcx>,
         .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>>
         .               where
         .                   R: ConstEquateRelation<'tcx>,
         .               {
         .                   debug!("{}.consts({:?}, {:?})", relation.tag(), a, b);
    32,620 ( 0.00%)          if a == b {
         .                       return Ok(a);
         .                   }
         .           
     2,700 ( 0.00%)          let a = replace_if_possible(&mut self.inner.borrow_mut().const_unification_table(), a);
     2,700 ( 0.00%)          let b = replace_if_possible(&mut self.inner.borrow_mut().const_unification_table(), b);
         .           
         .                   let a_is_expected = relation.a_is_expected();
         .           
    10,982 ( 0.00%)          match (a.val, b.val) {
         .                       (
         .                           ty::ConstKind::Infer(InferConst::Var(a_vid)),
         .                           ty::ConstKind::Infer(InferConst::Var(b_vid)),
         .                       ) => {
         .                           self.inner
         .                               .borrow_mut()
         .                               .const_unification_table()
         .                               .unify_var_var(a_vid, b_vid)
-- line 150 ----------------------------------------
-- line 154 ----------------------------------------
         .           
         .                       // All other cases of inference with other variables are errors.
         .                       (ty::ConstKind::Infer(InferConst::Var(_)), ty::ConstKind::Infer(_))
         .                       | (ty::ConstKind::Infer(_), ty::ConstKind::Infer(InferConst::Var(_))) => {
         .                           bug!("tried to combine ConstKind::Infer/ConstKind::Infer(InferConst::Var)")
         .                       }
         .           
         .                       (ty::ConstKind::Infer(InferConst::Var(vid)), _) => {
        98 ( 0.00%)                  return self.unify_const_variable(relation.param_env(), vid, b, a_is_expected);
         .                       }
         .           
         .                       (_, ty::ConstKind::Infer(InferConst::Var(vid))) => {
     1,970 ( 0.00%)                  return self.unify_const_variable(relation.param_env(), vid, a, !a_is_expected);
         .                       }
         .                       (ty::ConstKind::Unevaluated(..), _) if self.tcx.lazy_normalization() => {
         .                           // FIXME(#59490): Need to remove the leak check to accommodate
         .                           // escaping bound variables here.
         .                           if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {
         .                               relation.const_equate_obligation(a, b);
         .                           }
         .                           return Ok(b);
-- line 174 ----------------------------------------
-- line 179 ----------------------------------------
         .                           if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {
         .                               relation.const_equate_obligation(a, b);
         .                           }
         .                           return Ok(a);
         .                       }
         .                       _ => {}
         .                   }
         .           
     2,460 ( 0.00%)          ty::relate::super_relate_consts(relation, a, b)
     8,496 ( 0.00%)      }
         .           
         .               /// Unifies the const variable `target_vid` with the given constant.
         .               ///
         .               /// This also tests if the given const `ct` contains an inference variable which was previously
         .               /// unioned with `target_vid`. If this is the case, inferring `target_vid` to `ct`
         .               /// would result in an infinite type as we continuously replace an inference variable
         .               /// in `ct` with `ct` itself.
         .               ///
-- line 196 ----------------------------------------
-- line 216 ----------------------------------------
         .               /// of `fn bind` (meaning that its substs contain `N`).
         .               ///
         .               /// `bind(arr)` now infers that the type of `arr` must be `[u8; N]`.
         .               /// The assignment `arr = bind(arr)` now tries to equate `N` with `3 + 4`.
         .               ///
         .               /// As `3 + 4` contains `N` in its substs, this must not succeed.
         .               ///
         .               /// See `src/test/ui/const-generics/occurs-check/` for more examples where this is relevant.
     7,752 ( 0.00%)      #[instrument(level = "debug", skip(self))]
         .               fn unify_const_variable(
         .                   &self,
         .                   param_env: ty::ParamEnv<'tcx>,
         .                   target_vid: ty::ConstVid<'tcx>,
         .                   ct: &'tcx ty::Const<'tcx>,
         .                   vid_is_expected: bool,
         .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
         .                   let (for_universe, span) = {
         .                       let mut inner = self.inner.borrow_mut();
     1,632 ( 0.00%)              let variable_table = &mut inner.const_unification_table();
       816 ( 0.00%)              let var_value = variable_table.probe_value(target_vid);
       816 ( 0.00%)              match var_value.val {
         .                           ConstVariableValue::Known { value } => {
         .                               bug!("instantiating {:?} which has a known value {:?}", target_vid, value)
         .                           }
         .                           ConstVariableValue::Unknown { universe } => (universe, var_value.origin.span),
         .                       }
         .                   };
     3,264 ( 0.00%)          let value = ConstInferUnifier { infcx: self, span, param_env, for_universe, target_vid }
         .                       .relate(ct, ct)?;
         .           
     1,632 ( 0.00%)          self.inner
         .                       .borrow_mut()
         .                       .const_unification_table()
         .                       .unify_var_value(
         .                           target_vid,
     2,448 ( 0.00%)                  ConstVarValue {
         .                               origin: ConstVariableOrigin {
         .                                   kind: ConstVariableOriginKind::ConstInference,
         .                                   span: DUMMY_SP,
         .                               },
         .                               val: ConstVariableValue::Known { value },
         .                           },
         .                       )
         .                       .map(|()| value)
         .                       .map_err(|e| const_unification_error(vid_is_expected, e))
         .               }
         .           
     2,148 ( 0.00%)      fn unify_integral_variable(
         .                   &self,
         .                   vid_is_expected: bool,
         .                   vid: ty::IntVid,
         .                   val: ty::IntVarValue,
         .               ) -> RelateResult<'tcx, Ty<'tcx>> {
     2,864 ( 0.00%)          self.inner
         .                       .borrow_mut()
         .                       .int_unification_table()
         .                       .unify_var_value(vid, Some(val))
         .                       .map_err(|e| int_unification_error(vid_is_expected, e))?;
       716 ( 0.00%)          match val {
        90 ( 0.00%)              IntType(v) => Ok(self.tcx.mk_mach_int(v)),
       894 ( 0.00%)              UintType(v) => Ok(self.tcx.mk_mach_uint(v)),
         .                   }
     2,864 ( 0.00%)      }
         .           
         .               fn unify_float_variable(
         .                   &self,
         .                   vid_is_expected: bool,
         .                   vid: ty::FloatVid,
         .                   val: ty::FloatTy,
         .               ) -> RelateResult<'tcx, Ty<'tcx>> {
         .                   self.inner
-- line 286 ----------------------------------------
-- line 289 ----------------------------------------
         .                       .unify_var_value(vid, Some(ty::FloatVarValue(val)))
         .                       .map_err(|e| float_unification_error(vid_is_expected, e))?;
         .                   Ok(self.tcx.mk_mach_float(val))
         .               }
         .           }
         .           
         .           impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {
         .               pub fn tcx(&self) -> TyCtxt<'tcx> {
 5,627,610 ( 0.01%)          self.infcx.tcx
         .               }
         .           
         .               pub fn equate<'a>(&'a mut self, a_is_expected: bool) -> Equate<'a, 'infcx, 'tcx> {
         .                   Equate::new(self, a_is_expected)
         .               }
         .           
   876,676 ( 0.00%)      pub fn sub<'a>(&'a mut self, a_is_expected: bool) -> Sub<'a, 'infcx, 'tcx> {
         .                   Sub::new(self, a_is_expected)
   438,338 ( 0.00%)      }
         .           
         .               pub fn lub<'a>(&'a mut self, a_is_expected: bool) -> Lub<'a, 'infcx, 'tcx> {
         .                   Lub::new(self, a_is_expected)
         .               }
         .           
 2,790,900 ( 0.00%)      pub fn glb<'a>(&'a mut self, a_is_expected: bool) -> Glb<'a, 'infcx, 'tcx> {
         .                   Glb::new(self, a_is_expected)
 1,395,450 ( 0.00%)      }
         .           
         .               /// Here, `dir` is either `EqTo`, `SubtypeOf`, or `SupertypeOf`.
         .               /// The idea is that we should ensure that the type `a_ty` is equal
         .               /// to, a subtype of, or a supertype of (respectively) the type
         .               /// to which `b_vid` is bound.
         .               ///
         .               /// Since `b_vid` has not yet been instantiated with a type, we
         .               /// will first instantiate `b_vid` with a *generalized* version
         .               /// of `a_ty`. Generalization introduces other inference
         .               /// variables wherever subtyping could occur.
 4,594,997 ( 0.01%)      pub fn instantiate(
         .                   &mut self,
         .                   a_ty: Ty<'tcx>,
         .                   dir: RelationDir,
         .                   b_vid: ty::TyVid,
         .                   a_is_expected: bool,
         .               ) -> RelateResult<'tcx, ()> {
         .                   use self::RelationDir::*;
         .           
-- line 333 ----------------------------------------
-- line 342 ----------------------------------------
         .                   // - `a_ty == &'x ?1`, where `'x` is some free region and `?1` is an
         .                   //   inference variable,
         .                   // - and `dir` == `SubtypeOf`.
         .                   //
         .                   // Then the generalized form `b_ty` would be `&'?2 ?3`, where
         .                   // `'?2` and `?3` are fresh region/type inference
         .                   // variables. (Down below, we will relate `a_ty <: b_ty`,
         .                   // adding constraints like `'x: '?2` and `?1 <: ?3`.)
   417,705 ( 0.00%)          let Generalization { ty: b_ty, needs_wf } = self.generalize(a_ty, b_vid, dir)?;
         .                   debug!(
         .                       "instantiate(a_ty={:?}, dir={:?}, b_vid={:?}, generalized b_ty={:?})",
         .                       a_ty, dir, b_vid, b_ty
         .                   );
 2,923,935 ( 0.00%)          self.infcx.inner.borrow_mut().type_variables().instantiate(b_vid, b_ty);
         .           
   417,705 ( 0.00%)          if needs_wf {
         .                       self.obligations.push(Obligation::new(
         .                           self.trace.cause.clone(),
         .                           self.param_env,
         .                           ty::Binder::dummy(ty::PredicateKind::WellFormed(b_ty.into()))
         .                               .to_predicate(self.infcx.tcx),
         .                       ));
         .                   }
         .           
         .                   // Finally, relate `b_ty` to `a_ty`, as described in previous comment.
         .                   //
         .                   // FIXME(#16847): This code is non-ideal because all these subtype
         .                   // relations wind up attributed to the same spans. We need
         .                   // to associate causes/spans with each of the relations in
         .                   // the stack to get this right.
 1,596,932 ( 0.00%)          match dir {
   983,425 ( 0.00%)              EqTo => self.equate(a_is_expected).relate(a_ty, b_ty),
   184,720 ( 0.00%)              SubtypeOf => self.sub(a_is_expected).relate(a_ty, b_ty),
   368,152 ( 0.00%)              SupertypeOf => self.sub(a_is_expected).relate_with_variance(
         .                           ty::Contravariant,
         .                           ty::VarianceDiagInfo::default(),
         .                           a_ty,
         .                           b_ty,
         .                       ),
         .                   }?;
         .           
   417,705 ( 0.00%)          Ok(())
 3,341,816 ( 0.00%)      }
         .           
         .               /// Attempts to generalize `ty` for the type variable `for_vid`.
         .               /// This checks for cycle -- that is, whether the type `ty`
         .               /// references `for_vid`. The `dir` is the "direction" for which we
         .               /// a performing the generalization (i.e., are we producing a type
         .               /// that can be used as a supertype etc).
         .               ///
         .               /// Preconditions:
-- line 392 ----------------------------------------
-- line 401 ----------------------------------------
         .                   debug!("generalize(ty={:?}, for_vid={:?}, dir={:?}", ty, for_vid, dir);
         .                   // Determine the ambient variance within which `ty` appears.
         .                   // The surrounding equation is:
         .                   //
         .                   //     ty [op] ty2
         .                   //
         .                   // where `op` is either `==`, `<:`, or `:>`. This maps quite
         .                   // naturally.
 1,670,908 ( 0.00%)          let ambient_variance = match dir {
         .                       RelationDir::EqTo => ty::Invariant,
         .                       RelationDir::SubtypeOf => ty::Covariant,
         .                       RelationDir::SupertypeOf => ty::Contravariant,
         .                   };
         .           
         .                   debug!("generalize: ambient_variance = {:?}", ambient_variance);
         .           
 4,177,270 ( 0.01%)          let for_universe = match self.infcx.inner.borrow_mut().type_variables().probe(for_vid) {
         .                       v @ TypeVariableValue::Known { .. } => {
         .                           bug!("instantiating {:?} which has a known value {:?}", for_vid, v,)
         .                       }
         .                       TypeVariableValue::Unknown { universe } => universe,
         .                   };
         .           
         .                   debug!("generalize: for_universe = {:?}", for_universe);
         .                   debug!("generalize: trace = {:?}", self.trace);
         .           
 4,177,270 ( 0.01%)          let mut generalize = Generalizer {
         .                       infcx: self.infcx,
         .                       cause: &self.trace.cause,
         .                       for_vid_sub_root: self.infcx.inner.borrow_mut().type_variables().sub_root_var(for_vid),
         .                       for_universe,
         .                       ambient_variance,
         .                       needs_wf: false,
         .                       root_ty: ty,
   417,727 ( 0.00%)              param_env: self.param_env,
         .                       cache: SsoHashMap::new(),
         .                   };
         .           
   835,454 ( 0.00%)          let ty = match generalize.relate(ty, ty) {
   417,705 ( 0.00%)              Ok(ty) => ty,
         .                       Err(e) => {
         .                           debug!("generalize: failure {:?}", e);
       132 ( 0.00%)                  return Err(e);
         .                       }
         .                   };
   417,705 ( 0.00%)          let needs_wf = generalize.needs_wf;
         .                   debug!("generalize: success {{ {:?}, {:?} }}", ty, needs_wf);
         .                   Ok(Generalization { ty, needs_wf })
         .               }
         .           
         .               pub fn add_const_equate_obligation(
         .                   &mut self,
         .                   a_is_expected: bool,
         .                   a: &'tcx ty::Const<'tcx>,
-- line 454 ----------------------------------------
-- line 528 ----------------------------------------
         .               /// will force the calling code to check that `WF(Foo<?C, ?D>)`
         .               /// holds, which in turn implies that `?C::Item == ?D`. So once
         .               /// `?C` is constrained, that should suffice to restrict `?D`.
         .               needs_wf: bool,
         .           }
         .           
         .           impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {
         .               fn tcx(&self) -> TyCtxt<'tcx> {
 1,927,444 ( 0.00%)          self.infcx.tcx
         .               }
         .               fn param_env(&self) -> ty::ParamEnv<'tcx> {
     2,961 ( 0.00%)          self.param_env
         .               }
         .           
         .               fn tag(&self) -> &'static str {
         .                   "Generalizer"
         .               }
         .           
         .               fn a_is_expected(&self) -> bool {
         .                   true
         .               }
         .           
 1,017,988 ( 0.00%)      fn binders<T>(
         .                   &mut self,
         .                   a: ty::Binder<'tcx, T>,
         .                   b: ty::Binder<'tcx, T>,
         .               ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>
         .               where
         .                   T: Relate<'tcx>,
         .               {
 1,403,159 ( 0.00%)          Ok(a.rebind(self.relate(a.skip_binder(), b.skip_binder())?))
 1,017,988 ( 0.00%)      }
         .           
 4,692,501 ( 0.01%)      fn relate_item_substs(
         .                   &mut self,
         .                   item_def_id: DefId,
         .                   a_subst: SubstsRef<'tcx>,
         .                   b_subst: SubstsRef<'tcx>,
         .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
   426,591 ( 0.00%)          if self.ambient_variance == ty::Variance::Invariant {
         .                       // Avoid fetching the variance if we are in an invariant
         .                       // context; no need, and it can induce dependency cycles
         .                       // (e.g., #41849).
   154,008 ( 0.00%)              relate::relate_substs(self, None, a_subst, b_subst)
         .                   } else {
         .                       let tcx = self.tcx();
         .                       let opt_variances = tcx.variances_of(item_def_id);
 1,362,915 ( 0.00%)              relate::relate_substs(self, Some((item_def_id, &opt_variances)), a_subst, b_subst)
         .                   }
 3,839,319 ( 0.01%)      }
         .           
   430,776 ( 0.00%)      fn relate_with_variance<T: Relate<'tcx>>(
         .                   &mut self,
         .                   variance: ty::Variance,
         .                   _info: ty::VarianceDiagInfo<'tcx>,
         .                   a: T,
         .                   b: T,
         .               ) -> RelateResult<'tcx, T> {
         .                   let old_ambient_variance = self.ambient_variance;
 3,700,848 ( 0.01%)          self.ambient_variance = self.ambient_variance.xform(variance);
         .           
         .                   let result = self.relate(a, b);
   725,904 ( 0.00%)          self.ambient_variance = old_ambient_variance;
         .                   result
   335,048 ( 0.00%)      }
         .           
 8,901,774 ( 0.01%)      fn tys(&mut self, t: Ty<'tcx>, t2: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {
   989,086 ( 0.00%)          assert_eq!(t, t2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==
         .           
 5,934,516 ( 0.01%)          if let Some(result) = self.cache.get(&t) {
    39,140 ( 0.00%)              return result.clone();
         .                   }
         .                   debug!("generalize: t={:?}", t);
         .           
         .                   // Check to see whether the type we are generalizing references
         .                   // any other type variable related to `vid` via
         .                   // subtyping. This is basically our "occurs check", preventing
         .                   // us from creating infinitely sized types.
 2,960,191 ( 0.00%)          let result = match *t.kind() {
     3,598 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
     3,598 ( 0.00%)                  let vid = self.infcx.inner.borrow_mut().type_variables().root_var(vid);
     3,598 ( 0.00%)                  let sub_vid = self.infcx.inner.borrow_mut().type_variables().sub_root_var(vid);
     3,598 ( 0.00%)                  if sub_vid == self.for_vid_sub_root {
         .                               // If sub-roots are equal, then `for_vid` and
         .                               // `vid` are related via subtyping.
       110 ( 0.00%)                      Err(TypeError::CyclicTy(self.root_ty))
         .                           } else {
    21,456 ( 0.00%)                      let probe = self.infcx.inner.borrow_mut().type_variables().probe(vid);
     7,152 ( 0.00%)                      match probe {
         .                                   TypeVariableValue::Known { value: u } => {
         .                                       debug!("generalize: known value {:?}", u);
         .                                       self.relate(u, u)
         .                                   }
         .                                   TypeVariableValue::Unknown { universe } => {
    12,925 ( 0.00%)                              match self.ambient_variance {
         .                                           // Invariant: no need to make a fresh type variable.
         .                                           ty::Invariant => {
     4,640 ( 0.00%)                                      if self.for_universe.can_name(universe) {
     3,440 ( 0.00%)                                          return Ok(t);
         .                                               }
         .                                           }
         .           
         .                                           // Bivariant: make a fresh var, but we
         .                                           // may need a WF predicate. See
         .                                           // comment on `needs_wf` field for
         .                                           // more info.
         .                                           ty::Bivariant => self.needs_wf = true,
         .           
         .                                           // Co/contravariant: this will be
         .                                           // sufficiently constrained later on.
         .                                           ty::Covariant | ty::Contravariant => (),
         .                                       }
         .           
         .                                       let origin =
    15,525 ( 0.00%)                                  *self.infcx.inner.borrow_mut().type_variables().var_origin(vid);
    12,075 ( 0.00%)                              let new_var_id = self
         .                                           .infcx
         .                                           .inner
         .                                           .borrow_mut()
         .                                           .type_variables()
    12,075 ( 0.00%)                                  .new_var(self.for_universe, origin);
         .                                       let u = self.tcx().mk_ty_var(new_var_id);
         .           
         .                                       // Record that we replaced `vid` with `new_var_id` as part of a generalization
         .                                       // operation. This is needed to detect cyclic types. To see why, see the
         .                                       // docs in the `type_variables` module.
     8,625 ( 0.00%)                              self.infcx.inner.borrow_mut().type_variables().sub(vid, new_var_id);
         .                                       debug!("generalize: replacing original vid={:?} with new={:?}", vid, u);
     3,450 ( 0.00%)                              Ok(u)
         .                                   }
         .                               }
         .                           }
         .                       }
         .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_)) => {
         .                           // No matter what mode we are in,
         .                           // integer/floating-point types must be equal to be
         .                           // relatable.
       175 ( 0.00%)                  Ok(t)
         .                       }
 2,926,584 ( 0.00%)              _ => relate::super_relate_tys(self, t, t),
         .                   };
         .           
 9,784,410 ( 0.01%)          self.cache.insert(t, result.clone());
 5,870,646 ( 0.01%)          return result;
 8,901,774 ( 0.01%)      }
         .           
 1,510,040 ( 0.00%)      fn regions(
         .                   &mut self,
         .                   r: ty::Region<'tcx>,
         .                   r2: ty::Region<'tcx>,
         .               ) -> RelateResult<'tcx, ty::Region<'tcx>> {
    60,856 ( 0.00%)          assert_eq!(r, r2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==
         .           
         .                   debug!("generalize: regions r={:?}", r);
         .           
   121,712 ( 0.00%)          match *r {
         .                       // Never make variables for regions bound within the type itself,
         .                       // nor for erased regions.
         .                       ty::ReLateBound(..) | ty::ReErased => {
         .                           return Ok(r);
         .                       }
         .           
         .                       ty::RePlaceholder(..)
         .                       | ty::ReVar(..)
-- line 691 ----------------------------------------
-- line 697 ----------------------------------------
         .                       }
         .                   }
         .           
         .                   // If we are in an invariant context, we can re-use the region
         .                   // as is, unless it happens to be in some universe that we
         .                   // can't name. (In the case of a region *variable*, we could
         .                   // use it if we promoted it into our universe, but we don't
         .                   // bother.)
   370,526 ( 0.00%)          if let ty::Invariant = self.ambient_variance {
   223,542 ( 0.00%)              let r_universe = self.infcx.universe_of_region(r);
   521,574 ( 0.00%)              if self.for_universe.can_name(r_universe) {
         .                           return Ok(r);
         .                       }
         .                   }
         .           
         .                   // FIXME: This is non-ideal because we don't give a
         .                   // very descriptive origin for this region variable.
 1,107,706 ( 0.00%)          Ok(self.infcx.next_region_var_in_universe(MiscVariable(self.cause.span), self.for_universe))
 1,510,040 ( 0.00%)      }
         .           
    26,775 ( 0.00%)      fn consts(
         .                   &mut self,
         .                   c: &'tcx ty::Const<'tcx>,
         .                   c2: &'tcx ty::Const<'tcx>,
         .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
     8,883 ( 0.00%)          assert_eq!(c, c2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==
         .           
         .                   match c.val {
         .                       ty::ConstKind::Infer(InferConst::Var(vid)) => {
        14 ( 0.00%)                  let mut inner = self.infcx.inner.borrow_mut();
        56 ( 0.00%)                  let variable_table = &mut inner.const_unification_table();
        14 ( 0.00%)                  let var_value = variable_table.probe_value(vid);
        28 ( 0.00%)                  match var_value.val {
         .                               ConstVariableValue::Known { value: u } => {
         .                                   drop(inner);
         .                                   self.relate(u, u)
         .                               }
        14 ( 0.00%)                      ConstVariableValue::Unknown { universe } => {
        70 ( 0.00%)                          if self.for_universe.can_name(universe) {
         .                                       Ok(c)
         .                                   } else {
         .                                       let new_var_id = variable_table.new_key(ConstVarValue {
         .                                           origin: var_value.origin,
         .                                           val: ConstVariableValue::Unknown { universe: self.for_universe },
         .                                       });
         .                                       Ok(self.tcx().mk_const_var(new_var_id, c.ty))
         .                                   }
-- line 743 ----------------------------------------
-- line 754 ----------------------------------------
         .                               substs,
         .                               substs,
         .                           )?;
         .                           Ok(self.tcx().mk_const(ty::Const {
         .                               ty: c.ty,
         .                               val: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),
         .                           }))
         .                       }
    14,805 ( 0.00%)              _ => relate::super_relate_consts(self, c, c),
         .                   }
    26,775 ( 0.00%)      }
         .           }
         .           
         .           pub trait ConstEquateRelation<'tcx>: TypeRelation<'tcx> {
         .               /// Register an obligation that both constants must be equal to each other.
         .               ///
         .               /// If they aren't equal then the relation doesn't hold.
         .               fn const_equate_obligation(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>);
         .           }
-- line 772 ----------------------------------------
-- line 824 ----------------------------------------
         .               target_vid: ty::ConstVid<'tcx>,
         .           }
         .           
         .           // We use `TypeRelation` here to propagate `RelateResult` upwards.
         .           //
         .           // Both inputs are expected to be the same.
         .           impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {
         .               fn tcx(&self) -> TyCtxt<'tcx> {
     1,627 ( 0.00%)          self.infcx.tcx
         .               }
         .           
         .               fn param_env(&self) -> ty::ParamEnv<'tcx> {
       408 ( 0.00%)          self.param_env
         .               }
         .           
         .               fn tag(&self) -> &'static str {
         .                   "ConstInferUnifier"
         .               }
         .           
         .               fn a_is_expected(&self) -> bool {
         .                   true
-- line 844 ----------------------------------------
-- line 937 ----------------------------------------
         .                       return Ok(r);
         .                   } else {
         .                       // FIXME: This is non-ideal because we don't give a
         .                       // very descriptive origin for this region variable.
         .                       Ok(self.infcx.next_region_var_in_universe(MiscVariable(self.span), self.for_universe))
         .                   }
         .               }
         .           
     7,752 ( 0.00%)      #[tracing::instrument(level = "debug", skip(self))]
         .               fn consts(
         .                   &mut self,
         .                   c: &'tcx ty::Const<'tcx>,
         .                   _c: &'tcx ty::Const<'tcx>,
         .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
         .                   debug_assert_eq!(c, _c);
         .                   debug!("ConstInferUnifier: c={:?}", c);
         .           
     2,040 ( 0.00%)          match c.val {
         .                       ty::ConstKind::Infer(InferConst::Var(vid)) => {
         .                           // Check if the current unification would end up
         .                           // unifying `target_vid` with a const which contains
         .                           // an inference variable which is unioned with `target_vid`.
         .                           //
         .                           // Not doing so can easily result in stack overflows.
         .                           if self
         .                               .infcx
-- line 962 ----------------------------------------
-- line 1000 ----------------------------------------
         .                               substs,
         .                               substs,
         .                           )?;
         .                           Ok(self.tcx().mk_const(ty::Const {
         .                               ty: c.ty,
         .                               val: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),
         .                           }))
         .                       }
     2,040 ( 0.00%)              _ => relate::super_relate_consts(self, c, c),
         .                   }
         .               }
         .           }

16,523,647 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 118 ----------------------------------------
         .               /// let a = [1, 2, 3];
         .               /// assert_eq!(a.len(), 3);
         .               /// ```
         .               #[lang = "slice_len_fn"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_len", since = "1.39.0")]
         .               #[inline]
         .               // SAFETY: const sound because we transmute out the length field as a usize (which it must be)
    25,485 ( 0.00%)      pub const fn len(&self) -> usize {
         .                   // FIXME: Replace with `crate::ptr::metadata(self)` when that is const-stable.
         .                   // As of this writing this causes a "Const-stable functions can only call other
         .                   // const-stable functions" error.
         .           
         .                   // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T
         .                   // and PtrComponents<T> have the same memory layouts. Only std can make this
         .                   // guarantee.
    25,485 ( 0.00%)          unsafe { crate::ptr::PtrRepr { const_ptr: self }.components.metadata }
    16,990 ( 0.00%)      }
         .           
         .               /// Returns `true` if the slice has a length of 0.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let a = [1, 2, 3];
         .               /// assert!(!a.is_empty());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
         .               #[inline]
         .               pub const fn is_empty(&self) -> bool {
14,352,960 ( 0.02%)          self.len() == 0
         .               }
         .           
         .               /// Returns the first element of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
         .               ///
         .               /// let w: &[i32] = &[];
         .               /// assert_eq!(None, w.first());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn first(&self) -> Option<&T> {
   207,152 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
         .               }
         .           
         .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
         .               ///     *first = 5;
         .               /// }
         .               /// assert_eq!(x, &[5, 1, 2]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
         .               #[inline]
         .               pub const fn first_mut(&mut self) -> Option<&mut T> {
     5,428 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
         .               }
         .           
         .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 197 ----------------------------------------
         .               ///     assert_eq!(first, &0);
         .               ///     assert_eq!(elements, &[1, 2]);
         .               /// }
         .               /// ```
         .               #[stable(feature = "slice_splits", since = "1.5.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn split_first(&self) -> Option<(&T, &[T])> {
     1,639 ( 0.00%)          if let [first, tail @ ..] = self { Some((first, tail)) } else { None }
         .               }
         .           
         .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 213 ----------------------------------------
-- line 237 ----------------------------------------
         .               ///     assert_eq!(last, &2);
         .               ///     assert_eq!(elements, &[0, 1]);
         .               /// }
         .               /// ```
         .               #[stable(feature = "slice_splits", since = "1.5.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
   852,035 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
         .               }
         .           
         .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 275 ----------------------------------------
         .               /// assert_eq!(Some(&30), v.last());
         .               ///
         .               /// let w: &[i32] = &[];
         .               /// assert_eq!(None, w.last());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
        95 ( 0.00%)      pub const fn last(&self) -> Option<&T> {
 5,113,986 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
        57 ( 0.00%)      }
         .           
         .               /// Returns a mutable pointer to the last item in the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
         .               ///
-- line 293 ----------------------------------------
-- line 295 ----------------------------------------
         .               ///     *last = 10;
         .               /// }
         .               /// assert_eq!(x, &[0, 1, 10]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
         .               #[inline]
         .               pub const fn last_mut(&mut self) -> Option<&mut T> {
12,896,271 ( 0.02%)          if let [.., last] = self { Some(last) } else { None }
         .               }
         .           
         .               /// Returns a reference to an element or subslice depending on the type of
         .               /// index.
         .               ///
         .               /// - If given a position, returns a reference to the element at that
         .               ///   position or `None` if out of bounds.
         .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 317 ----------------------------------------
         .               /// let v = [10, 40, 30];
         .               /// assert_eq!(Some(&40), v.get(1));
         .               /// assert_eq!(Some(&[10, 40][..]), v.get(0..2));
         .               /// assert_eq!(None, v.get(3));
         .               /// assert_eq!(None, v.get(0..4));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
     6,808 ( 0.00%)      pub fn get<I>(&self, index: I) -> Option<&I::Output>
         .               where
         .                   I: SliceIndex<Self>,
         .               {
     1,702 ( 0.00%)          index.get(self)
     1,702 ( 0.00%)      }
         .           
         .               /// Returns a mutable reference to an element or subslice depending on the
         .               /// type of index (see [`get`]) or `None` if the index is out of bounds.
         .               ///
         .               /// [`get`]: slice::get
         .               ///
         .               /// # Examples
         .               ///
-- line 338 ----------------------------------------
-- line 447 ----------------------------------------
         .               ///     }
         .               /// }
         .               /// ```
         .               ///
         .               /// [`as_mut_ptr`]: slice::as_mut_ptr
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
         .               #[inline]
   203,148 ( 0.00%)      pub const fn as_ptr(&self) -> *const T {
28,596,910 ( 0.04%)          self as *const [T] as *const T
   101,574 ( 0.00%)      }
         .           
         .               /// Returns an unsafe mutable pointer to the slice's buffer.
         .               ///
         .               /// The caller must ensure that the slice outlives the pointer this
         .               /// function returns, or else it will end up pointing to garbage.
         .               ///
         .               /// Modifying the container referenced by this slice may cause its buffer
         .               /// to be reallocated, which would also make any pointers to it invalid.
-- line 465 ----------------------------------------
-- line 475 ----------------------------------------
         .               ///         *x_ptr.add(i) += 2;
         .               ///     }
         .               /// }
         .               /// assert_eq!(x, &[3, 4, 6]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline]
     1,560 ( 0.00%)      pub const fn as_mut_ptr(&mut self) -> *mut T {
        24 ( 0.00%)          self as *mut [T] as *mut T
       780 ( 0.00%)      }
         .           
         .               /// Returns the two raw pointers spanning the slice.
         .               ///
         .               /// The returned range is half-open, which means that the end pointer
         .               /// points *one past* the last element of the slice. This way, an empty
         .               /// slice is represented by two equal pointers, and the difference between
         .               /// the two pointers represents the size of the slice.
         .               ///
-- line 493 ----------------------------------------
-- line 556 ----------------------------------------
         .               /// [`as_mut_ptr`]: slice::as_mut_ptr
         .               #[stable(feature = "slice_ptr_range", since = "1.48.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline]
         .               pub const fn as_mut_ptr_range(&mut self) -> Range<*mut T> {
         .                   let start = self.as_mut_ptr();
         .                   // SAFETY: See as_ptr_range() above for why `add` here is safe.
         .                   let end = unsafe { start.add(self.len()) };
         1 ( 0.00%)          start..end
         .               }
         .           
         .               /// Swaps two elements in the slice.
         .               ///
         .               /// # Arguments
         .               ///
         .               /// * a - The index of the first element
         .               /// * b - The index of the second element
-- line 572 ----------------------------------------
-- line 582 ----------------------------------------
         .               /// v.swap(2, 4);
         .               /// assert!(v == ["a", "b", "e", "d", "c"]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
         .               #[inline]
         .               #[track_caller]
         .               pub const fn swap(&mut self, a: usize, b: usize) {
   153,820 ( 0.00%)          let _ = &self[a];
   571,979 ( 0.00%)          let _ = &self[b];
         .           
         .                   // SAFETY: we just checked that both `a` and `b` are in bounds
         .                   unsafe { self.swap_unchecked(a, b) }
         .               }
         .           
         .               /// Swaps two elements in the slice, without doing bounds checking.
         .               ///
         .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 644 ----------------------------------------
         .               /// ```
         .               /// let mut v = [1, 2, 3];
         .               /// v.reverse();
         .               /// assert!(v == [3, 2, 1]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               pub fn reverse(&mut self) {
         2 ( 0.00%)          let half_len = self.len() / 2;
         .                   let Range { start, end } = self.as_mut_ptr_range();
         .           
         .                   // These slices will skip the middle item for an odd length,
         .                   // since that one doesn't need to move.
         .                   let (front_half, back_half) =
         .                       // SAFETY: Both are subparts of the original slice, so the memory
         .                       // range is valid, and they don't overlap because they're each only
         .                       // half (or less) of the original slice.
-- line 660 ----------------------------------------
-- line 677 ----------------------------------------
         .           
         .                       // Because this function is first compiled in isolation,
         .                       // this check tells LLVM that the indexing below is
         .                       // in-bounds.  Then after inlining -- once the actual
         .                       // lengths of the slices are known -- it's removed.
         .                       let (a, b) = (&mut a[..n], &mut b[..n]);
         .           
         .                       for i in 0..n {
    18,887 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
         .                       }
         .                   }
         .               }
         .           
         .               /// Returns an iterator over the slice.
         .               ///
         .               /// # Examples
         .               ///
-- line 693 ----------------------------------------
-- line 697 ----------------------------------------
         .               ///
         .               /// assert_eq!(iterator.next(), Some(&1));
         .               /// assert_eq!(iterator.next(), Some(&2));
         .               /// assert_eq!(iterator.next(), Some(&4));
         .               /// assert_eq!(iterator.next(), None);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
    63,933 ( 0.00%)      pub fn iter(&self) -> Iter<'_, T> {
    63,933 ( 0.00%)          Iter::new(self)
    42,622 ( 0.00%)      }
         .           
         .               /// Returns an iterator that allows modifying each value.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [1, 2, 4];
         .               /// for elem in x.iter_mut() {
         .               ///     *elem += 2;
         .               /// }
         .               /// assert_eq!(x, &[3, 4, 6]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
     1,056 ( 0.00%)      pub fn iter_mut(&mut self) -> IterMut<'_, T> {
     1,056 ( 0.00%)          IterMut::new(self)
       704 ( 0.00%)      }
         .           
         .               /// Returns an iterator over all contiguous windows of length
         .               /// `size`. The windows overlap. If the slice is shorter than
         .               /// `size`, the iterator returns no values.
         .               ///
         .               /// # Panics
         .               ///
         .               /// Panics if `size` is 0.
-- line 732 ----------------------------------------
-- line 1499 ----------------------------------------
         .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
         .               ///     assert_eq!(right, []);
         .               /// }
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
         .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
       372 ( 0.00%)          assert!(mid <= self.len());
         .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
         .                   // fulfills the requirements of `from_raw_parts_mut`.
         .                   unsafe { self.split_at_unchecked(mid) }
         .               }
         .           
         .               /// Divides one mutable slice into two at an index.
         .               ///
         .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
         .               /// left[1] = 2;
         .               /// right[1] = 4;
         .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
         .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
 1,112,454 ( 0.00%)          assert!(mid <= self.len());
         .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
         .                   // fulfills the requirements of `from_raw_parts_mut`.
         .                   unsafe { self.split_at_mut_unchecked(mid) }
         .               }
         .           
         .               /// Divides one slice into two at an index, without doing bounds checking.
         .               ///
         .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
         .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
         .                   let len = self.len();
         .                   let ptr = self.as_mut_ptr();
         .           
         .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
         .                   //
         .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
         .                   // is fine.
   138,570 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
         .               }
         .           
         .               /// Divides one slice into an array and a remainder slice at an index.
         .               ///
         .               /// The array will contain all indices from `[0, N)` (excluding
         .               /// the index `N` itself) and the slice will contain all
         .               /// indices from `[N, len)` (excluding the index `len` itself).
         .               ///
-- line 1644 ----------------------------------------
-- line 2109 ----------------------------------------
         .               ///
         .               /// ```
         .               /// let v = [String::from("hello"), String::from("world")]; // slice of `String`
         .               /// assert!(v.iter().any(|e| e == "hello")); // search with `&str`
         .               /// assert!(!v.iter().any(|e| e == "hi"));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
       304 ( 0.00%)      pub fn contains(&self, x: &T) -> bool
         .               where
         .                   T: PartialEq,
         .               {
     4,898 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
       152 ( 0.00%)      }
         .           
         .               /// Returns `true` if `needle` is a prefix of the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
         .               /// assert!(v.starts_with(&[10]));
-- line 2130 ----------------------------------------
-- line 2137 ----------------------------------------
         .               ///
         .               /// ```
         .               /// let v = &[10, 40, 30];
         .               /// assert!(v.starts_with(&[]));
         .               /// let v: &[u8] = &[];
         .               /// assert!(v.starts_with(&[]));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
    75,579 ( 0.00%)      pub fn starts_with(&self, needle: &[T]) -> bool
         .               where
         .                   T: PartialEq,
         .               {
    32,391 ( 0.00%)          let n = needle.len();
   308,703 ( 0.00%)          self.len() >= n && needle == &self[..n]
    53,985 ( 0.00%)      }
         .           
         .               /// Returns `true` if `needle` is a suffix of the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
         .               /// assert!(v.ends_with(&[30]));
-- line 2159 ----------------------------------------
-- line 2166 ----------------------------------------
         .               ///
         .               /// ```
         .               /// let v = &[10, 40, 30];
         .               /// assert!(v.ends_with(&[]));
         .               /// let v: &[u8] = &[];
         .               /// assert!(v.ends_with(&[]));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
     6,216 ( 0.00%)      pub fn ends_with(&self, needle: &[T]) -> bool
         .               where
         .                   T: PartialEq,
         .               {
     7,992 ( 0.00%)          let (m, n) = (self.len(), needle.len());
   281,512 ( 0.00%)          m >= n && needle == &self[m - n..]
     4,440 ( 0.00%)      }
         .           
         .               /// Returns a subslice with the prefix removed.
         .               ///
         .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
         .               /// If `prefix` is empty, simply returns the original slice.
         .               ///
         .               /// If the slice does not start with `prefix`, returns `None`.
         .               ///
-- line 2188 ----------------------------------------
-- line 2293 ----------------------------------------
         .               /// s.insert(idx, num);
         .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
         .               where
         .                   T: Ord,
         .               {
         3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
         .               }
         .           
         .               /// Binary searches this sorted slice with a comparator function.
         .               ///
         .               /// The comparator function should implement an order consistent
         .               /// with the sort order of the underlying slice, returning an
         .               /// order code that indicates whether its argument is `Less`,
         .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
         .               #[inline]
         .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
         .               where
         .                   F: FnMut(&'a T) -> Ordering,
         .               {
         .                   let mut size = self.len();
         .                   let mut left = 0;
         .                   let mut right = size;
44,150,762 ( 0.06%)          while left < right {
66,939,705 ( 0.10%)              let mid = left + size / 2;
         .           
         .                       // SAFETY: the call is made safe by the following invariants:
         .                       // - `mid >= 0`
         .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
 5,659,900 ( 0.01%)              let cmp = f(unsafe { self.get_unchecked(mid) });
         .           
         .                       // The reason why we use if/else control flow rather than match
         .                       // is because match reorders comparison operations, which is perf sensitive.
         .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
17,896,983 ( 0.03%)              if cmp == Less {
32,253,471 ( 0.05%)                  left = mid + 1;
10,265,591 ( 0.02%)              } else if cmp == Greater {
         .                           right = mid;
         .                       } else {
         .                           // SAFETY: same as the `get_unchecked` above
         .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
         .                           return Ok(mid);
         .                       }
         .           
47,416,207 ( 0.07%)              size = right - left;
         .                   }
         .                   Err(left)
         .               }
         .           
         .               /// Binary searches this sorted slice with a key extraction function.
         .               ///
         .               /// Assumes that the slice is sorted by the key, for instance with
         .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3187 ----------------------------------------
         .               /// assert_eq!(slice, [4, 5, 3, 4, 5]);
         .               /// ```
         .               ///
         .               /// [`clone_from_slice`]: slice::clone_from_slice
         .               /// [`split_at_mut`]: slice::split_at_mut
         .               #[doc(alias = "memcpy")]
         .               #[stable(feature = "copy_from_slice", since = "1.9.0")]
         .               #[track_caller]
       380 ( 0.00%)      pub fn copy_from_slice(&mut self, src: &[T])
         .               where
         .                   T: Copy,
         .               {
         .                   // The panic code path was put into a cold function to not bloat the
         .                   // call site.
         .                   #[inline(never)]
         .                   #[cold]
         .                   #[track_caller]
         .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
         .                       panic!(
         .                           "source slice length ({}) does not match destination slice length ({})",
         .                           src_len, dst_len,
         .                       );
         .                   }
         .           
 1,334,390 ( 0.00%)          if self.len() != src.len() {
         .                       len_mismatch_fail(self.len(), src.len());
         .                   }
         .           
         .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
         .                   // checked to have the same length. The slices cannot overlap because
         .                   // mutable references are exclusive.
         .                   unsafe {
       228 ( 0.00%)              ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
         .                   }
        76 ( 0.00%)      }
         .           
         .               /// Copies elements from one part of the slice to another part of itself,
         .               /// using a memmove.
         .               ///
         .               /// `src` is the range within `self` to copy from. `dest` is the starting
         .               /// index of the range within `self` to copy to, which will have the same
         .               /// length as `src`. The two ranges may overlap. The ends of the two ranges
         .               /// must be less than or equal to `self.len()`.
-- line 3229 ----------------------------------------
-- line 3380 ----------------------------------------
         .                       }
         .                       a << k
         .                   }
         .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
         .                   let ts: usize = mem::size_of::<U>() / gcd;
         .                   let us: usize = mem::size_of::<T>() / gcd;
         .           
         .                   // Armed with this knowledge, we can find how many `U`s we can fit!
         6 ( 0.00%)          let us_len = self.len() / ts * us;
         .                   // And how many `T`s will be in the trailing slice!
 2,102,390 ( 0.00%)          let ts_len = self.len() % ts;
         .                   (us_len, ts_len)
         .               }
         .           
         .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
         .               /// maintained.
         .               ///
         .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
         .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
         .                       return (self, &[], &[]);
         .                   }
         .           
         .                   // First, find at what point do we split between the first and 2nd slice. Easy with
         .                   // ptr.align_offset.
         .                   let ptr = self.as_ptr();
         .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
         .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
 2,102,390 ( 0.00%)          if offset > self.len() {
         .                       (self, &[], &[])
         .                   } else {
         .                       let (left, rest) = self.split_at(offset);
         .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
         .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
         .                       // since the caller guarantees that we can transmute `T` to `U` safely.
         .                       unsafe {
         .                           (
         .                               left,
         .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
 2,102,396 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
         .                           )
         .                       }
         .                   }
         .               }
         .           
         .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
         .               /// maintained.
         .               ///
-- line 3456 ----------------------------------------
-- line 3731 ----------------------------------------
         .               /// let v = [1, 2, 3, 3, 5, 6, 7];
         .               /// let i = v.partition_point(|&x| x < 5);
         .               ///
         .               /// assert_eq!(i, 4);
         .               /// assert!(v[..i].iter().all(|&x| x < 5));
         .               /// assert!(v[i..].iter().all(|&x| !(x < 5)));
         .               /// ```
         .               #[stable(feature = "partition_point", since = "1.52.0")]
       117 ( 0.00%)      pub fn partition_point<P>(&self, mut pred: P) -> usize
         .               where
         .                   P: FnMut(&T) -> bool,
         .               {
         .                   self.binary_search_by(|x| if pred(x) { Less } else { Greater }).unwrap_or_else(|i| i)
       234 ( 0.00%)      }
         .           
         .               /// Removes the subslice corresponding to the given range
         .               /// and returns a reference to it.
         .               ///
         .               /// Returns `None` and does not modify the slice if the given
         .               /// range is out of bounds.
         .               ///
         .               /// Note that this method only accepts one-sided ranges such as
-- line 3752 ----------------------------------------

46,891,135 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir                   

-- line 186 ----------------------------------------
          .           /// // use the values stored in map
          .           /// ```
          .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
          .               pub(crate) hash_builder: S,
          .               pub(crate) table: RawTable<(K, V), A>,
          .           }
          .           
          .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
      2,040 ( 0.00%)      fn clone(&self) -> Self {
     26,440 ( 0.00%)          HashMap {
          .                       hash_builder: self.hash_builder.clone(),
      5,820 ( 0.00%)              table: self.table.clone(),
          .                   }
      2,295 ( 0.00%)      }
          .           
          .               fn clone_from(&mut self, source: &Self) {
          .                   self.table.clone_from(&source.table);
          .           
          .                   // Update hash_builder only if we successfully cloned all elements.
          .                   self.hash_builder.clone_from(&source.hash_builder);
          .               }
          .           }
          .           
          .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
          .           /// instances of any functions like RawTable::reserve from being generated
          .           #[cfg_attr(feature = "inline-more", inline)]
         36 ( 0.00%)  pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
          .           where
          .               K: Borrow<Q>,
          .               Q: Hash,
          .               S: BuildHasher,
          .           {
  2,256,915 ( 0.00%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
         54 ( 0.00%)  }
          .           
          .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
          .           /// instances of any functions like RawTable::reserve from being generated
          .           #[cfg_attr(feature = "inline-more", inline)]
          .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
          .           where
          .               K: Borrow<Q>,
          .               Q: ?Sized + Eq,
          .           {
  6,344,055 ( 0.01%)      move |x| k.eq(x.0.borrow())
          .           }
          .           
          .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
          .           /// instances of any functions like RawTable::reserve from being generated
          .           #[cfg_attr(feature = "inline-more", inline)]
          .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
          .           where
          .               K: Borrow<Q>,
          .               Q: ?Sized + Eq,
          .           {
 16,010,123 ( 0.02%)      move |x| k.eq(x.borrow())
          .           }
          .           
          .           #[cfg(not(feature = "nightly"))]
          .           #[cfg_attr(feature = "inline-more", inline)]
          .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
          .           where
          .               K: Borrow<Q>,
          .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
          .               use core::hash::Hasher;
          .               let mut state = hash_builder.build_hasher();
          .               val.hash(&mut state);
          .               state.finish()
          .           }
          .           
          .           #[cfg(feature = "nightly")]
          .           #[cfg_attr(feature = "inline-more", inline)]
          2 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
          .           where
          .               K: Borrow<Q>,
          .               Q: Hash + ?Sized,
          .               S: BuildHasher,
          .           {
      8,896 ( 0.00%)      hash_builder.hash_one(val)
          4 ( 0.00%)  }
          .           
          .           #[cfg(not(feature = "nightly"))]
          .           #[cfg_attr(feature = "inline-more", inline)]
          .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
          .           where
          .               K: Hash,
          .               S: BuildHasher,
          .           {
-- line 274 ----------------------------------------
-- line 280 ----------------------------------------
          .           
          .           #[cfg(feature = "nightly")]
          .           #[cfg_attr(feature = "inline-more", inline)]
          .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
          .           where
          .               K: Hash,
          .               S: BuildHasher,
          .           {
    231,939 ( 0.00%)      hash_builder.hash_one(val)
          .           }
          .           
          .           #[cfg(feature = "ahash")]
          .           impl<K, V> HashMap<K, V, DefaultHashBuilder> {
          .               /// Creates an empty `HashMap`.
          .               ///
          .               /// The hash map is initially created with a capacity of 0, so it will not allocate until it
          .               /// is first inserted into.
-- line 296 ----------------------------------------
-- line 366 ----------------------------------------
          .               ///
          .               /// let s = DefaultHashBuilder::default();
          .               /// let mut map = HashMap::with_hasher(s);
          .               /// map.insert(1, 2);
          .               /// ```
          .               ///
          .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
          .               #[cfg_attr(feature = "inline-more", inline)]
        144 ( 0.00%)      pub const fn with_hasher(hash_builder: S) -> Self {
  4,964,518 ( 0.01%)          Self {
          .                       hash_builder,
         36 ( 0.00%)              table: RawTable::new(),
          .                   }
         36 ( 0.00%)      }
          .           
          .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
          .               /// to hash the keys.
          .               ///
          .               /// The hash map will be able to hold at least `capacity` elements without
          .               /// reallocating. If `capacity` is 0, the hash map will not allocate.
          .               ///
          .               /// Warning: `hash_builder` is normally randomly generated, and
-- line 387 ----------------------------------------
-- line 436 ----------------------------------------
          .               /// use hashbrown::HashMap;
          .               /// use hashbrown::hash_map::DefaultHashBuilder;
          .               ///
          .               /// let s = DefaultHashBuilder::default();
          .               /// let mut map = HashMap::with_hasher(s);
          .               /// map.insert(1, 2);
          .               /// ```
          .               #[cfg_attr(feature = "inline-more", inline)]
        144 ( 0.00%)      pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
        355 ( 0.00%)          Self {
          .                       hash_builder,
         36 ( 0.00%)              table: RawTable::new_in(alloc),
          .                   }
         36 ( 0.00%)      }
          .           
          .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
          .               /// to hash the keys. It will be allocated with the given allocator.
          .               ///
          .               /// The hash map will be able to hold at least `capacity` elements without
          .               /// reallocating. If `capacity` is 0, the hash map will not allocate.
          .               ///
          .               /// Warning: `hash_builder` is normally randomly generated, and
-- line 457 ----------------------------------------
-- line 527 ----------------------------------------
          .               /// map.insert("c", 3);
          .               ///
          .               /// for key in map.keys() {
          .               ///     println!("{}", key);
          .               /// }
          .               /// ```
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn keys(&self) -> Keys<'_, K, V> {
          6 ( 0.00%)          Keys { inner: self.iter() }
          .               }
          .           
          .               /// An iterator visiting all values in arbitrary order.
          .               /// The iterator element type is `&'a V`.
          .               ///
          .               /// # Examples
          .               ///
          .               /// ```
-- line 543 ----------------------------------------
-- line 662 ----------------------------------------
          .               /// use hashbrown::HashMap;
          .               ///
          .               /// let mut a = HashMap::new();
          .               /// assert_eq!(a.len(), 0);
          .               /// a.insert(1, "a");
          .               /// assert_eq!(a.len(), 1);
          .               /// ```
          .               #[cfg_attr(feature = "inline-more", inline)]
         36 ( 0.00%)      pub fn len(&self) -> usize {
    415,119 ( 0.00%)          self.table.len()
         36 ( 0.00%)      }
          .           
          .               /// Returns `true` if the map contains no elements.
          .               ///
          .               /// # Examples
          .               ///
          .               /// ```
          .               /// use hashbrown::HashMap;
          .               ///
          .               /// let mut a = HashMap::new();
          .               /// assert!(a.is_empty());
          .               /// a.insert(1, "a");
          .               /// assert!(!a.is_empty());
          .               /// ```
          .               #[cfg_attr(feature = "inline-more", inline)]
         36 ( 0.00%)      pub fn is_empty(&self) -> bool {
  1,486,969 ( 0.00%)          self.len() == 0
         72 ( 0.00%)      }
          .           
          .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
          .               /// allocated memory for reuse.
          .               ///
          .               /// # Examples
          .               ///
          .               /// ```
          .               /// use hashbrown::HashMap;
-- line 697 ----------------------------------------
-- line 790 ----------------------------------------
          .               /// use hashbrown::HashMap;
          .               ///
          .               /// let mut a = HashMap::new();
          .               /// a.insert(1, "a");
          .               /// a.clear();
          .               /// assert!(a.is_empty());
          .               /// ```
          .               #[cfg_attr(feature = "inline-more", inline)]
          6 ( 0.00%)      pub fn clear(&mut self) {
          .                   self.table.clear();
          6 ( 0.00%)      }
          .           
          .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
          .               /// The map cannot be used after calling this.
          .               /// The iterator element type is `K`.
          .               ///
          .               /// # Examples
          .               ///
          .               /// ```
-- line 808 ----------------------------------------
-- line 865 ----------------------------------------
          .               /// # Examples
          .               ///
          .               /// ```
          .               /// use hashbrown::HashMap;
          .               /// let mut map: HashMap<&str, i32> = HashMap::new();
          .               /// map.reserve(10);
          .               /// ```
          .               #[cfg_attr(feature = "inline-more", inline)]
         72 ( 0.00%)      pub fn reserve(&mut self, additional: usize) {
         72 ( 0.00%)          self.table
         36 ( 0.00%)              .reserve(additional, make_hasher::<K, _, V, S>(&self.hash_builder));
         36 ( 0.00%)      }
          .           
          .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
          .               /// in the given `HashMap<K,V>`. The collection may reserve more space to avoid
          .               /// frequent reallocations.
          .               ///
          .               /// # Errors
          .               ///
          .               /// If the capacity overflows, or the allocator reports a failure, then an error
-- line 884 ----------------------------------------
-- line 963 ----------------------------------------
          .               /// }
          .               ///
          .               /// assert_eq!(letters[&'s'], 2);
          .               /// assert_eq!(letters[&'t'], 3);
          .               /// assert_eq!(letters[&'u'], 1);
          .               /// assert_eq!(letters.get(&'y'), None);
          .               /// ```
          .               #[cfg_attr(feature = "inline-more", inline)]
      1,748 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
          .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
          .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
        175 ( 0.00%)              Entry::Occupied(OccupiedEntry {
          .                           hash,
          .                           key: Some(key),
          .                           elem,
          .                           table: self,
          .                       })
          .                   } else {
      2,010 ( 0.00%)              Entry::Vacant(VacantEntry {
          .                           hash,
          .                           key,
          .                           table: self,
          .                       })
          .                   }
      2,185 ( 0.00%)      }
          .           
          .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
          .               ///
          .               /// # Examples
          .               ///
          .               /// ```
          .               /// use hashbrown::HashMap;
          .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
          .               /// ```
          .               #[inline]
          .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
          .               where
          .                   K: Borrow<Q>,
          .                   Q: Hash + Eq,
          .               {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
 12,112,229 ( 0.02%)          match self.get_inner(k) {
          .                       Some(&(_, ref v)) => Some(v),
          .                       None => None,
          .                   }
          .               }
          .           
          .               /// Returns the key-value pair corresponding to the supplied key.
          .               ///
          .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1086 ----------------------------------------
          .                   // Avoid `Option::map` because it bloats LLVM IR.
          .                   match self.get_inner(k) {
          .                       Some(&(ref key, ref value)) => Some((key, value)),
          .                       None => None,
          .                   }
          .               }
          .           
          .               #[inline]
        370 ( 0.00%)      fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
          .               where
          .                   K: Borrow<Q>,
          .                   Q: Hash + Eq,
          .               {
 18,086,248 ( 0.03%)          if self.table.is_empty() {
         74 ( 0.00%)              None
          .                   } else {
          1 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
          .                       self.table.get(hash, equivalent_key(k))
          .                   }
        222 ( 0.00%)      }
          .           
          .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
          .               ///
          .               /// The supplied key may be any borrowed form of the map's key type, but
          .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
          .               /// the key type.
          .               ///
          .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1113 ----------------------------------------
-- line 1155 ----------------------------------------
          .               /// use hashbrown::HashMap;
          .               ///
          .               /// let mut map = HashMap::new();
          .               /// map.insert(1, "a");
          .               /// assert_eq!(map.contains_key(&1), true);
          .               /// assert_eq!(map.contains_key(&2), false);
          .               /// ```
          .               #[cfg_attr(feature = "inline-more", inline)]
  9,625,757 ( 0.01%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
          .               where
          .                   K: Borrow<Q>,
          .                   Q: Hash + Eq,
          .               {
        370 ( 0.00%)          self.get_inner(k).is_some()
 12,177,126 ( 0.02%)      }
          .           
          .               /// Returns a mutable reference to the value corresponding to the key.
          .               ///
          .               /// The key may be any borrowed form of the map's key type, but
          .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
          .               /// the key type.
          .               ///
          .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
          .               /// let mut map = HashMap::new();
          .               /// map.insert(1, "a");
          .               /// if let Some(x) = map.get_mut(&1) {
          .               ///     *x = "b";
          .               /// }
          .               /// assert_eq!(map[&1], "b");
          .               /// ```
          .               #[cfg_attr(feature = "inline-more", inline)]
        697 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
          .               where
          .                   K: Borrow<Q>,
          .                   Q: Hash + Eq,
          .               {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
     13,281 ( 0.00%)          match self.get_inner_mut(k) {
          .                       Some(&mut (_, ref mut v)) => Some(v),
          .                       None => None,
          .                   }
      1,394 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
          .               where
          .                   K: Borrow<Q>,
          .                   Q: Hash + Eq,
          .               {
      4,427 ( 0.00%)          if self.table.is_empty() {
          .                       None
          .                   } else {
          .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      7,460 ( 0.00%)              self.table.get_mut(hash, equivalent_key(k))
          .                   }
          .               }
          .           
          .               /// Attempts to get mutable references to `N` values in the map at once.
          .               ///
          .               /// Returns an array of length `N` with the results of each query. For soundness, at most one
          .               /// mutable reference will be returned to any value. `None` will be returned if any of the
          .               /// keys are duplicates or missing.
-- line 1223 ----------------------------------------
-- line 1495 ----------------------------------------
          .               /// assert_eq!(map.insert(37, "a"), None);
          .               /// assert_eq!(map.is_empty(), false);
          .               ///
          .               /// map.insert(37, "b");
          .               /// assert_eq!(map.insert(37, "c"), Some("b"));
          .               /// assert_eq!(map[&37], "c");
          .               /// ```
          .               #[cfg_attr(feature = "inline-more", inline)]
 70,273,309 ( 0.10%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
          .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
    103,150 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
         94 ( 0.00%)              Some(mem::replace(item, v))
          .                   } else {
 29,438,875 ( 0.04%)              self.table
 24,120,961 ( 0.04%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
  2,997,919 ( 0.00%)              None
          .                   }
 65,203,096 ( 0.10%)      }
          .           
          .               /// Insert a key-value pair into the map without checking
          .               /// if the key already exists in the map.
          .               ///
          .               /// Returns a reference to the key and value just inserted.
          .               ///
          .               /// This operation is safe if a key does not exist in the map.
          .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
          .               /// use hashbrown::HashMap;
          .               ///
          .               /// let mut map = HashMap::new();
          .               /// map.insert(1, "a");
          .               /// assert_eq!(map.remove(&1), Some("a"));
          .               /// assert_eq!(map.remove(&1), None);
          .               /// ```
          .               #[cfg_attr(feature = "inline-more", inline)]
  1,808,725 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
          .               where
          .                   K: Borrow<Q>,
          .                   Q: Hash + Eq,
          .               {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
 15,928,116 ( 0.02%)          match self.remove_entry(k) {
    184,228 ( 0.00%)              Some((_, v)) => Some(v),
  1,698,278 ( 0.00%)              None => None,
          .                   }
  4,161,302 ( 0.01%)      }
          .           
          .               /// Removes a key from the map, returning the stored key and value if the
          .               /// key was previously in the map.
          .               ///
          .               /// The key may be any borrowed form of the map's key type, but
          .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
          .               /// the key type.
          .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
          .               /// ```
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
          .               where
          .                   K: Borrow<Q>,
          .                   Q: Hash + Eq,
          .               {
          .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
  5,903,261 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
          .               }
          .           }
          .           
          .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
          .               /// Creates a raw entry builder for the HashMap.
          .               ///
          .               /// Raw entries provide the lowest level of control for searching and
          .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 1737 ----------------------------------------
          .           
          .           impl<K, V, S, A> Default for HashMap<K, V, S, A>
          .           where
          .               S: Default,
          .               A: Default + Allocator + Clone,
          .           {
          .               /// Creates an empty `HashMap<K, V, S, A>`, with the `Default` value for the hasher and allocator.
          .               #[cfg_attr(feature = "inline-more", inline)]
         54 ( 0.00%)      fn default() -> Self {
        198 ( 0.00%)          Self::with_hasher_in(Default::default(), Default::default())
         36 ( 0.00%)      }
          .           }
          .           
          .           impl<K, Q: ?Sized, V, S, A> Index<&Q> for HashMap<K, V, S, A>
          .           where
          .               K: Eq + Hash + Borrow<Q>,
          .               Q: Eq + Hash,
          .               S: BuildHasher,
          .               A: Allocator + Clone,
-- line 1755 ----------------------------------------
-- line 2209 ----------------------------------------
          .               /// Creates a `RawEntryMut` from the given key and its hash.
          .               #[inline]
          .               #[allow(clippy::wrong_self_convention)]
          .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
          .               where
          .                   K: Borrow<Q>,
          .                   Q: Eq,
          .               {
 63,024,346 ( 0.09%)          self.from_hash(hash, equivalent(k))
          .               }
          .           }
          .           
          .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
          .               /// Creates a `RawEntryMut` from the given hash.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::wrong_self_convention)]
160,138,601 ( 0.23%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
          .               where
          .                   for<'b> F: FnMut(&'b K) -> bool,
          .               {
          .                   self.search(hash, is_match)
171,641,038 ( 0.25%)      }
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
          .               where
          .                   for<'b> F: FnMut(&'b K) -> bool,
          .               {
 17,896,560 ( 0.03%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
107,548,722 ( 0.16%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
          .                           elem,
          .                           table: &mut self.map.table,
          .                           hash_builder: &self.map.hash_builder,
          .                       }),
  3,938,081 ( 0.01%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
          .                           table: &mut self.map.table,
          .                           hash_builder: &self.map.hash_builder,
          .                       }),
          .                   }
          .               }
          .           }
          .           
          .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
          .               {
          .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
          .                   self.from_key_hashed_nocheck(hash, k)
          .               }
          .           
          .               /// Access an entry by a key and its hash.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::wrong_self_convention)]
 44,670,771 ( 0.07%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
          .               where
          .                   K: Borrow<Q>,
          .                   Q: Eq,
          .               {
 57,364,981 ( 0.08%)          self.from_hash(hash, equivalent(k))
 82,677,011 ( 0.12%)      }
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
          .               where
          .                   F: FnMut(&K) -> bool,
          .               {
 74,728,214 ( 0.11%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
          .                       Some(&(ref key, ref value)) => Some((key, value)),
          .                       None => None,
          .                   }
          .               }
          .           
          .               /// Access an entry by hash.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
          .               /// and returns a mutable reference to it.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::shadow_unrelated)]
          .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
          .               where
          .                   K: Hash,
          .                   S: BuildHasher,
          .               {
  6,554,440 ( 0.01%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
          .                       hash,
          .                       (key, value),
          .                       make_hasher::<K, _, V, S>(self.hash_builder),
          .                   );
          .                   (k, v)
          .               }
          .           
          .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
          .               /// map.insert("a", 1);
          .               /// map.insert("b", 2);
          .               /// map.insert("c", 3);
          .               ///
          .               /// // Not possible with .iter()
          .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
          .               /// ```
          .               #[cfg_attr(feature = "inline-more", inline)]
    145,025 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
  2,216,306 ( 0.00%)          IntoIter {
    776,166 ( 0.00%)              inner: self.table.into_iter(),
          .                   }
    435,075 ( 0.00%)      }
          .           }
          .           
          .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
          .               type Item = (&'a K, &'a V);
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
  3,766,584 ( 0.01%)          match self.inner.next() {
          .                       Some(x) => unsafe {
          .                           let r = x.as_ref();
     52,734 ( 0.00%)                  Some((&r.0, &r.1))
          .                       },
          .                       None => None,
          .                   }
          .               }
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
      1,053 ( 0.00%)          self.inner.size_hint()
          .               }
          .           }
          .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn len(&self) -> usize {
          .                   self.inner.len()
          .               }
          .           }
-- line 3013 ----------------------------------------
-- line 3051 ----------------------------------------
          .               }
          .           }
          .           
          .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
          .               type Item = (K, V);
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn next(&mut self) -> Option<(K, V)> {
     37,669 ( 0.00%)          self.inner.next()
          .               }
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          .                   self.inner.size_hint()
          .               }
          .           }
          .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
          .                   f.debug_list().entries(self.iter()).finish()
          .               }
          .           }
          .           
          .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
          .               type Item = &'a K;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
        369 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
          .                   match self.inner.next() {
          .                       Some((k, _)) => Some(k),
          .                       None => None,
          .                   }
        738 ( 0.00%)      }
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          .                   self.inner.size_hint()
          .               }
          .           }
          .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 3819 ----------------------------------------
          .               /// ```
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn insert(self, value: V) -> &'a mut V
          .               where
          .                   K: Hash,
          .                   S: BuildHasher,
          .               {
          .                   let table = &mut self.table.table;
        193 ( 0.00%)          let entry = table.insert_entry(
          .                       self.hash,
          .                       (self.key, value),
          .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
          .                   );
          .                   &mut entry.1
          .               }
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
          .           /// keys with new values returned from the iterator.
          .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
          .           where
          .               K: Eq + Hash,
          .               S: BuildHasher,
          .               A: Allocator + Clone,
          .           {
          .               #[cfg_attr(feature = "inline-more", inline)]
  1,864,427 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
          .                   // Keys may be already present or show multiple times in the iterator.
          .                   // Reserve the entire hint lower bound if the map is empty.
          .                   // Otherwise reserve half the hint (rounded up), so the map
          .                   // will only resize twice in the worst case.
  1,237,715 ( 0.00%)          let iter = iter.into_iter();
    742,964 ( 0.00%)          let reserve = if self.is_empty() {
         72 ( 0.00%)              iter.size_hint().0
          .                   } else {
    144,027 ( 0.00%)              (iter.size_hint().0 + 1) / 2
          .                   };
         54 ( 0.00%)          self.reserve(reserve);
        126 ( 0.00%)          iter.for_each(move |(k, v)| {
  3,224,317 ( 0.00%)              self.insert(k, v);
          .                   });
  1,249,656 ( 0.00%)      }
          .           
          .               #[inline]
          .               #[cfg(feature = "nightly")]
          .               fn extend_one(&mut self, (k, v): (K, V)) {
          .                   self.insert(k, v);
          .               }
          .           
          .               #[inline]
-- line 4588 ----------------------------------------

 58,911,734 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir                  

-- line 27 ----------------------------------------
         .           impl CacheEntry {
         .               #[inline]
         .               fn update(
         .                   &mut self,
         .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
         .                   pos: BytePos,
         .                   time_stamp: usize,
         .               ) {
   631,149 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
   193,353 ( 0.00%)              self.file = file;
   344,904 ( 0.00%)              self.file_index = file_idx;
         .                   }
         .           
   244,874 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
         .                   let line_bounds = self.file.line_bounds(line_index);
   848,586 ( 0.00%)          self.line_number = line_index + 1;
 1,176,418 ( 0.00%)          self.line = line_bounds;
         .                   self.touch(time_stamp);
         .               }
         .           
         .               #[inline]
         .               fn touch(&mut self, time_stamp: usize) {
 4,514,573 ( 0.01%)          self.time_stamp = time_stamp;
         .               }
         .           }
         .           
         .           #[derive(Clone)]
         .           pub struct CachingSourceMapView<'sm> {
         .               source_map: &'sm SourceMap,
         .               line_cache: [CacheEntry; 3],
         .               time_stamp: usize,
         .           }
         .           
         .           impl<'sm> CachingSourceMapView<'sm> {
   159,778 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
         .                   let files = source_map.files();
    79,889 ( 0.00%)          let first_file = files[0].clone();
         .                   let entry = CacheEntry {
         .                       time_stamp: 0,
         .                       line_number: 0,
         .                       line: BytePos(0)..BytePos(0),
         .                       file: first_file,
         .                       file_index: 0,
         .                   };
         .           
   399,445 ( 0.00%)          CachingSourceMapView {
         .                       source_map,
   559,223 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
         .                       time_stamp: 0,
         .                   }
   319,556 ( 0.00%)      }
         .           
         .               pub fn byte_pos_to_line_and_col(
         .                   &mut self,
         .                   pos: BytePos,
         .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
         .                   self.time_stamp += 1;
         .           
         .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
         .                   };
         .           
         .                   let cache_entry = &mut self.line_cache[oldest];
         .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
         .           
         .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
         .               }
         .           
17,237,262 ( 0.03%)      pub fn span_data_to_lines_and_cols(
         .                   &mut self,
         .                   span_data: &SpanData,
         .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
 9,849,864 ( 0.01%)          self.time_stamp += 1;
         .           
         .                   // Check if lo and hi are in the cached lines.
 2,462,466 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
 2,462,466 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
         .           
 4,135,844 ( 0.01%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
         .                       // Cache hit for span lo and hi. Check if they belong to the same file.
         .                       let result = {
 4,104,214 ( 0.01%)                  let lo = &self.line_cache[lo_cache_idx as usize];
         .                           let hi = &self.line_cache[hi_cache_idx as usize];
         .           
12,312,642 ( 0.02%)                  if lo.file_index != hi.file_index {
         .                               return None;
         .                           }
         .           
         .                           (
 4,104,214 ( 0.01%)                      lo.file.clone(),
         .                               lo.line_number,
         .                               span_data.lo - lo.line.start,
 2,052,107 ( 0.00%)                      hi.line_number,
         .                               span_data.hi - hi.line.start,
         .                           )
         .                       };
         .           
 2,052,107 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
 2,052,107 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
         .           
 8,208,428 ( 0.01%)              return Some(result);
         .                   }
         .           
         .                   // No cache hit or cache hit for only one of span lo and hi.
   789,088 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
         .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
         .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
         .                   } else {
         .                       self.oldest_cache_entry_index()
         .                   };
         .           
         .                   // If the entry doesn't point to the correct file, get the new file and index.
         .                   // Return early if the file containing beginning of span doesn't contain end of span.
 3,272,628 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
   827,425 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
   992,910 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
         .                           return None;
         .                       }
         .           
   661,940 ( 0.00%)              Some(new_file_and_idx)
         .                   } else {
         .                       let file = &self.line_cache[oldest].file;
   734,622 ( 0.00%)              if !file_contains(&file, span_data.hi) {
         .                           return None;
         .                       }
         .           
   734,622 ( 0.00%)              None
         .                   };
         .           
         .                   // Update the cache entries.
 2,051,795 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
         .                       // Oldest cache entry is for span_data.lo line.
         .                       (-1, -1) => {
         .                           let lo = &mut self.line_cache[oldest];
         .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
         .           
   852,447 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
         .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
         .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
         .                               let hi = &mut self.line_cache[next_oldest];
         .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
         .                               (oldest, next_oldest)
         .                           } else {
         .                               (oldest, oldest)
         .                           }
         .                       }
         .                       // Oldest cache entry is for span_data.lo line.
         .                       (-1, _) => {
         .                           let lo = &mut self.line_cache[oldest];
         .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
    31,630 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
    47,445 ( 0.00%)                  hi.touch(self.time_stamp);
         .                           (oldest, hi_cache_idx as usize)
         .                       }
         .                       // Oldest cache entry is for span_data.hi line.
         .                       (_, -1) => {
         .                           let hi = &mut self.line_cache[oldest];
   110,395 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
   220,790 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
   441,580 ( 0.00%)                  lo.touch(self.time_stamp);
         .                           (lo_cache_idx as usize, oldest)
         .                       }
         .                       _ => {
         .                           panic!();
         .                       }
         .                   };
         .           
         .                   let lo = &self.line_cache[lo_idx];
         .                   let hi = &self.line_cache[hi_idx];
         .           
         .                   // Span lo and hi may equal line end when last line doesn't
         .                   // end in newline, hence the inclusive upper bounds below.
   820,718 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
   410,359 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
   820,718 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
   410,359 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
 2,051,795 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
 1,231,077 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
 1,231,077 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
         .           
 1,231,077 ( 0.00%)          Some((
   410,359 ( 0.00%)              lo.file.clone(),
         .                       lo.line_number,
         .                       span_data.lo - lo.line.start,
   410,359 ( 0.00%)              hi.line_number,
         .                       span_data.hi - hi.line.start,
         .                   ))
22,162,194 ( 0.03%)      }
         .           
         .               fn cache_entry_index(&self, pos: BytePos) -> isize {
         .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
22,032,489 ( 0.03%)              if cache_entry.line.contains(&pos) {
         .                           return idx as isize;
         .                       }
         .                   }
         .           
         .                   -1
         .               }
         .           
         .               fn oldest_cache_entry_index(&self) -> usize {
         .                   let mut oldest = 0;
         .           
         .                   for idx in 1..self.line_cache.len() {
 1,704,894 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
         .                           oldest = idx;
         .                       }
         .                   }
         .           
         .                   oldest
         .               }
         .           
         .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
         .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
         .           
         .                   for idx in 0..self.line_cache.len() {
   824,701 ( 0.00%)              if idx != avoid_idx
   314,437 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
         .                       {
         .                           oldest = idx;
         .                       }
         .                   }
         .           
         .                   oldest
         .               }
         .           
   827,425 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
   165,485 ( 0.00%)          if !self.source_map.files().is_empty() {
   330,970 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
         .                       let file = &self.source_map.files()[file_idx];
         .           
 1,323,880 ( 0.00%)              if file_contains(file, pos) {
         .                           return Some((file.clone(), file_idx));
         .                       }
         .                   }
         .           
         .                   None
   827,425 ( 0.00%)      }
         .           }
         .           
         .           #[inline]
         .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
         .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
         .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
         .               // purposes of converting a byte position to a line and column number, we can't come up with a
         .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

34,106,060 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs
--------------------------------------------------------------------------------
Ir                  

-- line 42 ----------------------------------------
         .           /// `stack_size` bytes.
         .           ///
         .           /// The closure `f` is guaranteed to run on a stack with at least `red_zone` bytes, and it will be
         .           /// run on the current stack if there's space available.
         .           #[inline(always)]
         .           pub fn maybe_grow<R, F: FnOnce() -> R>(red_zone: usize, stack_size: usize, callback: F) -> R {
         .               // if we can't guess the remaining stack (unsupported on some platforms) we immediately grow
         .               // the stack and then cache the new stack size (which we do know now because we allocated it.
13,378,086 ( 0.02%)      let enough_space = match remaining_stack() {
         .                   Some(remaining) => remaining >= red_zone,
         .                   None => false,
         .               };
18,847,968 ( 0.03%)      if enough_space {
   838,580 ( 0.00%)          callback()
         .               } else {
         .                   grow(stack_size, callback)
         .               }
         .           }
         .           
         .           /// Always creates a new stack for the passed closure to run on.
         .           /// The closure will still be on the same thread as the caller of `grow`.
         .           /// This will allocate a new stack with at least `stack_size` bytes.
-- line 63 ----------------------------------------
-- line 82 ----------------------------------------
         .               _grow(stack_size, dyn_callback);
         .               ret.unwrap()
         .           }
         .           
         .           /// Queries the amount of remaining stack as interpreted by this library.
         .           ///
         .           /// This function will return the amount of stack space left which will be used
         .           /// to determine whether a stack switch should be made or not.
12,565,312 ( 0.02%)  pub fn remaining_stack() -> Option<usize> {
         .               let current_ptr = current_stack_ptr();
12,565,312 ( 0.02%)      get_stack_limit().map(|limit| current_ptr - limit)
25,130,624 ( 0.04%)  }
         .           
         .           psm_stack_information! (
         .               yes {
         .                   fn current_stack_ptr() -> usize {
12,565,312 ( 0.02%)              psm::stack_pointer() as usize
         .                   }
         .               }
         .               no {
         .                   #[inline(always)]
         .                   fn current_stack_ptr() -> usize {
         .                       unsafe {
         .                           let mut x = std::mem::MaybeUninit::<u8>::uninit();
         .                           // Unlikely to be ever exercised. As a fallback we execute a volatile read to a
-- line 106 ----------------------------------------
-- line 111 ----------------------------------------
         .                           x.as_ptr() as usize
         .                       }
         .                   }
         .               }
         .           );
         .           
         .           thread_local! {
         .               static STACK_LIMIT: Cell<Option<usize>> = Cell::new(unsafe {
         1 ( 0.00%)          guess_os_stack_limit()
         .               })
         .           }
         .           
         .           #[inline(always)]
         .           fn get_stack_limit() -> Option<usize> {
         .               STACK_LIMIT.with(|s| s.get())
         .           }
         .           
-- line 127 ----------------------------------------
-- line 403 ----------------------------------------
         .                       VirtualQuery(
         .                           psm::stack_pointer() as *const _,
         .                           mi.as_mut_ptr(),
         .                           std::mem::size_of::<QueryT>() as SIZE_T,
         .                       );
         .                       Some(mi.assume_init().AllocationBase as usize + get_thread_stack_guarantee() + 0x1000)
         .                   }
         .               } else if #[cfg(any(target_os = "linux", target_os="solaris", target_os = "netbsd"))] {
         2 ( 0.00%)          unsafe fn guess_os_stack_limit() -> Option<usize> {
         .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
         4 ( 0.00%)              assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
         7 ( 0.00%)              assert_eq!(libc::pthread_getattr_np(libc::pthread_self(),
         .                                                           attr.as_mut_ptr()), 0);
         1 ( 0.00%)              let mut stackaddr = std::ptr::null_mut();
         4 ( 0.00%)              let mut stacksize = 0;
         4 ( 0.00%)              assert_eq!(libc::pthread_attr_getstack(
         .                           attr.as_ptr(), &mut stackaddr, &mut stacksize
         .                       ), 0);
         4 ( 0.00%)              assert_eq!(libc::pthread_attr_destroy(attr.as_mut_ptr()), 0);
         1 ( 0.00%)              Some(stackaddr as usize)
         3 ( 0.00%)          }
         .               } else if #[cfg(any(target_os = "freebsd", target_os = "dragonfly"))] {
         .                   unsafe fn guess_os_stack_limit() -> Option<usize> {
         .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
         .                       assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
         .                       assert_eq!(libc::pthread_attr_get_np(libc::pthread_self(), attr.as_mut_ptr()), 0);
         .                       let mut stackaddr = std::ptr::null_mut();
         .                       let mut stacksize = 0;
         .                       assert_eq!(libc::pthread_attr_getstack(
-- line 431 ----------------------------------------

 8,321,106 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs
--------------------------------------------------------------------------------
Ir                  

-- line 28 ----------------------------------------
         .           
         .               /// Returns a static string we can use for printouts.
         .               fn tag(&self) -> &'static str;
         .           
         .               /// Returns `true` if the value `a` is the "expected" type in the
         .               /// relation. Just affects error messages.
         .               fn a_is_expected(&self) -> bool;
         .           
 1,653,181 ( 0.00%)      fn with_cause<F, R>(&mut self, _cause: Cause, f: F) -> R
         .               where
         .                   F: FnOnce(&mut Self) -> R,
         .               {
         .                   f(self)
 1,455,525 ( 0.00%)      }
         .           
         .               /// Generic relation routine suitable for most anything.
 6,642,339 ( 0.01%)      fn relate<T: Relate<'tcx>>(&mut self, a: T, b: T) -> RelateResult<'tcx, T> {
22,130,641 ( 0.03%)          Relate::relate(self, a, b)
 5,493,938 ( 0.01%)      }
         .           
         .               /// Relate the two substitutions for the given item. The default
         .               /// is to look up the variance for the item and proceed
         .               /// accordingly.
 4,326,130 ( 0.01%)      fn relate_item_substs(
         .                   &mut self,
         .                   item_def_id: DefId,
         .                   a_subst: SubstsRef<'tcx>,
         .                   b_subst: SubstsRef<'tcx>,
         .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
         .                   debug!(
         .                       "relate_item_substs(item_def_id={:?}, a_subst={:?}, b_subst={:?})",
         .                       item_def_id, a_subst, b_subst
         .                   );
         .           
         .                   let tcx = self.tcx();
         .                   let opt_variances = tcx.variances_of(item_def_id);
 1,730,452 ( 0.00%)          relate_substs(self, Some((item_def_id, opt_variances)), a_subst, b_subst)
 3,893,517 ( 0.01%)      }
         .           
         .               /// Switch variance for the purpose of relating `a` and `b`.
         .               fn relate_with_variance<T: Relate<'tcx>>(
         .                   &mut self,
         .                   variance: ty::Variance,
         .                   info: ty::VarianceDiagInfo<'tcx>,
         .                   a: T,
         .                   b: T,
-- line 73 ----------------------------------------
-- line 108 ----------------------------------------
         .                   a: Self,
         .                   b: Self,
         .               ) -> RelateResult<'tcx, Self>;
         .           }
         .           
         .           ///////////////////////////////////////////////////////////////////////////
         .           // Relate impls
         .           
 1,155,838 ( 0.00%)  pub fn relate_type_and_mut<'tcx, R: TypeRelation<'tcx>>(
         .               relation: &mut R,
         .               a: ty::TypeAndMut<'tcx>,
         .               b: ty::TypeAndMut<'tcx>,
         .               base_ty: Ty<'tcx>,
         .           ) -> RelateResult<'tcx, ty::TypeAndMut<'tcx>> {
         .               debug!("{}.mts({:?}, {:?})", relation.tag(), a, b);
   190,164 ( 0.00%)      if a.mutbl != b.mutbl {
       792 ( 0.00%)          Err(TypeError::Mutability)
         .               } else {
         .                   let mutbl = a.mutbl;
         .                   let (variance, info) = match mutbl {
         .                       ast::Mutability::Not => (ty::Covariant, ty::VarianceDiagInfo::None),
         .                       ast::Mutability::Mut => {
         .                           (ty::Invariant, ty::VarianceDiagInfo::Invariant { ty: base_ty, param_index: 0 })
         .                       }
         .                   };
    71,184 ( 0.00%)          let ty = relation.relate_with_variance(variance, info, a.ty, b.ty)?;
   556,014 ( 0.00%)          Ok(ty::TypeAndMut { ty, mutbl })
         .               }
 1,156,275 ( 0.00%)  }
         .           
         .           pub fn relate_substs<'tcx, R: TypeRelation<'tcx>>(
         .               relation: &mut R,
         .               variances: Option<(DefId, &[ty::Variance])>,
         .               a_subst: SubstsRef<'tcx>,
         .               b_subst: SubstsRef<'tcx>,
         .           ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
 5,981,653 ( 0.01%)      let tcx = relation.tcx();
 3,365,505 ( 0.00%)      let mut cached_ty = None;
         .           
         .               let params = iter::zip(a_subst, b_subst).enumerate().map(|(i, (a, b))| {
19,814,240 ( 0.03%)          let (variance, variance_info) = match variances {
 2,140,584 ( 0.00%)              Some((ty_def_id, variances)) => {
 3,210,876 ( 0.00%)                  let variance = variances[i];
 1,070,292 ( 0.00%)                  let variance_info = if variance == ty::Invariant {
         .                               let ty =
    15,502 ( 0.00%)                          cached_ty.get_or_insert_with(|| tcx.type_of(ty_def_id).subst(tcx, a_subst));
         .                               ty::VarianceDiagInfo::Invariant { ty, param_index: i.try_into().unwrap() }
         .                           } else {
         .                               ty::VarianceDiagInfo::default()
         .                           };
         .                           (variance, variance_info)
         .                       }
         .                       None => (ty::Invariant, ty::VarianceDiagInfo::default()),
         .                   };
 4,769,788 ( 0.01%)          relation.relate_with_variance(variance, variance_info, a, b)
         .               });
         .           
         .               tcx.mk_substs(params)
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {
   535,977 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::FnSig<'tcx>,
         .                   b: ty::FnSig<'tcx>,
         .               ) -> RelateResult<'tcx, ty::FnSig<'tcx>> {
         .                   let tcx = relation.tcx();
         .           
   247,374 ( 0.00%)          if a.c_variadic != b.c_variadic {
         .                       return Err(TypeError::VariadicMismatch(expected_found(
         .                           relation,
         .                           a.c_variadic,
         .                           b.c_variadic,
         .                       )));
         .                   }
   238,570 ( 0.00%)          let unsafety = relation.relate(a.unsafety, b.unsafety)?;
         .                   let abi = relation.relate(a.abi, b.abi)?;
         .           
   334,234 ( 0.00%)          if a.inputs().len() != b.inputs().len() {
         .                       return Err(TypeError::ArgCount);
         .                   }
         .           
   371,061 ( 0.00%)          let inputs_and_output = iter::zip(a.inputs(), b.inputs())
   190,770 ( 0.00%)              .map(|(&a, &b)| ((a, b), false))
   329,832 ( 0.00%)              .chain(iter::once(((a.output(), b.output()), true)))
    44,334 ( 0.00%)              .map(|((a, b), is_output)| {
    44,334 ( 0.00%)                  if is_output {
    11,072 ( 0.00%)                      relation.relate(a, b)
         .                           } else {
         .                               relation.relate_with_variance(
         .                                   ty::Contravariant,
         .                                   ty::VarianceDiagInfo::default(),
         .                                   a,
         .                                   b,
         .                               )
         .                           }
         .                       })
         .                       .enumerate()
   346,707 ( 0.00%)              .map(|(i, r)| match r {
         .                           Err(TypeError::Sorts(exp_found) | TypeError::ArgumentSorts(exp_found, _)) => {
         .                               Err(TypeError::ArgumentSorts(exp_found, i))
         .                           }
         .                           Err(TypeError::Mutability | TypeError::ArgumentMutability(_)) => {
         .                               Err(TypeError::ArgumentMutability(i))
         .                           }
   401,369 ( 0.00%)                  r => r,
         .                       });
   325,430 ( 0.00%)          Ok(ty::FnSig {
         .                       inputs_and_output: tcx.mk_type_list(inputs_and_output)?,
    41,229 ( 0.00%)              c_variadic: a.c_variadic,
         .                       unsafety,
         .                       abi,
         .                   })
   371,061 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::BoundConstness {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::BoundConstness,
         .                   b: ty::BoundConstness,
         .               ) -> RelateResult<'tcx, ty::BoundConstness> {
        20 ( 0.00%)          if a != b {
         .                       Err(TypeError::ConstnessMismatch(expected_found(relation, a, b)))
         .                   } else {
         .                       Ok(a)
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ast::Unsafety {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ast::Unsafety,
         .                   b: ast::Unsafety,
         .               ) -> RelateResult<'tcx, ast::Unsafety> {
    41,229 ( 0.00%)          if a != b {
         .                       Err(TypeError::UnsafetyMismatch(expected_found(relation, a, b)))
         .                   } else {
         .                       Ok(a)
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for abi::Abi {
-- line 252 ----------------------------------------
-- line 255 ----------------------------------------
         .                   a: abi::Abi,
         .                   b: abi::Abi,
         .               ) -> RelateResult<'tcx, abi::Abi> {
         .                   if a == b { Ok(a) } else { Err(TypeError::AbiMismatch(expected_found(relation, a, b))) }
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::ProjectionTy<'tcx> {
    67,556 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::ProjectionTy<'tcx>,
         .                   b: ty::ProjectionTy<'tcx>,
         .               ) -> RelateResult<'tcx, ty::ProjectionTy<'tcx>> {
    19,918 ( 0.00%)          if a.item_def_id != b.item_def_id {
         3 ( 0.00%)              Err(TypeError::ProjectionMismatched(expected_found(
         .                           relation,
         .                           a.item_def_id,
         .                           b.item_def_id,
         .                       )))
         .                   } else {
         .                       let substs = relation.relate(a.substs, b.substs)?;
    26,100 ( 0.00%)              Ok(ty::ProjectionTy { item_def_id: a.item_def_id, substs: &substs })
         .                   }
    49,320 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::ExistentialProjection<'tcx> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::ExistentialProjection<'tcx>,
         .                   b: ty::ExistentialProjection<'tcx>,
         .               ) -> RelateResult<'tcx, ty::ExistentialProjection<'tcx>> {
-- line 286 ----------------------------------------
-- line 304 ----------------------------------------
         .                           b.substs,
         .                       )?;
         .                       Ok(ty::ExistentialProjection { item_def_id: a.item_def_id, substs, term })
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::TraitRef<'tcx> {
19,456,653 ( 0.03%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::TraitRef<'tcx>,
         .                   b: ty::TraitRef<'tcx>,
         .               ) -> RelateResult<'tcx, ty::TraitRef<'tcx>> {
         .                   // Different traits cannot be related.
 4,771,996 ( 0.01%)          if a.def_id != b.def_id {
       471 ( 0.00%)              Err(TypeError::Traits(expected_found(relation, a.def_id, b.def_id)))
         .                   } else {
 1,590,613 ( 0.00%)              let substs = relate_substs(relation, None, a.substs, b.substs)?;
   273,008 ( 0.00%)              Ok(ty::TraitRef { def_id: a.def_id, substs })
         .                   }
12,440,896 ( 0.02%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::ExistentialTraitRef<'tcx> {
 1,108,360 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::ExistentialTraitRef<'tcx>,
         .                   b: ty::ExistentialTraitRef<'tcx>,
         .               ) -> RelateResult<'tcx, ty::ExistentialTraitRef<'tcx>> {
         .                   // Different traits cannot be related.
   895,248 ( 0.00%)          if a.def_id != b.def_id {
         .                       Err(TypeError::Traits(expected_found(relation, a.def_id, b.def_id)))
         .                   } else {
   369,905 ( 0.00%)              let substs = relate_substs(relation, None, a.substs, b.substs)?;
   655,522 ( 0.00%)              Ok(ty::ExistentialTraitRef { def_id: a.def_id, substs })
         .                   }
   705,320 ( 0.00%)      }
         .           }
         .           
         .           #[derive(Copy, Debug, Clone, TypeFoldable)]
         .           struct GeneratorWitness<'tcx>(&'tcx ty::List<Ty<'tcx>>);
         .           
         .           impl<'tcx> Relate<'tcx> for GeneratorWitness<'tcx> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
-- line 348 ----------------------------------------
-- line 358 ----------------------------------------
         .           
         .           impl<'tcx> Relate<'tcx> for Ty<'tcx> {
         .               #[inline]
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: Ty<'tcx>,
         .                   b: Ty<'tcx>,
         .               ) -> RelateResult<'tcx, Ty<'tcx>> {
13,830,858 ( 0.02%)          relation.tys(a, b)
         .               }
         .           }
         .           
         .           /// The main "type relation" routine. Note that this does not handle
         .           /// inference artifacts, so you should filter those out before calling
         .           /// it.
32,942,120 ( 0.05%)  pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(
         .               relation: &mut R,
         .               a: Ty<'tcx>,
         .               b: Ty<'tcx>,
         .           ) -> RelateResult<'tcx, Ty<'tcx>> {
         .               let tcx = relation.tcx();
         .               debug!("super_relate_tys: a={:?} b={:?}", a, b);
73,826,302 ( 0.11%)      match (a.kind(), b.kind()) {
         .                   (&ty::Infer(_), _) | (_, &ty::Infer(_)) => {
         .                       // The caller should handle these cases!
         .                       bug!("var types encountered in super_relate_tys")
         .                   }
         .           
         .                   (ty::Bound(..), _) | (_, ty::Bound(..)) => {
         .                       bug!("bound types encountered in super_relate_tys")
         .                   }
-- line 388 ----------------------------------------
-- line 391 ----------------------------------------
         .           
         .                   (&ty::Never, _)
         .                   | (&ty::Char, _)
         .                   | (&ty::Bool, _)
         .                   | (&ty::Int(_), _)
         .                   | (&ty::Uint(_), _)
         .                   | (&ty::Float(_), _)
         .                   | (&ty::Str, _)
   146,932 ( 0.00%)              if a == b =>
         .                   {
         .                       Ok(a)
         .                   }
         .           
   560,535 ( 0.00%)          (&ty::Param(ref a_p), &ty::Param(ref b_p)) if a_p.index == b_p.index => Ok(a),
         .           
         .                   (ty::Placeholder(p1), ty::Placeholder(p2)) if p1 == p2 => Ok(a),
         .           
16,240,994 ( 0.02%)          (&ty::Adt(a_def, a_substs), &ty::Adt(b_def, b_substs)) if a_def == b_def => {
 5,008,078 ( 0.01%)              let substs = relation.relate_item_substs(a_def.did, a_substs, b_substs)?;
         .                       Ok(tcx.mk_adt(a_def, substs))
         .                   }
         .           
         .                   (&ty::Foreign(a_id), &ty::Foreign(b_id)) if a_id == b_id => Ok(tcx.mk_foreign(a_id)),
         .           
 5,343,205 ( 0.01%)          (&ty::Dynamic(a_obj, a_region), &ty::Dynamic(b_obj, b_region)) => {
   596,980 ( 0.00%)              let region_bound = relation.with_cause(Cause::ExistentialRegionBound, |relation| {
         .                           relation.relate_with_variance(
         .                               ty::Contravariant,
         .                               ty::VarianceDiagInfo::default(),
   298,490 ( 0.00%)                      a_region,
         .                               b_region,
         .                           )
         .                       })?;
         .                       Ok(tcx.mk_dynamic(relation.relate(a_obj, b_obj)?, region_bound))
         .                   }
         .           
         .                   (&ty::Generator(a_id, a_substs, movability), &ty::Generator(b_id, b_substs, _))
         .                       if a_id == b_id =>
-- line 428 ----------------------------------------
-- line 439 ----------------------------------------
         .                       // inside the binder so we can related them
         .                       let a_types = a_types.map_bound(GeneratorWitness);
         .                       let b_types = b_types.map_bound(GeneratorWitness);
         .                       // Then remove the GeneratorWitness for the result
         .                       let types = relation.relate(a_types, b_types)?.map_bound(|witness| witness.0);
         .                       Ok(tcx.mk_generator_witness(types))
         .                   }
         .           
    11,784 ( 0.00%)          (&ty::Closure(a_id, a_substs), &ty::Closure(b_id, b_substs)) if a_id == b_id => {
         .                       // All Closure types with the same id represent
         .                       // the (anonymous) type of the same closure expression. So
         .                       // all of their regions should be equated.
     2,946 ( 0.00%)              let substs = relation.relate(a_substs, b_substs)?;
         .                       Ok(tcx.mk_closure(a_id, &substs))
         .                   }
         .           
        16 ( 0.00%)          (&ty::RawPtr(a_mt), &ty::RawPtr(b_mt)) => {
        20 ( 0.00%)              let mt = relate_type_and_mut(relation, a_mt, b_mt, a)?;
         .                       Ok(tcx.mk_ptr(mt))
         .                   }
         .           
 1,743,349 ( 0.00%)          (&ty::Ref(a_r, a_ty, a_mutbl), &ty::Ref(b_r, b_ty, b_mutbl)) => {
   835,898 ( 0.00%)              let r = relation.relate_with_variance(
         .                           ty::Contravariant,
         .                           ty::VarianceDiagInfo::default(),
         .                           a_r,
         .                           b_r,
         .                       )?;
         .                       let a_mt = ty::TypeAndMut { ty: a_ty, mutbl: a_mutbl };
         .                       let b_mt = ty::TypeAndMut { ty: b_ty, mutbl: b_mutbl };
 1,357,032 ( 0.00%)              let mt = relate_type_and_mut(relation, a_mt, b_mt, a)?;
         .                       Ok(tcx.mk_ref(r, mt))
         .                   }
         .           
    46,947 ( 0.00%)          (&ty::Array(a_t, sz_a), &ty::Array(b_t, sz_b)) => {
    16,740 ( 0.00%)              let t = relation.relate(a_t, b_t)?;
    18,798 ( 0.00%)              match relation.relate(sz_a, sz_b) {
    26,757 ( 0.00%)                  Ok(sz) => Ok(tcx.mk_ty(ty::Array(t, sz))),
         .                           Err(err) => {
         .                               // Check whether the lengths are both concrete/known values,
         .                               // but are unequal, for better diagnostics.
         .                               //
         .                               // It might seem dubious to eagerly evaluate these constants here,
         .                               // we however cannot end up with errors in `Relate` during both
         .                               // `type_of` and `predicates_of`. This means that evaluating the
         .                               // constants should not cause cycle errors here.
     2,400 ( 0.00%)                      let sz_a = sz_a.try_eval_usize(tcx, relation.param_env());
     1,440 ( 0.00%)                      let sz_b = sz_b.try_eval_usize(tcx, relation.param_env());
     2,880 ( 0.00%)                      match (sz_a, sz_b) {
     1,920 ( 0.00%)                          (Some(sz_a_val), Some(sz_b_val)) if sz_a_val != sz_b_val => Err(
         .                                       TypeError::FixedArraySize(expected_found(relation, sz_a_val, sz_b_val)),
         .                                   ),
         .                                   _ => Err(err),
         .                               }
         .                           }
         .                       }
         .                   }
         .           
   603,424 ( 0.00%)          (&ty::Slice(a_t), &ty::Slice(b_t)) => {
     4,996 ( 0.00%)              let t = relation.relate(a_t, b_t)?;
         .                       Ok(tcx.mk_slice(t))
         .                   }
         .           
   268,148 ( 0.00%)          (&ty::Tuple(as_), &ty::Tuple(bs)) => {
   268,148 ( 0.00%)              if as_.len() == bs.len() {
         .                           Ok(tcx.mk_tup(
    43,852 ( 0.00%)                      iter::zip(as_, bs).map(|(a, b)| relation.relate(a.expect_ty(), b.expect_ty())),
         .                           )?)
         .                       } else if !(as_.is_empty() || bs.is_empty()) {
         .                           Err(TypeError::TupleSize(expected_found(relation, as_.len(), bs.len())))
         .                       } else {
         .                           Err(TypeError::Sorts(expected_found(relation, a, b)))
         .                       }
         .                   }
         .           
     5,607 ( 0.00%)          (&ty::FnDef(a_def_id, a_substs), &ty::FnDef(b_def_id, b_substs))
     9,345 ( 0.00%)              if a_def_id == b_def_id =>
         .                   {
     7,476 ( 0.00%)              let substs = relation.relate_item_substs(a_def_id, a_substs, b_substs)?;
         .                       Ok(tcx.mk_fn_def(a_def_id, substs))
         .                   }
         .           
         .                   (&ty::FnPtr(a_fty), &ty::FnPtr(b_fty)) => {
   596,842 ( 0.00%)              let fty = relation.relate(a_fty, b_fty)?;
         .                       Ok(tcx.mk_fn_ptr(fty))
         .                   }
         .           
         .                   // these two are already handled downstream in case of lazy normalization
    26,100 ( 0.00%)          (&ty::Projection(a_data), &ty::Projection(b_data)) => {
         .                       let projection_ty = relation.relate(a_data, b_data)?;
         .                       Ok(tcx.mk_projection(projection_ty.item_def_id, projection_ty.substs))
         .                   }
         .           
         .                   (&ty::Opaque(a_def_id, a_substs), &ty::Opaque(b_def_id, b_substs))
         .                       if a_def_id == b_def_id =>
         .                   {
         .                       let substs = relate_substs(relation, None, a_substs, b_substs)?;
         .                       Ok(tcx.mk_opaque(a_def_id, substs))
         .                   }
         .           
         .                   _ => Err(TypeError::Sorts(expected_found(relation, a, b))),
         .               }
37,059,885 ( 0.05%)  }
         .           
         .           /// The main "const relation" routine. Note that this does not handle
         .           /// inference artifacts, so you should filter those out before calling
         .           /// it.
    39,090 ( 0.00%)  pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(
         .               relation: &mut R,
         .               a: &'tcx ty::Const<'tcx>,
         .               b: &'tcx ty::Const<'tcx>,
         .           ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
         .               debug!("{}.super_relate_consts(a = {:?}, b = {:?})", relation.tag(), a, b);
         .               let tcx = relation.tcx();
         .           
         .               // FIXME(oli-obk): once const generics can have generic types, this assertion
         .               // will likely get triggered. Move to `normalize_erasing_regions` at that point.
     7,818 ( 0.00%)      let a_ty = tcx.erase_regions(a.ty);
     7,818 ( 0.00%)      let b_ty = tcx.erase_regions(b.ty);
     3,909 ( 0.00%)      if a_ty != b_ty {
         .                   relation.tcx().sess.delay_span_bug(
         .                       DUMMY_SP,
         .                       &format!("cannot relate constants of different types: {} != {}", a_ty, b_ty),
         .                   );
         .               }
         .           
         .               let eagerly_eval = |x: &'tcx ty::Const<'tcx>| x.eval(tcx, relation.param_env());
     3,909 ( 0.00%)      let a = eagerly_eval(a);
     7,818 ( 0.00%)      let b = eagerly_eval(b);
         .           
         .               // Currently, the values that can be unified are primitive types,
         .               // and those that derive both `PartialEq` and `Eq`, corresponding
         .               // to structural-match types.
    43,025 ( 0.00%)      let is_match = match (a.val, b.val) {
         .                   (ty::ConstKind::Infer(_), _) | (_, ty::ConstKind::Infer(_)) => {
         .                       // The caller should handle these cases!
         .                       bug!("var types encountered in super_relate_consts: {:?} {:?}", a, b)
         .                   }
         .           
         .                   (ty::ConstKind::Error(_), _) => return Ok(a),
         .                   (_, ty::ConstKind::Error(_)) => return Ok(b),
         .           
-- line 580 ----------------------------------------
-- line 608 ----------------------------------------
         .                               substs,
         .                               promoted: au.promoted,
         .                           }),
         .                           ty: a.ty,
         .                       }));
         .                   }
         .                   _ => false,
         .               };
    22,923 ( 0.00%)      if is_match { Ok(a) } else { Err(TypeError::ConstMismatch(expected_found(relation, a, b))) }
    35,181 ( 0.00%)  }
         .           
         .           fn check_const_value_eq<'tcx, R: TypeRelation<'tcx>>(
         .               relation: &mut R,
         .               a_val: ConstValue<'tcx>,
         .               b_val: ConstValue<'tcx>,
         .               // FIXME(oli-obk): these arguments should go away with valtrees
         .               a: &'tcx ty::Const<'tcx>,
         .               b: &'tcx ty::Const<'tcx>,
         .               // FIXME(oli-obk): this should just be `bool` with valtrees
         .           ) -> RelateResult<'tcx, bool> {
     3,896 ( 0.00%)      let tcx = relation.tcx();
    42,856 ( 0.00%)      Ok(match (a_val, b_val) {
    85,712 ( 0.00%)          (ConstValue::Scalar(Scalar::Int(a_val)), ConstValue::Scalar(Scalar::Int(b_val))) => {
     3,896 ( 0.00%)              a_val == b_val
         .                   }
         .                   (
         .                       ConstValue::Scalar(Scalar::Ptr(a_val, _a_size)),
         .                       ConstValue::Scalar(Scalar::Ptr(b_val, _b_size)),
         .                   ) => {
         .                       a_val == b_val
         .                           || match (tcx.global_alloc(a_val.provenance), tcx.global_alloc(b_val.provenance)) {
         .                               (GlobalAlloc::Function(a_instance), GlobalAlloc::Function(b_instance)) => {
-- line 639 ----------------------------------------
-- line 672 ----------------------------------------
         .                       }
         .                   }
         .           
         .                   _ => false,
         .               })
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>> {
 9,492,480 ( 0.01%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: Self,
         .                   b: Self,
         .               ) -> RelateResult<'tcx, Self> {
   949,248 ( 0.00%)          let tcx = relation.tcx();
         .           
         .                   // FIXME: this is wasteful, but want to do a perf run to see how slow it is.
         .                   // We need to perform this deduplication as we sometimes generate duplicate projections
         .                   // in `a`.
         .                   let mut a_v: Vec<_> = a.into_iter().collect();
         .                   let mut b_v: Vec<_> = b.into_iter().collect();
         .                   // `skip_binder` here is okay because `stable_cmp` doesn't look at binders
        40 ( 0.00%)          a_v.sort_by(|a, b| a.skip_binder().stable_cmp(tcx, &b.skip_binder()));
         .                   a_v.dedup();
         .                   b_v.sort_by(|a, b| a.skip_binder().stable_cmp(tcx, &b.skip_binder()));
         .                   b_v.dedup();
 2,847,744 ( 0.00%)          if a_v.len() != b_v.len() {
        20 ( 0.00%)              return Err(TypeError::ExistentialMismatch(expected_found(relation, a, b)));
         .                   }
         .           
 3,796,972 ( 0.01%)          let v = iter::zip(a_v, b_v).map(|(ep_a, ep_b)| {
         .                       use crate::ty::ExistentialPredicate::*;
 3,796,972 ( 0.01%)              match (ep_a.skip_binder(), ep_b.skip_binder()) {
 1,196,672 ( 0.00%)                  (Trait(a), Trait(b)) => Ok(ep_a
         .                               .rebind(Trait(relation.relate(ep_a.rebind(a), ep_b.rebind(b))?.skip_binder()))),
         .                           (Projection(a), Projection(b)) => Ok(ep_a.rebind(Projection(
         .                               relation.relate(ep_a.rebind(a), ep_b.rebind(b))?.skip_binder(),
         .                           ))),
         .                           (AutoTrait(a), AutoTrait(b)) if a == b => Ok(ep_a.rebind(AutoTrait(a))),
         .                           _ => Err(TypeError::ExistentialMismatch(expected_found(relation, a, b))),
         .                       }
         .                   });
 1,898,486 ( 0.00%)          tcx.mk_poly_existential_predicates(v)
 7,593,984 ( 0.01%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::ClosureSubsts<'tcx> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::ClosureSubsts<'tcx>,
         .                   b: ty::ClosureSubsts<'tcx>,
         .               ) -> RelateResult<'tcx, ty::ClosureSubsts<'tcx>> {
-- line 722 ----------------------------------------
-- line 737 ----------------------------------------
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for SubstsRef<'tcx> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: SubstsRef<'tcx>,
         .                   b: SubstsRef<'tcx>,
         .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
     8,112 ( 0.00%)          relate_substs(relation, None, a, b)
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::Region<'tcx> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::Region<'tcx>,
         .                   b: ty::Region<'tcx>,
         .               ) -> RelateResult<'tcx, ty::Region<'tcx>> {
 4,165,925 ( 0.01%)          relation.regions(a, b)
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for &'tcx ty::Const<'tcx> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: &'tcx ty::Const<'tcx>,
         .                   b: &'tcx ty::Const<'tcx>,
         .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
    35,432 ( 0.00%)          relation.consts(a, b)
         .               }
         .           }
         .           
         .           impl<'tcx, T: Relate<'tcx>> Relate<'tcx> for ty::Binder<'tcx, T> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::Binder<'tcx, T>,
         .                   b: ty::Binder<'tcx, T>,
         .               ) -> RelateResult<'tcx, ty::Binder<'tcx, T>> {
 8,541,047 ( 0.01%)          relation.binders(a, b)
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for GenericArg<'tcx> {
19,046,838 ( 0.03%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: GenericArg<'tcx>,
         .                   b: GenericArg<'tcx>,
         .               ) -> RelateResult<'tcx, GenericArg<'tcx>> {
21,750,966 ( 0.03%)          match (a.unpack(), b.unpack()) {
         .                       (GenericArgKind::Lifetime(a_lt), GenericArgKind::Lifetime(b_lt)) => {
         .                           Ok(relation.relate(a_lt, b_lt)?.into())
         .                       }
         .                       (GenericArgKind::Type(a_ty), GenericArgKind::Type(b_ty)) => {
   251,049 ( 0.00%)                  Ok(relation.relate(a_ty, b_ty)?.into())
         .                       }
         .                       (GenericArgKind::Const(a_ct), GenericArgKind::Const(b_ct)) => {
         .                           Ok(relation.relate(a_ct, b_ct)?.into())
         .                       }
         .                       (GenericArgKind::Lifetime(unpacked), x) => {
         .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
         .                       }
         .                       (GenericArgKind::Type(unpacked), x) => {
         .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
         .                       }
         .                       (GenericArgKind::Const(unpacked), x) => {
         .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
         .                       }
         .                   }
16,168,965 ( 0.02%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::ImplPolarity {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::ImplPolarity,
         .                   b: ty::ImplPolarity,
         .               ) -> RelateResult<'tcx, ty::ImplPolarity> {
        20 ( 0.00%)          if a != b {
         .                       Err(TypeError::PolarityMismatch(expected_found(relation, a, b)))
         .                   } else {
         .                       Ok(a)
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::TraitPredicate<'tcx> {
     2,086 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::TraitPredicate<'tcx>,
         .                   b: ty::TraitPredicate<'tcx>,
         .               ) -> RelateResult<'tcx, ty::TraitPredicate<'tcx>> {
       120 ( 0.00%)          Ok(ty::TraitPredicate {
     1,000 ( 0.00%)              trait_ref: relation.relate(a.trait_ref, b.trait_ref)?,
       120 ( 0.00%)              constness: relation.relate(a.constness, b.constness)?,
        40 ( 0.00%)              polarity: relation.relate(a.polarity, b.polarity)?,
         .                   })
     1,724 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::Term<'tcx> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: Self,
         .                   b: Self,
         .               ) -> RelateResult<'tcx, Self> {
-- line 841 ----------------------------------------
-- line 862 ----------------------------------------
         .           
         .           ///////////////////////////////////////////////////////////////////////////
         .           // Error handling
         .           
         .           pub fn expected_found<'tcx, R, T>(relation: &mut R, a: T, b: T) -> ExpectedFound<T>
         .           where
         .               R: TypeRelation<'tcx>,
         .           {
       272 ( 0.00%)      ExpectedFound::new(relation.a_is_expected(), a, b)
         .           }

98,629,666 ( 0.14%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                  

-- line 84 ----------------------------------------
         .           pub struct SessionGlobals {
         .               symbol_interner: symbol::Interner,
         .               span_interner: Lock<span_encoding::SpanInterner>,
         .               hygiene_data: Lock<hygiene::HygieneData>,
         .               source_map: Lock<Option<Lrc<SourceMap>>>,
         .           }
         .           
         .           impl SessionGlobals {
        12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
        50 ( 0.00%)          SessionGlobals {
         2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
         .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
         6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
         .                       source_map: Lock::new(None),
         .                   }
        10 ( 0.00%)      }
         .           }
         .           
         .           #[inline]
         .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
         1 ( 0.00%)      assert!(
         .                   !SESSION_GLOBALS.is_set(),
         .                   "SESSION_GLOBALS should never be overwritten! \
         .                    Use another thread if you need another SessionGlobals"
         .               );
         3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
         7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
         1 ( 0.00%)  }
         .           
         .           #[inline]
         .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
         .               assert!(
         .                   !SESSION_GLOBALS.is_set(),
         .                   "SESSION_GLOBALS should never be overwritten! \
         .                    Use another thread if you need another SessionGlobals"
         .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
         .               SESSION_GLOBALS.set(session_globals, f)
         .           }
         .           
         .           #[inline]
         .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
         .           where
         .               F: FnOnce(&SessionGlobals) -> R,
         .           {
         4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
         .           }
         .           
         .           #[inline]
         .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
         .           where
         .               F: FnOnce(&SessionGlobals) -> R,
         .           {
         1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
         3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
        11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
         1 ( 0.00%)      } else {
         .                   SESSION_GLOBALS.with(f)
         .               }
         .           }
         .           
         .           #[inline]
         .           pub fn with_session_globals<R, F>(f: F) -> R
         .           where
         .               F: FnOnce(&SessionGlobals) -> R,
         .           {
25,290,917 ( 0.04%)      SESSION_GLOBALS.with(f)
         .           }
         .           
         .           #[inline]
         .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
         .               create_session_globals_then(edition::DEFAULT_EDITION, f)
         .           }
         .           
         .           // If this ever becomes non thread-local, `decode_syntax_context`
         .           // and `decode_expn_id` will need to be updated to handle concurrent
         .           // deserialization.
         .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
         .           
         .           // FIXME: We should use this enum or something like it to get rid of the
         .           // use of magic `/rust/1.x/...` paths across the board.
       817 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
     1,630 ( 0.00%)  #[derive(Decodable)]
         .           pub enum RealFileName {
       152 ( 0.00%)      LocalPath(PathBuf),
         .               /// For remapped paths (namely paths into libstd that have been mapped
         .               /// to the appropriate spot on the local host's file system, and local file
         .               /// system paths that have been remapped with `FilePathMapping`),
         .               Remapped {
         .                   /// `local_path` is the (host-dependent) local path to the file. This is
         .                   /// None if the file was imported from another crate
         .                   local_path: Option<PathBuf>,
         .                   /// `virtual_name` is the stable path rustc will store internally within
-- line 175 ----------------------------------------
-- line 179 ----------------------------------------
         .           }
         .           
         .           impl Hash for RealFileName {
         .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
         .                   // To prevent #70924 from happening again we should only hash the
         .                   // remapped (virtualized) path if that exists. This is because
         .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
         .                   // remain stable even if the corresponding local_path changes
     4,518 ( 0.00%)          self.remapped_path_if_available().hash(state)
         .               }
         .           }
         .           
         .           // This is functionally identical to #[derive(Encodable)], with the exception of
         .           // an added assert statement
         .           impl<S: Encoder> Encodable<S> for RealFileName {
         .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
        46 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
         .                       RealFileName::LocalPath(ref local_path) => {
       184 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
         .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
         .                               Ok(())
         .                           })
         .                       }
         .           
         .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
         .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
         .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 213 ----------------------------------------
         .               }
         .           }
         .           
         .           impl RealFileName {
         .               /// Returns the path suitable for reading from the file system on the local host,
         .               /// if this information exists.
         .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
         .               pub fn local_path(&self) -> Option<&Path> {
         2 ( 0.00%)          match self {
         .                       RealFileName::LocalPath(p) => Some(p),
         .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => {
         .                           p.as_ref().map(PathBuf::as_path)
         .                       }
         .                   }
         .               }
         .           
         .               /// Returns the path suitable for reading from the file system on the local host,
         .               /// if this information exists.
         .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
         2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
         2 ( 0.00%)          match self {
         .                       RealFileName::LocalPath(p) => Some(p),
         .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
         .                   }
         3 ( 0.00%)      }
         .           
         .               /// Returns the path suitable for embedding into build artifacts. This would still
         .               /// be a local path if it has not been remapped. A remapped path will not correspond
         .               /// to a valid file system path: see `local_path_if_available()` for something that
         .               /// is more likely to return paths into the local host file system.
         .               pub fn remapped_path_if_available(&self) -> &Path {
    84,142 ( 0.00%)          match self {
         .                       RealFileName::LocalPath(p)
         .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
         .                   }
        24 ( 0.00%)      }
         .           
         .               /// Returns the path suitable for reading from the file system on the local host,
         .               /// if this information exists. Otherwise returns the remapped name.
         .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
         .               pub fn local_path_if_available(&self) -> &Path {
        23 ( 0.00%)          match self {
         .                       RealFileName::LocalPath(path)
         .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
         .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
         .                   }
         .               }
         .           
    12,386 ( 0.00%)      pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
    46,517 ( 0.00%)          match display_pref {
         .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
         .                       FileNameDisplayPreference::Remapped => {
         .                           self.remapped_path_if_available().to_string_lossy()
         .                       }
         .                   }
    18,579 ( 0.00%)      }
         .           }
         .           
         .           /// Differentiates between real files and common virtual files.
    11,526 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    10,129 ( 0.00%)  #[derive(Decodable, Encodable)]
         .           pub enum FileName {
         .               Real(RealFileName),
         .               /// Call to `quote!`.
         5 ( 0.00%)      QuoteExpansion(u64),
         .               /// Command line.
         .               Anon(u64),
         .               /// Hack in `src/librustc_ast/parse.rs`.
         .               // FIXME(jseyfried)
         .               MacroExpansion(u64),
        38 ( 0.00%)      ProcMacroSourceCode(u64),
         .               /// Strings provided as `--cfg [cfgspec]` stored in a `crate_cfg`.
         .               CfgSpec(u64),
         .               /// Strings provided as crate attributes in the CLI.
         .               CliCrateAttr(u64),
         .               /// Custom sources for explicit parser calls from plugins and drivers.
         .               Custom(String),
         .               DocTest(PathBuf, isize),
         .               /// Post-substitution inline assembly from LLVM.
         .               InlineAsm(u64),
         .           }
         .           
         .           impl From<PathBuf> for FileName {
       161 ( 0.00%)      fn from(p: PathBuf) -> Self {
        46 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
       138 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
       161 ( 0.00%)      }
         .           }
         .           
        34 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
         .           pub enum FileNameDisplayPreference {
         .               Remapped,
         .               Local,
         .           }
         .           
         .           pub struct FileNameDisplay<'a> {
         .               inner: &'a FileName,
         .               display_pref: FileNameDisplayPreference,
         .           }
         .           
         .           impl fmt::Display for FileNameDisplay<'_> {
   123,772 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
         .                   use FileName::*;
   185,658 ( 0.00%)          match *self.inner {
         .                       Real(ref name) => {
   185,658 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
         .                       }
         .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
         .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
         .                       Anon(_) => write!(fmt, "<anon>"),
         .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
         .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
         .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
         .                       Custom(ref s) => write!(fmt, "<{}>", s),
         .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
         .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
         .                   }
   154,715 ( 0.00%)      }
         .           }
         .           
         .           impl FileNameDisplay<'_> {
    12,752 ( 0.00%)      pub fn to_string_lossy(&self) -> Cow<'_, str> {
     9,564 ( 0.00%)          match self.inner {
     3,188 ( 0.00%)              FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
         .                       _ => Cow::from(format!("{}", self)),
         .                   }
    12,752 ( 0.00%)      }
         .           }
         .           
         .           impl FileName {
         .               pub fn is_real(&self) -> bool {
         .                   use FileName::*;
    62,772 ( 0.00%)          match *self {
         .                       Real(_) => true,
         .                       Anon(_)
         .                       | MacroExpansion(_)
         .                       | ProcMacroSourceCode(_)
         .                       | CfgSpec(_)
         .                       | CliCrateAttr(_)
         .                       | Custom(_)
         .                       | QuoteExpansion(_)
         .                       | DocTest(_, _)
         .                       | InlineAsm(_) => false,
         .                   }
         .               }
         .           
    33,837 ( 0.00%)      pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
         .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
    67,674 ( 0.00%)      }
         .           
         .               // This may include transient local filesystem information.
         .               // Must not be embedded in build outputs.
        23 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
         .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
        46 ( 0.00%)      }
         .           
         .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
         .                   FileNameDisplay { inner: self, display_pref }
         .               }
         .           
         .               pub fn macro_expansion_source_code(src: &str) -> FileName {
         .                   let mut hasher = StableHasher::new();
         .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 377 ----------------------------------------
         .               }
         .           
         .               pub fn anon_source_code(src: &str) -> FileName {
         .                   let mut hasher = StableHasher::new();
         .                   src.hash(&mut hasher);
         .                   FileName::Anon(hasher.finish())
         .               }
         .           
       190 ( 0.00%)      pub fn proc_macro_source_code(src: &str) -> FileName {
         .                   let mut hasher = StableHasher::new();
         .                   src.hash(&mut hasher);
        76 ( 0.00%)          FileName::ProcMacroSourceCode(hasher.finish())
       190 ( 0.00%)      }
         .           
        25 ( 0.00%)      pub fn cfg_spec_source_code(src: &str) -> FileName {
         .                   let mut hasher = StableHasher::new();
         .                   src.hash(&mut hasher);
        10 ( 0.00%)          FileName::QuoteExpansion(hasher.finish())
        25 ( 0.00%)      }
         .           
         .               pub fn cli_crate_attr_source_code(src: &str) -> FileName {
         .                   let mut hasher = StableHasher::new();
         .                   src.hash(&mut hasher);
         .                   FileName::CliCrateAttr(hasher.finish())
         .               }
         .           
         .               pub fn doc_test_source_code(path: PathBuf, line: isize) -> FileName {
-- line 403 ----------------------------------------
-- line 423 ----------------------------------------
         .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
         .           /// [`BytePos`] range between files.
         .           ///
         .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
         .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
         .           /// Using `Span` is generally preferred.
         .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
         .           pub struct SpanData {
        48 ( 0.00%)      pub lo: BytePos,
        48 ( 0.00%)      pub hi: BytePos,
         .               /// Information about where the macro came from, if this piece of
         .               /// code was created by a macro expansion.
        85 ( 0.00%)      pub ctxt: SyntaxContext,
        27 ( 0.00%)      pub parent: Option<LocalDefId>,
         .           }
         .           
         .           // Order spans by position in the file.
         .           impl Ord for SpanData {
         .               fn cmp(&self, other: &Self) -> Ordering {
         .                   let SpanData {
         .                       lo: s_lo,
         .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
         .               }
         .               #[inline]
         .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
         .                   Span::new(self.lo, self.hi, self.ctxt, parent)
         .               }
         .               /// Returns `true` if this is a dummy span with any hygienic context.
         .               #[inline]
         .               pub fn is_dummy(self) -> bool {
 6,864,552 ( 0.01%)          self.lo.0 == 0 && self.hi.0 == 0
         .               }
         .               /// Returns `true` if `self` fully encloses `other`.
         .               pub fn contains(self, other: Self) -> bool {
   135,096 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
         .               }
         .           }
         .           
         .           // The interner is pointed to by a thread local value which is only set on the main thread
         .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
         .           // to avoid panics and other errors, even though it would be memory safe to do so.
         .           #[cfg(not(parallel_compiler))]
         .           impl !Send for Span {}
         .           #[cfg(not(parallel_compiler))]
         .           impl !Sync for Span {}
         .           
         .           impl PartialOrd for Span {
    65,416 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
    49,062 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
    65,416 ( 0.00%)      }
         .           }
         .           impl Ord for Span {
         .               fn cmp(&self, rhs: &Self) -> Ordering {
         .                   Ord::cmp(&self.data(), &rhs.data())
         .               }
         .           }
         .           
         .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
         .           }
         .           
         .           impl Span {
         .               #[inline]
         .               pub fn lo(self) -> BytePos {
         .                   self.data().lo
         .               }
         .               #[inline]
   490,923 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
         .                   self.data().with_lo(lo)
   327,282 ( 0.00%)      }
         .               #[inline]
   149,952 ( 0.00%)      pub fn hi(self) -> BytePos {
         .                   self.data().hi
   149,952 ( 0.00%)      }
         .               #[inline]
   646,515 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
         .                   self.data().with_hi(hi)
   431,010 ( 0.00%)      }
         .               #[inline]
         .               pub fn ctxt(self) -> SyntaxContext {
         .                   self.data_untracked().ctxt
         .               }
         .               #[inline]
   222,410 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
         .                   self.data_untracked().with_ctxt(ctxt)
   133,446 ( 0.00%)      }
         .               #[inline]
         .               pub fn parent(self) -> Option<LocalDefId> {
         .                   self.data().parent
         .               }
         .               #[inline]
        45 ( 0.00%)      pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
         .                   self.data().with_parent(ctxt)
        30 ( 0.00%)      }
         .           
         .               /// Returns `true` if this is a dummy span with any hygienic context.
         .               #[inline]
         .               pub fn is_dummy(self) -> bool {
         .                   self.data_untracked().is_dummy()
         .               }
         .           
         .               /// Returns `true` if this span comes from a macro or desugaring.
-- line 574 ----------------------------------------
-- line 600 ----------------------------------------
         .               /// Returns a new span representing an empty span at the beginning of this span.
         .               #[inline]
         .               pub fn shrink_to_lo(self) -> Span {
         .                   let span = self.data_untracked();
         .                   span.with_hi(span.lo)
         .               }
         .               /// Returns a new span representing an empty span at the end of this span.
         .               #[inline]
       489 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
         .                   let span = self.data_untracked();
         .                   span.with_lo(span.hi)
       326 ( 0.00%)      }
         .           
         .               #[inline]
         .               /// Returns `true` if `hi == lo`.
         .               pub fn is_empty(self) -> bool {
         .                   let span = self.data_untracked();
         .                   span.hi == span.lo
         .               }
         .           
         .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
         .               pub fn substitute_dummy(self, other: Span) -> Span {
         .                   if self.is_dummy() { other } else { self }
         .               }
         .           
         .               /// Returns `true` if `self` fully encloses `other`.
   405,288 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
         .                   let span = self.data();
         .                   let other = other.data();
         .                   span.contains(other)
   270,192 ( 0.00%)      }
         .           
         .               /// Returns `true` if `self` touches `other`.
         .               pub fn overlaps(self, other: Span) -> bool {
         .                   let span = self.data();
         .                   let other = other.data();
         .                   span.lo < other.hi && other.lo < span.hi
         .               }
         .           
-- line 638 ----------------------------------------
-- line 663 ----------------------------------------
         .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
         .               /// if any.
         .               pub fn parent_callsite(self) -> Option<Span> {
         .                   let expn_data = self.ctxt().outer_expn_data();
         .                   if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
         .               }
         .           
         .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
   446,810 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
   223,405 ( 0.00%)          while !outer.contains(self) {
         .                       self = self.parent_callsite()?;
         .                   }
         .                   Some(self)
   491,491 ( 0.00%)      }
         .           
         .               /// Edition of the crate from which this span came.
   582,807 ( 0.00%)      pub fn edition(self) -> edition::Edition {
         .                   self.ctxt().edition()
   388,538 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn rust_2015(self) -> bool {
   131,779 ( 0.00%)          self.edition() == edition::Edition::Edition2015
         .               }
         .           
         .               #[inline]
         .               pub fn rust_2018(self) -> bool {
    26,308 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
         .               }
         .           
         .               #[inline]
         .               pub fn rust_2021(self) -> bool {
    10,691 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
         .               }
         .           
         .               /// Returns the source callee.
         .               ///
         .               /// Returns `None` if the supplied span has no expansion trace,
         .               /// else returns the `ExpnData` for the macro definition
         .               /// corresponding to the source callsite.
         .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
         .                   }
         .                   let expn_data = self.ctxt().outer_expn_data();
         .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
         .               }
         .           
         .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
         .               /// items can be used (that is, a macro marked with
         .               /// `#[allow_internal_unstable]`).
    15,790 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
     3,158 ( 0.00%)          self.ctxt()
         .                       .outer_expn_data()
         .                       .allow_internal_unstable
         .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
    12,632 ( 0.00%)      }
         .           
         .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
   397,026 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
   340,308 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
         .                       ExpnKind::Desugaring(k) => k == kind,
         .                       _ => false,
         .                   }
   283,590 ( 0.00%)      }
         .           
         .               /// Returns the compiler desugaring that created this span, or `None`
         .               /// if this span is not from a desugaring.
       210 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
       252 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
         .                       ExpnKind::Desugaring(k) => Some(k),
         .                       _ => None,
         .                   }
       168 ( 0.00%)      }
         .           
         .               /// Checks if a span is "internal" to a macro in which `unsafe`
         .               /// can be used without triggering the `unsafe_code` lint.
         .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
        88 ( 0.00%)      pub fn allows_unsafe(self) -> bool {
        22 ( 0.00%)          self.ctxt().outer_expn_data().allow_internal_unsafe
        88 ( 0.00%)      }
         .           
         .               pub fn macro_backtrace(mut self) -> impl Iterator<Item = ExpnData> {
         .                   let mut prev_span = DUMMY_SP;
         .                   std::iter::from_fn(move || {
         .                       loop {
         .                           let expn_data = self.ctxt().outer_expn_data();
         .                           if expn_data.is_root() {
         .                               return None;
-- line 752 ----------------------------------------
-- line 767 ----------------------------------------
         .           
         .               /// Returns a `Span` that would enclose both `self` and `end`.
         .               ///
         .               /// ```text
         .               ///     ____             ___
         .               ///     self lorem ipsum end
         .               ///     ^^^^^^^^^^^^^^^^^^^^
         .               /// ```
11,389,378 ( 0.02%)      pub fn to(self, end: Span) -> Span {
         .                   let span_data = self.data();
         .                   let end_data = end.data();
         .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
         .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
         .                   // have an incomplete span than a completely nonsensical one.
 2,067,064 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
     3,732 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
         .                           return end;
     3,000 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
         .                           return self;
         .                       }
         .                       // Both spans fall within a macro.
         .                       // FIXME(estebank): check if it is the *same* macro.
         .                   }
         .                   Span::new(
         .                       cmp::min(span_data.lo, end_data.lo),
         .                       cmp::max(span_data.hi, end_data.hi),
         .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
 7,223,636 ( 0.01%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
         .                   )
 9,318,582 ( 0.01%)      }
         .           
         .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
         .               ///
         .               /// ```text
         .               ///     ____             ___
         .               ///     self lorem ipsum end
         .               ///         ^^^^^^^^^^^^^
         .               /// ```
    21,714 ( 0.00%)      pub fn between(self, end: Span) -> Span {
         .                   let span = self.data();
         .                   let end = end.data();
         .                   Span::new(
         .                       span.hi,
         .                       end.lo,
         .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
    13,818 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
         .                   )
    15,792 ( 0.00%)      }
         .           
         .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
         .               ///
         .               /// ```text
         .               ///     ____             ___
         .               ///     self lorem ipsum end
         .               ///     ^^^^^^^^^^^^^^^^^
         .               /// ```
   518,628 ( 0.00%)      pub fn until(self, end: Span) -> Span {
         .                   // Most of this function's body is copied from `to`.
         .                   // We can't just do `self.to(end.shrink_to_lo())`,
         .                   // because to also does some magic where it uses min/max so
         .                   // it can handle overlapping spans. Some advanced mis-use of
         .                   // `until` with different ctxts makes this visible.
         .                   let span_data = self.data();
         .                   let end_data = end.data();
         .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
         .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
         .                   // have an incomplete span than a completely nonsensical one.
    94,296 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
         .                       if span_data.ctxt == SyntaxContext::root() {
         .                           return end;
         .                       } else if end_data.ctxt == SyntaxContext::root() {
         .                           return self;
         .                       }
         .                       // Both spans fall within a macro.
         .                       // FIXME(estebank): check if it is the *same* macro.
         .                   }
         .                   Span::new(
         .                       span_data.lo,
         .                       end_data.lo,
         .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
   330,036 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
         .                   )
   424,332 ( 0.00%)      }
         .           
     6,545 ( 0.00%)      pub fn from_inner(self, inner: InnerSpan) -> Span {
         .                   let span = self.data();
         .                   Span::new(
         .                       span.lo + BytePos::from_usize(inner.start),
         .                       span.lo + BytePos::from_usize(inner.end),
         .                       span.ctxt,
         .                       span.parent,
         .                   )
     4,165 ( 0.00%)      }
         .           
         .               /// Equivalent of `Span::def_site` from the proc macro API,
         .               /// except that the location is taken from the `self` span.
         .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
    16,350 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
         .               }
         .           
         .               /// Equivalent of `Span::call_site` from the proc macro API,
         .               /// except that the location is taken from the `self` span.
         .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
        98 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
         .               }
         .           
         .               /// Equivalent of `Span::mixed_site` from the proc macro API,
         .               /// except that the location is taken from the `self` span.
         .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        76 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
         .               }
         .           
         .               /// Produces a span with the same location as `self` and context produced by a macro with the
         .               /// given ID and transparency, assuming that macro was defined directly and not produced by
         .               /// some other macro (which is the case for built-in and procedural macros).
    99,144 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
         .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
    57,834 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
         .                   let span = self.data();
 9,873,774 ( 0.01%)          span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
         .               }
         .           
         .               #[inline]
         .               pub fn remove_mark(&mut self) -> ExpnId {
     2,090 ( 0.00%)          let mut span = self.data();
     2,090 ( 0.00%)          let mark = span.ctxt.remove_mark();
     8,360 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
         .                   mark
         .               }
         .           
         .               #[inline]
         .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
         .                   let mut span = self.data();
         .                   let mark = span.ctxt.adjust(expn_id);
         .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
         .                   mark
         .               }
         .           
         .               #[inline]
   553,284 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
   368,856 ( 0.00%)          let mut span = self.data();
   236,754 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
   553,284 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
         .                   mark
   544,134 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
       858 ( 0.00%)          let mut span = self.data();
     1,287 ( 0.00%)          let mark = span.ctxt.glob_adjust(expn_id, glob_span);
     3,432 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
         .                   mark
         .               }
         .           
         .               #[inline]
       216 ( 0.00%)      pub fn reverse_glob_adjust(
         .                   &mut self,
         .                   expn_id: ExpnId,
         .                   glob_span: Span,
         .               ) -> Option<Option<ExpnId>> {
     1,008 ( 0.00%)          let mut span = self.data();
     1,848 ( 0.00%)          let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
     3,672 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
         .                   mark
       240 ( 0.00%)      }
         .           
         .               #[inline]
 1,479,880 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
         .                   let span = self.data();
         .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
 1,294,895 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn normalize_to_macro_rules(self) -> Span {
         .                   let span = self.data();
         .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
         .               }
         .           }
         .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
         .           
         .               /// What label should we attach to this span (if any)?
         .               pub label: Option<String>,
         .           }
         .           
         .           impl Default for Span {
         .               fn default() -> Self {
         .                   DUMMY_SP
         2 ( 0.00%)      }
         .           }
         .           
         .           impl<E: Encoder> Encodable<E> for Span {
         .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
         .                   let span = self.data();
         .                   s.emit_struct(false, |s| {
         .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
         .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
         .           /// any spans that are debug-printed during the closure's execution.
         .           ///
         .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
         .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
         .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
         .           /// a `TyCtxt` is available. In this case, we fall back to
         .           /// the `SourceMap` provided to this function. If that is not available,
         .           /// we fall back to printing the raw `Span` field values.
         9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
         .               with_session_globals(|session_globals| {
         2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
         .               });
         .               struct ClearSourceMap;
         .               impl Drop for ClearSourceMap {
         .                   fn drop(&mut self) {
         .                       with_session_globals(|session_globals| {
         1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
         .                       });
         .                   }
         .               }
         .           
         .               let _guard = ClearSourceMap;
         4 ( 0.00%)      f()
         8 ( 0.00%)  }
         .           
         .           pub fn debug_with_source_map(
         .               span: Span,
         .               f: &mut fmt::Formatter<'_>,
         .               source_map: &SourceMap,
         .           ) -> fmt::Result {
         .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
         .           }
-- line 1021 ----------------------------------------
-- line 1047 ----------------------------------------
         .           }
         .           
         .           impl MultiSpan {
         .               #[inline]
         .               pub fn new() -> MultiSpan {
         .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
         .               }
         .           
        10 ( 0.00%)      pub fn from_span(primary_span: Span) -> MultiSpan {
   573,950 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        10 ( 0.00%)      }
         .           
         .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
         .                   vec.sort();
   216,000 ( 0.00%)          MultiSpan { primary_spans: vec, span_labels: vec![] }
         .               }
         .           
        24 ( 0.00%)      pub fn push_span_label(&mut self, span: Span, label: String) {
         8 ( 0.00%)          self.span_labels.push((span, label));
        20 ( 0.00%)      }
         .           
         .               /// Selects the first primary span (if any).
         .               pub fn primary_span(&self) -> Option<Span> {
         .                   self.primary_spans.first().cloned()
    35,868 ( 0.00%)      }
         .           
         .               /// Returns all primary spans.
         .               pub fn primary_spans(&self) -> &[Span] {
         .                   &self.primary_spans
         .               }
         .           
         .               /// Returns `true` if any of the primary spans are displayable.
         .               pub fn has_primary_spans(&self) -> bool {
-- line 1079 ----------------------------------------
-- line 1139 ----------------------------------------
         .           
         .               /// Returns `true` if any of the span labels is displayable.
         .               pub fn has_span_labels(&self) -> bool {
         .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
         .               }
         .           }
         .           
         .           impl From<Span> for MultiSpan {
   573,940 ( 0.00%)      fn from(span: Span) -> MultiSpan {
         .                   MultiSpan::from_span(span)
   573,940 ( 0.00%)      }
         .           }
         .           
         .           impl From<Vec<Span>> for MultiSpan {
   216,000 ( 0.00%)      fn from(spans: Vec<Span>) -> MultiSpan {
   172,800 ( 0.00%)          MultiSpan::from_spans(spans)
   216,000 ( 0.00%)      }
         .           }
         .           
         .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
         .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
         .           pub struct MultiByteChar {
         .               /// The absolute offset of the character in the `SourceMap`.
         .               pub pos: BytePos,
         .               /// The number of bytes, `>= 2`.
         .               pub bytes: u8,
         .           }
         .           
         .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
    14,312 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
         .           pub enum NonNarrowChar {
         .               /// Represents a zero-width character.
         .               ZeroWidth(BytePos),
         .               /// Represents a wide (full-width) character.
         .               Wide(BytePos),
         .               /// Represents a tab character, represented visually with a width of 4 characters.
         .               Tab(BytePos),
         .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl Add<BytePos> for NonNarrowChar {
         .               type Output = Self;
         .           
         .               fn add(self, rhs: BytePos) -> Self {
    28,540 ( 0.00%)          match self {
         .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
         .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
         .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
         .                   }
         .               }
         .           }
         .           
         .           impl Sub<BytePos> for NonNarrowChar {
         .               type Output = Self;
         .           
     7,156 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
    28,540 ( 0.00%)          match self {
         .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
         .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
         .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
         .                   }
    21,468 ( 0.00%)      }
         .           }
         .           
         .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
         .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
         .           pub struct NormalizedPos {
         .               /// The absolute offset of the character in the `SourceMap`.
         .               pub pos: BytePos,
         .               /// The difference between original and normalized string at position.
         .               pub diff: u32,
         .           }
         .           
        69 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
         .           pub enum ExternalSource {
         .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
         .               Unneeded,
         .               Foreign {
         .                   kind: ExternalSourceKind,
         .                   /// This SourceFile's byte-offset within the source_map of its original crate.
         .                   original_start_pos: BytePos,
         .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1257 ----------------------------------------
         .               AbsentOk,
         .               /// A failed attempt has been made to load the external source.
         .               AbsentErr,
         .               Unneeded,
         .           }
         .           
         .           impl ExternalSource {
         .               pub fn get_source(&self) -> Option<&Lrc<String>> {
    13,040 ( 0.00%)          match self {
         .                       ExternalSource::Foreign { kind: ExternalSourceKind::Present(ref src), .. } => Some(src),
         .                       _ => None,
         .                   }
         .               }
         .           }
         .           
         .           #[derive(Debug)]
         .           pub struct OffsetOverflowError;
         .           
     1,650 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
         .           pub enum SourceFileHashAlgorithm {
         .               Md5,
         .               Sha1,
         .               Sha256,
         .           }
         .           
         .           impl FromStr for SourceFileHashAlgorithm {
         .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
         .                       _ => Err(()),
         .                   }
         .               }
         .           }
         .           
         .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
         .           
         .           /// The hash of the on-disk source file used for debug info.
       138 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
     3,300 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
         .           pub struct SourceFileHash {
         .               pub kind: SourceFileHashAlgorithm,
         .               value: [u8; 32],
         .           }
         .           
         .           impl SourceFileHash {
         .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
         1 ( 0.00%)          let mut hash = SourceFileHash { kind, value: Default::default() };
         .                   let len = hash.hash_len();
         .                   let value = &mut hash.value[..len];
         .                   let data = src.as_bytes();
         .                   match kind {
         .                       SourceFileHashAlgorithm::Md5 => {
        90 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
         .                       }
         .                       SourceFileHashAlgorithm::Sha1 => {
         .                           value.copy_from_slice(&Sha1::digest(data));
         .                       }
         .                       SourceFileHashAlgorithm::Sha256 => {
         .                           value.copy_from_slice(&Sha256::digest(data));
         .                       }
         .                   }
         .                   hash
         .               }
         .           
         .               /// Check if the stored hash matches the hash of the string.
         .               pub fn matches(&self, src: &str) -> bool {
         1 ( 0.00%)          Self::new(self.kind, src) == *self
         .               }
         .           
         .               /// The bytes of the hash.
         .               pub fn hash_bytes(&self) -> &[u8] {
       343 ( 0.00%)          let len = self.hash_len();
       343 ( 0.00%)          &self.value[..len]
       343 ( 0.00%)      }
         .           
         .               fn hash_len(&self) -> usize {
       775 ( 0.00%)          match self.kind {
         .                       SourceFileHashAlgorithm::Md5 => 16,
         .                       SourceFileHashAlgorithm::Sha1 => 20,
         .                       SourceFileHashAlgorithm::Sha256 => 32,
         .                   }
         .               }
         .           }
         .           
         .           /// A single source in the [`SourceMap`].
     1,334 ( 0.00%)  #[derive(Clone)]
         .           pub struct SourceFile {
         .               /// The name of the file that the source came from. Source that doesn't
         .               /// originate from files has names between angle brackets by convention
         .               /// (e.g., `<anon>`).
         .               pub name: FileName,
         .               /// The complete source code.
        23 ( 0.00%)      pub src: Option<Lrc<String>>,
         .               /// The source code's hash.
         .               pub src_hash: SourceFileHash,
         .               /// The external source code (used for external crates, which will have a `None`
         .               /// value as `self.src`.
         .               pub external_src: Lock<ExternalSource>,
         .               /// The start position of this source in the `SourceMap`.
         .               pub start_pos: BytePos,
         .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
         .               pub lines: Vec<BytePos>,
         .               /// Locations of multi-byte characters in the source code.
         .               pub multibyte_chars: Vec<MultiByteChar>,
         .               /// Width of characters that are not narrow in the source code.
         .               pub non_narrow_chars: Vec<NonNarrowChar>,
         .               /// Locations of characters removed during normalization.
         .               pub normalized_pos: Vec<NormalizedPos>,
         .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
        23 ( 0.00%)      pub name_hash: u128,
         .               /// Indicates which crate this `SourceFile` was imported from.
        23 ( 0.00%)      pub cnum: CrateNum,
         .           }
         .           
         .           impl<S: Encoder> Encodable<S> for SourceFile {
         .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
         .                   s.emit_struct(false, |s| {
         .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
         .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
         .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
         .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
         .                       s.emit_struct_field("lines", false, |s| {
         .                           let lines = &self.lines[..];
         .                           // Store the length.
         .                           s.emit_u32(lines.len() as u32)?;
         .           
        92 ( 0.00%)                  if !lines.is_empty() {
         .                               // In order to preserve some space, we exploit the fact that
         .                               // the lines list is sorted and individual lines are
         .                               // probably not that long. Because of that we can store lines
         .                               // as a difference list, using as little space as possible
         .                               // for the differences.
         .                               let max_line_length = if lines.len() == 1 {
         .                                   0
         .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
         .                                       .array_windows()
         .                                       .map(|&[fst, snd]| snd - fst)
         .                                       .map(|bp| bp.to_usize())
         .                                       .max()
         .                                       .unwrap()
         .                               };
         .           
         .                               let bytes_per_diff: u8 = match max_line_length {
        46 ( 0.00%)                          0..=0xFF => 1,
         4 ( 0.00%)                          0x100..=0xFFFF => 2,
         .                                   _ => 4,
         .                               };
         .           
         .                               // Encode the number of bytes used per diff.
         .                               bytes_per_diff.encode(s)?;
         .           
         .                               // Encode the first element.
         .                               lines[0].encode(s)?;
         .           
         .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
         .           
        48 ( 0.00%)                      match bytes_per_diff {
         .                                   1 => {
         .                                       for diff in diff_iter {
         .                                           (diff.0 as u8).encode(s)?
         .                                       }
         .                                   }
         .                                   2 => {
         .                                       for diff in diff_iter {
         .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
         .                                   _ => unreachable!(),
         .                               }
         .                           }
         .           
         .                           Ok(())
         .                       })?;
         .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
         .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
        69 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
         .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
       253 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
         .                   })
         .               }
         .           }
         .           
         .           impl<D: Decoder> Decodable<D> for SourceFile {
     7,425 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
         .                   d.read_struct(|d| {
         .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
         .                       let src_hash: SourceFileHash =
         .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
         .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
         .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
         .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
         .                           let num_lines: u32 = Decodable::decode(d);
       825 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
         .           
         .                           if num_lines > 0 {
         .                               // Read the number of bytes used per diff.
         .                               let bytes_per_diff: u8 = Decodable::decode(d);
         .           
         .                               // Read the first element.
         .                               let mut line_start: BytePos = Decodable::decode(d);
         .                               lines.push(line_start);
         .           
         .                               for _ in 1..num_lines {
 1,133,346 ( 0.00%)                          let diff = match bytes_per_diff {
         .                                       1 => d.read_u8() as u32,
         .                                       2 => d.read_u16() as u32,
         .                                       4 => d.read_u32(),
         .                                       _ => unreachable!(),
         .                                   };
         .           
         .                                   line_start = line_start + BytePos(diff);
         .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
         .                           }
         .           
         .                           lines
         .                       });
         .                       let multibyte_chars: Vec<MultiByteChar> =
         .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
         .                       let non_narrow_chars: Vec<NonNarrowChar> =
         .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
     1,650 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
         .                       let normalized_pos: Vec<NormalizedPos> =
         .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
         .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
     9,075 ( 0.00%)              SourceFile {
     6,600 ( 0.00%)                  name,
         .                           start_pos,
         .                           end_pos,
         .                           src: None,
     3,300 ( 0.00%)                  src_hash,
         .                           // Unused - the metadata decoder will construct
         .                           // a new SourceFile, filling in `external_src` properly
         .                           external_src: Lock::new(ExternalSource::Unneeded),
     3,300 ( 0.00%)                  lines,
     3,300 ( 0.00%)                  multibyte_chars,
     3,300 ( 0.00%)                  non_narrow_chars,
     3,300 ( 0.00%)                  normalized_pos,
         .                           name_hash,
         .                           cnum,
         .                       }
         .                   })
     7,425 ( 0.00%)      }
         .           }
         .           
         .           impl fmt::Debug for SourceFile {
         .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   write!(fmt, "SourceFile({:?})", self.name)
         .               }
         .           }
         .           
         .           impl SourceFile {
       319 ( 0.00%)      pub fn new(
         .                   name: FileName,
         .                   mut src: String,
         .                   start_pos: BytePos,
         .                   hash_kind: SourceFileHashAlgorithm,
         .               ) -> Self {
         .                   // Compute the file hash before any normalization.
         .                   let src_hash = SourceFileHash::new(hash_kind, &src);
        87 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
         .           
         .                   let name_hash = {
         .                       let mut hasher: StableHasher = StableHasher::new();
        58 ( 0.00%)              name.hash(&mut hasher);
         .                       hasher.finish::<u128>()
         .                   };
        58 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
        87 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
         .           
       348 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
        58 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
         .           
       493 ( 0.00%)          SourceFile {
         .                       name,
         .                       src: Some(Lrc::new(src)),
       319 ( 0.00%)              src_hash,
         .                       external_src: Lock::new(ExternalSource::Unneeded),
         .                       start_pos,
         .                       end_pos: Pos::from_usize(end_pos),
       116 ( 0.00%)              lines,
       116 ( 0.00%)              multibyte_chars,
       116 ( 0.00%)              non_narrow_chars,
       116 ( 0.00%)              normalized_pos,
         .                       name_hash,
         .                       cnum: LOCAL_CRATE,
         .                   }
       261 ( 0.00%)      }
         .           
         .               /// Returns the `BytePos` of the beginning of the current line.
   339,502 ( 0.00%)      pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
         .                   let line_index = self.lookup_line(pos).unwrap();
   169,751 ( 0.00%)          self.lines[line_index]
   339,502 ( 0.00%)      }
         .           
         .               /// Add externally loaded source.
         .               /// If the hash of the input doesn't match or no input is supplied via None,
         .               /// it is interpreted as an error and the corresponding enum variant is set.
         .               /// The return value signifies whether some kind of source is present.
   269,353 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
         .               where
         .                   F: FnOnce() -> Option<String>,
         .               {
    39,667 ( 0.00%)          if matches!(
    76,958 ( 0.00%)              *self.external_src.borrow(),
         .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
         .                   ) {
         1 ( 0.00%)              let src = get_src();
         .                       let mut external_src = self.external_src.borrow_mut();
         .                       // Check that no-one else have provided the source while we were getting it
         3 ( 0.00%)              if let ExternalSource::Foreign {
         .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
         .                       } = &mut *external_src
         .                       {
         5 ( 0.00%)                  if let Some(mut src) = src {
         .                               // The src_hash needs to be computed on the pre-normalized src.
         1 ( 0.00%)                      if self.src_hash.matches(&src) {
         3 ( 0.00%)                          normalize_src(&mut src, BytePos::from_usize(0));
         8 ( 0.00%)                          *src_kind = ExternalSourceKind::Present(Lrc::new(src));
         .                                   return true;
         .                               }
         .                           } else {
         .                               *src_kind = ExternalSourceKind::AbsentErr;
         .                           }
         .           
         .                           false
         .                       } else {
         .                           self.src.is_some() || external_src.get_source().is_some()
         .                       }
         .                   } else {
    38,478 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
         .                   }
   346,311 ( 0.00%)      }
         .           
         .               /// Gets a line from the list of pre-computed line-beginnings.
         .               /// The line number here is 0-based.
         .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
         .                   fn get_until_newline(src: &str, begin: usize) -> &str {
         .                       // We can't use `lines.get(line_number+1)` because we might
         .                       // be parsing when we call this function and thus the current
         .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
         .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
         .                   } else {
         .                       None
         .                   }
         .               }
         .           
         .               pub fn is_real_file(&self) -> bool {
         .                   self.name.is_real()
    31,386 ( 0.00%)      }
         .           
         .               pub fn is_imported(&self) -> bool {
         .                   self.src.is_none()
   807,968 ( 0.00%)      }
         .           
         .               pub fn count_lines(&self) -> usize {
         .                   self.lines.len()
         .               }
         .           
         .               /// Finds the line containing the given position. The return value is the
         .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
         .               /// number. If the source_file is empty or the position is located before the
         .               /// first line, `None` is returned.
         .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
   768,684 ( 0.00%)          match self.lines.binary_search(&pos) {
         .                       Ok(idx) => Some(idx),
         .                       Err(0) => None,
         .                       Err(idx) => Some(idx - 1),
         .                   }
         .               }
         .           
         .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
 1,286,813 ( 0.00%)          if self.is_empty() {
         .                       return self.start_pos..self.end_pos;
         .                   }
         .           
   958,981 ( 0.00%)          assert!(line_index < self.lines.len());
 1,272,879 ( 0.00%)          if line_index == (self.lines.len() - 1) {
       128 ( 0.00%)              self.lines[line_index]..self.end_pos
         .                   } else {
   848,480 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
         .                   }
         .               }
         .           
         .               /// Returns whether or not the file contains the given `SourceMap` byte
         .               /// position. The position one past the end of the file is considered to be
         .               /// contained by the file. This implies that files for which `is_empty`
         .               /// returns true still contain one byte position according to this function.
         .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
         .                       Err(i) if i == 0 => 0,
         .                       Err(i) => self.normalized_pos[i - 1].diff,
         .                   };
         .           
         .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
         .               }
         .           
         .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
    15,960 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
         .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
         .                   let mut total_extra_bytes = 0;
         .           
    47,880 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
         .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
     2,148 ( 0.00%)              if mbc.pos < bpos {
         .                           // Every character is at least one byte, so we only
         .                           // count the actual extra bytes.
     5,688 ( 0.00%)                  total_extra_bytes += mbc.bytes as u32 - 1;
         .                           // We should never see a byte position in the middle of a
         .                           // character.
     4,740 ( 0.00%)                  assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
         .                       } else {
         .                           break;
         .                       }
         .                   }
         .           
    95,760 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
    79,800 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
    31,920 ( 0.00%)      }
         .           
         .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
         .               /// given `BytePos`.
    55,860 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
    15,960 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
     5,599 ( 0.00%)          match self.lookup_line(pos) {
         .                       Some(a) => {
         .                           let line = a + 1; // Line numbers start at 1
     7,980 ( 0.00%)                  let linebpos = self.lines[a];
    15,960 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
         .                           let col = chpos - linechpos;
         .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
         .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
         .                           debug!("byte is on line: {}", line);
     7,980 ( 0.00%)                  assert!(chpos >= linechpos);
         .                           (line, col)
         .                       }
         .                       None => (0, chpos),
         .                   }
    63,840 ( 0.00%)      }
         .           
         .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
         .               /// column offset when displayed, for a given `BytePos`.
    63,840 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
    23,940 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
    15,960 ( 0.00%)          if line > 0 {
         .                       let col = col_or_chpos;
     7,980 ( 0.00%)              let linebpos = self.lines[line - 1];
         .                       let col_display = {
         .                           let start_width_idx = self
         .                               .non_narrow_chars
         .                               .binary_search_by_key(&linebpos, |x| x.pos())
         .                               .unwrap_or_else(|x| x);
         .                           let end_width_idx = self
         .                               .non_narrow_chars
         .                               .binary_search_by_key(&pos, |x| x.pos())
         .                               .unwrap_or_else(|x| x);
       141 ( 0.00%)                  let special_chars = end_width_idx - start_width_idx;
         .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
         .                               .iter()
         .                               .map(|x| x.width())
         .                               .sum();
    39,900 ( 0.00%)                  col.0 - special_chars + non_narrow
         .                       };
         .                       (line, col, col_display)
         .                   } else {
         .                       let chpos = col_or_chpos;
         .                       let col_display = {
         .                           let end_width_idx = self
         .                               .non_narrow_chars
         .                               .binary_search_by_key(&pos, |x| x.pos())
         .                               .unwrap_or_else(|x| x);
         .                           let non_narrow: usize =
         .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
         .                           chpos.0 - end_width_idx + non_narrow
         .                       };
         .                       (0, chpos, col_display)
         .                   }
    55,860 ( 0.00%)      }
         .           }
         .           
         .           /// Normalizes the source code and records the normalizations.
       300 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
         .               let mut normalized_pos = vec![];
         .               remove_bom(src, &mut normalized_pos);
         .               normalize_newlines(src, &mut normalized_pos);
         .           
         .               // Offset all the positions by start_pos to match the final file positions.
         .               for np in &mut normalized_pos {
         .                   np.pos.0 += start_pos.0;
         .               }
         .           
         .               normalized_pos
       270 ( 0.00%)  }
         .           
         .           /// Removes UTF-8 BOM, if any.
         .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        29 ( 0.00%)      if src.starts_with('\u{feff}') {
         .                   src.drain(..3);
         .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
         .               }
         .           }
         .           
         .           /// Replaces `\r\n` with `\n` in-place in `src`.
         .           ///
         .           /// Returns error if there's a lone `\r` in the string.
         .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        30 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
         .                   return;
         .               }
         .           
         .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
         .               // While we *can* call `as_mut_vec` and do surgery on the live string
         .               // directly, let's rather steal the contents of `src`. This makes the code
         .               // safe even if a panic occurs.
         .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
         .               (
         .                   $(
         .                       $(#[$attr:meta])*
         .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
         .                   )*
         .               ) => {
         .                   $(
         .                       $(#[$attr])*
   767,357 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
         .           
         .                       impl Pos for $ident {
         .                           #[inline(always)]
         .                           fn from_usize(n: usize) -> $ident {
     6,840 ( 0.00%)                      $ident(n as $inner_ty)
         .                           }
         .           
         .                           #[inline(always)]
         .                           fn to_usize(&self) -> usize {
   162,694 ( 0.00%)                      self.0 as usize
         .                           }
         .           
         .                           #[inline(always)]
         .                           fn from_u32(n: u32) -> $ident {
         .                               $ident(n as $inner_ty)
         .                           }
         .           
         .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
         .                           }
         .                       }
         .           
         .                       impl Add for $ident {
         .                           type Output = $ident;
         .           
         .                           #[inline(always)]
         .                           fn add(self, rhs: $ident) -> $ident {
 3,154,421 ( 0.00%)                      $ident(self.0 + rhs.0)
         .                           }
         .                       }
         .           
         .                       impl Sub for $ident {
         .                           type Output = $ident;
         .           
         .                           #[inline(always)]
         .                           fn sub(self, rhs: $ident) -> $ident {
19,398,890 ( 0.03%)                      $ident(self.0 - rhs.0)
         .                           }
         .                       }
         .                   )*
         .               };
         .           }
         .           
         .           impl_pos! {
         .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
         .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
         .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
         .                   s.emit_u32(self.0)
         .               }
         .           }
         .           
         .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
         .               fn decode(d: &mut D) -> BytePos {
   881,910 ( 0.00%)          BytePos(d.read_u32())
         .               }
         .           }
         .           
         .           // _____________________________________________________________________________
         .           // Loc, SourceFileAndLine, SourceFileAndBytePos
         .           //
         .           
         .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2042 ----------------------------------------
         .           /// Range inside of a `Span` used for diagnostics when we only have access to relative positions.
         .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
         .           pub struct InnerSpan {
         .               pub start: usize,
         .               pub end: usize,
         .           }
         .           
         .           impl InnerSpan {
     3,586 ( 0.00%)      pub fn new(start: usize, end: usize) -> InnerSpan {
         .                   InnerSpan { start, end }
     1,793 ( 0.00%)      }
         .           }
         .           
         .           /// Requirements for a `StableHashingContext` to be used in this crate.
         .           ///
         .           /// This is a hack to allow using the [`HashStable_Generic`] derive macro
         .           /// instead of implementing everything in rustc_middle.
         .           pub trait HashStableContext {
         .               fn def_path_hash(&self, def_id: DefId) -> DefPathHash;
-- line 2060 ----------------------------------------
-- line 2079 ----------------------------------------
         .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
         .               /// triple, which stays the same even if the containing `SourceFile` has moved
         .               /// within the `SourceMap`.
         .               ///
         .               /// Also note that we are hashing byte offsets for the column, not unicode
         .               /// codepoint offsets. For the purpose of the hash that's sufficient.
         .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
         .               /// span starts and ends in the same file, which is almost always the case.
17,741,108 ( 0.03%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
         .                   const TAG_VALID_SPAN: u8 = 0;
         .                   const TAG_INVALID_SPAN: u8 = 1;
         .                   const TAG_RELATIVE_SPAN: u8 = 2;
         .           
 3,386,368 ( 0.00%)          if !ctx.hash_spans() {
         .                       return;
         .                   }
         .           
14,354,740 ( 0.02%)          let span = self.data_untracked();
 5,047,568 ( 0.01%)          span.ctxt.hash_stable(ctx, hasher);
 7,603,332 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
         .           
 5,140,866 ( 0.01%)          if span.is_dummy() {
         .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
         .                       return;
         .                   }
         .           
 4,924,932 ( 0.01%)          if let Some(parent) = span.parent {
         .                       let def_span = ctx.def_span(parent).data_untracked();
         .                       if def_span.contains(span) {
         .                           // This span is enclosed in a definition: only hash the relative position.
         .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
         .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
         .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
         .                           return;
         .                       }
         .                   }
         .           
         .                   // If this is not an empty or invalid span, we want to hash the last
         .                   // position that belongs to it, as opposed to hashing the first
         .                   // position past it.
 9,849,864 ( 0.01%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
         .                   {
 4,924,932 ( 0.01%)              Some(pos) => pos,
         .                       None => {
         .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
         .                           return;
         .                       }
         .                   };
         .           
         .                   Hash::hash(&TAG_VALID_SPAN, hasher);
         .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
         .                   // hash only the length, for example, then two otherwise equal spans with
         .                   // different end locations will have the same hash. This can cause a problem
         .                   // during incremental compilation wherein a previous result for a query that
         .                   // depends on the end location of a span will be incorrectly reused when the
         .                   // end location of the span it depends on has changed (see issue #74890). A
         .                   // similar analysis applies if some query depends specifically on the length
         .                   // of the span, but we only hash the end location. So hash both.
         .           
 2,462,466 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
         .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
         .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
         .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
         .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
 2,462,466 ( 0.00%)          let len = (span.hi - span.lo).0;
         .                   Hash::hash(&col_line, hasher);
         .                   Hash::hash(&len, hasher);
20,275,552 ( 0.03%)      }
         .           }

34,879,079 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs
--------------------------------------------------------------------------------
Ir                  

-- line 44 ----------------------------------------
         .           /// Convert from a specific kind of undo to the more general UndoLog
         .           impl<'tcx> From<Instantiate> for UndoLog<'tcx> {
         .               fn from(l: Instantiate) -> Self {
         .                   UndoLog::Values(sv::UndoLog::Other(l))
         .               }
         .           }
         .           
         .           impl<'tcx> Rollback<UndoLog<'tcx>> for TypeVariableStorage<'tcx> {
 1,890,460 ( 0.00%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
 7,923,574 ( 0.01%)          match undo {
 1,528,726 ( 0.00%)              UndoLog::EqRelation(undo) => self.eq_relations.reverse(undo),
   944,792 ( 0.00%)              UndoLog::SubRelation(undo) => self.sub_relations.reverse(undo),
 1,307,402 ( 0.00%)              UndoLog::Values(undo) => self.values.reverse(undo),
         .                   }
 3,780,920 ( 0.01%)      }
         .           }
         .           
         .           pub struct TypeVariableStorage<'tcx> {
         .               values: sv::SnapshotVecStorage<Delegate>,
         .           
         .               /// Two variables are unified in `eq_relations` when we have a
         .               /// constraint `?X == ?Y`. This table also stores, for each key,
         .               /// the known value.
-- line 66 ----------------------------------------
-- line 136 ----------------------------------------
         .               DynReturnFn,
         .               LatticeVariable,
         .           }
         .           
         .           pub(crate) struct TypeVariableData {
         .               origin: TypeVariableOrigin,
         .           }
         .           
 9,475,764 ( 0.01%)  #[derive(Copy, Clone, Debug)]
         .           pub enum TypeVariableValue<'tcx> {
         .               Known { value: Ty<'tcx> },
         .               Unknown { universe: ty::UniverseIndex },
         .           }
         .           
         .           impl<'tcx> TypeVariableValue<'tcx> {
         .               /// If this value is known, returns the type it is known to be.
         .               /// Otherwise, `None`.
         .               pub fn known(&self) -> Option<Ty<'tcx>> {
 6,073,256 ( 0.01%)          match *self {
         .                       TypeVariableValue::Unknown { .. } => None,
         .                       TypeVariableValue::Known { value } => Some(value),
         .                   }
         .               }
         .           
         .               pub fn is_unknown(&self) -> bool {
         .                   match *self {
         .                       TypeVariableValue::Unknown { .. } => true,
-- line 162 ----------------------------------------
-- line 166 ----------------------------------------
         .           }
         .           
         .           pub(crate) struct Instantiate;
         .           
         .           pub(crate) struct Delegate;
         .           
         .           impl<'tcx> TypeVariableStorage<'tcx> {
         .               pub fn new() -> TypeVariableStorage<'tcx> {
 2,086,386 ( 0.00%)          TypeVariableStorage {
         .                       values: sv::SnapshotVecStorage::new(),
         .                       eq_relations: ut::UnificationTableStorage::new(),
         .                       sub_relations: ut::UnificationTableStorage::new(),
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub(crate) fn with_log<'a>(
-- line 182 ----------------------------------------
-- line 188 ----------------------------------------
         .           }
         .           
         .           impl<'tcx> TypeVariableTable<'_, 'tcx> {
         .               /// Returns the origin that was given when `vid` was created.
         .               ///
         .               /// Note that this function does not return care whether
         .               /// `vid` has been unified with something else or not.
         .               pub fn var_origin(&self, vid: ty::TyVid) -> &TypeVariableOrigin {
     2,331 ( 0.00%)          &self.storage.values.get(vid.as_usize()).origin
         .               }
         .           
         .               /// Records that `a == b`, depending on `dir`.
         .               ///
         .               /// Precondition: neither `a` nor `b` are known.
         .               pub fn equate(&mut self, a: ty::TyVid, b: ty::TyVid) {
         .                   debug_assert!(self.probe(a).is_unknown());
         .                   debug_assert!(self.probe(b).is_unknown());
   397,194 ( 0.00%)          self.eq_relations().union(a, b);
   340,452 ( 0.00%)          self.sub_relations().union(a, b);
         .               }
         .           
         .               /// Records that `a <: b`, depending on `dir`.
         .               ///
         .               /// Precondition: neither `a` nor `b` are known.
         .               pub fn sub(&mut self, a: ty::TyVid, b: ty::TyVid) {
         .                   debug_assert!(self.probe(a).is_unknown());
         .                   debug_assert!(self.probe(b).is_unknown());
    12,801 ( 0.00%)          self.sub_relations().union(a, b);
         .               }
         .           
         .               /// Instantiates `vid` with the type `ty`.
         .               ///
         .               /// Precondition: `vid` must not have been previously instantiated.
 2,099,535 ( 0.00%)      pub fn instantiate(&mut self, vid: ty::TyVid, ty: Ty<'tcx>) {
         .                   let vid = self.root_var(vid);
         .                   debug_assert!(self.probe(vid).is_unknown());
         .                   debug_assert!(
         .                       self.eq_relations().probe_value(vid).is_unknown(),
         .                       "instantiating type variable `{:?}` twice: new-value = {:?}, old-value={:?}",
         .                       vid,
         .                       ty,
         .                       self.eq_relations().probe_value(vid)
         .                   );
 2,939,349 ( 0.00%)          self.eq_relations().union_value(vid, TypeVariableValue::Known { value: ty });
         .           
         .                   // Hack: we only need this so that `types_escaping_snapshot`
         .                   // can see what has been unified; see the Delegate impl for
         .                   // more details.
         .                   self.undo_log.push(Instantiate);
 2,099,535 ( 0.00%)      }
         .           
         .               /// Creates a new type variable.
         .               ///
         .               /// - `diverging`: indicates if this is a "diverging" type
         .               ///   variable, e.g.,  one created as the type of a `return`
         .               ///   expression. The code in this module doesn't care if a
         .               ///   variable is diverging, but the main Rust type-checker will
         .               ///   sometimes "unify" such variables with the `!` or `()` types.
         .               /// - `origin`: indicates *why* the type variable was created.
         .               ///   The code in this module doesn't care, but it can be useful
         .               ///   for improving error messages.
 2,905,920 ( 0.00%)      pub fn new_var(
         .                   &mut self,
         .                   universe: ty::UniverseIndex,
         .                   origin: TypeVariableOrigin,
         .               ) -> ty::TyVid {
 4,358,880 ( 0.01%)          let eq_key = self.eq_relations().new_key(TypeVariableValue::Unknown { universe });
         .           
 2,421,600 ( 0.00%)          let sub_key = self.sub_relations().new_key(());
   484,320 ( 0.00%)          assert_eq!(eq_key.vid, sub_key);
         .           
 4,358,880 ( 0.01%)          let index = self.values().push(TypeVariableData { origin });
 1,937,280 ( 0.00%)          assert_eq!(eq_key.vid.as_u32(), index as u32);
         .           
         .                   debug!("new_var(index={:?}, universe={:?}, origin={:?}", eq_key.vid, universe, origin,);
         .           
         .                   eq_key.vid
 3,390,240 ( 0.00%)      }
         .           
         .               /// Returns the number of type variables created thus far.
         .               pub fn num_vars(&self) -> usize {
    29,375 ( 0.00%)          self.storage.values.len()
         .               }
         .           
         .               /// Returns the "root" variable of `vid` in the `eq_relations`
         .               /// equivalence table. All type variables that have been equated
         .               /// will yield the same root variable (per the union-find
         .               /// algorithm), so `root_var(a) == root_var(b)` implies that `a ==
         .               /// b` (transitively).
         .               pub fn root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
 1,592,913 ( 0.00%)          self.eq_relations().find(vid).vid
         .               }
         .           
         .               /// Returns the "root" variable of `vid` in the `sub_relations`
         .               /// equivalence table. All type variables that have been are
         .               /// related via equality or subtyping will yield the same root
         .               /// variable (per the union-find algorithm), so `sub_root_var(a)
         .               /// == sub_root_var(b)` implies that:
         .               ///
         .               ///     exists X. (a <: X || X <: a) && (b <: X || X <: b)
     2,202 ( 0.00%)      pub fn sub_root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
 1,270,581 ( 0.00%)          self.sub_relations().find(vid)
     4,404 ( 0.00%)      }
         .           
         .               /// Returns `true` if `a` and `b` have same "sub-root" (i.e., exists some
         .               /// type X such that `forall i in {a, b}. (i <: X || X <: i)`.
         .               pub fn sub_unified(&mut self, a: ty::TyVid, b: ty::TyVid) -> bool {
         .                   self.sub_root_var(a) == self.sub_root_var(b)
         .               }
         .           
         .               /// Retrieves the type to which `vid` has been instantiated, if
         .               /// any.
21,033,465 ( 0.03%)      pub fn probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
         .                   self.inlined_probe(vid)
21,033,465 ( 0.03%)      }
         .           
         .               /// An always-inlined variant of `probe`, for very hot call sites.
         .               #[inline(always)]
         .               pub fn inlined_probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
10,360,882 ( 0.02%)          self.eq_relations().inlined_probe_value(vid)
         .               }
         .           
         .               /// If `t` is a type-inference variable, and it has been
         .               /// instantiated, then return the with which it was
         .               /// instantiated. Otherwise, returns `t`.
         .               pub fn replace_if_possible(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
14,269,646 ( 0.02%)          match *t.kind() {
 3,519,720 ( 0.01%)              ty::Infer(ty::TyVar(v)) => match self.probe(v) {
         .                           TypeVariableValue::Unknown { .. } => t,
         .                           TypeVariableValue::Known { value } => value,
         .                       },
         .                       _ => t,
         .                   }
         .               }
         .           
         .               #[inline]
-- line 323 ----------------------------------------
-- line 324 ----------------------------------------
         .               fn values(
         .                   &mut self,
         .               ) -> sv::SnapshotVec<Delegate, &mut Vec<TypeVariableData>, &mut InferCtxtUndoLogs<'tcx>> {
         .                   self.storage.values.with_log(self.undo_log)
         .               }
         .           
         .               #[inline]
         .               fn eq_relations(&mut self) -> super::UnificationTable<'_, 'tcx, TyVidEqKey<'tcx>> {
16,474,314 ( 0.02%)          self.storage.eq_relations.with_log(self.undo_log)
         .               }
         .           
         .               #[inline]
         .               fn sub_relations(&mut self) -> super::UnificationTable<'_, 'tcx, ty::TyVid> {
   975,212 ( 0.00%)          self.storage.sub_relations.with_log(self.undo_log)
         .               }
         .           
         .               /// Returns a range of the type variables created during the snapshot.
   146,875 ( 0.00%)      pub fn vars_since_snapshot(
         .                   &mut self,
         .                   value_count: usize,
         .               ) -> (Range<TyVid>, Vec<TypeVariableOrigin>) {
         .                   let range = TyVid::from_usize(value_count)..TyVid::from_usize(self.num_vars());
   176,250 ( 0.00%)          (
         .                       range.start..range.end,
         .                       (range.start.as_usize()..range.end.as_usize())
         .                           .map(|index| self.storage.values.get(index).origin)
         .                           .collect(),
         .                   )
   176,250 ( 0.00%)      }
         .           
         .               /// Returns indices of all variables that are not yet
         .               /// instantiated.
         .               pub fn unsolved_variables(&mut self) -> Vec<ty::TyVid> {
         .                   (0..self.storage.values.len())
         .                       .filter_map(|i| {
         .                           let vid = ty::TyVid::from_usize(i);
   531,288 ( 0.00%)                  match self.probe(vid) {
         .                               TypeVariableValue::Unknown { .. } => Some(vid),
         .                               TypeVariableValue::Known { .. } => None,
         .                           }
         .                       })
         .                       .collect()
         .               }
         .           }
         .           
-- line 368 ----------------------------------------
-- line 391 ----------------------------------------
         .           /// These structs (a newtyped TyVid) are used as the unification key
         .           /// for the `eq_relations`; they carry a `TypeVariableValue` along
         .           /// with them.
         .           #[derive(Copy, Clone, Debug, PartialEq, Eq)]
         .           pub(crate) struct TyVidEqKey<'tcx> {
         .               vid: ty::TyVid,
         .           
         .               // in the table, we map each ty-vid to one of these:
 8,654,325 ( 0.01%)      phantom: PhantomData<TypeVariableValue<'tcx>>,
         .           }
         .           
         .           impl<'tcx> From<ty::TyVid> for TyVidEqKey<'tcx> {
         .               #[inline] // make this function eligible for inlining - it is quite hot.
         .               fn from(vid: ty::TyVid) -> Self {
         .                   TyVidEqKey { vid, phantom: PhantomData }
         .               }
         .           }
-- line 407 ----------------------------------------
-- line 419 ----------------------------------------
         .                   "TyVidEqKey"
         .               }
         .           }
         .           
         .           impl<'tcx> ut::UnifyValue for TypeVariableValue<'tcx> {
         .               type Error = ut::NoError;
         .           
         .               fn unify_values(value1: &Self, value2: &Self) -> Result<Self, ut::NoError> {
 1,963,338 ( 0.00%)          match (value1, value2) {
         .                       // We never equate two type variables, both of which
         .                       // have known types.  Instead, we recursively equate
         .                       // those types.
         .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Known { .. }) => {
         .                           bug!("equating two type variables, both of which have known types")
         .                       }
         .           
         .                       // If one side is known, prefer that one.
         .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Unknown { .. }) => Ok(*value1),
         .                       (&TypeVariableValue::Unknown { .. }, &TypeVariableValue::Known { .. }) => Ok(*value2),
         .           
         .                       // If both sides are *unknown*, it hardly matters, does it?
         .                       (
    56,742 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe1 },
    56,742 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe2 },
         .                       ) => {
         .                           // If we unify two unbound variables, ?T and ?U, then whatever
         .                           // value they wind up taking (which must be the same value) must
         .                           // be nameable by both universes. Therefore, the resulting
         .                           // universe is the minimum of the two universes, because that is
         .                           // the one which contains the fewest names in scope.
         .                           let universe = cmp::min(universe1, universe2);
   226,968 ( 0.00%)                  Ok(TypeVariableValue::Unknown { universe })
         .                       }
         .                   }
         .               }
         .           }

 1,541,424 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs
--------------------------------------------------------------------------------
Ir                   

-- line 22 ----------------------------------------
          .           
          .           /// An entity in the Rust type system, which can be one of
          .           /// several kinds (types, lifetimes, and consts).
          .           /// To reduce memory usage, a `GenericArg` is an interned pointer,
          .           /// with the lowest 2 bits being reserved for a tag to
          .           /// indicate the type (`Ty`, `Region`, or `Const`) it points to.
          .           #[derive(Copy, Clone, PartialEq, Eq, Hash)]
          .           pub struct GenericArg<'tcx> {
 11,677,886 ( 0.02%)      ptr: NonZeroUsize,
 27,212,896 ( 0.04%)      marker: PhantomData<(Ty<'tcx>, ty::Region<'tcx>, &'tcx ty::Const<'tcx>)>,
          .           }
          .           
          .           const TAG_MASK: usize = 0b11;
          .           const TYPE_TAG: usize = 0b00;
          .           const REGION_TAG: usize = 0b01;
          .           const CONST_TAG: usize = 0b10;
          .           
    367,868 ( 0.00%)  #[derive(Debug, TyEncodable, TyDecodable, PartialEq, Eq, PartialOrd, Ord, HashStable)]
          .           pub enum GenericArgKind<'tcx> {
          .               Lifetime(ty::Region<'tcx>),
          .               Type(Ty<'tcx>),
          .               Const(&'tcx ty::Const<'tcx>),
          .           }
          .           
          .           impl<'tcx> GenericArgKind<'tcx> {
     84,296 ( 0.00%)      fn pack(self) -> GenericArg<'tcx> {
     84,296 ( 0.00%)          let (tag, ptr) = match self {
          .                       GenericArgKind::Lifetime(lt) => {
          .                           // Ensure we can use the tag bits.
          .                           assert_eq!(mem::align_of_val(lt) & TAG_MASK, 0);
          .                           (REGION_TAG, lt as *const _ as usize)
          .                       }
          .                       GenericArgKind::Type(ty) => {
          .                           // Ensure we can use the tag bits.
          .                           assert_eq!(mem::align_of_val(ty) & TAG_MASK, 0);
-- line 56 ----------------------------------------
-- line 58 ----------------------------------------
          .                       }
          .                       GenericArgKind::Const(ct) => {
          .                           // Ensure we can use the tag bits.
          .                           assert_eq!(mem::align_of_val(ct) & TAG_MASK, 0);
          .                           (CONST_TAG, ct as *const _ as usize)
          .                       }
          .                   };
          .           
  4,005,802 ( 0.01%)          GenericArg { ptr: unsafe { NonZeroUsize::new_unchecked(ptr | tag) }, marker: PhantomData }
     84,296 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> fmt::Debug for GenericArg<'tcx> {
          .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
          .                   match self.unpack() {
          .                       GenericArgKind::Lifetime(lt) => lt.fmt(f),
          .                       GenericArgKind::Type(ty) => ty.fmt(f),
          .                       GenericArgKind::Const(ct) => ct.fmt(f),
          .                   }
          .               }
          .           }
          .           
          .           impl<'tcx> Ord for GenericArg<'tcx> {
         54 ( 0.00%)      fn cmp(&self, other: &GenericArg<'_>) -> Ordering {
         36 ( 0.00%)          self.unpack().cmp(&other.unpack())
          .               }
          .           }
          .           
          .           impl<'tcx> PartialOrd for GenericArg<'tcx> {
          .               fn partial_cmp(&self, other: &GenericArg<'_>) -> Option<Ordering> {
          .                   Some(self.cmp(&other))
          .               }
          .           }
          .           
          .           impl<'tcx> From<ty::Region<'tcx>> for GenericArg<'tcx> {
  2,724,089 ( 0.00%)      fn from(r: ty::Region<'tcx>) -> GenericArg<'tcx> {
          .                   GenericArgKind::Lifetime(r).pack()
  2,724,089 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> From<Ty<'tcx>> for GenericArg<'tcx> {
 13,272,255 ( 0.02%)      fn from(ty: Ty<'tcx>) -> GenericArg<'tcx> {
          .                   GenericArgKind::Type(ty).pack()
 13,272,255 ( 0.02%)      }
          .           }
          .           
          .           impl<'tcx> From<&'tcx ty::Const<'tcx>> for GenericArg<'tcx> {
      1,144 ( 0.00%)      fn from(c: &'tcx ty::Const<'tcx>) -> GenericArg<'tcx> {
          .                   GenericArgKind::Const(c).pack()
      1,144 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> GenericArg<'tcx> {
          .               #[inline]
          .               pub fn unpack(self) -> GenericArgKind<'tcx> {
          .                   let ptr = self.ptr.get();
          .                   unsafe {
198,759,577 ( 0.29%)              match ptr & TAG_MASK {
  1,572,277 ( 0.00%)                  REGION_TAG => GenericArgKind::Lifetime(&*((ptr & !TAG_MASK) as *const _)),
 47,617,432 ( 0.07%)                  TYPE_TAG => GenericArgKind::Type(&*((ptr & !TAG_MASK) as *const _)),
      7,479 ( 0.00%)                  CONST_TAG => GenericArgKind::Const(&*((ptr & !TAG_MASK) as *const _)),
          .                           _ => intrinsics::unreachable(),
          .                       }
          .                   }
          .               }
          .           
          .               /// Unpack the `GenericArg` as a type when it is known certainly to be a type.
          .               /// This is true in cases where `Substs` is used in places where the kinds are known
          .               /// to be limited (e.g. in tuples, where the only parameters are type parameters).
          .               pub fn expect_ty(self) -> Ty<'tcx> {
          .                   match self.unpack() {
          .                       GenericArgKind::Type(ty) => ty,
          .                       _ => bug!("expected a type, but found another kind"),
          .                   }
     88,184 ( 0.00%)      }
          .           
          .               /// Unpack the `GenericArg` as a const when it is known certainly to be a const.
          .               pub fn expect_const(self) -> &'tcx ty::Const<'tcx> {
          .                   match self.unpack() {
          .                       GenericArgKind::Const(c) => c,
          .                       _ => bug!("expected a const, but found another kind"),
          .                   }
          .               }
-- line 140 ----------------------------------------
-- line 155 ----------------------------------------
          .           impl<'tcx> TypeFoldable<'tcx> for GenericArg<'tcx> {
          .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
          .                   self,
          .                   folder: &mut F,
          .               ) -> Result<Self, F::Error> {
          .                   match self.unpack() {
          .                       GenericArgKind::Lifetime(lt) => lt.try_fold_with(folder).map(Into::into),
          .                       GenericArgKind::Type(ty) => ty.try_fold_with(folder).map(Into::into),
         21 ( 0.00%)              GenericArgKind::Const(ct) => ct.try_fold_with(folder).map(Into::into),
          .                   }
          .               }
          .           
          .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
          .                   match self.unpack() {
          .                       GenericArgKind::Lifetime(lt) => lt.visit_with(visitor),
          .                       GenericArgKind::Type(ty) => ty.visit_with(visitor),
          .                       GenericArgKind::Const(ct) => ct.visit_with(visitor),
          .                   }
          .               }
          .           }
          .           
          .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for GenericArg<'tcx> {
          .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
    108,060 ( 0.00%)          self.unpack().encode(e)
          .               }
          .           }
          .           
          .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for GenericArg<'tcx> {
    421,480 ( 0.00%)      fn decode(d: &mut D) -> GenericArg<'tcx> {
    421,480 ( 0.00%)          GenericArgKind::decode(d).pack()
          .               }
          .           }
          .           
          .           /// A substitution mapping generic parameters to new values.
          .           pub type InternalSubsts<'tcx> = List<GenericArg<'tcx>>;
          .           
          .           pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;
          .           
          .           impl<'a, 'tcx> InternalSubsts<'tcx> {
          .               /// Interpret these substitutions as the substitutions of a closure type.
          .               /// Closure substitutions have a particular structure controlled by the
          .               /// compiler that encodes information like the signature and closure kind;
          .               /// see `ty::ClosureSubsts` struct for more comments.
     12,689 ( 0.00%)      pub fn as_closure(&'a self) -> ClosureSubsts<'a> {
          .                   ClosureSubsts { substs: self }
     12,689 ( 0.00%)      }
          .           
          .               /// Interpret these substitutions as the substitutions of a generator type.
          .               /// Generator substitutions have a particular structure controlled by the
          .               /// compiler that encodes information like the signature and generator kind;
          .               /// see `ty::GeneratorSubsts` struct for more comments.
          .               pub fn as_generator(&'tcx self) -> GeneratorSubsts<'tcx> {
          .                   GeneratorSubsts { substs: self }
          .               }
-- line 208 ----------------------------------------
-- line 211 ----------------------------------------
          .               /// Inline const substitutions have a particular structure controlled by the
          .               /// compiler that encodes information like the inferred type;
          .               /// see `ty::InlineConstSubsts` struct for more comments.
          .               pub fn as_inline_const(&'tcx self) -> InlineConstSubsts<'tcx> {
          .                   InlineConstSubsts { substs: self }
          .               }
          .           
          .               /// Creates an `InternalSubsts` that maps each generic parameter to itself.
  1,464,030 ( 0.00%)      pub fn identity_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {
    207,488 ( 0.00%)          Self::for_item(tcx, def_id, |param, _| tcx.mk_param_from_def(param))
  1,317,627 ( 0.00%)      }
          .           
          .               /// Creates an `InternalSubsts` for generic parameter definitions,
          .               /// by calling closures to obtain each kind.
          .               /// The closures get to observe the `InternalSubsts` as they're
          .               /// being built, which can be used to correctly
          .               /// substitute defaults of generic parameters.
 11,358,891 ( 0.02%)      pub fn for_item<F>(tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
          .               where
          .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
          .               {
          .                   let defs = tcx.generics_of(def_id);
          .                   let count = defs.count();
          .                   let mut substs = SmallVec::with_capacity(count);
  4,227,435 ( 0.01%)          Self::fill_item(&mut substs, tcx, defs, &mut mk_kind);
  2,470,298 ( 0.00%)          tcx.intern_substs(&substs)
 11,361,798 ( 0.02%)      }
          .           
          .               pub fn extend_to<F>(&self, tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
          .               where
          .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
          .               {
          .                   Self::for_item(tcx, def_id, |param, substs| {
          .                       self.get(param.index as usize).cloned().unwrap_or_else(|| mk_kind(param, substs))
          .                   })
          .               }
          .           
 16,284,765 ( 0.02%)      pub fn fill_item<F>(
          .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
          .                   tcx: TyCtxt<'tcx>,
          .                   defs: &ty::Generics,
          .                   mk_kind: &mut F,
          .               ) where
          .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
          .               {
  6,632,646 ( 0.01%)          if let Some(def_id) = defs.parent {
          .                       let parent_defs = tcx.generics_of(def_id);
  1,034,872 ( 0.00%)              Self::fill_item(substs, tcx, parent_defs, mk_kind);
          .                   }
          .                   Self::fill_single(substs, defs, mk_kind)
 12,926,632 ( 0.02%)      }
          .           
        696 ( 0.00%)      pub fn fill_single<F>(
          .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
          .                   defs: &ty::Generics,
          .                   mk_kind: &mut F,
          .               ) where
          .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
          .               {
          .                   substs.reserve(defs.params.len());
          .                   for param in &defs.params {
        315 ( 0.00%)              let kind = mk_kind(param, substs);
  1,825,448 ( 0.00%)              assert_eq!(param.index as usize, substs.len());
          .                       substs.push(kind);
          .                   }
        696 ( 0.00%)      }
          .           
          .               #[inline]
          .               pub fn types(&'a self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'a {
          .                   self.iter()
          .                       .filter_map(|k| if let GenericArgKind::Type(ty) = k.unpack() { Some(ty) } else { None })
          .               }
          .           
          .               #[inline]
-- line 284 ----------------------------------------
-- line 302 ----------------------------------------
          .                   self.iter().filter_map(|k| match k.unpack() {
          .                       GenericArgKind::Lifetime(_) => None,
          .                       generic => Some(generic),
          .                   })
          .               }
          .           
          .               #[inline]
          .               pub fn type_at(&self, i: usize) -> Ty<'tcx> {
  1,965,126 ( 0.00%)          if let GenericArgKind::Type(ty) = self[i].unpack() {
          .                       ty
          .                   } else {
          .                       bug!("expected type for param #{} in {:?}", i, self);
          .                   }
          .               }
          .           
          .               #[inline]
          .               pub fn region_at(&self, i: usize) -> ty::Region<'tcx> {
-- line 318 ----------------------------------------
-- line 350 ----------------------------------------
          .               /// impl<U> X<U> for U { fn f<V>() {} }
          .               /// ```
          .               ///
          .               /// * If `self` is `[Self, S, T]`: the identity substs of `f` in the trait.
          .               /// * If `source_ancestor` is the def_id of the trait.
          .               /// * If `target_substs` is `[U]`, the substs for the impl.
          .               /// * Then we will return `[U, T]`, the subst for `f` in the impl that
          .               ///   are needed for it to match the trait.
    287,553 ( 0.00%)      pub fn rebase_onto(
          .                   &self,
          .                   tcx: TyCtxt<'tcx>,
          .                   source_ancestor: DefId,
          .                   target_substs: SubstsRef<'tcx>,
          .               ) -> SubstsRef<'tcx> {
          .                   let defs = tcx.generics_of(source_ancestor);
     82,158 ( 0.00%)          tcx.mk_substs(target_substs.iter().chain(self.iter().skip(defs.params.len())))
    328,632 ( 0.00%)      }
          .           
      4,379 ( 0.00%)      pub fn truncate_to(&self, tcx: TyCtxt<'tcx>, generics: &ty::Generics) -> SubstsRef<'tcx> {
          .                   tcx.mk_substs(self.iter().take(generics.count()))
      8,758 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {
    189,749 ( 0.00%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
          .                   self,
          .                   folder: &mut F,
          .               ) -> Result<Self, F::Error> {
          .                   // This code is hot enough that it's worth specializing for the most
          .                   // common length lists, to avoid the overhead of `SmallVec` creation.
          .                   // The match arms are in order of frequency. The 1, 2, and 0 cases are
          .                   // typically hit in 90--99.99% of cases. When folding doesn't change
          .                   // the substs, it's faster to reuse the existing substs rather than
          .                   // calling `intern_substs`.
 49,267,442 ( 0.07%)          match self.len() {
          .                       1 => {
  6,384,518 ( 0.01%)                  let param0 = self[0].try_fold_with(folder)?;
 22,117,972 ( 0.03%)                  if param0 == self[0] { Ok(self) } else { Ok(folder.tcx().intern_substs(&[param0])) }
          .                       }
          .                       2 => {
  6,714,353 ( 0.01%)                  let param0 = self[0].try_fold_with(folder)?;
 13,502,750 ( 0.02%)                  let param1 = self[1].try_fold_with(folder)?;
 13,697,546 ( 0.02%)                  if param0 == self[0] && param1 == self[1] {
          .                               Ok(self)
          .                           } else {
 10,948,084 ( 0.02%)                      Ok(folder.tcx().intern_substs(&[param0, param1]))
          .                           }
          .                       }
          .                       0 => Ok(self),
          .                       _ => {
          .                           let params: SmallVec<[_; 8]> =
    175,526 ( 0.00%)                      self.iter().map(|k| k.try_fold_with(folder)).collect::<Result<_, _>>()?;
      9,034 ( 0.00%)                  if params[..] == self[..] {
          .                               Ok(self)
          .                           } else {
     48,274 ( 0.00%)                      Ok(folder.tcx().intern_substs(&params))
          .                           }
          .                       }
          .                   }
  1,280,530 ( 0.00%)      }
          .           
          .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
  9,099,860 ( 0.01%)          self.iter().try_for_each(|t| t.visit_with(visitor))
          .               }
          .           }
          .           
          .           ///////////////////////////////////////////////////////////////////////////
          .           // Public trait `Subst`
          .           //
          .           // Just call `foo.subst(tcx, substs)` to perform a substitution across
          .           // `foo`. Or use `foo.subst_spanned(tcx, substs, Some(span))` when
-- line 420 ----------------------------------------
-- line 435 ----------------------------------------
          .           
          .           impl<'tcx, T: TypeFoldable<'tcx>> Subst<'tcx> for T {
          .               fn subst_spanned(
          .                   self,
          .                   tcx: TyCtxt<'tcx>,
          .                   substs: &[GenericArg<'tcx>],
          .                   span: Option<Span>,
          .               ) -> T {
 22,627,193 ( 0.03%)          let mut folder = SubstFolder { tcx, substs, span, binders_passed: 0 };
          .                   self.fold_with(&mut folder)
          .               }
          .           }
          .           
          .           ///////////////////////////////////////////////////////////////////////////
          .           // The actual substitution engine itself is a type folder.
          .           
          .           struct SubstFolder<'a, 'tcx> {
-- line 451 ----------------------------------------
-- line 456 ----------------------------------------
          .               span: Option<Span>,
          .           
          .               /// Number of region binders we have passed through while doing the substitution
          .               binders_passed: u32,
          .           }
          .           
          .           impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {
          .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
  3,335,995 ( 0.00%)          self.tcx
          .               }
          .           
          .               fn fold_binder<T: TypeFoldable<'tcx>>(
          .                   &mut self,
          .                   t: ty::Binder<'tcx, T>,
          .               ) -> ty::Binder<'tcx, T> {
  2,969,724 ( 0.00%)          self.binders_passed += 1;
    663,929 ( 0.00%)          let t = t.super_fold_with(self);
  2,969,724 ( 0.00%)          self.binders_passed -= 1;
          .                   t
          .               }
          .           
  2,193,438 ( 0.00%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
          .                   // Note: This routine only handles regions that are bound on
          .                   // type declarations and other outer declarations, not those
          .                   // bound in *fn types*. Region substitution of the bound
          .                   // regions that appear in a function signature is done using
          .                   // the specialized routine `ty::replace_late_regions()`.
    731,146 ( 0.00%)          match *r {
    383,514 ( 0.00%)              ty::ReEarlyBound(data) => {
    383,514 ( 0.00%)                  let rk = self.substs.get(data.index as usize).map(|k| k.unpack());
          .                           match rk {
    191,757 ( 0.00%)                      Some(GenericArgKind::Lifetime(lt)) => self.shift_region_through_binders(lt),
          .                               _ => {
          .                                   let span = self.span.unwrap_or(DUMMY_SP);
          .                                   let msg = format!(
          .                                       "Region parameter out of range \
          .                                        when substituting in region {} (index={})",
          .                                       data.name, data.index
          .                                   );
          .                                   span_bug!(span, "{}", msg);
          .                               }
          .                           }
          .                       }
          .                       _ => r,
          .                   }
  2,559,011 ( 0.00%)      }
          .           
 17,287,161 ( 0.03%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
  5,762,387 ( 0.01%)          if !t.needs_subst() {
          .                       return t;
          .                   }
          .           
  6,273,108 ( 0.01%)          match *t.kind() {
 10,241,435 ( 0.01%)              ty::Param(p) => self.ty_for_param(p, t),
  6,529,602 ( 0.01%)              _ => t.super_fold_with(self),
          .                   }
 23,370,600 ( 0.03%)      }
          .           
    465,073 ( 0.00%)      fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    138,323 ( 0.00%)          if let ty::ConstKind::Param(p) = c.val {
          .                       self.const_for_param(p, c)
          .                   } else {
    588,150 ( 0.00%)              c.super_fold_with(self)
          .                   }
      8,712 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {
          .                   c.super_fold_with(self)
          .               }
          .           }
          .           
          .           impl<'a, 'tcx> SubstFolder<'a, 'tcx> {
          .               fn ty_for_param(&self, p: ty::ParamTy, source_ty: Ty<'tcx>) -> Ty<'tcx> {
          .                   // Look up the type in the substitutions. It really should be in there.
  4,096,574 ( 0.01%)          let opt_ty = self.substs.get(p.index as usize).map(|k| k.unpack());
          .                   let ty = match opt_ty {
          .                       Some(GenericArgKind::Type(ty)) => ty,
          .                       Some(kind) => {
          .                           let span = self.span.unwrap_or(DUMMY_SP);
          .                           span_bug!(
          .                               span,
          .                               "expected type for `{:?}` ({:?}/{}) but found {:?} \
          .                                when substituting, substs={:?}",
-- line 539 ----------------------------------------
-- line 562 ----------------------------------------
          .               }
          .           
          .               fn const_for_param(
          .                   &self,
          .                   p: ParamConst,
          .                   source_ct: &'tcx ty::Const<'tcx>,
          .               ) -> &'tcx ty::Const<'tcx> {
          .                   // Look up the const in the substitutions. It really should be in there.
      2,178 ( 0.00%)          let opt_ct = self.substs.get(p.index as usize).map(|k| k.unpack());
          .                   let ct = match opt_ct {
          .                       Some(GenericArgKind::Const(ct)) => ct,
          .                       Some(kind) => {
          .                           let span = self.span.unwrap_or(DUMMY_SP);
          .                           span_bug!(
          .                               span,
          .                               "expected const for `{:?}` ({:?}/{}) but found {:?} \
          .                                when substituting substs={:?}",
-- line 578 ----------------------------------------
-- line 645 ----------------------------------------
          .               fn shift_vars_through_binders<T: TypeFoldable<'tcx>>(&self, val: T) -> T {
          .                   debug!(
          .                       "shift_vars(val={:?}, binders_passed={:?}, has_escaping_bound_vars={:?})",
          .                       val,
          .                       self.binders_passed,
          .                       val.has_escaping_bound_vars()
          .                   );
          .           
  7,092,112 ( 0.01%)          if self.binders_passed == 0 || !val.has_escaping_bound_vars() {
          .                       return val;
          .                   }
          .           
          .                   let result = ty::fold::shift_vars(self.tcx(), val, self.binders_passed);
          .                   debug!("shift_vars: shifted result = {:?}", result);
          .           
          .                   result
          .               }
          .           
          .               fn shift_region_through_binders(&self, region: ty::Region<'tcx>) -> ty::Region<'tcx> {
    434,765 ( 0.00%)          if self.binders_passed == 0 || !region.has_escaping_bound_vars() {
          .                       return region;
          .                   }
          .                   ty::fold::shift_region(self.tcx, region, self.binders_passed)
          .               }
          .           }
          .           
          .           /// Stores the user-given substs to reach some fully qualified path
          .           /// (e.g., `<T>::Item` or `<T as Trait>::Item`).
          .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
    101,040 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
          .           pub struct UserSubsts<'tcx> {
          .               /// The substitutions for the item as given by the user.
          .               pub substs: SubstsRef<'tcx>,
          .           
          .               /// The self type, in the case of a `<T>::Item` path (when applied
          .               /// to an inherent impl). See `UserSelfTy` below.
      5,530 ( 0.00%)      pub user_self_ty: Option<UserSelfTy<'tcx>>,
          .           }
          .           
          .           /// Specifies the user-given self type. In the case of a path that
          .           /// refers to a member in an inherent impl, this self type is
          .           /// sometimes needed to constrain the type parameters on the impl. For
          .           /// example, in this code:
          .           ///
          .           /// ```
-- line 689 ----------------------------------------
-- line 696 ----------------------------------------
          .           /// self type `Foo<u32>`. Then we can instantiate the parameters of
          .           /// the impl (with the substs from `UserSubsts`) and apply those to
          .           /// the self type, giving `Foo<?A>`. Finally, we unify that with
          .           /// the self type here, which contains `?A` to be `&'static u32`
          .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
          .           #[derive(HashStable, TypeFoldable, Lift)]
          .           pub struct UserSelfTy<'tcx> {
          .               pub impl_def_id: DefId,
      5,541 ( 0.00%)      pub self_ty: Ty<'tcx>,
          .           }

 80,152,119 ( 0.12%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs
--------------------------------------------------------------------------------
Ir                   

-- line 12 ----------------------------------------
          .           use rustc_data_structures::sync::Lrc;
          .           use rustc_macros::HashStable_Generic;
          .           use rustc_span::symbol::{kw, sym};
          .           use rustc_span::symbol::{Ident, Symbol};
          .           use rustc_span::{self, edition::Edition, Span, DUMMY_SP};
          .           use std::borrow::Cow;
          .           use std::{fmt, mem};
          .           
     76,890 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
          .           pub enum CommentKind {
          .               Line,
          .               Block,
          .           }
          .           
        959 ( 0.00%)  #[derive(Clone, PartialEq, Encodable, Decodable, Hash, Debug, Copy)]
          .           #[derive(HashStable_Generic)]
          .           pub enum BinOpToken {
          .               Plus,
          .               Minus,
          .               Star,
          .               Slash,
          .               Percent,
          .               Caret,
          .               And,
          .               Or,
          .               Shl,
          .               Shr,
          .           }
          .           
          .           /// A delimiter token.
    566,152 ( 0.00%)  #[derive(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Debug, Copy)]
          .           #[derive(HashStable_Generic)]
          .           pub enum DelimToken {
          .               /// A round parenthesis (i.e., `(` or `)`).
          .               Paren,
          .               /// A square bracket (i.e., `[` or `]`).
          .               Bracket,
          .               /// A curly brace (i.e., `{` or `}`).
          .               Brace,
          .               /// An empty delimiter.
          .               NoDelim,
          .           }
          .           
      7,706 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
          .           pub enum LitKind {
          .               Bool, // AST only, must never appear in a `Token`
          .               Byte,
          .               Char,
          .               Integer,
          .               Float,
          .               Str,
          .               StrRaw(u16), // raw string delimited by `n` hash symbols
          .               ByteStr,
          .               ByteStrRaw(u16), // raw byte string delimited by `n` hash symbols
          .               Err,
          .           }
          .           
          .           /// A literal token.
     65,857 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
          .           pub struct Lit {
          8 ( 0.00%)      pub kind: LitKind,
          8 ( 0.00%)      pub symbol: Symbol,
          8 ( 0.00%)      pub suffix: Option<Symbol>,
          .           }
          .           
          .           impl fmt::Display for Lit {
      2,910 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      5,238 ( 0.00%)          let Lit { kind, symbol, suffix } = *self;
          .                   match kind {
          .                       Byte => write!(f, "b'{}'", symbol)?,
          .                       Char => write!(f, "'{}'", symbol)?,
      1,182 ( 0.00%)              Str => write!(f, "\"{}\"", symbol)?,
          .                       StrRaw(n) => write!(
          .                           f,
          .                           "r{delim}\"{string}\"{delim}",
          .                           delim = "#".repeat(n as usize),
          .                           string = symbol
          .                       )?,
        117 ( 0.00%)              ByteStr => write!(f, "b\"{}\"", symbol)?,
          .                       ByteStrRaw(n) => write!(
          .                           f,
          .                           "br{delim}\"{string}\"{delim}",
          .                           delim = "#".repeat(n as usize),
          .                           string = symbol
          .                       )?,
        447 ( 0.00%)              Integer | Float | Bool | Err => write!(f, "{}", symbol)?,
          .                   }
          .           
      1,316 ( 0.00%)          if let Some(suffix) = suffix {
        532 ( 0.00%)              write!(f, "{}", suffix)?;
          .                   }
          .           
          .                   Ok(())
      2,910 ( 0.00%)      }
          .           }
          .           
          .           impl LitKind {
          .               /// An English article for the literal token kind.
          .               pub fn article(self) -> &'static str {
          .                   match self {
          .                       Integer | Err => "an",
          .                       _ => "a",
-- line 113 ----------------------------------------
-- line 123 ----------------------------------------
          .                       Float => "float",
          .                       Str | StrRaw(..) => "string",
          .                       ByteStr | ByteStrRaw(..) => "byte string",
          .                       Err => "error",
          .                   }
          .               }
          .           
          .               crate fn may_have_suffix(self) -> bool {
        156 ( 0.00%)          matches!(self, Integer | Float | Err)
          .               }
          .           }
          .           
          .           impl Lit {
          .               pub fn new(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> Lit {
          .                   Lit { kind, symbol, suffix }
     60,962 ( 0.00%)      }
          .           }
          .           
      2,904 ( 0.00%)  pub fn ident_can_begin_expr(name: Symbol, span: Span, is_raw: bool) -> bool {
      5,082 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
          .           
      1,828 ( 0.00%)      !ident_token.is_reserved_ident()
          .                   || ident_token.is_path_segment_keyword()
          .                   || [
          .                       kw::Async,
          .                       kw::Do,
          .                       kw::Box,
          .                       kw::Break,
          .                       kw::Const,
          .                       kw::Continue,
-- line 152 ----------------------------------------
-- line 161 ----------------------------------------
          .                       kw::True,
          .                       kw::Try,
          .                       kw::Unsafe,
          .                       kw::While,
          .                       kw::Yield,
          .                       kw::Static,
          .                   ]
          .                   .contains(&name)
      3,630 ( 0.00%)  }
          .           
          .           fn ident_can_begin_type(name: Symbol, span: Span, is_raw: bool) -> bool {
     38,532 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
          .           
     14,358 ( 0.00%)      !ident_token.is_reserved_ident()
          .                   || ident_token.is_path_segment_keyword()
          .                   || [kw::Underscore, kw::For, kw::Impl, kw::Fn, kw::Unsafe, kw::Extern, kw::Typeof, kw::Dyn]
          .                       .contains(&name)
          .           }
          .           
129,213,971 ( 0.19%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
          .           pub enum TokenKind {
          .               /* Expression-operator symbols. */
          .               Eq,
          .               Lt,
          .               Le,
          .               EqEq,
          .               Ne,
          .               Ge,
          .               Gt,
          .               AndAnd,
          .               OrOr,
          .               Not,
          .               Tilde,
  1,305,204 ( 0.00%)      BinOp(BinOpToken),
        255 ( 0.00%)      BinOpEq(BinOpToken),
          .           
          .               /* Structural symbols */
          .               At,
          .               Dot,
          .               DotDot,
          .               DotDotDot,
          .               DotDotEq,
          .               Comma,
-- line 203 ----------------------------------------
-- line 208 ----------------------------------------
          .               LArrow,
          .               FatArrow,
          .               Pound,
          .               Dollar,
          .               Question,
          .               /// Used by proc macros for representing lifetimes, not generated by lexer right now.
          .               SingleQuote,
          .               /// An opening delimiter (e.g., `{`).
  1,551,672 ( 0.00%)      OpenDelim(DelimToken),
          .               /// A closing delimiter (e.g., `}`).
    823,029 ( 0.00%)      CloseDelim(DelimToken),
          .           
          .               /* Literals */
     38,812 ( 0.00%)      Literal(Lit),
          .           
          .               /// Identifier token.
          .               /// Do not forget about `NtIdent` when you want to match on identifiers.
          .               /// It's recommended to use `Token::(ident,uninterpolate,uninterpolated_span)` to
          .               /// treat regular and interpolated identifiers in the same way.
  1,341,731 ( 0.00%)      Ident(Symbol, /* is_raw */ bool),
          .               /// Lifetime identifier token.
          .               /// Do not forget about `NtLifetime` when you want to match on lifetime identifiers.
          .               /// It's recommended to use `Token::(lifetime,uninterpolate,uninterpolated_span)` to
          .               /// treat regular and interpolated lifetime identifiers in the same way.
      5,769 ( 0.00%)      Lifetime(Symbol),
          .           
     10,291 ( 0.00%)      Interpolated(Lrc<Nonterminal>),
          .           
          .               /// A doc comment token.
          .               /// `Symbol` is the doc comment's data excluding its "quotes" (`///`, `/**`, etc)
          .               /// similarly to symbols in string literal tokens.
      8,118 ( 0.00%)      DocComment(CommentKind, ast::AttrStyle, Symbol),
          .           
          .               Eof,
          .           }
          .           
          .           // `TokenKind` is used a lot. Make sure it doesn't unintentionally get bigger.
          .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
          .           rustc_data_structures::static_assert_size!(TokenKind, 16);
          .           
  6,128,638 ( 0.01%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
          .           pub struct Token {
    692,738 ( 0.00%)      pub kind: TokenKind,
         24 ( 0.00%)      pub span: Span,
          .           }
          .           
          .           impl TokenKind {
          .               pub fn lit(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> TokenKind {
          .                   Literal(Lit::new(kind, symbol, suffix))
        405 ( 0.00%)      }
          .           
          .               // An approximation to proc-macro-style single-character operators used by rustc parser.
          .               // If the operator token can be broken into two tokens, the first of which is single-character,
          .               // then this function performs that operation, otherwise it returns `None`.
    138,553 ( 0.00%)      pub fn break_two_token_op(&self) -> Option<(TokenKind, TokenKind)> {
    559,522 ( 0.00%)          Some(match *self {
          .                       Le => (Lt, Eq),
          .                       EqEq => (Eq, Eq),
          .                       Ne => (Not, Eq),
          .                       Ge => (Gt, Eq),
          .                       AndAnd => (BinOp(And), BinOp(And)),
          .                       OrOr => (BinOp(Or), BinOp(Or)),
          .                       BinOp(Shl) => (Lt, Lt),
          .                       BinOp(Shr) => (Gt, Gt),
-- line 271 ----------------------------------------
-- line 280 ----------------------------------------
          .                       BinOpEq(Shl) => (Lt, Le),
          .                       BinOpEq(Shr) => (Gt, Ge),
          .                       DotDot => (Dot, Dot),
          .                       DotDotDot => (Dot, DotDot),
          .                       ModSep => (Colon, Colon),
          .                       RArrow => (BinOp(Minus), Gt),
          .                       LArrow => (Lt, BinOp(Minus)),
          .                       FatArrow => (Eq, Gt),
    137,963 ( 0.00%)              _ => return None,
          .                   })
    138,553 ( 0.00%)      }
          .           
          .               /// Returns tokens that are likely to be typed accidentally instead of the current token.
          .               /// Enables better error recovery when the wrong token is found.
          .               pub fn similar_tokens(&self) -> Option<Vec<TokenKind>> {
          .                   match *self {
          .                       Comma => Some(vec![Dot, Lt, Semi]),
          .                       Semi => Some(vec![Colon, Comma]),
          .                       FatArrow => Some(vec![Eq, RArrow]),
          .                       _ => None,
          .                   }
          .               }
          .           
          .               pub fn should_end_const_arg(&self) -> bool {
    130,880 ( 0.00%)          matches!(self, Gt | Ge | BinOp(Shr) | BinOpEq(Shr))
     31,835 ( 0.00%)      }
          .           }
          .           
          .           impl Token {
    260,457 ( 0.00%)      pub fn new(kind: TokenKind, span: Span) -> Self {
  1,337,165 ( 0.00%)          Token { kind, span }
    260,457 ( 0.00%)      }
          .           
          .               /// Some token that will be thrown away later.
    175,734 ( 0.00%)      pub fn dummy() -> Self {
          .                   Token::new(TokenKind::Question, DUMMY_SP)
    175,734 ( 0.00%)      }
          .           
          .               /// Recovers a `Token` from an `Ident`. This creates a raw identifier if necessary.
          .               pub fn from_ast_ident(ident: Ident) -> Self {
      2,760 ( 0.00%)          Token::new(Ident(ident.name, ident.is_raw_guess()), ident.span)
          .               }
          .           
          .               /// Return this token by value and leave a dummy token in its place.
     36,013 ( 0.00%)      pub fn take(&mut self) -> Self {
          .                   mem::replace(self, Token::dummy())
     36,013 ( 0.00%)      }
          .           
          .               /// For interpolated tokens, returns a span of the fragment to which the interpolated
          .               /// token refers. For all other tokens this is just a regular span.
          .               /// It is particularly important to use this for identifiers and lifetimes
          .               /// for which spans affect name resolution and edition checks.
          .               /// Note that keywords are also identifiers, so they should use this
          .               /// if they keep spans or perform edition checks.
          .               pub fn uninterpolated_span(&self) -> Span {
     28,398 ( 0.00%)          match &self.kind {
          .                       Interpolated(nt) => nt.span(),
     14,199 ( 0.00%)              _ => self.span,
          .                   }
     14,199 ( 0.00%)      }
          .           
          .               pub fn is_op(&self) -> bool {
    108,039 ( 0.00%)          !matches!(
     36,013 ( 0.00%)              self.kind,
          .                       OpenDelim(..)
          .                           | CloseDelim(..)
          .                           | Literal(..)
          .                           | DocComment(..)
          .                           | Ident(..)
          .                           | Lifetime(..)
          .                           | Interpolated(..)
          .                           | Eof
          .                   )
     36,013 ( 0.00%)      }
          .           
          .               pub fn is_like_plus(&self) -> bool {
  1,058,353 ( 0.00%)          matches!(self.kind, BinOp(Plus) | BinOpEq(Plus))
    211,499 ( 0.00%)      }
          .           
          .               /// Returns `true` if the token can appear at the start of an expression.
      2,203 ( 0.00%)      pub fn can_begin_expr(&self) -> bool {
     11,039 ( 0.00%)          match self.uninterpolate().kind {
      6,534 ( 0.00%)              Ident(name, is_raw)              =>
      2,178 ( 0.00%)                  ident_can_begin_expr(name, self.span, is_raw), // value name or keyword
          .                       OpenDelim(..)                     | // tuple, array or block
          .                       Literal(..)                       | // literal
          .                       Not                               | // operator not
          .                       BinOp(Minus)                      | // unary minus
          .                       BinOp(Star)                       | // dereference
          .                       BinOp(Or) | OrOr                  | // closure
          .                       BinOp(And)                        | // reference
          .                       AndAnd                            | // double reference
          .                       // DotDotDot is no longer supported, but we need some way to display the error
          .                       DotDot | DotDotDot | DotDotEq     | // range notation
          .                       Lt | BinOp(Shl)                   | // associated path
          .                       ModSep                            | // global path
          .                       Lifetime(..)                      | // labeled loop
          .                       Pound                             => true, // expression attributes
        336 ( 0.00%)              Interpolated(ref nt) => matches!(**nt, NtLiteral(..) |
          .                           NtExpr(..)    |
          .                           NtBlock(..)   |
          .                           NtPath(..)),
          .                       _ => false,
          .                   }
      4,406 ( 0.00%)      }
          .           
          .               /// Returns `true` if the token can appear at the start of a type.
    135,512 ( 0.00%)      pub fn can_begin_type(&self) -> bool {
    272,688 ( 0.00%)          match self.uninterpolate().kind {
     57,798 ( 0.00%)              Ident(name, is_raw)        =>
      6,422 ( 0.00%)                  ident_can_begin_type(name, self.span, is_raw), // type name or keyword
          .                       OpenDelim(Paren)            | // tuple
          .                       OpenDelim(Bracket)          | // array
          .                       Not                         | // never
          .                       BinOp(Star)                 | // raw pointer
          .                       BinOp(And)                  | // reference
          .                       AndAnd                      | // double reference
          .                       Question                    | // maybe bound in trait object
          .                       Lifetime(..)                | // lifetime bound in trait object
          .                       Lt | BinOp(Shl)             | // associated path
          .                       ModSep                      => true, // global path
     18,623 ( 0.00%)              Interpolated(ref nt) => matches!(**nt, NtTy(..) | NtPath(..)),
          .                       _ => false,
          .                   }
    203,268 ( 0.00%)      }
          .           
          .               /// Returns `true` if the token can appear at the start of a const param.
          .               pub fn can_begin_const_arg(&self) -> bool {
    162,040 ( 0.00%)          match self.kind {
          .                       OpenDelim(Brace) => true,
      9,608 ( 0.00%)              Interpolated(ref nt) => matches!(**nt, NtExpr(..) | NtBlock(..) | NtLiteral(..)),
     31,207 ( 0.00%)              _ => self.can_begin_literal_maybe_minus(),
          .                   }
      1,201 ( 0.00%)      }
          .           
          .               /// Returns `true` if the token can appear at the start of a generic bound.
          .               pub fn can_begin_bound(&self) -> bool {
          .                   self.is_path_start()
          .                       || self.is_lifetime()
          .                       || self.is_keyword(kw::For)
          .                       || self == &Question
          .                       || self == &OpenDelim(Paren)
-- line 421 ----------------------------------------
-- line 427 ----------------------------------------
          .               }
          .           
          .               /// Returns `true` if the token is any literal, a minus (which can prefix a literal,
          .               /// for example a '-42', or one of the boolean idents).
          .               ///
          .               /// In other words, would this token be a valid start of `parse_literal_maybe_minus`?
          .               ///
          .               /// Keep this in sync with and `Lit::from_token`, excluding unary negation.
     31,245 ( 0.00%)      pub fn can_begin_literal_maybe_minus(&self) -> bool {
    185,542 ( 0.00%)          match self.uninterpolate().kind {
          .                       Literal(..) | BinOp(Minus) => true,
     23,268 ( 0.00%)              Ident(name, false) if name.is_bool_lit() => true,
          .                       Interpolated(ref nt) => match &**nt {
          .                           NtLiteral(_) => true,
          .                           NtExpr(e) => match &e.kind {
          .                               ast::ExprKind::Lit(_) => true,
          .                               ast::ExprKind::Unary(ast::UnOp::Neg, e) => {
          .                                   matches!(&e.kind, ast::ExprKind::Lit(_))
          .                               }
          .                               _ => false,
          .                           },
          .                           _ => false,
          .                       },
          .                       _ => false,
          .                   }
     62,490 ( 0.00%)      }
          .           
          .               // A convenience function for matching on identifiers during parsing.
          .               // Turns interpolated identifier (`$i: ident`) or lifetime (`$l: lifetime`) token
          .               // into the regular identifier or lifetime token it refers to,
          .               // otherwise returns the original token.
    184,237 ( 0.00%)      pub fn uninterpolate(&self) -> Cow<'_, Token> {
 11,969,195 ( 0.02%)          match &self.kind {
     39,784 ( 0.00%)              Interpolated(nt) => match **nt {
        105 ( 0.00%)                  NtIdent(ident, is_raw) => {
        266 ( 0.00%)                      Cow::Owned(Token::new(Ident(ident.name, is_raw), ident.span))
          .                           }
          .                           NtLifetime(ident) => Cow::Owned(Token::new(Lifetime(ident.name), ident.span)),
          .                           _ => Cow::Borrowed(self),
          .                       },
          .                       _ => Cow::Borrowed(self),
          .                   }
    184,237 ( 0.00%)      }
          .           
          .               /// Returns an identifier if this token is an identifier.
    742,808 ( 0.00%)      pub fn ident(&self) -> Option<(Ident, /* is_raw */ bool)> {
          .                   let token = self.uninterpolate();
  8,037,044 ( 0.01%)          match token.kind {
 40,656,807 ( 0.06%)              Ident(name, is_raw) => Some((Ident::new(name, token.span), is_raw)),
          .                       _ => None,
          .                   }
  6,597,228 ( 0.01%)      }
          .           
          .               /// Returns a lifetime identifier if this token is a lifetime.
     15,370 ( 0.00%)      pub fn lifetime(&self) -> Option<Ident> {
          .                   let token = self.uninterpolate();
    108,014 ( 0.00%)          match token.kind {
     11,736 ( 0.00%)              Lifetime(name) => Some(Ident::new(name, token.span)),
          .                       _ => None,
          .                   }
    107,590 ( 0.00%)      }
          .           
          .               /// Returns `true` if the token is an identifier.
          .               pub fn is_ident(&self) -> bool {
          .                   self.ident().is_some()
     75,284 ( 0.00%)      }
          .           
          .               /// Returns `true` if the token is a lifetime.
     38,637 ( 0.00%)      pub fn is_lifetime(&self) -> bool {
          .                   self.lifetime().is_some()
     77,274 ( 0.00%)      }
          .           
          .               /// Returns `true` if the token is an identifier whose name is the given
          .               /// string slice.
     18,813 ( 0.00%)      pub fn is_ident_named(&self, name: Symbol) -> bool {
          .                   self.ident().map_or(false, |(ident, _)| ident.name == name)
     37,626 ( 0.00%)      }
          .           
          .               /// Returns `true` if the token is an interpolated path.
          .               fn is_path(&self) -> bool {
    623,084 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
        148 ( 0.00%)              if let NtPath(..) = **nt {
          .                           return true;
          .                       }
          .                   }
          .                   false
          .               }
          .           
          .               /// Would `maybe_whole_expr` in `parser.rs` return `Ok(..)`?
          .               /// That is, is this a pre-parsed expression dropped into the token stream
-- line 516 ----------------------------------------
-- line 522 ----------------------------------------
          .                       }
          .                   }
          .           
          .                   false
          .               }
          .           
          .               // Is the token an interpolated block (`$b:block`)?
          .               pub fn is_whole_block(&self) -> bool {
      3,394 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
          .                       if let NtBlock(..) = **nt {
          .                           return true;
          .                       }
          .                   }
          .                   false
      1,697 ( 0.00%)      }
          .           
          .               /// Returns `true` if the token is either the `mut` or `const` keyword.
          .               pub fn is_mutability(&self) -> bool {
          .                   self.is_keyword(kw::Mut) || self.is_keyword(kw::Const)
          .               }
          .           
     54,350 ( 0.00%)      pub fn is_qpath_start(&self) -> bool {
    366,240 ( 0.00%)          self == &Lt || self == &BinOp(Shl)
         99 ( 0.00%)      }
          .           
    623,780 ( 0.00%)      pub fn is_path_start(&self) -> bool {
    930,436 ( 0.00%)          self == &ModSep
          .                       || self.is_qpath_start()
          .                       || self.is_path()
          .                       || self.is_path_segment_keyword()
    152,590 ( 0.00%)              || self.is_ident() && !self.is_reserved_ident()
    779,725 ( 0.00%)      }
          .           
          .               /// Returns `true` if the token is a given keyword, `kw`.
  2,672,310 ( 0.00%)      pub fn is_keyword(&self, kw: Symbol) -> bool {
          .                   self.is_non_raw_ident_where(|id| id.name == kw)
  5,344,620 ( 0.01%)      }
          .           
      8,625 ( 0.00%)      pub fn is_path_segment_keyword(&self) -> bool {
          .                   self.is_non_raw_ident_where(Ident::is_path_segment_keyword)
          .               }
          .           
          .               // Returns true for reserved identifiers used internally for elided lifetimes,
          .               // unnamed method parameters, crate root module, error recovery etc.
     35,868 ( 0.00%)      pub fn is_special_ident(&self) -> bool {
          .                   self.is_non_raw_ident_where(Ident::is_special)
          .               }
          .           
          .               /// Returns `true` if the token is a keyword used in the language.
     35,868 ( 0.00%)      pub fn is_used_keyword(&self) -> bool {
          .                   self.is_non_raw_ident_where(Ident::is_used_keyword)
          .               }
          .           
          .               /// Returns `true` if the token is a keyword reserved for possible future use.
     35,865 ( 0.00%)      pub fn is_unused_keyword(&self) -> bool {
          .                   self.is_non_raw_ident_where(Ident::is_unused_keyword)
          .               }
          .           
          .               /// Returns `true` if the token is either a special identifier or a keyword.
          .               pub fn is_reserved_ident(&self) -> bool {
          .                   self.is_non_raw_ident_where(Ident::is_reserved)
          .               }
          .           
          .               /// Returns `true` if the token is the identifier `true` or `false`.
      8,625 ( 0.00%)      pub fn is_bool_lit(&self) -> bool {
     17,250 ( 0.00%)          self.is_non_raw_ident_where(|id| id.name.is_bool_lit())
          .               }
          .           
          .               pub fn is_numeric_lit(&self) -> bool {
          .                   matches!(
          .                       self.kind,
          .                       Literal(Lit { kind: LitKind::Integer, .. }) | Literal(Lit { kind: LitKind::Float, .. })
          .                   )
          .               }
          .           
          .               /// Returns `true` if the token is a non-raw identifier for which `pred` holds.
        280 ( 0.00%)      pub fn is_non_raw_ident_where(&self, pred: impl FnOnce(Ident) -> bool) -> bool {
 17,951,285 ( 0.03%)          match self.ident() {
    150,535 ( 0.00%)              Some((id, false)) => pred(id),
          .                       _ => false,
          .                   }
        350 ( 0.00%)      }
          .           
    157,550 ( 0.00%)      pub fn glue(&self, joint: &Token) -> Option<Token> {
     78,775 ( 0.00%)          let kind = match self.kind {
      2,957 ( 0.00%)              Eq => match joint.kind {
          .                           Eq => EqEq,
          .                           Gt => FatArrow,
          .                           _ => return None,
          .                       },
        242 ( 0.00%)              Lt => match joint.kind {
          .                           Eq => Le,
          .                           Lt => BinOp(Shl),
          .                           Le => BinOpEq(Shl),
          .                           BinOp(Minus) => LArrow,
          .                           _ => return None,
          .                       },
      1,805 ( 0.00%)              Gt => match joint.kind {
          .                           Eq => Ge,
          .                           Gt => BinOp(Shr),
          .                           Ge => BinOpEq(Shr),
          .                           _ => return None,
          .                       },
         16 ( 0.00%)              Not => match joint.kind {
          .                           Eq => Ne,
          .                           _ => return None,
          .                       },
      5,753 ( 0.00%)              BinOp(op) => match joint.kind {
          .                           Eq => BinOpEq(op),
          8 ( 0.00%)                  BinOp(And) if op == And => AndAnd,
         11 ( 0.00%)                  BinOp(Or) if op == Or => OrOr,
        866 ( 0.00%)                  Gt if op == Minus => RArrow,
          .                           _ => return None,
          .                       },
        231 ( 0.00%)              Dot => match joint.kind {
          .                           Dot => DotDot,
          .                           DotDot => DotDotDot,
          .                           _ => return None,
          .                       },
         24 ( 0.00%)              DotDot => match joint.kind {
          .                           Dot => DotDotDot,
          .                           Eq => DotDotEq,
          .                           _ => return None,
          .                       },
      9,776 ( 0.00%)              Colon => match joint.kind {
          .                           Colon => ModSep,
          .                           _ => return None,
          .                       },
      1,316 ( 0.00%)              SingleQuote => match joint.kind {
      2,961 ( 0.00%)                  Ident(name, false) => Lifetime(Symbol::intern(&format!("'{}", name))),
          .                           _ => return None,
          .                       },
          .           
          .                       Le | EqEq | Ne | Ge | AndAnd | OrOr | Tilde | BinOpEq(..) | At | DotDotDot
          .                       | DotDotEq | Comma | Semi | ModSep | RArrow | LArrow | FatArrow | Pound | Dollar
          .                       | Question | OpenDelim(..) | CloseDelim(..) | Literal(..) | Ident(..)
          .                       | Lifetime(..) | Interpolated(..) | DocComment(..) | Eof => return None,
          .                   };
          .           
     89,440 ( 0.00%)          Some(Token::new(kind, self.span.to(joint.span)))
    141,795 ( 0.00%)      }
          .           }
          .           
          .           impl PartialEq<TokenKind> for Token {
          .               fn eq(&self, rhs: &TokenKind) -> bool {
  6,364,131 ( 0.01%)          self.kind == *rhs
          .               }
          .           }
          .           
          .           #[derive(Clone, Encodable, Decodable)]
          .           /// For interpolation during macro expansion.
          .           pub enum Nonterminal {
          .               NtItem(P<ast::Item>),
          .               NtBlock(P<ast::Block>),
-- line 675 ----------------------------------------
-- line 711 ----------------------------------------
          .               Path,
          .               Vis,
          .               TT,
          .           }
          .           
          .           impl NonterminalKind {
          .               /// The `edition` closure is used to get the edition for the given symbol. Doing
          .               /// `span.edition()` is expensive, so we do it lazily.
        512 ( 0.00%)      pub fn from_symbol(
          .                   symbol: Symbol,
          .                   edition: impl FnOnce() -> Edition,
          .               ) -> Option<NonterminalKind> {
      1,076 ( 0.00%)          Some(match symbol {
          .                       sym::item => NonterminalKind::Item,
          .                       sym::block => NonterminalKind::Block,
          .                       sym::stmt => NonterminalKind::Stmt,
          .                       sym::pat => match edition() {
          .                           Edition::Edition2015 | Edition::Edition2018 => {
          .                               NonterminalKind::PatParam { inferred: true }
          .                           }
          .                           Edition::Edition2021 => NonterminalKind::PatWithOr,
-- line 731 ----------------------------------------
-- line 737 ----------------------------------------
          .                       sym::lifetime => NonterminalKind::Lifetime,
          .                       sym::literal => NonterminalKind::Literal,
          .                       sym::meta => NonterminalKind::Meta,
          .                       sym::path => NonterminalKind::Path,
          .                       sym::vis => NonterminalKind::Vis,
          .                       sym::tt => NonterminalKind::TT,
          .                       _ => return None,
          .                   })
        512 ( 0.00%)      }
          .               fn symbol(self) -> Symbol {
          .                   match self {
          .                       NonterminalKind::Item => sym::item,
          .                       NonterminalKind::Block => sym::block,
          .                       NonterminalKind::Stmt => sym::stmt,
          .                       NonterminalKind::PatParam { inferred: false } => sym::pat_param,
          .                       NonterminalKind::PatParam { inferred: true } | NonterminalKind::PatWithOr => sym::pat,
          .                       NonterminalKind::Expr => sym::expr,
-- line 753 ----------------------------------------

 41,506,449 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/equate.rs
--------------------------------------------------------------------------------
Ir                  

-- line 24 ----------------------------------------
         .           }
         .           
         .           impl<'tcx> TypeRelation<'tcx> for Equate<'_, '_, 'tcx> {
         .               fn tag(&self) -> &'static str {
         .                   "Equate"
         .               }
         .           
         .               fn tcx(&self) -> TyCtxt<'tcx> {
 2,812,294 ( 0.00%)          self.fields.tcx()
   613,991 ( 0.00%)      }
         .           
         .               fn param_env(&self) -> ty::ParamEnv<'tcx> {
     3,712 ( 0.00%)          self.fields.param_env
         .               }
         .           
         .               fn a_is_expected(&self) -> bool {
 3,273,345 ( 0.00%)          self.a_is_expected
         .               }
         .           
 3,045,430 ( 0.00%)      fn relate_item_substs(
         .                   &mut self,
         .                   _item_def_id: DefId,
         .                   a_subst: SubstsRef<'tcx>,
         .                   b_subst: SubstsRef<'tcx>,
         .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
         .                   // N.B., once we are equating types, we don't care about
         .                   // variance, so don't try to lookup the variance here. This
         .                   // also avoids some cycles (e.g., #41849) since looking up
         .                   // variance requires computing types which can require
         .                   // performing trait matching (which then performs equality
         .                   // unification).
         .           
   609,086 ( 0.00%)          relate::relate_substs(self, None, a_subst, b_subst)
 3,654,516 ( 0.01%)      }
         .           
         .               fn relate_with_variance<T: Relate<'tcx>>(
         .                   &mut self,
         .                   _: ty::Variance,
         .                   _info: ty::VarianceDiagInfo<'tcx>,
         .                   a: T,
         .                   b: T,
         .               ) -> RelateResult<'tcx, T> {
         .                   self.relate(a, b)
         .               }
         .           
26,430,408 ( 0.04%)      fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {
         .                   debug!("{}.tys({:?}, {:?})", self.tag(), a, b);
 2,936,712 ( 0.00%)          if a == b {
         .                       return Ok(a);
         .                   }
         .           
 5,231,210 ( 0.01%)          let infcx = self.fields.infcx;
 5,231,210 ( 0.01%)          let a = infcx.inner.borrow_mut().type_variables().replace_if_possible(a);
 5,231,210 ( 0.01%)          let b = infcx.inner.borrow_mut().type_variables().replace_if_possible(b);
         .           
         .                   debug!("{}.tys: replacements ({:?}, {:?})", self.tag(), a, b);
         .           
13,766,181 ( 0.02%)          match (a.kind(), b.kind()) {
         .                       (&ty::Infer(TyVar(a_id)), &ty::Infer(TyVar(b_id))) => {
         .                           infcx.inner.borrow_mut().type_variables().equate(a_id, b_id);
         .                       }
         .           
     1,516 ( 0.00%)              (&ty::Infer(TyVar(a_id)), _) => {
     6,064 ( 0.00%)                  self.fields.instantiate(b, RelationDir::EqTo, a_id, self.a_is_expected)?;
         .                       }
         .           
   195,191 ( 0.00%)              (_, &ty::Infer(TyVar(b_id))) => {
   975,955 ( 0.00%)                  self.fields.instantiate(a, RelationDir::EqTo, b_id, self.a_is_expected)?;
         .                       }
         .           
         .                       _ => {
16,535,092 ( 0.02%)                  self.fields.infcx.super_combine_tys(self, a, b)?;
         .                       }
         .                   }
         .           
         .                   Ok(a)
26,430,408 ( 0.04%)      }
         .           
11,343,132 ( 0.02%)      fn regions(
         .                   &mut self,
         .                   a: ty::Region<'tcx>,
         .                   b: ty::Region<'tcx>,
         .               ) -> RelateResult<'tcx, ty::Region<'tcx>> {
         .                   debug!("{}.regions({:?}, {:?})", self.tag(), a, b);
 3,781,044 ( 0.01%)          let origin = Subtype(Box::new(self.fields.trace.clone()));
 7,562,088 ( 0.01%)          self.fields
         .                       .infcx
         .                       .inner
         .                       .borrow_mut()
         .                       .unwrap_region_constraints()
 7,562,088 ( 0.01%)              .make_eqregion(origin, a, b);
 2,520,696 ( 0.00%)          Ok(a)
11,343,132 ( 0.02%)      }
         .           
         .               fn consts(
         .                   &mut self,
         .                   a: &'tcx ty::Const<'tcx>,
         .                   b: &'tcx ty::Const<'tcx>,
         .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
     6,420 ( 0.00%)          self.fields.infcx.super_combine_consts(self, a, b)
         .               }
         .           
 7,158,283 ( 0.01%)      fn binders<T>(
         .                   &mut self,
         .                   a: ty::Binder<'tcx, T>,
         .                   b: ty::Binder<'tcx, T>,
         .               ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>
         .               where
         .                   T: Relate<'tcx>,
         .               {
 1,301,506 ( 0.00%)          if a.skip_binder().has_escaping_bound_vars() || b.skip_binder().has_escaping_bound_vars() {
         .                       self.fields.higher_ranked_sub(a, b, self.a_is_expected)?;
         .                       self.fields.higher_ranked_sub(b, a, self.a_is_expected)
         .                   } else {
         .                       // Fast path for the common case.
 4,555,271 ( 0.01%)              self.relate(a.skip_binder(), b.skip_binder())?;
     4,068 ( 0.00%)              Ok(a)
         .                   }
 5,856,777 ( 0.01%)      }
         .           }
         .           
         .           impl<'tcx> ConstEquateRelation<'tcx> for Equate<'_, '_, 'tcx> {
         .               fn const_equate_obligation(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>) {
         .                   self.fields.add_const_equate_obligation(self.a_is_expected, a, b);
         .               }
         .           }

 4,952,594 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/equate.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_transform/src/pass_manager.rs
--------------------------------------------------------------------------------
Ir                  

-- line 5 ----------------------------------------
         .           use rustc_session::Session;
         .           
         .           use crate::{validate, MirPass};
         .           
         .           /// Just like `MirPass`, except it cannot mutate `Body`.
         .           pub trait MirLint<'tcx> {
         .               fn name(&self) -> Cow<'_, str> {
         .                   let name = std::any::type_name::<Self>();
   504,070 ( 0.00%)          if let Some(tail) = name.rfind(':') {
   180,025 ( 0.00%)              Cow::from(&name[tail + 1..])
         .                   } else {
         .                       Cow::from(name)
         .                   }
         .               }
         .           
         .               fn is_enabled(&self, _sess: &Session) -> bool {
         .                   true
         .               }
-- line 22 ----------------------------------------
-- line 27 ----------------------------------------
         .           /// An adapter for `MirLint`s that implements `MirPass`.
         .           #[derive(Debug, Clone)]
         .           pub struct Lint<T>(pub T);
         .           
         .           impl<'tcx, T> MirPass<'tcx> for Lint<T>
         .           where
         .               T: MirLint<'tcx>,
         .           {
   576,080 ( 0.00%)      fn name(&self) -> Cow<'_, str> {
         .                   self.0.name()
   540,075 ( 0.00%)      }
         .           
         .               fn is_enabled(&self, sess: &Session) -> bool {
         .                   self.0.is_enabled(sess)
   288,040 ( 0.00%)      }
         .           
         .               fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {
   108,015 ( 0.00%)          self.0.run_lint(tcx, body)
         .               }
         .           
         .               fn is_mir_dump_enabled(&self) -> bool {
         .                   false
   216,030 ( 0.00%)      }
         .           }
         .           
         .           pub struct WithMinOptLevel<T>(pub u32, pub T);
         .           
         .           impl<'tcx, T> MirPass<'tcx> for WithMinOptLevel<T>
         .           where
         .               T: MirPass<'tcx>,
         .           {
   287,136 ( 0.00%)      fn name(&self) -> Cow<'_, str> {
         .                   self.1.name()
   323,028 ( 0.00%)      }
         .           
   358,920 ( 0.00%)      fn is_enabled(&self, sess: &Session) -> bool {
   897,300 ( 0.00%)          sess.mir_opt_level() >= self.0 as usize
   358,920 ( 0.00%)      }
         .           
    71,784 ( 0.00%)      fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {
   107,676 ( 0.00%)          self.1.run_pass(tcx, body)
         .               }
         .           
         .               fn phase_change(&self) -> Option<MirPhase> {
         .                   self.1.phase_change()
   358,920 ( 0.00%)      }
         .           }
         .           
 2,387,902 ( 0.00%)  pub fn run_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, passes: &[&dyn MirPass<'tcx>]) {
   434,164 ( 0.00%)      let start_phase = body.phase;
         .               let mut cnt = 0;
         .           
 2,354,335 ( 0.00%)      let validate = tcx.sess.opts.debugging_opts.validate_mir;
         .           
   217,082 ( 0.00%)      if validate {
         .                   validate_body(tcx, body, format!("start of phase transition from {:?}", start_phase));
         .               }
         .           
         .               for pass in passes {
14,179,200 ( 0.02%)          if !pass.is_enabled(&tcx.sess) {
         .                       continue;
         .                   }
         .           
 5,944,028 ( 0.01%)          let name = pass.name();
 4,458,021 ( 0.01%)          let dump_enabled = pass.is_mir_dump_enabled();
         .           
 2,972,014 ( 0.00%)          if dump_enabled {
 1,377,992 ( 0.00%)              dump_mir(tcx, body, start_phase, &name, cnt, false);
         .                   }
         .           
 7,430,035 ( 0.01%)          pass.run_pass(tcx, body);
         .           
 2,972,014 ( 0.00%)          if dump_enabled {
 1,377,992 ( 0.00%)              dump_mir(tcx, body, start_phase, &name, cnt, true);
 2,755,984 ( 0.00%)              cnt += 1;
         .                   }
         .           
 7,792,189 ( 0.01%)          if let Some(new_phase) = pass.phase_change() {
   181,077 ( 0.00%)              if body.phase >= new_phase {
         .                           panic!("Invalid MIR phase transition from {:?} to {:?}", body.phase, new_phase);
         .                       }
         .           
   181,077 ( 0.00%)              body.phase = new_phase;
         .                   }
         .           
 1,486,007 ( 0.00%)          if validate {
         .                       validate_body(tcx, body, format!("after pass {}", pass.name()));
         .                   }
         .               }
         .           
 1,085,410 ( 0.00%)      if validate || body.phase == MirPhase::Optimization {
   143,996 ( 0.00%)          validate_body(tcx, body, format!("end of phase transition to {:?}", body.phase));
         .               }
 1,736,656 ( 0.00%)  }
         .           
         .           pub fn validate_body<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, when: String) {
   359,990 ( 0.00%)      validate::Validator { when, mir_phase: body.phase }.run_pass(tcx, body);
         .           }
         .           
         .           pub fn dump_mir<'tcx>(
         .               tcx: TyCtxt<'tcx>,
         .               body: &Body<'tcx>,
         .               phase: MirPhase,
         .               pass_name: &str,
         .               cnt: usize,
         .               is_after: bool,
         .           ) {
 2,755,984 ( 0.00%)      let phase_index = phase as u32;
         .           
         .               mir::dump_mir(
         .                   tcx,
22,047,872 ( 0.03%)          Some(&format_args!("{:03}-{:03}", phase_index, cnt)),
         .                   pass_name,
         .                   if is_after { &"after" } else { &"before" },
         .                   body,
         .                   |_, _| Ok(()),
         .               );
         .           }

23,821,919 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_transform/src/pass_manager.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/memchr.rs
--------------------------------------------------------------------------------
Ir                  

-- line 16 ----------------------------------------
         .           ///
         .           /// From *Matters Computational*, J. Arndt:
         .           ///
         .           /// "The idea is to subtract one from each of the bytes and then look for
         .           /// bytes where the borrow propagated all the way to the most significant
         .           /// bit."
         .           #[inline]
         .           fn contains_zero_byte(x: usize) -> bool {
 8,246,500 ( 0.01%)      x.wrapping_sub(LO_USIZE) & !x & HI_USIZE != 0
         .           }
         .           
         .           #[cfg(target_pointer_width = "16")]
         .           #[inline]
         .           fn repeat_byte(b: u8) -> usize {
         .               (b as usize) << 8 | b as usize
         .           }
         .           
-- line 32 ----------------------------------------
-- line 36 ----------------------------------------
         .               (b as usize) * (usize::MAX / 255)
         .           }
         .           
         .           /// Returns the first index matching the byte `x` in `text`.
         .           #[must_use]
         .           #[inline]
         .           pub fn memchr(x: u8, text: &[u8]) -> Option<usize> {
         .               // Fast path for small slices
   183,243 ( 0.00%)      if text.len() < 2 * USIZE_BYTES {
    57,816 ( 0.00%)          return text.iter().position(|elt| *elt == x);
         .               }
         .           
   305,959 ( 0.00%)      memchr_general_case(x, text)
         .           }
         .           
   306,036 ( 0.00%)  fn memchr_general_case(x: u8, text: &[u8]) -> Option<usize> {
         .               // Scan for a single byte value by reading two `usize` words at a time.
         .               //
         .               // Split `text` in three parts
         .               // - unaligned initial part, before the first word aligned address in text
         .               // - body, scan by 2 words at a time
         .               // - the last remaining part, < 2 word size
         .           
         .               // search up to an aligned boundary
         .               let len = text.len();
         .               let ptr = text.as_ptr();
         .               let mut offset = ptr.align_offset(USIZE_BYTES);
         .           
   153,018 ( 0.00%)      if offset > 0 {
         .                   offset = cmp::min(offset, len);
     7,458 ( 0.00%)          if let Some(index) = text[..offset].iter().position(|elt| *elt == x) {
         .                       return Some(index);
         .                   }
         .               }
         .           
         .               // search the body of the text
         .               let repeated_x = repeat_byte(x);
   759,266 ( 0.00%)      while offset <= len - 2 * USIZE_BYTES {
         .                   // SAFETY: the while's predicate guarantees a distance of at least 2 * usize_bytes
         .                   // between the offset and the end of the slice.
         .                   unsafe {
         .                       let u = *(ptr.add(offset) as *const usize);
   921,564 ( 0.00%)              let v = *(ptr.add(offset + USIZE_BYTES) as *const usize);
         .           
         .                       // break if there is a matching byte
   921,564 ( 0.00%)              let zu = contains_zero_byte(u ^ repeated_x);
   921,564 ( 0.00%)              let zv = contains_zero_byte(v ^ repeated_x);
   614,376 ( 0.00%)              if zu || zv {
         .                           break;
         .                       }
         .                   }
   529,754 ( 0.00%)          offset += USIZE_BYTES * 2;
         .               }
         .           
         .               // Find the byte after the point the body loop stopped.
   711,599 ( 0.00%)      text[offset..].iter().position(|elt| *elt == x).map(|i| offset + i)
   382,545 ( 0.00%)  }
         .           
         .           /// Returns the last index matching the byte `x` in `text`.
         .           #[must_use]
 3,153,567 ( 0.00%)  pub fn memrchr(x: u8, text: &[u8]) -> Option<usize> {
         .               // Scan for a single byte value by reading two `usize` words at a time.
         .               //
         .               // Split `text` in three parts:
         .               // - unaligned tail, after the last word aligned address in text,
         .               // - body, scanned by 2 words at a time,
         .               // - the first remaining bytes, < 2 word size.
         .               let len = text.len();
         .               let ptr = text.as_ptr();
-- line 104 ----------------------------------------
-- line 105 ----------------------------------------
         .               type Chunk = usize;
         .           
         .               let (min_aligned_offset, max_aligned_offset) = {
         .                   // We call this just to obtain the length of the prefix and suffix.
         .                   // In the middle we always process two chunks at once.
         .                   // SAFETY: transmuting `[u8]` to `[usize]` is safe except for size differences
         .                   // which are handled by `align_to`.
         .                   let (prefix, _, suffix) = unsafe { text.align_to::<(Chunk, Chunk)>() };
 3,153,567 ( 0.00%)          (prefix.len(), len - suffix.len())
         .               };
         .           
         .               let mut offset = max_aligned_offset;
13,227,402 ( 0.02%)      if let Some(index) = text[offset..].iter().rposition(|elt| *elt == x) {
    71,998 ( 0.00%)          return Some(offset + index);
         .               }
         .           
         .               // Search the body of the text, make sure we don't cross min_aligned_offset.
         .               // offset is always aligned, so just testing `>` is sufficient and avoids possible
         .               // overflow.
         .               let repeated_x = repeat_byte(x);
         .               let chunk_bytes = mem::size_of::<Chunk>();
         .           
 2,684,224 ( 0.00%)      while offset > min_aligned_offset {
         .                   // SAFETY: offset starts at len - suffix.len(), as long as it is greater than
         .                   // min_aligned_offset (prefix.len()) the remaining distance is at least 2 * chunk_bytes.
         .                   unsafe {
 4,714,604 ( 0.01%)              let u = *(ptr.offset(offset as isize - 2 * chunk_bytes as isize) as *const Chunk);
         .                       let v = *(ptr.offset(offset as isize - chunk_bytes as isize) as *const Chunk);
         .           
         .                       // Break if there is a matching byte.
 4,026,336 ( 0.01%)              let zu = contains_zero_byte(u ^ repeated_x);
 4,026,336 ( 0.01%)              let zv = contains_zero_byte(v ^ repeated_x);
 2,684,224 ( 0.00%)              if zu || zv {
         .                           break;
         .                       }
         .                   }
   980,766 ( 0.00%)          offset -= 2 * chunk_bytes;
         .               }
         .           
         .               // Find the byte before the point the body loop stopped.
14,169,032 ( 0.02%)      text[..offset].iter().rposition(|elt| *elt == x)
 4,204,756 ( 0.01%)  }

 7,761,435 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/memchr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 121 ----------------------------------------
         .           #[derive(Debug)]
         .           pub enum ProcessResult<O, E> {
         .               Unchanged,
         .               Changed(Vec<O>),
         .               Error(E),
         .           }
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
 1,003,556 ( 0.00%)  struct ObligationTreeId(usize);
         .           
         .           type ObligationTreeIdGenerator =
         .               std::iter::Map<std::ops::RangeFrom<usize>, fn(usize) -> ObligationTreeId>;
         .           
         .           pub struct ObligationForest<O: ForestObligation> {
         .               /// The list of obligations. In between calls to `process_obligations`,
         .               /// this list only contains nodes in the `Pending` or `Waiting` state.
         .               ///
-- line 137 ----------------------------------------
-- line 181 ----------------------------------------
         .               has_parent: bool,
         .           
         .               /// Identifier of the obligation tree to which this node belongs.
         .               obligation_tree_id: ObligationTreeId,
         .           }
         .           
         .           impl<O> Node<O> {
         .               fn new(parent: Option<usize>, obligation: O, obligation_tree_id: ObligationTreeId) -> Node<O> {
13,833,088 ( 0.02%)          Node {
         .                       obligation,
         .                       state: Cell::new(NodeState::Pending),
 1,953,013 ( 0.00%)              dependents: if let Some(parent_index) = parent { vec![parent_index] } else { vec![] },
         .                       has_parent: parent.is_some(),
         .                       obligation_tree_id,
         .                   }
         .               }
         .           }
         .           
         .           /// The state of one node in some tree within the forest. This represents the
         .           /// current state of processing for the obligation (of type `O`) associated
-- line 200 ----------------------------------------
-- line 223 ----------------------------------------
         .           ///  |     compress()
         .           ///  v
         .           /// (Removed)
         .           /// ```
         .           /// The `Error` state can be introduced in several places, via `error_at()`.
         .           ///
         .           /// Outside of `ObligationForest` methods, nodes should be either `Pending` or
         .           /// `Waiting`.
 7,148,720 ( 0.01%)  #[derive(Debug, Copy, Clone, PartialEq, Eq)]
         .           enum NodeState {
         .               /// This obligation has not yet been selected successfully. Cannot have
         .               /// subobligations.
         .               Pending,
         .           
         .               /// This obligation was selected successfully, but may or may not have
         .               /// subobligations.
         .               Success,
-- line 239 ----------------------------------------
-- line 279 ----------------------------------------
         .               pub stalled: bool,
         .           }
         .           
         .           impl<O, E> OutcomeTrait for Outcome<O, E> {
         .               type Error = Error<O, E>;
         .               type Obligation = O;
         .           
         .               fn new() -> Self {
 2,855,848 ( 0.00%)          Self { stalled: true, errors: vec![] }
         .               }
         .           
         .               fn mark_not_stalled(&mut self) {
   863,694 ( 0.00%)          self.stalled = false;
         .               }
         .           
         .               fn is_stalled(&self) -> bool {
   335,627 ( 0.00%)          self.stalled
         .               }
         .           
         .               fn record_completed(&mut self, _outcome: &Self::Obligation) {
         .                   // do nothing
         .               }
         .           
         .               fn record_error(&mut self, error: Self::Error) {
       416 ( 0.00%)          self.errors.push(error)
         .               }
         .           }
         .           
         .           #[derive(Debug, PartialEq, Eq)]
         .           pub struct Error<O, E> {
         .               pub error: E,
         .               pub backtrace: Vec<O>,
         .           }
         .           
         .           impl<O: ForestObligation> ObligationForest<O> {
   342,215 ( 0.00%)      pub fn new() -> ObligationForest<O> {
 4,106,580 ( 0.01%)          ObligationForest {
         .                       nodes: vec![],
         .                       done_cache: Default::default(),
         .                       active_cache: Default::default(),
         .                       reused_node_vec: vec![],
         .                       obligation_tree_id_generator: (0..).map(ObligationTreeId),
         .                       error_cache: Default::default(),
         .                   }
   342,215 ( 0.00%)      }
         .           
         .               /// Returns the total number of nodes in the forest that have not
         .               /// yet been fully resolved.
         .               pub fn len(&self) -> usize {
         .                   self.nodes.len()
         .               }
         .           
         .               /// Registers an obligation.
         .               pub fn register_obligation(&mut self, obligation: O) {
         .                   // Ignore errors here - there is no guarantee of success.
 7,369,089 ( 0.01%)          let _ = self.register_obligation_at(obligation, None);
         .               }
         .           
         .               // Returns Err(()) if we already know this obligation failed.
11,995,368 ( 0.02%)      fn register_obligation_at(&mut self, obligation: O, parent: Option<usize>) -> Result<(), ()> {
 2,180,976 ( 0.00%)          let cache_key = obligation.as_cache_key();
 2,180,976 ( 0.00%)          if self.done_cache.contains(&cache_key) {
         .                       debug!("register_obligation_at: ignoring already done obligation: {:?}", obligation);
         .                       return Ok(());
         .                   }
         .           
 6,072,510 ( 0.01%)          match self.active_cache.entry(cache_key) {
         .                       Entry::Occupied(o) => {
   295,034 ( 0.00%)                  let node = &mut self.nodes[*o.get()];
   295,034 ( 0.00%)                  if let Some(parent_index) = parent {
         .                               // If the node is already in `active_cache`, it has already
         .                               // had its chance to be marked with a parent. So if it's
         .                               // not already present, just dump `parent` into the
         .                               // dependents as a non-parent.
   344,409 ( 0.00%)                      if !node.dependents.contains(&parent_index) {
         .                                   node.dependents.push(parent_index);
         .                               }
         .                           }
   442,551 ( 0.00%)                  if let NodeState::Error = node.state.get() { Err(()) } else { Ok(()) }
         .                       }
 2,593,704 ( 0.00%)              Entry::Vacant(v) => {
 5,187,408 ( 0.01%)                  let obligation_tree_id = match parent {
   725,630 ( 0.00%)                      Some(parent_index) => self.nodes[parent_index].obligation_tree_id,
         .                               None => self.obligation_tree_id_generator.next().unwrap(),
         .                           };
         .           
         .                           let already_failed = parent.is_some()
         .                               && self
         .                                   .error_cache
         .                                   .get(&obligation_tree_id)
         .                                   .map_or(false, |errors| errors.contains(v.key()));
         .           
         .                           if already_failed {
         .                               Err(())
         .                           } else {
   864,568 ( 0.00%)                      let new_index = self.nodes.len();
         .                               v.insert(new_index);
         .                               self.nodes.push(Node::new(parent, obligation, obligation_tree_id));
         .                               Ok(())
         .                           }
         .                       }
         .                   }
 9,814,392 ( 0.01%)      }
         .           
         .               /// Converts all remaining obligations to the given error.
 6,838,888 ( 0.01%)      pub fn to_errors<E: Clone>(&mut self, error: E) -> Vec<Error<O, E>> {
         .                   let errors = self
         .                       .nodes
         .                       .iter()
         .                       .enumerate()
         .                       .filter(|(_index, node)| node.state.get() == NodeState::Pending)
         .                       .map(|(index, _node)| Error { error: error.clone(), backtrace: self.error_at(index) })
         .                       .collect();
         .           
 1,953,968 ( 0.00%)          self.compress(|_| assert!(false));
         .                   errors
 5,861,904 ( 0.01%)      }
         .           
         .               /// Returns the set of obligations that are in a pending state.
         .               pub fn map_pending_obligations<P, F>(&self, f: F) -> Vec<P>
         .               where
         .                   F: Fn(&O) -> P,
         .               {
       136 ( 0.00%)          self.nodes
         .                       .iter()
         .                       .filter(|node| node.state.get() == NodeState::Pending)
         .                       .map(|node| f(&node.obligation))
         .                       .collect()
         .               }
         .           
       448 ( 0.00%)      fn insert_into_error_cache(&mut self, index: usize) {
         .                   let node = &self.nodes[index];
        64 ( 0.00%)          self.error_cache
       192 ( 0.00%)              .entry(node.obligation_tree_id)
         .                       .or_default()
         .                       .insert(node.obligation.as_cache_key());
       512 ( 0.00%)      }
         .           
         .               /// Performs a pass through the obligation list. This must
         .               /// be called in a loop until `outcome.stalled` is false.
         .               ///
         .               /// This _cannot_ be unrolled (presently, at least).
         .               #[inline(never)]
12,851,316 ( 0.02%)      pub fn process_obligations<P, OUT>(&mut self, processor: &mut P) -> OUT
         .               where
         .                   P: ObligationProcessor<Obligation = O>,
         .                   OUT: OutcomeTrait<Obligation = O, Error = Error<O, P::Error>>,
         .               {
         .                   let mut outcome = OUT::new();
         .           
         .                   // Note that the loop body can append new nodes, and those new nodes
         .                   // will then be processed by subsequent iterations of the loop.
         .                   //
         .                   // We can't use an iterator for the loop because `self.nodes` is
         .                   // appended to and the borrow checker would complain. We also can't use
         .                   // `for index in 0..self.nodes.len() { ... }` because the range would
         .                   // be computed with the initial length, and we would miss the appended
         .                   // nodes. Therefore we use a `while` loop.
         .                   let mut index = 0;
 3,379,648 ( 0.00%)          while let Some(node) = self.nodes.get_mut(index) {
         .                       // `processor.process_obligation` can modify the predicate within
         .                       // `node.obligation`, and that predicate is the key used for
         .                       // `self.active_cache`. This means that `self.active_cache` can get
         .                       // out of sync with `nodes`. It's not very common, but it does
         .                       // happen, and code in `compress` has to allow for it.
 3,903,448 ( 0.01%)              if node.state.get() != NodeState::Pending {
   117,996 ( 0.00%)                  index += 1;
         .                           continue;
         .                       }
         .           
 4,676,619 ( 0.01%)              match processor.process_obligation(&mut node.obligation) {
         .                           ProcessResult::Unchanged => {
         .                               // No change in state.
         .                           }
 3,454,672 ( 0.01%)                  ProcessResult::Changed(children) => {
         .                               // We are not (yet) stalled.
         .                               outcome.mark_not_stalled();
         .                               node.state.set(NodeState::Success);
         .           
 4,501,942 ( 0.01%)                      for child in children {
 8,901,795 ( 0.01%)                          let st = self.register_obligation_at(child, Some(index));
 1,047,270 ( 0.00%)                          if let Err(()) = st {
         .                                       // Error already reported - propagate it
         .                                       // to our node.
         .                                       self.error_at(index);
         .                                   }
         .                               }
         .                           }
         .                           ProcessResult::Error(err) => {
         .                               outcome.mark_not_stalled();
       858 ( 0.00%)                      outcome.record_error(Error { error: err, backtrace: self.error_at(index) });
         .                           }
         .                       }
 3,667,456 ( 0.01%)              index += 1;
         .                   }
         .           
         .                   // There's no need to perform marking, cycle processing and compression when nothing
         .                   // changed.
   335,627 ( 0.00%)          if !outcome.is_stalled() {
         .                       self.mark_successes();
         .                       self.process_cycles(processor);
   383,726 ( 0.00%)              self.compress(|obl| outcome.record_completed(obl));
         .                   }
         .           
         .                   outcome
12,851,316 ( 0.02%)      }
         .           
         .               /// Returns a vector of obligations for `p` and all of its
         .               /// ancestors, putting them into the error state in the process.
       182 ( 0.00%)      fn error_at(&self, mut index: usize) -> Vec<O> {
         .                   let mut error_stack: Vec<usize> = vec![];
         .                   let mut trace = vec![];
         .           
         .                   loop {
         .                       let node = &self.nodes[index];
       154 ( 0.00%)              node.state.set(NodeState::Error);
         .                       trace.push(node.obligation.clone());
       308 ( 0.00%)              if node.has_parent {
         .                           // The first dependent is the parent, which is treated
         .                           // specially.
         .                           error_stack.extend(node.dependents.iter().skip(1));
       128 ( 0.00%)                  index = node.dependents[0];
         .                       } else {
         .                           // No parent; treat all dependents non-specially.
         .                           error_stack.extend(node.dependents.iter());
         .                           break;
         .                       }
         .                   }
         .           
         .                   while let Some(index) = error_stack.pop() {
-- line 508 ----------------------------------------
-- line 509 ----------------------------------------
         .                       let node = &self.nodes[index];
         .                       if node.state.get() != NodeState::Error {
         .                           node.state.set(NodeState::Error);
         .                           error_stack.extend(node.dependents.iter());
         .                       }
         .                   }
         .           
         .                   trace
       208 ( 0.00%)      }
         .           
         .               /// Mark all `Waiting` nodes as `Success`, except those that depend on a
         .               /// pending node.
         .               fn mark_successes(&self) {
         .                   // Convert all `Waiting` nodes to `Success`.
         .                   for node in &self.nodes {
 3,675,847 ( 0.01%)              if node.state.get() == NodeState::Waiting {
         .                           node.state.set(NodeState::Success);
         .                       }
         .                   }
         .           
         .                   // Convert `Success` nodes that depend on a pending node back to
         .                   // `Waiting`.
         .                   for node in &self.nodes {
 1,252,469 ( 0.00%)              if node.state.get() == NodeState::Pending {
         .                           // This call site is hot.
         .                           self.inlined_mark_dependents_as_waiting(node);
         .                       }
         .                   }
         .               }
         .           
         .               // This always-inlined function is for the hot call site.
         .               #[inline(always)]
         .               fn inlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
   133,764 ( 0.00%)          for &index in node.dependents.iter() {
         .                       let node = &self.nodes[index];
   133,764 ( 0.00%)              let state = node.state.get();
   133,764 ( 0.00%)              if state == NodeState::Success {
         .                           // This call site is cold.
   153,396 ( 0.00%)                  self.uninlined_mark_dependents_as_waiting(node);
         .                       } else {
         .                           debug_assert!(state == NodeState::Waiting || state == NodeState::Error)
         .                       }
         .                   }
         .               }
         .           
         .               // This never-inlined function is for the cold call site.
         .               #[inline(never)]
   357,924 ( 0.00%)      fn uninlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
         .                   // Mark node Waiting in the cold uninlined code instead of the hot inlined
         .                   node.state.set(NodeState::Waiting);
         .                   self.inlined_mark_dependents_as_waiting(node)
   409,056 ( 0.00%)      }
         .           
         .               /// Report cycles between all `Success` nodes, and convert all `Success`
         .               /// nodes to `Done`. This must be called after `mark_successes`.
         .               fn process_cycles<P>(&mut self, processor: &mut P)
         .               where
         .                   P: ObligationProcessor<Obligation = O>,
         .               {
   191,863 ( 0.00%)          let mut stack = std::mem::take(&mut self.reused_node_vec);
         .                   for (index, node) in self.nodes.iter().enumerate() {
         .                       // For some benchmarks this state test is extremely hot. It's a win
         .                       // to handle the no-op cases immediately to avoid the cost of the
         .                       // function call.
 1,252,469 ( 0.00%)              if node.state.get() == NodeState::Success {
 4,166,725 ( 0.01%)                  self.find_cycles_from_node(&mut stack, processor, index);
         .                       }
         .                   }
         .           
         .                   debug_assert!(stack.is_empty());
 1,534,904 ( 0.00%)          self.reused_node_vec = stack;
         .               }
         .           
11,709,459 ( 0.02%)      fn find_cycles_from_node<P>(&self, stack: &mut Vec<usize>, processor: &mut P, index: usize)
         .               where
         .                   P: ObligationProcessor<Obligation = O>,
         .               {
         .                   let node = &self.nodes[index];
 2,602,102 ( 0.00%)          if node.state.get() == NodeState::Success {
    60,802 ( 0.00%)              match stack.iter().rposition(|&n| n == index) {
         .                           None => {
         .                               stack.push(index);
   467,706 ( 0.00%)                      for &dep_index in node.dependents.iter() {
 1,870,824 ( 0.00%)                          self.find_cycles_from_node(stack, processor, dep_index);
         .                               }
         .                               stack.pop();
         .                               node.state.set(NodeState::Done);
         .                           }
         .                           Some(rpos) => {
         .                               // Cycle detected.
         .                               processor.process_backedge(
         .                                   stack[rpos..].iter().map(|&i| &self.nodes[i].obligation),
         .                                   PhantomData,
         .                               );
         .                           }
         .                       }
         .                   }
10,408,408 ( 0.02%)      }
         .           
         .               /// Compresses the vector, removing all popped nodes. This adjusts the
         .               /// indices and hence invalidates any outstanding indices. `process_cycles`
         .               /// must be run beforehand to remove any cycles on `Success` nodes.
         .               #[inline(never)]
 8,373,792 ( 0.01%)      fn compress(&mut self, mut outcome_cb: impl FnMut(&O)) {
 1,168,847 ( 0.00%)          let orig_nodes_len = self.nodes.len();
         .                   let mut node_rewrites: Vec<_> = std::mem::take(&mut self.reused_node_vec);
         .                   debug_assert!(node_rewrites.is_empty());
         .                   node_rewrites.extend(0..orig_nodes_len);
         .                   let mut dead_nodes = 0;
         .           
         .                   // Move removable nodes to the end, preserving the order of the
         .                   // remaining nodes.
         .                   //
         .                   // LOOP INVARIANT:
         .                   //     self.nodes[0..index - dead_nodes] are the first remaining nodes
         .                   //     self.nodes[index - dead_nodes..index] are all dead
         .                   //     self.nodes[index..] are unchanged
         .                   for index in 0..orig_nodes_len {
         .                       let node = &self.nodes[index];
 7,029,797 ( 0.01%)              match node.state.get() {
         .                           NodeState::Pending | NodeState::Waiting => {
   777,550 ( 0.00%)                      if dead_nodes > 0 {
   543,483 ( 0.00%)                          self.nodes.swap(index, index - dead_nodes);
   905,805 ( 0.00%)                          node_rewrites[index] -= dead_nodes;
         .                               }
         .                           }
         .                           NodeState::Done => {
         .                               // This lookup can fail because the contents of
         .                               // `self.active_cache` are not guaranteed to match those of
         .                               // `self.nodes`. See the comment in `process_obligation`
         .                               // for more details.
 3,291,014 ( 0.00%)                      if let Some((predicate, _)) =
 2,590,890 ( 0.00%)                          self.active_cache.remove_entry(&node.obligation.as_cache_key())
         .                               {
         .                                   self.done_cache.insert(predicate);
         .                               } else {
         .                                   self.done_cache.insert(node.obligation.as_cache_key().clone());
         .                               }
         .                               // Extract the success stories.
         .                               outcome_cb(&node.obligation);
 1,727,260 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
 1,727,260 ( 0.00%)                      dead_nodes += 1;
         .                           }
         .                           NodeState::Error => {
         .                               // We *intentionally* remove the node from the cache at this point. Otherwise
         .                               // tests must come up with a different type on every type error they
         .                               // check against.
       192 ( 0.00%)                      self.active_cache.remove(&node.obligation.as_cache_key());
       128 ( 0.00%)                      self.insert_into_error_cache(index);
       128 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
       128 ( 0.00%)                      dead_nodes += 1;
         .                           }
         .                           NodeState::Success => unreachable!(),
         .                       }
         .                   }
         .           
         .                   if dead_nodes > 0 {
         .                       // Remove the dead nodes and rewrite indices.
   332,814 ( 0.00%)              self.nodes.truncate(orig_nodes_len - dead_nodes);
   166,407 ( 0.00%)              self.apply_rewrites(&node_rewrites);
         .                   }
         .           
         .                   node_rewrites.truncate(0);
 4,675,388 ( 0.01%)          self.reused_node_vec = node_rewrites;
 9,350,776 ( 0.01%)      }
         .           
         .               #[inline(never)]
 1,497,663 ( 0.00%)      fn apply_rewrites(&mut self, node_rewrites: &[usize]) {
         .                   let orig_nodes_len = node_rewrites.len();
         .           
         .                   for node in &mut self.nodes {
         .                       let mut i = 0;
   389,438 ( 0.00%)              while let Some(dependent) = node.dependents.get_mut(i) {
   329,912 ( 0.00%)                  let new_index = node_rewrites[*dependent];
   164,956 ( 0.00%)                  if new_index >= orig_nodes_len {
         .                               node.dependents.swap_remove(i);
         .                               if i == 0 && node.has_parent {
         .                                   // We just removed the parent.
         .                                   node.has_parent = false;
         .                               }
         .                           } else {
    82,478 ( 0.00%)                      *dependent = new_index;
   164,956 ( 0.00%)                      i += 1;
         .                           }
         .                       }
         .                   }
         .           
         .                   // This updating of `self.active_cache` is necessary because the
         .                   // removal of nodes within `compress` can fail. See above.
         .                   self.active_cache.retain(|_predicate, index| {
 1,881,864 ( 0.00%)              let new_index = node_rewrites[*index];
   940,932 ( 0.00%)              if new_index >= orig_nodes_len {
         .                           false
         .                       } else {
   306,960 ( 0.00%)                  *index = new_index;
         .                           true
         .                       }
         .                   });
 1,331,256 ( 0.00%)      }
         .           }

20,387,092 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                   

-- line 70 ----------------------------------------
          .           
          .                   impl<'a, T> $name<'a, T> {
          .                       // Helper function for creating a slice from the iterator.
          .                       #[inline(always)]
          .                       fn make_slice(&self) -> &'a [T] {
          .                           // SAFETY: the iterator was created from a slice with pointer
          .                           // `self.ptr` and length `len!(self)`. This guarantees that all
          .                           // the prerequisites for `from_raw_parts` are fulfilled.
    113,049 ( 0.00%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
          .                       }
          .           
          .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
          .                       // returning the old start.
          .                       // Unsafe because the offset must not exceed `self.len()`.
          .                       #[inline(always)]
          .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
          .                           if mem::size_of::<T>() == 0 {
          .                               zst_shrink!(self, offset);
          .                               self.ptr.as_ptr()
          .                           } else {
    306,072 ( 0.00%)                      let old = self.ptr.as_ptr();
          .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
          .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
  3,590,984 ( 0.01%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
     51,012 ( 0.00%)                      old
          .                           }
    102,024 ( 0.00%)              }
          .           
          .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
          .                       // returning the new end.
          .                       // Unsafe because the offset must not exceed `self.len()`.
          .                       #[inline(always)]
          .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
          .                           if mem::size_of::<T>() == 0 {
          .                               zst_shrink!(self, offset);
          .                               self.ptr.as_ptr()
          .                           } else {
          .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
          .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
          .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
     31,653 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
      4,344 ( 0.00%)                      self.end
          .                           }
      4,344 ( 0.00%)              }
          .                   }
          .           
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   impl<T> ExactSizeIterator for $name<'_, T> {
          .                       #[inline(always)]
          .                       fn len(&self) -> usize {
  1,329,478 ( 0.00%)                  len!(self)
      8,548 ( 0.00%)              }
          .           
          .                       #[inline(always)]
          .                       fn is_empty(&self) -> bool {
          .                           is_empty!(self)
          .                       }
          .                   }
          .           
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   impl<'a, T> Iterator for $name<'a, T> {
          .                       type Item = $elem;
          .           
          .                       #[inline]
    186,147 ( 0.00%)              fn next(&mut self) -> Option<$elem> {
          .                           // could be implemented with slices, but this avoids bounds checks
          .           
          .                           // SAFETY: `assume` calls are safe since a slice's start pointer
          .                           // must be non-null, and slices over non-ZSTs must also have a
          .                           // non-null end pointer. The call to `next_unchecked!` is safe
          .                           // since we check if the iterator is empty first.
          .                           unsafe {
  7,886,555 ( 0.01%)                      assume(!self.ptr.as_ptr().is_null());
    310,245 ( 0.00%)                      if mem::size_of::<T>() != 0 {
    321,168 ( 0.00%)                          assume(!self.end.is_null());
          .                               }
750,396,799 ( 1.10%)                      if is_empty!(self) {
     11,037 ( 0.00%)                          None
          .                               } else {
    102,024 ( 0.00%)                          Some(next_unchecked!(self))
          .                               }
          .                           }
    186,147 ( 0.00%)              }
          .           
          .                       #[inline]
      1,625 ( 0.00%)              fn size_hint(&self) -> (usize, Option<usize>) {
 47,677,061 ( 0.07%)                  let exact = len!(self);
      2,925 ( 0.00%)                  (exact, Some(exact))
        650 ( 0.00%)              }
          .           
          .                       #[inline]
          .                       fn count(self) -> usize {
          .                           len!(self)
          .                       }
          .           
          .                       #[inline]
          .                       fn nth(&mut self, n: usize) -> Option<$elem> {
    136,355 ( 0.00%)                  if n >= len!(self) {
          .                               // This iterator is now empty.
          .                               if mem::size_of::<T>() == 0 {
          .                                   // We have to do it this way as `ptr` may never be 0, but `end`
          .                                   // could be (due to wrapping).
          .                                   self.end = self.ptr.as_ptr();
          .                               } else {
          .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
          .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
          .                       // faster to compile.
          .                       #[inline]
          .                       fn for_each<F>(mut self, mut f: F)
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item),
          .                       {
          .                           while let Some(x) = self.next() {
    124,183 ( 0.00%)                      f(x);
          .                           }
          .                       }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
        152 ( 0.00%)              fn all<F>(&mut self, mut f: F) -> bool
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> bool,
          .                       {
      5,647 ( 0.00%)                  while let Some(x) = self.next() {
    117,878 ( 0.00%)                      if !f(x) {
         38 ( 0.00%)                          return false;
          .                               }
          .                           }
          .                           true
        228 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
      1,182 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> bool,
          .                       {
  9,876,823 ( 0.01%)                  while let Some(x) = self.next() {
 17,581,328 ( 0.03%)                      if f(x) {
          .                                   return true;
          .                               }
          .                           }
         38 ( 0.00%)                  false
      1,182 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
      2,241 ( 0.00%)              fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
          .                       where
          .                           Self: Sized,
          .                           P: FnMut(&Self::Item) -> bool,
          .                       {
    999,792 ( 0.00%)                  while let Some(x) = self.next() {
  3,599,862 ( 0.01%)                      if predicate(&x) {
        416 ( 0.00%)                          return Some(x);
          .                               }
          .                           }
        230 ( 0.00%)                  None
     27,526 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> Option<B>,
          .                       {
  1,742,829 ( 0.00%)                  while let Some(x) = self.next() {
  3,249,320 ( 0.00%)                      if let Some(y) = f(x) {
    599,255 ( 0.00%)                          return Some(y);
          .                               }
          .                           }
          .                           None
    195,241 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile. Also, the `assume` avoids a bounds check.
          .                       #[inline]
          .                       #[rustc_inherit_overflow_checks]
          .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
          .                           Self: Sized,
          .                           P: FnMut(Self::Item) -> bool,
          .                       {
          .                           let n = len!(self);
          .                           let mut i = 0;
          .                           while let Some(x) = self.next() {
  3,019,970 ( 0.00%)                      if predicate(x) {
          .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
          .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
          .                                   unsafe { assume(i < n) };
          .                                   return Some(i);
          .                               }
          .                               i += 1;
          .                           }
          .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
          .                       // faster to compile. Also, the `assume` avoids a bounds check.
          .                       #[inline]
          .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
          .                           P: FnMut(Self::Item) -> bool,
          .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
          .                       {
          .                           let n = len!(self);
          .                           let mut i = n;
  3,156,541 ( 0.00%)                  while let Some(x) = self.next_back() {
 41,265,544 ( 0.06%)                      i -= 1;
 34,149,992 ( 0.05%)                      if predicate(x) {
          .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
          .                                   // and is only decreasing.
          .                                   unsafe { assume(i < n) };
          .                                   return Some(i);
          .                               }
          .                           }
          .                           None
          .                       }
          .           
          .                       #[doc(hidden)]
        152 ( 0.00%)              unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {
          .                           // SAFETY: the caller must guarantee that `i` is in bounds of
          .                           // the underlying slice, so `i` cannot overflow an `isize`, and
          .                           // the returned references is guaranteed to refer to an element
          .                           // of the slice and thus guaranteed to be valid.
          .                           //
          .                           // Also note that the caller also guarantees that we're never
          .                           // called with the same index again, and that no other methods
          .                           // that will access this subslice are called, so it is valid
          .                           // for the returned reference to be mutable in the case of
          .                           // `IterMut`
  4,461,216 ( 0.01%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
         76 ( 0.00%)              }
          .           
          .                       $($extra)*
          .                   }
          .           
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
          .                       #[inline]
      6,516 ( 0.00%)              fn next_back(&mut self) -> Option<$elem> {
          .                           // could be implemented with slices, but this avoids bounds checks
          .           
          .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
          .                           // and slices over non-ZSTs must also have a non-null end pointer.
          .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
          .                           // empty first.
          .                           unsafe {
     36,457 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
     10,860 ( 0.00%)                      if mem::size_of::<T>() != 0 {
     32,177 ( 0.00%)                          assume(!self.end.is_null());
          .                               }
 43,250,588 ( 0.06%)                      if is_empty!(self) {
          .                                   None
          .                               } else {
      4,344 ( 0.00%)                          Some(next_back_unchecked!(self))
          .                               }
          .                           }
      6,516 ( 0.00%)              }
          .           
          .                       #[inline]
          .                       fn nth_back(&mut self, n: usize) -> Option<$elem> {
          .                           if n >= len!(self) {
          .                               // This iterator is now empty.
          .                               self.end = self.ptr.as_ptr();
          .                               return None;
          .                           }
-- line 375 ----------------------------------------

180,261,745 ( 0.26%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                   

-- line 57 ----------------------------------------
          .                   /// # Examples
          .                   ///
          .                   /// Basic usage:
          .                   ///
          .                   /// ```
          .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
          .                   /// ```
          .                   #[stable(feature = "rust1", since = "1.0.0")]
        718 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
        359 ( 0.00%)              from_str_radix(src, radix)
      1,077 ( 0.00%)          }
          .           
          .                   /// Returns the number of ones in the binary representation of `self`.
          .                   ///
          .                   /// # Examples
          .                   ///
          .                   /// Basic usage:
          .                   ///
          .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
          .                   #[doc(alias = "popcount")]
          .                   #[doc(alias = "popcnt")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[inline(always)]
          .                   pub const fn count_ones(self) -> u32 {
 11,385,675 ( 0.02%)              intrinsics::ctpop(self as $ActualT) as u32
          .                   }
          .           
          .                   /// Returns the number of zeros in the binary representation of `self`.
          .                   ///
          .                   /// # Examples
          .                   ///
          .                   /// Basic usage:
          .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
          .                   /// assert_eq!(n.leading_zeros(), 2);
          .                   /// ```
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[inline(always)]
          .                   pub const fn leading_zeros(self) -> u32 {
 12,148,151 ( 0.02%)              intrinsics::ctlz(self as $ActualT) as u32
          .                   }
          .           
          .                   /// Returns the number of trailing zeros in the binary representation
          .                   /// of `self`.
          .                   ///
          .                   /// # Examples
          .                   ///
          .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
          .                   /// assert_eq!(n.trailing_zeros(), 3);
          .                   /// ```
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[inline(always)]
          .                   pub const fn trailing_zeros(self) -> u32 {
  9,808,886 ( 0.01%)              intrinsics::cttz(self) as u32
          .                   }
          .           
          .                   /// Returns the number of leading ones in the binary representation of `self`.
          .                   ///
          .                   /// # Examples
          .                   ///
          .                   /// Basic usage:
          .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
          .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
          .                   /// ```
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[inline(always)]
          .                   pub const fn rotate_left(self, n: u32) -> Self {
370,178,523 ( 0.54%)              intrinsics::rotate_left(self, n as $SelfT)
          .                   }
          .           
          .                   /// Shifts the bits to the right by a specified amount, `n`,
          .                   /// wrapping the truncated bits to the beginning of the resulting
          .                   /// integer.
          .                   ///
          .                   /// Please note this isn't the same operation as the `>>` shifting operator!
          .                   ///
-- line 220 ----------------------------------------
-- line 429 ----------------------------------------
          .                   )]
          .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
          .                   /// ```
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[inline]
     50,140 ( 0.00%)          pub const fn checked_add(self, rhs: Self) -> Option<Self> {
     40,590 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
    100,280 ( 0.00%)              if unlikely!(b) {None} else {Some(a)}
     40,112 ( 0.00%)          }
          .           
          .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
          .                   /// cannot occur.
          .                   ///
          .                   /// # Safety
          .                   ///
          .                   /// This results in undefined behavior when
          .                   #[doc = concat!("`self + rhs > ", stringify!($SelfT), "::MAX` or `self + rhs < ", stringify!($SelfT), "::MIN`,")]
-- line 448 ----------------------------------------
-- line 456 ----------------------------------------
          .                   )]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
          .                   #[inline(always)]
          .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
          .                       // SAFETY: the caller must uphold the safety contract for
          .                       // `unchecked_add`.
 18,913,341 ( 0.03%)              unsafe { intrinsics::unchecked_add(self, rhs) }
          .                   }
          .           
          .                   /// Checked addition with a signed integer. Computes `self + rhs`,
          .                   /// returning `None` if overflow occurred.
          .                   ///
          .                   /// # Examples
          .                   ///
          .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
          .                   )]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
          .                   #[inline(always)]
          .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
          .                       // SAFETY: the caller must uphold the safety contract for
          .                       // `unchecked_sub`.
  2,086,967 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
          .                   }
          .           
          .                   /// Checked integer multiplication. Computes `self * rhs`, returning
          .                   /// `None` if overflow occurred.
          .                   ///
          .                   /// # Examples
          .                   ///
          .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 544 ----------------------------------------
          .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".checked_mul(1), Some(5));")]
          .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.checked_mul(2), None);")]
          .                   /// ```
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[inline]
     77,604 ( 0.00%)          pub const fn checked_mul(self, rhs: Self) -> Option<Self> {
     51,736 ( 0.00%)              let (a, b) = self.overflowing_mul(rhs);
    129,340 ( 0.00%)              if unlikely!(b) {None} else {Some(a)}
     51,736 ( 0.00%)          }
          .           
          .                   /// Unchecked integer multiplication. Computes `self * rhs`, assuming overflow
          .                   /// cannot occur.
          .                   ///
          .                   /// # Safety
          .                   ///
          .                   /// This results in undefined behavior when
          .                   #[doc = concat!("`self * rhs > ", stringify!($SelfT), "::MAX` or `self * rhs < ", stringify!($SelfT), "::MIN`,")]
-- line 563 ----------------------------------------
-- line 596 ----------------------------------------
          .                                 without modifying the original"]
          .                   #[inline]
          .                   pub const fn checked_div(self, rhs: Self) -> Option<Self> {
          .                       if unlikely!(rhs == 0) {
          .                           None
          .                       } else {
          .                           // SAFETY: div by zero has been checked above and unsigned types have no other
          .                           // failure modes for division
      7,008 ( 0.00%)                  Some(unsafe { intrinsics::unchecked_div(self, rhs) })
          .                       }
          .                   }
          .           
          .                   /// Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning `None`
          .                   /// if `rhs == 0`.
          .                   ///
          .                   /// # Examples
          .                   ///
-- line 612 ----------------------------------------
-- line 1035 ----------------------------------------
          .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
          .                   /// ```
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
          .                   #[inline(always)]
          .                   pub const fn saturating_add(self, rhs: Self) -> Self {
  6,064,777 ( 0.01%)              intrinsics::saturating_add(self, rhs)
        102 ( 0.00%)          }
          .           
          .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
          .                   /// saturating at the numeric bounds instead of overflowing.
          .                   ///
          .                   /// # Examples
          .                   ///
          .                   /// Basic usage:
          .                   ///
-- line 1052 ----------------------------------------
-- line 1084 ----------------------------------------
          .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
          .                   /// ```
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
          .                   #[inline(always)]
          .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
    176,983 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
          .                   }
          .           
          .                   /// Saturating integer multiplication. Computes `self * rhs`,
          .                   /// saturating at the numeric bounds instead of overflowing.
          .                   ///
          .                   /// # Examples
          .                   ///
          .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
          .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
          .                   /// ```
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[inline(always)]
          .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
191,337,264 ( 0.28%)              intrinsics::wrapping_add(self, rhs)
          .                   }
          .           
          .                   /// Wrapping (modular) addition with a signed integer. Computes
          .                   /// `self + rhs`, wrapping around at the boundary of the type.
          .                   ///
          .                   /// # Examples
          .                   ///
          .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
          .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
          .                   /// ```
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[inline(always)]
          .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
 48,040,628 ( 0.07%)              intrinsics::wrapping_sub(self, rhs)
          .                   }
          .           
          .                   /// Wrapping (modular) multiplication. Computes `self *
          .                   /// rhs`, wrapping around at the boundary of the type.
          .                   ///
          .                   /// # Examples
          .                   ///
          .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
          .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
          .                   /// ```
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[inline(always)]
          .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
183,839,840 ( 0.27%)              intrinsics::wrapping_mul(self, rhs)
          .                   }
          .           
          .                   /// Wrapping (modular) division. Computes `self / rhs`.
          .                   /// Wrapped division on unsigned types is just normal division.
          .                   /// There's no way wrapping could ever happen.
          .                   /// This function exists, so that all operations
          .                   /// are accounted for in the wrapping operations.
          .                   ///
-- line 1256 ----------------------------------------
-- line 1397 ----------------------------------------
          .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[inline(always)]
          .                   pub const fn wrapping_shl(self, rhs: u32) -> Self {
          .                       // SAFETY: the masking by the bitsize of the type ensures that we do not shift
          .                       // out of bounds
          .                       unsafe {
        120 ( 0.00%)                  intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)
          .                       }
          .                   }
          .           
          .                   /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,
          .                   /// where `mask` removes any high-order bits of `rhs` that
          .                   /// would cause the shift to exceed the bitwidth of the type.
          .                   ///
          .                   /// Note that this is *not* the same as a rotate-right; the
-- line 1413 ----------------------------------------
-- line 1491 ----------------------------------------
          .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_add(2), (7, false));")]
          .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
          .                   /// ```
          .                   #[stable(feature = "wrapping", since = "1.7.0")]
          .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[inline(always)]
     24,830 ( 0.00%)          pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
 26,316,357 ( 0.04%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
     20,056 ( 0.00%)              (a as Self, b)
     89,772 ( 0.00%)          }
          .           
          .                   /// Calculates `self + rhs + carry` without the ability to overflow.
          .                   ///
          .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
          .                   /// additional bit of overflow. This allows for chaining together multiple additions
          .                   /// to create "big integers" which represent larger values.
          .                   ///
          .                   #[doc = concat!("This can be thought of as a ", stringify!($BITS), "-bit \"full adder\", in the electronics sense.")]
-- line 1510 ----------------------------------------
-- line 1587 ----------------------------------------
          .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_sub(2), (3, false));")]
          .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
          .                   /// ```
          .                   #[stable(feature = "wrapping", since = "1.7.0")]
          .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[inline(always)]
        556 ( 0.00%)          pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
  3,176,197 ( 0.00%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
          .                       (a as Self, b)
      1,112 ( 0.00%)          }
          .           
          .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
          .                   ///
          .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
          .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
          .                   /// to create "big integers" which represent larger values.
          .                   ///
          .                   /// # Examples
-- line 1606 ----------------------------------------
-- line 1673 ----------------------------------------
          .                   /// assert_eq!(5u32.overflowing_mul(2), (10, false));
          .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
          .                   /// ```
          .                   #[stable(feature = "wrapping", since = "1.7.0")]
          .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                     without modifying the original"]
          .                   #[inline(always)]
          6 ( 0.00%)          pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
 57,068,943 ( 0.08%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
     25,868 ( 0.00%)              (a as Self, b)
     51,739 ( 0.00%)          }
          .           
          .                   /// Calculates the divisor when `self` is divided by `rhs`.
          .                   ///
          .                   /// Returns a tuple of the divisor along with a boolean indicating
          .                   /// whether an arithmetic overflow would occur. Note that for unsigned
          .                   /// integers overflow never occurs, so the second value is always
          .                   /// `false`.
          .                   ///
-- line 1692 ----------------------------------------
-- line 1838 ----------------------------------------
          .                   #[doc = concat!("assert_eq!(0x1", stringify!($SelfT), ".overflowing_shl(132), (0x10, true));")]
          .                   /// ```
          .                   #[stable(feature = "wrapping", since = "1.7.0")]
          .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[inline(always)]
          .                   pub const fn overflowing_shl(self, rhs: u32) -> (Self, bool) {
         36 ( 0.00%)              (self.wrapping_shl(rhs), (rhs > ($BITS - 1)))
          .                   }
          .           
          .                   /// Shifts self right by `rhs` bits.
          .                   ///
          .                   /// Returns a tuple of the shifted version of self along with a boolean
          .                   /// indicating whether the shift value was larger than or equal to the
          .                   /// number of bits. If the shift value is too large, then value is
          .                   /// masked (N-1) where N is the number of bits, and this value is then
-- line 1854 ----------------------------------------
-- line 2132 ----------------------------------------
          .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
          .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
          .                   /// ```
          .                   #[must_use]
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
          .                   #[inline(always)]
          .                   pub const fn is_power_of_two(self) -> bool {
        468 ( 0.00%)              self.count_ones() == 1
          .                   }
          .           
          .                   // Returns one less than next power of two.
          .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
          .                   //
          .                   // 8u8.one_less_than_next_power_of_two() == 7
          .                   // 6u8.one_less_than_next_power_of_two() == 7
          .                   //
          .                   // This method cannot overflow, as in the `next_power_of_two`
          .                   // overflow cases it instead ends up returning the maximum value
          .                   // of the type, and can return 0 for 0.
          .                   #[inline]
          .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
          .                   const fn one_less_than_next_power_of_two(self) -> Self {
    104,484 ( 0.00%)              if self <= 1 { return 0; }
          .           
    714,726 ( 0.00%)              let p = self - 1;
          .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
          .                       // That means the shift is always in-bounds, and some processors
          .                       // (such as intel pre-haswell) have more efficient ctlz
          .                       // intrinsics when the argument is non-zero.
  2,143,244 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    714,788 ( 0.00%)              <$SelfT>::MAX >> z
          .                   }
          .           
          .                   /// Returns the smallest power of two greater than or equal to `self`.
          .                   ///
          .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
          .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
          .                   /// release mode (the only situation in which method can return 0).
          .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
          .                   /// ```
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[inline]
          .                   #[rustc_inherit_overflow_checks]
          .                   pub const fn next_power_of_two(self) -> Self {
  1,324,532 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
          .                   }
          .           
          .                   /// Returns the smallest power of two greater than or equal to `n`. If
          .                   /// the next power of two is greater than the type's maximum value,
          .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
          .                   ///
          .                   /// # Examples
          .                   ///
-- line 2195 ----------------------------------------
-- line 2264 ----------------------------------------
          .                   #[doc = concat!("let bytes = ", $swap_op, stringify!($SelfT), ".to_le_bytes();")]
          .                   #[doc = concat!("assert_eq!(bytes, ", $le_bytes, ");")]
          .                   /// ```
          .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
          .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[inline]
        190 ( 0.00%)          pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {
        152 ( 0.00%)              self.to_le().to_ne_bytes()
        114 ( 0.00%)          }
          .           
          .                   /// Return the memory representation of this integer as a byte array in
          .                   /// native byte order.
          .                   ///
          .                   /// As the target platform's native endianness is used, portable code
          .                   /// should use [`to_be_bytes`] or [`to_le_bytes`], as appropriate,
          .                   /// instead.
          .                   ///
-- line 2282 ----------------------------------------
-- line 2300 ----------------------------------------
          .                   /// ```
          .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
          .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   // SAFETY: const sound because integers are plain old datatypes so we can always
          .                   // transmute them to arrays of bytes
          .                   #[inline]
         76 ( 0.00%)          pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {
          .                       // SAFETY: integers are plain old datatypes so we can always transmute them to
          .                       // arrays of bytes
         38 ( 0.00%)              unsafe { mem::transmute(self) }
        114 ( 0.00%)          }
          .           
          .                   /// Create a native endian integer value from its representation
          .                   /// as a byte array in big endian.
          .                   ///
          .                   #[doc = $from_xe_bytes_doc]
          .                   ///
          .                   /// # Examples
          .                   ///
-- line 2320 ----------------------------------------
-- line 2360 ----------------------------------------
          .                   ///     *input = rest;
          .                   #[doc = concat!("    ", stringify!($SelfT), "::from_le_bytes(int_bytes.try_into().unwrap())")]
          .                   /// }
          .                   /// ```
          .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
          .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
          .                   #[must_use]
          .                   #[inline]
        152 ( 0.00%)          pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {
        190 ( 0.00%)              Self::from_le(Self::from_ne_bytes(bytes))
         76 ( 0.00%)          }
          .           
          .                   /// Create a native endian integer value from its memory representation
          .                   /// as a byte array in native endianness.
          .                   ///
          .                   /// As the target platform's native endianness is used, portable code
          .                   /// likely wants to use [`from_be_bytes`] or [`from_le_bytes`], as
          .                   /// appropriate instead.
          .                   ///
-- line 2378 ----------------------------------------
-- line 2402 ----------------------------------------
          .                   /// }
          .                   /// ```
          .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
          .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
          .                   #[must_use]
          .                   // SAFETY: const sound because integers are plain old datatypes so we can always
          .                   // transmute to them
          .                   #[inline]
        152 ( 0.00%)          pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {
          .                       // SAFETY: integers are plain old datatypes so we can always transmute to them
        228 ( 0.00%)              unsafe { mem::transmute(bytes) }
         76 ( 0.00%)          }
          .           
          .                   /// New code should prefer to use
          .                   #[doc = concat!("[`", stringify!($SelfT), "::MIN", "`] instead.")]
          .                   ///
          .                   /// Returns the smallest value that can be represented by this integer type.
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   #[rustc_promotable]
          .                   #[inline(always)]
-- line 2421 ----------------------------------------

  4,539,918 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir                  

-- line 118 ----------------------------------------
         .               stability: InternedSet<'tcx, attr::Stability>,
         .           
         .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
         .               const_stability: InternedSet<'tcx, attr::ConstStability>,
         .           }
         .           
         .           impl<'tcx> CtxtInterners<'tcx> {
         .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
        17 ( 0.00%)          CtxtInterners {
         .                       arena,
         .                       type_: Default::default(),
         .                       type_list: Default::default(),
         .                       substs: Default::default(),
         .                       region: Default::default(),
         .                       poly_existential_predicates: Default::default(),
         .                       canonical_var_infos: Default::default(),
         .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
         .                       stability: Default::default(),
         .                       const_stability: Default::default(),
         .                   }
         .               }
         .           
         .               /// Interns a type.
         .               #[allow(rustc::usage_of_ty_tykind)]
         .               #[inline(never)]
67,085,456 ( 0.10%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
         .                   self.type_
41,928,410 ( 0.06%)              .intern(kind, |kind| {
   684,182 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
         .           
         .                           let ty_struct = TyS {
 1,368,364 ( 0.00%)                      kind,
         .                               flags: flags.flags,
         .                               outer_exclusive_binder: flags.outer_exclusive_binder,
         .                           };
         .           
         .                           Interned(self.arena.alloc(ty_struct))
         .                       })
         .                       .0
75,471,138 ( 0.11%)      }
         .           
         .               #[inline(never)]
17,144,040 ( 0.03%)      fn intern_predicate(
         .                   &self,
         .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
         .               ) -> &'tcx PredicateInner<'tcx> {
         .                   self.predicate
15,001,035 ( 0.02%)              .intern(kind, |kind| {
 1,757,946 ( 0.00%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
         .           
         .                           let predicate_struct = PredicateInner {
         .                               kind,
         .                               flags: flags.flags,
         .                               outer_exclusive_binder: flags.outer_exclusive_binder,
         .                           };
         .           
         .                           Interned(self.arena.alloc(predicate_struct))
         .                       })
         .                       .0
19,287,045 ( 0.03%)      }
         .           }
         .           
         .           pub struct CommonTypes<'tcx> {
         .               pub unit: Ty<'tcx>,
         .               pub bool: Ty<'tcx>,
         .               pub char: Ty<'tcx>,
         .               pub isize: Ty<'tcx>,
         .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
         .           /// safely used as a key in the maps of a TypeckResults. For that to be
         .           /// the case, the HirId must have the same `owner` as all the other IDs in
         .           /// this table (signified by `hir_owner`). Otherwise the HirId
         .           /// would be in a different frame of reference and using its `local_id`
         .           /// would result in lookup errors, or worse, in silently wrong data being
         .           /// stored/returned.
         .           #[inline]
         .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
 5,048,746 ( 0.01%)      if hir_id.owner != hir_owner {
         .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
         .               }
         .           }
         .           
         .           #[cold]
         .           #[inline(never)]
         .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
         .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
         .           }
         .           
         .           impl<'a, V> LocalTableInContext<'a, V> {
         .               pub fn contains_key(&self, id: hir::HirId) -> bool {
         .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.data.contains_key(&id.local_id)
         .               }
         .           
 4,255,542 ( 0.01%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
   885,636 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
   885,636 ( 0.00%)          self.data.get(&id.local_id)
 3,405,798 ( 0.00%)      }
         .           
         .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
         .                   self.data.iter()
         .               }
         .           }
         .           
         .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
         .               type Output = V;
         .           
   215,352 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
         .                   self.get(key).expect("LocalTableInContext: key not found")
   143,568 ( 0.00%)      }
         .           }
         .           
         .           pub struct LocalTableInContextMut<'a, V> {
         .               hir_owner: LocalDefId,
         .               data: &'a mut ItemLocalMap<V>,
         .           }
         .           
         .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
         .               pub treat_byte_string_as_slice: ItemLocalSet,
         .           
         .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
         .               /// on closure size.
         .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
         .           }
         .           
         .           impl<'tcx> TypeckResults<'tcx> {
   658,344 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
 7,790,404 ( 0.01%)          TypeckResults {
         .                       hir_owner,
         .                       type_dependent_defs: Default::default(),
         .                       field_indices: Default::default(),
         .                       user_provided_types: Default::default(),
         .                       user_provided_sigs: Default::default(),
         .                       node_types: Default::default(),
         .                       node_substs: Default::default(),
         .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
         .                       tainted_by_errors: None,
         .                       concrete_opaque_types: Default::default(),
         .                       closure_min_captures: Default::default(),
         .                       closure_fake_reads: Default::default(),
         .                       generator_interior_types: ty::Binder::dummy(Default::default()),
         .                       treat_byte_string_as_slice: Default::default(),
         .                       closure_size_eval: Default::default(),
         .                   }
   658,344 ( 0.00%)      }
         .           
         .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
   365,595 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
   243,730 ( 0.00%)          match *qpath {
   661,170 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
         .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
         .                           .type_dependent_def(id)
    70,020 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
         .                   }
   609,325 ( 0.00%)      }
         .           
     1,966 ( 0.00%)      pub fn type_dependent_defs(
         .                   &self,
         .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
    32,237 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
     1,966 ( 0.00%)      }
         .           
    17,499 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
    35,832 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
    34,998 ( 0.00%)      }
         .           
    26,652 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
         .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
    26,652 ( 0.00%)      }
         .           
   365,553 ( 0.00%)      pub fn type_dependent_defs_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
   365,553 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
   365,553 ( 0.00%)      }
         .           
         .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
     6,766 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
     1,373 ( 0.00%)      }
         .           
         .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
     9,834 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
     4,917 ( 0.00%)      }
         .           
         .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
   140,322 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    70,161 ( 0.00%)      }
         .           
         .               pub fn user_provided_types_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
     8,724 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
     4,362 ( 0.00%)      }
         .           
         .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
   900,168 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
   450,084 ( 0.00%)      }
         .           
         .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
 1,449,214 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
   724,607 ( 0.00%)      }
         .           
 4,854,996 ( 0.01%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
   809,166 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
         .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
         .                   })
 4,045,830 ( 0.01%)      }
         .           
   970,973 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
   970,973 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.node_types.get(&id.local_id).cloned()
 1,941,946 ( 0.00%)      }
         .           
         .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
   126,624 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
    63,312 ( 0.00%)      }
         .           
   308,035 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
   308,035 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
   616,070 ( 0.00%)      }
         .           
   355,373 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
   355,373 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.node_substs.get(&id.local_id).cloned()
   710,746 ( 0.00%)      }
         .           
         .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
         .               // doesn't provide type parameter substitutions.
         .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
   175,972 ( 0.00%)          self.node_type(pat.hir_id)
         .               }
         .           
         .               // Returns the type of an expression as a monotype.
         .               //
         .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
         .               // some cases, we insert `Adjustment` annotations such as auto-deref or
         .               // auto-ref.  The type returned by this function does not consider such
         .               // adjustments.  See `expr_ty_adjusted()` instead.
         .               //
         .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
         .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
         .               // instead of "fn(ty) -> T with T = isize".
         .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
   728,985 ( 0.00%)          self.node_type(expr.hir_id)
         .               }
         .           
         .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
   637,715 ( 0.00%)          self.node_type_opt(expr.hir_id)
         .               }
         .           
         .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   474,322 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
   237,161 ( 0.00%)      }
         .           
         .               pub fn adjustments_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   743,494 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
   371,747 ( 0.00%)      }
         .           
   284,246 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
   568,492 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
         .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
   568,492 ( 0.00%)      }
         .           
         .               /// Returns the type of `expr`, considering any `Adjustment`
         .               /// entry recorded for that expression.
     7,430 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
     1,486 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
     2,988 ( 0.00%)      }
         .           
     1,555 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
       311 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
       904 ( 0.00%)      }
         .           
    30,271 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
         .                   // Only paths and method calls/overloaded operators have
         .                   // entries in type_dependent_defs, ignore the former here.
    60,542 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
         .                       return false;
         .                   }
         .           
    62,450 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
    60,542 ( 0.00%)      }
         .           
   395,877 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
         .                   self.pat_binding_modes().get(id).copied().or_else(|| {
         .                       s.delay_span_bug(sp, "missing binding mode");
         .                       None
         .                   })
   527,836 ( 0.00%)      }
         .           
         .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
   310,409 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
    89,225 ( 0.00%)      }
         .           
         .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
   175,560 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
    87,780 ( 0.00%)      }
         .           
         .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
   522,606 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
   261,303 ( 0.00%)      }
         .           
         .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
   173,066 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
    86,533 ( 0.00%)      }
         .           
         .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
         .               /// by the closure.
   147,876 ( 0.00%)      pub fn closure_min_captures_flattened(
         .                   &self,
         .                   closure_def_id: DefId,
         .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
         .                   self.closure_min_captures
         .                       .get(&closure_def_id)
         .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
         .                       .into_iter()
         .                       .flatten()
   184,845 ( 0.00%)      }
         .           
         .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
    71,582 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
    35,791 ( 0.00%)      }
         .           
         .               pub fn closure_kind_origins_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
         .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
         .               }
         .           
         .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
   215,150 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
   107,575 ( 0.00%)      }
         .           
         .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
   143,568 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
    71,784 ( 0.00%)      }
         .           
         .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    71,582 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
    35,791 ( 0.00%)      }
         .           
         .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
         .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
         .               }
         .           
       321 ( 0.00%)      pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
       107 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
         .                   self.coercion_casts.contains(&hir_id.local_id)
       214 ( 0.00%)      }
         .           
         .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
         .                   self.coercion_casts.insert(id);
         .               }
         .           
         .               pub fn coercion_casts(&self) -> &ItemLocalSet {
    35,791 ( 0.00%)          &self.coercion_casts
    35,791 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
         .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
         .                   let ty::TypeckResults {
         .                       hir_owner,
         .                       ref type_dependent_defs,
         .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
         .                   const START_INDEX = 0,
         .               }
         .           }
         .           
         .           /// Mapping of type annotation indices to canonical user type annotations.
         .           pub type CanonicalUserTypeAnnotations<'tcx> =
         .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
         .           
     2,074 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
         .           pub struct CanonicalUserTypeAnnotation<'tcx> {
         .               pub user_ty: CanonicalUserType<'tcx>,
         .               pub span: Span,
     2,282 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
         .           }
         .           
         .           /// Canonicalized user type annotation.
         .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
         .           
         .           impl<'tcx> CanonicalUserType<'tcx> {
         .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
         .               /// i.e., each thing is mapped to a canonical variable with the same index.
    29,871 ( 0.00%)      pub fn is_identity(&self) -> bool {
    59,742 ( 0.00%)          match self.value {
         .                       UserType::Ty(_) => false,
         .                       UserType::TypeOf(_, user_substs) => {
    29,871 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
         .                               return false;
         .                           }
         .           
         .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
         .                               match kind.unpack() {
   109,164 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
         .                                       ty::Bound(debruijn, b) => {
         .                                           // We only allow a `ty::INNERMOST` index in substitutions.
    54,388 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
         .                                           cvar == b.var
         .                                       }
         .                                       _ => false,
         .                                   },
         .           
       742 ( 0.00%)                          GenericArgKind::Lifetime(r) => match r {
         .                                       ty::ReLateBound(debruijn, br) => {
         .                                           // We only allow a `ty::INNERMOST` index in substitutions.
         .                                           assert_eq!(*debruijn, ty::INNERMOST);
         .                                           cvar == br.var
         .                                       }
         .                                       _ => false,
         .                                   },
         .           
-- line 867 ----------------------------------------
-- line 872 ----------------------------------------
         .                                           cvar == b
         .                                       }
         .                                       _ => false,
         .                                   },
         .                               }
         .                           })
         .                       }
         .                   }
    59,742 ( 0.00%)      }
         .           }
         .           
         .           /// A user-given type annotation attached to a constant. These arise
         .           /// from constants that are named via paths, like `Foo::<A>::new` and
         .           /// so forth.
    13,692 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
   292,001 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
         .           pub enum UserType<'tcx> {
         .               Ty(Ty<'tcx>),
         .           
         .               /// The canonical type is the result of `type_of(def_id)` with the
         .               /// given substitutions applied.
         .               TypeOf(DefId, UserSubsts<'tcx>),
         .           }
         .           
         .           impl<'tcx> CommonTypes<'tcx> {
         .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
       111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
         .           
         .                   CommonTypes {
         .                       unit: mk(Tuple(List::empty())),
         .                       bool: mk(Bool),
         .                       char: mk(Char),
         .                       never: mk(Never),
         .                       isize: mk(Int(ty::IntTy::Isize)),
         .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
         .           
         .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> CommonLifetimes<'tcx> {
         .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
        67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
         .           
         .                   CommonLifetimes {
         5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
         5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
         5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> CommonConsts<'tcx> {
         .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
         6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
         .           
         .                   CommonConsts {
         .                       unit: mk_const(ty::Const {
         .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
         .                           ty: types.unit,
         .                       }),
         .                   }
         .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
         .           
         .               /// Stores memory for globals (statics/consts).
         .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
         .           
         .               output_filenames: Arc<OutputFilenames>,
         .           }
         .           
         .           impl<'tcx> TyCtxt<'tcx> {
 1,452,100 ( 0.00%)      pub fn typeck_opt_const_arg(
         .                   self,
         .                   def: ty::WithOptConstParam<LocalDefId>,
         .               ) -> &'tcx TypeckResults<'tcx> {
   580,840 ( 0.00%)          if let Some(param_did) = def.const_param_did {
         .                       self.typeck_const_arg((def.did, param_did))
         .                   } else {
         .                       self.typeck(def.did)
         .                   }
 1,161,680 ( 0.00%)      }
         .           
   108,015 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
    36,005 ( 0.00%)          self.arena.alloc(Steal::new(thir))
   144,020 ( 0.00%)      }
         .           
   720,100 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
   144,020 ( 0.00%)          self.arena.alloc(Steal::new(mir))
 1,008,140 ( 0.00%)      }
         .           
   144,020 ( 0.00%)      pub fn alloc_steal_promoted(
         .                   self,
         .                   promoted: IndexVec<Promoted, Body<'tcx>>,
         .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
    36,005 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
   180,025 ( 0.00%)      }
         .           
     4,203 ( 0.00%)      pub fn alloc_adt_def(
         .                   self,
         .                   did: DefId,
         .                   kind: AdtKind,
         .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
         .                   repr: ReprOptions,
         .               ) -> &'tcx ty::AdtDef {
     7,472 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
     1,868 ( 0.00%)      }
         .           
         .               /// Allocates a read-only byte or string literal for `mir::interpret`.
        90 ( 0.00%)      pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
         .                   // Create an allocation that just contains these bytes.
        18 ( 0.00%)          let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
       234 ( 0.00%)          let alloc = self.intern_const_alloc(alloc);
         .                   self.create_memory_alloc(alloc)
        90 ( 0.00%)      }
         .           
         .               /// Returns a range of the start/end indices specified with the
         .               /// `rustc_layout_scalar_valid_range` attribute.
         .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
   231,552 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
   115,776 ( 0.00%)          let attrs = self.get_attrs(def_id);
   492,048 ( 0.00%)          let get = |name| {
   115,776 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
         .                           Some(attr) => attr,
         .                           None => return Bound::Unbounded,
         .                       };
         .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
       936 ( 0.00%)              if let Some(
         .                           &[
         .                               ast::NestedMetaItem::Literal(ast::Lit {
       468 ( 0.00%)                          kind: ast::LitKind::Int(a, _), ..
         .                               }),
         .                           ],
       234 ( 0.00%)              ) = attr.meta_item_list().as_deref()
         .                       {
         .                           Bound::Included(a)
         .                       } else {
         .                           self.sess
         .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
         .                           Bound::Unbounded
         .                       }
   578,880 ( 0.00%)          };
   173,664 ( 0.00%)          (
   173,664 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
    86,832 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
         .                   )
   231,552 ( 0.00%)      }
         .           
         .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
         .                   value.lift_to_tcx(self)
         .               }
         .           
         .               /// Creates a type context and call the closure with a `TyCtxt` reference
         .               /// to the context. The closure enforces that the type context and any interned
         .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
         .               /// reference to the context, to allow formatting values that need it.
        23 ( 0.00%)      pub fn create_global_ctxt(
         .                   s: &'tcx Session,
         .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
         .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
         .                   resolutions: ty::ResolverOutputs,
         .                   krate: &'tcx hir::Crate<'tcx>,
         .                   dep_graph: DepGraph,
         .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
         .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
         .                   query_kinds: &'tcx [DepKindStruct],
         .                   crate_name: &str,
         .                   output_filenames: OutputFilenames,
         .               ) -> GlobalCtxt<'tcx> {
         1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
         .                       s.fatal(&err);
         .                   });
         .                   let interners = CtxtInterners::new(arena);
         .                   let common_types = CommonTypes::new(&interners);
         .                   let common_lifetimes = CommonLifetimes::new(&interners);
         .                   let common_consts = CommonConsts::new(&interners, &common_types);
         .           
       127 ( 0.00%)          GlobalCtxt {
         .                       sess: s,
         6 ( 0.00%)              lint_store,
         .                       arena,
         2 ( 0.00%)              interners,
         5 ( 0.00%)              dep_graph,
         4 ( 0.00%)              untracked_resolutions: resolutions,
         2 ( 0.00%)              prof: s.prof.clone(),
         .                       types: common_types,
         .                       lifetimes: common_lifetimes,
         .                       consts: common_consts,
         .                       untracked_crate: krate,
         .                       on_disk_cache,
         .                       queries,
         .                       query_caches: query::QueryCaches::default(),
         .                       query_kinds,
         .                       ty_rcache: Default::default(),
         .                       pred_rcache: Default::default(),
         .                       selection_cache: Default::default(),
         .                       evaluation_cache: Default::default(),
         1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
         .                       data_layout,
         .                       alloc_map: Lock::new(interpret::AllocMap::new()),
         .                       output_filenames: Arc::new(output_filenames),
         .                   }
         9 ( 0.00%)      }
         .           
         .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
         .                   &self.query_kinds[k as usize]
         .               }
         .           
         .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
         .               #[track_caller]
         .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
         .                   ty: Ty<'tcx>,
         .                   span: S,
         .                   msg: &str,
         .               ) -> &'tcx Const<'tcx> {
         .                   self.sess.delay_span_bug(span, msg);
         .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
         .               }
         .           
   317,212 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
    45,316 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
   347,611 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
   362,528 ( 0.00%)      }
         .           
         .               /// Obtain all lang items of this crate and all dependencies (recursively)
12,670,826 ( 0.02%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
         .                   self.get_lang_items(())
16,291,062 ( 0.02%)      }
         .           
         .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
         .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
       385 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
         .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
       440 ( 0.00%)      }
         .           
         .               /// Obtain the diagnostic item's name
   600,404 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
         .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
   686,176 ( 0.00%)      }
         .           
         .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
   112,154 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
         .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
   128,176 ( 0.00%)      }
         .           
   277,319 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
         .                   self.stability_index(())
   356,553 ( 0.00%)      }
         .           
 7,527,184 ( 0.01%)      pub fn features(self) -> &'tcx rustc_feature::Features {
         .                   self.features_query(())
 8,602,496 ( 0.01%)      }
         .           
   200,093 ( 0.00%)      pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
         .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
 1,901,393 ( 0.00%)          if let Some(id) = id.as_local() {
         .                       self.untracked_resolutions.definitions.def_key(id)
         .                   } else {
 1,941,152 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
         .                   }
    50,632 ( 0.00%)      }
         .           
         .               /// Converts a `DefId` into its fully expanded `DefPath` (every
         .               /// `DefId` is really just an interned `DefPath`).
         .               ///
         .               /// Note that if `id` is not local to this crate, the result will
         .               ///  be a non-local `DefPath`.
       286 ( 0.00%)      pub fn def_path(self, id: DefId) -> rustc_hir::definitions::DefPath {
         .                   // Accessing the DefPath is ok, since it is part of DefPathHash.
       429 ( 0.00%)          if let Some(id) = id.as_local() {
        60 ( 0.00%)              self.untracked_resolutions.definitions.def_path(id)
         .                   } else {
       615 ( 0.00%)              self.untracked_resolutions.cstore.def_path(id)
         .                   }
       429 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
         .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
   234,258 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
         .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
         .                   } else {
    18,489 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
         .                   if crate_num == LOCAL_CRATE {
         .                       self.sess.local_stable_crate_id()
         .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
         .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
         .                       self.def_path(def_id).to_string_no_crate_verbose()
         .                   )
         .               }
         .           
         .               /// Note that this is *untracked* and should only be used within the query
         .               /// system if the result is otherwise tracked through queries
         .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
   158,162 ( 0.00%)          &*self.untracked_resolutions.cstore
    79,081 ( 0.00%)      }
         .           
         .               /// Note that this is *untracked* and should only be used within the query
         .               /// system if the result is otherwise tracked through queries
         .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
         .                   &self.untracked_resolutions.definitions
         .               }
         .           
         .               #[inline(always)]
         .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
    18,757 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
    75,111 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
         .               }
         .           
         .               #[inline(always)]
         .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
         .                   let resolutions = &self.gcx.untracked_resolutions;
         .                   StableHashingContext::ignore_spans(
         .                       self.sess,
         .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
         .               /// If `true`, we should use the MIR-based borrowck, but also
         .               /// fall back on the AST borrowck if the MIR-based one errors.
         .               pub fn migrate_borrowck(self) -> bool {
         .                   self.borrowck_mode().migrate()
         .               }
         .           
         .               /// What mode(s) of borrowck should we run? AST? MIR? both?
         .               /// (Also considers the `#![feature(nll)]` setting.)
    71,582 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
         .                   // Here are the main constraints we need to deal with:
         .                   //
         .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
         .                   //    synonymous with no `-Z borrowck=...` flag at all.
         .                   //
         .                   // 2. We want to allow developers on the Nightly channel
         .                   //    to opt back into the "hard error" mode for NLL,
         .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
         .                   //   errors. (To simplify the code here, it now even overrides
         .                   //   a user's attempt to specify `-Z borrowck=compare`, which
         .                   //   we arguably do not need anymore and should remove.)
         .                   //
         .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
         .                   //
         .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
         .           
   107,373 ( 0.00%)          if self.features().nll {
         .                       return BorrowckMode::Mir;
         .                   }
         .           
    35,791 ( 0.00%)          self.sess.opts.borrowck_mode
   143,164 ( 0.00%)      }
         .           
         .               /// If `true`, we should use lazy normalization for constants, otherwise
         .               /// we still evaluate them eagerly.
         .               #[inline]
         .               pub fn lazy_normalization(self) -> bool {
       627 ( 0.00%)          let features = self.features();
         .                   // Note: We only use lazy normalization for generic const expressions.
       529 ( 0.00%)          features.generic_const_exprs
         .               }
         .           
         .               #[inline]
         .               pub fn local_crate_exports_generics(self) -> bool {
         .                   debug_assert!(self.sess.opts.share_generics());
         .           
     7,001 ( 0.00%)          self.sess.crate_types().iter().any(|crate_type| {
    11,673 ( 0.00%)              match crate_type {
         .                           CrateType::Executable
         .                           | CrateType::Staticlib
         .                           | CrateType::ProcMacro
         .                           | CrateType::Cdylib => false,
         .           
         .                           // FIXME rust-lang/rust#64319, rust-lang/rust#64872:
         .                           // We want to block export of generics from dylibs,
         .                           // but we must fix rust-lang/rust#65890 before we can
-- line 1450 ----------------------------------------
-- line 1540 ----------------------------------------
         .                       // FIXME(#42706) -- in some cases, we could do better here.
         .                       return true;
         .                   }
         .                   false
         .               }
         .           
         .               /// Determines whether identifiers in the assembly have strict naming rules.
         .               /// Currently, only NVPTX* targets need it.
    21,466 ( 0.00%)      pub fn has_strict_asm_symbol_naming(self) -> bool {
    21,466 ( 0.00%)          self.sess.target.arch.contains("nvptx")
    42,932 ( 0.00%)      }
         .           
         .               /// Returns `&'static core::panic::Location<'static>`.
    18,438 ( 0.00%)      pub fn caller_location_ty(self) -> Ty<'tcx> {
         .                   self.mk_imm_ref(
     3,073 ( 0.00%)              self.lifetimes.re_static,
         .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
     6,146 ( 0.00%)                  .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
         .                   )
    18,438 ( 0.00%)      }
         .           
         .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
     8,547 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
     6,216 ( 0.00%)          match self.def_kind(def_id) {
         .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
         .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
         .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
         .                       },
    13,986 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
         .                   }
     6,993 ( 0.00%)      }
         .           
   154,231 ( 0.00%)      pub fn type_length_limit(self) -> Limit {
         .                   self.limits(()).type_length_limit
   176,264 ( 0.00%)      }
         .           
 3,811,458 ( 0.01%)      pub fn recursion_limit(self) -> Limit {
         .                   self.limits(()).recursion_limit
 4,355,952 ( 0.01%)      }
         .           
   599,186 ( 0.00%)      pub fn move_size_limit(self) -> Limit {
         .                   self.limits(()).move_size_limit
   684,784 ( 0.00%)      }
         .           
    15,785 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
         .                   self.limits(()).const_eval_limit
    18,040 ( 0.00%)      }
         .           
         .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
         .                   iter::once(LOCAL_CRATE)
         .                       .chain(self.crates(()).iter().copied())
         .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
         .               }
         .           }
         .           
-- line 1594 ----------------------------------------
-- line 1614 ----------------------------------------
         .               fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted>;
         .           }
         .           
         .           macro_rules! nop_lift {
         .               ($set:ident; $ty:ty => $lifted:ty) => {
         .                   impl<'a, 'tcx> Lift<'tcx> for $ty {
         .                       type Lifted = $lifted;
         .                       fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {
    15,252 ( 0.00%)                  if tcx.interners.$set.contains_pointer_to(&Interned(self)) {
         .                               Some(unsafe { mem::transmute(self) })
         .                           } else {
         .                               None
         .                           }
         .                       }
         .                   }
         .               };
         .           }
-- line 1630 ----------------------------------------
-- line 1684 ----------------------------------------
         .               /// This is the implicit state of rustc. It contains the current
         .               /// `TyCtxt` and query. It is updated when creating a local interner or
         .               /// executing a new query. Whenever there's a `TyCtxt` value available
         .               /// you should also have access to an `ImplicitCtxt` through the functions
         .               /// in this module.
         .               #[derive(Clone)]
         .               pub struct ImplicitCtxt<'a, 'tcx> {
         .                   /// The current `TyCtxt`.
         2 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
         .           
         .                   /// The current query job, if any. This is updated by `JobOwner::start` in
         .                   /// `ty::query::plumbing` when executing a query.
         .                   pub query: Option<query::QueryJobId<DepKind>>,
         .           
         .                   /// Where to store diagnostics for the current query job, if any.
         .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
         .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
         .                   pub layout_depth: usize,
         .           
         .                   /// The current dep graph task. This is used to add dependencies to queries
         .                   /// when executing them.
         .                   pub task_deps: TaskDepsRef<'a>,
         .               }
         .           
         .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
         5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
         .                       let tcx = TyCtxt { gcx };
        25 ( 0.00%)              ImplicitCtxt {
         .                           tcx,
         .                           query: None,
         .                           diagnostics: None,
         .                           layout_depth: 0,
         .                           task_deps: TaskDepsRef::Ignore,
         .                       }
         5 ( 0.00%)          }
         .               }
         .           
         .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
         .               /// to `value` during the call to `f`. It is restored to its previous value after.
         .               /// This is used to set the pointer to the new `ImplicitCtxt`.
         .               #[cfg(parallel_compiler)]
         .               #[inline]
         .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
         .           
         .               /// Sets TLV to `value` during the call to `f`.
         .               /// It is restored to its previous value after.
         .               /// This is used to set the pointer to the new `ImplicitCtxt`.
         .               #[cfg(not(parallel_compiler))]
         .               #[inline]
         .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
         .                   let old = get_tlv();
 2,046,045 ( 0.00%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
         .                   TLV.with(|tlv| tlv.set(value));
         .                   f()
         .               }
         .           
         .               /// Gets the pointer to the current `ImplicitCtxt`.
         .               #[cfg(not(parallel_compiler))]
         .               #[inline]
         .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
         .               }
         .           
         .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
         .               #[inline]
         .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
         .               where
         .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
         .               {
         1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
         .               }
         .           
         .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
         .               #[inline]
         .               pub fn with_context_opt<F, R>(f: F) -> R
         .               where
         .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
         .               {
         .                   let context = get_tlv();
 8,482,341 ( 0.01%)          if context == 0 {
         .                       f(None)
         .                   } else {
         .                       // We could get an `ImplicitCtxt` pointer from another thread.
         .                       // Ensure that `ImplicitCtxt` is `Sync`.
         .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
         .           
         .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
         .                   }
-- line 1789 ----------------------------------------
-- line 1791 ----------------------------------------
         .           
         .               /// Allows access to the current `ImplicitCtxt`.
         .               /// Panics if there is no `ImplicitCtxt` available.
         .               #[inline]
         .               pub fn with_context<F, R>(f: F) -> R
         .               where
         .                   F: for<'a, 'tcx> FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
         .               {
     8,136 ( 0.00%)          with_context_opt(|opt_context| f(opt_context.expect("no ImplicitCtxt stored in tls")))
         .               }
         .           
         .               /// Allows access to the current `ImplicitCtxt` whose tcx field is the same as the tcx argument
         .               /// passed in. This means the closure is given an `ImplicitCtxt` with the same `'tcx` lifetime
         .               /// as the `TyCtxt` passed in.
         .               /// This will panic if you pass it a `TyCtxt` which is different from the current
         .               /// `ImplicitCtxt`'s `tcx` field.
         .               #[inline]
         .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
         .               where
         .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
         .               {
         .                   with_context(|context| unsafe {
 4,159,334 ( 0.01%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
         .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
 4,144,720 ( 0.01%)              f(context)
         .                   })
         .               }
         .           
         .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
         .               /// Panics if there is no `ImplicitCtxt` available.
         .               #[inline]
         .               pub fn with<F, R>(f: F) -> R
         .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
         .               fn into_pointer(&self) -> *const () {
         .                   self.0 as *const _ as *const ()
         .               }
         .           }
         .           
         .           #[allow(rustc::usage_of_ty_tykind)]
         .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
         .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
 8,123,364 ( 0.01%)          &self.0.kind()
         .               }
         .           }
         .           
         .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
         .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
         .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
         .                   // `x == y`.
         .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
         .           
         .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
 1,391,496 ( 0.00%)          self.0.kind().hash(s)
         .               }
         .           }
         .           
         .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
         .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
 1,888,487 ( 0.00%)          &self.0.kind
         .               }
         .           }
         .           
         .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
         .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
         .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
         .                   // `x == y`.
         .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
         .           
         .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   458,748 ( 0.00%)          self.0.kind.hash(s)
         .               }
         .           }
         .           
         .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
         .               fn borrow<'a>(&'a self) -> &'a [T] {
 8,924,140 ( 0.01%)          &self.0[..]
         .               }
         .           }
         .           
         .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
         .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
         .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
         .                   // `x == y`.
         .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
         .           
         .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   465,108 ( 0.00%)          self.0[..].hash(s)
         .               }
         .           }
         .           
         .           macro_rules! direct_interners {
         .               ($($name:ident: $method:ident($ty:ty),)+) => {
         .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
         .                       fn borrow<'a>(&'a self) -> &'a $ty {
 2,571,406 ( 0.00%)                  &self.0
         .                       }
         .                   }
         .           
         .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
         .                       fn eq(&self, other: &Self) -> bool {
         .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
         .                           // equals `x == y`.
         .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
         .                   }
         .           
         .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
         .           
         .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
         .                       fn hash<H: Hasher>(&self, s: &mut H) {
         .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
         .                           // x.hash(s)`.
   402,303 ( 0.00%)                  self.0.hash(s)
         .                       }
         .                   }
         .           
         .                   impl<'tcx> TyCtxt<'tcx> {
20,282,497 ( 0.03%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
10,265,928 ( 0.02%)                  self.interners.$name.intern(v, |v| {
   103,212 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
         .                           }).0
22,764,690 ( 0.03%)              }
         .                   })+
         .               }
         .           }
         .           
         .           direct_interners! {
         .               region: mk_region(RegionKind),
         .               const_: mk_const(Const<'tcx>),
         .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
         .               adt_def: intern_adt_def(AdtDef),
         .               stability: intern_stability(attr::Stability),
         .               const_stability: intern_const_stability(attr::ConstStability),
         .           }
         .           
         .           macro_rules! slice_interners {
         .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
         .                   impl<'tcx> TyCtxt<'tcx> {
93,353,020 ( 0.14%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
         .                           self.interners.$field.intern_ref(v, || {
         .                               Interned(List::from_arena(&*self.arena, v))
         .                           }).0
83,043,324 ( 0.12%)              })+
         .                   }
         .               );
         .           }
         .           
         .           slice_interners!(
         .               type_list: _intern_type_list(Ty<'tcx>),
         .               substs: _intern_substs(GenericArg<'tcx>),
         .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2129 ----------------------------------------
         .               /// unsafe.
         .               pub fn safe_to_unsafe_fn_ty(self, sig: PolyFnSig<'tcx>) -> Ty<'tcx> {
         .                   assert_eq!(sig.unsafety(), hir::Unsafety::Normal);
         .                   self.mk_fn_ptr(sig.map_bound(|sig| ty::FnSig { unsafety: hir::Unsafety::Unsafe, ..sig }))
         .               }
         .           
         .               /// Given the def_id of a Trait `trait_def_id` and the name of an associated item `assoc_name`
         .               /// returns true if the `trait_def_id` defines an associated item of name `assoc_name`.
     1,404 ( 0.00%)      pub fn trait_may_define_assoc_type(self, trait_def_id: DefId, assoc_name: Ident) -> bool {
         .                   self.super_traits_of(trait_def_id).any(|trait_did| {
         .                       self.associated_items(trait_did)
         .                           .find_by_name_and_kind(self, assoc_name, ty::AssocKind::Type, trait_did)
         .                           .is_some()
         .                   })
     1,053 ( 0.00%)      }
         .           
         .               /// Computes the def-ids of the transitive supertraits of `trait_def_id`. This (intentionally)
         .               /// does not compute the full elaborated super-predicates but just the set of def-ids. It is used
         .               /// to identify which traits may define a given associated type to help avoid cycle errors.
         .               /// Returns a `DefId` iterator.
         .               fn super_traits_of(self, trait_def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {
         .                   let mut set = FxHashSet::default();
       234 ( 0.00%)          let mut stack = vec![trait_def_id];
         .           
         .                   set.insert(trait_def_id);
         .           
     1,053 ( 0.00%)          iter::from_fn(move || -> Option<DefId> {
       234 ( 0.00%)              let trait_did = stack.pop()?;
       117 ( 0.00%)              let generic_predicates = self.super_predicates_of(trait_did);
         .           
         .                       for (predicate, _) in generic_predicates.predicates {
       237 ( 0.00%)                  if let ty::PredicateKind::Trait(data) = predicate.kind().skip_binder() {
       158 ( 0.00%)                      if set.insert(data.def_id()) {
         .                                   stack.push(data.def_id());
         .                               }
         .                           }
         .                       }
         .           
         .                       Some(trait_did)
         .                   })
         .               }
-- line 2169 ----------------------------------------
-- line 2170 ----------------------------------------
         .           
         .               /// Given a closure signature, returns an equivalent fn signature. Detuples
         .               /// and so forth -- so e.g., if we have a sig with `Fn<(u32, i32)>` then
         .               /// you would get a `fn(u32, i32)`.
         .               /// `unsafety` determines the unsafety of the fn signature. If you pass
         .               /// `hir::Unsafety::Unsafe` in the previous example, then you would get
         .               /// an `unsafe fn (u32, i32)`.
         .               /// It cannot convert a closure that requires unsafe.
        50 ( 0.00%)      pub fn signature_unclosure(
         .                   self,
         .                   sig: PolyFnSig<'tcx>,
         .                   unsafety: hir::Unsafety,
         .               ) -> PolyFnSig<'tcx> {
        80 ( 0.00%)          sig.map_bound(|s| {
        50 ( 0.00%)              let params_iter = match s.inputs()[0].kind() {
         .                           ty::Tuple(params) => params.into_iter().map(|k| k.expect_ty()),
         .                           _ => bug!(),
         .                       };
        70 ( 0.00%)              self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
         .                   })
        40 ( 0.00%)      }
         .           
         .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
         .               /// `*r == kind`.
         .               #[inline]
         .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
 1,015,512 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
         .               }
         .           
         .               #[allow(rustc::usage_of_ty_tykind)]
         .               #[inline]
         .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
59,379,700 ( 0.09%)          self.interners.intern_ty(st)
         .               }
         .           
         .               #[inline]
         .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
22,357,274 ( 0.03%)          let inner = self.interners.intern_predicate(binder);
         .                   Predicate { inner }
         .               }
         .           
         .               #[inline]
21,631,544 ( 0.03%)      pub fn reuse_or_mk_predicate(
         .                   self,
         .                   pred: Predicate<'tcx>,
         .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
         .               ) -> Predicate<'tcx> {
 1,564,138 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
21,631,544 ( 0.03%)      }
         .           
         .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
     1,866 ( 0.00%)          match tm {
         .                       IntTy::Isize => self.types.isize,
         .                       IntTy::I8 => self.types.i8,
         .                       IntTy::I16 => self.types.i16,
         .                       IntTy::I32 => self.types.i32,
         .                       IntTy::I64 => self.types.i64,
         .                       IntTy::I128 => self.types.i128,
         .                   }
     1,866 ( 0.00%)      }
         .           
         .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
    13,880 ( 0.00%)          match tm {
         .                       UintTy::Usize => self.types.usize,
         .                       UintTy::U8 => self.types.u8,
         .                       UintTy::U16 => self.types.u16,
         .                       UintTy::U32 => self.types.u32,
         .                       UintTy::U64 => self.types.u64,
         .                       UintTy::U128 => self.types.u128,
         .                   }
    13,880 ( 0.00%)      }
         .           
         .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
         1 ( 0.00%)          match tm {
         .                       FloatTy::F32 => self.types.f32,
         .                       FloatTy::F64 => self.types.f64,
         .                   }
         1 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn mk_static_str(self) -> Ty<'tcx> {
     3,214 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
         .               }
         .           
         .               #[inline]
         .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
         .                   // Take a copy of substs so that we own the vectors inside.
         .                   self.mk_ty(Adt(def, substs))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_foreign(self, def_id: DefId) -> Ty<'tcx> {
         .                   self.mk_ty(Foreign(def_id))
         .               }
         .           
        56 ( 0.00%)      fn mk_generic_adt(self, wrapper_def_id: DefId, ty_param: Ty<'tcx>) -> Ty<'tcx> {
         .                   let adt_def = self.adt_def(wrapper_def_id);
         .                   let substs =
       105 ( 0.00%)              InternalSubsts::for_item(self, wrapper_def_id, |param, substs| match param.kind {
         .                           GenericParamDefKind::Lifetime | GenericParamDefKind::Const { .. } => bug!(),
         7 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
        28 ( 0.00%)                      if param.index == 0 {
         .                                   ty_param.into()
         .                               } else {
         7 ( 0.00%)                          assert!(has_default);
        21 ( 0.00%)                          self.type_of(param.def_id).subst(self, substs).into()
         .                               }
         .                           }
         .                       });
         7 ( 0.00%)          self.mk_ty(Adt(adt_def, substs))
        56 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn mk_box(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        35 ( 0.00%)          let def_id = self.require_lang_item(LangItem::OwnedBox, None);
        28 ( 0.00%)          self.mk_generic_adt(def_id, ty)
         .               }
         .           
         .               #[inline]
         .               pub fn mk_lang_item(self, ty: Ty<'tcx>, item: LangItem) -> Option<Ty<'tcx>> {
         .                   let def_id = self.lang_items().require(item).ok()?;
         .                   Some(self.mk_generic_adt(def_id, ty))
         .               }
         .           
-- line 2293 ----------------------------------------
-- line 2329 ----------------------------------------
         .               }
         .           
         .               #[inline]
         .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
         .               }
         .           
         .               #[inline]
    43,890 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
         .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
    45,872 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ty(Slice(ty))
         .               }
         .           
         .               #[inline]
         .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
     9,332 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
    10,918 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
         .               }
         .           
         .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
    33,080 ( 0.00%)          iter.intern_with(|ts| {
     8,534 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
 1,417,880 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
    29,772 ( 0.00%)          })
         .               }
         .           
         .               #[inline]
         .               pub fn mk_unit(self) -> Ty<'tcx> {
     7,716 ( 0.00%)          self.types.unit
         .               }
         .           
         .               #[inline]
         .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
         .                   if self.features().never_type_fallback { self.types.never } else { self.types.unit }
         .               }
         .           
         .               #[inline]
         .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ty(FnDef(def_id, substs))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
    87,616 ( 0.00%)          self.mk_ty(FnPtr(fty))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_dynamic(
         .                   self,
         .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
         .                   reg: ty::Region<'tcx>,
         .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
         .                   self.mk_ty_infer(TyVar(v))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
     2,904 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
         .               }
         .           
         .               #[inline]
         .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
         .                   self.mk_ty_infer(IntVar(v))
         .               }
         .           
         .               #[inline]
-- line 2428 ----------------------------------------
-- line 2432 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn mk_ty_infer(self, it: InferTy) -> Ty<'tcx> {
         .                   self.mk_ty(Infer(it))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_const_infer(self, ic: InferConst<'tcx>, ty: Ty<'tcx>) -> &'tcx ty::Const<'tcx> {
        14 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(ic), ty })
         .               }
         .           
         .               #[inline]
         .               pub fn mk_ty_param(self, index: u32, name: Symbol) -> Ty<'tcx> {
         .                   self.mk_ty(Param(ParamTy { index, name }))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
         .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
         .               }
         .           
   460,950 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
   324,562 ( 0.00%)          match param.kind {
         .                       GenericParamDefKind::Lifetime => {
    14,064 ( 0.00%)                  self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
         .                       }
   127,012 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
         .                       GenericParamDefKind::Const { .. } => {
         .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
         .                       }
         .                   }
   460,950 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ty(Opaque(def_id, substs))
         .               }
         .           
    27,711 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
    27,711 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
    55,422 ( 0.00%)      }
         .           
       199 ( 0.00%)      pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
       597 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Deref)
       398 ( 0.00%)      }
         .           
    25,639 ( 0.00%)      pub fn mk_place_downcast(
         .                   self,
         .                   place: Place<'tcx>,
         .                   adt_def: &'tcx AdtDef,
         .                   variant_index: VariantIdx,
         .               ) -> Place<'tcx> {
    25,639 ( 0.00%)          self.mk_place_elem(
         .                       place,
    51,278 ( 0.00%)              PlaceElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index),
         .                   )
    51,278 ( 0.00%)      }
         .           
         .               pub fn mk_place_downcast_unnamed(
         .                   self,
         .                   place: Place<'tcx>,
         .                   variant_index: VariantIdx,
         .               ) -> Place<'tcx> {
         .                   self.mk_place_elem(place, PlaceElem::Downcast(None, variant_index))
         .               }
         .           
         4 ( 0.00%)      pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
         4 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Index(index))
         8 ( 0.00%)      }
         .           
         .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
         .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
         .               /// flight.
   491,130 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
         .                   let mut projection = place.projection.to_vec();
         .                   projection.push(elem);
         .           
         .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
   545,700 ( 0.00%)      }
         .           
 2,112,621 ( 0.00%)      pub fn intern_poly_existential_predicates(
         .                   self,
         .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
         .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
   301,849 ( 0.00%)          assert!(!eps.is_empty());
         .                   assert!(
         .                       eps.array_windows()
       564 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
         .                               != Ordering::Greater)
         .                   );
 1,207,396 ( 0.00%)          self._intern_poly_existential_predicates(eps)
 2,414,424 ( 0.00%)      }
         .           
         .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
         .                   // FIXME consider asking the input slice to be sorted to avoid
         .                   // re-interning permutations, in which case that would be asserted
         .                   // here.
   325,704 ( 0.00%)          if preds.is_empty() {
         .                       // The macro-generated method below asserts we don't intern an empty slice.
         .                       List::empty()
         .                   } else {
   115,743 ( 0.00%)              self._intern_predicates(preds)
         .                   }
   423,472 ( 0.00%)      }
         .           
         .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
 1,248,515 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
    31,466 ( 0.00%)      }
         .           
         .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
15,861,949 ( 0.02%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
 3,386,206 ( 0.00%)      }
         .           
         .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
         .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
         .               }
         .           
         .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
   179,110 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
    76,160 ( 0.00%)      }
         .           
         .               pub fn intern_canonical_var_infos(
         .                   self,
         .                   ts: &[CanonicalVarInfo<'tcx>],
         .               ) -> CanonicalVarInfos<'tcx> {
 1,472,883 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
   104,582 ( 0.00%)      }
         .           
         .               pub fn intern_bound_variable_kinds(
         .                   self,
         .                   ts: &[ty::BoundVariableKind],
         .               ) -> &'tcx List<ty::BoundVariableKind> {
   409,227 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
   618,246 ( 0.00%)      }
         .           
         .               pub fn mk_fn_sig<I>(
         .                   self,
         .                   inputs: I,
         .                   output: I::Item,
         .                   c_variadic: bool,
         .                   unsafety: hir::Unsafety,
         .                   abi: abi::Abi,
         .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
         .               where
         .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
         .               {
         .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
   157,320 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
    70,075 ( 0.00%)              c_variadic,
    72,299 ( 0.00%)              unsafety,
   135,702 ( 0.00%)              abi,
     2,090 ( 0.00%)          })
         .               }
         .           
         .               pub fn mk_poly_existential_predicates<
         .                   I: InternAs<
         .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
         .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
         .                   >,
         .               >(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
 1,206,908 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
         .               }
         .           
         .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
        26 ( 0.00%)          iter.intern_with(|xs| self.intern_predicates(xs))
         .               }
         .           
         .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
   341,117 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
         .               }
         .           
     1,275 ( 0.00%)      pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
 6,220,074 ( 0.01%)          iter.intern_with(|xs| self.intern_substs(xs))
     1,700 ( 0.00%)      }
         .           
         .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
   502,137 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
         .               }
         .           
   470,405 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
         .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
   940,810 ( 0.00%)      }
         .           
         .               pub fn mk_bound_variable_kinds<
         .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
         .               >(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
 1,933,694 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
         .               }
         .           
         .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
         .               /// It stops at `bound` and just returns it if reached.
 2,909,326 ( 0.00%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
 2,909,326 ( 0.00%)          let hir = self.hir();
         .                   loop {
 3,328,281 ( 0.00%)              if id == bound {
         .                           return bound;
         .                       }
         .           
 3,472,501 ( 0.01%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
         .                           return id;
         .                       }
         .                       let next = hir.get_parent_node(id);
 2,081,427 ( 0.00%)              if next == id {
         .                           bug!("lint traversal reached the root of the crate");
         .                       }
         .                       id = next;
         .                   }
 4,156,180 ( 0.01%)      }
         .           
   994,872 ( 0.00%)      pub fn lint_level_at_node(
         .                   self,
         .                   lint: &'static Lint,
         .                   mut id: hir::HirId,
         .               ) -> (Level, LintLevelSource) {
         .                   let sets = self.lint_levels(());
         .                   loop {
 7,867,992 ( 0.01%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
         .                           return pair;
         .                       }
   680,774 ( 0.00%)              let next = self.hir().get_parent_node(id);
 2,042,322 ( 0.00%)              if next == id {
         .                           bug!("lint traversal reached the root of the crate");
         .                       }
         .                       id = next;
         .                   }
   994,872 ( 0.00%)      }
         .           
   604,800 ( 0.00%)      pub fn struct_span_lint_hir(
         .                   self,
         .                   lint: &'static Lint,
         .                   hir_id: HirId,
         .                   span: impl Into<MultiSpan>,
         .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
         .               ) {
   966,088 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
   457,376 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
   345,600 ( 0.00%)      }
         .           
         .               pub fn struct_lint_node(
         .                   self,
         .                   lint: &'static Lint,
         .                   id: HirId,
         .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
         .               ) {
         .                   let (level, src) = self.lint_level_at_node(lint, id);
         .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
         .               }
         .           
    28,980 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
     8,280 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
         .                   let candidates = map.get(&id.local_id)?;
     8,280 ( 0.00%)          Some(&*candidates)
    33,120 ( 0.00%)      }
         .           
 1,409,058 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
         .                   debug!(?id, "named_region");
         .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
 1,811,646 ( 0.00%)      }
         .           
     5,751 ( 0.00%)      pub fn is_late_bound(self, id: HirId) -> bool {
         .                   self.is_late_bound_map(id.owner)
       322 ( 0.00%)              .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
     5,112 ( 0.00%)      }
         .           
   589,848 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
         .                   self.object_lifetime_defaults_map(id.owner)
   758,376 ( 0.00%)      }
         .           
   389,763 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
         .                   self.mk_bound_variable_kinds(
         .                       self.late_bound_vars_map(id.owner)
         .                           .and_then(|map| map.get(&id.local_id).cloned())
         .                           .unwrap_or_else(|| {
         .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
         .                           })
         .                           .iter(),
         .                   )
   389,763 ( 0.00%)      }
         .           
         .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
         .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
         .               }
         .           
         .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
         .               /// feature gates
       820 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
        82 ( 0.00%)          if self.is_const_fn_raw(def_id) {
        43 ( 0.00%)              match self.lookup_const_stability(def_id) {
        76 ( 0.00%)                  Some(stability) if stability.level.is_unstable() => {
         .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
         .                               // corresponding feature gate.
         6 ( 0.00%)                      self.features()
         .                                   .declared_lib_features
         .                                   .iter()
         .                                   .any(|&(sym, _)| sym == stability.feature)
         .                           }
         .                           // functions without const stability are either stable user written
         .                           // const fn or the user is using feature gates and we thus don't
         .                           // care what they do
         .                           _ => true,
         .                       }
         .                   } else {
         .                       false
         .                   }
       738 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TyCtxtAt<'tcx> {
         .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
         .               #[track_caller]
         .               pub fn ty_error(self) -> Ty<'tcx> {
         .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
         .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
         .           }
         .           
         .           impl<I, T, R, E> InternAs<[T], R> for I
         .           where
         .               E: InternIteratorElement<T, R>,
         .               I: Iterator<Item = E>,
         .           {
         .               type Output = E::Output;
   655,328 ( 0.00%)      fn intern_with<F>(self, f: F) -> Self::Output
         .               where
         .                   F: FnOnce(&[T]) -> R,
         .               {
94,946,395 ( 0.14%)          E::intern_with(self, f)
   455,805 ( 0.00%)      }
         .           }
         .           
         .           pub trait InternIteratorElement<T, R>: Sized {
         .               type Output;
         .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
         .           }
         .           
         .           impl<T, R> InternIteratorElement<T, R> for T {
         .               type Output = R;
 7,014,922 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
         .                   mut iter: I,
         .                   f: F,
         .               ) -> Self::Output {
         .                   // This code is hot enough that it's worth specializing for the most
         .                   // common length lists, to avoid the overhead of `SmallVec` creation.
         .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
         .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
         .                   // `assert`.
 4,953,205 ( 0.01%)          match iter.size_hint() {
         .                       (0, Some(0)) => {
        15 ( 0.00%)                  assert!(iter.next().is_none());
         .                           f(&[])
         .                       }
         .                       (1, Some(1)) => {
         .                           let t0 = iter.next().unwrap();
        58 ( 0.00%)                  assert!(iter.next().is_none());
   537,150 ( 0.00%)                  f(&[t0])
         .                       }
         .                       (2, Some(2)) => {
         .                           let t0 = iter.next().unwrap();
         .                           let t1 = iter.next().unwrap();
     2,444 ( 0.00%)                  assert!(iter.next().is_none());
   390,867 ( 0.00%)                  f(&[t0, t1])
         .                       }
   270,528 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
         .                   }
 5,930,962 ( 0.01%)      }
         .           }
         .           
         .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
         .           where
         .               T: Clone + 'a,
         .           {
         .               type Output = R;
   234,802 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
         .                   // This code isn't hot.
       836 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
   188,600 ( 0.00%)      }
         .           }
         .           
         .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
         .               type Output = Result<R, E>;
37,726,049 ( 0.06%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
         .                   mut iter: I,
         .                   f: F,
         .               ) -> Self::Output {
         .                   // This code is hot enough that it's worth specializing for the most
         .                   // common length lists, to avoid the overhead of `SmallVec` creation.
         .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
         .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
         .                   // `assert`, unless a failure happens first, in which case the result
         .                   // will be an error anyway.
22,728,038 ( 0.03%)          Ok(match iter.size_hint() {
         .                       (0, Some(0)) => {
         .                           assert!(iter.next().is_none());
         .                           f(&[])
         .                       }
         .                       (1, Some(1)) => {
   897,788 ( 0.00%)                  let t0 = iter.next().unwrap()?;
       426 ( 0.00%)                  assert!(iter.next().is_none());
 2,055,386 ( 0.00%)                  f(&[t0])
         .                       }
         .                       (2, Some(2)) => {
     6,210 ( 0.00%)                  let t0 = iter.next().unwrap()?;
     6,210 ( 0.00%)                  let t1 = iter.next().unwrap()?;
     9,315 ( 0.00%)                  assert!(iter.next().is_none());
 1,126,124 ( 0.00%)                  f(&[t0, t1])
         .                       }
   240,483 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
         .                   })
40,369,230 ( 0.06%)      }
         .           }
         .           
         .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
         .           // won't work for us.
         .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
 4,159,334 ( 0.01%)      t as *const () == u as *const ()
         .           }
         .           
         .           pub fn provide(providers: &mut ty::query::Providers) {
         2 ( 0.00%)      providers.in_scope_traits_map =
         .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
         3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
         2 ( 0.00%)      providers.module_reexports =
         .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
         2 ( 0.00%)      providers.crate_name = |tcx, id| {
         1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
         1 ( 0.00%)          tcx.crate_name
         .               };
         2 ( 0.00%)      providers.maybe_unused_trait_import =
         .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
         2 ( 0.00%)      providers.maybe_unused_extern_crates =
         .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
         2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
         .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
         .               };
         .           
        11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
         2 ( 0.00%)      providers.lookup_const_stability =
         .                   |tcx, id| tcx.stability().local_const_stability(id.expect_local());
         2 ( 0.00%)      providers.lookup_deprecation_entry =
   316,920 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
         2 ( 0.00%)      providers.extern_mod_stmt_cnum =
         .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
         3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
         3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
         2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
         1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
         7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
         .               };
         2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
         1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
         7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
         .               };
         2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
         1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
         .                   // We want to check if the panic handler was defined in this crate
         3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
         .               };
         .           }

43,425,299 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 36 ----------------------------------------
         .           use rustc_session::parse::ParseSess;
         .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
         .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
         .           use tracing::debug;
         .           
         .           use std::ops::Range;
         .           use std::{cmp, mem, slice};
         .           
   226,535 ( 0.00%)  bitflags::bitflags! {
         .               struct Restrictions: u8 {
         .                   const STMT_EXPR         = 1 << 0;
         .                   const NO_STRUCT_LITERAL = 1 << 1;
         .                   const CONST_EXPR        = 1 << 2;
         .               }
         .           }
         .           
         .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
         .                               $self.bump();
         .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
         .                           }
         .                       }
         .                   }
         .               };
         .           }
         .           
   335,952 ( 0.00%)  #[derive(Clone)]
         .           pub struct Parser<'a> {
    14,670 ( 0.00%)      pub sess: &'a ParseSess,
         .               /// The current token.
    10,854 ( 0.00%)      pub token: Token,
         .               /// The spacing for the current token
     5,819 ( 0.00%)      pub token_spacing: Spacing,
         .               /// The previous token.
    16,281 ( 0.00%)      pub prev_token: Token,
     6,211 ( 0.00%)      pub capture_cfg: bool,
    12,814 ( 0.00%)      restrictions: Restrictions,
    11,638 ( 0.00%)      expected_tokens: Vec<TokenType>,
         .               // Important: This must only be advanced from `next_tok`
         .               // to ensure that `token_cursor.num_next_calls` is updated properly
         .               token_cursor: TokenCursor,
    11,638 ( 0.00%)      desugar_doc_comments: bool,
         .               /// This field is used to keep track of how many left angle brackets we have seen. This is
         .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
         .               /// appropriately.
         .               ///
         .               /// See the comments in the `parse_path_segment` function for more details.
    11,638 ( 0.00%)      unmatched_angle_bracket_count: u32,
    17,457 ( 0.00%)      max_angle_bracket_count: u32,
         .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
         .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
         .               /// error.
     5,819 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
         .               last_unexpected_token_span: Option<Span>,
         .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
         .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
         .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
         .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
         .               subparser_name: Option<&'static str>,
         .               capture_state: CaptureState,
         .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
         .           /// the first macro inner attribute to invoke a proc-macro).
         .           /// When create a `TokenStream`, the inner attributes get inserted
         .           /// into the proper place in the token stream.
         .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
         .           
         .           /// Controls how we capture tokens. Capturing can be expensive,
         .           /// so we try to avoid performing capturing in cases where
         .           /// we will never need an `AttrAnnotatedTokenStream`
     5,819 ( 0.00%)  #[derive(Copy, Clone)]
         .           pub enum Capturing {
         .               /// We aren't performing any capturing - this is the default mode.
         .               No,
         .               /// We are capturing tokens
         .               Yes,
         .           }
         .           
    26,700 ( 0.00%)  #[derive(Clone)]
         .           struct CaptureState {
    23,276 ( 0.00%)      capturing: Capturing,
     5,819 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
         .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
         .           }
         .           
         .           impl<'a> Drop for Parser<'a> {
         .               fn drop(&mut self) {
   182,408 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
         .               }
         .           }
         .           
 2,927,304 ( 0.00%)  #[derive(Clone)]
         .           struct TokenCursor {
         .               frame: TokenCursorFrame,
   670,633 ( 0.00%)      stack: Vec<TokenCursorFrame>,
         .               desugar_doc_comments: bool,
         .               // Counts the number of calls to `next` or `next_desugared`,
         .               // depending on whether `desugar_doc_comments` is set.
   213,972 ( 0.00%)      num_next_calls: usize,
         .               // During parsing, we may sometimes need to 'unglue' a
         .               // glued token into two component tokens
         .               // (e.g. '>>' into '>' and '>), so that the parser
         .               // can consume them one at a time. This process
         .               // bypasses the normal capturing mechanism
         .               // (e.g. `num_next_calls` will not be incremented),
         .               // since the 'unglued' tokens due not exist in
         .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
         .               // in `Option<Vec<u8>>` requires us to unglue
         .               // the trailing `>>` token. The `break_last_token`
         .               // field is used to track this token - it gets
         .               // appended to the captured stream when
         .               // we evaluate a `LazyTokenStream`
         .               break_last_token: bool,
         .           }
         .           
 1,336,706 ( 0.00%)  #[derive(Clone)]
         .           struct TokenCursorFrame {
   264,776 ( 0.00%)      delim: token::DelimToken,
         .               span: DelimSpan,
         .               open_delim: bool,
   529,552 ( 0.00%)      tree_cursor: tokenstream::Cursor,
         .               close_delim: bool,
         .           }
         .           
         .           impl TokenCursorFrame {
         .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
   215,190 ( 0.00%)          TokenCursorFrame {
         .                       delim,
         .                       span,
         .                       open_delim: false,
   332,623 ( 0.00%)              tree_cursor: tts.into_trees(),
         .                       close_delim: false,
         .                   }
         .               }
         .           }
         .           
         .           impl TokenCursor {
16,458,804 ( 0.02%)      fn next(&mut self) -> (Token, Spacing) {
         .                   loop {
 8,561,864 ( 0.01%)              let (tree, spacing) = if !self.frame.open_delim {
   246,488 ( 0.00%)                  self.frame.open_delim = true;
 1,232,440 ( 0.00%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
15,660,936 ( 0.02%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
         .                           tree
 1,036,704 ( 0.00%)              } else if !self.frame.close_delim {
   236,006 ( 0.00%)                  self.frame.close_delim = true;
 1,180,030 ( 0.00%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
   471,884 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
 3,067,246 ( 0.00%)                  self.frame = frame;
         .                           continue;
         .                       } else {
   835,272 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
         .                       };
         .           
 3,235,992 ( 0.00%)              match tree {
         .                           TokenTree::Token(token) => {
10,972,536 ( 0.02%)                      return (token, spacing);
         .                           }
         .                           TokenTree::Delimited(sp, delim, tts) => {
         .                               let frame = TokenCursorFrame::new(sp, delim, tts);
         .                               self.stack.push(mem::replace(&mut self.frame, frame));
         .                           }
         .                       }
         .                   }
10,972,536 ( 0.02%)      }
         .           
   224,450 ( 0.00%)      fn next_desugared(&mut self) -> (Token, Spacing) {
    67,453 ( 0.00%)          let (data, attr_style, sp) = match self.next() {
       177 ( 0.00%)              (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
         .                           (data, attr_style, span)
         .                       }
   111,930 ( 0.00%)              tok => return tok,
         .                   };
         .           
         .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
         .                   // required to wrap the text.
         .                   let mut num_of_hashes = 0;
         .                   let mut count = 0;
    17,777 ( 0.00%)          for ch in data.as_str().chars() {
         .                       count = match ch {
         .                           '"' => 1,
         .                           '#' if count > 0 => count + 1,
         .                           _ => 0,
         .                       };
         .                       num_of_hashes = cmp::max(num_of_hashes, count);
         .                   }
         .           
       236 ( 0.00%)          let delim_span = DelimSpan::from_single(sp);
       295 ( 0.00%)          let body = TokenTree::Delimited(
         .                       delim_span,
         .                       token::Bracket,
       708 ( 0.00%)              [
       413 ( 0.00%)                  TokenTree::token(token::Ident(sym::doc, false), sp),
       236 ( 0.00%)                  TokenTree::token(token::Eq, sp),
       472 ( 0.00%)                  TokenTree::token(TokenKind::lit(token::StrRaw(num_of_hashes), data, None), sp),
         .                       ]
         .                       .iter()
         .                       .cloned()
         .                       .collect::<TokenStream>(),
        59 ( 0.00%)          );
         .           
         .                   self.stack.push(mem::replace(
         .                       &mut self.frame,
         .                       TokenCursorFrame::new(
         .                           delim_span,
         .                           token::NoDelim,
        59 ( 0.00%)                  if attr_style == AttrStyle::Inner {
         .                               [TokenTree::token(token::Pound, sp), TokenTree::token(token::Not, sp), body]
         .                                   .iter()
         .                                   .cloned()
         .                                   .collect::<TokenStream>()
         .                           } else {
       708 ( 0.00%)                      [TokenTree::token(token::Pound, sp), body]
         .                                   .iter()
         .                                   .cloned()
         .                                   .collect::<TokenStream>()
         .                           },
         .                       ),
         .                   ));
         .           
       177 ( 0.00%)          self.next()
   202,005 ( 0.00%)      }
         .           }
         .           
   956,610 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
         .           enum TokenType {
   765,288 ( 0.00%)      Token(TokenKind),
         .               Keyword(Symbol),
         .               Operator,
         .               Lifetime,
         .               Ident,
         .               Path,
         .               Type,
         .               Const,
         .           }
-- line 353 ----------------------------------------
-- line 378 ----------------------------------------
         .               /// The separator token.
         .               sep: Option<TokenKind>,
         .               /// `true` if a trailing separator is allowed.
         .               trailing_sep_allowed: bool,
         .           }
         .           
         .           impl SeqSep {
         .               fn trailing_allowed(t: TokenKind) -> SeqSep {
       627 ( 0.00%)          SeqSep { sep: Some(t), trailing_sep_allowed: true }
         .               }
         .           
         .               fn none() -> SeqSep {
         .                   SeqSep { sep: None, trailing_sep_allowed: false }
         .               }
         .           }
         .           
         .           pub enum FollowedByType {
         .               Yes,
         .               No,
         .           }
         .           
         .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
    71,730 ( 0.00%)      Some(match token.kind {
   143,472 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
   143,472 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
   143,460 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
         .                   token::DocComment(..) => "doc comment",
         .                   _ => return None,
         .               })
         .           }
         .           
   251,076 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
    71,736 ( 0.00%)      let token_str = pprust::token_to_string(token);
         .               match token_descr_opt(token) {
        39 ( 0.00%)          Some(prefix) => format!("{} `{}`", prefix, token_str),
   251,055 ( 0.00%)          _ => format!("`{}`", token_str),
         .               }
   179,340 ( 0.00%)  }
         .           
         .           impl<'a> Parser<'a> {
   602,532 ( 0.00%)      pub fn new(
         .                   sess: &'a ParseSess,
         .                   tokens: TokenStream,
         .                   desugar_doc_comments: bool,
         .                   subparser_name: Option<&'static str>,
         .               ) -> Self {
    43,038 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
    86,076 ( 0.00%)          start_frame.open_delim = true;
         .                   start_frame.close_delim = true;
         .           
 1,334,178 ( 0.00%)          let mut parser = Parser {
         .                       sess,
    43,038 ( 0.00%)              token: Token::dummy(),
         .                       token_spacing: Spacing::Alone,
    43,038 ( 0.00%)              prev_token: Token::dummy(),
         .                       capture_cfg: false,
         .                       restrictions: Restrictions::empty(),
         .                       expected_tokens: Vec::new(),
         .                       token_cursor: TokenCursor {
   258,228 ( 0.00%)                  frame: start_frame,
         .                           stack: Vec::new(),
         .                           num_next_calls: 0,
         .                           desugar_doc_comments,
         .                           break_last_token: false,
         .                       },
         .                       desugar_doc_comments,
         .                       unmatched_angle_bracket_count: 0,
         .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
         .                           capturing: Capturing::No,
         .                           replace_ranges: Vec::new(),
         .                           inner_attr_ranges: Default::default(),
         .                       },
         .                       current_closure: None,
         .                   };
         .           
         .                   // Make parser point to the first token.
    86,076 ( 0.00%)          parser.bump();
         .           
         .                   parser
   387,342 ( 0.00%)      }
         .           
         .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
         .                   loop {
 7,681,776 ( 0.01%)              let (mut next, spacing) = if self.desugar_doc_comments {
    89,780 ( 0.00%)                  self.token_cursor.next_desugared()
         .                       } else {
 3,773,553 ( 0.01%)                  self.token_cursor.next()
         .                       };
 5,121,184 ( 0.01%)              self.token_cursor.num_next_calls += 1;
         .                       // We've retrieved an token from the underlying
         .                       // cursor, so we no longer need to worry about
         .                       // an unglued token. See `break_and_eat` for more details
 1,280,296 ( 0.00%)              self.token_cursor.break_last_token = false;
 5,121,184 ( 0.01%)              if next.span.is_dummy() {
         .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
   173,492 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
         .                       }
 4,548,624 ( 0.01%)              if matches!(
 2,560,592 ( 0.00%)                  next.kind,
         .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
         .                       ) {
         .                           continue;
         .                       }
 5,120,712 ( 0.01%)              return (next, spacing);
         .                   }
         .               }
         .           
         .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
         .                   match self.expect_one_of(&[], &[]) {
         .                       Err(e) => Err(e),
         .                       // We can get `Ok(true)` from `recover_closing_delimiter`
         .                       // which is called in `expected_one_of_not_found`.
         .                       Ok(_) => FatalError.raise(),
         .                   }
         .               }
         .           
         .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
 2,229,921 ( 0.00%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
   247,769 ( 0.00%)          if self.expected_tokens.is_empty() {
   217,110 ( 0.00%)              if self.token == *t {
   180,925 ( 0.00%)                  self.bump();
         .                           Ok(false)
         .                       } else {
         .                           self.unexpected_try_recover(t)
         .                       }
         .                   } else {
 2,539,008 ( 0.00%)              self.expect_one_of(slice::from_ref(t), &[])
         .                   }
 3,716,535 ( 0.01%)      }
         .           
         .               /// Expect next token to be edible or inedible token.  If edible,
         .               /// then consume it; if inedible, then return without consuming
         .               /// anything.  Signal a fatal error if next token is unexpected.
 2,997,444 ( 0.00%)      pub fn expect_one_of(
         .                   &mut self,
         .                   edible: &[TokenKind],
         .                   inedible: &[TokenKind],
         .               ) -> PResult<'a, bool /* recovered */> {
   499,574 ( 0.00%)          if edible.contains(&self.token.kind) {
   636,999 ( 0.00%)              self.bump();
         .                       Ok(false)
         .                   } else if inedible.contains(&self.token.kind) {
         .                       // leave it in the input
         .                       Ok(false)
         .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
         .                       FatalError.raise();
         .                   } else {
         .                       self.expected_one_of_not_found(edible, inedible)
         .                   }
 3,746,805 ( 0.01%)      }
         .           
         .               // Public for rustfmt usage.
         .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
   999,375 ( 0.00%)          self.parse_ident_common(true)
         .               }
         .           
         .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
   772,527 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
         .                       TokenKind::DocComment(..) => {
         .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
         .                       }
         .                       _ => self.expected_ident_found(),
         .                   })
         .               }
         .           
 1,801,072 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
   257,296 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
 1,543,776 ( 0.00%)          if !is_raw && ident.is_reserved() {
         .                       let mut err = self.expected_ident_found();
         .                       if recover {
         .                           err.emit();
         .                       } else {
         .                           return Err(err);
         .                       }
         .                   }
 1,029,184 ( 0.00%)          self.bump();
         .                   Ok(ident)
 2,572,960 ( 0.00%)      }
         .           
         .               /// Checks if the next token is `tok`, and returns `true` if so.
         .               ///
         .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
         .               /// encountered.
25,028,528 ( 0.04%)      fn check(&mut self, tok: &TokenKind) -> bool {
11,079,034 ( 0.02%)          let is_present = self.token == *tok;
 7,485,884 ( 0.01%)          if !is_present {
15,458,951 ( 0.02%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
         .                   }
         .                   is_present
25,028,528 ( 0.04%)      }
         .           
         .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
     2,388 ( 0.00%)      pub fn eat(&mut self, tok: &TokenKind) -> bool {
 5,685,919 ( 0.01%)          let is_present = self.check(tok);
 3,676,071 ( 0.01%)          if is_present {
   763,391 ( 0.00%)              self.bump()
         .                   }
         .                   is_present
     2,985 ( 0.00%)      }
         .           
         .               /// If the next token is the given keyword, returns `true` without eating it.
         .               /// An expectation is also added for diagnostics purposes.
 1,077,200 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
   318,040 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
 8,147,074 ( 0.01%)          self.token.is_keyword(kw)
         .               }
         .           
         .               /// If the next token is the given keyword, eats it and returns `true`.
         .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
         .               // Public for rustfmt usage.
 2,238,960 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
 1,644,940 ( 0.00%)          if self.check_keyword(kw) {
   207,108 ( 0.00%)              self.bump();
         .                       true
         .                   } else {
         .                       false
         .                   }
 2,238,960 ( 0.00%)      }
         .           
         .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
   381,118 ( 0.00%)          if self.token.is_keyword(kw) {
    93,463 ( 0.00%)              self.bump();
         .                       true
         .                   } else {
         .                       false
         .                   }
         .               }
         .           
         .               /// If the given word is not a keyword, signals an error.
         .               /// If the next token is not the given word, signals an error.
         .               /// Otherwise, eats it.
    10,325 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
         .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
     8,260 ( 0.00%)      }
         .           
         .               /// Is the given keyword `kw` followed by a non-reserved identifier?
 1,250,624 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
   625,312 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
 1,406,952 ( 0.00%)      }
         .           
 1,710,732 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
   646,498 ( 0.00%)          if ok {
         .                       true
         .                   } else {
   552,480 ( 0.00%)              self.expected_tokens.push(typ);
         .                       false
         .                   }
 1,710,732 ( 0.00%)      }
         .           
         .               fn check_ident(&mut self) -> bool {
    85,420 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
         .               }
         .           
   461,676 ( 0.00%)      fn check_path(&mut self) -> bool {
   983,914 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
   577,095 ( 0.00%)      }
         .           
         .               fn check_type(&mut self) -> bool {
   263,260 ( 0.00%)          self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
         .               }
         .           
         .               fn check_const_arg(&mut self) -> bool {
   259,264 ( 0.00%)          self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
         .               }
         .           
   171,936 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
    95,520 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
         .                       && self.look_ahead(dist + 1, |t| match t.kind {
         .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
         .                           token::OpenDelim(DelimToken::Brace) => true,
         .                           _ => false,
         .                       })
   171,936 ( 0.00%)      }
         .           
         .               /// Checks to see if the next token is either `+` or `+=`.
         .               /// Otherwise returns `false`.
         .               fn check_plus(&mut self) -> bool {
   368,464 ( 0.00%)          self.check_or_expected(
   184,232 ( 0.00%)              self.token.is_like_plus(),
   184,232 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
         .                   )
         .               }
         .           
         .               /// Eats the expected token if it's present possibly breaking
         .               /// compound tokens like multi-character operators in process.
         .               /// Returns `true` if the token was eaten.
 2,463,972 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
 1,437,317 ( 0.00%)          if self.token.kind == expected {
   133,556 ( 0.00%)              self.bump();
         .                       return true;
         .                   }
   692,765 ( 0.00%)          match self.token.kind.break_two_token_op() {
     4,130 ( 0.00%)              Some((first, second)) if first == expected => {
     2,360 ( 0.00%)                  let first_span = self.sess.source_map().start_point(self.token.span);
     2,950 ( 0.00%)                  let second_span = self.token.span.with_lo(first_span.hi());
     5,310 ( 0.00%)                  self.token = Token::new(first, first_span);
         .                           // Keep track of this token - if we end token capturing now,
         .                           // we'll want to append this token to the captured stream.
         .                           //
         .                           // If we consume any additional tokens, then this token
         .                           // is not needed (we'll capture the entire 'glued' token),
         .                           // and `next_tok` will set this field to `None`
       590 ( 0.00%)                  self.token_cursor.break_last_token = true;
         .                           // Use the spacing of the glued token as the spacing
         .                           // of the unglued second token.
     8,260 ( 0.00%)                  self.bump_with((Token::new(second, second_span), self.token_spacing));
         .                           true
         .                       }
         .                       _ => {
   413,889 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
         .                           false
         .                       }
         .                   }
 2,399,831 ( 0.00%)      }
         .           
         .               /// Eats `+` possibly breaking tokens like `+=` in process.
         .               fn eat_plus(&mut self) -> bool {
     6,220 ( 0.00%)          self.break_and_eat(token::BinOp(token::Plus))
         .               }
         .           
         .               /// Eats `&` possibly breaking tokens like `&&` in process.
         .               /// Signals an error if `&` is not eaten.
         .               fn expect_and(&mut self) -> PResult<'a, ()> {
     7,002 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
         .               }
         .           
         .               /// Eats `|` possibly breaking tokens like `||` in process.
         .               /// Signals an error if `|` was not eaten.
         .               fn expect_or(&mut self) -> PResult<'a, ()> {
     1,254 ( 0.00%)          if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
         .               }
         .           
         .               /// Eats `<` possibly breaking tokens like `<<` in process.
   186,422 ( 0.00%)      fn eat_lt(&mut self) -> bool {
   577,072 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
   370,943 ( 0.00%)          if ate {
         .                       // See doc comment for `unmatched_angle_bracket_count`.
   131,948 ( 0.00%)              self.unmatched_angle_bracket_count += 1;
   133,100 ( 0.00%)              self.max_angle_bracket_count += 1;
         .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
         .                   }
         .                   ate
   186,422 ( 0.00%)      }
         .           
         .               /// Eats `<` possibly breaking tokens like `<<` in process.
         .               /// Signals an error if `<` was not eaten.
         .               fn expect_lt(&mut self) -> PResult<'a, ()> {
         .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
         .               }
         .           
         .               /// Eats `>` possibly breaking tokens like `>>` in process.
         .               /// Signals an error if `>` was not eaten.
         .               fn expect_gt(&mut self) -> PResult<'a, ()> {
   197,076 ( 0.00%)          if self.break_and_eat(token::Gt) {
         .                       // See doc comment for `unmatched_angle_bracket_count`.
    98,538 ( 0.00%)              if self.unmatched_angle_bracket_count > 0 {
    65,692 ( 0.00%)                  self.unmatched_angle_bracket_count -= 1;
         .                           debug!("expect_gt: (decrement) count={:?}", self.unmatched_angle_bracket_count);
         .                       }
         .                       Ok(())
         .                   } else {
         .                       self.unexpected()
         .                   }
         .               }
         .           
         .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
         .                   kets.iter().any(|k| match expect {
   867,933 ( 0.00%)              TokenExpectType::Expect => self.check(k),
     3,147 ( 0.00%)              TokenExpectType::NoExpect => self.token == **k,
         .                   })
         .               }
         .           
         .               fn parse_seq_to_before_tokens<T>(
         .                   &mut self,
         .                   kets: &[&TokenKind],
         .                   sep: SeqSep,
         .                   expect: TokenExpectType,
-- line 759 ----------------------------------------
-- line 761 ----------------------------------------
         .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
         .                   let mut first = true;
         .                   let mut recovered = false;
         .                   let mut trailing = false;
         .                   let mut v = vec![];
         .                   let unclosed_delims = !self.unclosed_delims.is_empty();
         .           
         .                   while !self.expect_any_with_type(kets, expect) {
   625,876 ( 0.00%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
         .                           break;
         .                       }
   423,755 ( 0.00%)              if let Some(ref t) = sep.sep {
   609,080 ( 0.00%)                  if first {
         .                               first = false;
         .                           } else {
   380,548 ( 0.00%)                      match self.expect(t) {
         .                                   Ok(false) => {
         .                                       self.current_closure.take();
         .                                   }
         .                                   Ok(true) => {
         .                                       self.current_closure.take();
         .                                       recovered = true;
         .                                       break;
         .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
         .                                               e.cancel();
         .                                               break;
         .                                           }
         .                                       }
         .                                   }
         .                               }
         .                           }
         .                       }
   238,208 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
         .                           trailing = true;
         .                           break;
         .                       }
         .           
   361,622 ( 0.00%)              let t = f(self)?;
   251,754 ( 0.00%)              v.push(t);
         .                   }
         .           
   461,868 ( 0.00%)          Ok((v, trailing, recovered))
         .               }
         .           
         .               fn recover_missing_braces_around_closure_body(
         .                   &mut self,
         .                   closure_spans: ClosureSpans,
         .                   mut expect_err: DiagnosticBuilder<'_>,
         .               ) -> PResult<'a, ()> {
         .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
         .               /// `f` must consume tokens until reaching the next separator or
         .               /// closing bracket.
         .               fn parse_seq_to_before_end<T>(
         .                   &mut self,
         .                   ket: &TokenKind,
         .                   sep: SeqSep,
         .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
         .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
   517,232 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
         .               }
         .           
         .               /// Parses a sequence, including the closing delimiter. The function
         .               /// `f` must consume tokens until reaching the next separator or
         .               /// closing bracket.
   290,380 ( 0.00%)      fn parse_seq_to_end<T>(
         .                   &mut self,
         .                   ket: &TokenKind,
         .                   sep: SeqSep,
         .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
         .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
   259,656 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
   201,376 ( 0.00%)          if !recovered {
         .                       self.eat(ket);
         .                   }
   530,939 ( 0.00%)          Ok((val, trailing))
   232,304 ( 0.00%)      }
         .           
         .               /// Parses a sequence, including the closing delimiter. The function
         .               /// `f` must consume tokens until reaching the next separator or
         .               /// closing bracket.
         .               fn parse_unspanned_seq<T>(
         .                   &mut self,
         .                   bra: &TokenKind,
         .                   ket: &TokenKind,
         .                   sep: SeqSep,
         .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
         .               ) -> PResult<'a, (Vec<T>, bool)> {
   174,317 ( 0.00%)          self.expect(bra)?;
   232,304 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
         .               }
         .           
         .               fn parse_delim_comma_seq<T>(
         .                   &mut self,
         .                   delim: DelimToken,
         .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
         .               ) -> PResult<'a, (Vec<T>, bool)> {
         .                   self.parse_unspanned_seq(
    90,442 ( 0.00%)              &token::OpenDelim(delim),
   151,865 ( 0.00%)              &token::CloseDelim(delim),
         .                       SeqSep::trailing_allowed(token::Comma),
         .                       f,
         .                   )
         .               }
         .           
         .               fn parse_paren_comma_seq<T>(
         .                   &mut self,
         .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
         .               ) -> PResult<'a, (Vec<T>, bool)> {
         .                   self.parse_delim_comma_seq(token::Paren, f)
         .               }
         .           
         .               /// Advance the parser by one token using provided token as the next one.
16,649,984 ( 0.02%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
         .                   // Bumping after EOF is a bad sign, usually an infinite loop.
 7,684,608 ( 0.01%)          if self.prev_token.kind == TokenKind::Eof {
         .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
         .                       self.span_bug(self.token.span, msg);
         .                   }
         .           
         .                   // Update the current and previous tokens.
 5,123,072 ( 0.01%)          self.prev_token = mem::replace(&mut self.token, next_token);
 1,280,768 ( 0.00%)          self.token_spacing = next_spacing;
         .           
         .                   // Diagnostics.
 1,280,768 ( 0.00%)          self.expected_tokens.clear();
         .               }
         .           
         .               /// Advance the parser by one token.
10,241,424 ( 0.01%)      pub fn bump(&mut self) {
 5,120,712 ( 0.01%)          let next_token = self.next_tok(self.token.span);
 7,681,068 ( 0.01%)          self.bump_with(next_token);
10,241,424 ( 0.01%)      }
         .           
         .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
         .               /// When `dist == 0` then the current token is looked at.
     2,384 ( 0.00%)      pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
   216,788 ( 0.00%)          if dist == 0 {
    68,680 ( 0.00%)              return looker(&self.token);
         .                   }
         .           
   467,002 ( 0.00%)          let frame = &self.token_cursor.frame;
   498,928 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
         .                       let all_normal = (0..dist).all(|i| {
 1,326,096 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
 1,635,281 ( 0.00%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
         .                       });
         .                       if all_normal {
 2,169,162 ( 0.00%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
   596,281 ( 0.00%)                      Some(tree) => match tree {
   288,570 ( 0.00%)                          TokenTree::Token(token) => looker(token),
         .                                   TokenTree::Delimited(dspan, delim, _) => {
   381,506 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
         .                                   }
         .                               },
   853,215 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
         .                           };
         .                       }
         .                   }
         .           
         .                   let mut cursor = self.token_cursor.clone();
         .                   let mut i = 0;
    89,628 ( 0.00%)          let mut token = Token::dummy();
    28,466 ( 0.00%)          while i < dist {
   643,544 ( 0.00%)              token = cursor.next().0;
   294,665 ( 0.00%)              if matches!(
   180,518 ( 0.00%)                  token.kind,
         .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
         .                       ) {
         .                           continue;
         .                       }
    14,590 ( 0.00%)              i += 1;
         .                   }
       811 ( 0.00%)          return looker(&token);
     2,682 ( 0.00%)      }
         .           
         .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
   949,752 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
   352,555 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
   949,752 ( 0.00%)      }
         .           
         .               /// Parses asyncness: `async` or nothing.
         .               fn parse_asyncness(&mut self) -> Async {
         .                   if self.eat_keyword(kw::Async) {
         .                       let span = self.prev_token.uninterpolated_span();
         .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
         .                   } else {
         .                       Async::No
         .                   }
         .               }
         .           
         .               /// Parses unsafety: `unsafe` or nothing.
    75,242 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
         .                   if self.eat_keyword(kw::Unsafe) {
         .                       Unsafe::Yes(self.prev_token.uninterpolated_span())
         .                   } else {
         .                       Unsafe::No
         .                   }
   300,968 ( 0.00%)      }
         .           
         .               /// Parses constness: `const` or nothing.
   437,544 ( 0.00%)      fn parse_constness(&mut self) -> Const {
         .                   // Avoid const blocks to be parsed as const items
   150,339 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
         .                       && self.eat_keyword(kw::Const)
         .                   {
       375 ( 0.00%)              Const::Yes(self.prev_token.uninterpolated_span())
         .                   } else {
         .                       Const::No
         .                   }
   765,702 ( 0.00%)      }
         .           
         .               /// Parses inline const expressions.
         .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
         .                   if pat {
         .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
         .                   } else {
         .                       self.sess.gated_spans.gate(sym::inline_const, span);
         .                   }
-- line 1104 ----------------------------------------
-- line 1110 ----------------------------------------
         .                   };
         .                   let blk_span = anon_const.value.span;
         .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
         .               }
         .           
         .               /// Parses mutability (`mut` or nothing).
         .               fn parse_mutability(&mut self) -> Mutability {
         .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
     2,339 ( 0.00%)      }
         .           
         .               /// Possibly parses mutability (`const` or `mut`).
         .               fn parse_const_or_mut(&mut self) -> Option<Mutability> {
         .                   if self.eat_keyword(kw::Mut) {
         .                       Some(Mutability::Mut)
         .                   } else if self.eat_keyword(kw::Const) {
         .                       Some(Mutability::Not)
         .                   } else {
         .                       None
         .                   }
         .               }
         .           
         .               fn parse_field_name(&mut self) -> PResult<'a, Ident> {
       520 ( 0.00%)          if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) = self.token.kind
         .                   {
         .                       self.expect_no_suffix(self.token.span, "a tuple index", suffix);
         .                       self.bump();
         .                       Ok(Ident::new(symbol, self.prev_token.span))
         .                   } else {
       780 ( 0.00%)              self.parse_ident_common(true)
         .                   }
         .               }
         .           
         .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
    14,320 ( 0.00%)          self.parse_mac_args_common(true).map(P)
         .               }
         .           
         .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
   106,557 ( 0.00%)          self.parse_mac_args_common(false)
         .               }
         .           
   364,518 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
   324,016 ( 0.00%)          Ok(
   203,150 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
       480 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
       480 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
         .                       {
   161,564 ( 0.00%)                  match self.parse_token_tree() {
   201,955 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
         .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
         .                               {
    80,782 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
         .                               }
         .                               _ => unreachable!(),
         .                           }
       222 ( 0.00%)              } else if !delimited_only {
         .                           if self.eat(&token::Eq) {
         1 ( 0.00%)                      let eq_span = self.prev_token.span;
         .           
         .                               // Collect tokens because they are used during lowering to HIR.
         1 ( 0.00%)                      let expr = self.parse_expr_force_collect()?;
         1 ( 0.00%)                      let span = expr.span;
         .           
         5 ( 0.00%)                      let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
         9 ( 0.00%)                      MacArgs::Eq(eq_span, Token::new(token_kind, span))
         .                           } else {
         .                               MacArgs::Empty
         .                           }
         .                       } else {
         .                           return self.unexpected();
         .                       },
         .                   )
   283,514 ( 0.00%)      }
         .           
         .               fn parse_or_use_outer_attributes(
         .                   &mut self,
         .                   already_parsed_attrs: Option<AttrWrapper>,
         .               ) -> PResult<'a, AttrWrapper> {
   178,687 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
         .                       Ok(attrs)
         .                   } else {
    75,998 ( 0.00%)              self.parse_outer_attributes()
         .                   }
         .               }
         .           
         .               /// Parses a single token tree from the input.
   340,512 ( 0.00%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
   134,388 ( 0.00%)          match self.token.kind {
         .                       token::OpenDelim(..) => {
         .                           let depth = self.token_cursor.stack.len();
         .           
         .                           // We keep advancing the token cursor until we hit
         .                           // the matching `CloseDelim` token.
   469,474 ( 0.00%)                  while !(depth == self.token_cursor.stack.len()
         .                               && matches!(self.token.kind, token::CloseDelim(_)))
         .                           {
         .                               // Advance one token at a time, so `TokenCursor::next()`
         .                               // can capture these tokens if necessary.
   210,860 ( 0.00%)                      self.bump();
         .                           }
         .                           // We are still inside the frame corresponding
         .                           // to the delimited stream we captured, so grab
         .                           // the tokens from this frame.
         .                           let frame = &self.token_cursor.frame;
    81,780 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
    81,780 ( 0.00%)                  let span = frame.span;
    40,890 ( 0.00%)                  let delim = frame.delim;
         .                           // Consume close delimiter
    81,780 ( 0.00%)                  self.bump();
   204,450 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
         .                       }
         .                       token::CloseDelim(_) | token::Eof => unreachable!(),
         .                       _ => {
     3,348 ( 0.00%)                  self.bump();
     8,370 ( 0.00%)                  TokenTree::Token(self.prev_token.clone())
         .                       }
         .                   }
   297,948 ( 0.00%)      }
         .           
         .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
         .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
         .                   let mut tts = Vec::new();
         .                   while self.token != token::Eof {
         .                       tts.push(self.parse_token_tree());
         .                   }
         .                   Ok(tts)
-- line 1234 ----------------------------------------
-- line 1244 ----------------------------------------
         .                   }
         .                   TokenStream::new(result)
         .               }
         .           
         .               /// Evaluates the closure with restrictions in place.
         .               ///
         .               /// Afters the closure is evaluated, restrictions are reset.
         .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
   101,212 ( 0.00%)          let old = self.restrictions;
   139,073 ( 0.00%)          self.restrictions = res;
         .                   let res = f(self);
   133,809 ( 0.00%)          self.restrictions = old;
         .                   res
         .               }
         .           
   641,768 ( 0.00%)      fn is_crate_vis(&self) -> bool {
   401,105 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
   721,989 ( 0.00%)      }
         .           
         .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
         .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
         .               /// If the following element can't be a tuple (i.e., it's a function definition), then
         .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
         .               /// so emit a proper diagnostic.
         .               // Public for rustfmt usage.
   530,790 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
   106,359 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
         .           
    53,079 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
   212,316 ( 0.00%)          if self.is_crate_vis() {
         .                       self.bump(); // `crate`
         .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
         .                       return Ok(Visibility {
         .                           span: self.prev_token.span,
         .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
         .                           tokens: None,
         .                       });
         .                   }
         .           
         .                   if !self.eat_keyword(kw::Pub) {
         .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
         .                       // keyword to grab a span from for inherited visibility; an empty span at the
         .                       // beginning of the current token would seem to be the "Schelling span".
    52,536 ( 0.00%)              return Ok(Visibility {
   157,608 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
         .                           kind: VisibilityKind::Inherited,
         .                           tokens: None,
         .                       });
         .                   }
       543 ( 0.00%)          let lo = self.prev_token.span;
         .           
     2,715 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
         .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
         .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
         .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
         .                       // by the following tokens.
       724 ( 0.00%)              if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
         .                       // account for `pub(crate::foo)`
         .                       {
         .                           // Parse `pub(crate)`.
       120 ( 0.00%)                  self.bump(); // `(`
        80 ( 0.00%)                  self.bump(); // `crate`
       120 ( 0.00%)                  self.expect(&token::CloseDelim(token::Paren))?; // `)`
        40 ( 0.00%)                  let vis = VisibilityKind::Crate(CrateSugar::PubCrate);
         .                           return Ok(Visibility {
       120 ( 0.00%)                      span: lo.to(self.prev_token.span),
         .                               kind: vis,
         .                               tokens: None,
         .                           });
       364 ( 0.00%)              } else if self.is_keyword_ahead(1, &[kw::In]) {
         .                           // Parse `pub(in path)`.
         .                           self.bump(); // `(`
         .                           self.bump(); // `in`
         .                           let path = self.parse_path(PathStyle::Mod)?; // `path`
         .                           self.expect(&token::CloseDelim(token::Paren))?; // `)`
         .                           let vis = VisibilityKind::Restricted { path: P(path), id: ast::DUMMY_NODE_ID };
         .                           return Ok(Visibility {
         .                               span: lo.to(self.prev_token.span),
         .                               kind: vis,
         .                               tokens: None,
         .                           });
       208 ( 0.00%)              } else if self.look_ahead(2, |t| t == &token::CloseDelim(token::Paren))
       260 ( 0.00%)                  && self.is_keyword_ahead(1, &[kw::Super, kw::SelfLower])
         .                       {
         .                           // Parse `pub(self)` or `pub(super)`.
       156 ( 0.00%)                  self.bump(); // `(`
        52 ( 0.00%)                  let path = self.parse_path(PathStyle::Mod)?; // `super`/`self`
       156 ( 0.00%)                  self.expect(&token::CloseDelim(token::Paren))?; // `)`
       572 ( 0.00%)                  let vis = VisibilityKind::Restricted { path: P(path), id: ast::DUMMY_NODE_ID };
         .                           return Ok(Visibility {
       208 ( 0.00%)                      span: lo.to(self.prev_token.span),
         .                               kind: vis,
         .                               tokens: None,
         .                           });
         .                       } else if let FollowedByType::No = fbt {
         .                           // Provide this diagnostic if a type cannot follow;
         .                           // in particular, if this is not a tuple struct.
         .                           self.recover_incorrect_vis_restriction()?;
         .                           // Emit diagnostic, but continue with public visibility.
         .                       }
         .                   }
         .           
     1,353 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
   477,711 ( 0.00%)      }
         .           
         .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
         .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
         .                   self.bump(); // `(`
         .                   let path = self.parse_path(PathStyle::Mod)?;
         .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
         .           
         .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
         .                       )
         .                       .emit();
         .           
         .                   Ok(())
         .               }
         .           
         .               /// Parses `extern string_literal?`.
         .               fn parse_extern(&mut self) -> Extern {
    35,605 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
         .               }
         .           
         .               /// Parses a string literal as an ABI spec.
         .               fn parse_abi(&mut self) -> Option<StrLit> {
         .                   match self.parse_str_lit() {
         .                       Ok(str_lit) => Some(str_lit),
         .                       Err(Some(lit)) => match lit.kind {
         .                           ast::LitKind::Err(_) => None,
-- line 1386 ----------------------------------------
-- line 1395 ----------------------------------------
         .                                   .emit();
         .                               None
         .                           }
         .                       },
         .                       Err(None) => None,
         .                   }
         .               }
         .           
    12,930 ( 0.00%)      pub fn collect_tokens_no_attrs<R: AstLike>(
         .                   &mut self,
         .                   f: impl FnOnce(&mut Self) -> PResult<'a, R>,
         .               ) -> PResult<'a, R> {
         .                   // The only reason to call `collect_tokens_no_attrs` is if you want tokens, so use
         .                   // `ForceCollect::Yes`
         .                   self.collect_tokens_trailing_token(
         .                       AttrWrapper::empty(),
         .                       ForceCollect::Yes,
     2,053 ( 0.00%)              |this, _attrs| Ok((f(this)?, TrailingToken::None)),
         .                   )
    12,930 ( 0.00%)      }
         .           
         .               /// `::{` or `::*`
 1,701,488 ( 0.00%)      fn is_import_coupler(&mut self) -> bool {
   850,744 ( 0.00%)          self.check(&token::ModSep)
         .                       && self.look_ahead(1, |t| {
   131,448 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
         .                       })
 1,844,064 ( 0.00%)      }
         .           
         .               pub fn clear_expected_tokens(&mut self) {
         .                   self.expected_tokens.clear();
         .               }
         .           }
         .           
         .           crate fn make_unclosed_delims_error(
         .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
         .                   err.span_label(sp, "closing delimiter possibly meant for this");
         .               }
         .               if let Some(sp) = unmatched.unclosed_span {
         .                   err.span_label(sp, "unclosed delimiter");
         .               }
         .               Some(err)
         .           }
         .           
   391,160 ( 0.00%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
   195,580 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
         .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
   195,580 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
         .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
         .                       e.emit();
         .                   }
         .               }
   391,160 ( 0.00%)  }
         .           
         .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
         .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
         .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
         .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
         .           /// `AttrAnnotatedTokenTree::Delimited` tokens
         .           #[derive(Debug, Clone)]
         .           pub enum FlatToken {
-- line 1474 ----------------------------------------

 9,527,996 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 108 ----------------------------------------
         .                   suppress_errors: bool,
         .               },
         .           }
         .           
         .           impl RegionckMode {
         .               /// Indicates that the MIR borrowck will repeat these region
         .               /// checks, so we should ignore errors if NLL is (unconditionally)
         .               /// enabled.
    35,791 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
         .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
         .                   // this always `true` and then proceed to eliminate the dead code.
    35,791 ( 0.00%)          match tcx.borrowck_mode() {
         .                       // If we're on Migrate mode, report AST region errors
         .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
         .           
         .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
         .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
         .                   }
    71,582 ( 0.00%)      }
         .           }
         .           
         .           /// This type contains all the things within `InferCtxt` that sit within a
         .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
         .           /// operations are hot enough that we want only one call to `borrow_mut` per
         .           /// call to `start_snapshot` and `rollback_to`.
         .           pub struct InferCtxtInner<'tcx> {
         .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
         .               /// type instantiations (`ty::Infer`) to the actual opaque
         .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
         .               /// opaque type inference variables to their corresponding
         .               /// opaque type.
         .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
         .           }
         .           
         .           impl<'tcx> InferCtxtInner<'tcx> {
 3,477,310 ( 0.01%)      fn new() -> InferCtxtInner<'tcx> {
23,645,708 ( 0.03%)          InferCtxtInner {
         .                       projection_cache: Default::default(),
         .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
         .                       undo_log: InferCtxtUndoLogs::default(),
         .                       const_unification_storage: ut::UnificationTableStorage::new(),
         .                       int_unification_storage: ut::UnificationTableStorage::new(),
         .                       float_unification_storage: ut::UnificationTableStorage::new(),
 2,086,386 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
         .                       region_obligations: vec![],
         .                       opaque_types: Default::default(),
         .                       opaque_types_vars: Default::default(),
         .                   }
 4,172,772 ( 0.01%)      }
         .           
         .               #[inline]
         .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
         .                   &self.region_obligations
         .               }
         .           
         .               #[inline]
         .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
    20,820 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
         .               }
         .           
         .               #[inline]
         .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
11,804,793 ( 0.02%)          self.type_variable_storage.with_log(&mut self.undo_log)
         .               }
         .           
         .               #[inline]
         .               fn int_unification_table(
         .                   &mut self,
         .               ) -> ut::UnificationTable<
         .                   ut::InPlace<
         .                       ty::IntVid,
         .                       &mut ut::UnificationStorage<ty::IntVid>,
         .                       &mut InferCtxtUndoLogs<'tcx>,
         .                   >,
         .               > {
     5,755 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
         .               }
         .           
         .               #[inline]
         .               fn float_unification_table(
         .                   &mut self,
         .               ) -> ut::UnificationTable<
         .                   ut::InPlace<
         .                       ty::FloatVid,
-- line 258 ----------------------------------------
-- line 268 ----------------------------------------
         .                   &mut self,
         .               ) -> ut::UnificationTable<
         .                   ut::InPlace<
         .                       ty::ConstVid<'tcx>,
         .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
         .                       &mut InferCtxtUndoLogs<'tcx>,
         .                   >,
         .               > {
    34,207 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
         .               }
         .           
         .               #[inline]
         .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
 2,337,512 ( 0.00%)          self.region_constraint_storage
         .                       .as_mut()
         .                       .expect("region constraints already solved")
 2,543,425 ( 0.00%)              .with_log(&mut self.undo_log)
         .               }
         .           }
         .           
         .           pub struct InferCtxt<'a, 'tcx> {
         .               pub tcx: TyCtxt<'tcx>,
         .           
         .               /// The `DefId` of the item in whose context we are performing inference or typeck.
         .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
         .               /// item we are type-checking, and just consider those names as
         .               /// part of the root universe. So this would only get incremented
         .               /// when we enter into a higher-ranked (`for<..>`) type or trait
         .               /// bound.
         .               universe: Cell<ty::UniverseIndex>,
         .           }
         .           
         .           /// See the `error_reporting` module for more details.
11,695,112 ( 0.02%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
         .           pub enum ValuePairs<'tcx> {
         .               Types(ExpectedFound<Ty<'tcx>>),
         .               Regions(ExpectedFound<ty::Region<'tcx>>),
         .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
         .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
         .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
         .           }
         .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
         .           pub struct TypeTrace<'tcx> {
         .               cause: ObligationCause<'tcx>,
         .               values: ValuePairs<'tcx>,
         .           }
         .           
         .           /// The origin of a `r1 <= r2` constraint.
         .           ///
         .           /// See `error_reporting` module for more details
   773,722 ( 0.00%)  #[derive(Clone, Debug)]
         .           pub enum SubregionOrigin<'tcx> {
         .               /// Arose from a subtyping relation
    33,169 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
         .           
         .               /// When casting `&'a T` to an `&'b Trait` object,
         .               /// relating `'a` to `'b`
         .               RelateObjectBound(Span),
         .           
         .               /// Some type parameter was instantiated with the given type,
         .               /// and that type must outlive some region.
     4,689 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
         .           
         .               /// The given region parameter was instantiated with a region
         .               /// that must outlive some other region.
         .               RelateRegionParamBound(Span),
         .           
         .               /// Creating a pointer `b` to contents of another reference
         .               Reborrow(Span),
         .           
         .               /// Creating a pointer `b` to contents of an upvar
         .               ReborrowUpvar(Span, ty::UpvarId),
         .           
         .               /// Data with type `Ty<'tcx>` was borrowed
     6,261 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
         .           
         .               /// (&'a &'b T) where a >= b
    34,546 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
         .           
         .               /// Comparing the signature and requirements of an impl method against
         .               /// the containing trait.
         .               CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
         .           
         .               /// Comparing the signature and requirements of an impl associated type
         .               /// against the containing trait
         .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
-- line 426 ----------------------------------------
-- line 554 ----------------------------------------
         .               defining_use_anchor: Option<LocalDefId>,
         .           }
         .           
         .           pub trait TyCtxtInferExt<'tcx> {
         .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
         .           }
         .           
         .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
   695,462 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
 2,086,386 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
   695,462 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> InferCtxtBuilder<'tcx> {
         .               /// Used only by `rustc_typeck` during body type-checking/inference,
         .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
         .               /// Will also change the scope for opaque type defining use checks to the given owner.
   665,397 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
   813,263 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
   369,665 ( 0.00%)          self.with_opaque_type_inference(table_owner)
   517,531 ( 0.00%)      }
         .           
         .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
         .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
         .               ///
         .               /// It is only meant to be called in two places, for typeck
         .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
         .               /// in mir borrowck.
    72,010 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
    36,005 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
   219,876 ( 0.00%)          self
   108,015 ( 0.00%)      }
         .           
         .               /// Given a canonical value `C` as a starting point, create an
         .               /// inference context that contains each of the bound values
         .               /// within instantiated as a fresh variable. The `f` closure is
         .               /// invoked with the new infcx, along with the instantiated value
         .               /// `V` and a substitution `S`. This substitution `S` maps from
         .               /// the bound values in `C` to their instantiated values in `V`
         .               /// (in other words, `S(C) = V`).
   130,668 ( 0.00%)      pub fn enter_with_canonical<T, R>(
         .                   &mut self,
         .                   span: Span,
         .                   canonical: &Canonical<'tcx, T>,
         .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
         .               ) -> R
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   self.enter(|infcx| {
   180,500 ( 0.00%)              let (value, subst) =
    21,858 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
   260,713 ( 0.00%)              f(infcx, value, subst)
         .                   })
   143,004 ( 0.00%)      }
         .           
 5,179,808 ( 0.01%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
 1,650,264 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
         .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
31,727,397 ( 0.05%)          f(InferCtxt {
         .                       tcx,
         .                       defining_use_anchor,
         .                       in_progress_typeck_results,
   695,462 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
         .                       lexical_region_resolutions: RefCell::new(None),
         .                       selection_cache: Default::default(),
         .                       evaluation_cache: Default::default(),
         .                       reported_trait_errors: Default::default(),
         .                       reported_closure_mismatch: Default::default(),
         .                       tainted_by_errors_flag: Cell::new(false),
   695,462 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
         .                       in_snapshot: Cell::new(false),
         .                       skip_leak_check: Cell::new(false),
         .                       universe: Cell::new(ty::UniverseIndex::ROOT),
         .                   })
 5,946,545 ( 0.01%)      }
         .           }
         .           
         .           impl<'tcx, T> InferOk<'tcx, T> {
         .               pub fn unit(self) -> InferOk<'tcx, ()> {
         .                   InferOk { value: (), obligations: self.obligations }
         .               }
         .           
         .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
         .               pub fn into_value_registering_obligations(
         .                   self,
         .                   infcx: &InferCtxt<'_, 'tcx>,
         .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
         .               ) -> T {
     1,937 ( 0.00%)          let InferOk { value, obligations } = self;
     7,722 ( 0.00%)          for obligation in obligations {
     2,392 ( 0.00%)              fulfill_cx.register_predicate_obligation(infcx, obligation);
         .                   }
         .                   value
         .               }
         .           }
         .           
         .           impl<'tcx> InferOk<'tcx, ()> {
 1,155,070 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
 4,620,280 ( 0.01%)          self.obligations
 1,155,070 ( 0.00%)      }
         .           }
         .           
         .           #[must_use = "once you start a snapshot, you should always consume it"]
         .           pub struct CombinedSnapshot<'a, 'tcx> {
         .               undo_snapshot: Snapshot<'tcx>,
         .               region_constraints_snapshot: RegionSnapshot,
         .               universe: ty::UniverseIndex,
         .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
         .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
         .                   debug!("canonical consts: {:?}", &canonical.value);
         .           
         .                   self.tcx.try_unify_abstract_consts(canonical.value)
         .               }
         .           
         .               pub fn is_in_snapshot(&self) -> bool {
         .                   self.in_snapshot.get()
   566,853 ( 0.00%)      }
         .           
 2,951,968 ( 0.00%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
 3,320,964 ( 0.00%)          t.fold_with(&mut self.freshener())
 3,320,964 ( 0.00%)      }
         .           
         .               /// Returns the origin of the type variable identified by `vid`, or `None`
         .               /// if this is not a type variable.
         .               ///
         .               /// No attempt is made to resolve `ty`.
     1,212 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
     2,424 ( 0.00%)          match *ty.kind() {
       606 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
     2,424 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
         .                       }
         .                       _ => None,
         .                   }
     2,424 ( 0.00%)      }
         .           
   368,996 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
         .                   freshen::TypeFreshener::new(self, false)
   368,996 ( 0.00%)      }
         .           
         .               /// Like `freshener`, but does not replace `'static` regions.
 3,134,393 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
         .                   freshen::TypeFreshener::new(self, true)
 3,134,393 ( 0.00%)      }
         .           
   144,184 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
    72,092 ( 0.00%)          let mut inner = self.inner.borrow_mut();
    72,092 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
         .                       .type_variables()
         .                       .unsolved_variables()
         .                       .into_iter()
     1,212 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
         .                       .collect();
         .                   vars.extend(
         .                       (0..inner.int_unification_table().len())
         .                           .map(|i| ty::IntVid { index: i as u32 })
       492 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
         .                           .map(|v| self.tcx.mk_int_var(v)),
         .                   );
         .                   vars.extend(
         .                       (0..inner.float_unification_table().len())
         .                           .map(|i| ty::FloatVid { index: i as u32 })
         .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
         .                           .map(|v| self.tcx.mk_float_var(v)),
         .                   );
         .                   vars
   252,322 ( 0.00%)      }
         .           
 1,748,448 ( 0.00%)      fn combine_fields(
         .                   &'a self,
         .                   trace: TypeTrace<'tcx>,
         .                   param_env: ty::ParamEnv<'tcx>,
         .               ) -> CombineFields<'a, 'tcx> {
 8,143,356 ( 0.01%)          CombineFields {
         .                       infcx: self,
20,358,390 ( 0.03%)              trace,
         .                       cause: None,
         .                       param_env,
         .                       obligations: PredicateObligations::new(),
         .                   }
 1,748,448 ( 0.00%)      }
         .           
         .               /// Clear the "currently in a snapshot" flag, invoke the closure,
         .               /// then restore the flag to its original value. This flag is a
         .               /// debugging measure designed to detect cases where we start a
         .               /// snapshot, create type variables, and register obligations
         .               /// which may involve those type variables in the fulfillment cx,
         .               /// potentially leaving "dangling type variables" behind.
         .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 755 ----------------------------------------
         .               /// better than grovelling through megabytes of `RUSTC_LOG` output.
         .               ///
         .               /// HOWEVER, in some cases the flag is unhelpful. In particular, we
         .               /// sometimes create a "mini-fulfilment-cx" in which we enroll
         .               /// obligations. As long as this fulfillment cx is fully drained
         .               /// before we return, this is not a problem, as there won't be any
         .               /// escaping obligations in the main cx. In those cases, you can
         .               /// use this function.
        40 ( 0.00%)      pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
         .               where
         .                   F: FnOnce(&Self) -> R,
         .               {
         .                   let flag = self.in_snapshot.replace(false);
   176,265 ( 0.00%)          let result = func(self);
         .                   self.in_snapshot.set(flag);
         .                   result
        45 ( 0.00%)      }
         .           
 8,651,300 ( 0.01%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
         .                   debug!("start_snapshot()");
         .           
         .                   let in_snapshot = self.in_snapshot.replace(true);
         .           
         .                   let mut inner = self.inner.borrow_mut();
         .           
25,953,900 ( 0.04%)          CombinedSnapshot {
         .                       undo_snapshot: inner.undo_log.start_snapshot(),
         .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
         .                       universe: self.universe(),
         .                       was_in_snapshot: in_snapshot,
         .                       // Borrow typeck results "in progress" (i.e., during typeck)
         .                       // to ban writes from within a snapshot to them.
 4,325,650 ( 0.01%)              _in_progress_typeck_results: self
         .                           .in_progress_typeck_results
         .                           .map(|typeck_results| typeck_results.borrow()),
         .                   }
17,302,600 ( 0.03%)      }
         .           
22,916,762 ( 0.03%)      #[instrument(skip(self, snapshot), level = "debug")]
         .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
         .                   let CombinedSnapshot {
 2,083,342 ( 0.00%)              undo_snapshot,
 2,083,342 ( 0.00%)              region_constraints_snapshot,
 2,083,342 ( 0.00%)              universe,
 2,083,342 ( 0.00%)              was_in_snapshot,
 4,166,684 ( 0.01%)              _in_progress_typeck_results,
         .                   } = snapshot;
         .           
         .                   self.in_snapshot.set(was_in_snapshot);
         .                   self.universe.set(universe);
         .           
         .                   let mut inner = self.inner.borrow_mut();
 2,083,342 ( 0.00%)          inner.rollback_to(undo_snapshot);
         .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
         .               }
         .           
33,634,620 ( 0.05%)      #[instrument(skip(self, snapshot), level = "debug")]
         .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
         .                   let CombinedSnapshot {
 2,242,308 ( 0.00%)              undo_snapshot,
         .                       region_constraints_snapshot: _,
         .                       universe: _,
 2,242,308 ( 0.00%)              was_in_snapshot,
 4,484,616 ( 0.01%)              _in_progress_typeck_results,
         .                   } = snapshot;
         .           
         .                   self.in_snapshot.set(was_in_snapshot);
         .           
         .                   self.inner.borrow_mut().commit(undo_snapshot);
         .               }
         .           
         .               /// Executes `f` and commit the bindings.
   238,713 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
   295,845 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
         .               where
         .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
         .               {
    26,895 ( 0.00%)          let snapshot = self.start_snapshot();
    91,767 ( 0.00%)          let r = f(&snapshot);
   188,265 ( 0.00%)          self.commit_from(snapshot);
   173,826 ( 0.00%)          r
         .               }
         .           
         .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
20,050,505 ( 0.03%)      #[instrument(skip(self, f), level = "debug")]
24,754,556 ( 0.04%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
         .               where
         .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
         .               {
 3,365,421 ( 0.00%)          let snapshot = self.start_snapshot();
11,868,727 ( 0.02%)          let r = f(&snapshot);
         .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
 2,918,354 ( 0.00%)          match r {
         .                       Ok(_) => {
15,991,933 ( 0.02%)                  self.commit_from(snapshot);
         .                       }
         .                       Err(_) => {
 9,727,911 ( 0.01%)                  self.rollback_to("commit_if_ok -- error", snapshot);
         .                       }
         .                   }
18,594,271 ( 0.03%)          r
         .               }
         .           
         .               /// Execute `f` then unroll any bindings it creates.
 4,149,226 ( 0.01%)      #[instrument(skip(self, f), level = "debug")]
 5,401,034 ( 0.01%)      pub fn probe<R, F>(&self, f: F) -> R
         .               where
         .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
         .               {
 1,456,438 ( 0.00%)          let snapshot = self.start_snapshot();
 2,592,246 ( 0.00%)          let r = f(&snapshot);
 6,899,978 ( 0.01%)          self.rollback_to("probe", snapshot);
   826,706 ( 0.00%)          r
         .               }
         .           
         .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
 2,585,034 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
 3,446,712 ( 0.01%)      pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
         .               where
         .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
         .               {
   574,452 ( 0.00%)          let snapshot = self.start_snapshot();
   287,226 ( 0.00%)          let was_skip_leak_check = self.skip_leak_check.get();
   574,452 ( 0.00%)          if should_skip {
         .                       self.skip_leak_check.set(true);
         .                   }
 1,148,904 ( 0.00%)          let r = f(&snapshot);
 2,585,034 ( 0.00%)          self.rollback_to("probe", snapshot);
         .                   self.skip_leak_check.set(was_skip_leak_check);
 3,446,712 ( 0.01%)          r
         .               }
         .           
         .               /// Scan the constraints produced since `snapshot` began and returns:
         .               ///
         .               /// - `None` -- if none of them involve "region outlives" constraints
         .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
         .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
    75,942 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
         .                   &self,
         .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
         .               ) -> Option<bool> {
   151,884 ( 0.00%)          self.inner
         .                       .borrow_mut()
         .                       .unwrap_region_constraints()
         .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
   113,913 ( 0.00%)      }
         .           
         2 ( 0.00%)      pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
         4 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
         3 ( 0.00%)      }
         .           
     4,176 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
         .               where
         .                   T: at::ToTrace<'tcx>,
         .               {
         .                   let origin = &ObligationCause::dummy();
         .                   self.probe(|_| {
         .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
         .                           // Ignore obligations, since we are unrolling
         .                           // everything anyway.
         .                       })
         .                   })
     3,132 ( 0.00%)      }
         .           
   851,520 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
         .               where
         .                   T: at::ToTrace<'tcx>,
         .               {
         .                   let origin = &ObligationCause::dummy();
         .                   self.probe(|_| {
         .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
         .                           // Ignore obligations, since we are unrolling
         .                           // everything anyway.
         .                       })
         .                   })
   638,640 ( 0.00%)      }
         .           
   372,760 ( 0.00%)      #[instrument(skip(self), level = "debug")]
         .               pub fn sub_regions(
         .                   &self,
         .                   origin: SubregionOrigin<'tcx>,
         .                   a: ty::Region<'tcx>,
         .                   b: ty::Region<'tcx>,
         .               ) {
   335,484 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
         .               }
         .           
         .               /// Require that the region `r` be equal to one of the regions in
         .               /// the set `regions`.
         .               #[instrument(skip(self), level = "debug")]
         .               pub fn member_constraint(
         .                   &self,
         .                   opaque_type_def_id: DefId,
-- line 947 ----------------------------------------
-- line 969 ----------------------------------------
         .               /// to `subtype_predicate` -- that is, "coercing" `a` to `b` winds up
         .               /// actually requiring `a <: b`. This is of course a valid coercion,
         .               /// but it's not as flexible as `FnCtxt::coerce` would be.
         .               ///
         .               /// (We may refactor this in the future, but there are a number of
         .               /// practical obstacles. Among other things, `FnCtxt::coerce` presently
         .               /// records adjustments that are required on the HIR in order to perform
         .               /// the coercion, and we don't currently have a way to manage that.)
       279 ( 0.00%)      pub fn coerce_predicate(
         .                   &self,
         .                   cause: &ObligationCause<'tcx>,
         .                   param_env: ty::ParamEnv<'tcx>,
         .                   predicate: ty::PolyCoercePredicate<'tcx>,
         .               ) -> Option<InferResult<'tcx, ()>> {
       186 ( 0.00%)          let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
         .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
         .                       a: p.a,
         .                       b: p.b,
         .                   });
       465 ( 0.00%)          self.subtype_predicate(cause, param_env, subtype_predicate)
       372 ( 0.00%)      }
         .           
    14,508 ( 0.00%)      pub fn subtype_predicate(
         .                   &self,
         .                   cause: &ObligationCause<'tcx>,
         .                   param_env: ty::ParamEnv<'tcx>,
         .                   predicate: ty::PolySubtypePredicate<'tcx>,
         .               ) -> Option<InferResult<'tcx, ()>> {
         .                   // Check for two unresolved inference variables, in which case we can
         .                   // make no progress. This is partly a micro-optimization, but it's
         .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
         .                   // earlier that they are sub-unified).
         .                   //
         .                   // Note that we can just skip the binders here because
         .                   // type variables can't (at present, at
         .                   // least) capture any of the things bound by this binder.
         .                   //
         .                   // Note that this sub here is not just for diagnostics - it has semantic
         .                   // effects as well.
     1,209 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
     1,209 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
     8,994 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
     2,088 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
         .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
     2,088 ( 0.00%)                  return None;
         .                       }
         .                       _ => {}
         .                   }
         .           
         .                   Some(self.commit_if_ok(|_snapshot| {
       165 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
         .                           self.replace_bound_vars_with_placeholders(predicate);
         .           
       330 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
         .           
         .                       Ok(ok.unit())
         .                   }))
    10,881 ( 0.00%)      }
         .           
    59,280 ( 0.00%)      pub fn region_outlives_predicate(
         .                   &self,
         .                   cause: &traits::ObligationCause<'tcx>,
         .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
         .               ) -> UnitResult<'tcx> {
         .                   self.commit_if_ok(|_snapshot| {
         .                       let ty::OutlivesPredicate(r_a, r_b) =
         .                           self.replace_bound_vars_with_placeholders(predicate);
         .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
         .                           RelateRegionParamBound(cause.span)
         .                       });
    49,400 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
         .                       Ok(())
         .                   })
    39,520 ( 0.00%)      }
         .           
         .               /// Number of type variables created so far.
       255 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
         .                   self.inner.borrow_mut().type_variables().num_vars()
       510 ( 0.00%)      }
         .           
   320,594 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
 1,602,970 ( 0.00%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
   480,891 ( 0.00%)      }
         .           
   317,208 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
 1,120,386 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
   475,812 ( 0.00%)      }
         .           
     7,156 ( 0.00%)      pub fn next_ty_var_in_universe(
         .                   &self,
         .                   origin: TypeVariableOrigin,
         .                   universe: ty::UniverseIndex,
         .               ) -> Ty<'tcx> {
    39,358 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
     3,578 ( 0.00%)          self.tcx.mk_ty_var(vid)
    10,734 ( 0.00%)      }
         .           
         8 ( 0.00%)      pub fn next_const_var(
         .                   &self,
         .                   ty: Ty<'tcx>,
         .                   origin: ConstVariableOrigin,
         .               ) -> &'tcx ty::Const<'tcx> {
        14 ( 0.00%)          self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
         8 ( 0.00%)      }
         .           
         .               pub fn next_const_var_in_universe(
         .                   &self,
         .                   ty: Ty<'tcx>,
         .                   origin: ConstVariableOrigin,
         .                   universe: ty::UniverseIndex,
         .               ) -> &'tcx ty::Const<'tcx> {
         .                   let vid = self
         .                       .inner
         .                       .borrow_mut()
         .                       .const_unification_table()
         .                       .new_key(ConstVarValue { origin, val: ConstVariableValue::Unknown { universe } });
         .                   self.tcx.mk_const_var(vid, ty)
         .               }
         .           
         4 ( 0.00%)      pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
        14 ( 0.00%)          self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
         8 ( 0.00%)              origin,
         .                       val: ConstVariableValue::Unknown { universe: self.universe() },
         .                   })
         6 ( 0.00%)      }
         .           
         .               fn next_int_var_id(&self) -> IntVid {
       690 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
         .               }
         .           
       414 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
         .                   self.tcx.mk_int_var(self.next_int_var_id())
       552 ( 0.00%)      }
         .           
         .               fn next_float_var_id(&self) -> FloatVid {
         .                   self.inner.borrow_mut().float_unification_table().new_key(None)
         .               }
         .           
         .               pub fn next_float_var(&self) -> Ty<'tcx> {
         .                   self.tcx.mk_float_var(self.next_float_var_id())
         .               }
         .           
         .               /// Creates a fresh region variable with the next available index.
         .               /// The variable will be created in the maximum universe created
         .               /// thus far, allowing it to name any region created thus far.
   104,455 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
 3,456,559 ( 0.01%)          self.next_region_var_in_universe(origin, self.universe())
   208,910 ( 0.00%)      }
         .           
         .               /// Creates a fresh region variable with the next available index
         .               /// in the given universe; typically, you can use
         .               /// `next_region_var` and just use the maximal universe.
 1,410,804 ( 0.00%)      pub fn next_region_var_in_universe(
         .                   &self,
         .                   origin: RegionVariableOrigin,
         .                   universe: ty::UniverseIndex,
         .               ) -> ty::Region<'tcx> {
         .                   let region_var =
 9,170,226 ( 0.01%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
 3,527,010 ( 0.01%)          self.tcx.mk_region(ty::ReVar(region_var))
 2,116,206 ( 0.00%)      }
         .           
         .               /// Return the universe that the region `r` was created in.  For
         .               /// most regions (e.g., `'static`, named regions from the user,
         .               /// etc) this is the root universe U0. For inference variables or
         .               /// placeholders, however, it will return the universe which which
         .               /// they are associated.
   149,028 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
         .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
   223,542 ( 0.00%)      }
         .           
         .               /// Number of region variables created so far.
   288,468 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
         .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
   432,702 ( 0.00%)      }
         .           
         .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
   423,746 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
         .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
   847,492 ( 0.00%)      }
         .           
         .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
     7,660 ( 0.00%)      pub fn next_nll_region_var_in_universe(
         .                   &self,
         .                   origin: NllRegionVariableOrigin,
         .                   universe: ty::UniverseIndex,
         .               ) -> ty::Region<'tcx> {
    56,188 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
    15,320 ( 0.00%)      }
         .           
 2,751,424 ( 0.00%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
 1,670,188 ( 0.00%)          match param.kind {
         .                       GenericParamDefKind::Lifetime => {
         .                           // Create a region inference variable for the given
         .                           // region parameter definition.
    24,726 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
         .                       }
         .                       GenericParamDefKind::Type { .. } => {
         .                           // Create a type inference variable for the given
         .                           // type parameter definition. The substitutions are
         .                           // for actual parameters that may be referred to by
         .                           // the default of this type parameter, if it exists.
         .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
         .                           // used in a path such as `Foo::<T, U>::new()` will
         .                           // use an inference variable for `C` with `[T, U]`
         .                           // as the substitutions for the default, `(T, U)`.
 1,274,880 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
         .                               self.universe(),
 1,593,600 ( 0.00%)                      TypeVariableOrigin {
         .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
   318,720 ( 0.00%)                              param.name,
   318,720 ( 0.00%)                              Some(param.def_id),
         .                                   ),
         .                                   span,
         .                               },
         .                           );
         .           
   318,720 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
         .                       }
         .                       GenericParamDefKind::Const { .. } => {
         .                           let origin = ConstVariableOrigin {
         .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
         .                                   param.name,
         .                                   param.def_id,
         .                               ),
         .                               span,
         .                           };
         .                           let const_var_id =
     5,302 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
         .                                   origin,
         .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
         .                               });
       482 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
         .                       }
         .                   }
     3,856 ( 0.00%)      }
         .           
         .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
         .               /// type/region parameter to a fresh inference variable.
 3,569,442 ( 0.01%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
 8,576,044 ( 0.01%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
 2,379,628 ( 0.00%)      }
         .           
         .               /// Returns `true` if errors have been reported since this infcx was
         .               /// created. This is sometimes used as a heuristic to skip
         .               /// reporting errors that often occur as a result of earlier
         .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
         .               /// inference variables, regionck errors).
    72,794 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
         .                   debug!(
         .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
         .                        tainted_by_errors_flag={})",
         .                       self.tcx.sess.err_count(),
         .                       self.err_count_on_creation,
         .                       self.tainted_by_errors_flag.get()
         .                   );
         .           
 1,822,723 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
         .                       return true; // errors reported since this infcx was made
         .                   }
         .                   self.tainted_by_errors_flag.get()
   109,191 ( 0.00%)      }
         .           
         .               /// Set the "tainted by errors" flag to true. We call this when we
         .               /// observe an error from a prior pass.
         .               pub fn set_tainted_by_errors(&self) {
         .                   debug!("set_tainted_by_errors()");
         .                   self.tainted_by_errors_flag.set(true)
         .               }
         .           
         .               /// Process the region constraints and return any any errors that
         .               /// result. After this, no more unification operations should be
         .               /// done -- or the compiler will panic -- but it is legal to use
         .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
 1,829,268 ( 0.00%)      pub fn resolve_regions(
         .                   &self,
         .                   region_context: DefId,
         .                   outlives_env: &OutlivesEnvironment<'tcx>,
         .                   mode: RegionckMode,
         .               ) -> Vec<RegionResolutionError<'tcx>> {
 4,965,156 ( 0.01%)          let (var_infos, data) = {
         .                       let mut inner = self.inner.borrow_mut();
         .                       let inner = &mut *inner;
   261,324 ( 0.00%)              assert!(
   783,972 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
         .                           "region_obligations not empty: {:#?}",
         .                           inner.region_obligations
         .                       );
         .                       inner
         .                           .region_constraint_storage
         .                           .take()
         .                           .expect("regions already resolved")
         .                           .with_log(&mut inner.undo_log)
         .                           .into_infos_and_data()
   261,324 ( 0.00%)          };
         .           
         .                   let region_rels =
   261,324 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
         .           
 2,351,916 ( 0.00%)          let (lexical_region_resolutions, errors) =
 6,271,776 ( 0.01%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
         .           
 1,045,296 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
   261,324 ( 0.00%)          assert!(old_value.is_none());
         .           
         .                   errors
 2,351,916 ( 0.00%)      }
         .           
         .               /// Process the region constraints and report any errors that
         .               /// result. After this, no more unification operations should be
         .               /// done -- or the compiler will panic -- but it is legal to use
         .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
 2,613,240 ( 0.00%)      pub fn resolve_regions_and_report_errors(
         .                   &self,
         .                   region_context: DefId,
         .                   outlives_env: &OutlivesEnvironment<'tcx>,
         .                   mode: RegionckMode,
         .               ) {
   522,648 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
         .           
   783,972 ( 0.00%)          if !self.is_tainted_by_errors() {
         .                       // As a heuristic, just skip reporting region errors
         .                       // altogether if other errors have been reported while
         .                       // this infcx was in use.  This is totally hokey but
         .                       // otherwise we have a hard time separating legit region
         .                       // errors from silly ones.
   522,648 ( 0.00%)              self.report_region_errors(&errors);
         .                   }
 1,306,620 ( 0.00%)      }
         .           
         .               /// Obtains (and clears) the current set of region
         .               /// constraints. The inference context is still usable: further
         .               /// unifications will simply add new constraints.
         .               ///
         .               /// This method is not meant to be used with normal lexical region
         .               /// resolution. Rather, it is used in the NLL mode as a kind of
         .               /// interim hack: basically we run normal type-check and generate
-- line 1307 ----------------------------------------
-- line 1319 ----------------------------------------
         .               }
         .           
         .               /// Gives temporary access to the region constraint data.
         .               pub fn with_region_constraints<R>(
         .                   &self,
         .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
         .               ) -> R {
         .                   let mut inner = self.inner.borrow_mut();
    53,476 ( 0.00%)          op(inner.unwrap_region_constraints().data())
         .               }
         .           
         .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
         .                   let mut inner = self.inner.borrow_mut();
         .                   let inner = &mut *inner;
         .                   inner
         .                       .region_constraint_storage
         .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
         .                       .var_origin(vid)
         .               }
         .           
         .               /// Takes ownership of the list of variable regions. This implies
         .               /// that all the region constraints have already been taken, and
         .               /// hence that `resolve_regions_and_report_errors` can never be
         .               /// called. This is used only during NLL processing to "hand off" ownership
         .               /// of the set of region variables into the NLL region context.
   180,025 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
         .                   let mut inner = self.inner.borrow_mut();
   684,095 ( 0.00%)          let (var_infos, data) = inner
         .                       .region_constraint_storage
         .                       .take()
         .                       .expect("regions already resolved")
         .                       .with_log(&mut inner.undo_log)
    36,005 ( 0.00%)              .into_infos_and_data();
    36,005 ( 0.00%)          assert!(data.is_empty());
         .                   var_infos
   288,040 ( 0.00%)      }
         .           
         .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
         .                   self.resolve_vars_if_possible(t).to_string()
         .               }
         .           
         .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
         .               /// universe index of `TyVar(vid)`.
   134,802 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
         .                   use self::type_variable::TypeVariableValue;
         .           
   404,406 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
         .                       TypeVariableValue::Known { value } => Ok(value),
         .                       TypeVariableValue::Unknown { universe } => Err(universe),
         .                   }
   471,807 ( 0.00%)      }
         .           
         .               /// Resolve any type variables found in `value` -- but only one
         .               /// level.  So, if the variable `?X` is bound to some type
         .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
         .               /// itself be bound to a type).
         .               ///
         .               /// Useful when you only need to inspect the outermost level of
         .               /// the type and don't care about nested types (or perhaps you
         .               /// will be resolving them as well, e.g. in a loop).
         .               pub fn shallow_resolve<T>(&self, value: T) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
 3,236,179 ( 0.00%)          value.fold_with(&mut ShallowResolver { infcx: self })
         .               }
         .           
   214,932 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
         .                   self.inner.borrow_mut().type_variables().root_var(var)
   322,398 ( 0.00%)      }
         .           
         .               /// Where possible, replaces type/const variables in
         .               /// `value` with their final value. Note that region variables
         .               /// are unaffected. If a type/const variable has not been unified, it
         .               /// is left as is. This is an idempotent operation that does
         .               /// not affect inference state in any way and so you can do it
         .               /// at will.
 5,745,864 ( 0.01%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
 3,591,124 ( 0.01%)          if !value.needs_infer() {
 8,191,325 ( 0.01%)              return value; // Avoid duplicated subst-folding.
         .                   }
 2,575,744 ( 0.00%)          let mut r = resolve::OpportunisticVarResolver::new(self);
 4,073,344 ( 0.01%)          value.fold_with(&mut r)
 5,171,748 ( 0.01%)      }
         .           
         .               /// Returns the first unresolved variable contained in `T`. In the
         .               /// process of visiting `T`, this will resolve (where possible)
         .               /// type variables in `T`, but it never constructs the final,
         .               /// resolved type, so it's more efficient than
         .               /// `resolve_vars_if_possible()`.
         .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
         .               where
-- line 1415 ----------------------------------------
-- line 1490 ----------------------------------------
         .                   expected: &'tcx ty::Const<'tcx>,
         .                   actual: &'tcx ty::Const<'tcx>,
         .                   err: TypeError<'tcx>,
         .               ) -> DiagnosticBuilder<'tcx> {
         .                   let trace = TypeTrace::consts(cause, true, expected, actual);
         .                   self.report_and_explain_type_error(trace, &err)
         .               }
         .           
   260,370 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
         .                   &self,
         .                   span: Span,
         .                   lbrct: LateBoundRegionConversionTime,
         .                   value: ty::Binder<'tcx, T>,
         .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   let fld_r =
 1,597,747 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
         .                   let fld_t = |_| {
         .                       self.next_ty_var(TypeVariableOrigin {
         .                           kind: TypeVariableOriginKind::MiscVariable,
         .                           span,
         .                       })
         .                   };
         .                   let fld_c = |_, ty| {
         .                       self.next_const_var(
         .                           ty,
         .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
         .                       )
         .                   };
 3,668,453 ( 0.01%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
   173,580 ( 0.00%)      }
         .           
         .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
   114,064 ( 0.00%)      pub fn verify_generic_bound(
         .                   &self,
         .                   origin: SubregionOrigin<'tcx>,
         .                   kind: GenericKind<'tcx>,
         .                   a: ty::Region<'tcx>,
         .                   bound: VerifyBound<'tcx>,
         .               ) {
         .                   debug!("verify_generic_bound({:?}, {:?} <: {:?})", kind, a, bound);
         .           
    42,774 ( 0.00%)          self.inner
         .                       .borrow_mut()
         .                       .unwrap_region_constraints()
   242,386 ( 0.00%)              .verify_generic_bound(origin, kind, a, bound);
    99,806 ( 0.00%)      }
         .           
         .               /// Obtains the latest type of the given closure; this may be a
         .               /// closure in the current function, in which case its
         .               /// `ClosureKind` may not yet be known.
     5,316 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
    10,632 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
         .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
     7,974 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
         .               }
         .           
         .               /// Clears the selection, evaluation, and projection caches. This is useful when
         .               /// repeatedly attempting to select an `Obligation` while changing only
         .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
         .               pub fn clear_caches(&self) {
         .                   self.selection_cache.clear();
         .                   self.evaluation_cache.clear();
         .                   self.inner.borrow_mut().projection_cache().clear();
         .               }
         .           
         .               pub fn universe(&self) -> ty::UniverseIndex {
 7,730,817 ( 0.01%)          self.universe.get()
 1,628,357 ( 0.00%)      }
         .           
         .               /// Creates and return a fresh universe that extends all previous
         .               /// universes. Updates `self.universe` to that new universe.
     7,646 ( 0.00%)      pub fn create_next_universe(&self) -> ty::UniverseIndex {
    11,214 ( 0.00%)          let u = self.universe.get().next_universe();
         .                   self.universe.set(u);
         .                   u
     7,646 ( 0.00%)      }
         .           
         .               /// Resolves and evaluates a constant.
         .               ///
         .               /// The constant can be located on a trait like `<A as B>::C`, in which case the given
         .               /// substitutions and environment are used to resolve the constant. Alternatively if the
         .               /// constant has generic parameters in scope the substitutions are used to evaluate the value of
         .               /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count
         .               /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still
-- line 1576 ----------------------------------------
-- line 1606 ----------------------------------------
         .                   // variables, thus we don't need to substitute back the original values.
         .                   self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
         .               }
         .           
         .               /// If `typ` is a type variable of some kind, resolve it one level
         .               /// (but do not resolve types found in the result). If `typ` is
         .               /// not a type variable, just return it unmodified.
         .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
39,165,240 ( 0.06%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
19,882,394 ( 0.03%)          match *typ.kind() {
         .                       ty::Infer(ty::TyVar(v)) => {
         .                           // Not entirely obvious: if `typ` is a type variable,
         .                           // it can be resolved to an int/float variable, which
         .                           // can then be recursively resolved, hence the
         .                           // recursion. Note though that we prevent type
         .                           // variables from unifying to other type variables
         .                           // directly (though they may be embedded
         .                           // structurally), and we prevent cycles in any case,
         .                           // so this recursion should always be of very limited
         .                           // depth.
         .                           //
         .                           // Note: if these two lines are combined into one we get
         .                           // dynamic borrow errors on `self.inner`.
10,535,336 ( 0.02%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
         .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
         .                       }
         .           
     9,844 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
         .                           .inner
         .                           .borrow_mut()
         .                           .int_unification_table()
         .                           .probe_value(v)
     2,865 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
         .                           .unwrap_or(typ),
         .           
         .                       ty::Infer(ty::FloatVar(v)) => self
         .                           .inner
         .                           .borrow_mut()
         .                           .float_unification_table()
         .                           .probe_value(v)
         .                           .map(|v| v.to_type(self.tcx))
         .                           .unwrap_or(typ),
         .           
         .                       _ => typ,
         .                   }
44,060,895 ( 0.06%)      }
         .           
         .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
         .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
         .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
         .               ///
         .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
         .               /// inlined, despite being large, because it has only two call sites that
         .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
         .               #[inline(always)]
         .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
         .                   match infer_var {
         .                       TyOrConstInferVar::Ty(v) => {
         .                           use self::type_variable::TypeVariableValue;
         .           
         .                           // If `inlined_probe` returns a `Known` value, it never equals
         .                           // `ty::Infer(ty::TyVar(v))`.
 4,987,201 ( 0.01%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
         .                               TypeVariableValue::Unknown { .. } => false,
         .                               TypeVariableValue::Known { .. } => true,
         .                           }
         .                       }
         .           
         .                       TyOrConstInferVar::TyInt(v) => {
         .                           // If `inlined_probe_value` returns a value it's always a
         .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
         .                           // `ty::Infer(_)`.
       736 ( 0.00%)                  self.inner.borrow_mut().int_unification_table().inlined_probe_value(v).is_some()
         .                       }
         .           
         .                       TyOrConstInferVar::TyFloat(v) => {
         .                           // If `probe_value` returns a value it's always a
         .                           // `ty::Float(_)`, which never matches a `ty::Infer(_)`.
         .                           //
         .                           // Not `inlined_probe_value(v)` because this call site is colder.
         .                           self.inner.borrow_mut().float_unification_table().probe_value(v).is_some()
-- line 1688 ----------------------------------------
-- line 1716 ----------------------------------------
         .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
         .               Const(ConstVid<'tcx>),
         .           }
         .           
         .           impl<'tcx> TyOrConstInferVar<'tcx> {
         .               /// Tries to extract an inference variable from a type or a constant, returns `None`
         .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
         .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
   118,525 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
         .                   match arg.unpack() {
         .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
         .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
         .                       GenericArgKind::Lifetime(_) => None,
         .                   }
   118,525 ( 0.00%)      }
         .           
         .               /// Tries to extract an inference variable from a type, returns `None`
         .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
     2,044 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
 1,085,011 ( 0.00%)          match *ty.kind() {
   241,038 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
        96 ( 0.00%)              ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
         .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
         .                       _ => None,
         .                   }
     2,044 ( 0.00%)      }
         .           
         .               /// Tries to extract an inference variable from a constant, returns `None`
         .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
         .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
         .                   match ct.val {
         .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
         .                       _ => None,
         .                   }
-- line 1749 ----------------------------------------
-- line 1755 ----------------------------------------
         .           }
         .           
         .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
         .                   self.infcx.tcx
         .               }
         .           
         .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
 7,468,104 ( 0.01%)          self.infcx.shallow_resolve_ty(ty)
         .               }
         .           
    24,780 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    13,620 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
     3,075 ( 0.00%)              self.infcx
         .                           .inner
         .                           .borrow_mut()
         .                           .const_unification_table()
     1,845 ( 0.00%)                  .probe_value(*vid)
         .                           .val
         .                           .known()
         .                           .unwrap_or(ct)
         .                   } else {
         .                       ct
         .                   }
    30,975 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TypeTrace<'tcx> {
         .               pub fn span(&self) -> Span {
        36 ( 0.00%)          self.cause.span
         .               }
         .           
         .               pub fn types(
         .                   cause: &ObligationCause<'tcx>,
         .                   a_is_expected: bool,
         .                   a: Ty<'tcx>,
         .                   b: Ty<'tcx>,
         .               ) -> TypeTrace<'tcx> {
-- line 1792 ----------------------------------------
-- line 1800 ----------------------------------------
         .                   b: &'tcx ty::Const<'tcx>,
         .               ) -> TypeTrace<'tcx> {
         .                   TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }
         .               }
         .           }
         .           
         .           impl<'tcx> SubregionOrigin<'tcx> {
         .               pub fn span(&self) -> Span {
        90 ( 0.00%)          match *self {
        18 ( 0.00%)              Subtype(ref a) => a.span(),
         .                       RelateObjectBound(a) => a,
         .                       RelateParamBound(a, ..) => a,
         .                       RelateRegionParamBound(a) => a,
         .                       Reborrow(a) => a,
         .                       ReborrowUpvar(a, _) => a,
         .                       DataBorrowed(_, a) => a,
         .                       ReferenceOutlivesReferent(_, a) => a,
         .                       CompareImplMethodObligation { span, .. } => span,
-- line 1817 ----------------------------------------
-- line 1818 ----------------------------------------
         .                       CompareImplTypeObligation { span, .. } => span,
         .                   }
         .               }
         .           
         .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
         .               where
         .                   F: FnOnce() -> Self,
         .               {
   180,779 ( 0.00%)          match *cause.code() {
    43,679 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
   218,395 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
         .                       }
         .           
         .                       traits::ObligationCauseCode::CompareImplMethodObligation {
         .                           impl_item_def_id,
         .                           trait_item_def_id,
         .                       } => SubregionOrigin::CompareImplMethodObligation {
         .                           span: cause.span,
         .                           impl_item_def_id,
-- line 1836 ----------------------------------------

33,194,380 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs
--------------------------------------------------------------------------------
Ir                  

-- line 59 ----------------------------------------
         .                   &mut self,
         .                   def_id: DefId,
         .                   kind: &str,
         .                   descr: &dyn fmt::Display,
         .               ) -> ControlFlow<Self::BreakTy>;
         .           
         .               /// Not overridden, but used to actually visit types and traits.
         .               fn skeleton(&mut self) -> DefIdVisitorSkeleton<'_, 'tcx, Self> {
 5,525,889 ( 0.01%)          DefIdVisitorSkeleton {
         .                       def_id_visitor: self,
         .                       visited_opaque_tys: Default::default(),
         .                       dummy: Default::default(),
         .                   }
         .               }
    25,596 ( 0.00%)      fn visit(&mut self, ty_fragment: impl TypeFoldable<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   ty_fragment.visit_with(&mut self.skeleton())
    42,660 ( 0.00%)      }
    12,570 ( 0.00%)      fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   self.skeleton().visit_trait(trait_ref)
    12,570 ( 0.00%)      }
         .               fn visit_projection_ty(
         .                   &mut self,
         .                   projection: ty::ProjectionTy<'tcx>,
         .               ) -> ControlFlow<Self::BreakTy> {
        88 ( 0.00%)          self.skeleton().visit_projection_ty(projection)
         .               }
         .               fn visit_predicates(
         .                   &mut self,
         .                   predicates: ty::GenericPredicates<'tcx>,
         .               ) -> ControlFlow<Self::BreakTy> {
   148,733 ( 0.00%)          self.skeleton().visit_predicates(predicates)
         .               }
         .           }
         .           
         .           struct DefIdVisitorSkeleton<'v, 'tcx, V: ?Sized> {
         .               def_id_visitor: &'v mut V,
         .               visited_opaque_tys: FxHashSet<DefId>,
         .               dummy: PhantomData<TyCtxt<'tcx>>,
         .           }
         .           
         .           impl<'tcx, V> DefIdVisitorSkeleton<'_, 'tcx, V>
         .           where
         .               V: DefIdVisitor<'tcx> + ?Sized,
         .           {
         .               fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<V::BreakTy> {
     2,095 ( 0.00%)          let TraitRef { def_id, substs } = trait_ref;
   263,918 ( 0.00%)          self.def_id_visitor.visit_def_id(def_id, "trait", &trait_ref.print_only_trait_path())?;
     2,095 ( 0.00%)          if self.def_id_visitor.shallow() { ControlFlow::CONTINUE } else { substs.visit_with(self) }
         .               }
         .           
    57,480 ( 0.00%)      fn visit_projection_ty(
         .                   &mut self,
         .                   projection: ty::ProjectionTy<'tcx>,
         .               ) -> ControlFlow<V::BreakTy> {
    45,984 ( 0.00%)          let (trait_ref, assoc_substs) =
    11,496 ( 0.00%)              projection.trait_ref_and_own_substs(self.def_id_visitor.tcx());
         .                   self.visit_trait(trait_ref)?;
         .                   if self.def_id_visitor.shallow() {
         .                       ControlFlow::CONTINUE
         .                   } else {
         .                       assoc_substs.iter().try_for_each(|subst| subst.visit_with(self))
         .                   }
    51,732 ( 0.00%)      }
         .           
         .               fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<V::BreakTy> {
     5,186 ( 0.00%)          match predicate.kind().skip_binder() {
         .                       ty::PredicateKind::Trait(ty::TraitPredicate {
         .                           trait_ref,
         .                           constness: _,
         .                           polarity: _,
         .                       }) => self.visit_trait(trait_ref),
         .                       ty::PredicateKind::Projection(ty::ProjectionPredicate { projection_ty, term }) => {
       132 ( 0.00%)                  term.visit_with(self)?;
       330 ( 0.00%)                  self.visit_projection_ty(projection_ty)
         .                       }
         .                       ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(ty, _region)) => {
         .                           ty.visit_with(self)
         .                       }
         .                       ty::PredicateKind::RegionOutlives(..) => ControlFlow::CONTINUE,
         .                       ty::PredicateKind::ConstEvaluatable(uv)
         .                           if self.def_id_visitor.tcx().features().generic_const_exprs =>
         .                       {
-- line 140 ----------------------------------------
-- line 157 ----------------------------------------
         .                       ACNode::Leaf(leaf) => self.visit_const(leaf),
         .                       ACNode::Cast(_, _, ty) => self.visit_ty(ty),
         .                       ACNode::Binop(..) | ACNode::UnaryOp(..) | ACNode::FunctionCall(_, _) => {
         .                           ControlFlow::CONTINUE
         .                       }
         .                   })
         .               }
         .           
 1,041,131 ( 0.00%)      fn visit_predicates(
         .                   &mut self,
         .                   predicates: ty::GenericPredicates<'tcx>,
         .               ) -> ControlFlow<V::BreakTy> {
         .                   let ty::GenericPredicates { parent: _, predicates } = predicates;
         .                   predicates.iter().try_for_each(|&(predicate, _span)| self.visit_predicate(predicate))
 1,189,864 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx, V> TypeVisitor<'tcx> for DefIdVisitorSkeleton<'_, 'tcx, V>
         .           where
         .               V: DefIdVisitor<'tcx> + ?Sized,
         .           {
         .               type BreakTy = V::BreakTy;
         .           
38,879,849 ( 0.06%)      fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<V::BreakTy> {
 4,138,553 ( 0.01%)          let tcx = self.def_id_visitor.tcx();
         .                   // InternalSubsts are not visited here because they are visited below in `super_visit_with`.
20,599,245 ( 0.03%)          match *ty.kind() {
 6,499,933 ( 0.01%)              ty::Adt(&ty::AdtDef { did: def_id, .. }, ..)
         .                       | ty::Foreign(def_id)
         .                       | ty::FnDef(def_id, ..)
         .                       | ty::Closure(def_id, ..)
         .                       | ty::Generator(def_id, ..) => {
21,831,146 ( 0.03%)                  self.def_id_visitor.visit_def_id(def_id, "type", &ty)?;
         .                           if self.def_id_visitor.shallow() {
         .                               return ControlFlow::CONTINUE;
         .                           }
         .                           // Default type visitor doesn't visit signatures of fn types.
         .                           // Something like `fn() -> Priv {my_func}` is considered a private type even if
         .                           // `my_func` is public, so we need to visit signatures.
 5,877,208 ( 0.01%)                  if let ty::FnDef(..) = ty.kind() {
         .                               tcx.fn_sig(def_id).visit_with(self)?;
         .                           }
         .                           // Inherent static methods don't have self type in substs.
         .                           // Something like `fn() {my_method}` type of the method
         .                           // `impl Pub<Priv> { pub fn my_method() {} }` is considered a private type,
         .                           // so we need to visit the self type additionally.
12,266,376 ( 0.02%)                  if let Some(assoc_item) = tcx.opt_associated_item(def_id) {
   584,758 ( 0.00%)                      if let ty::ImplContainer(impl_def_id) = assoc_item.container {
     6,640 ( 0.00%)                          tcx.type_of(impl_def_id).visit_with(self)?;
         .                               }
         .                           }
         .                       }
    11,320 ( 0.00%)              ty::Projection(proj) => {
         .                           if self.def_id_visitor.skip_assoc_tys() {
         .                               // Visitors searching for minimal visibility/reachability want to
         .                               // conservatively approximate associated types like `<Type as Trait>::Alias`
         .                               // as visible/reachable even if both `Type` and `Trait` are private.
         .                               // Ideally, associated types should be substituted in the same way as
         .                               // free type aliases, but this isn't done yet.
         .                               return ControlFlow::CONTINUE;
         .                           }
         .                           // This will also visit substs if necessary, so we don't need to recurse.
    56,242 ( 0.00%)                  return self.visit_projection_ty(proj);
         .                       }
   451,955 ( 0.00%)              ty::Dynamic(predicates, ..) => {
         .                           // All traits in the list are considered the "primary" part of the type
         .                           // and are visited by shallow visitors.
 2,346,432 ( 0.00%)                  for predicate in predicates {
 2,310,004 ( 0.00%)                      let trait_ref = match predicate.skip_binder() {
 1,506,552 ( 0.00%)                          ty::ExistentialPredicate::Trait(trait_ref) => trait_ref,
         .                                   ty::ExistentialPredicate::Projection(proj) => proj.trait_ref(tcx),
         .                                   ty::ExistentialPredicate::AutoTrait(def_id) => {
         .                                       ty::ExistentialTraitRef { def_id, substs: InternalSubsts::empty() }
         .                                   }
         .                               };
   502,184 ( 0.00%)                      let ty::ExistentialTraitRef { def_id, substs: _ } = trait_ref;
 2,824,276 ( 0.00%)                      self.def_id_visitor.visit_def_id(def_id, "trait", &trait_ref)?;
         .                           }
         .                       }
         .                       ty::Opaque(def_id, ..) => {
         .                           // Skip repeated `Opaque`s to avoid infinite recursion.
         .                           if self.visited_opaque_tys.insert(def_id) {
         .                               // The intent is to treat `impl Trait1 + Trait2` identically to
         .                               // `dyn Trait1 + Trait2`. Therefore we ignore def-id of the opaque type itself
         .                               // (it either has no visibility, or its visibility is insignificant, like
-- line 241 ----------------------------------------
-- line 270 ----------------------------------------
         .                       ty::Bound(..) | ty::Placeholder(..) | ty::Infer(..) => {
         .                           bug!("unexpected type: {:?}", ty)
         .                       }
         .                   }
         .           
         .                   if self.def_id_visitor.shallow() {
         .                       ControlFlow::CONTINUE
         .                   } else {
 9,872,024 ( 0.01%)              ty.super_visit_with(self)
         .                   }
34,541,900 ( 0.05%)      }
         .           
         .               fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {
    35,718 ( 0.00%)          self.visit_ty(c.ty)?;
     5,953 ( 0.00%)          let tcx = self.def_id_visitor.tcx();
    41,671 ( 0.00%)          if let Ok(Some(ct)) = AbstractConst::from_const(tcx, c) {
         .                       self.visit_abstract_const_expr(tcx, ct)?;
         .                   }
         .                   ControlFlow::CONTINUE
         .               }
         .           }
         .           
         .           fn min(vis1: ty::Visibility, vis2: ty::Visibility, tcx: TyCtxt<'_>) -> ty::Visibility {
    14,589 ( 0.00%)      if vis1.is_at_least(vis2, tcx) { vis2 } else { vis1 }
         .           }
         .           
         .           ////////////////////////////////////////////////////////////////////////////////
         .           /// Visitor used to determine if pub(restricted) is used anywhere in the crate.
         .           ///
         .           /// This is done so that `private_in_public` warnings can be turned into hard errors
         .           /// in crates that have been updated to use pub(restricted).
         .           ////////////////////////////////////////////////////////////////////////////////
-- line 301 ----------------------------------------
-- line 303 ----------------------------------------
         .               tcx: TyCtxt<'tcx>,
         .               has_pub_restricted: bool,
         .           }
         .           
         .           impl<'tcx> Visitor<'tcx> for PubRestrictedVisitor<'tcx> {
         .               type NestedFilter = nested_filter::All;
         .           
         .               fn nested_visit_map(&mut self) -> Self::Map {
    74,772 ( 0.00%)          self.tcx.hir()
         .               }
         .               fn visit_vis(&mut self, vis: &'tcx hir::Visibility<'tcx>) {
   117,015 ( 0.00%)          self.has_pub_restricted = self.has_pub_restricted || vis.node.is_pub_restricted();
         .               }
         .           }
         .           
         .           ////////////////////////////////////////////////////////////////////////////////
         .           /// Visitor used to determine impl visibility and reachability.
         .           ////////////////////////////////////////////////////////////////////////////////
         .           
         .           struct FindMin<'a, 'tcx, VL: VisibilityLike> {
-- line 322 ----------------------------------------
-- line 336 ----------------------------------------
         .                   true
         .               }
         .               fn visit_def_id(
         .                   &mut self,
         .                   def_id: DefId,
         .                   _kind: &str,
         .                   _descr: &dyn fmt::Display,
         .               ) -> ControlFlow<Self::BreakTy> {
   121,133 ( 0.00%)          self.min = VL::new_min(self, def_id);
         .                   ControlFlow::CONTINUE
         .               }
         .           }
         .           
         .           trait VisibilityLike: Sized {
         .               const MAX: Self;
         .               const SHALLOW: bool = false;
         .               fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self;
         .           
         .               // Returns an over-approximation (`skip_assoc_tys` = true) of visibility due to
         .               // associated types for which we can't determine visibility precisely.
    59,724 ( 0.00%)      fn of_impl(def_id: LocalDefId, tcx: TyCtxt<'_>, access_levels: &AccessLevels) -> Self {
    27,729 ( 0.00%)          let mut find = FindMin { tcx, access_levels, min: Self::MAX };
     8,532 ( 0.00%)          find.visit(tcx.type_of(def_id));
    25,596 ( 0.00%)          if let Some(trait_ref) = tcx.impl_trait_ref(def_id) {
     2,095 ( 0.00%)              find.visit_trait(trait_ref);
         .                   }
     4,494 ( 0.00%)          find.min
    68,256 ( 0.00%)      }
         .           }
         .           impl VisibilityLike for ty::Visibility {
         .               const MAX: Self = ty::Visibility::Public;
   100,779 ( 0.00%)      fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {
    43,191 ( 0.00%)          min(find.tcx.visibility(def_id), find.min, find.tcx)
   143,970 ( 0.00%)      }
         .           }
         .           impl VisibilityLike for Option<AccessLevel> {
         .               const MAX: Self = Some(AccessLevel::Public);
         .               // Type inference is very smart sometimes.
         .               // It can make an impl reachable even some components of its type or trait are unreachable.
         .               // E.g. methods of `impl ReachableTrait<UnreachableTy> for ReachableTy<UnreachableTy> { ... }`
         .               // can be usable from other crates (#57264). So we skip substs when calculating reachability
         .               // and consider an impl reachable if its "shallow" type and trait are reachable.
         .               //
         .               // The assumption we make here is that type-inference won't let you use an impl without knowing
         .               // both "shallow" version of its self type and "shallow" version of its trait if it exists
         .               // (which require reaching the `DefId`s in them).
         .               const SHALLOW: bool = true;
    37,764 ( 0.00%)      fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {
         .                   cmp::min(
    37,764 ( 0.00%)              if let Some(def_id) = def_id.as_local() {
    12,912 ( 0.00%)                  find.access_levels.map.get(&def_id).copied()
         .                       } else {
         .                           Self::MAX
         .                       },
    30,720 ( 0.00%)              find.min,
         .                   )
    50,352 ( 0.00%)      }
         .           }
         .           
         .           ////////////////////////////////////////////////////////////////////////////////
         .           /// The embargo visitor, used to determine the exports of the AST.
         .           ////////////////////////////////////////////////////////////////////////////////
         .           
         .           struct EmbargoVisitor<'tcx> {
         .               tcx: TyCtxt<'tcx>,
-- line 400 ----------------------------------------
-- line 422 ----------------------------------------
         .           
         .           struct ReachEverythingInTheInterfaceVisitor<'a, 'tcx> {
         .               access_level: Option<AccessLevel>,
         .               item_def_id: LocalDefId,
         .               ev: &'a mut EmbargoVisitor<'tcx>,
         .           }
         .           
         .           impl<'tcx> EmbargoVisitor<'tcx> {
   947,514 ( 0.00%)      fn get(&self, def_id: LocalDefId) -> Option<AccessLevel> {
         .                   self.access_levels.map.get(&def_id).copied()
   947,514 ( 0.00%)      }
         .           
         .               fn update_with_hir_id(
         .                   &mut self,
         .                   hir_id: hir::HirId,
         .                   level: Option<AccessLevel>,
         .               ) -> Option<AccessLevel> {
     2,406 ( 0.00%)          let def_id = self.tcx.hir().local_def_id(hir_id);
         .                   self.update(def_id, level)
         .               }
         .           
         .               /// Updates node level and returns the updated level.
         .               fn update(&mut self, def_id: LocalDefId, level: Option<AccessLevel>) -> Option<AccessLevel> {
   992,775 ( 0.00%)          let old_level = self.get(def_id);
         .                   // Accessibility levels can only grow.
         .                   if level > old_level {
         .                       self.access_levels.map.insert(def_id, level.unwrap());
    37,464 ( 0.00%)              self.changed = true;
         .                       level
         .                   } else {
         .                       old_level
         .                   }
         .               }
         .           
         .               fn reach(
         .                   &mut self,
-- line 457 ----------------------------------------
-- line 458 ----------------------------------------
         .                   def_id: LocalDefId,
         .                   access_level: Option<AccessLevel>,
         .               ) -> ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {
         .                   ReachEverythingInTheInterfaceVisitor {
         .                       access_level: cmp::min(access_level, Some(AccessLevel::Reachable)),
         .                       item_def_id: def_id,
         .                       ev: self,
         .                   }
   444,591 ( 0.00%)      }
         .           
         .               // We have to make sure that the items that macros might reference
         .               // are reachable, since they might be exported transitively.
         .               fn update_reachability_from_macro(&mut self, local_def_id: LocalDefId, md: &MacroDef) {
         .                   // Non-opaque macros cannot make other items more accessible than they already are.
         .           
       147 ( 0.00%)          let hir_id = self.tcx.hir().local_def_id_to_hir_id(local_def_id);
       441 ( 0.00%)          let attrs = self.tcx.hir().attrs(hir_id);
     1,029 ( 0.00%)          if attr::find_transparency(attrs, md.macro_rules).0 != Transparency::Opaque {
         .                       return;
         .                   }
         .           
         .                   let item_def_id = local_def_id.to_def_id();
         .                   let macro_module_def_id =
         .                       ty::DefIdTree::parent(self.tcx, item_def_id).unwrap().expect_local();
         .                   if self.tcx.hir().opt_def_kind(macro_module_def_id) != Some(DefKind::Mod) {
         .                       // The macro's parent doesn't correspond to a `mod`, return early (#63164, #65252).
-- line 483 ----------------------------------------
-- line 630 ----------------------------------------
         .           }
         .           
         .           impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {
         .               type NestedFilter = nested_filter::All;
         .           
         .               /// We want to visit items in the context of their containing
         .               /// module and so forth, so supply a crate for doing a deep walk.
         .               fn nested_visit_map(&mut self) -> Self::Map {
   224,316 ( 0.00%)          self.tcx.hir()
         .               }
         .           
    80,271 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    17,838 ( 0.00%)          let item_level = match item.kind {
         .                       hir::ItemKind::Impl { .. } => {
         .                           let impl_level =
    38,394 ( 0.00%)                      Option::<AccessLevel>::of_impl(item.def_id, self.tcx, &self.access_levels);
     6,399 ( 0.00%)                  self.update(item.def_id, impl_level)
         .                       }
    10,080 ( 0.00%)              _ => self.get(item.def_id),
         .                   };
         .           
         .                   // Update levels of nested things.
    46,632 ( 0.00%)          match item.kind {
         .                       hir::ItemKind::Enum(ref def, _) => {
        57 ( 0.00%)                  for variant in def.variants {
       513 ( 0.00%)                      let variant_level = self.update_with_hir_id(variant.id, item_level);
       684 ( 0.00%)                      if let Some(ctor_hir_id) = variant.data.ctor_hir_id() {
         .                                   self.update_with_hir_id(ctor_hir_id, item_level);
         .                               }
       342 ( 0.00%)                      for field in variant.data.fields() {
         .                                   self.update_with_hir_id(field.hir_id, variant_level);
         .                               }
         .                           }
         .                       }
         .                       hir::ItemKind::Impl(ref impl_) => {
    19,197 ( 0.00%)                  for impl_item_ref in impl_.items {
   140,481 ( 0.00%)                      if impl_.of_trait.is_some()
     2,598 ( 0.00%)                          || self.tcx.visibility(impl_item_ref.id.def_id) == ty::Visibility::Public
         .                               {
   213,966 ( 0.00%)                          self.update(impl_item_ref.id.def_id, item_level);
         .                               }
         .                           }
         .                       }
        81 ( 0.00%)              hir::ItemKind::Trait(.., trait_item_refs) => {
         .                           for trait_item_ref in trait_item_refs {
       288 ( 0.00%)                      self.update(trait_item_ref.id.def_id, item_level);
         .                           }
         .                       }
         .                       hir::ItemKind::Struct(ref def, _) | hir::ItemKind::Union(ref def, _) => {
     1,224 ( 0.00%)                  if let Some(ctor_hir_id) = def.ctor_hir_id() {
         .                               self.update_with_hir_id(ctor_hir_id, item_level);
         .                           }
       612 ( 0.00%)                  for field in def.fields() {
     1,956 ( 0.00%)                      if field.vis.node.is_pub() {
        60 ( 0.00%)                          self.update_with_hir_id(field.hir_id, item_level);
         .                               }
         .                           }
         .                       }
         .                       hir::ItemKind::Macro(ref macro_def) => {
       294 ( 0.00%)                  self.update_reachability_from_macro(item.def_id, macro_def);
         .                       }
         .                       hir::ItemKind::ForeignMod { items, .. } => {
         .                           for foreign_item in items {
         .                               if self.tcx.visibility(foreign_item.id.def_id) == ty::Visibility::Public {
         .                                   self.update(foreign_item.id.def_id, item_level);
         .                               }
         .                           }
         .                       }
-- line 697 ----------------------------------------
-- line 704 ----------------------------------------
         .                       | hir::ItemKind::TyAlias(..)
         .                       | hir::ItemKind::Mod(..)
         .                       | hir::ItemKind::TraitAlias(..)
         .                       | hir::ItemKind::Fn(..)
         .                       | hir::ItemKind::ExternCrate(..) => {}
         .                   }
         .           
         .                   // Mark all items in interfaces of reachable items as reachable.
    44,595 ( 0.00%)          match item.kind {
         .                       // The interface is empty.
         .                       hir::ItemKind::Macro(..) | hir::ItemKind::ExternCrate(..) => {}
         .                       // All nested items are checked by `visit_item`.
         .                       hir::ItemKind::Mod(..) => {}
         .                       // Handled in the access level of in rustc_resolve
         .                       hir::ItemKind::Use(..) => {}
         .                       // The interface is empty.
         .                       hir::ItemKind::GlobalAsm(..) => {}
-- line 720 ----------------------------------------
-- line 732 ----------------------------------------
         .                               self.reach(item.def_id, exist_level).generics().predicates().ty();
         .                           }
         .                       }
         .                       // Visit everything.
         .                       hir::ItemKind::Const(..)
         .                       | hir::ItemKind::Static(..)
         .                       | hir::ItemKind::Fn(..)
         .                       | hir::ItemKind::TyAlias(..) => {
       285 ( 0.00%)                  if item_level.is_some() {
        12 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates().ty();
         .                           }
         .                       }
        48 ( 0.00%)              hir::ItemKind::Trait(.., trait_item_refs) => {
        27 ( 0.00%)                  if item_level.is_some() {
       192 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates();
         .           
         .                               for trait_item_ref in trait_item_refs {
       198 ( 0.00%)                          let mut reach = self.reach(trait_item_ref.id.def_id, item_level);
       396 ( 0.00%)                          reach.generics().predicates();
         .           
        99 ( 0.00%)                          if trait_item_ref.kind == AssocItemKind::Type
         .                                       && !trait_item_ref.defaultness.has_value()
         .                                   {
         .                                       // No type to visit.
         .                                   } else {
       198 ( 0.00%)                              reach.ty();
         .                                   }
         .                               }
         .                           }
         .                       }
         .                       hir::ItemKind::TraitAlias(..) => {
         .                           if item_level.is_some() {
         .                               self.reach(item.def_id, item_level).generics().predicates();
         .                           }
         .                       }
         .                       // Visit everything except for private impl items.
         .                       hir::ItemKind::Impl(ref impl_) => {
     6,399 ( 0.00%)                  if item_level.is_some() {
    61,080 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates().ty().trait_ref();
         .           
     6,108 ( 0.00%)                      for impl_item_ref in impl_.items {
   318,933 ( 0.00%)                          let impl_item_level = self.get(impl_item_ref.id.def_id);
   141,777 ( 0.00%)                          if impl_item_level.is_some() {
 1,062,750 ( 0.00%)                              self.reach(impl_item_ref.id.def_id, impl_item_level)
         .                                           .generics()
         .                                           .predicates()
         .                                           .ty();
         .                                   }
         .                               }
         .                           }
         .                       }
         .           
         .                       // Visit everything, but enum variants have their own levels.
         .                       hir::ItemKind::Enum(ref def, _) => {
        57 ( 0.00%)                  if item_level.is_some() {
         .                               self.reach(item.def_id, item_level).generics().predicates();
         .                           }
        57 ( 0.00%)                  for variant in def.variants {
     1,539 ( 0.00%)                      let variant_level = self.get(self.tcx.hir().local_def_id(variant.id));
       171 ( 0.00%)                      if variant_level.is_some() {
         .                                   for field in variant.data.fields() {
         .                                       self.reach(self.tcx.hir().local_def_id(field.hir_id), variant_level)
         .                                           .ty();
         .                                   }
         .                                   // Corner case: if the variant is reachable, but its
         .                                   // enum is not, make the enum reachable as well.
         .                                   self.update(item.def_id, variant_level);
         .                               }
-- line 799 ----------------------------------------
-- line 808 ----------------------------------------
         .                                       .generics()
         .                                       .predicates()
         .                                       .ty();
         .                               }
         .                           }
         .                       }
         .                       // Visit everything except for private fields.
         .                       hir::ItemKind::Struct(ref struct_def, _) | hir::ItemKind::Union(ref struct_def, _) => {
       306 ( 0.00%)                  if item_level.is_some() {
     1,312 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates();
       328 ( 0.00%)                      for field in struct_def.fields() {
     2,177 ( 0.00%)                          let def_id = self.tcx.hir().local_def_id(field.hir_id);
       933 ( 0.00%)                          let field_level = self.get(def_id);
       311 ( 0.00%)                          if field_level.is_some() {
        75 ( 0.00%)                              self.reach(def_id, field_level).ty();
         .                                   }
         .                               }
         .                           }
         .                       }
         .                   }
         .           
         .                   let orig_level = mem::replace(&mut self.prev_level, item_level);
    26,757 ( 0.00%)          intravisit::walk_item(self, item);
     8,919 ( 0.00%)          self.prev_level = orig_level;
    71,352 ( 0.00%)      }
         .           
         .               fn visit_block(&mut self, b: &'tcx hir::Block<'tcx>) {
         .                   // Blocks can have public items, for example impls, but they always
         .                   // start as completely private regardless of publicity of a function,
         .                   // constant, type, field, etc., in which this block resides.
         .                   let orig_level = mem::replace(&mut self.prev_level, None);
         .                   intravisit::walk_block(self, b);
         .                   self.prev_level = orig_level;
         .               }
         .           }
         .           
         .           impl ReachEverythingInTheInterfaceVisitor<'_, '_> {
   788,732 ( 0.00%)      fn generics(&mut self) -> &mut Self {
   450,704 ( 0.00%)          for param in &self.ev.tcx.generics_of(self.item_def_id).params {
    29,353 ( 0.00%)              match param.kind {
         .                           GenericParamDefKind::Lifetime => {}
     2,799 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
     2,799 ( 0.00%)                      if has_default {
         .                                   self.visit(self.ev.tcx.type_of(param.def_id));
         .                               }
         .                           }
         .                           GenericParamDefKind::Const { has_default, .. } => {
         .                               self.visit(self.ev.tcx.type_of(param.def_id));
         .                               if has_default {
         .                                   self.visit(self.ev.tcx.const_param_default(param.def_id));
         .                               }
         .                           }
         .                       }
         .                   }
         .                   self
 1,014,084 ( 0.00%)      }
         .           
   563,380 ( 0.00%)      fn predicates(&mut self) -> &mut Self {
   338,028 ( 0.00%)          self.visit_predicates(self.ev.tcx.predicates_of(self.item_def_id));
         .                   self
   676,056 ( 0.00%)      }
         .           
   562,515 ( 0.00%)      fn ty(&mut self) -> &mut Self {
   337,509 ( 0.00%)          self.visit(self.ev.tcx.type_of(self.item_def_id));
         .                   self
   675,018 ( 0.00%)      }
         .           
         .               fn trait_ref(&mut self) -> &mut Self {
    36,648 ( 0.00%)          if let Some(trait_ref) = self.ev.tcx.impl_trait_ref(self.item_def_id) {
         .                       self.visit_trait(trait_ref);
         .                   }
         .                   self
         .               }
         .           }
         .           
         .           impl<'tcx> DefIdVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {
         .               fn tcx(&self) -> TyCtxt<'tcx> {
 4,155,290 ( 0.01%)          self.ev.tcx
         .               }
 5,569,855 ( 0.01%)      fn visit_def_id(
         .                   &mut self,
         .                   def_id: DefId,
         .                   _kind: &str,
         .                   _descr: &dyn fmt::Display,
         .               ) -> ControlFlow<Self::BreakTy> {
 3,539,514 ( 0.01%)          if let Some(def_id) = def_id.as_local() {
 1,001,881 ( 0.00%)              if let (ty::Visibility::Public, _) | (_, Some(AccessLevel::ReachableFromImplTrait)) =
   250,486 ( 0.00%)                  (self.tcx().visibility(def_id.to_def_id()), self.access_level)
         .                       {
         .                           self.ev.update(def_id, self.access_level);
         .                       }
         .                   }
         .                   ControlFlow::CONTINUE
 7,797,797 ( 0.01%)      }
         .           }
         .           
         .           //////////////////////////////////////////////////////////////////////////////////////
         .           /// Name privacy visitor, checks privacy and reports violations.
         .           /// Most of name privacy checks are performed during the main resolution phase,
         .           /// or later in type checking when field accesses and associated items are resolved.
         .           /// This pass performs remaining checks for fields in struct expressions and patterns.
         .           //////////////////////////////////////////////////////////////////////////////////////
-- line 909 ----------------------------------------
-- line 920 ----------------------------------------
         .               /// `Expr` or `Pat` nodes (they are guaranteed to be found only in bodies).
         .               #[track_caller]
         .               fn typeck_results(&self) -> &'tcx ty::TypeckResults<'tcx> {
         .                   self.maybe_typeck_results
         .                       .expect("`NamePrivacyVisitor::typeck_results` called outside of body")
         .               }
         .           
         .               // Checks that a field in a struct constructor (expression or pattern) is accessible.
     8,440 ( 0.00%)      fn check_field(
         .                   &mut self,
         .                   use_ctxt: Span,        // syntax context of the field name at the use site
         .                   span: Span,            // span of the field pattern, e.g., `x: 0`
         .                   def: &'tcx ty::AdtDef, // definition of the struct or enum
         .                   field: &'tcx ty::FieldDef,
         .                   in_update_syntax: bool,
         .               ) {
     1,688 ( 0.00%)          if def.is_enum() {
         .                       return;
         .                   }
         .           
         .                   // definition of the field
         .                   let ident = Ident::new(kw::Empty, use_ctxt);
     1,402 ( 0.00%)          let hir_id = self.tcx.hir().local_def_id_to_hir_id(self.current_item);
     4,907 ( 0.00%)          let def_id = self.tcx.adjust_ident_and_get_scope(ident, def.did, hir_id).1;
       701 ( 0.00%)          if !field.vis.is_accessible_from(def_id, self.tcx) {
         .                       let label = if in_update_syntax {
         .                           format!("field `{}` is private", field.name)
         .                       } else {
         .                           "private field".to_string()
         .                       };
         .           
         .                       struct_span_err!(
         .                           self.tcx.sess,
-- line 952 ----------------------------------------
-- line 955 ----------------------------------------
         .                           "field `{}` of {} `{}` is private",
         .                           field.name,
         .                           def.variant_descr(),
         .                           self.tcx.def_path_str(def.did)
         .                       )
         .                       .span_label(span, label)
         .                       .emit();
         .                   }
     6,752 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Visitor<'tcx> for NamePrivacyVisitor<'tcx> {
         .               type NestedFilter = nested_filter::All;
         .           
         .               /// We want to visit items in the context of their containing
         .               /// module and so forth, so supply a crate for doing a deep walk.
         .               fn nested_visit_map(&mut self) -> Self::Map {
    38,744 ( 0.00%)          self.tcx.hir()
         .               }
         .           
         .               fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {
         .                   // Don't visit nested modules, since we run a separate visitor walk
         .                   // for each module in `privacy_access_levels`
         .               }
         .           
         .               fn visit_nested_body(&mut self, body: hir::BodyId) {
         .                   let old_maybe_typeck_results =
   180,460 ( 0.00%)              self.maybe_typeck_results.replace(self.tcx.typeck_body(body));
   216,030 ( 0.00%)          let body = self.tcx.hir().body(body);
         .                   self.visit_body(body);
       384 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
         .               }
         .           
         .               fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
     2,973 ( 0.00%)          let orig_current_item = mem::replace(&mut self.current_item, item.def_id);
     8,896 ( 0.00%)          intravisit::walk_item(self, item);
     2,973 ( 0.00%)          self.current_item = orig_current_item;
         .               }
         .           
 1,332,549 ( 0.00%)      fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {
   296,122 ( 0.00%)          if let hir::ExprKind::Struct(qpath, fields, ref base) = expr.kind {
     1,404 ( 0.00%)              let res = self.typeck_results().qpath_res(qpath, expr.hir_id);
       702 ( 0.00%)              let adt = self.typeck_results().expr_ty(expr).ty_adt_def().unwrap();
     2,106 ( 0.00%)              let variant = adt.variant_of_res(res);
       936 ( 0.00%)              if let Some(base) = *base {
         .                           // If the expression uses FRU we need to make sure all the unmentioned fields
         .                           // are checked for privacy (RFC 736). Rather than computing the set of
         .                           // unmentioned fields, just check them all.
         .                           for (vf_index, variant_field) in variant.fields.iter().enumerate() {
         .                               let field = fields.iter().find(|f| {
         .                                   self.tcx.field_index(f.hir_id, self.typeck_results()) == vf_index
         .                               });
         .                               let (use_ctxt, span) = match field {
         .                                   Some(field) => (field.ident.span, field.span),
         .                                   None => (base.span, base.span),
         .                               };
         .                               self.check_field(use_ctxt, span, adt, variant_field, true);
         .                           }
         .                       } else {
         .                           for field in fields {
       421 ( 0.00%)                      let use_ctxt = field.ident.span;
     3,155 ( 0.00%)                      let index = self.tcx.field_index(field.hir_id, self.typeck_results());
     4,631 ( 0.00%)                      self.check_field(use_ctxt, field.span, adt, &variant.fields[index], false);
         .                           }
         .                       }
         .                   }
         .           
 1,480,610 ( 0.00%)          intravisit::walk_expr(self, expr);
         .               }
         .           
   692,168 ( 0.00%)      fn visit_pat(&mut self, pat: &'tcx hir::Pat<'tcx>) {
   173,343 ( 0.00%)          if let PatKind::Struct(ref qpath, fields, _) = pat.kind {
     2,107 ( 0.00%)              let res = self.typeck_results().qpath_res(qpath, pat.hir_id);
     1,204 ( 0.00%)              let adt = self.typeck_results().pat_ty(pat).ty_adt_def().unwrap();
     2,408 ( 0.00%)              let variant = adt.variant_of_res(res);
         .                       for field in fields {
       423 ( 0.00%)                  let use_ctxt = field.ident.span;
     2,913 ( 0.00%)                  let index = self.tcx.field_index(field.hir_id, self.typeck_results());
     4,230 ( 0.00%)                  self.check_field(use_ctxt, field.span, adt, &variant.fields[index], false);
         .                       }
         .                   }
         .           
   778,689 ( 0.00%)          intravisit::walk_pat(self, pat);
         .               }
         .           }
         .           
         .           ////////////////////////////////////////////////////////////////////////////////////////////
         .           /// Type privacy visitor, checks types for privacy and reports violations.
         .           /// Both explicitly written types and inferred types of expressions and patterns are checked.
         .           /// Checks are performed on "semantic" types regardless of names and their hygiene.
         .           ////////////////////////////////////////////////////////////////////////////////////////////
-- line 1045 ----------------------------------------
-- line 1061 ----------------------------------------
         .                       .expect("`TypePrivacyVisitor::typeck_results` called outside of body")
         .               }
         .           
         .               fn item_is_accessible(&self, did: DefId) -> bool {
         .                   self.tcx.visibility(did).is_accessible_from(self.current_item.to_def_id(), self.tcx)
         .               }
         .           
         .               // Take node-id of an expression or pattern and check its type for privacy.
 1,654,471 ( 0.00%)      fn check_expr_pat_type(&mut self, id: hir::HirId, span: Span) -> bool {
   236,353 ( 0.00%)          self.span = span;
   236,353 ( 0.00%)          let typeck_results = self.typeck_results();
         .                   let result: ControlFlow<()> = try {
   945,412 ( 0.00%)              self.visit(typeck_results.node_type(id))?;
 1,890,824 ( 0.00%)              self.visit(typeck_results.node_substs(id))?;
 2,127,177 ( 0.00%)              if let Some(adjustments) = typeck_results.adjustments().get(id) {
         .                           adjustments.iter().try_for_each(|adjustment| self.visit(adjustment.target))?;
         .                       }
         .                   };
         .                   result.is_break()
 1,890,824 ( 0.00%)      }
         .           
         .               fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {
 2,106,734 ( 0.00%)          let is_error = !self.item_is_accessible(def_id);
         .                   if is_error {
         .                       self.tcx
         .                           .sess
         .                           .struct_span_err(self.span, &format!("{} `{}` is private", kind, descr))
         .                           .span_label(self.span, &format!("private {}", kind))
         .                           .emit();
         .                   }
         .                   is_error
-- line 1091 ----------------------------------------
-- line 1093 ----------------------------------------
         .           }
         .           
         .           impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {
         .               type NestedFilter = nested_filter::All;
         .           
         .               /// We want to visit items in the context of their containing
         .               /// module and so forth, so supply a crate for doing a deep walk.
         .               fn nested_visit_map(&mut self) -> Self::Map {
    38,744 ( 0.00%)          self.tcx.hir()
         .               }
         .           
         .               fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {
         .                   // Don't visit nested modules, since we run a separate visitor walk
         .                   // for each module in `privacy_access_levels`
         .               }
         .           
   360,050 ( 0.00%)      fn visit_nested_body(&mut self, body: hir::BodyId) {
         .                   let old_maybe_typeck_results =
   108,015 ( 0.00%)              self.maybe_typeck_results.replace(self.tcx.typeck_body(body));
   216,030 ( 0.00%)          let body = self.tcx.hir().body(body);
         .                   self.visit_body(body);
    36,005 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
   288,040 ( 0.00%)      }
         .           
         .               fn visit_generic_arg(&mut self, generic_arg: &'tcx hir::GenericArg<'tcx>) {
   394,089 ( 0.00%)          match generic_arg {
   135,388 ( 0.00%)              hir::GenericArg::Type(t) => self.visit_ty(t),
         .                       hir::GenericArg::Infer(inf) => self.visit_infer(inf),
         .                       hir::GenericArg::Lifetime(_) | hir::GenericArg::Const(_) => {}
         .                   }
         .               }
         .           
 1,365,056 ( 0.00%)      fn visit_ty(&mut self, hir_ty: &'tcx hir::Ty<'tcx>) {
   390,016 ( 0.00%)          self.span = hir_ty.span;
   585,024 ( 0.00%)          if let Some(typeck_results) = self.maybe_typeck_results {
         .                       // Types in bodies.
     9,486 ( 0.00%)              if self.visit(typeck_results.node_type(hir_ty.hir_id)).is_break() {
         .                           return;
         .                       }
         .                   } else {
         .                       // Types in signatures.
         .                       // FIXME: This is very ineffective. Ideally each HIR type should be converted
         .                       // into a semantic type only once and the result should be cached somehow.
   575,538 ( 0.00%)              if self.visit(rustc_typeck::hir_ty_to_ty(self.tcx, hir_ty)).is_break() {
         .                           return;
         .                       }
         .                   }
         .           
   585,024 ( 0.00%)          intravisit::walk_ty(self, hir_ty);
 1,170,048 ( 0.00%)      }
         .           
         .               fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {
         .                   self.span = inf.span;
         .                   if let Some(typeck_results) = self.maybe_typeck_results {
         .                       if let Some(ty) = typeck_results.node_type_opt(inf.hir_id) {
         .                           if self.visit(ty).is_break() {
         .                               return;
         .                           }
-- line 1150 ----------------------------------------
-- line 1152 ----------------------------------------
         .                           // We don't do anything for const infers here.
         .                       }
         .                   } else {
         .                       bug!("visit_infer without typeck_results");
         .                   }
         .                   intravisit::walk_inf(self, inf);
         .               }
         .           
    30,000 ( 0.00%)      fn visit_trait_ref(&mut self, trait_ref: &'tcx hir::TraitRef<'tcx>) {
    11,250 ( 0.00%)          self.span = trait_ref.path.span;
     3,750 ( 0.00%)          if self.maybe_typeck_results.is_none() {
         .                       // Avoid calling `hir_trait_to_predicates` in bodies, it will ICE.
         .                       // The traits' privacy in bodies is already checked as a part of trait object types.
     3,712 ( 0.00%)              let bounds = rustc_typeck::hir_trait_to_predicates(
     3,712 ( 0.00%)                  self.tcx,
         .                           trait_ref,
         .                           // NOTE: This isn't really right, but the actual type doesn't matter here. It's
         .                           // just required by `ty::TraitRef`.
    11,136 ( 0.00%)                  self.tcx.types.never,
         .                       );
         .           
    33,408 ( 0.00%)              for (trait_predicate, _, _) in bounds.trait_bounds {
    25,984 ( 0.00%)                  if self.visit_trait(trait_predicate.skip_binder()).is_break() {
         .                               return;
         .                           }
         .                       }
         .           
    22,426 ( 0.00%)              for (poly_predicate, _) in bounds.projection_bounds {
       132 ( 0.00%)                  let pred = poly_predicate.skip_binder();
         .                           let poly_pred_term = self.visit(pred.term);
        88 ( 0.00%)                  if poly_pred_term.is_break()
         .                               || self.visit_projection_ty(pred.projection_ty).is_break()
         .                           {
         .                               return;
         .                           }
         .                       }
         .                   }
         .           
         .                   intravisit::walk_trait_ref(self, trait_ref);
    30,000 ( 0.00%)      }
         .           
         .               // Check types of expressions
 1,332,549 ( 0.00%)      fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {
 1,332,549 ( 0.00%)          if self.check_expr_pat_type(expr.hir_id, expr.span) {
         .                       // Do not check nested expressions if the error already happened.
         .                       return;
         .                   }
 1,026,443 ( 0.00%)          match expr.kind {
       812 ( 0.00%)              hir::ExprKind::Assign(_, rhs, _) | hir::ExprKind::Match(rhs, ..) => {
         .                           // Do not report duplicate errors for `x = y` and `match x { ... }`.
     5,096 ( 0.00%)                  if self.check_expr_pat_type(rhs.hir_id, rhs.span) {
         .                               return;
         .                           }
         .                       }
     2,174 ( 0.00%)              hir::ExprKind::MethodCall(segment, ..) => {
         .                           // Method calls have to be checked specially.
     4,348 ( 0.00%)                  self.span = segment.ident.span;
    13,044 ( 0.00%)                  if let Some(def_id) = self.typeck_results().type_dependent_def_id(expr.hir_id) {
     6,522 ( 0.00%)                      if self.visit(self.tcx.type_of(def_id)).is_break() {
         .                                   return;
         .                               }
         .                           } else {
         .                               self.tcx
         .                                   .sess
         .                                   .delay_span_bug(expr.span, "no type-dependent def for method call");
         .                           }
         .                       }
         .                       _ => {}
         .                   }
         .           
   444,183 ( 0.00%)          intravisit::walk_expr(self, expr);
 1,184,488 ( 0.00%)      }
         .           
         .               // Prohibit access to associated items with insufficient nominal visibility.
         .               //
         .               // Additionally, until better reachability analysis for macros 2.0 is available,
         .               // we prohibit access to private statics from other crates, this allows to give
         .               // more code internal visibility at link time. (Access to private functions
         .               // is already prohibited by type privacy for function types.)
 1,678,460 ( 0.00%)      fn visit_qpath(&mut self, qpath: &'tcx hir::QPath<'tcx>, id: hir::HirId, span: Span) {
   335,692 ( 0.00%)          let def = match qpath {
   495,399 ( 0.00%)              hir::QPath::Resolved(_, path) => match path.res {
   655,434 ( 0.00%)                  Res::Def(kind, def_id) => Some((kind, def_id)),
         .                           _ => None,
         .                       },
     2,713 ( 0.00%)              hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
         .                           .maybe_typeck_results
    21,834 ( 0.00%)                  .and_then(|typeck_results| typeck_results.type_dependent_def(id)),
         .                   };
         .                   let def = def.filter(|(kind, _)| {
   223,254 ( 0.00%)              matches!(
         .                           kind,
         .                           DefKind::AssocFn | DefKind::AssocConst | DefKind::AssocTy | DefKind::Static
         .                       )
         .                   });
         .                   if let Some((kind, def_id)) = def {
         .                       let is_local_static =
    12,628 ( 0.00%)                  if let DefKind::Static = kind { def_id.is_local() } else { false };
     6,482 ( 0.00%)              if !self.item_is_accessible(def_id) && !is_local_static {
         .                           let sess = self.tcx.sess;
         .                           let sm = sess.source_map();
         .                           let name = match qpath {
         .                               hir::QPath::Resolved(..) | hir::QPath::LangItem(..) => {
         .                                   sm.span_to_snippet(qpath.span()).ok()
         .                               }
         .                               hir::QPath::TypeRelative(_, segment) => Some(segment.ident.to_string()),
         .                           };
-- line 1258 ----------------------------------------
-- line 1263 ----------------------------------------
         .                           };
         .                           sess.struct_span_err(span, &msg)
         .                               .span_label(span, &format!("private {}", kind))
         .                               .emit();
         .                           return;
         .                       }
         .                   }
         .           
 1,846,306 ( 0.00%)          intravisit::walk_qpath(self, qpath, id, span);
         .               }
         .           
         .               // Check types of patterns.
         .               fn visit_pat(&mut self, pattern: &'tcx hir::Pat<'tcx>) {
   604,425 ( 0.00%)          if self.check_expr_pat_type(pattern.hir_id, pattern.span) {
         .                       // Do not check nested patterns if the error already happened.
         .                       return;
         .                   }
         .           
   343,695 ( 0.00%)          intravisit::walk_pat(self, pattern);
         .               }
         .           
     5,520 ( 0.00%)      fn visit_local(&mut self, local: &'tcx hir::Local<'tcx>) {
     3,312 ( 0.00%)          if let Some(init) = local.init {
     7,301 ( 0.00%)              if self.check_expr_pat_type(init.hir_id, init.span) {
         .                           // Do not report duplicate errors for `let x = y`.
         .                           return;
         .                       }
         .                   }
         .           
         .                   intravisit::walk_local(self, local);
     4,012 ( 0.00%)      }
         .           
         .               // Check types in item interfaces.
         .               fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
     2,973 ( 0.00%)          let orig_current_item = mem::replace(&mut self.current_item, item.def_id);
         .                   let old_maybe_typeck_results = self.maybe_typeck_results.take();
     8,896 ( 0.00%)          intravisit::walk_item(self, item);
     2,973 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
     3,475 ( 0.00%)          self.current_item = orig_current_item;
         .               }
         .           }
         .           
         .           impl<'tcx> DefIdVisitor<'tcx> for TypePrivacyVisitor<'tcx> {
         .               fn tcx(&self) -> TyCtxt<'tcx> {
 3,368,591 ( 0.00%)          self.tcx
         .               }
15,800,505 ( 0.02%)      fn visit_def_id(
         .                   &mut self,
         .                   def_id: DefId,
         .                   kind: &str,
         .                   descr: &dyn fmt::Display,
         .               ) -> ControlFlow<Self::BreakTy> {
         .                   if self.check_def_id(def_id, kind, descr) {
         .                       ControlFlow::BREAK
         .                   } else {
         .                       ControlFlow::CONTINUE
         .                   }
 9,480,303 ( 0.01%)      }
         .           }
         .           
         .           ///////////////////////////////////////////////////////////////////////////////
         .           /// Obsolete visitors for checking for private items in public interfaces.
         .           /// These visitors are supposed to be kept in frozen state and produce an
         .           /// "old error node set". For backward compatibility the new visitor reports
         .           /// warnings instead of hard errors when the erroneous node is not in this old set.
         .           ///////////////////////////////////////////////////////////////////////////////
-- line 1328 ----------------------------------------
-- line 1342 ----------------------------------------
         .               /// Whether we've recurred at all (i.e., if we're pointing at the
         .               /// first type on which `visit_ty` was called).
         .               at_outer_type: bool,
         .               /// Whether that first type is a public path.
         .               outer_type_is_public_path: bool,
         .           }
         .           
         .           impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {
     6,911 ( 0.00%)      fn path_is_private_type(&self, path: &hir::Path<'_>) -> bool {
    20,919 ( 0.00%)          let did = match path.res {
         .                       Res::PrimTy(..) | Res::SelfTy(..) | Res::Err => return false,
    34,032 ( 0.00%)              res => res.def_id(),
         .                   };
         .           
         .                   // A path can only be private if:
         .                   // it's in this crate...
     5,672 ( 0.00%)          if let Some(did) = did.as_local() {
         .                       // .. and it corresponds to a private type in the AST (this returns
         .                       // `None` for type parameters).
    11,137 ( 0.00%)              match self.tcx.hir().find(self.tcx.hir().local_def_id_to_hir_id(did)) {
     3,063 ( 0.00%)                  Some(Node::Item(item)) => !item.vis.node.is_pub(),
         .                           Some(_) | None => false,
         .                       }
         .                   } else {
         .                       false
         .                   }
    13,822 ( 0.00%)      }
         .           
         .               fn trait_is_public(&self, trait_id: LocalDefId) -> bool {
         .                   // FIXME: this would preferably be using `exported_items`, but all
         .                   // traits are exported currently (see `EmbargoVisitor.exported_trait`).
         .                   self.access_levels.is_public(trait_id)
         .               }
         .           
         .               fn check_generic_bound(&mut self, bound: &hir::GenericBound<'_>) {
       278 ( 0.00%)          if let hir::GenericBound::Trait(ref trait_ref, _) = *bound {
       136 ( 0.00%)              if self.path_is_private_type(trait_ref.trait_ref.path) {
         .                           self.old_error_set.insert(trait_ref.trait_ref.hir_ref_id);
         .                       }
         .                   }
         .               }
         .           
         .               fn item_is_public(&self, def_id: LocalDefId, vis: &hir::Visibility<'_>) -> bool {
     1,198 ( 0.00%)          self.access_levels.is_reachable(def_id) || vis.node.is_pub()
         .               }
         .           }
         .           
         .           impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {
         .               fn visit_generic_arg(&mut self, generic_arg: &'v hir::GenericArg<'v>) {
    24,002 ( 0.00%)          match generic_arg {
         .                       hir::GenericArg::Type(t) => self.visit_ty(t),
         .                       hir::GenericArg::Infer(inf) => self.visit_ty(&inf.to_ty()),
         .                       hir::GenericArg::Lifetime(_) | hir::GenericArg::Const(_) => {}
         .                   }
         .               }
         .           
         .               fn visit_ty(&mut self, ty: &hir::Ty<'_>) {
    25,631 ( 0.00%)          if let hir::TyKind::Path(hir::QPath::Resolved(_, path)) = ty.kind {
    17,868 ( 0.00%)              if self.inner.path_is_private_type(path) {
         .                           self.contains_private = true;
         .                           // Found what we're looking for, so let's stop working.
         .                           return;
         .                       }
         .                   }
         .                   if let hir::TyKind::Path(_) = ty.kind {
     5,792 ( 0.00%)              if self.at_outer_type {
     1,539 ( 0.00%)                  self.outer_type_is_public_path = true;
         .                       }
         .                   }
     8,089 ( 0.00%)          self.at_outer_type = false;
    12,166 ( 0.00%)          intravisit::walk_ty(self, ty)
     8,024 ( 0.00%)      }
         .           
         .               // Don't want to recurse into `[, .. expr]`.
         .               fn visit_expr(&mut self, _: &hir::Expr<'_>) {}
         .           }
         .           
         .           impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {
         .               type NestedFilter = nested_filter::All;
         .           
         .               /// We want to visit items in the context of their containing
         .               /// module and so forth, so supply a crate for doing a deep walk.
         .               fn nested_visit_map(&mut self) -> Self::Map {
     3,094 ( 0.00%)          self.tcx.hir()
         .               }
         .           
    24,498 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    10,888 ( 0.00%)          match item.kind {
         .                       // Contents of a private mod can be re-exported, so we need
         .                       // to check internals.
         .                       hir::ItemKind::Mod(_) => {}
         .           
         .                       // An `extern {}` doesn't introduce a new privacy
         .                       // namespace (the contents have their own privacies).
         .                       hir::ItemKind::ForeignMod { .. } => {}
         .           
        18 ( 0.00%)              hir::ItemKind::Trait(.., bounds, _) => {
        44 ( 0.00%)                  if !self.trait_is_public(item.def_id) {
         .                               return;
         .                           }
         .           
         .                           for bound in bounds.iter() {
         .                               self.check_generic_bound(bound)
         .                           }
         .                       }
         .           
-- line 1447 ----------------------------------------
-- line 1454 ----------------------------------------
         .                           // `impl [... for] Private` is never visible.
         .                           let self_contains_private;
         .                           // `impl [... for] Public<...>`, but not `impl [... for]
         .                           // Vec<Public>` or `(Public,)`, etc.
         .                           let self_is_public_path;
         .           
         .                           // Check the properties of the `Self` type:
         .                           {
     8,152 ( 0.00%)                      let mut visitor = ObsoleteCheckTypeForPrivatenessVisitor {
         .                                   inner: self,
         .                                   contains_private: false,
         .                                   at_outer_type: true,
         .                                   outer_type_is_public_path: false,
         .                               };
     2,038 ( 0.00%)                      visitor.visit_ty(impl_.self_ty);
         .                               self_contains_private = visitor.contains_private;
         .                               self_is_public_path = visitor.outer_type_is_public_path;
         .                           }
         .           
         .                           // Miscellaneous info about the impl:
         .           
         .                           // `true` iff this is `impl Private for ...`.
         .                           let not_private_trait = impl_.of_trait.as_ref().map_or(
         .                               true, // no trait counts as public trait
         .                               |tr| {
     6,000 ( 0.00%)                          if let Some(def_id) = tr.path.res.def_id().as_local() {
     5,052 ( 0.00%)                              self.trait_is_public(def_id)
         .                                   } else {
         .                                       true // external traits must be public
         .                                   }
         .                               },
         .                           );
         .           
         .                           // `true` iff this is a trait impl or at least one method is public.
         .                           //
         .                           // `impl Public { $( fn ...() {} )* }` is not visible.
         .                           //
         .                           // This is required over just using the methods' privacy
         .                           // directly because we might have `impl<T: Foo<Private>> ...`,
         .                           // and we shouldn't warn about the generics if all the methods
         .                           // are private (because `T` won't be visible externally).
         .                           let trait_or_some_public_method = impl_.of_trait.is_some()
        38 ( 0.00%)                      || impl_.items.iter().any(|impl_item_ref| {
       436 ( 0.00%)                          let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
       408 ( 0.00%)                          match impl_item.kind {
         .                                       hir::ImplItemKind::Const(..) | hir::ImplItemKind::Fn(..) => {
         .                                           self.access_levels.is_reachable(impl_item_ref.id.def_id)
         .                                       }
         .                                       hir::ImplItemKind::TyAlias(_) => false,
         .                                   }
         .                               });
         .           
     4,054 ( 0.00%)                  if !self_contains_private && not_private_trait && trait_or_some_public_method {
         .                               intravisit::walk_generics(self, &impl_.generics);
         .           
     3,936 ( 0.00%)                      match impl_.of_trait {
         .                                   None => {
        27 ( 0.00%)                              for impl_item_ref in impl_.items {
         .                                           // This is where we choose whether to walk down
         .                                           // further into the impl to check its items. We
         .                                           // should only walk into public items so that we
         .                                           // don't erroneously report errors for private
         .                                           // types in private items.
     2,118 ( 0.00%)                                  let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
     1,900 ( 0.00%)                                  match impl_item.kind {
         .                                               hir::ImplItemKind::Const(..) | hir::ImplItemKind::Fn(..)
       721 ( 0.00%)                                          if self
       353 ( 0.00%)                                              .item_is_public(impl_item.def_id, &impl_item.vis) =>
         .                                               {
         .                                                   intravisit::walk_impl_item(self, impl_item)
         .                                               }
         .                                               hir::ImplItemKind::TyAlias(..) => {
         .                                                   intravisit::walk_impl_item(self, impl_item)
         .                                               }
         .                                               _ => {}
         .                                           }
-- line 1529 ----------------------------------------
-- line 1538 ----------------------------------------
         .                                       //
         .                                       // Those in 1. can only occur if the trait is in
         .                                       // this crate and will've been warned about on the
         .                                       // trait definition (there's no need to warn twice
         .                                       // so we don't check the methods).
         .                                       //
         .                                       // Those in 2. are warned via walk_generics and this
         .                                       // call here.
     5,823 ( 0.00%)                              intravisit::walk_path(self, tr.path);
         .           
         .                                       // Those in 3. are warned with this call.
     1,941 ( 0.00%)                              for impl_item_ref in impl_.items {
   174,845 ( 0.00%)                                  let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
    83,153 ( 0.00%)                                  if let hir::ImplItemKind::TyAlias(ty) = impl_item.kind {
         .                                               self.visit_ty(ty);
         .                                           }
         .                                       }
         .                                   }
         .                               }
       210 ( 0.00%)                  } else if impl_.of_trait.is_none() && self_is_public_path {
         .                               // `impl Public<Private> { ... }`. Any public static
         .                               // methods will be visible as `Public::foo`.
         .                               let mut found_pub_static = false;
         7 ( 0.00%)                      for impl_item_ref in impl_.items {
        28 ( 0.00%)                          if self.access_levels.is_reachable(impl_item_ref.id.def_id)
        14 ( 0.00%)                              || self.tcx.visibility(impl_item_ref.id.def_id)
         .                                           == ty::Visibility::Public
         .                                   {
         .                                       let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
         .                                       match impl_item_ref.kind {
         .                                           AssocItemKind::Const => {
         .                                               found_pub_static = true;
         .                                               intravisit::walk_impl_item(self, impl_item);
         .                                           }
-- line 1571 ----------------------------------------
-- line 1572 ----------------------------------------
         .                                           AssocItemKind::Fn { has_self: false } => {
         .                                               found_pub_static = true;
         .                                               intravisit::walk_impl_item(self, impl_item);
         .                                           }
         .                                           _ => {}
         .                                       }
         .                                   }
         .                               }
        14 ( 0.00%)                      if found_pub_static {
         .                                   intravisit::walk_generics(self, &impl_.generics)
         .                               }
         .                           }
         .                           return;
         .                       }
         .           
         .                       // `type ... = ...;` can contain private types, because
         .                       // we're introducing a new name.
         .                       hir::ItemKind::TyAlias(..) => return,
         .           
         .                       // Not at all public, so we don't care.
     4,235 ( 0.00%)              _ if !self.item_is_public(item.def_id, &item.vis) => {
         .                           return;
         .                       }
         .           
         .                       _ => {}
         .                   }
         .           
         .                   // We've carefully constructed it so that if we're here, then
         .                   // any `visit_ty`'s will be called on things that are in
         .                   // public signatures, i.e., things that we're interested in for
         .                   // this visitor.
     1,130 ( 0.00%)          intravisit::walk_item(self, item);
    20,872 ( 0.00%)      }
         .           
     3,424 ( 0.00%)      fn visit_generics(&mut self, generics: &'tcx hir::Generics<'tcx>) {
         .                   for param in generics.params {
       140 ( 0.00%)              for bound in param.bounds {
         .                           self.check_generic_bound(bound);
         .                       }
         .                   }
       428 ( 0.00%)          for predicate in generics.where_clause.predicates {
        96 ( 0.00%)              match predicate {
         .                           hir::WherePredicate::BoundPredicate(bound_pred) => {
        32 ( 0.00%)                      for bound in bound_pred.bounds.iter() {
         .                                   self.check_generic_bound(bound)
         .                               }
         .                           }
         .                           hir::WherePredicate::RegionPredicate(_) => {}
         .                           hir::WherePredicate::EqPredicate(eq_pred) => {
         .                               self.visit_ty(eq_pred.rhs_ty);
         .                           }
         .                       }
         .                   }
     3,424 ( 0.00%)      }
         .           
         .               fn visit_foreign_item(&mut self, item: &'tcx hir::ForeignItem<'tcx>) {
         .                   if self.access_levels.is_reachable(item.def_id) {
         .                       intravisit::walk_foreign_item(self, item)
         .                   }
         .               }
         .           
         .               fn visit_ty(&mut self, t: &'tcx hir::Ty<'tcx>) {
     7,521 ( 0.00%)          if let hir::TyKind::Path(hir::QPath::Resolved(_, path)) = t.kind {
     5,052 ( 0.00%)              if self.path_is_private_type(path) {
       219 ( 0.00%)                  self.old_error_set.insert(t.hir_id);
         .                       }
         .                   }
    10,664 ( 0.00%)          intravisit::walk_ty(self, t)
         .               }
         .           
         .               fn visit_variant(
         .                   &mut self,
         .                   v: &'tcx hir::Variant<'tcx>,
         .                   g: &'tcx hir::Generics<'tcx>,
         .                   item_id: hir::HirId,
         .               ) {
         .                   if self.access_levels.is_reachable(self.tcx.hir().local_def_id(v.id)) {
         .                       self.in_variant = true;
         .                       intravisit::walk_variant(self, v, g, item_id);
         .                       self.in_variant = false;
         .                   }
         .               }
         .           
       535 ( 0.00%)      fn visit_field_def(&mut self, s: &'tcx hir::FieldDef<'tcx>) {
       632 ( 0.00%)          if s.vis.node.is_pub() || self.in_variant {
         .                       intravisit::walk_field_def(self, s);
         .                   }
       408 ( 0.00%)      }
         .           
         .               // We don't need to introspect into these at all: an
         .               // expression/block context can't possibly contain exported things.
         .               // (Making them no-ops stops us from traversing the whole AST without
         .               // having to be super careful about our `walk_...` calls above.)
         .               fn visit_block(&mut self, _: &'tcx hir::Block<'tcx>) {}
         .               fn visit_expr(&mut self, _: &'tcx hir::Expr<'tcx>) {}
         .           }
-- line 1667 ----------------------------------------
-- line 1679 ----------------------------------------
         .               /// The visitor checks that each component type is at least this visible.
         .               required_visibility: ty::Visibility,
         .               has_pub_restricted: bool,
         .               has_old_errors: bool,
         .               in_assoc_ty: bool,
         .           }
         .           
         .           impl SearchInterfaceForPrivateItemsVisitor<'_> {
   252,399 ( 0.00%)      fn generics(&mut self) -> &mut Self {
   108,171 ( 0.00%)          for param in &self.tcx.generics_of(self.item_def_id).params {
     2,680 ( 0.00%)              match param.kind {
         .                           GenericParamDefKind::Lifetime => {}
       299 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
       299 ( 0.00%)                      if has_default {
         .                                   self.visit(self.tcx.type_of(param.def_id));
         .                               }
         .                           }
         .                           // FIXME(generic_const_exprs): May want to look inside const here
         .                           GenericParamDefKind::Const { .. } => {
         .                               self.visit(self.tcx.type_of(param.def_id));
         .                           }
         .                       }
         .                   }
         .                   self
   288,456 ( 0.00%)      }
         .           
   180,285 ( 0.00%)      fn predicates(&mut self) -> &mut Self {
         .                   // N.B., we use `explicit_predicates_of` and not `predicates_of`
         .                   // because we don't want to report privacy errors due to where
         .                   // clauses that the compiler inferred. We only want to
         .                   // consider the ones that the user wrote. This is important
         .                   // for the inferred outlives rules; see
         .                   // `src/test/ui/rfc-2093-infer-outlives/privacy.rs`.
    72,114 ( 0.00%)          self.visit_predicates(self.tcx.explicit_predicates_of(self.item_def_id));
         .                   self
   216,342 ( 0.00%)      }
         .           
         .               fn bounds(&mut self) -> &mut Self {
         .                   self.visit_predicates(ty::GenericPredicates {
         .                       parent: None,
         .                       predicates: self.tcx.explicit_item_bounds(self.item_def_id),
         .                   });
         .                   self
         .               }
         .           
   180,260 ( 0.00%)      fn ty(&mut self) -> &mut Self {
    72,104 ( 0.00%)          self.visit(self.tcx.type_of(self.item_def_id));
         .                   self
   180,260 ( 0.00%)      }
         .           
         .               fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {
 2,118,067 ( 0.00%)          if self.leaks_private_dep(def_id) {
         .                       self.tcx.struct_span_lint_hir(
         .                           lint::builtin::EXPORTED_PRIVATE_DEPENDENCIES,
         .                           self.tcx.hir().local_def_id_to_hir_id(self.item_def_id),
         .                           self.tcx.def_span(self.item_def_id.to_def_id()),
         .                           |lint| {
         .                               lint.build(&format!(
         .                                   "{} `{}` from private dependency '{}' in public \
         .                                                           interface",
-- line 1738 ----------------------------------------
-- line 1740 ----------------------------------------
         .                                   descr,
         .                                   self.tcx.crate_name(def_id.krate)
         .                               ))
         .                               .emit()
         .                           },
         .                       );
         .                   }
         .           
   588,012 ( 0.00%)          let hir_id = match def_id.as_local() {
    81,987 ( 0.00%)              Some(def_id) => self.tcx.hir().local_def_id_to_hir_id(def_id),
         .                       None => return false,
         .                   };
         .           
         .                   let vis = self.tcx.visibility(def_id);
   162,879 ( 0.00%)          if !vis.is_at_least(self.required_visibility, self.tcx) {
         .                       let vis_descr = match vis {
         .                           ty::Visibility::Public => "public",
         .                           ty::Visibility::Invisible => "private",
         .                           ty::Visibility::Restricted(vis_def_id) => {
         .                               if vis_def_id == self.tcx.parent_module(hir_id).to_def_id() {
         .                                   "private"
         .                               } else if vis_def_id.is_top_level_module() {
         .                                   "crate-private"
-- line 1762 ----------------------------------------
-- line 1792 ----------------------------------------
         .                   false
         .               }
         .           
         .               /// An item is 'leaked' from a private dependency if all
         .               /// of the following are true:
         .               /// 1. It's contained within a public type
         .               /// 2. It comes from a private crate
         .               fn leaks_private_dep(&self, item_id: DefId) -> bool {
 1,272,114 ( 0.00%)          let ret = self.required_visibility.is_public() && self.tcx.is_private_dep(item_id.krate);
         .           
         .                   tracing::debug!("leaks_private_dep(item_id={:?})={}", item_id, ret);
         .                   ret
         .               }
         .           }
         .           
         .           impl<'tcx> DefIdVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'tcx> {
         .               fn tcx(&self) -> TyCtxt<'tcx> {
   595,580 ( 0.00%)          self.tcx
         .               }
 6,784,608 ( 0.01%)      fn visit_def_id(
         .                   &mut self,
         .                   def_id: DefId,
         .                   kind: &str,
         .                   descr: &dyn fmt::Display,
         .               ) -> ControlFlow<Self::BreakTy> {
         .                   if self.check_def_id(def_id, kind, descr) {
         .                       ControlFlow::BREAK
         .                   } else {
         .                       ControlFlow::CONTINUE
         .                   }
 3,816,342 ( 0.01%)      }
         .           }
         .           
         .           struct PrivateItemsInPublicInterfacesVisitor<'tcx> {
         .               tcx: TyCtxt<'tcx>,
         .               has_pub_restricted: bool,
         .               old_error_set_ancestry: LocalDefIdSet,
         .           }
         .           
         .           impl<'tcx> PrivateItemsInPublicInterfacesVisitor<'tcx> {
         .               fn check(
         .                   &self,
         .                   def_id: LocalDefId,
         .                   required_visibility: ty::Visibility,
         .               ) -> SearchInterfaceForPrivateItemsVisitor<'tcx> {
   254,247 ( 0.00%)          SearchInterfaceForPrivateItemsVisitor {
    35,957 ( 0.00%)              tcx: self.tcx,
         .                       item_def_id: def_id,
         .                       required_visibility,
    36,383 ( 0.00%)              has_pub_restricted: self.has_pub_restricted,
         .                       has_old_errors: self.old_error_set_ancestry.contains(&def_id),
         .                       in_assoc_ty: false,
         .                   }
         .               }
         .           
   465,322 ( 0.00%)      fn check_assoc_item(
         .                   &self,
         .                   def_id: LocalDefId,
         .                   assoc_item_kind: AssocItemKind,
         .                   defaultness: hir::Defaultness,
         .                   vis: ty::Visibility,
         .               ) {
         .                   let mut check = self.check(def_id, vis);
         .           
    71,588 ( 0.00%)          let (check_ty, is_assoc_ty) = match assoc_item_kind {
         .                       AssocItemKind::Const | AssocItemKind::Fn { .. } => (true, false),
       174 ( 0.00%)              AssocItemKind::Type => (defaultness.has_value(), true),
         .                   };
    71,588 ( 0.00%)          check.in_assoc_ty = is_assoc_ty;
   143,176 ( 0.00%)          check.generics().predicates();
       174 ( 0.00%)          if check_ty {
    35,794 ( 0.00%)              check.ty();
         .                   }
   286,352 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'tcx> {
         .               type NestedFilter = nested_filter::OnlyBodies;
         .           
         .               fn nested_visit_map(&mut self) -> Self::Map {
    35,905 ( 0.00%)          self.tcx.hir()
         .               }
         .           
    26,757 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
     2,973 ( 0.00%)          let tcx = self.tcx;
     2,973 ( 0.00%)          let item_visibility = tcx.visibility(item.def_id);
         .           
    14,865 ( 0.00%)          match item.kind {
         .                       // Crates are always public.
         .                       hir::ItemKind::ExternCrate(..) => {}
         .                       // All nested items are checked by `visit_item`.
         .                       hir::ItemKind::Mod(..) => {}
         .                       // Checked in resolve.
         .                       hir::ItemKind::Use(..) => {}
         .                       // No subitems.
         .                       hir::ItemKind::Macro(..) | hir::ItemKind::GlobalAsm(..) => {}
         .                       // Subitems of these items have inherited publicity.
         .                       hir::ItemKind::Const(..)
         .                       | hir::ItemKind::Static(..)
         .                       | hir::ItemKind::Fn(..)
         .                       | hir::ItemKind::TyAlias(..) => {
       570 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates().ty();
         .                       }
         .                       hir::ItemKind::OpaqueTy(..) => {
         .                           // `ty()` for opaque types is the underlying type,
         .                           // it's not a part of interface, so we skip it.
         .                           self.check(item.def_id, item_visibility).generics().bounds();
         .                       }
        36 ( 0.00%)              hir::ItemKind::Trait(.., trait_item_refs) => {
        36 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates();
         .           
         .                           for trait_item_ref in trait_item_refs {
       288 ( 0.00%)                      self.check_assoc_item(
        48 ( 0.00%)                          trait_item_ref.id.def_id,
         .                                   trait_item_ref.kind,
         .                                   trait_item_ref.defaultness,
         .                                   item_visibility,
         .                               );
         .           
       141 ( 0.00%)                      if let AssocItemKind::Type = trait_item_ref.kind {
         .                                   self.check(trait_item_ref.id.def_id, item_visibility).bounds();
         .                               }
         .                           }
         .                       }
         .                       hir::ItemKind::TraitAlias(..) => {
         .                           self.check(item.def_id, item_visibility).generics().predicates();
         .                       }
         .                       hir::ItemKind::Enum(ref def, _) => {
        76 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates();
         .           
        19 ( 0.00%)                  for variant in def.variants {
        57 ( 0.00%)                      for field in variant.data.fields() {
         .                                   self.check(self.tcx.hir().local_def_id(field.hir_id), item_visibility).ty();
         .                               }
         .                           }
         .                       }
         .                       // Subitems of foreign modules have their own publicity.
         .                       hir::ItemKind::ForeignMod { items, .. } => {
         .                           for foreign_item in items {
         .                               let vis = tcx.visibility(foreign_item.id.def_id);
         .                               self.check(foreign_item.id.def_id, vis).generics().predicates().ty();
         .                           }
         .                       }
         .                       // Subitems of structs and unions have their own publicity.
         .                       hir::ItemKind::Struct(ref struct_def, _) | hir::ItemKind::Union(ref struct_def, _) => {
       408 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates();
         .           
       306 ( 0.00%)                  for field in struct_def.fields() {
       978 ( 0.00%)                      let def_id = tcx.hir().local_def_id(field.hir_id);
         .                               let field_visibility = tcx.visibility(def_id);
       489 ( 0.00%)                      self.check(def_id, min(item_visibility, field_visibility, tcx)).ty();
         .                           }
         .                       }
         .                       // An inherent impl is public when its type is public
         .                       // Subitems of inherent impls have their own publicity.
         .                       // A trait impl is public when both its type and its trait are public
         .                       // Subitems of trait impls have inherited publicity.
         .                       hir::ItemKind::Impl(ref impl_) => {
     8,532 ( 0.00%)                  let impl_vis = ty::Visibility::of_impl(item.def_id, tcx, &Default::default());
         .                           // check that private components do not appear in the generics or predicates of inherent impls
         .                           // this check is intentionally NOT performed for impls of traits, per #90586
     4,266 ( 0.00%)                  if impl_.of_trait.is_none() {
       190 ( 0.00%)                      self.check(item.def_id, impl_vis).generics().predicates();
         .                           }
     2,133 ( 0.00%)                  for impl_item_ref in impl_.items {
     4,082 ( 0.00%)                      let impl_item_vis = if impl_.of_trait.is_none() {
       433 ( 0.00%)                          min(tcx.visibility(impl_item_ref.id.def_id), impl_vis, tcx)
         .                               } else {
         .                                   impl_vis
         .                               };
   214,043 ( 0.00%)                      self.check_assoc_item(
    35,746 ( 0.00%)                          impl_item_ref.id.def_id,
         .                                   impl_item_ref.kind,
         .                                   impl_item_ref.defaultness,
         .                                   impl_item_vis,
         .                               );
         .                           }
         .                       }
         .                   }
    23,784 ( 0.00%)      }
         .           }
         .           
         .           pub fn provide(providers: &mut Providers) {
         8 ( 0.00%)      *providers = Providers {
         .                   visibility,
         .                   privacy_access_levels,
         .                   check_private_in_public,
         .                   check_mod_privacy,
         .                   ..*providers
         .               };
         1 ( 0.00%)  }
         .           
   353,556 ( 0.00%)  fn visibility(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Visibility {
    39,284 ( 0.00%)      let def_id = def_id.expect_local();
         .               match tcx.resolutions(()).visibilities.get(&def_id) {
     6,692 ( 0.00%)          Some(vis) => *vis,
         .                   None => {
         .                       let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);
   361,469 ( 0.00%)              match tcx.hir().get(hir_id) {
         .                           // Unique types created for closures participate in type privacy checking.
         .                           // They have visibilities inherited from the module they are defined in.
         .                           Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(..), .. }) => {
     1,284 ( 0.00%)                      ty::Visibility::Restricted(tcx.parent_module(hir_id).to_def_id())
         .                           }
         .                           // - AST lowering may clone `use` items and the clones don't
         .                           //   get their entries in the resolver's visibility table.
         .                           // - AST lowering also creates opaque type items with inherited visibilies.
         .                           //   Visibility on them should have no effect, but to avoid the visibility
         .                           //   query failing on some items, we provide it for opaque types as well.
         .                           Node::Item(hir::Item {
       411 ( 0.00%)                      vis,
         .                               kind: hir::ItemKind::Use(..) | hir::ItemKind::OpaqueTy(..),
         .                               ..
     2,466 ( 0.00%)                  }) => ty::Visibility::from_hir(vis, hir_id, tcx),
         .                           // Visibilities of trait impl items are inherited from their traits
         .                           // and are not filled in resolve.
         .                           Node::ImplItem(impl_item) => {
   459,069 ( 0.00%)                      match tcx.hir().get_by_def_id(tcx.hir().get_parent_item(hir_id)) {
         .                                   Node::Item(hir::Item {
         .                                       kind: hir::ItemKind::Impl(hir::Impl { of_trait: Some(tr), .. }),
         .                                       ..
    35,313 ( 0.00%)                          }) => tr.path.res.opt_def_id().map_or_else(
         .                                       || {
         .                                           tcx.sess.delay_span_bug(tr.path.span, "trait without a def-id");
         .                                           ty::Visibility::Public
         .                                       },
         .                                       |def_id| tcx.visibility(def_id),
         .                                   ),
         .                                   _ => span_bug!(impl_item.span, "the parent is not a trait impl"),
         .                               }
-- line 2021 ----------------------------------------
-- line 2023 ----------------------------------------
         .                           _ => span_bug!(
         .                               tcx.def_span(def_id),
         .                               "visibility table unexpectedly missing a def-id: {:?}",
         .                               def_id,
         .                           ),
         .                       }
         .                   }
         .               }
   314,272 ( 0.00%)  }
         .           
       184 ( 0.00%)  fn check_mod_privacy(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {
         .               // Check privacy of names not checked in previous compilation stages.
         .               let mut visitor =
        92 ( 0.00%)          NamePrivacyVisitor { tcx, maybe_typeck_results: None, current_item: module_def_id };
       207 ( 0.00%)      let (module, span, hir_id) = tcx.hir().get_module(module_def_id);
         .           
         .               intravisit::walk_mod(&mut visitor, module, hir_id);
         .           
         .               // Check privacy of explicitly written types and traits as well as
         .               // inferred types of expressions and patterns.
         .               let mut visitor =
       138 ( 0.00%)          TypePrivacyVisitor { tcx, maybe_typeck_results: None, current_item: module_def_id, span };
         .               intravisit::walk_mod(&mut visitor, module, hir_id);
       184 ( 0.00%)  }
         .           
         7 ( 0.00%)  fn privacy_access_levels(tcx: TyCtxt<'_>, (): ()) -> &AccessLevels {
         .               // Build up a set of all exported items in the AST. This is a set of all
         .               // items which are reachable from external crates based on visibility.
         9 ( 0.00%)      let mut visitor = EmbargoVisitor {
         .                   tcx,
         .                   access_levels: tcx.resolutions(()).access_levels.clone(),
         .                   macro_reachable: Default::default(),
         .                   prev_level: Some(AccessLevel::Public),
         .                   changed: false,
         .               };
         .           
         .               loop {
         .                   tcx.hir().walk_toplevel_module(&mut visitor);
         6 ( 0.00%)          if visitor.changed {
         6 ( 0.00%)              visitor.changed = false;
         .                   } else {
         .                       break;
         .                   }
         .               }
         .           
         1 ( 0.00%)      tcx.arena.alloc(visitor.access_levels)
         9 ( 0.00%)  }
         .           
         8 ( 0.00%)  fn check_private_in_public(tcx: TyCtxt<'_>, (): ()) {
         .               let access_levels = tcx.privacy_access_levels(());
         .           
         9 ( 0.00%)      let mut visitor = ObsoleteVisiblePrivateTypesVisitor {
         .                   tcx,
         .                   access_levels,
         .                   in_variant: false,
         .                   old_error_set: Default::default(),
         .               };
         .               tcx.hir().walk_toplevel_module(&mut visitor);
         .           
         .               let has_pub_restricted = {
         5 ( 0.00%)          let mut pub_restricted_visitor = PubRestrictedVisitor { tcx, has_pub_restricted: false };
         .                   tcx.hir().walk_toplevel_module(&mut pub_restricted_visitor);
         1 ( 0.00%)          pub_restricted_visitor.has_pub_restricted
         .               };
         .           
         .               let mut old_error_set_ancestry = HirIdSet::default();
         9 ( 0.00%)      for mut id in visitor.old_error_set.iter().copied() {
         .                   loop {
       742 ( 0.00%)              if !old_error_set_ancestry.insert(id) {
         .                           break;
         .                       }
     1,425 ( 0.00%)              let parent = tcx.hir().get_parent_node(id);
       856 ( 0.00%)              if parent == id {
         .                           break;
         .                       }
         .                       id = parent;
         .                   }
         .               }
         .           
         .               // Check for private types and traits in public interfaces.
         8 ( 0.00%)      let mut visitor = PrivateItemsInPublicInterfacesVisitor {
         .                   tcx,
         .                   has_pub_restricted,
         .                   // Only definition IDs are ever searched in `old_error_set_ancestry`,
         .                   // so we can filter away all non-definition IDs at this point.
         .                   old_error_set_ancestry: old_error_set_ancestry
         .                       .into_iter()
         .                       .filter_map(|hir_id| tcx.hir().opt_local_def_id(hir_id))
         .                       .collect(),
         .               };
         6 ( 0.00%)      tcx.hir().visit_all_item_likes(&mut DeepVisitor::new(&mut visitor));
         8 ( 0.00%)  }

18,753,300 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S

--------------------------------------------------------------------------------
Ir                      
--------------------------------------------------------------------------------
13,826,814,724 (20.22%)  events annotated

